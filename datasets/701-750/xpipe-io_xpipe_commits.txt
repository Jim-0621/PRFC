File: app/src/main/java/io/xpipe/app/terminal/WaveTerminalType.java
Patch:
@@ -54,7 +54,7 @@ default void launch(TerminalLaunchConfiguration configuration) throws Exception
 
             sc.command(CommandBuilder.of()
                             .addFile("wsh")
-                            .add("run", "--forceexit", "--")
+                            .add("run", "--forceexit", "--delay", "0", "--")
                             .add(configuration.getDialectLaunchCommand()))
                     .execute();
         }

File: app/src/main/java/io/xpipe/app/terminal/WaveTerminalType.java
Patch:
@@ -47,7 +47,7 @@ default void launch(TerminalLaunchConfiguration configuration) throws Exception
                 var msg = """
                 The Wave integration requires XPipe to be launched from Wave itself to have access to its environment variables. Otherwise, XPipe does not have access to the token to control Wave.
                 
-                You can do this by running the command "%s" in a local terminal inside Wave.
+                You can do this by running the command "%s" in a local terminal block inside Wave.
                 """.formatted(inPath ? "xpipe open" : XPipeInstallation.getLocalDefaultCliExecutable() + " open");
                 throw ErrorEvent.expected(new IllegalStateException(msg));
             }

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -178,6 +178,7 @@ public synchronized void update() {
         validity.setValue(entry.getValidity());
         expanded.setValue(entry.isExpanded());
         persistentState.setValue(entry.getStorePersistentState());
+        persistentState.getValue();
         // Use map copy to recognize update
         // This is a synchronized map, so we synchronize the access
         synchronized (entry.getStoreCache()) {

File: app/src/main/java/io/xpipe/app/util/DesktopHelper.java
Patch:
@@ -37,7 +37,7 @@ public static Path getDownloadsDirectory() throws Exception {
         } else if (OsType.getLocal() == OsType.LINUX) {
             try (var sc = LocalShell.getShell().start()) {
                 var out = sc.command("xdg-user-dir DOWNLOAD").readStdoutIfPossible();
-                if (out.isPresent()) {
+                if (out.isPresent() && !out.get().isBlank()) {
                     return Path.of(out.get());
                 }
             }

File: app/src/main/java/io/xpipe/app/core/AppArguments.java
Patch:
@@ -97,7 +97,7 @@ public static LauncherCommand resolveLauncher(String[] args) {
                 var converted = t instanceof CommandLine.UnmatchedArgumentException u
                         ? new IllegalArgumentException(u.getMessage())
                         : t;
-                var e = ErrorEvent.fromThrowable(converted).term().build();
+                var e = ErrorEvent.fromThrowable(converted).expected().term().build();
                 // Print error in case we launched from the command-line
                 new LogErrorHandler().handle(e);
                 e.handle();

File: app/src/main/java/io/xpipe/app/core/window/AppMainWindow.java
Patch:
@@ -339,7 +339,7 @@ private void applyState(WindowState state) {
     }
 
     private void saveState() {
-        if (!AppPrefs.get().saveWindowLocation().get()) {
+        if (AppPrefs.get() == null || !AppPrefs.get().saveWindowLocation().get()) {
             return;
         }
 

File: core/src/main/java/io/xpipe/core/store/DataStoreState.java
Patch:
@@ -1,8 +1,10 @@
 package io.xpipe.core.store;
 
+import lombok.EqualsAndHashCode;
 import lombok.experimental.SuperBuilder;
 
 @SuperBuilder(toBuilder = true)
+@EqualsAndHashCode
 public abstract class DataStoreState {
 
     public DataStoreState() {}

File: app/src/main/java/io/xpipe/app/core/AppExtensionManager.java
Patch:
@@ -106,7 +106,7 @@ private void determineExtensionDirectories() throws Exception {
                     .orElseThrow(() -> new IllegalArgumentException("Invalid source version: " + sv));
             if (AppProperties.get().isLocatorVersionCheck() && !installVersion.equals(sourceVersion)) {
                 throw new IllegalStateException(
-                        "Incompatible development version. Source: " + iv + ", Installation: " + sv
+                        "Incompatible development version. Source: " + sv + ", Installation: " + iv
                                 + "\n\nPlease try to check out the matching release version in the repository. See https://github.com/xpipe-io/xpipe/blob/master/CONTRIBUTING.md#development-setup");
             }
 

File: ext/base/src/main/java/io/xpipe/ext/base/identity/SyncedIdentityStoreProvider.java
Patch:
@@ -43,7 +43,7 @@ public GuiDialog guiDialog(DataStoreEntry entry, Property<DataStore> store) {
         var identity = new SimpleObjectProperty<>(st.getSshIdentity());
         var perUser = new SimpleBooleanProperty(st.isPerUser());
         perUser.addListener((observable, oldValue, newValue) -> {
-            if (!(identity.getValue() instanceof SshIdentityStrategy.File f) || f.getFile() == null) {
+            if (!(identity.getValue() instanceof SshIdentityStrategy.File f) || f.getFile() == null || !f.getFile().isInDataDirectory()) {
                 return;
             }
 

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -20,6 +20,8 @@ public void handle(ErrorEvent event) {
 
         if (event.isOmitted() || OperationMode.isInShutdown()) {
             ErrorAction.ignore().handle(event);
+            // Wait a bit to the beacon the ability to respond to any open requests with an error
+            ThreadHelper.sleep(3000);
             OperationMode.halt(1);
             return;
         }

File: app/src/main/java/io/xpipe/app/beacon/impl/ConnectionAddExchangeImpl.java
Patch:
@@ -50,7 +50,7 @@ public Object handle(HttpExchange exchange, Request msg) throws Throwable {
         // Explicitly assign category
         if (msg.getCategory() != null) {
             DataStorage.get()
-                    .updateCategory(
+                    .moveEntryToCategory(
                             entry,
                             DataStorage.get()
                                     .getStoreCategoryIfPresent(msg.getCategory())

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -313,7 +313,7 @@ protected ContextMenu createContextMenu() {
             contextMenu.getItems().add(copyId);
         }
 
-        if (DataStorage.get().isRootEntry(getWrapper().getEntry())) {
+        if (section.getDepth() == 1) {
             var color = new Menu(AppI18n.get("color"), new FontIcon("mdi2f-format-color-fill"));
             var none = new MenuItem();
             none.textProperty().bind(AppI18n.observable("none"));

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -85,7 +85,7 @@ public void applyLastAccess() {
 
     public void moveTo(DataStoreCategory category) {
         ThreadHelper.runAsync(() -> {
-            DataStorage.get().updateCategory(entry, category);
+            DataStorage.get().moveEntryToCategory(entry, category);
         });
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreSection.java
Patch:
@@ -118,7 +118,7 @@ public static StoreSection createTopLevel(
             ObservableIntegerValue updateObservable) {
         var topLevel = all.filtered(
                 section -> {
-                    return DataStorage.get().isRootEntry(section.getEntry());
+                    return DataStorage.get().isRootEntry(section.getEntry(), category.getValue().getCategory());
                 },
                 category,
                 updateObservable);
@@ -209,7 +209,7 @@ private static StoreSection create(
                             // If this entry is already shown as root due to a different category than parent, don't
                             // show it
                             // again here
-                            !DataStorage.get().isRootEntry(section.getWrapper().getEntry());
+                            !DataStorage.get().isRootEntry(section.getWrapper().getEntry(), category.getValue().getCategory());
                 },
                 category,
                 filterString,

File: app/src/main/java/io/xpipe/app/storage/ImpersistentStorage.java
Patch:
@@ -53,6 +53,9 @@ public void load() {
         e.validate();
     }
 
+    @Override
+    public void saveAsync() {}
+
     @Override
     public synchronized void save(boolean dispose) {}
 

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -98,8 +98,8 @@ private static void setup(String[] args) {
             TrackEvent.info("Initial setup");
             AppMainWindow.loadingText("initializingApp");
             AppProperties.init(args);
-            AppTempCheck.check();
             AppLogs.init();
+            AppTempCheck.check();
             AppDebugModeCheck.printIfNeeded();
             AppProperties.logSystemProperties();
             AppProperties.get().logArguments();

File: app/src/main/java/io/xpipe/app/issue/EventHandlerImpl.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.app.core.AppLogs;
 import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.core.mode.OperationMode;
+import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.core.util.Deobfuscator;
 
 import java.nio.file.Path;
@@ -33,7 +34,7 @@ public void handle(TrackEvent te) {
 
     @Override
     public void handle(ErrorEvent ee) {
-        if (AppProperties.get().isAotTrainMode()) {
+        if (AppProperties.get() != null && AppProperties.get().isAotTrainMode()) {
             new LogErrorHandler().handle(ee);
             if (ee.isTerminal()) {
                 OperationMode.halt(1);

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -77,7 +77,7 @@ private void handleProbableUpdate() {
             var rel = XPipeDistributionType.get().getUpdateHandler().refreshUpdateCheck(false, false);
             if (rel != null && rel.isUpdate()) {
                 var updateModal =
-                        ModalOverlay.of("updateAvailableTitle", AppDialog.dialogTextKey("updateAvailableContent"));
+                        ModalOverlay.of("updateAvailableTitle", AppDialog.dialogText(AppI18n.get("updateAvailableContent", rel.getVersion())));
                 updateModal.addButton(
                         new ModalButton("checkOutUpdate", () -> Hyperlinks.open(rel.getReleaseUrl()), false, true));
                 updateModal.addButton(new ModalButton("ignore", null, true, false));

File: ext/base/src/main/java/io/xpipe/ext/base/script/ScriptStore.java
Patch:
@@ -158,8 +158,8 @@ public static List<DataStoreEntryRef<ScriptStore>> getEnabledScripts() {
 
     public static List<DataStoreEntryRef<SimpleScriptStore>> flatten(List<DataStoreEntryRef<ScriptStore>> scripts) {
         var seen = new LinkedHashSet<DataStoreEntryRef<SimpleScriptStore>>();
-        scripts.forEach(scriptStoreDataStoreEntryRef ->
-                scriptStoreDataStoreEntryRef.getStore().queryFlattenedScripts(seen));
+        scripts.stream().filter(scriptStoreDataStoreEntryRef -> scriptStoreDataStoreEntryRef.get().getValidity().isUsable())
+                .forEach(scriptStoreDataStoreEntryRef -> scriptStoreDataStoreEntryRef.getStore().queryFlattenedScripts(seen));
 
         var dependencies =
                 new HashMap<DataStoreEntryRef<? extends ScriptStore>, Set<DataStoreEntryRef<SimpleScriptStore>>>();

File: app/src/main/java/io/xpipe/app/terminal/KittyTerminalType.java
Patch:
@@ -191,7 +191,7 @@ private boolean prepare() throws Exception {
 
                 var time = System.currentTimeMillis();
                 sc.executeSimpleCommand(CommandBuilder.of()
-                        .add("open", "-a", "kitty.app", "--args")
+                        .add("open", "-n", "-a", "kitty.app", "--args")
                         .add("-o", "allow_remote_control=socket-only", "--listen-on", "unix:" + getSocket()));
                 var elapsed = System.currentTimeMillis() - time;
                 // Good heuristic on how long to wait

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -46,7 +46,7 @@ public MacApplication(String id, String applicationName) {
         public boolean isAvailable() {
             try (ShellControl pc = LocalShell.getShell().start()) {
                 var out = pc.command(String.format(
-                                "mdfind -literal 'kMDItemDisplayName = \"%s.app\"' -onlyin /Applications -onlyin ~/Applications -onlyin /System/Applications",
+                                "mdfind -literal 'kMDItemFSName = \"%s.app\"' -onlyin /Applications -onlyin ~/Applications -onlyin /System/Applications",
                                 applicationName))
                         .readStdoutIfPossible();
                 return out.isPresent() && !out.get().isBlank();

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -46,7 +46,7 @@ public MacApplication(String id, String applicationName) {
         public boolean isAvailable() {
             try (ShellControl pc = LocalShell.getShell().start()) {
                 var out = pc.command(String.format(
-                                "mdfind -name '%s.app' -onlyin /Applications -onlyin ~/Applications -onlyin /System/Applications",
+                                "mdfind -literal 'kMDItemDisplayName = \"%s.app\"' -onlyin /Applications -onlyin ~/Applications -onlyin /System/Applications",
                                 applicationName))
                         .readStdoutIfPossible();
                 return out.isPresent() && !out.get().isBlank();

File: app/src/main/java/io/xpipe/app/prefs/ExternalRdpClientType.java
Patch:
@@ -131,7 +131,7 @@ public boolean supportsPasswordPassing() {
         }
     };
     ExternalRdpClientType MICROSOFT_REMOTE_DESKTOP_MACOS_APP =
-            new MacOsType("app.microsoftRemoteDesktopApp", "Microsoft Remote Desktop.app") {
+            new MacOsType("app.microsoftRemoteDesktopApp", "Microsoft Remote Desktop") {
 
                 @Override
                 public void launch(LaunchConfiguration configuration) throws Exception {
@@ -150,7 +150,7 @@ public boolean supportsPasswordPassing() {
             };
 
     ExternalRdpClientType WINDOWS_APP_MACOS =
-            new MacOsType("app.windowsApp", "Windows App.app") {
+            new MacOsType("app.windowsApp", "Windows App") {
 
                 @Override
                 public void launch(LaunchConfiguration configuration) throws Exception {

File: app/src/main/java/io/xpipe/app/browser/BrowserFullSessionModel.java
Patch:
@@ -142,7 +142,7 @@ public void pinTab(BrowserSessionTab tab) {
         globalPinnedTab.setValue(tab);
 
         var previousOthers = previousTabs.stream()
-                .filter(browserSessionTab -> browserSessionTab != tab)
+                .filter(browserSessionTab -> browserSessionTab != tab && browserSessionTab.isCloseable())
                 .toList();
         if (previousOthers.size() > 0) {
             var prev = previousOthers.getLast();

File: app/src/main/java/io/xpipe/app/browser/BrowserSessionTabsComp.java
Patch:
@@ -437,7 +437,7 @@ private Tab createTab(TabPane tabs, BrowserSessionTab tabModel) {
         Comp<?> comp = tabModel.comp();
         var compRegion = comp.createRegion();
         var empty = new StackPane();
-        empty.setMinWidth(100);
+        empty.setMinWidth(450);
         empty.widthProperty().addListener((observable, oldValue, newValue) -> {
             if (tabModel.isCloseable() && tabs.getSelectionModel().getSelectedItem() == tab) {
                 rightPadding.setValue(newValue.doubleValue());

File: app/src/main/java/io/xpipe/app/prefs/ExternalRdpClientType.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.app.prefs;
 
+import com.vladsch.flexmark.util.misc.FileUtil;
 import io.xpipe.app.ext.PrefsChoiceValue;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.util.*;
@@ -8,6 +9,7 @@
 import io.xpipe.core.util.SecretValue;
 
 import lombok.Value;
+import org.apache.commons.io.FileUtils;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -35,7 +37,7 @@ public void launch(LaunchConfiguration configuration) throws Exception {
                     .executeSimpleCommand(CommandBuilder.of().add(executable).addFile(file.toString()));
             ThreadHelper.runFailableAsync(() -> {
                 ThreadHelper.sleep(1000);
-                Files.delete(file);
+                FileUtils.deleteQuietly(file.toFile());
             });
         }
 

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -138,7 +138,7 @@ private static void fillScope(ErrorEvent ee, IScope s) {
             atts.forEach(attachment -> s.addAttachment(attachment));
         }
 
-        s.setTag("hasLicense", String.valueOf(LicenseProvider.get().hasPaidLicense()));
+        s.setTag("hasLicense", String.valueOf(LicenseProvider.get() != null ? LicenseProvider.get().hasPaidLicense() : null));
         s.setTag(
                 "updatesEnabled",
                 AppPrefs.get() != null
@@ -172,6 +172,7 @@ private static void fillScope(ErrorEvent ee, IScope s) {
                 AppPrefs.get() != null
                         ? String.valueOf(AppPrefs.get().useLocalFallbackShell().get())
                         : "unknown");
+        s.setTag("initial", AppProperties.get() != null ? AppProperties.get().isInitialLaunch() + "" : null);
 
         var exMessage = ee.getThrowable() != null ? ee.getThrowable().getMessage() : null;
         if (ee.getDescription() != null

File: app/src/main/java/io/xpipe/app/util/JsonConfigHelper.java
Patch:
@@ -33,7 +33,7 @@ public static JsonNode readRaw(Path in) {
                     .build()
                     .handle();
         } catch (IOException e) {
-            ErrorEvent.fromThrowable("Unable to parse file " + in, e).build().handle();
+            ErrorEvent.fromThrowable("Unable to parse file " + in, e).expected().build().handle();
         }
         return JsonNodeFactory.instance.missingNode();
     }
@@ -52,7 +52,7 @@ public static void writeConfig(Path out, JsonNode node) {
         try {
             FileUtils.forceMkdirParent(out.toFile());
         } catch (IOException e) {
-            ErrorEvent.fromThrowable(e).build().handle();
+            ErrorEvent.fromThrowable(e).expected().build().handle();
             return;
         }
 
@@ -63,7 +63,7 @@ public static void writeConfig(Path out, JsonNode node) {
             var newContent = writer.toString();
             Files.writeString(out, newContent);
         } catch (IOException e) {
-            ErrorEvent.fromThrowable("Unable to write file " + out, e).build().handle();
+            ErrorEvent.fromThrowable("Unable to write file " + out, e).expected().build().handle();
         }
     }
 }

File: core/src/main/java/io/xpipe/core/store/SingletonSessionStore.java
Patch:
@@ -48,16 +48,17 @@ default void startSessionIfNeeded() throws Exception {
             }
 
             try {
+                setSessionEnabled(true);
                 s = newSession();
                 if (s != null) {
-                    setSessionEnabled(true);
                     s.start();
                     setCache("session", s);
                     onStateChange(true);
                 } else {
                     setSessionEnabled(false);
                 }
             } catch (Exception ex) {
+                setSessionEnabled(false);
                 onStateChange(false);
                 throw ex;
             }

File: ext/base/src/main/java/io/xpipe/ext/base/action/RunScriptActionMenu.java
Patch:
@@ -86,6 +86,7 @@ private class Action implements ActionProvider.Action {
             @Override
             public void execute() throws Exception {
                 var sc = shellStore.getStore().getOrStartSession();
+                sc.checkLicenseOrThrow();
                 var script = hierarchy.getLeafBase().getStore().assembleScriptChain(sc);
                 sc.command(script).execute();
             }

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -156,9 +156,7 @@ public synchronized void update() {
         iconFile.setValue(entry.getEffectiveIconFile());
 
         busy.setValue(entry.getBusyCounter().get() != 0);
-        deletable.setValue(entry.getConfiguration().isDeletable()
-                || (AppPrefs.get().developerMode().getValue()
-                        && AppPrefs.get().developerDisableGuiRestrictions().getValue()));
+        deletable.setValue(entry.getConfiguration().isDeletable());
         sessionActive.setValue(entry.getStore() instanceof SingletonSessionStore<?> ss
                 && entry.getStore() instanceof ShellStore
                 && ss.isSessionRunning());

File: app/src/main/java/io/xpipe/app/prefs/DeveloperCategory.java
Patch:
@@ -63,8 +63,6 @@ protected Comp<?> create() {
                         .addToggle(prefs.developerDisableUpdateVersionCheck)
                         .nameAndDescription("developerForceSshTty")
                         .addToggle(prefs.developerForceSshTty)
-                        .nameAndDescription("developerDisableGuiRestrictions")
-                        .addToggle(prefs.developerDisableGuiRestrictions)
                         .nameAndDescription("shellCommandTest")
                         .addComp(runLocalCommand))
                 .buildComp();

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -974,6 +974,6 @@ public DataStoreEntry getStoreEntry(UUID id) {
     }
 
     public DataStoreEntry local() {
-        return getStoreEntryIfPresent(LOCAL_ID).orElseThrow(() -> new IllegalStateException("Missing local machine connection"));
+        return getStoreEntryIfPresent(LOCAL_ID).orElseThrow(() -> new IllegalStateException("Missing local machine connection, restart is required to fix this"));
     }
 }

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -243,7 +243,7 @@ public void load() {
                 addStoreEntryIfNotPresent(entry1);
             });
         });
-        // Update validaties from synthetic parent I changes
+        // Update validaties from synthetic parent changes
         refreshEntries();
 
         if (!hasFixedLocal) {

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -26,7 +26,7 @@ public static void showIfNeeded() {
             Note that you can also install the latest version manually from %s
             if there are any problems with the automatic update installation.
             """
-                                    .formatted(Hyperlinks.GITHUB + "/releases/latest"))
+                                    .formatted(Hyperlinks.GITHUB_LATEST))
                     .handle();
             return;
         }

File: app/src/main/java/io/xpipe/app/util/Hyperlinks.java
Patch:
@@ -8,6 +8,7 @@ public class Hyperlinks {
     public static final String AGENT_SETUP = "https://docs.xpipe.io/ssh-agent-socket";
     public static final String GITHUB = "https://github.com/xpipe-io/xpipe?ref=xpipe.app";
     public static final String GITHUB_PTB = "https://github.com/xpipe-io/xpipe-ptb?ref=xpipe.app";
+    public static final String GITHUB_LATEST = "https://github.com/xpipe-io/xpipe/releases/latest";
     public static final String PRIVACY = "https://docs.xpipe.io/privacy-policy";
     public static final String EULA = "https://docs.xpipe.io/end-user-license-agreement";
     public static final String SECURITY = "https://docs.xpipe.io/security";

File: app/src/main/java/io/xpipe/app/core/check/AppHomebrewCoreutilsCheck.java
Patch:
@@ -29,7 +29,6 @@ public static void check() {
             ErrorEvent.fromMessage("You have the homebrew coreutils package installed and added to your PATH." +
                             " The coreutils commands overwrite and are incompatible to the native macOS commands, which XPipe expects." +
                             " Please remove the coreutils commands from your PATH prior to launching XPipe.")
-                    .noDefaultActions()
                     .term()
                     .handle();
         }

File: app/src/main/java/io/xpipe/app/browser/BrowserFullSessionModel.java
Patch:
@@ -135,8 +135,8 @@ public void pinTab(BrowserSessionTab tab) {
         globalPinnedTab.setValue(tab);
 
         var previousOthers = previousTabs.stream().filter(browserSessionTab -> browserSessionTab != tab).toList();
-        var prev = previousOthers.getLast();
-        if (prev != null) {
+        if (previousOthers.size() > 0) {
+            var prev = previousOthers.getLast();
             getSelectedEntry().setValue(prev);
         }
     }

File: app/src/main/java/io/xpipe/app/core/AppDesktopIntegration.java
Patch:
@@ -55,7 +55,9 @@ public void systemAwoke(SystemSleepEvent e) {
                         return;
                     }
 
-                    AppLayoutModel.get().selectSettings();
+                    if (AppLayoutModel.get() != null) {
+                        AppLayoutModel.get().selectSettings();
+                    }
                 });
 
                 // URL open operations have to be handled in a special way on macOS!

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -48,6 +48,7 @@ public void onSwitchTo() throws Throwable {
         LicenseProvider.get().init();
         AppCertutilCheck.check();
         AppBundledToolsCheck.check();
+        AppHomebrewCoreutilsCheck.check();
         AppAvCheck.check();
         AppJavaOptionsCheck.check();
         AppSid.init();

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileSystemTabModel.java
Patch:
@@ -113,7 +113,8 @@ public void close() {
             }
 
             var current = getCurrentDirectory();
-            if (DataStorage.get().getStoreEntries().contains(getEntry().get())
+            // We might close this after storage shutdown
+            if (DataStorage.get() != null && DataStorage.get().getStoreEntries().contains(getEntry().get())
                     && savedState != null
                     && current != null) {
                 savedState.cd(current.getPath(), false);

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -390,11 +390,13 @@ protected ContextMenu createContextMenu() {
                 .bind(Bindings.createBooleanBinding(
                         () -> {
                             return !getWrapper().getDeletable().get()
+                                    && AppPrefs.get().developerMode().getValue()
                                     && !AppPrefs.get()
                                             .developerDisableGuiRestrictions()
                                             .get();
                         },
                         getWrapper().getDeletable(),
+                        AppPrefs.get().developerMode(),
                         AppPrefs.get().developerDisableGuiRestrictions()));
         del.setOnAction(event -> getWrapper().delete());
         contextMenu.getItems().add(del);

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -157,7 +157,7 @@ public synchronized void update() {
 
         busy.setValue(entry.getBusyCounter().get() != 0);
         deletable.setValue(entry.getConfiguration().isDeletable()
-                || AppPrefs.get().developerDisableGuiRestrictions().getValue());
+                || (AppPrefs.get().developerMode().getValue() && AppPrefs.get().developerDisableGuiRestrictions().getValue()));
         sessionActive.setValue(entry.getStore() instanceof SingletonSessionStore<?> ss
                 && entry.getStore() instanceof ShellStore
                 && ss.isSessionRunning());

File: app/src/main/java/io/xpipe/app/core/check/AppUserDirectoryCheck.java
Patch:
@@ -7,12 +7,11 @@
 
 import java.io.IOException;
 import java.nio.file.Files;
+import java.nio.file.Path;
 
 public class AppUserDirectoryCheck {
 
-    public static void check() {
-        var dataDirectory = AppProperties.get().getDataDir();
-
+    public static void check(Path dataDirectory) {
         try {
             FileUtils.forceMkdir(dataDirectory.toFile());
             var testDirectory = dataDirectory.resolve("permissions_check");

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -115,7 +115,6 @@ private static void setup(String[] args) {
 
             TrackEvent.info("Initial setup");
             AppProperties.init();
-            AppUserDirectoryCheck.check();
             AppTempCheck.check();
             AppLogs.init();
             AppDebugModeCheck.printIfNeeded();

File: core/src/main/java/io/xpipe/core/store/NetworkTunnelStore.java
Patch:
@@ -42,7 +42,7 @@ default boolean requiresTunnel() {
         }
     }
 
-    default boolean isLocallyTunneable() {
+    default boolean isLocallyTunnelable() {
         NetworkTunnelStore current = this;
         while (true) {
             if (current.getNetworkParent() == null) {
@@ -58,7 +58,7 @@ default boolean isLocallyTunneable() {
     }
 
     default NetworkTunnelSession sessionChain(int local, int remotePort, String address) throws Exception {
-        if (!isLocallyTunneable()) {
+        if (!isLocallyTunnelable()) {
             throw new IllegalStateException(
                     "Unable to create tunnel chain as one intermediate system does not support tunneling");
         }

File: ext/base/src/main/java/io/xpipe/ext/base/service/CustomServiceStoreProvider.java
Patch:
@@ -39,7 +39,7 @@ public GuiDialog guiDialog(DataStoreEntry entry, Property<DataStore> store) {
                         StoreChoiceComp.other(
                                 host,
                                 NetworkTunnelStore.class,
-                                n -> n.getStore().isLocallyTunneable(),
+                                n -> n.getStore().isLocallyTunnelable(),
                                 StoreViewState.get().getAllConnectionsCategory()),
                         host)
                 .nonNull()

File: app/src/main/java/io/xpipe/app/issue/ErrorHandlerComp.java
Patch:
@@ -138,6 +138,9 @@ public static void showAndWaitWithOtherThread(ErrorEvent event) {
                 } catch (Throwable t) {
                     t.printStackTrace();
                 }
+            } else {
+                showLatch.countDown();
+                finishLatch.countDown();
             }
         });
 

File: core/src/main/java/io/xpipe/core/process/CommandBuilder.java
Patch:
@@ -176,7 +176,7 @@ public CommandBuilder prependQuoted(String s) {
         return prepend("\"" + s + "\"");
     }
 
-    public CommandBuilder addFile(Function<ShellControl, String> f) {
+    public CommandBuilder addFile(FailableFunction<ShellControl, String, Exception> f) {
         elements.add(sc -> {
             if (f == null) {
                 return null;

File: app/src/main/java/io/xpipe/app/prefs/LoggingCategory.java
Patch:
@@ -7,6 +7,7 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.util.DesktopHelper;
 import io.xpipe.app.util.LicenseProvider;
+import io.xpipe.app.util.LicensedFeature;
 import io.xpipe.app.util.OptionsBuilder;
 
 import java.io.IOException;
@@ -22,9 +23,8 @@ protected String getId() {
     @Override
     protected Comp<?> create() {
         var prefs = AppPrefs.get();
-        var supported = LicenseProvider.get()
-                .getFeature("logging")
-                .isSupported();
+        var feature = LicenseProvider.get().getFeature("logging");
+        var supported = feature.isSupported() || feature.isPreviewSupported();
         var title = AppI18n.observable("sessionLogging")
                 .map(s -> s + (supported
                         ? ""

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -66,9 +66,10 @@ public static void open(DataStoreEntry entry, String title, String directory, Pr
         var prefix = entry != null && color != null && type.supportsColoredTitle() ? color.getEmoji() + " " : "";
         var cleanTitle = (title != null ? title : entry != null ? entry.getName() : "?");
         var adjustedTitle = prefix + cleanTitle;
+        var log = AppPrefs.get().enableTerminalLogging().get();
         var terminalConfig = new TerminalInitScriptConfig(
                 adjustedTitle,
-                type.shouldClear() && AppPrefs.get().clearTerminalOnInit().get(),
+                !log && type.shouldClear() && AppPrefs.get().clearTerminalOnInit().get(),
                 cc instanceof ShellControl ? type.additionalInitCommands() : TerminalInitFunction.none());
         var request = UUID.randomUUID();
         var config = createConfig(request, entry, cleanTitle, adjustedTitle);
@@ -129,7 +130,7 @@ private static ExternalTerminalType.LaunchConfiguration createConfig(
             } else {
                 var content =
                         """
-                              script --command "%s" "%s"
+                              script --quiet --command "%s" "%s"
                               """
                                 .formatted(preparationScript, logFile);
                 var ps = ScriptHelper.createExecScript(sc.getShellDialect(), sc, content);

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -129,7 +129,7 @@ private static ExternalTerminalType.LaunchConfiguration createConfig(
             } else {
                 var content =
                         """
-                              script -Command "%s" "%s"
+                              script --command "%s" "%s"
                               """
                                 .formatted(preparationScript, logFile);
                 var ps = ScriptHelper.createExecScript(sc.getShellDialect(), sc, content);

File: app/src/main/java/io/xpipe/app/browser/BrowserOverviewComp.java
Patch:
@@ -43,6 +43,7 @@ protected Region createSimple() {
         var commonPlatform = FXCollections.<FileEntry>observableArrayList();
         ThreadHelper.runFailableAsync(() -> {
             var common = sc.getOsType().determineInterestingPaths(sc).stream()
+                    .filter(s -> !s.isBlank())
                     .map(s -> FileEntry.ofDirectory(model.getFileSystem(), s))
                     .filter(entry -> {
                         try {

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileTransferOperation.java
Patch:
@@ -199,7 +199,7 @@ private String renameFileLoop(FileSystem fileSystem, String target, boolean dir)
     private String renameFile(String target) {
         var targetFile = new FilePath(target);
         var name = targetFile.getFileName();
-        var pattern = Pattern.compile("(.+?) \\((\\d+)\\)\\.(.+)");
+        var pattern = Pattern.compile("(.+) \\((\\d+)\\)\\.(.+?)");
         var matcher = pattern.matcher(name);
         if (matcher.matches()) {
             try {
@@ -209,7 +209,8 @@ private String renameFile(String target) {
             } catch (NumberFormatException e) {}
         }
 
-        return targetFile.getBaseName() + " (" + 1 + ")." + targetFile.getExtension();
+        var noExt = targetFile.getFileName().equals(targetFile.getExtension());
+        return targetFile.getBaseName() + " (" + 1 + ")" + (noExt ? "" : "." + targetFile.getExtension());
     }
 
     private void handleSingleAcrossFileSystems(FileEntry source) throws Exception {

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileTransferOperation.java
Patch:
@@ -253,7 +253,7 @@ private void transfer(
             var streamStartLength = inputStream.read(streamStart, 0, 1024);
             if (streamStartLength < 1024) {
                 inputStream.close();
-                inputStream = new ByteArrayInputStream(streamStart);
+                inputStream = new ByteArrayInputStream(streamStart, 0, streamStartLength);
             } else {
                 inputStream.reset();
             }

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -76,7 +76,7 @@ public static void open(DataStoreEntry entry, String title, String directory, Pr
             type.launch(config);
             latch.await();
         } catch (Exception ex) {
-            var modMsg = ex.getMessage() != null && ex.getMessage().contains("Unable to find application named") ? ex.getMessage() + " in installed Applications on this system" : ex.getMessage();
+            var modMsg = ex.getMessage() != null && ex.getMessage().contains("Unable to find application named") ? ex.getMessage() + " in installed /Applications on this system" : ex.getMessage();
             throw ErrorEvent.expected(new IOException("Unable to launch terminal " + type.toTranslatedString().getValue() + ": "  + modMsg, ex));
         }
     }

File: app/src/main/java/io/xpipe/app/core/check/AppShellCheck.java
Patch:
@@ -15,9 +15,11 @@ public class AppShellCheck {
     public static void check() throws Exception {
         var err = selfTestErrorCheck();
 
+        // We don't want to fall back on macOS as occasional zsh spawn issues would cause many users to use sh
         var canFallback = !ProcessControlProvider.get()
                 .getEffectiveLocalDialect()
-                .equals(ProcessControlProvider.get().getFallbackDialect());
+                .equals(ProcessControlProvider.get().getFallbackDialect()) &&
+                OsType.getLocal() != OsType.MACOS;
         if (err.isPresent() && canFallback) {
             var msg = formatMessage(err.get().getMessage());
             ErrorEvent.fromThrowable(new IllegalStateException(msg)).handle();

File: app/src/main/java/io/xpipe/app/core/AppTheme.java
Patch:
@@ -114,7 +114,7 @@ public static void init() {
                     }
                 });
             });
-        } catch (UnsupportedOperationException ex) {
+        } catch (IllegalStateException ex) {
             // The platform preferences are sometimes not initialized yet
             ErrorEvent.fromThrowable(ex).expected().omit().handle();
         } catch (Throwable t) {
@@ -140,7 +140,7 @@ private static void setDefault() {
             } else {
                 AppPrefs.get().theme.setValue(Theme.getDefaultLightTheme());
             }
-        } catch (UnsupportedOperationException ex) {
+        } catch (IllegalStateException ex) {
             // The platform preferences are sometimes not initialized yet
             ErrorEvent.fromThrowable(ex).expected().omit().handle();
         } catch (Exception ex) {

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.core.mode.OperationMode;
 import io.xpipe.app.ext.LocalStore;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.terminal.ExternalTerminalType;
 import io.xpipe.app.util.LocalShell;
@@ -159,7 +160,7 @@ public void installLocal(Path file) {
                                              }
 
                                              cd ~
-                                             runinstaller || read -rsp "Update failed ..."$'\\n' -n 1 key
+                                             runinstaller || echo "Update failed ..." && read key
                                              """,
                         file, file, name);
 

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -514,7 +514,7 @@ private void loadLocal() {
 
     private void fixInvalidLocalValues() {
         // You can set the directory to empty in the settings
-        if (storageDirectory.get() == null) {
+        if (storageDirectory.get() == null || storageDirectory.get().toString().isBlank()) {
             storageDirectory.setValue(DEFAULT_STORAGE_DIR);
         }
 

File: app/src/main/java/io/xpipe/app/browser/action/BrowserAction.java
Patch:
@@ -46,8 +46,7 @@ static LeafAction byId(String id, OpenFileSystemModel model, List<BrowserEntry>
     default List<BrowserEntry> resolveFilesIfNeeded(List<BrowserEntry> selected) {
         return automaticallyResolveLinks()
                 ? selected.stream()
-                        .map(browserEntry ->
-                                new BrowserEntry(browserEntry.getRawFileEntry().resolved(), browserEntry.getModel()))
+                        .map(browserEntry -> new BrowserEntry(browserEntry.getRawFileEntry().resolved(), browserEntry.getModel()))
                         .toList()
                 : selected;
     }

File: app/src/main/java/io/xpipe/app/launcher/LauncherCommand.java
Patch:
@@ -74,7 +74,9 @@ public static void runLauncher(String[] args) {
             cmd.parseArgs(args);
             cmd.execute(args);
         } catch (Throwable t) {
-            var e = ErrorEvent.fromThrowable(t).term().build();
+            // Fix serialization issues with exception class
+            var converted = t instanceof CommandLine.UnmatchedArgumentException u ? new IllegalArgumentException(u.getMessage()) : t;
+            var e = ErrorEvent.fromThrowable(converted).term().build();
             // Print error in case we launched from the command-line
             new LogErrorHandler().handle(e);
             e.handle();

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -76,9 +76,8 @@ public static void open(DataStoreEntry entry, String title, String directory, Pr
             type.launch(config);
             latch.await();
         } catch (Exception ex) {
-            var modMsg = ex.getMessage() != null && ex.getMessage().contains("Unable to find application named") ? ex.getMessage() + " in installed Applications on this system" : ex;
-            throw ErrorEvent.expected(new IOException(
-                    "Unable to launch terminal " + type.toTranslatedString().getValue() + ": "  + modMsg, ex));
+            var modMsg = ex.getMessage() != null && ex.getMessage().contains("Unable to find application named") ? ex.getMessage() + " in installed Applications on this system" : ex.getMessage();
+            throw ErrorEvent.expected(new IOException("Unable to launch terminal " + type.toTranslatedString().getValue() + ": "  + modMsg, ex));
         }
     }
 }

File: ext/base/src/main/java/io/xpipe/ext/base/browser/compress/BaseCompressAction.java
Patch:
@@ -268,7 +268,7 @@ private abstract class TarBasedAction extends Action {
 
         @Override
         protected void create(String fileName, OpenFileSystemModel model, List<BrowserEntry> entries) {
-            var tar = CommandBuilder.of().add("tar", "-c", "-v").addIf(gz, "-z").add("-f").addFile(fileName);
+            var tar = CommandBuilder.of().add("tar", "-c").addIf(gz, "-z").add("-f").addFile(fileName);
             var base = new FilePath(model.getCurrentDirectory().getPath());
 
             if (directory) {

File: ext/base/src/main/java/io/xpipe/ext/base/browser/compress/BaseUntarAction.java
Patch:
@@ -44,7 +44,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
                 if (toDirectory) {
                     c.add("-C").addFile(target);
                 }
-                c.add("-xv").addIf(gz, "-z").add("-f");
+                c.add("-x").addIf(gz, "-z").add("-f");
                 c.addFile(entry.getRawFileEntry().getPath());
                 if (toDirectory) {
                     model.getFileSystem().mkdirs(target);

File: ext/base/src/main/java/io/xpipe/ext/base/browser/compress/BaseUntarAction.java
Patch:
@@ -49,7 +49,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
                 if (toDirectory) {
                     model.getFileSystem().mkdirs(target);
                 }
-                sc.command(c).execute();
+                sc.command(c).withWorkingDirectory(model.getCurrentDirectory().getPath()).execute();
             }
         }, true);
     }

File: ext/base/src/main/java/io/xpipe/ext/base/browser/compress/BaseCompressAction.java
Patch:
@@ -268,7 +268,7 @@ private abstract class TarBasedAction extends Action {
 
         @Override
         protected void create(String fileName, OpenFileSystemModel model, List<BrowserEntry> entries) {
-            var tar = CommandBuilder.of().add("tar", "-c", "-f").addIf(gz, "-z").addFile(fileName);
+            var tar = CommandBuilder.of().add("tar", "-c", "-v").addIf(gz, "-z").add("-f").addFile(fileName);
             var base = new FilePath(model.getCurrentDirectory().getPath());
 
             if (directory) {

File: app/src/main/java/io/xpipe/app/browser/BrowserSavedStateImpl.java
Patch:
@@ -16,6 +16,7 @@
 import lombok.SneakyThrows;
 import lombok.Value;
 
+import java.util.ArrayList;
 import java.util.List;
 
 @Value
@@ -54,7 +55,7 @@ public synchronized void add(BrowserSavedState.Entry entry) {
     }
 
     @Override
-    public void save() {
+    public synchronized void save() {
         AppCache.update("browser-state", this);
     }
 

File: app/src/main/java/io/xpipe/app/browser/file/FileSystemHelper.java
Patch:
@@ -85,7 +85,6 @@ public static String resolveDirectoryPath(OpenFileSystemModel model, String path
         var resolved = shell.get()
                 .getShellDialect()
                 .resolveDirectory(shell.get(), path)
-                .withWorkingDirectory(model.getCurrentPath().get())
                 .readStdoutOrThrow();
 
         if (!FileNames.isAbsolute(resolved)) {

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemModel.java
Patch:
@@ -539,11 +539,11 @@ public void openTerminalAsync(String directory) {
     }
 
     public void backSync(int i) throws Exception {
-        cdSyncWithoutCheck(history.back(i));
+        cdSync(history.back(i));
     }
 
     public void forthSync(int i) throws Exception {
-        cdSyncWithoutCheck(history.forth(i));
+        cdSync(history.forth(i));
     }
 
     @Getter

File: core/src/main/java/io/xpipe/core/store/ConnectionFileSystem.java
Patch:
@@ -148,7 +148,9 @@ public boolean directoryExists(String file) throws Exception {
 
     @Override
     public void directoryAccessible(String file) throws Exception {
-        shellControl.executeSimpleCommand(shellControl.getShellDialect().getCdCommand(file));
+        var current = shellControl.executeSimpleStringCommand(shellControl.getShellDialect().getPrintWorkingDirectoryCommand());
+        shellControl.command(shellControl.getShellDialect().getCdCommand(file));
+        shellControl.command(shellControl.getShellDialect().getCdCommand(current));
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -350,9 +350,11 @@ public void updateCategory(DataStoreEntry entry, DataStoreCategory newCategory)
             return;
         }
 
+        var oldCat = getStoreCategoryIfPresent(entry.getCategoryUuid()).orElse(getDefaultConnectionsCategory());
         entry.setCategoryUuid(newCategory.getUuid());
         var children = getDeepStoreChildren(entry);
         children.forEach(child -> child.setCategoryUuid(newCategory.getUuid()));
+        listeners.forEach(storageListener -> storageListener.onEntryCategoryChange(oldCat, newCategory));
         listeners.forEach(storageListener -> storageListener.onStoreListUpdate());
         saveAsync();
     }

File: app/src/main/java/io/xpipe/app/storage/StorageListener.java
Patch:
@@ -11,4 +11,6 @@ public interface StorageListener {
     void onCategoryAdd(DataStoreCategory category);
 
     void onCategoryRemove(DataStoreCategory category);
+
+    void onEntryCategoryChange(DataStoreCategory from, DataStoreCategory to);
 }

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -76,8 +76,9 @@ public static void open(DataStoreEntry entry, String title, String directory, Pr
             type.launch(config);
             latch.await();
         } catch (Exception ex) {
+            var modMsg = ex.getMessage() != null && ex.getMessage().contains("Unable to find application named") ? ex.getMessage() + " in installed Applications on this system" : ex;
             throw ErrorEvent.expected(new IOException(
-                    "Unable to launch terminal " + type.toTranslatedString().getValue() + ": " + ex.getMessage(), ex));
+                    "Unable to launch terminal " + type.toTranslatedString().getValue() + ": "  + modMsg, ex));
         }
     }
 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ScrollComp.java
Patch:
@@ -35,7 +35,9 @@ public CompStructure<ScrollPane> createBase() {
                 .bind(Bindings.createDoubleBinding(
                         () -> {
                             var v = bar.getVisibleAmount();
-                            return v < 1.0 ? 1.0 : 0.0;
+                            // Check for rounding and accuracy issues
+                            // It might not be exactly equal to 1.0
+                            return v < 0.99 ? 1.0 : 0.0;
                         },
                         bar.visibleAmountProperty()));
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryComp.java
Patch:
@@ -118,6 +118,7 @@ protected Region createSimple() {
                         StoreViewState.get().getFilterString())
                 .getList();
         var count = new CountComp<>(shownList, category.getAllContainedEntries(), string -> "(" + string + ")");
+        count.visible(Bindings.isNotEmpty(shownList));
 
         var showStatus = hover.or(new SimpleBooleanProperty(DataStorage.get().supportsSharing()))
                 .or(showing);

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -1019,13 +1019,13 @@ public TerminalInitFunction additionalInitCommands() {
             AlacrittyTerminalType.ALACRITTY_LINUX,
             WezTerminalType.WEZTERM_LINUX,
             KittyTerminalType.KITTY_LINUX,
-            KONSOLE,
+            TERMINATOR,
+            TERMINOLOGY,
             XFCE,
             ELEMENTARY,
+            KONSOLE,
             GNOME_TERMINAL,
             TILIX,
-            TERMINATOR,
-            TERMINOLOGY,
             GUAKE,
             TILDA,
             XTERM,

File: app/src/main/java/io/xpipe/app/browser/BrowserTransferModel.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
@@ -169,7 +170,7 @@ public void transferToDownloads() throws Exception {
             if (Files.isDirectory(file)) {
                 FileUtils.moveDirectory(file.toFile(), target.toFile());
             } else {
-                FileUtils.moveFile(file.toFile(), target.toFile());
+                FileUtils.moveFile(file.toFile(), target.toFile(), StandardCopyOption.REPLACE_EXISTING);
             }
         }
         DesktopHelper.browseFileInDirectory(downloads.resolve(files.getFirst().getFileName()));

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -502,7 +502,8 @@ private void prepareTableChanges(
 
         updateHandler.run();
         fileList.getShown().addListener((observable, oldValue, newValue) -> {
-            updateHandler.run();
+            // Delay to prevent internal tableview exceptions when sorting
+            Platform.runLater(updateHandler);
         });
         fileList.getFileSystemModel().getCurrentPath().addListener((observable, oldValue, newValue) -> {
             if (oldValue == null) {

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -197,7 +197,7 @@ public static void showCreation(DataStore base, DataStoreCreationCategory catego
                     try {
                         DataStorage.get().addStoreEntryIfNotPresent(e);
                         if (validated
-                                && e.getProvider().shouldHaveChildren()
+                                && e.getProvider().shouldShowScan()
                                 && AppPrefs.get()
                                         .openConnectionSearchWindowOnConnectionCreation()
                                         .get()) {

File: ext/base/src/main/java/io/xpipe/ext/base/script/SimpleScriptStoreProvider.java
Patch:
@@ -46,7 +46,7 @@ public boolean editByDefault() {
     }
 
     @Override
-    public boolean shouldHaveChildren() {
+    public boolean shouldShowScan() {
         return false;
     }
 

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -178,7 +178,7 @@ default boolean requiresScript(String content) {
 
     String getWhichCommand(String executable);
 
-    Charset determineCharset(ShellControl control);
+    Charset determineCharset(ShellControl control) throws Exception;
 
     NewLine getNewLine();
 

File: app/src/main/java/io/xpipe/app/beacon/impl/SshLaunchExchangeImpl.java
Patch:
@@ -3,7 +3,7 @@
 import com.sun.net.httpserver.HttpExchange;
 import io.xpipe.app.util.TerminalLauncherManager;
 import io.xpipe.beacon.api.SshLaunchExchange;
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.process.ShellDialects;
 
 import java.util.List;

File: app/src/main/java/io/xpipe/app/browser/BrowserClipboard.java
Patch:
@@ -5,7 +5,7 @@
 import io.xpipe.app.browser.file.LocalFileSystem;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.util.ThreadHelper;
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.store.FileEntry;
 import io.xpipe.core.util.FailableRunnable;
 

File: app/src/main/java/io/xpipe/app/browser/file/LocalFileSystem.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.core.store.FileEntry;
 import io.xpipe.core.store.FileKind;
 import io.xpipe.core.store.FileSystem;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 
 import java.nio.file.Files;
 import java.nio.file.Path;

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemModel.java
Patch:
@@ -18,7 +18,7 @@
 import io.xpipe.app.util.BooleanScope;
 import io.xpipe.app.util.TerminalLauncher;
 import io.xpipe.app.util.ThreadHelper;
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.process.ShellDialects;
 import io.xpipe.core.process.ShellOpenFunction;

File: app/src/main/java/io/xpipe/app/core/AppExtensionManager.java
Patch:
@@ -4,7 +4,7 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.core.process.OsType;
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.util.ModuleHelper;
 import io.xpipe.core.util.ModuleLayerLoader;
 import io.xpipe.core.util.XPipeInstallation;

File: app/src/main/java/io/xpipe/app/core/check/AppShellCheck.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.util.LocalShell;
 import io.xpipe.core.process.OsType;
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.process.ProcessOutputException;
 
 import lombok.Value;

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -11,7 +11,7 @@
 import io.xpipe.app.storage.DataStoreEntryRef;
 import io.xpipe.app.util.DataStoreCategoryChoiceComp;
 import io.xpipe.core.store.DataStore;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.store.ShellStore;
 
 import javafx.beans.binding.Bindings;

File: app/src/main/java/io/xpipe/app/prefs/PasswordManagerCategory.java
Patch:
@@ -12,8 +12,8 @@
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.process.CommandBuilder;
 import io.xpipe.core.process.CommandControl;
-import io.xpipe.core.process.ProcessControlProvider;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.ProcessControlProvider;
+import io.xpipe.app.ext.LocalStore;
 
 import javafx.beans.property.SimpleStringProperty;
 import javafx.geometry.Insets;

File: app/src/main/java/io/xpipe/app/prefs/TerminalCategory.java
Patch:
@@ -13,7 +13,7 @@
 import io.xpipe.app.util.OptionsBuilder;
 import io.xpipe.app.util.TerminalLauncher;
 import io.xpipe.app.util.ThreadHelper;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 
 import javafx.beans.binding.Bindings;
 import javafx.geometry.Insets;

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -8,7 +8,7 @@
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.store.FixedChildStore;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.store.StorePath;
 import io.xpipe.core.util.UuidHelper;
 

File: app/src/main/java/io/xpipe/app/storage/DataStorageSyncHandler.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.storage;
 
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 
 import java.nio.file.Path;
 

File: app/src/main/java/io/xpipe/app/storage/ImpersistentStorage.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.app.storage;
 
 import io.xpipe.app.comp.store.StoreSortMode;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 
 import java.time.Instant;
 import java.util.UUID;

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -5,7 +5,7 @@
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.core.process.OsType;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.util.JacksonMapper;
 
 import com.fasterxml.jackson.core.JacksonException;

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -5,6 +5,7 @@
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.core.window.AppWindowHelper;
 import io.xpipe.app.ext.PrefsChoiceValue;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.prefs.ExternalApplicationType;
 import io.xpipe.app.storage.DataColor;

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -12,7 +12,7 @@
 import io.xpipe.core.process.OsType;
 import io.xpipe.core.process.ShellDialects;
 import io.xpipe.core.store.FileNames;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.util.FailableRunnable;
 import io.xpipe.core.util.XPipeInstallation;
 

File: app/src/main/java/io/xpipe/app/update/ChocoUpdater.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.fxcomps.impl.CodeSnippet;
 import io.xpipe.app.fxcomps.impl.CodeSnippetComp;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.scene.layout.Region;

File: app/src/main/java/io/xpipe/app/util/AppJacksonModule.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.xpipe.app.storage.*;
 import io.xpipe.app.terminal.ExternalTerminalType;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.util.EncryptedSecretValue;
 import io.xpipe.core.util.JacksonMapper;
 import io.xpipe.core.util.SecretValue;

File: app/src/main/java/io/xpipe/app/util/FileReference.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntryRef;
 import io.xpipe.core.store.FileSystemStore;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.util.JacksonizedValue;
 
 import com.fasterxml.jackson.annotation.JsonTypeName;

File: app/src/main/java/io/xpipe/app/util/LocalShell.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.util;
 
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.process.ShellDialects;
 

File: app/src/main/java/io/xpipe/app/util/SecretRetrievalStrategy.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.storage.DataStoreSecret;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.util.InPlaceSecretValue;
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;

File: app/src/main/java/io/xpipe/app/util/SshLocalBridge.java
Patch:
@@ -5,7 +5,7 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.core.process.CommandBuilder;
 import io.xpipe.core.process.OsType;
-import io.xpipe.core.process.ProcessControlProvider;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.util.XPipeInstallation;
 

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.core.AppI18n;
+import io.xpipe.app.ext.ProcessControlProvider;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.storage.DataStorage;

File: app/src/main/java/module-info.java
Patch:
@@ -110,6 +110,7 @@
     uses io.xpipe.app.util.LicensedFeature;
     uses io.xpipe.beacon.BeaconInterface;
     uses DataStorageExtensionProvider;
+    uses ProcessControlProvider;
 
     provides Module with
             AppJacksonModule;

File: core/src/main/java/module-info.java
Patch:
@@ -1,4 +1,3 @@
-import io.xpipe.core.process.ProcessControlProvider;
 import io.xpipe.core.process.ShellDialect;
 import io.xpipe.core.process.ShellDialects;
 import io.xpipe.core.util.CoreJacksonModule;
@@ -19,7 +18,6 @@
     requires static lombok;
 
     uses com.fasterxml.jackson.databind.Module;
-    uses ProcessControlProvider;
     uses io.xpipe.core.util.ProxyManagerProvider;
     uses io.xpipe.core.util.DataStateProvider;
     uses ModuleLayerLoader;

File: ext/base/src/main/java/io/xpipe/ext/base/action/SampleStoreAction.java
Patch:
@@ -8,7 +8,7 @@
 import io.xpipe.core.process.ElevationFunction;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.process.ShellDialects;
-import io.xpipe.core.store.LocalStore;
+import io.xpipe.app.ext.LocalStore;
 import io.xpipe.core.store.ShellStore;
 
 import javafx.beans.value.ObservableValue;
@@ -40,8 +40,7 @@ public Class<ShellStore> getApplicableClass() {
             @Override
             public boolean isApplicable(DataStoreEntryRef<ShellStore> o) {
                 // Allows you to individually check whether this action should be available for the specific store.
-                // In this case it should only be available for remote shell connections, not local ones.
-                return !ShellStore.isLocal(o.getStore());
+                return true;
             }
 
             @Override

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemModel.java
Patch:
@@ -454,7 +454,7 @@ public boolean isClosed() {
     }
 
     public void initWithGivenDirectory(String dir) throws Exception {
-        cdSyncWithoutCheck(dir);
+        cdSync(dir);
     }
 
     public void initWithDefaultDirectory() {

File: app/src/main/java/io/xpipe/app/beacon/BeaconRequestHandler.java
Patch:
@@ -40,7 +40,9 @@ public void handle(HttpExchange exchange) {
         }
 
         if (beaconInterface.requiresEnabledApi() && !AppPrefs.get().enableHttpApi().get()) {
-            throw ErrorEvent.expected(new IllegalStateException("HTTP API is not enabled in the settings menu"));
+            var ex = new BeaconServerException("HTTP API is not enabled in the settings menu");
+            writeError(exchange, ex, 403);
+            return;
         }
 
         if (!AppPrefs.get().disableApiAuthentication().get() && beaconInterface.requiresAuthentication()) {

File: app/src/main/java/io/xpipe/app/storage/DataStorageSyncHandler.java
Patch:
@@ -10,7 +10,7 @@ static DataStorageSyncHandler getInstance() {
         return (DataStorageSyncHandler) ProcessControlProvider.get().getGitStorageHandler();
     }
 
-    void validateConnection();
+    boolean validateConnection();
 
     boolean supportsSync();
 

File: app/src/main/java/io/xpipe/app/util/SshLocalBridge.java
Patch:
@@ -184,7 +184,7 @@ private static String getSshd(ShellControl sc) throws Exception {
     }
 
     public static void reset() {
-        if (INSTANCE == null) {
+        if (INSTANCE == null || INSTANCE.getRunningShell() == null) {
             return;
         }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -426,6 +426,9 @@ private Region createLayout() {
                         && (providerChoice.getProviders().size() > 1
                                 || providerChoice.getProviders().getFirst().showProviderChoice()))
                 || (staticDisplay && provider.getValue().showProviderChoice());
+        if (staticDisplay) {
+            providerChoice.apply(struc -> struc.get().setDisable(true));
+        }
         if (showProviders) {
             providerChoice.onSceneAssign(struc -> struc.get().requestFocus());
         }

File: app/src/main/java/io/xpipe/app/comp/store/StoreViewState.java
Patch:
@@ -176,6 +176,7 @@ public void onStoreAdd(DataStoreEntry... entry) {
                 var l = Arrays.stream(entry)
                         .map(StoreEntryWrapper::new)
                         .peek(storeEntryWrapper -> storeEntryWrapper.update())
+                        .peek(wrapper -> wrapper.applyLastAccess())
                         .toList();
                 Platform.runLater(() -> {
                     // Don't update anything if we have already reset

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -82,7 +82,7 @@ static ExternalTerminalType determineNonSshBridgeFallback(ExternalTerminalType t
         switch (OsType.getLocal()) {
             case OsType.Linux linux -> {
                 // This should not be termius as all others take precedence
-                var def = determineDefault(type);
+                var def = determineDefault(null);
                 // If there's no other terminal available, use a fallback which won't work
                 return def != TERMIUS ? def : XTERM;
             }

File: app/src/main/java/io/xpipe/app/prefs/SyncCategory.java
Patch:
@@ -42,7 +42,7 @@ public Comp<?> create() {
                         .addString(prefs.storageGitRemote)
                         .disable(prefs.enableGitStorage.not())
                         .addComp(terminalTest)
-                        .disable(prefs.storageGitRemote.isNull().and(prefs.enableGitStorage))
+                        .disable(prefs.storageGitRemote.isNull().or(prefs.enableGitStorage.not()))
                         .addComp(prefs.getCustomComp("gitVaultIdentityStrategy"))
                         .nameAndDescription("openDataDir")
                         .addComp(new ButtonComp(AppI18n.observable("openDataDirButton"), () -> {

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -23,6 +23,7 @@ public static void openDirect(String title, FailableFunction<ShellControl, Strin
         }
         openDirect(title, command, type);
     }
+
     public static void openDirect(String title, FailableFunction<ShellControl, String, Exception> command, ExternalTerminalType type)
             throws Exception {
         try (var sc = LocalShell.getShell().start()) {

File: app/src/main/java/io/xpipe/app/beacon/impl/SshLaunchExchangeImpl.java
Patch:
@@ -23,7 +23,7 @@ public Object handle(HttpExchange exchange, Request msg) throws Exception {
         if (msg.getArguments() != null
                 && usedDialect.isEmpty()
                 && !msg.getArguments().contains("SSH_ORIGINAL_COMMAND")) {
-            throw new BeaconClientException("Unexpected argument: " + msg.getArguments());
+            return Response.builder().command(List.of()).build();
         }
 
         // There are sometimes multiple requests by a terminal client (e.g. Termius)

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -299,7 +299,7 @@ public boolean isAvailable() {
             try (var sc = LocalShell.getShell()) {
                 return switch (OsType.getLocal()) {
                     case OsType.Linux linux -> {
-                        yield CommandSupport.isInPathSilent(sc, "termius");
+                        yield Files.exists(Path.of("/opt/termius"));
                     }
                     case OsType.MacOs macOs -> {
                         yield Files.exists(Path.of("/Applications/Termius.app"));

File: app/src/main/java/io/xpipe/app/terminal/KittyTerminalType.java
Patch:
@@ -184,7 +184,7 @@ private boolean prepare() throws Exception {
                         .add("-o", "allow_remote_control=socket-only", "--listen-on", "unix:" + getSocket()));
                 var elapsed = System.currentTimeMillis() - time;
                 // Good heuristic on how long to wait
-                ThreadHelper.sleep(5 * elapsed);
+                ThreadHelper.sleep(15 * elapsed);
                 return true;
             }
         }

File: app/src/main/java/io/xpipe/app/beacon/impl/SshLaunchExchangeImpl.java
Patch:
@@ -7,12 +7,14 @@
 import io.xpipe.core.process.ProcessControlProvider;
 import io.xpipe.core.process.ShellDialects;
 
+import java.util.List;
+
 public class SshLaunchExchangeImpl extends SshLaunchExchange {
 
     @Override
     public Object handle(HttpExchange exchange, Request msg) throws Exception {
         if ("echo $SHELL".equals(msg.getArguments())) {
-            return "/bin/bash";
+            return Response.builder().command(List.of("echo", "/bin/bash")).build();
         }
 
         var usedDialect = ShellDialects.getStartableDialects().stream()

File: app/src/main/java/io/xpipe/app/storage/DataStorageSyncHandler.java
Patch:
@@ -10,6 +10,8 @@ static DataStorageSyncHandler getInstance() {
         return (DataStorageSyncHandler) ProcessControlProvider.get().getGitStorageHandler();
     }
 
+    void validateConnection();
+
     boolean supportsSync();
 
     void init();

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -151,7 +151,7 @@ public void installLocal(Path file) {
                 var name = AppProperties.get().isStaging() ? "xpipe-ptb" : "xpipe";
                 var command = String.format(
                         """
-                                             function exec {
+                                             exec() {
                                                  echo "Installing downloaded .deb installer ..."
                                                  echo "+ sudo apt install \\"%s\\""
                                                  DEBIAN_FRONTEND=noninteractive sudo apt-get install -qy "%s" || return 1
@@ -191,7 +191,7 @@ public void installLocal(Path file) {
                 var name = AppProperties.get().isStaging() ? "xpipe-ptb" : "xpipe";
                 var command = String.format(
                         """
-                                             function exec {
+                                             exec() {
                                                  echo "Installing downloaded .rpm installer ..."
                                                  echo "+ sudo rpm -U -v --force \\"%s\\""
                                                  sudo rpm -U -v --force "%s" || return 1
@@ -231,7 +231,7 @@ public void installLocal(Path file) {
                 var name = AppProperties.get().isStaging() ? "xpipe-ptb" : "xpipe";
                 var command = String.format(
                         """
-                                           function exec {
+                                           exec() {
                                                echo "Installing downloaded .pkg installer ..."
                                                echo "+ sudo installer -verboseR -allowUntrusted -pkg \\"%s\\" -target /"
                                                sudo installer -verboseR -allowUntrusted -pkg "%s" -target / || return 1

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -345,7 +345,7 @@ public void launch(LaunchConfiguration configuration) throws Exception {
         }
 
         private boolean showInfo() throws IOException {
-            boolean set = AppCache.get("termiusSetupa", Boolean.class, () -> false);
+            boolean set = AppCache.get("termiusSetup", Boolean.class, () -> false);
             if (set) {
                 return true;
             }
@@ -1012,9 +1012,9 @@ public TerminalInitFunction additionalInitCommands() {
             TERMIUS,
             XSHELL);
     List<ExternalTerminalType> LINUX_TERMINALS = List.of(
-            KittyTerminalType.KITTY_LINUX,
             AlacrittyTerminalType.ALACRITTY_LINUX,
             WezTerminalType.WEZTERM_LINUX,
+            KittyTerminalType.KITTY_LINUX,
             KONSOLE,
             XFCE,
             ELEMENTARY,

File: app/src/main/java/io/xpipe/app/terminal/KittyTerminalType.java
Patch:
@@ -83,7 +83,8 @@ default String getWebsite() {
 
     @Override
     default boolean isRecommended() {
-        return true;
+        // There are some race conditions with the socket
+        return false;
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -361,7 +361,7 @@ private boolean showInfo() throws IOException {
                         .formatted(b.getIdentityKey(), keyContent);
                 var markdown = new MarkdownComp(activated, s -> s)
                         .prefWidth(450)
-                        .prefHeight(400)
+                        .prefHeight(450)
                         .createRegion();
                 alert.getDialogPane().setContent(markdown);
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListComp.java
Patch:
@@ -36,16 +36,16 @@ protected Region createSimple() {
         var initialCount = 1;
         var showIntro = Bindings.createBooleanBinding(
                 () -> {
-                    var all = StoreViewState.get().getAllConnectionsCategory();
+                    var allCat = StoreViewState.get().getAllConnectionsCategory();
                     var connections = StoreViewState.get().getAllEntries().getList().stream()
-                            .filter(wrapper -> all.contains(wrapper))
+                            .filter(wrapper -> allCat.equals(wrapper.getCategory().getValue().getRoot()))
                             .toList();
                     return initialCount == connections.size()
                             && StoreViewState.get()
                                     .getActiveCategory()
                                     .getValue()
                                     .getRoot()
-                                    .equals(StoreViewState.get().getAllConnectionsCategory());
+                                    .equals(allCat);
                 },
                 StoreViewState.get().getAllEntries().getList(),
                 StoreViewState.get().getActiveCategory());

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -189,10 +189,10 @@ private String formatOwner(BrowserEntry param) {
         var m = fileList.getFileSystemModel();
         var user = unix.getUser() != null
                 ? unix.getUser()
-                : m.getCache().getUsers().get(unix.getUid());
+                : m.getCache().getUsers().getOrDefault(unix.getUid(), "?");
         var group = unix.getGroup() != null
                 ? unix.getGroup()
-                : m.getCache().getGroups().get(unix.getGid());
+                : m.getCache().getGroups().getOrDefault(unix.getGid(), "?");
         var uid = String.valueOf(
                         unix.getUid() != null ? unix.getUid() : m.getCache().getUidForUser(user));
         var gid = String.valueOf(

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryComp.java
Patch:
@@ -86,10 +86,10 @@ protected Region createSimple() {
 
                     if (!DataStorage.get().supportsSharing()
                             || !category.getCategory().canShare()) {
-                        return "mdi2a-account-lock";
+                        return "mdi2g-git";
                     }
 
-                    return category.getSync().getValue() ? "mdi2g-git" : "mdi2a-account-cancel";
+                    return category.getSync().getValue() ? "mdi2g-git" : "mdi2c-cancel";
                 },
                 category.getSync(),
                 hover);

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -229,7 +229,7 @@ public void saveAsync() {
 
     public abstract boolean supportsSharing();
 
-    public boolean shouldShare(DataStoreCategory category) {
+    public boolean shouldSync(DataStoreCategory category) {
         if (!category.canShare()) {
             return false;
         }
@@ -246,8 +246,8 @@ public boolean shouldShare(DataStoreCategory category) {
         return true;
     }
 
-    public boolean shouldShare(DataStoreEntry entry) {
-        if (!shouldShare(DataStorage.get()
+    public boolean shouldSync(DataStoreEntry entry) {
+        if (!shouldSync(DataStorage.get()
                 .getStoreCategoryIfPresent(entry.getCategoryUuid())
                 .orElseThrow())) {
             return false;

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationMenu.java
Patch:
@@ -30,16 +30,14 @@ public static void addButtons(MenuButton menu) {
 
         menu.getItems().add(category("addDesktop", "mdi2c-camera-plus", DataStoreCreationCategory.DESKTOP, null));
 
-        menu.getItems().add(category("addShell", "mdi2t-text-box-multiple", DataStoreCreationCategory.SHELL, null));
+        menu.getItems().add(category("addShell", "mdi2t-text-box-multiple", DataStoreCreationCategory.SHELL, "shellEnvironment"));
 
         menu.getItems()
                 .add(category("addScript", "mdi2s-script-text-outline", DataStoreCreationCategory.SCRIPT, "script"));
 
         menu.getItems()
                 .add(category("addTunnel", "mdi2v-vector-polyline-plus", DataStoreCreationCategory.TUNNEL, "customService"));
 
-        menu.getItems().add(category("addCommand", "mdi2c-code-greater-than", DataStoreCreationCategory.COMMAND, null));
-
         menu.getItems().add(category("addSerial", "mdi2s-serial-port", DataStoreCreationCategory.SERIAL, "serial"));
 
         menu.getItems().add(category("addDatabase", "mdi2d-database-plus", DataStoreCreationCategory.DATABASE, null));

File: app/src/main/java/io/xpipe/app/core/window/NativeMacOsWindowControl.java
Patch:
@@ -46,7 +46,7 @@ public boolean setAppearance(boolean seamlessFrame, boolean darkMode) {
         try {
             lib.get().setAppearance(new NativeLong(nsWindow), seamlessFrame, darkMode);
             if (seamlessFrame) {
-                ThreadHelper.sleep(150);
+                ThreadHelper.sleep(200);
             }
         } catch (Throwable e) {
             ErrorEvent.fromThrowable(e).handle();

File: core/src/main/java/io/xpipe/core/store/ConnectionFileSystem.java
Patch:
@@ -47,7 +47,7 @@ public FileSystem open() throws Exception {
         if (!shellControl.getTtyState().isPreservesOutput()
                 || !shellControl.getTtyState().isSupportsInput()) {
             throw new UnsupportedOperationException(
-                    "Shell has a PTY allocated and does not support file system operations");
+                    "Shell has a PTY allocated and as a result does not support file system operations");
         }
 
         return this;

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -197,7 +197,7 @@ private String formatOwner(BrowserEntry param) {
                         unix.getUid() != null ? unix.getUid() : m.getCache().getUidForUser(user));
         var gid = String.valueOf(
                         unix.getGid() != null ? unix.getGid() : m.getCache().getGidForGroup(group));
-        if (uid.equals(gid)) {
+        if (uid.equals(gid) && user.equals(group)) {
             return user + " [" + uid + "]";
         }
         return user + " [" + uid + "] / " + group + " [" + gid + "]";

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -43,7 +43,7 @@ public class AppPrefs {
     final BooleanProperty dontAcceptNewHostKeys =
             mapVaultSpecific(new SimpleBooleanProperty(false), "dontAcceptNewHostKeys", Boolean.class);
     final BooleanProperty performanceMode = map(new SimpleBooleanProperty(false), "performanceMode", Boolean.class);
-    final BooleanProperty useBundledTools = map(new SimpleBooleanProperty(false), "useBundledTools", Boolean.class);
+    public final BooleanProperty useBundledTools = map(new SimpleBooleanProperty(false), "useBundledTools", Boolean.class);
     public final ObjectProperty<AppTheme.Theme> theme =
             map(new SimpleObjectProperty<>(), "theme", AppTheme.Theme.class);
     final BooleanProperty useSystemFont = map(new SimpleBooleanProperty(true), "useSystemFont", Boolean.class);

File: app/src/main/java/io/xpipe/app/browser/session/BrowserAbstractSessionModel.java
Patch:
@@ -37,7 +37,7 @@ public void openSync(T e, BooleanProperty externalBusy) throws Exception {
         }
     }
 
-    void closeSync(BrowserSessionTab<?> e) {
+    public void closeSync(BrowserSessionTab<?> e) {
         e.close();
         synchronized (BrowserAbstractSessionModel.this) {
             this.sessionEntries.remove(e);

File: app/src/main/java/io/xpipe/app/ext/DataStoreCreationCategory.java
Patch:
@@ -4,7 +4,6 @@ public enum DataStoreCreationCategory {
     HOST,
     DATABASE,
     SHELL,
-    SERVICE,
     COMMAND,
     TUNNEL,
     SCRIPT,

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -520,7 +520,7 @@ public void initializeEntry() {
             try {
                 incrementBusyCounter();
                 notifyUpdate(false, false);
-                lifecycleStore.initializeValidate();
+                lifecycleStore.initializeStore();
             } catch (Exception e) {
                 ErrorEvent.fromThrowable(e).handle();
             } finally {
@@ -536,7 +536,7 @@ public void finalizeEntry() {
             try {
                 incrementBusyCounter();
                 notifyUpdate(false, false);
-                lifecycleStore.finalizeValidate();
+                lifecycleStore.finalizeStore();
             } catch (Exception e) {
                 ErrorEvent.fromThrowable(e).handle();
             } finally {

File: core/src/main/java/io/xpipe/core/store/ExpandedLifecycleStore.java
Patch:
@@ -2,7 +2,7 @@
 
 public interface ExpandedLifecycleStore extends DataStore {
 
-    default void initializeValidate() {}
+    default void initializeStore() {}
 
-    default void finalizeValidate() throws Exception {}
+    default void finalizeStore() throws Exception {}
 }

File: core/src/main/java/io/xpipe/core/store/SingletonSessionStore.java
Patch:
@@ -4,7 +4,7 @@ public interface SingletonSessionStore<T extends Session>
         extends ExpandedLifecycleStore, InternalCacheDataStore, SessionListener {
 
     @Override
-    default void finalizeValidate() throws Exception {
+    default void finalizeStore() throws Exception {
         stopSessionIfNeeded();
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/service/CustomServiceStoreProvider.java
Patch:
@@ -8,7 +8,6 @@
 import io.xpipe.app.util.OptionsBuilder;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.store.NetworkTunnelStore;
-
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleObjectProperty;
 
@@ -18,7 +17,7 @@ public class CustomServiceStoreProvider extends AbstractServiceStoreProvider {
 
     @Override
     public DataStoreCreationCategory getCreationCategory() {
-        return DataStoreCreationCategory.SERVICE;
+        return DataStoreCreationCategory.TUNNEL;
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/beacon/impl/SshLaunchExchangeImpl.java
Patch:
@@ -12,7 +12,7 @@ public class SshLaunchExchangeImpl extends SshLaunchExchange {
 
     @Override
     public Object handle(HttpExchange exchange, Request msg) throws Exception {
-        var usedDialect = ShellDialects.ALL.stream()
+        var usedDialect = ShellDialects.getStartableDialects().stream()
                 .filter(dialect -> dialect.getExecutableName().equalsIgnoreCase(msg.getArguments()))
                 .findFirst();
         if (msg.getArguments() != null
@@ -21,6 +21,8 @@ public Object handle(HttpExchange exchange, Request msg) throws Exception {
             throw new BeaconClientException("Unexpected argument: " + msg.getArguments());
         }
 
+        // There are sometimes multiple requests by a terminal client (e.g. Termius)
+        // This might fail sometimes, but it is expected
         var r = TerminalLauncherManager.waitForNextLaunch();
         var c = ProcessControlProvider.get()
                 .getEffectiveLocalDialect()

File: app/src/main/java/io/xpipe/app/browser/BrowserTransferModel.java
Patch:
@@ -166,7 +166,7 @@ public void transferToDownloads() throws Exception {
             var target = downloads.resolve(file.getFileName());
             // Prevent DirectoryNotEmptyException
             if (Files.exists(target) && Files.isDirectory(target)) {
-                Files.delete(target);
+                FileUtils.deleteDirectory(target.toFile());
             }
             Files.move(file, target, StandardCopyOption.REPLACE_EXISTING);
         }

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListModel.java
Patch:
@@ -99,7 +99,8 @@ public Comparator<BrowserEntry> order() {
     }
 
     public BrowserEntry rename(BrowserEntry old, String newName) {
-        if (fileSystemModel == null
+        if (old == null || newName == null
+                || fileSystemModel == null
                 || fileSystemModel.isClosed()
                 || fileSystemModel.getCurrentPath().get() == null) {
             return old;

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemComp.java
Patch:
@@ -142,7 +142,7 @@ root, new KeyCodeCombination(KeyCode.UP, KeyCombination.ALT_DOWN), true, keyEven
                     }
                     keyEvent.consume();
                 });
-        InputHelper.onKeyCombination(root, new KeyCodeCombination(KeyCode.BACK_SPACE), true, keyEvent -> {
+        InputHelper.onKeyCombination(root, new KeyCodeCombination(KeyCode.BACK_SPACE), false, keyEvent -> {
             var p = model.getCurrentParentDirectory();
             if (p != null) {
                 model.cdAsync(p.getPath());

File: app/src/main/java/io/xpipe/app/core/mode/GuiMode.java
Patch:
@@ -10,6 +10,7 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.update.UpdateChangelogAlert;
+import io.xpipe.app.util.NativeBridge;
 import io.xpipe.app.util.ThreadHelper;
 
 import javafx.stage.Stage;
@@ -37,6 +38,7 @@ public void onSwitchTo() throws Throwable {
 
         AppGreetings.showIfNeeded();
         AppPtbCheck.check();
+        NativeBridge.init();
 
         TrackEvent.info("Waiting for window setup completion ...");
         PlatformThread.runLaterIfNeededBlocking(() -> {

File: app/src/main/java/io/xpipe/app/core/window/NativeMacOsWindowControl.java
Patch:
@@ -46,7 +46,7 @@ public boolean setAppearance(boolean seamlessFrame, boolean darkMode) {
         try {
             lib.get().setAppearance(new NativeLong(nsWindow), seamlessFrame, darkMode);
             if (seamlessFrame) {
-                ThreadHelper.sleep(250);
+                ThreadHelper.sleep(150);
             }
         } catch (Throwable e) {
             ErrorEvent.fromThrowable(e).handle();

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -23,7 +23,7 @@ private static Path createWindowsShortcut(String executable, String args, String
                         $S.Arguments = '%s'
                         $S.Save()
                         """,
-                executable, shortcutPath, icon, args);
+                executable, shortcutPath, icon, args).replaceAll("\n", ";");
         LocalShell.getLocalPowershell().executeSimpleCommand(content);
         return shortcutPath;
     }

File: core/src/main/java/module-info.java
Patch:
@@ -17,7 +17,6 @@
     requires com.fasterxml.jackson.databind;
     requires java.net.http;
     requires static lombok;
-    requires java.sql;
 
     uses com.fasterxml.jackson.databind.Module;
     uses ProcessControlProvider;

File: beacon/src/main/java/io/xpipe/beacon/api/ShellStartExchange.java
Patch:
@@ -36,7 +36,7 @@ public static class Response {
         ShellDialect shellDialect;
 
         @NonNull
-        OsType osType;
+        OsType.Any osType;
 
         @NonNull
         String osName;

File: app/src/main/java/io/xpipe/app/browser/file/BrowserQuickAccessContextMenu.java
Patch:
@@ -79,7 +79,7 @@ public void showMenu(Node anchor) {
                 getItems().addAll(r.getItems());
 
                 // Prevent NPE in show()
-                if (getScene() == null || anchor == null) {
+                if (getScene() == null || anchor == null || anchor.getScene() == null) {
                     return;
                 }
                 show(anchor, Side.RIGHT, 0, 0);

File: app/src/main/java/io/xpipe/app/core/window/NativeMacOsWindowControl.java
Patch:
@@ -46,7 +46,7 @@ public boolean setAppearance(boolean seamlessFrame, boolean darkMode) {
         try {
             lib.get().setAppearance(new NativeLong(nsWindow), seamlessFrame, darkMode);
             if (seamlessFrame) {
-                ThreadHelper.sleep(100);
+                ThreadHelper.sleep(250);
             }
         } catch (Throwable e) {
             ErrorEvent.fromThrowable(e).handle();

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemCache.java
Patch:
@@ -40,7 +40,7 @@ public int getGidForGroup(String name) {
 
     private void loadUsers() throws Exception {
         var sc = model.getFileSystem().getShell().orElseThrow();
-        if (sc.getOsType() == OsType.WINDOWS) {
+        if (sc.getOsType() == OsType.WINDOWS || sc.getOsType() == OsType.MACOS) {
             return;
         }
 

File: app/src/main/java/io/xpipe/app/comp/base/StoreToggleComp.java
Patch:
@@ -53,7 +53,7 @@ public static <T extends DataStore> StoreToggleComp simpleToggle(
     }
 
     public static <T extends DataStore> StoreToggleComp enableToggle(
-            String nameKey, StoreSection section, Function<T, Boolean> initial, BiConsumer<T, Boolean> setter) {
+            String nameKey, StoreSection section, BooleanProperty value, BiConsumer<T, Boolean> setter) {
         var val = new SimpleBooleanProperty();
         ObservableValue<LabelGraphic> g = val.map(aBoolean -> aBoolean
                 ? new LabelGraphic.IconGraphic("mdi2c-circle-slice-8")
@@ -62,8 +62,7 @@ public static <T extends DataStore> StoreToggleComp enableToggle(
                 nameKey,
                 g,
                 section,
-                new SimpleBooleanProperty(
-                        initial.apply(section.getWrapper().getEntry().getStore().asNeeded())),
+                value,
                 v -> {
                     setter.accept(section.getWrapper().getEntry().getStore().asNeeded(), v);
                 });

File: app/src/main/java/io/xpipe/app/comp/base/ToggleSwitchComp.java
Patch:
@@ -7,6 +7,7 @@
 import javafx.beans.property.Property;
 import javafx.beans.value.ObservableValue;
 import javafx.css.PseudoClass;
+import javafx.geometry.Pos;
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.layout.Region;
@@ -32,6 +33,7 @@ protected Region createSimple() {
                 event.consume();
             }
         });
+        s.setAlignment(Pos.CENTER);
         s.getStyleClass().add("toggle-switch-comp");
         s.setSelected(selected.getValue());
         s.selectedProperty().addListener((observable, oldValue, newValue) -> {

File: ext/base/src/main/java/io/xpipe/ext/base/script/ScriptGroupStoreProvider.java
Patch:
@@ -10,17 +10,15 @@
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.app.util.OptionsBuilder;
 import io.xpipe.core.store.DataStore;
-
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.value.ObservableValue;
-
 import lombok.SneakyThrows;
 
 import java.util.List;
 
-public class ScriptGroupStoreProvider implements EnabledStoreProvider, DataStoreProvider {
+public class ScriptGroupStoreProvider implements EnabledParentStoreProvider, DataStoreProvider {
 
     @Override
     public DataStoreUsageCategory getUsageCategory() {

File: ext/base/src/main/java/io/xpipe/ext/base/service/AbstractServiceGroupStoreProvider.java
Patch:
@@ -17,6 +17,7 @@
 import io.xpipe.core.store.DataStore;
 
 import javafx.beans.binding.Bindings;
+import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.ObservableValue;
 
@@ -34,7 +35,7 @@ public StoreEntryComp customEntryComp(StoreSection sec, boolean preferLarge) {
     }
 
     private StoreToggleComp createToggleComp(StoreSection sec) {
-        var t = StoreToggleComp.<AbstractServiceGroupStore<?>>enableToggle(null, sec, g -> false, (g, aBoolean) -> {
+        var t = StoreToggleComp.<AbstractServiceGroupStore<?>>enableToggle(null, sec, new SimpleBooleanProperty(false), (g, aBoolean) -> {
             var children = DataStorage.get().getStoreChildren(sec.getWrapper().getEntry());
             ThreadHelper.runFailableAsync(() -> {
                 for (DataStoreEntry child : children) {

File: app/src/main/java/io/xpipe/app/issue/ErrorEvent.java
Patch:
@@ -37,6 +37,9 @@ public class ErrorEvent {
     @Setter
     private boolean shouldSendDiagnostics;
 
+    @Setter
+    private boolean licenseRequired;
+
     @Singular
     private List<Path> attachments;
 

File: app/src/main/java/io/xpipe/app/issue/GuiErrorHandler.java
Patch:
@@ -35,7 +35,7 @@ private void handleGui(ErrorEvent event) {
                 .findFirst();
         if (lex.isPresent()) {
             LicenseProvider.get().showLicenseAlert(lex.get());
-            event.setShouldSendDiagnostics(true);
+            event.setLicenseRequired(true);
             event.clearAttachments();
             ErrorAction.ignore().handle(event);
         } else {

File: app/src/main/java/io/xpipe/app/core/AppDesktopIntegration.java
Patch:
@@ -9,10 +9,10 @@
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.process.OsType;
 
+import javax.imageio.ImageIO;
 import java.awt.*;
 import java.awt.desktop.*;
 import java.util.List;
-import javax.imageio.ImageIO;
 
 public class AppDesktopIntegration {
 
@@ -45,7 +45,7 @@ public void systemAwoke(SystemSleepEvent e) {}
                 });
             }
 
-            // This will initialize the toolkit on macos and create the dock icon
+            // This will initialize the toolkit on macOS and create the dock icon
             // macOS does not like applications that run fully in the background, so always do it
             if (OsType.getLocal().equals(OsType.MACOS) && Desktop.isDesktopSupported()) {
                 Desktop.getDesktop().setPreferencesHandler(e -> {
@@ -68,7 +68,7 @@ public void appReopened(AppReopenedEvent e) {
                     }
                 });
 
-                // Set dock icon explicitly on mac
+                // Set dock icon explicitly on macOS
                 // This is necessary in case XPipe was started through a script as it will have no icon otherwise
                 if (AppProperties.get().isDeveloperMode()
                         && AppLogs.get().isWriteToSysout()

File: app/src/main/java/io/xpipe/app/prefs/WorkspacesCategory.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.Comp;
+import io.xpipe.app.util.LicenseProvider;
 import io.xpipe.app.util.OptionsBuilder;
 
 public class WorkspacesCategory extends AppPrefsCategory {
@@ -15,10 +16,11 @@ protected String getId() {
     @Override
     protected Comp<?> create() {
         return new OptionsBuilder()
-                .addTitle("manageWorkspaces")
+                .addTitle(AppI18n.observable("manageWorkspaces").map(s -> s + (LicenseProvider.get().getFeature("workspaces").isSupported() ? "" : " (Pro)")))
                 .sub(new OptionsBuilder()
                         .nameAndDescription("workspaceAdd")
                         .addComp(new ButtonComp(AppI18n.observable("addWorkspace"), WorkspaceCreationAlert::showAsync)))
+                        .disable(!LicenseProvider.get().getFeature("workspaces").isSupported())
                 .buildComp();
     }
 }

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -136,7 +136,7 @@ private TableView<BrowserEntry> createTable() {
         table.setFixedCellSize(32.0);
         var os = fileList.getFileSystemModel().getFileSystem().getShell().orElseThrow().getOsType();
         table.widthProperty().subscribe((newValue) -> {
-            if (os != OsType.WINDOWS) {
+            if (os != OsType.WINDOWS && os != OsType.MACOS) {
                 ownerCol.setVisible(newValue.doubleValue() > 1000);
             }
             var width = getFilenameWidth(table);
@@ -441,7 +441,7 @@ private void prepareTableChanges(
 
                 if (fileList.getFileSystemModel().getFileSystem() != null) {
                     var shell = fileList.getFileSystemModel().getFileSystem().getShell().orElseThrow();
-                    if (OsType.WINDOWS.equals(shell.getOsType())) {
+                    if (OsType.WINDOWS.equals(shell.getOsType()) || OsType.MACOS.equals(shell.getOsType())) {
                         modeCol.setVisible(false);
                         ownerCol.setVisible(false);
                     } else {

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemCache.java
Patch:
@@ -47,20 +47,20 @@ private void loadUsers() throws Exception {
         var lines = sc.command(CommandBuilder.of().add("cat").addFile("/etc/passwd")).readStdoutOrThrow();
         lines.lines().forEach(s -> {
             var split = s.split(":");
-            users.put(Integer.parseInt(split[2]), split[0]);
+            users.putIfAbsent(Integer.parseInt(split[2]), split[0]);
         });
     }
 
     private void loadGroups() throws Exception {
         var sc = model.getFileSystem().getShell().orElseThrow();
-        if (sc.getOsType() == OsType.WINDOWS) {
+        if (sc.getOsType() == OsType.WINDOWS || sc.getOsType() == OsType.MACOS) {
             return;
         }
 
         var lines = sc.command(CommandBuilder.of().add("cat").addFile("/etc/group")).readStdoutOrThrow();
         lines.lines().forEach(s -> {
             var split = s.split(":");
-            groups.put(Integer.parseInt(split[2]), split[0]);
+            groups.putIfAbsent(Integer.parseInt(split[2]), split[0]);
         });
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/browser/ChgrpAction.java
Patch:
@@ -33,13 +33,14 @@ public ObservableValue<String> getName(OpenFileSystemModel model, List<BrowserEn
 
     @Override
     public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return model.getFileSystem().getShell().orElseThrow().getOsType() != OsType.WINDOWS;
+        var os = model.getFileSystem().getShell().orElseThrow().getOsType();
+        return os != OsType.WINDOWS && os != OsType.MACOS;
     }
 
     @Override
     public List<LeafAction> getBranchingActions(OpenFileSystemModel model, List<BrowserEntry> entries) {
         return model.getCache().getGroups().entrySet().stream()
-                .filter(e -> !e.getValue().equals("nogroup") && (e.getKey().equals(0) || e.getKey() >= 1000))
+                .filter(e -> !e.getValue().equals("nohome") && !e.getValue().equals("nogroup") && !e.getValue().equals("nobody") && (e.getKey().equals(0) || e.getKey() >= 1000))
                 .map(e -> e.getValue()).map(s -> (LeafAction) new Chgrp(s)).toList();
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/browser/ChownAction.java
Patch:
@@ -33,13 +33,14 @@ public ObservableValue<String> getName(OpenFileSystemModel model, List<BrowserEn
 
     @Override
     public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return model.getFileSystem().getShell().orElseThrow().getOsType() != OsType.WINDOWS;
+        var os = model.getFileSystem().getShell().orElseThrow().getOsType();
+        return os != OsType.WINDOWS && os != OsType.MACOS;
     }
 
     @Override
     public List<LeafAction> getBranchingActions(OpenFileSystemModel model, List<BrowserEntry> entries) {
         return model.getCache().getUsers().entrySet().stream()
-                .filter(e -> !e.getValue().equals("nobody") && (e.getKey().equals(0) || e.getKey() >= 1000))
+                .filter(e -> !e.getValue().equals("nohome") && !e.getValue().equals("nobody") && (e.getKey().equals(0) || e.getKey() >= 1000))
                 .map(e -> e.getValue()).map(s -> (LeafAction) new Chown(s)).toList();
     }
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/TooltipAugment.java
Patch:
@@ -4,13 +4,11 @@
 import io.xpipe.app.fxcomps.CompStructure;
 import io.xpipe.app.fxcomps.augment.Augment;
 import io.xpipe.app.fxcomps.util.PlatformThread;
-
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.scene.control.Tooltip;
 import javafx.scene.input.KeyCombination;
 import javafx.stage.Window;
-import javafx.util.Duration;
 
 public class TooltipAugment<S extends CompStructure<?>> implements Augment<S> {
 
@@ -46,7 +44,6 @@ public void augment(S struc) {
         tt.setWrapText(true);
         tt.setMaxWidth(400);
         tt.getStyleClass().add("fancy-tooltip");
-        tt.setHideDelay(Duration.INDEFINITE);
         Tooltip.install(struc.get(), tt);
     }
 

File: ext/base/src/main/java/module-info.java
Patch:
@@ -52,6 +52,8 @@
             EditFileAction,
             RunAction,
             ChmodAction,
+            ChownAction,
+            ChgrpAction,
             CopyAction,
             CopyPathAction,
             PasteAction,

File: beacon/src/main/java/io/xpipe/beacon/api/SshLaunchExchange.java
Patch:
@@ -19,7 +19,7 @@ public String getPath() {
     @Builder
     @Value
     public static class Request {
-        String storePath;
+        String arguments;
     }
 
     @Jacksonized

File: app/src/main/java/io/xpipe/app/core/window/AppMainWindow.java
Patch:
@@ -117,6 +117,7 @@ private void initializeWindow(WindowState state) {
     }
 
     private void setupListeners() {
+        AppWindowBounds.fixInvalidStagePosition(stage);
         stage.xProperty().addListener((c, o, n) -> {
             if (windowActive.get()) {
                 onChange();

File: app/src/main/java/io/xpipe/app/core/window/AppWindowHelper.java
Patch:
@@ -75,6 +75,7 @@ public static Stage sideWindow(
         addIcons(stage);
         setupContent(stage, contentFunc, bindSize, loading);
         setupStylesheets(stage.getScene());
+        AppWindowBounds.fixInvalidStagePosition(stage);
 
         if (AppPrefs.get() != null && AppPrefs.get().enforceWindowModality().get()) {
             stage.initModality(Modality.WINDOW_MODAL);
@@ -142,6 +143,7 @@ public static Optional<ButtonType> showBlockingAlert(Consumer<Alert> c) {
                 });
                 event.consume();
             });
+            AppWindowBounds.fixInvalidStagePosition(s);
             a.getDialogPane().getScene().addEventHandler(KeyEvent.KEY_PRESSED, event -> {
                 if (new KeyCodeCombination(KeyCode.W, KeyCombination.SHORTCUT_DOWN).match(event)) {
                     s.close();

File: app/src/main/java/io/xpipe/app/util/ClipboardHelper.java
Patch:
@@ -37,7 +37,7 @@ public static void copyPassword(SecretValue pass) {
             withPassword.put(DataFormat.PLAIN_TEXT, pass.getSecretValue());
             clipboard.setContent(withPassword);
 
-            var transition = new PauseTransition(Duration.millis(10000));
+            var transition = new PauseTransition(Duration.millis(15000));
             transition.setOnFinished(e -> {
                 var present = clipboard.getString();
                 if (present != null && present.equals(pass.getSecretValue())) {

File: app/src/main/java/io/xpipe/app/util/Hyperlinks.java
Patch:
@@ -6,6 +6,7 @@ public class Hyperlinks {
 
     public static final String DOUBLE_PROMPT = "https://docs.xpipe.io/two-step-connections";
     public static final String GITHUB = "https://github.com/xpipe-io/xpipe";
+    public static final String GITHUB_PTB = "https://github.com/xpipe-io/xpipe";
     public static final String PRIVACY = "https://docs.xpipe.io/privacy-policy";
     public static final String EULA = "https://docs.xpipe.io/end-user-license-agreement";
     public static final String SECURITY = "https://docs.xpipe.io/security";

File: app/src/main/java/io/xpipe/app/beacon/impl/SshLaunchExchangeImpl.java
Patch:
@@ -23,8 +23,7 @@ public Object handle(HttpExchange exchange, Request msg) throws Exception {
                         TerminalInitScriptConfig.ofName(DataStorage.get().getStoreEntryDisplayName(found.get())),null);
             }
         }
-        TerminalLauncherManager.submitAsync(UUID.randomUUID(), ((ShellStore) DataStorage.get().local().getStore()).control(),
-                TerminalInitScriptConfig.ofName("abc"),null);
+
         var r = TerminalLauncherManager.waitForNextLaunch();
         var c = ProcessControlProvider.get().getEffectiveLocalDialect().getOpenScriptCommand(r.toString()).buildBaseParts(null);
         return Response.builder().command(c).build();

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -203,7 +203,8 @@ private boolean showActionProvider(ActionProvider p) {
         var branch = p.getBranchDataStoreCallSite();
         if (branch != null
                 && entry.getStore() != null
-                && branch.getApplicableClass().isAssignableFrom(entry.getStore().getClass())) {
+                && branch.getApplicableClass().isAssignableFrom(entry.getStore().getClass())
+                && branch.isApplicable(entry.ref())) {
             return branch.getChildren(entry.ref()).stream().anyMatch(child -> {
                 return showActionProvider(child);
             });

File: ext/base/src/main/java/io/xpipe/ext/base/store/ShellStoreProvider.java
Patch:
@@ -26,7 +26,8 @@ default ActionProvider.Action launchAction(DataStoreEntry entry) {
             @Override
             public void execute() throws Exception {
                 ShellStore store = entry.getStore().asNeeded();
-                TerminalLauncher.open(entry, DataStorage.get().getStoreEntryDisplayName(entry), null, ScriptStore.controlWithDefaultScripts(store.control()));
+                TerminalLauncher.open(entry, DataStorage.get().getStoreEntryDisplayName(entry), null,
+                        ScriptStore.controlWithDefaultScripts(store.control()));
             }
         };
     }

File: app/src/main/java/io/xpipe/app/comp/base/ListSelectorComp.java
Patch:
@@ -88,6 +88,7 @@ protected Region createSimple() {
 
         var sp = new ScrollPane(vbox);
         sp.setFitToWidth(true);
+        sp.getStyleClass().add("list-selector-comp");
         return sp;
     }
 }

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -413,7 +413,7 @@ private Region createLayout() {
         var layout = new BorderPane();
         layout.getStyleClass().add("store-creator");
         var providerChoice = new StoreProviderChoiceComp(filter, provider, staticDisplay);
-        var showProviders = (!staticDisplay && providerChoice.getProviders().size() > 1) ||
+        var showProviders = (!staticDisplay && (providerChoice.getProviders().size() > 1 || providerChoice.getProviders().getFirst().showProviderChoice())) ||
                 (staticDisplay && provider.getValue().showProviderChoice());
         if (showProviders) {
             providerChoice.onSceneAssign(struc -> struc.get().requestFocus());

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationMenu.java
Patch:
@@ -40,7 +40,7 @@ public static void addButtons(MenuButton menu) {
         menu.getItems()
                 .add(category("addTunnel", "mdi2v-vector-polyline-plus", DataStoreCreationCategory.TUNNEL, null));
 
-        menu.getItems().add(category("addCommand", "mdi2c-code-greater-than", DataStoreCreationCategory.COMMAND, "cmd"));
+        menu.getItems().add(category("addCommand", "mdi2c-code-greater-than", DataStoreCreationCategory.COMMAND, null));
 
         menu.getItems().add(category("addSerial", "mdi2s-serial-port", DataStoreCreationCategory.SERIAL, "serial"));
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -413,7 +413,8 @@ private Region createLayout() {
         var layout = new BorderPane();
         layout.getStyleClass().add("store-creator");
         var providerChoice = new StoreProviderChoiceComp(filter, provider, staticDisplay);
-        var showProviders = !staticDisplay && providerChoice.getProviders().size() > 1;
+        var showProviders = (!staticDisplay && providerChoice.getProviders().size() > 1) ||
+                (staticDisplay && provider.getValue().showProviderChoice());
         if (showProviders) {
             providerChoice.onSceneAssign(struc -> struc.get().requestFocus());
         }

File: app/src/main/java/io/xpipe/app/prefs/SyncCategory.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.core.AppI18n;
-import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.util.DesktopHelper;
@@ -23,8 +22,6 @@ public Comp<?> create() {
                         .name("enableGitStorage")
                         .description("enableGitStorageDescription")
                         .addToggle(prefs.enableGitStorage)
-                        .disable(AppProperties.get().isStaging()
-                                && !prefs.developerMode().getValue())
                         .nameAndDescription("storageGitRemote")
                         .addString(prefs.storageGitRemote, true)
                         .disable(prefs.enableGitStorage.not())

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -448,7 +448,9 @@ public boolean refreshChildren(DataStoreEntry e, boolean throwOnFail) throws Exc
             nc.get().notifyUpdate(false, true);
         });
 
-        deleteWithChildren(toRemove.toArray(DataStoreEntry[]::new));
+        if (h.removeLeftovers()) {
+            deleteWithChildren(toRemove.toArray(DataStoreEntry[]::new));
+        }
         addStoreEntriesIfNotPresent(toAdd.stream().map(DataStoreEntryRef::get).toArray(DataStoreEntry[]::new));
         toUpdate.forEach(pair -> {
             // Update state by merging

File: app/src/main/java/io/xpipe/app/util/DataStoreFormatter.java
Patch:
@@ -42,7 +42,7 @@ public static ObservableValue<String> shellInformation(StoreEntryWrapper w) {
                     return s.getShellDialect().getDisplayName();
                 }
 
-                var prefix = s.getTtyState() != ShellTtyState.NONE ? "[PTY] " : "";
+                var prefix = s.getTtyState() != null && s.getTtyState() != ShellTtyState.NONE ? "[PTY] " : "";
                 return s.isRunning() ? prefix + formattedOsName(s.getOsName()) : "Connection failed";
             }
 

File: core/src/main/java/module-info.java
Patch:
@@ -17,6 +17,7 @@
     requires com.fasterxml.jackson.databind;
     requires java.net.http;
     requires static lombok;
+    requires java.sql;
 
     uses com.fasterxml.jackson.databind.Module;
     uses ProcessControlProvider;

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -118,7 +118,9 @@ default String getConcatenationOperator() {
 
     CommandControl printUsernameCommand(ShellControl shellControl);
 
-    String getPrintExitCodeCommand(String prefix, String suffix);
+    String getPrintStartEchoCommand(String prefix);
+
+    String getPrintExitCodeCommand(String id, String prefix, String suffix);
 
     int assignMissingExitCode();
 

File: app/src/main/java/io/xpipe/app/browser/file/BrowserQuickAccessContextMenu.java
Patch:
@@ -79,7 +79,7 @@ public void showMenu(Node anchor) {
                 getItems().addAll(r.getItems());
 
                 // Prevent NPE in show()
-                if (getScene() == null) {
+                if (getScene() == null || anchor == null) {
                     return;
                 }
                 show(anchor, Side.RIGHT, 0, 0);

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -21,10 +21,8 @@ static Local getLocal() {
             return MACOS;
         } else if (osName.contains("win")) {
             return WINDOWS;
-        } else if (osName.contains("nux")) {
-            return LINUX;
         } else {
-            throw new UnsupportedOperationException("Unknown operating system");
+            return LINUX;
         }
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationMenu.java
Patch:
@@ -40,8 +40,7 @@ public static void addButtons(MenuButton menu) {
         menu.getItems()
                 .add(category("addTunnel", "mdi2v-vector-polyline-plus", DataStoreCreationCategory.TUNNEL, null));
 
-        menu.getItems()
-                .add(category("addCommand", "mdi2c-code-greater-than", DataStoreCreationCategory.COMMAND, "cmd"));
+        // menu.getItems().add(category("addCommand", "mdi2c-code-greater-than", DataStoreCreationCategory.COMMAND, "cmd"));
 
         menu.getItems().add(category("addDatabase", "mdi2d-database-plus", DataStoreCreationCategory.DATABASE, null));
     }

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -135,7 +135,7 @@ private TableView<BrowserEntry> createTable() {
 
     private void prepareTypedSelectionModel(TableView<BrowserEntry> table) {
         AtomicReference<Instant> lastFail = new AtomicReference<>();
-        table.addEventHandler(KeyEvent.KEY_TYPED, event -> {
+        table.addEventHandler(KeyEvent.KEY_PRESSED, event -> {
             updateTypedSelection(table, lastFail, event, false);
         });
 
@@ -158,7 +158,7 @@ private void prepareTypedSelectionModel(TableView<BrowserEntry> table) {
     }
 
     private void updateTypedSelection(TableView<BrowserEntry> table, AtomicReference<Instant> lastType, KeyEvent event, boolean recursive) {
-        var typed = event.getCharacter();
+        var typed = event.getText();
         if (typed.isEmpty()) {
             return;
         }

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionTabsComp.java
Patch:
@@ -193,7 +193,7 @@ private TabPane createTabPane() {
             }
         });
 
-        tabs.addEventFilter(KeyEvent.KEY_PRESSED, keyEvent -> {
+        tabs.addEventHandler(KeyEvent.KEY_PRESSED, keyEvent -> {
             var current = tabs.getSelectionModel().getSelectedItem();
             if (current == null) {
                 return;

File: app/src/main/java/io/xpipe/app/core/window/AppMainWindow.java
Patch:
@@ -273,7 +273,7 @@ private void setupContent(Comp<?> content) {
         contentR.prefHeightProperty().bind(stage.getScene().heightProperty());
 
         if (OsType.getLocal().equals(OsType.LINUX) || OsType.getLocal().equals(OsType.MACOS)) {
-            stage.getScene().addEventFilter(KeyEvent.KEY_PRESSED, event -> {
+            stage.getScene().addEventHandler(KeyEvent.KEY_PRESSED, event -> {
                 if (new KeyCodeCombination(KeyCode.W, KeyCombination.SHORTCUT_DOWN).match(event)) {
                     AppPrefs.get().closeBehaviour().getValue().run();
                     event.consume();

File: app/src/main/java/io/xpipe/app/core/window/AppWindowHelper.java
Patch:
@@ -144,7 +144,7 @@ public static Optional<ButtonType> showBlockingAlert(Consumer<Alert> c) {
                 event.consume();
             });
             AppWindowBounds.fixInvalidStagePosition(s);
-            a.getDialogPane().getScene().addEventFilter(KeyEvent.KEY_PRESSED, event -> {
+            a.getDialogPane().getScene().addEventHandler(KeyEvent.KEY_PRESSED, event -> {
                 if (new KeyCodeCombination(KeyCode.W, KeyCombination.SHORTCUT_DOWN).match(event)) {
                     s.close();
                     event.consume();
@@ -262,7 +262,7 @@ public static void setupContent(
             }
         });
 
-        scene.addEventFilter(KeyEvent.KEY_PRESSED, event -> {
+        scene.addEventHandler(KeyEvent.KEY_PRESSED, event -> {
             if (new KeyCodeCombination(KeyCode.W, KeyCombination.SHORTCUT_DOWN).match(event)) {
                 stage.close();
                 event.consume();

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemComp.java
Patch:
@@ -119,13 +119,13 @@ root, new KeyCodeCombination(KeyCode.HOME, KeyCombination.ALT_DOWN), true, keyEv
         });
 
         InputHelper.onKeyCombination(
-                root, new KeyCodeCombination(KeyCode.F, KeyCombination.CONTROL_DOWN), true, keyEvent -> {
+                root, new KeyCodeCombination(KeyCode.F, KeyCombination.SHORTCUT_DOWN), true, keyEvent -> {
                     filter.toggleButton().fire();
                     filter.textField().requestFocus();
                     keyEvent.consume();
                 });
         InputHelper.onKeyCombination(
-                root, new KeyCodeCombination(KeyCode.L, KeyCombination.CONTROL_DOWN), true, keyEvent -> {
+                root, new KeyCodeCombination(KeyCode.L, KeyCombination.SHORTCUT_DOWN), true, keyEvent -> {
                     navBar.textField().requestFocus();
                     keyEvent.consume();
                 });

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionTabsComp.java
Patch:
@@ -220,7 +220,7 @@ private TabPane createTabPane() {
                 }
             }
 
-            var forward = new KeyCodeCombination(KeyCode.TAB, KeyCombination.CONTROL_DOWN);
+            var forward = new KeyCodeCombination(KeyCode.TAB, KeyCombination.SHORTCUT_DOWN);
             if (forward.match(keyEvent)) {
                 var next = (tabs.getSelectionModel().getSelectedIndex() + 1)
                         % tabs.getTabs().size();
@@ -229,7 +229,7 @@ private TabPane createTabPane() {
                 return;
             }
 
-            var back = new KeyCodeCombination(KeyCode.TAB, KeyCombination.CONTROL_DOWN, KeyCombination.SHIFT_DOWN);
+            var back = new KeyCodeCombination(KeyCode.TAB, KeyCombination.SHORTCUT_DOWN, KeyCombination.SHIFT_DOWN);
             if (back.match(keyEvent)) {
                 var previous = (tabs.getTabs().size() + tabs.getSelectionModel().getSelectedIndex() - 1)
                         % tabs.getTabs().size();

File: app/src/main/java/io/xpipe/app/comp/AppLayoutComp.java
Patch:
@@ -13,6 +13,7 @@
 
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
+import javafx.scene.Parent;
 import javafx.scene.control.ButtonBase;
 import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.KeyEvent;
@@ -61,7 +62,7 @@ public CompStructure<Pane> createBase() {
             sidebarR.getChildrenUnmodifiable().forEach(node -> {
                 var shortcut = (KeyCodeCombination) node.getProperties().get("shortcut");
                 if (shortcut != null && shortcut.match(event)) {
-                    ((ButtonBase) node).fire();
+                    ((ButtonBase) ((Parent) node).getChildrenUnmodifiable().get(1)).fire();
                     event.consume();
                     return;
                 }

File: app/src/main/java/io/xpipe/app/comp/base/SideMenuBarComp.java
Patch:
@@ -71,9 +71,6 @@ public CompStructure<VBox> createBase() {
                 value.setValue(e);
             });
             var shortcut = e.combination();
-            if (shortcut != null) {
-                b.apply(struc -> struc.get().getProperties().put("shortcut", shortcut));
-            }
             b.apply(new TooltipAugment<>(e.name(), shortcut));
             b.apply(struc -> {
                 AppFont.setSize(struc.get(), 1);
@@ -112,6 +109,9 @@ public CompStructure<VBox> createBase() {
                                 selectedBorder,
                                 noneBorder));
             });
+            if (shortcut != null) {
+                stack.apply(struc -> struc.get().getProperties().put("shortcut", shortcut));
+            }
             vbox.getChildren().add(stack.createRegion());
         }
 

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -135,7 +135,7 @@ private TableView<BrowserEntry> createTable() {
 
     private void prepareTypedSelectionModel(TableView<BrowserEntry> table) {
         AtomicReference<Instant> lastFail = new AtomicReference<>();
-        table.addEventHandler(KeyEvent.KEY_PRESSED, event -> {
+        table.addEventHandler(KeyEvent.KEY_TYPED, event -> {
             updateTypedSelection(table, lastFail, event, false);
         });
 
@@ -158,7 +158,7 @@ private void prepareTypedSelectionModel(TableView<BrowserEntry> table) {
     }
 
     private void updateTypedSelection(TableView<BrowserEntry> table, AtomicReference<Instant> lastType, KeyEvent event, boolean recursive) {
-        var typed = event.getText();
+        var typed = event.getCharacter();
         if (typed.isEmpty()) {
             return;
         }

File: app/src/main/java/io/xpipe/app/issue/ErrorEvent.java
Patch:
@@ -57,7 +57,7 @@ public static ErrorEventBuilder fromThrowable(String msg, Throwable t) {
             return EVENT_BASES.remove(t).description(msg);
         }
 
-        return builder().throwable(t).description(msg + (t.getMessage() != null ? "\n\n" + t.getMessage() : ""));
+        return builder().throwable(t).description(msg + (t.getMessage() != null ? "\n\n" + t.getMessage().trim() : ""));
     }
 
     public static ErrorEventBuilder fromMessage(String msg) {

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -106,7 +106,7 @@ protected final Region createSimple() {
         });
         button.addEventFilter(MouseEvent.MOUSE_CLICKED, event -> {
             if (AppPrefs.get().requireDoubleClickForConnections().get()) {
-                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() > 2) {
+                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() != 2) {
                     event.consume();
                 }
             } else {
@@ -117,7 +117,7 @@ protected final Region createSimple() {
         });
         button.addEventFilter(MouseEvent.MOUSE_PRESSED, event -> {
             if (AppPrefs.get().requireDoubleClickForConnections().get()) {
-                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() > 2) {
+                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() != 2) {
                     event.consume();
                 }
             } else {

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionComp.java
Patch:
@@ -44,9 +44,9 @@ private Comp<CompStructure<Button>> createQuickAccessButton() {
                     return section.getShownChildren().getList().isEmpty();
                 },
                 section.getShownChildren().getList());
-        Consumer<StoreEntryWrapper> quickAccessAction = w -> {
+        Consumer<StoreSection> quickAccessAction = w -> {
             ThreadHelper.runFailableAsync(() -> {
-                w.executeDefaultAction();
+                w.getWrapper().executeDefaultAction();
             });
         };
         var quickAccessButton = new StoreQuickAccessButtonComp(section, quickAccessAction)

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -101,9 +101,9 @@ private Popover getPopover() {
                             comp.disable(new SimpleBooleanProperty(true));
                         }
                     },
-                    storeEntryWrapper -> {
-                        if (applicable.test(storeEntryWrapper)) {
-                            selected.setValue(storeEntryWrapper.getEntry().ref());
+                    sec -> {
+                        if (applicable.test(sec.getWrapper())) {
+                            selected.setValue(sec.getWrapper().getEntry().ref());
                             popover.hide();
                         }
                     });

File: app/src/main/java/io/xpipe/app/issue/ErrorHandlerComp.java
Patch:
@@ -196,6 +196,7 @@ private Region createTop() {
         if (desc == null) {
             desc = AppI18n.get("errorNoDetail");
         }
+        desc = desc.trim();
 
         var graphic = new FontIcon("mdomz-warning");
         graphic.setIconColor(Color.RED);
@@ -204,7 +205,7 @@ private Region createTop() {
         header.setGraphicTextGap(6);
         AppFont.setSize(header, 3);
         var descriptionField = new TextArea(desc);
-        descriptionField.setPrefRowCount(6);
+        descriptionField.setPrefRowCount(Math.min((int) desc.lines().count(), 14));
         descriptionField.setWrapText(true);
         descriptionField.setEditable(false);
         descriptionField.setPadding(Insets.EMPTY);

File: app/src/main/java/io/xpipe/app/comp/store/DenseStoreEntryComp.java
Patch:
@@ -92,7 +92,7 @@ protected Region createContent() {
         nameCC.setHgrow(Priority.ALWAYS);
         grid.getColumnConstraints().addAll(nameCC);
         var nameBox = new HBox(name, notes);
-        nameBox.setSpacing(1);
+        nameBox.setSpacing(6);
         nameBox.setAlignment(Pos.CENTER_LEFT);
         grid.addRow(0, nameBox);
 

File: app/src/main/java/io/xpipe/app/comp/store/StandardStoreEntryComp.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.fxcomps.Comp;
+import io.xpipe.core.process.OsType;
 import javafx.geometry.HPos;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
@@ -33,14 +34,14 @@ protected Region createContent() {
 
         var grid = new GridPane();
         grid.setHgap(6);
-        grid.setVgap(0);
+        grid.setVgap(OsType.getLocal() == OsType.MACOS ? 2 : 0);
 
         var storeIcon = createIcon(46, 40);
         grid.add(storeIcon, 0, 0, 1, 2);
         grid.getColumnConstraints().add(new ColumnConstraints(56));
 
         var nameAndNotes = new HBox(name, notes);
-        nameAndNotes.setSpacing(1);
+        nameAndNotes.setSpacing(6);
         nameAndNotes.setAlignment(Pos.CENTER_LEFT);
         grid.add(nameAndNotes, 1, 0);
         GridPane.setVgrow(nameAndNotes, Priority.ALWAYS);

File: app/src/main/java/io/xpipe/app/comp/store/StandardStoreEntryComp.java
Patch:
@@ -46,7 +46,7 @@ protected Region createContent() {
         GridPane.setVgrow(nameAndNotes, Priority.ALWAYS);
 
         var summaryBox = new HBox(createSummary());
-        summaryBox.setAlignment(Pos.CENTER_LEFT);
+        summaryBox.setAlignment(Pos.TOP_LEFT);
         GridPane.setVgrow(summaryBox, Priority.ALWAYS);
         grid.add(summaryBox, 1, 1);
 

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -83,10 +83,10 @@ private static String[] parseProperties(String[] args) {
     }
 
     private static void setup(String[] args) {
-        // Register stage theming early to make it apply for any potential early popups
-        ModifiedStage.init();
-
         try {
+            // Register stage theming early to make it apply for any potential early popups
+            ModifiedStage.init();
+
             // Only for handling SIGTERM
             Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                 TrackEvent.info("Received SIGTERM externally");

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -33,7 +33,7 @@
 public class AppPrefs {
 
     public static final Path DEFAULT_STORAGE_DIR =
-            AppProperties.get().getDataDir().resolve("storage");
+            AppProperties.get() != null ? AppProperties.get().getDataDir().resolve("storage") : null;
     private static final String DEVELOPER_MODE_PROP = "io.xpipe.app.developerMode";
     private static AppPrefs INSTANCE;
     private final List<Mapping<?>> mapping = new ArrayList<>();

File: app/src/main/java/io/xpipe/app/core/window/NativeMacOsWindowControl.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.core.window;
 
 import com.sun.jna.NativeLong;
+import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.util.NativeBridge;
 import io.xpipe.core.util.ModuleHelper;
 import javafx.stage.Window;
@@ -29,7 +30,7 @@ public NativeMacOsWindowControl(Window stage) {
     }
 
     public boolean setAppearance(boolean seamlessFrame, boolean darkMode) {
-        if (!ModuleHelper.isImage()) {
+        if (!ModuleHelper.isImage() || !AppProperties.get().isFullVersion()) {
             return false;
         }
 

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -120,7 +120,7 @@ private TableView<BrowserEntry> createTable() {
             return true;
         });
         table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);
-        table.setFixedCellSize(34.0);
+        table.setFixedCellSize(32.0);
 
         prepareTableSelectionModel(table);
         prepareTableShortcuts(table);

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemModel.java
Patch:
@@ -115,8 +115,7 @@ public void close() {
                     && getCurrentPath().get() != null) {
                 if (getBrowserModel() instanceof BrowserSessionModel bm) {
                     bm.getSavedState()
-                            .add(new BrowserSavedState.Entry(
-                                    getEntry().get().getUuid(), getCurrentPath().get()));
+                            .add(new BrowserSavedState.Entry(getEntry().get().getUuid(), getCurrentPath().get()));
                 }
             }
             try {

File: app/src/main/java/io/xpipe/app/browser/BrowserBookmarkComp.java
Patch:
@@ -45,7 +45,7 @@ protected Region createSimple() {
         BiConsumer<StoreSection, Comp<CompStructure<Button>>> augment = (s, comp) -> {
             comp.disable(Bindings.createBooleanBinding(
                     () -> {
-                        return busy.get() || !applicable.test(s.getWrapper());
+                        return !applicable.test(s.getWrapper());
                     },
                     busy));
             comp.apply(struc -> {

File: core/src/main/java/io/xpipe/core/process/ShellOpenFunction.java
Patch:
@@ -27,7 +27,7 @@ public CommandBuilder prepareWithoutInitCommand() {
 
             @Override
             public CommandBuilder prepareWithInitCommand(@NonNull String command) {
-                throw new UnsupportedOperationException();
+                return CommandBuilder.of().add(command);
             }
         };
     }

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenFileDefaultAction.java
Patch:
@@ -48,6 +48,6 @@ public ObservableValue<String> getName(OpenFileSystemModel model, List<BrowserEn
 
     @Override
     public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return entries.stream().allMatch(entry -> entry.getRawFileEntry().getKind() == FileKind.FILE);
+        return model.getFileList().getEditing().getValue() == null && entries.stream().allMatch(entry -> entry.getRawFileEntry().getKind() == FileKind.FILE);
     }
 }

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -45,7 +45,7 @@ public StoreEntryWrapper(DataStoreEntry entry) {
         this.entry = entry;
         this.name = new SimpleStringProperty(entry.getName());
         this.lastAccess = new SimpleObjectProperty<>(entry.getLastAccess().minus(Duration.ofMillis(500)));
-        ActionProvider.ALL.stream()
+        ActionProvider.ALL_STANDALONE.stream()
                 .filter(dataStoreActionProvider -> {
                     return !entry.isDisabled()
                             && dataStoreActionProvider.getLeafDataStoreCallSite() != null
@@ -163,7 +163,7 @@ public void update() {
             defaultActionProvider.setValue(null);
         } else {
             try {
-                var defaultProvider = ActionProvider.ALL.stream()
+                var defaultProvider = ActionProvider.ALL_STANDALONE.stream()
                         .filter(e -> entry.getStore() != null
                                 && e.getDefaultDataStoreCallSite() != null
                                 && e.getDefaultDataStoreCallSite()
@@ -174,7 +174,7 @@ public void update() {
                         .orElse(null);
                 this.defaultActionProvider.setValue(defaultProvider);
 
-                var newProviders = ActionProvider.ALL.stream()
+                var newProviders = ActionProvider.ALL_STANDALONE.stream()
                         .filter(dataStoreActionProvider -> {
                             return showActionProvider(dataStoreActionProvider);
                         })

File: ext/base/src/main/java/module-info.java
Patch:
@@ -61,6 +61,8 @@
             JarAction;
     provides ActionProvider with
             ServiceOpenAction,
+            ServiceOpenHttpAction,
+            ServiceOpenHttpsAction,
             ServiceCopyUrlAction,
             CloneStoreAction,
             RefreshChildrenStoreAction,

File: app/src/main/java/io/xpipe/app/prefs/AppPrefsComp.java
Patch:
@@ -41,9 +41,9 @@ protected Region createSimple() {
         pfxLimit.setAlignment(Pos.TOP_LEFT);
 
         var sidebar = new AppPrefsSidebarComp().createRegion();
-        sidebar.setMinWidth(350);
-        sidebar.setPrefWidth(350);
-        sidebar.setMaxWidth(350);
+        sidebar.setMinWidth(280);
+        sidebar.setPrefWidth(280);
+        sidebar.setMaxWidth(280);
 
         var split = new HBox(sidebar, pfxLimit);
         HBox.setHgrow(pfxLimit, Priority.ALWAYS);

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -195,7 +195,7 @@ private void prepareTableSelectionModel(TableView<BrowserEntry> table) {
     }
 
     private void prepareTableShortcuts(TableView<BrowserEntry> table) {
-        table.setOnKeyPressed(event -> {
+        table.addEventFilter(KeyEvent.KEY_PRESSED, event -> {
             var selected = fileList.getSelection();
             var action = BrowserAction.getFlattened(fileList.getFileSystemModel(), selected).stream()
                     .filter(browserAction -> browserAction.isApplicable(fileList.getFileSystemModel(), selected)

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -452,6 +452,7 @@ public void setStoreInternal(DataStore store, boolean updateTime) {
 
         this.store = store;
         this.storeNode = JacksonMapper.getDefault().valueToTree(store);
+        this.provider = DataStoreProviders.byStore(store);
         if (updateTime) {
             lastModified = Instant.now();
         }

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -259,7 +259,7 @@ public static Optional<DataStoreEntry> fromDirectory(Path dir) throws Exception
                 store,
                 storeNode,
                 false,
-                Validity.INCOMPLETE,
+                store == null ? Validity.LOAD_FAILED : Validity.INCOMPLETE,
                 configuration,
                 persistentState,
                 expanded,
@@ -500,6 +500,8 @@ public void refreshStore() {
         DataStore newStore;
         try {
             newStore = JacksonMapper.getDefault().treeToValue(storeNode, DataStore.class);
+            // Check whether we have a provider as well
+            DataStoreProviders.byStore(newStore);
         } catch (Throwable e) {
             ErrorEvent.fromThrowable(e).handle();
             newStore = null;

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FilterComp.java
Patch:
@@ -35,6 +35,7 @@ public CompStructure<CustomTextField> createBase() {
             }
         });
         var filter = new CustomTextField();
+        filter.setMinHeight(0);
         filter.setMaxHeight(2000);
         filter.getStyleClass().add("filter-comp");
         filter.promptTextProperty().bind(AppI18n.observable("searchFilter"));

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -109,7 +109,7 @@ public Structure createBase() {
         new TooltipAugment<>("history", new KeyCodeCombination(KeyCode.H, KeyCombination.ALT_DOWN))
                 .augment(historyButton);
 
-        var breadcrumbs = new BrowserBreadcrumbBar(model).grow(false, true);
+        var breadcrumbs = new BrowserBreadcrumbBar(model);
 
         var pathRegion = pathBar.createStructure().get();
         var breadcrumbsRegion = breadcrumbs.createRegion();
@@ -143,7 +143,7 @@ public Structure createBase() {
         topBox.setFillHeight(true);
         topBox.setAlignment(Pos.CENTER);
         homeButton.minWidthProperty().bind(pathRegion.heightProperty());
-        homeButton.maxWidthProperty().bind(pathRegion.heightProperty().multiply(1.3));
+        homeButton.maxWidthProperty().bind(pathRegion.heightProperty());
         homeButton.minHeightProperty().bind(pathRegion.heightProperty());
         homeButton.maxHeightProperty().bind(pathRegion.heightProperty());
         historyButton.minHeightProperty().bind(pathRegion.heightProperty());

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemComp.java
Patch:
@@ -85,10 +85,10 @@ root, new KeyCodeCombination(KeyCode.HOME, KeyCombination.ALT_DOWN), true, keyEv
         var filter = new BrowserFilterComp(model, model.getFilter()).createStructure();
 
         var topBar = new HBox();
-        filter.textField().prefHeightProperty().bind(topBar.heightProperty());
         topBar.setAlignment(Pos.CENTER);
         topBar.getStyleClass().add("top-bar");
         var navBar = new BrowserNavBar(model).createStructure();
+        filter.textField().prefHeightProperty().bind(navBar.get().heightProperty());
         AppFont.medium(navBar.get());
         topBar.getChildren()
                 .setAll(

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -82,7 +82,7 @@ private static Throwable adjustCopy(Throwable throwable, boolean clear) {
             causeField.set(copy, adjustCopy(throwable.getCause(), true));
 
             return copy;
-        } catch (Exception e) {
+        } catch (Throwable e) {
             // This can fail for example when the underlying exception is not serializable
             // and comes from some third party library
             if (AppLogs.get() != null) {

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -27,6 +27,7 @@ public class ShellDialects {
     public static ShellDialect CISCO;
     public static ShellDialect MIKROTIK;
     public static ShellDialect RBASH;
+    public static ShellDialect CONSTRAINED_POWERSHELL;
     public static ShellDialect OVH_BASTION;
 
     public static List<ShellDialect> getStartableDialects() {
@@ -85,6 +86,7 @@ public void init(ModuleLayer layer) {
             CISCO = byId("cisco");
             MIKROTIK = byId("mikrotik");
             RBASH = byId("rbash");
+            CONSTRAINED_POWERSHELL = byId("constrainedPowershell");
             OVH_BASTION = byId("ovhBastion");
         }
     }

File: app/src/main/java/io/xpipe/app/util/FileBridge.java
Patch:
@@ -252,7 +252,7 @@ public boolean registerChange() {
             // the modified time is the same for both write operations due to the file system modified time resolution being limited
             // We then can't identify changes purely based on the modified time, so the file size is the next best option
             // This might result in double change detection in rare cases, but that is irrelevant as it prevents files from being blanked
-            var changed = !newDate.equals(getLastModified()) || newSize > lastSize;
+            var changed = !newDate.equals(lastModified) || newSize > lastSize;
             lastSize = newSize;
             lastModified = newDate;
             return changed;

File: app/src/main/java/io/xpipe/app/ext/DataStoreProvider.java
Patch:
@@ -31,6 +31,8 @@ default boolean shouldShow(StoreEntryWrapper w) {
         return true;
     }
 
+    default void onParentRefresh(DataStoreEntry entry) {}
+
     default void onChildrenRefresh(DataStoreEntry entry) {}
 
     default ObservableBooleanValue busy(StoreEntryWrapper wrapper) {

File: ext/base/src/main/java/io/xpipe/ext/base/service/FixedServiceStore.java
Patch:
@@ -24,6 +24,7 @@ public class FixedServiceStore extends AbstractServiceStore implements FixedChil
 
     @Override
     public void checkComplete() throws Throwable {
+        super.checkComplete();
         Validators.nonNull(displayParent);
         Validators.nonNull(displayParent.getStore());
     }

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -32,9 +32,9 @@ public class BrowserStatusBarComp extends SimpleComp {
     @Override
     protected Region createSimple() {
         var bar = new HorizontalComp(List.of(
-                createProgressEstimateStatus(),
                 createProgressNameStatus(),
                 createProgressStatus(),
+                createProgressEstimateStatus(),
                 Comp.hspacer(),
                 createClipboardStatus(),
                 createSelectionStatus()

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FilterComp.java
Patch:
@@ -39,7 +39,7 @@ public CompStructure<CustomTextField> createBase() {
         filter.getStyleClass().add("filter-comp");
         filter.promptTextProperty().bind(AppI18n.observable("searchFilter"));
         filter.rightProperty().bind(Bindings.createObjectBinding(() -> {
-            return filter.isFocused() ? clear : fi;
+            return filter.isFocused() || (filter.getText() != null && !filter.getText().isEmpty()) ? clear : fi;
         }, filter.focusedProperty()));
         filter.setAccessibleText("Filter");
 

File: app/src/main/java/io/xpipe/app/prefs/VaultCategory.java
Patch:
@@ -36,8 +36,6 @@ public Comp<?> create() {
         }
         builder.addTitle("vaultSecurity")
                 .sub(new OptionsBuilder()
-                        .nameAndDescription("encryptAllVaultData")
-                        .addToggle(prefs.encryptAllVaultData)
                         .nameAndDescription("workspaceLock")
                         .addComp(
                                 new ButtonComp(
@@ -57,7 +55,9 @@ public Comp<?> create() {
                         .addToggle(prefs.lockVaultOnHibernation)
                         .hide(prefs.getLockCrypt()
                                 .isNull()
-                                .or(prefs.getLockCrypt().isEmpty())));
+                                .or(prefs.getLockCrypt().isEmpty()))
+                        .nameAndDescription("encryptAllVaultData")
+                        .addToggle(prefs.encryptAllVaultData));
         return builder.buildComp();
     }
 }

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemComp.java
Patch:
@@ -9,6 +9,7 @@
 import io.xpipe.app.browser.file.BrowserFileListComp;
 import io.xpipe.app.comp.base.ModalOverlayComp;
 import io.xpipe.app.comp.base.MultiContentComp;
+import io.xpipe.app.core.AppFont;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.SimpleCompStructure;
@@ -88,6 +89,7 @@ root, new KeyCodeCombination(KeyCode.HOME, KeyCombination.ALT_DOWN), true, keyEv
         topBar.setAlignment(Pos.CENTER);
         topBar.getStyleClass().add("top-bar");
         var navBar = new BrowserNavBar(model).createStructure();
+        AppFont.medium(navBar.get());
         topBar.getChildren()
                 .setAll(
                         overview,

File: app/src/main/java/io/xpipe/app/prefs/SyncCategory.java
Patch:
@@ -22,7 +22,7 @@ public Comp<?> create() {
                 .sub(new OptionsBuilder()
                         .name("enableGitStorage")
                         .description(
-                                AppProperties.get().isStaging() && !prefs.developerMode().getValue() ? "enableGitStoragePtbDisabled" : "enableGitStorage")
+                                AppProperties.get().isStaging() && !prefs.developerMode().getValue() ? "enableGitStoragePtbDisabled" : "enableGitStorageDescription")
                         .addToggle(prefs.enableGitStorage)
                         .disable(AppProperties.get().isStaging() && !prefs.developerMode().getValue())
                         .nameAndDescription("storageGitRemote")

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -58,8 +58,8 @@ private Comp<?> createProgressEstimateStatus() {
                 return null;
             } else {
                 var expected = p.expectedTimeRemaining();
-                var show = (p.getTotal() > 50_000_000 && p.elapsedTime().compareTo(Duration.of(200, ChronoUnit.MILLIS)) > 0) || expected.toMillis() > 5000;
-                var time = show ? HumanReadableFormat.duration(p.expectedTimeRemaining()) : "...";
+                var show = p.elapsedTime().compareTo(Duration.of(200, ChronoUnit.MILLIS)) > 0 && (p.getTotal() > 50_000_000 || expected.toMillis() > 5000);
+                var time = show ? HumanReadableFormat.duration(p.expectedTimeRemaining()) : "";
                 return time;
             }
         });

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
+import java.time.Duration;
 import java.util.Optional;
 import java.util.function.Consumer;
 import java.util.function.Function;
@@ -59,6 +60,8 @@ default boolean executeAndCheck() throws Exception {
 
     OutputStream startExternalStdin() throws Exception;
 
+    public void setExitTimeout(Duration duration);
+
     boolean waitFor();
 
     CommandControl withCustomCharset(Charset charset);

File: app/src/main/java/io/xpipe/app/util/ShellTemp.java
Patch:
@@ -26,6 +26,7 @@ public static Path getLocalTempDataDirectory(String sub) {
             temp = temp.resolve(user != null ? user : "user");
 
             try {
+                Files.createDirectories(temp);
                 // We did not set this in earlier versions. If we are running as a different user, it might fail
                 Files.setPosixFilePermissions(temp, PosixFilePermissions.fromString("rwxrwxrwx"));
             } catch (Exception e) {

File: core/src/main/java/io/xpipe/core/store/NetworkTunnelStore.java
Patch:
@@ -60,7 +60,7 @@ default boolean isLocallyTunneable() {
 
     default NetworkTunnelSession sessionChain(int local, int remotePort) throws Exception {
         if (!isLocallyTunneable()) {
-            throw new IllegalStateException();
+            throw new IllegalStateException("Unable to create tunnel chain as one intermediate system does not support tunneling");
         }
 
         var running = new AtomicBoolean();

File: app/src/main/java/io/xpipe/app/comp/AppLayoutComp.java
Patch:
@@ -32,6 +32,7 @@ public class AppLayoutComp extends Comp<CompStructure<Pane>> {
     @Override
     public CompStructure<Pane> createBase() {
         Map<Comp<?>, ObservableValue<Boolean>> map = model.getEntries().stream()
+                .filter(entry -> entry.comp() != null)
                 .collect(Collectors.toMap(
                         entry -> entry.comp(),
                         entry -> Bindings.createBooleanBinding(

File: app/src/main/java/io/xpipe/app/core/AppLayoutModel.java
Patch:
@@ -100,19 +100,19 @@ private List<Entry> createEntryList() {
                 new Entry(
                         AppI18n.observable("visitGithubRepository"),
                         "mdi2g-github",
-                        new AppPrefsComp(),
+                        null,
                         () -> Hyperlinks.open(Hyperlinks.GITHUB),
                         new KeyCodeCombination(KeyCode.DIGIT3, KeyCombination.CONTROL_DOWN)),
                 new Entry(
                         AppI18n.observable("discord"),
                         "mdi2d-discord",
-                        new AppPrefsComp(),
+                        null,
                         () -> Hyperlinks.open(Hyperlinks.DISCORD),
                         new KeyCodeCombination(KeyCode.DIGIT3, KeyCombination.CONTROL_DOWN)),
                 new Entry(
                         AppI18n.observable("api"),
                         "mdi2c-code-json",
-                        new AppPrefsComp(),
+                        null,
                         () -> Hyperlinks.open(
                                 "http://localhost:" + AppBeaconServer.get().getPort()),
                         new KeyCodeCombination(KeyCode.DIGIT3, KeyCombination.CONTROL_DOWN))));

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionTabsComp.java
Patch:
@@ -51,16 +51,16 @@ public BrowserSessionTabsComp(BrowserSessionModel model, ObservableDoubleValue l
 
     public Region createSimple() {
         var multi = new MultiContentComp(Map.<Comp<?>, ObservableValue<Boolean>>of(
-                Comp.hspacer().styleClass("top-spacer"),
-                new SimpleBooleanProperty(true),
                 Comp.of(() -> createTabPane()),
                 Bindings.isNotEmpty(model.getSessionEntries()),
                 new BrowserWelcomeComp(model).apply(struc -> StackPane.setAlignment(struc.get(), Pos.CENTER_LEFT)),
                 Bindings.createBooleanBinding(
                         () -> {
                             return model.getSessionEntries().size() == 0;
                         },
-                        model.getSessionEntries())));
+                        model.getSessionEntries()),
+                Comp.hspacer().styleClass("top-spacer"),
+                new SimpleBooleanProperty(true)));
         multi.apply(struc -> ((StackPane) struc.get()).setAlignment(Pos.TOP_CENTER));
         return multi.createRegion();
     }

File: app/src/main/java/io/xpipe/app/core/AppTheme.java
Patch:
@@ -59,11 +59,13 @@ public static void initThemeHandlers(Stage stage) {
                 }
 
                 stage.getScene().getRoot().getStyleClass().add(t.getCssId());
-                stage.getScene().getStylesheets().removeAll(t.getAdditionalStylesheets());
                 stage.getScene().getStylesheets().addAll(t.getAdditionalStylesheets());
                 stage.getScene().getRoot().pseudoClassStateChanged(LIGHT, !t.isDark());
                 stage.getScene().getRoot().pseudoClassStateChanged(DARK, t.isDark());
             });
+            AppPrefs.get().theme.addListener((observable, oldValue, newValue) -> {
+                stage.getScene().getStylesheets().removeAll(oldValue.getAdditionalStylesheets());
+            });
 
             AppPrefs.get().performanceMode().subscribe(val -> {
                 stage.getScene().getRoot().pseudoClassStateChanged(PRETTY, !val);

File: app/src/main/java/io/xpipe/app/core/window/AppMainWindow.java
Patch:
@@ -54,6 +54,8 @@ public static AppMainWindow init(Stage stage) {
         scene.setFill(Color.TRANSPARENT);
         ModifiedStage.prepareStage(stage);
         stage.setScene(scene);
+        stage.opacityProperty().bind(AppPrefs.get().windowOpacity());
+        AppWindowHelper.addIcons(stage);
         AppWindowHelper.setupStylesheets(stage.getScene());
         return INSTANCE;
     }

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -49,10 +49,10 @@ public static void teardown() {
         setCurrent(PlatformState.EXITED);
     }
 
-    public static void initPlatformOrThrow() throws Exception {
+    public static void initPlatformOrThrow() throws Throwable {
         initPlatformIfNeeded();
         if (lastError != null) {
-            throw lastError instanceof Exception e ? e : new Exception(lastError);
+            throw getLastError();
         }
     }
 

File: app/src/main/java/io/xpipe/app/util/UnlockAlert.java
Patch:
@@ -18,7 +18,7 @@
 
 public class UnlockAlert {
 
-    public static void showIfNeeded() throws Exception {
+    public static void showIfNeeded() throws Throwable {
         if (AppPrefs.get().getLockCrypt().getValue() == null
                 || AppPrefs.get().getLockCrypt().getValue().isEmpty()) {
             return;

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionTabsComp.java
Patch:
@@ -51,6 +51,8 @@ public BrowserSessionTabsComp(BrowserSessionModel model, ObservableDoubleValue l
 
     public Region createSimple() {
         var multi = new MultiContentComp(Map.<Comp<?>, ObservableValue<Boolean>>of(
+                Comp.hspacer().styleClass("top-spacer"),
+                new SimpleBooleanProperty(true),
                 Comp.of(() -> createTabPane()),
                 Bindings.isNotEmpty(model.getSessionEntries()),
                 new BrowserWelcomeComp(model).apply(struc -> StackPane.setAlignment(struc.get(), Pos.CENTER_LEFT)),
@@ -59,6 +61,7 @@ public Region createSimple() {
                             return model.getSessionEntries().size() == 0;
                         },
                         model.getSessionEntries())));
+        multi.apply(struc -> ((StackPane) struc.get()).setAlignment(Pos.TOP_CENTER));
         return multi.createRegion();
     }
 

File: app/src/main/java/io/xpipe/app/beacon/BeaconRequestHandler.java
Patch:
@@ -110,6 +110,7 @@ private void handleAuthenticatedRequest(HttpExchange exchange) {
                         .replace("$RequestBuilder", "")
                         .replace("Exchange$Request","Request")
                         .replace("at [Source: UNKNOWN; byte offset: #UNKNOWN]", "")
+                        .replaceAll("(\\w+) is marked non-null but is null", "field $1 is missing from object")
                         .trim();
                 writeError(exchange, new BeaconClientErrorResponse(message), 400);
             }

File: app/src/main/java/io/xpipe/app/beacon/impl/ConnectionInfoExchangeImpl.java
Patch:
@@ -37,6 +37,7 @@ public Object handle(HttpExchange exchange, Request msg) throws BeaconClientExce
                     .usageCategory(e.getProvider().getUsageCategory())
                     .type(e.getProvider().getId())
                     .state(e.getStorePersistentState() != null ? e.getStorePersistentState() : new Object())
+                    .cache(e.getStoreCache())
                     .build();
             list.add(apply);
         }

File: app/src/main/java/io/xpipe/app/browser/BrowserBookmarkHeaderComp.java
Patch:
@@ -30,8 +30,9 @@ protected Region createSimple() {
                         StoreViewState.get().getAllConnectionsCategory(),
                         StoreViewState.get().getActiveCategory(),
                         this.category)
-                .styleClass(Styles.LEFT_PILL);
-        var filter = new FilterComp(this.filter).styleClass(Styles.RIGHT_PILL).hgrow();
+                .styleClass(Styles.LEFT_PILL)
+                .minWidth(Region.USE_PREF_SIZE);
+        var filter = new FilterComp(this.filter).styleClass(Styles.RIGHT_PILL).minWidth(0).hgrow();
 
         var top = new HorizontalComp(List.of(category, filter))
                 .apply(struc -> struc.get().setFillHeight(true))

File: app/src/main/java/io/xpipe/app/comp/base/SideMenuBarComp.java
Patch:
@@ -45,14 +45,14 @@ public CompStructure<VBox> createBase() {
         var selectedBorder = Bindings.createObjectBinding(
                 () -> {
                     var c = Platform.getPreferences().getAccentColor().desaturate();
-                    return new Background(new BackgroundFill(c,new CornerRadii(8), new Insets(5, 1, 5, 2)));
+                    return new Background(new BackgroundFill(c,new CornerRadii(8), new Insets(10, 1, 10, 2)));
                 },
                 Platform.getPreferences().accentColorProperty());
 
         var hoverBorder = Bindings.createObjectBinding(
                 () -> {
                     var c = Platform.getPreferences().getAccentColor().darker().desaturate();
-                    return new Background(new BackgroundFill(c,new CornerRadii(8), new Insets(5, 1, 5, 2)));
+                    return new Background(new BackgroundFill(c,new CornerRadii(8), new Insets(10, 1, 10, 2)));
                 },
                 Platform.getPreferences().accentColorProperty());
 

File: app/src/main/java/module-info.java
Patch:
@@ -135,6 +135,7 @@
             ShellExecExchangeImpl,
             ConnectionQueryExchangeImpl,
             ConnectionInfoExchangeImpl,
+            ConnectionRemoveExchangeImpl,
             ConnectionAddExchangeImpl,
             ConnectionBrowseExchangeImpl,
             ConnectionTerminalExchangeImpl,

File: beacon/src/main/java/module-info.java
Patch:
@@ -38,6 +38,7 @@
             HandshakeExchange,
             ConnectionQueryExchange,
             ConnectionInfoExchange,
+            ConnectionRemoveExchange,
             ConnectionAddExchange,
             ConnectionBrowseExchange,
             ConnectionTerminalExchange,

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.core.check.AppSystemFontCheck;
+import io.xpipe.app.core.window.ModifiedStage;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;
@@ -113,7 +114,7 @@ private static Optional<Throwable> initPlatform() {
             }
         }
 
-        if (SystemUtils.IS_OS_WINDOWS_11) {
+        if (SystemUtils.IS_OS_WINDOWS && ModifiedStage.mergeFrame()) {
             // This is primarily intended to fix Windows unified stage transparency issues (https://bugs.openjdk.org/browse/JDK-8329382)
             System.setProperty("prism.forceUploadingPainter", "true");
         }

File: app/src/main/java/io/xpipe/app/core/window/AppWindowHelper.java
Patch:
@@ -64,7 +64,7 @@ public static void addIcons(Stage stage) {
     public static Stage sideWindow(
             String title, Function<Stage, Comp<?>> contentFunc, boolean bindSize, ObservableValue<Boolean> loading) {
         var stage = AppWindowBounds.centerStage();
-        stage.initStyle(StageStyle.UNIFIED);
+        ModifiedStage.prepareStage(stage);
         if (AppMainWindow.getInstance() != null) {
             stage.initOwner(AppMainWindow.getInstance().getStage());
         }
@@ -190,7 +190,7 @@ public static Alert createEmptyAlert() {
         }
         alert.getDialogPane().getScene().setFill(Color.TRANSPARENT);
         var stage = (Stage) alert.getDialogPane().getScene().getWindow();
-        stage.initStyle(StageStyle.UNIFIED);
+        ModifiedStage.prepareStage(stage);
         addIcons(stage);
         setupStylesheets(alert.getDialogPane().getScene());
         return alert;

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -346,7 +346,7 @@ public boolean refreshChildren(DataStoreEntry e) {
         e.incrementBusyCounter();
         List<? extends DataStoreEntryRef<? extends FixedChildStore>> newChildren;
         try {
-            newChildren = ((FixedHierarchyStore) (e.getStore())).listChildren(e);
+            newChildren = ((FixedHierarchyStore) (e.getStore())).listChildren(e).stream().filter(dataStoreEntryRef -> dataStoreEntryRef != null && dataStoreEntryRef.get() != null).toList();
         } catch (Exception ex) {
             ErrorEvent.fromThrowable(ex).handle();
             return false;

File: app/src/main/java/io/xpipe/app/comp/store/DenseStoreEntryComp.java
Patch:
@@ -6,6 +6,7 @@
 import io.xpipe.app.fxcomps.util.PlatformThread;
 
 import javafx.beans.binding.Bindings;
+import javafx.beans.property.SimpleStringProperty;
 import javafx.geometry.HPos;
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
@@ -32,7 +33,7 @@ private Label createInformation(GridPane grid) {
                 : Comp.empty();
         information.setGraphic(state.createRegion());
 
-        var info = wrapper.getEntry().getProvider().informationString(wrapper);
+        var info = wrapper.getEntry().getProvider() != null ? wrapper.getEntry().getProvider().informationString(wrapper) : new SimpleStringProperty();
         var summary = wrapper.getSummary();
         if (wrapper.getEntry().getProvider() != null) {
             information

File: app/src/main/java/io/xpipe/app/core/window/ModifiedStage.java
Patch:
@@ -50,7 +50,7 @@ private static void applyModes(Stage stage) {
             return;
         }
 
-        if (OsType.getLocal() != OsType.WINDOWS || AppPrefs.get() == null || AppPrefs.get().theme == null) {
+        if (OsType.getLocal() != OsType.WINDOWS || AppPrefs.get() == null || AppPrefs.get().theme.getValue() == null) {
             stage.getScene().getRoot().pseudoClassStateChanged(PseudoClass.getPseudoClass("seamless-frame"), false);
             stage.getScene().getRoot().pseudoClassStateChanged(PseudoClass.getPseudoClass("separate-frame"), true);
             return;

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListComp.java
Patch:
@@ -549,14 +549,14 @@ public FilenameCell(Property<BrowserEntry> editing, TableView<BrowserEntry> tabl
             graphic.setAlignment(Pos.CENTER_LEFT);
             setGraphic(graphic);
 
-            InputHelper.onExactKeyCode(tableView, KeyCode.RIGHT, true, event -> {
+            InputHelper.onExactKeyCode(tableView, KeyCode.RIGHT, false, event -> {
                 var selected = fileList.getSelection();
                 if (selected.size() == 1 && selected.getFirst() == getTableRow().getItem()) {
                     ((ButtonBase) quickAccess).fire();
                     event.consume();
                 }
             });
-            InputHelper.onExactKeyCode(tableView, KeyCode.SPACE, true, event -> {
+            InputHelper.onExactKeyCode(tableView, KeyCode.SPACE, false, event -> {
                 var selected = fileList.getSelection();
                 // Only show one menu across all selected entries
                 if (selected.size() > 0 && selected.getLast() == getTableRow().getItem()) {

File: app/src/main/java/io/xpipe/app/core/window/ModifiedStage.java
Patch:
@@ -50,7 +50,7 @@ private static void applyModes(Stage stage) {
             return;
         }
 
-        if (OsType.getLocal() != OsType.WINDOWS || AppPrefs.get() == null) {
+        if (OsType.getLocal() != OsType.WINDOWS || AppPrefs.get() == null || AppPrefs.get().theme == null) {
             stage.getScene().getRoot().pseudoClassStateChanged(PseudoClass.getPseudoClass("seamless-frame"), false);
             stage.getScene().getRoot().pseudoClassStateChanged(PseudoClass.getPseudoClass("separate-frame"), true);
             return;

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -90,7 +90,7 @@ private Comp<?> createProgressNameStatus() {
                 return p.getName();
             }
         });
-        var progressComp = new LabelComp(text).styleClass("progress").apply(struc -> struc.get().setAlignment(Pos.CENTER_LEFT)).prefWidth(250);
+        var progressComp = new LabelComp(text).styleClass("progress").apply(struc -> struc.get().setAlignment(Pos.CENTER_LEFT)).prefWidth(180);
         return progressComp;
     }
 

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -70,8 +70,7 @@ public static FilePath constructTerminalInitFile(
         content += nl + postInit.stream().flatMap(s -> s.lines()).collect(Collectors.joining(nl)) + nl;
 
         if (exit) {
-            // Assign exit code 0 to prevent terminals from doing their own pause error handling for failed commands
-            content += nl + t.getNormalExitCommand();
+            content += nl + t.getPassthroughExitCommand();
         }
 
         return createExecScript(t, processControl, new FilePath(t.initFileName(processControl)), content);

File: app/src/main/java/io/xpipe/app/browser/file/BrowserAlerts.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.core.window.AppWindowHelper;
 import io.xpipe.core.store.FileKind;
+import io.xpipe.core.store.FilePath;
 import io.xpipe.core.store.FileSystem;
 
 import javafx.scene.control.Alert;
@@ -79,7 +80,7 @@ public static boolean showDeleteAlert(List<FileSystem.FileEntry> source) {
     private static String getSelectedElementsString(List<FileSystem.FileEntry> source) {
         var namesHeader = AppI18n.get("selectedElements");
         var names = namesHeader + "\n"
-                + source.stream().limit(10).map(entry -> "- " + entry.getPath()).collect(Collectors.joining("\n"));
+                + source.stream().limit(10).map(entry -> "- " + new FilePath(entry.getPath()).getFileName()).collect(Collectors.joining("\n"));
         if (source.size() > 10) {
             names += "\n+ " + (source.size() - 10) + " ...";
         }

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileTransferOperation.java
Patch:
@@ -123,7 +123,6 @@ public void execute() throws Exception {
         for (var file : files) {
             if (same) {
                 handleSingleOnSameFileSystem(file);
-                updateProgress(BrowserTransferProgress.finished(file.getName(), file.getSize()));
             } else {
                 handleSingleAcrossFileSystems(file);
             }
@@ -254,7 +253,6 @@ private void handleSingleAcrossFileSystems(FileSystem.FileEntry source) throws E
                     throw ex;
                 }
 
-                updateProgress(BrowserTransferProgress.finished(sourceFile.getName(), transferred.get()));
                 Exception exception = null;
                 try {
                     inputStream.close();

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionModel.java
Patch:
@@ -13,6 +13,7 @@
 import io.xpipe.core.util.FailableFunction;
 
 import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.Property;
 import javafx.beans.property.SimpleBooleanProperty;
 
 import lombok.Getter;
@@ -26,6 +27,7 @@ public class BrowserSessionModel extends BrowserAbstractSessionModel<BrowserSess
 
     private final BrowserTransferModel localTransfersStage = new BrowserTransferModel(this);
     private final BrowserSavedState savedState;
+    private final Property<Boolean> draggingFiles = new SimpleBooleanProperty();
 
     public BrowserSessionModel(BrowserSavedState savedState) {
         this.savedState = savedState;

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -10,6 +10,7 @@
 import io.xpipe.app.fxcomps.augment.ContextMenuAugment;
 import io.xpipe.app.fxcomps.impl.LabelComp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
+import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.util.HumanReadableFormat;
 
 import javafx.beans.binding.Bindings;
@@ -66,7 +67,8 @@ private Comp<?> createProgressStatus() {
                 return transferred + " / " + all + name + time;
             }
         });
-        var progressComp = new LabelComp(text).styleClass("progress");
+        var synced = PlatformThread.syncHighFrequency(text);
+        var progressComp = new LabelComp(synced).styleClass("progress");
         return progressComp;
     }
 

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionModel.java
Patch:
@@ -66,7 +66,7 @@ public void reset() {
         }
 
         // Delete all files
-        localTransfersStage.clear();
+        localTransfersStage.clear(true);
     }
 
     public void openFileSystemAsync(

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -170,7 +170,7 @@ protected void setupBuiltinCategories() {
                     Instant.now(),
                     true,
                     ALL_CONNECTIONS_CATEGORY_UUID,
-                    StoreSortMode.ALPHABETICAL_ASC,
+                    StoreSortMode.getDefault(),
                     false));
         }
 

File: app/src/main/java/io/xpipe/app/storage/DataStoreCategory.java
Patch:
@@ -57,7 +57,7 @@ public static DataStoreCategory createNew(UUID parentCategory, @NonNull String n
                 Instant.now(),
                 true,
                 parentCategory,
-                StoreSortMode.ALPHABETICAL_ASC,
+                StoreSortMode.getDefault(),
                 false);
     }
 
@@ -70,7 +70,7 @@ public static DataStoreCategory createNew(UUID parentCategory, @NonNull UUID uui
                 Instant.now(),
                 true,
                 parentCategory,
-                StoreSortMode.ALPHABETICAL_ASC,
+                StoreSortMode.getDefault(),
                 false);
     }
 
@@ -97,7 +97,7 @@ public static Optional<DataStoreCategory> fromDirectory(Path dir) throws Excepti
         var sortMode = Optional.ofNullable(stateJson.get("sortMode"))
                 .map(JsonNode::asText)
                 .flatMap(string -> StoreSortMode.fromId(string))
-                .orElse(StoreSortMode.ALPHABETICAL_ASC);
+                .orElse(StoreSortMode.getDefault());
         var share =
                 Optional.ofNullable(json.get("share")).map(JsonNode::asBoolean).orElse(false);
         var lastUsed = Optional.ofNullable(stateJson.get("lastUsed"))

File: app/src/main/java/io/xpipe/app/storage/ImpersistentStorage.java
Patch:
@@ -32,7 +32,7 @@ public void load() {
                     Instant.now(),
                     true,
                     ALL_CONNECTIONS_CATEGORY_UUID,
-                    StoreSortMode.ALPHABETICAL_ASC,
+                    StoreSortMode.getDefault(),
                     true);
             storeCategories.add(cat);
             selectedCategory = getStoreCategoryIfPresent(DEFAULT_CATEGORY_UUID).orElseThrow();

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListComp.java
Patch:
@@ -50,7 +50,6 @@ protected Region createSimple() {
                 StoreViewState.get().getAllEntries().getList(),
                 StoreViewState.get().getActiveCategory());
         var map = new LinkedHashMap<Comp<?>, ObservableValue<Boolean>>();
-        map.put(new StoreIntroComp(), showIntro);
         map.put(
                 new StoreNotFoundComp(),
                 Bindings.and(
@@ -66,6 +65,7 @@ protected Region createSimple() {
                         .getCurrentTopLevelSection()
                         .getShownChildren()
                         .getList())));
+        map.put(new StoreIntroComp(), showIntro);
 
         return new MultiContentComp(map).createRegion();
     }

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -5,6 +5,7 @@
 import io.xpipe.app.core.check.AppDebugModeCheck;
 import io.xpipe.app.core.check.AppTempCheck;
 import io.xpipe.app.core.check.AppUserDirectoryCheck;
+import io.xpipe.app.core.window.ModifiedStage;
 import io.xpipe.app.issue.*;
 import io.xpipe.app.launcher.LauncherCommand;
 import io.xpipe.app.prefs.AppPrefs;
@@ -114,6 +115,8 @@ private static void setup(String[] args) {
             AppExtensionManager.init(true);
             AppI18n.init();
             AppPrefs.initLocal();
+            // Register stage theming early to make it apply for any potential early popups
+            ModifiedStage.init();
             AppBeaconServer.setupPort();
             TrackEvent.info("Finished initial setup");
         } catch (Throwable ex) {

File: app/src/main/java/io/xpipe/app/core/mode/PlatformMode.java
Patch:
@@ -3,13 +3,11 @@
 import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.core.*;
 import io.xpipe.app.core.check.AppFontLoadingCheck;
-import io.xpipe.app.core.window.ModifiedStage;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.update.UpdateAvailableAlert;
 import io.xpipe.app.util.PlatformState;
 import io.xpipe.app.util.ThreadHelper;
-
 import javafx.application.Application;
 
 public abstract class PlatformMode extends OperationMode {
@@ -35,7 +33,6 @@ public void onSwitchTo() throws Throwable {
         AppStyle.init();
         AppImages.init();
         AppLayoutModel.init();
-        ModifiedStage.init();
         TrackEvent.info("Finished essential component initialization before platform");
 
         TrackEvent.info("Launching application ...");

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ScrollComp.java
Patch:
@@ -27,6 +27,7 @@ public CompStructure<ScrollPane> createBase() {
         sp.setFitToWidth(true);
         sp.getStyleClass().add("scroll-comp");
         sp.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);
+        sp.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
         sp.setSkin(new ScrollPaneSkin(sp));
 
         ScrollBar bar = (ScrollBar) sp.lookup(".scroll-bar:vertical");

File: app/src/main/java/io/xpipe/app/browser/BrowserTransferComp.java
Patch:
@@ -92,7 +92,7 @@ protected Region createSimple() {
                 .hide(Bindings.isEmpty(syncItems));
 
         var bottom =
-                new HorizontalComp(List.of(dragNotice, Comp.hspacer(), downloadButton, Comp.hspacer(4), clearButton));
+                new HorizontalComp(List.of(Comp.hspacer(), dragNotice, Comp.hspacer(), downloadButton, Comp.hspacer(4), clearButton));
         var listBox = new VerticalComp(List.of(list, bottom))
                 .spacing(5)
                 .padding(new Insets(10, 10, 5, 10))

File: app/src/main/java/io/xpipe/app/core/window/AppWindowHelper.java
Patch:
@@ -8,7 +8,6 @@
 import io.xpipe.app.util.InputHelper;
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.process.OsType;
-
 import javafx.application.Platform;
 import javafx.beans.value.ObservableValue;
 import javafx.css.PseudoClass;
@@ -190,7 +189,9 @@ public static Alert createEmptyAlert() {
             alert.initOwner(AppMainWindow.getInstance().getStage());
         }
         alert.getDialogPane().getScene().setFill(Color.TRANSPARENT);
-        addIcons(((Stage) alert.getDialogPane().getScene().getWindow()));
+        var stage = (Stage) alert.getDialogPane().getScene().getWindow();
+        stage.initStyle(StageStyle.UNIFIED);
+        addIcons(stage);
         setupStylesheets(alert.getDialogPane().getScene());
         return alert;
     }

File: app/src/main/java/io/xpipe/app/prefs/SyncCategory.java
Patch:
@@ -22,9 +22,9 @@ public Comp<?> create() {
                 .sub(new OptionsBuilder()
                         .name("enableGitStorage")
                         .description(
-                                AppProperties.get().isStaging() ? "enableGitStoragePtbDisabled" : "enableGitStorage")
+                                AppProperties.get().isStaging() && !prefs.developerMode().getValue() ? "enableGitStoragePtbDisabled" : "enableGitStorage")
                         .addToggle(prefs.enableGitStorage)
-                        .disable(AppProperties.get().isStaging())
+                        .disable(AppProperties.get().isStaging() && !prefs.developerMode().getValue())
                         .nameAndDescription("storageGitRemote")
                         .addString(prefs.storageGitRemote, true)
                         .disable(prefs.enableGitStorage.not())

File: ext/base/src/main/java/io/xpipe/ext/base/service/FixedServiceStoreProvider.java
Patch:
@@ -16,7 +16,7 @@ public DataStoreEntry getSyntheticParent(DataStoreEntry store) {
         FixedServiceStore s = store.getStore().asNeeded();
         return DataStorage.get()
                 .getOrCreateNewSyntheticEntry(
-                        s.getHost().get(),
+                        s.getDisplayParent().get(),
                         "Services",
                         FixedServiceGroupStore.builder()
                                 .parent(s.getDisplayParent().get().ref())

File: ext/base/src/main/java/module-info.java
Patch:
@@ -67,7 +67,6 @@
             LaunchStoreAction,
             XPipeUrlAction,
             EditStoreAction,
-            DeleteChildrenStoreAction,
             BrowseStoreAction,
             ScanStoreAction;
     provides DataStoreProvider with

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -23,7 +23,7 @@ public class XPipeInstallation {
             .orElse(false);
 
     public static int getDefaultBeaconPort() {
-        var offset = isStaging() ? 2 : 0;
+        var offset = isStaging() ? 1 : 0;
         return 21721 + offset;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/script/RunScriptAction.java
Patch:
@@ -55,7 +55,7 @@ private Map<String, SimpleScriptStore> getInstances(ShellControl sc) {
                 continue;
             }
 
-            if (script.assemble(sc) == null) {
+            if (!script.isCompatible(sc)) {
                 continue;
             }
 

File: app/src/main/java/io/xpipe/app/beacon/impl/DaemonVersionExchangeImpl.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.beacon.impl;
 
 import io.xpipe.app.core.AppProperties;
+import io.xpipe.app.core.AppVersion;
 import io.xpipe.beacon.api.DaemonVersionExchange;
 
 import com.sun.net.httpserver.HttpExchange;
@@ -20,6 +21,7 @@ public Object handle(HttpExchange exchange, Request msg) {
         var version = AppProperties.get().getVersion();
         return Response.builder()
                 .version(version)
+                .canonicalVersion(AppVersion.parse(version).map(appVersion -> appVersion.toString()).orElse("?"))
                 .buildVersion(AppProperties.get().getBuild())
                 .jvmVersion(jvmVersion)
                 .build();

File: app/src/main/java/io/xpipe/app/comp/store/StoreNotesComp.java
Patch:
@@ -67,7 +67,8 @@ public Structure createBase() {
         });
         n.addListener((observable, oldValue, s) -> {
             prop.set(s.getCurrent());
-            if (s.getCurrent() != null && oldValue.getCommited() == null && oldValue.isCommited()) {
+            // Check for scene existence. If we exited the platform immediately after adding notes, this might throw an exception
+            if (s.getCurrent() != null && oldValue.getCommited() == null && oldValue.isCommited() && button.getScene() != null) {
                 Platform.runLater(() -> {
                     popover.set(createPopover(popover, prop));
                     popover.get().show(button);

File: beacon/src/main/java/io/xpipe/beacon/api/DaemonVersionExchange.java
Patch:
@@ -24,6 +24,7 @@ public static class Request {}
     public static class Response {
 
         String version;
+        String canonicalVersion;
         String buildVersion;
         String jvmVersion;
     }

File: app/src/main/java/io/xpipe/app/beacon/impl/ConnectionInfoExchangeImpl.java
Patch:
@@ -30,7 +30,7 @@ public Object handle(HttpExchange exchange, Request msg) throws BeaconClientExce
             var apply = InfoResponse.builder()
                     .lastModified(e.getLastModified())
                     .lastUsed(e.getLastUsed())
-                    .connection(e.getCategoryUuid())
+                    .connection(e.getUuid())
                     .category(cat)
                     .name(DataStorage.get().getStorePath(e))
                     .rawData(e.getStore())

File: app/src/main/java/io/xpipe/app/beacon/impl/ConnectionQueryExchangeImpl.java
Patch:
@@ -15,9 +15,9 @@ public class ConnectionQueryExchangeImpl extends ConnectionQueryExchange {
 
     @Override
     public Object handle(HttpExchange exchange, Request msg) {
-        var catMatcher = Pattern.compile(toRegex("all connections/" + msg.getCategoryFilter()));
-        var conMatcher = Pattern.compile(toRegex(msg.getConnectionFilter()));
-        var typeMatcher = Pattern.compile(toRegex(msg.getTypeFilter()));
+        var catMatcher = Pattern.compile(toRegex("all connections/" + msg.getCategoryFilter().toLowerCase()));
+        var conMatcher = Pattern.compile(toRegex(msg.getConnectionFilter().toLowerCase()));
+        var typeMatcher = Pattern.compile(toRegex(msg.getTypeFilter().toLowerCase()));
 
         List<DataStoreEntry> found = new ArrayList<>();
         for (DataStoreEntry storeEntry : DataStorage.get().getStoreEntries()) {

File: app/src/main/java/io/xpipe/app/browser/BrowserBookmarkComp.java
Patch:
@@ -70,8 +70,7 @@ protected Region createSimple() {
                         category,
                         StoreViewState.get().getEntriesListUpdateObservable()),
                 augment,
-                entryWrapper -> action.accept(entryWrapper, busy),
-                true);
+                entryWrapper -> action.accept(entryWrapper, busy));
 
         var r = section.vgrow().createRegion();
         r.getStyleClass().add("bookmark-list");

File: app/src/main/java/io/xpipe/app/browser/BrowserSelectionListComp.java
Patch:
@@ -59,7 +59,8 @@ protected Region createSimple() {
                         l.textProperty().bind(PlatformThread.sync(nameTransformation.apply(entry)));
                         return l;
                     });
-                })
+                },
+                false)
                 .styleClass("selected-file-list");
         return c.createRegion();
     }

File: app/src/main/java/io/xpipe/app/browser/BrowserWelcomeComp.java
Patch:
@@ -101,15 +101,15 @@ protected Region createSimple() {
                     var disable = new SimpleBooleanProperty();
                     var entryButton = entryButton(e, disable);
                     var dirButton = dirButton(e, disable);
-                    return new HorizontalComp(List.of(entryButton, dirButton, Comp.hspacer(10))).apply(struc -> {
+                    return new HorizontalComp(List.of(entryButton, dirButton)).apply(struc -> {
                         ((Region) struc.get().getChildren().get(0))
                                 .prefHeightProperty()
                                 .bind(struc.get().heightProperty());
                         ((Region) struc.get().getChildren().get(1))
                                 .prefHeightProperty()
                                 .bind(struc.get().heightProperty());
                     });
-                })
+                }, true)
                 .apply(struc -> {
                     VBox vBox = (VBox) struc.get().getContent();
                     vBox.setSpacing(10);
@@ -119,7 +119,7 @@ protected Region createSimple() {
 
         var layout = new VBox();
         layout.getStyleClass().add("welcome");
-        layout.setPadding(new Insets(40, 40, 40, 50));
+        layout.setPadding(new Insets(60, 40, 40, 50));
         layout.setSpacing(18);
         layout.getChildren().add(hbox);
         layout.getChildren().add(Comp.separator().hide(empty).createRegion());

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileOverviewComp.java
Patch:
@@ -50,7 +50,7 @@ protected Region createSimple() {
         };
 
         if (grow) {
-            var c = new ListBoxViewComp<>(list, list, factory).styleClass("overview-file-list");
+            var c = new ListBoxViewComp<>(list, list, factory, true).styleClass("overview-file-list");
             return c.createRegion();
         } else {
             var c = new VBoxViewComp<>(list, list, factory).styleClass("overview-file-list");

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionComp.java
Patch:
@@ -136,7 +136,8 @@ public CompStructure<VBox> createBase() {
         var content = new ListBoxViewComp<>(
                         listSections.getList(), section.getAllChildren().getList(), (StoreSection e) -> {
                             return StoreSection.customSection(e, false).apply(GrowAugment.create(true, false));
-                        })
+                        },
+                false)
                 .minHeight(0)
                 .hgrow();
 
@@ -150,9 +151,8 @@ public CompStructure<VBox> createBase() {
         var full = new VerticalComp(List.of(
                 topEntryList,
                 Comp.separator().hide(expanded.not()),
-                new HorizontalComp(List.of(content))
+                content
                         .styleClass("children-content")
-                        .apply(struc -> struc.get().setFillHeight(true))
                         .hide(Bindings.or(
                                 Bindings.not(section.getWrapper().getExpanded()),
                                 Bindings.size(section.getShownChildren().getList())

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -108,8 +108,7 @@ private Popover getPopover() {
                             selected.setValue(storeEntryWrapper.getEntry().ref());
                             popover.hide();
                         }
-                    },
-                    true);
+                    });
             var category = new DataStoreCategoryChoiceComp(
                             initialCategory != null ? initialCategory.getRoot() : null,
                             StoreViewState.get().getActiveCategory(),

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreListChoiceComp.java
Patch:
@@ -49,7 +49,8 @@ protected Region createSimple() {
                         selectedList.remove(t);
                     });
                     return new HorizontalComp(List.of(label, Comp.hspacer(), delete)).styleClass("entry");
-                })
+                },
+                true)
                 .padding(new Insets(0))
                 .apply(struc -> struc.get().setMinHeight(0))
                 .apply(struc -> ((VBox) struc.get().getContent()).setSpacing(5));

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryComp.java
Patch:
@@ -113,7 +113,7 @@ protected Region createSimple() {
         var l = category.getChildren()
                 .sorted(Comparator.comparing(storeCategoryWrapper ->
                         storeCategoryWrapper.nameProperty().getValue().toLowerCase(Locale.ROOT)));
-        var children = new ListBoxViewComp<>(l, l, storeCategoryWrapper -> new StoreCategoryComp(storeCategoryWrapper));
+        var children = new ListBoxViewComp<>(l, l, storeCategoryWrapper -> new StoreCategoryComp(storeCategoryWrapper), false);
 
         var emptyBinding = Bindings.isEmpty(category.getChildren());
         var v = new VerticalComp(List.of(categoryButton, children.hide(emptyBinding)));

File: app/src/main/java/module-info.java
Patch:
@@ -134,6 +134,7 @@
             ShellStopExchangeImpl,
             ShellExecExchangeImpl,
             ConnectionQueryExchangeImpl,
+            ConnectionInfoExchangeImpl,
             DaemonOpenExchangeImpl,
             DaemonFocusExchangeImpl,
             DaemonStatusExchangeImpl,

File: beacon/src/main/java/module-info.java
Patch:
@@ -37,6 +37,7 @@
             DaemonStopExchange,
             HandshakeExchange,
             ConnectionQueryExchange,
+            ConnectionInfoExchange,
             AskpassExchange,
             TerminalWaitExchange,
             TerminalLaunchExchange,

File: core/src/main/java/io/xpipe/core/util/JacksonMapper.java
Patch:
@@ -27,6 +27,7 @@ public class JacksonMapper {
         objectMapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
         objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
         objectMapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
+        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
         objectMapper.setVisibility(objectMapper
                 .getSerializationConfig()
                 .getDefaultVisibilityChecker()

File: ext/base/src/main/java/io/xpipe/ext/base/script/SimpleScriptStoreProvider.java
Patch:
@@ -7,6 +7,7 @@
 import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.core.AppExtensionManager;
 import io.xpipe.app.core.AppI18n;
+import io.xpipe.app.ext.DataStoreCreationCategory;
 import io.xpipe.app.ext.DataStoreProvider;
 import io.xpipe.app.ext.EnabledParentStoreProvider;
 import io.xpipe.app.ext.GuiDialog;
@@ -82,8 +83,8 @@ public String createInsightsMarkdown(DataStore store) {
     }
 
     @Override
-    public CreationCategory getCreationCategory() {
-        return CreationCategory.SCRIPT;
+    public DataStoreCreationCategory getCreationCategory() {
+        return DataStoreCreationCategory.SCRIPT;
     }
 
     @Override

File: ext/base/src/main/java/io/xpipe/ext/base/service/CustomServiceStoreProvider.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.ext.base.service;
 
 import io.xpipe.app.comp.store.StoreViewState;
+import io.xpipe.app.ext.DataStoreCreationCategory;
 import io.xpipe.app.ext.GuiDialog;
 import io.xpipe.app.fxcomps.impl.DataStoreChoiceComp;
 import io.xpipe.app.storage.DataStoreEntry;
@@ -16,8 +17,8 @@
 public class CustomServiceStoreProvider extends AbstractServiceStoreProvider {
 
     @Override
-    public CreationCategory getCreationCategory() {
-        return CreationCategory.SERVICE;
+    public DataStoreCreationCategory getCreationCategory() {
+        return DataStoreCreationCategory.SERVICE;
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/util/FileBridge.java
Patch:
@@ -111,9 +111,8 @@ private synchronized void handleWatchEvent(Path changed, WatchEvent.Kind<Path> k
                 try (var in = Files.newInputStream(e.file)) {
                     var actualSize = (long) in.available();
                     var started = Instant.now();
-                    try (var fixedIn = new FixedSizeInputStream(new BufferedInputStream(in), actualSize)) {
-                        e.writer.accept(fixedIn, actualSize);
-                    }
+                    var fixedIn = new FixedSizeInputStream(new BufferedInputStream(in), actualSize);
+                    e.writer.accept(fixedIn, actualSize);
                     in.transferTo(OutputStream.nullOutputStream());
                     var taken = Duration.between(started, Instant.now());
                     event("Wrote " + HumanReadableFormat.byteCount(actualSize) + " in " + taken.toMillis() + "ms");

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -48,9 +48,9 @@ public abstract class StoreEntryComp extends SimpleComp {
     public static final PseudoClass FAILED = PseudoClass.getPseudoClass("failed");
     public static final PseudoClass INCOMPLETE = PseudoClass.getPseudoClass("incomplete");
     public static final ObservableDoubleValue INFO_NO_CONTENT_WIDTH =
-            App.getApp().getStage().widthProperty().divide(2.2).add(-100);
+            App.getApp().getStage().widthProperty().divide(2.1).add(-100);
     public static final ObservableDoubleValue INFO_WITH_CONTENT_WIDTH =
-            App.getApp().getStage().widthProperty().divide(2.2).add(-200);
+            App.getApp().getStage().widthProperty().divide(2.1).add(-200);
     protected final StoreEntryWrapper wrapper;
     protected final Comp<?> content;
 

File: app/src/main/java/io/xpipe/app/beacon/impl/ShellStartExchangeImpl.java
Patch:
@@ -16,7 +16,7 @@ public class ShellStartExchangeImpl extends ShellStartExchange {
     public Object handle(HttpExchange exchange, Request msg) {
         var e = DataStorage.get()
                 .getStoreEntryIfPresent(msg.getConnection())
-                .orElseThrow(() -> new IllegalArgumentException("Unknown connection"));
+                .orElseThrow(() -> new BeaconClientException("Unknown connection"));
         if (!(e.getStore() instanceof ShellStore s)) {
             throw new BeaconClientException("Not a shell connection");
         }

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemComp.java
Patch:
@@ -84,6 +84,7 @@ root, new KeyCodeCombination(KeyCode.HOME, KeyCombination.ALT_DOWN), true, keyEv
         var filter = new BrowserFilterComp(model, model.getFilter()).createStructure();
 
         var topBar = new HBox();
+        filter.textField().prefHeightProperty().bind(topBar.heightProperty());
         topBar.setAlignment(Pos.CENTER);
         topBar.getStyleClass().add("top-bar");
         var navBar = new BrowserNavBar(model).createStructure();

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -70,7 +70,8 @@ public static FilePath constructTerminalInitFile(
         content += nl + postInit.stream().flatMap(s -> s.lines()).collect(Collectors.joining(nl)) + nl;
 
         if (exit) {
-            content += nl + t.getPassthroughExitCommand();
+            // Assign exit code 0 to prevent terminals from doing their own pause error handling for failed commands
+            content += nl + t.getNormalExitCommand();
         }
 
         return createExecScript(t, processControl, new FilePath(t.initFileName(processControl)), content);

File: core/src/main/java/io/xpipe/core/process/ShellStoreState.java
Patch:
@@ -33,7 +33,9 @@ public DataStoreState mergeCopy(DataStoreState newer) {
         return b.build();
     }
 
-    protected void mergeBuilder(ShellStoreState shellStoreState, ShellStoreStateBuilder<?, ?> b) {
+    // Do this with an object to fix javadoc compile issues
+    protected void mergeBuilder(ShellStoreState shellStoreState, Object builder) {
+        ShellStoreStateBuilder<?, ?> b = (ShellStoreStateBuilder<?, ?>) builder;
         b.osType(useNewer(osType, shellStoreState.getOsType()))
                 .osName(useNewer(osName, shellStoreState.getOsName()))
                 .shellDialect(useNewer(shellDialect, shellStoreState.getShellDialect()))

File: app/src/main/java/io/xpipe/app/core/AppTheme.java
Patch:
@@ -183,7 +183,8 @@ public void apply() {
                 builder.append(content);
             });
 
-            AppResources.with("atlantafx.base", theme.getUserAgentStylesheet(), path -> {
+            // Watch out for the leading slash
+            AppResources.with("atlantafx.base", theme.getUserAgentStylesheet().substring(1), path -> {
                 var baseStyleContent = Files.readString(path);
                 builder.append("\n")
                         .append(baseStyleContent

File: app/src/main/java/io/xpipe/app/util/FileBridge.java
Patch:
@@ -59,7 +59,9 @@ public static void init() {
             }
 
             AppFileWatcher.getInstance().startWatchersInDirectories(List.of(TEMP), (changed, kind) -> {
-                INSTANCE.handleWatchEvent(changed, kind);
+                if (INSTANCE != null) {
+                    INSTANCE.handleWatchEvent(changed, kind);
+                }
             });
         } catch (IOException e) {
             ErrorEvent.fromThrowable(e).handle();

File: app/src/main/java/io/xpipe/app/comp/base/ListBoxViewComp.java
Patch:
@@ -41,7 +41,7 @@ public CompStructure<ScrollPane> createBase() {
         Map<T, Region> cache = new IdentityHashMap<>();
 
         VBox vbox = new VBox();
-        vbox.getStyleClass().add("content");
+        vbox.getStyleClass().add("list-box-content");
         vbox.setFocusTraversable(false);
 
         refresh(vbox, shown, all, cache, false);

File: app/src/main/java/io/xpipe/app/comp/base/ListSelectorComp.java
Patch:
@@ -34,7 +34,7 @@ public class ListSelectorComp<T> extends SimpleComp {
     protected Region createSimple() {
         var vbox = new VBox();
         vbox.setSpacing(8);
-        vbox.getStyleClass().add("content");
+        vbox.getStyleClass().add("list-content");
         var cbs = new ArrayList<CheckBox>();
         for (var v : values) {
             var cb = new CheckBox(null);

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionComp.java
Patch:
@@ -151,7 +151,7 @@ public CompStructure<VBox> createBase() {
                 topEntryList,
                 Comp.separator().hide(expanded.not()),
                 new HorizontalComp(List.of(content))
-                        .styleClass("content")
+                        .styleClass("children-content")
                         .apply(struc -> struc.get().setFillHeight(true))
                         .hide(Bindings.or(
                                 Bindings.not(section.getWrapper().getExpanded()),

File: app/src/main/java/io/xpipe/app/issue/UserReportComp.java
Patch:
@@ -106,6 +106,7 @@ protected Region createSimple() {
         layout.setCenter(reportSection);
         layout.setBottom(buttons);
         layout.getStyleClass().add("error-report");
+        layout.getStyleClass().add("background");
         layout.setPrefWidth(600);
         layout.setPrefHeight(550);
         return layout;

File: ext/base/src/main/java/io/xpipe/ext/base/service/AbstractServiceStore.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.xpipe.app.storage.DataStoreEntryRef;
 import io.xpipe.app.util.HostHelper;
+import io.xpipe.app.util.LicenseProvider;
 import io.xpipe.app.util.Validators;
 import io.xpipe.core.store.*;
 import io.xpipe.core.util.JacksonizedValue;
@@ -32,7 +33,7 @@ public boolean requiresTunnel() {
 
     @Override
     public NetworkTunnelSession newSession() throws Exception {
-        ServiceLicenseCheck.check();
+        LicenseProvider.get().getFeature("services").throwIfUnsupported();
         var l = localPort != null ? localPort : HostHelper.findRandomOpenPortOnAllLocalInterfaces();
         return getHost().getStore().sessionChain(l, remotePort);
     }

File: app/src/main/java/io/xpipe/app/comp/base/DialogComp.java
Patch:
@@ -78,7 +78,7 @@ protected List<Comp<?>> customButtons() {
 
     @Override
     public CompStructure<Region> createBase() {
-        var sp = pane(content()).createRegion();
+        var sp = pane(content()).styleClass("dialog-content").createRegion();
         VBox vbox = new VBox();
         vbox.getChildren().addAll(sp, createNavigation());
         vbox.getStyleClass().add("dialog-comp");
@@ -96,7 +96,7 @@ protected ObservableValue<Boolean> busy() {
     public abstract Comp<?> content();
 
     protected Comp<?> pane(Comp<?> content) {
-        var entry = content.styleClass("dialog-content");
+        var entry = content;
         return Comp.of(() -> {
             var entryR = entry.createRegion();
             var sp = new ScrollPane(entryR);

File: app/src/main/java/io/xpipe/app/browser/session/BrowserChooserComp.java
Patch:
@@ -115,6 +115,7 @@ protected Region createSimple() {
         var splitPane = new SideSplitPaneComp(bookmarksList, stack)
                 .withInitialWidth(AppLayoutModel.get().getSavedState().getBrowserConnectionsWidth())
                 .withOnDividerChange(AppLayoutModel.get().getSavedState()::setBrowserConnectionsWidth)
+                .styleClass("background")
                 .apply(struc -> {
                     struc.getLeft().setMinWidth(200);
                     struc.getLeft().setMaxWidth(500);

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionMiniComp.java
Patch:
@@ -145,7 +145,7 @@ public CompStructure<VBox> createBase() {
                 .hgrow();
 
         list.add(new HorizontalComp(List.of(content))
-                .styleClass("content")
+                .styleClass("children-content")
                 .apply(struc -> struc.get().setFillHeight(true))
                 .hide(Bindings.or(
                         Bindings.not(expanded),

File: app/src/main/java/io/xpipe/app/core/window/AppMainWindow.java
Patch:
@@ -114,7 +114,7 @@ private void initializeWindow(WindowState state) {
     }
 
     private void setupListeners() {
-        AppWindowHelper.fixInvalidStagePosition(stage);
+        AppWindowBounds.fixInvalidStagePosition(stage);
         stage.xProperty().addListener((c, o, n) -> {
             if (windowActive.get()) {
                 onChange();

File: app/src/main/java/io/xpipe/app/issue/ErrorHandlerComp.java
Patch:
@@ -271,6 +271,7 @@ public boolean handle(ErrorEvent event) {
         var layout = new BorderPane();
         layout.setCenter(content);
         layout.getStyleClass().add("error-handler-comp");
+        layout.getStyleClass().add("background");
 
         if (event.getThrowable() != null) {
             content.getChildren().add(new Separator(Orientation.HORIZONTAL));

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -12,7 +12,7 @@ public interface ProcessControl extends AutoCloseable {
 
     ProcessControl withExceptionConverter(ExceptionConverter converter);
 
-    void resetData(boolean cache);
+    void resetData();
 
     String prepareTerminalOpen(TerminalInitScriptConfig config, WorkingDirectoryFunction workingDirectory)
             throws Exception;

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -104,7 +104,7 @@ protected final Region createSimple() {
         });
         button.addEventFilter(MouseEvent.MOUSE_CLICKED, event -> {
             if (AppPrefs.get().requireDoubleClickForConnections().get()) {
-                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() != 2) {
+                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() > 2) {
                     event.consume();
                 }
             } else {
@@ -115,7 +115,7 @@ protected final Region createSimple() {
         });
         button.addEventFilter(MouseEvent.MOUSE_PRESSED, event -> {
             if (AppPrefs.get().requireDoubleClickForConnections().get()) {
-                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() != 2) {
+                if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() > 2) {
                     event.consume();
                 }
             } else {

File: app/src/main/java/io/xpipe/app/comp/store/StoreNotesComp.java
Patch:
@@ -18,6 +18,7 @@
 import javafx.scene.control.Button;
 
 import atlantafx.base.controls.Popover;
+import javafx.scene.paint.Color;
 
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
@@ -118,6 +119,7 @@ public Comp<?> content() {
         }.createRegion();
 
         var popover = new Popover(dialog);
+        popover.getScene().setFill(Color.TRANSPARENT);
         popover.setCloseButtonEnabled(true);
         popover.setHeaderAlwaysVisible(true);
         popover.setDetachable(true);

File: app/src/main/java/io/xpipe/app/beacon/AppBeaconServer.java
Patch:
@@ -12,6 +12,7 @@
 import lombok.Getter;
 
 import java.io.IOException;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
@@ -110,7 +111,7 @@ private void initAuthSecret() throws IOException {
     }
 
     private void start() throws IOException {
-        server = HttpServer.create(new InetSocketAddress("localhost", port), 10);
+        server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), port), 10);
         BeaconInterface.getAll().forEach(beaconInterface -> {
             server.createContext(beaconInterface.getPath(), new BeaconRequestHandler<>(beaconInterface));
         });

File: app/src/main/java/io/xpipe/app/comp/base/MarkdownComp.java
Patch:
@@ -54,7 +54,7 @@ private WebView createWebView() {
                 .setUserDataDirectory(
                         AppProperties.get().getDataDir().resolve("webview").toFile());
         wv.setPageFill(Color.TRANSPARENT);
-        var theme = AppPrefs.get() != null && AppPrefs.get().theme.getValue().isDark()
+        var theme = AppPrefs.get() != null && AppPrefs.get().theme.getValue() != null && AppPrefs.get().theme.getValue().isDark()
                 ? "misc/github-markdown-dark.css"
                 : "misc/github-markdown-light.css";
         var url = AppResources.getResourceURL(AppResources.XPIPE_MODULE, theme).orElseThrow();

File: app/src/main/java/io/xpipe/app/core/AppProperties.java
Patch:
@@ -60,6 +60,7 @@ public AppProperties() {
                 ErrorEvent.fromThrowable(e).handle();
             }
         }
+        var referenceDir = Files.exists(appDir) ? appDir : Path.of(System.getProperty("user.dir"));
 
         image = ModuleHelper.isImage();
         fullVersion = Optional.ofNullable(System.getProperty("io.xpipe.app.fullVersion"))
@@ -89,7 +90,7 @@ public AppProperties() {
                 .map(s -> {
                     var p = Path.of(s);
                     if (!p.isAbsolute()) {
-                        p = appDir.resolve(p);
+                        p = referenceDir.resolve(p);
                     }
                     return p;
                 })

File: beacon/src/main/java/io/xpipe/beacon/BeaconServer.java
Patch:
@@ -28,7 +28,8 @@ public static boolean isReachable(int port) {
     }
 
     private static List<String> toProcessCommand(String toExec) {
-        return OsType.getLocal().equals(OsType.WINDOWS) ? List.of("cmd", "/c", toExec) : List.of("sh", "-c", toExec);
+        // Having the trailing space is very important to force cmd to not interpret surrounding spaces and removing them
+        return OsType.getLocal().equals(OsType.WINDOWS) ? List.of("cmd", "/c", toExec + " ") : List.of("sh", "-c", toExec);
     }
 
     public static Process tryStartCustom() throws Exception {

File: app/src/main/java/io/xpipe/app/beacon/impl/AskpassExchangeImpl.java
Patch:
@@ -25,7 +25,7 @@ public Object handle(HttpExchange exchange, Request msg) throws BeaconClientExce
                 ? SecretManager.getProgress(msg.getRequest(), msg.getSecretId())
                 : SecretManager.getProgress(msg.getRequest());
         if (found.isEmpty()) {
-            throw new BeaconClientException("No password was provided");
+            throw new BeaconClientException("Unknown askpass request");
         }
 
         var p = found.get();

File: app/src/main/java/io/xpipe/app/browser/BrowserBookmarkComp.java
Patch:
@@ -76,7 +76,7 @@ protected Region createSimple() {
 
         var section = new StoreSectionMiniComp(
                 StoreSection.createTopLevel(
-                        StoreViewState.get().getAllEntries(), this::filter, filterText, selectedCategory),
+                        StoreViewState.get().getAllEntries(), this::filter, filterText, selectedCategory, StoreViewState.get().getEntriesListUpdateObservable()),
                 augment,
                 entryWrapper -> action.accept(entryWrapper, busy),
                 true);

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -68,9 +68,9 @@ public void moveTo(DataStoreCategory category) {
         });
     }
 
-    public void orderBefore(StoreEntryWrapper other) {
+    public void setOrder(DataStoreEntry.Order order) {
         ThreadHelper.runAsync(() -> {
-            DataStorage.get().orderBefore(getEntry(), other.getEntry());
+            DataStorage.get().setOrder(getEntry(), order);
         });
     }
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -93,7 +93,8 @@ private Popover getPopover() {
             };
             var section = new StoreSectionMiniComp(
                     StoreSection.createTopLevel(
-                            StoreViewState.get().getAllEntries(), applicable, filterText, selectedCategory),
+                            StoreViewState.get().getAllEntries(), applicable, filterText, selectedCategory, StoreViewState.get()
+                                    .getEntriesListUpdateObservable()),
                     (s, comp) -> {
                         if (!applicable.test(s.getWrapper())) {
                             comp.disable(new SimpleBooleanProperty(true));

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -333,9 +333,9 @@ public void updateCategory(DataStoreEntry entry, DataStoreCategory newCategory)
         saveAsync();
     }
 
-    public void orderBefore(DataStoreEntry entry, DataStoreEntry reference) {
-        entry.setOrderBefore(reference != null ? reference.getUuid() : null);
-        listeners.forEach(storageListener -> storageListener.onStoreOrderUpdate());
+    public void setOrder(DataStoreEntry entry, DataStoreEntry.Order order) {
+        entry.setExplicitOrder(order);
+        listeners.forEach(storageListener -> storageListener.onStoreListUpdate());
     }
 
     public boolean refreshChildren(DataStoreEntry e) {

File: app/src/main/java/io/xpipe/app/storage/StorageListener.java
Patch:
@@ -2,8 +2,6 @@
 
 public interface StorageListener {
 
-    void onStoreOrderUpdate();
-
     void onStoreListUpdate();
 
     void onStoreAdd(DataStoreEntry... entry);

File: app/src/main/java/module-info.java
Patch:
@@ -138,7 +138,7 @@
             DaemonStatusExchangeImpl,
             DaemonStopExchangeImpl,
             HandshakeExchangeImpl,
-            DaemonModeExchangeImpl, FsBlobExchangeImpl,
+            DaemonModeExchangeImpl, FsBlobExchangeImpl, FsReadExchangeImpl,
             FsScriptExchangeImpl,
             FsWriteExchangeImpl,
             AskpassExchangeImpl,

File: app/src/main/java/io/xpipe/app/comp/base/SideMenuBarComp.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.app.comp.base;
 
+import io.xpipe.app.beacon.AppBeaconServer;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppLayoutModel;
 import io.xpipe.app.fxcomps.Comp;
@@ -9,11 +10,9 @@
 import io.xpipe.app.fxcomps.impl.IconButtonComp;
 import io.xpipe.app.fxcomps.impl.TooltipAugment;
 import io.xpipe.app.fxcomps.util.PlatformThread;
-import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.update.UpdateAvailableAlert;
 import io.xpipe.app.update.XPipeDistributionType;
 import io.xpipe.app.util.Hyperlinks;
-
 import javafx.application.Platform;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.Property;
@@ -162,7 +161,7 @@ public CompStructure<VBox> createBase() {
             var b = new IconButtonComp(
                             "mdi2c-code-json",
                             () -> Hyperlinks.open("http://localhost:"
-                                    + AppPrefs.get().httpServerPort().getValue()))
+                                    + AppBeaconServer.get().getPort()))
                     .tooltipKey("api")
                     .apply(simpleBorders)
                     .accessibleTextKey("api");

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -126,8 +126,8 @@ public static void init(String[] args) {
         var usedArgs = parseProperties(args);
         setup(args);
         LauncherCommand.runLauncher(usedArgs);
-        inStartup = false;
         AppDesktopIntegration.setupDesktopIntegrations();
+        inStartup = false;
     }
 
     public static void switchToAsync(OperationMode newMode) {

File: app/src/main/java/io/xpipe/app/beacon/AppBeaconServer.java
Patch:
@@ -116,8 +116,9 @@ private void start() throws IOException {
         BeaconInterface.getAll().forEach(beaconInterface -> {
             server.createContext(beaconInterface.getPath(), new BeaconRequestHandler<>(beaconInterface));
         });
-        server.setExecutor(Executors.newSingleThreadExecutor(r -> {
+        server.setExecutor(Executors.newFixedThreadPool(5, r -> {
             Thread t = Executors.defaultThreadFactory().newThread(r);
+            t.setDaemon(true);
             t.setName("http handler");
             t.setUncaughtExceptionHandler((t1, e) -> {
                 ErrorEvent.fromThrowable(e).handle();

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -372,7 +372,7 @@ public boolean refreshChildren(DataStoreEntry e) {
                 .toList();
         var toAdd = newChildren.stream()
                 .filter(nc -> {
-                    if (nc.getStore() == null) {
+                    if (nc == null || nc.getStore() == null) {
                         return false;
                     }
 

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -51,6 +51,7 @@ public void onSwitchTo() throws Throwable {
         LocalShell.init();
         AppShellCheck.check();
         XPipeDistributionType.init();
+        AppPrefs.setLocalDefaultsIfNeeded();
         // Initialize beacon server as we should be prepared for git askpass commands
         AppBeaconServer.init();
         GitStorageHandler.getInstance().init();

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -114,7 +114,6 @@ private static void setup(String[] args) {
             AppExtensionManager.init(true);
             AppI18n.init();
             AppPrefs.initLocal();
-            AppPrefs.setLocalDefaultsIfNeeded();
             AppBeaconServer.setupPort();
             TrackEvent.info("Finished initial setup");
         } catch (Throwable ex) {

File: app/src/main/java/io/xpipe/app/beacon/AppBeaconServer.java
Patch:
@@ -45,7 +45,7 @@ public class AppBeaconServer {
     private String notFoundHtml;
     private final Map<String, String> resources = new HashMap<>();
 
-    static {
+    public static void setupPort() {
         int port;
         boolean propertyPort;
         if (System.getProperty(BeaconConfig.BEACON_PORT_PROP) != null) {
@@ -170,7 +170,8 @@ private void handleCatchAll(HttpExchange exchange) throws IOException {
                         },
                         s -> {
                             return "<div style=\"max-width: 800px;margin: auto;\">" + s + "</div>";
-                        });
+                        },
+                        "standalone");
             });
         }
         var body = notFoundHtml.getBytes(StandardCharsets.UTF_8);

File: app/src/main/java/io/xpipe/app/comp/base/MarkdownComp.java
Patch:
@@ -42,7 +42,7 @@ public MarkdownComp(ObservableValue<String> markdown, UnaryOperator<String> html
     }
 
     private String getHtml() {
-        return MarkdownHelper.toHtml(markdown.getValue(), s -> s, htmlTransformation);
+        return MarkdownHelper.toHtml(markdown.getValue(), s -> s, htmlTransformation, null);
     }
 
     @SneakyThrows

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -51,7 +51,6 @@ public void onSwitchTo() throws Throwable {
         LocalShell.init();
         AppShellCheck.check();
         XPipeDistributionType.init();
-        AppPrefs.setDefaults();
         // Initialize beacon server as we should be prepared for git askpass commands
         AppBeaconServer.init();
         GitStorageHandler.getInstance().init();

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.app.core.mode;
 
+import io.xpipe.app.beacon.AppBeaconServer;
 import io.xpipe.app.core.*;
 import io.xpipe.app.core.check.AppDebugModeCheck;
 import io.xpipe.app.core.check.AppTempCheck;
@@ -113,6 +114,8 @@ private static void setup(String[] args) {
             AppExtensionManager.init(true);
             AppI18n.init();
             AppPrefs.initLocal();
+            AppPrefs.setLocalDefaultsIfNeeded();
+            AppBeaconServer.setupPort();
             TrackEvent.info("Finished initial setup");
         } catch (Throwable ex) {
             ErrorEvent.fromThrowable(ex).term().handle();

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -122,12 +122,12 @@ public class AppPrefs {
     private final StringProperty lockCrypt =
             mapVaultSpecific(new SimpleStringProperty(), "workspaceLock", String.class);
 
-    final Property<Integer> httpServerPort = mapVaultSpecific(
+    final Property<Integer> httpServerPort = map(
             new SimpleObjectProperty<>(XPipeInstallation.getDefaultBeaconPort()), "httpServerPort", Integer.class);
     final StringProperty apiKey =
             mapVaultSpecific(new SimpleStringProperty(UUID.randomUUID().toString()), "apiKey", String.class);
     final BooleanProperty disableApiAuthentication =
-            mapVaultSpecific(new SimpleBooleanProperty(false), "disableApiAuthentication", Boolean.class);
+            map(new SimpleBooleanProperty(false), "disableApiAuthentication", Boolean.class);
 
     public ObservableValue<Integer> httpServerPort() {
         return httpServerPort;
@@ -204,7 +204,7 @@ public static void initSharedRemote() {
         });
     }
 
-    public static void setDefaults() {
+    public static void setLocalDefaultsIfNeeded() {
         INSTANCE.initDefaultValues();
         PrefsProvider.getAll().forEach(prov -> prov.initDefaultValues());
     }

File: app/src/main/java/io/xpipe/app/util/MarkdownHelper.java
Patch:
@@ -19,7 +19,7 @@
 public class MarkdownHelper {
 
     public static String toHtml(
-            String value, UnaryOperator<String> headTransformation, UnaryOperator<String> bodyTransformation) {
+            String value, UnaryOperator<String> headTransformation, UnaryOperator<String> bodyTransformation, String bodyStyleClass) {
         MutableDataSet options = new MutableDataSet()
                 .set(
                         Parser.EXTENSIONS,
@@ -47,7 +47,7 @@ public static String toHtml(
         var html = renderer.render(document);
         var result = bodyTransformation.apply(html);
         var headContent = headTransformation.apply("<meta charset=\"utf-8\"/>");
-        return "<html><head>" + headContent + "</head><body><article class=\"markdown-body\">" + result
+        return "<html><head>" + headContent + "</head><body" + (bodyStyleClass != null ? " class=\"" + bodyStyleClass + "\"" : "") + "><article class=\"markdown-body\">" + result
                 + "</article></body></html>";
     }
 }

File: ext/base/src/main/java/io/xpipe/ext/base/service/AbstractServiceStoreProvider.java
Patch:
@@ -39,7 +39,7 @@ public DataStoreEntry getSyntheticParent(DataStoreEntry store) {
                 .getOrCreateNewSyntheticEntry(
                         s.getHost().get(),
                         "Services",
-                        ServiceGroupStore.builder().parent(s.getHost()).build());
+                        CustomServiceGroupStore.builder().parent(s.getHost()).build());
     }
 
     @Override

File: ext/base/src/main/java/module-info.java
Patch:
@@ -71,8 +71,7 @@
             BrowseStoreAction,
             ScanStoreAction;
     provides DataStoreProvider with
-            FixedServiceGroupStoreProvider,
-            ServiceGroupStoreProvider,
+            FixedServiceGroupStoreProvider, CustomServiceGroupStoreProvider,
             CustomServiceStoreProvider,
             MappedServiceStoreProvider,
             FixedServiceStoreProvider,

File: app/src/main/java/io/xpipe/app/test/TestModule.java
Patch:
@@ -43,7 +43,7 @@ public static <T> Stream<Named<T>> getArguments(Class<T> c, Module module, Strin
         return argumentBuilder.build();
     }
 
-    protected abstract void init(Map<String, Supplier<V>> list);
+    protected abstract void init(Map<String, Supplier<V>> list) throws Exception;
 
     protected abstract Class<V> getValueClass();
 }

File: app/src/main/java/io/xpipe/app/util/AppJacksonModule.java
Patch:
@@ -94,7 +94,7 @@ public void serialize(DataStoreSecret value, JsonGenerator jgen, SerializerProvi
             var tree = JsonNodeFactory.instance.objectNode();
             tree.set("secret", valTree);
             jgen.writeTree(tree);
-            value.setOriginalNode(valTree);
+            value.rewrite(valTree);
         }
     }
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -6,6 +6,7 @@
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.app.storage.DataStoreEntryRef;
 import io.xpipe.app.util.DataStoreCategoryChoiceComp;
@@ -76,7 +77,7 @@ private Popover getPopover() {
             Predicate<StoreEntryWrapper> applicable = storeEntryWrapper -> {
                 var e = storeEntryWrapper.getEntry();
 
-                if (e.equals(self)) {
+                if (e.equals(self) || DataStorage.get().getStoreParentHierarchy(e).contains(self)) {
                     return false;
                 }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionMiniComp.java
Patch:
@@ -101,7 +101,7 @@ public CompStructure<VBox> createBase() {
                                         + section.getWrapper().getName().getValue();
                             },
                             section.getWrapper().getName()))
-                    .disable(Bindings.size(section.getAllChildren()).isEqualTo(0))
+                    .disable(Bindings.size(section.getShownChildren()).isEqualTo(0))
                     .grow(false, true)
                     .styleClass("expand-button");
 

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -55,6 +55,7 @@ private static void createMacOSShortcut(String target, String name) throws Excep
                 exec, target);
 
         try (var pc = LocalShell.getShell()) {
+            pc.getShellDialect().deleteFileOrDirectory(pc, base.toString()).executeAndCheck();
             pc.executeSimpleCommand(pc.getShellDialect().getMkdirsCommand(base + "/Contents/MacOS"));
             pc.executeSimpleCommand(pc.getShellDialect().getMkdirsCommand(base + "/Contents/Resources"));
 

File: beacon/src/main/java/io/xpipe/beacon/BeaconServer.java
Patch:
@@ -48,7 +48,7 @@ public static Process start(String installationBase, XPipeDaemonMode mode) throw
         String command;
         if (!BeaconConfig.launchDaemonInDebugMode()) {
             command = XPipeInstallation.createExternalAsyncLaunchCommand(
-                    installationBase, mode, BeaconConfig.getDaemonArguments());
+                    installationBase, mode, BeaconConfig.getDaemonArguments(), false);
         } else {
             command = XPipeInstallation.createExternalLaunchCommand(
                     getDaemonDebugExecutable(installationBase), BeaconConfig.getDaemonArguments(), mode);

File: app/src/main/java/io/xpipe/app/launcher/LauncherInput.java
Patch:
@@ -79,6 +79,7 @@ public static List<ActionProvider.Action> of(String input) {
                     try {
                         a = found.get().getLauncherCallSite().createAction(uri);
                     } catch (Exception e) {
+                        ErrorEvent.fromThrowable(e).omit().expected().handle();
                         return List.of();
                     }
                     return a != null ? List.of(a) : List.of();

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -64,11 +64,11 @@ protected Optional<Path> determineInstallation() {
 
         @Override
         protected Optional<Path> determineInstallation() {
-            var found = WindowsRegistry.local().readString(WindowsRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\Notepad++", null);
+            var found = WindowsRegistry.local().readValue(WindowsRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\Notepad++", null);
 
             // Check 32 bit install
             if (found.isEmpty()) {
-                found = WindowsRegistry.local().readString(
+                found = WindowsRegistry.local().readValue(
                         WindowsRegistry.HKEY_LOCAL_MACHINE, "WOW6432Node\\SOFTWARE\\Notepad++", null);
             }
             return found.map(p -> p + "\\notepad++.exe").map(Path::of);

File: app/src/main/java/io/xpipe/app/terminal/TabbyTerminalType.java
Patch:
@@ -85,7 +85,7 @@ protected void execute(Path file, LaunchConfiguration configuration) throws Exce
 
         @Override
         protected Optional<Path> determineInstallation() {
-            var perUser = WindowsRegistry.local().readString(
+            var perUser = WindowsRegistry.local().readValue(
                             WindowsRegistry.HKEY_CURRENT_USER,
                             "SOFTWARE\\71445fac-d6ef-5436-9da7-5a323762d7f5",
                             "InstallLocation")
@@ -95,7 +95,7 @@ protected Optional<Path> determineInstallation() {
                 return perUser;
             }
 
-            var systemWide = WindowsRegistry.local().readString(
+            var systemWide = WindowsRegistry.local().readValue(
                             WindowsRegistry.HKEY_LOCAL_MACHINE,
                             "SOFTWARE\\71445fac-d6ef-5436-9da7-5a323762d7f5",
                             "InstallLocation")

File: app/src/main/java/io/xpipe/app/terminal/WezTerminalType.java
Patch:
@@ -52,7 +52,7 @@ protected void execute(Path file, LaunchConfiguration configuration) throws Exce
         @Override
         protected Optional<Path> determineInstallation() {
             Optional<String> launcherDir;
-            launcherDir = WindowsRegistry.local().readString(
+            launcherDir = WindowsRegistry.local().readValue(
                             WindowsRegistry.HKEY_LOCAL_MACHINE,
                             "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{BCF6F0DA-5B9A-408D-8562-F680AE6E1EAF}_is1",
                             "InstallLocation")

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -473,7 +473,7 @@ private void fixInvalidLocalValues() {
         try {
             Files.createDirectories(storageDirectory.get());
         } catch (Exception e) {
-            ErrorEvent.fromThrowable(e).build().handle();
+            ErrorEvent.fromThrowable(e).expected().build().handle();
             storageDirectory.setValue(DEFAULT_STORAGE_DIR);
         }
     }

File: app/src/main/java/io/xpipe/app/prefs/ExternalRdpClientType.java
Patch:
@@ -41,9 +41,6 @@ private RdpConfig getAdaptedConfig(LaunchConfiguration configuration) throws Exc
                 return input;
             }
 
-            var address = input.get("full address")
-                    .map(typedValue -> typedValue.getValue())
-                    .orElse("?");
             var pass = configuration.getPassword();
             if (pass == null) {
                 return input;

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionModel.java
Patch:
@@ -11,10 +11,8 @@
 import io.xpipe.core.store.FileNames;
 import io.xpipe.core.store.FileSystemStore;
 import io.xpipe.core.util.FailableFunction;
-
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.SimpleBooleanProperty;
-
 import lombok.Getter;
 
 import java.util.ArrayList;
@@ -33,7 +31,8 @@ public BrowserSessionModel(BrowserSavedState savedState) {
 
     public void restoreState(BrowserSavedState state) {
         ThreadHelper.runAsync(() -> {
-            state.getEntries().forEach(e -> {
+            var l = new ArrayList<>(state.getEntries());
+            l.forEach(e -> {
                 restoreStateAsync(e, null);
                 // Don't try to run everything in parallel as that can be taxing
                 ThreadHelper.sleep(1000);

File: app/src/main/java/io/xpipe/app/browser/action/LeafAction.java
Patch:
@@ -28,7 +28,7 @@ default Button toButton(Region root, OpenFileSystemModel model, List<BrowserEntr
             }
 
             ThreadHelper.runFailableAsync(() -> {
-                BooleanScope.execute(model.getBusy(), () -> {
+                BooleanScope.executeExclusive(model.getBusy(), () -> {
                     // Start shell in case we exited
                     model.getFileSystem().getShell().orElseThrow().start();
                     execute(model, selected);
@@ -77,7 +77,7 @@ default MenuItem toMenuItem(OpenFileSystemModel model, List<BrowserEntry> select
         }));
         mi.setOnAction(event -> {
             ThreadHelper.runFailableAsync(() -> {
-                BooleanScope.execute(model.getBusy(), () -> {
+                BooleanScope.executeExclusive(model.getBusy(), () -> {
                     // Start shell in case we exited
                     model.getFileSystem().getShell().orElseThrow().start();
                     execute(model, selected);

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -110,7 +110,7 @@ protected void finish() {
                         window.close();
                     });
 
-                    BooleanScope.execute(busy, () -> {
+                    BooleanScope.executeExclusive(busy, () -> {
                         entry.get().get().setExpanded(true);
                         var copy = new ArrayList<>(selected);
                         for (var a : copy) {
@@ -177,7 +177,7 @@ public Comp<?> content() {
                 }
 
                 ThreadHelper.runFailableAsync(() -> {
-                    BooleanScope.execute(busy, () -> {
+                    BooleanScope.executeExclusive(busy, () -> {
                         if (shellControl != null) {
                             shellControl.close();
                             shellControl = null;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/EditFileAction.java
Patch:
@@ -1,11 +1,11 @@
 package io.xpipe.ext.base.browser;
 
+import io.xpipe.app.browser.BrowserFileOpener;
 import io.xpipe.app.browser.action.LeafAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.prefs.AppPrefs;
-import io.xpipe.app.util.FileOpener;
 import io.xpipe.core.store.FileKind;
 
 import javafx.beans.value.ObservableValue;
@@ -28,7 +28,7 @@ public KeyCombination getShortcut() {
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) {
         for (BrowserEntry entry : entries) {
-            FileOpener.openInTextEditor(entry.getRawFileEntry());
+            BrowserFileOpener.openInTextEditor(model, entry.getRawFileEntry());
         }
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenFileDefaultAction.java
Patch:
@@ -1,10 +1,10 @@
 package io.xpipe.ext.base.browser;
 
+import io.xpipe.app.browser.BrowserFileOpener;
 import io.xpipe.app.browser.action.LeafAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.core.AppI18n;
-import io.xpipe.app.util.FileOpener;
 import io.xpipe.core.store.FileKind;
 
 import javafx.beans.value.ObservableValue;
@@ -22,7 +22,7 @@ public class OpenFileDefaultAction implements LeafAction {
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) {
         for (var entry : entries) {
-            FileOpener.openInDefaultApplication(entry.getRawFileEntry());
+            BrowserFileOpener.openInDefaultApplication(model, entry.getRawFileEntry());
         }
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenFileWithAction.java
Patch:
@@ -1,10 +1,10 @@
 package io.xpipe.ext.base.browser;
 
+import io.xpipe.app.browser.BrowserFileOpener;
 import io.xpipe.app.browser.action.LeafAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.core.AppI18n;
-import io.xpipe.app.util.FileOpener;
 import io.xpipe.core.process.OsType;
 import io.xpipe.core.store.FileKind;
 
@@ -23,7 +23,7 @@ public class OpenFileWithAction implements LeafAction {
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) {
         var e = entries.getFirst();
-        FileOpener.openWithAnyApplication(e.getRawFileEntry());
+        BrowserFileOpener.openWithAnyApplication(model, e.getRawFileEntry());
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/prefs/AppPrefsStorageHandler.java
Patch:
@@ -101,7 +101,7 @@ public <T> T loadObject(String id, Class<T> type, T defaultObject) {
             TrackEvent.debug("Loading preferences value for key " + id + " from value " + tree);
             return JacksonMapper.getDefault().treeToValue(tree, type);
         } catch (Exception ex) {
-            ErrorEvent.fromThrowable(ex).omit().handle();
+            ErrorEvent.fromThrowable(ex).expected().omit().handle();
             return defaultObject;
         }
     }

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -358,7 +358,7 @@ public void setCategoryUuid(UUID categoryUuid) {
     @Override
     public Path[] getShareableFiles() {
         var notes = directory.resolve("notes.md");
-        var list = List.of(directory.resolve("store.json"), directory.resolve("entry.json"), notes);
+        var list = List.of(directory.resolve("store.json"), directory.resolve("entry.json"));
         return Stream.concat(list.stream(), Files.exists(notes) ? Stream.of(notes) : Stream.of()).toArray(Path[]::new);
     }
 

File: app/src/main/java/io/xpipe/app/comp/base/MarkdownEditorComp.java
Patch:
@@ -50,6 +50,8 @@ public Structure createBase() {
         pane.setPickOnBounds(false);
         AnchorPane.setTopAnchor(editButton, 10.0);
         AnchorPane.setRightAnchor(editButton, 10.0);
+        markdown.prefWidthProperty().bind(pane.prefWidthProperty());
+        markdown.prefHeightProperty().bind(pane.prefHeightProperty());
         return new Structure(pane, markdown, editButton);
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreNotesComp.java
Patch:
@@ -73,7 +73,7 @@ public Structure createBase() {
 
     private Popover createPopover(AtomicReference<Popover> ref, Property<String> prop) {
         var n = wrapper.getNotes();
-        var md = new MarkdownEditorComp(prop, "notes-" + wrapper.getName().getValue()).createStructure();
+        var md = new MarkdownEditorComp(prop, "notes-" + wrapper.getName().getValue()).prefWidth(600).prefHeight(600).createStructure();
         var dialog = new DialogComp() {
 
             @Override
@@ -112,8 +112,6 @@ public Comp<?> content() {
         popover.setHeaderAlwaysVisible(true);
         popover.setDetachable(true);
         popover.setTitle(wrapper.getName().getValue());
-        popover.setMaxWidth(400);
-        popover.setHeight(600);
         popover.showingProperty().addListener((observable, oldValue, newValue) -> {
             if (!newValue) {
                 n.setValue(new StoreNotes(n.getValue().getCommited(), n.getValue().getCommited()));

File: app/src/main/java/io/xpipe/app/update/UpdateAvailableAlert.java
Patch:
@@ -31,7 +31,7 @@ public static void showIfNeeded() {
                     alert.setTitle(AppI18n.get("updateReadyAlertTitle"));
                     alert.setAlertType(Alert.AlertType.NONE);
                     var markdown =
-                            new MarkdownComp(u.getBody() != null ? u.getBody() : "", s -> "&nbsp;" + s).createRegion();
+                            new MarkdownComp(u.getBody() != null ? u.getBody() : "", s -> s).createRegion();
                     alert.getButtonTypes().clear();
                     var updaterContent = uh.createInterface();
                     if (updaterContent != null) {

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -46,7 +46,7 @@ public static void showIfNeeded() {
                     alert.setAlertType(Alert.AlertType.NONE);
                     alert.initModality(Modality.NONE);
 
-                    var markdown = new MarkdownComp(update.getRawDescription(), s -> "&nbsp;" + s).createRegion();
+                    var markdown = new MarkdownComp(update.getRawDescription(), s -> s).createRegion();
                     alert.getDialogPane().setContent(markdown);
 
                     alert.getButtonTypes().add(new ButtonType(AppI18n.get("ok"), ButtonBar.ButtonData.OK_DONE));

File: app/src/main/java/io/xpipe/app/comp/store/DenseStoreEntryComp.java
Patch:
@@ -94,7 +94,7 @@ protected Region createContent() {
         nameCC.setHgrow(Priority.ALWAYS);
         grid.getColumnConstraints().addAll(nameCC);
         var nameBox = new HBox(name, notes);
-        nameBox.setSpacing(8);
+        nameBox.setSpacing(1);
         nameBox.setAlignment(Pos.CENTER_LEFT);
         grid.addRow(0, nameBox);
 

File: app/src/main/java/io/xpipe/app/comp/store/StandardStoreEntryComp.java
Patch:
@@ -31,7 +31,7 @@ protected Region createContent() {
         grid.getColumnConstraints().add(new ColumnConstraints(66));
 
         var nameAndNotes = new HBox(name, notes);
-        nameAndNotes.setSpacing(8);
+        nameAndNotes.setSpacing(1);
         nameAndNotes.setAlignment(Pos.CENTER_LEFT);
         grid.add(nameAndNotes, 1, 0);
         grid.add(createSummary(), 1, 1);

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -17,7 +17,6 @@
 import io.xpipe.app.storage.DataStoreColor;
 import io.xpipe.app.update.XPipeDistributionType;
 import io.xpipe.app.util.*;
-import io.xpipe.core.util.XPipeInstallation;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.value.ObservableDoubleValue;
@@ -450,7 +449,7 @@ protected ContextMenu createContextMenu() {
     private static String getDefaultNotes() {
         if (DEFAULT_NOTES == null) {
             AppResources.with(AppResources.XPIPE_MODULE, "misc/notes_default.md", f -> {
-                DEFAULT_NOTES = Files.readString(f).replace("__IMAGE__", XPipeInstallation.getLocalDefaultInstallationIcon().toString());
+                DEFAULT_NOTES = Files.readString(f);
             });
         }
         return DEFAULT_NOTES;

File: app/src/main/java/io/xpipe/app/core/AppWindowHelper.java
Patch:
@@ -51,7 +51,7 @@ public static void fixInvalidStagePosition(Stage stage) {
         stage.yProperty().addListener((observable, oldValue, newValue) -> {
             var n = newValue.doubleValue();
             var o = oldValue.doubleValue();
-            if (stage.isShowing() && areNumbersValid(o, n) && n == 0.0 && o != 0.0 && Math.abs(n - o) > 100) {
+            if (stage.isShowing() && areNumbersValid(o, n) && n == 0.0 && o != 0.0 && Math.abs(n - o) > 20) {
                 stage.setY(o);
             }
         });

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ContextualFileReferenceChoiceComp.java
Patch:
@@ -52,7 +52,7 @@ public <T extends FileSystemStore> ContextualFileReferenceChoiceComp(
             this.fileSystem.setValue(val);
         });
         this.fileSystem.addListener((observable, oldValue, newValue) -> {
-            fileSystem.setValue(newValue.get().ref());
+            fileSystem.setValue(newValue.get() != null ? newValue.get().ref() : null);
         });
         this.filePath = filePath;
     }

File: app/src/main/java/io/xpipe/app/storage/ContextualFileReference.java
Patch:
@@ -89,7 +89,7 @@ public boolean isInDataDirectory() {
     public String serialize() {
         var start = getDataDir();
         var normalizedPath = normalized(path);
-        if (normalizedPath.startsWith(start)) {
+        if (normalizedPath.startsWith(start) && !normalizedPath.equals(start)) {
             return "<DATA>" + "/" + FileNames.relativize(start, normalizedPath);
         }
         return path;

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -119,7 +119,7 @@ public void forceRewrite() {
         });
     }
 
-    private synchronized void dispose() {
+    private void dispose() {
         save(true);
     }
 

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -340,7 +340,7 @@ private void deleteLeftovers() {
                         gitStorageHandler.handleDeletion(file, uuid.toString());
                     }
                 } catch (Exception ex) {
-                    ErrorEvent.fromThrowable(ex).omitted(true).build().handle();
+                    ErrorEvent.fromThrowable(ex).expected().omit().build().handle();
                 }
             });
         } catch (Exception ex) {
@@ -373,7 +373,7 @@ private void deleteLeftovers() {
                         gitStorageHandler.handleDeletion(file, uuid.toString());
                     }
                 } catch (Exception ex) {
-                    ErrorEvent.fromThrowable(ex).omitted(true).build().handle();
+                    ErrorEvent.fromThrowable(ex).expected().omit().build().handle();
                 }
             });
         } catch (Exception ex) {

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -121,7 +121,7 @@ public static void init(String[] args) {
         setup(args);
         LauncherCommand.runLauncher(usedArgs);
         inStartup = false;
-        AppIntegration.setupDesktopIntegrations();
+        AppDesktopIntegration.setupDesktopIntegrations();
     }
 
     public static void switchToAsync(OperationMode newMode) {

File: app/src/main/java/io/xpipe/app/browser/BrowserFilterComp.java
Patch:
@@ -107,6 +107,7 @@ public Structure createBase() {
             }
         });
         button.prefHeightProperty().bind(text.heightProperty());
+        button.prefWidthProperty().bind(text.heightProperty());
         return new Structure(box, (TextField) text, button);
     }
 

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -129,7 +129,7 @@ public Structure createBase() {
         var topBox = new HBox(homeButton, stack, historyButton);
         topBox.setAlignment(Pos.CENTER);
         homeButton.minWidthProperty().bind(pathRegion.heightProperty());
-        homeButton.maxWidthProperty().bind(pathRegion.heightProperty());
+        homeButton.maxWidthProperty().bind(pathRegion.heightProperty().multiply(1.3));
         homeButton.minHeightProperty().bind(pathRegion.heightProperty());
         homeButton.maxHeightProperty().bind(pathRegion.heightProperty());
         historyButton.minHeightProperty().bind(pathRegion.heightProperty());

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -82,7 +82,7 @@ public Structure createBase() {
                 () -> {
                     return model.getCurrentDirectory() != null
                             ? FileIconManager.getFileIcon(model.getCurrentDirectory(), false)
-                            : "home_icon.svg";
+                            : null;
                 },
                 model.getCurrentPath());
         var breadcrumbsGraphic = PrettyImageHelper.ofFixedSize(graphic, 24, 24)
@@ -108,7 +108,6 @@ public Structure createBase() {
         var breadcrumbs = new BrowserBreadcrumbBar(model).grow(false, true);
 
         var pathRegion = pathBar.createStructure().get();
-        homeButton.maxWidthProperty().bind(pathRegion.heightProperty());
         var breadcrumbsRegion = breadcrumbs.createRegion();
         breadcrumbsRegion.setOnMouseClicked(event -> {
             pathRegion.requestFocus();
@@ -129,6 +128,8 @@ public Structure createBase() {
 
         var topBox = new HBox(homeButton, stack, historyButton);
         topBox.setAlignment(Pos.CENTER);
+        homeButton.minWidthProperty().bind(pathRegion.heightProperty());
+        homeButton.maxWidthProperty().bind(pathRegion.heightProperty());
         homeButton.minHeightProperty().bind(pathRegion.heightProperty());
         homeButton.maxHeightProperty().bind(pathRegion.heightProperty());
         historyButton.minHeightProperty().bind(pathRegion.heightProperty());

File: app/src/main/java/io/xpipe/app/browser/BrowserFilterComp.java
Patch:
@@ -33,6 +33,7 @@ public Structure createBase() {
         var expanded = new SimpleBooleanProperty();
         var text = new TextFieldComp(filterString, false).createStructure().get();
         var button = new Button();
+        button.minWidthProperty().bind(button.heightProperty());
         button.setFocusTraversable(true);
         InputHelper.onExactKeyCode(text, KeyCode.ESCAPE, true, keyEvent -> {
             text.clear();

File: app/src/main/java/io/xpipe/app/browser/file/BrowserFileListCompEntry.java
Patch:
@@ -42,7 +42,9 @@ public void onMouseClick(MouseEvent t) {
             // Only clear for normal clicks
             if (t.isStillSincePress()) {
                 model.getSelection().clear();
-                tv.requestFocus();
+                if (tv != null) {
+                    tv.requestFocus();
+                }
             }
             t.consume();
             return;

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemComp.java
Patch:
@@ -65,7 +65,8 @@ private Region createContent() {
         var backBtn = BrowserAction.byId("back", model, List.of()).toButton(root, model, List.of());
         var forthBtn = BrowserAction.byId("forward", model, List.of()).toButton(root, model, List.of());
         var refreshBtn = BrowserAction.byId("refresh", model, List.of()).toButton(root, model, List.of());
-        var terminalBtn = BrowserAction.byId("openTerminal", model, List.of()).toButton(root, model, List.of());
+        // Don't handle key events for this button, we also have that available as a menu item
+        var terminalBtn = BrowserAction.byId("openTerminal", model, List.of()).toButton(new Region(), model, List.of());
 
         var menuButton = new MenuButton(null, new FontIcon
                 ("mdral-folder_open"));

File: app/src/main/java/io/xpipe/app/core/AppMainWindow.java
Patch:
@@ -150,14 +150,14 @@ private void setupListeners() {
             // Close other windows
             Stage.getWindows().stream().filter(w -> !w.equals(stage)).toList().forEach(w -> w.fireEvent(e));
             stage.close();
-
             AppPrefs.get().closeBehaviour().getValue().run();
             e.consume();
         });
 
         stage.addEventFilter(KeyEvent.KEY_PRESSED, event -> {
             if (event.getCode().equals(KeyCode.Q) && event.isShortcutDown()) {
                 stage.close();
+                AppPrefs.get().closeBehaviour().getValue().run();
                 event.consume();
             }
         });

File: app/src/main/java/io/xpipe/app/core/AppPreloader.java
Patch:
@@ -21,7 +21,7 @@ public void start(Stage primaryStage) {
         var c = Class.forName(
                 ModuleLayer.boot().findModule("javafx.graphics").orElseThrow(), "com.sun.glass.ui.Application");
         var m = c.getDeclaredMethod("setName", String.class);
-        m.invoke(c.getMethod("GetApplication").invoke(null), "XPipe");
+        m.invoke(c.getMethod("GetApplication").invoke(null), AppProperties.get().isStaging() ? "XPipe PTB" : "XPipe");
         TrackEvent.info("Application preloader run");
     }
 }

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -94,7 +94,7 @@ public Structure createBase() {
         homeButton.getStyleClass().add(Styles.LEFT_PILL);
         homeButton.getStyleClass().add("path-graphic-button");
         new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, null, () -> {
-            return model.getInOverview().get() ? null : new BrowserContextMenu(model, null);
+            return model.getInOverview().get() ? null : new BrowserContextMenu(model, null, false);
         })
                 .augment(new SimpleCompStructure<>(homeButton));
 

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -134,7 +134,7 @@ private void simulateEmptyCell(Region r) {
         new ContextMenuAugment<>(
                         mouseEvent -> mouseEvent.getButton() == MouseButton.SECONDARY,
                         null,
-                        () -> new BrowserContextMenu(model, null))
+                        () -> new BrowserContextMenu(model, null, false))
                 .augment(new SimpleCompStructure<>(r));
     }
 }

File: app/src/main/java/io/xpipe/app/browser/session/BrowserSessionTabsComp.java
Patch:
@@ -122,6 +122,9 @@ private TabPane createTabPane() {
                 }
 
                 tabs.getSelectionModel().select(toSelect);
+                Platform.runLater(() -> {
+                    toSelect.getContent().requestFocus();
+                });
             });
         });
 

File: app/src/main/java/io/xpipe/app/core/AppProperties.java
Patch:
@@ -95,8 +95,8 @@ public AppProperties() {
                 .map(Boolean::parseBoolean)
                 .orElse(false);
         locatorVersionCheck = Optional.ofNullable(System.getProperty("io.xpipe.app.locator.disableInstallationVersionCheck"))
-                .map(Boolean::parseBoolean)
-                .orElse(false);
+                .map(s -> !Boolean.parseBoolean(s))
+                .orElse(true);
     }
 
     public static void logSystemProperties() {

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopApplicationStore.java
Patch:
@@ -26,6 +26,7 @@ public class DesktopApplicationStore extends JacksonizedValue implements DataSto
     public void checkComplete() throws Throwable {
         Validators.nonNull(desktop);
         Validators.isType(desktop, DesktopBaseStore.class);
+        desktop.checkComplete();
         Validators.nonNull(path);
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopCommandStore.java
Patch:
@@ -24,6 +24,7 @@ public class DesktopCommandStore extends JacksonizedValue implements DataStore,
     public void checkComplete() throws Throwable {
         Validators.nonNull(environment);
         Validators.isType(environment, DesktopEnvironmentStore.class);
+        environment.checkComplete();
         Validators.nonNull(script);
     }
 }

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopEnvironmentStore.java
Patch:
@@ -36,6 +36,7 @@ public class DesktopEnvironmentStore extends JacksonizedValue
     public void checkComplete() throws Throwable {
         Validators.nonNull(base);
         Validators.isType(base, DesktopBaseStore.class);
+        base.checkComplete();
         Validators.nonNull(terminal);
         Validators.nonNull(dialect);
     }

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -30,7 +30,7 @@ public interface ShellControl extends ProcessControl {
 
     ShellControl withSourceStore(ShellStore store);
 
-    List<ScriptSnippet> getInitCommands();
+    List<ShellInitCommand> getInitCommands();
 
     ParentSystemAccess getParentSystemAccess();
 
@@ -173,7 +173,7 @@ String buildElevatedCommand(CommandConfiguration input, String prefix, UUID requ
 
     ShellControl elevated(ElevationFunction elevationFunction);
 
-    ShellControl withInitSnippet(ScriptSnippet snippet);
+    ShellControl withInitSnippet(ShellInitCommand snippet);
 
     default ShellControl subShell(@NonNull ShellDialect type) {
         var o = new ShellOpenFunction() {

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemCache.java
Patch:
@@ -18,7 +18,8 @@ public OpenFileSystemCache(OpenFileSystemModel model) throws Exception {
 
         ShellControl sc = model.getFileSystem().getShell().get();
         ShellDialect d = sc.getShellDialect();
-        username = d.printUsernameCommand(sc).readStdoutOrThrow();
+        // If there is no id command, we should still be fine with just assuming root
+        username = d.printUsernameCommand(sc).readStdoutIfPossible().orElse("root");
     }
 
     public boolean isRoot() {

File: app/src/main/java/io/xpipe/app/core/AppPreloader.java
Patch:
@@ -22,6 +22,6 @@ public void start(Stage primaryStage) {
                 ModuleLayer.boot().findModule("javafx.graphics").orElseThrow(), "com.sun.glass.ui.Application");
         var m = c.getDeclaredMethod("setName", String.class);
         m.invoke(c.getMethod("GetApplication").invoke(null), "XPipe");
-        TrackEvent.info("Application preloaded launched");
+        TrackEvent.info("Application preloader run");
     }
 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/SvgView.java
Patch:
@@ -71,6 +71,7 @@ private WebView createWebView() {
             return null;
         }
 
+        wv.getStyleClass().add("svg-comp");
         wv.getEngine()
                 .setUserDataDirectory(
                         AppProperties.get().getDataDir().resolve("webview").toFile());
@@ -126,7 +127,6 @@ private WebView createWebView() {
 
     public Optional<WebView> createWebview() {
         var wv = createWebView();
-        wv.getStyleClass().add("svg-comp");
         return Optional.ofNullable(wv);
     }
 

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -71,7 +71,6 @@ private static Optional<Throwable> initPlatform() {
         try {
             // Weird fix to ensure that macOS quit operation works while in tray.
             // Maybe related to https://bugs.openjdk.org/browse/JDK-8318129 as it prints the same error if not called
-            // The headless check is not needed though but still done
             GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
 
             // Catch more than just the headless exception in case the graphics environment initialization completely
@@ -84,9 +83,9 @@ private static Optional<Throwable> initPlatform() {
                             + " You don't have to install XPipe on any system like a server, a WSL distribution, a hypervisor, etc.,"
                             + " to have full access to that system, a shell connection to it is enough for XPipe to work from your local machine."
                     : h.getMessage();
-            TrackEvent.warn(h.getMessage());
+            TrackEvent.warn(msg);
             PlatformState.setCurrent(PlatformState.EXITED);
-            return Optional.of(ErrorEvent.expected(new HeadlessException(msg)));
+            return Optional.of(ErrorEvent.expected(new UnsupportedOperationException(msg)));
         } catch (Throwable t) {
             TrackEvent.warn(t.getMessage());
             PlatformState.setCurrent(PlatformState.EXITED);

File: app/src/main/java/io/xpipe/app/comp/base/ButtonComp.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.app.fxcomps.CompStructure;
 import io.xpipe.app.fxcomps.SimpleCompStructure;
 
+import io.xpipe.app.fxcomps.util.PlatformThread;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.ObservableValue;
@@ -46,7 +47,7 @@ public ObjectProperty<Node> graphicProperty() {
     public CompStructure<Button> createBase() {
         var button = new Button(null);
         if (name != null) {
-            button.textProperty().bind(name);
+            button.textProperty().bind(PlatformThread.sync(name));
         }
         var graphic = getGraphic();
         if (graphic instanceof FontIcon f) {

File: app/src/main/java/io/xpipe/app/core/AppProperties.java
Patch:
@@ -55,7 +55,7 @@ public AppProperties() {
                 .orElse(UUID.randomUUID());
         sentryUrl = System.getProperty("io.xpipe.app.sentryUrl");
         arch = System.getProperty("io.xpipe.app.arch");
-        languages = Arrays.stream(System.getProperty("io.xpipe.app.languages").split(";"))
+        languages = Arrays.stream(System.getProperty("io.xpipe.app.languages").split(","))
                 .sorted()
                 .toList();
         staging = XPipeInstallation.isStaging();

File: app/src/main/java/io/xpipe/app/core/AppIntegration.java
Patch:
@@ -20,7 +20,7 @@ public static void setupDesktopIntegrations() {
             Desktop.getDesktop().addAppEventListener(new SystemSleepListener() {
                 @Override
                 public void systemAboutToSleep(SystemSleepEvent e) {
-                    if (AppPrefs.get() != null && AppPrefs.get().lockVaultOnHibernation().get()) {
+                    if (AppPrefs.get() != null && AppPrefs.get().lockVaultOnHibernation().get() && AppPrefs.get().getLockCrypt().get() != null && !AppPrefs.get().getLockCrypt().get().isBlank()) {
                         OperationMode.close();
                     }
                 }

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopEnvironmentStore.java
Patch:
@@ -62,7 +62,7 @@ public String getMergedInitCommands(String command) {
             initCommands.add(command);
         }
         var joined = String.join(dialect.getNewLine().getNewLineString(), initCommands);
-        return !joined.isBlank() ? joined : null;
+        return joined;
     }
 
     @Override

File: ext/base/src/main/java/io/xpipe/ext/base/browser/EditFileAction.java
Patch:
@@ -37,7 +37,7 @@ public Category getCategory() {
     @Override
     public ObservableValue<String> getName(OpenFileSystemModel model, List<BrowserEntry> entries) {
         var e = AppPrefs.get().externalEditor().getValue();
-        return AppI18n.observable("editWithEditor", e.toTranslatedString().getValue());
+        return AppI18n.observable("editWithEditor", e != null ? e.toTranslatedString().getValue() : "?");
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/core/check/AppAvCheck.java
Patch:
@@ -65,7 +65,7 @@ public static void check() throws Throwable {
                 alert.getDialogPane().setPadding(new Insets(15));
             });
 
-            alert.getButtonTypes().add(new ButtonType(AppI18n.get("gotIt"), ButtonBar.ButtonData.OK_DONE));
+            alert.getButtonTypes().add(new ButtonType(AppI18n.get("ok"), ButtonBar.ButtonData.OK_DONE));
         });
         a.filter(b -> b.getButtonData().isDefaultButton())
                 .ifPresentOrElse(buttonType -> {}, () -> OperationMode.halt(1));

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -49,7 +49,7 @@ public static void showIfNeeded() {
                     var markdown = new MarkdownComp(update.getRawDescription(), s -> "&nbsp;" + s).createRegion();
                     alert.getDialogPane().setContent(markdown);
 
-                    alert.getButtonTypes().add(new ButtonType(AppI18n.get("gotIt"), ButtonBar.ButtonData.OK_DONE));
+                    alert.getButtonTypes().add(new ButtonType(AppI18n.get("ok"), ButtonBar.ButtonData.OK_DONE));
                     ((Stage) alert.getDialogPane().getScene().getWindow()).setAlwaysOnTop(true);
                 },
                 r -> r.filter(b -> b.getButtonData().isDefaultButton()).ifPresent(t -> {}));

File: app/src/main/java/io/xpipe/app/terminal/TabbyTerminalType.java
Patch:
@@ -52,7 +52,7 @@ default TerminalInitFunction additionalInitCommands() {
 //            }
 //            return null;
 //        });
-        return null;
+        return TerminalInitFunction.none();
     }
 
     class Windows extends ExternalTerminalType.WindowsType implements TabbyTerminalType {

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -32,7 +32,7 @@ public static void openDirect(String title, FailableFunction<ShellControl, Strin
                             title,
                             type.shouldClear()
                                     && AppPrefs.get().clearTerminalOnInit().get(),
-                    null),
+                    TerminalInitFunction.none()),
                     true);
             var config = new ExternalTerminalType.LaunchConfiguration(null, title, title, script, sc.getShellDialect());
             type.launch(config);

File: app/src/main/java/io/xpipe/app/fxcomps/util/Shortcuts.java
Patch:
@@ -47,15 +47,15 @@ public void handle(KeyEvent ke) {
             }
 
             if (scene.get() != null) {
-                scene.get().removeEventFilter(KeyEvent.KEY_PRESSED, filter);
+                scene.get().removeEventHandler(KeyEvent.KEY_PRESSED, filter);
                 DISPLAY_SHORTCUTS.remove(region);
                 scene.set(null);
             }
 
             if (s != null) {
                 scene.set(s);
                 DISPLAY_SHORTCUTS.put(region, comb);
-                s.addEventFilter(KeyEvent.KEY_PRESSED, filter);
+                s.addEventHandler(KeyEvent.KEY_PRESSED, filter);
             }
         });
     }

File: app/src/main/java/io/xpipe/app/issue/UserReportComp.java
Patch:
@@ -76,6 +76,7 @@ private Comp<?> createAttachments() {
     @Override
     protected Region createSimple() {
         var emailHeader = new Label(AppI18n.get("provideEmail"));
+        emailHeader.setWrapText(true);
         AppFont.medium(emailHeader);
         var email = new TextField();
         this.email.bind(email.textProperty());

File: app/src/main/java/io/xpipe/app/prefs/CloseBehaviourAlert.java
Patch:
@@ -47,7 +47,7 @@ public static boolean showIfNeeded() {
                             rb.setSelected(true);
                         }
                         vb.getChildren().add(rb);
-                        vb.setMinHeight(150);
+                        vb.setMinHeight(130);
                     }
                     alert.getDialogPane().setContent(vb);
                 })

File: app/src/main/java/io/xpipe/app/prefs/DeveloperCategory.java
Patch:
@@ -31,7 +31,6 @@ protected Comp<?> create() {
         var prefs = AppPrefs.get();
         var localCommand = new SimpleStringProperty();
         Runnable test = () -> {
-            prefs.save();
             var cmd = localCommand.get();
             if (cmd == null) {
                 return;

File: app/src/main/java/io/xpipe/app/prefs/EditorCategory.java
Patch:
@@ -30,7 +30,6 @@ protected Comp<?> create() {
         var prefs = AppPrefs.get();
         var terminalTest = new StackComp(
                         List.of(new ButtonComp(AppI18n.observable("test"), new FontIcon("mdi2p-play"), () -> {
-                            prefs.save();
                             ThreadHelper.runFailableAsync(() -> {
                                 var editor = AppPrefs.get().externalEditor().getValue();
                                 if (editor != null) {

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -215,7 +215,7 @@ public GenericPathType(String id, String command, boolean explicityAsync) {
         @Override
         public void launch(Path file) throws Exception {
             var builder = CommandBuilder.of().addFile(executable).addFile(file.toString());
-            if (explicityAsync) {
+            if (explicitlyAsync) {
                 ExternalApplicationHelper.startAsync(builder);
             } else {
                 LocalShell.getShell().executeSimpleCommand(builder);

File: app/src/main/java/io/xpipe/app/prefs/PasswordManagerCategory.java
Patch:
@@ -52,7 +52,6 @@ protected Comp<?> create() {
         var prefs = AppPrefs.get();
         var testPasswordManagerValue = new SimpleStringProperty();
         Runnable test = () -> {
-            prefs.save();
             var cmd = prefs.passwordManagerString(testPasswordManagerValue.get());
             if (cmd == null) {
                 return;

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -161,6 +161,7 @@ public void launch(LaunchConfiguration configuration) throws Exception {
                         // In order to fix this bug which also affects us:
                         // https://askubuntu.com/questions/1148475/launching-gnome-terminal-from-vscode
                         .envrironment("GNOME_TERMINAL_SCREEN", sc -> "");
+                pc.executeSimpleCommand(toExecute);
             }
         }
 
@@ -819,7 +820,7 @@ public FailableFunction<LaunchConfiguration, String, Exception> remoteLaunchComm
             return launchConfiguration -> {
                 var args = toCommand(launchConfiguration);
                 args.add(0, executable);
-                if (explicityAsync) {
+                if (explicitlyAsync) {
                     args = systemDialect.launchAsnyc(args);
                 }
                 return args.buildSimple();

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -74,7 +74,7 @@ public void init(ModuleLayer layer) {
             CSH = byId("csh");
             ASH = byId("ash");
             SH = byId("sh");
-            NO_INTERACTION = byId("unsupported");
+            NO_INTERACTION = byId("noInteraction");
             CISCO = byId("cisco");
             MIKROTIK = byId("mikrotik");
             RBASH = byId("rbash");

File: core/src/main/java/io/xpipe/core/process/TerminalInitScriptConfig.java
Patch:
@@ -10,6 +10,6 @@ public class TerminalInitScriptConfig {
     TerminalInitFunction terminalSpecificCommands;
 
     public static TerminalInitScriptConfig ofName(String name) {
-        return new TerminalInitScriptConfig(name, true, null);
+        return new TerminalInitScriptConfig(name, true, TerminalInitFunction.none());
     }
 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FilterComp.java
Patch:
@@ -62,6 +62,7 @@ public Structure createBase() {
 
         var stack = new StackPane(bgLabel, filter);
         stack.getStyleClass().add("filter-comp");
+        stack.minWidthProperty().bind(bgLabel.prefWidthProperty());
 
         return Structure.builder()
                 .inactiveIcon(fi)

File: ext/base/src/main/java/io/xpipe/ext/base/browser/ExecuteApplicationAction.java
Patch:
@@ -1,5 +1,7 @@
-package io.xpipe.app.browser.action;
+package io.xpipe.ext.base.browser;
 
+import io.xpipe.app.browser.action.ApplicationPathAction;
+import io.xpipe.app.browser.action.LeafAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.core.process.ShellControl;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/JarAction.java
Patch:
@@ -1,7 +1,6 @@
 package io.xpipe.ext.base.browser;
 
 import io.xpipe.app.browser.action.BrowserActionFormatter;
-import io.xpipe.app.browser.action.MultiExecuteAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.browser.icon.BrowserIconFileType;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/JavapAction.java
Patch:
@@ -1,7 +1,6 @@
 package io.xpipe.ext.base.browser;
 
 import io.xpipe.app.browser.action.BrowserActionFormatter;
-import io.xpipe.app.browser.action.ToFileCommandAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.browser.icon.BrowserIconFileType;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/RenameAction.java
Patch:
@@ -40,7 +40,7 @@ public KeyCombination getShortcut() {
 
     @Override
     public ObservableValue<String> getName(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return AppI18n.observable("openWithDefaultApplication");
+        return AppI18n.observable("rename");
     }
 
     @Override

File: ext/base/src/main/java/io/xpipe/ext/base/browser/RunAction.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.ext.base.browser;
 
-import io.xpipe.app.browser.action.MultiExecuteAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.core.AppI18n;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/ToFileCommandAction.java
Patch:
@@ -1,5 +1,7 @@
-package io.xpipe.app.browser.action;
+package io.xpipe.ext.base.browser;
 
+import io.xpipe.app.browser.action.ApplicationPathAction;
+import io.xpipe.app.browser.action.LeafAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.util.FileOpener;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/UnzipAction.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.ext.base.browser;
 
-import io.xpipe.app.browser.action.ExecuteApplicationAction;
 import io.xpipe.app.browser.file.BrowserEntry;
 import io.xpipe.app.browser.fs.OpenFileSystemModel;
 import io.xpipe.app.browser.icon.BrowserIconFileType;

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListComp.java
Patch:
@@ -25,7 +25,7 @@ private Comp<?> createList() {
                             return new HorizontalComp(List.of(Comp.hspacer(8), custom, Comp.hspacer(10)))
                                     .styleClass("top");
                         })
-                .apply(struc -> ((Region) struc.get().getContent()).setPadding(new Insets(10, 0, 10, 0)));
+                .apply(struc -> ((Region) struc.get().getContent()).setPadding(new Insets(8, 0, 8, 0)));
         return content.styleClass("store-list-comp");
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/script/ScriptGroupStoreProvider.java
Patch:
@@ -25,18 +25,17 @@ public class ScriptGroupStoreProvider implements DataStoreProvider {
 
     @Override
     public StoreEntryComp customEntryComp(StoreSection sec, boolean preferLarge) {
-        ScriptGroupStore s = sec.getWrapper().getEntry().getStore().asNeeded();
         if (sec.getWrapper().getValidity().getValue() != DataStoreEntry.Validity.COMPLETE) {
             return new DenseStoreEntryComp(sec.getWrapper(), true, null);
         }
 
-        var def = new StoreToggleComp("base.isDefaultGroup", sec, s.getState().isDefault(), aBoolean -> {
+        var def = StoreToggleComp.<ScriptGroupStore>simpleToggle("base.isDefaultGroup", sec, s -> s.getState().isDefault(), (s, aBoolean) -> {
             var state = s.getState();
             state.setDefault(aBoolean);
             s.setState(state);
         });
 
-        var bring = new StoreToggleComp("base.bringToShells", sec, s.getState().isBringToShell(), aBoolean -> {
+        var bring = StoreToggleComp.<ScriptGroupStore>simpleToggle("base.bringToShells", sec, s -> s.getState().isBringToShell(), (s, aBoolean) -> {
             var state = s.getState();
             state.setBringToShell(aBoolean);
             s.setState(state);

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionComp.java
Patch:
@@ -178,12 +178,12 @@ public CompStructure<VBox> createBase() {
                         newList.removeIf(s -> Arrays.stream(DataStoreColor.values())
                                 .anyMatch(
                                         dataStoreColor -> dataStoreColor.getId().equals(s)));
-                        newList.remove("none");
+                        newList.remove("gray");
                         newList.add("color-box");
                         if (val != null) {
                             newList.add(val.getId());
                         } else {
-                            newList.add("none");
+                            newList.add("gray");
                         }
                         struc.get().getStyleClass().setAll(newList);
                     });

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionMiniComp.java
Patch:
@@ -176,12 +176,12 @@ public CompStructure<VBox> createBase() {
                             struc.get().getStyleClass().removeIf(s -> Arrays.stream(DataStoreColor.values())
                                     .anyMatch(dataStoreColor ->
                                             dataStoreColor.getId().equals(s)));
-                            struc.get().getStyleClass().remove("none");
+                            struc.get().getStyleClass().remove("gray");
                             struc.get().getStyleClass().add("color-box");
                             if (val != null) {
                                 struc.get().getStyleClass().add(val.getId());
                             } else {
-                                struc.get().getStyleClass().add("none");
+                                struc.get().getStyleClass().add("gray");
                             }
                         });
                     }

File: core/src/main/java/io/xpipe/core/process/ShellLaunchCommand.java
Patch:
@@ -4,6 +4,8 @@
 
 public interface ShellLaunchCommand {
 
+    String inlineCdCommand(String cd);
+
     List<String> localCommand();
 
     default String loginCommand() {

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -381,8 +381,7 @@ protected ContextMenu createContextMenu() {
             contextMenu.getItems().add(browse);
         }
 
-        if (wrapper.getEntry().getProvider() != null
-                && wrapper.getEntry().getProvider().canMoveCategories()) {
+        if (wrapper.getEntry().getProvider() != null) {
             var move = new Menu(AppI18n.get("moveTo"), new FontIcon("mdi2f-folder-move-outline"));
             StoreViewState.get()
                     .getSortedCategories(wrapper.getCategory().getValue().getRoot())

File: app/src/main/java/io/xpipe/app/comp/store/StoreSection.java
Patch:
@@ -107,7 +107,7 @@ public static StoreSection createTopLevel(
                     var matchesSelector = section.anyMatches(entryFilter);
                     var sameCategory = category == null
                             || category.getValue() == null
-                            || inCategory(category.getValue(), section.getWrapper());
+                            || showInCategory(category.getValue(), section.getWrapper());
                     return showFilter && matchesSelector && sameCategory;
                 },
                 category,
@@ -148,7 +148,7 @@ private static StoreSection create(
                     var matchesSelector = section.anyMatches(entryFilter);
                     var sameCategory = category == null
                             || category.getValue() == null
-                            || inCategory(category.getValue(), section.getWrapper());
+                            || showInCategory(category.getValue(), section.getWrapper());
                     // If this entry is already shown as root due to a different category than parent, don't show it
                     // again here
                     var notRoot =
@@ -160,7 +160,7 @@ private static StoreSection create(
         return new StoreSection(e, cached, filtered, depth);
     }
 
-    private static boolean inCategory(StoreCategoryWrapper categoryWrapper, StoreEntryWrapper entryWrapper) {
+    private static boolean showInCategory(StoreCategoryWrapper categoryWrapper, StoreEntryWrapper entryWrapper) {
         var current = entryWrapper.getCategory().getValue();
         while (current != null) {
             if (categoryWrapper

File: ext/base/src/main/java/io/xpipe/ext/base/SelfReferentialStore.java
Patch:
@@ -10,7 +10,7 @@ public interface SelfReferentialStore extends DataStore {
 
     default DataStoreEntry getSelfEntry() {
         return DataStorage.get()
-                .getStoreEntryIfPresent(this)
+                .getStoreEntryIfPresent(this, true)
                 .or(() -> {
                     return DataStorage.get().getStoreEntryInProgressIfPresent(this);
                 })

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopEnvironmentStore.java
Patch:
@@ -50,8 +50,7 @@ public String getMergedInitCommands(String command) {
         var f = ScriptStore.flatten(scripts);
         var filtered = f.stream()
                 .filter(simpleScriptStore ->
-                        simpleScriptStore.getMinimumDialect().isCompatibleTo(dialect)
-                                && simpleScriptStore.getExecutionType().runInTerminal())
+                        simpleScriptStore.getMinimumDialect().isCompatibleTo(dialect))
                 .toList();
         var initCommands = new ArrayList<>(filtered.stream()
                 .map(simpleScriptStore -> simpleScriptStore.getCommands())

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -32,7 +32,8 @@ public static void openDirect(String title, FailableFunction<ShellControl, Strin
                             title,
                             type.shouldClear()
                                     && AppPrefs.get().clearTerminalOnInit().get(),
-                    null));
+                    null),
+                    true);
             var config = new ExternalTerminalType.LaunchConfiguration(null, title, title, script, sc.getShellDialect());
             type.launch(config);
         }

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -247,7 +247,6 @@ protected Comp<?> createButtonBar() {
             comp.apply(struc -> {
                 struc.get().getStyleClass().remove(Styles.FLAT);
             });
-            comp.grow(false, true);
         });
         return new HorizontalComp(list)
                 .apply(struc -> {

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -614,7 +614,7 @@ public FailableFunction<LaunchConfiguration, String, Exception> remoteLaunchComm
 
     List<ExternalTerminalType> ALL = getTypes(OsType.getLocal(), false, true);
 
-    List<ExternalTerminalType> ALL_CROSS_PLATFORM = getTypes(null, false, true);
+    List<ExternalTerminalType> ALL_ON_ALL_PLATFORMS = getTypes(null, false, true);
 
     static List<ExternalTerminalType> getTypes(OsType osType, boolean remote, boolean custom) {
         var all = new ArrayList<ExternalTerminalType>();

File: app/src/main/java/io/xpipe/app/util/AppJacksonModule.java
Patch:
@@ -68,7 +68,7 @@ public static class ExternalTerminalTypeDeserializer extends JsonDeserializer<Ex
         @Override
         public ExternalTerminalType deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
             var id = p.getValueAsString();
-            return ExternalTerminalType.ALL.stream()
+            return ExternalTerminalType.ALL_ON_ALL_PLATFORMS.stream()
                     .filter(terminalType -> terminalType.getId().equals(id))
                     .findFirst()
                     .orElse(null);

File: app/src/main/java/io/xpipe/app/util/DataStoreFormatter.java
Patch:
@@ -37,7 +37,7 @@ public static ObservableValue<String> shellInformation(StoreEntryWrapper w) {
                         return formattedOsName(s.getOsName());
                     }
 
-                    if (s.getShellDialect().equals(ShellDialects.UNSUPPORTED)) {
+                    if (s.getShellDialect().equals(ShellDialects.NO_INTERACTION)) {
                         return null;
                     }
 

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -23,7 +23,7 @@ public class ShellDialects {
     public static ShellDialect CSH;
     public static ShellDialect FISH;
 
-    public static ShellDialect UNSUPPORTED;
+    public static ShellDialect NO_INTERACTION;
     public static ShellDialect CISCO;
     public static ShellDialect MIKROTIK;
     public static ShellDialect RBASH;
@@ -74,7 +74,7 @@ public void init(ModuleLayer layer) {
             CSH = byId("csh");
             ASH = byId("ash");
             SH = byId("sh");
-            UNSUPPORTED = byId("unsupported");
+            NO_INTERACTION = byId("unsupported");
             CISCO = byId("cisco");
             MIKROTIK = byId("mikrotik");
             RBASH = byId("rbash");

File: core/src/main/java/io/xpipe/core/util/CoreJacksonModule.java
Patch:
@@ -96,7 +96,7 @@ public static class ShellDialectDeserializer extends JsonDeserializer<ShellDiale
 
         @Override
         public ShellDialect deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
-            var tree = JacksonMapper.getDefault().readTree(p);
+            JsonNode tree = JacksonMapper.getDefault().readTree(p);
             if (tree.isObject()) {
                 var t = (JsonNode) tree.get("type");
                 if (t == null) {
@@ -105,7 +105,7 @@ public ShellDialect deserialize(JsonParser p, DeserializationContext ctxt) throw
                 return ShellDialects.byNameIfPresent(t.asText()).orElse(null);
             }
 
-            return ShellDialects.byNameIfPresent(p.getValueAsString()).orElse(null);
+            return ShellDialects.byNameIfPresent(tree.asText()).orElse(null);
         }
     }
 

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -612,9 +612,9 @@ public FailableFunction<LaunchConfiguration, String, Exception> remoteLaunchComm
             WezTerminalType.WEZTERM_MAC_OS,
             MACOS_TERMINAL);
 
-    List<ExternalTerminalType> APPLICABLE = getTypes(OsType.getLocal(), false, true);
+    List<ExternalTerminalType> ALL = getTypes(OsType.getLocal(), false, true);
 
-    List<ExternalTerminalType> ALL = getTypes(null, false, true);
+    List<ExternalTerminalType> ALL_CROSS_PLATFORM = getTypes(null, false, true);
 
     static List<ExternalTerminalType> getTypes(OsType osType, boolean remote, boolean custom) {
         var all = new ArrayList<ExternalTerminalType>();
@@ -649,7 +649,7 @@ static ExternalTerminalType determineDefault(ExternalTerminalType existing) {
             return existing;
         }
 
-        return APPLICABLE.stream()
+        return ALL.stream()
                 .filter(externalTerminalType -> !externalTerminalType.equals(CUSTOM))
                 .filter(terminalType -> terminalType.isAvailable())
                 .findFirst()

File: app/src/main/java/io/xpipe/app/util/LockChangeAlert.java
Patch:
@@ -28,11 +28,11 @@ public static void show() {
                     alert.setAlertType(Alert.AlertType.CONFIRMATION);
 
                     var label1 = new LabelComp(AppI18n.observable("passphrase")).createRegion();
-                    var p1 = new SecretFieldComp(prop1).createRegion();
+                    var p1 = new SecretFieldComp(prop1, false).createRegion();
                     p1.setStyle("-fx-border-width: 1px");
 
                     var label2 = new LabelComp(AppI18n.observable("repeatPassphrase")).createRegion();
-                    var p2 = new SecretFieldComp(prop2).createRegion();
+                    var p2 = new SecretFieldComp(prop2, false).createRegion();
                     p1.setStyle("-fx-border-width: 1px");
 
                     var content = new VBox(label1, p1, new Spacer(15), label2, p2);

File: app/src/main/java/io/xpipe/app/util/OptionsBuilder.java
Patch:
@@ -320,7 +320,7 @@ public OptionsBuilder addProperty(Property<?> prop) {
     }
 
     public OptionsBuilder addSecret(Property<InPlaceSecretValue> prop) {
-        var comp = new SecretFieldComp(prop);
+        var comp = new SecretFieldComp(prop, true);
         pushComp(comp);
         props.add(prop);
         return this;

File: app/src/main/java/io/xpipe/app/util/SecretRetrievalStrategyHelper.java
Patch:
@@ -27,7 +27,7 @@ private static OptionsBuilder inPlace(Property<SecretRetrievalStrategy.InPlace>
                         ? p.getValue().getValue().getInternalSecret()
                         : null);
         return new OptionsBuilder()
-                .addComp(new SecretFieldComp(secretProperty), secretProperty)
+                .addComp(new SecretFieldComp(secretProperty, true), secretProperty)
                 .bind(
                         () -> {
                             var newSecret = secretProperty.get();

File: app/src/main/java/io/xpipe/app/util/UnlockAlert.java
Patch:
@@ -41,7 +41,7 @@ public static void showIfNeeded() throws Exception {
                         alert.setHeaderText(AppI18n.get("unlockAlertHeader"));
                         alert.setAlertType(Alert.AlertType.CONFIRMATION);
 
-                        var text = new SecretFieldComp(pw).createRegion();
+                        var text = new SecretFieldComp(pw, false).createRegion();
                         text.setStyle("-fx-border-width: 1px");
 
                         var content = new VBox(text);

File: app/src/main/java/io/xpipe/app/core/AppProperties.java
Patch:
@@ -55,7 +55,7 @@ public AppProperties() {
                 .orElse(UUID.randomUUID());
         sentryUrl = System.getProperty("io.xpipe.app.sentryUrl");
         arch = System.getProperty("io.xpipe.app.arch");
-        languages = Arrays.asList(System.getProperty("io.xpipe.app.languages").split(";"));
+        languages = Arrays.stream(System.getProperty("io.xpipe.app.languages").split(";")).sorted().toList();
         staging = XPipeInstallation.isStaging();
         useVirtualThreads = Optional.ofNullable(System.getProperty("io.xpipe.app.useVirtualThreads"))
                 .map(Boolean::parseBoolean)

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ChoiceComp.java
Patch:
@@ -53,7 +53,6 @@ public static <T extends Translatable> ChoiceComp<T> ofTranslatable(
     @Override
     public CompStructure<ComboBox<T>> createBase() {
         var cb = new ComboBox<T>();
-        cb.setMaxWidth(2000);
         cb.setConverter(new StringConverter<>() {
             @Override
             public String toString(T object) {

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopCommandStoreProvider.java
Patch:
@@ -74,8 +74,7 @@ public GuiDialog guiDialog(DataStoreEntry entry, Property<DataStore> store) {
                                 entry,
                                 env,
                                 DesktopEnvironmentStore.class,
-                                desktopStoreDataStoreEntryRef ->
-                                        desktopStoreDataStoreEntryRef.getStore().supportsDesktopAccess(),
+                                desktopStoreDataStoreEntryRef -> desktopStoreDataStoreEntryRef.getStore().supportsDesktopAccess(),
                                 StoreViewState.get().getAllConnectionsCategory()),
                         env)
                 .nonNull()

File: ext/base/src/main/java/io/xpipe/ext/base/desktop/DesktopEnvironmentStoreProvider.java
Patch:
@@ -127,8 +127,7 @@ public GuiDialog guiDialog(DataStoreEntry entry, Property<DataStore> store) {
                 .nonNull()
                 .nameAndDescription("desktopTerminal")
                 .addComp(
-                        ChoiceComp.ofTranslatable(
-                                terminal, ExternalTerminalType.getTypes(st.getUsedOsType(), true, false), true),
+                        ChoiceComp.ofTranslatable(terminal, ExternalTerminalType.getTypes(st.getUsedOsType(), true, false), true).maxWidth(2000),
                         terminal)
                 .nonNull()
                 .nameAndDescription("desktopShellDialect")

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -6,15 +6,12 @@
 import io.xpipe.core.util.SecretValue;
 import io.xpipe.core.util.StreamCharset;
 
-import com.fasterxml.jackson.annotation.JsonTypeInfo;
-
 import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 import java.util.stream.Stream;
 
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface ShellDialect {
 
     CommandBuilder launchAsnyc(CommandBuilder cmd);

File: app/src/main/java/io/xpipe/app/update/AppDownloads.java
Patch:
@@ -68,7 +68,7 @@ public static Optional<Path> downloadInstaller(
 
             return Optional.of(downloadFile);
         } catch (Throwable t) {
-            ErrorEvent.fromThrowable(t).omitted(omitErrors).handle();
+            ErrorEvent.fromThrowable(t).omitted(omitErrors).expected().handle();
             return Optional.empty();
         }
     }
@@ -106,7 +106,7 @@ public static Optional<String> downloadChangelog(String version, boolean omitErr
             var bytes = HttpHelper.executeGet(url, aFloat -> {});
             return Optional.of(new String(bytes, StandardCharsets.UTF_8));
         } catch (Throwable t) {
-            ErrorEvent.fromThrowable(t).omitted(omitErrors).handle();
+            ErrorEvent.fromThrowable(t).omitted(omitErrors).expected().handle();
             return Optional.empty();
         }
     }

File: app/src/main/java/io/xpipe/app/browser/fs/OpenFileSystemModel.java
Patch:
@@ -64,7 +64,7 @@ public OpenFileSystemModel(
 
     @Override
     public Comp<?> comp() {
-        return new OpenFileSystemComp(this);
+        return new OpenFileSystemComp(this, true);
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -309,8 +309,8 @@ public Comp<?> content() {
     }
 
     @Override
-    protected Comp<?> scrollPane(Comp<?> content) {
-        var back = super.scrollPane(content);
+    protected Comp<?> pane(Comp<?> content) {
+        var back = super.pane(content);
         return new ErrorOverlayComp(back, messageProp);
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -212,8 +212,8 @@ private static boolean showInvalidConfirmAlert() {
                             .setContent(AppWindowHelper.alertContentText(AppI18n.get("confirmInvalidStoreContent")));
                     alert.setAlertType(Alert.AlertType.CONFIRMATION);
                     alert.getButtonTypes().clear();
-                    alert.getButtonTypes().add(new ButtonType("Retry", ButtonBar.ButtonData.CANCEL_CLOSE));
-                    alert.getButtonTypes().add(new ButtonType("Skip", ButtonBar.ButtonData.OK_DONE));
+                    alert.getButtonTypes().add(new ButtonType(AppI18n.get("retry"), ButtonBar.ButtonData.CANCEL_CLOSE));
+                    alert.getButtonTypes().add(new ButtonType(AppI18n.get("skip"), ButtonBar.ButtonData.OK_DONE));
                 })
                 .map(b -> b.getButtonData().isDefaultButton())
                 .orElse(false);

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -65,7 +65,7 @@ public void setupWindow() {
                             "XPipe %s (%s)", t.getValue(), AppProperties.get().getVersion());
                     var prefix = AppProperties.get().isStaging() ? "[Public Test Build, Not a proper release] " : "";
                     var suffix = u.getValue() != null
-                            ? AppI18n.get("updateReadyTitle", u.getValue().getVersion())
+                            ? " " + AppI18n.get("updateReadyTitle", u.getValue().getVersion())
                             : "";
                     return prefix + base + suffix;
                 },

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ContextualFileReferenceChoiceComp.java
Patch:
@@ -84,7 +84,7 @@ public CompStructure<HBox> createBase() {
         var gitShareButton = new ButtonComp(null, new FontIcon("mdi2g-git"), () -> {
             if (!AppPrefs.get().enableGitStorage().get()) {
                 AppLayoutModel.get().selectSettings();
-                AppPrefs.get().selectCategory(3);
+                AppPrefs.get().selectCategory("synchronization");
                 return;
             }
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -241,7 +241,7 @@ abstract class WindowsType extends ExternalApplicationType.WindowsType implement
 
         public WindowsType(String id, String executable, boolean detach) {
             super(id, executable);
-            this.detach = true;
+            this.detach = detach;
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/util/LicenseProvider.java
Patch:
@@ -21,7 +21,9 @@ public static LicenseProvider get() {
 
     public abstract LicensedFeature getFeature(String id);
 
-    public abstract void checkShellControl(String s);
+    public abstract boolean checkOsName(String name);
+
+    public abstract void checkOsNameOrThrow(String s);
 
     public abstract void showLicenseAlert(LicenseRequiredException ex);
 

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.core.check.AppSystemFontCheck;
+import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.core.process.OsType;
@@ -83,7 +84,7 @@ private static Optional<Throwable> initPlatform() {
                     : h.getMessage();
             TrackEvent.warn(h.getMessage());
             PlatformState.setCurrent(PlatformState.EXITED);
-            return Optional.of(new HeadlessException(msg));
+            return Optional.of(ErrorEvent.expected(new HeadlessException(msg)));
         } catch (Throwable t) {
             TrackEvent.warn(t.getMessage());
             PlatformState.setCurrent(PlatformState.EXITED);

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -183,6 +183,7 @@ public Comp<?> content() {
                         }
 
                         shellControl = newValue.getStore().control();
+                        shellControl.withoutLicenseCheck();
                         shellControl.start();
                         var a = applicable.apply(entry.get().get(), shellControl);
 

File: app/src/main/java/io/xpipe/app/util/SecretRetrievalStrategyHelper.java
Patch:
@@ -46,14 +46,15 @@ private static OptionsBuilder passwordManager(Property<SecretRetrievalStrategy.P
                                 .apply(struc -> struc.get().setPromptText("Password key"))
                                 .hgrow(),
                         new ButtonComp(null, new FontIcon("mdomz-settings"), () -> {
-                                    AppPrefs.get().selectCategory(9);
+                                    AppPrefs.get().selectCategory("passwordManager");
                                     App.getApp().getStage().requestFocus();
                                 })
                                 .grow(false, true)))
                 .apply(struc -> struc.get().setSpacing(10));
         return new OptionsBuilder()
                 .name("passwordKey")
                 .addComp(content, keyProperty)
+                .nonNull()
                 .bind(
                         () -> {
                             return new SecretRetrievalStrategy.PasswordManager(keyProperty.getValue());

File: app/src/main/java/io/xpipe/app/core/AppTheme.java
Patch:
@@ -87,6 +87,8 @@ public void handle(WindowEvent event) {
                 try {
 //                    var c = new WindowControl(stage);
 //                    c.setWindowAttribute(20, AppPrefs.get().theme.getValue().isDark());
+//                    c.setWindowAttribute(34, 0xFFFFFFFEL);
+//                    c.redraw();
                 } catch (Throwable e) {
                     ErrorEvent.fromThrowable(e).handle();
                 }

File: app/src/main/java/io/xpipe/app/comp/store/StoreSortMode.java
Patch:
@@ -49,7 +49,7 @@ public Comparator<StoreSection> comparator() {
     StoreSortMode DATE_DESC = new StoreSortMode() {
         @Override
         public StoreSection representative(StoreSection s) {
-            return Stream.concat(s.getShownChildren().stream().map(this::representative), Stream.of(s))
+            return Stream.concat(s.getShownChildren().stream().filter(section -> section.getWrapper().getEntry().getValidity().isUsable()).map(this::representative), Stream.of(s))
                     .max(Comparator.comparing(
                             section -> section.getWrapper().getEntry().getLastAccess()))
                     .orElseThrow();
@@ -70,7 +70,7 @@ public Comparator<StoreSection> comparator() {
     StoreSortMode DATE_ASC = new StoreSortMode() {
         @Override
         public StoreSection representative(StoreSection s) {
-            return Stream.concat(s.getShownChildren().stream().map(this::representative), Stream.of(s))
+            return Stream.concat(s.getShownChildren().stream().filter(section -> section.getWrapper().getEntry().getValidity().isUsable()).map(this::representative), Stream.of(s))
                     .max(Comparator.comparing(
                             section -> section.getWrapper().getEntry().getLastAccess()))
                     .orElseThrow();

File: app/src/main/java/io/xpipe/app/util/Hyperlinks.java
Patch:
@@ -9,7 +9,7 @@ public class Hyperlinks {
     public static final String PRIVACY = "https://docs.xpipe.io/privacy-policy";
     public static final String EULA = "https://docs.xpipe.io/end-user-license-agreement";
     public static final String SECURITY = "https://docs.xpipe.io/security";
-    public static final String TRANSLATE = "https://github.com/xpipe-io/xpipe/lang";
+    public static final String TRANSLATE = "https://github.com/xpipe-io/xpipe/tree/master/lang";
     public static final String DISCORD = "https://discord.gg/8y89vS8cRb";
     public static final String SLACK =
             "https://join.slack.com/t/XPipe/shared_invite/zt-1awjq0t5j-5i4UjNJfNe1VN4b_auu6Cg";

File: app/src/main/java/io/xpipe/app/util/ShellTemp.java
Patch:
@@ -85,9 +85,9 @@ private static boolean checkDirectoryPermissions(ShellControl proc, String dir)
 
     public static String getSubDirectory(ShellControl proc, String... sub) throws Exception {
         var base = proc.getSystemTemporaryDirectory();
-        var arr = Stream.concat(Stream.of(base), Arrays.stream(sub)).toArray(String[]::new);
+        var arr = Stream.concat(Stream.of(base.toString()), Arrays.stream(sub)).toArray(String[]::new);
         var dir = FileNames.join(arr);
-
+        
         // We assume that this directory does not exist yet and therefore don't perform any checks
         proc.getShellDialect().prepareUserTempDirectory(proc, dir).execute();
 

File: app/src/main/java/io/xpipe/app/terminal/KittyTerminalType.java
Patch:
@@ -60,7 +60,9 @@ private static boolean prepare() throws Exception {
     private static void open(ExternalTerminalType.LaunchConfiguration configuration) throws Exception {
         try (var sc = LocalShell.getShell().start()) {
             var payload = JsonNodeFactory.instance.objectNode();
-            payload.putArray("args").add("bash");
+            var args = configuration.getDialectLaunchCommand().buildBaseParts(sc);
+            var argsArray = payload.putArray("args");
+            args.forEach(argsArray::add);
             payload.put("tab_title",configuration.getColoredTitle());
             payload.put("type", "tab");
             payload.put("logo_alpha", 0.01);

File: app/src/main/java/io/xpipe/app/util/ShellTemp.java
Patch:
@@ -52,7 +52,7 @@ public static FilePath getUserSpecificTempDataDirectory(ShellControl proc, Strin
             var temp = proc.getSystemTemporaryDirectory();
             base = temp.join("xpipe");
         }
-        return base.join(sub);
+        return sub != null ? base.join(sub) : base;
     }
 
     public static void checkTempDirectory(ShellControl proc) throws Exception {

File: core/src/main/java/io/xpipe/core/process/CommandBuilder.java
Patch:
@@ -187,7 +187,7 @@ public CommandBuilder addFile(String s) {
     }
 
     public CommandBuilder addFile(FilePath s) {
-        return addFile(shellControl -> shellControl.getShellDialect().fileArgument(s));
+        return addFile(s.toString());
     }
 
     public CommandBuilder addLiteral(String s) {

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListComp.java
Patch:
@@ -268,6 +268,7 @@ private void prepareTableEntries(TableView<BrowserEntry> table) {
 
                                 return false;
                             },
+                    null,
                             () -> {
                                 if (row.getItem() != null && row.getItem().isSynthetic()) {
                                     return null;

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -103,7 +103,7 @@ protected Region createSimple() {
         homeButton.setAccessibleText("Directory options");
         homeButton.getStyleClass().add(Styles.LEFT_PILL);
         homeButton.getStyleClass().add("path-graphic-button");
-        new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, () -> {
+        new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, null, () -> {
                     return model.getInOverview().get() ? null : new BrowserContextMenu(model, null);
                 })
                 .augment(new SimpleCompStructure<>(homeButton));
@@ -112,7 +112,7 @@ protected Region createSimple() {
         historyButton.setAccessibleText("History");
         historyButton.getStyleClass().add(Styles.RIGHT_PILL);
         // historyButton.getStyleClass().add("path-graphic-button");
-        new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, this::createContextMenu)
+        new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, null, this::createContextMenu)
                 .augment(new SimpleCompStructure<>(historyButton));
 
         var breadcrumbs = new BrowserBreadcrumbBar(model).grow(false, true);

File: app/src/main/java/io/xpipe/app/browser/BrowserQuickAccessContextMenu.java
Patch:
@@ -79,9 +79,6 @@ private void createFileMenu() {
             var empty = new MenuItem("...");
             empty.setDisable(true);
             menu.getItems().add(empty);
-            InputHelper.onRight(empty, true, keyEvent -> {
-                keyEvent.consume();
-            });
         }
 
         private void createDirectoryMenu() {

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -124,6 +124,6 @@ private void simulateEmptyCell(Region r) {
         });
 
         // Use status bar as an extension of file list
-        new ContextMenuAugment<>(() -> new BrowserContextMenu(model, null)).augment(new SimpleCompStructure<>(r));
+        new ContextMenuAugment<>(mouseEvent -> mouseEvent.isSecondaryButtonDown(), null, () -> new BrowserContextMenu(model, null)).augment(new SimpleCompStructure<>(r));
     }
 }

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemComp.java
Patch:
@@ -55,7 +55,7 @@ private Region createContent() {
 
         var menuButton = new MenuButton(null, new FontIcon("mdral-folder_open"));
         new ContextMenuAugment<>(
-                        event -> event.getButton() == MouseButton.PRIMARY, () -> new BrowserContextMenu(model, null))
+                        event -> event.getButton() == MouseButton.PRIMARY, null, () -> new BrowserContextMenu(model, null))
                 .augment(new SimpleCompStructure<>(menuButton));
         menuButton.disableProperty().bind(model.getInOverview());
         menuButton.setAccessibleText("Directory options");

File: app/src/main/java/io/xpipe/app/comp/base/DropdownComp.java
Patch:
@@ -32,7 +32,7 @@ public CompStructure<Button> createBase() {
                 .toArray(MenuItem[]::new));
 
         Button button = (Button) new ButtonComp(null, () -> {})
-                .apply(new ContextMenuAugment<>(e -> true, () -> {
+                .apply(new ContextMenuAugment<>(e -> true, null, () -> {
                     return cm;
                 }))
                 .createRegion();

File: app/src/main/java/io/xpipe/app/comp/base/TileButtonComp.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.app.comp.base;
 
-import atlantafx.base.theme.Styles;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.Comp;
@@ -43,7 +42,7 @@ public TileButtonComp(String nameKey, String descriptionKey, String icon, Consum
     @Override
     public Structure createBase() {
         var bt = new Button();
-        Styles.toggleStyleClass(bt, Styles.FLAT);
+        bt.getStyleClass().add("tile-button-comp");
         bt.setOnAction(e -> {
             action.accept(e);
         });

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -97,7 +97,7 @@ protected final Region createSimple() {
                 wrapper.executeDefaultAction();
             });
         });
-        new ContextMenuAugment<>(() -> this.createContextMenu()).augment(new SimpleCompStructure<>(button));
+        new ContextMenuAugment<>(mouseEvent -> mouseEvent.isSecondaryButtonDown(), null, () -> this.createContextMenu()).augment(new SimpleCompStructure<>(button));
 
         var loading = LoadingOverlayComp.noProgress(
                 Comp.of(() -> button),
@@ -247,7 +247,7 @@ protected Comp<?> createSettingsButton() {
         settingsButton.styleClass("settings");
         settingsButton.accessibleText("More");
         settingsButton.apply(new ContextMenuAugment<>(
-                event -> event.getButton() == MouseButton.PRIMARY, () -> StoreEntryComp.this.createContextMenu()));
+                event -> event.getButton() == MouseButton.PRIMARY, null, () -> StoreEntryComp.this.createContextMenu()));
         settingsButton.apply(new FancyTooltipAugment<>("more"));
         return settingsButton;
     }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FancyTooltipAugment.java
Patch:
@@ -26,7 +26,7 @@ public void augment(S struc) {
         var tt = new Tooltip();
         var toDisplay = text.getValue();
         if (Shortcuts.getDisplayShortcut(region) != null) {
-            toDisplay = toDisplay + "\n\n(Shortcut: " + Shortcuts.getDisplayShortcut(region).getDisplayText() + ")";
+            toDisplay = toDisplay + "\n\nShortcut: " + Shortcuts.getDisplayShortcut(region).getDisplayText();
         }
         tt.textProperty().setValue(toDisplay);
         tt.setStyle("-fx-font-size: 11pt;");

File: app/src/main/java/io/xpipe/app/util/InputHelper.java
Patch:
@@ -40,7 +40,7 @@ public static void onRight(EventTarget target, boolean filter, Consumer<KeyEvent
     public static void onNavigationInput(EventTarget target, Consumer<Boolean> r) {
         target.addEventFilter(KeyEvent.KEY_PRESSED,  event -> {
             var c = event.getCode();
-            var list = List.of(KeyCode.LEFT, KeyCode.RIGHT, KeyCode.UP, KeyCode.DOWN, KeyCode.SPACE, KeyCode.TAB, KeyCode.NUMPAD2, KeyCode.NUMPAD4, KeyCode.NUMPAD6, KeyCode.NUMPAD8);
+            var list = List.of(KeyCode.LEFT, KeyCode.RIGHT, KeyCode.UP, KeyCode.DOWN, KeyCode.SPACE, KeyCode.ENTER, KeyCode.SHIFT, KeyCode.TAB, KeyCode.NUMPAD2, KeyCode.NUMPAD4, KeyCode.NUMPAD6, KeyCode.NUMPAD8);
             r.accept(list.stream().anyMatch(keyCode -> keyCode == c));
         });
         target.addEventFilter(MouseEvent.MOUSE_PRESSED, event -> {

File: app/src/main/java/io/xpipe/app/util/BooleanAnimationTimer.java
Patch:
@@ -5,13 +5,13 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-public class BooleanTimer {
+public class BooleanAnimationTimer {
 
     private final ObservableBooleanValue value;
     private final int duration;
     private final Runnable toExecute;
 
-    public BooleanTimer(ObservableBooleanValue value, int duration, Runnable toExecute) {
+    public BooleanAnimationTimer(ObservableBooleanValue value, int duration, Runnable toExecute) {
         this.value = value;
         this.duration = duration;
         this.toExecute = toExecute;

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -258,7 +258,7 @@ public void launch(Path file) throws Exception {
                 location = determineInstallation();
                 if (location.isEmpty()) {
                     throw ErrorEvent.expected(
-                            new IOException("Unable to find installation of " + toTranslatedString()));
+                            new IOException("Unable to find installation of " + toTranslatedString().getValue()));
                 }
             }
 

File: app/src/main/java/io/xpipe/app/terminal/ExternalTerminalType.java
Patch:
@@ -729,7 +729,7 @@ public void launch(LaunchConfiguration configuration) throws Exception {
             if (location.isEmpty()) {
                 location = determineInstallation();
                 if (location.isEmpty()) {
-                    throw new IOException("Unable to find installation of " + toTranslatedString());
+                    throw new IOException("Unable to find installation of " + toTranslatedString().getValue());
                 }
             }
 

File: app/src/main/java/io/xpipe/app/core/AppSid.java
Patch:
@@ -13,7 +13,7 @@ public class AppSid {
     @Getter
     private static boolean hasSetsid;
 
-    public static void check() {
+    public static void init() {
         if (OsType.getLocal().equals(OsType.WINDOWS)) {
             return;
         }

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -49,6 +49,7 @@ public void onSwitchTo() throws Throwable {
         AppPrefs.initLocal();
         AppCertutilCheck.check();
         AppAvCheck.check();
+        AppSid.init();
         LocalShell.init();
         AppShellCheck.check();
         XPipeDistributionType.init();

File: app/src/main/java/io/xpipe/app/util/BooleanTimer.java
Patch:
@@ -24,7 +24,7 @@ public void start() {
                 if (timer.get() == null) {
                     timer.set(new AnimationTimer() {
 
-                        long init =0;
+                        long init = 0;
 
                         @Override
                         public void handle(long now) {
@@ -33,7 +33,7 @@ public void handle(long now) {
                             }
 
                             var nowMs = now;
-                            if ((nowMs - init) > duration * 1000L) {
+                            if ((nowMs - init) > duration * 1_000_000L) {
                                 toExecute.run();
                                 stop();
                             }

File: app/src/main/java/io/xpipe/app/browser/BrowserContextMenu.java
Patch:
@@ -74,7 +74,7 @@ private void createMenu() {
             for (BrowserAction a : all) {
                 var used = resolveIfNeeded(a, selected);
                 if (a instanceof LeafAction la) {
-                    getItems().add(la.toItem(model, used, s -> s));
+                    getItems().add(la.toMenuItem(model, used, s -> s));
                 }
 
                 if (a instanceof BranchAction la) {
@@ -84,7 +84,7 @@ private void createMenu() {
                         if (!sub.isApplicable(model, subUsed)) {
                             continue;
                         }
-                        m.getItems().add(sub.toItem(model, subUsed, s -> s));
+                        m.getItems().add(sub.toMenuItem(model, subUsed, s -> s));
                     }
                     var graphic = a.getIcon(model, used);
                     if (graphic != null) {

File: app/src/main/java/io/xpipe/app/browser/action/LeafAction.java
Patch:
@@ -61,7 +61,7 @@ default Button toButton(OpenFileSystemModel model, List<BrowserEntry> selected)
         return b;
     }
 
-    default MenuItem toItem(OpenFileSystemModel model, List<BrowserEntry> selected, UnaryOperator<String> nameFunc) {
+    default MenuItem toMenuItem(OpenFileSystemModel model, List<BrowserEntry> selected, UnaryOperator<String> nameFunc) {
         var name = nameFunc.apply(getName(model, selected));
         var mi = new MenuItem(name);
         mi.setOnAction(event -> {

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListComp.java
Patch:
@@ -498,7 +498,7 @@ public FilenameCell(Property<BrowserEntry> editing) {
             setAccessibleRole(AccessibleRole.TEXT);
 
             var textField = new LazyTextFieldComp(text).minWidth(USE_PREF_SIZE).createStructure().get();
-            var quickAccess = new BrowserQuickAccessButtonComp(() -> getTableRow().getItem().getRawFileEntry(), fileList.getFileSystemModel(), fileEntry -> {})
+            var quickAccess = new BrowserQuickAccessButtonComp(() -> getTableRow().getItem(), fileList.getFileSystemModel())
                     .hide(Bindings.createBooleanBinding(() -> {
                 var notDir = getTableRow().getItem().getRawFileEntry().getKind() != FileKind.DIRECTORY;
                 var isParentLink = getTableRow()

File: app/src/main/java/io/xpipe/app/util/ShellTemp.java
Patch:
@@ -26,7 +26,7 @@ public static Path getLocalTempDataDirectory(String sub) {
             try {
                 // We did not set this in earlier versions. If we are running as a different user, it might fail
                 Files.setPosixFilePermissions(temp, PosixFilePermissions.fromString("rwxrwxrwx"));
-            } catch (IOException e) {
+            } catch (Exception e) {
                 ErrorEvent.fromThrowable(e).omit().expected().handle();
             }
         }

File: app/src/main/java/io/xpipe/app/core/check/AppFontLoadingCheck.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.core.check;
 
 import io.xpipe.app.core.mode.OperationMode;
+import io.xpipe.app.issue.ErrorAction;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.LogErrorHandler;
 import javafx.scene.text.Font;
@@ -16,6 +17,7 @@ public static void check() {
             // We can't use the normal error handling facility
             // as the platform reports as working but opening windows still does not work
             new LogErrorHandler().handle(event);
+            ErrorAction.ignore().handle(event);
             OperationMode.halt(1);
         }
     }

File: app/src/main/java/io/xpipe/app/util/ShellTemp.java
Patch:
@@ -21,9 +21,7 @@ public static Path getLocalTempDataDirectory(String sub) {
         if (OsType.getLocal().equals(OsType.LINUX)) {
             var user = System.getenv("USER");
             temp = temp.resolve(user != null ? user : "user");
-        }
 
-        if (OsType.getLocal() != OsType.WINDOWS) {
             try {
                 // We did not set this in earlier versions. If we are running as a different user, it might fail
                 Files.setPosixFilePermissions(temp, PosixFilePermissions.fromString("rwxrwxrwx"));

File: app/src/main/java/io/xpipe/app/prefs/AppearanceCategory.java
Patch:
@@ -23,7 +23,7 @@ protected Comp<?> create() {
                 .addTitle("uiOptions")
                 .sub(new OptionsBuilder()
                         .nameAndDescription("theme")
-                        .addComp(ChoiceComp.ofTranslatable(prefs.theme, AppTheme.Theme.ALL, false), prefs.theme)
+                        .addComp(ChoiceComp.ofTranslatable(prefs.theme, AppTheme.Theme.ALL, false).styleClass("theme-switcher"), prefs.theme)
                         .nameAndDescription("performanceMode")
                         .addToggle(prefs.performanceMode)
                         .nameAndDescription("uiScale")

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -199,7 +199,7 @@ public void executeDefaultAction() throws Exception {
         }
 
         var found = getDefaultActionProvider().getValue();
-        entry.updateLastUsed();
+        entry.notifyUpdate(true, false);
         if (found != null) {
             found.createAction(entry.ref()).execute();
         } else {

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -174,7 +174,7 @@ public static void showCreation(DataStore base, DataStoreProvider.CreationCatego
                 (e, validated) -> {
                     try {
                         DataStorage.get().addStoreEntryIfNotPresent(e);
-                        if (e.getProvider().shouldHaveChildren()
+                        if (validated && e.getProvider().shouldHaveChildren()
                                 && AppPrefs.get()
                                         .openConnectionSearchWindowOnConnectionCreation()
                                         .get()) {

File: app/src/main/java/io/xpipe/app/core/AppBundledFonts.java
Patch:
@@ -36,10 +36,10 @@ private static boolean hasFonts() {
 
     private static boolean canLoadFonts() {
         try {
-            // This can fail if the found fonts can somehow not be loaded
+            // This can fail if the found system fonts can somehow not be loaded
             Font.getDefault();
             return true;
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return false;
         }
     }

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -57,7 +57,7 @@ public static void open(DataStoreEntry entry, String title, String directory, Pr
             type.launch(config);
             latch.await();
         } catch (Exception ex) {
-            ErrorEvent.expected(new IOException(
+            throw ErrorEvent.expected(new IOException(
                     "Unable to launch terminal " + type.toTranslatedString().getValue() + ": " + ex.getMessage()
                             + ".\nMaybe try to use a different terminal in the settings.",
                     ex));

File: app/src/main/java/io/xpipe/app/util/SecretManager.java
Patch:
@@ -57,7 +57,7 @@ public static SecretValue retrieve(SecretRetrievalStrategy strategy, String prom
 
         var uuid = UUID.randomUUID();
         var p = expectAskpass(uuid, secretId, List.of(strategy.query()), SecretQuery.prompt(false), CountDown.of());
-        p.advance(sub);
+        p.preAdvance(sub);
         var r = p.process(prompt);
         completeRequest(uuid);
         return r;

File: app/src/main/java/io/xpipe/app/util/SecretQueryProgress.java
Patch:
@@ -36,10 +36,10 @@ public SecretQueryProgress(
         this.seenPrompts = new ArrayList<>();
     }
 
-    public void advance(int count) {
+    public void preAdvance(int count) {
         for (int i = 0; i < count; i++) {
-            seenPrompts.add(null);
-            suppliers.add(SecretQuery.prompt(false));
+            seenPrompts.addFirst(null);
+            suppliers.addFirst(SecretQuery.prompt(false));
         }
     }
 

File: app/src/main/java/io/xpipe/app/util/ApplicationHelper.java
Patch:
@@ -37,11 +37,11 @@ public static void executeLocalApplication(CommandBuilder b, boolean detach) thr
     }
 
     public static String createDetachCommand(ShellControl pc, String command) {
-        if (pc.getShellDialect().equals(ShellDialects.POWERSHELL)) {
+        if (ShellDialects.isPowershell(pc)) {
             var script = ScriptHelper.createExecScript(pc, command);
             return String.format(
-                    "Start-Process -FilePath powershell.exe -ArgumentList \"-NoProfile\", \"-File\", %s",
-                    ShellDialects.POWERSHELL.fileArgument(script));
+                    "Start-Process -FilePath %s -ArgumentList \"-NoProfile\", \"-File\", %s",
+                    pc.getShellDialect().getExecutableName(), pc.getShellDialect().fileArgument(script));
         }
 
         if (pc.getOsType().equals(OsType.WINDOWS)) {

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -154,7 +154,7 @@ public static String createTerminalPreparedAskpassScript(
         var scriptType = parent.getShellDialect();
 
         // Fix for powershell as there are permission issues when executing a powershell askpass script
-        if (forceExecutable && parent.getShellDialect().equals(ShellDialects.POWERSHELL)) {
+        if (forceExecutable && ShellDialects.isPowershell(parent)) {
             scriptType = parent.getOsType().equals(OsType.WINDOWS) ? ShellDialects.CMD : ShellDialects.SH;
         }
 

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -124,7 +124,7 @@ public static String createRemoteAskpassScript(ShellControl parent, UUID request
         var type = parent.getShellDialect();
 
         // Fix for powershell as there are permission issues when executing a powershell askpass script
-        if (parent.getShellDialect().equals(ShellDialects.POWERSHELL)) {
+        if (ShellDialects.isPowershell(parent)) {
             type = parent.getOsType().equals(OsType.WINDOWS) ? ShellDialects.CMD : ShellDialects.SH;
         }
 

File: app/src/main/java/io/xpipe/app/browser/action/MultiExecuteAction.java
Patch:
@@ -41,7 +41,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) {
                     @Override
                     public String getName(OpenFileSystemModel model, List<BrowserEntry> entries) {
                         var t = AppPrefs.get().terminalType().getValue();
-                        return "in " + (t != null ? t.toTranslatedString() : "?");
+                        return "in " + (t != null ? t.toTranslatedString().getValue() : "?");
                     }
 
                     @Override

File: app/src/main/java/io/xpipe/app/comp/store/StandardStoreEntryComp.java
Patch:
@@ -33,6 +33,7 @@ protected Region createContent() {
         var nameCC = new ColumnConstraints();
         nameCC.setMinWidth(100);
         nameCC.setHgrow(Priority.ALWAYS);
+        nameCC.setPrefWidth(100);
         grid.getColumnConstraints().addAll(nameCC);
 
         grid.add(createInformation(), 2, 0, 1, 2);

File: core/src/main/java/io/xpipe/core/process/AskpassSetup.java
Patch:
@@ -1,3 +0,0 @@
-package io.xpipe.core.process;
-
-public class AskpassSetup {}

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -16,7 +16,9 @@
 
 public interface ShellControl extends ProcessControl {
 
-    UUID getElevationSecretId();
+    ElevationHandler getElevationHandler();
+
+    void setElevationHandler(ElevationHandler ref);
 
     List<UUID> getExitUuids();
 

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -294,7 +294,7 @@ public void updateEntry(DataStoreEntry entry, DataStoreEntry newEntry) {
         var newParent = DataStorage.get().getDefaultDisplayParent(newEntry);
         var sameParent = Objects.equals(oldParent, newParent);
 
-        newEntry.finalizeEntry();
+        entry.finalizeEntry();
 
         var children = getDeepStoreChildren(entry);
         if (!sameParent) {

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -8,7 +8,6 @@
 import io.xpipe.app.fxcomps.augment.ContextMenuAugment;
 import io.xpipe.app.fxcomps.impl.LabelComp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
-import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.util.HumanReadableFormat;
 import javafx.beans.binding.Bindings;
 import javafx.scene.control.ToolBar;
@@ -58,7 +57,7 @@ private Comp<?> createProgressStatus() {
                 return transferred + " / " + all + name;
             }
         });
-        var progressComp = new LabelComp(text);
+        var progressComp = new LabelComp(text).styleClass("progress");
         return progressComp;
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreQuickAccessButtonComp.java
Patch:
@@ -18,13 +18,14 @@ public class StoreQuickAccessButtonComp extends SimpleComp {
     private final StoreSection section;
     private final Consumer<StoreEntryWrapper> action;
 
-    public StoreQuickAccessButtonComp(StoreSection section, Consumer<StoreEntryWrapper> action) {this.section = section;
+    public StoreQuickAccessButtonComp(StoreSection section, Consumer<StoreEntryWrapper> action) {
+        this.section = section;
         this.action = action;
     }
 
     @Override
     protected Region createSimple() {
-        var button = new IconButtonComp("mdi2p-play-speed");
+        var button = new IconButtonComp("mdi2c-chevron-double-right");
         button.apply(struc -> {
             struc.get().setOnAction(event -> {
                 showMenu(struc.get());

File: app/src/main/java/io/xpipe/app/core/check/AppCertutilCheck.java
Patch:
@@ -9,7 +9,7 @@ public class AppCertutilCheck {
 
     private static boolean getResult() {
         var fc = new ProcessBuilder(System.getenv("WINDIR") + "\\System32\\certutil")
-                .redirectError(ProcessBuilder.Redirect.DISCARD);
+                .redirectErrorStream(true);
         try {
             var proc = fc.start();
             var out = new String(proc.getInputStream().readAllBytes());

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -712,9 +712,9 @@ public void launch(LaunchConfiguration configuration) throws Exception {
             WEZ_WINDOWS,
             WINDOWS_TERMINAL_PREVIEW,
             WINDOWS_TERMINAL,
+            CMD,
             PWSH,
-            POWERSHELL,
-            CMD);
+            POWERSHELL);
     List<ExternalTerminalType> LINUX_TERMINALS = List.of(
             WEZ_LINUX,
             KONSOLE,

File: app/src/main/java/io/xpipe/app/browser/action/BrowserAction.java
Patch:
@@ -31,7 +31,7 @@ static LeafAction byId(String id, OpenFileSystemModel model, List<BrowserEntry>
                 .orElseThrow();
     }
 
-    default void init(OpenFileSystemModel model) {}
+    default void init(OpenFileSystemModel model) throws Exception {}
 
     default String getProFeatureId() {
         return null;

File: app/src/main/java/io/xpipe/app/core/AppSocketServer.java
Patch:
@@ -239,7 +239,8 @@ private void performExchanges(Socket clientSocket, int id) {
             }
         } catch (SocketException ex) {
             // Omit it, as this might happen often
-            ErrorEvent.fromThrowable(ex).omitted(true).build().handle();
+            // This is expected if you kill a running xpipe CLI process
+            ErrorEvent.fromThrowable(ex).expected().omit().build().handle();
         } catch (Throwable ex) {
             ErrorEvent.fromThrowable(ex).build().handle();
         } finally {

File: app/src/main/java/io/xpipe/app/ext/ActionProvider.java
Patch:
@@ -26,7 +26,7 @@ static void initProviders() {
         }
     }
 
-    default void init() {}
+    default void init() throws Exception {}
 
     default String getId() {
         return null;

File: app/src/main/java/io/xpipe/app/issue/GuiErrorHandler.java
Patch:
@@ -36,6 +36,7 @@ private void handleGui(ErrorEvent event) {
         if (lex.isPresent()) {
             LicenseProvider.get().showLicenseAlert(lex.get());
             event.setShouldSendDiagnostics(true);
+            event.clearAttachments();
             ErrorAction.ignore().handle(event);
         } else {
             ErrorHandlerComp.showAndTryWait(event, true);

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -141,7 +141,7 @@ public boolean supportsTabs() {
         }
 
         @Override
-        protected CommandBuilder toCommand(LaunchConfiguration configuration) {
+        protected CommandBuilder toCommand(LaunchConfiguration configuration) throws Exception {
             // A weird behavior in Windows Terminal causes the trailing
             // backslash of a filepath to escape the closing quote in the title argument
             // So just remove that slash
@@ -894,6 +894,6 @@ public void launch(LaunchConfiguration configuration) throws Exception {
             launch(configuration.getColoredTitle(), args);
         }
 
-        protected abstract CommandBuilder toCommand(LaunchConfiguration configuration);
+        protected abstract CommandBuilder toCommand(LaunchConfiguration configuration) throws Exception;
     }
 }

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -133,7 +133,9 @@ protected void finish() {
                         }
                     });
                 } finally {
-                    shellControl.close();
+                    if (shellControl != null) {
+                        shellControl.close();
+                    }
                     shellControl = null;
                 }
             });

File: app/src/main/java/io/xpipe/app/util/ShellTemp.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.app.util;
 
+import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.core.process.OsType;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.store.FileNames;
@@ -35,12 +36,12 @@ public static void checkTempDirectory(ShellControl proc) throws Exception {
 
         var systemTemp = proc.getOsType().getTempDirectory(proc);
         if (!d.directoryExists(proc, systemTemp).executeAndCheck() || !checkDirectoryPermissions(proc, systemTemp)) {
-            throw new IOException("No permissions to access %s".formatted(systemTemp));
+            throw ErrorEvent.expected(new IOException("No permissions to access %s".formatted(systemTemp)));
         }
 
         var home = proc.getOsType().getHomeDirectory(proc);
         if (!d.directoryExists(proc, home).executeAndCheck() || !checkDirectoryPermissions(proc, home)) {
-            throw new IOException("No permissions to access %s".formatted(home));
+            throw ErrorEvent.expected(new IOException("No permissions to access %s".formatted(home)));
         }
 
         // Always delete legacy directory and do not care whether it partially fails

File: core/src/main/java/io/xpipe/core/store/FileNames.java
Patch:
@@ -137,7 +137,7 @@ public static boolean startsWith(String file, String start) {
     }
 
     public static String relativize(String from, String to) {
-        return normalize(to).substring(normalize(from).length());
+        return normalize(to).substring(FileNames.toDirectory(normalize(from)).length());
     }
 
     public static String normalize(String file) {

File: app/src/main/java/io/xpipe/app/browser/BrowserTransferModel.java
Patch:
@@ -152,14 +152,13 @@ public Item(
             this.name = name;
             this.fileEntry = fileEntry;
             this.localFile = localFile;
-            this.progress =
-                    new SimpleObjectProperty<>(BrowserTransferProgress.empty(fileEntry.getName(), fileEntry.getSize()));
+            this.progress = new SimpleObjectProperty<>();
         }
 
         public ObservableBooleanValue downloadFinished() {
             return Bindings.createBooleanBinding(
                     () -> {
-                        return progress.getValue().done();
+                        return progress.getValue() != null && progress.getValue().done();
                     },
                     progress);
         }

File: app/src/main/java/io/xpipe/app/browser/FileSystemHelper.java
Patch:
@@ -335,6 +335,7 @@ private static void dropFileAcrossFileSystems(
                     throw ex;
                 }
 
+                progress.accept(BrowserTransferProgress.finished(sourceFile.getName(), transferred.get()));
                 Exception exception = null;
                 try {
                     inputStream.close();

File: app/src/main/java/io/xpipe/app/util/SecretRetrievalStrategy.java
Patch:
@@ -114,7 +114,7 @@ public SecretQuery query() {
                 public SecretQueryResult query(String prompt) {
                     var cmd = AppPrefs.get().passwordManagerString(key);
                     if (cmd == null) {
-                        return null;
+                        return new SecretQueryResult(null, true);
                     }
 
                     try (var cc = new LocalStore().control().command(cmd).start()) {

File: app/src/main/java/io/xpipe/app/core/AppFileWatcher.java
Patch:
@@ -52,7 +52,7 @@ private void startWatcher() {
         try {
             watchService = FileSystems.getDefault().newWatchService();
         } catch (IOException e) {
-            ErrorEvent.fromThrowable(e).handle();
+            ErrorEvent.fromThrowable("Unable to initialize file watcher. Watching and updating files in the file browser will be unavailable.", e).expected().handle();
             return;
         }
 

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -315,7 +315,7 @@ public void createDirectoryAsync(String name) {
                 startIfNeeded();
                 var abs = FileNames.join(getCurrentDirectory().getPath(), name);
                 if (fileSystem.directoryExists(abs)) {
-                    throw ErrorEvent.unreportable(
+                    throw ErrorEvent.expected(
                             new IllegalStateException(String.format("Directory %s already exists", abs)));
                 }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -276,7 +276,7 @@ protected void finish() {
                 commit();
             } catch (Throwable ex) {
                 if (ex instanceof ValidationException) {
-                    ErrorEvent.unreportable(ex);
+                    ErrorEvent.expected(ex);
                     skippable.set(false);
                 } else {
                     skippable.set(true);

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -115,7 +115,7 @@ public boolean isAvailable() {
         protected void launch(String title, String args) throws Exception {
             try (ShellControl pc = LocalShell.getShell()) {
                 if (!ApplicationHelper.isInPath(pc, executable)) {
-                    throw ErrorEvent.unreportable(
+                    throw ErrorEvent.expected(
                             new IOException(
                                     "Executable " + executable
                                             + " not found in PATH. Either add it to the PATH and refresh the environment by restarting XPipe, or specify an absolute executable path using the custom terminal setting."));

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -101,7 +101,7 @@ protected Optional<Path> determineInstallation() {
         public void launch(Path file) throws Exception {
             var customCommand = AppPrefs.get().customEditorCommand().getValue();
             if (customCommand == null || customCommand.isBlank()) {
-                throw ErrorEvent.unreportable(new IllegalStateException("No custom editor command specified"));
+                throw ErrorEvent.expected(new IllegalStateException("No custom editor command specified"));
             }
 
             var format =
@@ -257,7 +257,7 @@ public void launch(Path file) throws Exception {
             if (location.isEmpty()) {
                 location = determineInstallation();
                 if (location.isEmpty()) {
-                    throw ErrorEvent.unreportable(
+                    throw ErrorEvent.expected(
                             new IOException("Unable to find installation of " + toTranslatedString()));
                 }
             }

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -830,7 +830,7 @@ public boolean supportsTabs() {
         public void launch(LaunchConfiguration configuration) throws Exception {
             var custom = AppPrefs.get().customTerminalCommand().getValue();
             if (custom == null || custom.isBlank()) {
-                throw ErrorEvent.unreportable(new IllegalStateException("No custom terminal command specified"));
+                throw ErrorEvent.expected(new IllegalStateException("No custom terminal command specified"));
             }
 
             var format = custom.toLowerCase(Locale.ROOT).contains("$cmd") ? custom : custom + " $CMD";

File: app/src/main/java/io/xpipe/app/util/ApplicationHelper.java
Patch:
@@ -70,15 +70,15 @@ public static void checkIsInPath(
             ShellControl processControl, String executable, String displayName, DataStoreEntry connection)
             throws Exception {
         if (!isInPath(processControl, executable)) {
-            throw ErrorEvent.unreportable(new IOException(displayName + " executable " + executable
+            throw ErrorEvent.expected(new IOException(displayName + " executable " + executable
                     + " not found in PATH" + (connection != null ? " on system " + connection.getName() : "")));
         }
     }
 
     public static void isSupported(FailableSupplier<Boolean> supplier, String displayName, DataStoreEntry connection)
             throws Exception {
         if (!supplier.get()) {
-            throw ErrorEvent.unreportable(new IOException(displayName + " is not supported"
+            throw ErrorEvent.expected(new IOException(displayName + " is not supported"
                     + (connection != null ? " on system " + connection.getName() : "")));
         }
     }

File: app/src/main/java/io/xpipe/app/util/TerminalLauncher.java
Patch:
@@ -18,7 +18,7 @@ public class TerminalLauncher {
     public static void openDirect(String title, ShellControl shellControl, String command) throws Exception {
         var type = AppPrefs.get().terminalType().getValue();
         if (type == null) {
-            throw ErrorEvent.unreportable(new IllegalStateException(AppI18n.get("noTerminalSet")));
+            throw ErrorEvent.expected(new IllegalStateException(AppI18n.get("noTerminalSet")));
         }
         var script = ScriptHelper.createLocalExecScript(command);
         var config = new ExternalTerminalType.LaunchConfiguration(
@@ -33,7 +33,7 @@ public static void open(String title, ProcessControl cc) throws Exception {
     public static void open(DataStoreEntry entry, String title, String directory, ProcessControl cc) throws Exception {
         var type = AppPrefs.get().terminalType().getValue();
         if (type == null) {
-            throw ErrorEvent.unreportable(new IllegalStateException(AppI18n.get("noTerminalSet")));
+            throw ErrorEvent.expected(new IllegalStateException(AppI18n.get("noTerminalSet")));
         }
 
         var color = entry != null ? DataStorage.get().getRootForEntry(entry).getColor() : null;
@@ -56,7 +56,7 @@ public static void open(DataStoreEntry entry, String title, String directory, Pr
             type.launch(config);
             latch.await();
         } catch (Exception ex) {
-            ErrorEvent.unreportable(new IOException(
+            ErrorEvent.expected(new IOException(
                     "Unable to launch terminal " + type.toTranslatedString().getValue() + ": " + ex.getMessage()
                             + ".\nMaybe try to use a different terminal in the settings.",
                     ex));

File: app/src/main/java/io/xpipe/app/core/AppLogs.java
Patch:
@@ -119,7 +119,9 @@ public static void init() {
                     FileUtils.forceDelete(path.toFile());
                 }
             } catch (Exception ex) {
-                ErrorEvent.fromThrowable(ex).handle();
+                // It can happen that another instance is running that is locking a log file
+                // Since we initialized before checking for another instance, this might fail
+                ErrorEvent.fromThrowable(ex).expected().omit().handle();
             }
         }
 

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -9,6 +9,7 @@
 import javafx.scene.control.ButtonBar;
 import javafx.scene.control.ButtonType;
 import javafx.stage.Modality;
+import javafx.stage.Stage;
 
 public class UpdateChangelogAlert {
 
@@ -48,6 +49,7 @@ public static void showIfNeeded() {
                     alert.getDialogPane().setContent(markdown);
 
                     alert.getButtonTypes().add(new ButtonType(AppI18n.get("gotIt"), ButtonBar.ButtonData.OK_DONE));
+                    ((Stage) alert.getDialogPane().getScene().getWindow()).setAlwaysOnTop(true);
                 },
                 r -> r.filter(b -> b.getButtonData().isDefaultButton()).ifPresent(t -> {}));
     }

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -93,8 +93,7 @@ public class AppPrefs {
             map(new SimpleBooleanProperty(true), "openConnectionSearchWindowOnConnectionCreation", Boolean.class);
     final ObjectProperty<Path> storageDirectory =
             map(new SimpleObjectProperty<>(DEFAULT_STORAGE_DIR), "storageDirectory", Path.class);
-    private final AppPrefsStorageHandler vaultStorageHandler =
-            new AppPrefsStorageHandler(storageDirectory().getValue().resolve("preferences.json"));
+    private AppPrefsStorageHandler vaultStorageHandler;
     final BooleanProperty developerMode = map(new SimpleBooleanProperty(false), "developerMode", Boolean.class);
     final BooleanProperty developerDisableUpdateVersionCheck =
             map(new SimpleBooleanProperty(false), "developerDisableUpdateVersionCheck", Boolean.class);
@@ -428,6 +427,8 @@ private void loadLocal() {
 
             loadValue(globalStorageHandler, value);
         }
+
+        vaultStorageHandler = new AppPrefsStorageHandler(storageDirectory().getValue().resolve("preferences.json"));
     }
 
     private void loadSharedRemote() {

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -138,7 +138,7 @@ public void launch(Path file) throws Exception {
 
     ExternalEditorType VSCODE_MACOS = new MacOsEditor("app.vscode", "Visual Studio Code");
 
-    ExternalEditorType VSCODIUM_MACOS = new MacOsEditor("app.vscodium", "Visual Studio Code");
+    ExternalEditorType VSCODIUM_MACOS = new MacOsEditor("app.vscodium", "VSCodium");
 
     ExternalEditorType CUSTOM = new ExternalEditorType() {
 

File: app/src/main/java/io/xpipe/app/browser/BrowserModel.java
Patch:
@@ -8,6 +8,7 @@
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.store.FileNames;
 import io.xpipe.core.store.FileSystemStore;
+import io.xpipe.core.util.FailableFunction;
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleBooleanProperty;
@@ -20,7 +21,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Consumer;
-import java.util.function.Function;
 
 @Getter
 public class BrowserModel {
@@ -116,7 +116,7 @@ private void closeFileSystemSync(OpenFileSystemModel open) {
         }
     }
 
-    public void openFileSystemAsync(DataStoreEntryRef<? extends FileSystemStore> store, Function<OpenFileSystemModel, String> path, BooleanProperty externalBusy) {
+    public void openFileSystemAsync(DataStoreEntryRef<? extends FileSystemStore> store, FailableFunction<OpenFileSystemModel, String, Exception> path, BooleanProperty externalBusy) {
         if (store == null) {
             return;
         }

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -48,6 +48,8 @@ public void handle(ErrorEvent ee) {
                     options.setTag("arch", System.getProperty("os.arch"));
                     options.setDist(XPipeDistributionType.get().getId());
                     options.setTag("staging", String.valueOf(AppProperties.get().isStaging()));
+                    options.setCacheDirPath(AppProperties.get().getDataDir().resolve("cache").toString());
+                    options.setAttachThreads(false);
                 });
             }
             init = true;

File: core/src/main/java/io/xpipe/core/store/FixedChildStore.java
Patch:
@@ -1,6 +1,8 @@
 package io.xpipe.core.store;
 
+import java.util.OptionalInt;
+
 public interface FixedChildStore extends DataStore {
 
-    int getFixedId();
+    OptionalInt getFixedId();
 }

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -303,11 +303,12 @@ && getStoreCategoryIfPresent(dataStoreCategory.getParentCategory())
     }
 
     public void save(boolean dispose) {
-        if (!loaded || disposed) {
+        if (!busyIo.tryLock()) {
             return;
         }
 
-        if (!busyIo.tryLock()) {
+        if (!loaded || disposed) {
+            busyIo.unlock();
             return;
         }
 

File: app/src/main/java/io/xpipe/app/comp/base/OsLogoComp.java
Patch:
@@ -56,7 +56,7 @@ protected Region createSimple() {
     }
 
     private static final Map<String, String> ICONS = new HashMap<>();
-    private static final String LINUX_DEFAULT = "linux.svg";
+    private static final String LINUX_DEFAULT = "linux-24.png";
 
     private String getImage(String name) {
         if (name == null) {

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationComp.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.function.Predicate;
 
 @FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)
-public class StoreCreationComo extends MultiStepComp.Step<CompStructure<?>> {
+public class StoreCreationComp extends MultiStepComp.Step<CompStructure<?>> {
 
     MultiStepComp parent;
     Property<DataStoreProvider> provider;
@@ -57,7 +57,7 @@ public class StoreCreationComo extends MultiStepComp.Step<CompStructure<?>> {
     DataStoreEntry existingEntry;
     boolean staticDisplay;
 
-    public StoreCreationComo(
+    public StoreCreationComp(
             MultiStepComp parent,
             Property<DataStoreProvider> provider,
             Property<DataStore> store,
@@ -186,7 +186,7 @@ private static void show(
                     window -> {
                         return new MultiStepComp() {
 
-                            private final StoreCreationComo creator = new StoreCreationComo(
+                            private final StoreCreationComp creator = new StoreCreationComp(
                                     this, prop, store, filter, initialName, existingEntry, staticDisplay);
 
                             @Override

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationMenu.java
Patch:
@@ -50,7 +50,7 @@ private static MenuItem category(String name, String graphic, DataStoreProvider.
             item.setGraphic(new FontIcon(graphic));
             item.textProperty().bind(AppI18n.observable(name));
             item.setOnAction(event -> {
-                StoreCreationComo.showCreation(defaultProvider != null ? DataStoreProviders.byName(defaultProvider).orElseThrow() : null,
+                StoreCreationComp.showCreation(defaultProvider != null ? DataStoreProviders.byName(defaultProvider).orElseThrow() : null,
                         v -> category.equals(v.getCreationCategory()));
                 event.consume();
             });
@@ -65,15 +65,15 @@ private static MenuItem category(String name, String graphic, DataStoreProvider.
                 return;
             }
 
-            StoreCreationComo.showCreation(defaultProvider != null ? DataStoreProviders.byName(defaultProvider).orElseThrow() : null,
+            StoreCreationComp.showCreation(defaultProvider != null ? DataStoreProviders.byName(defaultProvider).orElseThrow() : null,
                     v -> category.equals(v.getCreationCategory()));
             event.consume();
         });
         sub.forEach(dataStoreProvider -> {
             var item = new MenuItem(dataStoreProvider.getDisplayName());
             item.setGraphic(PrettyImageHelper.ofFixedSmallSquare(dataStoreProvider.getDisplayIconFileName(null)).createRegion());
             item.setOnAction(event -> {
-                StoreCreationComo.showCreation(dataStoreProvider,
+                StoreCreationComp.showCreation(dataStoreProvider,
                         v -> category.equals(v.getCreationCategory()));
                 event.consume();
             });

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -73,7 +73,7 @@ public boolean isInStorage() {
     }
 
     public void editDialog() {
-        StoreCreationComo.showEdit(entry);
+        StoreCreationComp.showEdit(entry);
     }
 
     public void delete() {

File: ext/base/src/main/java/io/xpipe/ext/base/action/EditStoreAction.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.ext.base.action;
 
-import io.xpipe.app.comp.store.StoreCreationComo;
+import io.xpipe.app.comp.store.StoreCreationComp;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStoreEntry;
@@ -23,7 +23,7 @@ public boolean requiresJavaFXPlatform() {
 
         @Override
         public void execute() {
-            StoreCreationComo.showEdit(store);
+            StoreCreationComp.showEdit(store);
         }
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/action/XPipeUrlAction.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.ext.base.action;
 
 import io.xpipe.app.comp.store.StoreViewState;
-import io.xpipe.app.comp.store.StoreCreationComo;
+import io.xpipe.app.comp.store.StoreCreationComp;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;
@@ -75,7 +75,7 @@ public void execute() {
             }
 
             var entry = DataStoreEntry.createNew(UUID.randomUUID(), StoreViewState.get().getActiveCategory().getValue().getCategory().getUuid(), "", store);
-            StoreCreationComo.showEdit(entry);
+            StoreCreationComp.showEdit(entry);
         }
     }
 

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -181,6 +181,7 @@ private static void fillScope(ErrorEvent ee, Scope s) {
         s.setTag("omitted", Boolean.toString(ee.isOmitted()));
         s.setTag("diagnostics", Boolean.toString(ee.isShouldSendDiagnostics()));
         s.setTag("logs", Boolean.toString(ee.isShouldSendDiagnostics() && !ee.getAttachments().isEmpty()));
+        s.setTag("inShutdown", Boolean.toString(OperationMode.isInShutdown()));
 
         var exMessage = ee.getThrowable() != null ? ee.getThrowable().getMessage() : null;
         if (ee.getDescription() != null && !ee.getDescription().equals(exMessage) && ee.isShouldSendDiagnostics()) {

File: app/src/main/java/io/xpipe/app/storage/ImpersistentStorage.java
Patch:
@@ -18,7 +18,7 @@ public boolean supportsSharing() {
     }
 
     @Override
-    public void save() {
+    public void save(boolean dispose) {
         var storesDir = getStoresDir();
 
         TrackEvent.info("Storage persistence is disabled. Deleting storage contents ...");

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -27,10 +27,10 @@ public enum PlatformState {
 
     public static void teardown() {
         PlatformThread.runLaterIfNeededBlocking(() -> {
-            // Fix to preserve clipboard contents after shutdown
-            var string = Clipboard.getSystemClipboard().getString();
-            var s = new StringSelection(string);
             try {
+                // Fix to preserve clipboard contents after shutdown
+                var string = Clipboard.getSystemClipboard().getString();
+                var s = new StringSelection(string);
                 Toolkit.getDefaultToolkit().getSystemClipboard().setContents(s, s);
             } catch (IllegalStateException ignored) {
             }

File: ext/base/src/main/java/io/xpipe/ext/base/SelfReferentialStore.java
Patch:
@@ -9,7 +9,9 @@
 public interface SelfReferentialStore extends DataStore {
 
     default DataStoreEntry getSelfEntry() {
-        return DataStorage.get().getStoreEntries().stream().filter(dataStoreEntry -> dataStoreEntry.getStore() == this).findFirst().orElseGet(() -> {
+        return DataStorage.get().getStoreEntryIfPresent(this).or(() -> {
+            return DataStorage.get().getStoreEntryInProgressIfPresent(this);
+        }).orElseGet(() -> {
             return DataStoreEntry.createNew(UUID.randomUUID(),DataStorage.DEFAULT_CATEGORY_UUID, "Invalid", this);
         });
     }

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -100,6 +100,7 @@ private static void setup(String[] args) {
             AppUserDirectoryCheck.check();
             AppTempCheck.check();
             AppLogs.init();
+            AppDebugModeNotice.printIfNeeded();
             AppProperties.logArguments(args);
             AppProperties.logSystemProperties();
             AppProperties.logPassedProperties();

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -26,6 +26,8 @@ enum TerminalExitMode {
         CLOSE
     }
 
+    void setSensitive();
+
     CommandControl withExceptionConverter(ExceptionConverter converter);
 
     CommandControl withErrorFormatter(Function<String, String> formatter);

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -69,10 +69,11 @@ private static Optional<Throwable> initPlatform() {
         try {
             // Weird fix to ensure that macOS quit operation works while in tray.
             // Maybe related to https://bugs.openjdk.org/browse/JDK-8318129 as it prints the same error if not called
-            // The headless is not needed though but still done
+            // The headless check is not needed though but still done
             GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
         } catch (HeadlessException e) {
             TrackEvent.warn(e.getMessage());
+            PlatformState.setCurrent(PlatformState.EXITED);
             return Optional.of(e);
         }
 

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -180,7 +180,7 @@ private static void fillScope(ErrorEvent ee, Scope s) {
         s.setTag("terminal", Boolean.toString(ee.isTerminal()));
         s.setTag("omitted", Boolean.toString(ee.isOmitted()));
         s.setTag("diagnostics", Boolean.toString(ee.isShouldSendDiagnostics()));
-        s.setTag("logs", Boolean.toString(!ee.getAttachments().isEmpty()));
+        s.setTag("logs", Boolean.toString(ee.isShouldSendDiagnostics() && !ee.getAttachments().isEmpty()));
 
         var exMessage = ee.getThrowable() != null ? ee.getThrowable().getMessage() : null;
         if (ee.getDescription() != null && !ee.getDescription().equals(exMessage) && ee.isShouldSendDiagnostics()) {

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionMiniComp.java
Patch:
@@ -103,8 +103,7 @@ public CompStructure<VBox> createBase() {
                 section.getAllChildren()) : section.getShownChildren();
         var content = new ListBoxViewComp<>(listSections, section.getAllChildren(), (StoreSection e) -> {
             return StoreSectionMiniComp.builder().section(e).augment(this.augment).build();
-        }).withLimit(100)
-                .hgrow();
+        }).withLimit(100).minHeight(0).hgrow();
 
         list.add(new HorizontalComp(List.of(content))
                          .styleClass("content")

File: app/src/main/java/io/xpipe/app/browser/BrowserModel.java
Patch:
@@ -54,9 +54,9 @@ public void restoreState(BrowserSavedState state) {
         ThreadHelper.runAsync(() -> {
             state.getEntries().forEach(e -> {
                 restoreStateAsync(e, null);
+                // Don't try to run everything in parallel as that can be taxing
+                ThreadHelper.sleep(1000);
             });
-            // Don't try to run everything in parallel as that can be taxing
-            ThreadHelper.sleep(1000);
         });
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/GuiDsStoreCreator.java
Patch:
@@ -223,6 +223,9 @@ public Comp<?> bottom() {
                     return provider.getValue() == null
                             || store.getValue() == null
                             || !store.getValue().isComplete()
+                            // When switching providers, both observables change one after another.
+                            // So temporarily there might be a store class mismatch
+                            || provider.getValue().getStoreClasses().stream().noneMatch(aClass -> aClass.isAssignableFrom(store.getValue().getClass()))
                             || provider.getValue().createInsightsMarkdown(store.getValue()) == null;
                 },
                 provider,

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -81,7 +81,7 @@ protected final Region createSimple() {
         GrowAugment.create(true, false).augment(new SimpleCompStructure<>(r));
         button.getStyleClass().add("store-entry-comp");
         button.setPadding(Insets.EMPTY);
-        button.setMaxWidth(3000);
+        button.setMaxWidth(5000);
         button.setFocusTraversable(true);
         button.accessibleTextProperty()
                 .bind(wrapper.nameProperty());

File: app/src/main/java/io/xpipe/app/fxcomps/impl/SecretFieldComp.java
Patch:
@@ -1,13 +1,13 @@
 package io.xpipe.app.fxcomps.impl;
 
-import atlantafx.base.controls.PasswordTextField;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.CompStructure;
 import io.xpipe.app.fxcomps.SimpleCompStructure;
 import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.util.SecretHelper;
 import io.xpipe.core.util.SecretValue;
 import javafx.beans.property.Property;
+import javafx.scene.control.PasswordField;
 import javafx.scene.control.TextField;
 
 import java.util.Objects;
@@ -26,7 +26,7 @@ protected SecretValue encrypt(char[] c) {
 
     @Override
     public CompStructure<TextField> createBase() {
-        var text = new PasswordTextField();
+        var text = new PasswordField();
         text.getStyleClass().add("secret-field-comp");
         text.setText(value.getValue() != null ? value.getValue().getSecretValue() : null);
         text.textProperty().addListener((c, o, n) -> {

File: app/src/main/java/io/xpipe/app/update/UpdateAvailableAlert.java
Patch:
@@ -24,7 +24,7 @@ public static void showIfNeeded() {
                     alert.setAlertType(Alert.AlertType.NONE);
 
                     var markdown = new MarkdownComp(u.getBody() != null ? u.getBody() : "", s -> {
-                                var header = "<h1>" + AppI18n.get("whatsNew", u.getVersion()) + "</h1>";
+                                var header = "&nbsp;<h1>" + AppI18n.get("whatsNew", u.getVersion()) + "</h1>";
                                 return header + s;
                             })
                             .createRegion();

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -36,7 +36,7 @@ public static void showIfNeeded() {
                     alert.initModality(Modality.NONE);
 
                     var markdown = new MarkdownComp(update.getRawDescription(), s -> {
-                                var header = "<h1>" + AppI18n.get("whatsNew", update.getName()) + "</h1>";
+                                var header = "&nbsp;<h1>" + AppI18n.get("whatsNew", update.getName()) + "</h1>";
                                 return header + s;
                             })
                             .createRegion();

File: app/src/main/java/io/xpipe/app/browser/BrowserModel.java
Patch:
@@ -65,9 +65,9 @@ public void restoreState(BrowserSavedState.Entry e, BooleanProperty busy) {
 
     public void reset() {
         synchronized (BrowserModel.this) {
-            openFileSystems.forEach(model -> {
-                closeFileSystemSync(model);
-            });
+            for (OpenFileSystemModel o : new ArrayList<>(openFileSystems)) {
+                closeFileSystemSync(o);
+            }
             if (savedState != null) {
                 savedState.save();
             }

File: app/src/main/java/io/xpipe/app/core/check/AppFontCheck.java
Patch:
@@ -8,7 +8,7 @@ public static void check() {
         try {
             Font.getDefault();
         } catch (Throwable t) {
-            throw new IllegalStateException("Unable to load any fonts. Check whether your system is properly configured with fontconfig", t);
+            throw new IllegalStateException("Unable to load any fonts. Check whether your system is properly configured with fontconfig and you have any fonts installed", t);
         }
     }
 

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -26,6 +26,8 @@ public void handle(ErrorEvent event) {
             handleWithSecondaryException(event, throwable);
             ErrorAction.ignore().handle(event);
         })) {
+            // Exit if we couldn't initialize the GUI
+            OperationMode.halt(1);
             return;
         }
 

File: app/src/main/java/io/xpipe/app/comp/store/DenseStoreEntryComp.java
Patch:
@@ -32,7 +32,7 @@ private Label createInformation(GridPane grid) {
                 : Comp.empty();
         information.setGraphic(state.createRegion());
 
-        var summary = wrapper.summary();
+        var summary = wrapper.getSummary();
         var info = wrapper.getEntry().getProvider().informationString(wrapper);
         SimpleChangeListener.apply(grid.hoverProperty(), val -> {
             if (val && summary.getValue() != null && wrapper.getEntry().getProvider().alwaysShowSummary()) {

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -120,7 +120,7 @@ protected Label createInformation() {
 
     protected Label createSummary() {
         var summary = new Label();
-        summary.textProperty().bind(wrapper.summary());
+        summary.textProperty().bind(wrapper.getSummary());
         summary.getStyleClass().add("summary");
         AppFont.small(summary);
         return summary;

File: app/src/main/java/io/xpipe/app/comp/store/DenseStoreEntryComp.java
Patch:
@@ -74,7 +74,9 @@ protected Region createContent() {
         nameCC.setMinWidth(100);
         nameCC.setHgrow(Priority.ALWAYS);
         grid.getColumnConstraints().addAll(nameCC);
-        grid.addRow(0, new HBox(name));
+        var nameBox = new HBox(name);
+        nameBox.setAlignment(Pos.CENTER_LEFT);
+        grid.addRow(0, nameBox);
 
         var info = createInformation(grid);
         grid.addRow(0, info);

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -162,7 +162,7 @@ public Optional<String> cdSyncOrRetry(String path, boolean allowCommands) {
                             fileSystem
                                     .getShell()
                                     .get()
-                                    .subShell(processControl -> adjustedPath, (sc) -> adjustedPath)
+                                    .subShell(adjustedPath)
                                     .withInitSnippet(new SimpleScriptSnippet(
                                             fileSystem
                                                     .getShell()

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -162,7 +162,7 @@ public Optional<String> cdSyncOrRetry(String path, boolean allowCommands) {
                             fileSystem
                                     .getShell()
                                     .get()
-                                    .subShell(adjustedPath)
+                                    .subShell(processControl -> adjustedPath, (sc) -> adjustedPath)
                                     .withInitSnippet(new SimpleScriptSnippet(
                                             fileSystem
                                                     .getShell()

File: app/src/main/java/io/xpipe/app/comp/store/GuiDsStoreCreator.java
Patch:
@@ -118,7 +118,7 @@ public GuiDsStoreCreator(
                     .getUuid();
             var rootCategory = DataStorage.get().getRootCategory(DataStorage.get().getStoreCategoryIfPresent(targetCategory).orElseThrow());
             // Don't put connections in the scripts category ever
-            if (!provider.getValue().getCreationCategory().equals(DataStoreProvider.CreationCategory.SCRIPT) &&
+            if ((provider.getValue().getCreationCategory() == null || !provider.getValue().getCreationCategory().equals(DataStoreProvider.CreationCategory.SCRIPT)) &&
                     rootCategory.equals(DataStorage.get().getAllScriptsCategory())) {
                 targetCategory = DataStorage.get().getDefaultCategory().getUuid();
             }

File: app/src/main/java/io/xpipe/app/util/Hyperlinks.java
Patch:
@@ -13,7 +13,7 @@ public class Hyperlinks {
     public static final String DISCORD = "https://discord.gg/8y89vS8cRb";
     public static final String SLACK = "https://join.slack.com/t/XPipe/shared_invite/zt-1awjq0t5j-5i4UjNJfNe1VN4b_auu6Cg";
 
-    static final String[] browsers = {"xdg-open", "google-chrome", "firefox", "opera", "konqueror", "mozilla"};
+    static final String[] browsers = {"xdg-open", "google-chrome", "firefox", "opera", "konqueror", "mozilla", "gnome-open", "open"};
 
     @SuppressWarnings("deprecation")
     public static void open(String uri) {
@@ -36,7 +36,7 @@ public static void open(String uri) {
                     }
                 }
                 if (browser == null) {
-                    throw new Exception("No web browser found");
+                    throw new Exception("No web browser or URL opener found to open " + uri);
                 }
             }
         } catch (Exception e) {

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -28,7 +28,7 @@ public interface ShellControl extends ProcessControl {
     ShellDialect getTargetTerminalShellDialect();
 
     default boolean hasLocalSystemAccess() {
-        return getSystemId().equals(XPipeSystemId.getLocal());
+        return getSystemId() != null && getSystemId().equals(XPipeSystemId.getLocal());
     }
 
     boolean isLocal();

File: app/src/main/java/io/xpipe/app/core/AppFont.java
Patch:
@@ -62,7 +62,7 @@ public static void verifyFontLoadingFunctional() {
         try {
             Font.getDefault();
         } catch (Throwable t) {
-            throw new IllegalStateException("Font loading is not working. Check whether your system is properly configured with fontconfig", t);
+            throw new IllegalStateException("Unable to load any fonts. Check whether your system is properly configured with fontconfig", t);
         }
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -277,7 +277,7 @@ protected ContextMenu createContextMenu() {
                         return;
                     }
 
-                    if (menu.isDisable()) {
+                    if (menu != null && menu.isDisable()) {
                         return;
                     }
 

File: core/src/main/java/io/xpipe/core/process/CommandBuilder.java
Patch:
@@ -176,6 +176,7 @@ public CommandBuilder addFiles(SequencedCollection<String> s) {
     }
 
     public String buildBase(ShellControl sc) throws Exception {
+        sc.getShellDialect().prepareCommandForShell(this);
         List<String> list = new ArrayList<>();
         for (Element element : elements) {
             String evaluate = element.evaluate(sc);

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -155,6 +155,8 @@ default String getLoginOpenCommand() {
         return getOpenCommand();
     }
 
+    default void prepareCommandForShell(CommandBuilder b) {}
+
     String prepareTerminalInitFileOpenCommand(ShellDialect parentDialect, ShellControl sc, String file);
 
     String runScriptCommand(ShellControl parent, String file);

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -165,7 +165,7 @@ private static void fillScope(ErrorEvent ee, Scope s) {
             atts.forEach(attachment -> s.addAttachment(attachment));
         }
 
-        s.setTag("hasLicense", String.valueOf(LicenseProvider.get().hasLicense()));
+        s.setTag("hasLicense", String.valueOf(LicenseProvider.get().hasPaidLicense()));
         s.setTag("updatesEnabled", AppPrefs.get() != null ? AppPrefs.get().automaticallyUpdate().getValue().toString() : "unknown");
         s.setTag("initError", String.valueOf(OperationMode.isInStartup()));
         s.setTag(

File: app/src/main/java/io/xpipe/app/util/LicenseProvider.java
Patch:
@@ -46,4 +46,6 @@ public boolean prioritizeLoading() {
     public abstract void init();
 
     public abstract Comp<?> overviewPage();
+
+    public abstract boolean hasPaidLicense();
 }

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -129,7 +129,7 @@ default String getOrConcatenationOperator() {
 
     String getScriptPermissionsCommand(String file);
 
-    String prepareAskpassContent(ShellControl sc, String fileName, List<String> s) throws Exception;
+    String prepareAskpassContent(ShellControl sc, String fileName, List<String> s, String errorMessage) throws Exception;
 
     String getSetEnvironmentVariableCommand(String variable, String value);
 

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -86,7 +86,7 @@ default String getCdCommand(String directory) {
 
     String getScriptFileEnding();
 
-    void addInlineVariablesToCommand(Map<String, String> variables, CommandBuilder command);
+    String addInlineVariablesToCommand(Map<String, String> variables, String command);
 
     Stream<FileSystem.FileEntry> listFiles(FileSystem fs, ShellControl control, String dir) throws Exception;
 

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -142,7 +142,7 @@ public void load() {
                         c.ifPresent(storeCategories::add);
                     } catch (IOException ex) {
                         // IO exceptions are not expected
-                        exception.set(ex);
+                        exception.set(new IOException("Unable to load data from " + path.toString() + ". Is it corrupted?", ex));
                         directoriesToKeep.add(path);
                     }  catch (Exception ex) {
                         // Data corruption and schema changes are expected
@@ -228,7 +228,7 @@ && getStoreCategoryIfPresent(dataStoreCategory.getParentCategory())
                         storeEntries.put(entry.get(), entry.get());
                     } catch (IOException ex) {
                         // IO exceptions are not expected
-                        exception.set(ex);
+                        exception.set(new IOException("Unable to load data from " + path.toString() + ". Is it corrupted?", ex));
                         directoriesToKeep.add(path);
                     }  catch (Exception ex) {
                         // Data corruption and schema changes are expected

File: ext/base/src/main/java/io/xpipe/ext/base/browser/BackAction.java
Patch:
@@ -19,7 +19,7 @@ public String getId() {
 
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throws Exception {
-        model.backSync();
+        model.backSync(1);
     }
 
     @Override

File: ext/base/src/main/java/io/xpipe/ext/base/browser/ForwardAction.java
Patch:
@@ -19,7 +19,7 @@ public String getId() {
 
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throws Exception {
-        model.forthSync();
+        model.forthSync(1);
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -50,7 +50,7 @@ protected Region createSimple() {
         });
         path.addListener((observable, oldValue, newValue) -> {
             ThreadHelper.runFailableAsync(() -> {
-                BooleanScope.execute(model.getBusy(), () -> {
+                BooleanScope.executeExclusive(model.getBusy(), () -> {
                     var changed = model.cdSyncOrRetry(newValue, true);
                     changed.ifPresent(s -> Platform.runLater(() -> path.set(s)));
                 });

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -111,7 +111,7 @@ public FileSystem.FileEntry getCurrentDirectory() {
 
     public void cdAsync(String path) {
         ThreadHelper.runFailableAsync(() -> {
-            BooleanScope.execute(busy, () -> {
+            BooleanScope.executeExclusive(busy, () -> {
                 cdSync(path);
             });
         });

File: ext/base/src/main/java/io/xpipe/ext/base/browser/ChmodAction.java
Patch:
@@ -53,6 +53,6 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
 
     @Override
     public List<LeafAction> getBranchingActions(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return List.of(new Chmod("600"), new Chmod("644"), new Chmod("700"), new Chmod("777"), new Chmod("u+x"), new Chmod("a+x"));
+        return List.of(new Chmod("400"), new Chmod("600"), new Chmod("644"), new Chmod("700"), new Chmod("777"), new Chmod("u+x"), new Chmod("a+x"));
     }
 }

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListComp.java
Patch:
@@ -190,6 +190,7 @@ private void prepareTableShortcuts(TableView<BrowserEntry> table) {
                             browserAction.execute(fileList.getFileSystemModel(), selected);
                         });
                     });
+            event.consume();
         });
     }
 

File: app/src/main/java/io/xpipe/app/fxcomps/util/Shortcuts.java
Patch:
@@ -24,7 +24,6 @@ public static <T extends ButtonBase> void addShortcut(T region, KeyCombination c
     public static <T extends Region> void addShortcut(T region, KeyCombination comb, Consumer<T> exec) {
         var filter = new EventHandler<KeyEvent>() {
             public void handle(KeyEvent ke) {
-                var target = ke.getTarget();
                 if (!region.isVisible() || !region.isManaged() || region.isDisabled()) {
                     return;
                 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileStoreChoiceComp.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.app.browser.StandaloneFileBrowser;
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.fxcomps.SimpleComp;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.core.store.FileSystemStore;
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleBooleanProperty;
@@ -41,7 +42,7 @@ protected Region createSimple() {
                 .grow(false, true);
 
         var fileBrowseButton = new ButtonComp(null, new FontIcon("mdi2f-folder-open-outline"), () -> {
-                    StandaloneFileBrowser.openSingleFile(() -> null, fileStore -> {
+                    StandaloneFileBrowser.openSingleFile(() -> hideFileSystem ? DataStorage.get().local().ref() : null, fileStore -> {
                         if (fileStore == null) {
                             filePath.setValue(null);
                             fileSystem.setValue(null);

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -298,7 +298,7 @@ && getStoreCategoryIfPresent(dataStoreCategory.getParentCategory())
     }
 
     public synchronized void save() {
-        if (!loaded) {
+        if (!loaded || disposed) {
             return;
         }
 

File: app/src/main/java/io/xpipe/app/update/XPipeDistributionType.java
Patch:
@@ -84,6 +84,7 @@ public static XPipeDistributionType determine() {
         }
 
         try (var sc = LocalStore.getShell()) {
+            // In theory, we can also add  && !AppProperties.get().isStaging() here, but we want to replicate the production behavior
             if (OsType.getLocal().equals(OsType.WINDOWS)) {
                 try (var chocoOut =
                         sc.command("choco search --local-only -r xpipe").start()) {
@@ -100,6 +101,7 @@ public static XPipeDistributionType determine() {
                 }
             }
 
+            // In theory, we can also add  && !AppProperties.get().isStaging() here, but we want to replicate the production behavior
             if (OsType.getLocal().equals(OsType.MACOS)) {
                 try (var brewOut = sc.command("brew list --casks --versions").start()) {
                     var out = brewOut.readStdoutDiscardErr();

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -6,6 +6,7 @@
 import io.xpipe.app.issue.*;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.storage.DataStorage;
+import io.xpipe.app.update.XPipeDistributionType;
 import io.xpipe.app.util.LicenseProvider;
 import io.xpipe.app.util.FileBridge;
 import io.xpipe.app.util.LockedSecretValue;
@@ -47,6 +48,7 @@ public void onSwitchTo() throws Throwable {
         LicenseProvider.get().init();
         AppAntivirusAlert.showIfNeeded();
         LocalStore.init();
+        XPipeDistributionType.init();
         AppPrefs.init();
         AppCharsets.init();
         AppCharsetter.init();

File: app/src/main/java/io/xpipe/app/launcher/LauncherCommand.java
Patch:
@@ -13,6 +13,7 @@
 import io.xpipe.beacon.exchange.OpenExchange;
 import io.xpipe.core.process.OsType;
 import io.xpipe.core.util.XPipeDaemonMode;
+import io.xpipe.core.util.XPipeInstallation;
 import lombok.SneakyThrows;
 import picocli.CommandLine;
 
@@ -87,8 +88,9 @@ private void checkStart() {
                 OperationMode.halt(1);
             }
         } catch (Exception ex) {
+            var cli = XPipeInstallation.getLocalDefaultCliExecutable();
             ErrorEvent.fromThrowable(ex).description("Unable to connect to existing running daemon instance as it did not respond." +
-                    " Either try to kill the process xpiped manually or use the command xpipe daemon stop --force if the CLI is in your path.").handle();
+                    " Either try to kill the process xpiped manually or use the command " + cli + " daemon stop --force.").handle();
         }
 
         // Even in case we are unable to reach another beacon server

File: core/src/main/java/io/xpipe/core/process/ProcessOutputException.java
Patch:
@@ -30,6 +30,7 @@ public static ProcessOutputException of(int exitCode, String... messages) {
                     case CommandControl.EXIT_TIMEOUT_EXIT_CODE -> "Wait for process exit timed out" + errorSuffix;
                     case CommandControl.UNASSIGNED_EXIT_CODE -> "Process exited with unknown state. Did an external process interfere?" + errorSuffix;
                     case CommandControl.INTERNAL_ERROR_EXIT_CODE -> "Process execution failed" + errorSuffix;
+                    case CommandControl.ELEVATION_FAILED_EXIT_CODE -> "Process elevation failed" + errorSuffix;
                     default -> "Process returned exit code " + exitCode + errorSuffix;
                 };
         return new ProcessOutputException(message, exitCode, combinedError);
@@ -45,7 +46,7 @@ private ProcessOutputException(String message, int exitCode, String output) {
     }
 
     public boolean isIrregularExit() {
-        return exitCode == CommandControl.EXIT_TIMEOUT_EXIT_CODE || exitCode == CommandControl.START_FAILED_EXIT_CODE || exitCode == CommandControl.UNASSIGNED_EXIT_CODE || exitCode == CommandControl.INTERNAL_ERROR_EXIT_CODE;
+        return exitCode == CommandControl.EXIT_TIMEOUT_EXIT_CODE || exitCode == CommandControl.START_FAILED_EXIT_CODE || exitCode == CommandControl.UNASSIGNED_EXIT_CODE || exitCode == CommandControl.INTERNAL_ERROR_EXIT_CODE || exitCode == CommandControl.ELEVATION_FAILED_EXIT_CODE;
     }
 
     public boolean isKill() {

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -93,7 +93,7 @@ default boolean discardAndCheckExit() throws ProcessOutputException {
             discardOrThrow();
             return true;
         } catch (ProcessOutputException ex) {
-            if (ex.isTimeOut()) {
+            if (ex.isIrregularExit()) {
                 throw ex;
             }
 

File: core/src/main/java/io/xpipe/core/process/ProcessOutputException.java
Patch:
@@ -44,8 +44,8 @@ private ProcessOutputException(String message, int exitCode, String output) {
         this.output = output;
     }
 
-    public boolean isTimeOut() {
-        return exitCode == CommandControl.EXIT_TIMEOUT_EXIT_CODE;
+    public boolean isIrregularExit() {
+        return exitCode == CommandControl.EXIT_TIMEOUT_EXIT_CODE || exitCode == CommandControl.START_FAILED_EXIT_CODE || exitCode == CommandControl.UNASSIGNED_EXIT_CODE || exitCode == CommandControl.INTERNAL_ERROR_EXIT_CODE;
     }
 
     public boolean isKill() {

File: app/src/main/java/io/xpipe/app/exchange/LaunchExchangeImpl.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.xpipe.beacon.BeaconHandler;
 import io.xpipe.beacon.exchange.LaunchExchange;
+import io.xpipe.core.process.TerminalInitScriptConfig;
 import io.xpipe.core.store.LaunchableStore;
 
 import java.util.Arrays;
@@ -15,7 +16,7 @@ public class LaunchExchangeImpl extends LaunchExchange
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
         var store = getStoreEntryById(msg.getId(), false);
         if (store.getStore() instanceof LaunchableStore s) {
-            var command = s.prepareLaunchCommand().prepareTerminalOpen(store.getName());
+            var command = s.prepareLaunchCommand().prepareTerminalOpen(TerminalInitScriptConfig.ofName(store.getName()));
             return Response.builder().command(split(command)).build();
         }
 

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -7,13 +7,13 @@
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.core.process.ProcessControl;
+import io.xpipe.core.process.TerminalInitScriptConfig;
 
 import java.io.IOException;
 
 public class TerminalHelper {
 
     public static void open(String title, ProcessControl cc) throws Exception {
-        var command = cc.prepareTerminalOpen(title);
         open(null, title, cc);
     }
 
@@ -29,7 +29,7 @@ public static void open(DataStoreEntry entry, String title, ProcessControl cc) t
                 : "";
         var cleanTitle = (title != null ? title : entry != null ? entry.getName() : "?");
         var adjustedTitle = prefix + cleanTitle;
-                var file = ScriptHelper.createLocalExecScript(cc.prepareTerminalOpen(adjustedTitle));
+                var file = ScriptHelper.createLocalExecScript(cc.prepareTerminalOpen(new TerminalInitScriptConfig(adjustedTitle, type.shouldClear())));
         var config = new ExternalTerminalType.LaunchConfiguration(entry != null ? color : null, adjustedTitle, cleanTitle, file);
         try {
             type.launch(config);

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -16,7 +16,7 @@ interface ExceptionConverter {
 
     void resetData();
 
-    String prepareTerminalOpen(String displayName) throws Exception;
+    String prepareTerminalOpen(TerminalInitScriptConfig config) throws Exception;
 
     void closeStdin() throws IOException;
 

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -76,9 +76,9 @@ default <T extends ShellStoreState> ShellControl withShellStateFail(StatefulData
 
     ShellControl withErrorFormatter(Function<String, String> formatter);
 
-    String prepareTerminalOpen(String displayName) throws Exception;
+    String prepareTerminalOpen(TerminalInitScriptConfig config) throws Exception;
 
-    String prepareIntermediateTerminalOpen(String content, String displayName) throws Exception;
+    String prepareIntermediateTerminalOpen(String content, TerminalInitScriptConfig config) throws Exception;
 
     String getSystemTemporaryDirectory();
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryComp.java
Patch:
@@ -108,7 +108,7 @@ private ContextMenu createContextMenu(Region text) {
         });
         contextMenu.getItems().add(newCategory);
 
-        if (category.getCategory().canShare()) {
+        if (DataStorage.get().supportsSharing() && category.getCategory().canShare()) {
             var share = new MenuItem();
             share.textProperty().bind(Bindings.createStringBinding(() -> {
                 if (category.getShare().getValue()) {

File: app/src/main/java/io/xpipe/app/exchange/cli/ModeExchangeImpl.java
Patch:
@@ -26,7 +26,7 @@ public Response handleRequest(BeaconHandler handler, Request msg) throws Excepti
                                     .toList()));
         }
 
-        OperationMode.switchTo(mode);
+        OperationMode.switchToSyncIfPossible(mode);
         return ModeExchange.Response.builder()
                 .usedMode(OperationMode.map(OperationMode.get()))
                 .build();

File: app/src/main/java/io/xpipe/app/launcher/LauncherInput.java
Patch:
@@ -39,7 +39,7 @@ public static void handle(List<String> arguments) {
 
         var requiresPlatform = all.stream().anyMatch(launcherInput -> launcherInput.requiresJavaFXPlatform());
         if (requiresPlatform) {
-            OperationMode.switchTo(OperationMode.GUI);
+            OperationMode.switchToSyncIfPossible(OperationMode.GUI);
         }
         var hasGui = OperationMode.get() == OperationMode.GUI;
 

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -66,7 +66,7 @@ private ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue o) {
     private static final int tooltipDelayMax = 1500;
     private static final int editorReloadTimeoutMin = 0;
     private static final int editorReloadTimeoutMax = 1500;
-    private static final Path DEFAULT_STORAGE_DIR =
+    public static final Path DEFAULT_STORAGE_DIR =
             AppProperties.get().getDataDir().resolve("storage");
     private static final String DEVELOPER_MODE_PROP = "io.xpipe.app.developerMode";
     private static AppPrefs INSTANCE;

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -277,7 +277,6 @@ public void installRemote(ShellControl shellControl, String file) throws Excepti
             public void installLocal(String file) throws Exception {
                 var command = new LocalStore()
                         .control()
-                        .subShell(ShellDialects.BASH)
                         .command(String.format(
                                 """
                                         function exec {
@@ -287,7 +286,7 @@ public void installLocal(String file) throws Exception {
                                         }
 
                                         cd ~
-                                        exec || read -rsp "Update failed ..."$'\\n' -n 1 key
+                                        exec || echo "Update failed ..." && read -rs -k 1 key
                                         """,
                                 file, file));
                 TerminalHelper.open("XPipe Updater", command);

File: ext/base/src/main/java/io/xpipe/ext/base/browser/RunAction.java
Patch:
@@ -65,6 +65,6 @@ public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entrie
 
     @Override
     protected String createCommand(ShellControl sc, OpenFileSystemModel model, BrowserEntry entry) {
-        return sc.getShellDialect().runScriptCommand(sc, entry.getFileName());
+        return sc.getShellDialect().runScriptCommand(sc, entry.getRawFileEntry().getPath());
     }
 }

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -157,8 +157,6 @@ default ShellControl elevationPassword(SecretValue value) {
 
     ShellControl withInitSnippet(ScriptSnippet snippet);
 
-    ShellControl removeInitSnippet(ScriptSnippet snippet);
-
     ShellControl additionalTimeout(int ms);
 
     FailableSupplier<SecretValue> getElevationPassword();

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -155,7 +155,9 @@ default ShellControl elevationPassword(SecretValue value) {
     }
     ShellControl elevationPassword(FailableSupplier<SecretValue> value);
 
-    ShellControl initWith(ScriptSnippet snippet);
+    ShellControl withInitSnippet(ScriptSnippet snippet);
+
+    ShellControl removeInitSnippet(ScriptSnippet snippet);
 
     ShellControl additionalTimeout(int ms);
 

File: ext/base/src/main/java/io/xpipe/ext/base/script/ScriptStore.java
Patch:
@@ -39,7 +39,7 @@ public static ShellControl controlWithScripts(ShellControl pc, List<DataStoreEnt
 
             var dir = initScriptsDirectory(shellControl, bringFlattened);
             if (dir != null) {
-                shellControl.initWith(new SimpleScriptSnippet(shellControl.getShellDialect().appendToPathVariableCommand(dir), ScriptSnippet.ExecutionType.TERMINAL_ONLY));
+                shellControl.withInitSnippet(new SimpleScriptSnippet(shellControl.getShellDialect().appendToPathVariableCommand(dir), ScriptSnippet.ExecutionType.TERMINAL_ONLY));
             }
         });
         return pc;
@@ -55,7 +55,7 @@ private static void passInitScripts(ShellControl pc, List<SimpleScriptStore> scr
                 return;
             }
 
-            pc.initWith(simpleScriptStore);
+            pc.withInitSnippet(simpleScriptStore);
         });
     }
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -595,6 +595,7 @@ public void launch(LaunchConfiguration configuration) throws Exception {
                 pc.osascriptCommand(String.format(
                                 """
                                 activate application "Terminal"
+                                delay 1
                                 tell app "Terminal" to do script %s
                                 """,
                                 suffix))

File: app/src/main/java/io/xpipe/app/core/mode/GuiMode.java
Patch:
@@ -22,7 +22,6 @@ public void onSwitchTo() throws Throwable {
         super.onSwitchTo();
 
         UnlockAlert.showIfNeeded();
-        UpdateChangelogAlert.showIfNeeded();
         AppGreetings.showIfNeeded();
 
         TrackEvent.info("mode", "Waiting for window setup completion ...");
@@ -37,6 +36,8 @@ public void onSwitchTo() throws Throwable {
             AppMainWindow.getInstance().show();
         });
         TrackEvent.info("mode", "Window setup complete");
+
+        UpdateChangelogAlert.showIfNeeded();
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/browser/BrowserEntry.java
Patch:
@@ -53,7 +53,7 @@ private static DirectoryType directoryType(FileSystem.FileEntry rawFileEntry) {
     }
 
     public String getFileName() {
-        return FileNames.getFileName(getRawFileEntry().getPath());
+        return getRawFileEntry().getName();
     }
 
     public String getOptionallyQuotedFileName() {

File: app/src/main/java/io/xpipe/app/browser/icon/FileType.java
Patch:
@@ -72,7 +72,7 @@ public boolean matches(FileSystem.FileEntry entry) {
                 return false;
             }
 
-            return endings.contains(entry.getPath().toLowerCase(Locale.ROOT));
+            return (entry.getExtension() != null && endings.contains("." + entry.getExtension().toLowerCase(Locale.ROOT))) || endings.contains(entry.getName());
         }
 
         @Override

File: core/src/main/java/io/xpipe/core/store/FileNames.java
Patch:
@@ -96,7 +96,7 @@ public static String getExtension(String file) {
         }
 
         var name = FileNames.getFileName(file);
-        var split = file.split("\\.");
+        var split = name.split("\\.");
         if (split.length == 0) {
             return null;
         }

File: app/src/main/java/io/xpipe/app/browser/BrowserBookmarkList.java
Patch:
@@ -54,7 +54,7 @@ protected Region createSimple() {
         };
         var selectedCategory = new SimpleObjectProperty<>(StoreViewState.get().getActiveCategory().getValue());
         var section = StoreSectionMiniComp.createList(
-                StoreSection.createTopLevel(StoreViewState.get().getAllEntries(), applicable, filterText, selectedCategory), (s, comp) -> {
+                StoreSection.createTopLevel(StoreViewState.get().getAllEntries(), storeEntryWrapper -> true, filterText, selectedCategory), (s, comp) -> {
                     BooleanProperty busy = new SimpleBooleanProperty(false);
                     comp.disable(Bindings.createBooleanBinding(() -> {
                         return busy.get() || !applicable.test(s.getWrapper());

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -152,7 +152,7 @@ public Optional<String> cdSyncOrRetry(String path, boolean allowCommands) {
             var directory = currentPath.get();
             var name = adjustedPath + " - " + entry.get().getName();
             ThreadHelper.runFailableAsync(() -> {
-                if (ShellDialects.ALL.stream().anyMatch(dialect -> adjustedPath.startsWith(dialect.getOpenCommand()))) {
+                if (ShellDialects.getStartableDialects().stream().anyMatch(dialect -> adjustedPath.startsWith(dialect.getOpenCommand()))) {
                     TerminalHelper.open(
                             entry.getEntry(),
                             name,

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -94,7 +94,6 @@ public void setupWindow() {
         var appWindow = AppMainWindow.init(stage);
         appWindow.getStage().titleProperty().bind(PlatformThread.sync(titleBinding));
         appWindow.initialize();
-        appWindow.show();
         appWindow.setContent(content);
         TrackEvent.info("Application window initialized");
         stage.setOnShown(event -> {

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -44,12 +44,12 @@ public static String createLocalExecScript(String content) {
         }
     }
 
-    public static String constructInitFile(ShellControl processControl, List<String> init, String toExecuteInShell, boolean login, String displayName)
+    public static String constructInitFile(ShellControl processControl, List<String> init, String toExecuteInShell, String displayName)
             throws Exception {
-        return constructInitFile(processControl.getShellDialect(), processControl, init, toExecuteInShell, login, displayName);
+        return constructInitFile(processControl.getShellDialect(), processControl, init, toExecuteInShell, displayName);
     }
 
-    public static String constructInitFile(ShellDialect t, ShellControl processControl, List<String> init, String toExecuteInShell, boolean login, String displayName)
+    public static String constructInitFile(ShellDialect t, ShellControl processControl, List<String> init, String toExecuteInShell, String displayName)
             throws Exception {
         String nl = t.getNewLine().getNewLineString();
         var content = "";

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -136,7 +136,7 @@ default String getOrConcatenationOperator() {
 
     String getUsernameVariableName();
 
-    String getPrintExitCodeCommand(String prefix);
+    String getPrintExitCodeCommand(String prefix, String suffix);
 
     default String getPrintEnvironmentVariableCommand(String name) {
         return getPrintVariableCommand(name);

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -161,6 +161,7 @@ private static void fillScope(ErrorEvent ee, Scope s) {
                         : "false");
         s.setTag("terminal", Boolean.toString(ee.isTerminal()));
         s.setTag("omitted", Boolean.toString(ee.isOmitted()));
+        s.setTag("diagnostics", Boolean.toString(ee.isShouldSendDiagnostics()));
 
         var exMessage = ee.getThrowable() != null ? ee.getThrowable().getMessage() : null;
         if (ee.getDescription() != null && !ee.getDescription().equals(exMessage) && ee.isShouldSendDiagnostics()) {

File: app/src/main/java/io/xpipe/app/comp/base/LoadingOverlayComp.java
Patch:
@@ -72,7 +72,7 @@ public void changed(ObservableValue<? extends Boolean> observable, Boolean oldVa
                 }
             }
         };
-        PlatformThread.sync(showLoading).addListener(listener);
+        showLoading.addListener(listener);
 
         var stack = new StackPane(r, loadingOverlay);
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ChoicePaneComp.java
Patch:
@@ -63,6 +63,8 @@ public Entry fromString(String string) {
                 } else {
                     vbox.getChildren().set(1, region);
                 }
+
+                region.requestFocus();
             }
         });
 

File: app/src/main/java/io/xpipe/app/util/SecretRetrievalStrategyHelper.java
Patch:
@@ -54,7 +54,6 @@ private static OptionsBuilder customCommand(Property<SecretRetrievalStrategy.Cus
                 new SimpleObjectProperty<>(p.getValue() != null ? p.getValue().getCommand() : null);
         var content = new TextFieldComp(cmdProperty);
         return new OptionsBuilder()
-                .name("command")
                 .addComp(content, cmdProperty)
                 .bind(
                         () -> {

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListModel.java
Patch:
@@ -88,9 +88,6 @@ private void refreshShown() {
                         .toList()
                 : all.getValue();
 
-        Comparator<BrowserEntry> tableComparator = comparatorProperty.getValue();
-        var comparator =
-                tableComparator != null ? FILE_TYPE_COMPARATOR.thenComparing(tableComparator) : FILE_TYPE_COMPARATOR;
         var listCopy = new ArrayList<>(filtered);
         sort(listCopy);
         shown.setValue(listCopy);

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -79,7 +79,7 @@ protected Region createSimple() {
 
                     struc.get().setPromptText("Overview of " + model.getName());
                 })
-                .shortcut(new KeyCodeCombination(KeyCode.F, KeyCombination.SHORTCUT_DOWN), s -> {
+                .shortcut(new KeyCodeCombination(KeyCode.P, KeyCombination.SHORTCUT_DOWN), s -> {
                     s.get().requestFocus();
                 })
                 .accessibleText("Current path");

File: app/src/main/java/io/xpipe/app/browser/BrowserTransferComp.java
Patch:
@@ -73,8 +73,8 @@ protected Region createSimple() {
                         .apply(struc -> struc.get().setSpacing(10)),
                 button -> {
                     var p = new AnchorPane(button);
-                    AnchorPane.setRightAnchor(button, 20.0);
-                    AnchorPane.setTopAnchor(button, 20.0);
+                    AnchorPane.setRightAnchor(button, 10.0);
+                    AnchorPane.setTopAnchor(button, 10.0);
                     p.setPickOnBounds(false);
                     return p;
                 });
@@ -155,6 +155,6 @@ protected Region createSimple() {
                             });
                         }),
                 PlatformThread.sync(stage.getDownloading()));
-        return stack.createRegion();
+        return stack.styleClass("transfer").createRegion();
     }
 }

File: app/src/main/java/io/xpipe/app/browser/BrowserWelcomeComp.java
Patch:
@@ -83,7 +83,7 @@ protected Region createSimple() {
                 ThreadHelper.runAsync(() -> {
                     model.restoreState(e, disable);
                 });
-            }).disable(disable).styleClass("color-box").apply(struc -> struc.get().setMaxWidth(2000)).grow(true, false);
+            }).accessibleText(DataStorage.get().getStoreDisplayName(entry.get())).disable(disable).styleClass("color-box").apply(struc -> struc.get().setMaxWidth(2000)).grow(true, false);
         }).apply(struc -> {
             VBox vBox = (VBox) struc.get().getContent();
             vBox.setSpacing(10);
@@ -102,7 +102,7 @@ protected Region createSimple() {
         var tile = new TileButtonComp("restore", "restoreAllSessions", "mdmz-restore", actionEvent -> {
             model.restoreState(state);
             actionEvent.consume();
-        }).grow(true, false);
+        }).grow(true, false).accessibleTextKey("restoreAllSessions");
         layout.getChildren().add(tile.createRegion());
 
         return layout;

File: app/src/main/java/io/xpipe/app/comp/base/DropdownComp.java
Patch:
@@ -49,6 +49,7 @@ public CompStructure<Button> createBase() {
 
         button.setGraphic(graphic);
         button.getStyleClass().add("dropdown-comp");
+        button.setAccessibleText("Dropdown actions");
 
         return new SimpleCompStructure<>(button);
     }

File: app/src/main/java/io/xpipe/app/comp/base/ListSelectorComp.java
Patch:
@@ -35,6 +35,7 @@ protected Region createSimple() {
         for (var v : values) {
             var cb = new CheckBox(null);
             cbs.add(cb);
+            cb.setAccessibleText(toString.apply(v));
             cb.setSelected(selected.contains(v));
             cb.selectedProperty().addListener((c, o, n) -> {
                 if (n) {

File: app/src/main/java/io/xpipe/app/comp/base/OsLogoComp.java
Patch:
@@ -6,8 +6,8 @@
 import io.xpipe.app.fxcomps.impl.PrettyImageHelper;
 import io.xpipe.app.fxcomps.impl.StackComp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
+import io.xpipe.core.process.OsNameState;
 import io.xpipe.core.store.FileNames;
-import io.xpipe.core.process.ShellStoreState;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.ObservableValue;
@@ -41,11 +41,11 @@ protected Region createSimple() {
                     }
 
                     var ps = wrapper.getPersistentState().getValue();
-                    if (!(ps instanceof ShellStoreState sss)) {
+                    if (!(ps instanceof OsNameState ons)) {
                         return null;
                     }
 
-                    return getImage(sss.getOsName());
+                    return getImage(ons.getOsName());
                 },
                 wrapper.getPersistentState(), state));
         var hide = BindingsHelper.map(img, s -> s != null);

File: app/src/main/java/io/xpipe/app/comp/store/DsStoreProviderChoiceComp.java
Patch:
@@ -60,6 +60,7 @@ public CompStructure<ComboBox<Node>> createBase() {
         ComboBox<Node> cb = comboBox.build();
         cb.getStyleClass().add("data-source-type");
         cb.getStyleClass().add("choice-comp");
+        cb.setAccessibleText("Choose connection type");
         return new SimpleCompStructure<>(cb);
     }
 }

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationMenu.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.app.comp.store;
 
-import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataStoreProvider;
 import io.xpipe.app.ext.DataStoreProviders;
@@ -52,7 +51,7 @@ public static void addButtons(MenuButton menu) {
             cmd.setGraphic(new FontIcon("mdi2c-code-greater-than"));
             cmd.textProperty().bind(AppI18n.observable("addCommand"));
             cmd.setOnAction(event -> {
-                GuiDsStoreCreator.showCreation(null,
+                GuiDsStoreCreator.showCreation(DataStoreProviders.byName("cmd").orElseThrow(),
                         v -> DataStoreProvider.CreationCategory.COMMAND.equals(v.getCreationCategory()));
                 event.consume();
             });
@@ -85,7 +84,7 @@ public static void addButtons(MenuButton menu) {
             script.setGraphic(new FontIcon("mdi2s-script-text-outline"));
             script.textProperty().bind(AppI18n.observable("addScript"));
             script.setOnAction(event -> {
-                GuiDsStoreCreator.showCreation(null,
+                GuiDsStoreCreator.showCreation(DataStoreProviders.byName("script").orElseThrow(),
                                                v -> DataStoreProvider.CreationCategory.SCRIPT.equals(v.getCreationCategory()));
                 event.consume();
             });

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -209,6 +209,7 @@ protected Comp<?> createButtonBar() {
                             action.execute();
                         });
                     });
+            button.accessibleText(actionProvider.getName(wrapper.getEntry().ref()).getValue());
             button.apply(new FancyTooltipAugment<>(
                     actionProvider.getName(wrapper.getEntry().ref())));
             if (actionProvider.activeType() == ActionProvider.DataStoreCallSite.ActiveType.ONLY_SHOW_IF_ENABLED) {

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListComp.java
Patch:
@@ -22,7 +22,7 @@ private Comp<?> createList() {
                         StoreViewState.get().getCurrentTopLevelSection().getAllChildren(),
                         (StoreSection e) -> {
                             var custom = StoreSection.customSection(e, true).hgrow();
-                            return new HorizontalComp(List.of(Comp.hspacer(10), custom, Comp.hspacer(10)))
+                            return new HorizontalComp(List.of(Comp.hspacer(8), custom, Comp.hspacer(10)))
                                     .styleClass("top");
                         })
                 .apply(struc -> ((Region) struc.get().getContent()).setPadding(new Insets(10, 0, 10, 0)));

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionMiniComp.java
Patch:
@@ -74,7 +74,9 @@ public CompStructure<VBox> createBase() {
                     .apply(struc -> struc.get().setMinWidth(20))
                     .apply(struc -> struc.get().setPrefWidth(20))
                     .focusTraversable()
-                    .accessibleText("Expand")
+                    .accessibleText(Bindings.createStringBinding(() -> {
+                        return "Expand " + section.getWrapper().getName().getValue();
+                    }, section.getWrapper().getName()))
                     .disable(BindingsHelper.persist(
                             Bindings.size(section.getAllChildren()).isEqualTo(0)))
                     .grow(false, true)

File: app/src/main/java/io/xpipe/app/core/AppCache.java
Patch:
@@ -50,7 +50,7 @@ public static <T> T get(String key, Class<?> type, Supplier<T> notPresent) {
         var path = getPath(key);
         if (Files.exists(path)) {
             try {
-                var tree = JsonConfigHelper.readConfig(path);
+                var tree = JsonConfigHelper.readRaw(path);
                 if (tree.isMissingNode()) {
                     return notPresent.get();
                 }

File: app/src/main/java/io/xpipe/app/core/AppCharsetter.java
Patch:
@@ -2,6 +2,8 @@
 
 import io.xpipe.core.charsetter.Charsetter;
 import io.xpipe.core.charsetter.StreamCharset;
+import io.xpipe.core.util.FailableConsumer;
+import io.xpipe.core.util.FailableSupplier;
 import org.apache.commons.io.ByteOrderMark;
 import org.apache.commons.io.input.BOMInputStream;
 
@@ -17,7 +19,7 @@ public static void init() {
         Charsetter.INSTANCE = new AppCharsetter();
     }
 
-    public Result read(FailableSupplier<InputStream, Exception> in, FailableConsumer<InputStreamReader, Exception> con)
+    public Result read(FailableSupplier<InputStream> in, FailableConsumer<InputStreamReader, Exception> con)
             throws Exception {
         checkInit();
 

File: app/src/main/java/io/xpipe/app/core/AppExtensionManager.java
Patch:
@@ -47,7 +47,7 @@ public static void init(boolean loadProviders) {
         }
 
         if (load) {
-            INSTANCE.addNativeLibrariesToPath();
+            // INSTANCE.addNativeLibrariesToPath();
             try {
                 XPipeServiceProviders.load(INSTANCE.extendedLayer);
                 MessageExchangeImpls.loadAll();

File: app/src/main/java/io/xpipe/app/core/AppSocketServer.java
Patch:
@@ -45,8 +45,9 @@ private AppSocketServer(int port) {
     }
 
     public static void init() {
+        int port = -1;
         try {
-            var port = BeaconConfig.getUsedPort();
+            port = BeaconConfig.getUsedPort();
             INSTANCE = new AppSocketServer(port);
             INSTANCE.createSocketListener();
 
@@ -56,7 +57,7 @@ public static void init() {
                     .handle();
         } catch (Exception ex) {
             // Not terminal!
-            ErrorEvent.fromThrowable(ex).build().handle();
+            ErrorEvent.fromThrowable(ex).description("Unable to start local socket server on port " + port).build().handle();
         }
     }
 

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -68,6 +68,7 @@ public void finalTeardown() {
         StoreViewState.reset();
         DataStorage.reset();
         AppPrefs.reset();
+        AppResources.reset();
         AppExtensionManager.reset();
         AppDataLock.unlock();
         // Shut down socket server last to keep a non-daemon thread running

File: app/src/main/java/io/xpipe/app/core/mode/GuiMode.java
Patch:
@@ -6,7 +6,6 @@
 import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
-import io.xpipe.app.update.CommercializationAlert;
 import io.xpipe.app.update.UpdateChangelogAlert;
 import io.xpipe.app.util.UnlockAlert;
 import javafx.stage.Stage;
@@ -24,7 +23,6 @@ public void onSwitchTo() throws Throwable {
 
         UnlockAlert.showIfNeeded();
         UpdateChangelogAlert.showIfNeeded();
-        CommercializationAlert.showIfNeeded();
         AppGreetings.showIfNeeded();
 
         TrackEvent.info("mode", "Waiting for window setup completion ...");

File: app/src/main/java/io/xpipe/app/core/mode/PlatformMode.java
Patch:
@@ -62,6 +62,7 @@ public void finalTeardown() throws Throwable {
         TrackEvent.info("mode", "Shutting down platform components");
         onSwitchFrom();
         StoreViewState.reset();
+        AppLayoutModel.reset();
         PlatformState.teardown();
         TrackEvent.info("mode", "Platform shutdown finished");
         BACKGROUND.finalTeardown();

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FilterComp.java
Patch:
@@ -28,7 +28,7 @@ public FilterComp(Property<String> filterText) {
     @Override
     public Structure createBase() {
         var fi = new FontIcon("mdi2m-magnify");
-        var bgLabel = new Label("Search ...", fi);
+        var bgLabel = new Label("Search", fi);
         bgLabel.getStyleClass().add("filter-background");
         var filter = new TextField();
         filter.setAccessibleText("Filter");

File: app/src/main/java/io/xpipe/app/fxcomps/impl/OptionsComp.java
Patch:
@@ -97,6 +97,7 @@ public CompStructure<Pane> createBase() {
                     extendedDescription.getStyleClass().add(Styles.ACCENT);
                     extendedDescription.setPadding(new Insets(0, 6, 0, 6));
                     extendedDescription.getStyleClass().add("long-description");
+                    extendedDescription.setAccessibleText("Help");
                     AppFont.header(extendedDescription);
                     extendedDescription.setOnAction(e -> popover.show(extendedDescription));
 

File: app/src/main/java/io/xpipe/app/prefs/AboutComp.java
Patch:
@@ -63,8 +63,8 @@ private Comp<?> createLinks() {
                                 .grow(true, false),
                         null)
                 .addComp(
-                        new TileButtonComp("termsOfService", "termsOfServiceDescription", "mdi2c-card-text-outline", e -> {
-                            Hyperlinks.open(Hyperlinks.TOS);
+                        new TileButtonComp("eula", "eulaDescription", "mdi2c-card-text-outline", e -> {
+                            Hyperlinks.open(Hyperlinks.EULA);
                             e.consume();
                         })
                                 .grow(true, false),

File: app/src/main/java/io/xpipe/app/prefs/JsonStorageHandler.java
Patch:
@@ -33,7 +33,7 @@ private String getSaveId(String bc) {
 
     private JsonNode getContent(String key) {
         if (content == null) {
-            content = (ObjectNode) JsonConfigHelper.readConfig(file);
+            content = JsonConfigHelper.readConfigObject(file);
         }
         return content.get(key);
     }

File: app/src/main/java/io/xpipe/app/prefs/VaultCategory.java
Patch:
@@ -9,7 +9,6 @@
 import com.dlsc.preferencesfx.model.Setting;
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.core.AppI18n;
-import io.xpipe.app.util.LicenseProvider;
 import io.xpipe.app.util.LockChangeAlert;
 import io.xpipe.core.util.XPipeInstallation;
 import javafx.beans.binding.Bindings;
@@ -58,7 +57,7 @@ public VaultCategory(AppPrefs prefs) {
 
     @SneakyThrows
     public Category create() {
-        var pro = LicenseProvider.get().getFeature("gitVault").isSupported();
+        var pro = true;
         BooleanField enable = BooleanField.ofBooleanType(prefs.enableGitStorage)
                 .editable(pro)
                 .render(() -> {

File: core/src/main/java/io/xpipe/core/process/ShellStoreState.java
Patch:
@@ -13,7 +13,7 @@
 @Getter
 @Jacksonized
 @SuperBuilder
-public class ShellStoreState extends DataStoreState {
+public class ShellStoreState extends DataStoreState implements OsNameState {
 
     OsType osType;
     String osName;

File: core/src/main/java/io/xpipe/core/store/FileSystem.java
Patch:
@@ -21,7 +21,6 @@ public interface FileSystem extends Closeable, AutoCloseable {
     @Value
     @NonFinal
     class FileEntry {
-        @NonNull
         FileSystem fileSystem;
 
         @NonNull
@@ -39,7 +38,7 @@ class FileEntry {
         FileKind kind;
 
         public FileEntry(
-                @NonNull FileSystem fileSystem,
+                FileSystem fileSystem,
                 @NonNull String path,
                 Instant date,
                 boolean hidden,

File: app/src/main/java/io/xpipe/app/core/AppTrayIcon.java
Patch:
@@ -33,8 +33,8 @@ public AppTrayIcon() {
         var url = AppResources.getResourceURL(AppResources.XPIPE_MODULE, image).orElseThrow();
 
         this.trayIcon = new TrayIcon(loadImageFromURL(url), App.getApp().getStage().getTitle(), popupMenu);
-        this.trayIcon.setImageAutoSize(false);
         this.trayIcon.setToolTip("XPipe");
+        this.trayIcon.setImageAutoSize(true);
 
         {
             var open = new MenuItem(AppI18n.get("open"));

File: app/src/main/java/io/xpipe/app/comp/store/StoreViewState.java
Patch:
@@ -117,7 +117,7 @@ private void addStorageListeners() {
         DataStorage.get().addListener(new StorageListener() {
             @Override
             public void onStoreAdd(DataStoreEntry... entry) {
-                var l = Arrays.stream(entry).map(StoreEntryWrapper::new).toList();
+                var l = Arrays.stream(entry).map(StoreEntryWrapper::new).peek(storeEntryWrapper -> storeEntryWrapper.update()).toList();
                 Platform.runLater(() -> {
                     synchronized (this) {
                         allEntries.addAll(l);
@@ -168,6 +168,7 @@ public void onStoreRemove(DataStoreEntry... entry) {
             @Override
             public void onCategoryAdd(DataStoreCategory category) {
                 var l = new StoreCategoryWrapper(category);
+                l.update();
                 Platform.runLater(() -> {
                     synchronized (this) {
                         categories.add(l);

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -32,6 +32,9 @@ public void onSwitchTo() throws Throwable {
             return;
         }
 
+        // For debugging
+        // if (true) throw new IllegalStateException();
+
         TrackEvent.info("mode", "Initializing base mode components ...");
         AppExtensionManager.init(true);
         JacksonMapper.initModularized(AppExtensionManager.getInstance().getExtendedLayer());

File: app/src/main/java/io/xpipe/app/util/PlatformState.java
Patch:
@@ -91,6 +91,7 @@ public static Optional<Throwable> initPlatform() {
                 // Platform initialization has failed in this case
                 PLATFORM_LOADED = false;
                 PlatformState.setCurrent(PlatformState.EXITED);
+                TrackEvent.error(t.getMessage());
                 return Optional.of(t);
             }
         }

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -91,7 +91,7 @@ protected Region createSimple() {
                             : "home_icon.svg";
                 },
                 model.getCurrentPath());
-        var breadcrumbsGraphic = PrettyImageHelper.ofSvg(graphic, 22, 22)
+        var breadcrumbsGraphic = PrettyImageHelper.ofSvg(graphic, 16, 16)
                 .padding(new Insets(0, 0, 1, 0))
                 .styleClass("path-graphic")
                 .createRegion();

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListStatusComp.java
Patch:
@@ -77,6 +77,7 @@ private Region createButtons() {
         AppFont.medium(menu);
         GrowAugment.create(true, false).augment(menu);
         StoreCreationMenu.addButtons(menu);
+        menu.setOpacity(0.85);
         return menu;
     }
 

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListComp.java
Patch:
@@ -36,9 +36,9 @@ protected Region createSimple() {
                 () -> {
                     var all = StoreViewState.get().getAllConnectionsCategory();
                     var connections = StoreViewState.get().getAllEntries().stream().filter(wrapper -> all.contains(wrapper.getEntry())).toList();
-                    return initialCount == connections.size();
+                    return initialCount == connections.size() && StoreViewState.get().getActiveCategory().getValue().getRoot().equals(StoreViewState.get().getAllConnectionsCategory());
                 },
-                StoreViewState.get().getAllEntries());
+                StoreViewState.get().getAllEntries(), StoreViewState.get().getActiveCategory());
         var map = new LinkedHashMap<Comp<?>, ObservableValue<Boolean>>();
         map.put(
                 createList(),

File: app/src/main/java/io/xpipe/app/core/AppMainWindow.java
Patch:
@@ -240,6 +240,7 @@ public void show() {
         stage.show();
 
         // Due to some weird GTK bug, we have to set these sizes every time we show a window even though they have been previously set
+        // This does not work every time however
         stage.setX(stage.getX());
         stage.setY(stage.getY());
         stage.setWidth(stage.getWidth());

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -345,7 +345,7 @@ protected ContextMenu createContextMenu() {
 
         if (wrapper.getEntry().getProvider() != null && wrapper.getEntry().getProvider().canMoveCategories()) {
             var move = new Menu(AppI18n.get("moveTo"), new FontIcon("mdi2f-folder-move-outline"));
-            StoreViewState.get().getSortedCategories(DataStorage.get().getRootCategory(DataStorage.get().getStoreCategoryIfPresent(wrapper.getEntry().getCategoryUuid()).orElseThrow())).forEach(storeCategoryWrapper -> {
+            StoreViewState.get().getSortedCategories(wrapper.getCategory().getValue()).forEach(storeCategoryWrapper -> {
                 MenuItem m = new MenuItem(storeCategoryWrapper.getName());
                 m.setOnAction(event -> {
                     wrapper.moveTo(storeCategoryWrapper.getCategory());

File: app/src/main/java/io/xpipe/app/comp/store/StoreSection.java
Patch:
@@ -98,7 +98,7 @@ public static StoreSection createTopLevel(
                 section -> {
                     var showFilter = filterString == null || section.shouldShow(filterString.get());
                     var matchesSelector = section.anyMatches(entryFilter);
-                    var sameCategory = category == null || category.getValue().contains(section.getWrapper().getEntry());
+                    var sameCategory = category == null || category.getValue() == null || category.getValue().contains(section.getWrapper().getEntry());
                     return showFilter && matchesSelector && sameCategory;
                 },
                 category,

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -106,7 +106,8 @@ private Popover getPopover() {
                             comp.disable(new SimpleBooleanProperty(true));
                         }
                     });
-            var category = new DataStoreCategoryChoiceComp(initialCategory != null ? initialCategory.getRoot() : null, selectedCategory).styleClass(Styles.LEFT_PILL);
+            var category = new DataStoreCategoryChoiceComp(initialCategory != null ? initialCategory.getRoot() : null, StoreViewState.get().getActiveCategory(),
+                                                           selectedCategory).styleClass(Styles.LEFT_PILL);
             var filter = new FilterComp(filterText)
                     .styleClass(Styles.CENTER_PILL)
                     .hgrow()

File: ext/base/src/main/java/io/xpipe/ext/base/script/ScriptGroupStoreProvider.java
Patch:
@@ -27,6 +27,9 @@ public class ScriptGroupStoreProvider implements DataStoreProvider {
     @Override
     public Comp<?> customEntryComp(StoreSection sec, boolean preferLarge) {
         ScriptGroupStore s = sec.getWrapper().getEntry().getStore().asNeeded();
+        if (sec.getWrapper().getValidity().getValue() != DataStoreEntry.Validity.COMPLETE) {
+            return new DenseStoreEntryComp(sec.getWrapper(), true, null);
+        }
 
         var def = new StoreToggleComp("base.isDefaultGroup", sec, s.getState().isDefault(), aBoolean -> {
             var state = s.getState();

File: ext/base/src/main/java/io/xpipe/ext/base/script/SimpleScriptStore.java
Patch:
@@ -87,6 +87,7 @@ public enum ExecutionType {
 
     @Override
     public void checkComplete() throws Exception {
+        Validators.nonNull(group);
         super.checkComplete();
         Validators.nonNull(executionType);
         Validators.nonNull(minimumDialect);

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -29,6 +29,7 @@ public class DataStoreEntry extends StorageElement {
     Validity validity;
 
     @NonFinal
+    @Setter
     JsonNode storeNode;
 
     @Getter

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -304,6 +304,7 @@ public DataStoreEntry addStoreEntryIfNotPresent(@NonNull DataStoreEntry e) {
         var displayParent = syntheticParent.or(() -> getDisplayParent(e));
         if (displayParent.isPresent()) {
             displayParent.get().setExpanded(true);
+            e.setCategoryUuid(displayParent.get().getCategoryUuid());
         }
 
         e.setDirectory(getStoresDir().resolve(e.getUuid().toString()));

File: app/src/main/java/io/xpipe/app/core/mode/GuiMode.java
Patch:
@@ -43,11 +43,11 @@ public void onSwitchTo() throws Throwable {
 
     @Override
     public void onSwitchFrom() {
-        super.onSwitchFrom();
         PlatformThread.runLaterIfNeededBlocking(() -> {
             TrackEvent.info("mode", "Closing windows");
-            Stage.getWindows().stream().toList().forEach(w -> w.hide());
+            Stage.getWindows().stream().toList().forEach(w -> {
+                w.hide();
+            });
         });
     }
-
 }

File: app/src/main/java/io/xpipe/app/core/mode/TrayMode.java
Patch:
@@ -33,7 +33,6 @@ public void onSwitchTo() throws Throwable {
 
     @Override
     public void onSwitchFrom() {
-        super.onSwitchFrom();
         if (AppTray.get() != null) {
             TrackEvent.info("mode", "Closing tray");
             PlatformThread.runLaterIfNeededBlocking(() -> AppTray.get().hide());

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -368,7 +368,7 @@ public boolean isSelectable() {
 
         @Override
         protected CommandBuilder toCommand(String name, String file) {
-            return CommandBuilder.of().add("-r").addQuoted(name).add("-e").addQuoted(file);
+            return CommandBuilder.of().add("-n", "~").add("-r").addQuoted(name).add("-e").addQuoted(file);
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -201,7 +201,7 @@ public boolean refreshChildren(DataStoreEntry e) {
         }
 
         var oldChildren = getStoreEntries().stream()
-                .filter(other -> e.equals(other.getProvider().getDisplayParent(other)))
+                .filter(other -> e.equals(getDisplayParent(other).orElse(null)))
                 .toList();
         var toRemove = oldChildren.stream()
                 .filter(entry -> newChildren.stream()

File: app/src/main/java/io/xpipe/app/comp/base/OsLogoComp.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.comp.base;
 
-import io.xpipe.app.comp.storage.store.StoreEntryWrapper;
+import io.xpipe.app.comp.store.StoreEntryWrapper;
 import io.xpipe.app.core.AppResources;
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.impl.PrettyImageHelper;

File: app/src/main/java/io/xpipe/app/comp/base/StoreToggleComp.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.comp.base;
 
-import io.xpipe.app.comp.storage.store.StoreSection;
+import io.xpipe.app.comp.store.StoreSection;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;

File: app/src/main/java/io/xpipe/app/comp/base/SystemStateComp.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.app.comp.base;
 
 import atlantafx.base.theme.Styles;
-import io.xpipe.app.comp.storage.store.StoreEntryWrapper;
+import io.xpipe.app.comp.store.StoreEntryWrapper;
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
 import io.xpipe.app.fxcomps.util.PlatformThread;

File: app/src/main/java/io/xpipe/app/comp/store/DenseStoreEntryComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.fxcomps.Comp;

File: app/src/main/java/io/xpipe/app/comp/store/StandardStoreEntryComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.fxcomps.Comp;
 import javafx.geometry.HPos;

File: app/src/main/java/io/xpipe/app/comp/store/StoreCategoryWrapper.java
Patch:
@@ -1,10 +1,9 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreCategory;
 import io.xpipe.app.storage.DataStoreEntry;
-import javafx.application.Platform;
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.property.SimpleStringProperty;
@@ -67,7 +66,7 @@ public boolean contains(DataStoreEntry entry) {
     }
 
     public void select() {
-        Platform.runLater(() -> {
+        PlatformThread.runLaterIfNeeded(() -> {
             StoreViewState.get().getActiveCategory().setValue(this);
         });
     }

File: app/src/main/java/io/xpipe/app/comp/store/StoreCreationMenu.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.core.AppI18n;

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import atlantafx.base.theme.Styles;
 import io.xpipe.app.comp.base.LoadingOverlayComp;
@@ -345,7 +345,7 @@ protected ContextMenu createContextMenu() {
 
         if (wrapper.getEntry().getProvider() != null && wrapper.getEntry().getProvider().canMoveCategories()) {
             var move = new Menu(AppI18n.get("moveTo"), new FontIcon("mdi2f-folder-move-outline"));
-            StoreViewState.get().getSortedCategories().forEach(storeCategoryWrapper -> {
+            StoreViewState.get().getSortedCategories(DataStorage.get().getRootCategory(DataStorage.get().getStoreCategoryIfPresent(wrapper.getEntry().getCategoryUuid()).orElseThrow())).forEach(storeCategoryWrapper -> {
                 MenuItem m = new MenuItem(storeCategoryWrapper.getName());
                 m.setOnAction(event -> {
                     wrapper.moveTo(storeCategoryWrapper.getCategory());

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.ListBoxViewComp;
 import io.xpipe.app.comp.base.MultiContentComp;

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryListStatusComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.CountComp;
 import io.xpipe.app.core.AppFont;

File: app/src/main/java/io/xpipe/app/comp/store/StoreEntryWrapper.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.ext.ActionProvider;

File: app/src/main/java/io/xpipe/app/comp/store/StoreIntroComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;

File: app/src/main/java/io/xpipe/app/comp/store/StoreLayoutComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.core.AppActionLinkDetector;
 import io.xpipe.app.fxcomps.SimpleComp;

File: app/src/main/java/io/xpipe/app/comp/store/StoreNotFoundComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.fxcomps.SimpleComp;
 import javafx.scene.layout.Region;

File: app/src/main/java/io/xpipe/app/comp/store/StoreSection.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.ListBoxViewComp;
 import io.xpipe.app.fxcomps.Comp;

File: app/src/main/java/io/xpipe/app/comp/store/StoreSectionMiniComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.comp.base.ListBoxViewComp;

File: app/src/main/java/io/xpipe/app/comp/store/StoreSidebarComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;

File: app/src/main/java/io/xpipe/app/comp/store/StoreSortComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;

File: app/src/main/java/io/xpipe/app/comp/store/StoreSortMode.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.storage.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.storage.DataStoreEntry;
 

File: app/src/main/java/io/xpipe/app/core/AppLayoutModel.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.browser.BrowserComp;
 import io.xpipe.app.browser.BrowserModel;
 import io.xpipe.app.comp.DeveloperTabComp;
-import io.xpipe.app.comp.storage.store.StoreLayoutComp;
+import io.xpipe.app.comp.store.StoreLayoutComp;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.prefs.PrefsComp;
 import io.xpipe.app.util.LicenseProvider;

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.app.core.mode;
 
 import io.xpipe.app.browser.BrowserModel;
-import io.xpipe.app.comp.storage.store.StoreViewState;
+import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.core.*;
 import io.xpipe.app.issue.*;
 import io.xpipe.app.prefs.AppPrefs;

File: app/src/main/java/io/xpipe/app/core/mode/PlatformMode.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.core.mode;
 
-import io.xpipe.app.comp.storage.store.StoreViewState;
+import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.core.*;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -3,7 +3,7 @@
 import atlantafx.base.controls.Popover;
 import atlantafx.base.theme.Styles;
 import io.xpipe.app.comp.base.ButtonComp;
-import io.xpipe.app.comp.storage.store.*;
+import io.xpipe.app.comp.store.*;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataStoreProviders;
@@ -106,7 +106,7 @@ private Popover getPopover() {
                             comp.disable(new SimpleBooleanProperty(true));
                         }
                     });
-            var category = new DataStoreCategoryChoiceComp(selectedCategory).styleClass(Styles.LEFT_PILL);
+            var category = new DataStoreCategoryChoiceComp(initialCategory != null ? initialCategory.getRoot() : null, selectedCategory).styleClass(Styles.LEFT_PILL);
             var filter = new FilterComp(filterText)
                     .styleClass(Styles.CENTER_PILL)
                     .hgrow()

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreListChoiceComp.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.app.fxcomps.impl;
 
 import io.xpipe.app.comp.base.ListBoxViewComp;
-import io.xpipe.app.comp.storage.store.StoreCategoryWrapper;
+import io.xpipe.app.comp.store.StoreCategoryWrapper;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.storage.DataStoreEntryRef;

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryComp.java
Patch:
@@ -3,8 +3,8 @@
 import io.xpipe.app.comp.base.CountComp;
 import io.xpipe.app.comp.base.LazyTextFieldComp;
 import io.xpipe.app.comp.base.ListBoxViewComp;
-import io.xpipe.app.comp.storage.store.StoreCategoryWrapper;
-import io.xpipe.app.comp.storage.store.StoreViewState;
+import io.xpipe.app.comp.store.StoreCategoryWrapper;
+import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.Comp;

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryListComp.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.fxcomps.impl;
 
-import io.xpipe.app.comp.storage.store.StoreCategoryWrapper;
+import io.xpipe.app.comp.store.StoreCategoryWrapper;
 import io.xpipe.app.fxcomps.SimpleComp;
 import javafx.scene.layout.Region;
 

File: app/src/main/java/io/xpipe/app/storage/DataStoreCategory.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import io.xpipe.app.comp.storage.store.StoreSortMode;
+import io.xpipe.app.comp.store.StoreSortMode;
 import io.xpipe.core.util.JacksonMapper;
 import lombok.EqualsAndHashCode;
 import lombok.NonNull;

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.storage;
 
-import io.xpipe.app.comp.storage.store.StoreSortMode;
+import io.xpipe.app.comp.store.StoreSortMode;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;

File: app/src/main/java/io/xpipe/app/util/DataStoreFormatter.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.app.util;
 
-import io.xpipe.app.comp.storage.store.StoreEntryWrapper;
+import io.xpipe.app.comp.store.StoreEntryWrapper;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.xpipe.app.comp.base.ListSelectorComp;
 import io.xpipe.app.comp.base.MultiStepComp;
-import io.xpipe.app.comp.storage.store.StoreViewState;
+import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.core.AppWindowHelper;
 import io.xpipe.app.ext.ScanProvider;

File: app/src/main/java/module-info.java
Patch:
@@ -37,7 +37,6 @@
     exports io.xpipe.app.browser.action;
     exports io.xpipe.app.browser;
     exports io.xpipe.app.browser.icon;
-    exports io.xpipe.app.comp.storage.store;
 
     requires com.sun.jna;
     requires com.sun.jna.platform;

File: ext/base/src/main/java/io/xpipe/ext/base/action/XPipeUrlAction.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.ext.base.action;
 
-import io.xpipe.app.comp.storage.store.StoreViewState;
+import io.xpipe.app.comp.store.StoreViewState;
 import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStorage;
@@ -30,7 +30,7 @@ public boolean requiresJavaFXPlatform() {
 
         @Override
         public void execute() throws Exception {
-            actionProvider.getDataStoreCallSite().createAction(entry.getStore().asNeeded()).execute();
+            actionProvider.getDataStoreCallSite().createAction(entry.ref()).execute();
         }
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/script/SimpleScriptStore.java
Patch:
@@ -56,12 +56,12 @@ public List<DataStoreEntryRef<ScriptStore>> getEffectiveScripts() {
     }
 
     public void queryFlattenedScripts(LinkedHashSet<SimpleScriptStore> all) {
+        all.add(this);
         getEffectiveScripts().stream()
                 .filter(scriptStoreDataStoreEntryRef -> !all.contains(scriptStoreDataStoreEntryRef.getStore()))
                 .forEach(scriptStoreDataStoreEntryRef -> {
                     scriptStoreDataStoreEntryRef.getStore().queryFlattenedScripts(all);
                 });
-        all.add(this);
     }
 
     @Getter

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -7,6 +7,7 @@
 import io.xpipe.app.util.BooleanScope;
 import io.xpipe.app.util.TerminalHelper;
 import io.xpipe.app.util.ThreadHelper;
+import io.xpipe.core.process.ProcessControlProvider;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.process.ShellDialects;
 import io.xpipe.core.store.*;
@@ -391,8 +392,8 @@ public void openTerminalAsync(String directory) {
                 if (entry.getStore() instanceof ShellStore s) {
                     var connection = ((ConnectionFileSystem) fileSystem).getShellControl();
                     var name = directory + " - " + entry.get().getName();
-                    TerminalHelper.open(entry.getEntry(), name, s.control()
-                            .initWith(connection.getShellDialect().getCdCommand(directory)));
+                    var toOpen = ProcessControlProvider.get().withDefaultScripts(s.control());
+                    TerminalHelper.open(entry.getEntry(), name, toOpen.initWith(connection.getShellDialect().getCdCommand(directory)));
                 }
             });
         });

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryListStatusComp.java
Patch:
@@ -75,7 +75,7 @@ private Region createGroupListFilter() {
     }
 
     private Region createButtons() {
-        var menu = new MenuButton(AppI18n.get("addConnections"), new FontIcon("mdi2p-plus-box-outline"));
+        var menu = new MenuButton(AppI18n.get("addConnections"), new FontIcon("mdi2p-plus-thick"));
         AppFont.medium(menu);
         GrowAugment.create(true, false).augment(menu);
         StoreCreationMenu.addButtons(menu);

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreSectionMiniComp.java
Patch:
@@ -62,7 +62,7 @@ public CompStructure<VBox> createBase() {
 
             expanded =
                     new SimpleBooleanProperty(section.getWrapper().getExpanded().get()
-                            && section.getAllChildren().size() > 0);
+                            && section.getShownChildren().size() > 0);
             var button = new IconButtonComp(
                             Bindings.createStringBinding(
                                     () -> expanded.get() ? "mdal-keyboard_arrow_down" : "mdal-keyboard_arrow_right",

File: ext/base/src/main/java/io/xpipe/ext/base/browser/PasteAction.java
Patch:
@@ -45,8 +45,7 @@ public Node getIcon(OpenFileSystemModel model, List<BrowserEntry> entries) {
 
     @Override
     public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return entries.size() < 2
-                && entries.stream().allMatch(entry -> entry.getRawFileEntry().getKind() == FileKind.DIRECTORY);
+        return (entries.size() == 1 && entries.stream().allMatch(entry -> entry.getRawFileEntry().getKind() == FileKind.DIRECTORY)) || entries.stream().allMatch(entry -> entry.getRawFileEntry().getKind() == FileKind.FILE);
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryComp.java
Patch:
@@ -380,7 +380,9 @@ protected ContextMenu createContextMenu() {
         }
 
         var del = new MenuItem(AppI18n.get("remove"), new FontIcon("mdal-delete_outline"));
-        del.disableProperty().bind(wrapper.getDeletable().not());
+        del.disableProperty().bind(Bindings.createBooleanBinding(() -> {
+            return !wrapper.getDeletable().get() && !AppPrefs.get().developerDisableGuiRestrictions().get();
+        }, wrapper.getDeletable(), AppPrefs.get().developerDisableGuiRestrictions()));
         del.setOnAction(event -> wrapper.delete());
         contextMenu.getItems().add(del);
 

File: app/src/main/java/io/xpipe/app/core/AppGreetings.java
Patch:
@@ -6,6 +6,7 @@
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
 import io.xpipe.app.issue.ErrorEvent;
+import io.xpipe.app.util.Hyperlinks;
 import io.xpipe.app.util.MarkdownHelper;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.geometry.Insets;
@@ -110,9 +111,7 @@ public static void showIfNeeded() {
                                             temp,
                                             MarkdownHelper.toHtml(Files.readString(file), UnaryOperator.identity()));
                                 });
-                                App.getApp()
-                                        .getHostServices()
-                                        .showDocument(temp.toUri().toString());
+                                Hyperlinks.open(temp.toUri().toString());
                             } catch (IOException e) {
                                 ErrorEvent.fromThrowable(e).handle();
                             }

File: app/src/main/java/io/xpipe/app/util/Hyperlinks.java
Patch:
@@ -7,6 +7,7 @@ public class Hyperlinks {
     public static final String WEBSITE = "https://xpipe.io";
     public static final String DOCUMENTATION = "https://docs.xpipe.io";
     public static final String GITHUB = "https://github.com/xpipe-io/xpipe";
+    public static final String ROADMAP = "https://xpipe.kampsite.co/";
     public static final String PRIVACY = "https://github.com/xpipe-io/xpipe/blob/master/PRIVACY.md";
     public static final String TOS = "https://github.com/xpipe-io/xpipe/blob/master/app/src/main/resources/io/xpipe/app/resources/misc/tos.md";
     public static final String SECURITY = "https://github.com/xpipe-io/xpipe/blob/master/SECURITY.md";

File: ext/base/src/main/java/io/xpipe/ext/base/script/SimpleScriptStoreProvider.java
Patch:
@@ -145,7 +145,7 @@ public GuiDialog guiDialog(DataStoreEntry entry, Property<DataStore> store) {
                 .nonNull()
                 .name("scriptContents")
                 .description("scriptContentsDescription")
-                .longDescription("proc:environmentScript")
+                .longDescription("base:script")
                 .addComp(
                         new IntegratedTextAreaComp(commandProp, false, "commands", Bindings.createStringBinding(() -> {
                             return dialect.getValue() != null

File: app/src/main/java/io/xpipe/app/browser/BrowserClipboard.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.app.browser;
 
+import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.store.FileSystem;
 import io.xpipe.core.util.FailableRunnable;
@@ -56,7 +57,8 @@ public void run() throws Throwable {
                             }
 
                             currentCopyClipboard.setValue(new Instance(UUID.randomUUID(), null, entries));
-                        } catch (IllegalStateException ignored) {
+                        } catch (Exception e) {
+                            ErrorEvent.fromThrowable(e).expected().omit().handle();
                         }
                     }
                 }));

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryListStatusComp.java
Patch:
@@ -20,7 +20,7 @@
 import javafx.scene.layout.*;
 import org.kordamp.ikonli.javafx.FontIcon;
 
-public class StoreEntryListSideComp extends SimpleComp {
+public class StoreEntryListStatusComp extends SimpleComp {
 
     private Region createGroupListHeader() {
         var label = new Label();

File: app/src/main/java/io/xpipe/app/fxcomps/impl/StoreCategoryComp.java
Patch:
@@ -58,7 +58,7 @@ protected Region createSimple() {
         var name = new LazyTextFieldComp(category.nameProperty())
                 .apply(struc -> {
                     struc.get().prefWidthProperty().unbind();
-                    struc.get().setPrefWidth(100);
+                    struc.get().setPrefWidth(150);
                     struc.getTextField().minWidthProperty().bind(struc.get().widthProperty());
                 })
                 .styleClass("name")

File: app/src/main/java/io/xpipe/app/util/FixedHierarchyStore.java
Patch:
@@ -1,12 +1,13 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.storage.DataStoreEntry;
+import io.xpipe.app.storage.DataStoreEntryRef;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.store.FixedChildStore;
 
-import java.util.Map;
+import java.util.List;
 
 public interface FixedHierarchyStore extends DataStore {
 
-    Map<String, FixedChildStore> listChildren(DataStoreEntry self) throws Exception;
+    List<? extends DataStoreEntryRef<? extends FixedChildStore>> listChildren(DataStoreEntry self) throws Exception;
 }

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -109,7 +109,7 @@ public static String createExecScript(ShellDialect type, ShellControl processCon
         var fileName = "exec-" + getScriptId();
         var temp = processControl.getSubTemporaryDirectory();
         var file = FileNames.join(temp, fileName + "." + type.getScriptFileEnding());
-        return createExecScript(processControl.getShellDialect(), processControl, file, content);
+        return createExecScript(type, processControl, file, content);
     }
 
     @SneakyThrows

File: app/src/main/java/io/xpipe/app/update/XPipeDistributionType.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.app.core.AppCache;
 import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.issue.ErrorEvent;
+import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.util.XPipeSession;
 import io.xpipe.core.store.LocalStore;
 import io.xpipe.core.process.OsType;
@@ -58,6 +59,7 @@ public static XPipeDistributionType get() {
 
         type = det;
         AppCache.update("dist", type.getId());
+        TrackEvent.withInfo("Determined distribution type").tag("type",type.getId()).handle();
         return type;
     }
 

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -25,6 +25,8 @@ default boolean hasLocalSystemAccess() {
 
     ShellControl getMachineRootSession();
 
+    ShellControl withoutLicenseCheck();
+
     String getOsName();
 
     UUID getSystemId();

File: app/src/main/java/io/xpipe/app/issue/GuiErrorHandler.java
Patch:
@@ -31,6 +31,7 @@ private void handleGui(ErrorEvent event) {
 
         if (event.getThrowable() instanceof LicenseRequiredException lex) {
             LicenseProvider.get().showLicenseAlert(lex);
+            event.setShouldSendDiagnostics(true);
         } else {
             ErrorHandlerComp.showAndTryWait(event, true);
         }

File: app/src/main/java/io/xpipe/app/util/LicenseRequiredException.java
Patch:
@@ -12,7 +12,7 @@ public class LicenseRequiredException extends RuntimeException {
     LicenseType minLicense;
 
     public LicenseRequiredException(String featureName, boolean plural, LicenseType minLicense) {
-        super(featureName + " are only supported with a " + minLicense.name().toLowerCase() + " license");
+        super(featureName + (plural ? " are" : " is") + " only supported with a " + minLicense.name().toLowerCase() + " license");
         this.featureName = featureName;
         this.plural = plural;
         this.minLicense = minLicense;

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -23,7 +23,7 @@ public static void open(DataStoreEntry entry, String title, ProcessControl cc) t
             throw ErrorEvent.unreportable(new IllegalStateException(AppI18n.get("noTerminalSet")));
         }
 
-        var color = DataStorage.get().getRootForEntry(entry).getColor();
+        var color = entry != null ? DataStorage.get().getRootForEntry(entry).getColor() : null;
         var prefix = entry != null && color != null && type.supportsColoredTitle()
                 ? color.getEmoji() + " "
                 : "";

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -9,6 +9,7 @@
 public class ShellDialects {
 
     public static final List<ShellDialect> ALL = new ArrayList<>();
+    public static ShellDialect OPNSENSE;
     public static ShellDialect POWERSHELL;
     public static ShellDialect POWERSHELL_CORE;
     public static ShellDialect CMD;
@@ -31,6 +32,7 @@ public void init(ModuleLayer layer) {
             CMD = byName("cmd");
             POWERSHELL = byName("powershell");
             POWERSHELL_CORE = byName("pwsh");
+            OPNSENSE = byName("opnsense");
             FISH = byName("fish");
             DASH = byName("dash");
             BASH = byName("bash");

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreSectionComp.java
Patch:
@@ -92,6 +92,7 @@ public CompStructure<VBox> createBase() {
                     struc.get().getStyleClass().removeIf(s -> Arrays.stream(DataStoreColor.values())
                             .anyMatch(dataStoreColor -> dataStoreColor.getId().equals(s)));
                     struc.get().getStyleClass().remove("none");
+                    struc.get().getStyleClass().add("color-box");
                     if (val != null) {
                         struc.get().getStyleClass().add(val.getId());
                     } else {

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -218,7 +218,7 @@ public String getName() {
         @Override
         public Map<String, String> getProperties(ShellControl pc) throws Exception {
             try (CommandControl c =
-                    pc.subShell(ShellDialects.BASH).command("sw_vers").start()) {
+                    pc.command("sw_vers").start()) {
                 var text = c.readStdoutOrThrow();
                 return PropertiesFormatsParser.parse(text, ":");
             }

File: app/src/main/java/io/xpipe/app/exchange/LaunchExchangeImpl.java
Patch:
@@ -15,7 +15,7 @@ public class LaunchExchangeImpl extends LaunchExchange
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
         var store = getStoreEntryById(msg.getId(), false);
         if (store.getStore() instanceof LaunchableStore s) {
-            var command = s.prepareLaunchCommand(store.getName());
+            var command = s.prepareLaunchCommand().prepareTerminalOpen(store.getName());
             return Response.builder().command(split(command)).build();
         }
 

File: app/src/main/java/io/xpipe/app/prefs/TroubleshootComp.java
Patch:
@@ -69,7 +69,7 @@ private Comp<?> createActions() {
                                                 sc.executeSimpleCommand(
                                                         ScriptHelper.createDetachCommand(sc, "\"" + script + "\""));
                                             } else {
-                                                TerminalHelper.open("XPipe Debug", "\"" + script + "\"");
+                                                TerminalHelper.open("XPipe Debug", LocalStore.getShell().command("\"" + script + "\""));
                                             }
                                         }
                                     });

File: app/src/main/java/io/xpipe/app/util/ApplicationHelper.java
Patch:
@@ -40,7 +40,7 @@ public static boolean isInPath(ShellControl processControl, String executable) t
                 processControl.getShellDialect().getWhichCommand(executable));
     }
 
-    public static void isInPath(
+    public static void checkIsInPath(
             ShellControl processControl, String executable, String displayName, DataStoreEntry connection)
             throws Exception {
         if (!isInPath(processControl, executable)) {

File: core/src/main/java/io/xpipe/core/store/LaunchableStore.java
Patch:
@@ -1,10 +1,12 @@
 package io.xpipe.core.store;
 
+import io.xpipe.core.process.ProcessControl;
+
 public interface LaunchableStore extends DataStore {
 
     default boolean canLaunch() {
         return true;
     }
 
-    String prepareLaunchCommand(String displayName) throws Exception;
+    ProcessControl prepareLaunchCommand() throws Exception;
 }

File: core/src/main/java/io/xpipe/core/store/ShellStore.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.core.store;
 
 import io.xpipe.core.process.OsType;
+import io.xpipe.core.process.ProcessControl;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.process.ShellDialect;
 
@@ -18,8 +19,8 @@ default FileSystem createFileSystem() {
     }
 
     @Override
-    default String prepareLaunchCommand(String displayName) throws Exception {
-        return control().prepareTerminalOpen(displayName);
+    default ProcessControl prepareLaunchCommand() throws Exception {
+        return control();
     }
 
     default ShellDialect getShellType() {

File: ext/base/src/main/java/io/xpipe/ext/base/action/XPipeUrlAction.java
Patch:
@@ -48,7 +48,7 @@ public boolean requiresJavaFXPlatform() {
         public void execute() throws Exception {
             var storeName = entry.getName();
             if (entry.getStore() instanceof LaunchableStore s) {
-                String command = s.prepareLaunchCommand(storeName);
+                var command = s.prepareLaunchCommand();
                 if (command == null) {
                     return;
                 }

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenTerminalAction.java
Patch:
@@ -25,7 +25,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
         if (model.getInOverview().get()) {
             TerminalHelper.open(
                     model.getName(),
-                    model.getFileSystem().getShell().orElseThrow().prepareTerminalOpen(model.getName()));
+                    model.getFileSystem().getShell().orElseThrow());
             return;
         }
 

File: app/src/main/java/io/xpipe/app/comp/base/StoreToggleComp.java
Patch:
@@ -10,9 +10,11 @@
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.scene.layout.Region;
+import lombok.AllArgsConstructor;
 
 import java.util.function.Consumer;
 
+@AllArgsConstructor
 public class StoreToggleComp extends SimpleComp {
 
     private final String nameKey;

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryWrapper.java
Patch:
@@ -12,6 +12,7 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.*;
 import javafx.beans.value.ObservableValue;
+import javafx.collections.FXCollections;
 import lombok.Getter;
 
 import java.time.Duration;
@@ -34,8 +35,8 @@ public class StoreEntryWrapper {
     private final Property<ActionProvider.DefaultDataStoreCallSite<?>> defaultActionProvider;
     private final BooleanProperty deletable = new SimpleBooleanProperty();
     private final BooleanProperty expanded = new SimpleBooleanProperty();
-    private final Property<StoreCategoryWrapper> category = new SimpleObjectProperty<>();
     private final Property<Object> persistentState = new SimpleObjectProperty<>();
+    private final MapProperty<String, Object> cache = new SimpleMapProperty<>(FXCollections.observableHashMap());
 
     public StoreEntryWrapper(DataStoreEntry entry) {
         this.entry = entry;
@@ -144,6 +145,7 @@ public void update() {
         expanded.setValue(entry.isExpanded());
         observing.setValue(entry.isObserving());
         persistentState.setValue(entry.getStorePersistentState());
+        cache.putAll(entry.getStoreCache());
 
         inRefresh.setValue(entry.isInRefresh());
         deletable.setValue(entry.getConfiguration().isDeletable()

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreSidebarComp.java
Patch:
@@ -2,8 +2,8 @@
 
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;
+import io.xpipe.app.fxcomps.impl.StoreCategoryListComp;
 import io.xpipe.app.fxcomps.impl.VerticalComp;
-import io.xpipe.app.util.FeatureProvider;
 import javafx.scene.layout.Priority;
 import javafx.scene.layout.Region;
 import javafx.scene.layout.VBox;
@@ -17,7 +17,7 @@ protected Region createSimple() {
         var sideBar = new VerticalComp(List.of(
                 new StoreEntryListSideComp(),
                 new StoreSortComp(),
-                FeatureProvider.get().organizationComp(),
+                new StoreCategoryListComp(),
                 Comp.of(() -> new Region()).styleClass("bar").styleClass("filler-bar")));
         sideBar.apply(struc -> struc.get().setFillWidth(true));
         sideBar.apply(s -> VBox.setVgrow(s.get().getChildren().get(2), Priority.ALWAYS));

File: app/src/main/java/io/xpipe/app/util/DataStoreCategoryChoiceComp.java
Patch:
@@ -50,7 +50,7 @@ protected void updateItem(StoreCategoryWrapper w, boolean empty) {
             textProperty().unbind();
             if (w != null) {
                 textProperty().bind(w.nameProperty());
-                setPadding(new Insets(6, 6, 6, 8 + (indent ? w.getDepth() * 6 : 0)));
+                setPadding(new Insets(6, 6, 6, 8 + (indent ? w.getDepth() * 8 : 0)));
             }
         }
     }

File: app/src/main/java/io/xpipe/app/util/FeatureProvider.java
Patch:
@@ -38,8 +38,6 @@ public boolean prioritizeLoading() {
 
     public abstract void init();
 
-    public abstract Comp<?> organizationComp();
-
     public abstract Comp<?> overviewPage();
 
     public abstract GitStorageHandler createStorageHandler();

File: ext/base/src/main/java/io/xpipe/ext/base/GroupStore.java
Patch:
@@ -5,7 +5,7 @@
 
 public interface GroupStore<T extends DataStore> extends DataStore {
 
-    DataStoreEntryRef<T> getParent();
+    DataStoreEntryRef<? extends T> getParent();
 
     @Override
     default void checkComplete() throws Exception {

File: ext/base/src/main/java/io/xpipe/ext/base/script/PredefinedScriptGroup.java
Patch:
@@ -7,7 +7,7 @@
 @Getter
 public enum PredefinedScriptGroup {
     CLINK("Clink", null),
-    STARSHIP("Starship", "Scripts to enable the starship shell extension");
+    STARSHIP("Starship", "Sets up and enables the starship shell prompt");
 
     private final String name;
     private final String description;

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -253,6 +253,7 @@ && getStoreCategoryIfPresent(dataStoreCategory.getParentCategory())
             if (!hasFixedLocal) {
                 var e = DataStoreEntry.createNew(
                         LOCAL_ID, DataStorage.DEFAULT_CATEGORY_UUID, "Local Machine", new LocalStore());
+                e.setDirectory(getStoresDir().resolve(LOCAL_ID.toString()));
                 e.setConfiguration(
                         StorageElement.Configuration.builder().deletable(false).build());
                 storeEntries.add(e);

File: app/src/main/java/io/xpipe/app/core/AppMainWindow.java
Patch:
@@ -176,8 +176,8 @@ private void applyState(WindowState state) {
         } else {
             stage.setX(310);
             stage.setY(178);
-            stage.setWidth(1300);
-            stage.setHeight(730);
+            stage.setWidth(1296);
+            stage.setHeight(759);
         }
     }
 
@@ -271,7 +271,7 @@ private void setupContent(Comp<?> content) {
             }
 
             if (AppProperties.get().isShowcase() && event.getCode().equals(KeyCode.F12)) {
-                var image = stage.getScene().getRoot().snapshot(null, null);
+                var image = stage.getScene().snapshot(null);
                 var awt = AppImages.toAwtImage(image);
                 var file = Path.of(System.getProperty("user.home"), "Desktop", "xpipe-screenshot.png");
                 try {

File: ext/base/src/main/java/io/xpipe/ext/base/action/LaunchAction.java
Patch:
@@ -96,8 +96,7 @@ public boolean isApplicable(LaunchableStore o) {
 
             @Override
             public ActionProvider.Action createAction(LaunchableStore store) {
-                return new Action(
-                        DataStorage.get().getStoreEntryIfPresent(store).orElseThrow());
+                return new Action(DataStorage.get().getStoreEntryIfPresent(store).orElseThrow());
             }
 
             @Override

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -131,7 +131,7 @@ public ReadOnlyIntegerProperty connectionTimeout() {
 
     // Window opacity
     // ==============
-    private final DoubleProperty windowOpacity = typed(new SimpleDoubleProperty(1.0), Boolean.class);
+    private final DoubleProperty windowOpacity = typed(new SimpleDoubleProperty(1.0), Double.class);
     private final DoubleField windowOpacityField =
             Field.ofDoubleType(windowOpacity).render(() -> {
                 var r = new DoubleSliderControl(0.3, 1.0, 2);

File: app/src/main/java/io/xpipe/app/browser/icon/IconVariant.java
Patch:
@@ -22,6 +22,6 @@ protected final String getIcon() {
             return lightIcon;
         }
 
-        return t.getTheme().isDarkMode() ? darkIcon : lightIcon;
+        return t.isDark() ? darkIcon : lightIcon;
     }
 }

File: app/src/main/java/io/xpipe/app/comp/base/MarkdownComp.java
Patch:
@@ -48,7 +48,7 @@ private String getHtml() {
     private WebView createWebView() {
         var wv = new WebView();
         wv.setPageFill(Color.TRANSPARENT);
-        var theme = AppPrefs.get() != null && AppPrefs.get().theme.getValue().getTheme().isDarkMode() ? "web/github-markdown-dark.css" : "web/github-markdown-light.css";
+        var theme = AppPrefs.get() != null && AppPrefs.get().theme.getValue().isDark() ? "web/github-markdown-dark.css" : "web/github-markdown-light.css";
         var url = AppResources.getResourceURL(AppResources.XPIPE_MODULE, theme)
                 .orElseThrow();
         wv.getEngine().setUserStyleSheetLocation(url.toString());

File: app/src/main/java/io/xpipe/app/core/AppResources.java
Patch:
@@ -63,8 +63,9 @@ public static void withResourceInLayer(
     }
 
     private static void withResource(String module, String file, FailableConsumer<Path, IOException> con) {
+        var path = module.startsWith("io.xpipe") ? module.replace('.', '/') + "/resources/" + file : file;
         try (var fs = openFileSystem(module)) {
-            var f = fs.getPath(module.replace('.', '/') + "/resources/" + file);
+            var f = fs.getPath(path);
             con.accept(f);
         } catch (IOException e) {
             ErrorEvent.fromThrowable(e).omitted(true).build().handle();

File: app/src/main/java/io/xpipe/app/fxcomps/impl/PrettyImageComp.java
Patch:
@@ -89,7 +89,7 @@ protected Region createSimple() {
 
 
         Consumer<String> update = val -> {
-            var fixed = val != null ? FileNames.getBaseName(val) + (AppPrefs.get().theme.get().getTheme().isDarkMode() ? "-dark" : "") + "." + FileNames.getExtension(val) : null;
+            var fixed = val != null ? FileNames.getBaseName(val) + (AppPrefs.get().theme.get().isDark() ? "-dark" : "") + "." + FileNames.getExtension(val) : null;
             image.set(fixed);
 
             if (val == null) {

File: app/src/main/java/io/xpipe/app/fxcomps/impl/PrettySvgComp.java
Patch:
@@ -85,7 +85,7 @@ protected Region createSimple() {
         stack.getChildren().add(node);
 
         Consumer<String> update = val -> {
-            var fixed = val != null ? FileNames.getBaseName(val) + (AppPrefs.get().theme.get().getTheme().isDarkMode() ? "-dark" : "") + "." + FileNames.getExtension(val) : null;
+            var fixed = val != null ? FileNames.getBaseName(val) + (AppPrefs.get().theme.get().isDark() ? "-dark" : "") + "." + FileNames.getExtension(val) : null;
             image.set(fixed);
         };
 

File: app/src/main/java/io/xpipe/app/issue/EventHandlerImpl.java
Patch:
@@ -49,6 +49,7 @@ public void handle(ErrorEvent ee) {
 
         // Don't block shutdown
         if (OperationMode.isInShutdown()) {
+            SentryErrorHandler.getInstance().handle(ee);
             handle(fromErrorEvent(ee));
             return;
         }

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -16,7 +16,7 @@ public class TerminalErrorHandler extends GuiErrorHandlerBase implements ErrorHa
     public void handle(ErrorEvent event) {
         log.handle(event);
 
-        if (!OperationMode.GUI.isSupported() || event.isOmitted()) {
+        if (!OperationMode.GUI.isSupported() || event.isOmitted() || OperationMode.isInShutdown()) {
             SentryErrorHandler.getInstance().handle(event);
             OperationMode.halt(1);
             return;

File: app/src/main/java/io/xpipe/app/browser/BrowserBookmarkList.java
Patch:
@@ -98,7 +98,7 @@ protected Region createSimple() {
                 new FilterComp(filterText).styleClass(Styles.RIGHT_PILL).hgrow().apply(struc -> {});
 
         var top = new HorizontalComp(List.of(category, filter.hgrow()))
-                .styleClass("top")
+                .styleClass("categories")
                 .apply(struc -> {
                     AppFont.medium(struc.get());
                     struc.get().setFillHeight(true);

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListComp.java
Patch:
@@ -475,7 +475,7 @@ protected void updateItem(String newName, boolean empty) {
 
             try (var ignored = new BusyProperty(updating)) {
                 super.updateItem(newName, empty);
-                if (empty || newName == null) {
+                if (empty || newName == null || getTableRow().getItem() == null) {
                     // Don't set image as that would trigger image comp update
                     // and cells are emptied on each change, leading to unnecessary changes
                     // img.set(null);

File: app/src/main/java/io/xpipe/app/test/DaemonExtensionTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.test;
 
 import io.xpipe.api.DataSource;
+import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.ext.XPipeServiceProviders;
 import io.xpipe.app.util.XPipeSession;
 import io.xpipe.beacon.BeaconDaemonController;
@@ -28,6 +29,7 @@ public static DataSource getSource(io.xpipe.core.source.DataSource<?> source) {
 
     @BeforeAll
     public static void setup() throws Exception {
+        AppProperties.init();
         JacksonMapper.initModularized(ModuleLayer.boot());
         XPipeServiceProviders.load(ModuleLayer.boot());
         XPipeSession.init(UUID.randomUUID());

File: app/src/main/java/io/xpipe/app/util/SecretManager.java
Patch:
@@ -34,7 +34,7 @@ public static boolean shouldCacheForPrompt(String prompt) {
             return false;
         }
 
-        return false;
+        return true;
     }
 
     public static SecretValue retrieve(SecretRetrievalStrategy strategy, String prompt, Object key) throws Exception {

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -45,9 +45,6 @@ public void start(Stage primaryStage) {
         }
 
         if (OsType.getLocal().equals(OsType.MACOS)) {
-            Desktop.getDesktop().setAboutHandler(e -> {
-                AppLayoutModel.get().selectSettings();
-            });
             Desktop.getDesktop().setPreferencesHandler(e -> {
                 AppLayoutModel.get().selectSettings();
             });

File: ext/base/src/main/java/io/xpipe/ext/base/browser/EditFileAction.java
Patch:
@@ -43,6 +43,7 @@ public boolean isActive(OpenFileSystemModel model, List<BrowserEntry> entries) {
 
     @Override
     public String getName(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return "Edit with " + AppPrefs.get().externalEditor().getValue().toTranslatedString();
+        var e = AppPrefs.get().externalEditor().getValue();
+        return "Edit with " + (e != null ? e.toTranslatedString() : "?");
     }
 }

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -89,6 +89,7 @@ private static void setup(String[] args) {
             AppState.init();
             XPipeSession.init(AppProperties.get().getBuildUuid());
             AppChecks.checkDirectoryPermissions();
+            AppChecks.checkTemp();
             AppLogs.init();
             AppProperties.logArguments(args);
             AppProperties.logSystemProperties();

File: app/src/main/java/io/xpipe/app/fxcomps/impl/IntFieldComp.java
Patch:
@@ -67,7 +67,7 @@ public CompStructure<TextField> createBase() {
         });
 
         text.textProperty().addListener((observableValue, oldValue, newValue) -> {
-            if (newValue == null || "".equals(newValue) || (minValue < 0 && "-".equals(newValue))) {
+            if (newValue == null || newValue.isEmpty() || (minValue < 0 && "-".equals(newValue)) || !newValue.matches("-?\\d+")) {
                 value.setValue(null);
                 return;
             }

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -109,7 +109,7 @@ public void launch(Path file) throws Exception {
         public void launch(Path file) throws Exception {
             var customCommand = AppPrefs.get().customEditorCommand().getValue();
             if (customCommand == null || customCommand.isBlank()) {
-                throw new IllegalStateException("No custom editor command specified");
+                throw ErrorEvent.unreportable(new IllegalStateException("No custom editor command specified"));
             }
 
             var format = customCommand.toLowerCase(Locale.ROOT).contains("$file") ? customCommand : customCommand + " $FILE";

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -445,7 +445,7 @@ public CustomType() {
         public void launch(String name, String file) throws Exception {
             var custom = AppPrefs.get().customTerminalCommand().getValue();
             if (custom == null || custom.isBlank()) {
-                throw new IllegalStateException("No custom terminal command specified");
+                throw ErrorEvent.unreportable(new IllegalStateException("No custom terminal command specified"));
             }
 
             var format = custom.toLowerCase(Locale.ROOT).contains("$cmd") ? custom : custom + " $CMD";

File: app/src/main/java/io/xpipe/app/util/FileOpener.java
Patch:
@@ -65,6 +65,7 @@ public static void openInTextEditor(String file) {
             ErrorEvent.fromThrowable(e)
                     .description("Unable to launch editor " + editor.toTranslatedString()
                             + ".\nMaybe try to use a different editor in the settings.")
+                    .unreportable()
                     .handle();
         }
     }

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.core.AppI18n;
+import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.core.process.CommandControl;
 
@@ -24,10 +25,10 @@ public static void open(String title, String command) throws Exception {
         try {
             type.launch(title, command);
         } catch (Exception ex) {
-            throw new IOException(
+            throw ErrorEvent.unreportable(new IOException(
                     "Unable to launch terminal " + type.toTranslatedString() + ": " + ex.getMessage()
                             + ".\nMaybe try to use a different terminal in the settings.",
-                    ex);
+                    ex));
         }
     }
 }

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -15,6 +15,7 @@ public interface CommandControl extends ProcessControl {
     int UNASSIGNED_EXIT_CODE = -1;
     int EXIT_TIMEOUT_EXIT_CODE = -2;
     int START_FAILED_EXIT_CODE = -3;
+    int INTERNAL_ERROR_EXIT_CODE = -4;
 
     enum TerminalExitMode {
         KEEP_OPEN,

File: core/src/main/java/io/xpipe/core/process/ProcessOutputException.java
Patch:
@@ -29,6 +29,7 @@ public static ProcessOutputException of(int exitCode, String... messages) {
                             + errorSuffix;
                     case CommandControl.EXIT_TIMEOUT_EXIT_CODE -> "Wait for process exit timed out" + errorSuffix;
                     case CommandControl.UNASSIGNED_EXIT_CODE -> "Process exited with unknown state. Did an external process interfere?" + errorSuffix;
+                    case CommandControl.INTERNAL_ERROR_EXIT_CODE -> "Process execution failed" + errorSuffix;
                     default -> "Process returned exit code " + exitCode + errorSuffix;
                 };
         return new ProcessOutputException(message, exitCode, combinedError);

File: app/src/main/java/io/xpipe/app/comp/base/ErrorOverlayComp.java
Patch:
@@ -29,7 +29,7 @@ protected Region createSimple() {
                 var comp = Comp.of(() -> {
                     var l = new TextArea();
                     l.textProperty().bind(PlatformThread.sync(text));
-                    l.setWrapText(false);
+                    l.setWrapText(true);
                     l.getStyleClass().add("error-overlay-comp");
                     l.setEditable(false);
                     return l;

File: app/src/main/java/io/xpipe/app/comp/store/GuiDsStoreCreator.java
Patch:
@@ -106,7 +106,7 @@ public static void showEdit(DataStoreEntry e) {
                 newE -> {
                     ThreadHelper.runAsync(() -> {
                         if (!DataStorage.get().getStoreEntries().contains(e)) {
-                            DataStorage.get().addStoreEntry(e);
+                            DataStorage.get().addStoreEntry(newE);
                         } else {
                             DataStorage.get().updateEntry(e, newE);
                         }

File: app/src/main/java/io/xpipe/app/browser/BrowserComp.java
Patch:
@@ -268,7 +268,7 @@ private Tab createTab(TabPane tabs, OpenFileSystemModel model) {
                         PlatformThread.sync(model.getBusy())));
 
         tab.setGraphic(label);
-        new FancyTooltipAugment<>(new SimpleStringProperty(model.getId() != null ? model.getId().toString() : null)).augment(label);
+        new FancyTooltipAugment<>(new SimpleStringProperty(model.getTooltip())).augment(label);
         GrowAugment.create(true, false).augment(new SimpleCompStructure<>(label));
         tab.setContent(new OpenFileSystemComp(model).createSimple());
         tab.setText(model.getName());

File: beacon/src/main/java/io/xpipe/beacon/BeaconClient.java
Patch:
@@ -33,12 +33,12 @@
 public class BeaconClient implements AutoCloseable {
 
     @Getter
-    private final Closeable base;
+    private final AutoCloseable base;
 
     private final InputStream in;
     private final OutputStream out;
 
-    private BeaconClient(Closeable base, InputStream in, OutputStream out) {
+    private BeaconClient(AutoCloseable base, InputStream in, OutputStream out) {
         this.base = base;
         this.in = in;
         this.out = out;
@@ -107,7 +107,7 @@ public static Optional<BeaconClient> tryConnect(ClientInformation information) {
     public void close() throws ConnectorException {
         try {
             base.close();
-        } catch (IOException ex) {
+        } catch (Exception ex) {
             throw new ConnectorException("Couldn't close client", ex);
         }
     }

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -1,13 +1,12 @@
 package io.xpipe.core.process;
 
-import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
 import java.util.concurrent.ExecutorService;
 
-public interface ProcessControl extends Closeable, AutoCloseable {
+public interface ProcessControl extends AutoCloseable {
 
     @FunctionalInterface
     interface ExceptionConverter {
@@ -37,7 +36,7 @@ interface ExceptionConverter {
     void write(byte[] b) throws IOException;
 
     @Override
-    void close() throws IOException;
+    void close() throws Exception;
 
     void kill() throws Exception;
 

File: core/src/main/java/io/xpipe/core/store/ConnectionFileSystem.java
Patch:
@@ -155,7 +155,7 @@ public void close() {
         // Since we are only closing, just swallow all exceptions
         try {
             shellControl.close();
-        } catch (IOException ignored) {
+        } catch (Exception ignored) {
         }
     }
 }

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -161,6 +161,8 @@ default boolean requiresScript(String content) {
 
     CommandControl deleteFileOrDirectory(ShellControl sc, String file);
 
+    String clearDisplayCommand();
+
     CommandControl createFileExistsCommand(ShellControl sc, String file);
 
     CommandControl symbolicLink(ShellControl sc, String linkFile, String targetFile);

File: app/src/main/java/io/xpipe/app/browser/BrowserComp.java
Patch:
@@ -268,7 +268,7 @@ private Tab createTab(TabPane tabs, OpenFileSystemModel model) {
                         PlatformThread.sync(model.getBusy())));
 
         tab.setGraphic(label);
-        new FancyTooltipAugment<>(new SimpleStringProperty(model.getName())).augment(label);
+        new FancyTooltipAugment<>(new SimpleStringProperty(model.getId() != null ? model.getId().toString() : null)).augment(label);
         GrowAugment.create(true, false).augment(new SimpleCompStructure<>(label));
         tab.setContent(new OpenFileSystemComp(model).createSimple());
         tab.setText(model.getName());

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreViewState.java
Patch:
@@ -37,7 +37,7 @@ public class StoreViewState {
     private StoreViewState() {
         var val = AppCache.getIfPresent("sortMode", String.class)
                 .flatMap(StoreSortMode::fromId)
-                .orElse(StoreSortMode.ALPHABETICAL_DESC);
+                .orElse(StoreSortMode.DATE_ASC);
         this.sortMode = new SimpleObjectProperty<>(val);
         this.sortMode.addListener((observable, oldValue, newValue) -> {
             AppCache.update("sortMode", newValue.getId());

File: app/src/main/java/io/xpipe/app/issue/ErrorEvent.java
Patch:
@@ -115,13 +115,13 @@ public static <T extends Throwable> T unreportableIfContains(T t, String... s) {
 
     public static <T extends Throwable> T unreportableIf(T t, boolean b) {
         if (b) {
-            // EVENT_BASES.put(t, ErrorEvent.fromThrowable(t).unreportable());
+            EVENT_BASES.put(t, ErrorEvent.fromThrowable(t).unreportable());
         }
         return t;
     }
 
     public static <T extends Throwable> T unreportable(T t) {
-        // EVENT_BASES.put(t, ErrorEvent.fromThrowable(t).unreportable());
+        EVENT_BASES.put(t, ErrorEvent.fromThrowable(t).unreportable());
         return t;
     }
 }

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -123,7 +123,7 @@ public WindowsType(String id, String executable) {
         protected Optional<Path> determineFromPath() {
             // Try to locate if it is in the Path
             try (var cc = LocalStore.getShell()
-                    .command(ShellDialects.getPlatformDefault().getWhichCommand("code.cmd"))
+                    .command(ShellDialects.getPlatformDefault().getWhichCommand(executable))
                     .start()) {
                 var out = cc.readStdoutDiscardErr();
                 var exit = cc.getExitCode();

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -125,7 +125,7 @@ public void launch(String name, String file) throws Exception {
         protected abstract String createCommand(ShellControl shellControl, String name, String path, String file);
     }
 
-    ExternalTerminalType TABBY_WINDOWS = new WindowsType("app.tabbyWindows", "tabby") {
+    ExternalTerminalType TABBY_WINDOWS = new WindowsType("app.tabbyWindows", "Tabby") {
 
         @Override
         protected String createCommand(ShellControl shellControl, String name, String path, String file) {

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -226,7 +226,7 @@ protected Path getStreamsDir() {
 
     public synchronized List<DataStore> getUsableStores() {
         return new ArrayList<>(getStoreEntries().stream()
-                .filter(entry -> !entry.isDisabled())
+                .filter(entry -> entry.getState().isUsable())
                 .map(DataStoreEntry::getStore)
                 .toList());
     }

File: app/src/main/java/io/xpipe/app/exchange/LaunchExchangeImpl.java
Patch:
@@ -19,6 +19,6 @@ public Response handleRequest(BeaconHandler handler, Request msg) throws Excepti
             return Response.builder().command(List.of(split.toStrings())).build();
         }
 
-        throw new IllegalArgumentException("Not launchable");
+        throw new IllegalArgumentException(store.getName() + " is not launchable");
     }
 }

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -6,7 +6,7 @@
 import io.xpipe.app.issue.*;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.storage.DataStorage;
-import io.xpipe.app.util.DefaultSecretValue;
+import io.xpipe.core.util.DefaultSecretValue;
 import io.xpipe.app.util.FileBridge;
 import io.xpipe.app.util.LockedSecretValue;
 import io.xpipe.core.impl.LocalStore;
@@ -36,7 +36,7 @@ public void onSwitchTo() throws Throwable {
         AppExtensionManager.init(true);
         JacksonMapper.initModularized(AppExtensionManager.getInstance().getExtendedLayer());
         JacksonMapper.configure(objectMapper -> {
-            objectMapper.registerSubtypes(LockedSecretValue.class, DefaultSecretValue.class);
+            objectMapper.registerSubtypes(LockedSecretValue.class);
         });
         // Load translations before storage initialization to localize store error messages
         // Also loaded before antivirus alert to localize that

File: app/src/main/java/io/xpipe/app/exchange/AskpassExchangeImpl.java
Patch:
@@ -15,6 +15,6 @@ public Response handleRequest(BeaconHandler handler, Request msg) {
         }
 
         var r = AskpassAlert.query(msg.getPrompt(), msg.getRequest(), msg.getStoreId(), msg.getSubId());
-        return Response.builder().value(r != null ? r.getSecretValue() : null).build();
+        return Response.builder().value(r != null ? r.inPlace() : null).build();
     }
 }

File: app/src/main/java/io/xpipe/app/util/SecretHelper.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.prefs.AppPrefs;
+import io.xpipe.core.util.DefaultSecretValue;
 import io.xpipe.core.util.EncryptedSecretValue;
 
 public class SecretHelper {

File: beacon/src/main/java/io/xpipe/beacon/exchange/AskpassExchange.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.xpipe.beacon.RequestMessage;
 import io.xpipe.beacon.ResponseMessage;
+import io.xpipe.core.util.SecretValue;
 import lombok.Builder;
 import lombok.NonNull;
 import lombok.Value;
@@ -35,6 +36,6 @@ public static class Request implements RequestMessage {
     @Builder
     @Value
     public static class Response implements ResponseMessage {
-        String value;
+        SecretValue value;
     }
 }

File: core/src/main/java/io/xpipe/core/util/AesSecretValue.java
Patch:
@@ -3,7 +3,6 @@
 import lombok.EqualsAndHashCode;
 import lombok.SneakyThrows;
 import lombok.experimental.SuperBuilder;
-import lombok.extern.jackson.Jacksonized;
 
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
@@ -15,9 +14,8 @@
 import java.util.Random;
 
 @SuperBuilder
-@Jacksonized
 @EqualsAndHashCode(callSuper = true)
-public class AesSecretValue extends EncryptedSecretValue {
+public abstract class AesSecretValue extends EncryptedSecretValue {
 
     private static final String ENCRYPT_ALGO = "AES/GCM/NoPadding";
     private static final int TAG_LENGTH_BIT = 128;

File: core/src/main/java/io/xpipe/core/util/CoreJacksonModule.java
Patch:
@@ -36,6 +36,7 @@ public class CoreJacksonModule extends SimpleModule {
     @Override
     public void setupModule(SetupContext context) {
         context.registerSubtypes(
+                new NamedType(DefaultSecretValue.class),
                 new NamedType(StdinDataStore.class),
                 new NamedType(StdoutDataStore.class),
                 new NamedType(LocalDirectoryDataStore.class),

File: core/src/main/java/io/xpipe/core/util/EncryptedSecretValue.java
Patch:
@@ -3,16 +3,14 @@
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.experimental.SuperBuilder;
-import lombok.extern.jackson.Jacksonized;
 
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.StandardCharsets;
 
 @SuperBuilder
-@Jacksonized
 @EqualsAndHashCode
-public class EncryptedSecretValue implements SecretValue {
+public abstract class EncryptedSecretValue implements SecretValue {
 
     @Getter
     String encryptedValue;

File: core/src/main/java/io/xpipe/core/util/SecretValue.java
Patch:
@@ -9,6 +9,8 @@
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface SecretValue {
 
+    SecretValue inPlace();
+
     static String toBase64e(byte[] b) {
         var base64 = Base64.getEncoder().encodeToString(b);
         return base64.replace("/", "-");

File: ext/base/src/main/java/io/xpipe/ext/base/action/AddStoreAction.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStoreEntry;
-import io.xpipe.app.util.DefaultSecretValue;
+import io.xpipe.core.util.DefaultSecretValue;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.util.JacksonMapper;
 import lombok.Value;

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryComp.java
Patch:
@@ -153,6 +153,7 @@ protected Comp<?> createName() {
         name.apply(struc -> struc.get().setTextOverrun(OverrunStyle.CENTER_ELLIPSIS))
                 .apply(struc -> struc.get().setPadding(new Insets(5, 5, 5, 0)));
         name.apply(s -> AppFont.header(s.get()));
+        name.styleClass("name");
         return name;
     }
 

File: app/src/main/java/io/xpipe/app/fxcomps/util/Shortcuts.java
Patch:
@@ -39,14 +39,14 @@ public void handle(KeyEvent ke) {
             }
 
             if (scene.get() != null) {
-                scene.get().removeEventHandler(KeyEvent.KEY_PRESSED, filter);
+                scene.get().removeEventFilter(KeyEvent.KEY_PRESSED, filter);
                 SHORTCUTS.remove(region);
                 scene.set(null);
             }
 
             if (s != null) {
                 scene.set(s);
-                s.addEventHandler(KeyEvent.KEY_PRESSED, filter);
+                s.addEventFilter(KeyEvent.KEY_PRESSED, filter);
             }
         });
     }

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -50,7 +50,7 @@ private static void createMacOSShortcut(String target, String name) throws Excep
         var base = DesktopHelper.getDesktopDirectory().resolve(name + ".app");
         var content = String.format(
                 """
-                        #!/bin/bash
+                        #!/usr/bin/env sh
                         "%s" open %s
                         """,
                 exec, target);

File: app/src/main/java/io/xpipe/app/comp/base/StoreToggleComp.java
Patch:
@@ -32,10 +32,11 @@ protected Region createSimple() {
         var visible = BindingsHelper.persist(Bindings.createBooleanBinding(
                 () -> {
                     return (section.getWrapper().getState().getValue() == DataStoreEntry.State.COMPLETE_AND_VALID
-                                    || section.getWrapper().getState().getValue() == DataStoreEntry.State.VALIDATING)
+                                    || section.getWrapper().getValidating().get())
                             && section.getShowDetails().get();
                 },
                 section.getWrapper().getState(),
+                section.getWrapper().getValidating(),
                 section.getShowDetails()));
         var t = new NamedToggleComp(value, AppI18n.observable(nameKey))
                 .visible(visible)

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryComp.java
Patch:
@@ -83,7 +83,7 @@ protected final Region createSimple() {
         });
         new ContextMenuAugment<>(() -> this.createContextMenu()).augment(new SimpleCompStructure<>(button));
 
-        var loading = new LoadingOverlayComp(Comp.of(() -> button), wrapper.getLoading());
+        var loading = new LoadingOverlayComp(Comp.of(() -> button), wrapper.getValidating());
         var region = loading.createRegion();
         return region;
     }

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryWrapper.java
Patch:
@@ -26,7 +26,7 @@ public class StoreEntryWrapper implements StorageFilter.Filterable {
     private final DataStoreEntry entry;
     private final Property<Instant> lastAccess;
     private final BooleanProperty disabled = new SimpleBooleanProperty();
-    private final BooleanProperty loading = new SimpleBooleanProperty();
+    private final BooleanProperty validating = new SimpleBooleanProperty();
     private final Property<DataStoreEntry.State> state = new SimpleObjectProperty<>();
     private final StringProperty information = new SimpleStringProperty();
     private final StringProperty summary = new SimpleStringProperty();
@@ -96,7 +96,7 @@ public void update() {
         expanded.setValue(entry.isExpanded());
         information.setValue(entry.getInformation());
 
-        loading.setValue(entry.getState() == DataStoreEntry.State.VALIDATING);
+        validating.setValue(entry.isValidating());
         if (entry.getState().isUsable()) {
             try {
                 summary.setValue(entry.getProvider().toSummaryString(entry.getStore(), 50));

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreSection.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.util.BindingsHelper;
 import io.xpipe.app.storage.DataStorage;
+import io.xpipe.app.storage.DataStoreEntry;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.value.ObservableBooleanValue;
@@ -68,7 +69,7 @@ public static StoreSection createTopLevel() {
     }
 
     private static StoreSection create(StoreEntryWrapper e, int depth) {
-        if (!e.getEntry().getState().isUsable()) {
+        if (e.getEntry().getState() == DataStoreEntry.State.LOAD_FAILED) {
             return new StoreSection(e, FXCollections.observableArrayList(), depth);
         }
 

File: app/src/main/java/io/xpipe/app/core/AppSocketServer.java
Patch:
@@ -14,6 +14,7 @@
 import io.xpipe.beacon.exchange.data.ClientErrorMessage;
 import io.xpipe.beacon.exchange.data.ServerErrorMessage;
 import io.xpipe.core.util.Deobfuscator;
+import io.xpipe.core.util.FailableRunnable;
 import io.xpipe.core.util.JacksonMapper;
 
 import java.io.IOException;
@@ -132,12 +133,12 @@ private boolean performExchange(Socket clientSocket, int id) throws Exception {
         if (prov.isEmpty()) {
             throw new IllegalArgumentException("Unknown request id: " + req.getClass());
         }
-        AtomicReference<BeaconClient.FailableRunnable<Exception>> post = new AtomicReference<>();
+        AtomicReference<FailableRunnable<Exception>> post = new AtomicReference<>();
         var res = prov.get()
                 .handleRequest(
                         new BeaconHandler() {
                             @Override
-                            public void postResponse(BeaconClient.FailableRunnable<Exception> r) {
+                            public void postResponse(FailableRunnable<Exception> r) {
                                 post.set(r);
                             }
 

File: app/src/main/java/io/xpipe/app/update/AppDownloads.java
Patch:
@@ -33,8 +33,7 @@ private static GHRepository getRepository() throws IOException {
                 .withRateLimitHandler(RateLimitHandler.FAIL)
                 .withAuthorizationProvider(AuthorizationProvider.ANONYMOUS)
                 .build();
-        repository =
-                github.getRepository(AppProperties.get().isStaging() ? "xpipe-io/xpipe_staging" : "xpipe-io/xpipe");
+        repository = github.getRepository(AppProperties.get().isStaging() ? "xpipe-io/xpipe_staging" : "xpipe-io/xpipe");
         return repository;
     }
 

File: app/src/main/java/io/xpipe/app/update/UpdateHandler.java
Patch:
@@ -137,7 +137,7 @@ public final AvailableRelease refreshUpdateCheckSilent() {
         try {
             return refreshUpdateCheck();
         } catch (Exception ex) {
-            ErrorEvent.fromThrowable(ex).omit().handle();
+            ErrorEvent.fromThrowable(ex).discard().handle();
             return null;
         }
     }

File: beacon/src/main/java/io/xpipe/beacon/BeaconHandler.java
Patch:
@@ -1,5 +1,7 @@
 package io.xpipe.beacon;
 
+import io.xpipe.core.util.FailableRunnable;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -14,7 +16,7 @@ public interface BeaconHandler {
      *
      * @param r the runnable to execute
      */
-    void postResponse(BeaconClient.FailableRunnable<Exception> r);
+    void postResponse(FailableRunnable<Exception> r);
 
     /**
      * Prepares to attach a body to a response.

File: core/src/main/java/io/xpipe/core/store/FixedHierarchyStore.java
Patch:
@@ -4,5 +4,5 @@
 
 public interface FixedHierarchyStore extends DataStore {
 
-    Map<String, DataStore> listChildren() throws Exception;
+    Map<String, FixedChildStore> listChildren() throws Exception;
 }

File: app/src/main/java/io/xpipe/app/core/AppMainWindow.java
Patch:
@@ -148,7 +148,7 @@ private void setupListeners() {
             Stage.getWindows().stream().filter(w -> !w.equals(stage)).toList().forEach(w -> w.fireEvent(e));
             stage.close();
 
-            AppPrefs.get().closeBehaviour().getValue().getExit().run();
+            AppPrefs.get().closeBehaviour().getValue().run();
             e.consume();
         });
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -194,7 +194,7 @@ protected CommandBuilder toCommand(String name, String file) {
             // Note for later: When debugging konsole launches, it will always open as a child process of
             // IntelliJ/XPipe even though we try to detach it.
             // This is not the case for production where it works as expected
-            return CommandBuilder.of().add("--new-tab", "-e").add("--").addFile(file);
+            return CommandBuilder.of().add("--new-tab", "-e").addFile(file);
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -22,7 +22,7 @@ public static void open(String title, String command) throws Exception {
         command = ScriptHelper.createLocalExecScript(command);
 
         try {
-            type.launch(title, command, false);
+            type.launch(title, command);
         } catch (Exception ex) {
             throw new IOException(
                     "Unable to launch terminal " + type.toTranslatedString() + ": " + ex.getMessage()

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListCompEntry.java
Patch:
@@ -200,7 +200,7 @@ public void run() {
                     return;
                 }
 
-                model.getFileSystemModel().cdSync(item.getRawFileEntry().getPath());
+                model.getFileSystemModel().cdAsync(item.getRawFileEntry().getPath());
             }
         };
         DROP_TIMER.schedule(activeTask, 1000);

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListModel.java
Patch:
@@ -128,7 +128,7 @@ && getMode().equals(BrowserModel.Mode.SINGLE_FILE_CHOOSER)) {
         }
 
         if (entry.getRawFileEntry().resolved().getKind() == FileKind.DIRECTORY) {
-            fileSystemModel.cdSync(entry.getRawFileEntry().resolved().getPath());
+            fileSystemModel.cdAsync(entry.getRawFileEntry().resolved().getPath());
         }
     }
 }

File: app/src/main/java/io/xpipe/app/browser/BrowserFileOverviewComp.java
Patch:
@@ -31,7 +31,7 @@ protected Region createSimple() {
                 var icon = BrowserIcons.createIcon(entry);
                 var l = new Button(entry.getPath(), icon.createRegion());
                 l.setOnAction(event -> {
-                    model.cdSync(entry.getPath());
+                    model.cdAsync(entry.getPath());
                     event.consume();
                 });
                 l.setAlignment(Pos.CENTER_LEFT);

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemComp.java
Patch:
@@ -43,7 +43,7 @@ protected Region createSimple() {
 
     private Region createContent() {
         var overview = new Button(null, new FontIcon("mdi2m-monitor"));
-        overview.setOnAction(e -> model.cdSync(null));
+        overview.setOnAction(e -> model.cdAsync(null));
         overview.disableProperty().bind(model.getInOverview());
         overview.setAccessibleText("System overview");
 

File: app/src/main/java/io/xpipe/app/comp/store/DsStoreProviderChoiceComp.java
Patch:
@@ -26,10 +26,11 @@ public class DsStoreProviderChoiceComp extends Comp<CompStructure<ComboBox<Node>
 
     Predicate<DataStoreProvider> filter;
     Property<DataStoreProvider> provider;
+    boolean staticDisplay;
 
     private Region createDefaultNode() {
         return JfxHelper.createNamedEntry(
-                AppI18n.get("selectType"), AppI18n.get("selectTypeDescription"), "machine_icon.png");
+                AppI18n.get("selectType"), AppI18n.get("selectTypeDescription"), "connection_icon.svg");
     }
 
     private List<DataStoreProvider> getProviders() {
@@ -50,7 +51,7 @@ public CompStructure<ComboBox<Node>> createBase() {
         var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, createDefaultNode(), v -> true);
         comboBox.setAccessibleNames(dataStoreProvider -> dataStoreProvider.getDisplayName());
         getProviders().stream()
-                .filter(p -> AppPrefs.get().developerShowHiddenProviders().get() || p.canManuallyCreate())
+                .filter(p -> AppPrefs.get().developerShowHiddenProviders().get() || p.canManuallyCreate() || staticDisplay)
                 .forEach(comboBox::add);
         ComboBox<Node> cb = comboBox.build();
         cb.getStyleClass().add("data-source-type");

File: app/src/main/java/io/xpipe/app/comp/store/GuiDsStoreCreator.java
Patch:
@@ -240,7 +240,7 @@ private Region createLayout() {
         var layout = new BorderPane();
         layout.getStyleClass().add("store-creator");
         layout.setPadding(new Insets(20));
-        var providerChoice = new DsStoreProviderChoiceComp(filter, provider);
+        var providerChoice = new DsStoreProviderChoiceComp(filter, provider, provider.getValue() != null);
         if (provider.getValue() != null) {
             providerChoice.apply(struc -> struc.get().setDisable(true));
         }

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -9,6 +9,7 @@
 
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.util.Comparator;
 import java.util.Optional;
 
 public abstract class ExternalApplicationType implements PrefsChoiceValue {
@@ -55,13 +56,14 @@ protected Optional<Path> getApplicationPath() {
                     }
 
                     // Check if returned paths are actually valid
+                    // Also sort them by length to prevent finding a deeply buried app
                     var valid = path.lines().filter(s -> {
                         try {
                             return Files.exists(Path.of(s));
                         } catch (Exception ex) {
                             return false;
                         }
-                    }).toList();
+                    }).sorted(Comparator.comparingInt(value -> value.length())).toList();
 
                     // Prefer app in proper applications directory
                     var app = valid.stream().filter(s -> s.startsWith("/Applications")).findFirst();

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -88,6 +88,8 @@ default String executeSimpleStringCommand(ShellDialect type, String command) thr
         }
     }
 
+    ElevationResult elevateCommand(String input) throws Exception;
+
     void restart() throws Exception;
 
     OsType getOsType();

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -178,7 +178,9 @@ public static String getDataBasePath(ShellControl p) throws Exception {
     }
 
     public static String getLocalDefaultCliExecutable() {
-        Path path = ModuleHelper.isImage() ? getCurrentInstallationBasePath() : Path.of(getLocalDefaultInstallationBasePath(true));
+        Path path = ModuleHelper.isImage()
+                ? getCurrentInstallationBasePath()
+                : Path.of(getLocalDefaultInstallationBasePath(true));
         return path.resolve(getRelativeCliExecutablePath(OsType.getLocal())).toString();
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/action/LaunchAction.java
Patch:
@@ -57,13 +57,14 @@ public ActionProvider.Action createAction(List<String> args) {
     @Override
     public DefaultDataStoreCallSite<?> getDefaultDataStoreCallSite() {
         return new DefaultDataStoreCallSite<LaunchableStore>() {
+
             @Override
             public boolean isApplicable(LaunchableStore o) {
                 return DataStorage.get()
                         .getStoreEntryIfPresent(o)
                         .orElseThrow()
                         .getState()
-                        .isUsable();
+                        .isUsable() && o.canLaunch();
             }
 
             @Override

File: ext/base/src/main/java/io/xpipe/ext/base/browser/FollowLinkAction.java
Patch:
@@ -20,7 +20,7 @@ public boolean automaticallyResolveLinks() {
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) {
         var target = FileNames.getParent(entries.get(0).getRawFileEntry().resolved().getPath());
-        model.cdSync(target);
+        model.cdAsync(target);
     }
 
     @Override

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenDirectoryAction.java
Patch:
@@ -16,7 +16,7 @@ public class OpenDirectoryAction implements LeafAction {
 
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        model.cdSync(entries.get(0).getRawFileEntry().getPath());
+        model.cdAsync(entries.get(0).getRawFileEntry().getPath());
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -118,7 +118,7 @@ public WindowsType(String id, String executable) {
 
         protected abstract Optional<Path> determineInstallation();
 
-        private Optional<Path> determineFromPath() {
+        protected Optional<Path> determineFromPath() {
             // Try to locate if it is in the Path
             try (var cc = LocalStore.getShell()
                     .command(ShellDialects.getPlatformDefault().getWhichCommand("code.cmd"))

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -21,15 +21,14 @@ enum TerminalExitMode {
         CLOSE
     }
 
+    CommandControl withExceptionConverter(Function<Exception, Exception> converter);
+
     CommandControl withMessageFormatter(Function<String, String> formatter);
 
     CommandControl terminalExitMode(TerminalExitMode mode);
 
     CommandControl doesNotObeyReturnValueConvention();
 
-    @Override
-    CommandControl sensitive();
-
     CommandControl complex();
 
     CommandControl notComplex();

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -15,8 +15,6 @@ public interface ProcessControl extends Closeable, AutoCloseable {
 
     ExecutorService getStderrReader();
 
-    ProcessControl sensitive();
-
     String prepareTerminalOpen(String displayName) throws Exception;
 
     void closeStdin() throws IOException;

File: app/src/main/java/io/xpipe/app/comp/base/SideMenuBarComp.java
Patch:
@@ -6,7 +6,6 @@
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.CompStructure;
 import io.xpipe.app.fxcomps.SimpleCompStructure;
-import io.xpipe.app.fxcomps.augment.GrowAugment;
 import io.xpipe.app.fxcomps.impl.FancyTooltipAugment;
 import io.xpipe.app.fxcomps.impl.IconButtonComp;
 import io.xpipe.app.fxcomps.util.PlatformThread;
@@ -17,6 +16,7 @@
 import javafx.css.PseudoClass;
 import javafx.scene.control.Button;
 import javafx.scene.layout.Priority;
+import javafx.scene.layout.Region;
 import javafx.scene.layout.VBox;
 import org.kordamp.ikonli.javafx.FontIcon;
 
@@ -73,7 +73,7 @@ public CompStructure<VBox> createBase() {
         filler.setMaxHeight(3000);
         vbox.getChildren().add(filler);
         VBox.setVgrow(filler, Priority.ALWAYS);
-        GrowAugment.create(true, false).augment(filler);
+        filler.prefWidthProperty().bind(((Region) vbox.getChildren().get(0)).widthProperty());
 
         vbox.getStyleClass().add("sidebar-comp");
         return new SimpleCompStructure<>(vbox);

File: app/src/main/java/io/xpipe/app/launcher/LauncherCommand.java
Patch:
@@ -6,7 +6,6 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.LogErrorHandler;
 import io.xpipe.app.issue.TrackEvent;
-import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.beacon.BeaconServer;
 import io.xpipe.beacon.exchange.FocusExchange;
@@ -113,7 +112,7 @@ private XPipeDaemonMode getEffectiveMode() {
             return XPipeDaemonMode.get(opModeName);
         }
 
-        return AppPrefs.get().startupBehaviour().getValue().getMode();
+        return XPipeDaemonMode.GUI;
     }
 
     @Override

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -17,7 +17,6 @@ public class ShellDialects {
     public static ShellDialect BASH;
     public static ShellDialect ZSH;
     public static ShellDialect CSH;
-    public static ShellDialect FISH;
 
     public static class Loader implements ModuleLayerLoader {
 
@@ -30,7 +29,6 @@ public void init(ModuleLayer layer) {
             CMD = byName("cmd");
             POWERSHELL = byName("powershell");
             POWERSHELL_CORE = byName("pwsh");
-            FISH = byName("fish");
             DASH = byName("dash");
             BASH = byName("bash");
             ZSH = byName("zsh");

File: app/src/main/java/io/xpipe/app/storage/StorageElement.java
Patch:
@@ -51,12 +51,12 @@ public void simpleRefresh() {
     public void updateLastUsed() {
         this.lastUsed = Instant.now();
         this.dirty = true;
-        this.listeners.forEach(l -> l.onUpdate());
+        notifyListeners();
     }
 
     protected abstract boolean shouldSave();
 
-    protected void propagateUpdate() {
+    protected void notifyListeners() {
         listeners.forEach(l -> l.onUpdate());
     }
 
@@ -102,7 +102,7 @@ public void setName(String name) {
         this.name = name;
         this.dirty = true;
         this.lastModified = Instant.now();
-        propagateUpdate();
+        notifyListeners();
     }
 
     public Instant getLastUsed() {

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -358,7 +358,7 @@ public void launch(String name, String file, boolean elevated) throws Exception
         }
     };
 
-    ExternalTerminalType KITTY_MACOS = new MacOsType("app.kittyMacOs", "Kitty") {
+    ExternalTerminalType KITTY_MACOS = new MacOsType("app.kittyMacOs", "kitty") {
 
         @Override
         public void launch(String name, String file, boolean elevated) throws Exception {

File: app/src/main/java/io/xpipe/app/comp/base/ModalOverlayComp.java
Patch:
@@ -45,8 +45,9 @@ protected Region createSimple() {
         var pane = new StackPane(bgRegion, modal);
         pane.setPickOnBounds(false);
         PlatformThread.sync(overlayContent).addListener((observable, oldValue, newValue) -> {
-            if (oldValue != null) {
+            if (oldValue != null && newValue == null && modal.isDisplay()) {
                 modal.hide(true);
+                return;
             }
 
             if (newValue != null) {
@@ -72,6 +73,7 @@ protected Region createSimple() {
                 var modalBox = new ModalBox(box);
                 modalBox.setOnClose(event -> {
                     overlayContent.setValue(null);
+                    modal.hide(true);
                     event.consume();
                 });
                 modalBox.prefWidthProperty().bind(box.widthProperty());

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FilterComp.java
Patch:
@@ -3,8 +3,8 @@
 import io.xpipe.app.core.AppActionLinkDetector;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.CompStructure;
+import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.fxcomps.util.SimpleChangeListener;
-import javafx.application.Platform;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.Property;
 import javafx.scene.Node;
@@ -34,7 +34,7 @@ public Structure createBase() {
         filter.setAccessibleText("Filter");
 
         SimpleChangeListener.apply(filterText, val -> {
-            Platform.runLater(() -> {
+            PlatformThread.runLaterIfNeeded(() -> {
                 if (!Objects.equals(filter.getText(), val)) {
                     filter.setText(val);
                 }

File: app/src/main/java/io/xpipe/app/browser/BrowserModel.java
Patch:
@@ -133,7 +133,9 @@ public void closeFileSystemAsync(OpenFileSystemModel open) {
                 selected.setValue(null);
             }
             open.closeSync();
-            openFileSystems.remove(open);
+            synchronized (BrowserModel.this) {
+                openFileSystems.remove(open);
+            }
         });
     }
 

File: core/src/main/java/io/xpipe/core/util/XPipeExecTempDirectory.java
Patch:
@@ -27,7 +27,7 @@ public static synchronized String initXPipeTempDirectory(ShellControl proc) thro
             return dir;
         }
 
-        var existsCommand = proc.getShellDialect().createFileExistsCommand(proc, dir);
+        var existsCommand = proc.getShellDialect().directoryExists(proc, dir);
         if (existsCommand.executeAndCheck() && !usedSystems.contains(proc.getSystemId())) {
             proc.executeSimpleCommand(proc.getShellDialect().getFileDeleteCommand(dir));
         }

File: app/src/main/java/io/xpipe/app/util/FileOpener.java
Patch:
@@ -62,7 +62,7 @@ public static void openInTextEditor(String file) {
         } catch (Exception e) {
             ErrorEvent.fromThrowable(e)
                     .description("Unable to launch editor " + editor.toTranslatedString()
-                            + ". Maybe try to use a different one in the settings.")
+                            + ".\nMaybe try to use a different editor in the settings.")
                     .handle();
         }
     }

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -26,7 +26,7 @@ public static void open(String title, String command) throws Exception {
         } catch (Exception ex) {
             throw new IOException(
                     "Unable to launch terminal " + type.toTranslatedString() + ": " + ex.getMessage()
-                            + ". Maybe try to use a different one in the settings.",
+                            + ".\nMaybe try to use a different terminal in the settings.",
                     ex);
         }
     }

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -410,7 +410,7 @@ public TabbyMacOsType() {
         @Override
         public void launch(String name, String file, boolean elevated) throws Exception {
             try (ShellControl pc = LocalStore.getShell()) {
-                pc.osascriptCommand(String.format(
+                pc.command(String.format(
                                 """
                         %s/Contents/MacOS/Tabby run %s
                         """,

File: app/src/main/java/io/xpipe/app/comp/base/LoadingOverlayComp.java
Patch:
@@ -31,6 +31,7 @@ public CompStructure<StackPane> createBase() {
 
         var loadingBg = new StackPane(loading);
         loadingBg.getStyleClass().add("loading-comp");
+        loadingBg.getStyleClass().add("modal-pane");
 
         loadingBg.setVisible(showLoading.getValue());
 

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryWrapper.java
Patch:
@@ -206,7 +206,7 @@ public void toggleExpanded() {
 
     @Override
     public boolean shouldShow(String filter) {
-        return getName().toLowerCase().contains(filter.toLowerCase())
+        return filter == null || getName().toLowerCase().contains(filter.toLowerCase())
                 || (summary.get() != null && summary.get().toLowerCase().contains(filter.toLowerCase()))
                 || (information.get() != null && information.get().toLowerCase().contains(filter.toLowerCase()));
     }

File: app/src/main/java/io/xpipe/app/comp/store/GuiDsStoreCreator.java
Patch:
@@ -123,7 +123,7 @@ public static void showCreation(Predicate<DataStoreProvider> filter) {
                 e -> {
                     try {
                         DataStorage.get().addStoreEntry(e);
-                        if (e.getProvider().shouldHaveSubShells()) {
+                        if (e.getProvider().shouldHaveChildren()) {
                             ScanAlert.showAsync(e);
                         }
                     } catch (Exception ex) {

File: app/src/main/java/io/xpipe/app/core/AppActionLinkDetector.java
Patch:
@@ -20,7 +20,7 @@ private static String getClipboardAction() {
         return content != null ? content.toString() : null;
     }
 
-    private static void handle(String content, boolean showAlert) {
+    public static void handle(String content, boolean showAlert) {
         var detected = LauncherInput.of(content);
         if (detected.size() == 0) {
             return;

File: app/src/main/java/io/xpipe/app/ext/DataStoreProvider.java
Patch:
@@ -46,7 +46,7 @@ default boolean canHaveSubShells() {
         return true;
     }
 
-    default boolean shouldHaveSubShells() {
+    default boolean shouldHaveChildren() {
         return canHaveSubShells();
     }
 

File: app/src/main/java/io/xpipe/app/fxcomps/util/BindingsHelper.java
Patch:
@@ -139,7 +139,7 @@ public static <V> ObservableList<V> filteredContentBinding(
             ObservableList<V> l2, ObservableValue<Predicate<V>> predicate) {
         ObservableList<V> l1 = FXCollections.observableList(new ArrayList<>());
         Runnable runnable = () -> {
-            setContent(l1, l2.stream().filter(predicate.getValue()).toList());
+            setContent(l1, predicate.getValue() != null ? l2.stream().filter(predicate.getValue()).toList() : l2);
         };
         runnable.run();
         l2.addListener((ListChangeListener<? super V>) c -> {

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -182,6 +182,7 @@ public void setConfiguration(Configuration configuration) {
     public void setExpanded(boolean expanded) {
         this.dirty = true;
         this.expanded = expanded;
+        listeners.forEach(l -> l.onUpdate());
     }
 
     public DataStore getStore() {

File: ext/base/src/main/java/io/xpipe/ext/base/action/ScanAction.java
Patch:
@@ -34,7 +34,7 @@ public DataStoreCallSite<?> getDataStoreCallSite() {
 
             @Override
             public boolean isMajor(ShellStore o) {
-                return DataStoreProviders.byStore(o).shouldHaveSubShells();
+                return DataStoreProviders.byStore(o).shouldHaveChildren();
             }
 
             @Override

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -73,7 +73,7 @@ protected Region createSimple() {
     }
 
     private void simulateEmptyCell(Region r) {
-        var emptyEntry = new BrowserFileListCompEntry(r, null, model.getFileList());
+        var emptyEntry = new BrowserFileListCompEntry(null, r, null, model.getFileList());
         r.setOnMouseClicked(e -> {
             emptyEntry.onMouseClick(e);
         });

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -513,7 +513,6 @@ private AppPreferencesFx createPreferences() {
 
         var categories = new ArrayList<>(List.of(
                 Category.of("about", Group.of(about)),
-                Category.of("troubleshoot", Group.of(troubleshoot)),
                 Category.of(
                         "system",
                         Group.of(
@@ -586,7 +585,8 @@ private AppPreferencesFx createPreferences() {
                         Setting.of(
                                 "developerShowHiddenProviders",
                                 developerShowHiddenProvidersField,
-                                developerShowHiddenProviders))));
+                                developerShowHiddenProviders)),
+                Category.of("troubleshoot", Group.of(troubleshoot))));
 
         categories.get(categories.size() - 1).setVisibilityProperty(VisibilityProperty.of(developerMode()));
 

File: app/src/main/java/io/xpipe/app/prefs/CustomFormRenderer.java
Patch:
@@ -52,7 +52,7 @@ public void layoutParts() {
                             AppFont.setSize(titleLabel, 2);
                             // Set margin for all but first group titles to visually separate groups
                             if (nextRow > 1) {
-                                GridPane.setMargin(titleLabel, new Insets(SPACING * 3, 0, SPACING, 0));
+                                GridPane.setMargin(titleLabel, new Insets(SPACING * 5, 0, SPACING, 0));
                             } else {
                                 GridPane.setMargin(titleLabel, new Insets(SPACING, 0, SPACING, 0));
                             }
@@ -124,7 +124,7 @@ public void layoutParts() {
                                 GridPane.setMargin(node, new Insets(SPACING, 0, 0, offset));
 
                                 if (!((i == 0) && (nextRow > 0))) {
-                                    GridPane.setMargin(c.getFieldLabel(), new Insets(SPACING * 3, 0, 0, offset));
+                                    GridPane.setMargin(c.getFieldLabel(), new Insets(SPACING * 6, 0, 0, offset));
                                 } else {
                                     GridPane.setMargin(c.getFieldLabel(), new Insets(SPACING, 0, 0, offset));
                                 }

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreCreationBarComp.java
Patch:
@@ -2,7 +2,7 @@
 
 import atlantafx.base.theme.Styles;
 import io.xpipe.app.comp.base.ButtonComp;
-import io.xpipe.app.comp.source.store.GuiDsStoreCreator;
+import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataStoreProvider;

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreIntroComp.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.SimpleComp;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.util.Hyperlinks;
 import io.xpipe.app.util.ScanAlert;
 import io.xpipe.core.impl.LocalStore;
@@ -35,7 +36,7 @@ public Region createSimple() {
         });
 
         var scanButton = new Button(AppI18n.get("detectConnections"), new FontIcon("mdi2m-magnify"));
-        scanButton.setOnAction(event -> ScanAlert.showAsync(new LocalStore(), false));
+        scanButton.setOnAction(event -> ScanAlert.showAsync(DataStorage.get().getStoreEntry(new LocalStore()), false));
         var scanPane = new StackPane(scanButton);
         scanPane.setAlignment(Pos.CENTER);
 

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreLayoutComp.java
Patch:
@@ -16,6 +16,7 @@ protected Region createSimple() {
         var groupHeader = new StoreSidebarComp().createRegion();
         r.setLeft(groupHeader);
         r.setCenter(listR);
+        r.getStyleClass().add("layout");
         return r;
     }
 }

File: app/src/main/java/io/xpipe/app/comp/store/DataStoreSelectorComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import com.jfoenix.controls.JFXButton;
 import io.xpipe.app.core.AppI18n;

File: app/src/main/java/io/xpipe/app/comp/store/DsDbStoreChooserComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;

File: app/src/main/java/io/xpipe/app/comp/store/DsFileHistoryComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import com.jfoenix.controls.JFXButton;
 import io.xpipe.app.core.AppCache;

File: app/src/main/java/io/xpipe/app/comp/store/DsLocalDirectoryBrowseComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import com.jfoenix.controls.JFXButton;
 import io.xpipe.app.core.AppI18n;

File: app/src/main/java/io/xpipe/app/comp/store/DsLocalFileBrowseComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.browser.StandaloneFileBrowser;
 import io.xpipe.app.comp.base.ButtonComp;

File: app/src/main/java/io/xpipe/app/comp/store/DsRemoteFileChoiceComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.SimpleComp;

File: app/src/main/java/io/xpipe/app/comp/store/DsStoreProviderChoiceComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataStoreProvider;
@@ -50,7 +50,7 @@ public CompStructure<ComboBox<Node>> createBase() {
         var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, createDefaultNode(), v -> true);
         comboBox.setAccessibleNames(dataStoreProvider -> dataStoreProvider.getDisplayName());
         getProviders().stream()
-                .filter(p -> AppPrefs.get().developerShowHiddenProviders().get() || p.shouldShow())
+                .filter(p -> AppPrefs.get().developerShowHiddenProviders().get() || p.canManuallyCreate())
                 .forEach(comboBox::add);
         ComboBox<Node> cb = comboBox.build();
         cb.getStyleClass().add("data-source-type");

File: app/src/main/java/io/xpipe/app/comp/store/DsStreamStoreChoiceComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.FileDropOverlayComp;
 import io.xpipe.app.core.AppFont;
@@ -12,11 +12,11 @@
 import io.xpipe.app.fxcomps.impl.TabPaneComp;
 import io.xpipe.app.fxcomps.impl.VerticalComp;
 import io.xpipe.app.fxcomps.util.SimpleChangeListener;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.app.util.SimpleValidator;
 import io.xpipe.app.util.Validatable;
 import io.xpipe.app.util.Validator;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.impl.FileStore;
 import io.xpipe.core.impl.LocalStore;
 import io.xpipe.core.store.DataStore;
@@ -70,7 +70,7 @@ public DsStreamStoreChoiceComp(
     @Override
     protected Region createSimple() {
         var isNamedStore =
-                XPipeDaemon.getInstance().getStoreName(selected.getValue()).isPresent();
+                DataStorage.get().getStoreDisplayName(selected.getValue()).isPresent();
         var localStore = new SimpleObjectProperty<>(
                 !isNamedStore
                                 && selected.getValue() instanceof FileStore fileStore

File: app/src/main/java/io/xpipe/app/comp/store/GuiDsStoreCreator.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.ErrorOverlayComp;
 import io.xpipe.app.comp.base.MultiStepComp;
@@ -123,7 +123,7 @@ public static void showCreation(Predicate<DataStoreProvider> filter) {
                 e -> {
                     try {
                         DataStorage.get().addStoreEntry(e);
-                        // ScanAlert.showAsync(e.getStore(), true);
+                        ScanAlert.showAsync(e, true);
                     } catch (Exception ex) {
                         ErrorEvent.fromThrowable(ex).handle();
                     }

File: app/src/main/java/io/xpipe/app/comp/store/NamedStoreChoiceComp.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.app.comp.source.store;
+package io.xpipe.app.comp.store;
 
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.comp.base.ListViewComp;

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -1,7 +1,6 @@
 package io.xpipe.app.core.mode;
 
 import io.xpipe.app.browser.BrowserModel;
-import io.xpipe.app.comp.storage.collection.SourceCollectionViewState;
 import io.xpipe.app.comp.storage.store.StoreViewState;
 import io.xpipe.app.core.*;
 import io.xpipe.app.issue.*;
@@ -55,7 +54,6 @@ public void finalTeardown() {
         TrackEvent.info("mode", "Background mode shutdown started");
         BrowserModel.DEFAULT.reset();
         AppSocketServer.reset();
-        SourceCollectionViewState.reset();
         StoreViewState.reset();
         DataStorage.reset();
         AppPrefs.reset();

File: app/src/main/java/io/xpipe/app/core/mode/PlatformMode.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.app.core.mode;
 
-import io.xpipe.app.comp.storage.collection.SourceCollectionViewState;
 import io.xpipe.app.comp.storage.store.StoreViewState;
 import io.xpipe.app.core.*;
 import io.xpipe.app.issue.TrackEvent;
@@ -83,7 +82,6 @@ protected void platformSetup() {
             UpdateAvailableAlert.showIfNeeded();
         }
 
-        SourceCollectionViewState.init();
         StoreViewState.init();
     }
 

File: app/src/main/java/io/xpipe/app/exchange/cli/ListStoresExchangeImpl.java
Patch:
@@ -15,7 +15,7 @@ public class ListStoresExchangeImpl extends ListStoresExchange
     public Response handleRequest(BeaconHandler handler, Request msg) {
         DataStorage s = DataStorage.get();
         var e = s.getStoreEntries().stream()
-                .filter(entry -> !entry.isDisabled() && entry.getProvider().shouldShow())
+                .filter(entry -> !entry.isDisabled() && entry.getProvider().canManuallyCreate())
                 .sorted(Comparator.comparing(dataStoreEntry -> dataStoreEntry.getLastUsed()))
                 .map(col -> StoreListEntry.builder()
                         .name(col.getName())

File: app/src/main/java/io/xpipe/app/exchange/cli/StoreProviderListExchangeImpl.java
Patch:
@@ -24,7 +24,7 @@ public Response handleRequest(BeaconHandler handler, Request msg) {
                         .map(p -> ProviderEntry.builder()
                                 .id(p.getId())
                                 .description(p.getDisplayDescription())
-                                .hidden(!p.shouldShow())
+                                .hidden(!p.canManuallyCreate())
                                 .build())
                         .toList()));
 

File: app/src/main/java/io/xpipe/app/ext/ActionProvider.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.ServiceLoader;
-import java.util.stream.Collectors;
 
 public interface ActionProvider {
 
@@ -29,7 +28,7 @@ public void init(ModuleLayer layer) {
                             return false;
                         }
                     })
-                    .collect(Collectors.toSet()));
+                    .toList());
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/ext/ScanProvider.java
Patch:
@@ -1,8 +1,8 @@
 package io.xpipe.app.ext;
 
+import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.core.process.ShellControl;
 import io.xpipe.core.store.DataStore;
-import io.xpipe.core.store.ShellStore;
 import io.xpipe.core.util.ModuleLayerLoader;
 import lombok.Value;
 import org.apache.commons.lang3.function.FailableRunnable;
@@ -53,7 +53,7 @@ public ScanOperation create(DataStore store, boolean automatic) {
         return null;
     }
 
-    public ScanOperation create(ShellStore store, ShellControl sc, boolean automatic) throws Exception {
+    public ScanOperation create(DataStoreEntry entry, ShellControl sc, boolean automatic) throws Exception {
         return null;
     }
 }

File: app/src/main/java/io/xpipe/app/ext/XPipeServiceProviders.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.process.ProcessControlProvider;
 import io.xpipe.core.util.JacksonMapper;
 import io.xpipe.core.util.ModuleLayerLoader;
@@ -12,7 +11,8 @@
 public class XPipeServiceProviders {
 
     public static void load(ModuleLayer layer) {
-        var hasDaemon = XPipeDaemon.getInstanceIfPresent().isPresent();
+        // TODO
+        var hasDaemon = true;
         ModuleLayerLoader.loadAll(layer, hasDaemon, true, t -> {
             ErrorEvent.fromThrowable(t).handle();
         });

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -6,7 +6,6 @@
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.util.CustomComboBoxBuilder;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.store.LeafShellStore;
 import io.xpipe.core.store.ShellStore;
@@ -70,7 +69,7 @@ protected Region createGraphic(T s) {
                         return Optional.of(AppI18n.get("none"));
                     }
 
-                    return XPipeDaemon.getInstance().getStoreName(store);
+                    return DataStorage.get().getStoreDisplayName(store);
                 })
                 .orElse(AppI18n.get("unknown"));
 
@@ -82,7 +81,7 @@ private String toName(DataStore store) {
             return AppI18n.get("none");
         }
 
-        return XPipeDaemon.getInstance().getStoreName(store).orElse("?");
+        return DataStorage.get().getStoreDisplayName(store).orElse("?");
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileSystemStoreChoiceComp.java
Patch:
@@ -4,7 +4,6 @@
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.util.CustomComboBoxBuilder;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.impl.FileStore;
 import io.xpipe.core.store.FileSystemStore;
 import javafx.beans.property.Property;
@@ -27,7 +26,7 @@ private static String getName(FileSystemStore store) {
         var name = DataStorage.get().getUsableStores().stream()
                 .filter(e -> e.equals(store))
                 .findAny()
-                .map(e -> XPipeDaemon.getInstance().getStoreName(e).orElse("?"))
+                .map(e -> DataStorage.get().getStoreDisplayName(e).orElse("?"))
                 .orElse("?");
         return name;
     }

File: app/src/main/java/io/xpipe/app/storage/ImpersistentStorage.java
Patch:
@@ -13,8 +13,6 @@ public class ImpersistentStorage extends DataStorage {
 
     @Override
     public void load() {
-        // Add temporary collection it is not added yet
-        getInternalCollection();
     }
 
     @Override

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -25,6 +25,8 @@ static String flatten(List<String> command) {
                 .collect(Collectors.joining(" "));
     }
 
+    CommandControl queryVersion(ShellControl shellControl);
+
     CommandControl prepareTempDirectory(ShellControl shellControl, String directory);
 
     String initFileName(ShellControl sc) throws Exception;

File: core/src/main/java/io/xpipe/core/util/XPipeSystemId.java
Patch:
@@ -30,6 +30,9 @@ public static UUID getLocal() {
 
     public static UUID getSystemId(ShellControl proc) throws Exception {
         var file = proc.getOsType().getSystemIdFile(proc);
+        if (file == null) {
+            return UUID.randomUUID();
+        }
 
         if (!proc.getShellDialect().createFileExistsCommand(proc, file).executeAndCheck()) {
             return writeRandom(proc, file);

File: ext/base/src/main/java/io/xpipe/ext/base/FileStoreProvider.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.ext.base;
 
-import io.xpipe.app.comp.source.store.DsStreamStoreChoiceComp;
+import io.xpipe.app.comp.store.DsStreamStoreChoiceComp;
 import io.xpipe.app.ext.DataStoreProvider;
 import io.xpipe.app.ext.GuiDialog;
 import io.xpipe.app.util.DataStoreFormatter;
@@ -17,7 +17,7 @@
 public class FileStoreProvider implements DataStoreProvider {
 
     @Override
-    public boolean shouldShow() {
+    public boolean canManuallyCreate() {
         return false;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/InMemoryStoreProvider.java
Patch:
@@ -19,7 +19,7 @@
 public class InMemoryStoreProvider implements DataStoreProvider {
 
     @Override
-    public boolean shouldShow() {
+    public boolean canManuallyCreate() {
         return false;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/InternalStreamProvider.java
Patch:
@@ -11,7 +11,7 @@
 public class InternalStreamProvider implements DataStoreProvider {
 
     @Override
-    public boolean shouldShow() {
+    public boolean canManuallyCreate() {
         return false;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/SinkDrainStoreProvider.java
Patch:
@@ -42,7 +42,7 @@ public GuiDialog guiDialog(Property<DataStore> store) {
     }
 
     @Override
-    public boolean shouldShow() {
+    public boolean canManuallyCreate() {
         return false;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/actions/AddStoreAction.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.ext.base.actions;
 
-import io.xpipe.app.comp.source.store.GuiDsStoreCreator;
+import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.app.util.DefaultSecretValue;

File: ext/base/src/main/java/io/xpipe/ext/base/actions/DeleteStoreChildrenAction.java
Patch:
@@ -5,6 +5,7 @@
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.core.store.DataStore;
+import io.xpipe.core.store.FixedHierarchyStore;
 import javafx.beans.value.ObservableValue;
 import lombok.Value;
 
@@ -47,8 +48,8 @@ public Class<DataStore> getApplicableClass() {
 
             @Override
             public boolean isApplicable(DataStore o) {
-                return DataStorage.get()
-                                .getStoreChildren(DataStorage.get().getStoreEntry(o), true)
+                return !(o instanceof FixedHierarchyStore) && DataStorage.get()
+                                .getStoreChildren(DataStorage.get().getStoreEntry(o), true, true)
                                 .size()
                         > 1;
             }

File: ext/base/src/main/java/io/xpipe/ext/base/actions/EditStoreAction.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.ext.base.actions;
 
-import io.xpipe.app.comp.source.store.GuiDsStoreCreator;
+import io.xpipe.app.comp.store.GuiDsStoreCreator;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStorage;

File: ext/base/src/main/java/io/xpipe/ext/base/browser/RefreshDirectoryAction.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.List;
 
-public class RefreshAction implements LeafAction {
+public class RefreshDirectoryAction implements LeafAction {
 
     public String getId() {
         return "refresh";

File: app/src/main/java/io/xpipe/app/browser/BrowserWelcomeComp.java
Patch:
@@ -34,7 +34,7 @@ protected Region createSimple() {
         var welcome = new BrowserGreetingComp().createSimple();
 
         var vbox = new VBox(welcome);
-        vbox.setMaxWidth(600);
+        vbox.setMaxWidth(700);
         vbox.setPadding(new Insets(40, 40, 40, 50));
         vbox.setSpacing(18);
         if (state == null) {

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -158,7 +158,7 @@ public Optional<String> cdOrRetry(String path, boolean allowCommands) {
                     TerminalHelper.open(adjustedPath, cmd);
                 }
             });
-            return Optional.of(currentPath.get());
+            return Optional.ofNullable(currentPath.get());
         }
 
         // Evaluate optional links

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -34,7 +34,7 @@ public void start(Stage primaryStage) {
 
         // Set dock icon explicitly on mac
         // This is necessary in case XPipe was started through a script as it will have no icon otherwise
-        if (OsType.getLocal().equals(OsType.MACOS) && AppProperties.get().isDeveloperMode() && !AppLogs.get().isWriteToFile()) {
+        if (OsType.getLocal().equals(OsType.MACOS) && AppProperties.get().isDeveloperMode() && AppLogs.get().isWriteToSysout()) {
             try {
                 var iconUrl = Main.class.getResourceAsStream("resources/img/logo/logo_128x128.png");
                 if (iconUrl != null) {

File: app/src/main/java/io/xpipe/app/core/AppLogs.java
Patch:
@@ -43,6 +43,8 @@ public class AppLogs {
     private final PrintStream originalSysOut;
     private final PrintStream originalSysErr;
     private final Path logDir;
+
+    @Getter
     private final boolean writeToSysout;
 
     @Getter

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -34,7 +34,7 @@ public void start(Stage primaryStage) {
 
         // Set dock icon explicitly on mac
         // This is necessary in case XPipe was started through a script as it will have no icon otherwise
-        if (OsType.getLocal().equals(OsType.MACOS)) {
+        if (OsType.getLocal().equals(OsType.MACOS) && AppProperties.get().isDeveloperMode() && !AppLogs.get().isWriteToFile()) {
             try {
                 var iconUrl = Main.class.getResourceAsStream("resources/img/logo/logo_128x128.png");
                 if (iconUrl != null) {

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -98,9 +98,6 @@ private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue
     public final ReadOnlyBooleanProperty useSystemFont = useSystemFontInternal;
     private final IntegerProperty tooltipDelayInternal = typed(new SimpleIntegerProperty(1000), Integer.class);
 
-    private final IntegerProperty fontSizeInternal = typed(new SimpleIntegerProperty(12), Integer.class);
-    public final ReadOnlyIntegerProperty fontSize = fontSizeInternal;
-
     private final BooleanProperty saveWindowLocationInternal = typed(new SimpleBooleanProperty(false), Boolean.class);
     public final ReadOnlyBooleanProperty saveWindowLocation = saveWindowLocationInternal;
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -163,7 +163,7 @@ public boolean detach() {
         public void launch(Path file) throws Exception {
             var path = determinePath();
             if (path.isEmpty()) {
-                throw new IOException("Unable to find installation of " + getId());
+                throw new IOException("Unable to find installation of " + toTranslatedString());
             }
 
             ApplicationHelper.executeLocalApplication(

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -306,22 +306,21 @@ public void initFileSystem() throws Exception {
             this.fileSystem = fs;
             this.local =
                     fs.getShell().map(shellControl -> shellControl.isLocal()).orElse(false);
+            this.initState();
             this.cache.init();
         });
     }
 
     public void initWithGivenDirectory(String dir) throws Exception {
-        initState();
         cdSyncWithoutCheck(dir);
     }
 
     public void initWithDefaultDirectory() throws Exception {
-        initState();
         savedState.cd(null);
         history.updateCurrent(null);
     }
 
-    private void initState() {
+    void initState() {
         this.savedState = OpenFileSystemSavedState.loadForStore(this);
     }
 

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemSavedState.java
Patch:
@@ -71,6 +71,9 @@ public OpenFileSystemSavedState deserialize(JsonParser p, DeserializationContext
                     .constructCollectionLikeType(List.class, RecentEntry.class);
             List<RecentEntry> recentDirectories =
                     JacksonMapper.getDefault().treeToValue(tree.remove("recentDirectories"), javaType);
+            if (recentDirectories == null) {
+                recentDirectories = List.of();
+            }
             var cleaned = recentDirectories.stream()
                     .map(recentEntry -> new RecentEntry(FileNames.toDirectory(recentEntry.directory), recentEntry.time))
                     .filter(distinctBy(recentEntry -> recentEntry.getDirectory()))

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemSavedState.java
Patch:
@@ -132,6 +132,7 @@ public void save() {
 
     public void cd(String dir) {
         if (dir == null) {
+            lastDirectory = null;
             return;
         }
 

File: app/src/main/java/io/xpipe/app/comp/source/store/DataStoreSelectorComp.java
Patch:
@@ -32,7 +32,7 @@ public CompStructure<Button> createBase() {
         button.setOnAction(e -> {
             GuiDsStoreCreator.show("inProgress", null, null, v -> v.getCategory().equals(category), entry -> {
                 chosenStore.setValue(entry.getStore());
-            });
+            }, false);
             e.consume();
         });
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileStoreChoiceComp.java
Patch:
@@ -48,7 +48,8 @@ protected Region createSimple() {
 
         var fileNameComp = new TextFieldComp(fileProperty)
                 .apply(struc -> HBox.setHgrow(struc.get(), Priority.ALWAYS))
-                .styleClass(onlyLocal ? Styles.LEFT_PILL : Styles.CENTER_PILL);
+                .styleClass(onlyLocal ? Styles.LEFT_PILL : Styles.CENTER_PILL)
+                .grow(false, true);
 
         var fileBrowseButton = new ButtonComp(null, new FontIcon("mdi2f-folder-open-outline"), () -> {
                     StandaloneFileBrowser.openSingleFile(selected);

File: app/src/main/java/io/xpipe/app/fxcomps/impl/SvgView.java
Patch:
@@ -10,6 +10,7 @@
 import javafx.css.Size;
 import javafx.css.SizeUnits;
 import javafx.geometry.Point2D;
+import javafx.scene.AccessibleRole;
 import javafx.scene.Node;
 import javafx.scene.layout.StackPane;
 import javafx.scene.paint.Color;
@@ -101,6 +102,7 @@ private WebView createWebView() {
         wv.getEngine().setJavaScriptEnabled(false);
         wv.setContextMenuEnabled(false);
         wv.setFocusTraversable(false);
+        wv.setAccessibleRole(AccessibleRole.IMAGE_VIEW);
 
         wv.getEngine().loadContent(getHtml(svgContent.getValue()));
         svgContent.addListener((c, o, n) -> {

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -376,7 +376,9 @@ public static void init() {
 
     public static void reset() {
         INSTANCE.save();
-        INSTANCE = null;
+
+        // Keep instance as we might need some values on shutdown, e.g. on update with terminals
+        // INSTANCE = null;
     }
 
     public static AppPrefs get() {

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -440,7 +440,7 @@ public DataStoreEntry addStoreEntry(@NonNull String name, DataStore store) {
 
     public void deleteStoreEntry(@NonNull DataStoreEntry store) {
         if (!store.getConfiguration().isDeletable()) {
-            throw new UnsupportedOperationException();
+            // throw new UnsupportedOperationException();
         }
 
         synchronized (this) {

File: app/src/main/java/io/xpipe/app/storage/StorageElement.java
Patch:
@@ -49,7 +49,8 @@ public void simpleRefresh() {
     public abstract void refresh(boolean deep) throws Exception;
 
     public void updateLastUsed() {
-        lastUsed = Instant.now();
+        this.lastUsed = Instant.now();
+        this.dirty = true;
         this.listeners.forEach(l -> l.onUpdate());
     }
 

File: app/src/main/java/io/xpipe/app/exchange/AskpassExchangeImpl.java
Patch:
@@ -9,6 +9,7 @@
 import io.xpipe.core.util.SecretValue;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.scene.control.Alert;
+import javafx.scene.layout.StackPane;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -47,8 +48,7 @@ public Response handleRequest(BeaconHandler handler, Request msg) throws Excepti
                     alert.setAlertType(Alert.AlertType.CONFIRMATION);
 
                     var text = new SecretFieldComp(prop).createRegion();
-                    text.setStyle("-fx-border-width: 1px");
-                    alert.getDialogPane().setContent(text);
+                    alert.getDialogPane().setContent(new StackPane(text));
                 })
                 .filter(b -> b.getButtonData().isDefaultButton() && prop.getValue() != null)
                 .map(t -> {

File: app/src/main/java/io/xpipe/app/fxcomps/impl/SecretFieldComp.java
Patch:
@@ -25,6 +25,7 @@ protected SecretValue encrypt(char[] c) {
     @Override
     public CompStructure<TextField> createBase() {
         var text = new PasswordField();
+        text.getStyleClass().add("secret-field-comp");
         text.setText(value.getValue() != null ? value.getValue().getSecretValue() : null);
         text.textProperty().addListener((c, o, n) -> {
             value.setValue(n != null && n.length() > 0 ? encrypt(n.toCharArray()) : null);

File: app/src/main/java/io/xpipe/app/browser/BrowserComp.java
Patch:
@@ -165,7 +165,8 @@ private Node createTabs() {
         // Handle selection from model
         model.getSelected().addListener((observable, oldValue, newValue) -> {
             PlatformThread.runLaterIfNeeded(() -> {
-                var tab = tabs.getTabs().get(model.getOpenFileSystems().indexOf(newValue));
+                var index = model.getOpenFileSystems().indexOf(newValue);
+                var tab = index != -1 ? tabs.getTabs().get(index) : null;
                 tabs.getSelectionModel().select(tab);
             });
         });

File: ext/base/src/main/java/module-info.java
Patch:
@@ -52,7 +52,6 @@
             DeleteStoreChildrenAction,
             AddStoreAction,
             EditStoreAction,
-            StreamExportAction,
             ShareStoreAction,
             FileBrowseAction,
             FileEditAction;

File: app/src/main/java/io/xpipe/app/comp/base/ErrorOverlayComp.java
Patch:
@@ -27,7 +27,7 @@ protected Region createSimple() {
             var comp = Comp.of(() -> {
                 var l = new TextArea();
                 l.textProperty().bind(text);
-                l.setWrapText(true);
+                l.setWrapText(false);
                 l.getStyleClass().add("error-overlay-comp");
                 l.setEditable(false);
                 return l;

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryFlatMiniSectionComp.java
Patch:
@@ -29,7 +29,6 @@ public class StoreEntryFlatMiniSectionComp extends SimpleComp {
             ALL.clear();
             var depth = 0;
             for (StoreSection v : topLevel.getChildren()) {
-                System.out.println(v.getWrapper().getEntry().getName() + " " + v.getChildren().size());
                 add(depth, v);
             }
         });

File: core/src/main/java/io/xpipe/core/process/ProcessOutputException.java
Patch:
@@ -9,7 +9,7 @@
 public class ProcessOutputException extends Exception {
 
     public static ProcessOutputException withPrefix(String customPrefix, ProcessOutputException ex) {
-        var messageSuffix = ex.getOutput() != null && !ex.getOutput().isBlank() ? ": " + ex.getOutput() : "";
+        var messageSuffix = ex.getOutput() != null && !ex.getOutput().isBlank() ? ":\n" + ex.getOutput() : "";
         var message = customPrefix + messageSuffix;
         return new ProcessOutputException(message, ex.getExitCode(), ex.getOutput());
     }

File: app/src/main/java/io/xpipe/app/browser/FileSystemHelper.java
Patch:
@@ -75,7 +75,7 @@ public static String validateDirectoryPath(OpenFileSystemModel model, String pat
         var normalized = shell.get()
                 .getShellDialect()
                 .normalizeDirectory(shell.get(), path)
-                .readOrThrow();
+                .readStdoutOrThrow();
 
         if (!model.getFileSystem().directoryExists(normalized)) {
             throw new IllegalArgumentException(String.format("Directory %s does not exist", normalized));

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -139,7 +139,7 @@ public Optional<String> cd(String path) {
                             .getShell()
                             .get()
                             .command(normalizedPath)
-                            .workingDirectory(directory)
+                            .withWorkingDirectory(directory)
                             .prepareTerminalOpen(name);
                     TerminalHelper.open(normalizedPath, cmd);
                 }

File: app/src/main/java/io/xpipe/app/browser/action/ExecuteApplicationAction.java
Patch:
@@ -14,7 +14,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
         ShellControl sc = model.getFileSystem().getShell().orElseThrow();
         for (BrowserEntry entry : entries) {
             var command = detach() ? ScriptHelper.createDetachCommand(sc, createCommand(model, entry)) : createCommand(model, entry);
-            try (var cc = sc.command(command).workingDirectory(model.getCurrentDirectory().getPath()).start()) {
+            try (var cc = sc.command(command).withWorkingDirectory(model.getCurrentDirectory().getPath()).start()) {
                 cc.discardOrThrow();
             }
         }

File: app/src/main/java/io/xpipe/app/browser/action/MultiExecuteAction.java
Patch:
@@ -30,7 +30,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
                                 pc -> {
                                     for (BrowserEntry entry : entries) {
                                         var cmd = pc.command(createCommand(pc, model, entry))
-                                                .workingDirectory(model.getCurrentDirectory()
+                                                .withWorkingDirectory(model.getCurrentDirectory()
                                                         .getPath())
                                                 .prepareTerminalOpen(FileNames.getFileName(
                                                         entry.getRawFileEntry().getPath()));
@@ -58,7 +58,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
                                         var cmd = ScriptHelper.createDetachCommand(
                                                 pc, createCommand(pc, model, entry));
                                         pc.command(cmd)
-                                                .workingDirectory(model.getCurrentDirectory()
+                                                .withWorkingDirectory(model.getCurrentDirectory()
                                                         .getPath())
                                                 .execute();
                                     }
@@ -79,7 +79,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
                                 pc -> {
                                     for (BrowserEntry entry : entries) {
                                         pc.command(createCommand(pc, model, entry))
-                                                .workingDirectory(model.getCurrentDirectory()
+                                                .withWorkingDirectory(model.getCurrentDirectory()
                                                                           .getPath())
                                                 .execute();
                                     }

File: app/src/main/java/io/xpipe/app/browser/action/ToFileCommandAction.java
Patch:
@@ -14,7 +14,7 @@ public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throw
         ShellControl sc = model.getFileSystem().getShell().orElseThrow();
         for (BrowserEntry entry : entries) {
             var command = createCommand(model, entry);
-            try (var cc = sc.command(command).workingDirectory(model.getCurrentDirectory().getPath()).start()) {
+            try (var cc = sc.command(command).withWorkingDirectory(model.getCurrentDirectory().getPath()).start()) {
                 cc.discardErr();
                 FileOpener.openCommandOutput(entry.getFileName(), entry, cc);
             }

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -34,7 +34,7 @@ static enum TerminalExitMode {
 
     CommandControl notComplex();
 
-    CommandControl workingDirectory(String directory);
+    CommandControl withWorkingDirectory(String directory);
 
     default void execute() throws Exception {
         try (var c = start()) {
@@ -56,7 +56,7 @@ default boolean executeAndCheck() throws Exception {
 
     public boolean waitFor();
 
-    CommandControl customCharset(Charset charset);
+    CommandControl withCustomCharset(Charset charset);
 
     int getExitCode();
 
@@ -82,7 +82,7 @@ default CommandControl elevated(String message) {
 
     public byte[] readRawBytesOrThrow() throws Exception;
 
-    public String readOrThrow() throws Exception;
+    public String readStdoutOrThrow() throws Exception;
 
     public default boolean discardAndCheckExit() throws ProcessOutputException {
         try {

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -84,7 +84,7 @@ public String getTempDirectory(ShellControl pc) throws Exception {
         @Override
         public Map<String, String> getProperties(ShellControl pc) throws Exception {
             try (CommandControl c = pc.command("systeminfo").start()) {
-                var text = c.readOrThrow();
+                var text = c.readStdoutOrThrow();
                 return PropertiesFormatsParser.parse(text, ":");
             }
         }
@@ -228,7 +228,7 @@ public String getName() {
         public Map<String, String> getProperties(ShellControl pc) throws Exception {
             try (CommandControl c =
                     pc.subShell(ShellDialects.BASH).command("sw_vers").start()) {
-                var text = c.readOrThrow();
+                var text = c.readStdoutOrThrow();
                 return PropertiesFormatsParser.parse(text, ":");
             }
         }

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -56,7 +56,7 @@ default byte[] executeSimpleRawBytesCommand(String command) throws Exception {
 
     default String executeSimpleStringCommand(String command) throws Exception {
         try (CommandControl c = command(command).start()) {
-            return c.readOrThrow();
+            return c.readStdoutOrThrow();
         }
     }
 

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -156,7 +156,7 @@ public static String queryLocalInstallationVersion(String exec) throws Exception
 
     public static String queryInstallationVersion(ShellControl p, String exec) throws Exception {
         try (CommandControl c = p.command(List.of(exec, "version")).start()) {
-            return c.readOrThrow();
+            return c.readStdoutOrThrow();
         } catch (ProcessOutputException ex) {
             return "?";
         }

File: ext/base/src/main/java/io/xpipe/ext/base/actions/SampleAction.java
Patch:
@@ -72,15 +72,15 @@ public void execute() throws Exception {
                         """
                 ).start()) {
                     // Reads stdout, stashes stderr. If the exit code is not 0, it will throw an exception with the stderr contents.
-                    var output = cc.readOrThrow();
+                    var output = cc.readStdoutOrThrow();
                 }
 
                 // More customization options
                 // If the command should be run as root, the command will be executed with
                 // sudo and the optional sudo password automatically provided by XPipe
                 // by using the information from the connection store.
                 // You can also set a custom working directory.
-                try (CommandControl cc = sc.command("kill <pid>").elevated("kill").workingDirectory("/").start()) {
+                try (CommandControl cc = sc.command("kill <pid>").elevated("kill").withWorkingDirectory("/").start()) {
                     // Discard any output but throw an exception with the stderr contents if the exit code is not 0
                     cc.discardOrThrow();
                 }

File: app/src/main/java/io/xpipe/app/browser/BrowserFilterComp.java
Patch:
@@ -67,15 +67,18 @@ public Structure createBase() {
         });
 
         text.setPrefWidth(0);
+        text.setFocusTraversable(false);
         button.getStyleClass().add(Styles.FLAT);
         button.disableProperty().bind(model.getInOverview());
         expanded.addListener((observable, oldValue, val) -> {
             if (val) {
                 text.setPrefWidth(250);
+                text.setFocusTraversable(true);
                 button.getStyleClass().add(Styles.RIGHT_PILL);
                 button.getStyleClass().remove(Styles.FLAT);
             } else {
                 text.setPrefWidth(0);
+                text.setFocusTraversable(false);
                 button.getStyleClass().remove(Styles.RIGHT_PILL);
                 button.getStyleClass().add(Styles.FLAT);
             }

File: app/src/main/java/io/xpipe/app/comp/source/DataSourceTargetChoiceComp.java
Patch:
@@ -68,7 +68,8 @@ public CompStructure<ComboBox<Node>> createBase() {
         var addMoreLabel = new Label(AppI18n.get("addMore"), new FontIcon("mdmz-plus"));
 
         var builder = new CustomComboBoxBuilder<DataSourceTarget>(
-                selectedApplication, app -> createLabel(app), dataSourceTarget -> dataSourceTarget.getName().getValue(), new Label(""), v -> true);
+                selectedApplication, app -> createLabel(app), new Label(""), v -> true);
+        builder.setAccessibleNames(dataSourceTarget -> dataSourceTarget.getName().getValue());
 
         // builder.addFilter((v, s) -> v.getName().getValue().toLowerCase().contains(s));
 

File: app/src/main/java/io/xpipe/app/comp/source/DsProviderChoiceComp.java
Patch:
@@ -72,7 +72,8 @@ private Region createGraphic(DataSourceProvider<?> provider) {
 
     @Override
     public CompStructure<ComboBox<Node>> createBase() {
-        var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, dataSourceProvider -> dataSourceProvider.getDisplayName(), createDefaultNode(), v -> true);
+        var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, createDefaultNode(), v -> true);
+        comboBox.setAccessibleNames(dataSourceProvider -> dataSourceProvider != null ? dataSourceProvider.getDisplayName() : null);
         comboBox.add(null);
         comboBox.addSeparator();
         comboBox.addFilter((v, s) -> v.getDisplayName().toLowerCase().contains(s.toLowerCase()));

File: app/src/main/java/io/xpipe/app/comp/source/DsStorageGroupSelector.java
Patch:
@@ -30,7 +30,8 @@ private static Region createGraphic(DataSourceCollection group) {
     @Override
     protected ComboBox<Node> createSimple() {
         var comboBox = new CustomComboBoxBuilder<DataSourceCollection>(
-                selected, DsStorageGroupSelector::createGraphic, dataSourceCollection -> dataSourceCollection.getName(), createGraphic(null), v -> true);
+                selected, DsStorageGroupSelector::createGraphic, createGraphic(null), v -> true);
+        comboBox.setAccessibleNames(dataSourceCollection -> dataSourceCollection.getName());
 
         DataStorage.get().getSourceCollections().stream()
                 .filter(dataSourceCollection ->

File: app/src/main/java/io/xpipe/app/comp/source/DsTypeChoiceComp.java
Patch:
@@ -50,7 +50,8 @@ public CompStructure<StackPane> createBase() {
                 return;
             }
 
-            var builder = new CustomComboBoxBuilder<>(selectedType, app -> createLabel(app), dataSourceType -> dataSourceType.toString(), new Label(""), v -> true);
+            var builder = new CustomComboBoxBuilder<>(selectedType, app -> createLabel(app), new Label(""), v -> true);
+            builder.setAccessibleNames(dataSourceType -> dataSourceType.toString());
             builder.add(provider.getValue().getPrimaryType());
 
             var list = Arrays.stream(DataSourceType.values())

File: app/src/main/java/io/xpipe/app/comp/source/store/DsStoreProviderChoiceComp.java
Patch:
@@ -49,7 +49,8 @@ private Region createGraphic(DataStoreProvider provider) {
 
     @Override
     public CompStructure<ComboBox<Node>> createBase() {
-        var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, dataStoreProvider -> dataStoreProvider.getDisplayName(), createDefaultNode(), v -> true);
+        var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, createDefaultNode(), v -> true);
+        comboBox.setAccessibleNames(dataStoreProvider -> dataStoreProvider.getDisplayName());
         getProviders().stream()
                 .filter(p -> AppPrefs.get().developerShowHiddenProviders().get() || p.shouldShow())
                 .forEach(comboBox::add);

File: app/src/main/java/io/xpipe/app/fxcomps/impl/CharsetChoiceComp.java
Patch:
@@ -24,8 +24,9 @@ protected Region createSimple() {
                     return new Label(streamCharset.getCharset().displayName()
                             + (streamCharset.hasByteOrderMark() ? " (BOM)" : ""));
                 },
-                streamCharset -> streamCharset.getNames().get(0), new Label(AppI18n.get("app.none")),
+                new Label(AppI18n.get("app.none")),
                 null);
+        builder.setAccessibleNames(streamCharset -> streamCharset.getNames().get(0));
         builder.addFilter((charset, filter) -> {
             return charset.getCharset().displayName().contains(filter);
         });

File: app/src/main/java/io/xpipe/app/fxcomps/impl/DataStoreChoiceComp.java
Patch:
@@ -96,9 +96,9 @@ protected Region createSimple() {
                         .findFirst()
                         .orElseThrow()
                         .createRegion(),
-                t -> toName(t),
                 new Label(AppI18n.get("none")),
                 n -> true);
+        comboBox.setAccessibleNames(t -> toName(t));
         comboBox.setSelectedDisplay(t -> createGraphic(t));
         comboBox.setUnknownNode(t -> createGraphic(t));
 

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileSystemStoreChoiceComp.java
Patch:
@@ -60,7 +60,8 @@ protected Region createSimple() {
         });
 
         var comboBox =
-                new CustomComboBoxBuilder<FileSystemStore>(fileSystemProperty, this::createGraphic, store -> getName(store), null, v -> true);
+                new CustomComboBoxBuilder<>(fileSystemProperty, this::createGraphic, null, v -> true);
+        comboBox.setAccessibleNames(store -> getName(store));
         comboBox.setSelectedDisplay(this::createDisplayGraphic);
         DataStorage.get().getUsableStores().stream()
                 .filter(e -> e instanceof FileSystemStore)

File: app/src/main/java/io/xpipe/app/fxcomps/impl/PrettyImageComp.java
Patch:
@@ -95,6 +95,7 @@ else if (val.endsWith(".svg")) {
                 currentNode.set(node);
             } else {
                 var storeIcon = new ImageView();
+                storeIcon.setFocusTraversable(false);
                 storeIcon
                         .imageProperty()
                         .bind(Bindings.createObjectBinding(
@@ -132,6 +133,7 @@ else if (val.endsWith(".svg")) {
 
             stack.getChildren().setAll(val);
         });
+        stack.setFocusTraversable(false);
         stack.setPrefWidth(width);
         stack.setMinWidth(width);
         stack.setPrefHeight(height);

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -96,12 +96,13 @@ private static void showIfNeeded(Supplier<List<ScanProvider.ScanOperation>> appl
                     btOk.addEventFilter(ActionEvent.ACTION, event -> {
                         BusyProperty.execute(busy, () -> {
                             for (var a : selected) {
-                                try (var ignored = new BusyProperty(busy)) {
+                                try {
                                     a.getScanner().run();
                                 } catch (Exception ex) {
                                     ErrorEvent.fromThrowable(ex).handle();
                                 }
                             }
+                            alert.setResult(ButtonType.OK);
                             alert.close();
                         });
                     });
@@ -114,6 +115,7 @@ private static void showIfNeeded(Supplier<List<ScanProvider.ScanOperation>> appl
 
                                 Platform.runLater(() -> {
                                     if (a == null) {
+                                        alert.setResult(ButtonType.OK);
                                         alert.close();
                                         return;
                                     }

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -80,15 +80,15 @@ public void setupWindow() {
                 },
                 XPipeDistributionType.get().getUpdateHandler().getPreparedUpdate());
 
-        var appWindow = new AppMainWindow(stage);
+        var appWindow = AppMainWindow.init(stage);
         appWindow.getStage().titleProperty().bind(PlatformThread.sync(titleBinding));
         appWindow.initialize();
+        appWindow.show();
         appWindow.setContent(content);
         TrackEvent.info("Application window initialized");
         stage.setOnShown(event -> {
             focus();
         });
-        appWindow.show();
 
         // For demo purposes
         //        if (true) {

File: app/src/main/java/io/xpipe/app/core/AppMainWindow.java
Patch:
@@ -218,6 +218,7 @@ public void show() {
     private void setupContent(Comp<?> content) {
         var contentR = content.createRegion();
         var scene = new Scene(contentR, -1, -1, false);
+        TrackEvent.debug("Created initial scene");
         stage.setScene(scene);
         contentR.requestFocus();
         TrackEvent.debug("Set content scene");

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListComp.java
Patch:
@@ -119,7 +119,7 @@ private TableView<BrowserEntry> createTable() {
             FXCollections.sort(param.getItems(), us);
             return true;
         });
-        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
+        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);
         filenameCol.minWidthProperty().bind(table.widthProperty().multiply(0.5));
 
         table.setFixedCellSize(34.0);

File: app/src/main/java/io/xpipe/app/browser/BrowserFilterComp.java
Patch:
@@ -3,6 +3,7 @@
 import atlantafx.base.theme.Styles;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.CompStructure;
+import io.xpipe.app.fxcomps.impl.FancyTooltipAugment;
 import io.xpipe.app.fxcomps.impl.TextFieldComp;
 import io.xpipe.app.fxcomps.util.SimpleChangeListener;
 import javafx.beans.property.Property;
@@ -20,6 +21,7 @@ public Structure createBase() {
         var expanded = new SimpleBooleanProperty();
         var text = new TextFieldComp(filterString, false).createRegion();
         var button = new Button();
+        new FancyTooltipAugment<>("app.search").augment(button);
         text.focusedProperty().addListener((observable, oldValue, newValue) -> {
             if (!newValue && filterString.getValue() == null) {
                 if (button.isFocused()) {

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemSavedState.java
Patch:
@@ -134,7 +134,7 @@ public void run() {
                         });
                     }
                 },
-                200);
+                20000);
     }
 
     private void updateRecent(String dir) {

File: app/src/main/java/io/xpipe/app/prefs/JsonStorageHandler.java
Patch:
@@ -158,7 +158,7 @@ public void saveDividerPosition(double dividerPosition) {}
 
     @Override
     public double loadDividerPosition() {
-        return 0;
+        return 0.27;
     }
 
     @Override

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -13,8 +13,8 @@
 public interface CommandControl extends ProcessControl {
 
     public static final int UNASSIGNED_EXIT_CODE = -1;
-    public static final int TIMEOUT_EXIT_CODE = -2;
-    public static final int KILLED_EXIT_CODE = -3;
+    public static final int EXIT_TIMEOUT_EXIT_CODE = -2;
+    public static final int START_FAILED_EXIT_CODE = -3;
 
     static enum TerminalExitMode {
         KEEP_OPEN,

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -76,7 +76,7 @@ default void executeSimpleCommand(String command, String failMessage) throws Exc
         try (CommandControl c = command(command).start()) {
             c.discardOrThrow();
         } catch (ProcessOutputException out) {
-            throw ProcessOutputException.of(failMessage, out);
+            throw ProcessOutputException.withPrefix(failMessage, out);
         }
     }
 

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -135,6 +135,8 @@ default boolean requiresScript(String content) {
         return content.contains("\n");
     }
 
+    CommandControl createTextFileWriteCommand(ShellControl parent, String content, String file);
+
     CommandControl createScriptTextFileWriteCommand(ShellControl parent, String content, String file);
 
     String getFileDeleteCommand(String file);

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemHistory.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 import java.util.Objects;
 
-final class OpenFileSystemHistory {
+public final class OpenFileSystemHistory {
 
     private final IntegerProperty cursor = new SimpleIntegerProperty(-1);
     private final List<String> history = new ArrayList<>();

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryListHeaderComp.java
Patch:
@@ -32,8 +32,8 @@ private Region createGroupListHeader() {
     }
 
     private Region createGroupListFilter() {
-        var filledHerProperty = new SimpleStringProperty();
-        filledHerProperty.addListener((observable, oldValue, newValue) -> {
+        var filterProperty = new SimpleStringProperty();
+        filterProperty.addListener((observable, oldValue, newValue) -> {
             ThreadHelper.runAsync(() -> {
                 StoreViewState.get().getFilter().filterProperty().setValue(newValue);
             });

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FilterComp.java
Patch:
@@ -28,6 +28,7 @@ public Structure createBase() {
         var bgLabel = new Label("Search ...", fi);
         bgLabel.getStyleClass().add("background");
         var filter = new TextField();
+        filter.setAccessibleText("Filter");
 
         SimpleChangeListener.apply(filterText, val -> {
             PlatformThread.runLaterIfNeeded(() -> filter.setText(val));

File: app/src/main/java/io/xpipe/app/fxcomps/util/Shortcuts.java
Patch:
@@ -46,7 +46,7 @@ public void handle(KeyEvent ke) {
 
             if (s != null) {
                 scene.set(s);
-                SHORTCUTS.put(region, comb);
+                s.addEventHandler(KeyEvent.KEY_PRESSED, filter);
             }
         });
     }

File: ext/base/src/main/java/module-info.java
Patch:
@@ -27,6 +27,9 @@
     requires com.sun.jna.platform;
 
     provides BrowserAction with
+            BackAction,
+            ForwardAction,
+            RefreshAction,
             OpenFileDefaultAction,
             OpenFileWithAction,
             OpenDirectoryAction,

File: app/src/main/java/io/xpipe/app/issue/ErrorHandlerComp.java
Patch:
@@ -156,11 +156,10 @@ private Region createTop() {
         if (desc == null) {
             desc = AppI18n.get("errorNoDetail");
         }
-        var limitedDescription = desc.substring(0, Math.min(1000, desc.length()));
 
         var header = new Label(AppI18n.get(headerId));
         AppFont.header(header);
-        var descriptionField = new TextArea(limitedDescription);
+        var descriptionField = new TextArea(desc);
         descriptionField.setPrefRowCount(4);
         descriptionField.setWrapText(true);
         descriptionField.setEditable(false);

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -60,10 +60,10 @@ private static void createMacOSShortcut(String target, String name) throws Excep
             pc.executeSimpleCommand(pc.getShellDialect().getMkdirsCommand(base + "/Contents/Resources"));
 
             var executable = base + "/Contents/MacOS/" + name;
-            pc.getShellDialect().createTextFileWriteCommand(pc, content, executable).execute();
+            pc.getShellDialect().createScriptTextFileWriteCommand(pc, content, executable).execute();
             pc.executeSimpleCommand("chmod ugo+x \"" + executable + "\"");
 
-            pc.getShellDialect().createTextFileWriteCommand(pc, "APPL????", base + "/PkgInfo").execute();
+            pc.getShellDialect().createScriptTextFileWriteCommand(pc, "APPL????", base + "/PkgInfo").execute();
             pc.executeSimpleCommand("cp \"" + icon + "\" \"" + base + "/Contents/Resources/" + name + ".icns\"");
         }
     }

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -110,7 +110,7 @@ public static String createExecScript(ShellControl processControl, String file,
         // processControl.executeSimpleCommand(type.getFileTouchCommand(file), "Failed to create script " + file);
         processControl
                 .getShellDialect()
-                .createTextFileWriteCommand(processControl, content, file)
+                .createScriptTextFileWriteCommand(processControl, content, file)
                 .execute();
         var e = type.getMakeExecutableCommand(file);
         if (e != null) {

File: core/src/main/java/io/xpipe/core/util/XPipeSystemId.java
Patch:
@@ -35,7 +35,7 @@ public static UUID getSystemId(ShellControl proc) throws Exception {
                     proc.getShellDialect().getMkdirsCommand(FileNames.getParent(file)),
                     "Unable to access or create directory " + file);
             var id = UUID.randomUUID();
-            proc.getShellDialect().createTextFileWriteCommand(proc, id.toString(), file).execute();
+            proc.getShellDialect().createScriptTextFileWriteCommand(proc, id.toString(), file).execute();
             return id;
         }
 

File: app/src/main/java/io/xpipe/app/browser/BrowserComp.java
Patch:
@@ -73,6 +73,8 @@ protected Region createSimple() {
                         model.getOpenFileSystems(),
                         model.getSelected())))
                 .createRegion();
+        localDownloadStage.setPrefHeight(200);
+        localDownloadStage.setMaxHeight(200);
         var vertical = new VBox(bookmarksList, localDownloadStage);
         vertical.setFillWidth(true);
 

File: app/src/main/java/io/xpipe/app/browser/FileSystemHelper.java
Patch:
@@ -89,6 +89,7 @@ public static String validateDirectoryPath(OpenFileSystemModel model, String pat
     public static FileSystem.FileEntry getLocal(Path file) throws Exception {
         if (localFileSystem == null) {
             localFileSystem = new LocalStore().createFileSystem();
+            localFileSystem.open();
         }
 
         return new FileSystem.FileEntry(

File: app/src/main/java/io/xpipe/app/test/LocalExtensionTest.java
Patch:
@@ -1,8 +1,9 @@
 package io.xpipe.app.test;
 
+import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.ext.XPipeServiceProviders;
-import io.xpipe.core.util.JacksonMapper;
 import io.xpipe.app.util.XPipeSession;
+import io.xpipe.core.util.JacksonMapper;
 import org.junit.jupiter.api.BeforeAll;
 
 import java.util.UUID;
@@ -13,6 +14,7 @@ public class LocalExtensionTest extends ExtensionTest {
     public static void setup() throws Exception {
         JacksonMapper.initModularized(ModuleLayer.boot());
         XPipeServiceProviders.load(ModuleLayer.boot());
+        AppProperties.init();
         XPipeSession.init(UUID.randomUUID());
     }
 }

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -37,7 +37,7 @@ default boolean isLocal() {
 
     String getSubTemporaryDirectory();
 
-    public void checkRunning() throws Exception;
+    public void checkRunning();
 
     default CommandControl osascriptCommand(String script) {
         return command(String.format(

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenTerminalAction.java
Patch:
@@ -3,7 +3,6 @@
 import io.xpipe.app.browser.BrowserEntry;
 import io.xpipe.app.browser.OpenFileSystemModel;
 import io.xpipe.app.browser.action.LeafAction;
-import io.xpipe.app.prefs.AppPrefs;
 import javafx.scene.Node;
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.KeyCodeCombination;
@@ -48,6 +47,6 @@ public KeyCombination getShortcut() {
 
     @Override
     public String getName(OpenFileSystemModel model, List<BrowserEntry> entries) {
-        return "Open in " + AppPrefs.get().terminalType().getValue().toTranslatedString();
+        return "Open in terminal";
     }
 }

File: app/src/main/java/io/xpipe/app/comp/source/store/GuiDsStoreCreator.java
Patch:
@@ -63,7 +63,7 @@ public GuiDsStoreCreator(
         this.provider = provider;
         this.input = input;
         this.filter = filter;
-        this.name = new SimpleStringProperty(initialName);
+        this.name = new SimpleStringProperty(initialName != null && !initialName.isEmpty() ? initialName : null);
         this.input.addListener((c, o, n) -> {
             changedSinceError.setValue(true);
         });

File: app/src/main/java/io/xpipe/app/util/ChainedValidator.java
Patch:
@@ -79,13 +79,14 @@ public boolean containsErrors() {
 
     @Override
     public boolean validate() {
+        var valid = true;
         for (var val : validators) {
             if (!val.validate()) {
-                return false;
+                valid = false;
             }
         }
 
-        return true;
+        return valid;
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/browser/BrowserNavBar.java
Patch:
@@ -38,7 +38,8 @@ protected Region createSimple() {
             pathBar.pseudoClassStateChanged(INVISIBLE, !val);
             if (val) {
                 Platform.runLater(() -> {
-                    pathBar.selectAll();
+                    pathBar.end();
+                    pathBar.selectBackward();
                 });
             }
         });

File: app/src/main/java/io/xpipe/app/comp/source/store/GuiDsStoreCreator.java
Patch:
@@ -107,7 +107,7 @@ public static void showCreation(Predicate<DataStoreProvider> filter) {
         show(null, null, null, filter, e -> {
             try {
                 DataStorage.get().addStoreEntry(e);
-                ScanAlert.showAsync(e.getStore(), true);
+                // ScanAlert.showAsync(e.getStore(), true);
             } catch (Exception ex) {
                 ErrorEvent.fromThrowable(ex).handle();
             }

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -54,6 +54,7 @@ public void finalTeardown() {
         SourceCollectionViewState.reset();
         StoreViewState.reset();
         DataStorage.reset();
+        AppPrefs.reset();
         AppExtensionManager.reset();
         TrackEvent.info("mode", "Background mode shutdown finished");
     }

File: app/src/main/java/io/xpipe/app/launcher/LauncherInput.java
Patch:
@@ -117,7 +117,7 @@ public void execute() {
             }
 
             var dir = Files.isDirectory(file) ? file : file.getParent();
-            BrowserModel.DEFAULT.openFileSystemAsync(ShellStore.createLocal(), dir.toString());
+            BrowserModel.DEFAULT.openFileSystemAsync(null, ShellStore.createLocal(), dir.toString());
         }
 
         @Override

File: core/src/main/java/io/xpipe/core/process/CommandControl.java
Patch:
@@ -60,11 +60,11 @@ default boolean executeAndCheck() throws Exception {
 
     int getExitCode();
 
-    default CommandControl elevated() {
-        return elevated((v) -> true);
+    default CommandControl elevated(String message) {
+        return elevated(message, (v) -> true);
     }
 
-    CommandControl elevated(FailableFunction<ShellControl, Boolean, Exception> elevationFunction);
+    CommandControl elevated(String message, FailableFunction<ShellControl, Boolean, Exception> elevationFunction);
 
     @Override
     CommandControl start() throws Exception;

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -84,7 +84,7 @@ default String executeSimpleStringCommand(ShellDialect type, String command) thr
 
     OsType getOsType();
 
-    ShellControl elevated(FailableFunction<ShellControl, Boolean, Exception> elevationFunction);
+    ShellControl elevated(String message, FailableFunction<ShellControl, Boolean, Exception> elevationFunction);
 
     ShellControl elevationPassword(SecretValue value);
 

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -100,6 +100,8 @@ default String getOrConcatenationOperator() {
 
     String getPrintVariableCommand(String name);
 
+    String getUsernameVariableName();
+
     String getPrintExitCodeCommand(String prefix);
 
     default String getPrintEnvironmentVariableCommand(String name) {

File: ext/base/src/main/java/io/xpipe/ext/base/actions/SampleAction.java
Patch:
@@ -80,7 +80,7 @@ public void execute() throws Exception {
                 // sudo and the optional sudo password automatically provided by XPipe
                 // by using the information from the connection store.
                 // You can also set a custom working directory.
-                try (CommandControl cc = sc.command("kill <pid>").elevated().workingDirectory("/").start()) {
+                try (CommandControl cc = sc.command("kill <pid>").elevated("kill").workingDirectory("/").start()) {
                     // Discard any output but throw an exception with the stderr contents if the exit code is not 0
                     cc.discardOrThrow();
                 }

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenDirectoryInNewTabAction.java
Patch:
@@ -15,7 +15,7 @@ public class OpenDirectoryInNewTabAction implements LeafAction {
 
     @Override
     public void execute(OpenFileSystemModel model, List<BrowserEntry> entries) throws Exception {
-        model.getBrowserModel().openFileSystemAsync(model.getStore().asNeeded(), entries.get(0).getRawFileEntry().getPath());
+        model.getBrowserModel().openFileSystemAsync(model.getName(), model.getStore().asNeeded(), entries.get(0).getRawFileEntry().getPath());
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -42,7 +42,7 @@ public static void installFile(ShellControl s, InstallerAssetType asset, Path lo
             targetFile = localFile.toString();
         } else {
             targetFile = FileNames.join(
-                    s.getTemporaryDirectory(), localFile.getFileName().toString());
+                    s.getSubTemporaryDirectory(), localFile.getFileName().toString());
             try (InputStream in = Files.newInputStream(localFile)) {
                 in.transferTo(s.getShellDialect().createStreamFileWriteCommand(s, targetFile).startExternalStdin());
             }

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -33,7 +33,9 @@ default boolean isLocal() {
 
     String prepareIntermediateTerminalOpen(String content, String displayName) throws Exception;
 
-    String getTemporaryDirectory() throws Exception;
+    String getSystemTemporaryDirectory();
+
+    String getSubTemporaryDirectory();
 
     public void checkRunning() throws Exception;
 

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -110,7 +110,7 @@ default String getPrintEnvironmentVariableCommand(String name) {
 
     String prepareTerminalInitFileOpenCommand(ShellDialect parentDialect, ShellControl sc, String file) throws Exception;
 
-    String runScript(String file);
+    String runScript(ShellControl parent, String file);
 
     String sourceScript(String file);
 

File: ext/base/src/main/java/io/xpipe/ext/base/browser/RunAction.java
Patch:
@@ -61,6 +61,6 @@ public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entrie
 
     @Override
     protected String createCommand(ShellControl sc, OpenFileSystemModel model, BrowserEntry entry) {
-        return sc.getShellDialect().runScript(entry.getFileName());
+        return sc.getShellDialect().runScript(sc, entry.getFileName());
     }
 }

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -55,13 +55,13 @@ public static String constructInitFile(
 
         var applyRcCommand = t.applyRcFileCommand();
         if (applyRcCommand != null) {
-            content = content + "\n" + applyRcCommand;
+            content = content + "\n" + applyRcCommand + "\n";
         }
 
         if (login) {
             var applyProfilesCommand = t.applyProfileFilesCommand();
             if (applyProfilesCommand != null) {
-                content = content + "\n" + applyProfilesCommand;
+                content = content + "\n" + applyProfilesCommand + "\n";
             }
         }
 

File: core/src/main/java/io/xpipe/core/util/XPipeTempDirectory.java
Patch:
@@ -19,7 +19,8 @@ public static String getSubDirectory(ShellControl proc, String... sub) throws Ex
         var arr = Stream.concat(Stream.of(base, "xpipe"), Arrays.stream(sub)).toArray(String[]::new);
         var dir = FileNames.join(arr);
 
-        if (!proc.getShellDialect().createFileExistsCommand(proc, dir).executeAndCheck()) {
+        var existsCommand = proc.getShellDialect().createFileExistsCommand(proc, dir);
+        if (!existsCommand.executeAndCheck()) {
             proc.executeSimpleCommand(
                     proc.getShellDialect().getMkdirsCommand(dir),
                     "Unable to access or create temporary directory " + dir);

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -44,7 +44,7 @@ public static String createLocalExecScript(String content) {
     }
 
     public static String constructInitFile(
-            ShellControl processControl, List<String> init, String toExecuteInShell, boolean login, String displayName) {
+            ShellControl processControl, List<String> init, String toExecuteInShell, boolean login, String displayName) throws Exception {
         ShellDialect t = processControl.getShellDialect();
         String nl = t.getNewLine().getNewLineString();
         var content = String.join(nl, init.stream().filter(s -> s != null).toList()) + nl;
@@ -71,7 +71,7 @@ public static String constructInitFile(
             content += t.getExitCommand() + nl;
         }
 
-        var initFile = createExecScript(processControl, content);
+        var initFile = createExecScript(processControl, t.initFileName(processControl), content);
         return initFile;
     }
 
@@ -99,7 +99,7 @@ public static String createExecScript(ShellControl processControl, String conten
     }
 
     @SneakyThrows
-    private static String createExecScript(ShellControl processControl, String file, String content) {
+    public static String createExecScript(ShellControl processControl, String file, String content) {
         ShellDialect type = processControl.getShellDialect();
         content = type.prepareScriptContent(content);
 

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -14,6 +14,8 @@
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface ShellDialect {
 
+    String initFileName(ShellControl sc) throws Exception;
+
     CommandControl directoryExists(ShellControl shellControl,  String directory);
 
     CommandControl normalizeDirectory(ShellControl shellControl,  String directory);

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenFileWithAction.java
Patch:
@@ -56,7 +56,7 @@ public Node getIcon(OpenFileSystemModel model, List<BrowserEntry> entries) {
     public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entries) {
         var os = model.getFileSystem().getShell();
         return os.isPresent()
-                && !os.get().getOsType().equals(OsType.MACOS)
+                && os.get().getOsType().equals(OsType.WINDOWS)
                 && entries.size() == 1
                 && entries.stream().noneMatch(entry -> entry.getRawFileEntry().isDirectory());
     }

File: app/src/main/java/io/xpipe/app/browser/BrowserStatusBarComp.java
Patch:
@@ -60,7 +60,7 @@ protected Region createSimple() {
         AppFont.small(bar);
 
         // Use status bar as an extension of file list
-        new ContextMenuAugment<>(false, true, () -> new BrowserContextMenu(model, null)).augment(new SimpleCompStructure<>(bar));
+        new ContextMenuAugment<>(() -> new BrowserContextMenu(model, null)).augment(new SimpleCompStructure<>(bar));
 
         return bar;
     }

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemComp.java
Patch:
@@ -15,6 +15,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.KeyCombination;
+import javafx.scene.input.MouseButton;
 import javafx.scene.layout.Priority;
 import javafx.scene.layout.Region;
 import javafx.scene.layout.VBox;
@@ -57,7 +58,7 @@ private Region createContent() {
         terminalBtn.disableProperty().bind(PlatformThread.sync(model.getNoDirectory()));
 
         var menuButton = new MenuButton(null, new FontIcon("mdral-folder_open"));
-        new ContextMenuAugment<>(true, false, () -> new BrowserContextMenu(model, null)).augment(new SimpleCompStructure<>(menuButton));
+        new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, () -> new BrowserContextMenu(model, null)).augment(new SimpleCompStructure<>(menuButton));
 
         var filter = new BrowserFilterComp(model.getFilter()).createStructure();
         Shortcuts.addShortcut(filter.toggleButton(), new KeyCodeCombination(KeyCode.F, KeyCombination.SHORTCUT_DOWN));

File: app/src/main/java/io/xpipe/app/comp/storage/collection/SourceCollectionContextMenu.java
Patch:
@@ -17,7 +17,7 @@ public class SourceCollectionContextMenu<S extends CompStructure<?>> extends Con
 
     public SourceCollectionContextMenu(
             boolean showOnPrimaryButton, SourceCollectionWrapper group, Region renameTextField) {
-        super(showOnPrimaryButton, true, () -> createContextMenu(group, renameTextField));
+        super(() -> createContextMenu(group, renameTextField));
     }
 
     private static void onDelete(SourceCollectionWrapper group) {

File: app/src/main/java/io/xpipe/app/comp/storage/source/SourceEntryContextMenu.java
Patch:
@@ -20,7 +20,7 @@ public class SourceEntryContextMenu<S extends CompStructure<?>> extends ContextM
 
 
     public SourceEntryContextMenu(boolean showOnPrimaryButton, SourceEntryWrapper entry, Region renameTextField) {
-        super(showOnPrimaryButton, true, () -> createContextMenu(entry, renameTextField));
+        super(() -> createContextMenu(entry, renameTextField));
     }
 
     protected static ContextMenu createContextMenu(SourceEntryWrapper entry, Region renameTextField) {

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryComp.java
Patch:
@@ -26,6 +26,7 @@
 import javafx.geometry.Pos;
 import javafx.scene.Node;
 import javafx.scene.control.*;
+import javafx.scene.input.MouseButton;
 import javafx.scene.layout.ColumnConstraints;
 import javafx.scene.layout.GridPane;
 import javafx.scene.layout.Region;
@@ -164,7 +165,7 @@ protected Region createContent() {
             });
         });
 
-        new ContextMenuAugment<>(false, true, () -> StoreEntryComp.this.createContextMenu()).augment(new SimpleCompStructure<>(button));
+        new ContextMenuAugment<>(() -> StoreEntryComp.this.createContextMenu()).augment(new SimpleCompStructure<>(button));
 
         return button;
     }
@@ -213,7 +214,7 @@ private Comp<?> createButtonBar() {
     private Comp<?> createSettingsButton() {
         var settingsButton = new IconButtonComp("mdomz-settings");
         settingsButton.styleClass("settings");
-        settingsButton.apply(new ContextMenuAugment<>(true, false, () -> StoreEntryComp.this.createContextMenu()));
+        settingsButton.apply(new ContextMenuAugment<>(event -> event.getButton() == MouseButton.PRIMARY, () -> StoreEntryComp.this.createContextMenu()));
         settingsButton.apply(GrowAugment.create(false, true));
         settingsButton.apply(s -> {
             s.get().prefWidthProperty().bind(Bindings.divide(s.get().heightProperty(), 1.35));

File: core/src/main/java/io/xpipe/core/impl/FileNames.java
Patch:
@@ -76,7 +76,7 @@ public static String getBaseName(String file) {
         }
 
         var name = FileNames.getFileName(file);
-        var split = file.lastIndexOf("\\.");
+        var split = file.lastIndexOf(".");
         if (split == -1) {
             return name;
         }

File: ext/base/src/main/java/io/xpipe/ext/base/browser/OpenNativeFileDetailsAction.java
Patch:
@@ -59,7 +59,7 @@ public Category getCategory() {
     @Override
     public boolean isApplicable(OpenFileSystemModel model, List<BrowserEntry> entries) {
         var sc = model.getFileSystem().getShell();
-        return sc.isPresent() && !sc.get().getOsType().equals(OsType.WINDOWS);
+        return model.isLocal() && !sc.get().getOsType().equals(OsType.WINDOWS);
     }
 
     @Override

File: ext/base/src/main/java/module-info.java
Patch:
@@ -43,6 +43,7 @@
             RenameAction,
             DeleteAction,
             UnzipAction,
+            JavapAction,
             JarAction;
     provides ActionProvider with
             DeleteStoreChildrenAction,

File: app/src/main/java/io/xpipe/app/browser/BrowserFileListComp.java
Patch:
@@ -95,11 +95,13 @@ private TableView<BrowserEntry> createTable() {
         modeCol.setCellValueFactory(param ->
                 new SimpleObjectProperty<>(param.getValue().getRawFileEntry().getMode()));
         modeCol.setCellFactory(col -> new FileModeCell());
+        modeCol.setSortable(false);
 
         var table = new TableView<BrowserEntry>();
         table.setPlaceholder(new Region());
         table.getStyleClass().add(Styles.STRIPED);
         table.getColumns().setAll(filenameCol, sizeCol, modeCol, mtimeCol);
+        table.getSortOrder().add(filenameCol);
         table.setSortPolicy(param -> {
             var comp = table.getComparator();
             if (comp == null) {
@@ -315,6 +317,7 @@ private void prepareTableChanges(
 
                 if (!table.getItems().equals(newItems)) {
                     table.getItems().setAll(newItems);
+                    table.sort();
                 }
 
                 var currentDirectory = fileList.getFileSystemModel().getCurrentDirectory();

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -24,7 +24,7 @@ public static void open(String title, String command) throws Exception {
         try {
             type.launch(title, command, false);
         } catch (Exception ex) {
-            throw new IOException("Unable to launch terminal " + type.toTranslatedString() + ". Maybe try to use a different one in the settings.", ex);
+            throw new IOException("Unable to launch terminal " + type.toTranslatedString() + ": " + ex.getMessage() + ". Maybe try to use a different one in the settings.", ex);
         }
     }
 }

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -109,7 +109,8 @@ public boolean isSelectable() {
 
         @Override
         protected String toCommand(String name, String file) {
-            return "--new-tab -e \"" + file + "\"";
+            // We would like to use --new-tab but that fails to open when no existing window is open.
+            return "-e \"" + file + "\"";
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/comp/source/store/GuiDsStoreCreator.java
Patch:
@@ -109,7 +109,7 @@ public static void showCreation(Predicate<DataStoreProvider> filter) {
         show(null, null, null, filter, e -> {
             try {
                 DataStorage.get().addStoreEntry(e);
-                ScanAlert.show(e.getStore(), true);
+                ScanAlert.showAsync(e.getStore(), true);
             } catch (Exception ex) {
                 ErrorEvent.fromThrowable(ex).handle();
             }

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryListComp.java
Patch:
@@ -15,14 +15,14 @@
 public class StoreEntryListComp extends SimpleComp {
 
     private Comp<?> createList() {
-        var topLevel = StoreViewSection.createTopLevels();
+        var topLevel = StoreSection.createTopLevels();
         var filtered = BindingsHelper.filteredContentBinding(
                 topLevel,
                 StoreViewState.get()
                         .getFilterString()
                         .map(s -> (storeEntrySection -> storeEntrySection.shouldShow(s))));
-        var content = new ListBoxViewComp<>(filtered, topLevel, (StoreViewSection e) -> {
-            return new StoreEntrySection(e, true);
+        var content = new ListBoxViewComp<>(filtered, topLevel, (StoreSection e) -> {
+            return new StoreEntrySection(e);
         });
         return content.styleClass("store-list-comp").styleClass(Styles.STRIPED);
     }

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreIntroComp.java
Patch:
@@ -35,7 +35,7 @@ public Region createSimple() {
         });
 
         var scanButton = new Button(AppI18n.get("detectConnections"), new FontIcon("mdi2m-magnify"));
-        scanButton.setOnAction(event -> ScanAlert.show(new LocalStore(), false));
+        scanButton.setOnAction(event -> ScanAlert.showAsync(new LocalStore(), false));
         var scanPane = new StackPane(scanButton);
         scanPane.setAlignment(Pos.CENTER);
 

File: app/src/main/java/io/xpipe/app/browser/FileListModel.java
Patch:
@@ -61,7 +61,7 @@ public void setAll(List<FileSystem.FileEntry> newFiles) {
 
     public void setAll(Stream<FileSystem.FileEntry> newFiles) {
         try (var s = newFiles) {
-            var l = s.limit(5000).toList();
+            var l = s.filter(entry -> entry != null).limit(5000).toList();
             all.setValue(l);
             refreshShown();
         }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/SvgCacheComp.java
Patch:
@@ -52,6 +52,7 @@ protected Region createSimple() {
         back.prefWidthProperty().bind(width);
         back.prefHeightProperty().bind(height);
         var animation = new AtomicReference<PauseTransition>();
+        var active = new SimpleObjectProperty<PauseTransition>();
         svgFile.addListener((observable, oldValue, newValue) -> {
             var cached = cache.getCached(newValue);
             webViewContent.setValue(newValue != null || cached.isEmpty() ? AppImages.svgImage(newValue) : null);
@@ -65,13 +66,14 @@ protected Region createSimple() {
             }
 
             var pt = new PauseTransition();
+            active.set(pt);
             pt.setDuration(Duration.millis(500));
             pt.setOnFinished(actionEvent -> {
                 if (newValue == null || cache.getCached(newValue).isPresent()) {
                     return;
                 }
 
-                if (!newValue.equals(svgFile.getValue())) {
+                if (!active.get().equals(pt)) {
                     return;
                 }
 

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -41,6 +41,9 @@ public void handle(ErrorEvent ee) {
                     options.setTag("osVersion", System.getProperty("os.version"));
                     options.setTag("arch", System.getProperty("os.arch"));
                     options.setDist(XPipeDistributionType.get().getId());
+                    if (AppProperties.get().isStaging()) {
+                        options.setTag("staging", "true");
+                    }
                 });
             }
             init = true;

File: app/src/main/java/io/xpipe/app/browser/FileBrowserHistory.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Objects;
 import java.util.Optional;
 
-final class FileBrowserNavigationHistory {
+final class FileBrowserHistory {
 
     private final IntegerProperty cursor = new SimpleIntegerProperty(0);
     private final List<String> history = new ArrayList<>();
@@ -25,7 +25,7 @@ public String getCurrent() {
         return history.size() > 0 ? history.get(cursor.get()) : null;
     }
 
-    public void cd(String s) {
+    public void updateCurrent(String s) {
         if (s == null) {
             return;
         }

File: app/src/main/java/io/xpipe/app/comp/about/AboutTabComp.java
Patch:
@@ -37,7 +37,7 @@ private Comp<?> createLinks() {
         return new DynamicOptionsBuilder(false)
                 .addTitle("links")
                 //.addComp(AppI18n.observable("documentation"), hyperlink(Hyperlinks.DOCUMENTATION), null)
-                .addComp(AppI18n.observable("security"), hyperlink(Hyperlinks.SECURITY), null)
+                .addComp(AppI18n.observable("securityPolicy"), hyperlink(Hyperlinks.SECURITY), null)
                 .addComp(AppI18n.observable("privacy"), hyperlink(Hyperlinks.PRIVACY), null)
                 .addComp(AppI18n.observable("discord"), hyperlink(Hyperlinks.DISCORD), null)
                 .addComp(AppI18n.observable("slack"), hyperlink(Hyperlinks.SLACK), null)

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -42,7 +42,7 @@ public static String constructInitFile(
             ShellControl processControl, List<String> init, String toExecuteInShell, boolean login) {
         ShellDialect t = processControl.getShellDialect();
         String nl = t.getNewLine().getNewLineString();
-        var content = String.join(nl, init) + nl;
+        var content = String.join(nl, init.stream().filter(s -> s != null).toList()) + nl;
 
         if (login) {
             var applyProfilesCommand = t.applyProfileFilesCommand();

File: core/src/main/java/io/xpipe/core/store/ConnectionFileSystem.java
Patch:
@@ -15,10 +15,10 @@
 public class ConnectionFileSystem implements FileSystem {
 
     @JsonIgnore
-    private final ShellControl shellControl;
+    protected final ShellControl shellControl;
 
     @JsonIgnore
-    private final ShellStore store;
+    protected final ShellStore store;
 
     public ConnectionFileSystem(ShellControl shellControl, ShellStore store) {
         this.shellControl = shellControl;

File: app/src/main/java/io/xpipe/app/comp/source/store/GuiDsStoreCreator.java
Patch:
@@ -99,7 +99,6 @@ public static void showEdit(DataStoreEntry e) {
                 e.applyChanges(newE);
                 if (!DataStorage.get().getStoreEntries().contains(e)) {
                     DataStorage.get().addStoreEntry(e);
-                    ScanAlert.showIfNeeded(e.getStore(), true);
                 }
                 DataStorage.get().refresh();
             });

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryWrapper.java
Patch:
@@ -65,6 +65,7 @@ public void editDialog() {
     }
 
     public void delete() {
+        DataStorage.get().deleteChildren(this.entry, true);
         DataStorage.get().deleteStoreEntry(this.entry);
     }
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -40,11 +40,11 @@ protected Optional<Path> getApplicationPath() {
             try (ShellControl pc = LocalStore.getShell().start()) {
                 try (var c = pc.command(String.format(
                                 "/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister "
-                                        + "-dump | grep -o \"/.*%s.app\" | grep -v -E \"Caches|TimeMachine|Temporary|/Volumes/%s\" | uniq",
+                                        + "-dump | grep -o \"/.*%s.app\" | grep -v -E \"Caches|TimeMachine|Temporary|.Trash|/Volumes/%s\" | uniq",
                                 applicationName, applicationName))
                         .start()) {
                     var path = c.readStdoutDiscardErr();
-                    if (c.getExitCode() != 0) {
+                    if (c.getExitCode() != 0 || path.isBlank()) {
                         return Optional.empty();
                     }
                     return Optional.of(Path.of(path));

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -227,7 +227,7 @@ public boolean isAvailable() {
     static class ITerm2Type extends ExternalApplicationType.MacApplication implements ExternalTerminalType {
 
         public ITerm2Type() {
-            super("iterm2", "iTerm2");
+            super("iterm2", "iTerm");
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/issue/ExceptionConverter.java
Patch:
@@ -16,7 +16,7 @@ public static String convertMessage(Throwable ex) {
 
         return switch (ex) {
             case ProcessOutputException e -> {
-                if (e.getOutput().isBlank()) {
+                if (e.getOutput() == null || e.getOutput().isBlank()) {
                     yield e.getMessage();
                 } else {
                     yield e.getOutput();

File: app/src/main/java/io/xpipe/app/comp/base/MessageComp.java
Patch:
@@ -7,7 +7,7 @@
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.value.ObservableValue;
-import javafx.scene.control.Label;
+import javafx.scene.control.TextArea;
 import javafx.scene.layout.Region;
 import javafx.scene.layout.StackPane;
 import lombok.AccessLevel;
@@ -43,10 +43,11 @@ public void show() {
 
     @Override
     protected Region createSimple() {
-        var l = new Label();
+        var l = new TextArea();
         l.textProperty().bind(text);
         l.setWrapText(true);
         l.getStyleClass().add("message");
+        l.setEditable(false);
 
         var sp = new StackPane(l);
         sp.getStyleClass().add("message-comp");

File: core/src/main/java/io/xpipe/core/util/AesSecretValue.java
Patch:
@@ -11,8 +11,8 @@
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.security.NoSuchAlgorithmException;
-import java.security.SecureRandom;
 import java.security.spec.InvalidKeySpecException;
+import java.util.Random;
 
 @SuperBuilder
 @Jacksonized
@@ -31,7 +31,7 @@ public AesSecretValue(char[] secret) {
 
     private static byte[] getFixedNonce(int numBytes) {
         byte[] nonce = new byte[numBytes];
-        new SecureRandom(new byte[] {1, -28, 123}).nextBytes(nonce);
+        new Random(1 - 28 + 213213).nextBytes(nonce);
         return nonce;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/actions/AddStoreAction.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.comp.source.store.GuiDsStoreCreator;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStoreEntry;
-import io.xpipe.app.util.SecretHelper;
+import io.xpipe.app.util.DefaultSecretValue;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.util.JacksonMapper;
 import lombok.Value;
@@ -43,7 +43,7 @@ public String getId() {
 
             @Override
             public Action createAction(List<String> args) throws Exception {
-                var storeString = SecretHelper.encryptInPlace(args.get(0));
+                var storeString = DefaultSecretValue.builder().encryptedValue(args.get(0)).build();
                 var store = JacksonMapper.parse(storeString.getSecretValue(), DataStore.class);
                 return new Action(store);
             }

File: app/src/main/java/io/xpipe/app/util/DefaultSecretValue.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.xpipe.core.util.AesSecretValue;
+import lombok.EqualsAndHashCode;
 import lombok.experimental.SuperBuilder;
 import lombok.extern.jackson.Jacksonized;
 
@@ -18,6 +19,7 @@
 @JsonTypeName("default")
 @SuperBuilder
 @Jacksonized
+@EqualsAndHashCode(callSuper = true)
 public class DefaultSecretValue extends AesSecretValue {
 
     public DefaultSecretValue(char[] secret) {

File: app/src/main/java/io/xpipe/app/util/LockedSecretValue.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.core.util.AesSecretValue;
+import lombok.EqualsAndHashCode;
 import lombok.experimental.SuperBuilder;
 import lombok.extern.jackson.Jacksonized;
 
@@ -18,6 +19,7 @@
 @JsonTypeName("locked")
 @SuperBuilder
 @Jacksonized
+@EqualsAndHashCode(callSuper = true)
 public class LockedSecretValue extends AesSecretValue {
 
     public LockedSecretValue(char[] secret) {

File: app/src/main/java/io/xpipe/app/util/UnlockAlert.java
Patch:
@@ -42,7 +42,7 @@ public static void showIfNeeded() {
                 return;
             }
 
-            if (AppPrefs.get().checkLock(pw.get())) {
+            if (AppPrefs.get().unlock(pw.get())) {
                 return;
             }
         }

File: core/src/main/java/io/xpipe/core/util/AesSecretValue.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.core.util;
 
+import lombok.EqualsAndHashCode;
 import lombok.SneakyThrows;
 import lombok.experimental.SuperBuilder;
 import lombok.extern.jackson.Jacksonized;
@@ -15,6 +16,7 @@
 
 @SuperBuilder
 @Jacksonized
+@EqualsAndHashCode(callSuper = true)
 public class AesSecretValue extends EncryptedSecretValue {
 
     private static final String ENCRYPT_ALGO = "AES/GCM/NoPadding";

File: core/src/main/java/io/xpipe/core/util/EncryptedSecretValue.java
Patch:
@@ -1,5 +1,6 @@
 package io.xpipe.core.util;
 
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.experimental.SuperBuilder;
 import lombok.extern.jackson.Jacksonized;
@@ -11,6 +12,7 @@
 
 @SuperBuilder
 @Jacksonized
+@EqualsAndHashCode
 public class EncryptedSecretValue implements SecretValue {
 
     @Getter
@@ -38,7 +40,7 @@ public char[] getSecret() {
             charBuffer.get(chars);
             return chars;
         } catch (Exception ex) {
-            return new char[0];
+            throw new IllegalStateException("Unable to decrypt secret");
         }
     }
 

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -119,7 +119,7 @@ private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue
     // ====
 
     private final Property<SecretValue> lockPassword = new SimpleObjectProperty<SecretValue>();
-    private final StringProperty lockCrypt = typed(new SimpleStringProperty(null), String.class);
+    private final StringProperty lockCrypt = typed(new SimpleStringProperty(""), String.class);
     private final StringField lockCryptControl = StringField.ofStringType(lockCrypt).render(() -> new SimpleControl<StringField, StackPane>() {
 
                 private Region button;

File: app/src/main/java/io/xpipe/app/prefs/JsonStorageHandler.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.dlsc.preferencesfx.util.StorageHandler;
 import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.NullNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.node.TextNode;
 import com.fasterxml.jackson.databind.type.CollectionType;
@@ -50,7 +51,7 @@ public void saveObject(String breadcrumb, Object object) {
         var id = getSaveId(breadcrumb);
         var tree = object instanceof PrefsChoiceValue prefsChoiceValue
                 ? new TextNode(prefsChoiceValue.getId())
-                : JacksonMapper.newMapper().valueToTree(object);
+                : (object != null ? JacksonMapper.newMapper().valueToTree(object) : NullNode.getInstance());
         setContent(id, tree);
     }
 

File: app/src/main/java/io/xpipe/app/core/mode/GuiMode.java
Patch:
@@ -5,6 +5,7 @@
 import io.xpipe.app.issue.*;
 import io.xpipe.app.update.UpdateChangelogAlert;
 import io.xpipe.app.util.PlatformState;
+import io.xpipe.app.util.UnlockAlert;
 import javafx.application.Platform;
 
 import java.util.concurrent.CountDownLatch;
@@ -26,6 +27,7 @@ public void onSwitchTo() {
         Platform.runLater(() -> {
             try {
                 TrackEvent.info("mode", "Setting up window ...");
+                UnlockAlert.showIfNeeded();
                 App.getApp().setupWindow();
                 AppGreetings.showIfNeeded();
                 UpdateChangelogAlert.showIfNeeded();
@@ -57,7 +59,7 @@ public ErrorHandler getErrorHandler() {
         var log = new LogErrorHandler();
         return new SyncErrorHandler(event -> {
             log.handle(event);
-            ErrorHandlerComp.showAndWait(event);
+            ErrorHandlerComp.showAndTryWait(event, false);
         });
     }
 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/SecretFieldComp.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.app.fxcomps.CompStructure;
 import io.xpipe.app.fxcomps.SimpleCompStructure;
 import io.xpipe.app.fxcomps.util.PlatformThread;
+import io.xpipe.app.util.SecretHelper;
 import io.xpipe.core.util.SecretValue;
 import javafx.beans.property.Property;
 import javafx.scene.control.PasswordField;
@@ -22,7 +23,7 @@ public CompStructure<TextField> createBase() {
         var text = new PasswordField();
         text.setText(value.getValue() != null ? value.getValue().getSecretValue() : null);
         text.textProperty().addListener((c, o, n) -> {
-            value.setValue(n != null && n.length() > 0 ? SecretValue.encrypt(n) : null);
+            value.setValue(n != null && n.length() > 0 ? SecretHelper.encrypt(n) : null);
         });
         value.addListener((c, o, n) -> {
             PlatformThread.runLaterIfNeeded(() -> {

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -5,6 +5,7 @@
 import io.sentry.protocol.User;
 import io.xpipe.app.core.AppCache;
 import io.xpipe.app.core.AppProperties;
+import io.xpipe.app.core.mode.OperationMode;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.update.XPipeDistributionType;
 import org.apache.commons.io.FileUtils;
@@ -94,6 +95,7 @@ private static void fillScope(ErrorEvent ee, Scope s) {
                 .toList();
         atts.forEach(attachment -> s.addAttachment(attachment));
 
+        s.setTag("initError", String.valueOf(OperationMode.isInStartup()));
         s.setTag("developerMode", AppPrefs.get() != null ? AppPrefs.get().developerMode().getValue().toString() : "false");
         s.setTag("terminal", Boolean.toString(ee.isTerminal()));
         s.setTag("omitted", Boolean.toString(ee.isOmitted()));

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -124,12 +124,12 @@ private static String createAskPassScript(SecretValue pass, ShellControl parent,
         var file = FileNames.join(temp, fileName);
         if (type != parent.getShellDialect()) {
             try (var sub = parent.subShell(type)) {
-                var content = sub.getShellDialect().prepareAskpassContent(sub, file, Collections.singletonList(pass.getSecretValue()));
+                var content = sub.getShellDialect().prepareAskpassContent(sub, file,pass != null? Collections.singletonList(pass.getSecretValue()) : List.of());
                 var exec = createExecScript(sub, file, content);
                 return exec;
             }
         } else {
-            var content = parent.getShellDialect().prepareAskpassContent(parent, file, Collections.singletonList(pass.getSecretValue()));
+            var content = parent.getShellDialect().prepareAskpassContent(parent, file, pass != null?Collections.singletonList(pass.getSecretValue()) : List.of());
             var exec = createExecScript(parent, file, content);
             return exec;
         }

File: core/src/main/java/io/xpipe/core/dialog/QueryConverter.java
Patch:
@@ -50,12 +50,13 @@ protected String toString(String value) {
     public static final QueryConverter<SecretValue> SECRET = new QueryConverter<SecretValue>() {
         @Override
         protected SecretValue fromString(String s) {
-            return new SecretValue(s);
+            //TODO
+            return null;
         }
 
         @Override
         protected String toString(SecretValue value) {
-            return value.getEncryptedValue();
+            return value.getSecretValue();
         }
     };
 

File: ext/base/src/main/java/io/xpipe/ext/base/actions/AddStoreAction.java
Patch:
@@ -3,9 +3,9 @@
 import io.xpipe.app.comp.source.store.GuiDsStoreCreator;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.storage.DataStoreEntry;
+import io.xpipe.app.util.SecretHelper;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.util.JacksonMapper;
-import io.xpipe.core.util.SecretValue;
 import lombok.Value;
 
 import java.util.List;
@@ -43,7 +43,7 @@ public String getId() {
 
             @Override
             public Action createAction(List<String> args) throws Exception {
-                var storeString = SecretValue.ofSecret(args.get(0));
+                var storeString = SecretHelper.encryptInPlace(args.get(0));
                 var store = JacksonMapper.parse(storeString.getSecretValue(), DataStore.class);
                 return new Action(store);
             }

File: ext/base/src/main/java/io/xpipe/ext/base/actions/ShareStoreAction.java
Patch:
@@ -4,8 +4,8 @@
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.ActionProvider;
 import io.xpipe.app.ext.DataStoreProviders;
+import io.xpipe.app.util.SecretHelper;
 import io.xpipe.core.store.DataStore;
-import io.xpipe.core.util.SecretValue;
 import javafx.beans.value.ObservableValue;
 import lombok.Value;
 
@@ -26,7 +26,7 @@ public boolean requiresPlatform() {
         }
 
         public static String create(DataStore store) {
-            return "xpipe://addStore/" + SecretValue.encrypt(store.toString()).getEncryptedValue();
+            return "xpipe://addStore/" + SecretHelper.encryptInPlace(store.toString()).getEncryptedValue();
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/core/mode/PlatformMode.java
Patch:
@@ -6,6 +6,7 @@
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.update.UpdateAvailableAlert;
+import io.xpipe.app.util.PlatformState;
 import io.xpipe.app.util.ThreadHelper;
 import javafx.application.Application;
 import javafx.application.Platform;
@@ -89,7 +90,7 @@ protected void platformSetup() {
     protected void waitForPlatform() {
         // The platform thread waits for the shutdown hook to finish in case SIGTERM is sent.
         // Therefore, we do not wait for the platform when being in a shutdown hook.
-        if (App.isPlatformRunning() && !Platform.isFxApplicationThread() && !OperationMode.isInShutdownHook()) {
+        if (PlatformState.getCurrent() == PlatformState.RUNNING && !Platform.isFxApplicationThread() && !OperationMode.isInShutdownHook()) {
             TrackEvent.info("mode", "Waiting for platform thread ...");
             CountDownLatch latch = new CountDownLatch(1);
             Platform.runLater(latch::countDown);
@@ -116,6 +117,7 @@ public void finalTeardown() throws Throwable {
         TrackEvent.info("mode", "Shutting down platform components");
         onSwitchFrom();
         Platform.exit();
+        PlatformState.setCurrent(PlatformState.EXITED);
         TrackEvent.info("mode", "Platform shutdown finished");
         BACKGROUND.finalTeardown();
     }

File: app/src/main/java/io/xpipe/app/issue/ErrorAction.java
Patch:
@@ -39,7 +39,7 @@ public String getDescription() {
             @Override
             public boolean handle(ErrorEvent event) {
                 event.clearAttachments();
-                SentryErrorHandler.report(event);
+                SentryErrorHandler.getInstance().handle(event);
                 return true;
             }
         };

File: app/src/main/java/io/xpipe/app/issue/ErrorHandlerComp.java
Patch:
@@ -2,14 +2,14 @@
 
 import io.xpipe.app.comp.base.ButtonComp;
 import io.xpipe.app.comp.base.TitledPaneComp;
-import io.xpipe.app.core.App;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.core.AppWindowHelper;
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.augment.GrowAugment;
 import io.xpipe.app.util.JfxHelper;
+import io.xpipe.app.util.PlatformState;
 import javafx.application.Platform;
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleObjectProperty;
@@ -44,7 +44,7 @@ public ErrorHandlerComp(ErrorEvent event, Stage stage) {
     }
 
     public static void showAndWait(ErrorEvent event) {
-        if (!App.isPlatformRunning() || event.isOmitted()) {
+        if (PlatformState.getCurrent() != PlatformState.RUNNING || event.isOmitted()) {
             ErrorAction.ignore().handle(event);
             return;
         }

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -79,9 +79,7 @@ default String getOrConcatenationOperator() {
 
     String getMakeExecutableCommand(String file);
 
-    default String getSelfdeleteEchoScriptContent(String s) {
-        return getEchoCommand(s, false);
-    }
+    String prepareAskpassContent(ShellControl sc, String fileName, List<String> s) throws Exception;
 
     String getSetEnvironmentVariableCommand(String variable, String value);
 

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -23,7 +23,6 @@ public static void init() {
                 options.setEnableUncaughtExceptionHandler(false);
                 options.setAttachServerName(false);
                 // options.setDebug(true);
-                options.setDist(XPipeDistributionType.get().getId());
                 options.setRelease(AppProperties.get().getVersion());
                 options.setEnableShutdownHook(false);
                 options.setProguardUuid(AppProperties.get().getBuildUuid().toString());
@@ -87,6 +86,7 @@ private static void fillScope(ErrorEvent ee, Scope s) {
                 .toList();
         atts.forEach(attachment -> s.addAttachment(attachment));
 
+        s.setTag("dist", XPipeDistributionType.get().getId());
         s.setTag("developerMode", AppPrefs.get() != null ? AppPrefs.get().developerMode().getValue().toString() : "false");
         s.setTag("terminal", Boolean.toString(ee.isTerminal()));
         s.setTag("omitted", Boolean.toString(ee.isOmitted()));

File: app/src/main/java/io/xpipe/app/core/mode/OperationMode.java
Patch:
@@ -11,7 +11,7 @@
 import io.xpipe.app.launcher.LauncherCommand;
 import io.xpipe.app.util.ThreadHelper;
 import io.xpipe.core.util.XPipeDaemonMode;
-import io.xpipe.core.util.XPipeSession;
+import io.xpipe.app.util.XPipeSession;
 import org.apache.commons.lang3.function.FailableRunnable;
 
 import java.util.ArrayList;

File: app/src/main/java/io/xpipe/app/issue/ErrorDetailsComp.java
Patch:
@@ -68,7 +68,7 @@ protected Region createSimple() {
 //                    AppI18n.observable("events"), "mdi2c-clipboard-list-outline", createTrackEventHistory()));
 //        }
 
-        var tb = new TabPaneComp(new SimpleObjectProperty<>(items.get(0)), items);
+        var tb = new TabPaneComp(new SimpleObjectProperty<>(items.size() > 0 ? items.get(0) : null), items);
         tb.apply(r -> AppFont.small(r.get()));
         return tb.createRegion();
     }

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -6,7 +6,7 @@
 import io.xpipe.app.core.AppCache;
 import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.prefs.AppPrefs;
-import io.xpipe.app.util.XPipeDistributionType;
+import io.xpipe.app.update.XPipeDistributionType;
 import org.apache.commons.io.FileUtils;
 
 import java.nio.file.Files;
@@ -23,7 +23,7 @@ public static void init() {
                 options.setEnableUncaughtExceptionHandler(false);
                 options.setAttachServerName(false);
                 // options.setDebug(true);
-                options.setDist(XPipeDistributionType.get().getName());
+                options.setDist(XPipeDistributionType.get().getId());
                 options.setRelease(AppProperties.get().getVersion());
                 options.setEnableShutdownHook(false);
                 options.setProguardUuid(AppProperties.get().getBuildUuid().toString());

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -3,8 +3,8 @@
 import io.sentry.Sentry;
 import io.xpipe.app.core.*;
 import io.xpipe.app.core.mode.OperationMode;
-import io.xpipe.app.update.AppUpdater;
 import io.xpipe.app.util.Hyperlinks;
+import io.xpipe.app.update.XPipeDistributionType;
 import javafx.application.Platform;
 import javafx.scene.control.Alert;
 import javafx.scene.control.ButtonBar;
@@ -87,8 +87,7 @@ private static void handleSecondaryException(ErrorEvent event, Throwable t) {
 
     private static void handleProbableUpdate() {
         try {
-            AppUpdater.init();
-            var rel = AppUpdater.get().refreshUpdateCheck();
+            var rel = XPipeDistributionType.get().getUpdateHandler().refreshUpdateCheck();
             if (rel != null && rel.isUpdate()) {
                 var update = AppWindowHelper.showBlockingAlert(alert -> {
                             alert.setAlertType(Alert.AlertType.INFORMATION);

File: app/src/main/java/io/xpipe/app/storage/StandardStorage.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
-import io.xpipe.core.util.XPipeSession;
+import io.xpipe.app.util.XPipeSession;
 import lombok.NonNull;
 import org.apache.commons.io.FileUtils;
 

File: app/src/main/java/io/xpipe/app/test/DaemonExtensionTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.util.JacksonMapper;
 import io.xpipe.core.util.XPipeDaemonMode;
-import io.xpipe.core.util.XPipeSession;
+import io.xpipe.app.util.XPipeSession;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 

File: app/src/main/java/io/xpipe/app/test/LocalExtensionTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.xpipe.app.ext.XPipeServiceProviders;
 import io.xpipe.core.util.JacksonMapper;
-import io.xpipe.core.util.XPipeSession;
+import io.xpipe.app.util.XPipeSession;
 import org.junit.jupiter.api.BeforeAll;
 
 import java.util.UUID;

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -12,9 +12,8 @@
 public class UpdateChangelogAlert {
 
     public static void showIfNeeded() {
-        var update = AppUpdater.get().getPerformedUpdate();
-
-        if (update != null && !AppUpdater.get().isUpdateSucceeded()) {
+        var update = XPipeDistributionType.get().getUpdateHandler().getPerformedUpdate();
+        if (update != null && !XPipeDistributionType.get().getUpdateHandler().isUpdateSucceeded()) {
             ErrorEvent.fromMessage("Update did not succeed").handle();
             return;
         }

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -21,6 +21,6 @@ public static void open(String title, String command) throws Exception {
             throw new IllegalStateException(AppI18n.get("noTerminalSet"));
         }
 
-        type.launch(title, command);
+        type.launch(title, command, false);
     }
 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/TextFieldComp.java
Patch:
@@ -44,9 +44,11 @@ public CompStructure<TextField> createBase() {
         lastAppliedValue.addListener((c, o, n) -> {
             currentValue.setValue(n);
             PlatformThread.runLaterIfNeeded(() -> {
-                if (Objects.equals(text.getText(),n)) {
+                // Check if control value is the same. Then don't set it as that might cause bugs
+                if (Objects.equals(text.getText(), n) || (n == null && text.getText().isEmpty())) {
                     return;
                 }
+                
                 text.setText(n);
             });
         });

File: app/src/main/java/io/xpipe/app/issue/LogErrorHandler.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.core.AppLogs;
 import io.xpipe.core.util.Deobfuscator;
 
-public class BasicErrorHandler implements ErrorHandler {
+public class LogErrorHandler implements ErrorHandler {
 
     @Override
     public void handle(ErrorEvent event) {

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 public class TerminalErrorHandler implements ErrorHandler {
 
-    private final ErrorHandler basic = new BasicErrorHandler();
+    private final ErrorHandler basic = new LogErrorHandler();
 
     @Override
     public void handle(ErrorEvent event) {

File: app/src/main/java/io/xpipe/app/launcher/LauncherCommand.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.app.core.AppLock;
 import io.xpipe.app.core.AppLogs;
 import io.xpipe.app.core.mode.OperationMode;
-import io.xpipe.app.issue.BasicErrorHandler;
+import io.xpipe.app.issue.LogErrorHandler;
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.issue.TrackEvent;
 import io.xpipe.app.util.ThreadHelper;
@@ -41,14 +41,14 @@ public static void runLauncher(String[] args) {
 
         var cmd = new CommandLine(new LauncherCommand());
         cmd.setExecutionExceptionHandler((ex, commandLine, parseResult) -> {
-            new BasicErrorHandler()
+            new LogErrorHandler()
                     .handle(ErrorEvent.fromThrowable("Launcher command error occurred", ex)
                             .build());
             OperationMode.halt(1);
             return 1;
         });
         cmd.setParameterExceptionHandler((ex, args1) -> {
-            new BasicErrorHandler()
+            new LogErrorHandler()
                     .handle(ErrorEvent.fromThrowable("Launcher parameter error occurred", ex)
                             .build());
             OperationMode.halt(1);

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -279,7 +279,7 @@ public void openTerminalAsync(String directory) {
                 if (store.getValue() instanceof ShellStore s) {
                     var connection = ((ConnectionFileSystem) fileSystem).getShellControl();
                     var command = s.create()
-                            .initWith(List.of(connection.getShellDialect().getCdCommand(directory)))
+                            .initWith(connection.getShellDialect().getCdCommand(directory))
                             .prepareTerminalOpen();
                     TerminalHelper.open(directory, command);
                 }

File: core/src/main/java/io/xpipe/core/process/ShellControl.java
Patch:
@@ -67,6 +67,8 @@ default String executeStringSimpleCommand(ShellDialect type, String command) thr
 
     ShellControl elevationPassword(SecretValue value);
 
+    ShellControl initWith(String cmds);
+
     ShellControl initWith(List<String> cmds);
 
     ShellControl startTimeout(int ms);

File: core/src/main/java/io/xpipe/core/util/XPipeSession.java
Patch:
@@ -35,7 +35,7 @@ public static void init(UUID buildSessionId) {
             return;
         }
 
-        var sessionFile = XPipeTempDirectory.getLocal().resolve("xpipe_session");
+        var sessionFile = Path.of(System.getProperty("java.io.tmpdir")).resolve("xpipe_session");
         var isNewSystemSession = !Files.exists(sessionFile);
         var systemSessionId = isNewSystemSession
                 ? UUID.randomUUID()

File: app/src/main/java/io/xpipe/app/core/AppFont.java
Patch:
@@ -61,13 +61,13 @@ public static void setSize(Node node, int off) {
     public static void loadFonts() {
         TrackEvent.info("Loading fonts ...");
         AppResources.with(
-                "io.xpipe.app",
+                AppResources.XPIPE_MODULE,
                 "fonts",
                 path -> Files.walkFileTree(path, new SimpleFileVisitor<>() {
                     @Override
                     public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                         try (var in = Files.newInputStream(file)) {
-                            Font.loadFont(in, 20);
+                            Font.loadFont(in, 12);
                         }
                         return FileVisitResult.CONTINUE;
                     }

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -46,8 +46,6 @@ private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue
 
     private static final int tooltipDelayMin = 0;
     private static final int tooltipDelayMax = 1500;
-    private static final int fontSizeMin = 10;
-    private static final int fontSizeMax = 20;
     private static final int editorReloadTimeoutMin = 0;
     private static final int editorReloadTimeoutMax = 1500;
     private static final Path DEFAULT_STORAGE_DIR =
@@ -89,7 +87,7 @@ private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue
     public final ReadOnlyProperty<AppStyle.Theme> theme = themeInternal;
     private final SingleSelectionField<AppStyle.Theme> themeControl =
             Field.ofSingleSelectionType(themeList, themeInternal).render(() -> new TranslatableComboBoxControl<>());
-    private final BooleanProperty useSystemFontInternal = typed(new SimpleBooleanProperty(false), Boolean.class);
+    private final BooleanProperty useSystemFontInternal = typed(new SimpleBooleanProperty(true), Boolean.class);
     public final ReadOnlyBooleanProperty useSystemFont = useSystemFontInternal;
     private final IntegerProperty tooltipDelayInternal = typed(new SimpleIntegerProperty(1000), Integer.class);
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -33,7 +33,7 @@ public boolean isSelectable() {
 
                 @Override
                 protected String toCommand(String name, String file) {
-                    return "-ExecutionPolicy Bypass -Command cmd /C \"" + file + "\"";
+                    return "-ExecutionPolicy Bypass -Command cmd /C '" + file + "'";
                 }
 
                 @Override

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -33,7 +33,7 @@ public boolean isSelectable() {
 
                 @Override
                 protected String toCommand(String name, String file) {
-                    return "-ExecutionPolicy Bypass -Command \"" + file + "\"";
+                    return "-ExecutionPolicy Bypass -Command cmd /C \"" + file + "\"";
                 }
 
                 @Override

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -12,7 +12,7 @@ public static void open(String title, CommandControl cc) throws Exception {
     }
 
     public static void open(String title, String command) throws Exception {
-        if (command.contains("\n") || command.contains(" ")) {
+        if (command.contains("\n") || command.contains(" ") || command.contains("\"") || command.contains("'")) {
             command = ScriptHelper.createLocalExecScript(command);
         }
 

File: app/src/main/java/io/xpipe/app/browser/FileListCompEntry.java
Patch:
@@ -125,7 +125,7 @@ public void onDragDrop(DragEvent event) {
         // Accept drops from inside the app window
         if (event.getGestureSource() != null) {
             var files = FileBrowserClipboard.retrieveDrag(event.getDragboard()).getEntries();
-            var target = item != null
+            var target = item != null && item.isDirectory()
                     ? item
                     : model.getFileSystemModel().getCurrentDirectory();
             model.getFileSystemModel().dropFilesIntoAsync(target, files, false);

File: app/src/main/java/io/xpipe/app/update/AppUpdater.java
Patch:
@@ -78,7 +78,7 @@ private AppUpdater() {
             AppCache.update("downloadedUpdate", n);
         });
         lastUpdateCheckResult.addListener((c, o, n) -> {
-            if (n != null && downloadedUpdate.getValue() != null && n.getVersion().equals(downloadedUpdate.getValue().getVersion())) {
+            if (n != null && downloadedUpdate.getValue() != null && n.isUpdate() && n.getVersion().equals(downloadedUpdate.getValue().getVersion())) {
                 return;
             }
 

File: app/src/main/java/io/xpipe/app/browser/FileListCompEntry.java
Patch:
@@ -52,8 +52,10 @@ public void onMouseClick(MouseEvent t) {
         if (t.getButton() == MouseButton.PRIMARY && t.isShiftDown()) {
             var tv = ((TableView<FileSystem.FileEntry>) row.getParent().getParent().getParent().getParent());
             var all = tv.getItems();
-            var start = tv.getSelectionModel().getSelectedItems().stream().mapToInt(entry -> all.indexOf(entry)).min().orElse(1);
+            var min = tv.getSelectionModel().getSelectedItems().stream().mapToInt(entry -> all.indexOf(entry)).min().orElse(1);
+            var max = tv.getSelectionModel().getSelectedItems().stream().mapToInt(entry -> all.indexOf(entry)).max().orElse(all.size() - 1);
             var end = all.indexOf(item);
+            var start = end > min ? min : max;
             model.getSelected().setAll(all.subList(Math.min(start, end), Math.max(start, end) + 1));
             t.consume();
             return;

File: app/src/main/java/io/xpipe/app/browser/FileListCompEntry.java
Patch:
@@ -54,7 +54,7 @@ public void onMouseClick(MouseEvent t) {
             var all = tv.getItems();
             var start = tv.getSelectionModel().getSelectedItems().stream().mapToInt(entry -> all.indexOf(entry)).min().orElse(1);
             var end = all.indexOf(item);
-            model.getSelected().setAll(all.subList(start, end + 1));
+            model.getSelected().setAll(all.subList(Math.min(start, end), Math.max(start, end) + 1));
             t.consume();
             return;
         }

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -27,6 +27,8 @@ public static void init() {
                 options.setEnableShutdownHook(false);
                 options.setProguardUuid(AppProperties.get().getBuildUuid().toString());
                 options.setTag("os", System.getProperty("os.name"));
+                options.setTag("osVersion", System.getProperty("os.version"));
+                options.setTag("arch", System.getProperty("os.arch"));
             });
         }
 

File: app/src/main/java/io/xpipe/app/browser/LocalFileTransferComp.java
Patch:
@@ -43,7 +43,7 @@ protected Region createSimple() {
                 new StackComp(List.of(background)).grow(true, true).styleClass("download-background");
 
         var binding = BindingsHelper.mappedContentBinding(stage.getItems(), item -> item.getFileEntry());
-        var list = new SelectedFileListComp(binding).apply(struc -> struc.get().setMinHeight(200)).grow(false, true);
+        var list = new SelectedFileListComp(binding).apply(struc -> struc.get().setMinHeight(150)).grow(false, true);
         var dragNotice = new LabelComp(AppI18n.observable("dragFiles"))
                 .apply(struc -> struc.get().setGraphic(new FontIcon("mdi2e-export")))
                 .hide(BindingsHelper.persist(Bindings.isEmpty(stage.getItems())))

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryComp.java
Patch:
@@ -214,7 +214,7 @@ private Comp<?> createButtonBar() {
     }
 
     private Comp<?> createSettingsButton() {
-        var settingsButton = new IconButtonComp("mdi2v-view-headline");
+        var settingsButton = new IconButtonComp("mdomz-settings");
         settingsButton.styleClass("settings");
         settingsButton.apply(new PopupMenuAugment<>(true) {
             @Override

File: app/src/main/java/io/xpipe/app/browser/icon/FileIconFactory.java
Patch:
@@ -21,7 +21,7 @@ public String getIcon(FileSystem.FileEntry entry) {
                 return null;
             }
 
-            return Arrays.stream(endings).anyMatch(ending -> entry.getPath().endsWith(ending)) ? getIcon() : null;
+            return Arrays.stream(endings).anyMatch(ending -> entry.getPath().toLowerCase().endsWith(ending.toLowerCase())) ? getIcon() : null;
         }
     }
 

File: app/src/main/java/io/xpipe/app/browser/FileBrowserComp.java
Patch:
@@ -38,6 +38,7 @@ public FileBrowserComp(FileBrowserModel model) {
     @Override
     protected Region createSimple() {
         var bookmarksList = new BookmarkList(model).createRegion();
+        VBox.setVgrow(bookmarksList, Priority.ALWAYS);
         var localDownloadStage = new LocalFileTransferComp(model.getLocalTransfersStage()).hide(Bindings.createBooleanBinding(() -> {
             if (model.getOpenFileSystems().size() == 0) {
                 return true;

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -88,7 +88,7 @@ private static void handleSecondaryException(ErrorEvent event, Throwable t) {
     private static void handleProbableUpdate() {
         try {
             AppUpdater.init();
-            var rel = AppUpdater.get().checkForUpdate(true);
+            var rel = AppUpdater.get().refreshUpdateCheck();
             if (rel != null && rel.isUpdate()) {
                 var update = AppWindowHelper.showBlockingAlert(alert -> {
                             alert.setAlertType(Alert.AlertType.INFORMATION);

File: app/src/main/java/io/xpipe/app/util/ProxyManagerProviderImpl.java
Patch:
@@ -32,7 +32,7 @@ private static boolean showAlert() {
 
     @Override
     public Optional<String> checkCompatibility(ShellControl s) throws Exception {
-        var version = ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion(true);
+        var version = ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion();
 
         if (AppPrefs.get().developerDisableConnectorInstallationVersionCheck().get()) {
             return Optional.of(AppI18n.get("versionCheckOverride"));
@@ -59,7 +59,7 @@ public boolean setup(ShellControl s) throws Exception {
         if (message.isPresent()) {
             if (showAlert()) {
                 var version =
-                        ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion(true);
+                        ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion();
                 AppInstaller.installOnRemoteMachine(s, version);
                 return true;
             }

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -18,7 +18,7 @@ private static void createWindowsShortcut(String target, String name) throws Exc
                         set "SHORTCUT=%%HOMEDRIVE%%%%HOMEPATH%%\\Desktop\\%s.lnk"
                         set PWS=powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile
 
-                        %%PWS%% -Command "$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut('%%SHORTCUT%%'); $S.IconLocation='%s'; $S.TargetPath = '%%TARGET%%'; $S.Arguments = '%s'; $S.Save()"
+                        %%PWS%% -Command "$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut('%%SHORTCUT%%'); $S.IconLocation='%s'; $S.WindowStyle=7; $S.TargetPath = '%%TARGET%%'; $S.Arguments = 'open %s'; $S.Save()"
                         """,
                 shortcutTarget, name, icon.toString(), target);
         LocalStore.getShell().executeSimpleCommand(content);
@@ -51,7 +51,7 @@ private static void createMacOSShortcut(String target, String name) throws Excep
         var content = String.format(
                 """
                         #!/bin/bash
-                        "%s" %s
+                        "%s" open %s
                         """,
                 exec, target);
 

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -60,8 +60,8 @@ public Map<String, String> getProperties(ShellControl pc) throws Exception {
         @Override
         public String determineOperatingSystemName(ShellControl pc) throws Exception {
             var properties = getProperties(pc);
-            return properties.get("OS Name") + " "
-                    + properties.get("OS Version").split(" ")[0];
+            return properties.getOrDefault("OS Name", "Windows") + " "
+                    + properties.getOrDefault("OS Version", "?").split(" ")[0];
         }
     }
 

File: app/src/main/java/io/xpipe/app/core/AppProperties.java
Patch:
@@ -41,7 +41,7 @@ public AppProperties() {
             }
         });
 
-        fullVersion = Optional.ofNullable(props.getProperty("io.xpipe.app.fullVersion"))
+        fullVersion = Optional.ofNullable(System.getProperty("io.xpipe.app.fullVersion"))
                 .map(Boolean::parseBoolean)
                 .orElse(false);
         version = Optional.ofNullable(props.getProperty("version")).orElse("dev");

File: app/src/main/java/io/xpipe/app/browser/FileListModel.java
Patch:
@@ -99,7 +99,7 @@ public void onDoubleClick(FileSystem.FileEntry entry) {
         }
 
         if (entry.isDirectory()) {
-            fileSystemModel.navigate(entry.getPath(), true);
+            fileSystemModel.cd(entry.getPath());
         } else {
             FileOpener.openInTextEditor(entry);
         }

File: core/src/main/java/io/xpipe/core/process/ProcessControlProvider.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.core.process;
 
-import io.xpipe.core.util.FailableBiFunction;
 import io.xpipe.core.util.FailableFunction;
 import lombok.NonNull;
 
@@ -29,7 +28,7 @@ public static ShellControl createLocal(boolean stoppable) {
     public static ShellControl createSub(
             ShellControl parent,
             @NonNull FailableFunction<ShellControl, String, Exception> commandFunction,
-            FailableBiFunction<ShellControl, String, String, Exception> terminalCommand) {
+            ShellControl.TerminalOpenFunction terminalCommand) {
         return INSTANCES.stream()
                 .map(localProcessControlProvider ->
                         localProcessControlProvider.sub(parent, commandFunction, terminalCommand))
@@ -61,7 +60,7 @@ public static ShellControl createSsh(Object sshStore) {
     public abstract ShellControl sub(
             ShellControl parent,
             @NonNull FailableFunction<ShellControl, String, Exception> commandFunction,
-            FailableBiFunction<ShellControl, String, String, Exception> terminalCommand);
+            ShellControl.TerminalOpenFunction terminalCommand);
 
     public abstract CommandControl command(
             ShellControl parent,

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -93,7 +93,7 @@ default String getPrintEnvironmentVariableCommand(String name) {
 
     String getOpenCommand();
 
-    String prepareTerminalInitFileOpenCommand(ShellControl parent, String file) throws Exception;
+    String prepareTerminalInitFileOpenCommand(ShellDialect parentDialect, ShellControl sc, String file) throws Exception;
 
     String runScript(String file);
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -152,7 +152,7 @@ public MacOsTerminalType() {
         @Override
         public void launch(String name, String command) throws Exception {
             try (ShellControl pc = LocalStore.getShell()) {
-                var suffix = command.equals(pc.getShellDialect().getNormalOpenCommand())
+                var suffix = command.equals(pc.getShellDialect().getOpenCommand())
                         ? "\"\""
                         : "\"" + command.replaceAll("\"", "\\\\\"") + "\"";
                 var cmd = "osascript -e 'tell app \"" + "Terminal" + "\" to do script " + suffix + "'";

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -91,9 +91,9 @@ default String getPrintEnvironmentVariableCommand(String name) {
         return getPrintVariableCommand(name);
     }
 
-    String getNormalOpenCommand();
+    String getOpenCommand();
 
-    String prepareInitFileOpenCommand(ShellControl parent, String file);
+    String prepareTerminalInitFileOpenCommand(ShellControl parent, String file) throws Exception;
 
     String runScript(String file);
 

File: app/src/main/java/io/xpipe/app/comp/about/AboutTabComp.java
Patch:
@@ -36,7 +36,6 @@ private Comp<?> hyperlink(String link) {
     private Comp<?> createLinks() {
         return new DynamicOptionsBuilder(false)
                 .addTitle("links")
-                .addComp(AppI18n.observable("website"), hyperlink(Hyperlinks.WEBSITE), null)
                 .addComp(AppI18n.observable("documentation"), hyperlink(Hyperlinks.DOCUMENTATION), null)
                 .addComp(AppI18n.observable("discord"), hyperlink(Hyperlinks.DISCORD), null)
                 .addComp(AppI18n.observable("slack"), hyperlink(Hyperlinks.SLACK), null)

File: app/src/main/java/io/xpipe/app/core/AppExtensionManager.java
Patch:
@@ -28,7 +28,7 @@ public class AppExtensionManager {
     private ModuleLayer baseLayer = ModuleLayer.boot();
     private ModuleLayer extendedLayer;
 
-    public static void init(boolean loadProviders) {
+    public static void init(boolean loadProviders) throws Exception {
         if (INSTANCE != null) {
             return;
         }

File: app/src/main/java/io/xpipe/app/core/AppProperties.java
Patch:
@@ -41,7 +41,9 @@ public AppProperties() {
             }
         });
 
-        fullVersion = Optional.ofNullable(props.getProperty("io.xpipe.app.fullVersion")).map(Boolean::parseBoolean).orElse(false);
+        fullVersion = Optional.ofNullable(props.getProperty("io.xpipe.app.fullVersion"))
+                .map(Boolean::parseBoolean)
+                .orElse(false);
         version = Optional.ofNullable(props.getProperty("version")).orElse("dev");
         build = Optional.ofNullable(props.getProperty("build")).orElse("unknown");
         buildUuid = Optional.ofNullable(System.getProperty("io.xpipe.app.buildId"))

File: app/src/main/java/io/xpipe/app/issue/SentryErrorHandler.java
Patch:
@@ -14,6 +14,7 @@
 public class SentryErrorHandler {
 
     public static void init() {
+        AppProperties.init();
         if (AppProperties.get().getSentryUrl() != null) {
             Sentry.init(options -> {
                 options.setDsn(AppProperties.get().getSentryUrl());
@@ -24,6 +25,7 @@ public static void init() {
                 options.setRelease(AppProperties.get().getVersion());
                 options.setEnableShutdownHook(false);
                 options.setProguardUuid(AppProperties.get().getBuildUuid().toString());
+                options.setTag("os", System.getProperty("os.name"));
             });
         }
 

File: app/src/main/java/io/xpipe/app/update/AppDownloads.java
Patch:
@@ -107,7 +107,7 @@ public static Optional<GHRelease> getLatestSuitableRelease(boolean omitErrors) {
             var repo = getRepository();
 
             // Always choose most up-to-date release as we assume that there are only full releases and prereleases
-            if (AppPrefs.get().updateToPrereleases().get()) {
+            if (AppPrefs.get() != null && AppPrefs.get().updateToPrereleases().get()) {
                 return Optional.ofNullable(repo.listReleases().iterator().next());
             }
 

File: app/src/main/java/io/xpipe/app/browser/FileContextMenu.java
Patch:
@@ -147,8 +147,8 @@ private void createMenu() {
 
         var delete = new MenuItem("Delete");
         delete.setOnAction(event -> {
+            model.deleteSelectionAsync();
             event.consume();
-            model.deleteAsync(entry.getPath());
         });
 
         var rename = new MenuItem("Rename");

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreCreationBarComp.java
Patch:
@@ -48,7 +48,7 @@ protected Region createSimple() {
                 .shortcut(new KeyCodeCombination(KeyCode.D, KeyCombination.SHORTCUT_DOWN))
                 .apply(new FancyTooltipAugment<>("addDatabase"));
 
-        var box = new VerticalComp(List.of(newShellStore, newDbStore, newStreamStore, newOtherStore));
+        var box = new VerticalComp(List.of(newShellStore, newDbStore, newStreamStore));
         box.apply(s -> AppFont.medium(s.get()));
         var bar = box.createRegion();
         bar.getStyleClass().add("bar");

File: app/src/main/java/io/xpipe/app/issue/ExceptionConverter.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.app.issue;
 
 import io.xpipe.app.core.AppI18n;
+import io.xpipe.core.process.ProcessOutputException;
 
 import java.io.FileNotFoundException;
 
@@ -14,6 +15,7 @@ public static String convertMessage(Throwable ex) {
         }
 
         return switch (ex) {
+            case ProcessOutputException e -> e.getOutput();
             case StackOverflowError e -> AppI18n.get("app.stackOverflow");
             case OutOfMemoryError e -> AppI18n.get("app.outOfMemory");
             case FileNotFoundException e -> AppI18n.get("app.fileNotFound", msg);

File: app/src/main/java/io/xpipe/app/util/TerminalHelper.java
Patch:
@@ -11,7 +11,7 @@ public static void open(String title, CommandControl cc) throws Exception {
     }
 
     public static void open(String title, String command) throws Exception {
-        if (command.contains("\n") || !command.strip().equals(command)) {
+        if (command.contains("\n") || command.contains(" ")) {
             command = ScriptHelper.createLocalExecScript(command);
         }
 

File: core/src/main/java/io/xpipe/core/store/FileSystem.java
Patch:
@@ -59,12 +59,14 @@ public FileEntry(
 
     void move(String file, String newFile) throws Exception;
 
-    boolean mkdirs(String file) throws Exception;
+    void mkdirs(String file) throws Exception;
 
     void touch(String file) throws Exception;
 
     boolean directoryExists(String file) throws Exception;
 
+    void directoryAccessible(String file) throws Exception;
+
     Stream<FileEntry> listFiles(String file) throws Exception;
 
     default Stream<FileEntry> listFilesRecursively(String file) throws Exception {

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -26,10 +26,10 @@ public void init(ModuleLayer layer) {
 
             CMD = byName("cmd");
             POWERSHELL = byName("powershell");
-            SH = byName("sh");
             DASH = byName("dash");
             BASH = byName("bash");
             ZSH = byName("zsh");
+            SH = byName("sh");
         }
 
         @Override

File: core/src/main/java/io/xpipe/core/store/FileSystem.java
Patch:
@@ -63,7 +63,7 @@ public FileEntry(
 
     void touch(String file) throws Exception;
 
-    boolean isDirectory(String file) throws Exception;
+    boolean directoryExists(String file) throws Exception;
 
     Stream<FileEntry> listFiles(String file) throws Exception;
 

File: app/src/main/java/io/xpipe/app/test/TestModule.java
Patch:
@@ -9,7 +9,7 @@
 
 public abstract class TestModule<V> {
 
-    private static final Map<Class<?>, Map<String, ?>> values = new HashMap<>();
+    private static final Map<Class<?>, Map<String, ?>> values = new LinkedHashMap<>();
 
     @SuppressWarnings({"unchecked"})
     public static <T> Map<String, T> get(Class<T> c, String... classes) {

File: core/src/main/java/io/xpipe/core/store/ConnectionFileSystem.java
Patch:
@@ -71,7 +71,7 @@ public OutputStream openOutput(String file) throws Exception {
     @Override
     public boolean exists(String file) throws Exception {
         try (var pc = shellControl.command(proc -> proc.getShellDialect()
-                        .getFileExistsCommand(proc.getOsType().normalizeFileName(file)))
+                        .getFileExistsCommand(proc.getOsType().normalizeFileName(file))).complex()
                 .start()) {
             return pc.discardAndCheckExit();
         }
@@ -80,7 +80,7 @@ public boolean exists(String file) throws Exception {
     @Override
     public void delete(String file) throws Exception {
         try (var pc = shellControl.command(proc -> proc.getShellDialect()
-                        .getFileDeleteCommand(proc.getOsType().normalizeFileName(file)))
+                        .getFileDeleteCommand(proc.getOsType().normalizeFileName(file))).complex()
                 .start()) {
             pc.discardOrThrow();
         }
@@ -107,7 +107,7 @@ public void move(String file, String newFile) throws Exception {
     @Override
     public boolean mkdirs(String file) throws Exception {
         try (var pc = shellControl.command(proc -> proc.getShellDialect()
-                                         .getMkdirsCommand(proc.getOsType().normalizeFileName(file)))
+                                         .getMkdirsCommand(proc.getOsType().normalizeFileName(file))).complex()
                 .start()) {
             return pc.discardAndCheckExit();
         }

File: app/src/main/java/io/xpipe/app/update/UpdateAvailableAlert.java
Patch:
@@ -18,8 +18,8 @@ public static void showIfNeeded() {
 
         var update = AppWindowHelper.showBlockingAlert(alert -> {
                     alert.setTitle(AppI18n.get("updateReadyAlertTitle"));
-                    alert.setHeaderText(AppI18n.get("updateReadyAlertHeader"));
-                    alert.setContentText(AppI18n.get("updateReadyAlertContent"));
+                    alert.setHeaderText(AppI18n.get("updateReadyAlertHeader", AppUpdater.get().getDownloadedUpdate().getValue().getVersion()));
+                    alert.getDialogPane().setContent(AppWindowHelper.alertContentText(AppI18n.get("updateReadyAlertContent")));
                     alert.setAlertType(Alert.AlertType.INFORMATION);
                 })
                 .map(buttonType -> buttonType.getButtonData().isDefaultButton())

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.xpipe.app.comp.base.MarkdownComp;
 import io.xpipe.app.core.AppI18n;
-import io.xpipe.app.core.AppProperties;
 import io.xpipe.app.core.AppWindowHelper;
 import io.xpipe.app.issue.ErrorEvent;
 import javafx.scene.control.Alert;
@@ -15,7 +14,7 @@ public class UpdateChangelogAlert {
     public static void showIfNeeded() {
         var update = AppUpdater.get().getPerformedUpdate();
 
-        if (update != null && !AppProperties.get().getVersion().equals(update.getNewVersion())) {
+        if (update != null && !AppUpdater.get().isUpdateSucceeded()) {
             ErrorEvent.fromMessage("Update did not succeed").handle();
             return;
         }

File: app/src/main/java/io/xpipe/app/comp/about/ThirdPartyDependencyListComp.java
Patch:
@@ -22,7 +22,7 @@ private TitledPane createPane(ThirdPartyDependency t) {
         tp.setPadding(Insets.EMPTY);
         tp.setGraphic(link);
         tp.setAlignment(Pos.CENTER_LEFT);
-        AppFont.medium(tp);
+        AppFont.small(tp);
 
         var licenseName = new Label("(" + t.licenseName() + ")");
         var sp = new StackPane(link, licenseName);

File: app/src/main/java/io/xpipe/app/exchange/cli/EditStoreExchangeImpl.java
Patch:
@@ -14,7 +14,7 @@ public Response handleRequest(BeaconHandler handler, Request msg) throws Excepti
         var s = getStoreEntryByName(msg.getName(), false);
         var dialog = s.getProvider().dialogForStore(s.getStore());
         var reference = DialogExchangeImpl.add(dialog, (DataStore newStore) -> {
-            s.setStore(newStore);
+            // s.setStore(newStore);
         });
         return Response.builder().dialog(reference).build();
     }

File: app/src/main/java/io/xpipe/app/update/AppUpdater.java
Patch:
@@ -43,6 +43,8 @@ private AppUpdater() {
         event("Was updated is " + hasUpdated);
         if (hasUpdated) {
             AppCache.clear("performedUpdate");
+            AppCache.clear("lastUpdateCheckResult");
+            AppCache.clear("downloadedUpdate");
             event("Found information about recent update");
         }
 
@@ -217,9 +219,6 @@ public void executeUpdateAndClose() {
             } catch (Throwable ex) {
                 ex.printStackTrace();
             } finally {
-                AppCache.clear("lastUpdateCheckResult");
-                AppCache.clear("downloadedUpdate");
-
                 var performedUpdate = new PerformedUpdate(
                         downloadedUpdate.getValue().getVersion(),
                         downloadedUpdate.getValue().getBody(),

File: app/src/main/java/io/xpipe/app/update/UpdateAvailableAlert.java
Patch:
@@ -17,9 +17,9 @@ public static void showIfNeeded() {
         }
 
         var update = AppWindowHelper.showBlockingAlert(alert -> {
-                    alert.setTitle(AppI18n.get("updateReadyTitle"));
-                    alert.setHeaderText(AppI18n.get("updateReadyHeader"));
-                    alert.setContentText(AppI18n.get("updateReadyContent"));
+                    alert.setTitle(AppI18n.get("updateReadyAlertTitle"));
+                    alert.setHeaderText(AppI18n.get("updateReadyAlertHeader"));
+                    alert.setContentText(AppI18n.get("updateReadyAlertContent"));
                     alert.setAlertType(Alert.AlertType.INFORMATION);
                 })
                 .map(buttonType -> buttonType.getButtonData().isDefaultButton())

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileStoreChoiceComp.java
Patch:
@@ -35,10 +35,10 @@ protected Region createSimple() {
         var fileProperty = new SimpleStringProperty(
                 selected.getValue() != null ? selected.getValue().getPath() : null);
         fileProperty.addListener((observable, oldValue, newValue) -> {
-            setSelected(selected.getValue().getFileSystem(), newValue);
+            setSelected(selected.getValue() != null ? selected.getValue().getFileSystem() : null, newValue);
         });
         selected.addListener((observable, oldValue, newValue) -> {
-            fileProperty.setValue(newValue.getPath());
+            fileProperty.setValue(newValue != null ? newValue.getPath() : null);
         });
 
         var fileSystemChoiceComp = new FileSystemStoreChoiceComp(selected).grow(false, true).styleClass(Styles.LEFT_PILL);

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -60,10 +60,10 @@ private static void createMacOSShortcut(String target, String name) throws Excep
                     pc.getShellDialect().flatten(pc.getShellDialect().getMkdirsCommand(base + "/Contents/Resources")));
 
             var executable = base + "/Contents/MacOS/" + name;
-            pc.executeSimpleCommand(pc.getShellDialect().getTextFileWriteCommand(content, executable));
+            pc.getShellDialect().createTextFileWriteCommand(pc, content, executable).execute();
             pc.executeSimpleCommand("chmod ugo+x \"" + executable + "\"");
 
-            pc.executeSimpleCommand(pc.getShellDialect().getTextFileWriteCommand("APPL????", base + "/PkgInfo"));
+            pc.getShellDialect().createTextFileWriteCommand(pc, "APPL????", base + "/PkgInfo").execute();
             pc.executeSimpleCommand("cp \"" + icon + "\" \"" + base + "/Contents/Resources/" + name + ".icns\"");
         }
     }

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -200,7 +200,7 @@ private static String createExecScript(ShellControl processControl, String file,
                 .handle();
 
         // processControl.executeSimpleCommand(type.getFileTouchCommand(file), "Failed to create script " + file);
-        processControl.executeSimpleCommand(type.getTextFileWriteCommand(content, file));
+        processControl.getShellDialect().createTextFileWriteCommand(processControl, content, file).execute();
         processControl.executeSimpleCommand(
                 type.getMakeExecutableCommand(file), "Failed to make script " + file + " executable");
         return file;

File: core/src/main/java/io/xpipe/core/process/ShellDialect.java
Patch:
@@ -13,6 +13,8 @@
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface ShellDialect {
 
+    CommandControl createStreamFileWriteCommand(ShellControl shellControl, String file);
+
     default String getCdCommand(String directory){
         return "cd \"" + directory + "\"";
     }
@@ -101,9 +103,7 @@ default String getPrintEnvironmentVariableCommand(String name) {
 
     String getFileMoveCommand(String oldFile, String newFile);
 
-    CommandControl getStreamFileWriteCommand(ShellControl processControl, String file);
-
-    String getTextFileWriteCommand(String content, String file);
+    CommandControl createTextFileWriteCommand(ShellControl parent, String content, String file);
 
     String getFileDeleteCommand(String file);
 

File: core/src/main/java/io/xpipe/core/store/ConnectionFileSystem.java
Patch:
@@ -64,7 +64,7 @@ public InputStream openInput(String file) throws Exception {
     @Override
     public OutputStream openOutput(String file) throws Exception {
         return shellControl.getShellDialect()
-                        .getStreamFileWriteCommand(shellControl, shellControl.getOsType().normalizeFileName(file))
+                        .createStreamFileWriteCommand(shellControl, shellControl.getOsType().normalizeFileName(file))
                 .startExternalStdin();
     }
 

File: api/src/main/java/io/xpipe/api/connector/XPipeApiConnection.java
Patch:
@@ -133,7 +133,7 @@ protected void constructSocket() {
 
     private void start() throws Exception {
         var installation = XPipeInstallation.getLocalDefaultInstallationBasePath(true);
-        BeaconServer.start(installation, XPipeDaemonMode.BACKGROUND);
+        BeaconServer.start(installation, XPipeDaemonMode.TRAY);
     }
 
     @FunctionalInterface

File: app/src/main/java/io/xpipe/app/prefs/ExternalStartupBehaviour.java
Patch:
@@ -9,8 +9,7 @@
 @AllArgsConstructor
 public enum ExternalStartupBehaviour implements PrefsChoiceValue {
     GUI("app.startGui", OperationMode.GUI),
-    TRAY("app.startInTray", OperationMode.TRAY),
-    BACKGROUND("app.startInBackground", OperationMode.BACKGROUND);
+    TRAY("app.startInTray", OperationMode.TRAY);
 
     private final String id;
     private final OperationMode mode;

File: app/src/main/java/io/xpipe/app/ext/ScanProvider.java
Patch:
@@ -15,6 +15,7 @@ public abstract class ScanProvider {
     @Value
     public static class ScanOperation {
         String nameKey;
+        boolean defaultSelected;
         FailableRunnable<Exception> scanner;
     }
 

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -30,7 +30,7 @@ public static void showIfNeeded(DataStore store, boolean automatic) {
         }
 
         var selected = new SimpleListProperty<ScanProvider.ScanOperation>(
-                FXCollections.observableList(new ArrayList<>(applicable)));
+                FXCollections.observableList(new ArrayList<>(applicable.stream().filter(scanOperation -> scanOperation.isDefaultSelected()).toList())));
         var busy = new SimpleBooleanProperty();
         AppWindowHelper.showAlert(
                 alert -> {

File: beacon/src/main/java/io/xpipe/beacon/exchange/AskpassExchange.java
Patch:
@@ -20,6 +20,8 @@ public String getId() {
     public static class Request implements RequestMessage {
         @NonNull
         String id;
+        @NonNull
+        String request;
         String prompt;
     }
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -71,7 +71,7 @@ public boolean isSelectable() {
 
         @Override
         protected String toCommand(String name, String command) {
-            return "--new-tab -e bash -c " + command;
+            return "--new-tab -e " + command;
         }
 
         @Override

File: app/src/main/java/module-info.java
Patch:
@@ -164,6 +164,7 @@
             RemoveEntryExchangeImpl,
             RenameCollectionExchangeImpl,
             RenameEntryExchangeImpl,
+            AskpassExchangeImpl,
             SourceProviderListExchangeImpl,
             QueryStoreExchangeImpl,
             SelectExchangeImpl,

File: beacon/src/main/java/module-info.java
Patch:
@@ -68,6 +68,7 @@
             WritePreparationExchange,
             ProxyReadConnectionExchange,
             WriteExecuteExchange,
+            AskpassExchange,
             SelectExchange,
             ReadExchange,
             QueryTextDataExchange,

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -205,7 +205,7 @@ public void installLocal(String file) throws Exception {
                                         function exec {
                                             echo "+ sudo apt-get remove -qy xpipe"
                                             DEBIAN_FRONTEND=noninteractive sudo apt-get remove -qy xpipe || return 1
-                                            echo "+ sudo apt-get install -qy "%s"
+                                            echo "+ sudo apt-get install -qy \\"%s\\""
                                             DEBIAN_FRONTEND=noninteractive sudo apt-get install -qy "%s" || return 1
                                             xpipe open || return 1
                                         }

File: app/src/main/java/io/xpipe/app/util/ProxyManagerProviderImpl.java
Patch:
@@ -32,7 +32,7 @@ private static boolean showAlert() {
 
     @Override
     public Optional<String> checkCompatibility(ShellControl s) throws Exception {
-        var version = ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion();
+        var version = ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion(true);
 
         if (AppPrefs.get().developerDisableConnectorInstallationVersionCheck().get()) {
             return Optional.of(AppI18n.get("versionCheckOverride"));
@@ -59,7 +59,7 @@ public boolean setup(ShellControl s) throws Exception {
         if (message.isPresent()) {
             if (showAlert()) {
                 var version =
-                        ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion();
+                        ModuleHelper.isImage() ? AppProperties.get().getVersion() : AppDownloads.getLatestVersion(true);
                 AppInstaller.installOnRemoteMachine(s, version);
                 return true;
             }

File: core/src/main/java/io/xpipe/core/util/Deobfuscator.java
Patch:
@@ -81,7 +81,6 @@ public static String deobfuscateToString(Throwable t) {
             }
         } catch (Exception ex) {
             System.err.println("Deobfuscation failed");
-            ex.printStackTrace();
             return stackTrace;
         }
 

File: app/src/main/java/io/xpipe/app/comp/source/store/DataStoreSelectorComp.java
Patch:
@@ -62,7 +62,7 @@ private Region getGraphic() {
                     AppI18n.get("selectStreamStore"), AppI18n.get("openStreamStoreWizard"), graphic);
         } else {
             return JfxHelper.createNamedEntry(
-                    f.getFileName().toString(), f.getFile().toString(), graphic);
+                    f.getFileName().toString(), f.getPath().toString(), graphic);
         }
     }
 }

File: app/src/main/java/io/xpipe/app/comp/source/store/DsLocalFileBrowseComp.java
Patch:
@@ -65,11 +65,11 @@ private boolean hasProvider() {
 
     private Region getGraphic() {
         var graphic = hasProvider() ? provider.getValue().getDisplayIconFileName() : "file_icon.png";
-        if (chosenFile.getValue() == null || !(chosenFile.getValue() instanceof FileStore f) || f.getFile() == null) {
+        if (chosenFile.getValue() == null || !(chosenFile.getValue() instanceof FileStore f) || f.getPath() == null) {
             return JfxHelper.createNamedEntry(AppI18n.get("browse"), AppI18n.get("selectFileFromComputer"), graphic);
         } else {
             return JfxHelper.createNamedEntry(
-                    f.getFileName().toString(), f.getFile().toString(), graphic);
+                    f.getFileName().toString(), f.getPath().toString(), graphic);
         }
     }
 }

File: app/src/main/java/io/xpipe/app/comp/source/store/DsRemoteFileChoiceComp.java
Patch:
@@ -33,7 +33,7 @@ protected Region createSimple() {
 
                             return FileStore.builder()
                                     .fileSystem(machine.get())
-                                    .file(fileName.get())
+                                    .path(fileName.get())
                                     .build();
                         },
                         store)

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryComp.java
Patch:
@@ -155,7 +155,7 @@ protected Region createContent() {
             ThreadHelper.runFailableAsync(() -> {
                 var found = entry.getDefaultActionProvider().getValue();
                 if (found != null) {
-                    found.getDataStoreCallSite()
+                    found
                             .createAction(entry.getEntry().getStore().asNeeded())
                             .execute();
                 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileStoreChoiceComp.java
Patch:
@@ -33,12 +33,12 @@ private void setSelected(FileSystemStore fileSystem, String file) {
     @Override
     protected Region createSimple() {
         var fileProperty = new SimpleStringProperty(
-                selected.getValue() != null ? selected.getValue().getFile() : null);
+                selected.getValue() != null ? selected.getValue().getPath() : null);
         fileProperty.addListener((observable, oldValue, newValue) -> {
             setSelected(selected.getValue().getFileSystem(), newValue);
         });
         selected.addListener((observable, oldValue, newValue) -> {
-            fileProperty.setValue(newValue.getFile());
+            fileProperty.setValue(newValue.getPath());
         });
 
         var fileSystemChoiceComp = new FileSystemStoreChoiceComp(selected).grow(false, true).styleClass(Styles.LEFT_PILL);

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileSystemStoreChoiceComp.java
Patch:
@@ -51,12 +51,12 @@ protected Region createSimple() {
         fileSystemProperty.addListener((observable, oldValue, newValue) -> {
             selected.setValue(FileStore.builder()
                     .fileSystem(newValue)
-                    .file(selected.getValue() != null ? selected.getValue().getFile() : null)
+                    .path(selected.getValue() != null ? selected.getValue().getPath() : null)
                     .build());
         });
 
         selected.addListener((observable, oldValue, newValue) -> {
-            fileSystemProperty.setValue(newValue.getFileSystem());
+            fileSystemProperty.setValue(newValue != null?newValue.getFileSystem():null);
         });
 
         var comboBox =

File: ext/base/src/main/java/io/xpipe/ext/base/actions/AddStoreAction.java
Patch:
@@ -38,12 +38,12 @@ public LauncherCallSite getLauncherCallSite() {
         return new LauncherCallSite() {
             @Override
             public String getId() {
-                return "add";
+                return "addStore";
             }
 
             @Override
             public Action createAction(List<String> args) throws Exception {
-                var storeString = SecretValue.ofSecret(args.get(1));
+                var storeString = SecretValue.ofSecret(args.get(0));
                 var store = JacksonMapper.parse(storeString.getSecretValue(), DataStore.class);
                 return new Action(store);
             }

File: ext/base/src/main/java/io/xpipe/ext/base/actions/FileBrowseAction.java
Patch:
@@ -25,7 +25,7 @@ public boolean requiresPlatform() {
 
         @Override
         public void execute() throws Exception {
-            DesktopHelper.browseFileInDirectory(Path.of(store.getFile()));
+            DesktopHelper.browseFileInDirectory(Path.of(store.getPath()));
         }
     }
 
@@ -45,7 +45,7 @@ public Class<FileStore> getApplicableClass() {
 
             @Override
             public boolean isApplicable(FileStore o) throws Exception {
-                return o.getFileSystem().equals(new LocalStore()) && Files.exists(Path.of(o.getFile()));
+                return o.getFileSystem().equals(new LocalStore()) && Files.exists(Path.of(o.getPath()));
             }
 
             @Override

File: ext/base/src/main/java/io/xpipe/ext/base/actions/FileEditAction.java
Patch:
@@ -24,7 +24,7 @@ public boolean requiresPlatform() {
         @Override
         public void execute() throws Exception {
             if (store.getFileSystem().equals(new LocalStore())) {
-                FileOpener.openInTextEditor(store.getFile());
+                FileOpener.openInTextEditor(store.getPath());
             }
         }
     }

File: ext/base/src/main/java/io/xpipe/ext/base/actions/ShareStoreAction.java
Patch:
@@ -26,7 +26,7 @@ public boolean requiresPlatform() {
         }
 
         public static String create(DataStore store) {
-            return "xpipe://add/store/" + SecretValue.encrypt(store.toString()).getEncryptedValue();
+            return "xpipe://addStore/" + SecretValue.encrypt(store.toString()).getEncryptedValue();
         }
 
         @Override

File: app/src/main/java/io/xpipe/app/comp/about/ThirdPartyDependencyListComp.java
Patch:
@@ -28,15 +28,15 @@ private TitledPane createPane(ThirdPartyDependency t) {
         var sp = new StackPane(link, licenseName);
         StackPane.setAlignment(licenseName, Pos.CENTER_RIGHT);
         StackPane.setAlignment(link, Pos.CENTER_LEFT);
-        sp.prefWidthProperty().bind(tp.widthProperty().subtract(40));
+        sp.prefWidthProperty().bind(tp.widthProperty().subtract(65));
         tp.setGraphic(sp);
 
         var text = new TextArea();
         text.setEditable(false);
         text.setText(t.licenseText());
         text.setWrapText(true);
         text.setPrefHeight(300);
-        text.prefWidthProperty().bind(tp.widthProperty());
+        text.maxWidthProperty().bind(tp.widthProperty());
         AppFont.setSize(text, -4);
         tp.setContent(text);
         AppFont.verySmall(tp);

File: app/src/main/java/io/xpipe/app/comp/base/IntegratedTextAreaComp.java
Patch:
@@ -47,8 +47,9 @@ protected Region createSimple() {
     }
 
     private Region createOpenButton(Region container) {
+        var name = identifier + (fileType != null ? "." + fileType : "");
         var button = new IconButtonComp("mdal-edit", () -> FileOpener
-                        .openString(identifier, fileType, this, value.getValue(), (s) -> {
+                        .openString(name, this, value.getValue(), (s) -> {
                             Platform.runLater(() -> value.setValue(s));
                         }))
                 .createRegion();

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreIntroComp.java
Patch:
@@ -35,7 +35,7 @@ public Region createSimple() {
         });
 
         var scanButton = new Button(AppI18n.get("detectConnections"), new FontIcon("mdi2m-magnify"));
-        scanButton.setOnAction(event -> ScanAlert.showIfNeeded(new LocalStore()));
+        scanButton.setOnAction(event -> ScanAlert.showIfNeeded(new LocalStore(), false));
         var scanPane = new StackPane(scanButton);
         scanPane.setAlignment(Pos.CENTER);
 

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -39,7 +39,7 @@ public void initialSetup() throws Exception {
         AppCharsets.init();
         AppCharsetter.init();
         DataStorage.init();
-        FileWatchManager.init();
+        AppFileWatcher.init();
         FileBridge.init();
         AppSocketServer.init();
         AppUpdater.init();

File: app/src/main/java/io/xpipe/app/ext/ScanProvider.java
Patch:
@@ -45,5 +45,5 @@ public static List<ScanProvider> getAll() {
         return ALL;
     }
 
-    public  abstract ScanOperation create(DataStore store);
+    public  abstract ScanOperation create(DataStore store, boolean automatic);
 }

File: app/src/main/java/io/xpipe/app/fxcomps/impl/OptionsComp.java
Patch:
@@ -2,6 +2,7 @@
 
 import atlantafx.base.controls.Popover;
 import atlantafx.base.controls.Spacer;
+import atlantafx.base.theme.Styles;
 import io.xpipe.app.comp.base.MarkdownComp;
 import io.xpipe.app.core.AppFont;
 import io.xpipe.app.fxcomps.Comp;
@@ -90,6 +91,8 @@ public CompStructure<Pane> createBase() {
                     AppFont.small(popover.getContentNode());
 
                     var descriptionHover = new Button("... ?");
+                    descriptionHover.getStyleClass().add(Styles.BUTTON_OUTLINED);
+                    descriptionHover.getStyleClass().add(Styles.ACCENT);
                     descriptionHover.setPadding(new Insets(0, 6, 0, 6));
                     descriptionHover.getStyleClass().add("long-description");
                     AppFont.header(descriptionHover);

File: app/src/main/java/io/xpipe/app/issue/UserReportComp.java
Patch:
@@ -103,7 +103,7 @@ private Region createBottomBarNavigation() {
                 .apply(struc -> struc.get().getStyleClass().addAll(BUTTON_OUTLINED, ACCENT))
                 .createRegion();
         var spacer = new Region();
-        var buttons = new HBox(dataPolicyButton, spacer, sendButton);
+        var buttons = new HBox(spacer, sendButton);
         buttons.setAlignment(Pos.CENTER);
         buttons.getStyleClass().add("buttons");
         HBox.setHgrow(spacer, Priority.ALWAYS);

File: app/src/main/java/io/xpipe/app/util/ApplicationHelper.java
Patch:
@@ -13,17 +13,16 @@ public class ApplicationHelper {
     public static void executeLocalApplication(String s) throws Exception {
         var args = ShellDialects.getPlatformDefault().executeCommandListWithShell(s);
         TrackEvent.withDebug("proc", "Executing local application")
-                .elements(args)
+                .tag("command", s)
                 .handle();
         try (var c = LocalStore.getShell().command(s).start()) {
             c.discardOrThrow();
         }
     }
 
     public static void executeLocalApplication(List<String> s) throws Exception {
-        var args = ShellDialects.getPlatformDefault().executeCommandListWithShell(s);
         TrackEvent.withDebug("proc", "Executing local application")
-                .elements(args)
+                .elements(s)
                 .handle();
         try (var c = LocalStore.getShell().command(s).start()) {
             c.discardOrThrow();

File: app/src/main/java/io/xpipe/app/util/ScanAlert.java
Patch:
@@ -19,10 +19,10 @@
 
 public class ScanAlert {
 
-    public static void showIfNeeded(DataStore store) {
+    public static void showIfNeeded(DataStore store, boolean automatic) {
         var providers = ScanProvider.getAll();
         var applicable = providers.stream()
-                .map(scanProvider -> scanProvider.create(store))
+                .map(scanProvider -> scanProvider.create(store, automatic))
                 .filter(scanOperation -> scanOperation != null)
                 .toList();
         if (applicable.size() == 0) {

File: core/src/main/java/io/xpipe/core/process/ShellDialects.java
Patch:
@@ -37,7 +37,7 @@ public boolean requiresFullDaemon() {
 
         @Override
         public boolean prioritizeLoading() {
-            return false;
+            return true;
         }
     }
 

File: app/src/main/java/io/xpipe/app/browser/BookmarkList.java
Patch:
@@ -22,7 +22,7 @@ final class BookmarkList extends SimpleComp {
 
     @Override
     protected Region createSimple() {
-        var list = DataStorage.get().getStores().stream().filter(entry -> entry.getStore() instanceof ShellStore).map(entry -> new Bookmark(entry)).toList();
+        var list = DataStorage.get().getStoreEntries().stream().filter(entry -> entry.getStore() instanceof ShellStore).map(entry -> new Bookmark(entry)).toList();
         return new ListBoxViewComp<>(FXCollections.observableList(list), FXCollections.observableList(list), bookmark -> {
             var imgView =
                     new PrettyImageComp(new SimpleStringProperty(bookmark.entry().getProvider().getDisplayIconFileName()), 16, 16).createRegion();

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -19,6 +19,7 @@
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Collectors;
 
@@ -55,7 +56,7 @@ public FileSystem.FileEntry getCurrentDirectory() {
 
     public Optional<String> cd(String path) {
         var newPath = FileSystemHelper.normalizeDirectoryPath(this, path);
-        if (!path.equals(newPath)) {
+        if (!Objects.equals(path, newPath)) {
             return Optional.of(newPath);
         }
 

File: app/src/main/java/io/xpipe/app/comp/source/GuiDsCreatorTransferStep.java
Patch:
@@ -82,7 +82,7 @@ public void onInit() {
     @Override
     public void onBack() {
         var e = entry.getValue();
-        DataStorage.get().deleteEntry(e);
+        DataStorage.get().deleteSourceEntry(e);
     }
 
     @Override
@@ -93,7 +93,7 @@ public void onContinue() {
         }
 
         var e = entry.getValue();
-        DataStorage.get().deleteEntry(e);
+        DataStorage.get().deleteSourceEntry(e);
     }
 
     @Override

File: app/src/main/java/io/xpipe/app/comp/source/NamedSourceChoiceComp.java
Patch:
@@ -71,7 +71,7 @@ private <T extends DataSource<?>> void refreshShown(ObservableList<T> list, Obse
             if (!filter.getValue().test(source)) {
                 return false;
             }
-            var e = DataStorage.get().getEntryBySource(source).orElseThrow();
+            var e = DataStorage.get().getSourceEntry(source).orElseThrow();
             return filterString.get() == null
                     || e.getName().toLowerCase().contains(filterString.get().toLowerCase());
         });
@@ -109,7 +109,7 @@ private <T extends DataSource<?>> Region create() {
         var filterComp = new FilterComp(filterString).hide(Bindings.greaterThan(5, Bindings.size(shown)));
 
         var view = new ListViewComp<>(shown, list, prop, (T s) -> {
-                    var e = DataStorage.get().getEntryBySource(s).orElseThrow();
+                    var e = DataStorage.get().getSourceEntry(s).orElseThrow();
                     var provider = e.getProvider();
                     var graphic = provider.getDisplayIconFileName();
                     var top = String.format("%s (%s)", e.getName(), provider.getDisplayName());

File: app/src/main/java/io/xpipe/app/comp/source/store/GuiDsStoreCreator.java
Patch:
@@ -91,7 +91,7 @@ public static void showEdit(DataStoreEntry e) {
         show(e.getName(), e.getProvider(), e.getStore(), v -> true, newE -> {
             ThreadHelper.runAsync(() -> {
                 e.applyChanges(newE);
-                if (!DataStorage.get().getStores().contains(e)) {
+                if (!DataStorage.get().getStoreEntries().contains(e)) {
                     DataStorage.get().addStoreEntry(e);
                     ScanAlert.showIfNeeded(e.getStore());
                 }

File: app/src/main/java/io/xpipe/app/comp/source/store/NamedStoreChoiceComp.java
Patch:
@@ -72,7 +72,7 @@ public static NamedStoreChoiceComp create(
                                     return false;
                                 }
 
-                                var e = DataStorage.get().getStore(store);
+                                var e = DataStorage.get().getStoreEntry(store);
                                 return filter.getValue().test(e);
                             };
                         },
@@ -116,8 +116,8 @@ protected Region createSimple() {
             refreshShown(list, shown);
         });
 
-        var prop = new SimpleObjectProperty<>(
-                DataStorage.get().getEntryByStore(selected.getValue()).orElse(null));
+        var prop = new SimpleObjectProperty<>(selected.getValue() != null ?
+                DataStorage.get().getStoreEntryIfPresent(selected.getValue()).orElse(null):null);
         setUpListener(prop);
 
         var filterComp = new FilterComp(filterString)

File: app/src/main/java/io/xpipe/app/comp/storage/collection/SourceCollectionWrapper.java
Patch:
@@ -73,7 +73,7 @@ public void delete() {
 
     public void clean() {
         var entries = List.copyOf(collection.getEntries());
-        entries.forEach(e -> DataStorage.get().deleteEntry(e));
+        entries.forEach(e -> DataStorage.get().deleteSourceEntry(e));
     }
 
     private void setupListeners() {

File: app/src/main/java/io/xpipe/app/comp/storage/source/SourceEntryWrapper.java
Patch:
@@ -72,7 +72,7 @@ public void delete() {
             return;
         }
 
-        DataStorage.get().deleteEntry(entry);
+        DataStorage.get().deleteSourceEntry(entry);
     }
 
     private <T extends DataSource<?>> void update() {

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreEntryListComp.java
Patch:
@@ -35,7 +35,7 @@ protected Region createSimple() {
                 BindingsHelper.persist(
                         Bindings.not(Bindings.isEmpty(StoreViewState.get().getShownEntries()))));
 
-        map.put(new StoreStorageEmptyIntroComp(), StoreViewState.get().emptyProperty());
+        map.put(new StoreIntroComp(), StoreViewState.get().emptyProperty());
         map.put(
                 new StoreNotFoundComp(),
                 BindingsHelper.persist(Bindings.and(

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreViewState.java
Patch:
@@ -54,7 +54,7 @@ public static StoreViewState get() {
     }
 
     private void addStorageGroupListeners() {
-        allEntries.setAll(FXCollections.observableArrayList(DataStorage.get().getStores().stream()
+        allEntries.setAll(FXCollections.observableArrayList(DataStorage.get().getStoreEntries().stream()
                 .map(StoreEntryWrapper::new)
                 .toList()));
 

File: app/src/main/java/io/xpipe/app/exchange/MessageExchangeImpl.java
Patch:
@@ -46,7 +46,7 @@ default DataSourceProvider<?> getProvider(@NonNull String id) throws ClientExcep
     default DataStore resolveStore(@NonNull DataStore in, boolean acceptDisabled) throws ClientException {
         try {
             if (in instanceof NamedStore n) {
-                var found = DataStorage.get().getStore(n.getName(), acceptDisabled);
+                var found = DataStorage.get().getStoreEntry(n.getName(), acceptDisabled);
                 return found.getStore();
             }
         } catch (IllegalArgumentException ex) {
@@ -57,7 +57,7 @@ default DataStore resolveStore(@NonNull DataStore in, boolean acceptDisabled) th
     }
 
     default DataStoreEntry getStoreEntryByName(@NonNull String name, boolean acceptDisabled) throws ClientException {
-        var store = DataStorage.get().getStoreIfPresent(name);
+        var store = DataStorage.get().getStoreEntryIfPresent(name);
         if (store.isEmpty()) {
             throw new ClientException("No store with name " + name + " was found");
         }

File: app/src/main/java/io/xpipe/app/exchange/cli/ListStoresExchangeImpl.java
Patch:
@@ -14,7 +14,7 @@ public class ListStoresExchangeImpl extends ListStoresExchange
     @Override
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
         DataStorage s = DataStorage.get();
-        var e = s.getStores().stream()
+        var e = s.getStoreEntries().stream()
                 .filter(entry -> !entry.isDisabled() && entry.getProvider().shouldShow())
                 .sorted(Comparator.comparing(dataStoreEntry -> dataStoreEntry.getLastUsed()))
                 .map(col -> StoreListEntry.builder()

File: app/src/main/java/io/xpipe/app/exchange/cli/ReadDrainExchangeImpl.java
Patch:
@@ -18,9 +18,9 @@ public class ReadDrainExchangeImpl extends ReadDrainExchange
 
     @Override
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
-        var ds = DataStorage.get().getStoreIfPresent(msg.getName());
+        var ds = DataStorage.get().getStoreEntryIfPresent(msg.getName());
         if (ds.isEmpty()) {
-            ds = Optional.of(DataStorage.get().addStore(msg.getName(), msg.getStore()));
+            ds = Optional.of(DataStorage.get().addStoreEntry(msg.getName(), msg.getStore()));
         }
 
         if (!(ds.get().getStore() instanceof SinkDrainStore)) {

File: app/src/main/java/io/xpipe/app/exchange/cli/RemoveEntryExchangeImpl.java
Patch:
@@ -12,7 +12,7 @@ public class RemoveEntryExchangeImpl extends RemoveEntryExchange
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
         var e = getSourceEntry(msg.getRef(), null, true);
         var id = DataStorage.get().getId(e);
-        DataStorage.get().deleteEntry(e);
+        DataStorage.get().deleteSourceEntry(e);
         return Response.builder().id(id).build();
     }
 }

File: app/src/main/java/io/xpipe/app/exchange/cli/RemoveStoreExchangeImpl.java
Patch:
@@ -11,7 +11,7 @@ public class RemoveStoreExchangeImpl extends RemoveStoreExchange
 
     @Override
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
-        var s = DataStorage.get().getStore(msg.getStoreName(), true);
+        var s = DataStorage.get().getStoreEntry(msg.getStoreName(), true);
         if (!s.getConfiguration().isDeletable()) {
             throw new ClientException("Store is not deletable");
         }

File: app/src/main/java/io/xpipe/app/exchange/cli/RenameEntryExchangeImpl.java
Patch:
@@ -11,7 +11,7 @@ public class RenameEntryExchangeImpl extends RenameEntryExchange
     @Override
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
         var e = getSourceEntry(msg.getRef(), null, true);
-        DataStorage.get().deleteEntry(e);
+        DataStorage.get().deleteSourceEntry(e);
         DataStorage.get()
                 .add(
                         e,

File: app/src/main/java/io/xpipe/app/exchange/cli/RenameStoreExchangeImpl.java
Patch:
@@ -10,8 +10,8 @@ public class RenameStoreExchangeImpl extends RenameStoreExchange
 
     @Override
     public Response handleRequest(BeaconHandler handler, Request msg) throws Exception {
-        var s = DataStorage.get().getStore(msg.getStoreName(), true);
-        DataStorage.get().renameStore(s, msg.getNewName());
+        var s = DataStorage.get().getStoreEntry(msg.getStoreName(), true);
+        DataStorage.get().renameStoreEntry(s, msg.getNewName());
         return Response.builder().build();
     }
 }

File: app/src/main/java/io/xpipe/app/exchange/cli/StoreAddExchangeImpl.java
Patch:
@@ -51,7 +51,7 @@ public StoreAddExchange.Response handleRequest(BeaconHandler handler, Request ms
                 return;
             }
 
-            DataStorage.get().addStore(name.getValue(), store);
+            DataStorage.get().addStoreEntry(name.getValue(), store);
         });
 
         return StoreAddExchange.Response.builder().config(config).build();
@@ -81,7 +81,7 @@ private Dialog createCompleteDialog(DataStoreProvider provider, Dialog creator,
         var nameQ = Dialog.retryIf(
                         Dialog.query("Store name", true, true, false, name.getValue(), QueryConverter.STRING),
                         (String r) -> {
-                            return DataStorage.get().getStoreIfPresent(r).isPresent()
+                            return DataStorage.get().getStoreEntryIfPresent(r).isPresent()
                                     ? "Store with name " + r + " already exists"
                                     : null;
                         })

File: app/src/main/java/io/xpipe/app/fxcomps/impl/FileSystemStoreChoiceComp.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.xpipe.app.ext.DataStoreProviders;
 import io.xpipe.app.fxcomps.SimpleComp;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.util.CustomComboBoxBuilder;
 import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.impl.FileStore;
@@ -23,7 +24,7 @@ public FileSystemStoreChoiceComp(Property<FileStore> selected) {
     }
 
     private static String getName(FileSystemStore store) {
-        var name = XPipeDaemon.getInstance().getNamedStores().stream()
+        var name = DataStorage.get().getUsableStores().stream()
                 .filter(e -> e.equals(store))
                 .findAny()
                 .map(e -> XPipeDaemon.getInstance().getStoreName(e).orElse("?"))
@@ -61,7 +62,7 @@ protected Region createSimple() {
         var comboBox =
                 new CustomComboBoxBuilder<FileSystemStore>(fileSystemProperty, this::createGraphic, null, v -> true);
         comboBox.setSelectedDisplay(this::createDisplayGraphic);
-        XPipeDaemon.getInstance().getNamedStores().stream()
+        DataStorage.get().getUsableStores().stream()
                 .filter(e -> e instanceof FileSystemStore)
                 .map(e -> (FileSystemStore) e)
                 .forEach(comboBox::add);

File: app/src/main/java/io/xpipe/app/fxcomps/impl/ShellStoreChoiceComp.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataStoreProviders;
 import io.xpipe.app.fxcomps.SimpleComp;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.util.CustomComboBoxBuilder;
 import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.store.ShellStore;
@@ -52,7 +53,7 @@ protected Region createGraphic(T s) {
         var imgView =
                 new PrettyImageComp(new SimpleStringProperty(provider.getDisplayIconFileName()), 16, 16).createRegion();
 
-        var name = XPipeDaemon.getInstance().getNamedStores().stream()
+        var name = DataStorage.get().getUsableStores().stream()
                 .filter(e -> e.equals(s))
                 .findAny()
                 .flatMap(store -> {
@@ -74,7 +75,7 @@ protected Region createSimple() {
                 new CustomComboBoxBuilder<T>(selected, this::createGraphic, new Label(AppI18n.get("none")), n -> true);
         comboBox.setUnknownNode(t -> createGraphic(t));
 
-        var available = XPipeDaemon.getInstance().getNamedStores().stream()
+        var available = DataStorage.get().getUsableStores().stream()
                 .filter(s -> s != self)
                 .filter(s -> storeClass.isAssignableFrom(s.getClass()) && applicableCheck.test((T) s))
                 .map(s -> (ShellStore) s)

File: app/src/main/java/io/xpipe/app/storage/DataSourceCollection.java
Patch:
@@ -66,7 +66,7 @@ public static DataSourceCollection fromDirectory(DataStorage storage, Path dir)
         JavaType listType = mapper.getTypeFactory().constructCollectionType(ArrayList.class, UUID.class);
         var entries = new LinkedHashMap<UUID, DataSourceEntry>();
         for (var u : mapper.<List<UUID>>readValue(dir.resolve("entries.json").toFile(), listType)) {
-            var v = storage.getSourceEntryByUuid(u).orElse(null);
+            var v = storage.getSourceEntry(u).orElse(null);
             entries.put(u, v);
         }
 

File: app/src/main/java/io/xpipe/app/storage/DataStateProviderImpl.java
Patch:
@@ -15,7 +15,7 @@ public void putState(DataStore store, String key, Object value) {
             return;
         }
 
-        var entry = DataStorage.get().getEntryByStore(store);
+        var entry = DataStorage.get().getStoreEntryIfPresent(store);
         if (entry.isEmpty()) {
             return;
         }
@@ -30,7 +30,7 @@ public <T> T getState(DataStore store, String key, Class<T> c, Supplier<T> def)
             return def.get();
         }
 
-        var entry = DataStorage.get().getEntryByStore(store);
+        var entry = DataStorage.get().getStoreEntryIfPresent(store);
         if (entry.isEmpty()) {
             return def.get();
         }

File: app/src/main/java/io/xpipe/app/storage/DataStorageParser.java
Patch:
@@ -52,7 +52,7 @@ private static JsonNode replaceReferenceIds(JsonNode node, Set<UUID> seenIds) {
                 return Optional.empty();
             }
 
-            var entry = DataStorage.get().getStoreEntryByUuid(id);
+            var entry = DataStorage.get().getStoreEntry(id);
             if (entry.isEmpty()) {
                 TrackEvent.withWarn("storage", "Encountered unknown store").tag("id", id);
                 return Optional.empty();
@@ -70,7 +70,7 @@ private static JsonNode replaceReferenceIds(JsonNode node, Set<UUID> seenIds) {
         });
 
         node = replaceReferenceIdsForType(node, "sourceId", id -> {
-            var foundEntry = DataStorage.get().getSourceEntryByUuid(id);
+            var foundEntry = DataStorage.get().getSourceEntry(id);
             if (foundEntry.isPresent()) {
                 var sourceNode = mapper.valueToTree(foundEntry.get().getSource());
                 // return Optional.of(resolvesReferenceIds(sourceNode));

File: app/src/main/java/io/xpipe/app/storage/DataStoreEntry.java
Patch:
@@ -93,7 +93,6 @@ private static DataStoreEntry createExisting(
             Configuration configuration) {
         var entry = new DataStoreEntry(
                 directory, uuid, name, lastUsed, lastModified, information, storeNode, false, state, configuration);
-        entry.refresh(false);
         return entry;
     }
 
@@ -236,7 +235,7 @@ public void refresh(boolean deep) throws Exception {
                 information = null;
                 throw e;
             } finally {
-                listeners.forEach(l -> l.onUpdate());
+                propagateUpdate();
             }
         }
     }

File: app/src/main/java/io/xpipe/app/update/XPipeInstanceHelper.java
Patch:
@@ -60,7 +60,7 @@ public static Optional<XPipeInstance> getInstance(ShellStore store) {
     }
 
     public static XPipeInstance refresh() {
-        Map<ShellStore, Optional<XPipeInstance>> map = DataStorage.get().getStores().stream()
+        Map<ShellStore, Optional<XPipeInstance>> map = DataStorage.get().getStoreEntries().stream()
                 .filter(entry -> entry.getStore() instanceof ShellStore)
                 .collect(Collectors.toMap(
                         entry -> entry.getStore().asNeeded(),

File: app/src/main/java/io/xpipe/app/util/Validators.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.app.util;
 
 import io.xpipe.app.core.AppI18n;
-import io.xpipe.core.impl.LocalStore;
+import io.xpipe.app.storage.DataStorage;
 import io.xpipe.core.store.DataStore;
 import io.xpipe.core.store.ShellStore;
 import io.xpipe.core.util.ValidationException;
@@ -22,7 +22,7 @@ public static void notEmpty(String string, String name) throws ValidationExcepti
     }
 
     public static void namedStoreExists(DataStore store, String name) throws ValidationException {
-        if (!XPipeDaemon.getInstance().getNamedStores().contains(store) && !(store instanceof LocalStore)) {
+        if (!DataStorage.get().getUsableStores().contains(store)) {
             throw new ValidationException(AppI18n.get("app.missingStore", name));
         }
     }

File: ext/base/src/main/java/io/xpipe/ext/base/FileStoreProvider.java
Patch:
@@ -1,11 +1,11 @@
 package io.xpipe.ext.base;
 
+import io.xpipe.app.comp.source.store.DsStreamStoreChoiceComp;
 import io.xpipe.app.ext.DataStoreProvider;
 import io.xpipe.app.ext.GuiDialog;
 import io.xpipe.app.util.DataStoreFormatter;
 import io.xpipe.app.util.DialogHelper;
 import io.xpipe.app.util.SimpleValidator;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.dialog.Dialog;
 import io.xpipe.core.impl.FileStore;
 import io.xpipe.core.impl.LocalStore;
@@ -24,7 +24,8 @@ public boolean shouldShow() {
     @Override
     public GuiDialog guiDialog(Property<DataStore> store) {
         var val = new SimpleValidator();
-        var comp = XPipeDaemon.getInstance().streamStoreChooser(store, null, false, false);
+        var comp = new DsStreamStoreChoiceComp(
+                store, null, false, false, DsStreamStoreChoiceComp.Mode.WRITE);
         return new GuiDialog(comp, val);
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/LocalStoreProvider.java
Patch:
@@ -4,7 +4,6 @@
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.storage.DataStoreEntry;
 import io.xpipe.app.storage.StorageElement;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.impl.LocalStore;
 import io.xpipe.core.process.OsType;
 import io.xpipe.core.store.DataStore;
@@ -33,7 +32,7 @@ public boolean shouldShow() {
 
     @Override
     public void storageInit() throws Exception {
-        var hasLocal = XPipeDaemon.getInstance().getNamedStores().stream()
+        var hasLocal = DataStorage.get().getUsableStores().stream()
                 .anyMatch(dataStore -> dataStore instanceof LocalStore);
         if (hasLocal) {
             return;

File: ext/base/src/main/java/io/xpipe/ext/base/actions/EditStoreAction.java
Patch:
@@ -43,7 +43,7 @@ public ActiveType activeType() {
 
             @Override
             public ActionProvider.Action createAction(DataStore store) {
-                return new Action(DataStorage.get().getStore(store));
+                return new Action(DataStorage.get().getStoreEntry(store));
             }
 
             @Override
@@ -53,7 +53,7 @@ public Class<DataStore> getApplicableClass() {
 
             @Override
             public boolean isApplicable(DataStore o) throws Exception {
-                return DataStorage.get().getStore(o).getConfiguration().isEditable();
+                return DataStorage.get().getStoreEntry(o).getConfiguration().isEditable();
             }
 
             @Override

File: ext/base/src/main/java/io/xpipe/ext/base/apps/DataSourceOutputTarget.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.ext.base.apps;
 
 import io.xpipe.app.comp.source.GuiDsTableMappingConfirmation;
+import io.xpipe.app.comp.source.NamedSourceChoiceComp;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataSourceProvider;
 import io.xpipe.app.ext.DataSourceProviders;
@@ -10,7 +11,6 @@
 import io.xpipe.app.issue.ErrorEvent;
 import io.xpipe.app.util.ChainedValidator;
 import io.xpipe.app.util.DynamicOptionsBuilder;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.source.*;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.SimpleObjectProperty;
@@ -34,8 +34,7 @@ public InstructionsDisplay createRetrievalInstructions(DataSource<?> source, Obs
         var target = new SimpleObjectProperty<DataSource<?>>();
         var sourceType =
                 DataSourceProviders.byDataSourceClass(source.getClass()).getPrimaryType();
-        var chooser = XPipeDaemon.getInstance()
-                .namedSourceChooser(
+        var chooser = new NamedSourceChoiceComp(
                         new SimpleObjectProperty<>(s -> s != source
                                 && s.getFlow().hasOutput()
                                 && DataSourceProviders.byDataSourceClass(s.getClass())

File: ext/base/src/main/java/io/xpipe/ext/base/apps/RawFileOutputTarget.java
Patch:
@@ -1,11 +1,11 @@
 package io.xpipe.ext.base.apps;
 
+import io.xpipe.app.comp.source.store.NamedStoreChoiceComp;
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.ext.DataSourceTarget;
 import io.xpipe.app.ext.DataStoreProvider;
 import io.xpipe.app.fxcomps.augment.GrowAugment;
 import io.xpipe.app.util.DynamicOptionsBuilder;
-import io.xpipe.app.util.XPipeDaemon;
 import io.xpipe.core.source.DataSource;
 import io.xpipe.core.source.DataSourceId;
 import io.xpipe.core.store.StreamDataStore;
@@ -25,8 +25,7 @@ public String getId() {
     public InstructionsDisplay createRetrievalInstructions(DataSource<?> source, ObservableValue<DataSourceId> id) {
         var target = new SimpleObjectProperty<StreamDataStore>();
 
-        var storeChoice = XPipeDaemon.getInstance()
-                .namedStoreChooser(
+        var storeChoice = new NamedStoreChoiceComp(
                         new SimpleObjectProperty<>(store -> store instanceof StreamDataStore
                                 && (store.getFlow().hasOutput())),
                         target,

File: ext/base/src/main/java/module-info.java
Patch:
@@ -22,6 +22,7 @@
     requires org.apache.commons.lang3;
 
     provides ActionProvider with
+            DeleteStoreChildrenAction,
             AddStoreAction,
             EditStoreAction,
             StreamExportAction,

File: app/src/main/java/io/xpipe/app/comp/base/ListBoxViewComp.java
Patch:
@@ -3,7 +3,6 @@
 import io.xpipe.app.fxcomps.Comp;
 import io.xpipe.app.fxcomps.CompStructure;
 import io.xpipe.app.fxcomps.SimpleCompStructure;
-import io.xpipe.app.fxcomps.util.BindingsHelper;
 import io.xpipe.app.fxcomps.util.PlatformThread;
 import javafx.application.Platform;
 import javafx.collections.ListChangeListener;
@@ -67,7 +66,7 @@ private void refresh(VBox listView, List<? extends T> c, Map<T, Region> cache, b
                     .toList();
 
             if (!listView.getChildren().equals(newShown)) {
-                BindingsHelper.setContent(listView.getChildren(), newShown);
+                listView.getChildren().setAll(newShown);
                 listView.layout();
             }
         };

File: app/src/main/java/io/xpipe/app/comp/base/ListSelectorComp.java
Patch:
@@ -28,15 +28,16 @@ protected Region createSimple() {
         vbox.getStyleClass().add("content");
         for (var v : values) {
             var cb = new CheckBox(null);
+            cb.setSelected(selected.contains(v));
             cb.selectedProperty().addListener((c, o, n) -> {
                 if (n) {
                     selected.add(v);
                 } else {
                     selected.remove(v);
                 }
             });
-            cb.setSelected(selected.contains(v));
             var l = new Label(toString.apply(v), cb);
+            l.setOnMouseClicked(event -> cb.setSelected(!cb.isSelected()));
             vbox.getChildren().add(l);
         }
         var sp = new ScrollPane(vbox);

File: app/src/main/java/io/xpipe/app/launcher/LauncherInput.java
Patch:
@@ -69,7 +69,7 @@ public static List<ActionProvider.Action> of(String input) {
 
                 if (scheme.equalsIgnoreCase("xpipe")) {
                     var action = uri.getAuthority();
-                    var args = Arrays.asList(uri.getPath().split("/"));
+                    var args = Arrays.asList(uri.getPath().substring(1).split("/"));
                     var found = ActionProvider.ALL.stream()
                             .filter(actionProvider -> actionProvider.getLauncherCallSite() != null
                                     && actionProvider

File: app/src/main/java/io/xpipe/app/util/OptionsBuilder.java
Patch:
@@ -21,7 +21,7 @@ public class OptionsBuilder {
 
     private ObservableValue<String> name;
     private ObservableValue<String> description;
-    private ObservableValue<String> longDescription;
+    private String longDescription;
     private Comp<?> comp;
 
     private void finishCurrent() {
@@ -106,7 +106,7 @@ public OptionsBuilder description(String descriptionKey) {
 
     public OptionsBuilder longDescription(String descriptionKey) {
         finishCurrent();
-        longDescription = AppI18n.observable(descriptionKey);
+        longDescription = AppI18n.getInstance().getMarkdownDocumentation(descriptionKey);
         return this;
     }
 

File: ext/base/src/main/java/io/xpipe/ext/base/LocalStoreProvider.java
Patch:
@@ -40,7 +40,7 @@ public void storageInit() throws Exception {
         }
 
         var e = DataStoreEntry.createNew(UUID.randomUUID(), "Local Machine", new LocalStore());
-        DataStorage.get().addStore(e);
+        DataStorage.get().addStoreEntry(e);
         e.setConfiguration(StorageElement.Configuration.builder()
                 .deletable(false)
                 .editable(false)

File: ext/base/src/main/java/io/xpipe/ext/base/actions/AddStoreAction.java
Patch:
@@ -38,7 +38,7 @@ public LauncherCallSite getLauncherCallSite() {
         return new LauncherCallSite() {
             @Override
             public String getId() {
-                return "addStore";
+                return "add";
             }
 
             @Override

File: ext/base/src/main/java/io/xpipe/ext/base/actions/EditStoreAction.java
Patch:
@@ -37,8 +37,8 @@ public boolean isMajor() {
             }
 
             @Override
-            public boolean showIfDisabled() {
-                return false;
+            public ActiveType activeType() {
+                return ActiveType.ALWAYS_ENABLE;
             }
 
             @Override

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -30,8 +30,10 @@ final class OpenFileSystemModel {
     private final ReadOnlyObjectWrapper<String> currentPath = new ReadOnlyObjectWrapper<>();
     private final FileBrowserNavigationHistory history = new FileBrowserNavigationHistory();
     private final BooleanProperty busy = new SimpleBooleanProperty();
+    private final FileBrowserModel browserModel;
 
-    public OpenFileSystemModel() {
+    public OpenFileSystemModel(FileBrowserModel browserModel) {
+        this.browserModel = browserModel;
         fileList = new FileListModel(this);
     }
 

File: app/src/main/java/io/xpipe/app/comp/base/MultiStepComp.java
Patch:
@@ -214,7 +214,7 @@ protected Region createStepNavigation() {
         buttons.setAlignment(Pos.CENTER_RIGHT);
         var nextText = Bindings.createStringBinding(
                 () -> isLastPage() ? AppI18n.get("finishStep") : AppI18n.get("nextStep"), currentStep);
-        var nextButton = new ButtonComp(nextText, null, comp::next).styleClass("next");
+        var nextButton = new ButtonComp(nextText, null, comp::next).apply(struc -> struc.get().setDefaultButton(true)).styleClass("next");
 
         var previousButton = new ButtonComp(AppI18n.observable("previousStep"), null, comp::previous)
                 .styleClass("next")

File: app/src/main/java/io/xpipe/app/comp/source/store/DsRemoteFileChoiceComp.java
Patch:
@@ -2,11 +2,9 @@
 
 import io.xpipe.app.core.AppI18n;
 import io.xpipe.app.fxcomps.SimpleComp;
-import io.xpipe.app.fxcomps.impl.FileSystemStoreChoiceComp;
 import io.xpipe.app.util.DynamicOptionsBuilder;
 import io.xpipe.core.impl.FileStore;
 import io.xpipe.core.store.DataStore;
-import io.xpipe.core.store.FileSystem;
 import io.xpipe.core.store.FileSystemStore;
 import javafx.beans.property.Property;
 import javafx.beans.property.SimpleObjectProperty;
@@ -26,7 +24,6 @@ protected Region createSimple() {
         var machine = new SimpleObjectProperty<FileSystemStore>();
         var fileName = new SimpleStringProperty();
         return new DynamicOptionsBuilder(false)
-                .addComp(AppI18n.observable("machine"), new FileSystemStoreChoiceComp(machine), machine)
                 .addString(AppI18n.observable("file"), fileName, true)
                 .bind(
                         () -> {

File: app/src/main/java/io/xpipe/app/comp/source/store/DsStreamStoreChoiceComp.java
Patch:
@@ -71,11 +71,11 @@ public DsStreamStoreChoiceComp(
     protected Region createSimple() {
         var isNamedStore =
                 XPipeDaemon.getInstance().getStoreName(selected.getValue()).isPresent();
-        var localStore = new SimpleObjectProperty<DataStore>(
+        var localStore = new SimpleObjectProperty<FileStore>(
                 !isNamedStore
                                 && selected.getValue() instanceof FileStore fileStore
                                 && fileStore.getFileSystem() instanceof LocalStore
-                        ? selected.getValue()
+                        ? fileStore
                         : null);
         var browseComp = new DsLocalFileBrowseComp(provider, localStore, mode).apply(GrowAugment.create(true, false));
         var dragAndDropLabel = Comp.of(() -> new Label(AppI18n.get("dragAndDropFilesHere")))

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -56,7 +56,7 @@ private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue
             !AppProperties.get().getDataDir().equals(AppProperties.DEFAULT_DATA_DIR);
     private static final String LOG_LEVEL_PROP = "io.xpipe.app.logLevel";
     // Lets keep this at trace for now, at least for the alpha
-    private static final String DEFAULT_LOG_LEVEL = "trace";
+    private static final String DEFAULT_LOG_LEVEL = "debug";
     private static final boolean LOG_LEVEL_FIXED = System.getProperty(LOG_LEVEL_PROP) != null;
     private static final String DEVELOPER_MODE_PROP = "io.xpipe.app.developerMode";
     private static AppPrefs INSTANCE;

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -38,7 +38,7 @@ public MacApplication(String id, String applicationName) {
         }
 
         protected Optional<Path> getApplicationPath() {
-            try (ShellProcessControl pc = ShellStore.local().create().start()) {
+            try (ShellProcessControl pc = ShellStore.createLocal().create().start()) {
                 try (var c = pc.command(String.format(
                                 "/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister "
                                         + "-dump | grep -o \"/.*%s.app\" | grep -v -E \"Caches|TimeMachine|Temporary|/Volumes/%s\" | uniq",

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -146,7 +146,7 @@ public void installRemote(ShellProcessControl shellProcessControl, String file)
 
             @Override
             public void installLocal(String file) throws Exception {
-                var shellProcessControl = ShellStore.local().create().start();
+                var shellProcessControl = ShellStore.createLocal().create().start();
                 var exec = XPipeInstallation.getInstallationExecutable(
                         shellProcessControl,
                         XPipeInstallation.getDefaultInstallationBasePath(shellProcessControl, false));

File: app/src/main/java/io/xpipe/app/util/DesktopShortcuts.java
Patch:
@@ -21,7 +21,7 @@ private static void createWindowsShortcut(String target, String name) throws Exc
                         %%PWS%% -Command "$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut('%%SHORTCUT%%'); $S.IconLocation='%s'; $S.TargetPath = '%%TARGET%%'; $S.Save()"
                         """,
                 target, name, icon.toString());
-        ShellStore.local().create().executeSimpleCommand(content);
+        ShellStore.createLocal().create().executeSimpleCommand(content);
     }
 
     private static void createLinuxShortcut(String target, String name) throws Exception {

File: app/src/main/java/io/xpipe/app/util/FileOpener.java
Patch:
@@ -65,7 +65,7 @@ public static void openInTextEditor(String file) {
     }
 
     public static void openInDefaultApplication(String file) {
-        try (var pc = ShellStore.local().create().start()) {
+        try (var pc = ShellStore.createLocal().create().start()) {
             if (pc.getOsType().equals(OsType.WINDOWS)) {
                 pc.executeSimpleCommand("\"" + file + "\"");
             } else if (pc.getOsType().equals(OsType.LINUX)) {

File: app/src/main/java/io/xpipe/app/util/MacOsPermissions.java
Patch:
@@ -14,7 +14,7 @@ public class MacOsPermissions {
     public static boolean waitForAccessibilityPermissions() throws Exception {
         AtomicReference<Alert> alert = new AtomicReference<>();
         var state = new SimpleBooleanProperty(true);
-        try (var pc = ShellStore.local().create().start()) {
+        try (var pc = ShellStore.createLocal().create().start()) {
             while (state.get()) {
                 var success = pc.executeBooleanSimpleCommand(
                         "osascript -e 'tell application \"System Events\" to keystroke \"t\"'");

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -42,7 +42,7 @@ public static int getScriptId() {
 
     @SneakyThrows
     public static String createLocalExecScript(String content) {
-        try (var l = ShellStore.local().create().start()) {
+        try (var l = ShellStore.createLocal().create().start()) {
             return createExecScript(l, content);
         }
     }

File: app/src/main/java/module-info.java
Patch:
@@ -33,6 +33,7 @@
     exports io.xpipe.app.fxcomps.util;
     exports io.xpipe.app.fxcomps.augment;
     exports io.xpipe.app.test;
+    exports io.xpipe.app.browser;
 
     requires com.sun.jna;
     requires com.sun.jna.platform;

File: beacon/src/main/java/io/xpipe/beacon/BeaconProxyImpl.java
Patch:
@@ -52,7 +52,7 @@ private static JsonNode replace(JsonNode node, Function<JsonNode, Optional<JsonN
     public <T> T downstreamTransform(T object, ShellStore proxy) {
         var proxyNode = JacksonMapper.getDefault().valueToTree(proxy);
         var inputNode = JacksonMapper.getDefault().valueToTree(object);
-        var localNode = JacksonMapper.getDefault().valueToTree(ShellStore.local());
+        var localNode = JacksonMapper.getDefault().valueToTree(ShellStore.createLocal());
         var result = replace(inputNode, node -> node.equals(proxyNode) ? Optional.of(localNode) : Optional.empty());
         return (T) JacksonMapper.getDefault().treeToValue(result, object.getClass());
     }

File: core/src/main/java/io/xpipe/core/charsetter/Charsetter.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.core.charsetter;
 
 import io.xpipe.core.impl.FileStore;
-import io.xpipe.core.store.MachineStore;
+import io.xpipe.core.store.ShellStore;
 import io.xpipe.core.store.StreamDataStore;
 import lombok.Value;
 
@@ -108,7 +108,7 @@ public Result detect(StreamDataStore store) throws Exception {
             }
         }
 
-        if (store instanceof FileStore fileStore && fileStore.getFileSystem() instanceof MachineStore m) {
+        if (store instanceof FileStore fileStore && fileStore.getFileSystem() instanceof ShellStore m) {
             if (result.getNewLine() == null) {
                 result = new Result(
                         result.getCharset(),

File: core/src/main/java/io/xpipe/core/store/FileSystem.java
Patch:
@@ -42,6 +42,8 @@ public FileEntry(
         }
     }
 
+    FileSystemStore getStore();
+
     Optional<ShellProcessControl> getShell();
 
     FileSystem open() throws Exception;

File: ext/base/src/main/java/io/xpipe/ext/base/LocalStoreProvider.java
Patch:
@@ -17,7 +17,7 @@ public class LocalStoreProvider implements DataStoreProvider {
 
     @Override
     public String queryInformationString(DataStore store, int length) throws Exception {
-        try (var pc = ShellStore.local().create().start()) {
+        try (var pc = ShellStore.createLocal().create().start()) {
             return OsType.getLocal().determineOperatingSystemName(pc);
         }
     }

File: app/src/main/java/io/xpipe/app/browser/FileContextMenu.java
Patch:
@@ -72,7 +72,7 @@ private void createMenu() {
                     ThreadHelper.runFailableAsync(() -> {
                         ShellProcessControl pc =
                                 model.getFileSystem().getShell().orElseThrow();
-                        pc.executeSimpleCommand(pc.getShellDialect().getMakeExecutableCommand(entry.getPath()));
+                        pc.executeBooleanSimpleCommand(pc.getShellDialect().getMakeExecutableCommand(entry.getPath()));
                         var cmd = pc.command("\"" + entry.getPath() + "\"").prepareTerminalOpen();
                         TerminalHelper.open(FilenameUtils.getBaseName(entry.getPath()), cmd);
                     });
@@ -85,7 +85,7 @@ private void createMenu() {
                     ThreadHelper.runFailableAsync(() -> {
                         ShellProcessControl pc =
                                 model.getFileSystem().getShell().orElseThrow();
-                        pc.executeSimpleCommand(pc.getShellDialect().getMakeExecutableCommand(entry.getPath()));
+                        pc.executeBooleanSimpleCommand(pc.getShellDialect().getMakeExecutableCommand(entry.getPath()));
                         var cmd = ScriptHelper.createDetachCommand(pc, "\"" + entry.getPath() + "\"");
                         pc.executeBooleanSimpleCommand(cmd);
                     });

File: app/src/main/java/io/xpipe/app/browser/FileListComp.java
Patch:
@@ -234,7 +234,7 @@ private TableView<FileSystem.FileEntry> createTable() {
             return row;
         });
 
-        fileList.getShown().addListener((observable, oldValue, newValue) -> {
+        SimpleChangeListener.apply(fileList.getShown(), (newValue) -> {
             PlatformThread.runLaterIfNeeded(() -> {
                 table.getItems().setAll(newValue);
                 if (newValue.size() > 0) {

File: app/src/main/java/io/xpipe/app/browser/FileListComp.java
Patch:
@@ -235,7 +235,7 @@ private TableView<FileSystem.FileEntry> createTable() {
         });
 
         fileList.getShown().addListener((observable, oldValue, newValue) -> {
-            PlatformThread.runLaterIfNeededBlocking(() -> {
+            PlatformThread.runLaterIfNeeded(() -> {
                 table.getItems().setAll(newValue);
                 if (newValue.size() > 0) {
                     table.scrollTo(0);

File: app/src/main/java/io/xpipe/app/browser/FileListModel.java
Patch:
@@ -3,7 +3,7 @@
 package io.xpipe.app.browser;
 
 import io.xpipe.app.issue.ErrorEvent;
-import io.xpipe.app.util.ExternalEditor;
+import io.xpipe.app.util.FileOpener;
 import io.xpipe.core.impl.FileNames;
 import io.xpipe.core.store.FileSystem;
 import javafx.beans.property.ObjectProperty;
@@ -73,7 +73,7 @@ public void onClick(FileSystem.FileEntry entry) {
         if (entry.isDirectory()) {
             model.navigate(entry.getPath(), true);
         } else {
-            ExternalEditor.get().openInEditor(entry.getFileSystem(), entry.getPath());
+            FileOpener.openInTextEditor(entry);
         }
     }
 

File: app/src/main/java/io/xpipe/app/browser/FileSystemHelper.java
Patch:
@@ -54,6 +54,7 @@ public static FileSystem.FileEntry getLocal(Path file) throws Exception {
                 Files.getLastModifiedTime(file).toInstant(),
                 Files.isDirectory(file),
                 Files.isHidden(file),
+                Files.isExecutable(file),
                 Files.size(file));
     }
 

File: app/src/main/java/io/xpipe/app/comp/about/BrowseDirectoryComp.java
Patch:
@@ -8,7 +8,7 @@
 import io.xpipe.app.issue.UserReportComp;
 import io.xpipe.app.util.DesktopHelper;
 import io.xpipe.app.util.DynamicOptionsBuilder;
-import io.xpipe.app.util.ExternalEditor;
+import io.xpipe.app.util.FileOpener;
 import io.xpipe.core.util.XPipeInstallation;
 import javafx.scene.layout.Region;
 
@@ -30,8 +30,7 @@ protected Region createSimple() {
                 .addComp(
                         "logFile",
                         new ButtonComp(AppI18n.observable("openCurrentLogFile"), () -> {
-                            ExternalEditor.get()
-                                    .openInEditor(AppLogs.get()
+                            FileOpener.openInTextEditor(AppLogs.get()
                                             .getSessionLogsDirectory()
                                             .resolve("xpipe.log")
                                             .toString());

File: app/src/main/java/io/xpipe/app/comp/base/IntegratedTextAreaComp.java
Patch:
@@ -4,7 +4,7 @@
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.impl.IconButtonComp;
 import io.xpipe.app.fxcomps.impl.TextAreaComp;
-import io.xpipe.app.util.ExternalEditor;
+import io.xpipe.app.util.FileOpener;
 import javafx.application.Platform;
 import javafx.beans.property.Property;
 import javafx.scene.layout.AnchorPane;
@@ -47,8 +47,8 @@ protected Region createSimple() {
     }
 
     private Region createOpenButton(Region container) {
-        var button = new IconButtonComp("mdal-edit", () -> ExternalEditor.get()
-                        .startEditing(identifier, fileType, this, value.getValue(), (s) -> {
+        var button = new IconButtonComp("mdal-edit", () -> FileOpener
+                        .openString(identifier, fileType, this, value.getValue(), (s) -> {
                             Platform.runLater(() -> value.setValue(s));
                         }))
                 .createRegion();

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -9,7 +9,7 @@
 import io.xpipe.app.prefs.AppPrefs;
 import io.xpipe.app.storage.DataStorage;
 import io.xpipe.app.update.AppUpdater;
-import io.xpipe.app.util.ExternalEditor;
+import io.xpipe.app.util.FileBridge;
 import io.xpipe.core.util.JacksonMapper;
 
 public class BaseMode extends OperationMode {
@@ -40,7 +40,7 @@ public void initialSetup() throws Exception {
         AppCharsetter.init();
         DataStorage.init();
         FileWatchManager.init();
-        ExternalEditor.init();
+        FileBridge.init();
         AppSocketServer.init();
         AppUpdater.init();
         TrackEvent.info("mode", "Finished base components initialization");

File: core/src/main/java/io/xpipe/core/store/FileSystem.java
Patch:
@@ -24,6 +24,7 @@ static class FileEntry {
         Instant date;
         boolean directory;
         boolean hidden;
+        Boolean executable;
         long size;
     }
 

File: app/src/main/java/io/xpipe/app/core/App.java
Patch:
@@ -66,7 +66,7 @@ public void setupWindow() {
         var content = new AppLayoutComp();
         content.apply(struc -> {
             struc.get().addEventFilter(MouseEvent.MOUSE_CLICKED, event -> {
-                AppActionLinkDetector.detectOnFocus();
+                // AppActionLinkDetector.detectOnFocus();
             });
         });
         var title =

File: app/src/main/java/io/xpipe/app/fxcomps/impl/PrettyImageComp.java
Patch:
@@ -4,7 +4,6 @@
 import io.xpipe.app.fxcomps.SimpleComp;
 import io.xpipe.app.fxcomps.util.PlatformThread;
 import io.xpipe.app.fxcomps.util.SimpleChangeListener;
-import io.xpipe.app.util.XPipeDaemon;
 import javafx.beans.binding.Bindings;
 import javafx.beans.property.SimpleDoubleProperty;
 import javafx.beans.property.SimpleObjectProperty;
@@ -73,7 +72,7 @@ else if (value.getValue().endsWith(".svg")) {
                                 return null;
                             }
 
-                            return XPipeDaemon.getInstance().svgImage(value.getValue());
+                            return AppImages.svgImage(value.getValue());
                         }, value));
                 var ar = Bindings.createDoubleBinding(
                         () -> {
@@ -101,7 +100,7 @@ else if (value.getValue().endsWith(".svg")) {
                                         return null;
                                     }
 
-                                    return XPipeDaemon.getInstance().image(value.getValue());
+                                    return AppImages.image(value.getValue());
                                 },
                                 PlatformThread.sync(value)));
                 var ar = Bindings.createDoubleBinding(

File: app/src/main/java/io/xpipe/app/browser/BrowserComp.java
Patch:
@@ -73,7 +73,7 @@ private Node createTabs() {
         }
 
         model.getOpenFileSystems().addListener((ListChangeListener<? super OpenFileSystemModel>) c -> {
-            PlatformThread.runLaterBlocking(() -> {
+            PlatformThread.runLaterIfNeededBlocking(() -> {
                 while (c.next()) {
                     for (var r : c.getRemoved()) {
                         var t = map.remove(r);

File: app/src/main/java/io/xpipe/app/comp/source/GuiDsStoreSelectStep.java
Patch:
@@ -108,13 +108,13 @@ public boolean canContinue() {
                     return;
                 }
 
-                PlatformThread.runLaterBlocking(() -> {
+                PlatformThread.runLaterIfNeededBlocking(() -> {
                     baseSource.setValue(ds.asNeeded());
                     parent.next();
                 });
             } catch (Exception e) {
                 ErrorEvent.fromThrowable(e).build().handle();
-                PlatformThread.runLaterBlocking(() -> {
+                PlatformThread.runLaterIfNeededBlocking(() -> {
                     baseSource.setValue(null);
                 });
             }

File: app/src/main/java/io/xpipe/app/update/UpdateChangelogAlert.java
Patch:
@@ -15,7 +15,7 @@ public class UpdateChangelogAlert {
     public static void showIfNeeded() {
         var update = AppUpdater.get().getPerformedUpdate();
 
-        if (update != null && !update.getNewVersion().equals(AppProperties.get().getVersion())) {
+        if (update != null && !AppProperties.get().getVersion().equals(update.getNewVersion())) {
             ErrorEvent.fromMessage("Update did not succeed").handle();
             return;
         }

File: ext/base/src/main/java/io/xpipe/ext/base/actions/EditStoreAction.java
Patch:
@@ -33,7 +33,7 @@ public DataStoreCallSite<?> getDataStoreCallSite() {
 
             @Override
             public boolean isMajor() {
-                return true;
+                return false;
             }
 
             @Override

File: beacon/src/main/java/io/xpipe/beacon/BeaconClient.java
Patch:
@@ -314,8 +314,6 @@ public final CliClientInformation cli() {
     @EqualsAndHashCode(callSuper = false)
     public static class CliClientInformation extends ClientInformation {
 
-        int consoleWidth;
-
         @Override
         public String toDisplayString() {
             return "X-Pipe CLI";

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -127,7 +127,6 @@ private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue
 
     // External editor
     // ===============
-
     final ObjectProperty<ExternalEditorType> externalEditor =
             typed(new SimpleObjectProperty<>(), ExternalEditorType.class);
     private final SingleSelectionField<ExternalEditorType> externalEditorControl = Field.ofSingleSelectionType(

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -82,8 +82,8 @@ public void launch(Path file) throws Exception {
         @Override
         public void launch(Path file) throws Exception {
             var customCommand = AppPrefs.get().customEditorCommand().getValue();
-            if (customCommand == null || customCommand.trim().isEmpty()) {
-                return;
+            if (customCommand == null || customCommand.isBlank()) {
+                throw new IllegalStateException("No custom editor command specified");
             }
 
             var format = customCommand.contains("$file") ? customCommand : customCommand + " $file";

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -153,8 +153,7 @@ public CustomType() {
         public void launch(String name, String command) throws Exception {
             var custom = AppPrefs.get().customTerminalCommand().getValue();
             if (custom == null || custom.isBlank()) {
-                ErrorEvent.fromMessage("No custom terminal command specified").reportable(false).handle();
-                return;
+                throw new IllegalStateException("No custom terminal command specified");
             }
 
             var format = custom.contains("$cmd") ? custom : custom + " $cmd";

File: app/src/main/java/io/xpipe/app/update/AppUpdater.java
Patch:
@@ -218,7 +218,8 @@ public void executeUpdateAndClose() {
 
                 var performedUpdate = new PerformedUpdate(
                         downloadedUpdate.getValue().getVersion(),
-                        downloadedUpdate.getValue().getBody());
+                        downloadedUpdate.getValue().getBody(),
+                        downloadedUpdate.getValue().getVersion());
                 AppCache.update("performedUpdate", performedUpdate);
             }
         });
@@ -290,6 +291,7 @@ public synchronized AvailableRelease checkForUpdate(boolean forceCheck) {
     public static class PerformedUpdate {
         String name;
         String rawDescription;
+        String newVersion;
     }
 
     @Value

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -152,7 +152,8 @@ public CustomType() {
         @Override
         public void launch(String name, String command) throws Exception {
             var custom = AppPrefs.get().customTerminalCommand().getValue();
-            if (custom == null || custom.trim().isEmpty()) {
+            if (custom == null || custom.isBlank()) {
+                ErrorEvent.fromMessage("No custom terminal command specified").reportable(false).handle();
                 return;
             }
 

File: core/src/main/java/io/xpipe/core/util/Deobfuscator.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.xpipe.core.charsetter.NewLine;
 import io.xpipe.core.process.OsType;
-import io.xpipe.core.process.ShellDialects;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -104,7 +103,6 @@ private static boolean canDeobfuscate() throws Exception {
             return false;
         }
 
-        var t = ShellDialects.getPlatformDefault();
         return true;
     }
 }

File: app/src/main/java/io/xpipe/app/core/mode/BaseMode.java
Patch:
@@ -33,7 +33,7 @@ public void onSwitchFrom() {}
     @Override
     public void initialSetup() throws Exception {
         TrackEvent.info("mode", "Initializing base mode components ...");
-        AppExtensionManager.init();
+        AppExtensionManager.init(true);
         JacksonMapper.initModularized(AppExtensionManager.getInstance().getExtendedLayer());
         AppPrefs.init();
         AppCharsets.init();

File: app/src/main/java/io/xpipe/app/issue/TerminalErrorHandler.java
Patch:
@@ -58,7 +58,7 @@ private void handleGui(ErrorEvent event) {
 
         try {
             AppProperties.init();
-            AppExtensionManager.initBare();
+            AppExtensionManager.init(false);
             AppI18n.init();
             AppStyle.init();
             ErrorHandlerComp.showAndWait(event);
@@ -86,7 +86,7 @@ private static void handleSecondaryException(ErrorEvent event, Throwable t) {
 
     private static void handleProbableUpdate() {
         try {
-            AppUpdater.initBare();
+            AppUpdater.initFallback();
             var rel = AppUpdater.get().checkForUpdate(true);
             if (rel.isUpdate()) {
                 var update = AppWindowHelper.showBlockingAlert(alert -> {

File: app/src/main/java/io/xpipe/app/browser/OpenFileSystemModel.java
Patch:
@@ -167,7 +167,7 @@ public void switchSync(FileSystemStore fileSystem) throws Exception {
                             .getShellProcessControl()
                             .executeStringSimpleCommand(connectionFileSystem
                                     .getShellProcessControl()
-                                    .getShellType()
+                                    .getShellDialect()
                                     .getPrintWorkingDirectoryCommand())
                     : null;
             cdSync(current);
@@ -186,7 +186,7 @@ public void openTerminalAsync(String directory) {
                 if (store.getValue() instanceof ShellStore s) {
                     var connection = ((ConnectionFileSystem) fileSystem).getShellProcessControl();
                     var command = s.create()
-                            .initWith(List.of(connection.getShellType().getCdCommand(directory)))
+                            .initWith(List.of(connection.getShellDialect().getCdCommand(directory)))
                             .prepareTerminalOpen();
                     TerminalHelper.open("", command);
                 }

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -77,7 +77,7 @@ public PathApplication(String id, String executable) {
 
         public boolean isAvailable() {
             try (ShellProcessControl pc = ShellStore.local().create().start()) {
-                return pc.executeBooleanSimpleCommand(pc.getShellType().getWhichCommand(executable));
+                return pc.executeBooleanSimpleCommand(pc.getShellDialect().getWhichCommand(executable));
             } catch (Exception e) {
                 ErrorEvent.fromThrowable(e).omit().handle();
                 return false;

File: app/src/main/java/io/xpipe/app/prefs/ExternalTerminalType.java
Patch:
@@ -134,7 +134,7 @@ public MacOsTerminalType() {
         @Override
         public void launch(String name, String command) throws Exception {
             try (ShellProcessControl pc = ShellStore.local().create().start()) {
-                var suffix = command.equals(pc.getShellType().getNormalOpenCommand())
+                var suffix = command.equals(pc.getShellDialect().getNormalOpenCommand())
                         ? "\"\""
                         : "\"" + command.replaceAll("\"", "\\\\\"") + "\"";
                 var cmd = "osascript -e 'tell app \"" + "Terminal" + "\" to do script " + suffix + "'";
@@ -275,7 +275,7 @@ public void launch(String name, String command) throws Exception {
 
         public boolean isAvailable() {
             try (ShellProcessControl pc = ShellStore.local().create().start()) {
-                return pc.executeBooleanSimpleCommand(pc.getShellType().getWhichCommand(executable));
+                return pc.executeBooleanSimpleCommand(pc.getShellDialect().getWhichCommand(executable));
             } catch (Exception e) {
                 ErrorEvent.fromThrowable(e).omit().handle();
                 return false;

File: app/src/main/java/io/xpipe/app/update/AppInstaller.java
Patch:
@@ -39,7 +39,7 @@ public static void installFile(ShellProcessControl s, InstallerAssetType asset,
         } else {
             targetFile = FileNames.join(
                     s.getTemporaryDirectory(), localFile.getFileName().toString());
-            try (CommandProcessControl c = s.command(s.getShellType().getStreamFileWriteCommand(targetFile))
+            try (CommandProcessControl c = s.command(s.getShellDialect().getStreamFileWriteCommand(targetFile))
                     .start()) {
                 c.discardOut();
                 c.discardErr();
@@ -79,7 +79,7 @@ public static InstallerAssetType getSuitablePlatformAsset(ShellProcessControl p)
         }
 
         if (p.getOsType().equals(OsType.LINUX)) {
-            try (CommandProcessControl c = p.command(p.getShellType().getFileExistsCommand("/etc/debian_version"))
+            try (CommandProcessControl c = p.command(p.getShellDialect().getFileExistsCommand("/etc/debian_version"))
                     .start()) {
                 return c.discardAndCheckExit() ? new InstallerAssetType.Debian() : new InstallerAssetType.Rpm();
             }

File: app/src/main/java/io/xpipe/app/util/ApplicationHelper.java
Patch:
@@ -32,7 +32,7 @@ public static void executeLocalApplication(List<String> s) throws Exception {
 
     public static boolean isInPath(ShellProcessControl processControl, String executable) throws Exception {
         return processControl.executeBooleanSimpleCommand(
-                processControl.getShellType().getWhichCommand(executable));
+                processControl.getShellDialect().getWhichCommand(executable));
     }
 
     public static void checkSupport(ShellProcessControl processControl, String executable, String displayName)

File: app/src/main/java/io/xpipe/app/util/ProxyManagerProviderImpl.java
Patch:
@@ -41,7 +41,7 @@ public Optional<String> checkCompatibility(ShellProcessControl s) throws Excepti
         var defaultInstallationExecutable = FileNames.join(
                 XPipeInstallation.getDefaultInstallationBasePath(s, false),
                 XPipeInstallation.getDaemonExecutablePath(s.getOsType()));
-        if (!s.executeBooleanSimpleCommand(s.getShellType().getFileExistsCommand(defaultInstallationExecutable))) {
+        if (!s.executeBooleanSimpleCommand(s.getShellDialect().getFileExistsCommand(defaultInstallationExecutable))) {
             return Optional.of(AppI18n.get("noInstallationFound"));
         }
 

File: app/src/main/java/io/xpipe/app/util/ScriptHelper.java
Patch:
@@ -105,7 +105,7 @@ public static String unquote(String input) {
 
     public static String constructOpenWithInitScriptCommand(
             ShellProcessControl processControl, List<String> init, String toExecuteInShell) {
-        ShellDialect t = processControl.getShellType();
+        ShellDialect t = processControl.getShellDialect();
         if (init.size() == 0 && toExecuteInShell == null) {
             return t.getNormalOpenCommand();
         }
@@ -151,15 +151,15 @@ public static String constructOpenWithInitScriptCommand(
     @SneakyThrows
     public static String createExecScript(ShellProcessControl processControl, String content) {
         var fileName = "exec-" + getScriptId();
-        ShellDialect type = processControl.getShellType();
+        ShellDialect type = processControl.getShellDialect();
         var temp = processControl.getTemporaryDirectory();
         var file = FileNames.join(temp, fileName + "." + type.getScriptFileEnding());
         return createExecScript(processControl, file, content);
     }
 
     @SneakyThrows
     private static String createExecScript(ShellProcessControl processControl, String file, String content) {
-        ShellDialect type = processControl.getShellType();
+        ShellDialect type = processControl.getShellDialect();
         content = type.prepareScriptContent(content);
 
         TrackEvent.withTrace("proc", "Writing exec script")

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -41,7 +41,7 @@ public String getName() {
 
         @Override
         public String getTempDirectory(ShellProcessControl pc) throws Exception {
-            return pc.executeStringSimpleCommand(pc.getShellType().getPrintEnvironmentVariableCommand("TEMP"));
+            return pc.executeStringSimpleCommand(pc.getShellDialect().getPrintEnvironmentVariableCommand("TEMP"));
         }
 
         @Override
@@ -127,7 +127,7 @@ static class MacOs implements OsType {
 
         @Override
         public String getTempDirectory(ShellProcessControl pc) throws Exception {
-            return pc.executeStringSimpleCommand(pc.getShellType().getPrintVariableCommand("TMPDIR"));
+            return pc.executeStringSimpleCommand(pc.getShellDialect().getPrintVariableCommand("TMPDIR"));
         }
 
         @Override

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -18,7 +18,7 @@ public interface ProcessControl extends Closeable, AutoCloseable {
 
     boolean isRunning();
 
-    ShellDialect getShellType();
+    ShellDialect getShellDialect();
 
     void writeLine(String line) throws IOException;
 

File: core/src/main/java/io/xpipe/core/process/ShellProcessControl.java
Patch:
@@ -78,7 +78,7 @@ default ShellProcessControl subShell(@NonNull ShellDialect type) {
 
     default ShellProcessControl subShell(@NonNull List<String> command) {
         return subShell(
-                shellProcessControl -> shellProcessControl.getShellType().flatten(command), null);
+                shellProcessControl -> shellProcessControl.getShellDialect().flatten(command), null);
     }
 
     default ShellProcessControl subShell(@NonNull String command) {
@@ -107,7 +107,7 @@ default CommandProcessControl command(String command) {
     }
 
     default CommandProcessControl command(List<String> command) {
-        return command(shellProcessControl -> shellProcessControl.getShellType().flatten(command));
+        return command(shellProcessControl -> shellProcessControl.getShellDialect().flatten(command));
     }
 
     void exitAndWait() throws IOException;

File: core/src/main/java/io/xpipe/core/store/ShellStore.java
Patch:
@@ -37,7 +37,7 @@ default String prepareLaunchCommand() throws Exception {
     default ShellProcessControl create() {
         var pc = createControl();
         pc.onInit(processControl -> {
-            setState("type", processControl.getShellType());
+            setState("type", processControl.getShellDialect());
             setState("os", processControl.getOsType());
             setState("charset", processControl.getCharset());
         });
@@ -60,7 +60,7 @@ default Charset getCharset() {
 
     public default ShellDialect determineType() throws Exception {
         try (var pc = create().start()) {
-            return pc.getShellType();
+            return pc.getShellDialect();
         }
     }
 

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -169,7 +169,7 @@ public static String getInstallationExecutable(ShellProcessControl p, String ins
 
     public static String getDataBasePath(ShellProcessControl p) throws Exception {
         if (p.getOsType().equals(OsType.WINDOWS)) {
-            var base = p.executeStringSimpleCommand(p.getShellType().getPrintVariableCommand("userprofile"));
+            var base = p.executeStringSimpleCommand(p.getShellDialect().getPrintVariableCommand("userprofile"));
             return FileNames.join(base, ".xpipe");
         } else {
             return FileNames.join("~", ".xpipe");
@@ -221,15 +221,15 @@ public static String getLocalDefaultInstallationBasePath(boolean acceptCustomHom
     public static String getDefaultInstallationBasePath(ShellProcessControl p, boolean acceptPortable)
             throws Exception {
         if (acceptPortable) {
-            var customHome = p.executeStringSimpleCommand(p.getShellType().getPrintVariableCommand("XPIPE_HOME"));
+            var customHome = p.executeStringSimpleCommand(p.getShellDialect().getPrintVariableCommand("XPIPE_HOME"));
             if (!customHome.isEmpty()) {
                 return customHome;
             }
         }
 
         String path = null;
         if (p.getOsType().equals(OsType.WINDOWS)) {
-            var base = p.executeStringSimpleCommand(p.getShellType().getPrintVariableCommand("LOCALAPPDATA"));
+            var base = p.executeStringSimpleCommand(p.getShellDialect().getPrintVariableCommand("LOCALAPPDATA"));
             path = FileNames.join(base, "X-Pipe");
         } else if (p.getOsType().equals(OsType.LINUX)) {
             path = "/opt/xpipe";

File: core/src/main/java/io/xpipe/core/util/XPipeTempDirectory.java
Patch:
@@ -23,9 +23,9 @@ public static String get(ShellProcessControl proc) throws Exception {
         var base = proc.getOsType().getTempDirectory(proc);
         var dir = FileNames.join(base, "xpipe");
 
-        if (!proc.executeBooleanSimpleCommand(proc.getShellType().getFileExistsCommand(dir))) {
+        if (!proc.executeBooleanSimpleCommand(proc.getShellDialect().getFileExistsCommand(dir))) {
             proc.executeSimpleCommand(
-                    proc.getShellType().flatten(proc.getShellType().getMkdirsCommand(dir)),
+                    proc.getShellDialect().flatten(proc.getShellDialect().getMkdirsCommand(dir)),
                     "Unable to access or create temporary directory " + dir);
 
             if (proc.getOsType().equals(OsType.LINUX) || proc.getOsType().equals(OsType.MACOS)) {
@@ -38,7 +38,7 @@ public static String get(ShellProcessControl proc) throws Exception {
 
     public static void clear(ShellProcessControl proc) throws Exception {
         var dir = get(proc);
-        if (!proc.executeBooleanSimpleCommand(proc.getShellType().getFileDeleteCommand(dir))) {
+        if (!proc.executeBooleanSimpleCommand(proc.getShellDialect().getFileDeleteCommand(dir))) {
             throw new IOException("Unable to delete temporary directory " + dir);
         }
     }

File: app/src/main/java/io/xpipe/app/comp/source/store/DsStoreProviderChoiceComp.java
Patch:
@@ -55,8 +55,6 @@ private Region createGraphic(DataStoreProvider provider) {
     @Override
     public CompStructure<ComboBox<Node>> createBase() {
         var comboBox = new CustomComboBoxBuilder<>(provider, this::createGraphic, createDefaultNode(), v -> true);
-        comboBox.add(null);
-        comboBox.addSeparator();
         getProviders().stream()
                 .filter(p -> AppPrefs.get().developerShowHiddenProviders().get() || p.shouldShow())
                 .forEach(comboBox::add);

File: app/src/main/java/io/xpipe/app/comp/storage/store/StoreStorageEmptyIntroComp.java
Patch:
@@ -80,6 +80,7 @@ public Region createSimple() {
 
         var sp = new StackPane(v);
         sp.setAlignment(Pos.CENTER);
+        sp.setPickOnBounds(false);
         return sp;
     }
 }

File: app/src/main/java/io/xpipe/app/prefs/AppPrefs.java
Patch:
@@ -30,7 +30,7 @@ public class AppPrefs {
     private static ObservableBooleanValue bindDeveloperTrue(ObservableBooleanValue o) {
         return Bindings.createBooleanBinding(
                 () -> {
-                    return AppPrefs.get().developerMode().getValue() || o.get();
+                    return AppPrefs.get().developerMode().getValue() && o.get();
                 },
                 o,
                 AppPrefs.get().developerMode());
@@ -39,7 +39,7 @@ private static ObservableBooleanValue bindDeveloperTrue(ObservableBooleanValue o
     private static ObservableBooleanValue bindDeveloperFalse(ObservableBooleanValue o) {
         return Bindings.createBooleanBinding(
                 () -> {
-                    return !AppPrefs.get().developerMode().getValue() || o.get();
+                    return !AppPrefs.get().developerMode().getValue() && o.get();
                 },
                 o,
                 AppPrefs.get().developerMode());

File: ext/base/src/main/java/io/xpipe/ext/base/LocalStoreProvider.java
Patch:
@@ -45,9 +45,10 @@ public void storageInit() throws Exception {
         e.setConfiguration(StorageElement.Configuration.builder()
                 .deletable(false)
                 .editable(false)
-                .refreshable(false)
+                .refreshable(true)
                 .renameable(false)
                 .build());
+        e.refresh(true);
     }
 
     @Override

File: ext/base/src/main/java/module-info.java
Patch:
@@ -23,6 +23,7 @@
 
     provides ActionProvider with
             AddStoreAction,
+            EditStoreAction,
             StreamExportAction,
             ShareStoreAction,
             FileBrowseAction,

File: app/src/main/java/io/xpipe/app/comp/AppLayoutComp.java
Patch:
@@ -51,8 +51,8 @@ private List<SideMenuBarComp.Entry> createEntryList() {
                 // new SideMenuBarComp.Entry(I18n.observable("account"), "mdi2a-account", new StorageLayoutComp()),
                 new SideMenuBarComp.Entry(I18n.observable("about"), "mdi2p-package-variant", new AboutTabComp())));
         if (AppProperties.get().isDeveloperMode()) {
-            // l.add(new SideMenuBarComp.Entry(I18n.observable("developer"), "mdi2b-book-open-variant", new
-            // DeveloperTabComp()));
+             l.add(new SideMenuBarComp.Entry(I18n.observable("developer"), "mdi2b-book-open-variant", new
+             DeveloperTabComp()));
         }
         //        l.add(new SideMenuBarComp.Entry(I18n.observable("abc"), "mdi2b-book-open-variant", Comp.of(() -> {
         //            var fi = new FontIcon("mdsal-dvr");

File: app/src/main/java/io/xpipe/app/core/AppExtensionManager.java
Patch:
@@ -58,7 +58,7 @@ public ModuleLayer loadBundledExtension(String name) {
                         .resolve("ext")
                         .resolve(name)
                         .resolve("build")
-                        .resolve("libs");
+                        .resolve("libs_dev");
         var layer = loadDirectory(userDir);
         return layer.size() > 0 ? layer.get(0) : null;
     }

File: core/src/main/java/io/xpipe/core/process/ProcessControlProvider.java
Patch:
@@ -47,7 +47,7 @@ public static CommandProcessControl createCommand(
                         localProcessControlProvider.command(parent, command, terminalCommand))
                 .filter(Objects::nonNull)
                 .findFirst()
-                .orElseThrow();
+                .orElse(null);
     }
 
     public static ShellProcessControl createSsh(Object sshStore) {

File: app/src/main/java/io/xpipe/app/util/TerminalProvider.java
Patch:
@@ -13,7 +13,7 @@ public static class Loader implements ModuleLayerLoader {
 
         @Override
         public void init(ModuleLayer layer) {
-            ServiceLoader.load(layer, TerminalProvider.class).findFirst().orElseThrow();
+            INSTANCE = ServiceLoader.load(layer, TerminalProvider.class).findFirst().orElseThrow();
         }
 
         @Override

File: app/src/main/java/module-info.java
Patch:
@@ -7,12 +7,14 @@
 import io.xpipe.app.issue.EventHandlerImpl;
 import io.xpipe.app.storage.DataStateProviderImpl;
 import io.xpipe.app.util.ProxyManagerProviderImpl;
+import io.xpipe.app.util.TerminalProvider;
 import io.xpipe.app.util.XPipeDaemonProvider;
 import io.xpipe.core.util.DataStateProvider;
 import io.xpipe.core.util.ProxyManagerProvider;
 import io.xpipe.extension.Cache;
 import io.xpipe.extension.I18n;
 import io.xpipe.extension.event.EventHandler;
+import io.xpipe.extension.util.ModuleLayerLoader;
 import io.xpipe.extension.util.XPipeDaemon;
 import org.slf4j.spi.SLF4JServiceProvider;
 
@@ -99,6 +101,7 @@
     uses MessageExchangeImpl;
     uses io.xpipe.app.util.TerminalProvider;
 
+    provides ModuleLayerLoader with TerminalProvider.Loader;
     provides DataStateProvider with
             DataStateProviderImpl;
     provides ProxyManagerProvider with

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -41,7 +41,7 @@ public String getName() {
 
         @Override
         public String getTempDirectory(ShellProcessControl pc) throws Exception {
-            return pc.executeStringSimpleCommand(ShellTypes.CMD, ShellTypes.CMD.getPrintVariableCommand("TEMP"));
+            return pc.executeStringSimpleCommand(pc.getShellType().getPrintEnvironmentVariableCommand("TEMP"));
         }
 
         @Override
@@ -52,7 +52,7 @@ public String normalizeFileName(String file) {
         @Override
         public Map<String, String> getProperties(ShellProcessControl pc) throws Exception {
             try (CommandProcessControl c =
-                         pc.subShell(ShellTypes.CMD).command("systeminfo").start()) {
+                         pc.command("systeminfo").start()) {
                 var text = c.readOrThrow();
                 return PropertiesFormatsParser.parse(text, ":");
             }

File: ext/base/src/main/java/module-info.java
Patch:
@@ -2,7 +2,6 @@
 import io.xpipe.ext.base.actions.*;
 import io.xpipe.ext.base.apps.*;
 import io.xpipe.extension.DataSourceProvider;
-import io.xpipe.extension.DataStoreActionProvider;
 import io.xpipe.extension.DataStoreProvider;
 import io.xpipe.extension.DataSourceTarget;
 import io.xpipe.extension.util.ActionProvider;
@@ -22,8 +21,7 @@
     requires static net.synedra.validatorfx;
     requires static io.xpipe.app;
 
-    provides ActionProvider with AddStoreAction;
-    provides DataStoreActionProvider with
+    provides ActionProvider with AddStoreAction,
             StreamExportAction,
             ShareStoreAction,
             FileBrowseAction,

File: extension/src/main/java/module-info.java
Patch:
@@ -1,6 +1,5 @@
 import io.xpipe.core.util.ProxyFunction;
 import io.xpipe.extension.DataSourceProvider;
-import io.xpipe.extension.DataStoreActionProvider;
 import io.xpipe.extension.DataSourceTarget;
 import io.xpipe.extension.prefs.PrefsProvider;
 import io.xpipe.extension.util.ActionProvider;
@@ -45,7 +44,6 @@
 
     uses DataSourceProvider;
     uses DataSourceTarget;
-    uses DataStoreActionProvider;
     uses io.xpipe.extension.I18n;
     uses io.xpipe.extension.event.EventHandler;
     uses io.xpipe.extension.prefs.PrefsProvider;

File: ext/base/src/main/java/io/xpipe/ext/base/actions/FileEditAction.java
Patch:
@@ -36,7 +36,7 @@ public void execute(FileStore store) throws Exception {
             EditorState.get().openInEditor(store.getFile());
         } else {
             EditorState.get()
-                    .startEditing(store.getFileName(), store, () -> store.openInput(), () -> store.openOutput());
+                    .startEditing(store.getFileName(), store.getFileExtension(), store, () -> store.openInput(), () -> store.openOutput());
         }
     }
 }

File: extension/src/main/java/io/xpipe/extension/util/DesktopShortcuts.java
Patch:
@@ -56,6 +56,8 @@ private static void createMacOSShortcut(String target, String name) throws Excep
         try (var pc = ShellStore.local().create().start()) {
             pc.executeSimpleCommand(
                     pc.getShellType().flatten(pc.getShellType().getMkdirsCommand(base + "/Contents/MacOS")));
+            pc.executeSimpleCommand(
+                    pc.getShellType().flatten(pc.getShellType().getMkdirsCommand(base + "/Contents/Resources")));
 
             var executable = base + "/Contents/MacOS/" + name;
             pc.executeSimpleCommand(pc.getShellType().getTextFileWriteCommand(content, executable));

File: app/src/main/java/io/xpipe/app/core/AppStyle.java
Patch:
@@ -146,8 +146,8 @@ public static void addStylesheets(Scene scene) {
     @AllArgsConstructor
     @Getter
     public enum Theme implements PrefsChoiceValue {
-        LIGHT("light"),
-        DARK("dark");
+        LIGHT("light");
+        // DARK("dark");
 
         private final String id;
 

File: app/src/main/java/io/xpipe/app/prefs/SupportedLocale.java
Patch:
@@ -9,8 +9,8 @@
 @AllArgsConstructor
 @Getter
 public enum SupportedLocale implements PrefsChoiceValue {
-    ENGLISH(Locale.ENGLISH, "english"),
-    GERMAN(Locale.GERMAN, "german");
+    ENGLISH(Locale.ENGLISH, "english");
+    //GERMAN(Locale.GERMAN, "german");
 
     private final Locale locale;
     private final String id;

File: app/src/main/java/io/xpipe/app/launcher/LauncherInput.java
Patch:
@@ -5,6 +5,7 @@
 import io.xpipe.core.impl.FileStore;
 import io.xpipe.extension.DataSourceProvider;
 import io.xpipe.extension.event.ErrorEvent;
+import io.xpipe.extension.event.TrackEvent;
 import io.xpipe.extension.util.ActionProvider;
 import lombok.Getter;
 import lombok.Value;
@@ -20,6 +21,8 @@
 public abstract class LauncherInput {
 
     public static void handle(List<String> arguments) {
+        TrackEvent.withDebug("launcher", "Handling arguments").elements(arguments).handle();
+
         var all = new ArrayList<ActionProvider.Action>();
         arguments.forEach(s -> {
             try {

File: extension/src/main/java/io/xpipe/extension/util/DesktopShortcuts.java
Patch:
@@ -38,7 +38,7 @@ private static void createLinuxShortcut(String target, String name) throws Excep
                         Categories=Utility;Development;Office;
                         """,
                 name, target, icon.toString());
-        var file = Path.of("~/Desktop/" + name + ".desktop").toRealPath();
+        var file = Path.of(System.getProperty("user.home") + "/Desktop/" + name + ".desktop");
         Files.writeString(file, content);
         file.toFile().setExecutable(true);
     }
@@ -51,7 +51,7 @@ private static void createMacOSShortcut(String target, String name) throws Excep
                         open %s
                         """,
                 target);
-        var file = Path.of("~/Desktop/" + name + ".command").toRealPath();
+        var file = Path.of(System.getProperty("user.home") + "/Desktop/" + name + ".command").toRealPath();
         Files.writeString(file, content);
         file.toFile().setExecutable(true);
 

File: ext/jdbcx/src/main/java/module-info.java
Patch:
@@ -0,0 +1 @@
+module io.xpipe.ext.jdbcx {}

File: ext/office/src/main/java/module-info.java
Patch:
@@ -0,0 +1 @@
+module io.xpipe.ext.office {}

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -40,7 +40,7 @@ protected Optional<Path> getApplicationPath() {
             try (ShellProcessControl pc = ShellStore.local().create().start()) {
                 try (var c = pc.command(String.format(
                         "/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister " +
-                                "-dump | grep -o \"/.*%s.app\" | grep -v -E \"Caches|TimeMachine|Temporary|/Volumes/%s\" | uniq)'",
+                                "-dump | grep -o \"/.*%s.app\" | grep -v -E \"Caches|TimeMachine|Temporary|/Volumes/%s\" | uniq",
                                 applicationName, applicationName))
                         .start()) {
                     var path = c.readOnlyStdout();

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -79,7 +79,7 @@ public void launch(Path file) throws Exception {
 
     public static final ExternalEditorType SUBLIME_MACOS = new MacOsEditor("app.sublime", "Sublime Text");
 
-    public static final ExternalEditorType VSCODE_MACOS = new MacOsEditor("app.vscode", "VSCode");
+    public static final ExternalEditorType VSCODE_MACOS = new MacOsEditor("app.vscode", "Visual Studio Code");
 
     public static final ExternalEditorType CUSTOM = new ExternalEditorType() {
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalApplicationType.java
Patch:
@@ -40,7 +40,7 @@ protected Optional<Path> getApplicationPath() {
             try (ShellProcessControl pc = ShellStore.local().create().start()) {
                 try (var c = pc.command(String.format("osascript -e 'POSIX path of (path to application \"%s\")'", applicationName)).start()) {
                     var path = c.readOnlyStdout();
-                    if (!c.waitFor()) {
+                    if (c.getExitCode() != 0) {
                         return Optional.empty();
                     }
                     return Optional.of(Path.of(path));

File: app/src/main/java/io/xpipe/app/grid/AppInstaller.java
Patch:
@@ -160,7 +160,7 @@ public void installLocal(String file) throws Exception {
                                 "/qb"));
                 var start = ShellTypes.getPlatformDefault().flatten(List.of("start", "\"\"", exec));
                 var command = installer + "\r\n" + start;
-                var script = ScriptHelper.createExecScript(shellProcessControl, command, true);
+                var script = ScriptHelper.createExecScript(shellProcessControl, command);
                 shellProcessControl.executeSimpleCommand("start /min " + script);
             }
         }

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -71,7 +71,7 @@ public MacOsEditor(String id, String applicationName) {
 
         @Override
         public void launch(Path file) throws Exception {
-            ApplicationHelper.executeLocalApplication(List.of("open", "-a", applicationName, file.toString()));
+            ApplicationHelper.executeLocalApplication(List.of("open", "-a", getApplicationPath().orElseThrow().toString(), file.toString()));
         }
     }
 

File: app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java
Patch:
@@ -73,14 +73,14 @@ protected Optional<Path> determinePath() {
     public static final ExternalEditorType TEXT_EDIT = new MacOsFullPathType("app.textEdit") {
         @Override
         protected Path determinePath() {
-            return Path.of("/Applications/TextEdit.app");
+            return Path.of("/System/Applications/TextEdit.app");
         }
     };
 
     public static final ExternalEditorType NOTEPADPP_MACOS = new MacOsFullPathType("app.notepad++") {
         @Override
         protected Path determinePath() {
-            return Path.of("/Applications/TextEdit.app");
+            return Path.of("/Applications/Notepad++.app");
         }
     };
 

File: app/src/main/java/io/xpipe/app/editor/EditorState.java
Patch:
@@ -181,7 +181,7 @@ public void startEditing(
 
     public void openInEditor(String file) {
         var editor = AppPrefs.get().externalEditor().getValue();
-        if (editor == null || !editor.isSupported()) {
+        if (editor == null || !editor.isSelectable()) {
             return;
         }
 

File: app/src/main/java/io/xpipe/app/prefs/CloseBehaviour.java
Patch:
@@ -32,7 +32,7 @@ public enum CloseBehaviour implements PrefsChoiceValue {
         this.exit = exit;
     }
 
-    public boolean isSupported() {
+    public boolean isSelectable() {
         return true;
     }
 }

File: app/src/main/java/io/xpipe/app/prefs/ExternalStartupBehaviour.java
Patch:
@@ -15,7 +15,7 @@ public enum ExternalStartupBehaviour implements PrefsChoiceValue {
     private final String id;
     private final OperationMode mode;
 
-    public boolean isSupported() {
+    public boolean isSelectable() {
         return true;
     }
 }

File: core/src/main/java/io/xpipe/core/process/ShellType.java
Patch:
@@ -78,6 +78,8 @@ default String getPrintEnvironmentVariableCommand(String name) {
 
     List<String> executeCommandListWithShell(String cmd);
 
+    List<String> executeCommandListWithShell(List<String> cmd);
+
     List<String> getMkdirsCommand(String dirs);
 
     String getFileReadCommand(String file);

File: extension/src/main/java/io/xpipe/extension/prefs/PrefsProvider.java
Patch:
@@ -34,4 +34,6 @@ protected <T extends Field<?>> T editable(T o, ObservableBooleanValue v) {
     }
 
     public abstract void addPrefs(PrefsHandler handler);
+
+    public abstract void init();
 }

File: extension/src/main/java/io/xpipe/extension/fxcomps/impl/IconButtonComp.java
Patch:
@@ -44,6 +44,7 @@ public CompStructure<JFXButton> createBase() {
         fi.iconColorProperty().bind(button.textFillProperty());
         button.setGraphic(fi);
         button.setOnAction(e -> {
+            e.consume();
             if (listener != null) {
                 listener.run();
             }

File: app/src/main/java/io/xpipe/app/comp/AppLayoutComp.java
Patch:
@@ -80,8 +80,8 @@ public CompStructure<BorderPane> createBase() {
             pane.setCenter(r);
         });
         pane.setCenter(selected.getValue().comp().createRegion());
-        pane.setPrefWidth(1200);
-        pane.setPrefHeight(700);
+        pane.setPrefWidth(1280);
+        pane.setPrefHeight(720);
         AppFont.normal(pane);
         return new SimpleCompStructure<>(pane);
     }

File: app/src/main/java/io/xpipe/app/storage/DataSourceCollection.java
Patch:
@@ -60,6 +60,7 @@ public static DataSourceCollection fromDirectory(DataStorage storage, Path dir)
         var json = mapper.readTree(dir.resolve("collection.json").toFile());
         var uuid = UUID.fromString(json.required("uuid").textValue());
         var name = json.required("name").textValue();
+        Objects.requireNonNull(name);
         var lastModified = Instant.parse(json.required("lastModified").textValue());
 
         JavaType listType = mapper.getTypeFactory().constructCollectionType(ArrayList.class, UUID.class);

File: app/src/main/java/io/xpipe/app/storage/DataStorage.java
Patch:
@@ -82,7 +82,7 @@ public static DataStorage get() {
     }
 
     public DataSourceCollection getInternalCollection() {
-        var found = sourceCollections.stream().filter(o -> o.getName().equals("Internal")).findAny();
+        var found = sourceCollections.stream().filter(o -> o.getName() != null && o.getName().equals("Internal")).findAny();
         if (found.isPresent()) {
             return found.get();
         }

File: api/src/test/java/io/xpipe/api/test/ApiTest.java
Patch:
@@ -1,14 +1,15 @@
 package io.xpipe.api.test;
 
 import io.xpipe.beacon.BeaconDaemonController;
+import io.xpipe.core.util.XPipeDaemonMode;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 
 public class ApiTest {
 
     @BeforeAll
     public static void setup() throws Exception {
-        BeaconDaemonController.start();
+        BeaconDaemonController.start(XPipeDaemonMode.TRAY);
     }
 
     @AfterAll

File: beacon/src/main/java/io/xpipe/beacon/BeaconServer.java
Patch:
@@ -46,7 +46,7 @@ public static Process start(String installationBase, XPipeDaemonMode mode) throw
             command = XPipeInstallation.createExternalAsyncLaunchCommand(installationBase, mode, BeaconConfig.getDaemonArguments());
         } else {
             command = XPipeInstallation.createExternalLaunchCommand(
-                    getDaemonDebugExecutable(installationBase), BeaconConfig.getDaemonArguments());
+                    getDaemonDebugExecutable(installationBase), BeaconConfig.getDaemonArguments(), mode);
         }
 
         var fullCommand = ShellTypes.getPlatformDefault().executeCommandListWithShell(command);

File: core/src/main/java/io/xpipe/core/data/node/ArrayNode.java
Patch:
@@ -57,6 +57,7 @@ protected final String getName() {
         return "array node";
     }
 
+
     @Override
     public final String toString(int indent) {
         var content = getNodes().stream().map(n -> n.toString(indent)).collect(Collectors.joining(", "));

File: core/src/main/java/io/xpipe/core/impl/LocalProcessControlProvider.java
Patch:
@@ -20,10 +20,10 @@ public static void init(ModuleLayer layer) {
         INSTANCE = layer != null
                 ? ServiceLoader.load(layer, LocalProcessControlProvider.class)
                 .findFirst()
-                .orElseThrow()
+                .orElse(null)
                 : ServiceLoader.load(LocalProcessControlProvider.class)
                 .findFirst()
-                .orElseThrow();
+                .orElse(null);
     }
 
     public static ShellProcessControl create() {

File: core/src/main/java/io/xpipe/core/util/JacksonizedValue.java
Patch:
@@ -15,7 +15,7 @@ public JacksonizedValue() {
     }
 
     @SneakyThrows
-    public final String toString() {
+    public String toString() {
         var tree = JacksonMapper.getDefault().valueToTree(this);
         return tree.toPrettyString();
     }

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -23,9 +23,9 @@ public static String createExternalAsyncLaunchCommand(String installationBase, X
         return "\"" + FileNames.join(installationBase, XPipeInstallation.getDaemonExecutablePath(OsType.getLocal())) + "\" --mode " + mode.getDisplayName() + suffix;
     }
 
-    public static String createExternalLaunchCommand(String command, String arguments) {
+    public static String createExternalLaunchCommand(String command, String arguments, XPipeDaemonMode mode) {
         var suffix = (arguments != null ? " " + arguments : "");
-        return "\"" + command + "\" --external" + suffix;
+        return "\"" + command + "\" --mode " + mode.getDisplayName() + suffix;
     }
 
     @SneakyThrows

File: extension/src/main/java/module-info.java
Patch:
@@ -17,6 +17,7 @@
     requires transitive io.xpipe.core;
     requires io.xpipe.beacon;
     requires io.xpipe.api;
+    requires static org.hamcrest;
     requires com.fasterxml.jackson.databind;
     requires static com.sun.jna;
     requires static com.sun.jna.platform;

File: extension/src/main/java/io/xpipe/extension/event/TrackEvent.java
Patch:
@@ -106,7 +106,7 @@ public void handle() {
 
     @Override
     public String toString() {
-        var s = new StringBuilder(message);
+        var s = new StringBuilder(message != null ? message : "");
         if (tags.size() > 0) {
             s.append(" {\n");
             for (var e : tags.entrySet()) {

File: core/src/main/java/io/xpipe/core/process/ShellType.java
Patch:
@@ -89,6 +89,8 @@ default String getPrintVariableCommand(String name) {
 
     String createFileExistsCommand(String file);
 
+    String createFileTouchCommand(String file);
+
     String createWhichCommand(String executable);
 
     Charset determineCharset(ShellProcessControl control) throws Exception;

File: extension/src/main/java/io/xpipe/extension/I18n.java
Patch:
@@ -27,4 +27,6 @@ public static String get(String s, Object... vars) {
     String getKey(String s);
 
     String getLocalised(String s, Object... vars);
+
+    boolean isLoaded();
 }

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -16,7 +16,7 @@ public static String createExternalAsyncLaunchCommand(String installationBase, S
         if (OsType.getLocal().equals(OsType.LINUX)) {
             return "nohup \"" + installationBase + "/app/bin/xpiped\" --external" + suffix + " & disown";
         } else if (OsType.getLocal().equals(OsType.MAC)) {
-            return "nohup \"" + installationBase + "/Contents/MacOS/xpiped\" --external" + suffix + " & disown";
+            return "open \"" + installationBase + "\" --args --external" + suffix;
         }
 
         return "\"" + FileNames.join(installationBase, XPipeInstallation.getDaemonExecutablePath(OsType.getLocal())) + "\" --external" + suffix;

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -66,7 +66,7 @@ public static String getDataBasePath(ShellProcessControl p) throws Exception {
 
     public static String getLocalDefaultInstallationBasePath(boolean acceptCustomHome) {
         var customHome = System.getenv("XPIPE_HOME");
-        if (!customHome.isEmpty() && acceptCustomHome) {
+        if (customHome != null && !customHome.isEmpty() && acceptCustomHome) {
             return customHome;
         }
 

File: api/src/main/java/io/xpipe/api/connector/XPipeApiConnection.java
Patch:
@@ -131,7 +131,7 @@ protected void constructSocket() {
     }
 
     private void start() throws Exception {
-        var installation = XPipeInstallation.getLocalDefaultInstallationBasePath();
+        var installation = XPipeInstallation.getLocalDefaultInstallationBasePath(true);
         BeaconServer.start(installation);
     }
 

File: beacon/src/main/java/io/xpipe/beacon/BeaconDaemonController.java
Patch:
@@ -19,7 +19,7 @@ public static void start() throws Exception {
         if ((process = BeaconServer.tryStartCustom()) != null) {
             custom = true;
         } else {
-            var defaultBase = XPipeInstallation.getLocalDefaultInstallationBasePath();
+            var defaultBase = XPipeInstallation.getLocalDefaultInstallationBasePath(true);
             process = BeaconServer.start(defaultBase);
         }
 

File: core/src/main/java/io/xpipe/core/util/Deobfuscator.java
Patch:
@@ -70,7 +70,7 @@ public static String deobfuscateToString(Throwable t) {
                             file.toString())
                     .redirectErrorStream(true);
             var active = proc.start();
-            var out = new String(active.getInputStream().readAllBytes()).replaceAll("\\r\\n", NewLine.LF.getNewLineString());
+            var out = new String(active.getInputStream().readAllBytes()).replaceAll("\r\n", NewLine.LF.getNewLineString());
             var code = active.waitFor();
             if (code == 0) {
                 return out;

File: core/src/main/java/io/xpipe/core/util/XPipeTempDirectory.java
Patch:
@@ -23,7 +23,7 @@ public static String get(ShellProcessControl proc) throws Exception {
             throw new IOException("Unable to access or create temporary directory " + dir);
         }
 
-        if (proc.getOsType().equals(OsType.LINUX)) {
+        if (proc.getOsType().equals(OsType.LINUX) || proc.getOsType().equals(OsType.MAC)) {
             proc.executeSimpleCommand("(chmod -f 777 \"" + dir + "\" || true)");
 
         }

File: beacon/src/main/java/io/xpipe/beacon/exchange/cli/RemoveStoreExchange.java
Patch:
@@ -21,8 +21,6 @@ public String getId() {
     public static class Request implements RequestMessage {
         @NonNull
         String storeName;
-
-        boolean removeUnderlying;
     }
 
     @Jacksonized

File: beacon/src/main/java/io/xpipe/beacon/exchange/cli/StoreProviderListExchange.java
Patch:
@@ -10,6 +10,7 @@
 import lombok.extern.jackson.Jacksonized;
 
 import java.util.List;
+import java.util.Map;
 
 public class StoreProviderListExchange implements MessageExchange {
 
@@ -28,6 +29,6 @@ public static class Request implements RequestMessage {}
     @Value
     public static class Response implements ResponseMessage {
         @NonNull
-        List<ProviderEntry> entries;
+        Map<String, List<ProviderEntry>> entries;
     }
 }

File: core/src/main/java/io/xpipe/core/impl/FileStore.java
Patch:
@@ -64,6 +64,9 @@ public void checkComplete() throws Exception {
         if (file == null) {
             throw new IllegalStateException("File is missing");
         }
+        if (!FileNames.isAbsolute(file)) {
+            throw new IllegalStateException("File path is not absolute");
+        }
     }
 
     @Override

File: beacon/src/main/java/module-info.java
Patch:
@@ -62,7 +62,6 @@
             ListStoresExchange,
             DialogExchange,
             QueryDataSourceExchange,
-            StoreStreamExchange,
             EditExchange,
             RemoveEntryExchange,
             RemoveCollectionExchange,

File: core/src/main/java/io/xpipe/core/store/DataStore.java
Patch:
@@ -5,6 +5,7 @@
 import io.xpipe.core.impl.StdoutDataStore;
 import io.xpipe.core.source.DataSource;
 
+import java.io.IOException;
 import java.time.Instant;
 import java.util.Optional;
 
@@ -101,7 +102,7 @@ default Optional<String> determineDefaultName() {
     /**
      * Determines the last modified of this data store if this data store supports it.
      */
-    default Optional<Instant> determineLastModified() {
+    default Optional<Instant> determineLastModified() throws IOException {
         return Optional.empty();
     }
 }

File: api/src/main/java/io/xpipe/api/DataStores.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.api;
 
 import io.xpipe.api.connector.XPipeApiConnection;
-import io.xpipe.api.util.QuietDialogHandler;
+import io.xpipe.beacon.util.QuietDialogHandler;
 import io.xpipe.beacon.exchange.cli.StoreAddExchange;
 import io.xpipe.core.store.DataStore;
 

File: core/src/main/java/io/xpipe/core/charsetter/NewLine.java
Patch:
@@ -25,7 +25,7 @@ public static NewLine platform() {
                 .orElseThrow();
     }
 
-    public static NewLine id(String id) {
+    public static NewLine byId(String id) {
         return Arrays.stream(values())
                 .filter(n -> n.getId().equalsIgnoreCase(id))
                 .findFirst()

File: core/src/main/java/io/xpipe/core/dialog/QueryConverter.java
Patch:
@@ -14,7 +14,7 @@ public abstract class QueryConverter<T> {
     public static final QueryConverter<NewLine> NEW_LINE = new QueryConverter<NewLine>() {
         @Override
         protected NewLine fromString(String s) {
-            return NewLine.id(s);
+            return NewLine.byId(s);
         }
 
         @Override

File: core/src/main/java/module-info.java
Patch:
@@ -27,6 +27,7 @@
     uses LocalProcessControlProvider;
     uses io.xpipe.core.util.ProxyProvider;
     uses io.xpipe.core.util.ProxyManagerProvider;
+    uses io.xpipe.core.util.DataStateProvider;
 
     provides WriteMode with WriteMode.Replace, WriteMode.Append, WriteMode.Prepend;
     provides com.fasterxml.jackson.databind.Module with

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -13,10 +13,10 @@ public class XPipeInstallation {
     public static String createExternalAsyncLaunchCommand(String installationBase, String arguments) {
         var suffix = (arguments != null ? arguments : "");
         if (OsType.getLocal().equals(OsType.LINUX)) {
-            return "nohup \"" + installationBase + "/app/bin/xpiped\" --external & disown" + suffix;
+            return "nohup \"" + installationBase + "/app/bin/xpiped\" --external " + suffix + " & disown";
         }
 
-        return FileNames.join(installationBase, XPipeInstallation.getDaemonExecutablePath(OsType.getLocal())) + suffix;
+        return "\"" + FileNames.join(installationBase, XPipeInstallation.getDaemonExecutablePath(OsType.getLocal())) + "\" " + suffix;
     }
 
     public static String createExternalLaunchCommand(String command, String arguments) {

File: api/src/main/java/io/xpipe/api/connector/XPipeApiConnection.java
Patch:
@@ -131,7 +131,7 @@ protected void constructSocket() {
     }
 
     private void start() throws Exception {
-        var installation = XPipeInstallation.getDefaultInstallationBasePath();
+        var installation = XPipeInstallation.getLocalDefaultInstallationBasePath();
         BeaconServer.start(installation);
     }
 

File: beacon/src/main/java/io/xpipe/beacon/BeaconDaemonController.java
Patch:
@@ -19,7 +19,7 @@ public static void start() throws Exception {
         if ((process = BeaconServer.tryStartCustom()) != null) {
             custom = true;
         } else {
-            var defaultBase = XPipeInstallation.getDefaultInstallationBasePath();
+            var defaultBase = XPipeInstallation.getLocalDefaultInstallationBasePath();
             process = BeaconServer.start(defaultBase);
         }
 

File: core/src/main/java/io/xpipe/core/process/CommandProcessControl.java
Patch:
@@ -7,6 +7,8 @@
 
 public interface CommandProcessControl extends ProcessControl {
 
+    CommandProcessControl complex();
+
     default InputStream startExternalStdout() throws Exception {
         try {
             start();

File: core/src/main/java/io/xpipe/core/process/ShellType.java
Patch:
@@ -74,6 +74,8 @@ default String getPrintVariableCommand(String name) {
 
     String executeCommandWithShell(String cmd);
 
+    List<String> executeCommandListWithShell(String cmd);
+
     List<String> createMkdirsCommand(String dirs);
 
     String createFileReadCommand(String file);

File: beacon/src/main/java/io/xpipe/beacon/BeaconServer.java
Patch:
@@ -31,7 +31,8 @@ public static Process tryStartCustom() throws Exception {
         var custom = BeaconConfig.getCustomDaemonCommand();
         if (custom != null) {
             var command =
-                    custom + " " + (BeaconConfig.getDaemonArguments() != null ? BeaconConfig.getDaemonArguments() : "");
+                    ShellTypes.getPlatformDefault().executeCommandWithShell(
+                            custom + (BeaconConfig.getDaemonArguments() != null ? " " + BeaconConfig.getDaemonArguments() : ""));
             Process process = Runtime.getRuntime().exec(command);
             printDaemonOutput(process, command);
             return process;

File: beacon/src/main/java/io/xpipe/beacon/BeaconServer.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.core.impl.FileNames;
 import io.xpipe.core.impl.LocalStore;
 import io.xpipe.core.process.ShellProcessControl;
+import io.xpipe.core.process.ShellTypes;
 import io.xpipe.core.util.XPipeInstallation;
 import lombok.experimental.UtilityClass;
 
@@ -43,7 +44,7 @@ public static Process start(String installationBase) throws Exception {
         // Tell daemon that we launched from an external tool
         var command = "\"" + daemonExecutable + "\" --external "
                 + (BeaconConfig.getDaemonArguments() != null ? BeaconConfig.getDaemonArguments() : "");
-        Process process = Runtime.getRuntime().exec(command);
+        Process process = Runtime.getRuntime().exec(ShellTypes.getPlatformDefault().executeCommandWithShell(command));
         printDaemonOutput(process, command);
         return process;
     }

File: core/src/main/java/io/xpipe/core/util/ProxyProvider.java
Patch:
@@ -22,6 +22,8 @@ public static ProxyProvider get() {
         return INSTANCE;
     }
 
+    public abstract <T> T downstreamTransform(T object, ShellStore proxy);
+
     public abstract ShellStore getProxy(Object base);
 
     public abstract  boolean isRemote(Object base);

File: core/src/main/java/module-info.java
Patch:
@@ -26,6 +26,7 @@
     uses io.xpipe.core.source.WriteMode;
     uses LocalProcessControlProvider;
     uses io.xpipe.core.util.ProxyProvider;
+    uses io.xpipe.core.util.ProxyManagerProvider;
 
     provides WriteMode with WriteMode.Replace, WriteMode.Append, WriteMode.Prepend;
     provides com.fasterxml.jackson.databind.Module with

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -20,6 +20,8 @@ public interface ProcessControl extends Closeable, AutoCloseable {
 
     void writeLine(String line) throws IOException;
 
+    void write(byte[] b) throws IOException;
+
     @Override
     void close() throws IOException;
     void kill() throws Exception;

File: core/src/main/java/io/xpipe/core/process/ShellProcessControl.java
Patch:
@@ -53,8 +53,6 @@ default String executeStringSimpleCommand(ShellType type, String command) throws
 
     ShellProcessControl elevation(SecretValue value);
 
-    ShellProcessControl startTimeout(Integer timeout);
-
     SecretValue getElevationPassword();
 
     default ShellProcessControl subShell(@NonNull ShellType type) {

File: core/src/main/java/io/xpipe/core/process/ShellType.java
Patch:
@@ -76,7 +76,7 @@ default String getPrintVariableCommand(String name) {
 
     List<String> createMkdirsCommand(String dirs);
 
-    List<String> createFileReadCommand(String file);
+    String createFileReadCommand(String file);
 
     String createFileWriteCommand(String file);
 

File: core/src/main/java/io/xpipe/core/process/CommandProcessControl.java
Patch:
@@ -58,7 +58,6 @@ public void close() throws IOException {
     @Override
     CommandProcessControl start() throws Exception;
 
-    @Override
     CommandProcessControl exitTimeout(Integer timeout);
 
     String readOnlyStdout() throws Exception;

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -24,8 +24,6 @@ public interface ProcessControl extends Closeable, AutoCloseable {
     void close() throws IOException;
     void kill() throws Exception;
 
-    ProcessControl exitTimeout(Integer timeout);
-
     ProcessControl start() throws Exception;
 
     InputStream getStdout();

File: core/src/main/java/io/xpipe/core/util/SimpleProxyFunction.java
Patch:
@@ -5,6 +5,7 @@
 public abstract class SimpleProxyFunction<T> extends ProxyFunction {
 
     @SneakyThrows
+    @SuppressWarnings("unchecked")
     public T getResult() {
         var fields = getClass().getDeclaredFields();
         var last = fields[fields.length - 1];
@@ -13,6 +14,7 @@ public T getResult() {
     }
 
     @SneakyThrows
+    @SuppressWarnings("unchecked")
     public T callAndGet() {
         var result = callAndCopy();
         return ((SimpleProxyFunction<T>) result).getResult();

File: core/src/main/java/io/xpipe/core/process/ShellProcessControl.java
Patch:
@@ -64,8 +64,8 @@ default String executeStringSimpleCommand(ShellType type, String command) throws
     SecretValue getElevationPassword();
 
     default ShellProcessControl subShell(@NonNull ShellType type) {
-        return subShell(p -> type.openCommand(), (shellProcessControl, s) -> {
-                    return s == null ? type.openCommand() : type.switchTo(s);
+        return subShell(p -> type.getNormalOpenCommand(), (shellProcessControl, s) -> {
+                    return s == null ? type.getNormalOpenCommand() : type.executeCommandWithShell(s);
                 })
                 .elevation(getElevationPassword());
     }

File: extension/src/main/java/io/xpipe/extension/util/CustomComboBoxBuilder.java
Patch:
@@ -97,7 +97,7 @@ public ComboBox<Node> build() {
         cb.setButtonCell(new SelectedCell());
         SimpleChangeListener.apply(selected, c -> {
             var item = nodeMap.entrySet().stream()
-                    .filter(e -> e.getValue() != null && e.getValue().equals(c))
+                    .filter(e -> Objects.equals(c, e.getValue()))
                     .map(e -> e.getKey())
                     .findAny()
                     .orElse(null);
@@ -118,7 +118,6 @@ public ComboBox<Node> build() {
         });
 
         if (filterPredicate != null) {
-
             SimpleChangeListener.apply(filterString, c -> {
                 var filteredNodes = nodes.stream()
                         .filter(e -> e.equals(cb.getValue())

File: core/src/main/java/io/xpipe/core/process/OsType.java
Patch:
@@ -47,7 +47,7 @@ public String getName() {
 
         @Override
         public String getTempDirectory(ShellProcessControl pc) throws Exception {
-            return pc.executeSimpleCommand(ShellTypes.CMD, ShellTypes.CMD.getPrintVariableCommand("TEMP"));
+            return pc.executeStringSimpleCommand(ShellTypes.CMD, ShellTypes.CMD.getPrintVariableCommand("TEMP"));
         }
 
         @Override
@@ -160,7 +160,7 @@ static class Mac implements OsType {
 
         @Override
         public String getTempDirectory(ShellProcessControl pc) throws Exception {
-            return pc.executeSimpleCommand(pc.getShellType().getPrintVariableCommand("TEMP"));
+            return pc.executeStringSimpleCommand(pc.getShellType().getPrintVariableCommand("TEMP"));
         }
 
         @Override

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -8,7 +8,7 @@
 
 public interface ProcessControl extends Closeable, AutoCloseable {
 
-     String prepareConsoleOpen(boolean keepOpen) throws Exception;
+     String prepareTerminalOpen() throws Exception;
 
     void closeStdin() throws IOException;
 

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -52,7 +52,7 @@ public static String getInstallationExecutable(ShellProcessControl p, String ins
 
     public static String getDataBasePath(ShellProcessControl p) throws Exception {
         if (p.getOsType().equals(OsType.WINDOWS)) {
-            var base = p.executeSimpleCommand(p.getShellType().getPrintVariableCommand("userprofile"));
+            var base = p.executeStringSimpleCommand(p.getShellType().getPrintVariableCommand("userprofile"));
             return FileNames.join(base, ".xpipe");
         } else {
             return FileNames.join("~", ".xpipe");
@@ -66,14 +66,14 @@ public static String getDefaultInstallationBasePath() throws Exception {
     }
 
     public static String getDefaultInstallationBasePath(ShellProcessControl p) throws Exception {
-        var customHome = p.executeSimpleCommand(p.getShellType().getPrintVariableCommand("XPIPE_HOME"));
+        var customHome = p.executeStringSimpleCommand(p.getShellType().getPrintVariableCommand("XPIPE_HOME"));
         if (!customHome.isEmpty()) {
             return customHome;
         }
 
         String path = null;
         if (p.getOsType().equals(OsType.WINDOWS)) {
-            var base = p.executeSimpleCommand(p.getShellType().getPrintVariableCommand("LOCALAPPDATA"));
+            var base = p.executeStringSimpleCommand(p.getShellType().getPrintVariableCommand("LOCALAPPDATA"));
             path = FileNames.join(base, "X-Pipe");
         } else {
             path = "/opt/xpipe";

File: extension/src/main/java/module-info.java
Patch:
@@ -32,6 +32,8 @@
     requires static org.fxmisc.flowless;
     requires static org.kordamp.ikonli.javafx;
     requires static com.jfoenix;
+    requires static com.dlsc.preferencesfx;
+    requires static com.dlsc.formsfx;
 
     uses DataSourceProvider;
     uses SupportedApplicationProvider;

File: extension/src/main/java/io/xpipe/extension/fxcomps/impl/ShellStoreChoiceComp.java
Patch:
@@ -25,10 +25,10 @@
 @AllArgsConstructor
 public class ShellStoreChoiceComp<T extends ShellStore> extends SimpleComp {
 
+    private final T self;
     private final Property<T> selected;
     private final Class<T> storeClass;
     private final Predicate<T> applicableCheck;
-    private final Predicate<T> supportCheck;
 
     private Region createGraphic(T s) {
         var provider = DataStoreProviders.byStore(s);
@@ -80,6 +80,7 @@ protected Region createSimple() {
         var available = Stream.concat(
                         Stream.of(new LocalStore()),
                         XPipeDaemon.getInstance().getNamedStores().stream()
+                                .filter(s -> s != self)
                                 .filter(s -> storeClass.isAssignableFrom(s.getClass()) && applicableCheck.test((T) s))
                                 .map(s -> (ShellStore) s))
                 .toList();

File: beacon/src/main/java/io/xpipe/beacon/BeaconProxyImpl.java
Patch:
@@ -71,6 +71,7 @@ public boolean isRemote(Object base) {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <T extends DataSourceReadConnection> T createRemoteReadConnection(DataSource<?> source, ShellStore proxy) throws Exception {
         var downstream = downstreamTransform(source, proxy);
 
@@ -99,6 +100,7 @@ public void close() throws IOException {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <T extends DataSourceConnection> T createRemoteWriteConnection(DataSource<?> source, WriteMode mode,  ShellStore proxy) throws Exception {
         var downstream = downstreamTransform(source, proxy);
 

File: core/src/main/java/io/xpipe/core/process/ProcessControl.java
Patch:
@@ -8,6 +8,8 @@
 
 public interface ProcessControl extends Closeable, AutoCloseable {
 
+     String prepareConsoleOpen(boolean keepOpen) throws Exception;
+
     void closeStdin() throws IOException;
 
     boolean isStdinClosed();

File: beacon/src/main/java/io/xpipe/beacon/BeaconClient.java
Patch:
@@ -189,7 +189,7 @@ public OutputStream sendBody() throws ConnectorException {
     }
 
     public <T extends RequestMessage> void sendRequest(T req) throws ClientException, ConnectorException {
-        ObjectNode json = JacksonMapper.newMapper().valueToTree(req);
+        ObjectNode json = JacksonMapper.getDefault().valueToTree(req);
         var prov = MessageExchanges.byRequest(req);
         if (prov.isEmpty()) {
             throw new ClientException("Unknown request class " + req.getClass());

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -48,9 +48,9 @@ public static String getInstallationExecutable(ShellProcessControl p, String ins
     public static String getDataBasePath(ShellProcessControl p) throws Exception {
         if (p.getOsType().equals(OsType.WINDOWS)) {
             var base = p.executeSimpleCommand(p.getShellType().getPrintVariableCommand("userprofile"));
-            return FileNames.join(base, "X-Pipe");
+            return FileNames.join(base, ".xpipe");
         } else {
-            return FileNames.join("~", "xpipe");
+            return FileNames.join("~", ".xpipe");
         }
     }
 

File: beacon/src/main/java/io/xpipe/beacon/BeaconClient.java
Patch:
@@ -11,7 +11,7 @@
 import io.xpipe.beacon.exchange.MessageExchanges;
 import io.xpipe.beacon.exchange.data.ClientErrorMessage;
 import io.xpipe.beacon.exchange.data.ServerErrorMessage;
-import io.xpipe.core.process.ProcessControl;
+import io.xpipe.core.process.CommandProcessControl;
 import io.xpipe.core.util.JacksonMapper;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
@@ -104,7 +104,7 @@ public static BeaconClient connect(ClientInformation information) throws Excepti
         return client;
     }
 
-    public static BeaconClient connectGateway(ProcessControl control, GatewayClientInformation information) throws Exception {
+    public static BeaconClient connectGateway(CommandProcessControl control, GatewayClientInformation information) throws Exception {
         var client = new BeaconClient(() -> {}, control.getStdout(), control.getStdin());
         client.sendObject(JacksonMapper.newMapper().valueToTree(information));
         return client;

File: beacon/src/main/java/io/xpipe/beacon/exchange/NamedFunctionExchange.java
Patch:
@@ -1,14 +1,13 @@
 package io.xpipe.beacon.exchange;
 
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import io.xpipe.beacon.RequestMessage;
 import io.xpipe.beacon.ResponseMessage;
 import lombok.Builder;
 import lombok.NonNull;
 import lombok.Value;
 import lombok.extern.jackson.Jacksonized;
 
-import java.util.List;
-
 public class NamedFunctionExchange implements MessageExchange {
 
     @Override
@@ -23,7 +22,8 @@ public static class Request implements RequestMessage {
         @NonNull
         String id;
 
-        @NonNull List<Object> arguments;
+        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property="type")
+        @NonNull Object[] arguments;
     }
 
     @Jacksonized

File: core/src/main/java/io/xpipe/core/util/XPipeInstallation.java
Patch:
@@ -33,7 +33,7 @@ public static boolean containsCompatibleInstallation(ShellProcessControl p, Stri
 
     public static Optional<String> getInstallationExecutable(ShellProcessControl p) throws Exception {
         var installation = getDefaultInstallationBasePath(p);
-        var executable = FileNames.join(installation, getDaemonExecutableInInstallationDirectory(p.getOsType()));
+        var executable = getDaemonExecutableInInstallationDirectory(p.getOsType());
         var file = FileNames.join(installation, executable);
         try (CommandProcessControl c =
                 p.command(p.getShellType().createFileExistsCommand(file)).start()) {

File: extension/src/main/java/io/xpipe/extension/XPipeServiceProviders.java
Patch:
@@ -35,6 +35,7 @@ public static void load(ModuleLayer layer) {
 
         SupportedApplicationProviders.loadAll(layer);
         PrefsProviders.init(layer);
+        NamedFunction.init(layer);
         TrackEvent.info("Finished loading extension providers");
     }
 }

File: core/src/main/java/io/xpipe/core/store/MachineStore.java
Patch:
@@ -29,7 +29,7 @@ public default InputStream openInput(String file) throws Exception {
 
     @Override
     public default OutputStream openOutput(String file) throws Exception {
-        return create().commandListFunction(proc -> proc.getShellType().createFileWriteCommand(proc.getOsType().normalizeFileName(file)))
+        return create().commandFunction(proc -> proc.getShellType().createFileWriteCommand(proc.getOsType().normalizeFileName(file)))
                 .startExternalStdin();
     }
 

File: core/src/main/java/io/xpipe/core/store/ShellType.java
Patch:
@@ -43,7 +43,7 @@ default String getAndConcatenationOperator() {
 
     List<String> createFileReadCommand(String file);
 
-    List<String> createFileWriteCommand(String file);
+    String createFileWriteCommand(String file);
 
     List<String> createFileExistsCommand(String file);
 

File: api/src/main/java/io/xpipe/api/connector/XPipeConnection.java
Patch:
@@ -64,7 +64,7 @@ public static <T> T execute(Mapper<T> mapper) {
 
     public static Optional<BeaconClient> waitForStartup(Process process) {
         for (int i = 0; i < 160; i++) {
-            if (process != null && !process.isAlive()) {
+            if (process != null && !process.isAlive() && process.exitValue() != 0) {
                 return Optional.empty();
             }
 

File: beacon/src/main/java/io/xpipe/beacon/exchange/QueryDataSourceExchange.java
Patch:
@@ -38,7 +38,6 @@ public static class Response implements ResponseMessage {
         @NonNull
         DataSourceId id;
 
-        @NonNull
         String information;
 
         @NonNull

File: core/src/main/java/io/xpipe/core/store/LocalStore.java
Patch:
@@ -25,7 +25,7 @@ public boolean exists(String file) {
     @Override
     public boolean mkdirs(String file) throws Exception {
         try {
-            Files.createDirectories(Path.of(file).getParent());
+            Files.createDirectories(Path.of(file));
             return true;
         } catch (Exception ex) {
             return false;
@@ -40,7 +40,6 @@ public InputStream openInput(String file) throws Exception {
 
     @Override
     public OutputStream openOutput(String file) throws Exception {
-        mkdirs(file);
         var p = Path.of(file);
         return Files.newOutputStream(p);
     }

File: api/src/main/java/io/xpipe/api/impl/DataTableImpl.java
Patch:
@@ -71,8 +71,9 @@ public ArrayNode read(int maxRows) {
                     .maxRows(maxRows)
                     .build();
             con.performInputExchange(req, (QueryTableDataExchange.Response res, InputStream in) -> {
-                var r = new TypedDataStreamParser(info.getDataType());
-                r.parseStructures(in, TypedDataStructureNodeReader.of(info.getDataType()), nodes::add);
+                var r = new TypedDataStreamParser(res.getDataType());
+
+                r.parseStructures(in, TypedDataStructureNodeReader.of(res.getDataType()), nodes::add);
             });
         });
         return ArrayNode.of(nodes);

File: core/src/main/java/io/xpipe/core/store/LocalStore.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.core.charsetter.NewLine;
 import io.xpipe.core.util.JacksonizedValue;
 import io.xpipe.core.util.SecretValue;
+import lombok.Getter;
 
 import java.io.*;
 import java.nio.charset.Charset;
@@ -69,6 +70,8 @@ class LocalProcessControl extends ProcessControl {
 
         private final List<SecretValue> input;
         private final Integer timeout;
+
+        @Getter
         private final List<String> command;
         private final Charset charset;
 

File: core/src/main/java/io/xpipe/core/store/ProcessControl.java
Patch:
@@ -5,6 +5,7 @@
 import java.io.OutputStream;
 import java.io.UncheckedIOException;
 import java.nio.charset.Charset;
+import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -125,4 +126,6 @@ public Thread discardErr() {
     public abstract InputStream getStderr();
 
     public abstract Charset getCharset();
+
+    public abstract List<String> getCommand();
 }

File: extension/src/main/java/io/xpipe/extension/DataSourceProvider.java
Patch:
@@ -43,7 +43,7 @@ default String i18nKey(String key) {
         return getId() + "." + key;
     }
 
-    default Region configGui(Property<T> source, boolean all) {
+    default Region configGui(Property<T> source, boolean preferQuiet) throws Exception {
         return null;
     }
 
@@ -56,7 +56,7 @@ default String getDisplayDescription() {
     }
 
     default String getModuleName() {
-        var n = getClass().getPackageName();
+        var n = getClass().getModule().getName();
         var i = n.lastIndexOf('.');
         return i != -1 ? n.substring(i + 1) : n;
     }

File: extension/src/main/java/io/xpipe/extension/comp/CharChoiceComp.java
Patch:
@@ -33,7 +33,7 @@ public CompStructure<HBox> createBase() {
         if (customName != null) {
             rangeCopy.put(null, customName);
         }
-        var choice = new ChoiceComp<Character>(value, rangeCopy);
+        var choice = new ChoiceComp<Character>(value, rangeCopy, false);
         var charChoiceR = charChoice.createRegion();
         var choiceR = choice.createRegion();
         var box = new HBox(charChoiceR, choiceR);

File: extension/src/main/java/io/xpipe/extension/comp/DynamicOptionsComp.java
Patch:
@@ -31,7 +31,7 @@ public DynamicOptionsComp(List<Entry> entries, boolean wrap) {
     public CompStructure<FlowPane> createBase() {
         var flow = new FlowPane(Orientation.HORIZONTAL);
         flow.setAlignment(Pos.CENTER);
-        flow.setHgap(7);
+        flow.setHgap(14);
         flow.setVgap(7);
 
         var nameRegions = new ArrayList<Region>();

File: extension/src/main/java/io/xpipe/extension/util/ExtensionTest.java
Patch:
@@ -6,19 +6,21 @@
 import io.xpipe.core.store.FileStore;
 import io.xpipe.core.util.JacksonMapper;
 import io.xpipe.extension.XPipeServiceProviders;
+import lombok.SneakyThrows;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 
 import java.nio.file.Path;
 
 public class ExtensionTest {
 
+    @SneakyThrows
     public static DataStore getResource(String name) {
         var url = ExtensionTest.class.getClassLoader().getResource(name);
         if (url == null) {
             throw new IllegalArgumentException(String.format("File %s does not exist", name));
         }
-        var file = url.getFile().substring(1);
+        var file = Path.of(url.toURI()).toString();
         return FileStore.local(Path.of(file));
     }
 

File: beacon/src/main/java/module-info.java
Patch:
@@ -41,6 +41,7 @@
             RenameStoreExchange,
             RemoveStoreExchange,
             StoreAddExchange,
+            ReadDrainExchange,
             WritePreparationExchange,
             WriteExecuteExchange,
             SelectExchange,

File: core/src/main/java/io/xpipe/core/dialog/Choice.java
Patch:
@@ -5,7 +5,7 @@
 import lombok.Value;
 
 @Value
-@AllArgsConstructor(onConstructor_ = @JsonCreator)
+@AllArgsConstructor(onConstructor=@__({@JsonCreator}))
 public class Choice {
 
     /**

File: extension/src/main/java/io/xpipe/extension/DataStoreActionProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.xpipe.core.store.DataStore;
 import io.xpipe.extension.event.ErrorEvent;
+import javafx.beans.value.ObservableValue;
 import javafx.scene.layout.Region;
 
 import java.util.ArrayList;
@@ -40,7 +41,7 @@ default boolean isApplicable(T o) throws Exception {
 
     default void applyToRegion(T store, Region region) {}
 
-    String getName(T store);
+    ObservableValue<String> getName(T store);
 
     String getIcon(T store);
 

File: extension/src/main/java/io/xpipe/extension/comp/DataStoreFlowChoiceComp.java
Patch:
@@ -4,6 +4,7 @@
 import io.xpipe.extension.I18n;
 import io.xpipe.fxcomps.SimpleComp;
 import javafx.beans.property.Property;
+import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.ObservableValue;
 import javafx.scene.layout.Region;
 import lombok.EqualsAndHashCode;
@@ -24,7 +25,7 @@ protected Region createSimple() {
         map.put(DataFlow.INPUT, I18n.observable("extension.input"));
         map.put(DataFlow.OUTPUT, I18n.observable("extension.output"));
         map.put(DataFlow.INPUT_OUTPUT, I18n.observable("extension.inout"));
-        return new ToggleGroupComp<>(selected, map)
+        return new ToggleGroupComp<>(selected, new SimpleObjectProperty<>(map))
                 .apply(struc -> {
                     new FancyTooltipAugment<>("extension.inputDescription")
                             .augment(struc.get().getChildren().get(0));

File: extension/src/main/java/io/xpipe/extension/util/DynamicOptionsBuilder.java
Patch:
@@ -8,6 +8,7 @@
 import io.xpipe.fxcomps.Comp;
 import io.xpipe.fxcomps.CompStructure;
 import javafx.beans.property.Property;
+import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.ObservableValue;
 import javafx.scene.control.Label;
 import javafx.scene.layout.Region;
@@ -95,7 +96,7 @@ public DynamicOptionsBuilder addCharacter(
 
     public <V> DynamicOptionsBuilder addToggle(
             Property<V> prop, ObservableValue<String> name, Map<V, ObservableValue<String>> names) {
-        var comp = new ToggleGroupComp<>(prop, names);
+        var comp = new ToggleGroupComp<>(prop, new SimpleObjectProperty<>(names));
         entries.add(new DynamicOptionsComp.Entry(name, comp));
         props.add(prop);
         return this;

File: extension/src/main/java/io/xpipe/extension/util/ExpectHelper.java
Patch:
@@ -32,6 +32,7 @@ private static String expectFile(List<String> command, String password) {
         return String.format("""
                         echo(false)
                         if spawn(%s) then
+                            expect(":")
                             sendln("%s")
                         	echo(true)
                         end

File: core/src/main/java/io/xpipe/core/impl/XpbtSource.java
Patch:
@@ -15,11 +15,11 @@ public class XpbtSource extends TableDataSource<StreamDataStore> {
 
     @Override
     protected TableWriteConnection newWriteConnection() {
-        return new XpbtWriteConnection(store);
+        return new XpbtWriteConnection(this);
     }
 
     @Override
     protected TableReadConnection newReadConnection() {
-        return new XpbtReadConnection(store);
+        return new XpbtReadConnection(this);
     }
 }

File: core/src/main/java/io/xpipe/core/source/DataSource.java
Patch:
@@ -49,7 +49,7 @@ public void test() throws Exception {
         store.validate();
     }
 
-    public void validate() throws Exception {
+    public void checkComplete() throws Exception {
         if (store == null) {
             throw new IllegalStateException("Store cannot be null");
         }

File: core/src/main/java/io/xpipe/core/source/DataSourceReadConnection.java
Patch:
@@ -2,5 +2,7 @@
 
 public interface DataSourceReadConnection extends DataSourceConnection {
 
+    boolean canRead() throws Exception;
+
     void forward(DataSourceConnection con) throws Exception;
 }

File: core/src/main/java/io/xpipe/core/store/ProcessControl.java
Patch:
@@ -52,7 +52,7 @@ public String executeAndReadStdoutOrThrow()
         var pc = this;
         pc.start();
 
-        AtomicReference<String> readError = new AtomicReference<>();
+        AtomicReference<String> readError = new AtomicReference<>("");
         var errorThread = new Thread(() -> {
             try {
 
@@ -64,7 +64,7 @@ public String executeAndReadStdoutOrThrow()
         errorThread.setDaemon(true);
         errorThread.start();
 
-        AtomicReference<String> read = new AtomicReference<>();
+        AtomicReference<String> read = new AtomicReference<>("");
         var t = new Thread(() -> {
             try {
                 read.set(new String(pc.getStdout().readAllBytes(), pc.getCharset()));

File: api/src/main/java/io/xpipe/api/connector/XPipeConnection.java
Patch:
@@ -73,7 +73,7 @@ public static Optional<BeaconClient> waitForStartup(Process process) {
             } catch (InterruptedException ignored) {
             }
 
-            var s = BeaconClient.tryConnect();
+            var s = BeaconClient.tryConnect(BeaconClient.ApiClientInformation.builder().version("?").language("Java").build());
             if (s.isPresent()) {
                 return s;
             }
@@ -114,7 +114,7 @@ protected void constructSocket() {
         }
 
         try {
-            beaconClient = new BeaconClient();
+            beaconClient = BeaconClient.connect(BeaconClient.ApiClientInformation.builder().version("?").language("Java").build());
         } catch (Exception ex) {
             throw new BeaconException("Unable to connect to running xpipe daemon", ex);
         }

File: api/src/main/java/io/xpipe/api/util/XPipeDaemonController.java
Patch:
@@ -37,7 +37,7 @@ public static void stop() throws Exception {
             return;
         }
 
-        var client = new BeaconClient();
+        var client = BeaconClient.connect(BeaconClient.ApiClientInformation.builder().version("?").language("Java API Test").build());
         if (!BeaconServer.tryStop(client)) {
             throw new AssertionError();
         }

File: beacon/src/main/java/io/xpipe/beacon/BeaconServer.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) throws Exception {
     }
 
     public static boolean isRunning() {
-        try (var socket = new BeaconClient()) {
+        try (var socket = BeaconClient.connect(null)) {
             return true;
         } catch (Exception e) {
             return false;

File: beacon/src/main/java/module-info.java
Patch:
@@ -1,3 +1,5 @@
+import com.fasterxml.jackson.databind.Module;
+import io.xpipe.beacon.BeaconJacksonModule;
 import io.xpipe.beacon.exchange.*;
 import io.xpipe.beacon.exchange.api.QueryRawDataExchange;
 import io.xpipe.beacon.exchange.api.QueryTableDataExchange;
@@ -24,6 +26,7 @@
 
     uses MessageExchange;
 
+    provides Module with BeaconJacksonModule;
     provides io.xpipe.beacon.exchange.MessageExchange with
             ForwardExchange,
             InstanceExchange,

File: extension/src/main/java/module-info.java
Patch:
@@ -1,4 +1,5 @@
 import io.xpipe.extension.DataSourceProvider;
+import io.xpipe.extension.DataStoreActionProvider;
 import io.xpipe.extension.SupportedApplicationProvider;
 import io.xpipe.extension.util.XPipeDaemon;
 
@@ -31,6 +32,7 @@
 
     uses DataSourceProvider;
     uses SupportedApplicationProvider;
+    uses DataStoreActionProvider;
     uses io.xpipe.extension.I18n;
     uses io.xpipe.extension.event.EventHandler;
     uses io.xpipe.extension.prefs.PrefsProvider;

File: beacon/src/main/java/io/xpipe/beacon/BeaconConnection.java
Patch:
@@ -171,15 +171,15 @@ public <REQ extends RequestMessage, RES extends ResponseMessage> RES performSimp
 
     private BeaconException unwrapException(Exception exception) {
         if (exception instanceof ServerException s) {
-            return new BeaconException("An internal server error occurred", s.getCause());
+            return new BeaconException("An internal server error occurred", s);
         }
 
         if (exception instanceof ClientException s) {
-            return new BeaconException("A client error occurred", s.getCause());
+            return new BeaconException("A client error occurred", s);
         }
 
         if (exception instanceof ConnectorException s) {
-            return new BeaconException("A beacon connection error occurred", s.getCause());
+            return new BeaconException("A beacon connection error occurred", s);
         }
 
         return new BeaconException("An unexpected error occurred", exception);

File: beacon/src/main/java/io/xpipe/beacon/exchange/QueryDataSourceExchange.java
Patch:
@@ -11,7 +11,7 @@
 import lombok.Value;
 import lombok.extern.jackson.Jacksonized;
 
-import java.util.Map;
+import java.util.LinkedHashMap;
 
 /**
  * Queries general information about a data source.
@@ -50,7 +50,7 @@ public static class Response implements ResponseMessage {
         String provider;
 
         @NonNull
-        Map<String, String> config;
+        LinkedHashMap<String, String> config;
 
         DataSource<?> internalSource;
     }

File: core/src/main/java/io/xpipe/core/store/ShellTypes.java
Patch:
@@ -42,7 +42,7 @@ public static StandardShellStore.ShellType determine(ShellStore store) throws Ex
     public static StandardShellStore.ShellType[] getAvailable(ShellStore store) throws Exception {
         var o = store.prepareCommand(List.of(), List.of("echo", "$0"), null, StandardCharsets.US_ASCII)
                 .executeAndReadStdoutOrThrow();
-        if (!o.trim().equals("$0")) {
+        if (o.trim().length() > 0 && !o.trim().equals("$0")) {
             return getLinuxShells();
         } else {
             return getWindowsShells();

File: core/src/main/java/io/xpipe/core/charsetter/Charsetter.java
Patch:
@@ -68,7 +68,7 @@ public BufferedReader reader(InputStream stream, StreamCharset charset) throws E
         if (charset.hasByteOrderMark()) {
             var bom = stream.readNBytes(charset.getByteOrderMark().length);
             if (bom.length != 0 && !Arrays.equals(bom, charset.getByteOrderMark())) {
-                throw new IllegalStateException("Invalid charset: " + toString());
+                throw new IllegalStateException("Charset does not match: " + charset.toString());
             }
         }
 

File: core/src/main/java/io/xpipe/core/source/DataSource.java
Patch:
@@ -45,7 +45,6 @@ public static DataSource<?> createInternalDataSource(DataSourceType t, DataStore
             throw new AssertionError(ex);
         }
     }
-
     public void test() throws Exception {
         store.validate();
     }

File: extension/src/main/java/io/xpipe/extension/DataSourceProvider.java
Patch:
@@ -19,7 +19,7 @@ default void validate() throws Exception {
 
     default Category getCategory() {
         if (getFileProvider() != null) {
-            return Category.FILE;
+            return Category.STREAM;
         }
 
         throw new ExtensionException("Provider has no set general type");
@@ -43,7 +43,7 @@ default String i18nKey(String key) {
         return getId() + "." + key;
     }
 
-    default Region configGui(Property<T> source, Property<T> appliedSource, boolean all) {
+    default Region configGui(Property<T> source, boolean all) {
         return null;
     }
 
@@ -120,7 +120,7 @@ default String getId() {
     List<String> getPossibleNames();
 
     static enum Category {
-        FILE,
+        STREAM,
         DATABASE;
     }
 

File: extension/src/main/java/io/xpipe/extension/comp/DynamicOptionsComp.java
Patch:
@@ -6,7 +6,6 @@
 import javafx.beans.Observable;
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
-import javafx.geometry.Insets;
 import javafx.geometry.Orientation;
 import javafx.geometry.Pos;
 import javafx.scene.control.Label;
@@ -34,7 +33,6 @@ public CompStructure<FlowPane> createBase() {
         flow.setAlignment(Pos.CENTER);
         flow.setHgap(7);
         flow.setVgap(7);
-        flow.setPadding(new Insets(8, 0, 0, 0));
 
         var nameRegions = new ArrayList<Region>();
         var compRegions = new ArrayList<Region>();

File: extension/src/main/java/io/xpipe/extension/comp/FancyTooltipAugment.java
Patch:
@@ -3,9 +3,9 @@
 import com.jfoenix.controls.JFXTooltip;
 import io.xpipe.extension.I18n;
 import io.xpipe.fxcomps.CompStructure;
-import io.xpipe.fxcomps.Shortcuts;
 import io.xpipe.fxcomps.augment.Augment;
 import io.xpipe.fxcomps.util.PlatformThread;
+import io.xpipe.fxcomps.util.Shortcuts;
 import javafx.beans.value.ObservableValue;
 import javafx.scene.Node;
 import javafx.scene.layout.Region;

File: core/src/main/java/io/xpipe/core/store/StdinDataStore.java
Patch:
@@ -3,13 +3,15 @@
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.xpipe.core.util.JacksonizedValue;
 import lombok.experimental.SuperBuilder;
+import lombok.extern.jackson.Jacksonized;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
 @JsonTypeName("stdin")
 @SuperBuilder
+@Jacksonized
 public class StdinDataStore extends JacksonizedValue implements StreamDataStore {
 
     @Override

File: core/src/main/java/io/xpipe/core/store/StdoutDataStore.java
Patch:
@@ -3,12 +3,14 @@
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.xpipe.core.util.JacksonizedValue;
 import lombok.experimental.SuperBuilder;
+import lombok.extern.jackson.Jacksonized;
 
 import java.io.IOException;
 import java.io.OutputStream;
 
 @JsonTypeName("stdout")
 @SuperBuilder
+@Jacksonized
 public class StdoutDataStore extends JacksonizedValue implements StreamDataStore {
 
     @Override

File: beacon/src/main/java/io/xpipe/beacon/BeaconConfig.java
Patch:
@@ -30,7 +30,7 @@ public static boolean execDebugEnabled() {
 
 
     public static final String BEACON_PORT_PROP = "io.xpipe.beacon.port";
-    public static final int DEFAULT_PORT = 21721;
+    public static final int DEFAULT_PORT = System.getProperty("os.name").startsWith("Windows") ? 21721 : 21722;
 
     public static int getUsedPort() {
         if (System.getProperty(BEACON_PORT_PROP) != null) {

File: core/src/main/java/io/xpipe/core/source/RawReadConnection.java
Patch:
@@ -18,7 +18,6 @@ default void forwardBytes(OutputStream out, int maxBytes) throws Exception {
 
     default void forward(DataSourceConnection con) throws Exception {
         try (var tCon = (RawWriteConnection) con) {
-            tCon.init();
             byte[] b;
             while ((b = readBytes(BUFFER_SIZE)).length > 0) {
                 tCon.write(b);

File: core/src/main/java/io/xpipe/core/source/StructureReadConnection.java
Patch:
@@ -11,7 +11,6 @@ public interface StructureReadConnection extends DataSourceReadConnection {
 
     default void forward(DataSourceConnection con) throws Exception {
         try (var tCon = (StructureWriteConnection) con) {
-            tCon.init();
             tCon.write(read());
         }
     }

File: core/src/main/java/io/xpipe/core/source/TextReadConnection.java
Patch:
@@ -28,7 +28,6 @@ default void forwardLines(OutputStream out, int maxLines) throws Exception {
 
     default void forward(DataSourceConnection con) throws Exception {
         try (var tCon = (TextWriteConnection) con) {
-            tCon.init();
             for (var it = lines().iterator(); it.hasNext(); ) {
                 tCon.writeLine(it.next());
             }

File: extension/src/main/java/io/xpipe/extension/DataStoreProvider.java
Patch:
@@ -78,9 +78,7 @@ default Dialog dialogForStore(DataStore store) {
         return null;
     }
 
-    default DataStore defaultStore() {
-        throw new ExtensionException("CLI Dialog not implemented by provider");
-    }
+    DataStore defaultStore();
 
     default String display(DataStore store) {
         return store.toSummaryString();

File: beacon/src/main/java/io/xpipe/beacon/exchange/cli/SourceProviderListExchange.java
Patch:
@@ -13,11 +13,11 @@
 import java.util.List;
 import java.util.Map;
 
-public class ProviderListExchange implements MessageExchange {
+public class SourceProviderListExchange implements MessageExchange {
 
     @Override
     public String getId() {
-        return "providerList";
+        return "sourceProviderList";
     }
 
     @Jacksonized

File: beacon/src/main/java/module-info.java
Patch:
@@ -22,6 +22,8 @@
 
     uses MessageExchange;
     provides io.xpipe.beacon.exchange.MessageExchange with
+            EditStoreExchange,
+            StoreProviderListExchange,
             ListCollectionsExchange,
             ListEntriesExchange,
             ModeExchange,
@@ -45,7 +47,7 @@
             RemoveCollectionExchange,
             RenameCollectionExchange,
             RenameEntryExchange,
-            ProviderListExchange,
+            SourceProviderListExchange,
             ConvertExchange,
             QueryRawDataExchange,
             QueryTableDataExchange,

File: extension/src/main/java/module-info.java
Patch:
@@ -36,4 +36,5 @@
     uses io.xpipe.extension.event.EventHandler;
     uses io.xpipe.extension.prefs.PrefsProvider;
     uses io.xpipe.extension.DataStoreProvider;
+    uses io.xpipe.extension.XPipeDaemon;
 }
\ No newline at end of file

File: core/src/main/java/io/xpipe/core/charsetter/Charsetter.java
Patch:
@@ -31,6 +31,8 @@ public static class Result {
         NewLine newLine;
     }
 
+    protected Charsetter() {}
+
     public static Charsetter INSTANCE;
 
     public static Charsetter get() {

File: core/src/main/java/module-info.java
Patch:
@@ -9,6 +9,7 @@
     exports io.xpipe.core.data.node;
     exports io.xpipe.core.data.typed;
     exports io.xpipe.core.dialog;
+    exports io.xpipe.core.charsetter;
 
     opens io.xpipe.core.store;
     opens io.xpipe.core.source;
@@ -18,7 +19,6 @@
     opens io.xpipe.core.data.node;
     opens io.xpipe.core.data.typed;
     opens io.xpipe.core.dialog;
-    exports io.xpipe.core.charsetter;
 
     requires com.fasterxml.jackson.core;
     requires com.fasterxml.jackson.databind;

File: beacon/src/main/java/io/xpipe/beacon/exchange/cli/DialogExchange.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.beacon.exchange.MessageExchange;
 import io.xpipe.beacon.message.RequestMessage;
 import io.xpipe.beacon.message.ResponseMessage;
-import io.xpipe.core.config.DialogElement;
+import io.xpipe.core.dialog.DialogElement;
 import lombok.Builder;
 import lombok.Value;
 import lombok.extern.jackson.Jacksonized;

File: beacon/src/main/java/io/xpipe/beacon/exchange/cli/StoreAddExchange.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.beacon.exchange.MessageExchange;
 import io.xpipe.beacon.message.RequestMessage;
 import io.xpipe.beacon.message.ResponseMessage;
-import io.xpipe.core.config.DialogElement;
+import io.xpipe.core.dialog.DialogElement;
 import lombok.Builder;
 import lombok.NonNull;
 import lombok.Value;

File: core/src/main/java/io/xpipe/core/dialog/BaseQueryElement.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonTypeName;

File: core/src/main/java/io/xpipe/core/dialog/ChoiceElement.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonTypeName;

File: core/src/main/java/io/xpipe/core/dialog/ConfigParameter.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;

File: core/src/main/java/io/xpipe/core/dialog/ConfigParameterSetInstance.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import lombok.AllArgsConstructor;

File: core/src/main/java/io/xpipe/core/dialog/DialogElement.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import lombok.EqualsAndHashCode;

File: core/src/main/java/io/xpipe/core/dialog/HeaderElement.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonTypeName;

File: core/src/main/java/io/xpipe/core/dialog/QueryElement.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.config;
+package io.xpipe.core.dialog;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;

File: core/src/main/java/io/xpipe/core/source/DataSourceConfigInstance.java
Patch:
@@ -1,8 +1,8 @@
 package io.xpipe.core.source;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
-import io.xpipe.core.config.ConfigParameter;
-import io.xpipe.core.config.ConfigParameterSetInstance;
+import io.xpipe.core.dialog.ConfigParameter;
+import io.xpipe.core.dialog.ConfigParameterSetInstance;
 import lombok.AllArgsConstructor;
 import lombok.Value;
 

File: core/src/main/java/io/xpipe/core/util/CoreJacksonModule.java
Patch:
@@ -11,9 +11,9 @@
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 import com.fasterxml.jackson.databind.module.SimpleModule;
-import io.xpipe.core.config.BaseQueryElement;
-import io.xpipe.core.config.ChoiceElement;
-import io.xpipe.core.config.HeaderElement;
+import io.xpipe.core.dialog.BaseQueryElement;
+import io.xpipe.core.dialog.ChoiceElement;
+import io.xpipe.core.dialog.HeaderElement;
 import io.xpipe.core.data.type.ArrayType;
 import io.xpipe.core.data.type.TupleType;
 import io.xpipe.core.data.type.ValueType;

File: extension/src/main/java/io/xpipe/extension/DataSourceProvider.java
Patch:
@@ -1,8 +1,8 @@
 package io.xpipe.extension;
 
 import io.xpipe.charsetter.NewLine;
-import io.xpipe.core.config.QueryConverter;
-import io.xpipe.core.config.ConfigParameter;
+import io.xpipe.core.dialog.QueryConverter;
+import io.xpipe.core.dialog.ConfigParameter;
 import io.xpipe.core.source.DataSource;
 import io.xpipe.core.source.DataSourceType;
 import io.xpipe.core.store.DataStore;

File: extension/src/main/java/io/xpipe/extension/DataStoreProvider.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.extension;
 
-import io.xpipe.core.config.Dialog;
+import io.xpipe.core.dialog.Dialog;
 
 import java.net.URL;
 import java.util.List;

File: extension/src/main/java/io/xpipe/extension/DataStoreProviders.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.extension;
 
-import io.xpipe.core.config.Dialog;
+import io.xpipe.core.dialog.Dialog;
 import io.xpipe.extension.event.ErrorEvent;
 
 import java.net.URL;
@@ -17,7 +17,7 @@ public class DataStoreProviders {
     public static void init(ModuleLayer layer) {
         if (ALL == null) {
             ALL = ServiceLoader.load(layer, DataStoreProvider.class).stream()
-                    .map(p -> (DataStoreProvider) p.get()).collect(Collectors.toSet());
+                    .map(ServiceLoader.Provider::get).collect(Collectors.toSet());
             ALL.forEach(p -> {
                 try {
                     p.init();

File: core/src/main/java/io/xpipe/core/source/DataSourceInfo.java
Patch:
@@ -86,10 +86,12 @@ public DataSourceType getType() {
     @Value
     @JsonTypeName("text")
     public static class Text extends DataSourceInfo {
+        int characters;
         int lineCount;
 
         @JsonCreator
-        public Text(int lineCount) {
+        public Text(int characters, int lineCount) {
+            this.characters = characters;
             this.lineCount = lineCount;
         }
 

File: extension/src/main/java/io/xpipe/extension/DataSourceProviders.java
Patch:
@@ -107,13 +107,13 @@ public static Optional<DataSourceProvider<?>> byName(String name) {
                 .anyMatch(s -> s.equalsIgnoreCase(name))).findAny();
     }
 
-    public static Optional<DataSourceProvider<?>> byStore(DataStore store) {
+    public static Optional<DataSourceProvider<?>> byPreferredStore(DataStore store) {
         if (ALL == null) {
             throw new IllegalStateException("Not initialized");
         }
 
         return ALL.stream().filter(d -> d.getFileProvider() != null)
-                .filter(d -> d.couldSupportStore(store)).findAny();
+                .filter(d -> d.prefersStore(store)).findAny();
     }
 
     public static Set<DataSourceProvider<?>> getAll() {

File: beacon/src/main/java/module-info.java
Patch:
@@ -33,12 +33,14 @@
             WriteExecuteExchange,
             SelectExchange,
             ReadPreparationExchange,
+            QueryTextDataExchange,
             ReadExecuteExchange,
             DialogExchange,
             QueryDataSourceExchange,
             StoreStreamExchange,
             EditPreparationExchange,
             EditExecuteExchange,
+            ConvertExchange,
             QueryTableDataExchange,
             VersionExchange;
 }
\ No newline at end of file

File: core/src/main/java/io/xpipe/core/util/JacksonHelper.java
Patch:
@@ -1,6 +1,7 @@
 package io.xpipe.core.util;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.Module;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
@@ -22,6 +23,7 @@ public static synchronized void initModularized(ModuleLayer layer) {
         ObjectMapper objectMapper = INSTANCE;
         objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
         objectMapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
+        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
 
         objectMapper.registerModules(findModules(layer));
         objectMapper.setVisibility(objectMapper.getSerializationConfig().getDefaultVisibilityChecker()

File: extension/src/main/java/module-info.java
Patch:
@@ -7,10 +7,10 @@
     exports io.xpipe.extension.event;
     exports io.xpipe.extension.prefs;
 
-    requires io.xpipe.core;
-    requires javafx.base;
+    requires transitive io.xpipe.core;
+    requires transitive javafx.base;
     requires javafx.graphics;
-    requires javafx.controls;
+    requires transitive javafx.controls;
     requires io.xpipe.fxcomps;
     requires org.apache.commons.collections4;
     requires static lombok;

File: api/src/main/java/io/xpipe/api/impl/DataTableImpl.java
Patch:
@@ -59,7 +59,7 @@ public ArrayNode read(int maxRows) {
         List<DataStructureNode> nodes = new ArrayList<>();
         XPipeConnection.execute(con -> {
             var req = QueryTableDataExchange.Request.builder()
-                    .id(getId()).maxRows(maxRows).build();
+                    .ref(DataSourceReference.id(getId())).maxRows(maxRows).build();
             con.performInputExchange(req, (QueryTableDataExchange.Response res, InputStream in) -> {
                     var r = new TypedDataStreamParser(info.getDataType());
                     r.parseStructures(in, TypedDataStructureNodeReader.immutable(info.getDataType()), nodes::add);
@@ -82,7 +82,7 @@ public Iterator<TupleNode> iterator() {
 
                 connection = XPipeConnection.open();
                 var req = QueryTableDataExchange.Request.builder()
-                        .id(getId()).build();
+                        .ref(DataSourceReference.id(getId())).build();
                 connection.sendRequest(req);
                 connection.receiveResponse();
                 connection.receiveBody();

File: beacon/src/main/java/io/xpipe/beacon/exchange/ReadPreparationExchange.java
Patch:
@@ -43,7 +43,8 @@ public static class Request implements RequestMessage {
     @Builder
     @Value
     public static class Response implements ResponseMessage {
+        String determinedType;
+
         DataSourceConfigInstance config;
-        StreamDataStore store;
     }
 }

File: beacon/src/main/java/io/xpipe/beacon/exchange/api/QueryTableDataExchange.java
Patch:
@@ -3,7 +3,7 @@
 import io.xpipe.beacon.exchange.MessageExchange;
 import io.xpipe.beacon.message.RequestMessage;
 import io.xpipe.beacon.message.ResponseMessage;
-import io.xpipe.core.source.DataSourceId;
+import io.xpipe.core.source.DataSourceReference;
 import lombok.Builder;
 import lombok.NonNull;
 import lombok.Value;
@@ -34,7 +34,7 @@ public Class<QueryTableDataExchange.Response> getResponseClass() {
     @Value
     public static class Request implements RequestMessage {
         @NonNull
-        DataSourceId id;
+        DataSourceReference ref;
 
         int maxRows;
     }

File: core/src/main/java/io/xpipe/core/data/generic/GenericArrayReader.java
Patch:
@@ -127,9 +127,9 @@ public void onTupleEnd() {
     }
 
     @Override
-    public void onValue(byte[] value) {
+    public void onValue(byte[] value, boolean textual) {
         if (currentReader != null) {
-            currentReader.onValue(value);
+            currentReader.onValue(value, textual);
             return;
         }
 
@@ -141,7 +141,7 @@ public void onValue(byte[] value) {
             throw new IllegalStateException("Array is full but got another value");
         }
 
-        put(ValueNode.mutable(value));
+        put(ValueNode.mutable(value, textual));
     }
 
     @Override

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStreamCallback.java
Patch:
@@ -17,6 +17,6 @@ default void onTupleStart(int length) {
     default void onTupleEnd() {
     }
 
-    default void onValue(byte[] value) {
+    default void onValue(byte[] value, boolean textual) {
     }
 }

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStreamParser.java
Patch:
@@ -79,8 +79,9 @@ private static void parseArray(InputStream in, GenericDataStreamCallback cb) thr
     }
 
     private static void parseValue(InputStream in, GenericDataStreamCallback cb) throws IOException {
+        var textual = in.read() != 0;
         var size = in.read();
         var data = in.readNBytes(size);
-        cb.onValue(data);
+        cb.onValue(data, textual);
     }
 }

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStreamWriter.java
Patch:
@@ -53,6 +53,7 @@ private static void writeArray(OutputStream out, ArrayNode array) throws IOExcep
 
     private static void writeValue(OutputStream out, ValueNode value) throws IOException {
         out.write(DataStructureNodeIO.GENERIC_VALUE_ID);
+        out.write(value.isTextual() ? 1 : 0);
         out.write(value.getRawData().length);
         out.write(value.getRawData());
     }

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStructureNodeReader.java
Patch:
@@ -78,12 +78,12 @@ public void onTupleEnd() {
     }
 
     @Override
-    public void onValue(byte[] value) {
+    public void onValue(byte[] value, boolean textual) {
         if (hasReader()) {
-            reader.onValue(value);
+            reader.onValue(value, textual);
             return;
         }
 
-        node = ValueNode.mutable(value);
+        node = ValueNode.mutable(value, textual);
     }
 }

File: core/src/main/java/io/xpipe/core/data/generic/GenericTupleReader.java
Patch:
@@ -139,9 +139,9 @@ public void onTupleEnd() {
     }
 
     @Override
-    public void onValue(byte[] value) {
+    public void onValue(byte[] value, boolean textual) {
         if (currentReader != null) {
-            currentReader.onValue(value);
+            currentReader.onValue(value, textual);
             return;
         }
 
@@ -153,7 +153,7 @@ public void onValue(byte[] value) {
             throw new IllegalStateException("Tuple is full but got another value");
         }
 
-        putNode(ValueNode.mutable(value));
+        putNode(ValueNode.mutable(value, textual));
     }
 
     @Override

File: core/src/main/java/io/xpipe/core/data/typed/TypedDataStreamCallback.java
Patch:
@@ -5,7 +5,7 @@
 
 public interface TypedDataStreamCallback {
 
-    default void onValue(byte[] data) {
+    default void onValue(byte[] data, boolean textual) {
     }
 
     default void onGenericNode(DataStructureNode node) {

File: core/src/main/java/io/xpipe/core/data/typed/TypedDataStreamParser.java
Patch:
@@ -129,8 +129,9 @@ private void parseTypedArray(InputStream in, TypedDataStreamCallback cb, ArrayTy
     }
 
     private void parseValue(InputStream in, TypedDataStreamCallback cb) throws IOException {
+        var textual = in.read() != 0;
         var size = in.read();
         var data = in.readNBytes(size);
-        cb.onValue(data);
+        cb.onValue(data, textual);
     }
 }

File: core/src/main/java/io/xpipe/core/data/typed/TypedDataStreamWriter.java
Patch:
@@ -32,6 +32,7 @@ private static void write(OutputStream out, DataStructureNode node, DataType typ
 
     private static void writeValue(OutputStream out, ValueNode n) throws IOException {
         out.write(DataStructureNodeIO.TYPED_VALUE_ID);
+        out.write(n.isTextual() ? 1 : 0);
         out.write(n.getRawData().length);
         out.write(n.getRawData());
     }

File: core/src/main/java/io/xpipe/core/data/typed/TypedDataStructureNodeReader.java
Patch:
@@ -81,12 +81,12 @@ private void finishNode(DataStructureNode node) {
     }
 
     @Override
-    public void onValue(byte[] data) {
+    public void onValue(byte[] data, boolean textual) {
         if (!expectedType.isValue()) {
             throw new IllegalStateException("Expected " + expectedType.getName() + " but got value");
         }
 
-        var val = makeImmutable ? ValueNode.immutable(data) : ValueNode.mutable(data);
+        var val = makeImmutable ? ValueNode.immutable(data, textual) : ValueNode.mutable(data, textual);
         finishNode(val);
         moveExpectedType(false);
     }

File: core/src/main/java/io/xpipe/core/source/TextWriteConnection.java
Patch:
@@ -1,8 +1,6 @@
 package io.xpipe.core.source;
 
-import java.io.OutputStream;
-
 public interface TextWriteConnection extends DataSourceConnection {
 
-    OutputStream getOutputStream();
+    void writeLine(String line) throws Exception;
 }

File: core/src/main/java/module-info.java
Patch:
@@ -16,6 +16,8 @@
     opens io.xpipe.core.util;
     opens io.xpipe.core.data.node;
     opens io.xpipe.core.data.typed;
+    exports io.xpipe.core.config;
+    opens io.xpipe.core.config;
 
     requires com.fasterxml.jackson.core;
     requires com.fasterxml.jackson.databind;

File: core/src/test/java/io/xpipe/core/test/DataStructureTest.java
Patch:
@@ -134,7 +134,7 @@ public void testImmutableTypedIo(DataStructureTests.TypedDataset ds) throws IOEx
                     readNode.clear();
                     Assertions.assertEquals(readNode.size(), 0);
                 } else {
-                    readNode.setRawData("abc".getBytes(StandardCharsets.UTF_8));
+                    readNode.setRaw("abc".getBytes(StandardCharsets.UTF_8));
                 }
             });
             if (readNode.isTuple() || readNode.isArray()) {

File: extension/src/main/java/io/xpipe/extension/comp/CharChoiceComp.java
Patch:
@@ -36,7 +36,9 @@ public CharChoiceComp(Property<Character> value, BidiMap<Character, Supplier<Str
     public CompStructure<HBox> createBase() {
         var charChoice = new CharComp(value);
         var rangeCopy = new DualLinkedHashBidiMap<>(range);
-        rangeCopy.put(null, customName);
+        if (customName != null) {
+            rangeCopy.put(null, customName);
+        }
         var choice = new ChoiceComp<Character>(charChoiceValue, rangeCopy);
         var charChoiceR = charChoice.createRegion();
         var choiceR = choice.createRegion();

File: api/src/test/java/io/xpipe/api/test/ConnectionFactory.java
Patch:
@@ -18,7 +18,7 @@ public static void start() throws Exception {
             throw new AssertionError();
         }
 
-        XPipeConnection.waitForStartup();
+        XPipeConnection.waitForStartup().orElseThrow();
         if (!BeaconServer.isRunning()) {
             throw new AssertionError();
         }

File: core/src/main/java/io/xpipe/core/source/DataSourceId.java
Patch:
@@ -89,6 +89,6 @@ public static DataSourceId fromString(String s) {
 
     @Override
     public String toString() {
-        return collectionName.toLowerCase() + SEPARATOR + (entryName != null ? entryName.toLowerCase() : "");
+        return (collectionName != null ? collectionName.toLowerCase() : "") + SEPARATOR + entryName;
     }
 }

File: extension/src/main/java/io/xpipe/extension/comp/CharsetChoiceComp.java
Patch:
@@ -4,14 +4,14 @@
 import io.xpipe.fxcomps.CompStructure;
 import io.xpipe.fxcomps.comp.ReplacementComp;
 import javafx.beans.property.Property;
-import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.ComboBox;
 import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
 
 import java.nio.charset.Charset;
 import java.util.LinkedHashMap;
 import java.util.function.Supplier;
 
-public class CharsetChoiceComp extends ReplacementComp<CompStructure<ChoiceBox<Charset>>> {
+public class CharsetChoiceComp extends ReplacementComp<CompStructure<ComboBox<Charset>>> {
 
     private final Property<Charset> charset;
 
@@ -20,7 +20,7 @@ public CharsetChoiceComp(Property<Charset> charset) {
     }
 
     @Override
-    protected Comp<CompStructure<ChoiceBox<Charset>>> createComp() {
+    protected Comp<CompStructure<ComboBox<Charset>>> createComp() {
         var map = new LinkedHashMap<Charset, Supplier<String>>();
         for (var e : Charset.availableCharsets().entrySet()) {
             map.put(e.getValue(), e::getKey);

File: api/src/main/java/io/xpipe/api/XPipeApiConnector.java
Patch:
@@ -21,7 +21,7 @@ public void execute() {
     @Override
     protected BeaconClient constructSocket() throws ConnectorException {
         if (!JacksonHelper.isInit()) {
-            JacksonHelper.init(ModuleLayer.boot());
+            JacksonHelper.initModularized(ModuleLayer.boot());
         }
 
         if (!BeaconServer.isRunning()) {

File: api/src/main/java/io/xpipe/api/impl/DataSourceImpl.java
Patch:
@@ -6,7 +6,7 @@
 import io.xpipe.beacon.ClientException;
 import io.xpipe.beacon.ConnectorException;
 import io.xpipe.beacon.ServerException;
-import io.xpipe.beacon.exchange.ReadInfoExchange;
+import io.xpipe.beacon.exchange.InfoExchange;
 import io.xpipe.beacon.exchange.StoreResourceExchange;
 import io.xpipe.beacon.exchange.StoreStreamExchange;
 import io.xpipe.core.source.DataSourceConfig;
@@ -23,8 +23,8 @@ public static DataSource get(DataSourceId ds) {
         new XPipeApiConnector() {
             @Override
             protected void handle(BeaconClient sc) throws ClientException, ServerException, ConnectorException {
-                var req = ReadInfoExchange.Request.builder().sourceId(ds).build();
-                ReadInfoExchange.Response res = performSimpleExchange(sc, req);
+                var req = InfoExchange.Request.builder().id(ds).build();
+                InfoExchange.Response res = performSimpleExchange(sc, req);
 
             }
         }.execute();

File: beacon/src/main/java/io/xpipe/beacon/BeaconClient.java
Patch:
@@ -7,10 +7,10 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.node.TextNode;
 import io.xpipe.beacon.exchange.MessageExchanges;
-import io.xpipe.beacon.message.ClientErrorMessage;
+import io.xpipe.beacon.exchange.data.ClientErrorMessage;
 import io.xpipe.beacon.message.RequestMessage;
 import io.xpipe.beacon.message.ResponseMessage;
-import io.xpipe.beacon.message.ServerErrorMessage;
+import io.xpipe.beacon.exchange.data.ServerErrorMessage;
 import io.xpipe.core.util.JacksonHelper;
 
 import java.io.IOException;

File: beacon/src/main/java/io/xpipe/beacon/exchange/ModeExchange.java
Patch:
@@ -3,6 +3,7 @@
 import io.xpipe.beacon.message.RequestMessage;
 import io.xpipe.beacon.message.ResponseMessage;
 import lombok.Builder;
+import lombok.NonNull;
 import lombok.Value;
 import lombok.extern.jackson.Jacksonized;
 
@@ -27,6 +28,7 @@ public Class<ModeExchange.Response> getResponseClass() {
     @Builder
     @Value
     public static class Request implements RequestMessage {
+        @NonNull
         String modeId;
     }
 

File: beacon/src/main/java/module-info.java
Patch:
@@ -7,21 +7,21 @@
 
     requires com.fasterxml.jackson.core;
     requires com.fasterxml.jackson.databind;
-    requires com.fasterxml.jackson.module.paramnames;
     requires transitive io.xpipe.core;
 
     opens io.xpipe.beacon;
     opens io.xpipe.beacon.exchange;
     opens io.xpipe.beacon.message;
+    exports io.xpipe.beacon.exchange.data;
+    opens io.xpipe.beacon.exchange.data;
 
     requires static lombok;
 
     uses MessageExchange;
     provides io.xpipe.beacon.exchange.MessageExchange with
             ListCollectionsExchange,
             ListEntriesExchange,
-            ReadTableDataExchange,
-            ReadInfoExchange,
+            ModeExchange,
             StatusExchange,
             StopExchange,
             StoreResourceExchange,

File: core/src/main/java/module-info.java
Patch:
@@ -3,7 +3,6 @@
 module io.xpipe.core {
     requires com.fasterxml.jackson.core;
     requires com.fasterxml.jackson.databind;
-    requires com.fasterxml.jackson.module.paramnames;
 
     requires static lombok;
 
@@ -17,6 +16,7 @@
     opens io.xpipe.core.data.type;
     opens io.xpipe.core.data.generic;
     exports io.xpipe.core.util;
+    opens io.xpipe.core.util;
     exports io.xpipe.core.data.node;
     opens io.xpipe.core.data.node;
     exports io.xpipe.core.data.typed;

File: api/src/main/java/io/xpipe/api/impl/DataTableImpl.java
Patch:
@@ -95,7 +95,6 @@ protected void handle(BeaconClient sc) throws ClientException, ServerException,
                 performInputExchange(sc, req, (ReadTableDataExchange.Response res, InputStream in) -> {
                     var r = new TypedDataStreamParser(info.getDataType());
                     r.parseStructures(in, TypedDataStructureNodeReader.immutable(info.getDataType()), nodes::add);
-                    return true;
                 });
             }
         }.execute();
@@ -121,7 +120,6 @@ protected void handle(BeaconClient sc) throws ClientException, ServerException,
                         performInputExchange(sc, req,
                                 (ReadTableDataExchange.Response res, InputStream in) -> {
                             input = in;
-                                    return false;
                                 });
                     }
                 }.execute();

File: beacon/src/main/java/io/xpipe/beacon/exchange/StopExchange.java
Patch:
@@ -27,7 +27,6 @@ public Class<StopExchange.Response> getResponseClass() {
     @Builder
     @Value
     public static class Request implements RequestMessage {
-        boolean force;
     }
 
     @Jacksonized

File: samples/sample_program/src/main/java/module-info.java
Patch:
@@ -1,3 +1,3 @@
 module io.xpipe.sample {
-    requires io.xpipe;
+    requires io.xpipe.api;
 }
\ No newline at end of file

File: beacon/src/main/java/io/xpipe/beacon/BeaconHandler.java
Patch:
@@ -10,7 +10,7 @@ public interface BeaconHandler {
 
     void prepareBody() throws IOException;
 
-    void startBodyRead() throws IOException;
+    InputStream startBodyRead() throws IOException;
 
     public <T extends ResponseMessage> void sendResponse(T obj) throws Exception;
 

File: beacon/src/main/java/io/xpipe/beacon/exchange/StoreResourceExchange.java
Patch:
@@ -33,7 +33,7 @@ public Class<StoreResourceExchange.Response> getResponseClass() {
     @Value
     public static class Request implements RequestMessage {
         URL url;
-        String type;
+        String providerId;
     }
 
     @Jacksonized

File: beacon/src/main/java/module-info.java
Patch:
@@ -26,5 +26,6 @@
             ReadInfoExchange,
             StatusExchange,
             StopExchange,
+            StoreResourceExchange,
             VersionExchange;
 }
\ No newline at end of file

File: samples/sample_program/src/main/java/io/xpipe/sample/HomePricesSample.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
         // Note that while this is possible, it is not recommended as
         // all queries are routed through the XPipe client anyway.
         // It allows us however to bundle the data with this sample program.
-        homePricesTable = DataSource.wrap(resource).asTable();
+        homePricesTable = DataSource.wrap(resource, "csv").asTable();
 
         // As we didn't pass any configuration parameters, X-Pipe will try to automatically detect
         // the correct configuration parameters. You can access these parameters like this:

File: samples/sample_program/src/main/java/module-info.java
Patch:
@@ -1,3 +1,3 @@
 module io.xpipe.sample {
-    requires io.xpipe.api;
+    requires io.xpipe;
 }
\ No newline at end of file

File: api/src/main/java/io/xpipe/api/XPipeDataStructureSource.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.api;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 
 public interface XPipeDataStructureSource {
 

File: core/src/main/java/io/xpipe/core/data/generic/GenericAbstractReader.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.generic;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 
 public interface GenericAbstractReader extends GenericDataStreamCallback {
 

File: core/src/main/java/io/xpipe/core/data/generic/GenericArrayReader.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.generic;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 import io.xpipe.core.data.node.ArrayNode;
 import io.xpipe.core.data.node.ValueNode;
 

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStreamParser.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.core.data.generic;
 
-import io.xpipe.core.data.DataStructureNode;
-import io.xpipe.core.data.DataStructureNodeIO;
+import io.xpipe.core.data.node.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNodeIO;
 
 import java.io.IOException;
 import java.io.InputStream;

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStreamWriter.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.generic;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 import io.xpipe.core.data.node.ArrayNode;
 import io.xpipe.core.data.node.TupleNode;
 import io.xpipe.core.data.node.ValueNode;

File: core/src/main/java/io/xpipe/core/data/generic/GenericDataStructureNodeReader.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.generic;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 import io.xpipe.core.data.node.ValueNode;
 
 public class GenericDataStructureNodeReader implements GenericDataStreamCallback {

File: core/src/main/java/io/xpipe/core/data/generic/GenericTupleReader.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.generic;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 import io.xpipe.core.data.node.SimpleTupleNode;
 import io.xpipe.core.data.node.TupleNode;
 import io.xpipe.core.data.node.ValueNode;
@@ -130,7 +130,7 @@ public void onTupleEnd() {
             throw new IllegalStateException("Tuple ended but is not full yet");
         }
 
-        created = TupleNode.wrap(names, nodes);
+        created = TupleNode.of(names, nodes);
     }
 
     @Override
@@ -162,6 +162,6 @@ public DataStructureNode create() {
             throw new IllegalStateException();
         }
 
-        return SimpleTupleNode.wrap(names, nodes);
+        return SimpleTupleNode.of(names, nodes);
     }
 }

File: core/src/main/java/io/xpipe/core/data/node/ArrayNode.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.core.data.node;
 
-import io.xpipe.core.data.DataStructureNode;
 import io.xpipe.core.data.type.ArrayType;
 import lombok.EqualsAndHashCode;
 
@@ -70,7 +69,7 @@ public String toString(int indent) {
 
     @Override
     public ArrayType determineDataType() {
-        return ArrayType.of(valueNodes.stream().map(DataStructureNode::determineDataType).toList());
+        return ArrayType.ofSharedType(valueNodes.stream().map(DataStructureNode::determineDataType).toList());
     }
 
     @Override

File: core/src/main/java/io/xpipe/core/data/node/DataStructureNodeAcceptor.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.data;
+package io.xpipe.core.data.node;
 
 public interface DataStructureNodeAcceptor<T extends DataStructureNode> {
 

File: core/src/main/java/io/xpipe/core/data/node/DataStructureNodePointer.java
Patch:
@@ -1,4 +1,4 @@
-package io.xpipe.core.data;
+package io.xpipe.core.data.node;
 
 import java.util.ArrayList;
 import java.util.List;

File: core/src/main/java/io/xpipe/core/data/node/ImmutableValueNode.java
Patch:
@@ -1,7 +1,5 @@
 package io.xpipe.core.data.node;
 
-import io.xpipe.core.data.DataStructureNode;
-
 public class ImmutableValueNode extends ValueNode {
 
     private final byte[] data;

File: core/src/main/java/io/xpipe/core/data/node/MutableValueNode.java
Patch:
@@ -1,7 +1,5 @@
 package io.xpipe.core.data.node;
 
-import io.xpipe.core.data.DataStructureNode;
-
 public class MutableValueNode extends ValueNode {
 
     private byte[] data;

File: core/src/main/java/io/xpipe/core/data/node/NoKeyTupleNode.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.core.data.node;
 
-import io.xpipe.core.data.DataStructureNode;
 import io.xpipe.core.data.type.DataType;
 import io.xpipe.core.data.type.TupleType;
 

File: core/src/main/java/io/xpipe/core/data/node/SimpleTupleNode.java
Patch:
@@ -1,6 +1,5 @@
 package io.xpipe.core.data.node;
 
-import io.xpipe.core.data.DataStructureNode;
 import io.xpipe.core.data.type.DataType;
 import io.xpipe.core.data.type.TupleType;
 import lombok.EqualsAndHashCode;

File: core/src/main/java/io/xpipe/core/data/typed/TypedAbstractReader.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.typed;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 
 public interface TypedAbstractReader extends TypedDataStreamCallback {
 

File: core/src/main/java/io/xpipe/core/data/typed/TypedDataStreamCallback.java
Patch:
@@ -1,6 +1,6 @@
 package io.xpipe.core.data.typed;
 
-import io.xpipe.core.data.DataStructureNode;
+import io.xpipe.core.data.node.DataStructureNode;
 import io.xpipe.core.data.type.TupleType;
 
 import java.io.IOException;

File: core/src/main/java/io/xpipe/core/source/TableDataReadConnection.java
Patch:
@@ -1,7 +1,7 @@
 package io.xpipe.core.source;
 
 
-import io.xpipe.core.data.DataStructureNodeAcceptor;
+import io.xpipe.core.data.node.DataStructureNodeAcceptor;
 import io.xpipe.core.data.node.ArrayNode;
 import io.xpipe.core.data.node.TupleNode;
 import io.xpipe.core.data.type.TupleType;

File: core/src/main/java/io/xpipe/core/source/TableDataSourceDescriptor.java
Patch:
@@ -4,9 +4,9 @@
 
 public abstract class TableDataSourceDescriptor<DS extends DataStore> implements DataSourceDescriptor<DS> {
 
-    public abstract TableDataWriteConnection openWriteConnection(DS store);
+    public abstract TableDataWriteConnection newWriteConnection(DS store);
 
-    public abstract TableDataReadConnection openConnection(DS store);
+    public abstract TableDataReadConnection newReadConnection(DS store);
 
     @Override
     public DataSourceType getType() {

File: core/src/main/java/io/xpipe/core/source/TableDataWriteConnection.java
Patch:
@@ -1,12 +1,12 @@
 package io.xpipe.core.source;
 
-import io.xpipe.core.data.DataStructureNodeAcceptor;
+import io.xpipe.core.data.node.DataStructureNodeAcceptor;
 import io.xpipe.core.data.node.ArrayNode;
-import io.xpipe.core.data.node.SimpleTupleNode;
+import io.xpipe.core.data.node.TupleNode;
 
 public interface TableDataWriteConnection extends DataSourceConnection {
 
-    DataStructureNodeAcceptor<SimpleTupleNode> writeLinesAcceptor();
+    DataStructureNodeAcceptor<TupleNode> writeLinesAcceptor();
 
     void writeLines(ArrayNode lines) throws Exception;
 }

File: extension/src/main/java/io/xpipe/extension/DataSourceGuiProvider.java
Patch:
@@ -20,7 +20,7 @@ default boolean isHidden() {
 
     Region createConfigOptions(DataStore input, Property<? extends DataSourceDescriptor<?>> source);
 
-    DataSourceDescriptor<?> createDefaultDataSource(DataStore input);
+    DataSourceDescriptor<?> createDefaultDataSource(DataStore input) throws Exception;
 
     String getDisplayName();
 

File: core/src/main/java/module-info.java
Patch:
@@ -1,9 +1,9 @@
 import io.xpipe.core.util.CoreJacksonModule;
 
 module io.xpipe.core {
-    requires com.fasterxml.jackson.core;
-    requires com.fasterxml.jackson.databind;
-    requires com.fasterxml.jackson.module.paramnames;
+    requires transitive com.fasterxml.jackson.core;
+    requires transitive com.fasterxml.jackson.databind;
+    requires transitive com.fasterxml.jackson.module.paramnames;
 
     exports io.xpipe.core.store;
     exports io.xpipe.core.source;

File: extension/src/main/java/io/xpipe/extension/DataSourceProvider.java
Patch:
@@ -6,5 +6,5 @@ public interface DataSourceProvider {
 
     String getId();
 
-    Class<? extends DataSource> getType();
+    Class<? extends DataSource<?>> getType();
 }

