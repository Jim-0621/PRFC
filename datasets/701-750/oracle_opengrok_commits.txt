File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2025, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
@@ -1126,7 +1126,6 @@ void testNullifiedChanges() throws Exception {
         final String barName = "bar.txt";
         final String repoName = "gitNoChange";
         Path repositoryRootPath = Path.of(env.getSourceRootPath(), repoName);
-        List<String> projectList = List.of(File.separator + repoName);
         try (Git gitParent = Git.init().setDirectory(parentRepositoryRoot).call()) {
             // Create initial commits for the files in the parent repository.
             final String fooName = "foo.txt";
@@ -1164,7 +1163,7 @@ void testNullifiedChanges() throws Exception {
                 List<RepositoryInfo> repositoryInfos = env.getProjectRepositoriesMap().get(project);
                 assertEquals(1, repositoryInfos.size());
                 assertEquals("git", repositoryInfos.get(0).getType());
-                indexer.doIndexerExecution(projectList, null);
+                indexer.doIndexerExecution(Set.of(project), null);
 
                 // Change the parent repository so that it contains nullified change to the foo.txt file.
                 final String data = "change foo";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1727,7 +1727,7 @@ void indexDown(File dir, String parent, IndexDownArgs args, Progress progress) t
 
         File[] files = dir.listFiles();
         if (files == null) {
-            LOGGER.log(Level.SEVERE, "Failed to get file listing for: ''{0}''", dir.getPath());
+            LOGGER.log(Level.SEVERE, "Failed to get file listing for ''{0}''", dir.getPath());
             return;
         }
         Arrays.sort(files, FILENAME_COMPARATOR);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -711,7 +711,7 @@ public synchronized boolean validateUniversalCtags() {
                 ctagsLanguages.addAll(languages);
             }
 
-            ctagsFound = CtagsUtil.validate(ctagsBinary);
+            ctagsFound = CtagsUtil.isValid(ctagsBinary);
         }
 
         if (ctagsFound) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzerFactory.java
Patch:
@@ -49,7 +49,8 @@ public class FortranAnalyzerFactory extends FileAnalyzerFactory {
         "F95",
         "F03",
         "F08",
-        "F15"};
+        "F15",
+        "F77"};
 
     public FortranAnalyzerFactory() {
         super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/fortran/FortranXrefTest.java
Patch:
@@ -40,7 +40,7 @@ void sampleTest() throws IOException {
         writeAndCompare(new FortranAnalyzerFactory(),
                 "analysis/fortran/sample.f",
                 "analysis/fortran/sample_xref.html",
-                readTagsFromResource("analysis/fortran/sampletags"), 28);
+                readTagsFromResource("analysis/fortran/sampletags"), 32);
     }
 
     @Test

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerVsDeletedDocumentsTest.java
Patch:
@@ -199,6 +199,9 @@ void setup() throws IOException {
 
     @AfterEach
     void cleanup() throws IOException {
+        // Release any references to index files so that it is actually possible to
+        // remove the index files (under data root) on Windows.
+        env.releaseIndexSearchers();
         IOUtils.removeRecursive(Path.of(env.getDataRootPath()));
         // FileUtils.deleteDirectory() avoids AccessDeniedException on Windows.
         FileUtils.deleteDirectory(env.getSourceRootFile());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -1180,7 +1180,7 @@ public void createAnnotationCache(File file, String latestRev) throws CacheExcep
         if (!repository.isWorking() || !repository.isAnnotationCacheEnabled()) {
             throw new CacheException(
                     String.format("repository %s does not allow to create annotation cache for '%s'",
-                            repository, file), Level.FINER);
+                            repository, file), Level.FINER, false);
         }
 
         LOGGER.finest(() -> String.format("creating annotation cache for '%s'", launderLog(file.toString())));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1306,7 +1306,7 @@ private static void createAnnotationCache(File file, Document doc) {
                 // call above) directly.
                 HistoryGuru.getInstance().createAnnotationCache(file, lastRev);
             } catch (CacheException e) {
-                LOGGER.log(e.getLevel(), "failed to create annotation", e);
+                LOGGER.log(e.getLevel(), "failed to create annotation", e.isLogTrace() ? e : e.getMessage());
             }
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDownArgs.java
Patch:
@@ -35,6 +35,7 @@ class IndexFileWork {
     final File file;
     final String path;
     Exception exception;
+    boolean ret;
 
     IndexFileWork(File file, String path) {
         this.file = file;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -237,8 +237,7 @@ public class AnalyzerGuru {
      * Maps from {@link FileAnalyzer#getFileTypeName()} to
      * {@link FileAnalyzerFactory}.
      */
-    private static final Map<String, AnalyzerFactory> FILETYPE_FACTORIES =
-            new HashMap<>();
+    private static final Map<String, AnalyzerFactory> FILETYPE_FACTORIES = new HashMap<>();
 
     /**
      * Maps from {@link FileAnalyzer#getFileTypeName()} to
@@ -771,6 +770,7 @@ public static AbstractAnalyzer.Genre getGenre(AnalyzerFactory factory) {
      * @param fileTypeName a defined instance
      * @return a defined instance or {@code null}
      */
+    @Nullable
     public static AnalyzerFactory findByFileTypeName(String fileTypeName) {
         return FILETYPE_FACTORIES.get(fileTypeName);
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.ada;
@@ -41,7 +41,7 @@ public class AdaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public AdaAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/BZip2AnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.archive;
 
@@ -38,7 +38,7 @@ public class BZip2AnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public BZip2AnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, null, null, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, null, null, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.archive;
 
@@ -38,9 +38,8 @@ public class GZIPAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public GZIPAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, null, null, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, null, null, NAME, false);
     }
-
     @Override
     protected AbstractAnalyzer newAnalyzer() {
         return new GZIPAnalyzer(this);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/TarAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.archive;
 
@@ -34,7 +34,7 @@ public class TarAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TarAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, null, AbstractAnalyzer.Genre.XREFABLE, NAME);
+        super(null, null, SUFFIXES, null, null, null, AbstractAnalyzer.Genre.XREFABLE, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
@@ -57,7 +57,7 @@ protected boolean doesCheckExtraFieldID() {
             new ZipAnalyzerFactory();
 
     private ZipAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, MATCHER, null, AbstractAnalyzer.Genre.XREFABLE, NAME);
+        super(null, null, SUFFIXES, null, MATCHER, null, AbstractAnalyzer.Genre.XREFABLE, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class AsmAnalyzerFactory extends FileAnalyzerFactory {
      * ".s" with {@link AsmAnalyzer}.
      */
     public AsmAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
@@ -44,7 +44,7 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.c;
 
@@ -44,7 +44,7 @@ public class CxxAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CxxAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.clojure;
 
@@ -36,7 +36,7 @@ public class ClojureAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ClojureAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.csharp;
@@ -35,7 +35,7 @@ public class CSharpAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CSharpAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/data/IgnorantAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.data;
 
@@ -45,7 +45,7 @@ public class IgnorantAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public IgnorantAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, null, null, null);
+        super(null, null, SUFFIXES, MAGICS, null, null, null, null, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/data/ImageAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.data;
 
@@ -38,7 +38,7 @@ public class ImageAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ImageAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, null, AbstractAnalyzer.Genre.IMAGE, NAME);
+        super(null, null, SUFFIXES, null, null, null, AbstractAnalyzer.Genre.IMAGE, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
@@ -53,7 +53,7 @@ public AnalyzerFactory forFactory() {
         new MandocAnalyzerFactory();
 
     protected MandocAnalyzerFactory() {
-        super(null, null, null, null, MATCHER, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, null, null, MATCHER, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
@@ -50,7 +50,7 @@ public AnalyzerFactory forFactory() {
         new TroffAnalyzerFactory();
 
     protected TroffAnalyzerFactory() {
-        super(null, null, null, null, MATCHER, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, null, null, MATCHER, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzerFactory.java
Patch:
@@ -40,7 +40,7 @@ public class EiffelAnalyzerFactory extends FileAnalyzerFactory {
      */
     public EiffelAnalyzerFactory() {
         super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN,
-            NAME);
+            NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.erlang;
@@ -39,7 +39,7 @@ public class ErlangAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ErlangAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/ELFAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.executables;
 
@@ -34,7 +34,8 @@ public class ELFAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ELFAnalyzerFactory() {
-        super(null, null, null, MAGICS, null, null, AbstractAnalyzer.Genre.XREFABLE, NAME);
+        super(null, null, null, MAGICS, null, null,
+                AbstractAnalyzer.Genre.XREFABLE, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JarAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
@@ -63,7 +63,8 @@ protected Integer strictExtraFieldID() {
             new JarAnalyzerFactory();
 
     private JarAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, MATCHER, null, AbstractAnalyzer.Genre.XREFABLE, NAME);
+        super(null, null, SUFFIXES, null, MATCHER, null,
+                AbstractAnalyzer.Genre.XREFABLE, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2021, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
@@ -95,7 +95,8 @@ public AnalyzerFactory forFactory() {
         new JavaClassAnalyzerFactory();
 
     private JavaClassAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, MATCHER, null, AbstractAnalyzer.Genre.XREFABLE, NAME);
+        super(null, null, SUFFIXES, null, MATCHER, null,
+                AbstractAnalyzer.Genre.XREFABLE, NAME, false);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.fortran;
@@ -52,7 +52,7 @@ public class FortranAnalyzerFactory extends FileAnalyzerFactory {
         "F15"};
 
     public FortranAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.golang;
 
@@ -38,7 +38,7 @@ public class GolangAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public GolangAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.haskell;
@@ -40,7 +40,7 @@ public class HaskellAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public HaskellAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.hcl;
@@ -40,7 +40,7 @@ public class HCLAnalyzerFactory extends FileAnalyzerFactory {
      * Creates a new instance of {@link HCLAnalyzerFactory}.
      */
     public HCLAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.java;
 
@@ -36,7 +36,7 @@ public class JavaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JavaAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.javascript;
@@ -33,7 +33,7 @@ public class JavaScriptAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {"JS"};
 
     public JavaScriptAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.json;
@@ -35,7 +35,7 @@ public class JsonAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JsonAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.kotlin;
 
@@ -35,7 +35,7 @@ public class KotlinAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public KotlinAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.lisp;
 
@@ -37,7 +37,7 @@ public class LispAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public LispAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.lua;
 
@@ -38,7 +38,7 @@ public class LuaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public LuaAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.pascal;
 
@@ -39,7 +39,7 @@ public class PascalAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PascalAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.perl;
@@ -50,7 +50,7 @@ public class PerlAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PerlAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.php;
@@ -45,7 +45,7 @@ public class PhpAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PhpAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2021, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;
@@ -88,7 +88,7 @@ public AnalyzerFactory forFactory() {
     public static final PlainAnalyzerFactory DEFAULT_INSTANCE = new PlainAnalyzerFactory();
 
     private PlainAnalyzerFactory() {
-        super(null, null, null, null, MATCHER, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, null, null, MATCHER, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.plain;
 
@@ -40,7 +40,7 @@ public class XMLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public XMLAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/html", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/html", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.powershell;
 
@@ -35,7 +35,7 @@ public class PowershellAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PowershellAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.python;
@@ -48,7 +48,7 @@ public class PythonAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PythonAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.r;
@@ -41,7 +41,7 @@ public class RAnalyzerFactory extends FileAnalyzerFactory {
      * ".r", ".rdata", ".rda", and ".rds" with {@link RAnalyzer}.
      */
     public RAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.ruby;
@@ -50,7 +50,7 @@ public class RubyAnalyzerFactory extends FileAnalyzerFactory {
      * Creates a new instance of {@link RubyAnalyzerFactory}.
      */
     public RubyAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2016, Nikolay Denev.
  */
 package org.opengrok.indexer.analysis.rust;
@@ -41,7 +41,7 @@ public class RustAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public RustAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.scala;
 
@@ -39,7 +39,7 @@ public class ScalaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ScalaAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sh;
@@ -60,7 +60,7 @@ public class ShAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ShAnalyzerFactory() {
-        super(NAMES, PREFIXES, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(NAMES, PREFIXES, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -39,7 +39,7 @@ public class PLSQLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PLSQLAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -34,7 +34,7 @@ public class SQLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public SQLAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.swift;
 
@@ -34,7 +34,7 @@ public class SwiftAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public SwiftAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.tcl;
 
@@ -41,7 +41,7 @@ public class TclAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TclAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.terraform;
@@ -40,7 +40,7 @@ public class TerraformAnalyzerFactory extends FileAnalyzerFactory {
      * Creates a new instance of {@link TerraformAnalyzerFactory}.
      */
     public TerraformAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.typescript;
@@ -33,7 +33,7 @@ public class TypeScriptAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {"TS"};
 
     public TypeScriptAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/uue/UuencodeAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2012, 2013, Constantine A. Murenin &lt;C++@Cns.SU&gt;
  */
 package org.opengrok.indexer.analysis.uue;
@@ -51,7 +51,7 @@ public class UuencodeAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public UuencodeAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, false);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/VBAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.vb;
 
@@ -39,7 +39,7 @@ public class VBAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public VBAnalyzerFactory() {
-        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME);
+        super(null, null, SUFFIXES, null, null, "text/plain", AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzerFactory.java
Patch:
@@ -41,7 +41,7 @@ public class VerilogAnalyzerFactory extends FileAnalyzerFactory {
      */
     public VerilogAnalyzerFactory() {
         super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN,
-                NAME);
+                NAME, true);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/yaml/YamlAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2023, Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024, Oracle and/or its affiliates.
  * Portions Copyright (c) 2023, Gino Augustine <gino.augustine@oracle.com>.
  */
 package org.opengrok.indexer.analysis.yaml;
@@ -38,7 +38,7 @@ public class YamlAnalyzerFactory extends FileAnalyzerFactory {
 
     public YamlAnalyzerFactory() {
         super(null, null, SUFFIXES, null, null, "text/plain",
-                AbstractAnalyzer.Genre.PLAIN, NAME);
+                AbstractAnalyzer.Genre.PLAIN, NAME, true);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -2336,7 +2336,7 @@ boolean checkSettings(File file, String path) throws IOException {
                 fileTypeName = doc.get(QueryBuilder.TYPE);
                 if (fileTypeName == null) {
                     // (Should not get here, but break just in case.)
-                    LOGGER.log(Level.FINEST, "Missing TYPE field: ''{0}''", path);
+                    LOGGER.log(Level.WARNING, "Missing TYPE field: ''{0}''", path);
                     break;
                 }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -823,7 +823,7 @@ private static void writeAnnotation(int num, Writer out, Annotation annotation,
      * walk of the file hierarchy. Thus, null character (\u0000) is used both to
      * separate directory components and to separate the path from the date.
      *
-     * @param path path to mangle.
+     * @param path path to mangle. This is assumed to be relative to source root.
      * @param date date string to use.
      * @return the mangled path.
      */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/OpenGrokThreadFactory.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
+import java.util.Objects;
 
 /**
  * ThreadFactory to be used throughout OpenGrok to make sure all threads have common prefix.
@@ -45,7 +46,7 @@ public OpenGrokThreadFactory(String name) {
 
     @Override
     public Thread newThread(@NotNull Runnable runnable) {
-        Thread thread = Executors.defaultThreadFactory().newThread(runnable);
+        Thread thread = Executors.defaultThreadFactory().newThread(Objects.requireNonNull(runnable, "runnable"));
         thread.setName(PREFIX + threadPrefix + thread.getId());
         return thread;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryReader.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.util.List;
+import java.util.Objects;
 
 import org.jetbrains.annotations.NotNull;
 import org.opengrok.indexer.util.IOUtils;
@@ -47,7 +48,7 @@ public int read(char @NotNull [] cbuf, int off, int len) throws IOException {
         if (input == null) {
             input = createInternalReader();
         }
-        return input.read(cbuf, off, len);
+        return input.read(Objects.requireNonNull(cbuf, "cbuf"), off, len);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexCheck.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
@@ -101,7 +102,7 @@ public enum IndexCheckMode {
      * @param configuration configuration based on which to perform the check
      */
     public IndexCheck(@NotNull Configuration configuration) {
-        this(configuration, null);
+        this(configuration, null); // configuration is guarded against null inside this constructor
     }
 
     /**
@@ -111,7 +112,7 @@ public IndexCheck(@NotNull Configuration configuration) {
      *                     on whether projects are enabled in the configuration.
      */
     public IndexCheck(@NotNull Configuration configuration, Collection<String> projectNames) {
-        this.configuration = configuration;
+        this.configuration = Objects.requireNonNull(configuration, "configuration");
         if (projectNames != null) {
             this.projectNames.addAll(projectNames);
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -2124,7 +2124,7 @@ private static class CountingWriter extends Writer {
 
         @Override
         public void write(@NotNull char[] chars, int off, int len) throws IOException {
-            out.write(chars, off, len);
+            out.write(Objects.requireNonNull(chars), off, len);
             count += len;
         }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerVsDeletedDocumentsTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2023, 2024, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.index;
 
@@ -331,7 +331,7 @@ void testIndexTraversalWithDeletedDocuments(boolean projectsEnabled, boolean use
 
             if (useGit && projectsEnabled) {
                 // Verify the history based reindex was actually used.
-                verify(indexDatabase, atLeast(1)).processFileIncremental(any(), any(), any());
+                verify(indexDatabase, atLeast(1)).processFileHistoryBased(any(), any(), any());
             } else {
                 verify(indexDatabase, atLeast(1)).processFile(any(), any(), any());
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -574,6 +574,7 @@ public int exitValue() {
 
             @Override
             public void destroy() {
+                //Empty Method
             }
         };
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLLexer.java
Patch:
@@ -49,7 +49,7 @@ public abstract class HCLLexer extends JFlexSymbolMatcher
 
     private Stack<HCLLexerData> data;
 
-    public HCLLexer() {
+    protected HCLLexer() {
         dataHead = new HCLLexerData();
     }
 
@@ -113,7 +113,7 @@ public void hereOp(String capture) throws IOException {
      * @return true if a Here state was pushed
      */
     public boolean maybeHereStart() throws IOException {
-        if (dataHead.hereSettings != null && dataHead.hereSettings.size() > 0) {
+        if (dataHead.hereSettings != null && !dataHead.hereSettings.isEmpty()) {
             HereDocSettings settings = dataHead.hereSettings.peek();
             yypush(settings.state);
             disjointSpan(HtmlConsts.STRING_CLASS);
@@ -141,7 +141,7 @@ public boolean maybeHereEnd(String capture) throws IOException {
 
         offer(capture);
 
-        if (dataHead.hereSettings.size() > 0) {
+        if (!dataHead.hereSettings.isEmpty()) {
             settings = dataHead.hereSettings.peek();
             yybegin(settings.state);
             if (didZspan) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IndexTimestamp.java
Patch:
@@ -30,7 +30,7 @@
 import org.opengrok.indexer.logger.LoggerFactory;
 
 public class IndexTimestamp {
-    private transient Date lastModified;
+    private Date lastModified;
 
     private static final Logger LOGGER = LoggerFactory.getLogger(IndexTimestamp.class);
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/AccuRevHistoryParser.java
Patch:
@@ -145,11 +145,11 @@ public void processStream(InputStream input) throws IOException {
                     throw new IOException("Could not parse date: " + line, pe);
                 }
 
-            } else if (line.startsWith("  #")) {  // found comment
+            } else if (line.startsWith("  #") && (entry != null)) {  // found comment
 
                 entry.appendMessage(line.substring(3));
 
-            } else if (line.startsWith("  v")) {  // found version
+            } else if (line.startsWith("  v") && (entry != null)) {  // found version
 
                 String[] data = line.split("\\s+");
                 entry.setRevision(data[2]);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperTagParser.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.InputStreamReader;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.NavigableSet;
 import java.util.TreeSet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -54,7 +55,7 @@ public class BitKeeperTagParser implements Executor.StreamHandler {
     /**
      * Store tag entries created by {@link #processStream(InputStream)}.
      */
-    private final TreeSet<TagEntry> entries = new TreeSet<>();
+    private final NavigableSet<TagEntry> entries = new TreeSet<>();
 
     /**
      * Constructor to construct the thing to be constructed.
@@ -70,7 +71,7 @@ public BitKeeperTagParser(String datePattern) {
      *
      * @return entries a set of tag entries
      */
-    public TreeSet<TagEntry> getEntries() {
+    public NavigableSet<TagEntry> getEntries() {
         return entries;
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileAnnotationCache.java
Patch:
@@ -201,6 +201,7 @@ private void writeCache(AnnotationData annotationData, File outfile) throws IOEx
         mapper.writeValue(outfile, annotationData);
     }
 
+    @SuppressWarnings("java:S1764")
     public void store(File file, Annotation annotation) throws CacheException {
         if (annotation.getRevision() == null || annotation.getRevision().isEmpty()) {
             throw new CacheException(String.format("annotation for ''%s'' does not contain revision", file));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/History.java
Patch:
@@ -24,7 +24,6 @@
 package org.opengrok.indexer.history;
 
 import org.jetbrains.annotations.Nullable;
-import org.jetbrains.annotations.VisibleForTesting;
 
 import java.io.Serializable;
 import java.util.ArrayList;
@@ -66,7 +65,6 @@ public History() {
         this(new ArrayList<>());
     }
 
-    @VisibleForTesting
     public History(List<HistoryEntry> entries) {
         this(entries, Collections.emptyList());
     }
@@ -111,7 +109,7 @@ public void setEntries(List<HistoryEntry> entries) {
      * @param entries The entries to add to the list
      */
     public void setHistoryEntries(List<HistoryEntry> entries) {
-        this.entries = entries;
+        this.setEntries(entries);
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -1317,8 +1317,8 @@ public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, C
                         }
                     } catch (Exception ex) {
                         // We want to catch any exception since we are in thread.
-                        LOGGER.log(Level.WARNING, "Could not create " + repositoryInfo.getType()
-                                + " repository object for '" + repositoryInfo.getDirectoryName() + "'", ex);
+                        LOGGER.log(Level.WARNING, ex, () -> "Could not create " + repositoryInfo.getType()
+                                + " repository object for '" + repositoryInfo.getDirectoryName() + "'");
                     } finally {
                         latch.countDown();
                         progress.increment();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
-import java.util.TreeSet;
+import java.util.NavigableSet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -86,7 +86,7 @@ public abstract class Repository extends RepositoryInfo {
      * List of &lt;revision, tags&gt; pairs for repositories which display tags
      * only for files changed by the tagged commit.
      */
-    protected TreeSet<TagEntry> tagList = null;
+    protected NavigableSet<TagEntry> tagList = null;
 
     abstract boolean fileHasHistory(File file);
 
@@ -283,7 +283,7 @@ boolean hasFileBasedTags() {
         return false;
     }
 
-    TreeSet<TagEntry> getTagList() {
+    NavigableSet<TagEntry> getTagList() {
         return this.tagList;
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/NumLinesLOCAccessor.java
Patch:
@@ -79,7 +79,7 @@ public void store(IndexWriter writer, IndexReader reader,
         countsAggregator.iterator().forEachRemaining(counts::add);
         if (counts.size() >= BULK_READ_THRESHOLD) {
             storeBulk(writer, reader, counts, isAggregatingDeltas);
-        } else if (counts.size() > 0) {
+        } else if (!counts.isEmpty()) {
             storeIterative(writer, reader, counts, isAggregatingDeltas);
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/CustomQueryParser.java
Patch:
@@ -58,10 +58,9 @@ public CustomQueryParser(String field) {
 
 ## CommonQueryParserConfiguration.setLowerCaseExpandedTerms removed (LUCENE-7355)
 
-This option has been removed as expanded terms are now normalized through
+Expanded terms are now normalized through
 Analyzer#normalize.
         */
-     //   setLowercaseExpandedTerms(false);
 
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/QueryBuilder.java
Patch:
@@ -220,9 +220,10 @@ public String getDirPath() {
      * @param path a defined value
      * @return a defined, transformed value
      */
+    @SuppressWarnings("java:S4790")
     public static String normalizeDirPath(String path) {
         String norm2;
-        if (path.length() > 0) {
+        if (!path.isEmpty()) {
             String norm1 = path.replace(File.separatorChar, '/');
             norm2 = norm1.endsWith("/") ? norm1 : norm1 + "/";
         } else {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/TermEscaperBase.java
Patch:
@@ -63,10 +63,10 @@ void appendOut(String s) {
      * that the argument to {@link #setOut(StringBuilder)} contains the entire
      * transformation.
      */
+    @SuppressWarnings("java:S3626")
     void consume() {
         try {
             while (yylex()) {
-                //noinspection UnnecessaryContinue
                 continue;
             }
         } catch (IOException ex) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/PhraseMatcher.java
Patch:
@@ -38,12 +38,10 @@ class PhraseMatcher extends LineMatcher {
     @Override
     public int match(String token) {
         if (equal(token, phraseTerms[cur])) {
-            //System.out.println(" PhraseMatcher matched " + token);
             if (cur < phraseTerms.length - 1) {
                 cur++;
                 return WAIT; //matching.
             }
-            //System.out.println(" PhraseMatcher match complete with " + token);
             cur = 0;
             return MATCHED; //matched!
         } else if (cur > 0) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/ColorUtil.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright 2000-2016 JetBrains s.r.o.
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
+ * Licensed under the Apache License, Version 2.0 (the "License")
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Getopt.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class Getopt {
     private static class Option {
-        char option;
+        char optOption;
         String argument;
     }
 
@@ -80,7 +80,7 @@ public void parse() throws ParseException {
                     }
 
                     Option option = new Option();
-                    option.option = chars[jj];
+                    option.optOption = chars[jj];
                     options.add(option);
                     // does this option take an argument?
                     if ((idx + 1) < opts.length() && (opts.charAt(idx + 1) == ':')) {
@@ -117,7 +117,7 @@ public int getOpt() {
 
         ++current;
         if (current < options.size()) {
-            ret = options.get(current).option;
+            ret = options.get(current).optOption;
         }
 
         return ret;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/HeadHandler.java
Patch:
@@ -43,7 +43,7 @@ public class HeadHandler implements Executor.StreamHandler {
     private final List<String> lines = new ArrayList<>();
     private final Charset charset;
 
-    private static final int bufferedReaderSize = 200;
+    private static final int BUFFERED_READER_SIZE = 200;
 
     /**
      * Charset of the underlying reader is set to UTF-8.
@@ -80,14 +80,14 @@ public String get(int index) {
 
     // for testing
     static int getBufferedReaderSize() {
-        return bufferedReaderSize;
+        return BUFFERED_READER_SIZE;
     }
 
     @Override
     public void processStream(InputStream input) throws IOException {
         try (BufferedInputStream bufStream = new BufferedInputStream(input);
         BufferedReader reader = new BufferedReader(new InputStreamReader(bufStream, this.charset),
-                bufferedReaderSize)) {
+                BUFFERED_READER_SIZE)) {
             int lineNum = 0;
             while (lineNum < maxLines) {
                 String line = reader.readLine();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/HostUtil.java
Patch:
@@ -110,7 +110,7 @@ public static boolean isReachable(String webappURI, int timeOutSeconds, @Nullabl
         try {
             int port = HostUtil.urlToPort(webappURI);
             if (port <= 0) {
-                LOGGER.log(Level.SEVERE, "invalid port number for " + webappURI);
+                LOGGER.log(Level.SEVERE, () -> "invalid port number for " + webappURI);
                 return false;
             }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/NullWriter.java
Patch:
@@ -35,14 +35,17 @@ public class NullWriter extends Writer  {
 
     @Override
     public void write(char[] chars, int i, int i1) throws IOException {
+        // No Operation
     }
 
     @Override
     public void flush() throws IOException {
+        // No Operation
     }
 
     @Override
     public void close() throws IOException {
+        // No Operation
     }
 
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/RainbowColorGenerator.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright 2000-2016 JetBrains s.r.o.
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
+ * Licensed under the Apache License, Version 2.0 (the "License")
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/TandemFilename.java
Patch:
@@ -152,6 +152,7 @@ private static String maybePackSha(String filename, String asciiExtension) {
         return filename.substring(0, newLength) + asciiExtension;
     }
 
+    @SuppressWarnings("java:S112")
     private static String sha256base64(String value) {
 
         MessageDigest hasher;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -329,9 +329,7 @@ private static boolean needsHtmlize(char c, boolean pre) {
             case '<':
                 return true;
             case '\n':
-                if (!pre) {
-                    return true;
-                }
+                return !pre;
             default:
                 return (c < ' ' || c > '~') && (c >= ' ' || !Character.isWhitespace(c));
         }
@@ -1641,6 +1639,7 @@ public static String linkifyPattern(String text, Pattern pattern, String name, S
      * @param req the request containing the information about the server
      * @return the converted URL or the input parameter if there was an error
      */
+    @SuppressWarnings("java:S1149")
     public static String completeUrl(String url, HttpServletRequest req) {
         try {
             if (!isHttpUri(url)) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/api/constraints/PositiveDurationValidator.java
Patch:
@@ -34,7 +34,7 @@ public class PositiveDurationValidator implements ConstraintValidator<PositiveDu
 
     @Override
     public void initialize(final PositiveDuration positiveDuration) {
-
+        //Empty Method
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesContainer.java
Patch:
@@ -143,9 +143,7 @@ public void addMessage(final Message m) {
     private void addMessage(final AcceptedMessage acceptedMessage) {
         boolean added = false;
         for (String tag : acceptedMessage.getMessage().getTags()) {
-            if (!tagMessages.containsKey(tag)) {
-                tagMessages.put(tag, new TreeSet<>());
-            }
+            tagMessages.computeIfAbsent(tag, key -> new TreeSet<>());
             if (tagMessages.get(tag).add(acceptedMessage)) {
                 messagesInTheSystem++;
                 added = true;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesUtils.java
Patch:
@@ -32,11 +32,11 @@
 
 import java.io.IOException;
 import java.io.Writer;
-import java.sql.Date;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Date;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/AnalyzerGuruTest.java
Patch:
@@ -50,12 +50,12 @@
 import org.opengrok.indexer.analysis.sh.ShAnalyzerFactory;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNotSame;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertSame;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Tests for the functionality provided by the AnalyzerGuru class.
@@ -65,7 +65,7 @@ class AnalyzerGuruTest {
     @Test
     void testGetFileTypeDescriptions() {
         Map<String, String> map = AnalyzerGuru.getfileTypeDescriptions();
-        assertTrue(map.size() > 0);
+        assertFalse(map.isEmpty());
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/XrefTestBase.java
Patch:
@@ -105,7 +105,7 @@ private int writeXref(
         writeArgs.setDefs(defs);
 
         Xrefer xref = analyzer.writeXref(writeArgs);
-        oss.print(out.toString());
+        oss.print(out);
 
         oss.print(getHtmlEnd());
         return xref.getLOC();

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/yaml/YamlSymbolTokenizerTest.java
Patch:
@@ -47,7 +47,7 @@ class YamlSymbolTokenizerTest {
     private final AbstractAnalyzer analyzer;
 
     YamlSymbolTokenizerTest() {
-        this.analyzer = YamlAnalyzerFactory.DEFAULT_INSTANCE.getAnalyzer();
+        this.analyzer = new YamlAnalyzerFactory().getAnalyzer();
     }
 
     private String[] getTermsFor(Reader r) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/yaml/YamlXrefTest.java
Patch:
@@ -37,7 +37,7 @@ class YamlXrefTest extends XrefTestBase {
     @Test
     @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
-        writeAndCompare(YamlAnalyzerFactory.DEFAULT_INSTANCE,
+        writeAndCompare(new YamlAnalyzerFactory(),
                 "analysis/yaml/sample.yml",
                 "analysis/yaml/sample_xref.html",
                 readTagsFromResource("analysis/yaml/sampletags"), 21);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/LaundromatTest.java
Patch:
@@ -75,12 +75,12 @@ void launderLogMap() {
         Map<String, String[]> laundry = Laundromat.launderLog(testMap);
 
         Map<String, String[]> expected = new HashMap<>();
-        expected.put("a", null);
+        expected.put("a", new String[0]);
         expected.put("b", new String[]{TEST_CONTENT_LOG_LAUNDRY});
         expected.put(TEST_CONTENT_LOG_LAUNDRY, new String[]{"c", "d"});
         expected.put("e<CR>f", new String[]{"g", "h", "c", "d"});
         expected.put("<FF>i<LF>", new String[]{"k", "j"});
-        expected.put("l<TAB><CR>", null);
+        expected.put("l<TAB><CR>", new String[0]);
 
         assertEquals(hashedValues(expected), hashedValues(laundry), "maps″ should be equal");
     }

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -360,6 +360,9 @@ private void populateGenreIfEmpty(DiffData data, InputStream[] inArray) {
         for (int i = 0; i < 2 && data.genre == null; i++) {
             try {
                 data.genre = AnalyzerGuru.getGenre(inArray[i]);
+                if (data.genre == null) {
+                    data.errorMsg = "Unable to determine the file type";
+                }
             } catch (IOException e) {
                 data.errorMsg = "Unable to determine the file type: "
                         + Util.htmlize(e.getMessage());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/History.java
Patch:
@@ -24,6 +24,7 @@
 package org.opengrok.indexer.history;
 
 import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.VisibleForTesting;
 
 import java.io.Serializable;
 import java.util.ArrayList;
@@ -65,7 +66,8 @@ public History() {
         this(new ArrayList<>());
     }
 
-    History(List<HistoryEntry> entries) {
+    @VisibleForTesting
+    public History(List<HistoryEntry> entries) {
         this(entries, Collections.emptyList());
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -703,6 +703,7 @@ public static void writeXref(AnalyzerFactory factory, Reader in,
      * @param file file object, used for logging only
      * @throws java.io.IOException if an error occurs while creating the output
      */
+    @SuppressWarnings("java:S5443")
     public static void writeDumpedXref(String contextPath,
             AnalyzerFactory factory, Reader in, Writer out,
             @Nullable Definitions defs, Annotation annotation, Project project, File file) throws IOException {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -591,7 +591,6 @@ private void readTags(CtagsReader reader) throws InterruptedException {
                     throw new InterruptedException("readLine()");
                 }
 
-                //log.fine("Tagline:-->" + tagLine+"<----ONELINE");
                 if (tagLine == null) {
                     if (!junitTesting) {
                         LOGGER.warning("ctags: Unexpected end of file!");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -93,7 +93,6 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut)
         String path = doc.get(QueryBuilder.PATH);
         if (path != null && path.toLowerCase(Locale.ROOT).endsWith(".gz")) {
             String newname = path.substring(0, path.length() - 3);
-            //System.err.println("GZIPPED OF = " + newname);
             try (InputStream gzis = gzSrc.getStream()) {
                 fa = AnalyzerGuru.getAnalyzer(gzis, newname);
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java
Patch:
@@ -260,7 +260,7 @@ protected boolean processStack(Nameable entity,
                 }
             } catch (AuthorizationException ex) {
                 // Propagate up so that proper HTTP error can be given.
-                LOGGER.log(Level.FINEST, "got authorization exception: " + ex.getMessage());
+                LOGGER.log(Level.FINEST, () -> "got authorization exception: " + ex.getMessage());
                 throw ex;
             } catch (Throwable ex) {
                 LOGGER.log(Level.WARNING,

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorRepository.java
Patch:
@@ -333,7 +333,7 @@ private File pathTranslation(File file, String intermediateElements,
 
     @Override
     boolean isRepositoryFor(File file, CommandTimeoutType cmdType) {
-        File f = new File(file, ".razor");
+        File f = new File(file, RAZOR_DIR);
         return f.exists() && f.isDirectory();
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -654,7 +654,8 @@ public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fie
 
         @Override
         public Date parse(String source) throws ParseException {
-            ParseException head = null, tail = null;
+            ParseException head = null;
+            ParseException tail = null;
             for (SimpleDateFormat formatter : formatters) {
                 try {
                     return formatter.parse(source);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SSCMHistoryParser.java
Patch:
@@ -110,7 +110,7 @@ public void processStream(InputStream input) throws IOException {
             try {
                 currentRevision = Long.parseLong(revision);
             } catch (NumberFormatException ex) {
-                LOGGER.log(Level.WARNING, "Failed to parse revision: '" + revision + "'", ex);
+                LOGGER.log(Level.WARNING, ex, () -> "Failed to parse revision: '" + revision + "'");
             }
             // We're only interested in history entries that change file content
             if (revisionCounter < currentRevision) {
@@ -127,7 +127,7 @@ public void processStream(InputStream input) throws IOException {
                 try {
                     entry.setDate(repository.parse(date));
                 } catch (ParseException ex) {
-                    LOGGER.log(Level.WARNING, "Failed to parse date: '" + date + "'", ex);
+                    LOGGER.log(Level.WARNING, ex, () -> "Failed to parse date: '" + date + "'");
                 }
                 entry.setActive(true);
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -739,7 +739,7 @@ public static String[] parseOptions(String[] argv) throws ParseException {
             parser.on("-m", "--memory", "=number", Double.class,
                     "Amount of memory (MB) that may be used for buffering added documents and",
                     "deletions before they are flushed to the directory (default " +
-                            Configuration.defaultRamBufferSize + ").",
+                            Configuration.DEFAULT_RAM_BUFFER_SIZE + ").",
                     "Please increase JVM heap accordingly too.").execute(memSize ->
                     cfg.setRamBufferSize((Double) memSize));
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Summarizer.java
Patch:
@@ -265,7 +265,7 @@ public Summary getSummary(String text) throws IOException {
         //
         double tokenCount = 0;
         Summary s = new Summary();
-        while (tokenCount <= SUM_LENGTH && excerptSet.size() > 0) {
+        while (tokenCount <= SUM_LENGTH && !excerptSet.isEmpty()) {
             Excerpt excerpt = excerptSet.last();
             excerptSet.remove(excerpt);
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/ConfigurationTest.java
Patch:
@@ -67,7 +67,7 @@ private static class Handler extends DefaultHandler2 {
         @Override
         public void startElement(String uri, String localName, String qname, Attributes attr) {
             if ("void".equals(qname)) {
-                String prop = null;
+                String prop;
                 if ((prop = attr.getValue("property")) != null) {
                     for (Field f : Group.class.getDeclaredFields()) {
                         if (Modifier.isTransient(f.getModifiers())) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -498,6 +498,7 @@ void testAuthorizationFlagDecode() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("java:S5961")
     void testAuthorizationStackDecode() throws IOException {
         String confString = "<?xml version='1.0' encoding='UTF-8'?>\n"
                 + "<java class=\"java.beans.XMLDecoder\" version=\"1.8.0_121\">\n"

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryCacheResultsTest.java
Patch:
@@ -47,7 +47,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class HistoryCacheResultsTest {
+class HistoryCacheResultsTest {
 
     private static TestRepository repository = new TestRepository();
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/AnnotationController.java
Patch:
@@ -45,11 +45,10 @@
 import static org.opengrok.web.util.FileUtil.toFile;
 
 // No need to have PATH configurable.
-@SuppressWarnings("java:S1075")
 @Path(AnnotationController.PATH)
 public class AnnotationController {
 
-    public static final String PATH = "/annotation";
+    public static final String PATH = "annotation";
 
     static class AnnotationDTO {
         @JsonProperty

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/HistoryController.java
Patch:
@@ -55,13 +55,12 @@
 import static org.opengrok.web.util.FileUtil.toFile;
 
 // No need to have PATH configurable.
-@SuppressWarnings("java:S1075")
 @Path(HistoryController.PATH)
 public final class HistoryController {
 
     private static final int MAX_RESULTS = 1000;
 
-    public static final String PATH = "/history";
+    public static final String PATH = "history";
 
     static class HistoryEntryDTO implements JSONable {
         @JsonProperty

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/RepositoriesController.java
Patch:
@@ -37,7 +37,7 @@
 
 import java.io.IOException;
 
-@Path("/repositories")
+@Path("repositories")
 public class RepositoriesController {
 
     private final RuntimeEnvironment env = RuntimeEnvironment.getInstance();

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/parser/SuggesterQueryDataParser.java
Patch:
@@ -99,6 +99,7 @@ public static SuggesterData parse(final SuggesterQueryData data) throws ParseExc
                 builder.getIdentifier());
     }
 
+    @SuppressWarnings("java:S2245")
     private static ProcessedQueryData processQuery(final String text, final int caretPosition) {
         if (text == null) {
             throw new IllegalArgumentException("Cannot process null text");

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/impl/SuggesterServiceImpl.java
Patch:
@@ -71,6 +71,7 @@
 /**
  * Implementation of {@link SuggesterService}.
  */
+@SuppressWarnings("java:S6548")
 public class SuggesterServiceImpl implements SuggesterService {
 
     private static final Logger logger = LoggerFactory.getLogger(SuggesterServiceImpl.class);

File: opengrok-web/src/test/java/org/opengrok/web/api/ApiTaskManagerTest.java
Patch:
@@ -76,7 +76,7 @@ void testTaskSubmitDelete() {
         String location = response.getHeaderString(HttpHeaders.LOCATION);
         assertNotNull(location);
         String uuidString = apiTask.getUuid().toString();
-        assertTrue(location.contains(uuidString));
+        assertTrue(location.endsWith("/status/" + uuidString));
         assertSame(apiTask, apiTaskManager.getApiTask(uuidString));
         apiTaskManager.deleteApiTask(uuidString);
         assertNull(apiTaskManager.getApiTask(uuidString));

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -120,7 +120,7 @@ protected void configure() {
     public void setUp() throws Exception {
         super.setUp();
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResource("/repositories"));
+        repository.create(this.getClass().getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -221,7 +221,7 @@ public void addSearchCountsQueries(final List<String> urls) {
                     }
                 }
             } catch (MalformedURLException e) {
-                logger.log(Level.WARNING, "Could not add search counts for " + urlStr, e);
+                logger.log(Level.WARNING, e, () -> "Could not add search counts for " + urlStr);
             }
         }
     }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/filter/PathAuthorizationFilter.java
Patch:
@@ -84,7 +84,6 @@ public void filter(final ContainerRequestContext context) {
         if (!isPathAuthorized(path, request)) {
             // TODO: this should probably update statistics for denied requests like in AuthorizationFilter
             context.abortWith(Response.status(Response.Status.FORBIDDEN).build());
-            return; // for good measure
         }
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryGuruTest.java
Patch:
@@ -92,7 +92,7 @@ static void setUpClass() throws Exception {
         // a bit incomprehensible, it does not make sense to run the rest of tests
         // if the basic functionality does not work.
         env.setRepositories(repository.getSourceRoot());
-        assertTrue(histGuru.getRepositories().size() > 0);
+        assertFalse(histGuru.getRepositories().isEmpty());
         assertEquals(histGuru.getRepositories().size(),
                 env.getRepositories().size());
 
@@ -169,7 +169,7 @@ void testAnnotationFallback() throws Exception {
         History history = instance.getHistory(file);
         assertNotNull(history);
         assertNotNull(history.getHistoryEntries());
-        assertTrue(history.getHistoryEntries().size() > 0);
+        assertFalse(history.getHistoryEntries().isEmpty());
         String revision = history.getHistoryEntries().get(1).getRevision();
         annotation = instance.annotate(file, revision, false);
         assertNull(annotation);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/Info.java
Patch:
@@ -31,7 +31,6 @@
  *
  * @author Trond Norbye
  */
-@SuppressWarnings("PMD.AvoidThrowingRawExceptionTypes")
 public final class Info {
     private static final Properties properties = new Properties();
 
@@ -50,7 +49,7 @@ public final class Info {
             REVISION = properties.getProperty("changeset", UNKNOWN);
             REVISION_SHORT = properties.getProperty("changeset_short", UNKNOWN);
         } catch (IOException ioe) {
-            throw new RuntimeException(ioe);
+            throw new VersionInfoLoadException(ioe);
         }
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
  * <p>
  * http://www.adaic.org/
  */
+@SuppressWarnings("java:S110")
 public class AdaAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaLexer.java
Patch:
@@ -46,7 +46,8 @@ public void takeLiteral(String value, String className)
 
         int off = 0;
         do {
-            int w = 1, i;
+            int w = 1;
+            int i;
             int ri = value.indexOf("\r", off);
             int ni = value.indexOf("\n", off);
             if (ri == -1 && ni == -1) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzer.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * Represents an analyzer for assembly language.
  */
+@SuppressWarnings("java:S110")
 public class AsmAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzer.java
Patch:
@@ -37,6 +37,7 @@
  *
  * @author Chandan
  */
+@SuppressWarnings("java:S110")
 public class CAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
  *
  * @author Trond Norbye
  */
+@SuppressWarnings("java:S110")
 public class CxxAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzer.java
Patch:
@@ -30,6 +30,7 @@
 import org.opengrok.indexer.analysis.JFlexXref;
 import org.opengrok.indexer.analysis.plain.AbstractSourceCodeAnalyzer;
 
+@SuppressWarnings("java:S110")
 public class ClojureAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected ClojureAnalyzer(AnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Christoph Hofmann
  */
+@SuppressWarnings("java:S110")
 public class CSharpAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected CSharpAnalyzer(AnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzer.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Represents an analyzer for the Eiffel language.
  */
+@SuppressWarnings("java:S110")
 public class EiffelAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzer.java
Patch:
@@ -30,6 +30,7 @@
 import org.opengrok.indexer.analysis.JFlexXref;
 import org.opengrok.indexer.analysis.plain.AbstractSourceCodeAnalyzer;
 
+@SuppressWarnings("java:S110")
 public class ErlangAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Scott Halstead
  */
+@SuppressWarnings("java:S110")
 public class FortranAnalyzer extends AbstractSourceCodeAnalyzer {
 
     FortranAnalyzer(FortranAnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  * @author Patrick Lundquist
  */
 
+@SuppressWarnings("java:S110")
 public class GolangAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * @author Harry Pan
  */
+@SuppressWarnings("java:S110")
 public class HaskellAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
  * Represents an extension of {@link AbstractSourceCodeAnalyzer} for the HCL
  * configuration language.
  */
+@SuppressWarnings("java:S110")
 public class HCLAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Martin Englund
  */
+@SuppressWarnings("java:S110")
 public class JavaAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
  * @author Lubos Kosco
  *
  */
+@SuppressWarnings("java:S110")
 public class JavaScriptAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
  * @author Lubos Kosco
  *
  */
+@SuppressWarnings("java:S110")
 public class JsonAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Lubos Kosco
  */
+@SuppressWarnings("java:S110")
 public class KotlinAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Knut Anders Hatlen
  */
+@SuppressWarnings("java:S110")
 public class LispAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected LispAnalyzer(AnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzer.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * @author Evan Kinney
  */
+@SuppressWarnings("java:S110")
 public class LuaAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Alex Anthony
  */
+@SuppressWarnings("java:S110")
 public class PascalAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Lubos Kosco
  */
+@SuppressWarnings("java:S110")
 public class PerlAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Miroslav Osladil
  */
+@SuppressWarnings("java:S110")
 public class PhpAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/AbstractSourceCodeAnalyzer.java
Patch:
@@ -47,6 +47,7 @@
  * Any child is forced to provide necessary xref and symbol tokenizers,
  * if it fails to do so it will automatically behave like PlainAnalyzer.
  */
+@SuppressWarnings("java:S110")
 public abstract class AbstractSourceCodeAnalyzer extends PlainAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Lubos Kosco
  */
+@SuppressWarnings("java:S110")
 public class PythonAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
  * Represents an extension of {@link AbstractSourceCodeAnalyzer} for the R
  * language.
  */
+@SuppressWarnings("java:S110")
 public class RAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  * Represents an implementation of {@link AbstractSourceCodeAnalyzer} for the
  * Ruby programming language.
  */
+@SuppressWarnings("java:S110")
 public class RubyAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
  * @author Nikolay Denev
  * based on the Python analyzer by Lubos Kosco
  */
+@SuppressWarnings("java:S110")
 public class RustAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Ajay K
  */
+@SuppressWarnings("java:S110")
 public class ScalaAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/ShAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
  * Created on September 21, 2005
  * @author Chandan
  */
+@SuppressWarnings("java:S110")
 public class ShAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzer.java
Patch:
@@ -31,6 +31,7 @@
 import org.opengrok.indexer.analysis.JFlexXref;
 import org.opengrok.indexer.analysis.plain.PlainAnalyzer;
 
+@SuppressWarnings("java:S110")
 public class PLSQLAnalyzer extends PlainAnalyzer {
 
     public PLSQLAnalyzer(AnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzer.java
Patch:
@@ -31,6 +31,7 @@
 import org.opengrok.indexer.analysis.JFlexXref;
 import org.opengrok.indexer.analysis.plain.PlainAnalyzer;
 
+@SuppressWarnings("java:S110")
 public class SQLAnalyzer extends PlainAnalyzer {
 
     public SQLAnalyzer(AnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Lubos Kosco
  */
+@SuppressWarnings("java:S110")
 public class SwiftAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Hemang Lavana
  */
+@SuppressWarnings("java:S110")
 public class TclAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected TclAnalyzer(AnalyzerFactory factory) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
  * Represents an extension of {@link AbstractSourceCodeAnalyzer} for the
  * Terraform configuration language.
  */
+@SuppressWarnings("java:S110")
 public class TerraformAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
 /**
  * Represents an analyzer for the TypeScript language.
  */
+@SuppressWarnings("java:S110")
 public class TypeScriptAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/Consts.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.HashSet;
 import java.util.Set;
 
-@SuppressWarnings("PMD.AvoidThrowingRawExceptionTypes")
 public final class Consts {
 
     public static final Set<String> reservedKeywords;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/VBAnalyzer.java
Patch:
@@ -34,6 +34,7 @@
  *
  * @author Felix Annan
  */
+@SuppressWarnings("java:S110")
 public class VBAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzer.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * Represents an analyzer for the SystemVerilog language.
  */
+@SuppressWarnings("java:S110")
 public class VerilogAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/yaml/YamlAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
  *
  * @author Gino Augustine
  */
+@SuppressWarnings("java:S110")
 public class YamlAnalyzer extends AbstractSourceCodeAnalyzer {
 
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java
Patch:
@@ -149,7 +149,7 @@ public void load(Map<String, Object> parameters) {
             }
         }
 
-        if (getStack().size() > 0 && cnt < getStack().size()) {
+        if (!getStack().isEmpty() && cnt < getStack().size()) {
             setFailed();
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/AccuRevHistoryParser.java
Patch:
@@ -102,7 +102,7 @@ public void processStream(InputStream input) throws IOException {
         /*
          * Accurev history of an element (directory or file) looks like:
          *
-         * element: /./path/to/element eid: 238865 transaction 1486194; purge;
+         * NOSONAR element: /./path/to/element eid: 238865 transaction 1486194; purge;
          * 2012/02/28 12:46:55 ; user: tluksha version 2541/1 (2539/1)
          *
          * transaction 1476285; purge; 2012/02/03 12:16:25 ; user: shaehn

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/AccuRevRepository.java
Patch:
@@ -346,7 +346,7 @@ private boolean getAccuRevInfo(File wsPath, CommandTimeoutType cmdType) {
                             }
                         }
 
-                        if (relRoot.length() > 0) {
+                        if (!relRoot.isEmpty()) {
                             LOGGER.log(Level.INFO, "Source root relative to workspace root by: {0}", relRoot);
                         }
                     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/BZip2Analyzer.java
Patch:
@@ -88,7 +88,6 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut)
         if (path != null
                 && (path.endsWith(".bz2") || path.endsWith(".BZ2") || path.endsWith(".bz"))) {
             String newname = path.substring(0, path.lastIndexOf('.'));
-            //System.err.println("BZIPPED OF = " + newname);
             try (InputStream in = bzSrc.getStream()) {
                 fa = AnalyzerGuru.getAnalyzer(in, newname);
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipMatcherBase.java
Patch:
@@ -68,8 +68,8 @@ public AnalyzerFactory isMagic(byte[] contents, InputStream in)
             in.reset();
 
             int xoff = LOCHDRSIZ + LOCNAM(buf);
-            int xoff_end = Math.min(len, xoff + LOCEXT(buf));
-            while ((xoff < xoff_end) && (len - xoff >= XFHSIZ)) {
+            int xoffEnd = Math.min(len, xoff + LOCEXT(buf));
+            while ((xoff < xoffEnd) && (len - xoff >= XFHSIZ)) {
                 int xfhid = SH(buf, xoff);
                 if (xfhid == strictExtraFieldID()) {
                     return forFactory();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlLexer.java
Patch:
@@ -427,7 +427,7 @@ public void hop(String capture) throws IOException {
      * @return true if a Here state was pushed
      */
     public boolean maybeStartHere() throws IOException {
-        if (hereSettings != null && hereSettings.size() > 0) {
+        if (hereSettings != null && !hereSettings.isEmpty()) {
             HereDocSettings settings = hereSettings.peek();
             yypush(settings.state);
             disjointSpan(HtmlConsts.STRING_CLASS);
@@ -454,7 +454,7 @@ public boolean maybeEndHere(String capture) throws IOException {
 
         offer(capture);
 
-        if (hereSettings.size() > 0) {
+        if (!hereSettings.isEmpty()) {
             settings = hereSettings.peek();
             yybegin(settings.state);
             if (didZspan) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/XMLAnalyzer.java
Patch:
@@ -38,7 +38,6 @@
 import org.opengrok.indexer.analysis.WriteXrefArgs;
 import org.opengrok.indexer.analysis.XrefWork;
 import org.opengrok.indexer.analysis.Xrefer;
-import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.search.QueryBuilder;
 
 /**
@@ -79,8 +78,6 @@ protected int getSpecializedVersionNo() {
     public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOException, InterruptedException {
         doc.add(new OGKTextField(QueryBuilder.FULL, getReader(src.getStream())));
 
-        RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-
         if (xrefOut != null) {
             try (Reader in = getReader(src.getStream())) {
                 WriteXrefArgs args = new WriteXrefArgs(in, xrefOut);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyLexer.java
Patch:
@@ -350,7 +350,7 @@ public void hop(String capture) throws IOException {
      * @return true if a Here state was pushed
      */
     public boolean maybeStartHere() throws IOException {
-        if (dHead.hereSettings != null && dHead.hereSettings.size() > 0) {
+        if (dHead.hereSettings != null && !dHead.hereSettings.isEmpty()) {
             HereDocSettings settings = dHead.hereSettings.peek();
             yypush(settings.state);
             disjointSpan(HtmlConsts.STRING_CLASS);
@@ -378,7 +378,7 @@ public boolean maybeEndHere(String capture) throws IOException {
 
         offer(capture);
 
-        if (dHead.hereSettings.size() > 0) {
+        if (!dHead.hereSettings.isEmpty()) {
             settings = dHead.hereSettings.peek();
             yybegin(settings.state);
             if (didZspan) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogLexer.java
Patch:
@@ -46,11 +46,13 @@ public void chkLOC() {
      * Subclasses must override to get the constant value created by JFlex to
      * represent COMMENT.
      */
+    @SuppressWarnings("java:S100")
     abstract int COMMENT();
 
     /**
      * Subclasses must override to get the constant value created by JFlex to
      * represent SCOMMENT.
      */
+    @SuppressWarnings("java:S100")
     abstract int SCOMMENT();
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationPlugin.java
Patch:
@@ -118,7 +118,7 @@ public synchronized void load(Map<String, Object> parameters) {
             plugin.load(getCurrentSetup());
             setWorking();
         } catch (Throwable ex) {
-            LOGGER.log(Level.SEVERE, "Plugin \"" + getName() + "\" has failed while loading with exception:", ex);
+            LOGGER.log(Level.SEVERE, ex, () -> "Plugin \"" + getName() + "\" has failed while loading with exception:");
             setFailed();
         }
 
@@ -144,7 +144,7 @@ public synchronized void unload() {
                 plugin.unload();
                 plugin = null;
             } catch (Throwable ex) {
-                LOGGER.log(Level.SEVERE, "Plugin \"" + getName() + "\" has failed while unloading with exception:", ex);
+                LOGGER.log(Level.SEVERE, ex, () -> "Plugin \"" + getName() + "\" has failed while unloading with exception:");
             }
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -1564,9 +1564,8 @@ private static Configuration decodeObject(InputStream in) throws IOException {
         List<Group> nonRootGroups = conf.groups.values().stream()
                 .filter(g -> Objects.nonNull(g.getParent()))
                 .collect(Collectors.toList());
-        nonRootGroups.forEach(g -> {
-                    conf.groups.remove(g.getName());
-                }
+        nonRootGroups.forEach(g ->
+                    conf.groups.remove(g.getName())
         );
         // Traversing subgroups and checking for duplicates,
         // effectively transforms the group tree to a structure (Set)

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -2024,8 +2024,8 @@ public MultiReader getMultiReader(SortedSet<String> projects, List<SuperIndexSea
                 subreaders[ii++] = searcher.getIndexReader();
                 searcherList.add(searcher);
             } catch (IOException | NullPointerException ex) {
-                LOGGER.log(Level.SEVERE,
-                        "cannot get IndexReader for project " + proj, ex);
+                LOGGER.log(Level.SEVERE, ex, () ->
+                        "cannot get IndexReader for project " + proj);
                 return null;
             }
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BazaarRepository.java
Patch:
@@ -109,8 +109,8 @@ boolean getHistoryGet(OutputStream out, String parent, String basename, String r
             copyBytes(out::write, process.getInputStream());
             return true;
         } catch (Exception exp) {
-            LOGGER.log(Level.SEVERE,
-                    "Failed to get history: " + exp.getClass().toString(), exp);
+            LOGGER.log(Level.SEVERE, exp, () ->
+                    "Failed to get history: " + exp.getClass().toString());
         } finally {
             // Clean up zombie-processes...
             if (process != null) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -809,7 +809,7 @@ public boolean fillLastHistoryEntries(List<DirectoryEntry> entries) {
         // Wait for all the futures to complete. This is important as they are modifying the input parameter.
         for (Future<Boolean> future : futures) {
             try {
-                if (!future.get()) {
+                if (Boolean.FALSE.equals(future.get())) {
                     ret = false;
                 }
             } catch (Exception e) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSHistoryParser.java
Patch:
@@ -148,8 +148,8 @@ protected static File getCVSFile(String parent, String name) {
                 }
             }
         } catch (Exception e) {
-            LOGGER.log(Level.WARNING,
-                    "Failed to retrieve CVS file of parent: " + parent + ", name: " + name, e);
+            LOGGER.log(Level.WARNING, e, () ->
+                    "Failed to retrieve CVS file of parent: " + parent + ", name: " + name);
         }
         return null;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorHistoryParser.java
Patch:
@@ -202,10 +202,10 @@ private void dumpEntry(HistoryEntry entry) {
     }
 
     private void parseDebug(String message) {
-        LOGGER.log(Level.FINE, "RazorHistoryParser: " + message );
+        LOGGER.log(Level.FINE, () -> "RazorHistoryParser: " + message );
     }
 
     private void parseProblem(String message) {
-        LOGGER.log(Level.SEVERE, "PROBLEM: RazorHistoryParser - " + message);
+        LOGGER.log(Level.SEVERE, () -> "PROBLEM: RazorHistoryParser - " + message);
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorRepository.java
Patch:
@@ -260,8 +260,8 @@ boolean getHistoryGet(OutputStream out, String parent, String basename, String r
                 return true;
             }
         } catch (Exception e) {
-            LOGGER.log(Level.SEVERE, "getHistoryGet( "
-                    + parent + ", " + basename + ", " + rev + ")", e);
+            LOGGER.log(Level.SEVERE, e, () -> "getHistoryGet( "
+                    + parent + ", " + basename + ", " + rev + ")");
         }
         return false;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupCached.java
Patch:
@@ -168,9 +168,8 @@ private Optional<Repository> repoForPath(String path, Set<String> repoParentDirs
                     }
                 }
             } catch (IOException e) {
-                LOGGER.log(Level.WARNING,
-                    "Failed to get relative to canonical for " + path + " and " + repoRoot,
-                    e);
+                LOGGER.log(Level.WARNING, e, () ->
+                    "Failed to get relative to canonical for " + path + " and " + repoRoot);
             }
         }
         return Optional.empty();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryLookupUncached.java
Patch:
@@ -51,9 +51,8 @@ public Repository getRepository(final Path filePath, Set<String> repoParentDirs,
                 try {
                     rel = canonicalizer.resolve(path, path.getFileSystem().getPath(rootKey));
                 } catch (IOException e) {
-                    LOGGER.log(Level.WARNING,
-                        "Failed to get relative to canonical for " + nextPath,
-                        e);
+                    LOGGER.log(Level.WARNING, e, () ->
+                        "Failed to get relative to canonical for " + nextPath);
                     return null;
                 }
                 Repository repo;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java
Patch:
@@ -436,7 +436,7 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
                 out.write("<a href=\"" + Util.uriEncodePath(morePrefix) + pathE + "?" + queryAsURI + "\">[all...]</a>");
             }
         } catch (IOException e) {
-            LOGGER.log(Level.WARNING, "Could not get context for " + path, e);
+            LOGGER.log(Level.WARNING, e, () -> "Could not get context for " + path);
         } finally {
             IOUtils.close(in);
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/StrictLineBreakIterator.java
Patch:
@@ -146,7 +146,7 @@ public int previous() {
 
     @Override
     public int following(int offset) {
-        if (breaks.size() > 0 && breaks.get(breaks.size() - 1) > offset) {
+        if (!breaks.isEmpty() && breaks.get(breaks.size() - 1) > offset) {
             int lo = 0;
             int hi = breaks.size() - 1;
             int mid;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/BoundedBlockingObjectPool.java
Patch:
@@ -65,7 +65,7 @@ public T get(long timeOut, TimeUnit unit) {
                  * When the queue first empties, switch to a strategy of putting
                  * returned objects last instead of first.
                  */
-                if (!puttingLast && objects.size() < 1) {
+                if (!puttingLast && objects.isEmpty()) {
                     puttingLast = true;
                 }
             } catch (InterruptedException ie) {
@@ -86,7 +86,7 @@ public T get() {
                  * When the queue first empties, switch to a strategy of putting
                  * returned objects last instead of first.
                  */
-                if (!puttingLast && objects.size() < 1) {
+                if (!puttingLast && objects.isEmpty()) {
                     puttingLast = true;
                 }
             } catch (InterruptedException ie) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/ClassUtil.java
Patch:
@@ -231,7 +231,7 @@ private static void invokeSetter(Method setter, Object obj, String fieldName, Ob
      */
     public static boolean hasField(Object obj, String fieldName) {
         try {
-            PropertyDescriptor desc = new PropertyDescriptor(fieldName, obj.getClass());
+            new PropertyDescriptor(fieldName, obj.getClass());
         } catch (IntrospectionException e) {
             return false;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Executor.java
Patch:
@@ -283,7 +283,7 @@ public int exec(final boolean reportExceptions, StreamHandler handler) {
                             msg.append(new String(stderr));
                     }
             }
-            LOGGER.log(Level.WARNING, msg.toString());
+            LOGGER.log(Level.WARNING, msg::toString);
         }
 
         return ret;

File: opengrok-web/src/main/java/org/opengrok/web/AuthorizationFilter.java
Patch:
@@ -46,6 +46,7 @@ public class AuthorizationFilter implements Filter {
 
     @Override
     public void init(FilterConfig fc) {
+        // Empty since there is No specific init configuration.
     }
 
     /**
@@ -97,6 +98,7 @@ public void doFilter(ServletRequest sr, ServletResponse sr1, FilterChain fc) thr
 
     @Override
     public void destroy() {
+        // Empty since there is No specific destroy configuration.
     }
 
 }

File: opengrok-web/src/main/java/org/opengrok/web/StatisticsFilter.java
Patch:
@@ -50,6 +50,7 @@ public class StatisticsFilter implements Filter {
 
     @Override
     public void init(FilterConfig fc) throws ServletException {
+        //No init config Operation
     }
 
     @Override
@@ -122,5 +123,6 @@ private boolean isRoot(final HttpServletRequest httpReq) {
 
     @Override
     public void destroy() {
+        //No destroy Operation
     }
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/RestApp.java
Patch:
@@ -29,7 +29,7 @@
 @ApplicationPath(RestApp.API_PATH)
 public class RestApp extends ResourceConfig {
 
-    public static final String API_PATH = "/api/v1";
+    public static final String API_PATH = "api/v1";
 
     public RestApp() {
         register(new SuggesterAppBinder());

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java
Patch:
@@ -55,7 +55,7 @@ public class ConfigurationController {
 
     private final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
-    public static final String PATH = "/configuration";
+    public static final String PATH = "configuration";
 
     @Inject
     private SuggesterService suggesterService;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java
Patch:
@@ -52,7 +52,7 @@
 @Path(FileController.PATH)
 public class FileController {
 
-    public static final String PATH = "/file";
+    public static final String PATH = "file";
 
     private StreamingOutput transfer(File file) throws FileNotFoundException {
         if (!file.exists()) {

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/GroupsController.java
Patch:
@@ -42,7 +42,7 @@
 
 @Path(GroupsController.GROUPS_PATH)
 public final class GroupsController {
-    public static final String GROUPS_PATH = "/groups";
+    public static final String GROUPS_PATH = "groups";
 
     private final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/StatusController.java
Patch:
@@ -43,7 +43,7 @@
 @Path(PATH)
 public class StatusController {
 
-    public static final String PATH = "/status";
+    public static final String PATH = "status";
 
     private static final Logger LOGGER = LoggerFactory.getLogger(StatusController.class);
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/impl/SuggesterServiceImpl.java
Patch:
@@ -122,7 +122,7 @@ public Suggestions getSuggestions(
                 try {
                     s.release();
                 } catch (IOException e) {
-                    logger.log(Level.WARNING, "Could not release " + s, e);
+                    logger.log(Level.WARNING, e, () -> "Could not release " + s);
                 }
             }
         }
@@ -139,7 +139,7 @@ private List<NamedIndexReader> getNamedIndexReaders(
                     superIndexSearchers.add(searcher);
                     return new NamedIndexReader(projectName, searcher.getIndexReader());
                 } catch (IOException e) {
-                    logger.log(Level.WARNING, "Could not get index reader for " + projectName, e);
+                    logger.log(Level.WARNING, e, () -> "Could not get index reader for " + projectName);
                 }
                 return null;
             }).filter(Objects::nonNull).collect(Collectors.toList());
@@ -311,7 +311,7 @@ private void initSuggester() {
         if (rebuildParalleismLevel == 0) {
             rebuildParalleismLevel = 1;
         }
-        logger.log(Level.FINER, "Suggester rebuild parallelism level: " + rebuildParalleismLevel);
+        logger.log(Level.FINER, "Suggester rebuild parallelism level: {}", rebuildParalleismLevel);
         suggester = new Suggester(suggesterDir,
                 suggesterConfig.getMaxResults(),
                 Duration.ofSeconds(suggesterConfig.getBuildTerminationTime()),

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/query/SuggesterQueryParser.java
Patch:
@@ -276,7 +276,7 @@ protected Query newFieldQuery(
 
             SuggesterPhraseQuery spq = new SuggesterPhraseQuery(field, identifier, tokens, this.getPhraseSlop());
             this.suggesterQuery = spq.getSuggesterQuery();
-            replaceIdentifier(field, tokens.stream().filter(t -> t.contains(identifier)).findAny().get());
+            replaceIdentifier(field, tokens.stream().filter(t -> t.contains(identifier)).findAny().orElseThrow());
             return spq;
         }
 

File: plugins/src/main/java/opengrok/auth/plugin/UserPlugin.java
Patch:
@@ -30,6 +30,7 @@
 
 import jakarta.servlet.http.HttpServletRequest;
 import opengrok.auth.plugin.decoders.IUserDecoder;
+import opengrok.auth.plugin.decoders.UserDecoderException;
 import opengrok.auth.plugin.entity.User;
 import org.opengrok.indexer.authorization.IAuthorizationPlugin;
 import org.opengrok.indexer.configuration.Group;
@@ -80,7 +81,7 @@ public void load(Map<String, Object> parameters) {
             decoder = getDecoder(decoderName);
         } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |
                 InvocationTargetException | InstantiationException e) {
-            throw new RuntimeException("cannot load decoder " + decoderName, e);
+            throw new UserDecoderException(decoderName, e);
         }
     }
 

File: plugins/src/main/java/opengrok/auth/plugin/entity/User.java
Patch:
@@ -86,7 +86,7 @@ public void setCookieTimestamp(Date cookieTimestamp) {
     }
 
     public boolean getTimeouted() {
-        return timeouted;
+        return isTimeouted();
     }
 
     public void setTimeouted(boolean timeouted) {

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapException.java
Patch:
@@ -26,7 +26,7 @@
  * Unchecked exception to be thrown when LDAP server pool is down.
  */
 public class LdapException extends Exception {
-    public static final long serialVersionUID = -1;
+    private static final long serialVersionUID = -1;
 
     LdapException(String str) {
         super(str);

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java
Patch:
@@ -346,6 +346,7 @@ static String getSearchDescription(String dn, String filter, String[] attributes
      * @return results transformed with mapper or {@code null} on failure
      * @throws LdapException LDAP exception
      */
+    @SuppressWarnings("java:S2139")
     private <T> LdapSearchResult<T> lookup(String dn, String filter, String[] attributes, AttributeMapper<T> mapper, int fail) throws LdapException {
 
         if (errorTimestamp > 0 && errorTimestamp + interval > System.currentTimeMillis()) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/ada/AdaXrefTest.java
Patch:
@@ -33,6 +33,7 @@
 class AdaXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new AdaAnalyzerFactory(),
                 "analysis/ada/sample.adb",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/c/CXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class CXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new CAnalyzerFactory(),
                 "analysis/c/sample.c",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/c/CxxXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class CxxXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new CxxAnalyzerFactory(),
                 "analysis/c/sample.cc",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/clojure/ClojureXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class ClojureXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new ClojureAnalyzerFactory(),
                 "analysis/clojure/sample.clj",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new ClojureAnalyzerFactory(),
                 "analysis/clojure/truncated.clj",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/csharp/CSharpXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class CSharpXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new CSharpAnalyzerFactory(),
                 "analysis/csharp/sample.cs",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new CSharpAnalyzerFactory(),
                 "analysis/csharp/truncated.cs",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/document/TroffAnalyzerTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.opengrok.indexer.util.TestRepository;
 import org.opengrok.indexer.web.Util;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -99,11 +100,11 @@ public static void tearDownAfterClass() throws Exception {
     void testAnalyze() throws Exception {
         Document doc = new Document();
         StringWriter xrefOut = new StringWriter();
-        analyzer.analyze(doc, new StreamSource() {
+        assertDoesNotThrow(() -> analyzer.analyze(doc, new StreamSource() {
             @Override
             public InputStream getStream() throws IOException {
                 return new ByteArrayInputStream(content.getBytes());
             }
-        }, xrefOut);
+        }, xrefOut));
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/document/TroffXrefTest.java
Patch:
@@ -33,6 +33,7 @@
 class TroffXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new TroffAnalyzerFactory(),
                 "analysis/document/sync.1m",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/eiffel/EiffelXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class EiffelXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new EiffelAnalyzerFactory(),
                 "analysis/eiffel/sample.e",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new EiffelAnalyzerFactory(),
                 "analysis/eiffel/truncated.e",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/erlang/ErlangXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class ErlangXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new ErlangAnalyzerFactory(),
                 "analysis/erlang/sample.erl",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new ErlangAnalyzerFactory(),
                 "analysis/erlang/truncated.erl",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/fortran/FortranXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class FortranXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new FortranAnalyzerFactory(),
                 "analysis/fortran/sample.f",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new FortranAnalyzerFactory(),
                 "analysis/fortran/truncated.f",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/golang/GolangXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class GolangXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new GolangAnalyzerFactory(),
                 "analysis/golang/sample.go",
@@ -43,13 +44,15 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new GolangAnalyzerFactory(),
                 "analysis/golang/truncated.go",
                 "analysis/golang/truncated_xref.html", null, 1);
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldContainEmail() throws IOException {
         writeAndCompare(new GolangAnalyzerFactory(),
                 "analysis/golang/email.go",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/hcl/HCLXrefTest.java
Patch:
@@ -34,13 +34,15 @@
 class HCLXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new HCLAnalyzerFactory(),
                 "analysis/hcl/sample.hcl",
                 "analysis/hcl/sample_xref.html", null, 25);
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new HCLAnalyzerFactory(),
                 "analysis/hcl/truncated.hcl",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/java/JavaXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class JavaXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new JavaAnalyzerFactory(),
                 "analysis/java/Sample.jav",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new JavaAnalyzerFactory(),
                 "analysis/java/truncated.jav",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/json/JsonXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class JsonXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new JsonAnalyzerFactory(),
                 "analysis/json/sample.json",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new JsonAnalyzerFactory(),
                 "analysis/json/truncated.json",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/kotlin/KotlinXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class KotlinXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new KotlinAnalyzerFactory(),
                 "analysis/kotlin/sample.kt",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new KotlinAnalyzerFactory(),
                 "analysis/kotlin/truncated.kt",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/lisp/LispXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class LispXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new LispAnalyzerFactory(),
                 "analysis/lisp/sample.lsp",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new LispAnalyzerFactory(),
                 "analysis/lisp/truncated.lsp",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/lua/LuaXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class LuaXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new LuaAnalyzerFactory(),
                 "analysis/lua/sample.lua",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new LuaAnalyzerFactory(),
                 "analysis/lua/truncated.lua",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/pascal/PascalXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class PascalXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new PascalAnalyzerFactory(),
                 "analysis/pascal/sample.pas",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new PascalAnalyzerFactory(),
                 "analysis/pascal/truncated.pas",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/perl/PerlXrefTest.java
Patch:
@@ -33,13 +33,15 @@
 class PerlXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new PerlAnalyzerFactory(),
                 "analysis/perl/sample.pl",
                 "analysis/perl/samplexrefres.html", null, 258);
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncateStringSpan() throws IOException {
         writeAndCompare(new PerlAnalyzerFactory(),
                 "analysis/perl/truncated.pl",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/plain/OldMacNLXrefTest.java
Patch:
@@ -34,6 +34,7 @@
 class OldMacNLXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCountMultipleLinesForOldMacFile() throws IOException {
         writeAndCompare(PlainAnalyzerFactory.DEFAULT_INSTANCE,
                 "analysis/plain/ErrorList.r.txt",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/powershell/PoshXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class PoshXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new PowershellAnalyzerFactory(),
                 "analysis/powershell/sample.psm1",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new PowershellAnalyzerFactory(),
                 "analysis/powershell/truncated.ps1",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/python/PythonXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class PythonXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new PythonAnalyzerFactory(),
                 "analysis/python/sample.py",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new PythonAnalyzerFactory(),
                 "analysis/python/truncated.py",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/r/RXrefTest.java
Patch:
@@ -36,6 +36,7 @@
 class RXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new RAnalyzerFactory(),
                 "analysis/r/sample.r",
@@ -44,6 +45,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new RAnalyzerFactory(),
                 "analysis/r/truncated.r",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/ruby/RubyXrefTest.java
Patch:
@@ -40,6 +40,7 @@
 class RubyXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new RubyAnalyzerFactory(),
                 "analysis/ruby/sample.rb",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/rust/RustXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class RustXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new RustAnalyzerFactory(),
                 "analysis/rust/sample.rs",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new RustAnalyzerFactory(),
                 "analysis/rust/truncated.rs",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/scala/ScalaXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class ScalaXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new ScalaAnalyzerFactory(),
                 "analysis/scala/sample.scala",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new ScalaAnalyzerFactory(),
                 "analysis/scala/truncated.scala",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/sh/ShXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class ShXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new ShAnalyzerFactory(),
                 "analysis/sh/sample.sh",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new ShAnalyzerFactory(),
                 "analysis/sh/truncated.sh",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/sql/PLSQLXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class PLSQLXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new PLSQLAnalyzerFactory(),
                 "analysis/sql/sample.pls",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new PLSQLAnalyzerFactory(),
                 "analysis/sql/truncated.pls",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/sql/SQLXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class SQLXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new SQLAnalyzerFactory(),
                 "analysis/sql/sample.sql",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new SQLAnalyzerFactory(),
                 "analysis/sql/truncated.sql",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/swift/SwiftXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class SwiftXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new SwiftAnalyzerFactory(),
                 "analysis/swift/sample.swift",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new SwiftAnalyzerFactory(),
                 "analysis/swift/truncated.swift",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/tcl/TclXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class TclXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new TclAnalyzerFactory(),
                 "analysis/tcl/sample.tcl",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new TclAnalyzerFactory(),
                 "analysis/tcl/truncated.tcl",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/terraform/TerraformXrefTest.java
Patch:
@@ -36,6 +36,7 @@
 class TerraformXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new TerraformAnalyzerFactory(),
                 "analysis/terraform/sample.tf",
@@ -44,6 +45,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new TerraformAnalyzerFactory(),
                 "analysis/terraform/truncated.tf",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/typescript/TypeScriptXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class TypeScriptXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new TypeScriptAnalyzerFactory(),
                 "analysis/typescript/sample.ts",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new TypeScriptAnalyzerFactory(),
                 "analysis/typescript/truncated.ts",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/vb/VBXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class VBXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new VBAnalyzerFactory(),
                 "analysis/vb/sample.cls",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new VBAnalyzerFactory(),
                 "analysis/vb/truncated.cls",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/verilog/VerilogXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class VerilogXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new VerilogAnalyzerFactory(),
                 "analysis/verilog/sample.v",
@@ -43,6 +44,7 @@ void sampleTest() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new VerilogAnalyzerFactory(),
                 "analysis/verilog/truncated.v",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/xml/XMLXrefTest.java
Patch:
@@ -34,13 +34,15 @@
 class XMLXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(new XMLAnalyzerFactory(),
                 "analysis/xml/sample.xml",
                 "analysis/xml/sample_xref.html", null, 229);
     }
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new XMLAnalyzerFactory(),
                 "analysis/xml/truncated.xml",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/yaml/YamlXrefTest.java
Patch:
@@ -35,6 +35,7 @@
 class YamlXrefTest extends XrefTestBase {
 
     @Test
+    @SuppressWarnings("squid:S2699")
     void sampleTest() throws IOException {
         writeAndCompare(YamlAnalyzerFactory.DEFAULT_INSTANCE,
                 "analysis/yaml/sample.yml",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/CanonicalRootValidatorTest.java
Patch:
@@ -35,8 +35,8 @@ class CanonicalRootValidatorTest {
 
     @Test
     void testRejectUnseparated() {
-        assertEquals(CanonicalRootValidator.validate("test", "test value"),
-                "test value must end with a separator");
+        assertEquals("test value must end with a separator",
+                CanonicalRootValidator.validate("test", "test value"));
     }
 
     @Test

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/ConfigurationTest.java
Patch:
@@ -47,6 +47,7 @@
 import org.xml.sax.Attributes;
 import org.xml.sax.ext.DefaultHandler2;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -109,7 +110,7 @@ void testTransientKeywordGroups() throws Exception {
             saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
             saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // compliant
             Handler handler = new Handler();
-            saxParser.parse(new BufferedInputStream(in), handler);
+            assertDoesNotThrow( () -> saxParser.parse(new BufferedInputStream(in), handler));
         }
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BitKeeperRepositoryTest.java
Patch:
@@ -103,7 +103,7 @@ private static void validateHistory(History history) {
             assertNotNull(entry.getAuthor(), "File history has missing author.");
             assertNotNull(entry.getDate(), "File history has missing date.");
             assertNotNull(entry.getMessage(), "File history has missing message.");
-            assertEquals(entry.getFiles().size(), 1, "File history has invalid file list.");
+            assertEquals(1, entry.getFiles().size(), "File history has invalid file list.");
         }
 
         // Validate that the renamed files list corresponds

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -61,7 +61,6 @@
 import org.junit.jupiter.api.condition.OS;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
-import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 import org.opengrok.indexer.condition.EnabledForRepository;
 import org.opengrok.indexer.configuration.CommandTimeoutType;
@@ -1038,7 +1037,7 @@ void testFillLastHistoryEntries() throws Exception {
                 collect(Collectors.toList());
 
         assertTrue(spyCache.fillLastHistoryEntries(directoryEntries));
-        Mockito.verify(spyCache, never()).getLastHistoryEntry(ArgumentMatchers.eq(subDir));
+        Mockito.verify(spyCache, never()).getLastHistoryEntry(subDir);
 
         assertEquals(directoryEntries.size() - 3,
                 (int) directoryEntries.stream().filter(e -> e.getDate() != null).count());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryEntryTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
@@ -77,11 +78,11 @@ void getLine() {
      */
     @Test
     void dump() {
-        instance.dump();
+        assertDoesNotThrow( () -> instance.dump());
         instance.setActive(false);
         instance.addFile("testFile1.txt");
         instance.addFile("testFile2.txt");
-        instance.dump();
+        assertDoesNotThrow( () -> instance.dump());
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Set;
 import java.util.TreeMap;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
@@ -152,7 +153,7 @@ void testSerialisation() throws IOException {
         ArrayList<HistoryEntry> serialisableEntryList = new ArrayList<>(entries);
         History history = new History(serialisableEntryList);
         File tempFile = File.createTempFile("tmpHistory1", "", temporaryPath.toFile());
-        FileHistoryCache.writeHistoryTo(history, tempFile);
+        assertDoesNotThrow( () -> FileHistoryCache.writeHistoryTo(history, tempFile));
         // TODO: mock the repository
         // History deserialised = FileHistoryCache.readHistory(tempFile, repository);
         // assertEquals(history, deserialised);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.jupiter.api.Test;
 import org.opengrok.indexer.configuration.CommandTimeoutType;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
@@ -57,7 +58,7 @@ void testMultipleDateFormats() throws ParseException {
         for (String[] test : tests) {
             RepositoryImplementation repository = new RepositoryImplementation();
             repository.setDatePatterns(Arrays.copyOfRange(test, 1, test.length));
-            repository.parse(test[0]);
+            assertDoesNotThrow( () -> repository.parse(test[0]));
         }
     }
 
@@ -80,7 +81,7 @@ void testDateFormats() throws ParseException {
         for (String[] test : tests) {
             RepositoryImplementation repository = new RepositoryImplementation();
             repository.setDatePatterns(new String[]{test[1]});
-            repository.parse(test[0]);
+            assertDoesNotThrow( () -> repository.parse(test[0]));
         }
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexAnalysisSettingsTest.java
Patch:
@@ -43,8 +43,8 @@ class IndexAnalysisSettingsTest {
     @Test
     void shouldAffirmIndexAnalysisSettingsObjuid() {
         String objuid = QueryBuilder.normalizeDirPath("58859C75-F941-42E5-8D1A-FAF71DDEBBA7");
-        assertEquals(objuid, IndexAnalysisSettingsAccessor.INDEX_ANALYSIS_SETTINGS_OBJUID,
-                "IndexAnalysisSettingsDao objuid");
+        assertEquals(IndexAnalysisSettingsAccessor.INDEX_ANALYSIS_SETTINGS_OBJUID,
+                objuid, "IndexAnalysisSettingsDao objuid");
     }
 
     @Test

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -171,7 +171,7 @@ void testSymlinks() throws IndexerException, IOException {
 
         // Check the repository paths.
         List<RepositoryInfo> repos = env.getRepositories();
-        assertEquals(repos.size(), 1);
+        assertEquals(1, repos.size());
         RepositoryInfo repo = repos.get(0);
         assertEquals(File.separator + SYMLINK, repo.getDirectoryNameRelative());
         String epath = sourceRoot.toString() + File.separator + SYMLINK;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterSecondTest.java
Patch:
@@ -67,7 +67,7 @@
  * <p>
  * Derived from Trond Norbye's {@code SearchEngineTest}
  */
-class SearchAndContextFormatterTest2 {
+class SearchAndContextFormatterSecondTest {
 
     private static final int TABSIZE = 8;
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/ProgressTest.java
Patch:
@@ -113,7 +113,7 @@ void testProgress() throws InterruptedException {
             TimeUnit.MILLISECONDS.sleep(10);
             i++;
         }
-        assertSame(loggerThread.getState(), Thread.State.TERMINATED);
+        assertSame(Thread.State.TERMINATED, loggerThread.getState());
 
         Mockito.verify(logger, times(totalCount)).log(any(), anyString());
         Mockito.verify(logger, atLeast(1)).log(same(Level.INFO), anyString());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessagesContainerTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.awaitility.Awaitility.await;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -77,7 +78,7 @@ void addNullTest() {
     @Test
     void removeNullTest() {
         // the call should not throw an exception
-        container.removeAnyMessage(null);
+        assertDoesNotThrow( () -> container.removeAnyMessage(null));
     }
 
     @Test

File: opengrok-web/src/test/java/org/opengrok/web/WebappListenerTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -49,7 +50,7 @@ void testRequest() {
         ServletRequestEvent event = new ServletRequestEvent(servletContext, req);
 
         wl.requestInitialized(event);
-        wl.requestDestroyed(event);
+        assertDoesNotThrow(() -> wl.requestDestroyed(event));
     }
 
     @Test

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -466,7 +466,7 @@ void testIndexed() throws Exception {
         // the message is applied.
 
 
-        assertEquals(markIndexed(projectName).getStatusInfo().getFamily(), Response.Status.Family.SUCCESSFUL);
+        assertEquals(Response.Status.Family.SUCCESSFUL, markIndexed(projectName).getStatusInfo().getFamily());
         assertTrue(env.getProjects().get(projectName).isIndexed(), "indexed flag should be set to true");
 
         // Test that the "indexed" message triggers refresh of current version
@@ -492,7 +492,7 @@ void testList() throws Exception {
         try (Response response = addProject("mercurial")) {
             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());
         }
-        assertEquals(markIndexed("mercurial").getStatusInfo().getFamily(), Response.Status.Family.SUCCESSFUL);
+        assertEquals(Response.Status.Family.SUCCESSFUL, markIndexed("mercurial").getStatusInfo().getFamily());
 
         // Add another project.
         try (Response response = addProject("git")) {

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/RepositoriesControllerTest.java
Patch:
@@ -86,7 +86,8 @@ public void tearDown() throws Exception {
 
     @Test
     void testGetRepositoryTypeOfNonExistentRepository() {
-        assertThrows(NotFoundException.class, () -> getRepoType(Paths.get("/totally-nonexistent-repository").toString()));
+        var path = Paths.get("/totally-nonexistent-repository").toString();
+        assertThrows(NotFoundException.class, () -> getRepoType(path));
     }
 
     @Test

File: suggester/src/main/java/org/opengrok/suggest/SuggesterUtils.java
Patch:
@@ -98,7 +98,7 @@ static long computeScore(final IndexReader indexReader, final String field, fina
 
             return (long) (normalizedDocumentFrequency * NORMALIZED_DOCUMENT_FREQUENCY_MULTIPLIER);
         } catch (IOException e) {
-            logger.log(Level.WARNING, "Could not compute weight for " + bytesRef, e);
+            logger.log(Level.WARNING, e, () -> "Could not compute weight for " + bytesRef);
         }
         return DEFAULT_TERM_WEIGHT;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Project.java
Patch:
@@ -570,8 +570,9 @@ public static Project getProject(String path) {
     /**
      * Get the project for a specific file.
      *
-     * @param file the file to lookup
-     * @return the project that this file belongs to (or {@code null} if the file doesn't belong to a project)
+     * @param file file under source root
+     * @return the project that this file belongs to (or {@code null} if the file doesn't belong to a project,
+     * or it is a symbolic link that is not allowed)
      */
     @Nullable
     public static Project getProject(File file) {

File: suggester/src/main/java/org/opengrok/suggest/SuggesterSearcher.java
Patch:
@@ -293,7 +293,7 @@ private int getPhraseScore(final ComplexQueryData data, final int docBase, final
         while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
             int docId = postingsEnum.docID();
             if (data.documentIds.has(docBase + docId)) {
-                IntsHolder positions = data.scorer.getPositions(docBase + docId);
+                IntsHolder positions = data.scorer.getPositions(docId);
                 if (positions == null) {
                     continue;
                 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -1849,7 +1849,7 @@ public void applyConfig(String configuration, boolean reindex, CommandTimeoutTyp
      * @param reindex is the message result of reindex
      * @param cmdType command timeout type
      * @see ConfigurationChangedListener
-     * </p>
+     *
      */
     public void applyConfig(Configuration config, boolean reindex, CommandTimeoutType cmdType) {
         setConfiguration(config, cmdType);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/framework/PluginFramework.java
Patch:
@@ -26,8 +26,6 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.util.Arrays;
 import java.util.Enumeration;
 import java.util.LinkedList;
@@ -382,7 +380,7 @@ public final void reload() {
 
         // trashing out the old instance of the loader enables us
         // to reload the stack at runtime
-        loader = AccessController.doPrivileged((PrivilegedAction<PluginClassLoader>) () -> new PluginClassLoader(pluginDirectory));
+        loader = new PluginClassLoader(pluginDirectory);
 
         // notify the implementing class that the reload is about to begin
         beforeReload();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/DefaultIndexChangedListener.java
Patch:
@@ -37,7 +37,6 @@
  *
  * @author Trond Norbye
  */
-@SuppressWarnings("PMD.SystemPrintln")
 public class DefaultIndexChangedListener implements IndexChangedListener {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(DefaultIndexChangedListener.class);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -96,7 +96,7 @@
  * Windows already supports opening {@code /var/opengrok} as {@code C:\var\opengrok}
  * </p>
  */
-@SuppressWarnings({"PMD.AvoidPrintStackTrace", "PMD.SystemPrintln"})
+@SuppressWarnings({"PMD.AvoidPrintStackTrace", "PMD.SystemPrintln", "java:S106"})
 public final class Indexer {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Indexer.class);
@@ -162,7 +162,6 @@ public static Indexer getInstance() {
     @SuppressWarnings("PMD.UseStringBufferForStringAppends")
     public static void main(String[] argv) {
         Statistics stats = new Statistics(); //this won't count JVM creation though
-        boolean update = true;
 
         Executor.registerErrorHandler();
         List<String> subFiles = RuntimeEnvironment.getInstance().getSubFiles();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java
Patch:
@@ -80,7 +80,6 @@ public String toString() {
             return messageLevelString;
         }
 
-        @SuppressWarnings("rawtypes")
         public static final Comparator<MessageLevel> VALUE_COMPARATOR = Comparator.comparingInt(Enum::ordinal);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BazaarHistoryParserTest.java
Patch:
@@ -143,7 +143,6 @@ public void parseLogNoFile() throws Exception {
     }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void parseLogDirectory() throws Exception {
         String revId1 = "1234";
         String author1 = "username@example.com";

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/query/SuggesterQueryParser.java
Patch:
@@ -237,7 +237,6 @@ protected Query newFuzzyQuery(final Term term, final float minimumSimilarity, fi
                 replaceIdentifier(term.field(), term.text() + "~" + ((int) minimumSimilarity));
             }
 
-            @SuppressWarnings("deprecation")
             int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity,
                     newTerm.text().codePointCount(0, newTerm.text().length()));
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -596,7 +596,6 @@ void testAllowComplexQueries() {
     }
 
     @Test
-    @SuppressWarnings("unchecked") // for contains
     void testGetPopularityDataSimple() {
         assertTrue(SuggesterServiceImpl.getInstance().increaseSearchCount("rust",
                 new Term(QueryBuilder.FULL, "main"), 10, true));
@@ -611,7 +610,6 @@ void testGetPopularityDataSimple() {
     }
 
     @Test
-    @SuppressWarnings("unchecked") // for contains
     void testGetPopularityDataAll() {
         assertTrue(SuggesterServiceImpl.getInstance().increaseSearchCount("csharp",
                 new Term(QueryBuilder.FULL, "mynamespace"), 10, true));
@@ -630,7 +628,6 @@ void testGetPopularityDataAll() {
     }
 
     @Test
-    @SuppressWarnings("unchecked") // for contains
     void testGetPopularityDataDifferentField() {
         assertTrue(SuggesterServiceImpl.getInstance().increaseSearchCount("swift",
                 new Term(QueryBuilder.FULL, "print"), 10, true));

File: suggester/src/main/java/org/opengrok/suggest/popular/impl/chronicle/BytesRefSizedReader.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * {@link BytesRef} data serializer for {@link net.openhft.chronicle.map.ChronicleMap}.
- * Modified from https://github.com/OpenHFT/Chronicle-Map/blob/master/docs/CM_Tutorial_DataAccess.adoc
+ * Modified from <a href="https://github.com/OpenHFT/Chronicle-Map/blob/master/docs/CM_Tutorial_DataAccess.adoc">...</a>
  */
 public class BytesRefSizedReader implements SizedReader<BytesRef>, Marshallable, ReadResolvable<BytesRefSizedReader> {
 
@@ -46,9 +46,9 @@ private BytesRefSizedReader() {
 
     @NotNull
     @Override
-    @SuppressWarnings("rawtypes")
+    @SuppressWarnings({"rawtypes"})
     public BytesRef read(Bytes in, long size, @Nullable BytesRef using) {
-        if (size < 0L || size > (long) Integer.MAX_VALUE) {
+        if (size < 0L || size > Integer.MAX_VALUE) {
             throw new IORuntimeException("byte[] size should be non-negative int, " +
                     size + " given. Memory corruption?");
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/framework/PluginFramework.java
Patch:
@@ -380,7 +380,7 @@ public final void reload() {
 
         LOGGER.log(Level.INFO, "Plugins are being reloaded from {0}", pluginDirectory.getAbsolutePath());
 
-        // trashing out the old instance of the loaded enables us
+        // trashing out the old instance of the loader enables us
         // to reload the stack at runtime
         loader = AccessController.doPrivileged((PrivilegedAction<PluginClassLoader>) () -> new PluginClassLoader(pluginDirectory));
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SystemController.java
Patch:
@@ -47,9 +47,11 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-@Path("/system")
+@Path(SystemController.PATH)
 public class SystemController {
 
+    public static final String PATH = "system";
+
     private final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
     private static final Logger LOGGER = LoggerFactory.getLogger(SystemController.class);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -576,7 +576,7 @@ public Configuration() {
         setFetchHistoryWhenNotInCache(true);
         setFoldingEnabled(true);
         setGenerateHtml(true);
-        setGroups(new HashMap<>());
+        setGroups(new TreeMap<>());
         setGroupsCollapseThreshold(4);
         setHandleHistoryOfRenamedFiles(false);
         setHistoryBasedReindex(true);

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/GroupsControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2022, 2023, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.web.api.v1.controller;
 
@@ -70,7 +70,7 @@ private List<String> listGroups() {
 
     @Test
     void emptyGroups() {
-        env.setGroups(new HashMap<>());
+        env.setGroups(new TreeMap<>());
         assertFalse(env.hasGroups());
         List<String> groups = listGroups();
         assertNotNull(groups);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/ContextArgs.java
Patch:
@@ -78,7 +78,7 @@ public short getContextSurround() {
      * is displayed to allow the user to view full match results.
      * <p>
      * (N.b. the value is used with Lucene {@code uhighlight}, and {@code short}
-     * is safer, though syntactically inconvenient, to avoid numeric overlow
+     * is safer, though syntactically inconvenient, to avoid numeric overflow
      * that may occur with {@code int} in that library.)
      * @return a positive value
      */

File: opengrok-web/src/main/java/org/opengrok/web/DirectoryListing.java
Patch:
@@ -306,7 +306,7 @@ public void extraListTo(String contextPath, File dir, Writer out,
                 printDateSize(out, child, entry.getDate(), dateFormatter);
                 printNumlines(out, entry, isDir);
                 printLoc(out, entry, isDir);
-                if (entriesWithPathDescriptionsPresent) {
+                if (entriesWithPathDescriptionsPresent && entry.getPathDescription() != null) {
                     out.write("<td>");
                     out.write(entry.getPathDescription());
                     out.write("</td>");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -229,7 +229,7 @@ private void run() throws IOException {
         ctagsOut = new BufferedReader(new InputStreamReader(ctagsProcess.getInputStream(),
             StandardCharsets.UTF_8));
 
-        Thread errThread = new OpenGrokThreadFactory("OpenGrok-ctags-err").newThread(() -> {
+        Thread errThread = new OpenGrokThreadFactory("ctags-err").newThread(() -> {
             try (BufferedReader error = new BufferedReader(new InputStreamReader(ctagsProcess.getErrorStream(),
                     StandardCharsets.UTF_8))) {
                 String s;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -48,6 +48,7 @@
 
 import org.apache.commons.lang3.SystemUtils;
 import org.jetbrains.annotations.Nullable;
+import org.opengrok.indexer.configuration.OpenGrokThreadFactory;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.index.IndexerParallelizer;
 import org.opengrok.indexer.logger.LoggerFactory;
@@ -224,12 +225,11 @@ private void run() throws IOException {
         ProcessBuilder processBuilder = new ProcessBuilder(command);
 
         ctagsProcess = processBuilder.start();
-        ctagsIn = new OutputStreamWriter(
-            ctagsProcess.getOutputStream(), StandardCharsets.UTF_8);
+        ctagsIn = new OutputStreamWriter(ctagsProcess.getOutputStream(), StandardCharsets.UTF_8);
         ctagsOut = new BufferedReader(new InputStreamReader(ctagsProcess.getInputStream(),
             StandardCharsets.UTF_8));
 
-        Thread errThread = new Thread(() -> {
+        Thread errThread = new OpenGrokThreadFactory("OpenGrok-ctags-err").newThread(() -> {
             try (BufferedReader error = new BufferedReader(new InputStreamReader(ctagsProcess.getErrorStream(),
                     StandardCharsets.UTF_8))) {
                 String s;

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -204,6 +204,7 @@ public void contextDestroyed(final ServletContextEvent servletContextEvent) {
         try {
             env.shutdownRevisionExecutor();
             env.shutdownSearchExecutor();
+            env.shutdownDirectoryListingExecutor();
         } catch (InterruptedException e) {
             LOGGER.log(Level.WARNING, "Could not shutdown revision executor", e);
         }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2023, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -81,7 +81,7 @@ public Response set(@Context HttpServletRequest request,
                     env.applyConfig(body, reindex, CommandTimeoutType.RESTFUL);
                     suggesterService.refresh();
                     return null;
-                }));
+                }, Response.Status.CREATED));
     }
 
     @GET
@@ -104,7 +104,7 @@ public Response setField(@Context HttpServletRequest request,
                     env.applyConfig(false, CommandTimeoutType.RESTFUL);
                     suggesterService.refresh();
                     return null;
-                }));
+                }, Response.Status.NO_CONTENT));
     }
 
     @POST

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ConfigurationControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2023, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -97,7 +97,8 @@ void testApplySetAndGetBasicConfig() throws Exception {
         Response response = target("configuration")
                 .request()
                 .put(Entity.xml(configStr));
-        ApiUtils.waitForAsyncApi(response);
+        Response finalResponse = ApiUtils.waitForAsyncApi(response);
+        assertEquals(Response.Status.CREATED.getStatusCode(), finalResponse.getStatus());
 
         assertEquals(srcRoot, env.getSourceRootPath());
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Group.java
Patch:
@@ -295,7 +295,7 @@ public static Group getByName(String name) {
         Group ret = null;
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.hasGroups()) {
-            for (Group grp : env.getGroups()) {
+            for (Group grp : env.getGroups().values()) {
                 if (name.equals(grp.getName())) {
                     ret = grp;
                 }

File: opengrok-web/src/main/java/org/opengrok/web/ProjectHelper.java
Patch:
@@ -85,7 +85,7 @@ public final class ProjectHelper {
 
     private ProjectHelper(PageConfig cfg) {
         this.cfg = cfg;
-        groups = new TreeSet<>(cfg.getEnv().getGroups());
+        groups = new TreeSet<>(cfg.getEnv().getGroups().values());
         ungroupedProjects = new TreeSet<>();
         ungroupedRepositories = new TreeSet<>();
 
@@ -148,7 +148,7 @@ public List<RepositoryInfo> getSortedRepositoryInfo(Project p) {
      * Generates ungrouped projects and repositories.
      */
     private void populateGroups() {
-        groups.addAll(cfg.getEnv().getGroups());
+        groups.addAll(cfg.getEnv().getGroups().values());
         for (Project project : cfg.getEnv().getProjectList()) {
             // filterProjects() only adds groups which match project's name.
             Set<Group> copy = Group.matching(project, groups);

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ProjectsController.java
Patch:
@@ -118,7 +118,7 @@ private void addProjectWorkHorse(String projectName) {
             // Note that the project is inactive in the UI until it is indexed.
             // See isIndexed()
             env.getProjects().put(projectName, project);
-            env.populateGroups(env.getGroups(), new TreeSet<>(env.getProjectList()));
+            env.populateGroups(new TreeSet<>(env.getGroups().values()), new TreeSet<>(env.getProjectList()));
         } else {
             Project project = env.getProjects().get(projectName);
             Map<Project, List<RepositoryInfo>> map = env.getProjectRepositoriesMap();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -585,7 +585,7 @@ public Configuration() {
         //mandoc is default(String)
         setMaxSearchThreadCount(2 * Runtime.getRuntime().availableProcessors());
         setMaxRevisionThreadCount(Runtime.getRuntime().availableProcessors());
-        setMergeCommitsEnabled(false);
+        setMergeCommitsEnabled(true);
         setMessageLimit(500);
         setNavigateWindowEnabled(false);
         setNestingMaximum(1);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -712,13 +712,14 @@ public boolean hasAnnotationCacheForFile(File file) {
     }
 
     /**
-     * Get the last modified times and descriptions for all files and subdirectories in the specified directory.
+     * Get the last modified times and descriptions for all files and subdirectories in the specified directory
+     * and set it into the entries provided.
      * @param directory the directory whose files to check
      * @param entries list of {@link DirectoryEntry} instances
      * @return whether to fall back to file system based time stamps if the date is {@code null}
      * @throws org.opengrok.indexer.history.CacheException if history cannot be retrieved
      */
-    public boolean getLastHistoryEntries(File directory, List<DirectoryEntry> entries) throws CacheException {
+    public boolean fillLastHistoryEntries(File directory, List<DirectoryEntry> entries) throws CacheException {
 
         if (!env.isUseHistoryCacheForDirectoryListing()) {
             LOGGER.log(Level.FINEST, "using history cache to retrieve last modified times for ''{0}}'' is disabled",

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryGuruTest.java
Patch:
@@ -452,7 +452,7 @@ void testGetLastHistoryEntriesWrtMergeCommits(boolean isMergeCommitsEnabled) thr
         }
         boolean useHistoryCacheForDirectoryListingOrig = env.isUseHistoryCacheForDirectoryListing();
         env.setUseHistoryCacheForDirectoryListing(true);
-        boolean fallback = instance.getLastHistoryEntries(repositoryRoot, directoryEntries);
+        boolean fallback = instance.fillLastHistoryEntries(repositoryRoot, directoryEntries);
         if (isMergeCommitsEnabled) {
             assertFalse(fallback);
         } else {

File: opengrok-web/src/main/java/org/opengrok/web/api/ApiTaskManager.java
Patch:
@@ -139,6 +139,7 @@ public void addPool(String name, int threadCount) {
 
     /**
      * Shutdown all executor services and wait 60 seconds for pending tasks.
+     * @throws InterruptedException on termination
      */
     public synchronized void shutdown() throws InterruptedException {
         for (ExecutorService executorService : queues.values()) {

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/SuggesterService.java
Patch:
@@ -66,6 +66,7 @@ public interface SuggesterService {
      * Wait for rebuild. For testing.
      * @param timeout timeout to wait for
      * @param unit timeout unit
+     * @throws InterruptedException on termination
      */
     void waitForRebuild(long timeout, TimeUnit unit) throws InterruptedException;
 

File: opengrok-web/src/test/java/org/opengrok/web/PageConfigTest.java
Patch:
@@ -248,7 +248,7 @@ void testGetSortedFilesDirsFirst() throws IOException {
         assertTrue(file.isFile());
 
         // Make sure the regular file is last.
-        List<String> entries = pageConfig.getSortedFiles(sourceRootFile.listFiles());
+        List<String> entries = PageConfig.getSortedFiles(sourceRootFile.listFiles());
         assertNotNull(entries);
         assertFalse(entries.isEmpty());
         int numEntries = entries.size();
@@ -260,7 +260,7 @@ void testGetSortedFilesDirsFirst() throws IOException {
         Files.createSymbolicLink(link, target);
 
         // Check the symlink was sorted as file.
-        entries = pageConfig.getSortedFiles(sourceRootFile.listFiles());
+        entries = PageConfig.getSortedFiles(sourceRootFile.listFiles());
         assertNotNull(entries);
         assertFalse(entries.isEmpty());
         assertEquals(numEntries + 1, entries.size());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryCache.java
Patch:
@@ -24,7 +24,6 @@
 
 import java.io.File;
 import java.util.List;
-import java.util.Map;
 
 import org.jetbrains.annotations.Nullable;
 import org.opengrok.indexer.search.DirectoryEntry;
@@ -96,10 +95,9 @@ interface HistoryCache extends Cache {
      * specified directory.
      *
      * @param entries list of {@link DirectoryEntry} instances
-     * @return a map from file names to {@link HistoryEntry} instance
      * @throws CacheException on error
      */
-    Map<String, HistoryEntry> getLastHistoryEntries(List<DirectoryEntry> entries) throws CacheException;
+    void fillLastHistoryEntries(List<DirectoryEntry> entries) throws CacheException;
 
     /**
      * Clear entry for single file from history cache.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -1009,7 +1009,7 @@ void testGetLastHistoryEntry() throws Exception {
     }
 
     /**
-     * Test {@link FileHistoryCache#getLastHistoryEntries(List)}, in particular that it avoids
+     * Test {@link FileHistoryCache#fillLastHistoryEntries(List)}, in particular that it avoids
      * getting history cache entries for directories.
      */
     @Test
@@ -1036,8 +1036,7 @@ void testGetLastHistoryEntries() throws Exception {
             directoryEntries.add(new DirectoryEntry(file));
         }
 
-        Map<String, HistoryEntry> historyEntries = spyCache.getLastHistoryEntries(directoryEntries);
-        assertNotNull(historyEntries);
+        spyCache.fillLastHistoryEntries(directoryEntries);
         Mockito.verify(spyCache, never()).getLastHistoryEntry(ArgumentMatchers.eq(subDir));
 
         // Cleanup.

File: opengrok-web/src/test/java/org/opengrok/web/DirectoryListingTest.java
Patch:
@@ -300,7 +300,7 @@ private long getDateValue(Node item) throws Exception {
         String value = firstChild.getNodeValue();
         if (RuntimeEnvironment.getInstance().isUseHistoryCacheForDirectoryListing()) {
             // Assumes that the history cache was created.
-            assertEquals(DirectoryListing.DIRECTORY_BLANK_PLACEHOLDER, value);
+            assertEquals(DirectoryListing.BLANK_PLACEHOLDER, value);
             return DIRECTORY_INTERNAL_DATE;
         }
 
@@ -321,7 +321,7 @@ private int getSize(Node item) throws NumberFormatException {
         Node val = item.getFirstChild();
         assertNotNull(val);
         assertEquals(Node.TEXT_NODE, val.getNodeType());
-        if (DirectoryListing.DIRECTORY_BLANK_PLACEHOLDER.equals(val.getNodeValue().trim())) {
+        if (DirectoryListing.BLANK_PLACEHOLDER.equals(val.getNodeValue().trim())) {
             // track that it had the DIRECTORY_SIZE_PLACEHOLDER character
             return DIRECTORY_INTERNAL_SIZE;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -735,7 +735,7 @@ private static void writeAnnotation(int num, Writer out, Annotation annotation,
         out.write("<span class=\"blame\">");
         if (enabled) {
             out.write(ANCHOR_CLASS_START);
-            out.write("r");
+            out.write("r title-tooltip");
             out.write("\" style=\"background-color: ");
             out.write(annotation.getColors().getOrDefault(r, "inherit"));
             out.write("\" href=\"");

File: opengrok-web/src/main/java/org/opengrok/web/Scripts.java
Patch:
@@ -115,7 +115,7 @@ public String toHtml() {
         putFromWebJar("jquery-tablesorter", "jquery.tablesorter.min.js", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.3", 13, true);
         putjs("searchable-option-list", "js/searchable-option-list-2.0.15", 14, true);
-        putjs("utils", "js/utils-0.0.45", 15, true);
+        putjs("utils", "js/utils-0.0.46", 15, true);
         putjs("repos", "js/repos-0.0.3", 20, true);
         putjs("diff", "js/diff-0.0.5", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2023, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -645,7 +645,7 @@ void testListFiles() throws IOException, IndexerException {
 
         Indexer.getInstance().prepareIndexer(
                 env,
-                false, // don't search for repositories
+                true, // don't search for repositories
                 true, // add projects
                 // don't create dictionary
                 new ArrayList<>(), // subFiles - needed when refreshing history partially

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/AbstractCache.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2023, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 
@@ -132,6 +132,6 @@ public void clearFile(String path) {
     }
 
     public String getCacheFileSuffix() {
-        return ".gz";
+        return "";
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -223,7 +223,7 @@ private void checkDataExistence(String fileName, boolean shouldExist) {
                     assertFalse(historyGuru.hasAnnotationCacheForFile(file));
                 }
             } else {
-                cacheFile = TandemPath.join(fileName, ".gz");
+                cacheFile = TandemPath.join(fileName, dirName.equals(IndexDatabase.XREF_DIR) ? ".gz" : "");
                 File dataFile = new File(dataDir, cacheFile);
 
                 if (shouldExist) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -304,7 +304,7 @@ public void fileRemoved(String path) {
             if (path.equals(this.path)) {
                 RuntimeEnvironment env = RuntimeEnvironment.getInstance();
                 File f = new File(env.getDataRootPath(),
-                        TandemPath.join("historycache" + path, ".gz"));
+                        TandemPath.join("historycache" + path, ""));
                 assertTrue(f.exists(), String.format("history cache file %s should be preserved", f));
             }
             removedFiles.add(path);
@@ -339,7 +339,7 @@ void testRemoveFileOnFileChange() throws Exception {
         Indexer.getInstance().prepareIndexer(env, true, true,
                 null, List.of("mercurial"));
         File historyFile = new File(env.getDataRootPath(),
-                TandemPath.join("historycache" + path, ".gz"));
+                TandemPath.join("historycache" + path, ""));
         assertTrue(historyFile.exists(), String.format("history cache for %s has to exist", path));
 
         // create index

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/AnnotationData.java
Patch:
@@ -112,16 +112,15 @@ public String getRevision(int line) {
     }
 
     /**
-     * Gets the revision for the last change to the specified line.
+     * Gets the representation of the revision to be used for display purposes, which may be abbreviated, for the last change to the specified line.
      *
      * @param line line number (counting from 1)
      * @return revision string, or an empty string if there is no information
      * about the specified line
      */
     public String getRevisionForDisplay(int line) {
         try {
-            AnnotationLine annotationLine = annotationLines.get(line - 1);
-            return annotationLine.getRevision();
+            return annotationLines.get(line - 1).getDisplayRevision();
         } catch (IndexOutOfBoundsException e) {
             return "";
         }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/TestHistoryCollectorVsMergeChangesets.java
Patch:
@@ -50,7 +50,7 @@ public class TestHistoryCollectorVsMergeChangesets {
 
     private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
-    private static final String lastRevision = "4d1b7cfb";
+    private static final String lastRevision = "4d1b7cfb1e7f3fc7360bd2f213d9e634e6a40cf8";
 
     @BeforeAll
     public static void setUpClass() throws Exception {
@@ -80,7 +80,7 @@ void testReindexWithHistoryBasedRepository(boolean usePerPartes) throws Exceptio
                 .setDirectory(localPath)
                 .call()) {
 
-            final String intermediateRevision = "f3ddb4ba";
+            final String intermediateRevision = "f3ddb4ba641598015e04701fc3a598b882775644";
 
             gitClone.reset().setMode(ResetCommand.ResetType.HARD).
                     setRef(intermediateRevision).call();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -22,6 +22,7 @@
  * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2019, Krystof Tulinger <k.tulinger@seznam.cz>.
+ * Portions Copyright (c) 2023, Ric Harris <harrisric@users.noreply.github.com>.
  */
 package org.opengrok.indexer.web;
 
@@ -762,7 +763,7 @@ private static void writeAnnotation(int num, Writer out, Annotation annotation,
             buf.append("<span class=\"most_recent_revision\">");
             buf.append('*');
         }
-        htmlize(r, buf);
+        htmlize(annotation.getRevisionForDisplay(num), buf);
         if (most_recent_revision) {
             buf.append("</span>"); // recent revision span
         }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheOctopusTest.java
Patch:
@@ -71,7 +71,7 @@ public void testStoreAndGet() throws Exception {
 
         cache.store(historyToStore, repo);
 
-        assertEquals("206f862b", cache.getLatestCachedRevision(repo), "latest git-octopus commit");
+        assertEquals("206f862b18a4e1a73025e6c0c82883cb92a89b1d", cache.getLatestCachedRevision(repo), "latest git-octopus commit");
 
         History dHist = cache.get(new File(reposRoot, "d"), repo, true);
         assertNotNull(dHist, "cache get() for git-octopus/d");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryOctopusTest.java
Patch:
@@ -181,7 +181,7 @@ public void testOctopusHistory() throws Exception {
         assertEquals(4, allFiles.size(), "git-octopus files from log");
 
         HistoryEntry first = entries.get(0);
-        assertEquals("206f862b", first.getRevision(), "should be merge commit hash");
+        assertEquals("206f862b18a4e1a73025e6c0c82883cb92a89b1d", first.getRevision(), "should be merge commit hash");
         assertEquals("Merge branches 'file_a', 'file_b' and 'file_c' into master, and add d",
                 first.getMessage(),
                 "should be merge commit message");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -304,7 +304,7 @@ void testGetLastRev() throws IOException, ParseException {
         Document doc = IndexDatabase.getDocument(Paths.get(repository.getSourceRoot(),
                 "git", "main.c").toFile());
         assertNotNull(doc);
-        assertEquals("aa35c258", doc.get(QueryBuilder.LASTREV));
+        assertEquals("aa35c25882b9a60a97758e0ceb276a3f8cb4ae3a", doc.get(QueryBuilder.LASTREV));
     }
 
     static void changeFileAndCommit(Git git, File file, String comment) throws Exception {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -588,7 +588,7 @@ public Configuration() {
         // webappCtags is default(boolean)
         setXrefTimeout(30);
         setApiTimeout(300); // 5 minutes
-        setConnectTimeout(3);
+        setConnectTimeout(10);
     }
 
     public String getRepoCmd(String clazzName) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/HostUtil.java
Patch:
@@ -78,7 +78,8 @@ private static boolean isWebAppReachable(String webappURI, int timeOutSeconds, @
                 .target(webappURI)
                     .path("api")
                     .path("v1")
-                    .path("configuration")
+                    .path("system")
+                    .path("ping")
                     .request()
                     .headers(headers)
                     .get();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerUtil.java
Patch:
@@ -46,7 +46,7 @@ private IndexerUtil() {
      */
     public static MultivaluedMap<String, Object> getWebAppHeaders() {
         MultivaluedMap<String, Object> headers = new MultivaluedHashMap<>();
-        String token = null;
+        String token;
         if ((token = RuntimeEnvironment.getInstance().getIndexerAuthenticationToken()) != null) {
             headers.add(HttpHeaders.AUTHORIZATION, "Bearer " + token);
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -23,6 +23,7 @@
  */
 package org.opengrok.indexer.configuration;
 
+import static java.lang.Integer.max;
 import static org.opengrok.indexer.configuration.Configuration.makeXMLStringAsConfiguration;
 import static org.opengrok.indexer.index.IndexerUtil.getWebAppHeaders;
 
@@ -1177,7 +1178,7 @@ public int getIndexingParallelism() {
      */
     public int getRepositoryInvalidationParallelism() {
         int parallelism = syncReadConfiguration(Configuration::getRepositoryInvalidationParallelism);
-        return parallelism < 1 ? (Runtime.getRuntime().availableProcessors() / 2) : parallelism;
+        return parallelism < 1 ? max(Runtime.getRuntime().availableProcessors() / 2, 1) : parallelism;
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JarAnalyzer.java
Patch:
@@ -35,6 +35,7 @@
 import org.opengrok.indexer.analysis.AnalyzerGuru;
 import org.opengrok.indexer.analysis.FileAnalyzer;
 import org.opengrok.indexer.analysis.OGKTextField;
+import org.opengrok.indexer.analysis.OGKTextVecField;
 import org.opengrok.indexer.analysis.StreamSource;
 import org.opengrok.indexer.search.QueryBuilder;
 import org.opengrok.indexer.web.Util;
@@ -112,7 +113,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
         String name = QueryBuilder.DEFS;
         if (jfbuilder.hasField(name)) {
             String fstr = jfbuilder.write(name).toString();
-            doc.add(new OGKTextField(name, fstr, Store.YES));
+            doc.add(new OGKTextVecField(name, fstr, Store.NO));
         }
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -60,6 +60,7 @@
 import org.opengrok.indexer.analysis.AnalyzerFactory;
 import org.opengrok.indexer.analysis.FileAnalyzer;
 import org.opengrok.indexer.analysis.OGKTextField;
+import org.opengrok.indexer.analysis.OGKTextVecField;
 import org.opengrok.indexer.analysis.StreamSource;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
@@ -153,7 +154,7 @@ void analyze(Document doc, InputStream in, Writer xrefOut,
 
         if (jfbuilder == null) {
             String dstr = dout.toString();
-            doc.add(new OGKTextField(QueryBuilder.DEFS, dstr, Store.YES));
+            doc.add(new OGKTextVecField(QueryBuilder.DEFS, dstr, Store.NO));
 
             String rstr = rout.toString();
             doc.add(new OGKTextField(QueryBuilder.REFS, rstr, Store.NO));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/OGKUnifiedHighlighter.java
Patch:
@@ -63,11 +63,12 @@ public class OGKUnifiedHighlighter extends UnifiedHighlighter {
 
     /**
      * Initializes an instance with
-     * {@link UnifiedHighlighter#UnifiedHighlighter(org.apache.lucene.search.IndexSearcher, org.apache.lucene.analysis.Analyzer)}
+     * {@link UnifiedHighlighter#UnifiedHighlighter(UnifiedHighlighter.Builder)}
      * for the specified {@code indexSearcher} and {@code indexAnalyzer}, and
      * stores the {@code env} for later use.
      * @param env a required instance
      * @throws IllegalArgumentException if any argument is null
+     * @param uhBuilder a required instance
      */
     public OGKUnifiedHighlighter(RuntimeEnvironment env,
                                  UnifiedHighlighter.Builder uhBuilder) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -153,7 +153,7 @@ void analyze(Document doc, InputStream in, Writer xrefOut,
 
         if (jfbuilder == null) {
             String dstr = dout.toString();
-            doc.add(new OGKTextField(QueryBuilder.DEFS, dstr, Store.NO));
+            doc.add(new OGKTextField(QueryBuilder.DEFS, dstr, Store.YES));
 
             String rstr = rout.toString();
             doc.add(new OGKTextField(QueryBuilder.REFS, rstr, Store.NO));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -207,8 +207,7 @@ public final class Configuration {
     /*
      * Set to false if we want to disable fetching history of individual files
      * (by running appropriate SCM command) when the history is not found
-     * in history cache for repositories capable of fetching history for
-     * directories.
+     * in history cache for repositories capable of fetching history for directories.
      */
     private boolean fetchHistoryWhenNotInCache;
     /*

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -523,7 +523,8 @@ private History getHistoryFromRepository(File file, Repository repository, boole
          * fetched in the first phase of indexing.
          */
         if (env.isIndexer() && isHistoryIndexDone() &&
-                repository.isHistoryEnabled() && repository.hasHistoryForDirectories()) {
+                repository.isHistoryEnabled() && repository.hasHistoryForDirectories() &&
+                !env.isFetchHistoryWhenNotInCache()) {
             LOGGER.log(Level.FINE, "not getting the history for ''{0}'' in repository {1} as the it supports "
                     + "history for directories",
                     new Object[]{file, repository});

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ProjectsController.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2023, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -156,8 +156,7 @@ private List<RepositoryInfo> getRepositoriesInDir(final File projDir) {
         HistoryGuru histGuru = HistoryGuru.getInstance();
 
         // There is no need to perform the work of invalidateRepositories(),
-        // since addRepositories() calls getRepository() for each of
-        // the repos.
+        // since addRepositories() calls getRepository() for each of the repositories.
         return new ArrayList<>(histGuru.addRepositories(new File[]{projDir}));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -1014,7 +1014,8 @@ public void prepareIndexer(RuntimeEnvironment env,
                                List<String> repositories) throws IndexerException, IOException {
 
         if (!env.validateUniversalCtags()) {
-            throw new IndexerException("Didn't find Universal Ctags");
+            throw new IndexerException("Could not find working Universal ctags. " +
+                    "Pro tip: avoid installing Universal ctags from snap packages.");
         }
 
         // Projects need to be created first since when adding repositories below,
@@ -1235,7 +1236,7 @@ private static void exitWithHelp() {
     }
 
     private static String getCtagsCommand() {
-        Ctags ctags = CtagsUtil.newInstance(env);
+        Ctags ctags = new Ctags();
         return Executor.escapeForShell(ctags.getArgv(), true, SystemUtils.IS_OS_WINDOWS);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
- * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2023, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.index;
 
@@ -33,7 +33,6 @@
 import org.opengrok.indexer.configuration.OpenGrokThreadFactory;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.util.BoundedBlockingObjectPool;
-import org.opengrok.indexer.util.CtagsUtil;
 import org.opengrok.indexer.util.LazilyInstantiate;
 import org.opengrok.indexer.util.ObjectFactory;
 import org.opengrok.indexer.util.ObjectPool;
@@ -273,7 +272,7 @@ private void createLazyHistoryFileExecutor() {
     private class CtagsObjectFactory implements ObjectFactory<Ctags> {
 
         public Ctags createNew() {
-            return CtagsUtil.newInstance(env);
+            return new Ctags();
         }
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/CtagsTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2023, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
@@ -59,8 +59,7 @@ public static void setUpClass() throws Exception {
          * The config file contains assembly specific settings so it should
          * not be harmful to other test cases.
          */
-        String extraOptionsFile =
-                repository.getSourceRoot() + "/bug19195/ctags.config";
+        String extraOptionsFile = repository.getSourceRoot() + "/bug19195/ctags.config";
         ctags.setCTagsExtraOptionsFile(extraOptionsFile);
     }
 

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -1477,6 +1477,7 @@ public SearchHelper prepareSearch() {
      * executing the prepared query or continue processing.
      * <p>
      * This method stops populating fields as soon as an error occurs.
+     * @param sortOrder instance of {@link SortOrder}
      * @return a search helper.
      */
     public SearchHelper prepareInternalSearch(SortOrder sortOrder) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/LatestRevisionUtil.java
Patch:
@@ -102,7 +102,7 @@ public static String getLastRevFromIndex(File file) {
                 }
                 Date fileDate = new Date(file.lastModified());
                 if (docDate.compareTo(fileDate) < 0) {
-                    LOGGER.log(Level.FINER, "document for '{0}' is out of sync", file);
+                    LOGGER.log(Level.FINER, "document for ''{0}'' is out of sync", file);
                     return null;
                 }
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -311,7 +311,9 @@ public Annotation annotate(File file, @Nullable String rev, boolean fallback) th
             return null;
         }
 
+        Statistics statistics = new Statistics();
         completeAnnotationWithHistory(file, annotation, repo);
+        statistics.report(LOGGER, Level.FINEST, String.format("completed annotation with history for '%s'", file));
 
         return annotation;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java
Patch:
@@ -248,7 +248,7 @@ private void createLazyCtagsWatcherExecutor() {
 
     private void createLazyXrefWatcherExecutor() {
         lzXrefWatcherExecutor = LazilyInstantiate.using(() ->
-                new ScheduledThreadPoolExecutor(1,
+                new ScheduledThreadPoolExecutor(indexingParallelism,
                         new OpenGrokThreadFactory("xref-watcher")));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -306,7 +306,7 @@ public final class Configuration {
     private boolean historyBasedReindex;
 
     /**
-     * types of handling history for remote SCM repositories:
+     * History handling types for remote SCM repositories.
      * <ul>
      *  <li><code>ON</code> - index history and display it in webapp</li>
      *  <li><code>OFF</code> - do not index or display history in webapp</li>

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/AnnotationCache.java
Patch:
@@ -37,6 +37,7 @@ public interface AnnotationCache extends Cache {
      * @param file file under source root to get the annotation for
      * @param rev requested revision
      * @return {@link Annotation} object or <code>null</code>
+     * @throws AnnotationException on error
      */
     @Nullable
     Annotation get(File file, String rev) throws AnnotationException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/NumLinesLOCAggregator.java
Patch:
@@ -52,6 +52,7 @@ public Iterator<AccumulatedNumLinesLOC> iterator() {
      * Registers the specified counts. Values should be negative when deleting a
      * file or when updating a file's analysis to reverse former values before
      * re-registering.
+     * @param counts {@link NumLinesLOC} instance
      */
     public void register(NumLinesLOC counts) {
         File file = new File(counts.getPath());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/NumLinesLOCUtil.java
Patch:
@@ -35,6 +35,7 @@ public class NumLinesLOCUtil {
 
     /**
      * Reads data, if they exist, from the specified document.
+     * @param doc {@link Document} instance
      * @return a defined instance
      */
     public static NullableNumLinesLOC read(Document doc) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -443,6 +443,7 @@ History getHistory(File file, String sinceRevision) throws HistoryException {
         return getHistory(file, sinceRevision, null);
     }
 
+    @Override
     public int getPerPartesCount() {
         return MAX_CHANGESETS;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryException.java
Patch:
@@ -23,8 +23,7 @@
 package org.opengrok.indexer.history;
 
 /**
- * Exception thrown when retrieval or manipulation of history information
- * fails.
+ * Exception thrown when retrieval or manipulation of history information fails.
  */
 public class HistoryException extends Exception {
     private static final long serialVersionUID = 1L;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2014, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Ric Harris <harrisric@users.noreply.github.com>.
  */
@@ -274,7 +274,7 @@ void testStoreAndGetIncrementalTags() throws Exception {
         assertNull(retrievedHistoryMainC.getTags().get(e2.getRevision()), "Invalid tag list for revision 1");
 
         // Reindex from scratch.
-        String histCachePath = FileHistoryCache.getRepositoryHistDataDirname(repo);
+        String histCachePath = CacheUtil.getRepositoryCacheDataDirname(repo, cache);
         assertNotNull(histCachePath);
         File dir = new File(histCachePath);
         assertTrue(dir.isDirectory());
@@ -377,7 +377,7 @@ void testStoreAndGet() throws Exception {
         assertSameEntry(newEntry1, updatedEntries.removeFirst(), false);
 
         // test clearing of cache
-        String dirPath = FileHistoryCache.getRepositoryHistDataDirname(repo);
+        String dirPath = CacheUtil.getRepositoryCacheDataDirname(repo, cache);
         assertNotNull(dirPath);
         File dir = new File(dirPath);
         assertTrue(dir.isDirectory());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryWithPerPartesHistoryTest.java
Patch:
@@ -78,7 +78,7 @@ public void tearDown() {
      */
     @Test
     void testChangesets() throws HistoryException {
-        // To avoid calling getHistory() for individual files via createCache() below.
+        // To avoid calling getHistory() for individual files via createHistoryCache() below.
         RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(false);
 
         ArgumentCaptor<String> stringArgumentCaptor1 = ArgumentCaptor.forClass(String.class);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -184,7 +184,7 @@ void testSymlinks() throws IndexerException, IOException {
         File fileInRepo = new File(repoRoot, "main.c");
         assertTrue(fileInRepo.exists());
         assertTrue(HistoryGuru.getInstance().hasHistory(fileInRepo));
-        assertTrue(HistoryGuru.getInstance().hasCacheForFile(fileInRepo));
+        assertTrue(HistoryGuru.getInstance().hasHistoryCacheForFile(fileInRepo));
 
         // cleanup
         IOUtils.removeRecursive(realSource);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AbstractAnalyzer.java
Patch:
@@ -125,6 +125,8 @@ public abstract void analyze(Document doc, StreamSource src, Writer xrefOut)
     /**
      * Subclasses must override to incorporate a determined number of lines and
      * lines-of-code (LOC).
+     * @param doc Document instance
+     * @param counts NumLinesLOC instance
      */
     protected abstract void addNumLinesLOC(Document doc, NumLinesLOC counts);
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -509,6 +509,7 @@ public static void addExtension(String extension, AnalyzerFactory factory) {
      * {@link #addExtension(String, AnalyzerFactory)} and
      * {@link #addPrefix(String, AnalyzerFactory)} merged with default language
      * mappings of OpenGrok's analyzers.
+     * @return LangMap instance
      */
     public static LangMap getLangMap() {
         return langMap.mergeSecondary(defaultLangMap).unmodifiable();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/TextAnalyzer.java
Patch:
@@ -94,6 +94,8 @@ public Xrefer writeXref(WriteXrefArgs args) throws IOException {
     /**
      * Gets a BOM-stripped {@link Reader} (default UTF-8 charset) of the
      * specified {@code stream}, wrapped in a {@link ZeroReader}.
+     * @param stream input stream
+     * @return Reader instance
      */
     protected Reader getReader(InputStream stream) throws IOException {
         // sourceRoot is read with UTF-8 as a default.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -1066,13 +1066,15 @@ public void setWebappLAF(String webappLAF) {
 
     /**
      * Gets a value indicating if the web app should run ctags as necessary.
+     * @return true if ctags should be run, false otherwise
      */
     public boolean isWebappCtags() {
         return webappCtags;
     }
 
     /**
      * Sets a value indicating if the web app should run ctags as necessary.
+     * @param value true or false
      */
     public void setWebappCtags(boolean value) {
         this.webappCtags = value;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -849,6 +849,8 @@ public static String uid2url(String uid) {
      * {@link org.opengrok.indexer.index.Indexer#PATH_SEPARATOR} in order not
      * to conflict with the Lucene escape character and also so {@code path}
      * appears as a correctly formed URI in search results.
+     * @param path path to fix
+     * @return fixed path
      */
     public static String fixPathIfWindows(String path) {
         if (path != null && SystemUtils.IS_OS_WINDOWS) {

File: suggester/src/main/java/org/opengrok/suggest/SuggesterProjectData.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.suggest;
 
@@ -446,7 +446,8 @@ boolean incrementSearchCount(final Term term, final int value, boolean waitForLo
         }
 
         try {
-            if (lookups.get(term.field()).get(term.text()) == null) {
+            WFSTCompletionLookup lookup = lookups.get(term.field());
+            if (lookup == null || lookup.get(term.text()) == null) {
                 logger.log(Level.FINE, "Cannot increment search count for unknown term {0} in {1}",
                         new Object[]{term, suggesterDir});
                 return false; // unknown term

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -81,6 +81,7 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.opengrok.indexer.configuration.CommandTimeoutType;
+import org.opengrok.indexer.configuration.OpenGrokThreadFactory;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.ForbiddenSymlinkException;
@@ -784,7 +785,7 @@ private void rebuildTagList(File directory) {
      */
     @Override
     protected void buildTagList(File directory, CommandTimeoutType cmdType) {
-        final ExecutorService executor = Executors.newSingleThreadExecutor();
+        final ExecutorService executor = Executors.newSingleThreadExecutor(new OpenGrokThreadFactory("git-tags"));
         final Future<?> future = executor.submit(() -> rebuildTagList(directory));
         executor.shutdown();
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/impl/SuggesterServiceImpl.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.BytesRef;
 import org.opengrok.indexer.Metrics;
+import org.opengrok.indexer.configuration.OpenGrokThreadFactory;
 import org.opengrok.suggest.Suggester;
 import org.opengrok.suggest.Suggester.NamedIndexDir;
 import org.opengrok.suggest.Suggester.NamedIndexReader;
@@ -78,7 +79,8 @@ public class SuggesterServiceImpl implements SuggesterService {
 
     private Suggester suggester;
 
-    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
+    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1,
+            new OpenGrokThreadFactory("suggester-scheduler"));
 
     private ScheduledFuture<?> future;
 

File: suggester/src/main/java/org/opengrok/suggest/Suggester.java
Patch:
@@ -109,7 +109,8 @@ public final class Suggester implements Closeable {
             Runtime.getRuntime().availableProcessors(),
             runnable -> {
                 Thread thread = Executors.defaultThreadFactory().newThread(runnable);
-                thread.setName("suggester-lookup-" + thread.getId());
+                // This should match the naming in OpenGrokThreadFactory class.
+                thread.setName("OpenGrok-suggester-lookup-" + thread.getId());
                 return thread;
             });
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuperIndexSearcherFactory.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Factory for producing IndexSearcher objects.
- * This is used inside getIndexSearcher() to produce new SearcherManager objects
+ * This is used inside getSuperIndexSearcher() to produce new SearcherManager objects
  * to make sure the searcher threads are constrained to single thread pool.
  * @author vkotal
  */

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/FileControllerTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class FileControllerTest extends OGKJerseyTest {
+class FileControllerTest extends OGKJerseyTest {
 
     private final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
@@ -91,7 +91,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void testFileContent() throws IOException {
+    void testFileContent() throws IOException {
         final String path = "git/header.h";
         byte[] encoded = Files.readAllBytes(Paths.get(repository.getSourceRoot(), path));
         String contents = new String(encoded);
@@ -104,7 +104,7 @@ public void testFileContent() throws IOException {
     }
 
     @Test
-    public void testFileGenre() {
+    void testFileGenre() {
         final String path = "git/main.c";
         String genre = target("file")
                 .path("genre")

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/executables/JarAnalyzerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
@@ -76,10 +76,10 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         IndexChangedListener progress = new DefaultIndexChangedListener();
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
 
-        Indexer.getInstance().doIndexerExecution(true, null, progress);
+        Indexer.getInstance().doIndexerExecution(null, progress);
 
         configFile = File.createTempFile("configuration", ".xml");
         env.writeConfiguration(configFile);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexCheckTest.java
Patch:
@@ -96,8 +96,8 @@ private void testIndexVersion(boolean projectsEnabled, List<String> subFiles) th
         env.setProjectsEnabled(projectsEnabled);
         configuration.setProjectsEnabled(projectsEnabled);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+                null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
 
         IndexCheck.check(configuration, subFiles);
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseSymlinksTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
@@ -206,9 +206,9 @@ public void testSymlinksWithOneAddedSymlink() throws IOException, IndexerExcepti
 
     private static void runIndexer() throws IndexerException, IOException {
         Indexer indexer = Indexer.getInstance();
-        indexer.prepareIndexer(env, true, true, false, null, null);
+        indexer.prepareIndexer(env, true, true, null, null);
         env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
-        indexer.doIndexerExecution(true, null, null);
+        indexer.doIndexerExecution(null, null);
     }
 
     private void assertSymlinkAsExpected(String message, File expectedCanonical, Path symlink)

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -100,7 +100,7 @@ void testPerProjectHistory(boolean globalOn) throws IndexerException, IOExceptio
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null); // repositories - not needed when not refreshing history
         env.generateProjectRepositoriesMap();
@@ -165,7 +165,7 @@ void testSymlinks() throws IndexerException, IOException {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null); // repositories - not needed when not refreshing history
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SearchEngineTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
@@ -67,9 +67,9 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
 
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
 
         configFile = File.createTempFile("configuration", ".xml");
         env.writeConfiguration(configFile);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;
@@ -77,9 +77,9 @@ public static void setUpClass() throws Exception {
         env.setDataRoot(repository.getDataRoot());
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
 
         configFile = File.createTempFile("configuration", ".xml");
         env.writeConfiguration(configFile);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;
@@ -121,14 +121,14 @@ public static void setUpClass() throws Exception {
 
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
 
         Project proj1 = env.getProjects().get(SYMLINK1);
         assertNotNull(proj1, "symlink1 project");
         proj1.setTabSize(TABSIZE);
 
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
 
         configFile = File.createTempFile("configuration", ".xml");
         env.writeConfiguration(configFile);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/SearchHelperTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.web;
@@ -72,9 +72,9 @@ private void reindex() throws Exception {
         System.out.println("Generating index by using the class methods");
 
         Indexer.getInstance().prepareIndexer(env, true, true,
-            false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
     }
 
     private SearchHelper getSearchHelper(String searchTerm) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/UtilTest.java
Patch:
@@ -671,7 +671,6 @@ void testWriteHAD() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null); // repositories - not needed when not refreshing history
         env.generateProjectRepositoriesMap();

File: opengrok-web/src/test/java/org/opengrok/web/DiffTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2021, 2022, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.web;
 
@@ -62,7 +62,7 @@ static void setUp() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially
     }

File: opengrok-web/src/test/java/org/opengrok/web/PageConfigTest.java
Patch:
@@ -333,10 +333,10 @@ void testGetLatestRevisionViaIndex() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially
-        indexer.doIndexerExecution(true, null, null);
+        indexer.doIndexerExecution(null, null);
 
         DummyHttpServletRequest req1 = new DummyHttpServletRequest() {
             @Override

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/AnnotationControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2021, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -78,7 +78,7 @@ public void setUp() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially
     }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/FileControllerTest.java
Patch:
@@ -18,6 +18,7 @@
  */
 
 /*
+ * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -70,10 +71,10 @@ public void setUp() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially
-        Indexer.getInstance().doIndexerExecution(true, Collections.singletonList("/git"), null);
+        Indexer.getInstance().doIndexerExecution(Collections.singletonList("/git"), null);
     }
 
     @AfterEach

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java
Patch:
@@ -79,7 +79,7 @@ public void setUp() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially
     }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/RepositoriesControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -102,7 +102,7 @@ public void testGetRepositoryType() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                false, // don't create dictionary
+                // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -68,9 +68,9 @@ public static void setUpClass() throws Exception {
         env.setProjectsEnabled(false);
         env.setSourceRoot(repository.getSourceRoot() + File.separator + "java");
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(Collections.singleton("__all__"));
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
 
         env.getSuggesterConfig().setRebuildCronConfig(null);
     }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -107,9 +107,9 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(true);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                false, null, null);
+                null, null);
         env.setDefaultProjectsFromNames(Collections.singleton("__all__"));
-        Indexer.getInstance().doIndexerExecution(true, null, null);
+        Indexer.getInstance().doIndexerExecution(null, null);
 
         env.getSuggesterConfig().setRebuildCronConfig(null);
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/SubversionRepositoryTest.java
Patch:
@@ -74,7 +74,7 @@ void testDateFormats() {
     void testUsernamePassword() {
         final SubversionRepository repository = new SubversionRepository();
         final String username = "foo";
-        final String password= "bar";
+        final String password = "bar";
         repository.setUsername(username);
         repository.setPassword(password);
         assertEquals(List.of("--username", username, "--password", password), repository.getAuthCommandLineParams());
@@ -91,7 +91,7 @@ void testNullUsernameNullPassword() {
     @Test
     void testNullUsernameNonNullPassword() {
         final SubversionRepository repository = new SubversionRepository();
-        final String password= "bar";
+        final String password = "bar";
         assertNull(repository.getUsername());
         repository.setPassword(password);
         assertTrue(repository.getAuthCommandLineParams().isEmpty());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryCache.java
Patch:
@@ -121,8 +121,7 @@ History get(File file, @Nullable Repository repository, boolean withFiles)
      * @param repository the repository in which the directory lives
      * @return a map from file names to modification times
      */
-    Map<String, Date> getLastModifiedTimes(File directory, Repository repository)
-        throws HistoryException;
+    Map<String, Date> getLastModifiedTimes(File directory, Repository repository) throws HistoryException;
 
     /**
      * Clear the history cache for a repository.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -673,7 +673,7 @@ private void createCache(Repository repository, String sinceRevision) {
             elapsed.report(LOGGER, "Done history cache for " + path);
         } else {
             LOGGER.log(Level.WARNING,
-                    "Skipping creation of historycache of {0} repository in {1}: Missing SCM dependencies?",
+                    "Skipping creation of history cache of {0} repository in {1}: Missing SCM dependencies?",
                     new Object[]{type, path});
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -860,6 +860,7 @@ void testNoHistoryFetch() throws Exception {
         env.setFetchHistoryWhenNotInCache(false);
 
         // Pretend we are done with first phase of indexing.
+        env.setIndexer(true);
         HistoryGuru.getInstance().setHistoryIndexDone();
 
         // First try repo with ability to fetch history for directories.

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java
Patch:
@@ -132,7 +132,8 @@ void testHistoryGet() throws Exception {
                 .queryParam("start", start)
                 .request()
                 .get();
-        HistoryDTO history = response.readEntity(new GenericType<>() {});
+        HistoryDTO history = response.readEntity(new GenericType<>() {
+        });
         assertNotNull(history);
         assertEquals(size, history.getEntries().size());
         assertEquals("Kryštof Tulinger <krystof.tulinger@oracle.com>", history.getEntries().get(0).getAuthor());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -570,13 +570,14 @@ public static String[] parseOptions(String[] argv) throws ParseException {
             parser.on("-H", "--history", "Enable history.").execute(v -> cfg.setHistoryEnabled(true));
 
             parser.on("--historyThreads", "=number", Integer.class,
-                    "The number of threads to use for history cache generation on repository level. " +
+                    "The number of threads to use for history cache generation on repository level. ",
                     "By default the number of threads will be set to the number of available CPUs.",
                     "Assumes -H/--history.").execute(threadCount ->
                     cfg.setHistoryParallelism((Integer) threadCount));
 
             parser.on("--historyFileThreads", "=number", Integer.class,
-                    "The number of threads to use for history cache generation when dealing with individual files.",
+                    "The number of threads to use for history cache generation ",
+                    "when dealing with individual files.",
                     "By default the number of threads will be set to the number of available CPUs.",
                     "Assumes -H/--history.").execute(threadCount ->
                     cfg.setHistoryFileParallelism((Integer) threadCount));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/OptionParser.java
Patch:
@@ -156,7 +156,7 @@ void setPattern(String pattern) {
             valuePattern = Pattern.compile(pattern);
         }
 
-        public static final int MAX_DESCRIPTION_LINE_LENGTH = 72;
+        public static final int MAX_DESCRIPTION_LINE_LENGTH = 80;
 
         void addDescription(String description) {
             if (description.length() > MAX_DESCRIPTION_LINE_LENGTH) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -651,7 +651,9 @@ void testHistoryBasedReindexWithEligibleSubRepo() throws Exception {
         assertNotNull(fileCollector);
         assertTrue(fileCollector.getFiles().size() > 1);
         assertTrue(fileCollector.getFiles().
-                contains("/" + gitProject.getName() + "/" + subRepoName + "/" + changedFileName));
+                contains(File.separator + gitProject.getName() +
+                        File.separator + subRepoName +
+                        File.separator + changedFileName));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1493,6 +1493,7 @@ void indexDown(File dir, String parent, IndexDownArgs args) throws IOException {
      */
     private void processFileIncremental(IndexDownArgs args, File file, String path) throws IOException {
         if (uidIter != null) {
+            path = Util.fixPathIfWindows(path);
             // Traverse terms until reaching one that matches the path of given file.
             while (uidIter != null && uidIter.term() != null
                     && uidIter.term().compareTo(emptyBR) != 0

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -559,6 +559,7 @@ void testHistoryBasedReindexVsProjectWithDiverseRepos(boolean useCvs) throws Exc
             Path destinationPath = Path.of(repository.getSourceRoot(), projectName, subrepoName);
             Path sourcePath = Path.of(repository.getSourceRoot(), "cvs_test", "cvsrepo");
             assertTrue(sourcePath.toFile().exists());
+            assertTrue(destinationPath.toFile().mkdirs());
             repository.copyDirectory(sourcePath, destinationPath);
             assertTrue(destinationPath.toFile().exists());
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -523,7 +523,7 @@ private static void copyDirectory(Path src, Path dest) throws IOException {
                     return;
                 }
                 Files.copy(srcPath, destPath);
-            } catch(Exception e) {
+            } catch (Exception e) {
                 e.printStackTrace();
             }
         });

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -517,8 +517,9 @@ private static void copyDirectory(Path src, Path dest) throws IOException {
             try {
                 Path destPath = dest.resolve(src.relativize(srcPath));
                 if (Files.isDirectory(srcPath)) {
-                    if(!Files.exists(destPath))
+                    if (!Files.exists(destPath)) {
                         Files.createDirectory(destPath);
+                    }
                     return;
                 }
                 Files.copy(srcPath, destPath);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -457,7 +457,7 @@ void testGetIndexDownArgs(boolean mergeCommits, boolean renamedFiles, boolean hi
 
         // Check history cache w.r.t. the merge changeset.
         File mergeFile = new File(repositoryRoot, "new.txt");
-        History history = HistoryGuru.getInstance().getHistory(mergeFile, false, false,false);
+        History history = HistoryGuru.getInstance().getHistory(mergeFile, false, false, false);
         assertNotNull(history);
         assertNotNull(history.getHistoryEntries());
         boolean containsMergeCommitMessage = history.getHistoryEntries().stream().
@@ -630,7 +630,7 @@ void testHistoryBasedReindexProjectTunable(boolean historyBased) throws Exceptio
     }
 
     /**
-     * test history based reindex if there was no change to the repository
+     * Test history based reindex if there was no change to the repository.
      */
     @Test
     void testHistoryBasedReindexWithNoChange() throws Exception {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -115,6 +115,9 @@ public String toString() {
             stringBuilder.append(",");
             stringBuilder.append("merge=");
             stringBuilder.append(this.isMergeCommitsEnabled());
+            stringBuilder.append(",");
+            stringBuilder.append("historyBased=");
+            stringBuilder.append(this.isHistoryBasedReindex());
         }
         stringBuilder.append("}");
         return stringBuilder.toString();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -330,7 +330,7 @@ public void fillFromProject() {
             setHistoryEnabled(proj.isHistoryEnabled());
             setHandleRenamedFiles(proj.isHandleRenamedFiles());
             setMergeCommitsEnabled(proj.isMergeCommitsEnabled());
-            setHistoryEnabled(proj.isHistoryBasedReindex());
+            setHistoryBasedReindex(proj.isHistoryBasedReindex());
         } else {
             RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -483,6 +483,7 @@ void testHistoryBasedReindexVsProjectWithDiverseRepos() throws Exception {
         checkIndexDown(false, idb);
     }
 
+    // TODO: add test for the global tunable
     // TODO: add test for per project tunables
 
     /**
@@ -527,7 +528,7 @@ void testForcedReindex(boolean historyBased) throws Exception {
         Set<Path> expectedFileSet = result.stream().map(f -> {
                 try {
                     return Path.of(RuntimeEnvironment.getInstance().getPathRelativeToSourceRoot(f.toFile()));
-                } catch (IOException|ForbiddenSymlinkException e) {
+                } catch (IOException | ForbiddenSymlinkException e) {
                     return null;
                 }
             }).collect(Collectors.toSet());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -788,10 +788,10 @@ boolean getIndexDownArgs(String dir, File sourceRoot, IndexDownArgs args) throws
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
         if (isReadyForHistoryBasedReindex()) {
-            LOGGER.log(Level.INFO, "Starting file collection using history traversal in directory {0}", dir);
+            LOGGER.log(Level.INFO, "Starting file collection using history traversal for directory {0}", dir);
             indexDownUsingHistory(env.getSourceRootFile(), args);
             usedHistory = true;
-            elapsed.report(LOGGER, String.format("Done file collection of directory %s", dir),
+            elapsed.report(LOGGER, String.format("Done file collection for directory %s", dir),
                     "indexer.db.directory.collection");
         } else {
             LOGGER.log(Level.INFO, "Starting file collection using file-system traversal of directory {0}", dir);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -121,7 +121,7 @@
 import static org.opengrok.indexer.web.ApiUtils.waitForAsyncApi;
 
 /**
- * This class is used to create / update the index databases. Currently we use
+ * This class is used to create / update the index databases. Currently, we use
  * one index database per project.
  *
  * @author Trond Norbye
@@ -137,7 +137,7 @@ public class IndexDatabase {
 
     private static final Set<String> REVERT_COUNTS_FIELDS;
 
-    private final Object INSTANCE_LOCK = new Object();
+    private static final Object INSTANCE_LOCK = new Object();
 
     /**
      * Key is canonical path; Value is the first accepted, absolute path. Map

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -112,7 +112,7 @@ public final class Indexer {
     private static final String HELP_OPT_2 = "-?";
     private static final String HELP_OPT_3 = "-h";
 
-    private static final Indexer index = new Indexer();
+    private static final Indexer indexer = new Indexer();
     private static Configuration cfg = null;
     private static boolean checkIndex = false;
     private static boolean runIndex = true;
@@ -149,7 +149,7 @@ public final class Indexer {
     private static final int WEBAPP_CONNECT_TIMEOUT = 1000;  // in milliseconds
 
     public static Indexer getInstance() {
-        return index;
+        return indexer;
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -748,7 +748,7 @@ private void createSvnRepository() throws Exception {
         assertEquals(0, svnCheckoutProcess.waitFor());
     }
 
-    private void changeFileAndCommit(Git git, File file, String comment) throws Exception {
+    static void changeFileAndCommit(Git git, File file, String comment) throws Exception {
         String authorName = "Foo Bar";
         String authorEmail = "foo@bar.com";
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryCache.java
Patch:
@@ -139,8 +139,7 @@ History get(File file, @Nullable Repository repository, boolean withFiles)
      * @param repository the repository in which the directory lives
      * @return a map from file names to modification times
      */
-    Map<String, Date> getLastModifiedTimes(
-            File directory, Repository repository)
+    Map<String, Date> getLastModifiedTimes(File directory, Repository repository)
         throws HistoryException;
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -466,7 +466,7 @@ public List<Project> getProjectList() {
     /**
      * Get project map.
      *
-     * @return a Map with all of the projects
+     * @return a Map with all the projects
      */
     public Map<String, Project> getProjects() {
         return syncReadConfiguration(Configuration::getProjects);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -436,7 +436,7 @@ private static List<Repository> getRepositoriesForProject(Project project) {
      */
     private static boolean isReadyForTrulyIncrementalReindex(Project project) {
         if (project == null) {
-            throw new IllegalArgumentException("null project");
+            return false;
         }
 
         // History needs to be enabled for the history cache to work (see the comment below).

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryWithHistoryTraversal.java
Patch:
@@ -16,10 +16,10 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2021, 2022, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import org.jetbrains.annotations.Nullable;
@@ -72,7 +72,7 @@ public static class ChangesetInfo {
      * @param file File object
      * @param sinceRevision start revision (non-inclusive)
      * @param tillRevision end revision (inclusive)
-     * @param numCommits maximum number of commits to traverse (use 0 as unlimited)
+     * @param numCommits maximum number of commits to traverse (use {@code null} as unlimited)
      * @param visitor visitor method
      * @param getAll include merge commits (even if not set to be handled)
      * @throws HistoryException on error

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1499,7 +1499,7 @@ private void indexDown(File dir, String parent, IndexDownArgs args) throws IOExc
                             boolean matchOK = (isWithDirectoryCounts || isCountingDeltas) &&
                                     checkSettings(file, path);
                             if (!matchOK) {
-                                removeFile(null,false);
+                                removeFile(null, false);
                             }
 
                             BytesRef next = uidIter.next();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -62,6 +62,7 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.util.NamedThreadFactory;
+import org.jetbrains.annotations.VisibleForTesting;
 import org.opengrok.indexer.authorization.AuthorizationFramework;
 import org.opengrok.indexer.authorization.AuthorizationStack;
 import org.opengrok.indexer.history.HistoryGuru;
@@ -1491,7 +1492,8 @@ public void writeConfiguration(String host) throws IOException, InterruptedExcep
      * Project with some repository information is considered as a repository
      * otherwise it is just a simple project.
      */
-    private void generateProjectRepositoriesMap() throws IOException {
+    @VisibleForTesting
+    public void generateProjectRepositoriesMap() throws IOException {
         repository_map.clear();
         for (RepositoryInfo r : getRepositories()) {
             Project proj;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -434,12 +434,12 @@ public Map<String, Date> getLastModifiedTimes(File directory)
      * @return
      * @throws HistoryException
      */
-    public String getLatestCachedRevision(Repository repository) throws HistoryException {
+    public String getPreviousCachedRevision(Repository repository) throws HistoryException {
         if (repository != null && useCache()) {
-            return historyCache.getLatestCachedRevision(repository);
+            return historyCache.getPreviousCachedRevision(repository);
         }
 
-        throw new HistoryException(String.format("cannot get latest cached revision for %s", repository));
+        throw new HistoryException(String.format("cannot get previous cached revision for %s", repository));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -33,6 +33,7 @@
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashSet;
@@ -1604,10 +1605,10 @@ public void setConfiguration(Configuration configuration, CommandTimeoutType cmd
      * Sets the configuration and performs necessary actions.
      *
      * @param configuration new configuration
-     * @param subFileList   list of repositories
+     * @param subFileList   collection of repositories
      * @param cmdType       command timeout type
      */
-    public synchronized void setConfiguration(Configuration configuration, List<String> subFileList, CommandTimeoutType cmdType) {
+    public synchronized void setConfiguration(Configuration configuration, Collection<String> subFileList, CommandTimeoutType cmdType) {
         try (ResourceLock resourceLock = configLock.writeLockAsResource()) {
             //noinspection ConstantConditions to avoid warning of no reference to auto-closeable
             assert resourceLock != null;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -804,10 +804,10 @@ public void removeRepositories(Collection<String> repos) {
     /**
      * Set list of known repositories which match the list of directories.
      * @param repos list of repositories
-     * @param dirs list of directories that might correspond to the repositories
+     * @param dirs collection of directories that might correspond to the repositories
      * @param cmdType command timeout type
      */
-    public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, List<String> dirs, CommandTimeoutType cmdType) {
+    public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, Collection<String> dirs, CommandTimeoutType cmdType) {
         if (repos != null && !repos.isEmpty() && dirs != null && !dirs.isEmpty()) {
             List<RepositoryInfo> newrepos = new ArrayList<>();
             for (RepositoryInfo i : repos) {

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ProjectsController.java
Patch:
@@ -231,7 +231,8 @@ public Response deleteProjectData(@Context HttpServletRequest request,
                         () -> {
                             deleteProjectDataWorkHorse(projectName);
                             return null;
-                        }));
+                        },
+                        Response.Status.NO_CONTENT));
     }
 
     private void deleteProjectDataWorkHorse(String projectName) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSRepository.java
Patch:
@@ -100,8 +100,7 @@ private Map<String, String> getAuthors(File file) throws IOException {
         argv.add(RepoCommand);
         argv.add("prs");
         argv.add("-e");
-        argv.add("-d");
-        argv.add(":I: :P:");
+        argv.add("-d:I: :P:");
         argv.add(file.getCanonicalPath());
 
         Executor executor = new Executor(argv, file.getCanonicalFile().getParentFile(),

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSRepositoryAuthorParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 
@@ -46,8 +46,7 @@ public class SCCSRepositoryAuthorParser implements Executor.StreamHandler {
     /**
      * Pattern used to extract revision from the {@code sccs get} command.
      */
-    private static final Pattern AUTHOR_PATTERN
-            = Pattern.compile("^([\\d.]+)\\s+(\\S+)");
+    private static final Pattern AUTHOR_PATTERN = Pattern.compile("^([\\d.]+)\\s+(\\S+)");
 
     @Override
     public void processStream(InputStream input) throws IOException {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/SCCSRepositoryTest.java
Patch:
@@ -127,6 +127,7 @@ void testAnnotation() throws Exception {
         assertNotNull(annotation);
         Set<String> revSet = Set.of("1.2", "1.1");
         assertEquals(revSet, annotation.getRevisions());
+        assertEquals(Set.of("trond"), annotation.getAuthors());
     }
 
     @Test

File: plugins/src/test/java/opengrok/auth/plugin/LdapAttrPluginTest.java
Patch:
@@ -169,7 +169,7 @@ void testAttrLookup() throws LdapException {
         String instance_num = "42";
         String mail_attr_value = "james@bond.com";
 
-        // Create mock LDAP provider, simulating the work of LdapUserPlugin.
+        // Create mock LDAP provider, simulating the work of LDAP server for LdapAttrPlugin#fillSession().
         AbstractLdapProvider mockProvider = mock(LdapFacade.class);
         Map<String, Set<String>> attrs = new HashMap<>();
         attrs.put(attr_to_get, Collections.singleton(mail_attr_value));

File: plugins/src/test/java/opengrok/auth/plugin/LdapAttrPluginTest.java
Patch:
@@ -170,15 +170,15 @@ void testAttrLookup() throws LdapException {
         String mail_attr_value = "james@bond.com";
 
         // Create mock LDAP provider, simulating the work of LdapUserPlugin.
-        AbstractLdapProvider mockprovider = mock(LdapFacade.class);
+        AbstractLdapProvider mockProvider = mock(LdapFacade.class);
         Map<String, Set<String>> attrs = new HashMap<>();
         attrs.put(attr_to_get, Collections.singleton(mail_attr_value));
         final String dn = "cn=FOO_BAR,L=EMEA,DC=FOO,DC=COM";
         AbstractLdapProvider.LdapSearchResult<Map<String, Set<String>>> result =
                 new AbstractLdapProvider.LdapSearchResult<>(dn, attrs);
         assertNotNull(result);
         // TODO use Mockito Argument captor ?
-        when(mockprovider.lookupLdapContent(anyString(), any(String[].class))).
+        when(mockProvider.lookupLdapContent(anyString(), any(String[].class))).
                 thenReturn(result);
 
         // Load the LdapAttrPlugin using the mock LDAP provider.
@@ -187,7 +187,7 @@ void testAttrLookup() throws LdapException {
         parameters.put(LdapAttrPlugin.FILE_PARAM, whitelistFile.getAbsolutePath());
         parameters.put(LdapAttrPlugin.ATTR_PARAM, attr_to_get);
         parameters.put(LdapAttrPlugin.INSTANCE_PARAM, instance_num);
-        plugin.load(parameters, mockprovider);
+        plugin.load(parameters, mockProvider);
 
         LdapUser ldapUser = new LdapUser(dn, null);
         HttpServletRequest request = new DummyHttpServletRequestLdap();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -1177,7 +1177,7 @@ public void setCurrentIndexedCollapseThreshold(int currentIndexedCollapseThresho
         this.currentIndexedCollapseThreshold = currentIndexedCollapseThreshold;
     }
 
-    public boolean getDisplayRepositories() {
+    public boolean isDisplayRepositories() {
         return this.displayRepositories;
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -1328,8 +1328,8 @@ public void setHistoryEnabled(boolean historyEnabled) {
         syncWriteConfiguration(historyEnabled, Configuration::setHistoryEnabled);
     }
 
-    public boolean getDisplayRepositories() {
-        return syncReadConfiguration(Configuration::getDisplayRepositories);
+    public boolean isDisplayRepositories() {
+        return syncReadConfiguration(Configuration::isDisplayRepositories);
     }
 
     public void setDisplayRepositories(boolean displayRepositories) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSHistoryParser.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Reads and filters out junk from a SCCS history file.
  * See sccsfile(4) for details of the file format.
- * Wrote it since invoking 'sccs prs' for each file was
+ * Wrote it since invoking {@code sccs prs} for each file was
  * taking a lot of time. Time to index history has reduced 4 to 1!
  */
 final class SCCSHistoryParser {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSRepository.java
Patch:
@@ -63,6 +63,7 @@ public class SCCSRepository extends Repository {
     public SCCSRepository() {
         type = "SCCS";
         datePatterns = new String[]{
+            "yy/MM/dd HH:mm:ss",
             "yy/MM/dd"
         };
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ApiUtils.java
Patch:
@@ -41,7 +41,7 @@ private ApiUtils() {
 
     /**
      * Busy-waits the status of asynchronous API call, mimicking
-     * {@link org.opengrok.indexer.configuration.RuntimeEnvironment#waitForAsyncApi(Response)},
+     * {@link org.opengrok.indexer.web.ApiUtils#waitForAsyncApi(Response)},
      * however side-steps status API check by going to the {@link ApiTaskManager} directly in order to avoid
      * going through the {@link StatusController} as it might not be deployed in the unit tests.
      * The method will return right away if the status of the response object parameter is not

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
@@ -53,7 +53,6 @@
 
 import jakarta.ws.rs.client.ClientBuilder;
 import jakarta.ws.rs.client.Entity;
-import jakarta.ws.rs.core.HttpHeaders;
 import jakarta.ws.rs.core.Response;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiReader;
@@ -62,7 +61,6 @@
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.util.NamedThreadFactory;
-import org.jetbrains.annotations.NotNull;
 import org.opengrok.indexer.authorization.AuthorizationFramework;
 import org.opengrok.indexer.authorization.AuthorizationStack;
 import org.opengrok.indexer.history.HistoryGuru;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2022, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;

File: plugins/src/main/java/opengrok/auth/entity/LdapUser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2022, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.entity;
 
@@ -46,7 +46,6 @@ public LdapUser() {
 
     public LdapUser(String dn, Map<String, Set<String>> attrs) {
         this.dn = dn;
-
         this.attributes = Objects.requireNonNullElseGet(attrs, HashMap::new);
     }
 

File: opengrok-web/src/main/java/org/opengrok/web/api/ApiTaskManager.java
Patch:
@@ -92,7 +92,7 @@ public Response submitApiTask(String name, ApiTask apiTask) {
             return Response.status(Response.Status.BAD_REQUEST).build();
         }
 
-        queues.get(queueName).submit(apiTask.getRunnable());
+        apiTask.setFuture(queues.get(queueName).submit(apiTask.getCallable()));
         apiTasks.put(apiTask.getUuid(), apiTask);
 
         return Response.status(Response.Status.ACCEPTED).

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ApiUtils.java
Patch:
@@ -63,12 +63,12 @@ protected static Response waitForTask(Response response) {
         String uuid = locationUri.substring(idx + apiPrefix.length());
         ApiTask apiTask = ApiTaskManager.getInstance().getApiTask(uuid);
         assertNotNull(apiTask);
-        await().atMost(16, TimeUnit.SECONDS).until(apiTask::isCompleted);
+        await().atMost(16, TimeUnit.SECONDS).until(apiTask::isDone);
 
-        if (!apiTask.isCompleted()) {
+        if (!apiTask.isDone()) {
             return response;
         } else {
-            return Response.status(apiTask.getResponseStatus()).build();
+            return apiTask.getResponse();
         }
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -48,6 +48,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -378,7 +379,7 @@ private void markProjectIndexed(Project project) {
 
         Response r;
         try {
-            r = ClientBuilder.newClient()
+            r = ClientBuilder.newBuilder().connectTimeout(env.getConnectTimeout(), TimeUnit.SECONDS).build()
                     .target(env.getConfigURI())
                     .path("api")
                     .path("v1")

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BitKeeperRepositoryTest.java
Patch:
@@ -69,7 +69,7 @@ public boolean accept(File dir, String name) {
     public void setUp() {
         try {
             testRepo = new TestRepository();
-            testRepo.create(getClass().getResourceAsStream("repositories.zip"));
+            testRepo.create(getClass().getResource("/repositories"));
             final File root = new File(testRepo.getSourceRoot(), "bitkeeper");
             bkRepo = (BitKeeperRepository) RepositoryFactory.getRepository(root);
             bkFiles = Arrays.asList(root.list(new BitKeeperFilenameFilter()));

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BoundaryChangesetsTest.java
Patch:
@@ -53,7 +53,7 @@ public class BoundaryChangesetsTest {
     @BeforeEach
     public void setUp() throws Exception {
         repositories = new TestRepository();
-        repositories.create(getClass().getResourceAsStream("repositories.zip"));
+        repositories.create(getClass().getResource("/repositories"));
 
         File reposRoot = new File(repositories.getSourceRoot(), "git");
         Repository repo = RepositoryFactory.getRepository(reposRoot);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/CVSRepositoryTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.FileOutputStream;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.net.URISyntaxException;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -62,9 +63,9 @@ public class CVSRepositoryTest {
      * Set up a test repository. Should be called by the tests that need it. The
      * test repository will be destroyed automatically when the test finishes.
      */
-    private void setUpTestRepository() throws IOException {
+    private void setUpTestRepository() throws IOException, URISyntaxException {
         repository = new TestRepository();
-        repository.create(getClass().getResourceAsStream("repositories.zip"));
+        repository.create(getClass().getResource("/repositories"));
 
         // Checkout cvsrepo anew in order to get the CVS/Root files point to
         // the temporary directory rather than the OpenGrok workspace directory

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -90,7 +90,7 @@ class FileHistoryCacheTest {
     @BeforeEach
     public void setUp() throws Exception {
         repositories = new TestRepository();
-        repositories.create(getClass().getResourceAsStream("repositories.zip"));
+        repositories.create(getClass().getResource("/repositories"));
 
         cache = new FileHistoryCache();
         cache.initialize();

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Writer;
+import java.net.URISyntaxException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Arrays;
@@ -76,8 +77,8 @@ public class GitRepositoryTest {
     private GitRepository instance;
 
     @BeforeAll
-    public static void setUpClass() throws IOException {
-        repository.create(GitRepositoryTest.class.getResourceAsStream("repositories.zip"));
+    public static void setUpClass() throws IOException, URISyntaxException {
+        repository.create(GitRepositoryTest.class.getResource("/repositories"));
     }
 
     @AfterAll

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryGuruTest.java
Patch:
@@ -73,7 +73,7 @@ public static void setUpClass() throws Exception {
         savedNestingMaximum = env.getNestingMaximum();
 
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
         RepositoryFactory.initializeIgnoredNames(env);
         FileUtilities.getAllFiles(new File(repository.getSourceRoot()),
                 FILES, true);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/MercurialIsWorkingTest.java
Patch:
@@ -43,7 +43,7 @@ public class MercurialIsWorkingTest {
 
     @BeforeAll
     public static void setUpClass() throws Exception {
-        repository.create(RepositoryFactoryTest.class.getResourceAsStream("repositories.zip"));
+        repository.create(RepositoryFactoryTest.class.getResource("/repositories"));
     }
 
     @AfterAll

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RCSRepositoryTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.net.URISyntaxException;
 import java.util.List;
 
 import org.junit.jupiter.api.AfterAll;
@@ -53,8 +54,8 @@ public class RCSRepositoryTest {
     private static final String[] REVISIONS = {"1.2", "1.1"};
 
     @BeforeAll
-    public static void setUpClass() throws IOException {
-        repository.create(RCSRepositoryTest.class.getResourceAsStream("repositories.zip"));
+    public static void setUpClass() throws IOException, URISyntaxException {
+        repository.create(RCSRepositoryTest.class.getResource("/repositories"));
     }
 
     @AfterAll

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryFactoryTest.java
Patch:
@@ -60,7 +60,7 @@ public class RepositoryFactoryTest {
     @BeforeAll
     public static void setUpClass() throws Exception {
         env = RuntimeEnvironment.getInstance();
-        repository.create(RepositoryFactoryTest.class.getResourceAsStream("repositories.zip"));
+        repository.create(RepositoryFactoryTest.class.getResource("/repositories"));
         savedDisabledRepositories = env.getDisabledRepositories();
         savedIsProjectsEnabled = env.isProjectsEnabled();
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryWithPerPartesHistoryTest.java
Patch:
@@ -54,7 +54,7 @@ public class RepositoryWithPerPartesHistoryTest {
     @BeforeEach
     public void setUp() throws Exception {
         repositories = new TestRepository();
-        repositories.create(getClass().getResourceAsStream("repositories.zip"));
+        repositories.create(getClass().getResource("/repositories"));
 
         File reposRoot = new File(repositories.getSourceRoot(), "git");
         Repository repo = RepositoryFactory.getRepository(reposRoot);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexCheckTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -66,9 +67,9 @@ public static void setUpClass() {
     }
 
     @BeforeEach
-    public void setUp() throws IOException {
+    public void setUp() throws IOException, URISyntaxException {
         repository = new TestRepository();
-        repository.create(IndexerTest.class.getResourceAsStream("/org/opengrok/indexer/history/repositories.zip"));
+        repository.create(IndexerTest.class.getResource("/repositories"));
         oldIndexDataDir = null;
         configuration = new Configuration();
         configuration.setDataRoot(env.getDataRootPath());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -64,8 +64,7 @@ public static void setUpClass() throws Exception {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
         repository = new TestRepository();
-        repository.create(
-                HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerMainTest.java
Patch:
@@ -31,17 +31,18 @@
 import org.opengrok.indexer.util.TestRepository;
 
 import java.io.IOException;
+import java.net.URISyntaxException;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 public class IndexerMainTest {
     private TestRepository repository;
 
     @BeforeEach
-    public void setUp() throws IOException {
+    public void setUp() throws IOException, URISyntaxException {
         repository = new TestRepository();
         // For these tests we need Mercurial repository with renamed files.
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
     }
 
     @AfterEach

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.File;
 
 import java.io.IOException;
+import java.net.URISyntaxException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -61,10 +62,10 @@ public class IndexerRepoTest {
     private TestRepository repository;
 
     @BeforeEach
-    public void setUp() throws IOException {
+    public void setUp() throws IOException, URISyntaxException {
         repository = new TestRepository();
         // For these tests we need Mercurial repository with renamed files.
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
     }
 
     @AfterEach

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -329,7 +329,7 @@ void testRemoveFileOnFileChange() throws Exception {
         String path = "/mercurial/bar.txt";
 
         TestRepository testrepo = new TestRepository();
-        testrepo.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        testrepo.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(testrepo.getSourceRoot());
         env.setDataRoot(testrepo.getDataRoot());
@@ -375,7 +375,7 @@ void testSetRepositories() throws Exception {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
         TestRepository testrepo = new TestRepository();
-        testrepo.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        testrepo.create(HistoryGuru.class.getResource("/repositories"));
         env.setSourceRoot(testrepo.getSourceRoot());
 
         env.setRepositories(testrepo.getSourceRoot());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SearchEngineTest.java
Patch:
@@ -55,7 +55,7 @@ public class SearchEngineTest {
     @BeforeAll
     public static void setUpClass() throws Exception {
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         env.setSourceRoot(repository.getSourceRoot());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/HistoryContextTest.java
Patch:
@@ -57,8 +57,7 @@ public class HistoryContextTest {
     @BeforeAll
     public static void setUpClass() throws Exception {
         repositories = new TestRepository();
-        repositories.create(HistoryContextTest.class.getResourceAsStream(
-                "/org/opengrok/indexer/history/repositories.zip"));
+        repositories.create(HistoryContextTest.class.getResource("/repositories"));
         RuntimeEnvironment.getInstance().setRepositories(repositories.getSourceRoot());
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest.java
Patch:
@@ -65,7 +65,7 @@ class SearchAndContextFormatterTest {
     @BeforeAll
     public static void setUpClass() throws Exception {
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env = RuntimeEnvironment.getInstance();
         env.setCtags(System.getProperty("org.opengrok.indexer.analysis.Ctags", "ctags"));

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -90,10 +90,10 @@ public static void setUpClass() throws Exception {
         assertTrue(dataroot.isDirectory(), "dataroot.isDirectory()");
 
         repository1 = new TestRepository();
-        repository1.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository1.create(HistoryGuru.class.getResource("/repositories"));
 
         repository2 = new TestRepository();
-        repository2.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository2.create(HistoryGuru.class.getResource("/repositories"));
 
         // Create symlink #1 underneath source root.
         final String SYMLINK1 = "symlink1";

File: opengrok-web/src/test/java/org/opengrok/web/DiffTest.java
Patch:
@@ -50,7 +50,7 @@ class DiffTest {
     @BeforeAll
     static void setUp() throws Exception {
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-web/src/test/java/org/opengrok/web/PageConfigTest.java
Patch:
@@ -71,8 +71,7 @@ public class PageConfigTest {
     @BeforeAll
     public static void setUpClass() throws Exception {
         repository = new TestRepository();
-        repository.create(
-                HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
         RuntimeEnvironment.getInstance().setRepositories(repository.getSourceRoot());
     }
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/AnnotationControllerTest.java
Patch:
@@ -66,7 +66,7 @@ protected Application configure() {
     public void setUp() throws Exception {
         super.setUp();
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/FileControllerTest.java
Patch:
@@ -58,7 +58,7 @@ protected Application configure() {
     public void setUp() throws Exception {
         super.setUp();
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java
Patch:
@@ -65,7 +65,7 @@ protected Application configure() {
     public void setUp() throws Exception {
         super.setUp();
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -99,7 +99,7 @@ protected void configure() {
     public void setUp() throws Exception {
         super.setUp();
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/RepositoriesControllerTest.java
Patch:
@@ -63,7 +63,7 @@ protected Application configure() {
     public void setUp() throws Exception {
         super.setUp();
         repository = new TestRepository();
-        repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
+        repository.create(HistoryGuru.class.getResource("/repositories"));
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/framework/PluginFramework.java
Patch:
@@ -80,7 +80,7 @@ public abstract class PluginFramework<PluginType> {
      * @param classType the class of the plugin type
      * @param path      the plugin directory path
      */
-    public PluginFramework(Class<PluginType> classType, String path) {
+    protected PluginFramework(Class<PluginType> classType, String path) {
         this.classType = classType;
         setPluginDirectory(path);
     }
@@ -108,7 +108,7 @@ public synchronized void setPluginDirectory(File pluginDirectory) {
      *
      * @param directory the directory path
      */
-    public void setPluginDirectory(String directory) {
+    public synchronized void setPluginDirectory(String directory) {
         setPluginDirectory(directory != null ? new File(directory) : null);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -659,7 +659,7 @@ public Set<String> getCtagsLanguages() {
     /**
      * Get the max time a SCM operation may use to avoid being cached.
      *
-     * @return the max time
+     * @return the maximum time in milliseconds
      */
     public int getHistoryReaderTimeLimit() {
         return syncReadConfiguration(Configuration::getHistoryCacheTime);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -96,6 +96,9 @@ public RepositoryInfo(RepositoryInfo orig) {
         this.parent = orig.parent;
         this.branch = orig.branch;
         this.currentVersion = orig.currentVersion;
+        this.historyEnabled = orig.historyEnabled;
+        this.handleRenamedFiles = orig.handleRenamedFiles;
+        this.mergeCommitsEnabled = orig.mergeCommitsEnabled;
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/DefinitionsTokenStream.java
Patch:
@@ -18,6 +18,7 @@
  */
 
 /*
+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;
@@ -104,7 +105,7 @@ public final boolean incrementToken() throws IOException {
     private void setAttribs(PendingToken tok) {
         clearAttributes();
 
-        this.posIncrAtt.setPositionIncrement(tok.nonpos ? 0 : 1);
+        this.posIncrAtt.setPositionIncrement(1);
         this.termAtt.setEmpty();
         this.termAtt.append(tok.str);
         this.offsetAtt.setOffset(tok.start, tok.end);

File: opengrok-web/src/main/java/org/opengrok/web/DiffType.java
Patch:
@@ -21,13 +21,12 @@
  * Copyright (c) 2009, 2011, Jens Elkner.
  * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opengrok.indexer.web;
+package org.opengrok.web;
 
 /**
  * Known diff display types.
  *
  * @author  Jens Elkner
- * @version $Revision$
  */
 public enum DiffType {
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/pascal/PascalXrefTest.java
Patch:
@@ -32,18 +32,18 @@
 /**
  * Tests the {@link PascalXref} class.
  */
-public class PascalXrefTest extends XrefTestBase {
+class PascalXrefTest extends XrefTestBase {
 
     @Test
-    public void sampleTest() throws IOException {
+    void sampleTest() throws IOException {
         writeAndCompare(new PascalAnalyzerFactory(),
                 "analysis/pascal/sample.pas",
                 "analysis/pascal/sample_xref.html",
                 readTagsFromResource("analysis/pascal/sampletags"), 423);
     }
 
     @Test
-    public void shouldCloseTruncatedStringSpan() throws IOException {
+    void shouldCloseTruncatedStringSpan() throws IOException {
         writeAndCompare(new PascalAnalyzerFactory(),
                 "analysis/pascal/truncated.pas",
                 "analysis/pascal/truncated_xref.html", null, 1);

File: opengrok-web/src/main/java/org/opengrok/web/util/FileUtil.java
Patch:
@@ -46,6 +46,7 @@ private FileUtil() {
      * leads outside source root
      * @throws NoPathParameterException if the {@code path} parameter is null
      */
+    @SuppressWarnings("lgtm[java/path-injection]")
     public static File toFile(String path) throws NoPathParameterException, IOException {
         if (path == null) {
             throw new NoPathParameterException("Missing path parameter");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -1441,6 +1441,7 @@ public static Configuration makeXMLStringAsConfiguration(String xmlconfig) throw
         return ret;
     }
 
+    @SuppressWarnings("lgtm[java/unsafe-deserialization]")
     private static Configuration decodeObject(InputStream in) throws IOException {
         final Object ret;
         final LinkedList<Exception> exceptions = new LinkedList<>();
@@ -1457,7 +1458,7 @@ private static Configuration decodeObject(InputStream in) throws IOException {
 
         if (!exceptions.isEmpty()) {
             // There was an exception during parsing.
-            // see {@code addGroup}
+            // see addGroup()
             if (exceptions.getFirst() instanceof IOException) {
                 throw (IOException) exceptions.getFirst();
             }
@@ -1466,7 +1467,7 @@ private static Configuration decodeObject(InputStream in) throws IOException {
 
         Configuration conf = ((Configuration) ret);
 
-        // Removes all non root groups.
+        // Removes all non-root groups.
         // This ensures that when the configuration is reloaded then the set
         // contains only root groups. Subgroups are discovered again
         // as follows below

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/EftarFileTest.java
Patch:
@@ -74,7 +74,7 @@ public static void tearDownClass() {
      * @throws IOException if an error occurs while accessing the eftar file
      */
     @Test
-    public void searchEftarFile() throws IOException {
+    void searchEftarFile() throws IOException {
         searchEftarFile(new EftarFileReader(eftar));
         searchEftarFile(new EftarFileReader(eftar.getAbsolutePath()));
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/EftarFileReader.java
Patch:
@@ -90,14 +90,15 @@ private FNode binarySearch(long start, int len, long hash) throws IOException {
             int e = len;
             while (b <= e) {
                 int m = (b + e) / 2;
-                f.seek(start + m * EftarFile.RECORD_LENGTH);
+                f.seek(start + (long) m * EftarFile.RECORD_LENGTH);
                 long mhash = f.readLong();
                 if (hash > mhash) {
                     b = m + 1;
                 } else if (hash < mhash) {
                     e = m - 1;
                 } else {
-                    return new FNode(mhash, f.getFilePointer() - 8L, f.readUnsignedShort(), f.readUnsignedShort(), f.readUnsignedShort());
+                    return new FNode(mhash, f.getFilePointer() - 8L, f.readUnsignedShort(), f.readUnsignedShort(),
+                            f.readUnsignedShort());
                 }
             }
             return null;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -455,8 +455,8 @@ private void addTerraformSupport(List<String> command) {
          */
         command.add("--kinddef-terraform=s,struct,Resource\\ names");
         command.add("--regex-terraform=" +
-                "/[[:<:]]resource[[:space:]]*\"([[:alpha:]][-_[:alpha:]]*)\"[[:space:]]*" +
-                "\"([[:alpha:]][-_[:alpha:]]*)\"[[:space:]]*\\{/" +
+                "/^[[:space:]]*resource[[:space:]]*\\\"([[:alpha:]][-_[:alpha:]]*)\\\"[[:space:]]*" +
+                "\\\"([[:alpha:]][-_[:alpha:]]*)\\\"[[:space:]]*\\{/" +
                 "\\1.\\2/s/");
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzerFactoryTest.java
Patch:
@@ -113,7 +113,7 @@ void testAnalyzer() throws Exception {
         assertTrue(definitions.hasDefinitionAt("Sample", 22, type));
         assertThat(type[0], is("unit"));
         assertTrue(definitions.hasDefinitionAt("TSample", 28, type));
-        assertThat(type[0], is("Class"));
+        assertThat(type[0], is("class"));
         assertTrue(definitions.hasDefinitionAt("Id", 40, type));
         assertThat(type[0], is("property"));
         assertTrue(definitions.hasDefinitionAt("Description", 41, type));

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/AnnotationController.java
Patch:
@@ -44,6 +44,8 @@
 
 import static org.opengrok.web.util.FileUtil.toFile;
 
+// No need to have PATH configurable.
+@SuppressWarnings("java:S1075")
 @Path(AnnotationController.PATH)
 public class AnnotationController {
 

File: plugins/src/main/java/opengrok/auth/plugin/LdapFilterPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2021, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin;
 
@@ -144,7 +144,7 @@ public void fillSession(HttpServletRequest req, User user) {
             throw new AuthorizationException(ex);
         }
 
-        LOGGER.log(Level.FINER, "LDAP user {0} allowed on {2}",
+        LOGGER.log(Level.FINER, "LDAP user {0} allowed on {1}",
                 new Object[]{ldapUser, ldapProvider});
         updateSession(req, true);
     }
@@ -179,7 +179,7 @@ String expandFilter(String filter, LdapUser ldapUser, User user) {
             }
         }
 
-        filter = filter.replaceAll("\\\\%", "%");
+        filter = filter.replace("\\%", "%");
 
         return filter;
     }

File: plugins/src/main/java/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -138,7 +138,7 @@ String expandFilter(User user) {
 
         filter = expandUserFilter(user, filter);
 
-        filter = filter.replaceAll("\\\\%", "%");
+        filter = filter.replace("\\%", "%");
 
         return filter;
     }

File: plugins/src/main/java/opengrok/auth/plugin/UserWhiteListPlugin.java
Patch:
@@ -41,8 +41,8 @@
 import java.util.stream.Stream;
 
 public class UserWhiteListPlugin implements IAuthorizationPlugin {
-    private static final String className = UserWhiteListPlugin.class.getName();
-    private static final Logger LOGGER = Logger.getLogger(className);
+    private static final String CLASS_NAME = UserWhiteListPlugin.class.getName();
+    private static final Logger LOGGER = Logger.getLogger(CLASS_NAME);
 
     // configuration parameters
     static final String FILE_PARAM = "file";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/SearchHelper.java
Patch:
@@ -293,7 +293,7 @@ public SearchHelper prepareExec(SortedSet<String> projects) {
                 Set<String> invalidProjects = projects.stream().
                     filter(proj -> (Project.getByName(proj) == null)).
                     collect(Collectors.toSet());
-                if (invalidProjects.size() > 0) {
+                if (!invalidProjects.isEmpty()) {
                     errorMsg = "Project list contains invalid projects: " +
                         String.join(", ", invalidProjects);
                     return this;
@@ -303,7 +303,7 @@ public SearchHelper prepareExec(SortedSet<String> projects) {
                     map(Project::getByName).
                     filter(proj -> !proj.isIndexed()).
                     collect(Collectors.toSet());
-                if (notIndexedProjects.size() > 0) {
+                if (!notIndexedProjects.isEmpty()) {
                     errorMsg = "Some of the projects to be searched are not indexed yet: " +
                         String.join(", ", notIndexedProjects.stream().
                         map(Project::getName).

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java
Patch:
@@ -245,7 +245,7 @@ public static Repository getRepository(File file, CommandTimeoutType cmdType, bo
 
                 // If this repository displays tags only for files changed by tagged
                 // revision, we need to prepare list of all tags in advance.
-                if (env.isTagsEnabled() && repo.hasFileBasedTags()) {
+                if (cmdType.equals(CommandTimeoutType.INDEXER) && env.isTagsEnabled() && repo.hasFileBasedTags()) {
                     repo.buildTagList(file, cmdType);
                 }
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -59,7 +59,7 @@ public String get() {
     @PUT
     @Consumes(MediaType.APPLICATION_XML)
     public void set(final String body, @QueryParam("reindex") final boolean reindex) {
-        env.applyConfig(body, reindex, reindex ? CommandTimeoutType.INDEXER : CommandTimeoutType.RESTFUL);
+        env.applyConfig(body, reindex, CommandTimeoutType.RESTFUL);
         suggesterService.refresh();
     }
 

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -791,6 +791,7 @@ public String[] getSearchOnlyIn() {
      *
      * @return {@code null} if not available, the project otherwise.
      */
+    @Nullable
     public Project getProject() {
         return Project.getProject(getResourceFile());
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BoundaryChangesets.java
Patch:
@@ -91,7 +91,7 @@ public synchronized List<String> getBoundaryChangesetIDs(String sinceRevision) t
         Collections.reverse(result);
 
         stat.report(LOGGER, Level.FINE,
-                String.format("done getting boundary changesets for ''%s'' (%d entries)",
+                String.format("Done getting boundary changesets for ''%s'' (%d entries)",
                         repository.getDirectoryName(), result.size()));
 
         return List.copyOf(result);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -854,7 +854,7 @@ public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, C
         clear();
         newrepos.forEach((_key, repo) -> putRepository(repo));
 
-        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()),
+        elapsed.report(LOGGER, String.format("Done invalidating %d repositories", newrepos.size()),
                 "history.repositories.invalidate");
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -945,7 +945,7 @@ public static void writeConfigToFile(RuntimeEnvironment env, String filename) th
         if (filename != null) {
             LOGGER.log(Level.INFO, "Writing configuration to {0}", filename);
             env.writeConfiguration(new File(filename));
-            LOGGER.info("Done...");
+            LOGGER.log(Level.INFO, "Done writing configuration to {0}", filename);
         }
     }
 
@@ -1042,14 +1042,14 @@ public void prepareIndexer(RuntimeEnvironment env,
         if (createHistoryCache) {
             // Even if history is disabled globally, it can be enabled for some repositories.
             if (repositories != null && !repositories.isEmpty()) {
-                LOGGER.log(Level.INFO, "Generating history cache for repositories: " +
+                LOGGER.log(Level.INFO, "Generating history cache for repositories: {0}",
                         String.join(",", repositories));
                 HistoryGuru.getInstance().createCache(repositories);
             } else {
                 LOGGER.log(Level.INFO, "Generating history cache for all repositories ...");
                 HistoryGuru.getInstance().createCache();
             }
-            LOGGER.info("Done...");
+            LOGGER.info("Done generating history cache");
         }
 
         if (createDict) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java
Patch:
@@ -51,7 +51,7 @@
 
 /**
  * This is supposed to get the matching lines from sourcefile.
- * since lucene does not easily give the match context.
+ * since Lucene does not easily give the match context.
  */
 public class Context {
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/SearchEngine.java
Patch:
@@ -473,7 +473,7 @@ public void results(int start, int end, List<Hit> ret) {
                                 new InputStreamReader(new FileInputStream(
                                 source + filename), StandardCharsets.UTF_8),
                                 null, null, null, filename, tags, nhits > 100,
-                                false, ret, scopes);
+                                getDefinition() != null, ret, scopes);
                         } else if (AbstractAnalyzer.Genre.XREFABLE == genre && data != null && summarizer != null) {
                             int l;
                             /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryWithPerPartesHistory.java
Patch:
@@ -88,7 +88,8 @@ protected void doCreateCache(HistoryCache cache, String sinceRevision, File dire
         int cnt = 0;
         for (String tillRevision: boundaryChangesetList) {
             Statistics stat = new Statistics();
-            LOGGER.log(Level.FINEST, "getting history for ({0}, {1})", new Object[]{sinceRevision, tillRevision});
+            LOGGER.log(Level.FINEST, "storing history cache for revision range ({0}, {1})",
+                    new Object[]{sinceRevision, tillRevision});
             finishCreateCache(cache, getHistory(directory, sinceRevision, tillRevision), tillRevision);
             sinceRevision = tillRevision;
 

File: opengrok-web/src/main/java/org/opengrok/web/Scripts.java
Patch:
@@ -114,7 +114,7 @@ public String toHtml() {
         putFromWebJar("jquery-tablesorter", "jquery.tablesorter.min.js", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.3", 13, true);
         putjs("searchable-option-list", "js/searchable-option-list-2.0.15", 14, true);
-        putjs("utils", "js/utils-0.0.42", 15, true);
+        putjs("utils", "js/utils-0.0.43", 15, true);
         putjs("repos", "js/repos-0.0.3", 20, true);
         putjs("diff", "js/diff-0.0.5", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: opengrok-web/src/main/java/org/opengrok/web/Scripts.java
Patch:
@@ -113,7 +113,7 @@ public String toHtml() {
         putjs("jquery-ui", "js/jquery-ui-1.12.1-custom", 11);
         putFromWebJar("jquery-tablesorter", "jquery.tablesorter.min.js", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.3", 13, true);
-        putjs("searchable-option-list", "js/searchable-option-list-2.0.14", 14);
+        putjs("searchable-option-list", "js/searchable-option-list-2.0.15", 14, true);
         putjs("utils", "js/utils-0.0.42", 15, true);
         putjs("repos", "js/repos-0.0.3", 20, true);
         putjs("diff", "js/diff-0.0.5", 20, true);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -122,7 +122,7 @@
 
 /**
  * Manages and provides Analyzers as needed. Please see
- * <a href="https://github.com/OpenGrok/OpenGrok/wiki/OpenGrok-Internals">
+ * <a href="https://github.com/oracle/opengrok/wiki/Internals">
  * this</a> page for a great description of the purpose of the AnalyzerGuru.
  *
  * Created on September 22, 2005

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -425,8 +425,8 @@ private void addTerraformSupport(List<String> command) {
      * @throws IOException I/O exception
      * @throws InterruptedException interrupted command
      */
-    public Definitions doCtags(String file) throws IOException,
-            InterruptedException {
+    public Definitions doCtags(String file) throws IOException, InterruptedException {
+
         if (file.length() < 1 || "\n".equals(file)) {
             return null;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BoundaryChangesets.java
Patch:
@@ -58,7 +58,7 @@ public BoundaryChangesets(RepositoryWithPerPartesHistory repository) {
         }
         if (maxCount <= 1) {
             throw new RuntimeException(String.format("per partes count for repository ''%s'' " +
-                    "must be stricly greater than 1", repository.getDirectoryName()));
+                    "must be strictly greater than 1", repository.getDirectoryName()));
         }
         LOGGER.log(Level.FINER, "using history cache chunks with {0} entries for repository {1}",
                 new Object[]{this.maxCount, repository});

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -708,7 +708,7 @@ private org.eclipse.jgit.lib.Repository getJGitRepository(String directory) thro
                 parentAbsPath = gitDirValue.substring(0, dotGitIndex - 1);
             } else {
                 File parent = new File(directory, gitDirValue.substring(0, dotGitIndex + Constants.DOT_GIT.length()));
-                parentAbsPath = parent.getAbsolutePath();
+                parentAbsPath = parent.getCanonicalPath();
                 int indexDotGitParent = parentAbsPath.indexOf(File.separator + Constants.DOT_GIT);
                 if (indexDotGitParent == -1) {
                     return null;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -397,6 +397,7 @@ public void store(History history, Repository repository) throws HistoryExceptio
      * corresponding source file.
      *
      * @param history history object to process into per-file histories
+     * @param tillRevision end revision
      * @param repository repository object
      */
     @Override

File: opengrok-web/src/main/java/org/opengrok/web/Scripts.java
Patch:
@@ -114,7 +114,7 @@ public String toHtml() {
         putFromWebJar("jquery-tablesorter", "jquery.tablesorter.min.js", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.3", 13, true);
         putjs("searchable-option-list", "js/searchable-option-list-2.0.14", 14);
-        putjs("utils", "js/utils-0.0.41", 15, true);
+        putjs("utils", "js/utils-0.0.42", 15, true);
         putjs("repos", "js/repos-0.0.3", 20, true);
         putjs("diff", "js/diff-0.0.5", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -100,7 +100,7 @@ public class GitRepository extends RepositoryWithPerPartesHistory {
     private static final long serialVersionUID = -6126297612958508386L;
 
     public static final int GIT_ABBREV_LEN = 8;
-    public static final int MAX_CHANGESETS = 512;
+    public static final int MAX_CHANGESETS = 65536;
 
     public GitRepository() {
         type = "git";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialRepository.java
Patch:
@@ -58,7 +58,7 @@ public class MercurialRepository extends RepositoryWithPerPartesHistory {
 
     private static final long serialVersionUID = 1L;
 
-    public static final int MAX_CHANGESETS = 256;
+    public static final int MAX_CHANGESETS = 131072;
 
     /**
      * The property name used to obtain the client command for this repository.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialHistoryParser.java
Patch:
@@ -76,7 +76,7 @@ class MercurialHistoryParser implements Executor.StreamHandler {
     History parse(File file, String sinceRevision, String tillRevision) throws HistoryException {
         isDir = file.isDirectory();
         try {
-            Executor executor = repository.getHistoryLogExecutor(file, sinceRevision, tillRevision,false);
+            Executor executor = repository.getHistoryLogExecutor(file, sinceRevision, tillRevision, false);
             int status = executor.exec(true, this);
 
             if (status != 0) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/History.java
Patch:
@@ -120,6 +120,8 @@ public boolean hasTags() {
 
     /**
      * Gets a value indicating if {@code file} is in the list of renamed files.
+     * @param file file path
+     * @return is file renamed
      */
     public boolean isRenamed(String file) {
         return renamedFiles.contains(file);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -620,7 +620,7 @@ public History getHistory(File file, String sinceRevision, String tillRevision)
     }
 
     /**
-     * Accumulate list of changed files and renamed files (if enabled) for given commit
+     * Accumulate list of changed files and renamed files (if enabled) for given commit.
      * @param renamedFiles result containing the renamed files in this commit
      * @param files result containing changed files in this commit
      * @param commit RevCommit object

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BoundaryChangesetsTest.java
Patch:
@@ -75,7 +75,7 @@ void testInvalidMaxCount(int maxCount) {
     }
 
     /**
-     * Used to supply test data for testing {@link BoundaryChangesets#getBoundaryChangesetIDs(String)}
+     * Used to supply test data for testing {@link BoundaryChangesets#getBoundaryChangesetIDs(String)}.
      * @return triplets of (maximum count, start revision, list of expected revisions)
      *
      * The test expects this sequence of changesets:

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -698,7 +698,7 @@ private void changeFileAndCommit(Git git, File file, String comment) throws Exce
     }
 
     /**
-     * Renamed files need special treatment when given repository support per partes history retrieval.
+     * Renamed files need special treatment when given repository supports per partes history retrieval.
      * Specifically, when a file is detected as renamed, its history needs to be retrieved with upper bound,
      * otherwise there would be duplicate history entries if there were subsequent changes to the file
      * in the following history chunks. This test prevents that.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryCache.java
Patch:
@@ -115,6 +115,9 @@ boolean hasCacheForDirectory(File directory, Repository repository)
     String getLatestCachedRevision(Repository repository)
             throws HistoryException;
 
+    // TODO
+    void storeLatestCachedRevision(Repository repository, String version);
+
     /**
      * Get the last modified times for all files and subdirectories in the
      * specified directory.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -279,6 +279,8 @@ public static void main(String[] argv) {
                             " under the data root and reindex\n");
                     System.exit(1);
                 }
+
+                System.exit(0);
             }
 
             // Let repository types to add items to ignoredNames.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -1507,6 +1507,7 @@ public static String linkify(String url, boolean newTab) {
                 attrs.put("title", String.format("Link to %s", Util.encode(url)));
                 if (newTab) {
                     attrs.put("target", "_blank");
+                    attrs.put("rel", "noreferrer");
                 }
                 return buildLink(url, attrs);
             } catch (URISyntaxException | MalformedURLException ex) {
@@ -1587,6 +1588,7 @@ public static String buildLink(String name, String url, boolean newTab)
         attrs.put("href", url);
         if (newTab) {
             attrs.put("target", "_blank");
+            attrs.put("rel", "noreferrer");
         }
         return buildLink(name, attrs);
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -642,7 +642,7 @@ History getHistory(File file, String sinceRevision) throws HistoryException {
                 }
 
                 HistoryEntry historyEntry = new HistoryEntry(commit.getId().abbreviate(GIT_ABBREV_LEN).name(),
-                        new Date((long) commit.getCommitTime() * 1000),
+                        commit.getAuthorIdent().getWhen(),
                         commit.getAuthorIdent().getName() +
                                 " <" + commit.getAuthorIdent().getEmailAddress() + ">",
                         null, commit.getFullMessage(), true);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1271,7 +1271,7 @@ private void indexDown(File dir, String parent, IndexDownArgs args)
 
                             // If the term's path matches path of currently processed file,
                             // it is clear that the file has been modified and thus
-                            // removeFile() will be followed by call to addFile() below.
+                            // removeFile() will be followed by call to addFile() in indexParallel().
                             // In such case, instruct removeFile() not to remove history
                             // cache for the file so that incremental history cache
                             // generation works.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -542,7 +542,7 @@ public Configuration() {
         //mandoc is default(String)
         setMaxSearchThreadCount(2 * Runtime.getRuntime().availableProcessors());
         setMaxRevisionThreadCount(Runtime.getRuntime().availableProcessors());
-        setMergeCommitsEnabled(true);
+        setMergeCommitsEnabled(false);
         setMessageLimit(500);
         setNavigateWindowEnabled(false);
         setNestingMaximum(1);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -871,11 +871,11 @@ private static void checkConfiguration() {
             die("Repositories were specified; history is off however");
         }
 
-        if (! new File(cfg.getSourceRoot()).canRead()) {
+        if (!new File(cfg.getSourceRoot()).canRead()) {
             die("Source root '" + cfg.getSourceRoot() + "' must be readable");
         }
 
-        if (! new File(cfg.getDataRoot()).canWrite()) {
+        if (!new File(cfg.getDataRoot()).canWrite()) {
             die("Data root '" + cfg.getDataRoot() + "' must be writable");
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AccumulatedNumLinesLOC.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NumLinesLOC.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/NumLinesLOCAccessor.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import org.apache.lucene.document.Document;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/NumLinesLOCAggregator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import org.opengrok.indexer.analysis.AccumulatedNumLinesLOC;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/NumLinesLOCUtil.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import org.apache.lucene.document.Document;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/DirectoryEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/NumberUtil.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.util;
 
 public class NumberUtil {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BitKeeperRepositoryTest.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Scanner;
+import java.util.Set;
 import java.util.TreeSet;
 
 import org.junit.jupiter.api.AfterEach;
@@ -91,7 +92,7 @@ public void tearDown() {
 
     private static void validateHistory(History history) {
         final List<HistoryEntry> entries = history.getHistoryEntries();
-        final List<String> renames = history.getRenamedFiles();
+        final Set<String> renames = history.getRenamedFiles();
 
         assertTrue(entries.size() > 0, "File history has no entries.");
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryClassLoader.java
Patch:
@@ -53,7 +53,7 @@ public class HistoryClassLoader extends ClassLoader {
     @Override
     public Class<?> loadClass(final String name) throws ClassNotFoundException {
         if (!allowedClasses.contains(name)) {
-            throw new IllegalAccessError(name + " is not allowed to be used in configuration");
+            throw new IllegalAccessError(name + " is not allowed to be used in History object");
         }
 
         return getClass().getClassLoader().loadClass(name);

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -125,6 +125,8 @@ public final class PageConfig {
     // cookie name
     public static final String OPEN_GROK_PROJECT = "OpenGrokProject";
 
+    public static final String DUMMY_REVISION = "unknown";
+
     // query parameters
     protected static final String ALL_PROJECT_SEARCH = "searchall";
     protected static final String PROJECT_PARAM_NAME = "project";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -655,7 +655,7 @@ private void rebuildTagList(File directory) {
         }
 
         if (LOGGER.isLoggable(Level.FINER)) {
-            LOGGER.log(Level.FINEST, "Read tags count={0} for {1}",
+            LOGGER.log(Level.FINER, "Read tags count={0} for {1}",
                     new Object[] {tagList.size(), directory});
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -391,7 +391,7 @@ public static Map<String, String> getfileTypeDescriptions() {
         return Collections.unmodifiableMap(fileTypeDescriptions);
     }
 
-    public List<AnalyzerFactory> getAnalyzerFactories() {
+    public static List<AnalyzerFactory> getAnalyzerFactories() {
         return Collections.unmodifiableList(factories);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2021, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
@@ -32,7 +32,7 @@
 
 public class MandocAnalyzerFactory extends FileAnalyzerFactory {
 
-    private static final String NAME = "Mandoc";
+    private static final String NAME = "Manual pages";
 
     public static final Matcher MATCHER = new Matcher() {
         @Override

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/LuceneCompatibilityTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
@@ -89,7 +89,7 @@ protected void setUp() throws Exception {
     }
 
     public void testCompatibility() throws Exception {
-        for (AnalyzerFactory fa : guru.getAnalyzerFactories()) {
+        for (AnalyzerFactory fa : AnalyzerGuru.getAnalyzerFactories()) {
             String input = "Hello world";
             String[] output = new String[]{"Hello", "world"};
             testA = fa.getAnalyzer();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -171,7 +171,9 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision)
         cmd.add("--name-only");
         cmd.add("--pretty=fuller");
         cmd.add(GIT_DATE_OPT);
-        cmd.add("-m");
+        if (isMergeCommitsEnabled()) {
+            cmd.add("-m");
+        }
 
         if (file.isFile() && isHandleRenamedFiles()) {
             cmd.add("--follow");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryOctopusTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
@@ -34,6 +34,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.RepositoryInstalled;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.util.TestRepository;
 import org.opengrok.indexer.web.Util;
 
@@ -59,6 +60,7 @@ public static void setUpClass() throws Exception {
         repository = new TestRepository();
         repository.create(GitRepositoryOctopusTest.class.getResourceAsStream(
                 "/history/git-octopus.zip"));
+        RuntimeEnvironment.getInstance().setMergeCommitsEnabled(true);
     }
 
     @AfterClass

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryTest.java
Patch:
@@ -206,7 +206,7 @@ public void testDetermineParent() throws Exception {
 
         // Next, clone the repository and create new origin there.
         // Clone under source root to avoid problems with prohibited symlinks.
-        File localPath = new File(repository.getSourceRoot(), "gitCloneTestDetermineBranch");
+        File localPath = new File(repository.getSourceRoot(), "gitCloneTestDetermineParent");
         assertTrue(localPath.delete());
         String cloneUrl = root.toURI().toString();
         try (Git gitClone = Git.cloneRepository()

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/MercurialIsWorkingTest.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import org.junit.AfterClass;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryFactoryTest.java
Patch:
@@ -160,7 +160,7 @@ static void testNotWorkingRepository(TestRepository repository, String repoPath,
     public void testNotWorkingBitkeeperRepository()
             throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException,
             IOException, ForbiddenSymlinkException {
-        testNotWorkingRepository(repository,"bitkeeper", BitKeeperRepository.CMD_PROPERTY_KEY);
+        testNotWorkingRepository(repository, "bitkeeper", BitKeeperRepository.CMD_PROPERTY_KEY);
     }
 
     @Test

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -191,6 +191,8 @@ protected TokenStreamComponents createComponents(String fieldName) {
             }
             case QueryBuilder.DEFS:
                 return new TokenStreamComponents(createPlainSymbolTokenizer());
+            case QueryBuilder.LASTREV:
+                return new TokenStreamComponents(createPlainFullTokenizer());
             default:
                 LOGGER.log(
                         Level.WARNING, "Have no analyzer for: {0}", fieldName);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/QueryBuilder.java
Patch:
@@ -60,8 +60,9 @@ public class QueryBuilder {
     public static final String SCOPES = "scopes";
     public static final String NUML = "numl";
     public static final String LOC = "loc";
+    public static final String LASTREV = "lastrev"; // last revision
     /**
-     * Fields we use in lucene: internal ones.
+     * Fields we use in Lucene: internal ones.
      */
     public static final String D = "d"; // Directory key
     public static final String U = "u"; // File and timestamp key

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -618,7 +618,7 @@ public static String[] parseOptions(String[] argv) throws ParseException {
                     "files), but process all other command line options.").execute(v ->
                     runIndex = false);
 
-            parser.on("--nestingMaximum", "=number",
+            parser.on("--nestingMaximum", "=number", Integer.class,
                     "Maximum depth of nested repositories. Default is 1.").execute(v ->
                     cfg.setNestingMaximum((Integer) v));
 

File: suggester/src/test/java/org/opengrok/suggest/SuggesterProjectDataTest.java
Patch:
@@ -316,7 +316,7 @@ public void testRebuildPicksUpNewFields() throws IOException {
         }
         init(false);
 
-        // add new field after suggester data were initialized
+        // add new field after suggester data was initialized
         addText(FIELD, "term1 term2");
 
         assertTrue(getSuggestions(FIELD, "t", 10).isEmpty());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -106,6 +106,8 @@
 import org.opengrok.indexer.util.TandemPath;
 import org.opengrok.indexer.web.Util;
 
+import static org.opengrok.indexer.index.IndexerUtil.getHeaders;
+
 /**
  * This class is used to create / update the index databases. Currently we use
  * one index database per project.
@@ -389,6 +391,7 @@ private void markProjectIndexed(Project project) {
                     .path(Util.URIEncode(project.getName()))
                     .path("indexed")
                     .request()
+                    .headers(getHeaders())
                     .put(Entity.text(""));
         } catch (RuntimeException e) {
             LOGGER.log(Level.WARNING, String.format("Couldn''t notify the webapp that project %s was indexed",

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -104,7 +104,7 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             env.watchDog.start(new File(pluginDirectory));
         }
 
-        // Check project index(es).
+        // Check index(es).
         if (env.isProjectsEnabled()) {
             LOGGER.log(Level.FINE, "Checking indexes for all projects");
             Map<String, Project> projects = env.getProjects();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -757,7 +757,8 @@ public static String[] parseOptions(String[] argv) throws ParseException {
                     cfg.setWebappLAF((String) stylePath));
 
             parser.on("-T", "--threads", "=number", Integer.class,
-                    "The number of threads to use for index generation and repository scan.",
+                    "The number of threads to use for index generation, repository scan",
+                    "and repository invalidation.",
                     "By default the number of threads will be set to the number of available",
                     "CPUs. This influences the number of spawned ctags processes as well.").
                     execute(threadCount -> cfg.setIndexingParallelism((Integer) threadCount));

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java
Patch:
@@ -268,7 +268,6 @@ private synchronized LdapContext connect() {
 
             try {
                 ctx = new InitialLdapContext(env, null);
-                ctx.reconnect(null);
                 ctx.setRequestControls(null);
                 LOGGER.log(Level.INFO, "Connected to LDAP server {0}", this.toString());
                 errorTimestamp = 0;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -407,8 +408,8 @@ public String getPathRelativeToSourceRoot(File file)
             throw new FileNotFoundException("sourceRoot is not defined");
         }
 
-        String maybeRelPath = PathUtils.getRelativeToCanonical(file.getPath(),
-                sourceRoot, getAllowedSymlinks(), getCanonicalRoots());
+        String maybeRelPath = PathUtils.getRelativeToCanonical(file.toPath(),
+                Paths.get(sourceRoot), getAllowedSymlinks(), getCanonicalRoots());
         File maybeRelFile = new File(maybeRelPath);
         if (!maybeRelFile.isAbsolute()) {
             /*

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -169,7 +169,7 @@ public void setDirectoryName(File dir) {
         String path;
         String originalPath = dir.getPath();
         try {
-            path = PathUtils.getRelativeToCanonical(originalPath, rootPath);
+            path = PathUtils.getRelativeToCanonical(dir.toPath(), Paths.get(rootPath));
             // OpenGrok has a weird convention that directoryNameRelative must start with a path separator,
             // as it is elsewhere directly appended to env.getSourceRootPath() and also stored as such.
             if (!path.equals(originalPath)) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryGuruTest.java
Patch:
@@ -125,12 +125,13 @@ public void testGetRevision() throws HistoryException, IOException {
     }
 
     @Test
+    @ConditionalRun(RepositoryInstalled.SubversionInstalled.class)
     public void testBug16465() throws HistoryException, IOException {
         HistoryGuru instance = HistoryGuru.getInstance();
         for (File f : FILES) {
             if (f.getName().equals("bugreport16465@")) {
-                assertNotNull(instance.getHistory(f));
-                assertNotNull(instance.annotate(f, null));
+                assertNotNull(f.getPath() + " must have history", instance.getHistory(f));
+                assertNotNull(f.getPath() + " must have annotations", instance.annotate(f, null));
             }
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Ric Harris <harrisric@users.noreply.github.com>.
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -191,6 +191,9 @@ public void testStoreAndGetIncrementalTags() throws Exception {
         // Store the history.
         cache.store(historyToStore, repo);
 
+        // Avoid uncommitted changes.
+        MercurialRepositoryTest.runHgCommand(reposRoot, "revert", "--all");
+
         // Add bunch of changesets with file based changes and tags.
         MercurialRepositoryTest.runHgCommand(reposRoot, "import",
                 Paths.get(getClass().getResource("/history/hg-export-tag.txt").toURI()).toString());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AbstractAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Use is subject to license terms.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuruHelp.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import org.opengrok.indexer.util.StringUtils;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/CompatibleAnalyser.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -17,9 +17,9 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/CtagsReader.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.EnumMap;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/CtagsValidator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import org.opengrok.indexer.util.ObjectValidator;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/DisjointSpanChangedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/EmphasisHint.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ExpandTabsReader.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2009, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.FilterReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Use is subject to license terms.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzerFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexJointLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexNonXref.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.CharArrayReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexStackingLexer.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexStateStacker.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexSymbolMatcher.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.Locale;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexTokenizer.java
Patch:
@@ -19,7 +19,7 @@
 
  /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXref.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXrefUtils.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LangMap.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LangTreeMap.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.ArrayList;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LinkageMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LinkageType.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NonSymbolMatchedListener.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/PathlikeMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/PendingToken.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.Objects;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/PendingTokenOffsetsComparator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.Comparator;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ScanningSymbolMatcher.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ScopeAction.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ScopeChangedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SourceCodeSeenEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/StreamSource.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2013, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SymbolMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SymbolMatchedListener.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SymbolMatchedPublisher.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/TextAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/TextMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/XrefStyle.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 public class XrefStyle {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Xrefer.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.ada;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ada;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaLexer.java
Patch:
@@ -20,7 +20,6 @@
  /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ada;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/BZip2Analyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/BZip2AnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/TarAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/TarAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipAnalyzerFactory.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipMatcherBase.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.asm;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.asm;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.asm;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.c;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxConsts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.clojure;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.clojure;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.clojure;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.csharp;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.csharp;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/Consts.java
Patch:
@@ -17,6 +17,9 @@
  * CDDL HEADER END
  */
 
+/*
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
+ */
 package org.opengrok.indexer.analysis.csharp;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/data/IgnorantAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.data;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/data/ImageAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.data;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.document;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocException.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocRunner.java
Patch:
@@ -19,8 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
- * (derived from Ctags.java).
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/TroffAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.document;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.erlang;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzer.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.erlang;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.erlang;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/ELFAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/ELFAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JFieldBuilder.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import java.io.StringWriter;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JarAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JarAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
- * Portions Copyright (c) 2020-2020, Lubos Kosco <tarzanek@gmail.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2020, Lubos Kosco <tarzanek@gmail.com>.
  */
 package org.opengrok.indexer.analysis.executables;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import java.io.InputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.fortran;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.fortran;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.fortran;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.golang;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzer.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.golang;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.golang;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLLexer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.java;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.java;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.java;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.javascript;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.javascript;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.javascript;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.javascript;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/Consts.java
Patch:
@@ -17,8 +17,8 @@
  * CDDL HEADER END
  */
 
- /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+/*
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.json;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.json;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.json;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.kotlin;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.kotlin;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.kotlin;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.lisp;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.lisp;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.lua;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.lua;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.lua;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.lua;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.pascal;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.pascal;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.pascal;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.pascal;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.perl;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.perl;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.perl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlLexer.java
Patch:
@@ -17,10 +17,9 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.perl;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/Consts.java
Patch:
@@ -17,6 +17,9 @@
  * CDDL HEADER END
  */
 
+/*
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
+ */
 package org.opengrok.indexer.analysis.php;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.php;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.php;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/AbstractSourceCodeAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/DefinitionsTokenStream.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.plain;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/PlainAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.plain;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/XMLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.plain;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.powershell;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PoshUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.powershell;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.powershell;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.powershell;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.python;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.python;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.python;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.python;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RLexer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2016 Nikolay Denev.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2016, Nikolay Denev.
  */
-
 package org.opengrok.indexer.analysis.rust;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzer.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2016 Nikolay Denev.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2016, Nikolay Denev.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.rust;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2016 Nikolay Denev.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2016, Nikolay Denev.
  */
-
 package org.opengrok.indexer.analysis.rust;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.scala;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.scala;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.scala;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.scala;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sh;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/ShAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sh;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/Consts.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/JointSQLLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/JointSQLSymbolTokenizer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import java.util.Locale;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/JointSQLXref.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLConsts.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.swift;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.swift;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.swift;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.tcl;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.tcl;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.tcl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import org.opengrok.indexer.analysis.hcl.HCLLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.typescript;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.typescript;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.typescript;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.typescript;
 
 import org.opengrok.indexer.analysis.javascript.JavaScriptLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/uue/UuencodeAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.uue;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/uue/UuencodeAnalyzerFactory.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2012, 2013 Constantine A. Murenin &lt;C++@Cns.SU&gt;
+ * Copyright (c) 2012, 2013, Constantine A. Murenin &lt;C++@Cns.SU&gt;
  */
-
 package org.opengrok.indexer.analysis.uue;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/VBAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.vb;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer.Genre;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationEntity.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationException.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.authorization;
 
 public class AuthorizationException extends RuntimeException {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/CanonicalRootValidator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/CommandTimeoutType.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.configuration;
 
 public enum CommandTimeoutType {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigMerge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Aleksandr Kirillov <alexkirillovsamara@gmail.com>.
  */
 package org.opengrok.indexer.configuration;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationHelp.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.lang.annotation.Annotation;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationValueConsumer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Filter.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Group.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Groups.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredDirs.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredFiles.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredNames.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IncludeFiles.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Aleksandr Kirillov <alexkirillovsamara@gmail.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IndexTimestamp.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/LuceneLockName.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Nameable.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/PathAccepter.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.configuration;
 
 import io.micrometer.statsd.StatsdFlavor;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuggesterConfig.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuperIndexSearcher.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ThreadpoolSearcherFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
-  * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
   */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/WatchDogService.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.configuration;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Annotation.java
Patch:
@@ -18,11 +18,10 @@
  */
 
 /*
- * Copyright (c) 2007, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Krystof Tulinger <k.tulinger@seznam.cz>.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BazaarRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BazaarTagParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperHistoryParser.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2017, James Service <jas2701@googlemail.com>.
- * Portions Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.BufferedReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperRepository.java
Patch:
@@ -18,11 +18,10 @@
  */
 
 /*
- * Author: James Service <jas2701@googlemail.com>
- * Portions by: Oracle and/or its affiliates.
+ * Copyright (c) 2017, James Service <jas2701@googlemail.com>
+ * Portions Copyright (c) 2017, 2020, Oracle and/or its affiliates.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/CVSAnnotationParser.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.BufferedReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseAnnotationParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.beans.Encoder;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2019, Krystof Tulinger <k.tulinger@seznam.cz>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitTagEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitTagParser.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/History.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.util.ArrayList;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryException.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryReader.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialTagEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialTagParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MonotoneRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java
Patch:
@@ -23,7 +23,6 @@
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Chris Quick <gtoph00@gmail.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import static org.opengrok.indexer.history.PerforceRepository.protectPerforceFilename;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSAnnotationParser.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSRepository.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSget.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorHistoryParser.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2008, Peter Bray.
  */
-/* Portions Copyright 2008 Peter Bray */
 package org.opengrok.indexer.history;
 
 import java.io.BufferedReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorRepository.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2008 Peter Bray
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2008, Peter Bray.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoriesHelp.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSget.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/TagEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettings.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.ByteArrayInputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettings3.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.ByteArrayInputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettingsAccessor.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettingsUpgrader.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexedSymlink.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerException.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.index;
 
 import java.util.concurrent.ExecutorService;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerUtil.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileDeletion.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileRenaming.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingSymlinkage.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/LoggerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/LoggerFactoryBridge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/PackageBasedLoggerFactoryBridge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/ConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/FileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/LogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/SimpleConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/SimpleFileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/DirectoryEntry.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import org.opengrok.indexer.analysis.NullableNumLinesLOC;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/DirectoryExtraReader.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Hit.java
Patch:
@@ -19,8 +19,6 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * portions copyright 2005 Trond Norbye.  All rights reserved.
- * Use is subject to license terms.
  */
 package org.opengrok.indexer.search;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/QueryBuilder.java
Patch:
@@ -19,8 +19,8 @@
 
 /* 
  * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import static org.opengrok.indexer.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions copyright (c) 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/TermEscaperBase.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/ContextArgs.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/ContextFormatter.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/FormattedLines.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.util.Map;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineHighlight.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineMatcher.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.util.Locale;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/PassageConverter.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.util.SortedMap;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -1223,7 +1223,7 @@ public void setListDirsFirst(boolean flag) {
      * @return path to the file holding compiled path descriptions for the web application
      */
     public Path getDtagsEftarPath() {
-        return Paths.get(getDataRoot(), "index", EFTAR_DTAGS_NAME);
+        return Paths.get(getDataRoot(), EFTAR_DTAGS_NAME);
     }
 
     public String getCTagsExtraOptionsFile() {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalUtils.java
Patch:
@@ -36,7 +36,7 @@ public class PascalUtils {
      * ¹Correctness in a long sequence of apostrophes is limited because Java
      * look-behind is not variable length but instead must have a definite
      * upper bound in the regex definition.
-     * </p>
+     *
      */
     public static final Pattern CHARLITERAL_APOS_DELIMITER =
         Pattern.compile("\\'((?<=^.(?!\\'))|(?<=[^\\'].(?!\\'))|(?<=^(\\'\\'){1,3}.(?!\\'))|(?<=[^\\'](\\'\\'){1,3}.(?!\\')))");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationPlugin.java
Patch:
@@ -82,13 +82,11 @@ public AuthorizationPlugin(AuthControlFlag flag, String name, IAuthorizationPlug
      * Call the load method on the underlying plugin if the plugin exists. Note
      * that the load method can throw any throwable from its body and it should
      * not stop the application.
-     *
      * <p>
-     * If the method is unable to load the plugin because of any reason (mostly
+     * <p>If the method is unable to load the plugin because of any reason (mostly
      * the class is not found, not instantiable or the load method throws an
      * exception) then any authorization check should fail for this plugin in
      * the future.
-     * </p>
      *
      * @param parameters parameters given in the configuration
      *

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/JFlexXrefTest.java
Patch:
@@ -272,11 +272,9 @@ public void bug16883() throws Exception {
     }
 
     /**
-     * <p>
      * Test the handling of #include in C and C++. In particular, these issues
      * are tested:
-     * </p>
-     *
+     * <p>
      * <ul>
      *
      * <li>

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -430,7 +430,7 @@ public String canProcess() {
      *
      * <p>
      * For the root directory (/xref/) an authorization is performed for each
-     * project in case that projects are used.</p>
+     * project in case that projects are used.
      *
      * @see #getResourceFile()
      * @see #isDir()
@@ -1748,7 +1748,7 @@ private SortedSet<AcceptedMessage> getProjectMessages() {
      * <p>
      * The resource is modified since the weak ETag value in the request, the ETag is
      * computed using:
-     * </p>
+     *
      * <ul>
      * <li>the source file modification</li>
      * <li>project messages</li>
@@ -1758,7 +1758,7 @@ private SortedSet<AcceptedMessage> getProjectMessages() {
      *
      * <p>
      * If the resource was modified, appropriate headers in the response are filled.
-     * </p>
+     *
      *
      * @param request the http request containing the headers
      * @param response the http response for setting the headers

File: plugins/src/main/java/opengrok/auth/plugin/AbstractLdapPlugin.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Abstract class for all plug-ins working with LDAP. Takes care of
- * <ul>
+ * <p><ul>
  * <li>controlling the established session</li>
  * <li>controlling if the session belongs to the user</li>
  * </ul>
@@ -46,7 +46,6 @@
  * The intended methods to implement are the
  * {@link #checkEntity(HttpServletRequest, Project)} and
  * {@link #checkEntity(HttpServletRequest, Group)}.
- * </p>
  *
  * @author Krystof Tulinger
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;

File: opengrok-web/src/test/java/org/opengrok/web/WebappListenerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.web;
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/LuceneCompatibilityTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.opengrok.indexer.search.QueryBuilder;
 
 /**
- * external tests, need to have test-framework on the path this will do a sanity
+ * Need to have test-framework on the path. This will do a sanity
  * test on analyzers/tokenizers if they follow latest lucene asserts
  *
  * on compile test cp there needs to be lucene-test-framework, lucene-codecs and
@@ -83,8 +83,8 @@ public static Test suite() {
     protected void setUp() throws Exception {
         guru = new AnalyzerGuru();
         Class<?> c = Class.forName(LUCENE_TEST_CLASS);
-        //testC = c.newInstance(); //this is static call
-        Class<?>[] argTypes = {TokenStream.class, String[].class, int[].class, int[].class, String[].class, int[].class, int[].class, Integer.class, boolean.class};
+        Class<?>[] argTypes = {TokenStream.class, String[].class, int[].class, int[].class, String[].class, int[].class,
+                int[].class, Integer.class, boolean.class};
         testM = c.getDeclaredMethod(LUCENE_TEST_METHOD, argTypes);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/document/DocumentMatcherTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.opengrok.indexer.analysis.AnalyzerFactory;
 
 /**
- * Represents a container for tests of {@link DocumentMatcher} subclasses
+ * Represents a container for tests of {@link DocumentMatcher} subclasses.
  */
 public class DocumentMatcherTest {
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/haskell/HaskellSymbolTokenizerTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -74,7 +75,7 @@ private String[] getTermsFor(Reader r) {
     public void sampleTest() throws UnsupportedEncodingException {
         InputStream res = getClass().getClassLoader().getResourceAsStream(
                 "analysis/haskell/sample.hs");
-        InputStreamReader r = new InputStreamReader(res, "UTF-8");
+        InputStreamReader r = new InputStreamReader(res, StandardCharsets.UTF_8);
         String[] termsFor = getTermsFor(r);        
         assertArrayEquals(
                 new String[]{

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/php/PhpSymbolTokenizerTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -83,7 +84,7 @@ public void basicTest() {
     public void sampleTest() throws UnsupportedEncodingException {
         InputStream res = getClass().getClassLoader().getResourceAsStream(
                 "analysis/php/sample.php");
-        InputStreamReader r = new InputStreamReader(res, "UTF-8");
+        InputStreamReader r = new InputStreamReader(res, StandardCharsets.UTF_8);
         String[] termsFor = getTermsFor(r);
         assertArrayEquals(
                 new String[]{

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/plain/XMLAnalyzerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
@@ -28,11 +28,12 @@
 import java.io.StringReader;
 import java.io.StringWriter;
 import org.junit.Test;
-import static org.junit.Assert.*;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;
 import org.opengrok.indexer.analysis.WriteXrefArgs;
 
+import static org.junit.Assert.assertTrue;
+
 public class XMLAnalyzerTest {
     @Test
     public void bug2225() throws IOException {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/condition/ConditionalRunRule.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.condition;
 
@@ -91,7 +91,8 @@ private static boolean hasConditionalIgnoreAnnotationOnMethod(Description aDescr
     private static RunCondition getIgnoreConditionOnMethod(Description aDescription) {
         try {
             // this is possible because test methods must not have any argument
-            ConditionalRun[] annotations = aDescription.getTestClass().getMethod(aDescription.getMethodName()).getAnnotationsByType(ConditionalRun.class);
+            ConditionalRun[] annotations = aDescription.getTestClass().getMethod(aDescription.getMethodName())
+                    .getAnnotationsByType(ConditionalRun.class);
             return new IgnoreConditionCreator(aDescription.getTestClass(), annotations).create();
         } catch (NoSuchMethodException | SecurityException ex) {
             throw new RuntimeException(ex);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/GroupsTest.java
Patch:
@@ -191,7 +191,7 @@ private Group findGroup(Set<Group> groups, String needle) {
         return null;
     }
 
-    final static String BASIC_CONFIGURATION = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
+    static final String BASIC_CONFIGURATION = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
             + "<java version=\"1.8.0_65\" class=\"java.beans.XMLDecoder\">\n"
             + " <object class=\"org.opengrok.indexer.configuration.Configuration\" id=\"Configuration0\">\n"
             + "    <void method=\"addGroup\">\n"

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryFactoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
@@ -49,7 +49,7 @@
 import org.opengrok.indexer.util.TestRepository;
 
 /**
- * Test RepositoryFactory
+ * Test RepositoryFactory.
  *
  * @author Vladimir Kotal
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SummarizerTest.java
Patch:
@@ -18,15 +18,16 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020 Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opengrok.indexer.search;
 
 import org.apache.lucene.search.Query;
 import org.junit.Test;
 import org.opengrok.indexer.analysis.CompatibleAnalyser;
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertNotNull;
 
 /**
  * Unit tests for the Summarizer class.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/WildCardMatcherTest.java
Patch:
@@ -18,13 +18,14 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020 Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opengrok.indexer.search.context;
 
 import org.junit.Test;
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertEquals;
 
 /**
  * Tests for the WildCardMatcher class.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/FileUtilities.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.Assert.assertNotNull;
 
 /**
- * Various filesystem utilities used by the different test setups
+ * Various filesystem utilities used by the different test setups.
  *
  * @author Trond Norbye
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/HeadHandlerTest.java
Patch:
@@ -95,7 +95,7 @@ private static class RandomInputStream extends InputStream {
          * @param maxCharCount number of characters to generate
          * @param maxLines number of lines to generate
          */
-        public RandomInputStream(int maxCharCount, int maxLines) {
+        RandomInputStream(int maxCharCount, int maxLines) {
             if (maxLines > maxCharCount) {
                 throw new IllegalArgumentException("maxLines must be smaller than or equal to maxCharCount");
             }
@@ -132,7 +132,7 @@ String getResult() {
         }
 
         @Override
-        public int read() throws IOException {
+        public int read() {
             int ret;
             if (charCount < maxCharCount) {
                 if (charCount > 0 && lines < maxLines - 1 && charCount == lineBreaks[lines]) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/StreamUtils.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
  */
 
@@ -41,7 +41,7 @@
 import static org.junit.Assert.assertNotNull;
 
 /**
- * Represents a container for stream utility methods
+ * Represents a container for stream utility methods.
  */
 public class StreamUtils {
     /**
@@ -187,7 +187,7 @@ public static List<String> readSampleSymbols(InputStream symbolsResource) throws
         return result;
     }
 
-    /** private to enforce static */
+    // private to enforce static
     private StreamUtils() {
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.util;
@@ -85,7 +85,7 @@ public void testNthIndexOf() {
             {"aabbccddaabbccdd", "cd", 1},
             {"aabbccddaabbccdd", "cd", 2},
             {"aabbccddaabbccdd", "ccdd", 1},
-            {"aabbccddaabbccdd", "ccdd", 2},};
+            {"aabbccddaabbccdd", "ccdd", 2}};
 
         int[] indices = new int[]{
             -1, -1, 0, -1,
@@ -105,7 +105,7 @@ public void testNthIndexOf() {
         for (int i = 0; i < tests.length; i++) {
             int index = StringUtils.nthIndexOf((String) tests[i][0], (String) tests[i][1], (Integer) tests[i][2]);
             assertEquals(String.format("%d-th occurrence of \"%s\" in \"%s\" should start at %d but started at %d",
-                    new Object[]{tests[i][2], tests[i][1], tests[i][0], indices[i], index}),
+                    tests[i][2], tests[i][1], tests[i][0], indices[i], index),
                     index, indices[i]);
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/TandemFilenameTest.java
Patch:
@@ -15,10 +15,11 @@
  * information: Portions Copyright [yyyy] [name of copyright owner]
  *
  * CDDL HEADER END
- *
- * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
+/*
+ * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ */
 package org.opengrok.indexer.util;
 
 import java.nio.charset.StandardCharsets;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/TandemPathTest.java
Patch:
@@ -15,10 +15,11 @@
  * information: Portions Copyright [yyyy] [name of copyright owner]
  *
  * CDDL HEADER END
- *
- * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
+/*
+ * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ */
 package org.opengrok.indexer.util;
 
 import org.junit.Test;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/SortOrderTest.java
Patch:
@@ -28,7 +28,9 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 /**
  *

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/JSONUtils.java
Patch:
@@ -52,8 +52,9 @@ protected static Set<String> getTopLevelJSONFields(String jsonString) throws IOE
                 }
             }
 
-            if (token != JsonToken.FIELD_NAME)
+            if (token != JsonToken.FIELD_NAME) {
                 continue;
+            }
 
             fields.add(jParser.getCurrentName());
         }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessagesContainerTest.java
Patch:
@@ -37,7 +37,8 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.awaitility.Awaitility.await;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.opengrok.indexer.web.messages.JSONUtils.getTopLevelJSONFields;
 
 public class MessagesContainerTest {
@@ -159,7 +160,7 @@ public void getMessagesNullTest() {
     }
 
     /**
-     * tests serialization of MessagesContainer.AcceptedMessage
+     * tests serialization of MessagesContainer.AcceptedMessage.
      */
     @Test
     public void testJSON() throws IOException {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessagesUtilsTest.java
Patch:
@@ -35,7 +35,9 @@
 import java.util.HashMap;
 import java.util.List;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 public class MessagesUtilsTest {
     RuntimeEnvironment env;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java
Patch:
@@ -137,7 +137,8 @@ public void testHistoryGet() throws Exception {
                 .queryParam("start", start)
                 .request()
                 .get();
-        HistoryDTO history = response.readEntity(new GenericType<HistoryDTO>() {});
+        HistoryDTO history = response.readEntity(new GenericType<HistoryDTO>() {
+        });
         assertEquals(size, history.getEntries().size());
         assertEquals("Kryštof Tulinger <krystof.tulinger@oracle.com>", history.getEntries().get(0).getAuthor());
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/OGKJerseyTest.java
Patch:
@@ -36,7 +36,7 @@ public abstract class OGKJerseyTest extends JerseyTest {
 
     private static final int BASE_DYNAMIC_OR_PRIVATE_PORT = 49152;
 
-    /** Random.nextInt() will be at most one less than this -- but OK */
+    /** Random.nextInt() will be at most one less than this -- but OK. */
     private static final int DYNAMIC_OR_PRIVATE_PORT_RANGE = 16383;
 
     private static final int MAX_PORT_TRIES = 20;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -92,7 +92,8 @@ private static class TermIncrementData {
     private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
     private static final GenericType<List<Entry<String, Integer>>> popularityDataType =
-            new GenericType<List<Entry<String, Integer>>>() {};
+            new GenericType<List<Entry<String, Integer>>>() {
+            };
 
 
     private static TestRepository repository;

File: plugins/src/main/java/opengrok/auth/entity/LdapUser.java
Patch:
@@ -82,6 +82,6 @@ public String getDn() {
 
     @Override
     public String toString() {
-        return "LdapUser{dn=" + dn + ",attributes=" + attributes + '}';
+        return "LdapUser{dn=" + dn + "; attributes=" + attributes + '}';
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationHelp.java
Patch:
@@ -183,6 +183,8 @@ private static Object getSampleValue(Method setter, Object defaultValue) {
             return null;
         } else if (paramType == SuggesterConfig.class) {
             return SuggesterConfig.getForHelp();
+        } else if (paramType == StatsdConfig.class) {
+            return StatsdConfig.getForHelp();
         } else {
             throw new UnsupportedOperationException("getSampleValue() for " +
                 paramType + ", " + genType);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -618,7 +618,7 @@ public void run() {
             LOGGER.log(Level.WARNING,
                     "Failed optimizing the history cache database", he);
         }
-        elapsed.report(LOGGER, "Done historycache for all repositories");
+        elapsed.report(LOGGER, "Done history cache for all repositories", "indexer.history.cache");
         historyCache.setHistoryIndexDone();
     }
 
@@ -884,7 +884,8 @@ public void run() {
         repositories.clear();
         newrepos.forEach((_key, repo) -> putRepository(repo));
 
-        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()));
+        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()),
+                "history.repositories.invalidate");
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Executor.java
Patch:
@@ -232,8 +232,9 @@ public void run() {
 
             ret = process.waitFor();
 
-            stat.report(LOGGER, Level.FINE, String.format("Finished command [%s] in directory %s with exit code %d",
-                    cmd_str, dir_str, ret));
+            stat.report(LOGGER, Level.FINE,
+                    String.format("Finished command [%s] in directory %s with exit code %d", cmd_str, dir_str, ret),
+                    "executor.latency");
             LOGGER.log(Level.FINE,
                 "Finished command [{0}] in directory {1} with exit code {2}",
                 new Object[] {cmd_str, dir_str, ret});

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -57,7 +57,7 @@ public final class WebappListener
     private static final Logger LOGGER = LoggerFactory.getLogger(WebappListener.class);
     private Timer startupTimer = Timer.builder("webapp.startup.latency").
                 description("web application startup latency").
-                register(Metrics.getRegistry());
+                register(Metrics.getPrometheusRegistry());
 
     /**
      * {@inheritDoc}

File: opengrok-web/src/main/java/org/opengrok/web/servlet/MetricsServlet.java
Patch:
@@ -39,7 +39,7 @@ public class MetricsServlet extends HttpServlet {
     @Override
     protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws IOException {
         try (PrintWriter pw = resp.getWriter()) {
-            pw.print(Metrics.getRegistry().scrape());
+            pw.print(Metrics.getPrometheusRegistry().scrape());
         }
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BitKeeperRepositoryTest.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Scanner;
+import java.util.Set;
 import java.util.TreeSet;
 
 import org.junit.jupiter.api.AfterEach;
@@ -91,7 +92,7 @@ public void tearDown() {
 
     private static void validateHistory(History history) {
         final List<HistoryEntry> entries = history.getHistoryEntries();
-        final List<String> renames = history.getRenamedFiles();
+        final Set<String> renames = history.getRenamedFiles();
 
         assertTrue(entries.size() > 0, "File history has no entries.");
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryClassLoader.java
Patch:
@@ -53,7 +53,7 @@ public class HistoryClassLoader extends ClassLoader {
     @Override
     public Class<?> loadClass(final String name) throws ClassNotFoundException {
         if (!allowedClasses.contains(name)) {
-            throw new IllegalAccessError(name + " is not allowed to be used in configuration");
+            throw new IllegalAccessError(name + " is not allowed to be used in History object");
         }
 
         return getClass().getClassLoader().loadClass(name);

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -125,6 +125,8 @@ public final class PageConfig {
     // cookie name
     public static final String OPEN_GROK_PROJECT = "OpenGrokProject";
 
+    public static final String DUMMY_REVISION = "unknown";
+
     // query parameters
     protected static final String ALL_PROJECT_SEARCH = "searchall";
     protected static final String PROJECT_PARAM_NAME = "project";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -655,7 +655,7 @@ private void rebuildTagList(File directory) {
         }
 
         if (LOGGER.isLoggable(Level.FINER)) {
-            LOGGER.log(Level.FINEST, "Read tags count={0} for {1}",
+            LOGGER.log(Level.FINER, "Read tags count={0} for {1}",
                     new Object[] {tagList.size(), directory});
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -391,7 +391,7 @@ public static Map<String, String> getfileTypeDescriptions() {
         return Collections.unmodifiableMap(fileTypeDescriptions);
     }
 
-    public List<AnalyzerFactory> getAnalyzerFactories() {
+    public static List<AnalyzerFactory> getAnalyzerFactories() {
         return Collections.unmodifiableList(factories);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2021, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
@@ -32,7 +32,7 @@
 
 public class MandocAnalyzerFactory extends FileAnalyzerFactory {
 
-    private static final String NAME = "Mandoc";
+    private static final String NAME = "Manual pages";
 
     public static final Matcher MATCHER = new Matcher() {
         @Override

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/LuceneCompatibilityTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
@@ -89,7 +89,7 @@ protected void setUp() throws Exception {
     }
 
     public void testCompatibility() throws Exception {
-        for (AnalyzerFactory fa : guru.getAnalyzerFactories()) {
+        for (AnalyzerFactory fa : AnalyzerGuru.getAnalyzerFactories()) {
             String input = "Hello world";
             String[] output = new String[]{"Hello", "world"};
             testA = fa.getAnalyzer();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -171,7 +171,9 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision)
         cmd.add("--name-only");
         cmd.add("--pretty=fuller");
         cmd.add(GIT_DATE_OPT);
-        cmd.add("-m");
+        if (isMergeCommitsEnabled()) {
+            cmd.add("-m");
+        }
 
         if (file.isFile() && isHandleRenamedFiles()) {
             cmd.add("--follow");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryOctopusTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2021, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
@@ -34,6 +34,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.RepositoryInstalled;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.util.TestRepository;
 import org.opengrok.indexer.web.Util;
 
@@ -59,6 +60,7 @@ public static void setUpClass() throws Exception {
         repository = new TestRepository();
         repository.create(GitRepositoryOctopusTest.class.getResourceAsStream(
                 "/history/git-octopus.zip"));
+        RuntimeEnvironment.getInstance().setMergeCommitsEnabled(true);
     }
 
     @AfterClass

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryTest.java
Patch:
@@ -206,7 +206,7 @@ public void testDetermineParent() throws Exception {
 
         // Next, clone the repository and create new origin there.
         // Clone under source root to avoid problems with prohibited symlinks.
-        File localPath = new File(repository.getSourceRoot(), "gitCloneTestDetermineBranch");
+        File localPath = new File(repository.getSourceRoot(), "gitCloneTestDetermineParent");
         assertTrue(localPath.delete());
         String cloneUrl = root.toURI().toString();
         try (Git gitClone = Git.cloneRepository()

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/MercurialIsWorkingTest.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2021, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import org.junit.AfterClass;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryFactoryTest.java
Patch:
@@ -160,7 +160,7 @@ static void testNotWorkingRepository(TestRepository repository, String repoPath,
     public void testNotWorkingBitkeeperRepository()
             throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException,
             IOException, ForbiddenSymlinkException {
-        testNotWorkingRepository(repository,"bitkeeper", BitKeeperRepository.CMD_PROPERTY_KEY);
+        testNotWorkingRepository(repository, "bitkeeper", BitKeeperRepository.CMD_PROPERTY_KEY);
     }
 
     @Test

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -191,6 +191,8 @@ protected TokenStreamComponents createComponents(String fieldName) {
             }
             case QueryBuilder.DEFS:
                 return new TokenStreamComponents(createPlainSymbolTokenizer());
+            case QueryBuilder.LASTREV:
+                return new TokenStreamComponents(createPlainFullTokenizer());
             default:
                 LOGGER.log(
                         Level.WARNING, "Have no analyzer for: {0}", fieldName);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/DirectoryExtraReader.java
Patch:
@@ -97,7 +97,8 @@ private List<FileExtra> processHits(IndexSearcher searcher, TopDocs hits)
             String filepath = d.get(QueryBuilder.PATH);
             Integer numlines = tryParseInt(d.get(QueryBuilder.NUML));
             Integer loc = tryParseInt(d.get(QueryBuilder.LOC));
-            FileExtra extra = new FileExtra(filepath, numlines, loc);
+            String lastRev = d.get(QueryBuilder.LASTREV);
+            FileExtra extra = new FileExtra(filepath, numlines, loc, lastRev);
             results.add(extra);
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/QueryBuilder.java
Patch:
@@ -60,8 +60,9 @@ public class QueryBuilder {
     public static final String SCOPES = "scopes";
     public static final String NUML = "numl";
     public static final String LOC = "loc";
+    public static final String LASTREV = "lastrev"; // last revision
     /**
-     * Fields we use in lucene: internal ones.
+     * Fields we use in Lucene: internal ones.
      */
     public static final String U = "u";
     public static final String TAGS = "tags";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -618,7 +618,7 @@ public static String[] parseOptions(String[] argv) throws ParseException {
                     "files), but process all other command line options.").execute(v ->
                     runIndex = false);
 
-            parser.on("--nestingMaximum", "=number",
+            parser.on("--nestingMaximum", "=number", Integer.class,
                     "Maximum depth of nested repositories. Default is 1.").execute(v ->
                     cfg.setNestingMaximum((Integer) v));
 

File: suggester/src/test/java/org/opengrok/suggest/SuggesterProjectDataTest.java
Patch:
@@ -316,7 +316,7 @@ public void testRebuildPicksUpNewFields() throws IOException {
         }
         init(false);
 
-        // add new field after suggester data were initialized
+        // add new field after suggester data was initialized
         addText(FIELD, "term1 term2");
 
         assertTrue(getSuggestions(FIELD, "t", 10).isEmpty());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -104,6 +104,8 @@
 import org.opengrok.indexer.util.TandemPath;
 import org.opengrok.indexer.web.Util;
 
+import static org.opengrok.indexer.index.IndexerUtil.getHeaders;
+
 /**
  * This class is used to create / update the index databases. Currently we use
  * one index database per project.
@@ -376,6 +378,7 @@ private void markProjectIndexed(Project project) {
                     .path(Util.URIEncode(project.getName()))
                     .path("indexed")
                     .request()
+                    .headers(getHeaders())
                     .put(Entity.text(""));
         } catch (RuntimeException e) {
             LOGGER.log(Level.WARNING, String.format("Couldn''t notify the webapp that project %s was indexed",

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -104,7 +104,7 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             env.watchDog.start(new File(pluginDirectory));
         }
 
-        // Check project index(es).
+        // Check index(es).
         if (env.isProjectsEnabled()) {
             LOGGER.log(Level.FINE, "Checking indexes for all projects");
             Map<String, Project> projects = env.getProjects();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -757,7 +757,8 @@ public static String[] parseOptions(String[] argv) throws ParseException {
                     cfg.setWebappLAF((String) stylePath));
 
             parser.on("-T", "--threads", "=number", Integer.class,
-                    "The number of threads to use for index generation and repository scan.",
+                    "The number of threads to use for index generation, repository scan",
+                    "and repository invalidation.",
                     "By default the number of threads will be set to the number of available",
                     "CPUs. This influences the number of spawned ctags processes as well.").
                     execute(threadCount -> cfg.setIndexingParallelism((Integer) threadCount));

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapServer.java
Patch:
@@ -268,7 +268,6 @@ private synchronized LdapContext connect() {
 
             try {
                 ctx = new InitialLdapContext(env, null);
-                ctx.reconnect(null);
                 ctx.setRequestControls(null);
                 LOGGER.log(Level.INFO, "Connected to LDAP server {0}", this.toString());
                 errorTimestamp = 0;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -407,8 +408,8 @@ public String getPathRelativeToSourceRoot(File file)
             throw new FileNotFoundException("sourceRoot is not defined");
         }
 
-        String maybeRelPath = PathUtils.getRelativeToCanonical(file.getPath(),
-                sourceRoot, getAllowedSymlinks(), getCanonicalRoots());
+        String maybeRelPath = PathUtils.getRelativeToCanonical(file.toPath(),
+                Paths.get(sourceRoot), getAllowedSymlinks(), getCanonicalRoots());
         File maybeRelFile = new File(maybeRelPath);
         if (!maybeRelFile.isAbsolute()) {
             /*

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -169,7 +169,7 @@ public void setDirectoryName(File dir) {
         String path;
         String originalPath = dir.getPath();
         try {
-            path = PathUtils.getRelativeToCanonical(originalPath, rootPath);
+            path = PathUtils.getRelativeToCanonical(dir.toPath(), Paths.get(rootPath));
             // OpenGrok has a weird convention that directoryNameRelative must start with a path separator,
             // as it is elsewhere directly appended to env.getSourceRootPath() and also stored as such.
             if (!path.equals(originalPath)) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryGuruTest.java
Patch:
@@ -125,12 +125,13 @@ public void testGetRevision() throws HistoryException, IOException {
     }
 
     @Test
+    @ConditionalRun(RepositoryInstalled.SubversionInstalled.class)
     public void testBug16465() throws HistoryException, IOException {
         HistoryGuru instance = HistoryGuru.getInstance();
         for (File f : FILES) {
             if (f.getName().equals("bugreport16465@")) {
-                assertNotNull(instance.getHistory(f));
-                assertNotNull(instance.annotate(f, null));
+                assertNotNull(f.getPath() + " must have history", instance.getHistory(f));
+                assertNotNull(f.getPath() + " must have annotations", instance.annotate(f, null));
             }
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Ric Harris <harrisric@users.noreply.github.com>.
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -191,6 +191,9 @@ public void testStoreAndGetIncrementalTags() throws Exception {
         // Store the history.
         cache.store(historyToStore, repo);
 
+        // Avoid uncommitted changes.
+        MercurialRepositoryTest.runHgCommand(reposRoot, "revert", "--all");
+
         // Add bunch of changesets with file based changes and tags.
         MercurialRepositoryTest.runHgCommand(reposRoot, "import",
                 Paths.get(getClass().getResource("/history/hg-export-tag.txt").toURI()).toString());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/Metrics.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AbstractAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Use is subject to license terms.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuru.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerGuruHelp.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import org.opengrok.indexer.util.StringUtils;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/CompatibleAnalyser.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -17,9 +17,9 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/CtagsReader.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.EnumMap;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/CtagsValidator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import org.opengrok.indexer.util.ObjectValidator;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/DisjointSpanChangedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/EmphasisHint.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ExpandTabsReader.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2009, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.FilterReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Use is subject to license terms.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzerFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexJointLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexNonXref.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.CharArrayReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexStackingLexer.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexStateStacker.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexSymbolMatcher.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.Locale;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexTokenizer.java
Patch:
@@ -19,7 +19,7 @@
 
  /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXref.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXrefUtils.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LangMap.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LangTreeMap.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.ArrayList;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LinkageMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/LinkageType.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NonSymbolMatchedListener.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/PathlikeMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/PendingToken.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.Objects;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/PendingTokenOffsetsComparator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.util.Comparator;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ScanningSymbolMatcher.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ScopeAction.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ScopeChangedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SourceCodeSeenEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/StreamSource.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2013, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SymbolMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SymbolMatchedListener.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/SymbolMatchedPublisher.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/TextAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/TextMatchedEvent.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/XrefStyle.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 public class XrefStyle {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Xrefer.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.ada;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ada;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaLexer.java
Patch:
@@ -20,7 +20,6 @@
  /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ada;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/BZip2Analyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/BZip2AnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/TarAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/TarAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.archive;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipAnalyzerFactory.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/ZipMatcherBase.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.archive;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.asm;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.asm;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.asm;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.c;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxConsts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.c;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.clojure;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.clojure;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.clojure;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.csharp;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.csharp;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/Consts.java
Patch:
@@ -17,6 +17,9 @@
  * CDDL HEADER END
  */
 
+/*
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
+ */
 package org.opengrok.indexer.analysis.csharp;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/data/IgnorantAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.data;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/data/ImageAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.data;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.document;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocException.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/MandocRunner.java
Patch:
@@ -19,8 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
- * (derived from Ctags.java).
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/TroffAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.document;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.document;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.eiffel;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.erlang;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzer.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.erlang;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.erlang;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/ELFAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/ELFAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JFieldBuilder.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import java.io.StringWriter;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JarAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.executables;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JarAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
- * Portions Copyright (c) 2020-2020, Lubos Kosco <tarzanek@gmail.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2020, Lubos Kosco <tarzanek@gmail.com>.
  */
 package org.opengrok.indexer.analysis.executables;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.executables;
 
 import java.io.InputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.fortran;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.fortran;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.fortran;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.golang;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzer.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.golang;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.golang;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.haskell;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLLexer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.hcl;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.java;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.java;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.java;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.javascript;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.javascript;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.javascript;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.javascript;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/Consts.java
Patch:
@@ -17,8 +17,8 @@
  * CDDL HEADER END
  */
 
- /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+/*
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.json;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.json;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.json;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.kotlin;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.kotlin;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.kotlin;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.lisp;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.lisp;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.lua;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.lua;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.lua;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.lua;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.pascal;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.pascal;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.pascal;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.pascal;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.perl;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.perl;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.perl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlLexer.java
Patch:
@@ -17,10 +17,9 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.perl;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/Consts.java
Patch:
@@ -17,6 +17,9 @@
  * CDDL HEADER END
  */
 
+/*
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
+ */
 package org.opengrok.indexer.analysis.php;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.php;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.php;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/AbstractSourceCodeAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/DefinitionsTokenStream.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.plain;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/PlainAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.plain;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/XMLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.plain;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.plain;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.powershell;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PoshUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.powershell;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.powershell;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.powershell;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.python;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.python;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.python;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.python;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/r/RLexer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.r;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.ruby;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2016 Nikolay Denev.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2016, Nikolay Denev.
  */
-
 package org.opengrok.indexer.analysis.rust;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzer.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2016 Nikolay Denev.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2016, Nikolay Denev.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.rust;
 
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2016 Nikolay Denev.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2016, Nikolay Denev.
  */
-
 package org.opengrok.indexer.analysis.rust;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.scala;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.scala;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.scala;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.scala;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sh;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/ShAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sh;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/Consts.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/JointSQLLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/JointSQLSymbolTokenizer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import java.util.Locale;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/JointSQLXref.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLConsts.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLUtils.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.sql;
 
 import java.util.regex.Pattern;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.swift;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzer.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.swift;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzerFactory.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.swift;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.analysis.tcl;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.tcl;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.analysis.tcl;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzer.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzerFactory.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.terraform;
 
 import org.opengrok.indexer.analysis.hcl.HCLLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.typescript;
 
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.typescript;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.typescript;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.typescript;
 
 import org.opengrok.indexer.analysis.javascript.JavaScriptLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/uue/UuencodeAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.uue;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/uue/UuencodeAnalyzerFactory.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2012, 2013 Constantine A. Murenin &lt;C++@Cns.SU&gt;
+ * Copyright (c) 2012, 2013, Constantine A. Murenin &lt;C++@Cns.SU&gt;
  */
-
 package org.opengrok.indexer.analysis.uue;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/VBAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.vb;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/Consts.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzer.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzerFactory.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer.Genre;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogLexer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.analysis.verilog;
 
 import org.opengrok.indexer.analysis.JFlexJointLexer;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationEntity.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationException.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.authorization;
 
 public class AuthorizationException extends RuntimeException {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationStack.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/CanonicalRootValidator.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/CommandTimeoutType.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.configuration;
 
 public enum CommandTimeoutType {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigMerge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Aleksandr Kirillov <alexkirillovsamara@gmail.com>.
  */
 package org.opengrok.indexer.configuration;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationHelp.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.lang.annotation.Annotation;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationValueConsumer.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Filter.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Group.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Groups.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredDirs.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredFiles.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredNames.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IncludeFiles.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Aleksandr Kirillov <alexkirillovsamara@gmail.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IndexTimestamp.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/LuceneLockName.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Nameable.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/PathAccepter.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.configuration;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/StatsdConfig.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.configuration;
 
 import io.micrometer.statsd.StatsdFlavor;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuggesterConfig.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.configuration;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuperIndexSearcher.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ThreadpoolSearcherFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
-  * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
+  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
   */
 package org.opengrok.indexer.configuration;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/WatchDogService.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.configuration;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Annotation.java
Patch:
@@ -18,11 +18,10 @@
  */
 
 /*
- * Copyright (c) 2007, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Krystof Tulinger <k.tulinger@seznam.cz>.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BazaarRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BazaarTagParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperHistoryParser.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2017, James Service <jas2701@googlemail.com>.
- * Portions Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.BufferedReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperRepository.java
Patch:
@@ -18,11 +18,10 @@
  */
 
 /*
- * Author: James Service <jas2701@googlemail.com>
- * Portions by: Oracle and/or its affiliates.
+ * Copyright (c) 2017, James Service <jas2701@googlemail.com>
+ * Portions Copyright (c) 2017, 2020, Oracle and/or its affiliates.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/CVSAnnotationParser.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.BufferedReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseAnnotationParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -19,9 +19,8 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.beans.Encoder;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2019, Krystof Tulinger <k.tulinger@seznam.cz>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitTagEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitTagParser.java
Patch:
@@ -18,8 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2019, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/History.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.util.ArrayList;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryException.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryReader.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialTagEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialTagParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MonotoneRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java
Patch:
@@ -23,7 +23,6 @@
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Chris Quick <gtoph00@gmail.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import static org.opengrok.indexer.history.PerforceRepository.protectPerforceFilename;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSAnnotationParser.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.history;
 
 import org.opengrok.indexer.logger.LoggerFactory;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSRepository.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSget.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorHistoryParser.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2008, Peter Bray.
  */
-/* Portions Copyright 2008 Peter Bray */
 package org.opengrok.indexer.history;
 
 import java.io.BufferedReader;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorRepository.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2008 Peter Bray
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2008, Peter Bray.
+ * Portions Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoriesHelp.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.history;
 
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSget.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/TagEntry.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettings.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.ByteArrayInputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettings3.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.ByteArrayInputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettingsAccessor.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettingsUpgrader.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018, 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexedSymlink.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerException.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opengrok.indexer.index;
 
 import java.util.concurrent.ExecutorService;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerUtil.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileDeletion.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileRenaming.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.index;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingSymlinkage.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017, 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/LoggerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/LoggerFactoryBridge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/PackageBasedLoggerFactoryBridge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/ConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/FileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/LogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/SimpleConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/SimpleFileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.logger.formatter;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/DirectoryEntry.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/DirectoryExtraReader.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/FileExtra.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Hit.java
Patch:
@@ -19,8 +19,6 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * portions copyright 2005 Trond Norbye.  All rights reserved.
- * Use is subject to license terms.
  */
 package org.opengrok.indexer.search;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/QueryBuilder.java
Patch:
@@ -19,8 +19,8 @@
 
 /* 
  * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -19,10 +19,9 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import static org.opengrok.indexer.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/SettingsHelper.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions copyright (c) 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2011, Jens Elkner.
+ * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/TermEscaperBase.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2011, Jens Elkner.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/ContextArgs.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/ContextFormatter.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/FormattedLines.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.util.Map;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.io.File;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineHighlight.java
Patch:
@@ -20,7 +20,6 @@
 /*
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineMatcher.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
-
 package org.opengrok.indexer.search.context;
 
 import java.util.Locale;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -1223,7 +1223,7 @@ public void setListDirsFirst(boolean flag) {
      * @return path to the file holding compiled path descriptions for the web application
      */
     public Path getDtagsEftarPath() {
-        return Paths.get(getDataRoot(), "index", EFTAR_DTAGS_NAME);
+        return Paths.get(getDataRoot(), EFTAR_DTAGS_NAME);
     }
 
     public String getCTagsExtraOptionsFile() {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalUtils.java
Patch:
@@ -36,7 +36,7 @@ public class PascalUtils {
      * ¹Correctness in a long sequence of apostrophes is limited because Java
      * look-behind is not variable length but instead must have a definite
      * upper bound in the regex definition.
-     * </p>
+     *
      */
     public static final Pattern CHARLITERAL_APOS_DELIMITER =
         Pattern.compile("\\'((?<=^.(?!\\'))|(?<=[^\\'].(?!\\'))|(?<=^(\\'\\'){1,3}.(?!\\'))|(?<=[^\\'](\\'\\'){1,3}.(?!\\')))");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationPlugin.java
Patch:
@@ -82,13 +82,11 @@ public AuthorizationPlugin(AuthControlFlag flag, String name, IAuthorizationPlug
      * Call the load method on the underlying plugin if the plugin exists. Note
      * that the load method can throw any throwable from its body and it should
      * not stop the application.
-     *
      * <p>
-     * If the method is unable to load the plugin because of any reason (mostly
+     * <p>If the method is unable to load the plugin because of any reason (mostly
      * the class is not found, not instantiable or the load method throws an
      * exception) then any authorization check should fail for this plugin in
      * the future.
-     * </p>
      *
      * @param parameters parameters given in the configuration
      *

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/JFlexXrefTest.java
Patch:
@@ -272,11 +272,9 @@ public void bug16883() throws Exception {
     }
 
     /**
-     * <p>
      * Test the handling of #include in C and C++. In particular, these issues
      * are tested:
-     * </p>
-     *
+     * <p>
      * <ul>
      *
      * <li>

File: opengrok-web/src/main/java/org/opengrok/web/PageConfig.java
Patch:
@@ -430,7 +430,7 @@ public String canProcess() {
      *
      * <p>
      * For the root directory (/xref/) an authorization is performed for each
-     * project in case that projects are used.</p>
+     * project in case that projects are used.
      *
      * @see #getResourceFile()
      * @see #isDir()
@@ -1748,7 +1748,7 @@ private SortedSet<AcceptedMessage> getProjectMessages() {
      * <p>
      * The resource is modified since the weak ETag value in the request, the ETag is
      * computed using:
-     * </p>
+     *
      * <ul>
      * <li>the source file modification</li>
      * <li>project messages</li>
@@ -1758,7 +1758,7 @@ private SortedSet<AcceptedMessage> getProjectMessages() {
      *
      * <p>
      * If the resource was modified, appropriate headers in the response are filled.
-     * </p>
+     *
      *
      * @param request the http request containing the headers
      * @param response the http response for setting the headers

File: plugins/src/main/java/opengrok/auth/plugin/AbstractLdapPlugin.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Abstract class for all plug-ins working with LDAP. Takes care of
- * <ul>
+ * <p><ul>
  * <li>controlling the established session</li>
  * <li>controlling if the session belongs to the user</li>
  * </ul>
@@ -46,7 +46,6 @@
  * The intended methods to implement are the
  * {@link #checkEntity(HttpServletRequest, Project)} and
  * {@link #checkEntity(HttpServletRequest, Group)}.
- * </p>
  *
  * @author Krystof Tulinger
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;

File: opengrok-web/src/test/java/org/opengrok/web/WebappListenerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.web;
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/LuceneCompatibilityTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.opengrok.indexer.search.QueryBuilder;
 
 /**
- * external tests, need to have test-framework on the path this will do a sanity
+ * Need to have test-framework on the path. This will do a sanity
  * test on analyzers/tokenizers if they follow latest lucene asserts
  *
  * on compile test cp there needs to be lucene-test-framework, lucene-codecs and
@@ -83,8 +83,8 @@ public static Test suite() {
     protected void setUp() throws Exception {
         guru = new AnalyzerGuru();
         Class<?> c = Class.forName(LUCENE_TEST_CLASS);
-        //testC = c.newInstance(); //this is static call
-        Class<?>[] argTypes = {TokenStream.class, String[].class, int[].class, int[].class, String[].class, int[].class, int[].class, Integer.class, boolean.class};
+        Class<?>[] argTypes = {TokenStream.class, String[].class, int[].class, int[].class, String[].class, int[].class,
+                int[].class, Integer.class, boolean.class};
         testM = c.getDeclaredMethod(LUCENE_TEST_METHOD, argTypes);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/document/DocumentMatcherTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.opengrok.indexer.analysis.AnalyzerFactory;
 
 /**
- * Represents a container for tests of {@link DocumentMatcher} subclasses
+ * Represents a container for tests of {@link DocumentMatcher} subclasses.
  */
 public class DocumentMatcherTest {
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/haskell/HaskellSymbolTokenizerTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -74,7 +75,7 @@ private String[] getTermsFor(Reader r) {
     public void sampleTest() throws UnsupportedEncodingException {
         InputStream res = getClass().getClassLoader().getResourceAsStream(
                 "analysis/haskell/sample.hs");
-        InputStreamReader r = new InputStreamReader(res, "UTF-8");
+        InputStreamReader r = new InputStreamReader(res, StandardCharsets.UTF_8);
         String[] termsFor = getTermsFor(r);        
         assertArrayEquals(
                 new String[]{

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/php/PhpSymbolTokenizerTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -83,7 +84,7 @@ public void basicTest() {
     public void sampleTest() throws UnsupportedEncodingException {
         InputStream res = getClass().getClassLoader().getResourceAsStream(
                 "analysis/php/sample.php");
-        InputStreamReader r = new InputStreamReader(res, "UTF-8");
+        InputStreamReader r = new InputStreamReader(res, StandardCharsets.UTF_8);
         String[] termsFor = getTermsFor(r);
         assertArrayEquals(
                 new String[]{

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/plain/XMLAnalyzerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
@@ -28,11 +28,12 @@
 import java.io.StringReader;
 import java.io.StringWriter;
 import org.junit.Test;
-import static org.junit.Assert.*;
 
 import org.opengrok.indexer.analysis.AbstractAnalyzer;
 import org.opengrok.indexer.analysis.WriteXrefArgs;
 
+import static org.junit.Assert.assertTrue;
+
 public class XMLAnalyzerTest {
     @Test
     public void bug2225() throws IOException {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/condition/ConditionalRunRule.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.condition;
 
@@ -91,7 +91,8 @@ private static boolean hasConditionalIgnoreAnnotationOnMethod(Description aDescr
     private static RunCondition getIgnoreConditionOnMethod(Description aDescription) {
         try {
             // this is possible because test methods must not have any argument
-            ConditionalRun[] annotations = aDescription.getTestClass().getMethod(aDescription.getMethodName()).getAnnotationsByType(ConditionalRun.class);
+            ConditionalRun[] annotations = aDescription.getTestClass().getMethod(aDescription.getMethodName())
+                    .getAnnotationsByType(ConditionalRun.class);
             return new IgnoreConditionCreator(aDescription.getTestClass(), annotations).create();
         } catch (NoSuchMethodException | SecurityException ex) {
             throw new RuntimeException(ex);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/GroupsTest.java
Patch:
@@ -191,7 +191,7 @@ private Group findGroup(Set<Group> groups, String needle) {
         return null;
     }
 
-    final static String BASIC_CONFIGURATION = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
+    static final String BASIC_CONFIGURATION = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
             + "<java version=\"1.8.0_65\" class=\"java.beans.XMLDecoder\">\n"
             + " <object class=\"org.opengrok.indexer.configuration.Configuration\" id=\"Configuration0\">\n"
             + "    <void method=\"addGroup\">\n"

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryFactoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
@@ -49,7 +49,7 @@
 import org.opengrok.indexer.util.TestRepository;
 
 /**
- * Test RepositoryFactory
+ * Test RepositoryFactory.
  *
  * @author Vladimir Kotal
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SummarizerTest.java
Patch:
@@ -18,15 +18,16 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020 Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opengrok.indexer.search;
 
 import org.apache.lucene.search.Query;
 import org.junit.Test;
 import org.opengrok.indexer.analysis.CompatibleAnalyser;
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertNotNull;
 
 /**
  * Unit tests for the Summarizer class.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/WildCardMatcherTest.java
Patch:
@@ -18,13 +18,14 @@
  */
 
 /*
- * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020 Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opengrok.indexer.search.context;
 
 import org.junit.Test;
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertEquals;
 
 /**
  * Tests for the WildCardMatcher class.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/FileUtilities.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.Assert.assertNotNull;
 
 /**
- * Various filesystem utilities used by the different test setups
+ * Various filesystem utilities used by the different test setups.
  *
  * @author Trond Norbye
  */

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/HeadHandlerTest.java
Patch:
@@ -95,7 +95,7 @@ private static class RandomInputStream extends InputStream {
          * @param maxCharCount number of characters to generate
          * @param maxLines number of lines to generate
          */
-        public RandomInputStream(int maxCharCount, int maxLines) {
+        RandomInputStream(int maxCharCount, int maxLines) {
             if (maxLines > maxCharCount) {
                 throw new IllegalArgumentException("maxLines must be smaller than or equal to maxCharCount");
             }
@@ -132,7 +132,7 @@ String getResult() {
         }
 
         @Override
-        public int read() throws IOException {
+        public int read() {
             int ret;
             if (charCount < maxCharCount) {
                 if (charCount > 0 && lines < maxLines - 1 && charCount == lineBreaks[lines]) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/StreamUtils.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
  */
 
@@ -41,7 +41,7 @@
 import static org.junit.Assert.assertNotNull;
 
 /**
- * Represents a container for stream utility methods
+ * Represents a container for stream utility methods.
  */
 public class StreamUtils {
     /**
@@ -187,7 +187,7 @@ public static List<String> readSampleSymbols(InputStream symbolsResource) throws
         return result;
     }
 
-    /** private to enforce static */
+    // private to enforce static
     private StreamUtils() {
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.util;
@@ -85,7 +85,7 @@ public void testNthIndexOf() {
             {"aabbccddaabbccdd", "cd", 1},
             {"aabbccddaabbccdd", "cd", 2},
             {"aabbccddaabbccdd", "ccdd", 1},
-            {"aabbccddaabbccdd", "ccdd", 2},};
+            {"aabbccddaabbccdd", "ccdd", 2}};
 
         int[] indices = new int[]{
             -1, -1, 0, -1,
@@ -105,7 +105,7 @@ public void testNthIndexOf() {
         for (int i = 0; i < tests.length; i++) {
             int index = StringUtils.nthIndexOf((String) tests[i][0], (String) tests[i][1], (Integer) tests[i][2]);
             assertEquals(String.format("%d-th occurrence of \"%s\" in \"%s\" should start at %d but started at %d",
-                    new Object[]{tests[i][2], tests[i][1], tests[i][0], indices[i], index}),
+                    tests[i][2], tests[i][1], tests[i][0], indices[i], index),
                     index, indices[i]);
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/TandemFilenameTest.java
Patch:
@@ -15,10 +15,11 @@
  * information: Portions Copyright [yyyy] [name of copyright owner]
  *
  * CDDL HEADER END
- *
- * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
+/*
+ * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ */
 package org.opengrok.indexer.util;
 
 import java.nio.charset.StandardCharsets;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/TandemPathTest.java
Patch:
@@ -15,10 +15,11 @@
  * information: Portions Copyright [yyyy] [name of copyright owner]
  *
  * CDDL HEADER END
- *
- * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
+/*
+ * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ */
 package org.opengrok.indexer.util;
 
 import org.junit.Test;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/SortOrderTest.java
Patch:
@@ -28,7 +28,9 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import static org.junit.Assert.*;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 /**
  *

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/JSONUtils.java
Patch:
@@ -52,8 +52,9 @@ protected static Set<String> getTopLevelJSONFields(String jsonString) throws IOE
                 }
             }
 
-            if (token != JsonToken.FIELD_NAME)
+            if (token != JsonToken.FIELD_NAME) {
                 continue;
+            }
 
             fields.add(jParser.getCurrentName());
         }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessagesContainerTest.java
Patch:
@@ -37,7 +37,8 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.awaitility.Awaitility.await;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.opengrok.indexer.web.messages.JSONUtils.getTopLevelJSONFields;
 
 public class MessagesContainerTest {
@@ -159,7 +160,7 @@ public void getMessagesNullTest() {
     }
 
     /**
-     * tests serialization of MessagesContainer.AcceptedMessage
+     * tests serialization of MessagesContainer.AcceptedMessage.
      */
     @Test
     public void testJSON() throws IOException {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessagesUtilsTest.java
Patch:
@@ -35,7 +35,9 @@
 import java.util.HashMap;
 import java.util.List;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 public class MessagesUtilsTest {
     RuntimeEnvironment env;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java
Patch:
@@ -137,7 +137,8 @@ public void testHistoryGet() throws Exception {
                 .queryParam("start", start)
                 .request()
                 .get();
-        HistoryDTO history = response.readEntity(new GenericType<HistoryDTO>() {});
+        HistoryDTO history = response.readEntity(new GenericType<HistoryDTO>() {
+        });
         assertEquals(size, history.getEntries().size());
         assertEquals("Kryštof Tulinger <krystof.tulinger@oracle.com>", history.getEntries().get(0).getAuthor());
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/OGKJerseyTest.java
Patch:
@@ -36,7 +36,7 @@ public abstract class OGKJerseyTest extends JerseyTest {
 
     private static final int BASE_DYNAMIC_OR_PRIVATE_PORT = 49152;
 
-    /** Random.nextInt() will be at most one less than this -- but OK */
+    /** Random.nextInt() will be at most one less than this -- but OK. */
     private static final int DYNAMIC_OR_PRIVATE_PORT_RANGE = 16383;
 
     private static final int MAX_PORT_TRIES = 20;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;
@@ -92,7 +92,8 @@ private static class TermIncrementData {
     private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 
     private static final GenericType<List<Entry<String, Integer>>> popularityDataType =
-            new GenericType<List<Entry<String, Integer>>>() {};
+            new GenericType<List<Entry<String, Integer>>>() {
+            };
 
 
     private static TestRepository repository;

File: plugins/src/main/java/opengrok/auth/entity/LdapUser.java
Patch:
@@ -82,6 +82,6 @@ public String getDn() {
 
     @Override
     public String toString() {
-        return "LdapUser{dn=" + dn + ",attributes=" + attributes + '}';
+        return "LdapUser{dn=" + dn + "; attributes=" + attributes + '}';
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationHelp.java
Patch:
@@ -183,6 +183,8 @@ private static Object getSampleValue(Method setter, Object defaultValue) {
             return null;
         } else if (paramType == SuggesterConfig.class) {
             return SuggesterConfig.getForHelp();
+        } else if (paramType == StatsdConfig.class) {
+            return StatsdConfig.getForHelp();
         } else {
             throw new UnsupportedOperationException("getSampleValue() for " +
                 paramType + ", " + genType);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -618,7 +618,7 @@ public void run() {
             LOGGER.log(Level.WARNING,
                     "Failed optimizing the history cache database", he);
         }
-        elapsed.report(LOGGER, "Done historycache for all repositories");
+        elapsed.report(LOGGER, "Done history cache for all repositories", "indexer.history.cache");
         historyCache.setHistoryIndexDone();
     }
 
@@ -884,7 +884,8 @@ public void run() {
         repositories.clear();
         newrepos.forEach((_key, repo) -> putRepository(repo));
 
-        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()));
+        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()),
+                "history.repositories.invalidate");
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Executor.java
Patch:
@@ -232,8 +232,9 @@ public void run() {
 
             ret = process.waitFor();
 
-            stat.report(LOGGER, Level.FINE, String.format("Finished command [%s] in directory %s with exit code %d",
-                    cmd_str, dir_str, ret));
+            stat.report(LOGGER, Level.FINE,
+                    String.format("Finished command [%s] in directory %s with exit code %d", cmd_str, dir_str, ret),
+                    "executor.latency");
             LOGGER.log(Level.FINE,
                 "Finished command [{0}] in directory {1} with exit code {2}",
                 new Object[] {cmd_str, dir_str, ret});

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -57,7 +57,7 @@ public final class WebappListener
     private static final Logger LOGGER = LoggerFactory.getLogger(WebappListener.class);
     private Timer startupTimer = Timer.builder("webapp.startup.latency").
                 description("web application startup latency").
-                register(Metrics.getRegistry());
+                register(Metrics.getPrometheusRegistry());
 
     /**
      * {@inheritDoc}

File: opengrok-web/src/main/java/org/opengrok/web/servlet/MetricsServlet.java
Patch:
@@ -39,7 +39,7 @@ public class MetricsServlet extends HttpServlet {
     @Override
     protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws IOException {
         try (PrintWriter pw = resp.getWriter()) {
-            pw.print(Metrics.getRegistry().scrape());
+            pw.print(Metrics.getPrometheusRegistry().scrape());
         }
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuggesterConfig.java
Patch:
@@ -155,8 +155,7 @@ public SuggesterConfig() {
         setShowProjects(SHOW_PROJECTS_DEFAULT);
         setShowTime(SHOW_TIME_DEFAULT);
         setTimeThreshold(TIME_THRESHOLD_DEFAULT);
-        // do not use setter because indexer invocation with --man will fail
-        rebuildCronConfig = REBUILD_CRON_CONFIG_DEFAULT;
+        setRebuildCronConfig(REBUILD_CRON_CONFIG_DEFAULT);
         setBuildTerminationTime(BUILD_TERMINATION_TIME_DEFAULT);
         setRebuildThreadPoolSizeInNcpuPercent(REBUILD_THREAD_POOL_PERCENT_NCPUS_DEFAULT);
     }

File: suggester/src/main/java/org/opengrok/suggest/popular/impl/chronicle/BytesRefSizedReader.java
Patch:
@@ -46,6 +46,7 @@ private BytesRefSizedReader() {
 
     @NotNull
     @Override
+    @SuppressWarnings("rawtypes")
     public BytesRef read(Bytes in, long size, @Nullable BytesRef using) {
         if (size < 0L || size > (long) Integer.MAX_VALUE) {
             throw new IORuntimeException("byte[] size should be non-negative int, " +

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexStackingLexer.java
Patch:
@@ -58,7 +58,7 @@ public interface JFlexStackingLexer extends JFlexLexer {
     int getYYEOF();
 
     /**
-     * Gets the yyline value.
+     * Gets the line number.
      */
     int getLineNumber();
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/hcl/HCLAnalyzer.java
Patch:
@@ -59,11 +59,11 @@ public String getCtagsLang() {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20200409_05
+     * @return 20201003_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20200409_05; // Edit comment above too!
+        return 20201003_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/terraform/TerraformAnalyzer.java
Patch:
@@ -59,11 +59,11 @@ public String getCtagsLang() {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20200410_08
+     * @return 20201003_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20200410_08; // Edit comment above too!
+        return 20201003_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/DocumentMatcher.java
Patch:
@@ -138,8 +138,8 @@ public AnalyzerFactory isMagic(byte[] contents, InputStream in)
         int numLines = 0;
         String line;
         while ((line = rdr.readLine()) != null) {
-            for (int i = 0; i < lineStarters.length; ++i) {
-                if (line.startsWith(lineStarters[i])) {
+            for (String lineStarter : lineStarters) {
+                if (line.startsWith(lineStarter)) {
                     in.reset();
                     return factory;
                 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationFramework.java
Patch:
@@ -374,7 +374,6 @@ protected void beforeReload() {
      * @see IAuthorizationPlugin#unload()
      * @see Configuration#getPluginDirectory()
      */
-    @SuppressWarnings({"rawtypes", "unchecked"})
     @Override
     protected void afterReload() {
         if (stack == null) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BazaarHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.InvalidPathException;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -198,7 +199,7 @@ public void processStream(InputStream input) throws IOException {
      */
     History parse(String buffer) throws IOException {
         myDir = File.separator;
-        processStream(new ByteArrayInputStream(buffer.getBytes("UTF-8")));
+        processStream(new ByteArrayInputStream(buffer.getBytes(StandardCharsets.UTF_8)));
         return new History(entries);
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryCache.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 
@@ -51,7 +51,6 @@ interface HistoryCache {
      * parsing the history information in the repository.
      *
      * @param file The file to retrieve history for
-     * @param parserClass The class that implements the parser to use
      * @param repository The external repository to read the history from (can
      * be <code>null</code>)
      * @param withFiles A flag saying whether or not the returned history

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SSCMHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.indexer.history;
 
@@ -28,6 +28,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.logging.Level;
@@ -169,7 +170,7 @@ History parse(File file, String sinceRevision) throws HistoryException {
      * @throws IOException if we fail to parse the buffer
      */
     History parse(String buffer) throws IOException {
-        processStream(new ByteArrayInputStream(buffer.getBytes("UTF-8")));
+        processStream(new ByteArrayInputStream(buffer.getBytes(StandardCharsets.UTF_8)));
         return history;
     }
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  * Portions Copyright (c) 2020, Ric Harris <harrisric@users.noreply.github.com>.
  */
@@ -29,6 +29,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -236,7 +237,7 @@ public void processStream(InputStream input) throws IOException {
      */
     History parse(String buffer) throws IOException {
         handler = new Handler("/", "", 0, new SubversionRepository());
-        processStream(new ByteArrayInputStream(buffer.getBytes("UTF-8")));
+        processStream(new ByteArrayInputStream(buffer.getBytes(StandardCharsets.UTF_8)));
         return new History(handler.entries, handler.getRenamedFiles());
     }
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/ContextTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search.context;
@@ -33,6 +33,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -393,7 +394,7 @@ public void testMultiLineMatch() throws Exception {
      */
     private Document parseXML(String document) throws Exception {
         ByteArrayInputStream in
-                = new ByteArrayInputStream(document.getBytes("UTF-8"));
+                = new ByteArrayInputStream(document.getBytes(StandardCharsets.UTF_8));
         return DocumentBuilderFactory.newInstance().
                 newDocumentBuilder().parse(in);
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/UtilTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
  */
 
@@ -30,6 +30,7 @@
 import java.net.MalformedURLException;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -295,7 +296,7 @@ public void dumpConfiguration() throws Exception {
         // Verify that the output is well-formed.
         String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + s;
         DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
-                new ByteArrayInputStream(xml.getBytes("UTF-8")));
+                new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));
     }
 
     @Test

File: plugins/src/main/java/opengrok/auth/plugin/AbstractLdapPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin;
 
@@ -221,7 +221,6 @@ protected boolean sessionExists(HttpServletRequest req) {
      *
      * @param req the HTTP request
      */
-    @SuppressWarnings("unchecked")
     private void ensureSessionExists(HttpServletRequest req) {
         if (req.getSession() == null) {
             // old/invalid request (should not happen)

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java
Patch:
@@ -254,7 +254,7 @@ public void setSearchBase(String base) {
 
     @Override
     public boolean isConfigured() {
-        return servers != null && servers.size() > 0 && LDAP_FILTER != null && searchBase != null && actualServer != -1;
+        return servers != null && !servers.isEmpty() && searchBase != null && actualServer != -1;
     }
 
     /**
@@ -443,6 +443,7 @@ private <T> T processResult(SearchResult result, AttributeMapper<T> mapper) thro
         return null;
     }
 
+    @Override
     public String toString() {
         return "{server=" + (actualServer != -1 ? servers.get(actualServer) : "no active server") +
                 ", searchBase=" + getSearchBase() + "}";

File: suggester/src/main/java/org/opengrok/suggest/popular/impl/chronicle/BytesRefSizedReader.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.suggest.popular.impl.chronicle;
 
@@ -46,7 +46,6 @@ private BytesRefSizedReader() {
 
     @NotNull
     @Override
-    @SuppressWarnings("rawtypes")
     public BytesRef read(Bytes in, long size, @Nullable BytesRef using) {
         if (size < 0L || size > (long) Integer.MAX_VALUE) {
             throw new IORuntimeException("byte[] size should be non-negative int, " +

File: suggester/src/test/java/org/opengrok/suggest/query/customized/CustomSloppyPhraseScorerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.suggest.query.customized;
@@ -52,7 +52,6 @@
 
 public class CustomSloppyPhraseScorerTest {
 
-    @SuppressWarnings("unchecked") // for contains()
     public static void test(
             final int slop,
             final int offset,

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Prefix.java
Patch:
@@ -79,7 +79,9 @@ public enum Prefix {
     /** Monitoring. */
     METRICS("/metrics"),
     /** CSS and images. */
-    STATIC("/default");
+    STATIC("/default"),
+    /** JavaScript. */
+    JS("/js");
 
     private final String prefix;
     Prefix(String prefix) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Prefix.java
Patch:
@@ -74,11 +74,11 @@ public enum Prefix {
     NOT_FOUND("/enoent"),
     /** Misc error occurred. */
     ERROR("/error"),
-    /** RESTful API */
+    /** RESTful API. */
     REST_API("/api"),
-    /** Monitoring */
+    /** Monitoring. */
     METRICS("/metrics"),
-    /** CSS and images */
+    /** CSS and images. */
     STATIC("/default");
 
     private final String prefix;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.Executor;
 
@@ -93,7 +94,7 @@ History parse(File file) throws HistoryException {
      */
     History parse(File file, String sinceRevision) throws HistoryException {
 
-        if (!repo.isInP4Depot(file, false)) {
+        if (!repo.isInP4Depot(file, CommandTimeoutType.INDEXER)) {
             return null;
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionHistoryParser.java
Patch:
@@ -41,6 +41,7 @@
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.Executor;
@@ -176,7 +177,7 @@ private void initSaxParser() throws HistoryException {
      * @return object representing the file's history
      */
     History parse(File file, SubversionRepository repos, String sinceRevision,
-            int numEntries, boolean interactive)
+            int numEntries, CommandTimeoutType cmdType)
             throws HistoryException {
 
         initSaxParser();
@@ -187,7 +188,7 @@ History parse(File file, SubversionRepository repos, String sinceRevision,
         Executor executor;
         try {
             executor = repos.getHistoryLogExecutor(file, sinceRevision,
-                    numEntries, interactive);
+                    numEntries, cmdType);
         } catch (IOException e) {
             throw new HistoryException("Failed to get history for: \"" +
                     file.getAbsolutePath() + "\"", e);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -55,6 +55,7 @@
 import org.opengrok.indexer.analysis.AnalyzerGuruHelp;
 import org.opengrok.indexer.analysis.Ctags;
 import org.opengrok.indexer.configuration.CanonicalRootValidator;
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.Configuration;
 import org.opengrok.indexer.configuration.ConfigurationHelp;
 import org.opengrok.indexer.configuration.LuceneLockName;
@@ -241,7 +242,7 @@ public static void main(String[] argv) {
             }
 
             // Set updated configuration in RuntimeEnvironment.
-            env.setConfiguration(cfg, subFilesList, false);
+            env.setConfiguration(cfg, subFilesList, CommandTimeoutType.INDEXER);
 
             // Check version of index(es) versus current Lucene version and exit
             // with return code upon failure.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Executor.java
Patch:
@@ -90,7 +90,7 @@ public Executor(List<String> cmdList) {
     public Executor(List<String> cmdList, File workingDirectory) {
         this.cmdList = cmdList;
         this.workingDirectory = workingDirectory;
-        this.timeout = RuntimeEnvironment.getInstance().getCommandTimeout() * 1000;
+        this.timeout = RuntimeEnvironment.getInstance().getIndexerCommandTimeout() * 1000;
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -57,6 +57,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.RepositoryInstalled;
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.history.HistoryGuru;
@@ -232,7 +233,7 @@ public void testIndexWithSetIndexVersionedFilesOnly() throws Exception {
         Repository r = null;
         for (RepositoryInfo ri : repos) {
             if (ri.getDirectoryName().equals(repository.getSourceRoot() + "/rfe2575")) {
-                r = RepositoryFactory.getRepository(ri, false);
+                r = RepositoryFactory.getRepository(ri, CommandTimeoutType.INDEXER);
                 break;
             }
         }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/PageConfigRequestedProjectsTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.opengrok.indexer.authorization.AuthorizationStack;
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.Group;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
@@ -59,7 +60,7 @@ public void setUp() {
         env.setProjectsEnabled(true);
         env.setPluginStack(null);
 
-        env.applyConfig(false, false);
+        env.applyConfig(false, CommandTimeoutType.INDEXER);
     }
 
     @After

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -26,6 +26,7 @@
 import org.opengrok.indexer.Info;
 import org.opengrok.indexer.analysis.AnalyzerGuru;
 import org.opengrok.indexer.authorization.AuthorizationFramework;
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.web.PageConfig;
@@ -68,7 +69,7 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             throw new Error("CONFIGURATION parameter missing in the web.xml file");
         } else {
             try {
-                env.readConfiguration(new File(config), true);
+                env.readConfiguration(new File(config), CommandTimeoutType.WEBAPP_START);
             } catch (IOException ex) {
                 LOGGER.log(Level.WARNING, "Configuration error. Failed to read config file: ", ex);
             }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java
Patch:
@@ -24,6 +24,7 @@
  */
 package org.opengrok.web.api.v1.controller;
 
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.util.ClassUtil;
 import org.opengrok.web.api.v1.suggester.provider.service.SuggesterService;
@@ -59,7 +60,7 @@ public String get() {
     @PUT
     @Consumes(MediaType.APPLICATION_XML)
     public void set(final String body, @QueryParam("reindex") final boolean reindex) {
-        env.applyConfig(body, reindex, !reindex);
+        env.applyConfig(body, reindex, reindex ? CommandTimeoutType.INDEXER : CommandTimeoutType.RESTFUL);
         suggesterService.refresh();
     }
 
@@ -75,7 +76,7 @@ public Object getField(@PathParam("field") final String field) {
     public void setField(@PathParam("field") final String field, final String value) {
         setConfigurationValueException(field, value);
         // apply the configuration - let the environment reload the configuration if necessary
-        env.applyConfig(false, true);
+        env.applyConfig(false, CommandTimeoutType.RESTFUL);
         suggesterService.refresh();
     }
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ConcurrentConfigurationControllerTest.java
Patch:
@@ -50,6 +50,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.RepositoryInstalled;
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.history.HistoryGuru;
@@ -187,7 +188,7 @@ public void testConcurrentCInvalidateRepositories() throws InterruptedException,
          */
         for (int i = 0; i < TASK_COUNT; i++) {
             futures.add(threadPool.submit(() -> {
-                env.applyConfig(false, false);
+                env.applyConfig(false, CommandTimeoutType.RESTFUL);
                 assertTestedProjects();
             }));
         }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.RepositoryInstalled;
+import org.opengrok.indexer.configuration.CommandTimeoutType;
 import org.opengrok.indexer.configuration.Group;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
@@ -304,7 +305,7 @@ public void testDelete() throws Exception {
         // For per project reindex this is called from setConfiguration() because
         // of the -R option is present.
         HistoryGuru.getInstance().invalidateRepositories(
-                env.getRepositories(), null, false);
+                env.getRepositories(), null, CommandTimeoutType.INDEXER);
         env.setHistoryEnabled(true);
         Indexer.getInstance().prepareIndexer(
                 env,
@@ -514,7 +515,7 @@ public void testSetGet() throws Exception {
             List<RepositoryInfo> riList = env.getProjectRepositoriesMap().get(project);
             assertNotNull(riList);
             for (RepositoryInfo ri : riList) {
-                Repository repo = getRepository(ri, false);
+                Repository repo = getRepository(ri, CommandTimeoutType.RESTFUL);
                 assertFalse(repo.isHandleRenamedFiles());
             }
         }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/impl/SuggesterServiceImpl.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.BytesRef;
+import org.opengrok.indexer.Metrics;
 import org.opengrok.suggest.Suggester;
 import org.opengrok.suggest.Suggester.NamedIndexDir;
 import org.opengrok.suggest.Suggester.NamedIndexReader;
@@ -316,7 +317,8 @@ private void initSuggester() {
                 env.isProjectsEnabled(),
                 suggesterConfig.getAllowedFields(),
                 suggesterConfig.getTimeThreshold(),
-                rebuildParalleismLevel);
+                rebuildParalleismLevel,
+                Metrics.getRegistry());
 
         new Thread(() -> {
             suggester.init(getAllProjectIndexDirs());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/WatchDogService.java
Patch:
@@ -141,6 +141,6 @@ public void stop() {
                 LOGGER.log(Level.WARNING, "Cannot join WatchDogService thread: ", ex);
             }
         }
-        LOGGER.log(Level.INFO, "Watchdog stoped");
+        LOGGER.log(Level.INFO, "Watchdog stopped");
     }
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/RestApp.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.web.api.v1;
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.web.api.v1.controller;

File: opengrok-web/src/main/java/org/opengrok/web/servlet/MetricsServlet.java
Patch:
@@ -34,6 +34,8 @@
 @WebServlet("/metrics/prometheus")
 public class MetricsServlet extends HttpServlet {
 
+    private static final long serialVersionUID = 0L;
+
     @Override
     protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws IOException {
         try (PrintWriter pw = resp.getWriter()) {

File: plugins/src/test/java/opengrok/auth/plugin/ldap/LdapFacadeTest.java
Patch:
@@ -54,7 +54,7 @@ public void testToString() {
         int timeoutValue = 42;
         config.setConnectTimeout(timeoutValue);
         LdapFacade facade = new LdapFacade(config);
-        assertEquals("{servers=http://foo.foo,http://bar.bar, searchBase=dc=foo,dc=com}",
+        assertEquals("{server=no active server, searchBase=dc=foo,dc=com}",
                 facade.toString());
     }
 

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java
Patch:
@@ -374,7 +374,7 @@ private <T> LdapSearchResult<T> lookup(String dn, String filter, String[] attrib
             actualServer = getNextServer();
             return lookup(dn, filter, attributes, mapper, fail + 1);
         } catch (CommunicationException ex) {
-            LOGGER.log(Level.INFO, String.format("Communication error received on server %s, " +
+            LOGGER.log(Level.WARNING, String.format("Communication error received on server %s, " +
                     "reconnecting to next server.", server), ex);
             closeActualServer();
             actualServer = getNextServer();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
  * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
@@ -1089,6 +1089,8 @@ public void run() {
                     " for executor to finish", exp);
         }
         elapsed.report(LOGGER, "Done indexing data of all repositories");
+
+        CtagsUtil.deleteTempFiles();
     }
 
     public void refreshSearcherManagers(RuntimeEnvironment env, List<String> projects, String host) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -59,8 +59,6 @@
 import org.opengrok.indexer.authorization.AuthControlFlag;
 import org.opengrok.indexer.authorization.AuthorizationStack;
 import org.opengrok.indexer.history.RepositoryInfo;
-import org.opengrok.indexer.index.Filter;
-import org.opengrok.indexer.index.IgnoredNames;
 import org.opengrok.indexer.logger.LoggerFactory;
 
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationHelp.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2018-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.configuration;
@@ -39,8 +39,6 @@
 import org.opengrok.indexer.authorization.AuthorizationPlugin;
 import org.opengrok.indexer.authorization.AuthorizationStack;
 import org.opengrok.indexer.history.RepositoryInfo;
-import org.opengrok.indexer.index.Filter;
-import org.opengrok.indexer.index.IgnoredNames;
 import org.opengrok.indexer.util.StringUtils;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Filter.java
Patch:
@@ -19,9 +19,10 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opengrok.indexer.index;
+package org.opengrok.indexer.configuration;
 
 import java.io.File;
 import java.io.Serializable;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredDirs.java
Patch:
@@ -19,9 +19,9 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
-package org.opengrok.indexer.index;
+package org.opengrok.indexer.configuration;
 
 import java.io.File;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/IgnoredFiles.java
Patch:
@@ -19,9 +19,9 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
-package org.opengrok.indexer.index;
+package org.opengrok.indexer.configuration;
 
 import java.io.File;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java
Patch:
@@ -36,8 +36,8 @@
 import java.util.logging.Logger;
 
 import org.opengrok.indexer.configuration.Configuration;
+import org.opengrok.indexer.configuration.IgnoredNames;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
-import org.opengrok.indexer.index.IgnoredNames;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.ForbiddenSymlinkException;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java
Patch:
@@ -68,14 +68,14 @@
 import org.opengrok.indexer.analysis.StreamSource;
 import org.opengrok.indexer.authorization.AuthorizationFramework;
 import org.opengrok.indexer.configuration.Group;
+import org.opengrok.indexer.configuration.IgnoredNames;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.history.Annotation;
 import org.opengrok.indexer.history.History;
 import org.opengrok.indexer.history.HistoryEntry;
 import org.opengrok.indexer.history.HistoryException;
 import org.opengrok.indexer.history.HistoryGuru;
-import org.opengrok.indexer.index.IgnoredNames;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.search.QueryBuilder;
 import org.opengrok.indexer.util.IOUtils;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/IgnoredNamesTest.java
Patch:
@@ -19,8 +19,9 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
-package org.opengrok.indexer.index;
+package org.opengrok.indexer.configuration;
 
 import java.beans.ExceptionListener;
 import java.beans.XMLDecoder;
@@ -44,7 +45,6 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.opengrok.indexer.analysis.c.CAnalyzerFactoryTest;
-import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.history.RepositoryFactory;
 import org.opengrok.indexer.util.FileUtilities;
 import org.opengrok.indexer.util.TestRepository;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/FileUtilities.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.util;
 
@@ -34,8 +34,8 @@
 
 import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
 import org.apache.commons.compress.archivers.zip.ZipFile;
+import org.opengrok.indexer.configuration.IgnoredNames;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
-import org.opengrok.indexer.index.IgnoredNames;
 
 import static org.junit.Assert.assertNotNull;
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ProjectsController.java
Patch:
@@ -134,7 +134,7 @@ private List<RepositoryInfo> getRepositoriesInDir(final File projDir) {
         // There is no need to perform the work of invalidateRepositories(),
         // since addRepositories() calls getRepository() for each of
         // the repos.
-        return new ArrayList<>(histGuru.addRepositories(new File[]{projDir}, env.getIgnoredNames()));
+        return new ArrayList<>(histGuru.addRepositories(new File[]{projDir}));
     }
 
     private Project disableProject(String projectName) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitHistoryParserTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -41,6 +41,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.opengrok.indexer.util.TestRepository;
+import org.opengrok.indexer.web.Util;
 
 /**
  * @author austvik
@@ -114,7 +115,7 @@ public void shouldHandleMergeCommits() throws Exception {
 
         SortedSet<String> f0 = e0.getFiles();
         assertEquals("e[0] files size", 1, f0.size());
-        assertEquals("e[0] files[0]", "/contrib/serf/STATUS", f0.first());
+        assertEquals("e[0] files[0]", "/contrib/serf/STATUS", Util.fixPathIfWindows(f0.first()));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -130,7 +130,8 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision)
         cmd.add("--name-only");
         cmd.add("--pretty=fuller");
         cmd.add(GIT_DATE_OPT);
-        
+        cmd.add("-m");
+
         if (file.isFile() && isHandleRenamedFiles()) {
             cmd.add("--follow");
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java
Patch:
@@ -1800,7 +1800,7 @@ public boolean evaluateMatchOffset() {
                     LineBreaker breaker = new LineBreaker();
                     StreamSource streamSource = StreamSource.fromFile(resourceFile);
                     try {
-                        breaker.reset(streamSource);
+                        breaker.reset(streamSource, in -> ExpandTabsReader.wrap(in, getProject()));
                         int matchLine = breaker.findLineIndex(matchOffset);
                         if (matchLine >= 0) {
                             // Convert to 1-based offset to accord with OpenGrok line number.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -110,8 +110,8 @@ public String toHtml() {
         putjs("jquery-ui", "js/jquery-ui-1.12.1-custom", 11);
         putjs("jquery-tablesorter", "js/jquery-tablesorter-2.26.6", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.2", 13, true);
-        putjs("searchable-option-list", "js/searchable-option-list-2.0.13", 14);
-        putjs("utils", "js/utils-0.0.35", 15, true);
+        putjs("searchable-option-list", "js/searchable-option-list-2.0.14", 14);
+        putjs("utils", "js/utils-0.0.36", 15, true);
         putjs("repos", "js/repos-0.0.2", 20, true);
         putjs("diff", "js/diff-0.0.4", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -110,8 +110,8 @@ public String toHtml() {
         putjs("jquery-ui", "js/jquery-ui-1.12.1-custom", 11);
         putjs("jquery-tablesorter", "js/jquery-tablesorter-2.26.6", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.2", 13, true);
-        putjs("searchable-option-list", "js/searchable-option-list-2.0.13", 14);
-        putjs("utils", "js/utils-0.0.35", 15, true);
+        putjs("searchable-option-list", "js/searchable-option-list-2.0.14", 14);
+        putjs("utils", "js/utils-0.0.36", 15, true);
         putjs("repos", "js/repos-0.0.2", 20, true);
         putjs("diff", "js/diff-0.0.4", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -110,8 +110,8 @@ public String toHtml() {
         putjs("jquery-ui", "js/jquery-ui-1.12.1-custom", 11);
         putjs("jquery-tablesorter", "js/jquery-tablesorter-2.26.6", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.2", 13, true);
-        putjs("searchable-option-list", "js/searchable-option-list-2.0.12", 14);
-        putjs("utils", "js/utils-0.0.34", 15, true);
+        putjs("searchable-option-list", "js/searchable-option-list-2.0.13", 14);
+        putjs("utils", "js/utils-0.0.35", 15, true);
         putjs("repos", "js/repos-0.0.2", 20, true);
         putjs("diff", "js/diff-0.0.4", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitTagParser.java
Patch:
@@ -51,7 +51,7 @@ class GitTagParser implements Executor.StreamHandler {
      * <p>d305482d0acf552ccd290d6133a52547b8da16be:1427209918:tag: 0.12.1.5:
      */
     private static final Pattern PRETTY_TAG_MATCHER =
-            Pattern.compile("tag:\\s+(\\S[^,:]+)(?:,\\s+|:)");
+            Pattern.compile("tag:\\s+(\\S[^,:]*)(?:,\\s+|:)");
 
     /**
      * Stores the externally provided set.

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/TagEntry.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -93,7 +93,7 @@ public int compareTo(TagEntry that) {
         }
 
         if (this.revision != NOREV) {
-            return ((Integer) this.revision).compareTo(that.revision);
+            return Integer.compare(this.revision, that.revision);
         }
         assert this.date != null : "date == null";
         return this.date.compareTo(that.date);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationFramework.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;
 
@@ -37,6 +38,7 @@
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.framework.PluginFramework;
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.indexer.web.Laundromat;
 import org.opengrok.indexer.web.Statistics;
 
 /**
@@ -484,7 +486,7 @@ private boolean checkAll(HttpServletRequest request, String cache, Nameable enti
 
         if (entity == null) {
             LOGGER.log(Level.WARNING, "entity was null for request with parameters: {}",
-                    request.getParameterMap());
+                    Laundromat.launderLog(request.getParameterMap()));
             return false;
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -226,8 +226,7 @@ String determineCurrentVersion(boolean interactive) throws IOException {
     }
 
     private static class VobsHolder {
-
-        public static String[] vobs = runLsvob();
+        static String[] vobs = runLsvob();
     }
 
     private static String[] getAllVobs() {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -610,8 +610,8 @@ static int copyBytes(BufferSink sink, InputStream in) throws IOException {
     }
 
     static class HistoryRevResult {
-        public boolean success;
-        public int iterations;
+        boolean success;
+        int iterations;
     }
 
     private class RepositoryDateFormat extends DateFormat {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 
@@ -97,7 +97,7 @@ public final class Indexer {
 
     //whole app uses this separator
     public static final char PATH_SEPARATOR = '/';
-    public static String PATH_SEPARATOR_STRING = Character.toString(PATH_SEPARATOR);
+    public static final String PATH_SEPARATOR_STRING = Character.toString(PATH_SEPARATOR);
 
     private static final String HELP_OPT_1 = "--help";
     private static final String HELP_OPT_2 = "-?";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineMatcher.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.search.context;
@@ -30,7 +30,6 @@
  * Base class for matching a line against terms.
  */
 public abstract class LineMatcher {
-    public static String tagBegin, tagEnd;
     public static final int NOT_MATCHED = 0;
     public static final int MATCHED = 1;
     public static final int WAIT = 2;

File: suggester/src/test/java/org/opengrok/suggest/query/SuggesterPhraseQueryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.suggest.query;
 
@@ -50,7 +51,7 @@ public void phraseQueryTest() throws Exception {
 
         CustomPhraseQuery query = q.getPhraseQuery();
 
-        assertEquals(2, query.offset);
+        assertEquals(2, query.getOffset());
 
         Term[] terms = getTerms(query);
 

File: suggester/src/test/java/org/opengrok/suggest/query/customized/CustomSloppyPhraseScorerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.suggest.query.customized;
 
@@ -68,7 +69,7 @@ public static void test(
         }
 
         CustomPhraseQuery query = new CustomPhraseQuery(slop, "test", terms);
-        query.offset = offset;
+        query.setOffset(offset);
 
         try (IndexReader ir = DirectoryReader.open(dir)) {
             IndexSearcher is = new IndexSearcher(ir);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationFramework.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;
 
@@ -37,6 +38,7 @@
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.framework.PluginFramework;
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.indexer.web.LaunderUtil;
 import org.opengrok.indexer.web.Statistics;
 
 /**
@@ -484,7 +486,7 @@ private boolean checkAll(HttpServletRequest request, String cache, Nameable enti
 
         if (entity == null) {
             LOGGER.log(Level.WARNING, "entity was null for request with parameters: {}",
-                    request.getParameterMap());
+                    LaunderUtil.logging(request.getParameterMap()));
             return false;
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/ClearCaseRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -226,8 +226,7 @@ String determineCurrentVersion(boolean interactive) throws IOException {
     }
 
     private static class VobsHolder {
-
-        public static String[] vobs = runLsvob();
+        static String[] vobs = runLsvob();
     }
 
     private static String[] getAllVobs() {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -610,8 +610,8 @@ static int copyBytes(BufferSink sink, InputStream in) throws IOException {
     }
 
     static class HistoryRevResult {
-        public boolean success;
-        public int iterations;
+        boolean success;
+        int iterations;
     }
 
     private class RepositoryDateFormat extends DateFormat {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 
@@ -97,7 +97,7 @@ public final class Indexer {
 
     //whole app uses this separator
     public static final char PATH_SEPARATOR = '/';
-    public static String PATH_SEPARATOR_STRING = Character.toString(PATH_SEPARATOR);
+    public static final String PATH_SEPARATOR_STRING = Character.toString(PATH_SEPARATOR);
 
     private static final String HELP_OPT_1 = "--help";
     private static final String HELP_OPT_2 = "-?";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineMatcher.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.search.context;
@@ -30,7 +30,6 @@
  * Base class for matching a line against terms.
  */
 public abstract class LineMatcher {
-    public static String tagBegin, tagEnd;
     public static final int NOT_MATCHED = 0;
     public static final int MATCHED = 1;
     public static final int WAIT = 2;

File: suggester/src/test/java/org/opengrok/suggest/query/SuggesterPhraseQueryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.suggest.query;
 
@@ -50,7 +51,7 @@ public void phraseQueryTest() throws Exception {
 
         CustomPhraseQuery query = q.getPhraseQuery();
 
-        assertEquals(2, query.offset);
+        assertEquals(2, query.getOffset());
 
         Term[] terms = getTerms(query);
 

File: suggester/src/test/java/org/opengrok/suggest/query/customized/CustomSloppyPhraseScorerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.suggest.query.customized;
 
@@ -68,7 +69,7 @@ public static void test(
         }
 
         CustomPhraseQuery query = new CustomPhraseQuery(slop, "test", terms);
-        query.offset = offset;
+        query.setOffset(offset);
 
         try (IndexReader ir = DirectoryReader.open(dir)) {
             IndexSearcher is = new IndexSearcher(ir);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -110,8 +110,8 @@ public String toHtml() {
         putjs("jquery-ui", "js/jquery-ui-1.12.1-custom", 11);
         putjs("jquery-tablesorter", "js/jquery-tablesorter-2.26.6", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.2", 13, true);
-        putjs("searchable-option-list", "js/searchable-option-list-2.0.12", 14);
-        putjs("utils", "js/utils-0.0.34", 15, true);
+        putjs("searchable-option-list", "js/searchable-option-list-2.0.13", 14);
+        putjs("utils", "js/utils-0.0.35", 15, true);
         putjs("repos", "js/repos-0.0.2", 20, true);
         putjs("diff", "js/diff-0.0.4", 20, true);
         putjs("jquery-caret", "js/jquery.caret-1.5.2", 25);

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java
Patch:
@@ -381,7 +381,7 @@ private <T> LdapSearchResult<T> lookup(String dn, String filter, String[] attrib
             return lookup(dn, filter, attributes, mapper, fail + 1);
         } catch (NamingException ex) {
             LOGGER.log(Level.SEVERE, String.format("An arbitrary LDAP error occurred on server %s " +
-                    "when searching for '%s'",  getSearchDescription(dn, filter, attributes), server), ex);
+                    "when searching for '%s'", server, getSearchDescription(dn, filter, attributes)), ex);
             closeActualServer();
             actualServer = getNextServer();
             return lookup(dn, filter, attributes, mapper, fail + 1);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -151,8 +151,7 @@ private static Reader getXrefReader(
      * <li>{@link SearchHelper#historyContext} (ignored if {@code null})</li>
      * <li>{@link SearchHelper#sourceContext} (ignored if {@code null})</li>
      * <li>{@link SearchHelper#summarizer} (if sourceContext is not
-     * {@code null})</li> <li>{@link SearchHelper#compressed} (if sourceContext
-     * is not {@code null})</li> <li>{@link SearchHelper#sourceRoot} (if
+     * {@code null})</li> <li>{@link SearchHelper#sourceRoot} (if
      * sourceContext or historyContext is not {@code null})</li> </ul>
      *
      * @param out write destination

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/SearchHelper.java
Patch:
@@ -467,7 +467,7 @@ private void maybeRedirectToMatchOffset(int docID, List<String> contextFields)
 
         Query rewritten = query.rewrite(reader);
         Weight weight = rewritten.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1);
-        Matches matches = weight.matches(leaf, docID);
+        Matches matches = weight.matches(leaf, docID - leaf.docBase); // Adjust docID
         if (matches != null && matches != MatchesUtils.MATCH_WITH_NO_TERMS) {
             int matchCount = 0;
             int offset = -1;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/SearchHelper.java
Patch:
@@ -468,7 +468,7 @@ private void maybeRedirectToMatchOffset(int docID, List<String> contextFields)
         Query rewritten = query.rewrite(reader);
         Weight weight = rewritten.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1);
         Matches matches = weight.matches(leaf, docID);
-        if (matches != MatchesUtils.MATCH_WITH_NO_TERMS) {
+        if (matches != null && matches != MatchesUtils.MATCH_WITH_NO_TERMS) {
             int matchCount = 0;
             int offset = -1;
             for (String field : contextFields) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Prefix.java
Patch:
@@ -20,6 +20,7 @@
 /*
  * Copyright (c) 2011 Jens Elkner.
  * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.web;
 
@@ -105,7 +106,7 @@ public String toString() {
      * @see #toString()
      */
     public static Prefix get(String servletPath) {
-        if (servletPath == null || servletPath.length() < 3 || servletPath.charAt(0) != '/') {
+        if (servletPath == null || servletPath.length() < 2 || servletPath.charAt(0) != '/') {
             return UNKNOWN;
         }
         int idx = servletPath.indexOf('/', 1);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/SearchHelper.java
Patch:
@@ -413,9 +413,11 @@ public SearchHelper executeQuery() {
                 }
             }
             if (uniqueDefinition) {
+                String anchor = Util.URIEncode(((TermQuery) query).getTerm().text());
                 redirect = contextPath + Prefix.XREF_P
                         + Util.URIEncodePath(searcher.doc(hits[0].doc).get(QueryBuilder.PATH))
-                        + '#' + Util.URIEncode(((TermQuery) query).getTerm().text());
+                        + '?' + QueryParameters.FRAGMENT_IDENTIFIER_PARAM_EQ + anchor
+                        + '#' + anchor;
             }
         } catch (BooleanQuery.TooManyClauses e) {
             errorMsg = "Too many results for wildcard!";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -110,7 +110,7 @@ public String toHtml() {
         putjs("jquery-ui", "js/jquery-ui-1.12.1-custom", 11);
         putjs("jquery-tablesorter", "js/jquery-tablesorter-2.26.6", 12);
         putjs("tablesorter-parsers", "js/tablesorter-parsers-0.0.2", 13, true);
-        putjs("searchable-option-list", "js/searchable-option-list-2.0.10", 14);
+        putjs("searchable-option-list", "js/searchable-option-list-2.0.11", 14);
         putjs("utils", "js/utils-0.0.34", 15, true);
         putjs("repos", "js/repos-0.0.2", 20, true);
         putjs("diff", "js/diff-0.0.4", 20, true);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -183,7 +183,9 @@ protected TokenStreamComponents createComponents(String fieldName) {
             case QueryBuilder.PROJECT:
                 return new TokenStreamComponents(new PathTokenizer());
             case QueryBuilder.HIST:
-                return new HistoryAnalyzer().createComponents(fieldName);
+                try (HistoryAnalyzer historyAnalyzer = new HistoryAnalyzer()) {
+                    return historyAnalyzer.createComponents(fieldName);
+                }
             //below is set by PlainAnalyzer to workaround #1376 symbols search works like full text search 
             case QueryBuilder.REFS: {
                 return new TokenStreamComponents(symbolTokenizerFactory.get());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -143,7 +143,7 @@ void analyze(Document doc, InputStream in, Writer xrefOut,
             try { 
                 xrefOut.flush();
             } catch (IOException ex) {
-                LOGGER.log(Level.WARNING, "Couldn't flush xref, will retry once added to doc", ex);
+                LOGGER.log(Level.WARNING, "Couldn''t flush. Will retry once added to doc", ex);
             }
         }        
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.executables;
@@ -72,8 +72,8 @@ public AnalyzerFactory isMagic(byte[] content, InputStream in) {
                 }
             }
             // Require known major_version number.
-            int majorVersion = (content[MAJOR_VER_HIGHBYTE] << 1) |
-                content[MAJOR_VER_LOWBYTE];
+            int majorVersion = ((content[MAJOR_VER_HIGHBYTE] & 0xff) << 1) |
+                    (content[MAJOR_VER_LOWBYTE] & 0xff);
             if (majorVersion >= JDK1_1_MAJOR_VER && majorVersion <=
                 JAVA_SE_9_MAJOR_VER) {
                 return JavaClassAnalyzerFactory.DEFAULT_INSTANCE;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Annotation.java
Patch:
@@ -20,6 +20,7 @@
 /*
  * Copyright (c) 2007, 2019 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2019, Krystof Tulinger <k.tulinger@seznam.cz>.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.history;
@@ -233,7 +234,8 @@ private Map<String, String> generateColors() {
         revisions.forEach(revision -> {
             final int lineVersion = getRevisions().size() - getFileVersion(revision);
             final double bucketTotal = colorsPerBucket * lineVersion;
-            final int bucketIndex = (int) Math.max(Math.min(Math.floor(bucketTotal), nColors - 1), 0);
+            final int bucketIndex = (int) Math.max(
+                    Math.min(Math.floor(bucketTotal), nColors - 1.0), 0);
             Color color = colors.get(bucketIndex);
             colorMap.put(revision, String.format("rgb(%d, %d, %d)", color.red, color.green, color.blue));
         });

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RCSget.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -77,7 +78,7 @@ public RCSget(String file, String version) throws IOException, FileNotFoundExcep
     }
 
     @Override
-    public void reset() throws IOException {
+    public synchronized void reset() throws IOException {
         stream.reset();
     }
 
@@ -87,7 +88,7 @@ public void close() throws IOException {
     }
 
     @Override
-    public void mark(int readlimit) {
+    public synchronized void mark(int readlimit) {
         stream.mark(readlimit);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -63,7 +63,8 @@ public abstract class Repository extends RepositoryInfo {
      * <p>
      * NOTE: SimpleDateFormat is not thread-safe, lock must be held when formatting
      */
-    protected static final SimpleDateFormat OUTPUT_DATE_FORMAT = new SimpleDateFormat("YYYY-MM-dd HH:mm Z");
+    protected static final SimpleDateFormat OUTPUT_DATE_FORMAT =
+            new SimpleDateFormat("yyyy-MM-dd HH:mm Z");
 
     /**
      * The command with which to access the external repository. Can be

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -396,7 +396,7 @@ String determineBranch(boolean interactive) throws IOException {
             String url = getInfoPart(document, URLattr);
             int idx;
             final String branchesStr = "branches/";
-            if ((idx = url.indexOf(branchesStr)) > 0) {
+            if (url != null && (idx = url.indexOf(branchesStr)) > 0) {
                 branch = url.substring(idx + branchesStr.length());
             }
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.index;
 
@@ -626,7 +626,7 @@ public void optimize() throws IOException {
             }
         } catch (IOException e) {
             writerException = e;
-            LOGGER.log(Level.SEVERE, "ERROR: optimizing index: {0}", e);
+            LOGGER.log(Level.SEVERE, "ERROR: optimizing index", e);
         } finally {
             if (wrt != null) {
                 try {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Progress.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, 2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.util;
@@ -75,7 +75,7 @@ public void increment() {
         if (loggerThread != null) {
             // nag the thread.
             synchronized (sync) {
-                sync.notify();
+                sync.notifyAll();
             }
         }
     }
@@ -136,7 +136,7 @@ public void close() {
         try {
             run = false;
             synchronized (sync) {
-                sync.notify();
+                sync.notifyAll();
             }
             loggerThread.join();
         } catch (InterruptedException e) {

File: plugins/src/main/java/opengrok/auth/plugin/util/RestfulClient.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 
 package opengrok.auth.plugin.util;
@@ -65,7 +66,7 @@ public static int postIt(String URI, String input) {
 
             return status;
         } catch (Exception e) {
-            LOGGER.log(Level.WARNING, "REST request failed: {0}", e);
+            LOGGER.log(Level.WARNING, "REST request failed", e);
             return -1;
         }
     }

File: suggester/src/main/java/org/opengrok/suggest/SuggesterSearcher.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.suggest;
 
@@ -183,12 +184,12 @@ private List<LookupResultItem> suggest(
                 postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);
             }
 
-            int score;
+            int score = 0;
             if (!needsDocumentIds) {
                 score = normalizeDocumentFrequency(termsEnum.docFreq(), numDocs);
             } else if (needPositionsAndFrequencies) {
                 score = getPhraseScore(complexQueryData, leafReaderContext.docBase, postingsEnum);
-            } else {
+            } else if (complexQueryData != null) {
                 score = getDocumentFrequency(complexQueryData.documentIds, leafReaderContext.docBase, postingsEnum);
             }
 

File: suggester/src/main/java/org/opengrok/suggest/query/customized/CustomSloppyPhraseScorer.java
Patch:
@@ -82,7 +82,7 @@ final class CustomSloppyPhraseScorer extends Scorer implements PhraseScorer { //
         super(weight);
         this.slop = slop;
         this.offset = offset; // custom
-        this.numPostings = postings==null ? 0 : postings.length;
+        this.numPostings = postings.length;
         pq = new PhraseQueue(postings.length);
         DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];
         phrasePositions = new PhrasePositions[postings.length];

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -58,11 +58,11 @@ public String getCtagsLang() {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20190118_01
+     * @return 20200410_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20190118_01; // Edit comment above too!
+        return 20200410_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/ruby/RubyXrefTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.ruby;
@@ -45,7 +45,7 @@ public void sampleTest() throws IOException {
         writeAndCompare(new RubyAnalyzerFactory(),
                 "analysis/ruby/sample.rb",
                 "analysis/ruby/ruby_xrefres.html",
-                readTagsFromResource("analysis/ruby/sampletags"), 159);
+                readTagsFromResource("analysis/ruby/sampletags"), 161);
     }
 
     @Test

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.web;
 
@@ -111,7 +111,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.2.min.js", 13));
         SCRIPTS.put("tablesorter-parsers" + DEBUG_SUFFIX, new FileScript("js/tablesorter-parsers-0.0.2.js", 13));
-        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.8.min.js", 14));
+        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.9.min.js", 14));
         SCRIPTS.put("utils", new FileScript("js/utils-0.0.34.min.js", 15));
         SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.34.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.2.min.js", 20));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.web;
 
@@ -111,7 +111,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.2.min.js", 13));
         SCRIPTS.put("tablesorter-parsers" + DEBUG_SUFFIX, new FileScript("js/tablesorter-parsers-0.0.2.js", 13));
-        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.8.min.js", 14));
+        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.9.min.js", 14));
         SCRIPTS.put("utils", new FileScript("js/utils-0.0.34.min.js", 15));
         SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.34.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.2.min.js", 20));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -58,11 +58,11 @@ public String getCtagsLang() {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20190118_01
+     * @return 20200410_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20190118_01; // Edit comment above too!
+        return 20200410_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/ruby/RubyXrefTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, 2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017, 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.ruby;
@@ -45,7 +45,7 @@ public void sampleTest() throws IOException {
         writeAndCompare(new RubyAnalyzerFactory(),
                 "analysis/ruby/sample.rb",
                 "analysis/ruby/ruby_xrefres.html",
-                readTagsFromResource("analysis/ruby/sampletags"), 159);
+                readTagsFromResource("analysis/ruby/sampletags"), 161);
     }
 
     @Test

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/SubversionRepositoryTest.java
Patch:
@@ -19,11 +19,12 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2020, Ric Harris <harrisric@users.noreply.github.com>. 
  */
 package org.opengrok.indexer.history;
 
-import java.text.DateFormat;
 import java.text.ParseException;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -44,6 +45,7 @@ public void testDateFormats() {
             {"2016-01-01T00:70:00Z", null}, // lenient - wrong minute
             {"2016-01-01T00:00:99Z", null}, // lenient - wrong second
             {"2016-03-40T00:00:00Z", null}, // lenient - wrong day
+            {"2016-01-01T10:00:00.200999Z", null},
             {"2016-01-01T10:00:00.200Z", null},
             {"2016-01-01T11:00:00.200Z", null},
             {"2016-01-01T10:00:00.Z", null},

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -20,6 +20,7 @@
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2020, Ric Harris <harrisric@users.noreply.github.com>.
  */
 package org.opengrok.indexer.index;
 
@@ -362,7 +363,7 @@ public void testSetRepositories() throws Exception {
         env.setSourceRoot(testrepo.getSourceRoot());
 
         env.setRepositories(testrepo.getSourceRoot());
-        assertEquals(9, env.getRepositories().size());
+        assertEquals(10, env.getRepositories().size());
 
         String[] repoNames = {"mercurial", "git"};
         env.setRepositories(Arrays.stream(repoNames).

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/SuggesterService.java
Patch:
@@ -63,7 +63,7 @@ public interface SuggesterService {
     void rebuild(String project);
 
     /**
-     * Wait for the initial rebuild. For testing.
+     * Wait for rebuild. For testing.
      * @param timeout timeout to wait for
      * @param unit timeout unit
      */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -720,9 +720,8 @@ public static String[] parseOptions(String[] argv) throws ParseException {
                     "Option may be repeated.").Do(v -> repositories.add((String) v));
 
             parser.on("-S", "--search", "=[path/to/repository]",
-                    "Search for source repositories under -s,--source, and add them." +
-                    "Path (relative to the source root) to repository is optional. " +
-                    "Option may be repeated.").Do(v -> {
+                    "Search for source repositories under -s,--source, and add them. Path",
+                    "(relative to the source root) is optional. Option may be repeated.").Do(v -> {
                         searchRepositories = true;
                         String repoPath = (String) v;
                         if (!repoPath.isEmpty()) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -389,7 +389,6 @@ private String getFirstRevision(String fullpath) throws IOException {
                 ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK),
                 "rev-list",
                 "--reverse",
-                "--max-count=1",
                 "HEAD",
                 "--",
                 fullpath

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Annotation.java
Patch:
@@ -28,7 +28,6 @@
 import org.opengrok.indexer.util.Color;
 import org.opengrok.indexer.util.LazilyInstantiate;
 import org.opengrok.indexer.util.RainbowColorGenerator;
-import org.opengrok.indexer.web.Util;
 
 import java.io.IOException;
 import java.io.StringWriter;
@@ -53,7 +52,7 @@ public class Annotation {
     private static final Logger LOGGER = LoggerFactory.getLogger(Annotation.class);
 
     private final List<Line> lines = new ArrayList<>();
-    private final Map<String, String> desc = new HashMap<>();
+    private final Map<String, String> desc = new HashMap<>(); // revision to description
     private final Map<String, Integer> fileVersions = new HashMap<>(); // maps revision to file version
     private final LazilyInstantiate<Map<String, String>> colors = LazilyInstantiate.using(this::generateColors);
     private int widestRevision;
@@ -163,7 +162,7 @@ void addLine(String revision, String author, boolean enabled) {
     }
 
     void addDesc(String revision, String description) {
-        desc.put(revision, Util.encode(description));
+        desc.put(revision, description);
     }
 
     public String getDesc(String revision) {

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/filter/LocalhostFilter.java
Patch:
@@ -23,6 +23,7 @@
 package org.opengrok.web.api.v1.filter;
 
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.web.api.v1.controller.AnnotationController;
 import org.opengrok.web.api.v1.controller.FileController;
 import org.opengrok.web.api.v1.controller.HistoryController;
 import org.opengrok.web.api.v1.controller.SearchController;
@@ -59,7 +60,7 @@ public class LocalhostFilter implements ContainerRequestFilter {
      */
     private static final Set<String> allowedPaths = new HashSet<>(Arrays.asList(
             SearchController.PATH, SuggesterController.PATH, SuggesterController.PATH + "/config",
-            HistoryController.PATH, FileController.PATH));
+            HistoryController.PATH, FileController.PATH, AnnotationController.PATH));
 
     @Context
     private HttpServletRequest request;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/filter/LocalhostFilter.java
Patch:
@@ -23,6 +23,7 @@
 package org.opengrok.web.api.v1.filter;
 
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.web.api.v1.controller.FileController;
 import org.opengrok.web.api.v1.controller.HistoryController;
 import org.opengrok.web.api.v1.controller.SearchController;
 import org.opengrok.web.api.v1.controller.SuggesterController;
@@ -58,7 +59,7 @@ public class LocalhostFilter implements ContainerRequestFilter {
      */
     private static final Set<String> allowedPaths = new HashSet<>(Arrays.asList(
             SearchController.PATH, SuggesterController.PATH, SuggesterController.PATH + "/config",
-            HistoryController.PATH));
+            HistoryController.PATH, FileController.PATH));
 
     @Context
     private HttpServletRequest request;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/filter/LocalhostFilter.java
Patch:
@@ -23,6 +23,7 @@
 package org.opengrok.web.api.v1.filter;
 
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.web.api.v1.controller.HistoryController;
 import org.opengrok.web.api.v1.controller.SearchController;
 import org.opengrok.web.api.v1.controller.SuggesterController;
 
@@ -56,7 +57,8 @@ public class LocalhostFilter implements ContainerRequestFilter {
      * @see SuggesterController#getConfig()
      */
     private static final Set<String> allowedPaths = new HashSet<>(Arrays.asList(
-            SearchController.PATH, SuggesterController.PATH, SuggesterController.PATH + "/config"));
+            SearchController.PATH, SuggesterController.PATH, SuggesterController.PATH + "/config",
+            HistoryController.PATH));
 
     @Context
     private HttpServletRequest request;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.ada;
 
@@ -43,7 +43,7 @@ public class AdaAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected AdaAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new AdaSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new AdaSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/asm/AsmAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.asm;
@@ -41,7 +41,8 @@ public class AsmAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory instance
      */
     protected AsmAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new AsmSymbolTokenizer(AbstractAnalyzer.DUMMY_READER)));
+        super(factory, () -> new JFlexTokenizer(new AsmSymbolTokenizer(
+                AbstractAnalyzer.DUMMY_READER)));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
 
@@ -44,7 +44,7 @@ public class CAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected CAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new CSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new CSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.c;
 
@@ -42,7 +42,7 @@ public class CxxAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected CxxAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new CxxSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new CxxSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.clojure;
 
@@ -33,7 +33,7 @@
 public class ClojureAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected ClojureAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new ClojureSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new ClojureSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.csharp;
 
@@ -37,7 +37,7 @@
 public class CSharpAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected CSharpAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new CSharpSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new CSharpSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.eiffel;
@@ -40,7 +40,7 @@ public class EiffelAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory instance
      */
     protected EiffelAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new EiffelSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new EiffelSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.erlang;
@@ -38,7 +38,7 @@ public class ErlangAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected ErlangAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new ErlangSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new ErlangSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.fortran;
 
@@ -37,7 +37,7 @@
 public class FortranAnalyzer extends AbstractSourceCodeAnalyzer {
 
     FortranAnalyzer(FortranAnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new FortranSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new FortranSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.golang;
@@ -42,7 +42,7 @@ public class GolangAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected GolangAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new GolangSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new GolangSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.haskell;
@@ -41,7 +41,7 @@ public class HaskellAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected HaskellAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new HaskellSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new HaskellSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.java;
 
@@ -41,7 +41,7 @@ public class JavaAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected JavaAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new JavaSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new JavaSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.javascript;
 
@@ -42,7 +42,7 @@ public class JavaScriptAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected JavaScriptAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new JavaScriptSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new JavaScriptSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.json;
 
@@ -42,7 +42,7 @@ public class JsonAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected JsonAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new JsonSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new JsonSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.kotlin;
 
@@ -41,7 +41,7 @@ public class KotlinAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected KotlinAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new KotlinSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new KotlinSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.lisp;
 
@@ -37,7 +37,7 @@
 public class LispAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected LispAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new LispSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new LispSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.lua;
@@ -41,7 +41,7 @@ public class LuaAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected LuaAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new LuaSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new LuaSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.pascal;
 
@@ -41,7 +41,7 @@ public class PascalAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected PascalAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new PascalSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new PascalSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.perl;
 
@@ -41,7 +41,7 @@ public class PerlAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected PerlAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new PerlSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new PerlSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.php;
 
@@ -41,7 +41,7 @@ public class PhpAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected PhpAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new PhpSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new PhpSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.powershell;
 
@@ -43,7 +43,7 @@ public class PowershellAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected PowershellAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new PoshSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new PoshSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.python;
 
@@ -41,7 +41,7 @@ public class PythonAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected PythonAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new PythonSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new PythonSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.ruby;
@@ -42,7 +42,7 @@ public class RubyAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected RubyAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new RubySymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new RubySymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzer.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2016 Nikolay Denev.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.rust;
@@ -44,7 +44,7 @@ public class RustAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected RustAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new RustSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new RustSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.scala;
 
@@ -41,7 +41,7 @@ public class ScalaAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected ScalaAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new ScalaSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new ScalaSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/ShAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sh;
 
@@ -43,7 +43,7 @@ public class ShAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected ShAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new ShSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new ShSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -34,7 +34,7 @@
 public class PLSQLAnalyzer extends PlainAnalyzer {
 
     public PLSQLAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new PLSQLSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new PLSQLSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -34,7 +34,7 @@
 public class SQLAnalyzer extends PlainAnalyzer {
 
     public SQLAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new SQLSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new SQLSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.swift;
 
@@ -41,7 +41,7 @@ public class SwiftAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected SwiftAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new SwiftSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new SwiftSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.tcl;
 
@@ -37,7 +37,7 @@
 public class TclAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected TclAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new TclSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new TclSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/typescript/TypeScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.typescript;
 
@@ -41,7 +41,7 @@ public class TypeScriptAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     TypeScriptAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new TypeScriptSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new TypeScriptSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }    
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/VBAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2020, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.vb;
 
@@ -41,7 +41,7 @@ public class VBAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory defined instance for the analyzer
      */
     protected VBAnalyzer(AnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new VBSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new VBSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/verilog/VerilogAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.verilog;
@@ -41,7 +41,7 @@ public class VerilogAnalyzer extends AbstractSourceCodeAnalyzer {
      * @param factory instance
      */
     protected VerilogAnalyzer(FileAnalyzerFactory factory) {
-        super(factory, new JFlexTokenizer(new VerilogSymbolTokenizer(
+        super(factory, () -> new JFlexTokenizer(new VerilogSymbolTokenizer(
                 AbstractAnalyzer.DUMMY_READER)));
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -196,7 +196,8 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
             String messages = MessagesUtils.messagesToJson(p, MESSAGES_MAIN_PAGE_TAG);
             if (p != null && !messages.isEmpty()) {
                 out.write(" <a href=\"" + xrefPrefix + "/" + p.getName() + "\">");
-                out.write("<span class=\"important-note important-note-rounded\" data-messages='" + messages + "'>!</span>");
+                out.write("<span class=\"note-" + MessagesUtils.getMessageLevel(p.getName(), MESSAGES_MAIN_PAGE_TAG) +
+                        " important-note important-note-rounded\" data-messages='" + messages + "'>!</span>");
                 out.write("</a>");
             }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -111,9 +111,9 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.2.min.js", 13));
         SCRIPTS.put("tablesorter-parsers" + DEBUG_SUFFIX, new FileScript("js/tablesorter-parsers-0.0.2.js", 13));
-        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.7.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.33.min.js", 15));
-        SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.33.js", 15));
+        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.8.min.js", 14));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.34.min.js", 15));
+        SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.34.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.2.min.js", 20));
         SCRIPTS.put("repos" + DEBUG_SUFFIX, new FileScript("js/repos-0.0.2.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.4.min.js", 20));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -171,6 +171,9 @@ public static void main(String[] argv) {
 
             disabledRepositories.addAll(cfg.getDisabledRepositories());
             cfg.setDisabledRepositories(disabledRepositories);
+            for (String repoName : disabledRepositories) {
+                LOGGER.log(Level.FINEST, "Disabled {0}", repoName);
+            }
 
             env = RuntimeEnvironment.getInstance();
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -174,7 +174,7 @@ private void initialize() {
         command.add("-u");
         command.add("--filter=yes");
         command.add("--filter-terminator=" + CTAGS_FILTER_TERMINATOR + "\n");
-        command.add("--fields=-anf+iKnS");
+        command.add("--fields=-af+iKnS");
         command.add("--excmd=pattern");
 
         //Ideally all below should be in ctags, or in outside config file,

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.index;
@@ -319,7 +319,7 @@ private int completeLinkages() throws IOException {
                         f.getTargetRelPath())).collect(Collectors.toList());
 
         Map<Boolean, List<PendingSymlinkageExec>> bySuccess;
-        try (Progress progress = new Progress(LOGGER, "pending renames", numPending)) {
+        try (Progress progress = new Progress(LOGGER, "pending linkages", numPending)) {
             bySuccess = pendingExecs.parallelStream().collect(
                             Collectors.groupingByConcurrent((x) -> {
                                 progress.increment();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzerFactory.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2019, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis.c;
@@ -39,7 +40,6 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
         "LEX",
         "YACC",
         "D",
-        "S",
         "XS",                   // Mainly found in perl directories
         "X",                    // rpcgen input files
     };

File: plugins/src/main/java/opengrok/auth/plugin/util/RestfulClient.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.logging.Logger;
 
 /**
- * Simple RESTful client code for PUT requests.
+ * Simple RESTful client.
  */
 public class RestfulClient {
     private static final Logger LOGGER = Logger.getLogger(RestfulClient.class.getName());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -193,7 +193,7 @@ public boolean isWorking() {
      *
      * @param working is repository working
      */
-    public void setWorking(Boolean working) {
+    public void setWorking(boolean working) {
         this.working = working;
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzer.java
Patch:
@@ -46,11 +46,11 @@ protected SwiftAnalyzer(AnalyzerFactory factory) {
     }
 
     /**
-     * @return {@code "Swift"} to match the OpenGrok-customized definitions
+     * @return {@code "swift"} to match the OpenGrok-customized definitions
      */
     @Override
     public String getCtagsLang() {
-        return "Swift";
+        return "swift";
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -112,8 +112,8 @@ public String toHtml() {
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.2.min.js", 13));
         SCRIPTS.put("tablesorter-parsers" + DEBUG_SUFFIX, new FileScript("js/tablesorter-parsers-0.0.2.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.7.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.32.min.js", 15));
-        SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.32.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.33.min.js", 15));
+        SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.33.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.2.min.js", 20));
         SCRIPTS.put("repos" + DEBUG_SUFFIX, new FileScript("js/repos-0.0.2.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.4.min.js", 20));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.javascript;
 
@@ -50,11 +50,11 @@ protected JavaScriptAnalyzer(AnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20190217_00
+     * @return 20191006_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20190217_00; // Edit comment above too!
+        return 20191006_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseSymlinksTest.java
Patch:
@@ -207,7 +207,7 @@ public void testSymlinksWithOneAddedSymlink() throws IOException, IndexerExcepti
         Path dupeLinkDir = links.resolve("zzz");
         /*
          * zzz is an implicitly-allowed symlink because its target matches an
-         * already-accepted symlink, gt, and is reachable upon traversal by
+         * already-indexed symlink, gt, and is reachable upon traversal by
          * indexDown() (to affirm that any intermediate symlinks are allowed).
          */
         expectedCanonical = gitDir.toFile().getCanonicalFile();

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseSymlinksTest.java
Patch:
@@ -138,8 +138,8 @@ public void testSymlinksWithFullCanonicalRoot() throws IOException, IndexerExcep
 
         /*
          * For this test, don't even bother to include default-accepted links
-         * immediately under sourceRoot, as -C,--canonicalRoot as specified
-         * here encompasses all of external/.
+         * immediately under sourceRoot, as --canonicalRoot as specified here
+         * encompasses all of external/.
          */
         env.setCanonicalRoots(new HashSet<>(Collections.singletonList(
                 externalRoot.getCanonicalPath())));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1032,6 +1032,7 @@ private boolean acceptSymlink(Path absolute, File canonical, AcceptSymlinkRet re
              * will allow all others in the set.
              */
             if (canonical1.equals(allowedTarget)) {
+                acceptedNonlocalSymlinks.put(canonical1, absolute1);
                 return true;
             }
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -160,8 +160,6 @@ private void initialize() throws IOException {
         command.add("--langmap=sql:+.pkb"); // # 1763
         command.add("--langmap=sql:+.pck"); // # 1763
 
-        command.add("--langmap=javascript:+.ts");
-
         //Ideally all below should be in ctags, or in outside config file,
         //we might run out of command line SOON
         //Also note, that below ctags definitions HAVE to be in POSIX

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -435,6 +435,7 @@ public void setGroupsCollapseThreshold(int groupsCollapseThreshold) throws Illeg
     public Configuration() {
         // This list of calls is sorted alphabetically so please keep it.
         cmds = new HashMap<>();
+        setAllowLeadingWildcard(true);
         setAllowedSymlinks(new HashSet<>());
         setAuthorizationWatchdogEnabled(false);
         //setBugPage("http://bugs.myserver.org/bugdatabase/view_bug.do?bug_id=");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -289,9 +289,9 @@ public void testRamBufferSize() {
     @Test
     public void testAllowLeadingWildcard() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
-        assertFalse(instance.isAllowLeadingWildcard());
-        instance.setAllowLeadingWildcard(true);
         assertTrue(instance.isAllowLeadingWildcard());
+        instance.setAllowLeadingWildcard(false);
+        assertFalse(instance.isAllowLeadingWildcard());
     }
 
     @Test

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -435,6 +435,7 @@ public void setGroupsCollapseThreshold(int groupsCollapseThreshold) throws Illeg
     public Configuration() {
         // This list of calls is sorted alphabetically so please keep it.
         cmds = new HashMap<>();
+        setAllowLeadingWildcard(true);
         setAllowedSymlinks(new HashSet<>());
         setAuthorizationWatchdogEnabled(false);
         //setBugPage("http://bugs.myserver.org/bugdatabase/view_bug.do?bug_id=");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -289,9 +289,9 @@ public void testRamBufferSize() {
     @Test
     public void testAllowLeadingWildcard() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
-        assertFalse(instance.isAllowLeadingWildcard());
-        instance.setAllowLeadingWildcard(true);
         assertTrue(instance.isAllowLeadingWildcard());
+        instance.setAllowLeadingWildcard(false);
+        assertFalse(instance.isAllowLeadingWildcard());
     }
 
     @Test

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -606,6 +606,7 @@ private TagEntry buildTagEntry(File directory, String tag, boolean interactive)
         argv.add("-n");
         argv.add("1");
         argv.add(tag);
+        argv.add("--");
         
         Executor executor = new Executor(argv, directory, interactive ?
                 RuntimeEnvironment.getInstance().getInteractiveCommandTimeout() :

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -606,6 +606,7 @@ private TagEntry buildTagEntry(File directory, String tag, boolean interactive)
         argv.add("-n");
         argv.add("1");
         argv.add(tag);
+        argv.add("--");
         
         Executor executor = new Executor(argv, directory, interactive ?
                 RuntimeEnvironment.getInstance().getInteractiveCommandTimeout() :

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/CVSRepositoryTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2018-2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -102,7 +102,7 @@ public void setUp() {
      * @param reposRoot directory of the repository root
      * @param args arguments to use for the command
      */
-    private static void runCvsCommand(File reposRoot, String ... args) {
+    public static void runCvsCommand(File reposRoot, String ... args) {
         List<String> cmdargs = new ArrayList<>();
         CVSRepository repo = new CVSRepository();
         cmdargs.add(repo.getRepoCommand());

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -109,8 +109,8 @@ public String toHtml() {
         SCRIPTS.put("jquery", new FileScript("js/jquery-3.4.1.min.js", 10));
         SCRIPTS.put("jquery-ui", new FileScript("js/jquery-ui-1.12.1-custom.min.js", 11));
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
-        SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.min.js", 13));
-        SCRIPTS.put("tablesorter-parsers" + DEBUG_SUFFIX, new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
+        SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.2.min.js", 13));
+        SCRIPTS.put("tablesorter-parsers" + DEBUG_SUFFIX, new FileScript("js/tablesorter-parsers-0.0.2.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.7.min.js", 14));
         SCRIPTS.put("utils", new FileScript("js/utils-0.0.32.min.js", 15));
         SCRIPTS.put("utils" + DEBUG_SUFFIX, new FileScript("js/utils-0.0.32.js", 15));

File: plugins/src/main/java/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -166,8 +166,8 @@ public void fillSession(HttpServletRequest req, User user) {
             if ((res = getLdapProvider().lookupLdapContent(dn, expandedFilter,
                     attributes.toArray(new String[0]))) == null) {
                 LOGGER.log(Level.WARNING, "failed to get LDAP attributes ''{2}'' for user {0} " +
-                                "with filter ''{1}''",
-                        new Object[]{user, expandedFilter, attributes});
+                                "with filter ''{1}'' from LDAP provider {3}",
+                        new Object[]{user, expandedFilter, attributes, getLdapProvider()});
                 return;
             }
 

File: plugins/src/test/java/opengrok/auth/plugin/LdapAttrPluginTest.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;

File: plugins/src/test/java/opengrok/auth/plugin/LdapAttrPluginTest.java
Patch:
@@ -109,7 +109,7 @@ private Group makeGroup(String name) {
     }
 
     /**
-     * Test of isAllowed method, of class LdapFilter.
+     * Test of {@code isAllowed} method.
      */
     @Test
     public void testIsAllowed() {

File: plugins/src/main/java/opengrok/auth/plugin/LdapAttrPlugin.java
Patch:
@@ -116,12 +116,12 @@ private String getSessionAttr() {
     @SuppressWarnings("unchecked")
     @Override
     public void fillSession(HttpServletRequest req, User user) {
-        boolean sessionAllowed = false;
+        Boolean sessionAllowed;
         LdapUser ldapUser;
         Map<String, Set<String>> records = null;
         Set<String> attributeValues;
 
-        updateSession(req, sessionAllowed);
+        updateSession(req, false);
 
         if ((ldapUser = (LdapUser) req.getSession().getAttribute(getSessionAttr())) == null) {
             LOGGER.log(Level.WARNING, "cannot get {0} attribute", LdapUserPlugin.SESSION_ATTR);

File: plugins/src/main/java/opengrok/auth/plugin/LdapAttrPlugin.java
Patch:
@@ -110,7 +110,7 @@ public void fillSession(HttpServletRequest req, User user) {
             sessionAllowed = attributeValues.stream().anyMatch((t) -> whitelist.contains(t));
         } else {
             try {
-                String dn = ldapUser.getId();
+                String dn = ldapUser.getDn();
                 if (dn != null) {
                     LOGGER.log(Level.FINEST, "searching with dn={0}", dn);
                     AbstractLdapProvider.LdapSearchResult<Map<String, Set<String>>> res;
@@ -121,6 +121,8 @@ public void fillSession(HttpServletRequest req, User user) {
                     }
 
                     records = res.getAttrs();
+                } else {
+                    LOGGER.log(Level.FINE, "no DN for user {0}", user);
                 }
             } catch (LdapException ex) {
                 throw new AuthorizationException(ex);

File: plugins/src/main/java/opengrok/auth/entity/LdapUser.java
Patch:
@@ -40,7 +40,7 @@ public class LdapUser implements Serializable {
     private static final long serialVersionUID = 1L;
 
     public LdapUser() {
-        this(null,null);
+        this(null, null);
     }
 
     public LdapUser(String dn, Map<String, Set<String>> attrs) {

File: plugins/src/main/java/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -53,7 +53,7 @@ public class LdapUserPlugin extends AbstractLdapPlugin {
     public static final String SESSION_ATTR = "opengrok-ldap-plugin-user";
 
     /**
-     * configuration names
+     * List of configuration names.
      * <ul>
      * <li><code>filter</code> is LDAP filter used for searching (optional)</li>
      * <li><code>useDN</code> boolean value indicating if User.username should be used as search Distinguished Name (optional, default is false)</li>

File: plugins/src/main/java/opengrok/auth/plugin/ldap/LdapFacade.java
Patch:
@@ -247,7 +247,7 @@ public boolean isConfigured() {
     }
 
     /**
-     * Get LDAP attributes
+     * Get LDAP attributes.
      *
      * @param dn LDAP DN attribute. If @{code null} then {@code searchBase} will be used.
      * @param filter LDAP filter to use. If @{code null} then @{link LDAP_FILTER} will be used.

File: plugins/src/main/java/opengrok/auth/plugin/util/Timestamp.java
Patch:
@@ -25,9 +25,10 @@
 import java.util.Date;
 
 /**
- * Implementation of timestamp decoding as mentioned in
+ * Implementation of timestamp decoding.
+ *
  * @see <a href="https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm">mod_osso documentation</a>
- * in chapter 9.5.
+ * chapter 9.5
  *
  * @author Krystof Tulinger
  */

File: plugins/src/test/java/opengrok/auth/plugin/LdapUserPluginTest.java
Patch:
@@ -57,7 +57,7 @@ public void loadTestNegative1() {
     }
     
     @Test
-    public void loadTestPostitive() {
+    public void loadTestPositive() {
         Map<String, Object> params = getParamsMap();
         params.put(LdapUserPlugin.ATTRIBUTES, (Object)"mail");
         plugin.load(params);

File: plugins/src/main/java/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -56,7 +56,7 @@ public class LdapUserPlugin extends AbstractLdapPlugin {
      * configuration names
      * <ul>
      * <li><code>filter</code> is LDAP filter used for searching (optional)</li>
-     * <li><code>useDN</code> boolean value indicating if User.username should be used as search DN</li>
+     * <li><code>useDN</code> boolean value indicating if User.username should be used as search Distinguished Name</li>
      * <li><code>attributes</code> is comma separated list of LDAP attributes to be produced (mandatory)</li>
      * </ul>
      */
@@ -173,7 +173,7 @@ public void fillSession(HttpServletRequest req, User user) {
             attrSet.put(attrName, records.get(attrName));
         }
 
-        updateSession(req, new LdapUser(useDN ? user.getUsername() : dn, attrSet));
+        updateSession(req, new LdapUser(useDN ? dn : user.getUsername(), attrSet));
     }
 
     /**

File: plugins/src/main/java/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -143,7 +143,7 @@ public void fillSession(HttpServletRequest req, User user) {
             AbstractLdapProvider.LdapSearchResult<Map<String, Set<String>>> res;
             if ((res = getLdapProvider().lookupLdapContent(useDN ? user.getUsername() : null,
                     expandedFilter, attributes.toArray(new String[attributes.size()]))) == null) {
-                LOGGER.log(Level.WARNING, "failed to get LDAP attributes ''{3}'' for user ''{0}'' " +
+                LOGGER.log(Level.WARNING, "failed to get LDAP attributes ''{2}'' for user ''{0}'' " +
                                 "with filter ''{1}''",
                         new Object[]{user, expandedFilter, String.join(", ", attributes)});
                 return;

File: plugins/src/main/java/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -112,7 +112,7 @@ protected boolean sessionExists(HttpServletRequest req) {
      *
      * Use \% for printing the '%' character.
      *
-     * @param user User object from the request (created by {@see UserPlugin})
+     * @param user User object from the request (created by {@code UserPlugin})
      * @return replaced result
      */
     protected String expandFilter(User user) {

File: plugins/src/main/java/opengrok/auth/plugin/util/Timestamp.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.Date;
 
 /**
- * Implementation of timestamp decoding as mentinoned in
- * <a href="https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm">mod_osso documentation</a>
- * in chapter 9.5 .
+ * Implementation of timestamp decoding as mentioned in
+ * @see <a href="https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm">mod_osso documentation</a>
+ * in chapter 9.5.
  *
  * @author Krystof Tulinger
  */

File: suggester/src/main/java/org/opengrok/suggest/SuggesterProjectData.java
Patch:
@@ -298,13 +298,13 @@ private void initSearchCountMap() throws IOException {
             ChronicleMapAdapter m;
             try {
                 m = new ChronicleMapAdapter(field, conf.getAverageKeySize(), conf.getEntries(), f);
-            } catch (Exception e) {
+            } catch (Throwable t) {
                 logger.log(Level.SEVERE,
                         "Could not create ChronicleMap, most popular completion disabled, if you are using "
                                 + "JDK9+ make sure to specify: "
                                 + "--add-exports java.base/jdk.internal.ref=ALL-UNNAMED "
                                 + "--add-exports java.base/jdk.internal.misc=ALL-UNNAMED "
-                                + "--add-exports java.base/sun.nio.ch=ALL-UNNAMED", e);
+                                + "--add-exports java.base/sun.nio.ch=ALL-UNNAMED", t);
                 return;
             }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -159,8 +159,7 @@ public void setDirectoryName(File dir) {
             }
         } catch (IOException e) {
             path = originalPath;
-            LOGGER.log(Level.SEVERE, String.format(
-                "Failed to get canonical path for {0}", path), e);
+            LOGGER.log(Level.SEVERE, String.format("Failed to get canonical path for %s", path), e);
         }
 
         if (path.startsWith(rootPath)) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -296,8 +296,8 @@ private static void printPlain(PrintPlainFinalArgs fargs, Document doc,
             boolean isDefSearch = fargs.shelp.builder.isDefSearch();
             // SRCROOT is read with UTF-8 as a default.
             File sourceFile = new File(fargs.shelp.sourceRoot, rpath);
-            try (Reader r = IOUtils.createBOMStrippedReader(new FileInputStream(
-                    sourceFile), StandardCharsets.UTF_8.name())) {
+            try (FileInputStream fis = new FileInputStream(sourceFile);
+                 Reader r = IOUtils.createBOMStrippedReader(fis, StandardCharsets.UTF_8.name())) {
                 fargs.shelp.sourceContext.getContext(r, fargs.out,
                     fargs.xrefPrefix, fargs.morePrefix, rpath, tags, true,
                     isDefSearch, null, scopes);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Executor.java
Patch:
@@ -253,9 +253,7 @@ public void run() {
                     ret = process.exitValue();
                 }
             } catch (IllegalThreadStateException e) {
-                if (process != null) {
-                    process.destroy();
-                }
+                process.destroy();
             }
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/IOUtils.java
Patch:
@@ -169,7 +169,7 @@ public static List<File> listFiles(File root, String suffix) {
             @Override
             public boolean accept(File dir, String name) {
                 if (suffix != null && !suffix.isEmpty()) {
-                    return suffix != null && !suffix.isEmpty() && name.endsWith(suffix);
+                    return name.endsWith(suffix);
                 } else {
                     return true;
                 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/OptionParser.java
Patch:
@@ -445,7 +445,7 @@ private String argValue(String arg, Boolean mandatory) {
         // to have a value, null is returned. If the option
         // does not require a value, an empty string is returned.
         String value = arg;
-        Boolean isOption = value.startsWith("-");
+        boolean isOption = value.startsWith("-");
         
         if (mandatory) {
             if (isOption ) {

File: plugins/src/main/java/opengrok/auth/plugin/LdapAttrPlugin.java
Patch:
@@ -91,7 +91,7 @@ protected boolean sessionExists(HttpServletRequest req) {
     @SuppressWarnings("unchecked")
     @Override
     public void fillSession(HttpServletRequest req, User user) {
-        Boolean sessionAllowed = false;
+        boolean sessionAllowed = false;
         LdapUser ldapUser;
         Map<String, Set<String>> records;
         Set<String> attributeValues;

File: suggester/src/main/java/org/opengrok/suggest/SuggesterProjectData.java
Patch:
@@ -268,9 +268,9 @@ private WFSTCompletionLookup build(final IndexReader indexReader, final String f
     }
 
     private void store(final WFSTCompletionLookup WFST, final String field) throws IOException {
-        FileOutputStream fos = new FileOutputStream(getWFSTFile(field));
-
-        WFST.store(fos);
+        try (FileOutputStream fos = new FileOutputStream(getWFSTFile(field))) {
+            WFST.store(fos);
+        }
     }
 
     private void createSuggesterDir() throws IOException {

File: suggester/src/main/java/org/opengrok/suggest/popular/impl/chronicle/ChronicleMapConfiguration.java
Patch:
@@ -76,7 +76,8 @@ public void setAverageKeySize(double averageKeySize) {
      * @param field field this configuration is for
      */
     public void save(final Path dir, final String field) {
-        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(getFile(dir, field)))) {
+        try (FileOutputStream fos = new FileOutputStream(getFile(dir, field));
+             ObjectOutputStream oos = new ObjectOutputStream(fos)) {
             oos.writeObject(this);
         } catch (IOException e) {
             logger.log(Level.SEVERE, "Could not save chronicle map configuration", e);

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.BytesRef;
-import org.hibernate.validator.constraints.NotBlank;
 import org.opengrok.suggest.LookupResultItem;
 import org.opengrok.suggest.Suggester.Suggestions;
 import org.opengrok.suggest.SuggesterUtils;
@@ -46,6 +45,7 @@
 import javax.inject.Inject;
 import javax.validation.Valid;
 import javax.validation.constraints.Min;
+import javax.validation.constraints.NotBlank;
 import javax.ws.rs.BeanParam;
 import javax.ws.rs.Consumes;
 import javax.ws.rs.DefaultValue;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/model/SuggesterQueryData.java
Patch:
@@ -22,11 +22,11 @@
  */
 package org.opengrok.web.api.v1.suggester.model;
 
-import org.hibernate.validator.constraints.NotBlank;
 import org.opengrok.indexer.search.QueryBuilder;
 import org.opengrok.web.api.v1.suggester.provider.filter.AuthorizationFilter;
 
 import javax.validation.constraints.Min;
+import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.Pattern;
 import javax.ws.rs.QueryParam;
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -106,7 +106,6 @@ public GitRepository() {
 
         ignoredDirs.add(".git");
         ignoredFiles.add(".git");
-        ignoredFiles.add(".gitignore");
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -430,7 +430,7 @@ private Collection<RepositoryInfo> addRepositories(File[] files,
                                     file.getAbsolutePath());
                         } else if (depth <= scanningDepth) {
                             repoList.addAll(HistoryGuru.this.addRepositories(subFiles, ignoredNames,
-                                    recursiveSearch, null,depth + 1));
+                                    recursiveSearch, type,depth + 1));
                         }
                     }
                 } else {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryInfo.java
Patch:
@@ -60,7 +60,7 @@ public class RepositoryInfo implements Serializable {
     
     private String directoryNameRelative;
     protected Boolean working;
-    protected String type;
+    protected String type;  // type of the repository, should be unique
     protected boolean remote;
     protected String[] datePatterns = new String[0];
     protected String parent;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -329,7 +329,7 @@ private void addScalaSupport(List<String> command) {
         command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*case object[[:space:]]+([a-zA-Z0-9_]+)/\\4/O,case objects/");
         command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*trait[[:space:]]+([a-zA-Z0-9_]+)/\\4/t,traits/");
         command.add("--regex-scala=/^[[:space:]]*type[[:space:]]+([a-zA-Z0-9_]+)/\\1/T,types/");
-        command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*def[[:space:]]+([a-zA-Z0-9_]+)/\\3/m,methods/");
+        command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy|private|protected)[[:space:]]*)*def[[:space:]]+([a-zA-Z0-9_]+)/\\3/m,methods/");
         command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*val[[:space:]]+([a-zA-Z0-9_]+)/\\3/l,constants/");
         command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*var[[:space:]]+([a-zA-Z0-9_]+)/\\3/v,variables/");
         command.add("--regex-scala=/^[[:space:]]*package[[:space:]]+([a-zA-Z0-9_.]+)/\\1/p,packages/");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2019, Chris Ross <cross@distal.com>.
  */
 
 package org.opengrok.indexer.history;
@@ -35,6 +36,7 @@
 import java.util.regex.Pattern;
 
 import org.opengrok.indexer.util.Executor;
+import static org.opengrok.indexer.history.PerforceRepository.protectPerforceFilename;
 
 /**
  * Parse source history for a Perforce Repository
@@ -87,7 +89,7 @@ public static History getRevisions(File file, String rev) throws IOException {
         cmd.add("p4");
         cmd.add("filelog");
         cmd.add("-lti");
-        cmd.add(file.getName() + PerforceRepository.getRevisionCmd(rev));
+        cmd.add(protectPerforceFilename(file.getName()) + PerforceRepository.getRevisionCmd(rev));
         Executor executor = new Executor(cmd, file.getCanonicalFile().getParentFile());
         executor.exec();
 

File: plugins/test/opengrok/auth/plugin/util/DummyHttpServletRequestUser.java
Patch:
@@ -172,7 +172,7 @@ public Enumeration<String> getHeaders(String string) {
 
     @Override
     public Enumeration<String> getHeaderNames() {
-        throw new UnsupportedOperationException("Not supported yet.");
+        return Collections.enumeration(headers.keySet());
     }
 
     @Override

File: plugins/test/opengrok/auth/plugin/configuration/ConfigurationTest.java
Patch:
@@ -63,6 +63,9 @@ public void exceptionThrown(Exception e) {
 
         Configuration configuration1 = new Configuration();
         configuration1.setInterval(500);
+        configuration1.setSearchTimeout(1000);
+        configuration1.setConnectTimeout(42);
+        configuration1.setCountLimit(10);
         configuration1.setServers(new ArrayList<>(Arrays.asList(new LdapServer("http://server.com"))));
         Hooks hooks = new Hooks();
         Hook hook = new Hook();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/framework/PluginClassLoader.java
Patch:
@@ -53,6 +53,7 @@ public class PluginClassLoader extends ClassLoader {
             "org.opengrok.indexer.configuration.RuntimeEnvironment",
             "org.opengrok.indexer.authorization.IAuthorizationPlugin",
             "org.opengrok.indexer.authorization.plugins.*",
+            "org.opengrok.indexer.authorization.LdapError",
             "org.opengrok.indexer.util.*",
             "org.opengrok.indexer.logger.*"
     };

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -33,7 +33,6 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.StringWriter;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -46,7 +45,6 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.stream.Collectors;
 import org.junit.After;
-import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SearchController.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.lucene.search.Query;
 import org.opengrok.indexer.search.Hit;
 import org.opengrok.indexer.search.SearchEngine;
+import org.opengrok.web.api.v1.filter.CorsEnable;
 import org.opengrok.web.api.v1.suggester.provider.service.SuggesterService;
 
 import javax.inject.Inject;
@@ -57,6 +58,7 @@ public class SearchController {
     private SuggesterService suggester;
 
     @GET
+    @CorsEnable
     @Produces(MediaType.APPLICATION_JSON)
     public SearchResult search(
             @Context final HttpServletRequest req,

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -35,6 +35,7 @@
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.search.QueryBuilder;
 import org.opengrok.indexer.web.Util;
+import org.opengrok.web.api.v1.filter.CorsEnable;
 import org.opengrok.web.api.v1.suggester.model.SuggesterData;
 import org.opengrok.web.api.v1.suggester.model.SuggesterQueryData;
 import org.opengrok.web.api.v1.suggester.parser.SuggesterQueryDataParser;
@@ -96,6 +97,7 @@ public final class SuggesterController {
      */
     @GET
     @Authorized
+    @CorsEnable
     @Produces(MediaType.APPLICATION_JSON)
     public Result getSuggestions(@Valid @BeanParam final SuggesterQueryData data) throws ParseException {
         Instant start = Instant.now();
@@ -160,6 +162,7 @@ private boolean satisfiesConfiguration(final SuggesterData data, final Suggester
      */
     @GET
     @Path("/config")
+    @CorsEnable
     @Produces(MediaType.APPLICATION_JSON)
     public SuggesterConfig getConfig() {
         return env.getSuggesterConfig();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -104,8 +104,8 @@ public String toHtml() {
         SCRIPTS.put("jquery-ui", new FileScript("js/jquery-ui-1.12.1-custom.min.js", 11));
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
-        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.6.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.30.js", 15));
+        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.7.min.js", 14));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.31.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
         SCRIPTS.put("jquery-caret", new FileScript("js/jquery.caret-1.5.2.min.js", 25));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/SearchHelper.java
Patch:
@@ -503,7 +503,7 @@ public List<Suggestion> getSuggestions() {
                 }
             } catch (IOException e) {
                 LOGGER.log(Level.WARNING, "Got exception while getting "
-                        + "spelling suggestions: ", e);
+                        + "spelling suggestions for project " + proj + ":", e);
             } finally {
                 if (ir != null && closeOnDestroy) {
                     try {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2019, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -104,6 +104,7 @@ public GitRepository() {
         };
 
         ignoredDirs.add(".git");
+        ignoredFiles.add(".git");
         ignoredFiles.add(".gitignore");
     }
 
@@ -515,7 +516,7 @@ public boolean fileHasHistory(File file) {
     boolean isRepositoryFor(File file, boolean interactive) {
         if (file.isDirectory()) {
             File f = new File(file, ".git");
-            return f.exists() && f.isDirectory();
+            return f.exists();
         }
         return false;
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -105,7 +105,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.6.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.29.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.30.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
         SCRIPTS.put("jquery-caret", new FileScript("js/jquery.caret-1.5.2.min.js", 25));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -1092,6 +1092,7 @@ public void run() {
 
         // Wait forever for the executors to finish.
         try {
+            LOGGER.info("Waiting for the executors to finish");
             latch.await(999, TimeUnit.DAYS);
         } catch (InterruptedException exp) {
             LOGGER.log(Level.WARNING, "Received interrupt while waiting" +

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/AnalyzerFactory.java
Patch:
@@ -18,7 +18,8 @@
  */
 
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -105,7 +105,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.6.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.28.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.29.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
         SCRIPTS.put("jquery-caret", new FileScript("js/jquery.caret-1.5.2.min.js", 25));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.javascript;
@@ -50,11 +50,11 @@ protected JavaScriptAnalyzer(AnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20180208_00
+     * @return 20190217_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20180208_00; // Edit comment above too!
+        return 20190217_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/executables/JarAnalyzerTest.java
Patch:
@@ -84,8 +84,8 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         IndexChangedListener progress = new DefaultIndexChangedListener();
         Indexer.getInstance().prepareIndexer(env, true, true,
-                new TreeSet<>(Collections.singletonList("/c")),
                 false, null, null);
+        env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
 
         Indexer.getInstance().doIndexerExecution(true, null, progress);
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -87,8 +87,9 @@ public static void setUpClass() throws Exception {
         // the tests are run.
         Indexer indexer = Indexer.getInstance();
         indexer.prepareIndexer(
-                env, true, true, new TreeSet<>(Arrays.asList(new String[]{"/c"})),
+                env, true, true,
                 false, null, null);
+        env.setDefaultProjectsFromNames(new TreeSet<>(Arrays.asList(new String[]{"/c"})));
         indexer.doIndexerExecution(true, null, null);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexVersionTest.java
Patch:
@@ -90,7 +90,7 @@ public void tearDown() throws IOException {
     private void testIndexVersion(boolean projectsEnabled, List<String> subFiles) throws Exception {
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(projectsEnabled);
-        Indexer.getInstance().prepareIndexer(env, true, true, null,
+        Indexer.getInstance().prepareIndexer(env, true, true,
                 false, null, null);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -138,7 +138,6 @@ private void testPerProjectHistory(boolean globalOn) throws IndexerException, IO
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                null, // no default project
                 false, // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null); // repositories - not needed when not refreshing history
@@ -201,7 +200,6 @@ public void testSymlinks() throws IndexerException, IOException {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                null, // no default project
                 false, // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null); // repositories - not needed when not refreshing history

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SearchEngineTest.java
Patch:
@@ -73,12 +73,12 @@ public static void setUpClass() throws Exception {
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
         env.setHistoryEnabled(false);
+
         Indexer.getInstance().prepareIndexer(env, true, true,
-                new TreeSet<>(Collections.singletonList("/c")),
                 false, null, null);
+        env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
-
         configFile = File.createTempFile("configuration", ".xml");
         env.writeConfiguration(configFile);
         RuntimeEnvironment.getInstance().readConfiguration(new File(configFile.getAbsolutePath()));

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest.java
Patch:
@@ -88,8 +88,8 @@ public static void setUpClass() throws Exception {
         env.setDataRoot(repository.getDataRoot());
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                new TreeSet<>(Collections.singletonList("/c")),
                 false, null, null);
+        env.setDefaultProjectsFromNames(new TreeSet<String>(Collections.singletonList("/c")));
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         configFile = File.createTempFile("configuration", ".xml");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -127,8 +127,8 @@ public static void setUpClass() throws Exception {
 
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                new TreeSet<>(Collections.singletonList("/c")),
                 false, null, null);
+        env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
 
         Project proj1 = env.getProjects().get(SYMLINK1);
         assertNotNull("symlink1 project", proj1);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/SearchHelperTest.java
Patch:
@@ -75,8 +75,8 @@ private void reindex() throws Exception {
         System.out.println("Generating index by using the class methods");
 
         Indexer.getInstance().prepareIndexer(env, true, true,
-            new TreeSet<>(Collections.singletonList("/c")),
             false, null, null);
+        env.setDefaultProjectsFromNames(new TreeSet<>(Collections.singletonList("/c")));
         Indexer.getInstance().doIndexerExecution(true, null, null);
     }
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -310,7 +310,6 @@ public void testDelete() throws Exception {
                 env,
                 false, // don't search for repositories
                 false, // don't scan and add projects
-                null, // no default project
                 false, // don't create dictionary
                 subFiles, // subFiles - needed when refreshing history partially
                 repos); // repositories - needed when refreshing history partially
@@ -548,7 +547,6 @@ public void testListFiles() throws IOException, IndexerException {
                 env,
                 false, // don't search for repositories
                 true, // add projects
-                null, // no default project
                 false, // don't create dictionary
                 new ArrayList<>(), // subFiles - needed when refreshing history partially
                 new ArrayList<>()); // repositories - needed when refreshing history partially

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/RepositoriesControllerTest.java
Patch:
@@ -107,7 +107,6 @@ public void testGetRepositoryType() throws Exception {
                 env,
                 true, // search for repositories
                 true, // scan and add projects
-                null, // no default project
                 false, // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null); // repositories - needed when refreshing history partially

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -77,10 +77,9 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(false);
         env.setSourceRoot(repository.getSourceRoot() + File.separator + "java");
-
         Indexer.getInstance().prepareIndexer(env, true, true,
-                Collections.singleton("__all__"),
                 false, null, null);
+        env.setDefaultProjectsFromNames(Collections.singleton("__all__"));
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         env.getSuggesterConfig().setRebuildCronConfig(null);

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -111,8 +111,8 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(true);
         Indexer.getInstance().prepareIndexer(env, true, true,
-                Collections.singleton("__all__"),
                 false, null, null);
+        env.setDefaultProjectsFromNames(Collections.singleton("__all__"));
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         env.getSuggesterConfig().setRebuildCronConfig(null);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/executables/JarAnalyzerTest.java
Patch:
@@ -85,7 +85,7 @@ public static void setUpClass() throws Exception {
         IndexChangedListener progress = new DefaultIndexChangedListener();
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
 
         Indexer.getInstance().doIndexerExecution(true, null, progress);
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexDatabaseTest.java
Patch:
@@ -88,7 +88,7 @@ public static void setUpClass() throws Exception {
         Indexer indexer = Indexer.getInstance();
         indexer.prepareIndexer(
                 env, true, true, new TreeSet<>(Arrays.asList(new String[]{"/c"})),
-                false, false, null, null, new ArrayList<String>(), false);
+                false, false, null, null, false);
         indexer.doIndexerExecution(true, null, null);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexVersionTest.java
Patch:
@@ -91,7 +91,7 @@ private void testIndexVersion(boolean projectsEnabled, List<String> subFiles) th
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(projectsEnabled);
         Indexer.getInstance().prepareIndexer(env, true, true, null,
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         IndexVersion.check(subFiles);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -143,7 +143,6 @@ private void testPerProjectHistory(boolean globalOn) throws IndexerException, IO
                 false, // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null, // repositories - not needed when not refreshing history
-                new ArrayList<>(), // don't zap cache
                 false); // don't list repos
         
         File repoRoot = new File(env.getSourceRootFile(), "git");
@@ -209,7 +208,6 @@ public void testSymlinks() throws IndexerException, IOException {
                 false, // don't create dictionary
                 null, // subFiles - not needed since we don't list files
                 null, // repositories - not needed when not refreshing history
-                new ArrayList<>(), // don't zap cache
                 false); // don't list repos
 
         // Check the respository paths.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SearchEngineTest.java
Patch:
@@ -75,7 +75,7 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         configFile = File.createTempFile("configuration", ".xml");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -128,7 +128,7 @@ public static void setUpClass() throws Exception {
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
 
         Project proj1 = env.getProjects().get(SYMLINK1);
         assertNotNull("symlink1 project", proj1);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/SearchHelperTest.java
Patch:
@@ -76,7 +76,7 @@ private void reindex() throws Exception {
 
         Indexer.getInstance().prepareIndexer(env, true, true,
             new TreeSet<>(Collections.singletonList("/c")),
-            false, false, null, null, new ArrayList<>(), false);
+            false, false, null, null, false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
     }
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -314,7 +314,6 @@ public void testDelete() throws Exception {
                 false, // don't create dictionary
                 subFiles, // subFiles - needed when refreshing history partially
                 repos, // repositories - needed when refreshing history partially
-                new ArrayList<>(), // don't zap cache
                 false); // don't list repos
         Indexer.getInstance().doIndexerExecution(true, null, null);
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/RepositoriesControllerTest.java
Patch:
@@ -96,7 +96,7 @@ public void testGetRepositoryTypeOfNonExistenRepository() throws Exception {
 
     @Test
     public void testGetRepositoryType() throws Exception {
-        // Create subrepository.
+        // Create sub-repository.
         File mercurialRoot = new File(repository.getSourceRoot() + File.separator + "mercurial");
         MercurialRepositoryTest.runHgCommand(mercurialRoot,
                 "clone", mercurialRoot.getAbsolutePath(),
@@ -112,7 +112,6 @@ public void testGetRepositoryType() throws Exception {
                 false, // don't create dictionary
                 null, // subFiles - needed when refreshing history partially
                 null, // repositories - needed when refreshing history partially
-                new ArrayList<>(), // don't zap cache
                 false); // don't list repos
 
         assertEquals(Paths.get("/mercurial").toString() + ":Mercurial",

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -80,7 +80,7 @@ public static void setUpClass() throws Exception {
 
         Indexer.getInstance().prepareIndexer(env, true, true,
                 Collections.singleton("__all__"),
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         env.getSuggesterConfig().setRebuildCronConfig(null);

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -112,7 +112,7 @@ public static void setUpClass() throws Exception {
         env.setProjectsEnabled(true);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 Collections.singleton("__all__"),
-                false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
         env.getSuggesterConfig().setRebuildCronConfig(null);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ada/AdaAnalyzer.java
Patch:
@@ -51,11 +51,11 @@ protected AdaAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CAnalyzer.java
Patch:
@@ -52,11 +52,11 @@ protected CAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/c/CxxAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected CxxAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzer.java
Patch:
@@ -41,11 +41,11 @@ protected ClojureAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -45,11 +45,11 @@ protected CSharpAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/eiffel/EiffelAnalyzer.java
Patch:
@@ -48,11 +48,11 @@ protected EiffelAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/erlang/ErlangAnalyzer.java
Patch:
@@ -46,11 +46,11 @@ protected ErlangAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/golang/GolangAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected GolangAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected HaskellAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/java/JavaAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected JavaAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected JavaScriptAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20180118_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20180118_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/json/JsonAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected JsonAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/kotlin/KotlinAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected KotlinAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lisp/LispAnalyzer.java
Patch:
@@ -45,11 +45,11 @@ protected LispAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/lua/LuaAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected LuaAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected PascalAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20180125_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20180125_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected PerlAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/php/PhpAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected PhpAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/powershell/PowershellAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected PowershellAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/python/PythonAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected PythonAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/ruby/RubyAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected RubyAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/rust/RustAnalyzer.java
Patch:
@@ -52,11 +52,11 @@ protected RustAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/scala/ScalaAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected ScalaAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sh/ShAnalyzer.java
Patch:
@@ -50,11 +50,11 @@ protected ShAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLAnalyzer.java
Patch:
@@ -38,11 +38,11 @@ public PLSQLAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/SQLAnalyzer.java
Patch:
@@ -38,11 +38,11 @@ public SQLAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/swift/SwiftAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected SwiftAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/tcl/TclAnalyzer.java
Patch:
@@ -45,11 +45,11 @@ protected TclAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/vb/VBAnalyzer.java
Patch:
@@ -49,11 +49,11 @@ protected VBAnalyzer(FileAnalyzerFactory factory) {
      * Gets a version number to be used to tag processed documents so that
      * re-analysis can be re-done later if a stored version number is different
      * from the current implementation.
-     * @return 20171218_00
+     * @return 20180208_00
      */
     @Override
     protected int getSpecializedVersionNo() {
-        return 20171218_00; // Edit comment above too!
+        return 20180208_00; // Edit comment above too!
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.web;
@@ -126,7 +126,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.6.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.27.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.28.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
         SCRIPTS.put("jquery-caret", new FileScript("js/jquery.caret-1.5.2.min.js", 25));

File: suggester/src/test/java/org/opengrok/suggest/SuggesterSearcherTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.suggest;
 
@@ -31,6 +31,7 @@
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.store.ByteBuffersDirectory;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.junit.AfterClass;
@@ -58,9 +59,8 @@ public class SuggesterSearcherTest {
     private static SuggesterSearcher searcher;
 
     @BeforeClass
-    @SuppressWarnings("deprecation") // for RAMDirectory
     public static void setUpClass() throws IOException {
-        dir = new org.apache.lucene.store.RAMDirectory();
+        dir = new ByteBuffersDirectory();
 
         try (IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig())) {
             Document doc1 = new Document();

File: suggester/src/test/java/org/opengrok/suggest/query/customized/CustomSloppyPhraseScorerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  */
 package org.opengrok.suggest.query.customized;
 
@@ -35,6 +35,7 @@
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TwoPhaseIterator;
 import org.apache.lucene.search.Weight;
+import org.apache.lucene.store.ByteBuffersDirectory;
 import org.apache.lucene.store.Directory;
 import org.junit.Test;
 import org.opengrok.suggest.query.PhraseScorer;
@@ -47,7 +48,6 @@
 import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
 import static org.junit.Assert.assertThat;
 
-@SuppressWarnings("deprecation") // for RAMDirectory
 public class CustomSloppyPhraseScorerTest {
 
     @SuppressWarnings("unchecked") // for contains()
@@ -57,7 +57,7 @@ public static void test(
             final String[] terms,
             final Integer[] expectedPositions
     ) throws IOException {
-        Directory dir = new org.apache.lucene.store.RAMDirectory();
+        Directory dir = new ByteBuffersDirectory();
 
         try (IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig())) {
             Document doc = new Document();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/Ctags.java
Patch:
@@ -392,7 +392,7 @@ public Definitions doCtags(String file) throws IOException,
      *
      * @param bufferTags tags file output
      * @return definitions parsed from buffer
-     * @throws java.lang.InterruptedException
+     * @throws java.lang.InterruptedException interrupted
      */
     public Definitions testCtagsParser(String bufferTags)
             throws InterruptedException {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXrefUtils.java
Patch:
@@ -183,7 +183,7 @@ public static String generateId(Scope scope) {
      * {@link Definitions#getTags(int)} indicates that a function or method
      * is defined to starting at the {@link JFlexStackingLexer#getLineNumber()}
      * of {@code lexer}.
-     * @param scopesEnabled
+     * @param scopesEnabled are scopes enabled ?
      * @param existingScope possibly a defined instance or null
      * @param lexer a defined, associated lexer
      * @param defs possibly a defined instance or null

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/perl/PerlLexHelper.java
Patch:
@@ -44,6 +44,7 @@ interface PerlLexer extends JFlexJointLexer {
      * Indicates that a premature end of quoting occurred. Everything up to the
      * causal character has been written, and anything following will be
      * indicated via {@link yypushback}.
+     * @throws IOException I/O exception
      */
     void abortQuote() throws IOException;
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -309,7 +309,7 @@ public boolean hasHistory(File file) {
 
     /**
      * Does the history cache contain entry for this directory ?
-     * @param file
+     * @param file file object
      * @return true if there is cache, false otherwise
      */
     public boolean hasCacheForFile(File file) {
@@ -878,6 +878,7 @@ public void removeRepositories(Collection<String> repos) {
      * Set list of known repositories which match the list of directories.
      * @param repos list of repositories
      * @param dirs list of directories that might correspond to the repositories
+     * @param interactive interactive mode flag
      */
     public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, List<String> dirs, boolean interactive) {
         if (repos != null && !repos.isEmpty() && dirs != null && !dirs.isEmpty()) {
@@ -910,6 +911,7 @@ public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, L
      *
      * @param repos collection of repositories to invalidate.
      * If null or empty, the internal map of repositories will be cleared.
+     * @param interactive interactive mode flag
      */
     public void invalidateRepositories(Collection<? extends RepositoryInfo> repos, boolean interactive) {
         if (repos == null || repos.isEmpty()) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java
Patch:
@@ -121,6 +121,7 @@ public boolean fileHasAnnotation(File file) {
      * Check if a given file is in the depot
      *
      * @param file The file to test
+     * @param interactive interactive mode flag
      * @return true if the given file is in the depot, false otherwise
      */
     public static boolean isInP4Depot(File file, boolean interactive) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/Repository.java
Patch:
@@ -385,6 +385,7 @@ final void createCache(HistoryCache cache, String sinceRevision)
      * Check if this it the right repository type for the given file.
      *
      * @param file File to check if this is a repository for.
+     * @param interactive is this run from interactive mode
      * @return true if this is the correct repository for this file/directory.
      */
     abstract boolean isRepositoryFor(File file, boolean interactive);
@@ -401,7 +402,7 @@ public final boolean isRepositoryFor(File file) {
     /**
      * Determine parent of this repository.
      * @return parent
-     * @throws java.io.IOException
+     * @throws java.io.IOException I/O exception
      */
     public final String determineParent() throws IOException {
         return determineParent(false);
@@ -415,7 +416,7 @@ public final String determineParent() throws IOException {
     /**
      * Determine branch of this repository.
      * @return branch
-     * @throws java.io.IOException
+     * @throws java.io.IOException I/O exception
      */
     public final String determineBranch() throws IOException {
         return determineBranch(false);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexAnalysisSettings.java
Patch:
@@ -81,7 +81,7 @@ public String getProjectName() {
      * Sets the project name to be used to distinguish different instances of
      * {@link IndexAnalysisSettings} that might be returned by a Lucene
      * {@code MultiReader} search across projects.
-     * @param value
+     * @param value project name
      */
     public void setProjectName(String value) {
         this.projectName = value;
@@ -105,6 +105,7 @@ public void setAnalyzerGuruVersion(Long value) {
 
     /**
      * Gets the version number for the specified file type name if it exists
+     * @param fileTypeName name of the file type
      * @return a defined value or {@code null} if unknown
      */
     public Long getAnalyzerVersion(String fileTypeName) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -607,6 +607,7 @@ public void run() {
 
     /**
      * Optimize the index database
+     * @throws IOException I/O exception
      */
     public void optimize() throws IOException {
         synchronized (lock) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -921,12 +921,13 @@ public void prepareIndexer(RuntimeEnvironment env,
      * @param defaultProjects default projects
      * @param listFiles list files and return
      * @param createDict if true, create dictionary
+     * @param createHistoryCache create history cache flag
      * @param subFiles list of directories
      * @param repositories list of repositories
      * @param zapCache list of projects to remove history cache for
      * @param listRepoPaths print repository paths to standard output
-     * @throws IndexerException
-     * @throws IOException
+     * @throws IndexerException indexer exception
+     * @throws IOException I/O exception
      */
     @SuppressWarnings("PMD.SimplifyStartsWith")
     public void prepareIndexer(RuntimeEnvironment env,

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -159,9 +159,9 @@ private static Reader getXrefReader(
      * @param sh search helper which has all required fields set
      * @param start index of the first hit to print
      * @param end index of the last hit to print
-     * @throws HistoryException
-     * @throws IOException
-     * @throws ClassNotFoundException
+     * @throws HistoryException history exception
+     * @throws IOException I/O exception
+     * @throws ClassNotFoundException class not found
      */
     public static void prettyPrint(Writer out, SearchHelper sh, int start,
             long end)

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Summarizer.java
Patch:
@@ -125,7 +125,7 @@ public List<Summary.Fragment> elements() {
      *
      * @param text input text
      * @return summary of hits
-     * @throws java.io.IOException
+     * @throws java.io.IOException I/O exception
      */
     public Summary getSummary(String text) throws IOException {
         if (text == null) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/ContextFormatter.java
Patch:
@@ -164,7 +164,7 @@ public Definitions getDefs() {
 
     /**
      * Sets the optional definitions.
-     * @param value
+     * @param value definitions
      */
     public void setDefs(Definitions value) {
         this.defs = value;
@@ -180,7 +180,7 @@ public Scopes getScopes() {
 
     /**
      * Sets the optional scopes to use.
-     * @param value
+     * @param value scopes
      */
     public void setScopes(Scopes value) {
         this.scopes = value;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/FormattedLines.java
Patch:
@@ -42,7 +42,7 @@ public class FormattedLines {
     private String footer;
     private boolean limited;
 
-    /**
+    /*
      * Gets a count of the number of lines in the instance.
      */
     public int getCount() {
@@ -60,14 +60,14 @@ public void setFooter(String value) {
         footer = value;
     }
 
-    /**
+    /*
      * Gets a value indicating if lines were limited.
      */
     public boolean isLimited() {
         return limited;
     }
 
-    /**
+    /*
      * Sets a value indicating if lines were limited.
      */
     public void setLimited(boolean value) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/HistoryContext.java
Patch:
@@ -106,7 +106,7 @@ public boolean getContext(
      * @param context   the servlet context path of the application (the path
      *  prefix for URLs)
      * @return {@code true} if at least one line has been written out.
-     * @throws HistoryException
+     * @throws HistoryException history exception
      */
     public boolean getContext(File src, String path, Writer out, String context)
         throws HistoryException
@@ -208,6 +208,7 @@ private boolean getHistoryContext(
      * @param nrev old revision
      * @param rev current revision
      * line? If {@code true}, replace newline with space.
+     * @throws IOException IO exception
      */
     protected static void writeMatch(Appendable out, String line,
                             int start, int end, boolean flatten, String path,

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/BoundedBlockingObjectPool.java
Patch:
@@ -101,9 +101,8 @@ protected void returnToPool(T t) {
         }
     }
 
-    /**
+    /*
      * Creates a new instance, and returns that instead to the pool.
-     * @param t 
      */
     @Override
     protected void handleInvalidReturn(T t) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/IOUtils.java
Patch:
@@ -286,6 +286,8 @@ public static int skipForBOM(byte[] sig) {
 
     /**
      * Get the contents of a file or empty string if the file cannot be read.
+     * @param file file object
+     * @return string with the file contents
      */
     public static String getFileContent(File file) {
         if (file == null || !file.canRead()) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/EftarFileReader.java
Patch:
@@ -180,7 +180,7 @@ public String getChildTag(FNode fn, String name) throws IOException {
      * Get description for path
      * @param path path relative to source root
      * @return path description string
-     * @throws IOException
+     * @throws IOException I/O
      */
     public String get(String path) throws IOException {
         StringTokenizer toks = new StringTokenizer(path, "/");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Statistics.java
Patch:
@@ -303,6 +303,7 @@ synchronized public void setMonthHistogram(long[] monthHistogram) {
      * Convert this {@code Statistics} object into JSON
      *
      * @return the JSON string
+     * @throws JsonProcessingException JSON processing exception
      */
     public String toJson() throws JsonProcessingException {
         return toJson(this);
@@ -313,6 +314,7 @@ public String toJson() throws JsonProcessingException {
      *
      * @param jsonString String with JSON
      * @return the {@code Statistics} object
+     * @throws IOException I/O exception
      */
     @SuppressWarnings("unchecked")
     public static Statistics fromJson(String jsonString) throws IOException {
@@ -328,6 +330,7 @@ public static Statistics fromJson(String jsonString) throws IOException {
      *
      * @param stats the statistics object
      * @return String with JSON
+     * @throws JsonProcessingException JSON processing exception
      */
     @SuppressWarnings("unchecked")
     public static String toJson(Statistics stats) throws JsonProcessingException {

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -272,6 +272,7 @@ public void addSearchCountsRaw(@Valid final List<TermIncrementData> termIncremen
      * @param field field for which to return the data
      * @param page which page of data to retrieve
      * @param pageSize number of results to return
+     * @param all return all pages
      * @return list of terms with their popularity
      */
     @GET

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Scripts.java
Patch:
@@ -126,7 +126,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.6.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.25.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.26.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
         SCRIPTS.put("jquery-caret", new FileScript("js/jquery.caret-1.5.2.min.js", 25));

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Writer;
+import java.util.Locale;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.zip.GZIPInputStream;
@@ -79,8 +80,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut)
 
         StreamSource gzSrc = wrap(src);
         String path = doc.get("path");
-        if (path != null
-                && (path.endsWith(".gz") || path.endsWith(".GZ") || path.endsWith(".Gz"))) {
+        if (path != null && path.toLowerCase(Locale.ROOT).endsWith(".gz")) {
             String newname = path.substring(0, path.length() - 3);
             //System.err.println("GZIPPED OF = " + newname);
             try (InputStream gzis = gzSrc.getStream()) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -59,6 +59,7 @@
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.ForbiddenSymlinkException;
 import org.opengrok.indexer.util.IOUtils;
+import org.opengrok.indexer.util.TandemPath;
 
 /*
  * Class representing file based storage of per source file history.
@@ -213,13 +214,12 @@ private static File getCachedFile(File file) throws HistoryException,
                 sb.append(File.separator);
                 sb.append(DIRECTORY_FILE_PREFIX);
             }
-            sb.append(".gz");
         } catch (IOException e) {
             throw new HistoryException("Failed to get path relative to " +
                     "source root for " + file, e);
         }
 
-        return new File(sb.toString());
+        return new File(TandemPath.join(sb.toString(), ".gz"));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.indexer.util.TandemPath;
 
 /**
  * Represents a tracker of pending file deletions and renamings that can later
@@ -319,7 +320,7 @@ private int completeLinkages() throws IOException {
     }
 
     private void doDelete(PendingFileDeletionExec del) throws IOException {
-        File f = new File(del.absolutePath + PENDING_EXTENSION);
+        File f = new File(TandemPath.join(del.absolutePath, PENDING_EXTENSION));
         File parent = f.getParentFile();
         del.absoluteParent = parent;
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/SearchEngine.java
Patch:
@@ -67,6 +67,7 @@
 import org.opengrok.indexer.search.Summary.Fragment;
 import org.opengrok.indexer.search.context.Context;
 import org.opengrok.indexer.search.context.HistoryContext;
+import org.opengrok.indexer.util.TandemPath;
 import org.opengrok.indexer.web.PageConfig;
 import org.opengrok.indexer.web.Prefix;
 import org.opengrok.indexer.web.ProjectHelper;
@@ -521,7 +522,8 @@ public void results(int start, int end, List<Hit> ret) {
                              * default charset.
                              */
                             try (Reader r = RuntimeEnvironment.getInstance().isCompressXref()
-                                    ? new HTMLStripCharFilter(new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(data + Prefix.XREF_P + filename + ".gz")))))
+                                    ? new HTMLStripCharFilter(new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(
+                                            TandemPath.join(data + Prefix.XREF_P + filename, ".gz"))))))
                                     : new HTMLStripCharFilter(new BufferedReader(new FileReader(data + Prefix.XREF_P + filename)))) {
                                 l = r.read(content);
                             }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.history;
 
@@ -31,6 +32,7 @@
 import org.opengrok.indexer.condition.RepositoryInstalled;
 import org.opengrok.indexer.condition.UnixPresent;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
+import org.opengrok.indexer.util.TandemPath;
 import org.opengrok.indexer.util.TestRepository;
 
 import java.io.File;
@@ -625,7 +627,7 @@ private void checkNoHistoryFetchRepo(String reponame, String filename,
         // FetchHistoryWhenNotInCache is set to false.
         File dataRoot = new File(repositories.getDataRoot(),
                 "historycache" + File.separatorChar + reponame);
-        File fileHistory = new File(dataRoot, filename + ".gz");
+        File fileHistory = new File(dataRoot, TandemPath.join(filename, ".gz"));
         assertEquals(historyFileExists, fileHistory.exists());
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -66,6 +66,7 @@
 import org.opengrok.indexer.history.RepositoryInfo;
 import org.opengrok.indexer.util.Executor;
 import org.opengrok.indexer.util.FileUtilities;
+import org.opengrok.indexer.util.TandemPath;
 import org.opengrok.indexer.util.TestRepository;
 
 /**
@@ -306,7 +307,8 @@ public void fileRemoved(String path) {
             // followed by {@code addFile()} that will create the file again.
             if (path.equals("/mercurial/bar.txt")) {
                 RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-                File f = new File(env.getDataRootPath(), "historycache" + path + ".gz");
+                File f = new File(env.getDataRootPath(),
+                        TandemPath.join("historycache" + path, ".gz"));
                 Assert.assertTrue("history cache file should be preserved", f.exists());
             }
             removedFiles.add(path);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/DummyHttpServletRequest.java
Patch:
@@ -383,7 +383,7 @@ public String[] getParameterValues(String string) {
     }
 
     @Override
-    public Map<String,String[]> getParameterMap() {
+    public Map<String, String[]> getParameterMap() {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: plugins/test/opengrok/auth/plugin/util/DummyHttpServletRequestLdap.java
Patch:
@@ -365,7 +365,7 @@ public String[] getParameterValues(String string) {
     }
 
     @Override
-    public Map<String,String[]> getParameterMap() {
+    public Map<String, String[]> getParameterMap() {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: plugins/test/opengrok/auth/plugin/util/DummyHttpServletRequestUser.java
Patch:
@@ -362,7 +362,7 @@ public String[] getParameterValues(String string) {
     }
 
     @Override
-    public Map<String,String[]> getParameterMap() {
+    public Map<String, String[]> getParameterMap() {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/TagEntry.java
Patch:
@@ -88,7 +88,7 @@ public Date getDate() {
     /**
      * Necessary Comparable method, used for sorting of TagEntries.
      *
-     * @param aThat Compare to.
+     * @param that Compare to.
      * @return 1 for greater, 0 for equal and -1 for smaller objects.
      */
     @Override

File: opengrok-web/src/main/java/org/opengrok/web/ResponseHeaderFilter.java
Patch:
@@ -31,8 +31,8 @@ public void doFilter(ServletRequest req, ServletResponse res,
         HttpServletResponse response = (HttpServletResponse) res;
 
         // set the provided HTTP response parameters
-        for (Enumeration e = fc.getInitParameterNames(); e.hasMoreElements();) {
-            String headerName = (String)e.nextElement();
+        for (Enumeration<String> e = fc.getInitParameterNames(); e.hasMoreElements();) {
+            String headerName = e.nextElement();
             if (!response.containsHeader(headerName)) {
                 response.addHeader(headerName, fc.getInitParameter(headerName));
             }

File: suggester/src/main/java/org/opengrok/suggest/popular/impl/chronicle/BytesRefSizedReader.java
Patch:
@@ -46,6 +46,7 @@ private BytesRefSizedReader() {
 
     @NotNull
     @Override
+    @SuppressWarnings("rawtypes")
     public BytesRef read(Bytes in, long size, @Nullable BytesRef using) {
         if (size < 0L || size > (long) Integer.MAX_VALUE) {
             throw new IORuntimeException("byte[] size should be non-negative int, " +

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/AnalyzerGuruTest.java
Patch:
@@ -220,6 +220,7 @@ public void rfe3401() {
      * Test that matching of full names works. Bug #859.
      */
     @Test
+    @SuppressWarnings("rawtypes")
     public void matchesFullName() {
         String s = File.separator;  // so test works on Unix and Windows
         String path = s+"path"+s+"to"+s+"Makefile";
@@ -240,6 +241,7 @@ public void matchesFullName() {
      *  language + "AnalyzerFactory"
      */
     @Test
+    @SuppressWarnings("rawtypes")
     public void getAnalyzerFactoryClass() {
         Class fc_forSh = AnalyzerGuru.getFactoryClass("Sh");
         Class fc_forShAnalyzer = AnalyzerGuru.getFactoryClass("ShAnalyzer");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/LuceneCompatibilityTest.java
Patch:
@@ -80,6 +80,7 @@ public static Test suite() {
      * Set up the test environment with repositories and a cache instance.
      */
     @Override
+    @SuppressWarnings("rawtypes")
     protected void setUp() throws Exception {
         guru = new AnalyzerGuru();
         Class<?> c = Class.forName(LUCENE_TEST_CLASS);
@@ -92,6 +93,7 @@ protected void setUp() throws Exception {
     protected void tearDown() throws Exception {
     }
 
+    @SuppressWarnings("rawtypes")
     public void testCompatibility() throws Exception, IOException, IllegalAccessException, IllegalArgumentException {
         for (Iterator it = guru.getAnalyzerFactories().iterator(); it.hasNext();) {
             FileAnalyzerFactory fa = (FileAnalyzerFactory) it.next();

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/BazaarHistoryParserTest.java
Patch:
@@ -202,7 +202,7 @@ public void parseLogDirectory() throws Exception {
         HistoryEntry e1 = result.getHistoryEntries().get(0);
         assertEquals(revId1, e1.getRevision());
         assertEquals(author1, e1.getAuthor());
-        assertEquals(new HashSet(Arrays.asList(files)), e1.getFiles());
+        assertEquals(new HashSet<>(Arrays.asList(files)), e1.getFiles());
     }
     
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationFramework.java
Patch:
@@ -449,6 +449,7 @@ public IAuthorizationPlugin handleLoadClass(String classname) {
      * @throws NoSuchMethodException when the class does not have no-argument constructor
      * @throws InvocationTargetException if the underlying constructor of the class throws an exception
      */
+    @SuppressWarnings("rawtypes")
     private IAuthorizationPlugin loadClass(String classname) throws ClassNotFoundException,
             SecurityException,
             InstantiationException,
@@ -476,6 +477,7 @@ private IAuthorizationPlugin loadClass(String classname) throws ClassNotFoundExc
      * @param c class
      * @return array of interfaces of the class c
      */
+    @SuppressWarnings("rawtypes")
     protected List<Class> getInterfaces(Class c) {
         List<Class> interfaces = new LinkedList<>();
         Class self = c;
@@ -593,7 +595,7 @@ private String getClassName(JarEntry f) {
      * @see IAuthorizationPlugin#unload()
      * @see Configuration#getPluginDirectory()
      */
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"rawtypes", "unchecked"})
     public void reload() {
         if (pluginDirectory == null || !pluginDirectory.isDirectory() || !pluginDirectory.canRead()) {
             LOGGER.log(Level.WARNING, "Plugin directory not found or not readable: {0}. "

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/ConfigurationHelp.java
Patch:
@@ -52,6 +52,7 @@ public class ConfigurationHelp {
      * @return a defined instance
      * @throws RuntimeException if an error occurs producing the sample
      */
+    @SuppressWarnings("rawtypes")
     public static String getSamples()
             throws RuntimeException {
 
@@ -103,6 +104,7 @@ public static String getSamples()
         return b.toString();
     }
 
+    @SuppressWarnings("rawtypes")
     private static List<Method> getSetters(Class klass) {
         List<Method> res = new ArrayList<>();
         Method[] methods = klass.getDeclaredMethods();
@@ -121,6 +123,7 @@ private static List<Method> getSetters(Class klass) {
         return res;
     }
 
+    @SuppressWarnings("rawtypes")
     private static Object getSampleValue(Method setter, Object defaultValue) {
 
         Class paramType = setter.getParameterTypes()[0];

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/ClassUtil.java
Patch:
@@ -58,6 +58,7 @@ private ClassUtil() {
      *
      * @param targetClass the class
      */
+    @SuppressWarnings("rawtypes")
     public static void remarkTransientFields(Class targetClass) {
         try {
             BeanInfo info;
@@ -77,7 +78,7 @@ public static void remarkTransientFields(Class targetClass) {
         }
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"rawtypes", "unchecked"})
     private static Object stringToObject(String fieldName, Class c, String value) throws IOException {
         Object v;
         String paramClass = c.getName();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -303,9 +303,9 @@ private History mergeOldAndNewHistory(File cacheFile, History histNew, Repositor
             if (!listOld.isEmpty()) {
                 RuntimeEnvironment env = RuntimeEnvironment.getInstance();
                 List<HistoryEntry> listNew = histNew.getHistoryEntries();
-                ListIterator li = listNew.listIterator(listNew.size());
+                ListIterator<HistoryEntry> li = listNew.listIterator(listNew.size());
                 while (li.hasPrevious()) {
-                    listOld.add(0, (HistoryEntry) li.previous());
+                    listOld.add(0, li.previous());
                 }
                 history = new History(listOld);
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/Executor.java
Patch:
@@ -381,7 +381,7 @@ public void processStream(InputStream input) throws IOException {
     
     public static void registerErrorHandler() {
         UncaughtExceptionHandler dueh =
-            Thread.currentThread().getDefaultUncaughtExceptionHandler();
+            Thread.getDefaultUncaughtExceptionHandler();
         if (dueh == null) {
             LOGGER.log(Level.FINE, "Installing default uncaught exception handler");
             Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitHistoryParser.java
Patch:
@@ -73,7 +73,7 @@ private enum ParseState {
      */
     @Override
     public void processStream(InputStream input) throws IOException {
-        try (BufferedReader in = new BufferedReader(repository.newLogReader(input))) {
+        try (BufferedReader in = new BufferedReader(GitRepository.newLogReader(input))) {
             process(in);
         }
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -318,7 +318,7 @@ public static void main(String argv[]) {
             // Get history first.
             getInstance().prepareIndexer(env, searchRepositories, addProjects,
                     defaultProjects,
-                    listFiles, createDict, subFiles, new ArrayList(repositories),
+                    listFiles, createDict, subFiles, new ArrayList<>(repositories),
                     zapCache, listRepos);
             if (listRepos || !zapCache.isEmpty()) {
                 return;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/ClassUtil.java
Patch:
@@ -77,6 +77,7 @@ public static void remarkTransientFields(Class targetClass) {
         }
     }
 
+    @SuppressWarnings("unchecked")
     private static Object stringToObject(String fieldName, Class c, String value) throws IOException {
         Object v;
         String paramClass = c.getName();

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/query/SuggesterQueryParser.java
Patch:
@@ -230,6 +230,7 @@ protected Query newFuzzyQuery(final Term term, final float minimumSimilarity, fi
                 replaceIdentifier(term.field(), term.text() + "~" + ((int) minimumSimilarity));
             }
 
+            @SuppressWarnings("deprecation")
             int numEdits = FuzzyQuery.floatToEdits(minimumSimilarity,
                     newTerm.text().codePointCount(0, newTerm.text().length()));
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitHistoryParser.java
Patch:
@@ -31,7 +31,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.file.InvalidPathException;
-import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.List;
@@ -80,7 +79,6 @@ public void processStream(InputStream input) throws IOException {
     }
     
     private void process(BufferedReader in) throws IOException {
-        DateFormat df = repository.getDateFormat();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         entries = new ArrayList<>();
         HistoryEntry entry = null;
@@ -103,7 +101,7 @@ private void process(BufferedReader in) throws IOException {
                     String dateString =
                             s.substring("AuthorDate:".length()).trim();
                     try {
-                        entry.setDate(df.parse(dateString));
+                        entry.setDate(repository.parse(dateString));
                     } catch (ParseException pe) {
                         //
                         // Overriding processStream() thus need to comply with the

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/GitRepository.java
Patch:
@@ -729,9 +729,8 @@ public String determineCurrentVersion(boolean interactive) throws IOException {
         }
 
         try {
-            Date date = getDateFormat().parse(output.substring(0, indexOf));
-            return String.format("%s %s",
-                    outputDateFormat.format(date), output.substring(indexOf + 1));
+            Date date = parse(output.substring(0, indexOf));
+            return String.format("%s %s", format(date), output.substring(indexOf + 1));
         } catch (ParseException ex) {
             throw new IOException(ex);
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorHistoryParser.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
-import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Date;
@@ -85,7 +84,6 @@ private History parseFile(File file, Repository repos)
     }
 
     protected History parseContents(BufferedReader contents) throws IOException {
-        DateFormat df = repository.getDateFormat();
         String line;
 
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
@@ -166,7 +164,7 @@ protected History parseContents(BufferedReader contents) throws IOException {
                             entry.setActive("Active".equals(state));
                             Date date = null;
                             try {
-                                date = df.parse(dateTime);
+                                date = repository.parse(dateTime);
                             } catch (ParseException pe) {
                                 //
                                 // Overriding processStream() thus need to comply with the

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSRepository.java
Patch:
@@ -185,7 +185,7 @@ boolean hasHistoryForDirectories() {
 
     @Override
     History getHistory(File file) throws HistoryException {
-        return new SCCSHistoryParser().parse(file, this);
+        return new SCCSHistoryParser(this).parse(file);
     }
 
     @Override

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SSCMHistoryParser.java
Patch:
@@ -28,7 +28,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.logging.Level;
@@ -74,7 +73,6 @@ public class SSCMHistoryParser implements Executor.StreamHandler {
      */
     @Override
     public void processStream(InputStream input) throws IOException {
-        DateFormat df = repository.getDateFormat();
         history = new History();
 
         BufferedReader in = new BufferedReader(new InputStreamReader(input));
@@ -124,7 +122,7 @@ public void processStream(InputStream input) throws IOException {
                 entry.setAuthor(author);
                 entry.setRevision(revision);
                 try {
-                    entry.setDate(df.parse(date));
+                    entry.setDate(repository.parse(date));
                 } catch (ParseException ex) {
                     LOGGER.log(Level.WARNING, "Failed to parse date: '" + date + "'", ex);
                 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SubversionRepository.java
Patch:
@@ -424,7 +424,7 @@ public String determineCurrentVersion(boolean interactive) throws IOException {
                 List<HistoryEntry> hlist = hist.getHistoryEntries();
                 if (hlist != null && hlist.size() > 0) {
                     HistoryEntry he = hlist.get(0);
-                    curVersion = outputDateFormat.format(he.getDate()) + " " +
+                    curVersion = format(he.getDate()) + " " +
                             he.getRevision() + " " + he.getAuthor() + " " +
                             he.getMessage();
                 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/GitRepositoryTest.java
Patch:
@@ -157,11 +157,11 @@ public void testDateFormats() {
             {"2017-07-25T13:17:44+02:00", null},
         };
 
-        DateFormat format = new GitRepository().getDateFormat();
+        final GitRepository repository = new GitRepository();
 
         for (String[] test : tests) {
             try {
-                format.parse(test[0]);
+                repository.parse(test[0]);
                 if (test[1] != null) {
                     Assert.fail("Shouldn't be able to parse the date: " + test[0]);
                 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/SubversionRepositoryTest.java
Patch:
@@ -51,11 +51,11 @@ public void testDateFormats() {
             {"2016-01-01T10:00:00Z", null}
         };
 
-        DateFormat format = new SubversionRepository().getDateFormat();
+        final SubversionRepository repository = new SubversionRepository();
 
         for (String[] test : tests) {
             try {
-                format.parse(test[0]);
+                repository.parse(test[0]);
                 if (test[1] != null) {
                     Assert.fail("Shouldn't be able to parse the date: " + test[0]);
                 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -307,8 +307,8 @@ public static void main(String argv[]) {
                 try {
                     IndexerUtil.enableProjects(webappURI);
                 } catch (Exception e) {
-                    LOGGER.log(Level.SEVERE, "Mis-configuration of webapp webappURI", e);
-                    System.err.println("Couldn't notify the webapp: " + e.getLocalizedMessage());
+                    LOGGER.log(Level.SEVERE, String.format("Couldn't notify the webapp on %s.", webappURI), e);
+                    System.err.println(String.format("Couldn't notify the webapp on %s: %s.", webappURI, e.getLocalizedMessage()));
                 }
             }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/EftarFileReader.java
Patch:
@@ -22,6 +22,7 @@
  */
 package org.opengrok.indexer.web;
 
+import java.io.Closeable;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -41,7 +42,7 @@
  *
  * @author Chandan
  */
-public class EftarFileReader {
+public class EftarFileReader implements Closeable {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(EftarFileReader.class);
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -940,7 +940,7 @@ public void prepareIndexer(RuntimeEnvironment env,
             // Add a project for each top-level directory in source root.
             for (File file : files) {
                 String name = file.getName();
-                String path = File.separator + name;
+                String path = '/' + name;
                 if (oldProjects.containsKey(name)) {
                     // This is an existing object. Reuse the old project,
                     // possibly with customizations, instead of creating a

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthorizationPluginClassLoader.java
Patch:
@@ -88,7 +88,8 @@ public boolean accept(File dir, String name) {
 
         for (File f : jars) {
             try (JarFile jar = new JarFile(f)) {
-                String filename = classname.replace('.', File.separatorChar) + ".class";
+                // jar files always use / separator
+                String filename = classname.replace('.', '/') + ".class";
                 JarEntry entry = (JarEntry) jar.getEntry(filename);
                 if (entry != null && entry.getName().endsWith(".class")) {
                     try (InputStream is = jar.getInputStream(entry)) {
@@ -105,7 +106,7 @@ public boolean accept(File dir, String name) {
             } catch (IOException ex) {
                 LOGGER.log(Level.SEVERE, "Loading class threw an exception:", ex);
             } catch (Throwable ex) {
-                LOGGER.log(Level.SEVERE, "Loading class threw an unknown exception:", ex);
+                LOGGER.log(Level.SEVERE, "Loading class threw an unknown exception", ex);
             }
         }
         throw new ClassNotFoundException("Class \"" + classname + "\" could not be found");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/PathUtilsTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.UnixPresent;
+import org.opengrok.indexer.web.Util;
 
 /**
  * Represents a container for tests of {@link PathUtils}.
@@ -78,7 +79,7 @@ public void shouldHandleSameInputs() throws IOException {
 
     @Test
     public void shouldHandleEffectivelySameInputs() throws IOException {
-        final String USR_BIN = Paths.get("/usr/bin").toString();
+        String USR_BIN = Paths.get(Paths.get("/usr/bin").toUri()).toString();
         String rel = PathUtils.getRelativeToCanonical(USR_BIN + File.separator, USR_BIN);
         Assert.assertEquals(USR_BIN + " rel to ~itself", "", rel);
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/PathUtilsTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.opengrok.indexer.condition.ConditionalRun;
 import org.opengrok.indexer.condition.ConditionalRunRule;
 import org.opengrok.indexer.condition.UnixPresent;
+import org.opengrok.indexer.web.Util;
 
 /**
  * Represents a container for tests of {@link PathUtils}.
@@ -78,7 +79,7 @@ public void shouldHandleSameInputs() throws IOException {
 
     @Test
     public void shouldHandleEffectivelySameInputs() throws IOException {
-        final String USR_BIN = Paths.get("/usr/bin").toString();
+        String USR_BIN = Paths.get(Paths.get("/usr/bin").toUri()).toString();
         String rel = PathUtils.getRelativeToCanonical(USR_BIN + File.separator, USR_BIN);
         Assert.assertEquals(USR_BIN + " rel to ~itself", "", rel);
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -628,6 +628,8 @@ private void checkNoHistoryFetchRepo(String reponame, String filename,
     /*
      * Functional test for the FetchHistoryWhenNotInCache configuration option.
      */
+    @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
+    @ConditionalRun(RepositoryInstalled.SCCSInstalled.class)
     @Test
     public void testNoHistoryFetch() throws Exception {
         // Do not create history cache for files which do not have it cached.

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -73,7 +73,7 @@
 
 @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
 @ConditionalRun(RepositoryInstalled.GitInstalled.class)
-@ConditionalRun(RepositoryInstalled.SubvsersionInstalled.class)
+@ConditionalRun(RepositoryInstalled.SubversionInstalled.class)
 public class ProjectsControllerTest extends JerseyTest {
 
     private RuntimeEnvironment env = RuntimeEnvironment.getInstance();

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/FileHistoryCacheTest.java
Patch:
@@ -628,6 +628,8 @@ private void checkNoHistoryFetchRepo(String reponame, String filename,
     /*
      * Functional test for the FetchHistoryWhenNotInCache configuration option.
      */
+    @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
+    @ConditionalRun(RepositoryInstalled.SCCSInstalled.class)
     @Test
     public void testNoHistoryFetch() throws Exception {
         // Do not create history cache for files which do not have it cached.

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -73,7 +73,7 @@
 
 @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
 @ConditionalRun(RepositoryInstalled.GitInstalled.class)
-@ConditionalRun(RepositoryInstalled.SubvsersionInstalled.class)
+@ConditionalRun(RepositoryInstalled.SubversionInstalled.class)
 public class ProjectsControllerTest extends JerseyTest {
 
     private RuntimeEnvironment env = RuntimeEnvironment.getInstance();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+import java.util.Locale;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -230,14 +231,14 @@ protected FileAnalyzer(FileAnalyzerFactory factory,
      * @return Normalized name of the analyzer.
      */
     public String getFileTypeName() {
-        String name = this.getClass().getSimpleName().toLowerCase();
+        String name = this.getClass().getSimpleName().toLowerCase(Locale.ROOT);
         String suffix = "analyzer";
 
         if (name.endsWith(suffix)) {
             return name.substring(0, name.length() - suffix.length());
         }
 
-        return name.toLowerCase();
+        return name;
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexSymbolMatcher.java
Patch:
@@ -23,6 +23,7 @@
 
 package org.opengrok.indexer.analysis;
 
+import java.util.Locale;
 import java.util.Set;
 import java.util.regex.Pattern;
 import org.opengrok.indexer.util.StringUtils;
@@ -449,7 +450,7 @@ protected boolean onFilteredSymbolMatched(String str, int start,
         Set<String> keywords, boolean caseSensitive) {
 
         if (keywords != null) {
-            String check = caseSensitive ? str : str.toLowerCase();
+            String check = caseSensitive ? str : str.toLowerCase(Locale.ROOT);
             if (keywords.contains(check)) {
                 onKeywordMatched(str, start);
                 return false;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXrefUtils.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis;
@@ -30,6 +30,7 @@
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.SortedSet;
@@ -252,7 +253,7 @@ public static boolean writeSymbol(Writer out, Definitions defs,
         String[] strs = new String[1];
         strs[0] = "";
 
-        String check = caseSensitive ? symbol : symbol.toLowerCase();
+        String check = caseSensitive ? symbol : symbol.toLowerCase(Locale.ROOT);
         if (isKeyword || (keywords != null && keywords.contains( check ))) {
             // This is a keyword, so we don't create a link.
             out.append("<b>");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/Consts.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -58,7 +59,7 @@ private static void populateKeywordSet(Set<String> set, String file)
             Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
-                lline = line.toLowerCase(Locale.US);
+                lline = line.toLowerCase(Locale.ROOT);
                 if (line.charAt(0) != '#') {
                     set.add(line);
                     set.add(lline);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLConsts.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -59,7 +60,7 @@ private static void populateKeywordSet(Set<String> set, String file)
             Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
-                lline = line.toLowerCase(Locale.US);
+                lline = line.toLowerCase(Locale.ROOT);
                 if (line.charAt(0) != '#') {
                     set.add(line);
                     set.add(lline);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java
Patch:
@@ -19,10 +19,12 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;
 
 import java.util.Arrays;
+import java.util.Locale;
 import java.util.stream.Collectors;
 
 /**
@@ -87,7 +89,7 @@ public boolean isSufficient() {
      */
     public static AuthControlFlag get(String flag) throws IllegalArgumentException {
         try {
-            return AuthControlFlag.valueOf(flag.toUpperCase());
+            return AuthControlFlag.valueOf(flag.toUpperCase(Locale.ROOT));
         } catch (IllegalArgumentException ex) {
             // flag does not exist -> add some more info about which flags do exist
             throw new IllegalArgumentException(

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -40,6 +40,7 @@
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
+import java.nio.file.NoSuchFileException;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -789,6 +790,8 @@ public void clear(Repository repository) {
             // Remove all files which constitute the history cache.
             try {
                 IOUtils.removeRecursive(Paths.get(histDir));
+            } catch (NoSuchFileException ex) {
+                LOGGER.log(Level.WARNING, String.format("directory %s does not exist", histDir));
             } catch (IOException ex) {
                 LOGGER.log(Level.SEVERE, "tried removeRecursive()", ex);
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -562,6 +562,7 @@ private void createCache(Repository repository, String sinceRevision) {
             LOGGER.log(Level.INFO,
                     "Skipping history cache creation of {0} repository in {1} and its subdirectories",
                     new Object[]{type, path});
+            return;
         }
         
         if (repository.isWorking()) {
@@ -976,7 +977,7 @@ public void run() {
         repositories.clear();
         newrepos.forEach((_key, repo) -> { putRepository(repo); });
 
-        elapsed.report(LOGGER, "done invalidating repositories");
+        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSRepository.java
Patch:
@@ -153,7 +153,7 @@ public boolean fileHasHistory(File file) {
     @Override
     boolean isRepositoryFor(File file, boolean interactive) {
         if (file.isDirectory()) {
-            File f = new File(file, CODEMGR_WSDATA.toLowerCase());
+            File f = new File(file, CODEMGR_WSDATA.toLowerCase()); // OK no ROOT
             if (f.isDirectory()) {
                 return true;
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/CustomQueryParser.java
Patch:
@@ -19,9 +19,11 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
 
+import java.util.Locale;
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.queryparser.classic.QueryParser;
 import org.apache.lucene.search.Query;
@@ -89,7 +91,7 @@ protected static boolean isCaseSensitive(String field) {
     // a fixed locale, but since they don't, we ignore that PMD warning here.
     @SuppressWarnings("PMD.UseLocaleWithCaseConversions")
     private static String getCanonicalTerm(String field, String term) {
-        return isCaseSensitive(field) ? term : term.toLowerCase();
+        return isCaseSensitive(field) ? term : term.toLowerCase(Locale.ROOT);
     }
 
     // Override the get***Query() methods to lower case the search terms if

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -186,7 +186,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
             out.write("/</a>");
             if (sh.desc != null) {
                 out.write(" - <i>");
-                out.write(htmlize(sh.desc.get(parent)));
+                out.write(sh.desc.get(parent));
                 out.write("</i>");
             }
             JSONArray messages;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineMatcher.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.search.context;
@@ -84,7 +85,7 @@ String normalizeString(String s) {
         if (s == null) {
             return null;
         } else if (caseInsensitive) {
-            return s.toLowerCase(Locale.getDefault());
+            return s.toLowerCase(Locale.ROOT);
         } else {
             return s;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/OGKUnifiedHighlighter.java
Patch:
@@ -297,6 +297,7 @@ private String getRepoFileContent(String repoRelPath, String storedU)
             return null;
         }
 
+        repoRelPath = Util.fixPathIfWindows(repoRelPath);
         // Verify that timestamp (U) is unchanged by comparing UID.
         String uid = Util.path2uid(repoRelPath,
             DateTools.timeToString(repoAbsFile.lastModified(),

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/ProjectHelperExtendedTest.java
Patch:
@@ -64,7 +64,6 @@ public static void setUpClass() {
         env.setProjects(projects);
         env.setGroups(new TreeSet<>(grps));
         env.setRepositories(rps);
-        env.register();
     }
 
     private void setupPageConfigRequest(final String cookie) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/ProjectHelperTest.java
Patch:
@@ -105,7 +105,6 @@ public void testSynchronization() {
         env.getProjects().put("foo", p);
         env.getProjects().put("bar", repo);
         env.getGroups().add(g);
-        env.register();
 
         Assert.assertEquals(42, env.getProjects().size());
         Assert.assertEquals(21, env.getRepositories().size());
@@ -125,7 +124,6 @@ public void testSynchronization() {
         env.setProjects(oldProjects);
         env.setRepositories(oldRepositories);
         env.setGroups(oldGroups);
-        env.register();
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/ProjectHelperTestBase.java
Patch:
@@ -237,7 +237,6 @@ public static void setUpClass() {
         env.setProjects(prjs);
         env.setGroups(new TreeSet<>(grps));
         env.setRepositories(rps);
-        env.register();
     }
 
     @AfterClass
@@ -246,7 +245,6 @@ public static void tearDownClass() {
         env.setProjects(projects);
         env.setGroups(groups);
         env.setRepositories(repositories);
-        env.register();
     }
 
     protected void invokeAddPlugin(IAuthorizationPlugin plugin) {

File: opengrok-web/src/main/java/org/opengrok/web/DirectoryListing.java
Patch:
@@ -211,9 +211,9 @@ public List<String> extraListTo(String contextPath, File dir, Writer out,
                     continue;
                 }
                 String filename = child.getName();
-                if (filename.startsWith("README") || filename.endsWith("README")
-                    || filename.startsWith("readme"))
-                {
+                String filenameLower = filename.toLowerCase(Locale.ROOT);
+                if (filenameLower.startsWith("readme") ||
+                        filenameLower.endsWith("readme")) {
                     readMes.add(filename);
                 }
                 boolean isDir = child.isDirectory();

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/StatsController.java
Patch:
@@ -35,6 +35,8 @@
 import javax.ws.rs.core.MediaType;
 import java.io.IOException;
 
+import static org.opengrok.indexer.util.StatisticsUtils.loadStatistics;
+
 @Path("/stats")
 public class StatsController {
 
@@ -54,7 +56,7 @@ public void clean() {
     @PUT
     @Path("reload")
     public void reload() throws IOException, ParseException {
-        env.loadStatistics();
+        loadStatistics();
     }
 
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -104,7 +104,7 @@ public Result getSuggestions(@Valid @BeanParam final SuggesterQueryData data) th
             throw new ParseException("Could not determine suggester query");
         }
 
-        SuggesterConfig config = env.getConfiguration().getSuggesterConfig();
+        SuggesterConfig config = env.getSuggesterConfig();
 
         modifyDataBasedOnConfiguration(suggesterData, config);
 
@@ -161,7 +161,7 @@ private boolean satisfiesConfiguration(final SuggesterData data, final Suggester
     @Path("/config")
     @Produces(MediaType.APPLICATION_JSON)
     public SuggesterConfig getConfig() {
-        return env.getConfiguration().getSuggesterConfig();
+        return env.getSuggesterConfig();
     }
 
     /**

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SystemController.java
Patch:
@@ -54,14 +54,14 @@ public void refresh(final String project) {
     @PUT
     @Path("/includes/reload")
     public void reloadIncludes() {
-        env.reloadIncludeFiles(env.getConfiguration());
+        env.getIncludeFiles().reloadIncludeFiles();
     }
 
     @POST
     @Path("/pathdesc")
     @Consumes(MediaType.TEXT_PLAIN)
     public void loadPathDescriptions(final String input) throws IOException {
         EftarFile ef = new EftarFile();
-        ef.create(input, env.getConfiguration().getDtagsEftarPath().toString());
+        ef.create(input, env.getDtagsEftarPath().toString());
     }
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/filter/SuggestionsEnabledFilter.java
Patch:
@@ -40,9 +40,8 @@ public class SuggestionsEnabledFilter implements ContainerRequestFilter {
 
     @Override
     public void filter(final ContainerRequestContext context) {
-        if (!env.getConfiguration().getSuggesterConfig().isEnabled()) {
+        if (!env.getSuggesterConfig().isEnabled()) {
             context.abortWith(Response.status(Response.Status.NOT_FOUND).build());
         }
     }
-
 }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/StatsControllerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testGet() throws ParseException {
 
     @Test
     public void testInvalidReload() {
-        env.getConfiguration().setStatisticsFilePath("/file/that/doesnot/exists");
+        env.setStatisticsFilePath("/file/that/doesnot/exists");
 
         Response response = target("stats")
                 .path("reload")
@@ -109,5 +109,4 @@ public void testInvalidReload() {
 
         assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());
     }
-
 }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -83,7 +83,7 @@ public static void setUpClass() throws Exception {
                 false, false, null, null, new ArrayList<>(), false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
-        env.getConfiguration().getSuggesterConfig().setRebuildCronConfig(null);
+        env.getSuggesterConfig().setRebuildCronConfig(null);
     }
 
     @AfterClass
@@ -95,7 +95,7 @@ public static void tearDownClass() {
     public void before() {
         await().atMost(15, TimeUnit.SECONDS).until(() -> getSuggesterProjectDataSize() == 1);
 
-        env.getConfiguration().setSuggesterConfig(new SuggesterConfig());
+        env.setSuggesterConfig(new SuggesterConfig());
     }
 
     private static int getSuggesterProjectDataSize() throws Exception {

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SystemControllerTest.java
Patch:
@@ -56,7 +56,7 @@ public void testIncludeReload() throws IOException {
         }
 
         // Sanity check that getFooterIncludeFileContent() works since the test depends on it.
-        String before = env.getConfiguration().getFooterIncludeFileContent(false);
+        String before = env.getIncludeFiles().getFooterIncludeFileContent(false);
         assertEquals(content, before.trim());
 
         // Modify the contents of the file.
@@ -72,7 +72,7 @@ public void testIncludeReload() throws IOException {
         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), r.getStatus());
 
         // Check that the content was reloaded.
-        String after = env.getConfiguration().getFooterIncludeFileContent(false);
+        String after = env.getIncludeFiles().getFooterIncludeFileContent(false);
         assertNotEquals(before, after);
         assertEquals(content, after.trim());
 
@@ -109,7 +109,7 @@ public void testDtagsEftarReload() throws IOException {
         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), r.getStatus());
 
         // Check
-        Path eftarPath = env.getConfiguration().getDtagsEftarPath();
+        Path eftarPath = env.getDtagsEftarPath();
         assertTrue(eftarPath.toFile().exists());
         EftarFileReader er = new EftarFileReader(eftarPath.toString());
         for (int i = 0; i < descriptions.length; i++) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/FileAnalyzer.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+import java.util.Locale;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -230,14 +231,14 @@ protected FileAnalyzer(FileAnalyzerFactory factory,
      * @return Normalized name of the analyzer.
      */
     public String getFileTypeName() {
-        String name = this.getClass().getSimpleName().toLowerCase();
+        String name = this.getClass().getSimpleName().toLowerCase(Locale.ROOT);
         String suffix = "analyzer";
 
         if (name.endsWith(suffix)) {
             return name.substring(0, name.length() - suffix.length());
         }
 
-        return name.toLowerCase();
+        return name;
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexSymbolMatcher.java
Patch:
@@ -23,6 +23,7 @@
 
 package org.opengrok.indexer.analysis;
 
+import java.util.Locale;
 import java.util.Set;
 import java.util.regex.Pattern;
 import org.opengrok.indexer.util.StringUtils;
@@ -449,7 +450,7 @@ protected boolean onFilteredSymbolMatched(String str, int start,
         Set<String> keywords, boolean caseSensitive) {
 
         if (keywords != null) {
-            String check = caseSensitive ? str : str.toLowerCase();
+            String check = caseSensitive ? str : str.toLowerCase(Locale.ROOT);
             if (keywords.contains(check)) {
                 onKeywordMatched(str, start);
                 return false;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/JFlexXrefUtils.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.analysis;
@@ -30,6 +30,7 @@
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.SortedSet;
@@ -252,7 +253,7 @@ public static boolean writeSymbol(Writer out, Definitions defs,
         String[] strs = new String[1];
         strs[0] = "";
 
-        String check = caseSensitive ? symbol : symbol.toLowerCase();
+        String check = caseSensitive ? symbol : symbol.toLowerCase(Locale.ROOT);
         if (isKeyword || (keywords != null && keywords.contains( check ))) {
             // This is a keyword, so we don't create a link.
             out.append("<b>");

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/Consts.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -58,7 +59,7 @@ private static void populateKeywordSet(Set<String> set, String file)
             Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
-                lline = line.toLowerCase(Locale.US);
+                lline = line.toLowerCase(Locale.ROOT);
                 if (line.charAt(0) != '#') {
                     set.add(line);
                     set.add(lline);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/sql/PLSQLConsts.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.analysis.sql;
 
@@ -59,7 +60,7 @@ private static void populateKeywordSet(Set<String> set, String file)
             Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
-                lline = line.toLowerCase(Locale.US);
+                lline = line.toLowerCase(Locale.ROOT);
                 if (line.charAt(0) != '#') {
                     set.add(line);
                     set.add(lline);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/authorization/AuthControlFlag.java
Patch:
@@ -19,10 +19,12 @@
 
 /*
  * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.authorization;
 
 import java.util.Arrays;
+import java.util.Locale;
 import java.util.stream.Collectors;
 
 /**
@@ -87,7 +89,7 @@ public boolean isSufficient() {
      */
     public static AuthControlFlag get(String flag) throws IllegalArgumentException {
         try {
-            return AuthControlFlag.valueOf(flag.toUpperCase());
+            return AuthControlFlag.valueOf(flag.toUpperCase(Locale.ROOT));
         } catch (IllegalArgumentException ex) {
             // flag does not exist -> add some more info about which flags do exist
             throw new IllegalArgumentException(

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/SCCSRepository.java
Patch:
@@ -153,7 +153,7 @@ public boolean fileHasHistory(File file) {
     @Override
     boolean isRepositoryFor(File file, boolean interactive) {
         if (file.isDirectory()) {
-            File f = new File(file, CODEMGR_WSDATA.toLowerCase());
+            File f = new File(file, CODEMGR_WSDATA.toLowerCase()); // OK no ROOT
             if (f.isDirectory()) {
                 return true;
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -843,7 +843,7 @@ private static void configureFileAnalyzer(String fileSpec, String analyzer) {
         } else {
             fileSpec = fileSpec.substring(1);
         }
-        fileSpec = fileSpec.toUpperCase();
+        fileSpec = fileSpec.toUpperCase(Locale.ROOT);
 
         // Disable analyzer?
         if (analyzer.equals("-")) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/CustomQueryParser.java
Patch:
@@ -19,9 +19,11 @@
 
 /*
  * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opengrok.indexer.search;
 
+import java.util.Locale;
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.queryparser.classic.QueryParser;
 import org.apache.lucene.search.Query;
@@ -89,7 +91,7 @@ protected static boolean isCaseSensitive(String field) {
     // a fixed locale, but since they don't, we ignore that PMD warning here.
     @SuppressWarnings("PMD.UseLocaleWithCaseConversions")
     private static String getCanonicalTerm(String field, String term) {
-        return isCaseSensitive(field) ? term : term.toLowerCase();
+        return isCaseSensitive(field) ? term : term.toLowerCase(Locale.ROOT);
     }
 
     // Override the get***Query() methods to lower case the search terms if

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/LineMatcher.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.search.context;
@@ -84,7 +85,7 @@ String normalizeString(String s) {
         if (s == null) {
             return null;
         } else if (caseInsensitive) {
-            return s.toLowerCase(Locale.getDefault());
+            return s.toLowerCase(Locale.ROOT);
         } else {
             return s;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.indexer.web;
@@ -1018,8 +1018,7 @@ public static String URIEncodePath(String path) {
                     // Add leading zero if required.
                     sb.append('0');
                 }
-                sb.append(
-                        Integer.toHexString(u).toUpperCase(Locale.ENGLISH));
+                sb.append(Integer.toHexString(u).toUpperCase(Locale.ROOT));
             }
         }
         return sb.toString();

File: opengrok-web/src/main/java/org/opengrok/web/DirectoryListing.java
Patch:
@@ -211,9 +211,9 @@ public List<String> extraListTo(String contextPath, File dir, Writer out,
                     continue;
                 }
                 String filename = child.getName();
-                if (filename.startsWith("README") || filename.endsWith("README")
-                    || filename.startsWith("readme"))
-                {
+                String filenameLower = filename.toLowerCase(Locale.ROOT);
+                if (filenameLower.startsWith("readme") ||
+                        filenameLower.endsWith("readme")) {
                     readMes.add(filename);
                 }
                 boolean isDir = child.isDirectory();

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java
Patch:
@@ -977,7 +977,7 @@ public void run() {
         repositories.clear();
         newrepos.forEach((_key, repo) -> { putRepository(repo); });
 
-        elapsed.report(LOGGER, "done invalidating repositories");
+        elapsed.report(LOGGER, String.format("done invalidating %d repositories", newrepos.size()));
     }
 
     /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -186,7 +186,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
             out.write("/</a>");
             if (sh.desc != null) {
                 out.write(" - <i>");
-                out.write(htmlize(sh.desc.get(parent)));
+                out.write(sh.desc.get(parent));
                 out.write("</i>");
             }
             JSONArray messages;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -186,7 +186,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
             out.write("/</a>");
             if (sh.desc != null) {
                 out.write(" - <i>");
-                out.write(htmlize(sh.desc.get(parent)));
+                out.write(sh.desc.get(parent));
                 out.write("</i>");
             }
             JSONArray messages;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Project.java
Patch:
@@ -34,6 +34,7 @@
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.ClassUtil;
 import org.opengrok.indexer.util.ForbiddenSymlinkException;
+import org.opengrok.indexer.web.Util;
 
 /**
  * Placeholder for the information that builds up a project
@@ -112,7 +113,7 @@ public Project(String name) {
      */
     public Project(String name, String path) {
         this.name = name;
-        this.path = path;
+        this.path = Util.fixPathIfWindows(path);
         completeWithDefaults();
     }
 
@@ -332,7 +333,7 @@ public static Project getProject(String path) {
         // Try to match each project path as prefix of the given path.
         final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.hasProjects()) {
-            final String lpath = path.replace(File.separatorChar, '/');
+            final String lpath = Util.fixPathIfWindows(path);
             for (Project p : env.getProjectList()) {
                 String projectPath = p.getPath();
                 if (projectPath == null) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -464,6 +464,8 @@ public void update(IndexerParallelizer parallelizer)
                     }
                 }
 
+                dir = Util.fixPathIfWindows(dir);
+
                 String startuid = Util.path2uid(dir, "");
                 reader = DirectoryReader.open(indexDirectory); // open existing index
                 settings = readAnalysisSettings();
@@ -1100,6 +1102,7 @@ private void indexDown(File dir, String parent, IndexDownArgs args)
                     }
 
                     if (uidIter != null) {
+                        path = Util.fixPathIfWindows(path);
                         String uid = Util.path2uid(path,
                             DateTools.timeToString(file.lastModified(),
                             DateTools.Resolution.MILLISECOND)); // construct uid for doc

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/OGKUnifiedHighlighter.java
Patch:
@@ -297,6 +297,7 @@ private String getRepoFileContent(String repoRelPath, String storedU)
             return null;
         }
 
+        repoRelPath = Util.fixPathIfWindows(repoRelPath);
         // Verify that timestamp (U) is unchanged by comparing UID.
         String uid = Util.path2uid(repoRelPath,
             DateTools.timeToString(repoAbsFile.lastModified(),

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Project.java
Patch:
@@ -34,6 +34,7 @@
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.ClassUtil;
 import org.opengrok.indexer.util.ForbiddenSymlinkException;
+import org.opengrok.indexer.web.Util;
 
 /**
  * Placeholder for the information that builds up a project
@@ -112,7 +113,7 @@ public Project(String name) {
      */
     public Project(String name, String path) {
         this.name = name;
-        this.path = path;
+        this.path = Util.fixPathIfWindows(path);
         completeWithDefaults();
     }
 
@@ -332,7 +333,7 @@ public static Project getProject(String path) {
         // Try to match each project path as prefix of the given path.
         final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.hasProjects()) {
-            final String lpath = path.replace(File.separatorChar, '/');
+            final String lpath = Util.fixPathIfWindows(path);
             for (Project p : env.getProjectList()) {
                 String projectPath = p.getPath();
                 if (projectPath == null) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -464,6 +464,8 @@ public void update(IndexerParallelizer parallelizer)
                     }
                 }
 
+                dir = Util.fixPathIfWindows(dir);
+
                 String startuid = Util.path2uid(dir, "");
                 reader = DirectoryReader.open(indexDirectory); // open existing index
                 settings = readAnalysisSettings();
@@ -1100,6 +1102,7 @@ private void indexDown(File dir, String parent, IndexDownArgs args)
                     }
 
                     if (uidIter != null) {
+                        path = Util.fixPathIfWindows(path);
                         String uid = Util.path2uid(path,
                             DateTools.timeToString(file.lastModified(),
                             DateTools.Resolution.MILLISECOND)); // construct uid for doc

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/OGKUnifiedHighlighter.java
Patch:
@@ -297,6 +297,7 @@ private String getRepoFileContent(String repoRelPath, String storedU)
             return null;
         }
 
+        repoRelPath = Util.fixPathIfWindows(repoRelPath);
         // Verify that timestamp (U) is unchanged by comparing UID.
         String uid = Util.path2uid(repoRelPath,
             DateTools.timeToString(repoAbsFile.lastModified(),

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/FileHistoryCache.java
Patch:
@@ -35,12 +35,12 @@
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
+import java.nio.file.NoSuchFileException;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -790,7 +790,7 @@ public void clear(Repository repository) {
             // Remove all files which constitute the history cache.
             try {
                 IOUtils.removeRecursive(Paths.get(histDir));
-            } catch (FileNotFoundException ex) {
+            } catch (NoSuchFileException ex) {
                 LOGGER.log(Level.WARNING, "directory {} does not exist", histDir);
             } catch (IOException ex) {
                 LOGGER.log(Level.SEVERE, "tried removeRecursive()", ex);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java
Patch:
@@ -609,7 +609,7 @@ public QueryBuilder getQueryBuilder() {
      */
     public EftarFileReader getEftarReader() {
         if (eftarReader == null || eftarReader.isClosed()) {
-            File f = getEnv().getConfiguration().getDtagsEftar();
+            File f = getEnv().getDtagsEftar();
             if (f == null) {
                 eftarReader = null;
             } else {
@@ -979,11 +979,10 @@ public String getCssDir() {
      *
      * @return the runtime env.
      * @see RuntimeEnvironment#getInstance()
-     * @see RuntimeEnvironment#register()
      */
     public RuntimeEnvironment getEnv() {
         if (env == null) {
-            env = RuntimeEnvironment.getInstance().register();
+            env = RuntimeEnvironment.getInstance();
         }
         return env;
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/ProjectHelperExtendedTest.java
Patch:
@@ -64,7 +64,6 @@ public static void setUpClass() {
         env.setProjects(projects);
         env.setGroups(new TreeSet<>(grps));
         env.setRepositories(rps);
-        env.register();
     }
 
     private void setupPageConfigRequest(final String cookie) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/ProjectHelperTest.java
Patch:
@@ -105,7 +105,6 @@ public void testSynchronization() {
         env.getProjects().put("foo", p);
         env.getProjects().put("bar", repo);
         env.getGroups().add(g);
-        env.register();
 
         Assert.assertEquals(42, env.getProjects().size());
         Assert.assertEquals(21, env.getRepositories().size());
@@ -125,7 +124,6 @@ public void testSynchronization() {
         env.setProjects(oldProjects);
         env.setRepositories(oldRepositories);
         env.setGroups(oldGroups);
-        env.register();
     }
 
     /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/ProjectHelperTestBase.java
Patch:
@@ -237,7 +237,6 @@ public static void setUpClass() {
         env.setProjects(prjs);
         env.setGroups(new TreeSet<>(grps));
         env.setRepositories(rps);
-        env.register();
     }
 
     @AfterClass
@@ -246,7 +245,6 @@ public static void tearDownClass() {
         env.setProjects(projects);
         env.setGroups(groups);
         env.setRepositories(repositories);
-        env.register();
     }
 
     protected void invokeAddPlugin(IAuthorizationPlugin plugin) {

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/StatsController.java
Patch:
@@ -35,6 +35,8 @@
 import javax.ws.rs.core.MediaType;
 import java.io.IOException;
 
+import static org.opengrok.indexer.util.StatisticsUtils.loadStatistics;
+
 @Path("/stats")
 public class StatsController {
 
@@ -54,7 +56,7 @@ public void clean() {
     @PUT
     @Path("reload")
     public void reload() throws IOException, ParseException {
-        env.loadStatistics();
+        loadStatistics();
     }
 
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SuggesterController.java
Patch:
@@ -104,7 +104,7 @@ public Result getSuggestions(@Valid @BeanParam final SuggesterQueryData data) th
             throw new ParseException("Could not determine suggester query");
         }
 
-        SuggesterConfig config = env.getConfiguration().getSuggesterConfig();
+        SuggesterConfig config = env.getSuggesterConfig();
 
         modifyDataBasedOnConfiguration(suggesterData, config);
 
@@ -161,7 +161,7 @@ private boolean satisfiesConfiguration(final SuggesterData data, final Suggester
     @Path("/config")
     @Produces(MediaType.APPLICATION_JSON)
     public SuggesterConfig getConfig() {
-        return env.getConfiguration().getSuggesterConfig();
+        return env.getSuggesterConfig();
     }
 
     /**

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SystemController.java
Patch:
@@ -54,14 +54,14 @@ public void refresh(final String project) {
     @PUT
     @Path("/includes/reload")
     public void reloadIncludes() {
-        env.reloadIncludeFiles(env.getConfiguration());
+        env.getIncludeFiles().reloadIncludeFiles();
     }
 
     @POST
     @Path("/pathdesc")
     @Consumes(MediaType.TEXT_PLAIN)
     public void loadPathDescriptions(final String input) throws IOException {
         EftarFile ef = new EftarFile();
-        ef.create(input, env.getConfiguration().getDtagsEftarPath().toString());
+        ef.create(input, env.getDtagsEftarPath().toString());
     }
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/filter/SuggestionsEnabledFilter.java
Patch:
@@ -40,9 +40,8 @@ public class SuggestionsEnabledFilter implements ContainerRequestFilter {
 
     @Override
     public void filter(final ContainerRequestContext context) {
-        if (!env.getConfiguration().getSuggesterConfig().isEnabled()) {
+        if (!env.getSuggesterConfig().isEnabled()) {
             context.abortWith(Response.status(Response.Status.NOT_FOUND).build());
         }
     }
-
 }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/StatsControllerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testGet() throws ParseException {
 
     @Test
     public void testInvalidReload() {
-        env.getConfiguration().setStatisticsFilePath("/file/that/doesnot/exists");
+        env.setStatisticsFilePath("/file/that/doesnot/exists");
 
         Response response = target("stats")
                 .path("reload")
@@ -109,5 +109,4 @@ public void testInvalidReload() {
 
         assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());
     }
-
 }

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -83,7 +83,7 @@ public static void setUpClass() throws Exception {
                 false, false, null, null, new ArrayList<>(), false);
         Indexer.getInstance().doIndexerExecution(true, null, null);
 
-        env.getConfiguration().getSuggesterConfig().setRebuildCronConfig(null);
+        env.getSuggesterConfig().setRebuildCronConfig(null);
     }
 
     @AfterClass
@@ -95,7 +95,7 @@ public static void tearDownClass() {
     public void before() {
         await().atMost(15, TimeUnit.SECONDS).until(() -> getSuggesterProjectDataSize() == 1);
 
-        env.getConfiguration().setSuggesterConfig(new SuggesterConfig());
+        env.setSuggesterConfig(new SuggesterConfig());
     }
 
     private static int getSuggesterProjectDataSize() throws Exception {

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SystemControllerTest.java
Patch:
@@ -56,7 +56,7 @@ public void testIncludeReload() throws IOException {
         }
 
         // Sanity check that getFooterIncludeFileContent() works since the test depends on it.
-        String before = env.getConfiguration().getFooterIncludeFileContent(false);
+        String before = env.getIncludeFiles().getFooterIncludeFileContent(false);
         assertEquals(content, before.trim());
 
         // Modify the contents of the file.
@@ -72,7 +72,7 @@ public void testIncludeReload() throws IOException {
         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), r.getStatus());
 
         // Check that the content was reloaded.
-        String after = env.getConfiguration().getFooterIncludeFileContent(false);
+        String after = env.getIncludeFiles().getFooterIncludeFileContent(false);
         assertNotEquals(before, after);
         assertEquals(content, after.trim());
 
@@ -109,7 +109,7 @@ public void testDtagsEftarReload() throws IOException {
         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), r.getStatus());
 
         // Check
-        Path eftarPath = env.getConfiguration().getDtagsEftarPath();
+        Path eftarPath = env.getDtagsEftarPath();
         assertTrue(eftarPath.toFile().exists());
         EftarFileReader er = new EftarFileReader(eftarPath.toString());
         for (int i = 0; i < descriptions.length; i++) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Groups.java
Patch:
@@ -156,6 +156,7 @@ public static void main(String[] argv) {
                 usage();
                 System.exit(1);
             }
+            out = prepareOutput(outFile);
             printOut(false, cfg, out);
         } else if (delete) {
             // perform delete

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperRepository.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.jrcs.rcs.InvalidVersionNumberException;
-import org.apache.commons.jrcs.rcs.Version;
+import org.suigeneris.jrcs.rcs.InvalidVersionNumberException;
+import org.suigeneris.jrcs.rcs.Version;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.Executor;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialHistoryParser.java
Patch:
@@ -126,7 +126,7 @@ public void processStream(InputStream input) throws IOException {
             } else if (s.startsWith(MercurialRepository.USER) && entry != null) {
                 entry.setAuthor(s.substring(MercurialRepository.USER.length()).trim());
             } else if (s.startsWith(MercurialRepository.DATE) && entry != null) {
-                Date date = new Date();
+                Date date;
                 try {
                     date = df.parse(s.substring(MercurialRepository.DATE.length()).trim());
                 } catch (ParseException pe) {

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorRepository.java
Patch:
@@ -258,7 +258,7 @@ Annotation annotate(File file, String revision)
         // @TODO : Rename & Delete Support
         File rcsFile = getRazorArchiveRCSFileFor(file);
         if (rcsFile != null && rcsFile.exists()) {
-            return RCSRepository.annotate(file, revision, rcsFile);
+            return (new RCSRepository()).annotate(file, revision);
         }
 
         File sccsFile = getRazorArchiveSCCSFileFor(file);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/OptionParser.java
Patch:
@@ -519,7 +519,7 @@ protected String candidate(String option, int index) throws ParseException {
      * will cause a parse exception. If this is a scan parser, unrecognized
      * options are ignored.
      * 
-     * @param args
+     * @param args argument vector
      * @return non-option parameters, or all arguments after "--" encountered.
      * @throws ParseException 
      */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/DiffData.java
Patch:
@@ -23,7 +23,7 @@
  */
 package org.opengrok.indexer.web;
 
-import org.apache.commons.jrcs.diff.Revision;
+import org.suigeneris.jrcs.diff.Revision;
 import org.opengrok.indexer.analysis.FileAnalyzer.Genre;
 
 /**

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/c/CAnalyzerFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         CAnalyzerFactory analFact = new CAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/c/CxxAnalyzerFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         CxxAnalyzerFactory analFact = new CxxAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzerFactoryTest.java
Patch:
@@ -86,7 +86,7 @@ public static void setUpClass() throws Exception {
         ClojureAnalyzerFactory analFact = new ClojureAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzerFactoryTest.java
Patch:
@@ -84,7 +84,7 @@ public static void setUpClass() throws Exception {
         CSharpAnalyzerFactory analFact = new CSharpAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/executables/JarAnalyzerTest.java
Patch:
@@ -81,7 +81,6 @@ public static void setUpClass() throws Exception {
         env.setDataRoot(repository.getDataRoot());
         RepositoryFactory.initializeIgnoredNames(env);
 
-        env.setVerbose(false);
         env.setHistoryEnabled(false);
         IndexChangedListener progress = new DefaultIndexChangedListener();
         Indexer.getInstance().prepareIndexer(env, true, true,

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/haskell/HaskellXrefTest.java
Patch:
@@ -122,8 +122,8 @@ public void sampleTest() throws IOException {
             expectedOutputSteam.close();
         }
 
-        String actual[] = new String(sampleOutputStream.toByteArray(), "UTF-8").split("\n");
-        String expected[] = new String(expectedOutputSteam.toByteArray(), "UTF-8").split("\n");
+        String actual[] = new String(sampleOutputStream.toByteArray(), "UTF-8").split("\\r?\\n");
+        String expected[] = new String(expectedOutputSteam.toByteArray(), "UTF-8").split("\\r?\\n");
         assertLinesEqual("Haskell sampleTest()", expected, actual);
         assertEquals("Haskell LOC", 3, actLOC);
     }
@@ -161,7 +161,7 @@ private void writeAndCompare(String sourceResource, String resultResource,
         baos.close();
 
         String ostr = new String(baos.toByteArray(), "UTF-8");
-        String gotten[] = ostr.split("\n");
+        String gotten[] = ostr.split("\\r?\\n");
 
         String estr = new String(expbytes, "UTF-8");
         String expected[] = estr.split("\n");

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/java/JavaAnalyzerFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         JavaAnalyzerFactory analFact = new JavaAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzerFactoryTest.java
Patch:
@@ -86,7 +86,7 @@ public static void setUpClass() throws Exception {
         PascalAnalyzerFactory analyzerFactory = new PascalAnalyzerFactory();
         analyzer = analyzerFactory.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/php/PhpXrefTest.java
Patch:
@@ -136,7 +136,7 @@ public void sampleTest() throws IOException {
                 "analysis/php/sampleXrefRes.html");
         byte[] expbytes = copyStream(exp);
 
-        String gotten[] = new String(baos.toByteArray(), "UTF-8").split("\n");
+        String gotten[] = new String(baos.toByteArray(), "UTF-8").split("\\r?\\n");
         String expected[] = new String(expbytes, "UTF-8").split("\n");
         assertLinesEqual("PHP xref", expected, gotten);
         assertEquals("PHP LOC", 29, actLOC);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/condition/CtagsInstalled.java
Patch:
@@ -28,7 +28,7 @@ public class CtagsInstalled implements RunCondition {
 
     @Override
     public boolean isSatisfied() {
-        return RuntimeEnvironment.getInstance().validateExuberantCtags();
+        return RuntimeEnvironment.getInstance().validateUniversalCtags();
     }
 
 }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/HistoryGuruTest.java
Patch:
@@ -70,8 +70,6 @@ public static void setUpClass() throws Exception {
                 FILES, true);
         Assert.assertNotEquals(0, FILES.size());
         
-        env.setVerbose(true);
-
         HistoryGuru histGuru = HistoryGuru.getInstance();
         assertNotNull(histGuru);
         Assert.assertEquals(0, histGuru.getRepositories().size());

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/MercurialRepositoryTest.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -123,7 +124,7 @@ public void testGetHistorySubdir() throws Exception {
 
         // Add a subdirectory with some history.
         runHgCommand(root, "import",
-            getClass().getResource("/history/hg-export-subdir.txt").getPath());
+            Paths.get(getClass().getResource("/history/hg-export-subdir.txt").toURI()).toString());
 
         MercurialRepository mr
                 = (MercurialRepository) RepositoryFactory.getRepository(root);
@@ -194,7 +195,7 @@ public void testGetHistoryBranch() throws Exception {
 
         // Branch the repo and add one changeset.
         runHgCommand(root, "unbundle",
-                getClass().getResource("/history/hg-branch.bundle").getPath());
+                Paths.get(getClass().getResource("/history/hg-branch.bundle").toURI()).toString());
         // Switch to the branch.
         runHgCommand(root, "update", "mybranch");
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexVersionTest.java
Patch:
@@ -88,7 +88,6 @@ public void tearDown() throws IOException {
      * @throws Exception 
      */
     private void testIndexVersion(boolean projectsEnabled, List<String> subFiles) throws Exception {
-        env.setVerbose(true);
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(projectsEnabled);
         Indexer.getInstance().prepareIndexer(env, true, true, null,

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerRepoTest.java
Patch:
@@ -216,7 +216,7 @@ public void testSymlinks() throws IndexerException, IOException {
         List<RepositoryInfo> repos = env.getRepositories();
         assertEquals(repos.size(), 1);
         RepositoryInfo repo = repos.get(0);
-        assertEquals("/" + SYMLINK, repo.getDirectoryNameRelative());
+        assertEquals(File.separator + SYMLINK, repo.getDirectoryNameRelative());
         String epath = sourceRoot.toString() + File.separator + SYMLINK;
         String apath = repo.getDirectoryName();
         assertTrue("Should match (with macOS leeway):\n" + epath + "\nv.\n" +

File: opengrok-indexer/src/test/java/org/opengrok/indexer/index/IndexerTest.java
Patch:
@@ -117,7 +117,6 @@ public void testIndexGeneration() throws Exception {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-        env.setVerbose(true);
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true, new TreeSet<>(Collections.singletonList("/c")),
                 false, false, null, null, new ArrayList<>(), false);

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/SearchEngineTest.java
Patch:
@@ -72,7 +72,6 @@ public static void setUpClass() throws Exception {
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-        env.setVerbose(false);
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest.java
Patch:
@@ -86,7 +86,6 @@ public static void setUpClass() throws Exception {
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-        env.setVerbose(false);
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/SearchAndContextFormatterTest2.java
Patch:
@@ -125,7 +125,6 @@ public static void setUpClass() throws Exception {
         env.setDataRoot(dataroot.getPath());
         RepositoryFactory.initializeIgnoredNames(env);
 
-        env.setVerbose(false);
         env.setHistoryEnabled(false);
         Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Collections.singletonList("/c")),

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/PageConfigTest.java
Patch:
@@ -270,7 +270,7 @@ public String getPathInfo() {
         String rev = cfg.getLatestRevision();
         assertNull(rev);
 
-        String location = cfg.getLatestRevisionLocation();
+        String location = cfg.getRevisionLocation(cfg.getLatestRevision());
         assertNull(location);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/SearchHelperTest.java
Patch:
@@ -63,7 +63,6 @@ public void setUp() throws IOException {
         env = RuntimeEnvironment.getInstance();
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-        env.setVerbose(true);
         env.setHistoryEnabled(false);
     }
 

File: opengrok-web/src/main/java/org/opengrok/web/DirectoryListing.java
Patch:
@@ -170,7 +170,7 @@ public List<String> extraListTo(String contextPath, File dir, Writer out,
         if (desc != null) {
             parentFNode = desc.getNode(path);
             if (parentFNode != null) {
-                offset = parentFNode.childOffset;
+                offset = parentFNode.getChildOffset();
             }
         }
 

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -74,7 +74,6 @@ public static void setUpClass() throws Exception {
 
         repository.create(SuggesterControllerTest.class.getResourceAsStream("/org/opengrok/indexer/index/source.zip"));
 
-        env.setVerbose(false);
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(false);
         env.setSourceRoot(repository.getSourceRoot() + File.separator + "java");

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -110,7 +110,6 @@ public static void setUpClass() throws Exception {
 
         repository.create(SuggesterControllerTest.class.getResourceAsStream("/org/opengrok/indexer/index/source.zip"));
 
-        env.setVerbose(false);
         env.setHistoryEnabled(false);
         env.setProjectsEnabled(true);
         Indexer.getInstance().prepareIndexer(env, true, true,

File: suggester/src/test/java/org/opengrok/suggest/popular/impl/ChronicleMapAdapterTest.java
Patch:
@@ -56,6 +56,7 @@ public void setUp() throws IOException {
 
     @After
     public void tearDown() throws IOException {
+        map.close();
         Files.delete(tempFile);
     }
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/PageConfigTest.java
Patch:
@@ -270,7 +270,7 @@ public String getPathInfo() {
         String rev = cfg.getLatestRevision();
         assertNull(rev);
 
-        String location = cfg.getLatestRevisionLocation();
+        String location = cfg.getRevisionLocation(cfg.getLatestRevision());
         assertNull(location);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1666,6 +1666,9 @@ private void finishWriting() throws IOException {
     /**
      * Verify TABSIZE, and evaluate AnalyzerGuru version together with ZVER --
      * or return a value to indicate mismatch.
+     * @param outIsXrefWriter boolean array. After return its first member will
+     *                        contain return value of {@code isXrefWriter()}
+     *                        for the file analyzer matching given file
      * @param file the source file object
      * @param path the source file path
      * @return {@code false} if a mismatch is detected

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -31,6 +31,7 @@
 import java.nio.file.Paths;
 import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -774,6 +775,8 @@ public static String[] parseOptions(String[] argv) throws ParseException {
         // so that options may be overwritten later.
         configure.parse(argv);
 
+        LOGGER.log(Level.INFO, "Indexer options: {0}", Arrays.toString(argv));
+
         if (cfg == null) {
             cfg = new Configuration();
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/util/OptionParser.java
Patch:
@@ -519,7 +519,7 @@ protected String candidate(String option, int index) throws ParseException {
      * will cause a parse exception. If this is a scan parser, unrecognized
      * options are ignored.
      * 
-     * @param args
+     * @param args argument vector
      * @return non-option parameters, or all arguments after "--" encountered.
      * @throws ParseException 
      */

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1521,9 +1521,8 @@ public static Definitions getDefinitions(File file)
             LOGGER.log(Level.FINER, e.getMessage());
             return null;
         }
-        //sanitize windows path delimiters
-        //in order not to conflict with Lucene escape character
-        path=path.replace("\\", "/");
+        // Sanitize Windows path delimiters in order not to conflict with Lucene escape character.
+        path = path.replace("\\", "/");
 
         IndexReader ireader = getIndexReader(path);
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java
Patch:
@@ -1077,7 +1077,7 @@ private void indexDown(File dir, String parent, IndexDownArgs args)
         Arrays.sort(files, FILENAME_COMPARATOR);
 
         for (File file : files) {
-            String path = parent + '/' + file.getName();
+            String path = parent + File.separator + file.getName();
             if (!accept(dir, file, outLocalRelPath)) {
                 if (outLocalRelPath[0] != null) {
                     File xrefPath = new File(xrefDir, path);

File: suggester/src/test/java/org/opengrok/suggest/popular/impl/ChronicleMapAdapterTest.java
Patch:
@@ -56,6 +56,7 @@ public void setUp() throws IOException {
 
     @After
     public void tearDown() throws IOException {
+        map.close();
         Files.delete(tempFile);
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java
Patch:
@@ -873,7 +873,7 @@ public void prepareIndexer(RuntimeEnvironment env,
             throw new IndexerException("ERROR: please specify a SRC_ROOT with option -s !");
         }
 
-        if (zapCache.isEmpty() && !env.validateExuberantCtags()) {
+        if (zapCache.isEmpty() && !env.validateUniversalCtags()) {
             throw new IndexerException("Didn't find Exuberant Ctags");
         }
         if (zapCache == null) {

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/c/CAnalyzerFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         CAnalyzerFactory analFact = new CAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/c/CxxAnalyzerFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         CxxAnalyzerFactory analFact = new CxxAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/clojure/ClojureAnalyzerFactoryTest.java
Patch:
@@ -86,7 +86,7 @@ public static void setUpClass() throws Exception {
         ClojureAnalyzerFactory analFact = new ClojureAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/csharp/CSharpAnalyzerFactoryTest.java
Patch:
@@ -84,7 +84,7 @@ public static void setUpClass() throws Exception {
         CSharpAnalyzerFactory analFact = new CSharpAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/java/JavaAnalyzerFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public static void setUpClass() throws Exception {
         JavaAnalyzerFactory analFact = new JavaAnalyzerFactory();
         analyzer = analFact.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/pascal/PascalAnalyzerFactoryTest.java
Patch:
@@ -86,7 +86,7 @@ public static void setUpClass() throws Exception {
         PascalAnalyzerFactory analyzerFactory = new PascalAnalyzerFactory();
         analyzer = analyzerFactory.getAnalyzer();
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        if (env.validateExuberantCtags()) {
+        if (env.validateUniversalCtags()) {
             analyzer.setCtags(new Ctags());
         }
     }

File: opengrok-indexer/src/test/java/org/opengrok/indexer/condition/CtagsInstalled.java
Patch:
@@ -28,7 +28,7 @@ public class CtagsInstalled implements RunCondition {
 
     @Override
     public boolean isSatisfied() {
-        return RuntimeEnvironment.getInstance().validateExuberantCtags();
+        return RuntimeEnvironment.getInstance().validateUniversalCtags();
     }
 
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/BitKeeperRepository.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.jrcs.rcs.InvalidVersionNumberException;
-import org.apache.commons.jrcs.rcs.Version;
+import org.suigeneris.jrcs.rcs.InvalidVersionNumberException;
+import org.suigeneris.jrcs.rcs.Version;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
 import org.opengrok.indexer.util.Executor;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialRepository.java
Patch:
@@ -425,7 +425,6 @@ public Annotation annotate(File file, String revision) throws IOException {
         argv.add(file.getName());
         Executor executor = new Executor(argv, file.getParentFile(),
                 RuntimeEnvironment.getInstance().getInteractiveCommandTimeout());
-        Annotation annotation = null;
         HashMap<String, HistoryEntry> revs = new HashMap<>();
 
         // Construct hash map for history entries from history cache. This is

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/RazorRepository.java
Patch:
@@ -258,7 +258,7 @@ Annotation annotate(File file, String revision)
         // @TODO : Rename & Delete Support
         File rcsFile = getRazorArchiveRCSFileFor(file);
         if (rcsFile != null && rcsFile.exists()) {
-            return RCSRepository.annotate(file, revision, rcsFile);
+            return (new RCSRepository()).annotate(file, revision);
         }
 
         File sccsFile = getRazorArchiveSCCSFileFor(file);

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/DiffData.java
Patch:
@@ -23,7 +23,7 @@
  */
 package org.opengrok.indexer.web;
 
-import org.apache.commons.jrcs.diff.Revision;
+import org.suigeneris.jrcs.diff.Revision;
 import org.opengrok.indexer.analysis.FileAnalyzer.Genre;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/PageConfig.java
Patch:
@@ -51,8 +51,8 @@
 import javax.servlet.ServletRequest;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
-import org.apache.commons.jrcs.diff.Diff;
-import org.apache.commons.jrcs.diff.DifferentiationFailedException;
+import org.suigeneris.jrcs.diff.Diff;
+import org.suigeneris.jrcs.diff.DifferentiationFailedException;
 import org.opengrok.indexer.analysis.AnalyzerGuru;
 import org.opengrok.indexer.analysis.ExpandTabsReader;
 import org.opengrok.indexer.analysis.FileAnalyzer.Genre;

File: plugins/src/opengrok/auth/entity/LdapUser.java
Patch:
@@ -39,7 +39,9 @@ public class LdapUser implements Serializable {
     private Set<String> ou;
     private final Map<String, Set<String>> attrs = new HashMap<>();
 
-    private static final long serialVersionUID = 1L;
+    // Use default serial ID value. If the serialized form of the object
+    // changes, feel free to start from 1L.
+    private static final long serialVersionUID = -8207597677599370334L;
 
     public LdapUser(String mail, String uid, Set<String> ou) {
         this.mail = mail;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/history/MercurialRepository.java
Patch:
@@ -352,7 +352,7 @@ private String findOriginalName(String fullpath, String full_rev_to_find)
 
         if (status != 0) {
             LOGGER.log(Level.WARNING,
-                    "Failed to get original name in revision {3} for: \"{0}\" Exit code: {1}",
+                    "Failed to get original name in revision {2} for: \"{0}\" Exit code: {1}",
                     new Object[]{fullpath, String.valueOf(status), full_rev_to_find});
             return null;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/document/TroffAnalyzer.java
Patch:
@@ -35,7 +35,7 @@
 import org.opengrok.indexer.analysis.OGKTextField;
 import org.opengrok.indexer.analysis.WriteXrefArgs;
 import org.opengrok.indexer.analysis.Xrefer;
-import org.opengrok.search.QueryBuilder;
+import org.opengrok.indexer.search.QueryBuilder;
 
 /**
  * Analyzes [tn]roff files Created on September 30, 2005

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/SuggesterConfig.java
Patch:
@@ -20,12 +20,12 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.indexer.configuration;
 
 import com.cronutils.model.CronType;
 import com.cronutils.model.definition.CronDefinitionBuilder;
 import com.cronutils.parser.CronParser;
-import org.opensolaris.opengrok.search.QueryBuilder;
+import org.opengrok.indexer.search.QueryBuilder;
 
 import java.util.Arrays;
 import java.util.Collections;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/SearchHelper.java
Patch:
@@ -72,7 +72,6 @@
 import org.opengrok.indexer.search.context.HistoryContext;
 import org.opengrok.indexer.util.ForbiddenSymlinkException;
 import org.opengrok.indexer.util.IOUtils;
-import org.opengrok.web.api.v1.suggester.provider.service.SuggesterServiceFactory;
 
 /**
  * Working set for a search basically to factor out/separate search related
@@ -374,8 +373,6 @@ public SearchHelper prepareExec(Project project) {
      * @return this instance
      */
     public SearchHelper executeQuery() {
-        SuggesterServiceFactory.getDefault().onSearch(projects, query); // notify suggester that query was searched
-
         if (redirect != null || errorMsg != null) {
             return this;
         }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/api/constraints/PositiveDuration.java
Patch:
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface PositiveDuration {
 
-    String message() default "{org.opensolaris.opengrok.web.constraints.PositiveDuration.message}";
+    String message() default "{org.opengrok.indexer.web.api.constraints.PositiveDuration.message}";
 
     Class<?>[] groups() default {};
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/util/ClassUtilTest.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.util;
+package org.opengrok.indexer.util;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Before;

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -36,6 +36,8 @@
 import org.opengrok.indexer.authorization.AuthorizationFramework;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;
+import org.opengrok.indexer.web.PageConfig;
+import org.opengrok.indexer.web.SearchHelper;
 import org.opengrok.web.api.v1.suggester.provider.service.SuggesterServiceFactory;
 
 /**

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/filter/LocalhostFilter.java
Patch:
@@ -52,7 +52,7 @@ public class LocalhostFilter implements ContainerRequestFilter {
      * Endpoint paths that are exempted from this filter.
      * @see SearchController#search(HttpServletRequest, String, String, String, String, String, String,
      * java.util.List, int, int)
-     * @see SuggesterController#getSuggestions(org.opensolaris.opengrok.web.api.v1.suggester.model.SuggesterQueryData)
+     * @see SuggesterController#getSuggestions(org.opengrok.web.api.v1.suggester.model.SuggesterQueryData)
      * @see SuggesterController#getConfig()
      */
     private static final Set<String> allowedPaths = new HashSet<>(Arrays.asList(

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/SuggesterAppBinder.java
Patch:
@@ -20,11 +20,11 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester;
+package org.opengrok.web.api.v1.suggester;
 
 import org.glassfish.jersey.internal.inject.AbstractBinder;
-import org.opensolaris.opengrok.web.api.v1.suggester.provider.service.SuggesterService;
-import org.opensolaris.opengrok.web.api.v1.suggester.provider.service.SuggesterServiceFactory;
+import org.opengrok.web.api.v1.suggester.provider.service.SuggesterService;
+import org.opengrok.web.api.v1.suggester.provider.service.SuggesterServiceFactory;
 
 /**
  * Binder for suggester related dependency injection.

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/model/SuggesterData.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.model;
+package org.opengrok.web.api.v1.suggester.model;
 
 import org.apache.lucene.search.Query;
 import org.opengrok.suggest.query.SuggesterQuery;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/model/SuggesterQueryData.java
Patch:
@@ -20,11 +20,11 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.model;
+package org.opengrok.web.api.v1.suggester.model;
 
 import org.hibernate.validator.constraints.NotBlank;
-import org.opensolaris.opengrok.search.QueryBuilder;
-import org.opensolaris.opengrok.web.api.v1.suggester.provider.filter.AuthorizationFilter;
+import org.opengrok.indexer.search.QueryBuilder;
+import org.opengrok.web.api.v1.suggester.provider.filter.AuthorizationFilter;
 
 import javax.validation.constraints.Min;
 import javax.validation.constraints.Pattern;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/ParseExceptionMapper.java
Patch:
@@ -20,10 +20,10 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.provider;
+package org.opengrok.web.api.v1.suggester.provider;
 
 import org.apache.lucene.queryparser.classic.ParseException;
-import org.opensolaris.opengrok.web.api.error.ExceptionMapperUtils;
+import org.opengrok.web.api.error.ExceptionMapperUtils;
 
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/filter/Authorized.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.provider.filter;
+package org.opengrok.web.api.v1.suggester.provider.filter;
 
 import javax.ws.rs.NameBinding;
 import java.lang.annotation.ElementType;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/filter/Suggester.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.provider.filter;
+package org.opengrok.web.api.v1.suggester.provider.filter;
 
 import javax.ws.rs.NameBinding;
 import java.lang.annotation.ElementType;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/filter/SuggestionsEnabledFilter.java
Patch:
@@ -20,9 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.provider.filter;
+package org.opengrok.web.api.v1.suggester.provider.filter;
 
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
 
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.container.ContainerRequestFilter;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/SuggesterService.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.provider.service;
+package org.opengrok.web.api.v1.suggester.provider.service;
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/provider/service/SuggesterServiceFactory.java
Patch:
@@ -20,9 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.provider.service;
+package org.opengrok.web.api.v1.suggester.provider.service;
 
-import org.opensolaris.opengrok.web.api.v1.suggester.provider.service.impl.SuggesterServiceImpl;
+import org.opengrok.web.api.v1.suggester.provider.service.impl.SuggesterServiceImpl;
 
 public class SuggesterServiceFactory {
 

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/query/SuggesterQueryBuilder.java
Patch:
@@ -20,13 +20,13 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.query;
+package org.opengrok.web.api.v1.suggester.query;
 
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.search.Query;
 import org.opengrok.suggest.query.SuggesterQuery;
-import org.opensolaris.opengrok.search.CustomQueryParser;
-import org.opensolaris.opengrok.search.QueryBuilder;
+import org.opengrok.indexer.search.CustomQueryParser;
+import org.opengrok.indexer.search.QueryBuilder;
 
 /**
  * Used for preserving the OpenGrok query building properties with special handling for the suggestions field which

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/suggester/query/SuggesterQueryParser.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.suggester.query;
+package org.opengrok.web.api.v1.suggester.query;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
@@ -40,7 +40,7 @@
 import org.opengrok.suggest.query.SuggesterRangeQuery;
 import org.opengrok.suggest.query.SuggesterRegexpQuery;
 import org.opengrok.suggest.query.SuggesterWildcardQuery;
-import org.opensolaris.opengrok.search.CustomQueryParser;
+import org.opengrok.indexer.search.CustomQueryParser;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/ProjectsControllerTest.java
Patch:
@@ -45,15 +45,14 @@
 import org.opengrok.indexer.history.RepositoryInfo;
 import org.opengrok.indexer.index.IndexDatabase;
 import org.opengrok.indexer.index.Indexer;
-import org.opengrok.util.TestRepository;
+import org.opengrok.indexer.util.TestRepository;
 import org.opengrok.web.api.v1.suggester.provider.service.SuggesterService;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.GenericType;
 import java.io.File;
 import java.io.IOException;
-import java.nio.file.CopyOption;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;

File: test/org/opensolaris/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -602,7 +602,7 @@ public void testGetPopularityDataAll() {
                 .request()
                 .get(popularityDataType);
 
-        assertThat(res, contains(new SimpleEntry<>("stopclass", 15), new SimpleEntry<>("mynamespace", 10)));
+        assertThat(res, contains(new SimpleEntry<>("topclass", 15), new SimpleEntry<>("mynamespace", 10)));
     }
 
     @Test

File: test/org/opensolaris/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -612,7 +612,7 @@ public void testWildcardQueryEndingWithAsterisk() {
                 .get(Result.class);
 
         assertThat(res.suggestions.stream().map(r -> r.phrase).collect(Collectors.toList()),
-                contains("printf"));
+                containsInAnyOrder("print", "printf"));
     }
 
 }

File: suggester/src/main/java/org/opengrok/suggest/Suggester.java
Patch:
@@ -84,7 +84,9 @@ public final class Suggester implements Closeable {
 
     private final int timeThreshold;
 
-    private final ExecutorService executorService = Executors.newWorkStealingPool();
+    // do NOT use fork join thread pool (work stealing thread pool) because it does not send interrupts upon cancellation
+    private final ExecutorService executorService = Executors.newFixedThreadPool(
+            Runtime.getRuntime().availableProcessors());
 
     /**
      * @param suggesterDir directory under which the suggester data should be created

File: test/org/opensolaris/opengrok/web/api/v1/controller/SuggesterControllerTest.java
Patch:
@@ -574,16 +574,16 @@ public void testAllowComplexQueries() {
 
     @Test
     public void testGetPopularityDataSimple() {
-        SuggesterServiceImpl.getInstance().increaseSearchCount("swift", new Term(QueryBuilder.FULL, "print"), 10);
+        SuggesterServiceImpl.getInstance().increaseSearchCount("rust", new Term(QueryBuilder.FULL, "main"), 10);
 
         List<Entry<String, Integer>> res = target(SuggesterController.PATH)
                 .path("popularity")
-                .path("swift")
+                .path("rust")
                 .request()
                 .get(popularityDataType);
 
 
-        assertThat(res, contains(new SimpleEntry<>("print", 10)));
+        assertThat(res, contains(new SimpleEntry<>("main", 10)));
     }
 
     @Test

File: src/org/opensolaris/opengrok/search/CustomQueryParser.java
Patch:
@@ -70,7 +70,7 @@ public CustomQueryParser(String field) {
      * @return {@code true} if the field is case sensitive, {@code false}
      * otherwise
      */
-    private static boolean isCaseSensitive(String field) {
+    protected static boolean isCaseSensitive(String field) {
         // Only definition search and reference search are case sensitive
         return QueryBuilder.DEFS.equals(field)
                 || QueryBuilder.REFS.equals(field);

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -291,7 +291,7 @@ public final class Configuration {
      */
     private boolean listDirsFirst = true;
 
-    private SuggesterConfig suggesterConfig = SuggesterConfig.getDefault();
+    private SuggesterConfig suggesterConfig = new SuggesterConfig();
 
     /*
      * types of handling history for remote SCM repositories:

File: src/org/opensolaris/opengrok/configuration/ConfigurationHelp.java
Patch:
@@ -168,7 +168,7 @@ private static Object getSampleValue(Method setter, Object defaultValue) {
             }
             return null;
         } else if (paramType == SuggesterConfig.class) {
-            return SuggesterConfig.getDefault();
+            return new SuggesterConfig();
         } else {
             throw new UnsupportedOperationException("getSampleValue() for " +
                 paramType + ", " + genType);

File: test/org/opensolaris/opengrok/web/suggester/controller/SuggesterControllerProjectsDisabledTest.java
Patch:
@@ -88,7 +88,7 @@ public static void tearDownClass() {
     public void before() {
         await().atMost(15, TimeUnit.SECONDS).until(() -> getSuggesterProjectDataSize() == 1);
 
-        env.getConfiguration().setSuggesterConfig(SuggesterConfig.getDefault());
+        env.getConfiguration().setSuggesterConfig(new SuggesterConfig());
     }
 
     private static int getSuggesterProjectDataSize() throws Exception {

File: test/org/opensolaris/opengrok/web/suggester/controller/SuggesterControllerTest.java
Patch:
@@ -114,7 +114,7 @@ public void before() {
         await().atMost(15, TimeUnit.SECONDS).until(() ->
                 getSuggesterProjectDataSize() == env.getProjectList().size());
 
-        env.getConfiguration().setSuggesterConfig(SuggesterConfig.getDefault());
+        env.getConfiguration().setSuggesterConfig(new SuggesterConfig());
     }
 
     private static int getSuggesterProjectDataSize() throws Exception {

File: src/org/opensolaris/opengrok/web/suggester/provider/service/SuggesterService.java
Patch:
@@ -70,7 +70,7 @@ public interface SuggesterService {
     void onSearch(Iterable<String> projects, Query q);
 
     /**
-     * Increments most popular completion data for the specified {@code term} by {@value}.
+     * Increments most popular completion data for the specified {@code term} by {@code value}.
      * @param project project to update
      * @param term term to update
      * @param value value by which to change the data, represents how many times was the {@code term} searched

File: suggester/src/main/java/org/opengrok/suggest/FieldWFSTCollection.java
Patch:
@@ -279,10 +279,10 @@ public void incrementSearchCount(final Term term) {
 
     public SearchCountMap getSearchCountMap(final String field) {
         if (!searchCountMaps.containsKey(field)) {
-            return (key) -> 0;
+            return key -> 0;
         }
 
-        return (key) -> searchCountMaps.get(field).getOrDefault(key, 0);
+        return key -> searchCountMaps.get(field).getOrDefault(key, 0);
     }
 
     @Override

File: src/org/opensolaris/opengrok/configuration/ConfigurationHelp.java
Patch:
@@ -167,6 +167,8 @@ private static Object getSampleValue(Method setter, Object defaultValue) {
                 if (!value.equals(defaultValue)) return value;
             }
             return null;
+        } else if (paramType == SuggesterConfig.class) {
+            return SuggesterConfig.getDefault();
         } else {
             throw new UnsupportedOperationException("getSampleValue() for " +
                 paramType + ", " + genType);

File: suggester/src/main/java/org/opengrok/suggest/query/SuggesterFuzzyQuery.java
Patch:
@@ -38,6 +38,9 @@ public SuggesterFuzzyQuery(final Term term, final int maxEdits, final int prefix
 
     @Override
     public TermsEnum getTermsEnumForSuggestions(final Terms terms) throws IOException {
+        if (terms == null) {
+            return TermsEnum.EMPTY;
+        }
         return getTermsEnum(terms, new AttributeSource());
     }
 

File: suggester/src/main/java/org/opengrok/suggest/SuggesterSearcher.java
Patch:
@@ -113,7 +113,7 @@ private List<LookupResultItem> suggest(
         Set<String> tokensAlreadyIncluded = null;
         if (shouldLeaveOutSameTerms) {
             tokensAlreadyIncluded = SuggesterUtils.intoTermsExceptPhraseQuery(query).stream()
-                    .filter(t -> !t.field().equals(suggesterQuery.getField()))
+                    .filter(t -> t.field().equals(suggesterQuery.getField()))
                     .map(Term::text)
                     .collect(Collectors.toSet());
         }

File: src/org/opensolaris/opengrok/web/SearchHelper.java
Patch:
@@ -72,6 +72,7 @@
 import org.opensolaris.opengrok.search.context.HistoryContext;
 import org.opensolaris.opengrok.util.ForbiddenSymlinkException;
 import org.opensolaris.opengrok.util.IOUtils;
+import org.opensolaris.opengrok.web.suggester.provider.service.impl.SuggesterServiceImpl;
 
 /**
  * Working set for a search basically to factor out/separate search related
@@ -373,6 +374,8 @@ public SearchHelper prepareExec(Project project) {
      * @return this instance
      */
     public SearchHelper executeQuery() {
+        SuggesterServiceImpl.getInstance().onSearch(projects, query);
+
         if (redirect != null || errorMsg != null) {
             return this;
         }

File: src/org/opensolaris/opengrok/web/suggester/provider/service/SuggesterService.java
Patch:
@@ -25,4 +25,6 @@ public interface SuggesterService {
 
     void delete();
 
+    void onSearch(Iterable<String> projects, Query q);
+
 }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/api/constraints/PositiveDuration.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.constraints;
+package org.opengrok.indexer.web.api.constraints;
 
 import javax.validation.Constraint;
 import javax.validation.Payload;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/api/constraints/PositiveDurationValidator.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.constraints;
+package org.opengrok.indexer.web.api.constraints;
 
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/api/constraints/PositiveDurationValidatorTest.java
Patch:
@@ -20,10 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.constraint;
+package org.opengrok.indexer.web.api.constraints;
 
 import org.junit.Test;
-import org.opensolaris.opengrok.web.api.constraints.PositiveDurationValidator;
 
 import java.time.Duration;
 

File: opengrok-web/src/main/java/org/opengrok/web/api/error/ExceptionMapperUtils.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.error;
+package org.opengrok.web.api.error;
 
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;

File: opengrok-web/src/main/java/org/opengrok/web/api/error/GenericExceptionMapper.java
Patch:
@@ -20,9 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.error;
+package org.opengrok.web.api.error;
 
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.indexer.logger.LoggerFactory;
 
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;

File: opengrok-web/src/main/java/org/opengrok/web/api/error/ValidationExceptionMapper.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.error;
+package org.opengrok.web.api.error;
 
 import javax.validation.ValidationException;
 import javax.ws.rs.core.Response;

File: opengrok-web/src/main/java/org/opengrok/web/api/error/WebApplicationExceptionMapper.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.error;
+package org.opengrok.web.api.error;
 
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java
Patch:
@@ -32,7 +32,7 @@
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 import org.hibernate.validator.constraints.NotBlank;
 import org.hibernate.validator.constraints.NotEmpty;
-import org.opengrok.indexer.web.constraints.PositiveDuration;
+import org.opengrok.indexer.web.api.constraints.PositiveDuration;
 
 import java.io.IOException;
 import java.time.Duration;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/RestApp.java
Patch:
@@ -32,7 +32,8 @@ public class RestApp extends ResourceConfig {
     public static final String API_PATH = "/api/v1";
     
     public RestApp() {
-        packages("org.opengrok.web.api.v1.controller", "org.opengrok.web.api.v1.filter");
+        packages("org.opengrok.web.api.constraints", "org.opengrok.web.api.error");
+        packages(true, "org.opengrok.web.api.v1");
     }
 
 }

File: src/org/opensolaris/opengrok/web/api/constraints/PositiveDuration.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opengrok.indexer.web.constraints;
+package org.opensolaris.opengrok.web.api.constraints;
 
 import javax.validation.Constraint;
 import javax.validation.Payload;
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface PositiveDuration {
 
-    String message() default "{org.opengrok.indexer.web.constraints.PositiveDuration.message}";
+    String message() default "{org.opensolaris.opengrok.web.constraints.PositiveDuration.message}";
 
     Class<?>[] groups() default {};
 

File: src/org/opensolaris/opengrok/web/api/constraints/PositiveDurationValidator.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opengrok.indexer.web.constraints;
+package org.opensolaris.opengrok.web.api.constraints;
 
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;

File: test/org/opensolaris/opengrok/web/api/constraint/PositiveDurationValidatorTest.java
Patch:
@@ -20,9 +20,10 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opengrok.indexer.web.constraints;
+package org.opensolaris.opengrok.web.api.constraint;
 
 import org.junit.Test;
+import org.opensolaris.opengrok.web.api.constraints.PositiveDurationValidator;
 
 import java.time.Duration;
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/history/RepositoryFactoryTest.java
Patch:
@@ -20,15 +20,15 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.indexer.history;
 
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
 import org.junit.AfterClass;
 import static org.junit.Assert.assertFalse;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.opensolaris.opengrok.util.TestRepository;
+import org.opengrok.indexer.util.TestRepository;
 
 /**
  * Test RepositoryFactory

File: opengrok-web/src/main/java/org/opengrok/web/AuthorizationFilter.java
Patch:
@@ -35,7 +35,8 @@
 import javax.servlet.http.HttpServletResponse;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.logger.LoggerFactory;
-import org.opengrok.indexer.web.api.v1.RestApp;
+import org.opengrok.indexer.web.PageConfig;
+import org.opengrok.web.api.v1.RestApp;
 
 public class AuthorizationFilter implements Filter {
 

File: src/org/opensolaris/opengrok/web/api/v1/RestApp.java
Patch:
@@ -26,9 +26,11 @@
 
 import javax.ws.rs.ApplicationPath;
 
-@ApplicationPath("/api/v1")
+@ApplicationPath(RestApp.API_PATH)
 public class RestApp extends ResourceConfig {
 
+    public static final String API_PATH = "/api/v1";
+    
     public RestApp() {
         packages("org.opensolaris.opengrok.web.api.v1.controller", "org.opensolaris.opengrok.web.api.v1.filter");
     }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/executables/JFieldBuilder.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.executables;
+package org.opengrok.indexer.analysis.executables;
 
 import java.io.StringWriter;
 import java.util.HashMap;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/Configuration.java
Patch:
@@ -505,7 +505,7 @@ public Map<String, String> getCmds() {
     }
 
     /**
-     * @see org.opensolaris.opengrok.web.messages.MessagesContainer
+     * @see org.opengrok.indexer.web.messages.MessagesContainer
      *
      * @return int the current message limit
      */
@@ -514,7 +514,7 @@ public int getMessageLimit() {
     }
 
     /**
-     * @see org.opensolaris.opengrok.web.messages.MessagesContainer
+     * @see org.opengrok.indexer.web.messages.MessagesContainer
      *
      * @param messageLimit the limit
      * @throws IllegalArgumentException when the limit is negative

File: opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerUtil.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.indexer.index;
 
 import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.Entity;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/search/Results.java
Patch:
@@ -60,7 +60,7 @@
 import org.opengrok.indexer.web.SearchHelper;
 import org.opengrok.indexer.web.Util;
 
-import static org.opensolaris.opengrok.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;
+import static org.opengrok.indexer.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;
 
 /**
  * @author Chandan slightly rewritten by Lubos Kosco

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -63,7 +63,7 @@
 import javax.servlet.http.HttpServletRequest;
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 import org.opengrok.indexer.configuration.Group;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/constraints/PositiveDuration.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.constraints;
+package org.opengrok.indexer.web.constraints;
 
 import javax.validation.Constraint;
 import javax.validation.Payload;
@@ -37,7 +37,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface PositiveDuration {
 
-    String message() default "{org.opensolaris.opengrok.web.constraints.PositiveDuration.message}";
+    String message() default "{org.opengrok.indexer.web.constraints.PositiveDuration.message}";
 
     Class<?>[] groups() default {};
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/constraints/PositiveDurationValidator.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.constraints;
+package org.opengrok.indexer.web.constraints;
 
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/Message.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.messages;
+package org.opengrok.indexer.web.messages;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
@@ -32,7 +32,7 @@
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 import org.hibernate.validator.constraints.NotBlank;
 import org.hibernate.validator.constraints.NotEmpty;
-import org.opensolaris.opengrok.web.constraints.PositiveDuration;
+import org.opengrok.indexer.web.constraints.PositiveDuration;
 
 import java.io.IOException;
 import java.time.Duration;
@@ -42,7 +42,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 
-import static org.opensolaris.opengrok.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;
+import static org.opengrok.indexer.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;
 
 public class Message implements Comparable<Message> {
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/messages/MessagesContainer.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.messages;
+package org.opengrok.indexer.web.messages;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/analysis/PendingTokenTest.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.indexer.analysis;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/search/context/PhraseHighlightComparatorTest.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.search.context;
+package org.opengrok.indexer.search.context;
 
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/XrefSourceTransformerTest.java
Patch:
@@ -21,15 +21,15 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.web;
+package org.opengrok.indexer.web;
 
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
 import static org.junit.Assert.assertEquals;
 import org.junit.Before;
 import org.junit.Test;
-import org.opensolaris.opengrok.analysis.FileAnalyzer;
+import org.opengrok.indexer.analysis.FileAnalyzer;
 
 /**
  * Represents a container for tests of {@link XrefSourceTransformer}.

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/constraints/PositiveDurationValidatorTest.java
Patch:
@@ -20,10 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.constraint;
+package org.opengrok.indexer.web.constraints;
 
 import org.junit.Test;
-import org.opensolaris.opengrok.web.constraints.PositiveDurationValidator;
 
 import java.time.Duration;
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessageTest.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.messages;
+package org.opengrok.indexer.web.messages;
 
 import org.junit.Test;
 

File: opengrok-indexer/src/test/java/org/opengrok/indexer/web/messages/MessagesContainerTest.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.messages;
+package org.opengrok.indexer.web.messages;
 
 import org.junit.After;
 import org.junit.Before;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/RestApp.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1;
+package org.opengrok.web.api.v1;
 
 import org.glassfish.jersey.server.ResourceConfig;
 
@@ -30,7 +30,7 @@
 public class RestApp extends ResourceConfig {
 
     public RestApp() {
-        packages("org.opensolaris.opengrok.web.api.v1.controller", "org.opensolaris.opengrok.web.api.v1.filter");
+        packages("org.opengrok.web.api.v1.controller", "org.opengrok.web.api.v1.filter");
     }
 
 }

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java
Patch:
@@ -20,10 +20,10 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.controller;
+package org.opengrok.web.api.v1.controller;
 
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.util.ClassUtil;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
+import org.opengrok.indexer.util.ClassUtil;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/RepositoriesController.java
Patch:
@@ -20,10 +20,10 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.controller;
+package org.opengrok.web.api.v1.controller;
 
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.history.RepositoryInfo;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
+import org.opengrok.indexer.history.RepositoryInfo;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SearchController.java
Patch:
@@ -20,10 +20,10 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.controller;
+package org.opengrok.web.api.v1.controller;
 
-import org.opensolaris.opengrok.search.Hit;
-import org.opensolaris.opengrok.search.SearchEngine;
+import org.opengrok.indexer.search.Hit;
+import org.opengrok.indexer.search.SearchEngine;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.ws.rs.DefaultValue;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/SystemController.java
Patch:
@@ -20,9 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.controller;
+package org.opengrok.web.api.v1.controller;
 
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.PUT;

File: opengrok-web/src/main/java/org/opengrok/web/api/v1/filter/LocalhostFilter.java
Patch:
@@ -20,9 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.filter;
+package org.opengrok.web.api.v1.filter;
 
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.indexer.logger.LoggerFactory;
 
 import javax.annotation.PostConstruct;
 import javax.servlet.http.HttpServletRequest;

File: opengrok-web/src/main/java/org/opengrok/web/constraints/ValidationExceptionMapper.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.constraints;
+package org.opengrok.web.constraints;
 
 import javax.validation.ValidationException;
 import javax.ws.rs.core.MediaType;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/StatsControllerTest.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.controller;
+package org.opengrok.web.api.v1.controller;
 
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
@@ -29,8 +29,8 @@
 import org.json.simple.parser.ParseException;
 import org.junit.Assert;
 import org.junit.Test;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.web.Statistics;
+import org.opengrok.indexer.configuration.RuntimeEnvironment;
+import org.opengrok.indexer.web.Statistics;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;

File: opengrok-web/src/test/java/org/opengrok/web/api/v1/filter/LocalhostFilterTest.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.web.api.v1.filter;
+package org.opengrok.web.api.v1.filter;
 
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;

File: test/org/opensolaris/opengrok/analysis/sql/PLSQLXrefTest.java
Patch:
@@ -97,7 +97,7 @@ private int writePLSQLXref(PrintStream oss, InputStream iss,
         oss.print(getHtmlBegin());
 
         Writer sw = new StringWriter();
-        SQLAnalyzerFactory fac = new SQLAnalyzerFactory();
+        PLSQLAnalyzerFactory fac = new PLSQLAnalyzerFactory();
         FileAnalyzer analyzer = fac.getAnalyzer();
         analyzer.setScopesEnabled(true);
         analyzer.setFoldingEnabled(true);

File: src/org/opensolaris/opengrok/search/Summary.java
Patch:
@@ -75,7 +75,7 @@ public static class Ellipsis extends Fragment {
 
     private static final Fragment[] FRAGMENT_PROTO = new Fragment[0];
 
-    /** Adds a fragment to a summary.*/
+    /* Adds a fragment to a summary.*/
     public void add(Fragment fragment) { fragments.add(fragment); }
 
     /** Returns an array of all of this summary's fragments.*/

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -505,7 +505,7 @@ public Map<String, String> getCmds() {
     }
 
     /**
-     * @see RuntimeEnvironment#getMessagesInTheSystem()
+     * @see org.opensolaris.opengrok.web.messages.MessagesContainer
      *
      * @return int the current message limit
      */
@@ -514,7 +514,7 @@ public int getMessageLimit() {
     }
 
     /**
-     * @see RuntimeEnvironment#getMessagesInTheSystem()
+     * @see org.opensolaris.opengrok.web.messages.MessagesContainer
      *
      * @param messageLimit the limit
      * @throws IllegalArgumentException when the limit is negative

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -60,6 +60,8 @@
 import org.opensolaris.opengrok.web.SearchHelper;
 import org.opensolaris.opengrok.web.Util;
 
+import static org.opensolaris.opengrok.web.messages.MessagesContainer.MESSAGES_MAIN_PAGE_TAG;
+
 /**
  * @author Chandan slightly rewritten by Lubos Kosco
  */
@@ -189,9 +191,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
             }
             JSONArray messages;
             if ((p = Project.getProject(parent)) != null
-                    && (messages = Util.messagesToJson(p,
-                            RuntimeEnvironment.MESSAGES_MAIN_PAGE_TAG
-                    )).size() > 0) {
+                    && (messages = Util.messagesToJson(p, MESSAGES_MAIN_PAGE_TAG)).size() > 0) {
                 out.write(" <a href=\"" + xrefPrefix + "/" + p.getName() + "\">");
                 out.write("<span class=\"important-note important-note-rounded\" data-messages='" + messages + "'>!</span>");
                 out.write("</a>");

File: src/org/opensolaris/opengrok/web/AuthorizationFilter.java
Patch:
@@ -75,7 +75,7 @@ public void doFilter(ServletRequest sr, ServletResponse sr1, FilterChain fc) thr
             config.getEnv().getStatistics().addRequestTime("requests_forbidden",
                     System.currentTimeMillis() - processTime);
             
-            if (!config.getEnv().getConfiguration().getForbiddenIncludeFileContent().isEmpty()) {
+            if (!config.getEnv().getConfiguration().getForbiddenIncludeFileContent(false).isEmpty()) {
                 sr.getRequestDispatcher("/eforbidden").forward(sr, sr1);
                 return;
             }

File: opengrok-indexer/src/main/java/org/opengrok/indexer/Info.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opengrok;
+package org.opengrok.indexer;
 
 import java.io.IOException;
 import java.io.InputStream;

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/ConsoleFormatter.java
Patch:
@@ -22,7 +22,7 @@
  */
 package org.opengrok.indexer.logger.formatter;
 
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 
 public class ConsoleFormatter extends LogFormatter {
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/FileLogFormatter.java
Patch:
@@ -22,7 +22,7 @@
  */
 package org.opengrok.indexer.logger.formatter;
 
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 
 public class FileLogFormatter extends LogFormatter {
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/SimpleConsoleFormatter.java
Patch:
@@ -22,7 +22,7 @@
  */
 package org.opengrok.indexer.logger.formatter;
 
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 
 public class SimpleConsoleFormatter extends LogFormatter {
     private static final String FORMAT = "%1$tH:%1$tM:%1$tS %4$s: %5$s%6$s%n";

File: opengrok-indexer/src/main/java/org/opengrok/indexer/logger/formatter/SimpleFileLogFormatter.java
Patch:
@@ -22,7 +22,7 @@
  */
 package org.opengrok.indexer.logger.formatter;
 
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 
 public class SimpleFileLogFormatter extends LogFormatter {
 

File: opengrok-indexer/src/main/java/org/opengrok/indexer/web/Util.java
Patch:
@@ -62,7 +62,7 @@
 import javax.servlet.http.HttpServletRequest;
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 import org.opengrok.indexer.configuration.Group;
 import org.opengrok.indexer.configuration.Project;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -37,7 +37,7 @@
 import javax.servlet.ServletRequestEvent;
 import javax.servlet.ServletRequestListener;
 import org.json.simple.parser.ParseException;
-import org.opengrok.Info;
+import org.opengrok.indexer.Info;
 import org.opengrok.indexer.authorization.AuthorizationFramework;
 import org.opengrok.indexer.configuration.RuntimeEnvironment;
 import org.opengrok.indexer.logger.LoggerFactory;

File: test/org/opensolaris/opengrok/index/IndexerRepoTest.java
Patch:
@@ -124,8 +124,8 @@ private void testPerProjectHistory(boolean globalOn) throws IndexerException, IO
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         
         // Make sure we start from scratch.
-        File dataRoot = Files.createTempDirectory("dataForPerProjectHistoryTest").toFile();
-        env.setDataRoot(dataRoot.getName());
+        Path dataRoot = Files.createTempDirectory("dataForPerProjectHistoryTest");
+        env.setDataRoot(dataRoot.toString());
         env.setProjectsEnabled(true);
         env.setHistoryEnabled(globalOn);
         
@@ -164,7 +164,7 @@ private void testPerProjectHistory(boolean globalOn) throws IndexerException, IO
             assertNotNull(HistoryGuru.getInstance().getHistory(fileInRepo));
         }
         
-        IOUtils.removeRecursive(dataRoot.toPath());
+        IOUtils.removeRecursive(dataRoot);
     }
     
     /**

File: src/org/opensolaris/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -115,8 +115,7 @@ protected byte[] applyMessage(RuntimeEnvironment env) throws Exception {
                     File projDir = new File(srcRoot, projectName);
 
                     if (!env.getProjects().containsKey(projectName)) {
-                        Project project = new Project(projectName, "/" + projectName);
-                        project.setTabSize(env.getConfiguration().getTabSize());
+                        Project project = new Project(projectName, "/" + projectName, env.getConfiguration());
 
                         // Add repositories in this project.
                         List<RepositoryInfo> repos = getRepositoriesInDir(env, projDir);

File: opengrok-indexer/src/test/java/org/opengrok/index/IndexerRepoTest.java
Patch:
@@ -102,7 +102,7 @@ private void checkNumberOfThreads() {
      * Test it is possible to disable history per project.
      * @throws IndexerException
      * @throws IOException
-     * @throws org.opensolaris.opengrok.history.HistoryException
+     * @throws org.opengrok.history.HistoryException
      */
     @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
     @ConditionalRun(RepositoryInstalled.GitInstalled.class)
@@ -115,7 +115,7 @@ public void testPerProjectHistoryGlobalOn() throws IndexerException, IOException
      * Test it is possible to enable history per project.
      * @throws IndexerException
      * @throws IOException
-     * @throws org.opensolaris.opengrok.history.HistoryException
+     * @throws org.opengrok.history.HistoryException
      */
     @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
     @ConditionalRun(RepositoryInstalled.GitInstalled.class)

File: opengrok-indexer/src/main/java/org/opengrok/history/AccuRevAnnotationParser.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -30,8 +30,8 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code accurev annotate} command

File: opengrok-indexer/src/main/java/org/opengrok/history/BazaarTagParser.java
Patch:
@@ -20,14 +20,14 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.TreeSet;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code bzr tags} command

File: opengrok-indexer/src/main/java/org/opengrok/history/CVSAnnotationParser.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -31,8 +31,8 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code cvs annotate} command

File: opengrok-indexer/src/main/java/org/opengrok/history/ClearCaseAnnotationParser.java
Patch:
@@ -20,13 +20,13 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code cleartool annotate}

File: opengrok-indexer/src/main/java/org/opengrok/history/GitTagParser.java
Patch:
@@ -20,15 +20,15 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Date;
 import java.util.TreeSet;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code git log} command

File: opengrok-indexer/src/main/java/org/opengrok/history/MercurialTagParser.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -29,8 +29,8 @@
 import java.util.TreeSet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code hg tags} command

File: opengrok-indexer/src/main/java/org/opengrok/history/MonotoneAnnotationParser.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -29,7 +29,7 @@
 import java.io.InputStreamReader;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.util.Executor;
 
 /**
  * Handles handles parsing the output of the {@code mnt annotate} command

File: opengrok-indexer/src/main/java/org/opengrok/history/PerforceAnnotationParser.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -33,8 +33,8 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing the output of the {@code p4 annotate} command

File: opengrok-indexer/src/main/java/org/opengrok/history/PerforceRepository.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.logging.Logger;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opengrok.configuration.RuntimeEnvironment;
 
 import org.opengrok.logger.LoggerFactory;
 import org.opengrok.util.Executor;

File: opengrok-indexer/src/main/java/org/opengrok/history/SCCSRepositoryAnnotationParser.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -32,8 +32,8 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * handles parsing into Annotation object.

File: opengrok-indexer/src/main/java/org/opengrok/index/PendingSymlinkage.java
Patch:
@@ -20,8 +20,7 @@
 /*
  * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
-
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 /**
  * Represents the metadata for a pending symbolic linkage.

File: opengrok-indexer/src/main/java/org/opengrok/web/Util.java
Patch:
@@ -39,7 +39,6 @@
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLEncoder;
-import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;

File: opengrok-indexer/src/main/java/org/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -226,7 +226,7 @@ protected byte[] applyMessage(RuntimeEnvironment env) throws Exception {
                         List<RepositoryInfo> riList = env.getProjectRepositoriesMap().get(project);
                         if (riList != null) {
                             for (RepositoryInfo ri : riList) {
-                                Repository repo = getRepository(ri);
+                                Repository repo = getRepository(ri, false);
 
                                 if (repo != null && repo.getCurrentVersion() != null &&
                                     repo.getCurrentVersion().length() > 0) {

File: opengrok-indexer/src/main/java/org/opengrok/history/Annotation.java
Patch:
@@ -48,9 +48,9 @@ public class Annotation {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Annotation.class);
 
-    private final List<Line> lines = new ArrayList<Line>();
-    private final Map<String, String> desc = new HashMap<String, String>();
-    private final Map<String, Integer> fileVersions = new HashMap<String, Integer>(); //maps revision to file version
+    private final List<Line> lines = new ArrayList<>();
+    private final Map<String, String> desc = new HashMap<>();
+    private final Map<String, Integer> fileVersions = new HashMap<>(); // maps revision to file version
     private int widestRevision;
     private int widestAuthor;
     private final String filename;

File: opengrok-indexer/src/main/java/org/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -103,8 +103,8 @@ History parse(File file, String changeset) throws HistoryException {
     }
 
     /**
-     * Process the output from the hg log command and insert the HistoryEntries
-     * into the history field.
+     * Process the output from the {@code hg log} command and collect
+     * {@link HistoryEntry} elements.
      *
      * @param input The output from the process
      * @throws java.io.IOException If an error occurs while reading the stream

File: opengrok-indexer/src/main/java/org/opengrok/history/PerforceHistoryParser.java
Patch:
@@ -54,7 +54,7 @@ public class PerforceHistoryParser {
     History parse(File file, Repository repos) throws HistoryException {
         History history;
 
-        if (!PerforceRepository.isInP4Depot(file)) {
+        if (!PerforceRepository.isInP4Depot(file, false)) {
             return null;
         }
 

File: opengrok-indexer/src/main/java/org/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -146,7 +146,7 @@ private void initSaxParser() throws HistoryException {
      * @return object representing the file's history
      */
     History parse(File file, SubversionRepository repos, String sinceRevision,
-            int numEntries)
+            int numEntries, boolean interactive)
             throws HistoryException {
 
         initSaxParser();
@@ -157,7 +157,7 @@ History parse(File file, SubversionRepository repos, String sinceRevision,
         Executor executor;
         try {
             executor = repos.getHistoryLogExecutor(file, sinceRevision,
-                    numEntries);
+                    numEntries, interactive);
         } catch (IOException e) {
             throw new HistoryException("Failed to get history for: \"" +
                     file.getAbsolutePath() + "\"", e);

File: opengrok-indexer/src/main/java/org/opengrok/index/IgnoredFiles.java
Patch:
@@ -54,7 +54,7 @@ public final class IgnoredFiles extends Filter {
         ".sln",
         ".vsmdi", // Visual Studio tests
         "*.dll",
-        ".opengrok_skip_history",
+        "*.DLL",
     };
 
     public IgnoredFiles() {

File: opengrok-indexer/src/main/java/org/opengrok/index/PendingFileRenaming.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opengrok.index;
@@ -30,8 +30,8 @@ public final class PendingFileRenaming {
     private final String absolutePath;
     private final String transientPath;
 
-    public PendingFileRenaming(String path, String transientPath) {
-        this.absolutePath = path;
+    public PendingFileRenaming(String absolutePath, String transientPath) {
+        this.absolutePath = absolutePath;
         this.transientPath = transientPath;
     }
 

File: opengrok-indexer/src/main/java/org/opengrok/web/Scripts.java
Patch:
@@ -122,11 +122,11 @@ public String toHtml() {
      */
     static {
         SCRIPTS.put("jquery", new FileScript("js/jquery-3.2.0.min.js", 10));
-        SCRIPTS.put("jquery-ui", new FileScript("js/jquery-ui-1.12.0-custom.min.js", 11));
+        SCRIPTS.put("jquery-ui", new FileScript("js/jquery-ui-1.12.1-custom.min.js", 11));
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.21.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.22.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
     }

File: opengrok-indexer/src/test/java/org/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -200,9 +200,6 @@ public void run() {
     public void testUrlPrefix() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
         assertEquals("/source/s?", instance.getUrlPrefix());
-        String prefix = "/opengrok/s?";
-        instance.setUrlPrefix(prefix);
-        assertEquals(prefix, instance.getUrlPrefix());
     }
 
     @Test

File: opengrok-indexer/src/test/java/org/opengrok/configuration/messages/ProjectMessageTest.java
Patch:
@@ -86,6 +86,7 @@ public void setUp() throws IOException {
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
         env.setProjectsEnabled(true);
+        env.setHistoryEnabled(true);
         RepositoryFactory.initializeIgnoredNames(env);
     }
 
@@ -304,7 +305,7 @@ public void testDelete() throws Exception {
         // When 'indexpart' is run, this is called from setConfiguration() because
         // of the -R option is present.
         HistoryGuru.getInstance().invalidateRepositories(
-            env.getRepositories());
+            env.getRepositories(), null, false);
         env.setHistoryEnabled(true);
         Indexer.getInstance().prepareIndexer(
                 env,

File: opengrok-indexer/src/test/java/org/opengrok/history/GitHistoryParserTest.java
Patch:
@@ -60,7 +60,7 @@ public static void tearDownClass() throws Exception {
 
     @Before
     public void setUp() {
-        instance = new GitHistoryParser();
+        instance = new GitHistoryParser(false);
     }
 
     @After

File: opengrok-indexer/src/test/java/org/opengrok/index/IndexerTest.java
Patch:
@@ -247,7 +247,7 @@ public void testIndexWithSetIndexVersionedFilesOnly() throws Exception {
         Repository r = null;
         for (RepositoryInfo ri : repos) {
             if (ri.getDirectoryName().equals(repository.getSourceRoot() + "/rfe2575")) {
-                r = RepositoryFactory.getRepository(ri);
+                r = RepositoryFactory.getRepository(ri, false);
                 break;
             }
         }

File: opengrok-web/src/main/java/org/opengrok/web/WebappListener.java
Patch:
@@ -69,9 +69,9 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             LOGGER.severe("CONFIGURATION section missing in web.xml");
         } else {
             try {
-                env.readConfiguration(new File(config));
+                env.readConfiguration(new File(config), true);
             } catch (IOException ex) {
-                LOGGER.log(Level.WARNING, "OpenGrok Configuration error. Failed to read config file: ", ex);
+                LOGGER.log(Level.WARNING, "Configuration error. Failed to read config file: ", ex);
             }
         }
 

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -161,6 +161,8 @@ public static Repository getRepository(File file, boolean interactive)
                     repo.buildTagList(file, interactive);
                 }
 
+                repo.fillFromProject();
+                
                 break;
             }
         }

File: src/org/opensolaris/opengrok/index/IgnoredFiles.java
Patch:
@@ -55,7 +55,6 @@ public final class IgnoredFiles extends Filter {
         ".vsmdi", // Visual Studio tests
         "*.dll",
         "*.DLL",
-        ".opengrok_skip_history",
     };
 
     public IgnoredFiles() {

File: test/org/opensolaris/opengrok/configuration/messages/ProjectMessageTest.java
Patch:
@@ -86,6 +86,7 @@ public void setUp() throws IOException {
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
         env.setProjectsEnabled(true);
+        env.setHistoryEnabled(true);
         RepositoryFactory.initializeIgnoredNames(env);
     }
 

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -281,7 +281,7 @@ public static void main(String argv[]) {
                 try {
                 m.write(host, port);
                 } catch (ConnectException ce) {
-                    LOGGER.log(Level.SEVERE, "Misconfig of webapp host or port", ce);
+                    LOGGER.log(Level.SEVERE, "Mis-configuration of webapp host or port", ce);
                     System.err.println("Couldn't notify the webapp (and host or port set): " + ce.getLocalizedMessage());
                 }
             }

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -200,9 +200,6 @@ public void run() {
     public void testUrlPrefix() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
         assertEquals("/source/s?", instance.getUrlPrefix());
-        String prefix = "/opengrok/s?";
-        instance.setUrlPrefix(prefix);
-        assertEquals(prefix, instance.getUrlPrefix());
     }
 
     @Test

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -200,9 +200,6 @@ public void run() {
     public void testUrlPrefix() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
         assertEquals("/source/s?", instance.getUrlPrefix());
-        String prefix = "/opengrok/s?";
-        instance.setUrlPrefix(prefix);
-        assertEquals(prefix, instance.getUrlPrefix());
     }
 
     @Test

File: src/org/opensolaris/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -226,7 +226,7 @@ protected byte[] applyMessage(RuntimeEnvironment env) throws Exception {
                         List<RepositoryInfo> riList = env.getProjectRepositoriesMap().get(project);
                         if (riList != null) {
                             for (RepositoryInfo ri : riList) {
-                                Repository repo = getRepository(ri);
+                                Repository repo = getRepository(ri, false);
 
                                 if (repo != null && repo.getCurrentVersion() != null &&
                                     repo.getCurrentVersion().length() > 0) {

File: src/org/opensolaris/opengrok/history/Annotation.java
Patch:
@@ -49,9 +49,9 @@ public class Annotation {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Annotation.class);
 
-    private final List<Line> lines = new ArrayList<Line>();
-    private final Map<String, String> desc = new HashMap<String, String>();
-    private final Map<String, Integer> fileVersions = new HashMap<String, Integer>(); //maps revision to file version
+    private final List<Line> lines = new ArrayList<>();
+    private final Map<String, String> desc = new HashMap<>();
+    private final Map<String, Integer> fileVersions = new HashMap<>(); // maps revision to file version
     private int widestRevision;
     private int widestAuthor;
     private final String filename;

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -103,8 +103,8 @@ History parse(File file, String changeset) throws HistoryException {
     }
 
     /**
-     * Process the output from the hg log command and insert the HistoryEntries
-     * into the history field.
+     * Process the output from the {@code hg log} command and collect
+     * {@link HistoryEntry} elements.
      *
      * @param input The output from the process
      * @throws java.io.IOException If an error occurs while reading the stream

File: src/org/opensolaris/opengrok/history/PerforceHistoryParser.java
Patch:
@@ -54,7 +54,7 @@ public class PerforceHistoryParser {
     History parse(File file, Repository repos) throws HistoryException {
         History history;
 
-        if (!PerforceRepository.isInP4Depot(file)) {
+        if (!PerforceRepository.isInP4Depot(file, false)) {
             return null;
         }
 

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -146,7 +146,7 @@ private void initSaxParser() throws HistoryException {
      * @return object representing the file's history
      */
     History parse(File file, SubversionRepository repos, String sinceRevision,
-            int numEntries)
+            int numEntries, boolean interactive)
             throws HistoryException {
 
         initSaxParser();
@@ -157,7 +157,7 @@ History parse(File file, SubversionRepository repos, String sinceRevision,
         Executor executor;
         try {
             executor = repos.getHistoryLogExecutor(file, sinceRevision,
-                    numEntries);
+                    numEntries, interactive);
         } catch (IOException e) {
             throw new HistoryException("Failed to get history for: \"" +
                     file.getAbsolutePath() + "\"", e);

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -222,7 +222,7 @@ public static void main(String argv[]) {
             }
 
             // Set updated configuration in RuntimeEnvironment.
-            env.setConfiguration(cfg, subFilesList);
+            env.setConfiguration(cfg, subFilesList, false);
 
             // Let repository types to add items to ignoredNames.
             // This changes env so is called after the setConfiguration()

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -69,9 +69,9 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             LOGGER.severe("CONFIGURATION section missing in web.xml");
         } else {
             try {
-                env.readConfiguration(new File(config));
+                env.readConfiguration(new File(config), true);
             } catch (IOException ex) {
-                LOGGER.log(Level.WARNING, "OpenGrok Configuration error. Failed to read config file: ", ex);
+                LOGGER.log(Level.WARNING, "Configuration error. Failed to read config file: ", ex);
             }
         }
 

File: test/org/opensolaris/opengrok/configuration/messages/ProjectMessageTest.java
Patch:
@@ -304,7 +304,7 @@ public void testDelete() throws Exception {
         // When 'indexpart' is run, this is called from setConfiguration() because
         // of the -R option is present.
         HistoryGuru.getInstance().invalidateRepositories(
-            env.getRepositories());
+            env.getRepositories(), null, false);
         env.setHistoryEnabled(true);
         Indexer.getInstance().prepareIndexer(
                 env,

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -247,7 +247,7 @@ public void testIndexWithSetIndexVersionedFilesOnly() throws Exception {
         Repository r = null;
         for (RepositoryInfo ri : repos) {
             if (ri.getDirectoryName().equals(repository.getSourceRoot() + "/rfe2575")) {
-                r = RepositoryFactory.getRepository(ri);
+                r = RepositoryFactory.getRepository(ri, false);
                 break;
             }
         }

File: src/org/opensolaris/opengrok/index/PendingFileRenaming.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.index;
@@ -30,8 +30,8 @@ public final class PendingFileRenaming {
     private final String absolutePath;
     private final String transientPath;
 
-    public PendingFileRenaming(String path, String transientPath) {
-        this.absolutePath = path;
+    public PendingFileRenaming(String absolutePath, String transientPath) {
+        this.absolutePath = absolutePath;
         this.transientPath = transientPath;
     }
 

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
-  * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
   * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
   */
 package org.opensolaris.opengrok.configuration;
@@ -654,7 +654,7 @@ public boolean validateExuberantCtags() {
             Executor executor = new Executor(new String[]{getCtags(), "--version"});
             executor.exec(false);
             String output = executor.getOutputString();
-            boolean isUnivCtags = output!=null?output.contains("Universal Ctags"):false;
+            boolean isUnivCtags = output != null && output.contains("Universal Ctags");
             if (output == null || (!output.contains("Exuberant Ctags") && !isUnivCtags)) {
                 LOGGER.log(Level.SEVERE, "Error: No Exuberant Ctags found in PATH !\n"
                         + "(tried running " + "{0}" + ")\n"

File: src/org/opensolaris/opengrok/index/IndexAnalysisSettings.java
Patch:
@@ -36,6 +36,7 @@
  * re-compared upon each indexing run since changes to them might require
  * re-indexing particular files or in certain cases all files.
  */
+@Deprecated
 public final class IndexAnalysisSettings implements Serializable {
 
     private static final long serialVersionUID = 1005610724146719938L;

File: src/org/opensolaris/opengrok/search/QueryBuilder.java
Patch:
@@ -69,6 +69,7 @@ public class QueryBuilder {
     public static final String DATE = "date";
     public static final String OBJUID = "objuid"; // object UID
     public static final String OBJSER = "objser"; // object serialized
+    public static final String OBJVER = "objver"; // object version
 
     /** Used for paths, so SHA-1 is completely sufficient */
     private static final String DIRPATH_HASH_ALGORITHM = "SHA-1";

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -131,7 +131,8 @@ public boolean isEmpty() {
      * the {@code limit} argument will not be interpreted w.r.t.
      * {@link RuntimeEnvironment#isQuickContextScan()}.
      * @param tabSize optional positive tab size that must accord with the value
-     * used when indexing
+     * used when indexing or else postings may be wrongly shifted until
+     * re-indexing
      * @return Did it get any matching context?
      */
     public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,

File: test/org/opensolaris/opengrok/condition/ConditionalRun.java
Patch:
@@ -40,5 +40,6 @@
 @Documented
 public @interface ConditionalRun {
 
-    Class<? extends RunCondition> condition();
+    Class<? extends RunCondition> value();
+
 }

File: test/org/opensolaris/opengrok/history/GitRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
@@ -49,7 +49,7 @@
  *
  * @author austvik
  */
-@ConditionalRun(condition = RepositoryInstalled.GitInstalled.class)
+@ConditionalRun(RepositoryInstalled.GitInstalled.class)
 public class GitRepositoryTest {
 
     @Rule

File: test/org/opensolaris/opengrok/history/MercurialRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
@@ -48,7 +48,7 @@
 /**
  * Tests for MercurialRepository.
  */
-@ConditionalRun(condition = RepositoryInstalled.MercurialInstalled.class)
+@ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
 public class MercurialRepositoryTest {
 
     @Rule

File: test/org/opensolaris/opengrok/web/PageConfigTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
 
@@ -102,7 +102,7 @@ public void testRequestAttributes() {
         }
     }
 
-    @ConditionalRun(condition = RepositoryInstalled.MercurialInstalled.class)
+    @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
     @Test
     public void canProcessHistory() {
         // Expect no redirection (that is, empty string is returned) for a
@@ -305,7 +305,7 @@ public String getParameter(String name) {
     }
 
     @Test
-    @ConditionalRun(condition = RepositoryInstalled.GitInstalled.class)
+    @ConditionalRun(RepositoryInstalled.GitInstalled.class)
     public void testGetAnnotation() {
         final String[] revisions = {"aa35c258", "bb74b7e8"};
 

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexAnalysisSettings2.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexAnalysisSettingsUpgrader.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.IOException;
 

File: opengrok-indexer/src/test/java/org/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -62,7 +62,7 @@
 import org.opengrok.condition.ConditionalRunRule;
 import org.opengrok.condition.CtagsInstalled;
 import org.opengrok.configuration.RuntimeEnvironment;
-import static org.opensolaris.opengrok.util.CustomAssertions.assertLinesEqual;
+import static org.opengrok.util.CustomAssertions.assertLinesEqual;
 import org.opengrok.util.TestRepository;
 import org.xml.sax.InputSource;
 

File: opengrok-indexer/src/test/java/org/opengrok/analysis/clojure/ClojureAnalyzerFactoryTest.java
Patch:
@@ -50,7 +50,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-import static org.opensolaris.opengrok.analysis.AnalyzerGuru.string_ft_nstored_nanalyzed_norms;
+import static org.opengrok.analysis.AnalyzerGuru.string_ft_nstored_nanalyzed_norms;
 
 /**
  * @author Farid Zakaria

File: opengrok-indexer/src/test/java/org/opengrok/condition/CtagsInstalled.java
Patch:
@@ -20,9 +20,9 @@
 /*
  * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.condition;
+package org.opengrok.condition;
 
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opengrok.configuration.RuntimeEnvironment;
 
 public class CtagsInstalled implements RunCondition {
 

File: opengrok-indexer/src/test/java/org/opengrok/index/IndexAnalysisSettings2Test.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -30,7 +30,7 @@
 import static org.junit.Assert.assertNotNull;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.opensolaris.opengrok.search.QueryBuilder;
+import org.opengrok.search.QueryBuilder;
 
 /**
  * Represents a test class for {@link IndexAnalysisSettings2}.

File: opengrok-indexer/src/test/java/org/opengrok/index/IndexAnalysisSettingsUpgraderTest.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.IOException;
 import java.util.Map;
@@ -31,7 +31,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
-import org.opensolaris.opengrok.analysis.AnalyzerGuru;
+import org.opengrok.analysis.AnalyzerGuru;
 
 /**
  * Represents a test container for {@link IndexAnalysisSettingsUpgrader}.

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -286,6 +286,9 @@ public static void main(String argv[]) {
                 }
             }
 
+            LOGGER.log(Level.INFO, "Indexer version {0} ({1})",
+                    new Object[]{ Info.getVersion(), Info.getRevision()});
+            
             // Get history first.
             getInstance().prepareIndexer(env, searchRepositories, addProjects,
                     defaultProjects,

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
-  * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+  * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
   * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
   */
 package org.opensolaris.opengrok.configuration;
@@ -654,7 +654,7 @@ public boolean validateExuberantCtags() {
             Executor executor = new Executor(new String[]{getCtags(), "--version"});
             executor.exec(false);
             String output = executor.getOutputString();
-            boolean isUnivCtags = output!=null?output.contains("Universal Ctags"):false;
+            boolean isUnivCtags = output != null && output.contains("Universal Ctags");
             if (output == null || (!output.contains("Exuberant Ctags") && !isUnivCtags)) {
                 LOGGER.log(Level.SEVERE, "Error: No Exuberant Ctags found in PATH !\n"
                         + "(tried running " + "{0}" + ")\n"

File: test/org/opensolaris/opengrok/condition/ConditionalRun.java
Patch:
@@ -40,5 +40,6 @@
 @Documented
 public @interface ConditionalRun {
 
-    Class<? extends RunCondition> condition();
+    Class<? extends RunCondition> value();
+
 }

File: test/org/opensolaris/opengrok/history/GitRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
@@ -49,7 +49,7 @@
  *
  * @author austvik
  */
-@ConditionalRun(condition = RepositoryInstalled.GitInstalled.class)
+@ConditionalRun(RepositoryInstalled.GitInstalled.class)
 public class GitRepositoryTest {
 
     @Rule

File: test/org/opensolaris/opengrok/history/MercurialRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
@@ -48,7 +48,7 @@
 /**
  * Tests for MercurialRepository.
  */
-@ConditionalRun(condition = RepositoryInstalled.MercurialInstalled.class)
+@ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
 public class MercurialRepositoryTest {
 
     @Rule

File: test/org/opensolaris/opengrok/web/PageConfigTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
 
@@ -102,7 +102,7 @@ public void testRequestAttributes() {
         }
     }
 
-    @ConditionalRun(condition = RepositoryInstalled.MercurialInstalled.class)
+    @ConditionalRun(RepositoryInstalled.MercurialInstalled.class)
     @Test
     public void canProcessHistory() {
         // Expect no redirection (that is, empty string is returned) for a
@@ -305,7 +305,7 @@ public String getParameter(String name) {
     }
 
     @Test
-    @ConditionalRun(condition = RepositoryInstalled.GitInstalled.class)
+    @ConditionalRun(RepositoryInstalled.GitInstalled.class)
     public void testGetAnnotation() {
         final String[] revisions = {"aa35c258", "bb74b7e8"};
 

File: src/org/opensolaris/opengrok/index/PendingFileRenaming.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.index;
@@ -30,8 +30,8 @@ public final class PendingFileRenaming {
     private final String absolutePath;
     private final String transientPath;
 
-    public PendingFileRenaming(String path, String transientPath) {
-        this.absolutePath = path;
+    public PendingFileRenaming(String absolutePath, String transientPath) {
+        this.absolutePath = absolutePath;
         this.transientPath = transientPath;
     }
 

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -1740,7 +1740,7 @@ public static String linkifyPattern(String text, Pattern pattern, String name, S
             String buildLink = buildLink(name, url, true);
             return pattern.matcher(text).replaceAll(buildLink);
         } catch (URISyntaxException | MalformedURLException ex) {
-            LOGGER.log(Level.WARNING, "The given URL '{0}' is not valid", url);
+            LOGGER.log(Level.WARNING, "The given URL ''{0}'' is not valid", url);
             return text;
         }
     }

File: plugins/src/opengrok/auth/plugin/LdapUserPlugin.java
Patch:
@@ -114,7 +114,7 @@ public void fillSession(HttpServletRequest req, User user) {
         String filter = getFilter(user);
         if ((records = getLdapProvider().lookupLdapContent(null, filter,
                 new String[]{"uid", "mail", "ou"})) == null) {
-            LOGGER.log(Level.WARNING, "failed to get LDAP contents for user '{0}' with filter '{1}'",
+            LOGGER.log(Level.WARNING, "failed to get LDAP contents for user ''{0}'' with filter ''{1}''",
                     new Object[]{user, filter});
             return;
         }

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexVersion.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.File;
 import java.io.IOException;
@@ -31,7 +31,7 @@
 import org.apache.lucene.store.LockFactory;
 import org.apache.lucene.store.NativeFSLockFactory;
 import org.apache.lucene.util.Version;
-import org.opensolaris.opengrok.configuration.Configuration;
+import org.opengrok.configuration.Configuration;
 
 /**
  * Index version checker

File: opengrok-indexer/src/main/java/org/opengrok/util/OptionParser.java
Patch:
@@ -784,7 +784,7 @@ public String getManPage() throws IOException {
         StringWriter wrt = new StringWriter();
         PrintWriter out = new PrintWriter(wrt);
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(
-                     getClass().getResourceAsStream("/org/opengrok/index/opengrok.xml"), "US-ASCII"))) {
+                     getClass().getResourceAsStream("/manpage/opengrok.xml"), "US-ASCII"))) {
             spool(reader, out, "___INSERT_DATE___");
             out.print("<refmiscinfo class=\"date\">");
             out.print(DateFormat.getDateInstance(DateFormat.MEDIUM).format(new Date()));

File: opengrok-indexer/src/main/java/org/opengrok/Info.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok;
+package org.opengrok;
 
 import java.io.IOException;
 import java.io.InputStream;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/AnalyzerGuruHelp.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.util.ArrayList;
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/CtagsValidator.java
Patch:
@@ -21,13 +21,13 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.ObjectValidator;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.ObjectValidator;
 
 public final class CtagsValidator implements ObjectValidator<Ctags> {
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/Definitions.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/DisjointSpanChangedEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an event raised when a language lexer indicates that a disjoint

File: opengrok-indexer/src/main/java/org/opengrok/analysis/EmphasisHint.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents a hint from a language lexer for emphasis of non-symbolic

File: opengrok-indexer/src/main/java/org/opengrok/analysis/FileAnalyzerFactory.java
Patch:
@@ -18,17 +18,17 @@
  */
 
 /*
- * Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
-import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
+import org.opengrok.analysis.FileAnalyzer.Genre;
 
 /**
  * Factory class which creates a {@code FileAnalyzer} object and

File: opengrok-indexer/src/main/java/org/opengrok/analysis/HistoryAnalyzer.java
Patch:
@@ -18,17 +18,17 @@
  */
 
 /*
- * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.StopFilter;
 import org.apache.lucene.analysis.CharArraySet;
 import org.apache.lucene.analysis.LowerCaseFilter;
 import org.apache.lucene.analysis.TokenStream;
-import org.opensolaris.opengrok.analysis.plain.PlainFullTokenizer;
+import org.opengrok.analysis.plain.PlainFullTokenizer;
 
 public final class HistoryAnalyzer extends Analyzer {
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/IteratorReader.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/JFlexJointLexer.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/JFlexLexer.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.io.Reader;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/JFlexStackingLexer.java
Patch:
@@ -18,12 +18,12 @@
  */
 
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/JFlexStateStacker.java
Patch:
@@ -18,12 +18,12 @@
  */
 
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.util.Stack;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -18,10 +18,10 @@
  */
 
  /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import org.apache.lucene.analysis.Tokenizer;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/LinkageMatchedEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an event raised when a symbol matcher matches a string that

File: opengrok-indexer/src/main/java/org/opengrok/analysis/LinkageType.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents a linkage type indicator from a language lexer for categorizing

File: opengrok-indexer/src/main/java/org/opengrok/analysis/NonSymbolMatchedListener.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an API for a listener for non-symbolic or non-indexed symbol

File: opengrok-indexer/src/main/java/org/opengrok/analysis/OGKTextField.java
Patch:
@@ -9,7 +9,7 @@
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.Reader;
 import org.apache.lucene.analysis.TokenStream;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/OGKTextVecField.java
Patch:
@@ -9,7 +9,7 @@
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.Reader;
 import org.apache.lucene.analysis.TokenStream;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/PathTokenizer.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.util.Arrays;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/PathlikeMatchedEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an event raised when a symbol matcher matches a path-like string

File: opengrok-indexer/src/main/java/org/opengrok/analysis/PendingToken.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.util.Objects;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/PendingTokenOffsetsComparator.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.util.Comparator;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/Resettable.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an API for objects that can reset to an initial state without

File: opengrok-indexer/src/main/java/org/opengrok/analysis/ScanningSymbolMatcher.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an API for a {@link Resettable} {@link JFlexStackingLexer} that

File: opengrok-indexer/src/main/java/org/opengrok/analysis/ScopeAction.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an enumeration of changes to language scopes.

File: opengrok-indexer/src/main/java/org/opengrok/analysis/ScopeChangedEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an event raised when a language lexer indicates that scope has

File: opengrok-indexer/src/main/java/org/opengrok/analysis/Scopes.java
Patch:
@@ -18,9 +18,9 @@
  */
 
  /*
- * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/SourceCodeSeenEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an event raised when a language lexer has seen source code.

File: opengrok-indexer/src/main/java/org/opengrok/analysis/StreamSource.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/SymbolMatchedEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"
 // Answered by adamski, https://stackoverflow.com/users/127479/adamski,

File: opengrok-indexer/src/main/java/org/opengrok/analysis/SymbolMatchedListener.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"
 // Answered by adamski, https://stackoverflow.com/users/127479/adamski,

File: opengrok-indexer/src/main/java/org/opengrok/analysis/SymbolMatchedPublisher.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 // "How do I make a Class extend Observable when it has extended another class too?"
 // Answered by adamski, https://stackoverflow.com/users/127479/adamski,

File: opengrok-indexer/src/main/java/org/opengrok/analysis/TextAnalyzer.java
Patch:
@@ -18,16 +18,16 @@
  */
 
 /*
- * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Reader;
 import java.nio.charset.StandardCharsets;
-import org.opensolaris.opengrok.util.IOUtils;
+import org.opengrok.util.IOUtils;
 
 public abstract class TextAnalyzer extends FileAnalyzer {
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/TextMatchedEvent.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 /**
  * Represents an event raised when a symbol matcher matches a string that

File: opengrok-indexer/src/main/java/org/opengrok/analysis/XrefStyle.java
Patch:
@@ -18,12 +18,12 @@
  */
 
 /*
- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis;
+package org.opengrok.analysis;
 
 public class XrefStyle {
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/ada/AdaLexHelper.java
Patch:
@@ -21,11 +21,11 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.ada;
+package org.opengrok.analysis.ada;
 
 import java.io.IOException;
-import org.opensolaris.opengrok.analysis.Resettable;
-import org.opensolaris.opengrok.analysis.JFlexJointLexer;
+import org.opengrok.analysis.Resettable;
+import org.opengrok.analysis.JFlexJointLexer;
 
 /**
  * Represents an API for object's using {@link AdaLexHelper}

File: opengrok-indexer/src/main/java/org/opengrok/analysis/ada/Consts.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.ada;
+package org.opengrok.analysis.ada;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/archive/ZipMatcherBase.java
Patch:
@@ -18,15 +18,15 @@
  */
 
 /*
- * Copyright (c) 2007, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.archive;
+package org.opengrok.analysis.archive;
 
 import java.io.IOException;
 import java.io.InputStream;
-import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opengrok.analysis.FileAnalyzerFactory;
 
 /**
  * Represents an abstract base class for a ZIP archive

File: opengrok-indexer/src/main/java/org/opengrok/analysis/c/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.c;
+package org.opengrok.analysis.c;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/c/CxxConsts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.c;
+package org.opengrok.analysis.c;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/clojure/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.clojure;
+package org.opengrok.analysis.clojure;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/csharp/Consts.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
-package org.opensolaris.opengrok.analysis.csharp;
+package org.opengrok.analysis.csharp;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/document/MandocException.java
Patch:
@@ -20,7 +20,7 @@
  /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.document;
+package org.opengrok.analysis.document;
 
 /**
  * Represents an exception that occurs when mandoc exits non-zero.

File: opengrok-indexer/src/main/java/org/opengrok/analysis/eiffel/Consts.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.eiffel;
+package org.opengrok.analysis.eiffel;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/erlang/Consts.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.erlang;
+package org.opengrok.analysis.erlang;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/fortran/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.fortran;
+package org.opengrok.analysis.fortran;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/fortran/FortranUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.fortran;
+package org.opengrok.analysis.fortran;
 
 import java.util.regex.Pattern;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/golang/Consts.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.golang;
+package org.opengrok.analysis.golang;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/haskell/Consts.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.haskell;
+package org.opengrok.analysis.haskell;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/haskell/HaskellUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.haskell;
+package org.opengrok.analysis.haskell;
 
 import java.util.regex.Pattern;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/java/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.java;
+package org.opengrok.analysis.java;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/javascript/Consts.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.analysis.javascript;
+package org.opengrok.analysis.javascript;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/json/Consts.java
Patch:
@@ -18,9 +18,9 @@
  */
 
  /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.json;
+package org.opengrok.analysis.json;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/kotlin/Consts.java
Patch:
@@ -18,9 +18,9 @@
  */
 
  /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.kotlin;
+package org.opengrok.analysis.kotlin;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/lisp/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.lisp;
+package org.opengrok.analysis.lisp;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/lua/Consts.java
Patch:
@@ -18,9 +18,9 @@
  */
 
  /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.lua;
+package org.opengrok.analysis.lua;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/lua/LuaUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.lua;
+package org.opengrok.analysis.lua;
 
 /**
  * Represents a container for Lua-related utility methods.

File: opengrok-indexer/src/main/java/org/opengrok/analysis/pascal/Consts.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.pascal;
+package org.opengrok.analysis.pascal;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/pascal/PascalUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.pascal;
+package org.opengrok.analysis.pascal;
 
 import java.util.regex.Pattern;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/perl/Consts.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.perl;
+package org.opengrok.analysis.perl;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/php/Consts.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
-package org.opensolaris.opengrok.analysis.php;
+package org.opengrok.analysis.php;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/powershell/Consts.java
Patch:
@@ -18,11 +18,10 @@
  */
 
 /*
- * Copyright 2017 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.analysis.powershell;
+package org.opengrok.analysis.powershell;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/powershell/PoshUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.powershell;
+package org.opengrok.analysis.powershell;
 
 import java.util.regex.Pattern;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/python/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.python;
+package org.opengrok.analysis.python;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/python/PythonUtils.java
Patch:
@@ -21,10 +21,10 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.python;
+package org.opengrok.analysis.python;
 
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.util.RegexUtils;
+import org.opengrok.util.RegexUtils;
 
 /**
  * Represents a container for Python-related utility methods

File: opengrok-indexer/src/main/java/org/opengrok/analysis/ruby/Consts.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.ruby;
+package org.opengrok.analysis.ruby;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/rust/Consts.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2016 Nikolay Denev.
  */
 
-package org.opensolaris.opengrok.analysis.rust;
+package org.opengrok.analysis.rust;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/rust/RustUtils.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.rust;
+package org.opengrok.analysis.rust;
 
 /**
  * Represents a container for Rust-related utility methods.

File: opengrok-indexer/src/main/java/org/opengrok/analysis/scala/Consts.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.scala;
+package org.opengrok.analysis.scala;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/scala/ScalaUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.scala;
+package org.opengrok.analysis.scala;
 
 import java.util.regex.Pattern;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/sh/Consts.java
Patch:
@@ -18,12 +18,11 @@
  */
 
 /*
- * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2005, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.sh;
+package org.opengrok.analysis.sh;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/sql/Consts.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.sql;
+package org.opengrok.analysis.sql;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/sql/PLSQLConsts.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.sql;
+package org.opengrok.analysis.sql;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/sql/SQLUtils.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.analysis.sql;
+package org.opengrok.analysis.sql;
 
 import java.util.regex.Pattern;
 

File: opengrok-indexer/src/main/java/org/opengrok/analysis/swift/Consts.java
Patch:
@@ -17,11 +17,11 @@
  * CDDL HEADER END
  */
 
- /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+/*
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.swift;
+package org.opengrok.analysis.swift;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/tcl/Consts.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.analysis.tcl;
+package org.opengrok.analysis.tcl;
 
 import java.util.HashSet;
 import java.util.Set;

File: opengrok-indexer/src/main/java/org/opengrok/analysis/vb/Consts.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.analysis.vb;
+package org.opengrok.analysis.vb;
 
 import java.util.Collections;
 import java.util.HashSet;

File: opengrok-indexer/src/main/java/org/opengrok/authorization/AuthControlFlag.java
Patch:
@@ -17,10 +17,10 @@
  * CDDL HEADER END
  */
 
- /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+/*
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.authorization;
+package org.opengrok.authorization;
 
 import java.util.Arrays;
 import java.util.stream.Collectors;

File: opengrok-indexer/src/main/java/org/opengrok/configuration/ConfigMerge.java
Patch:
@@ -18,9 +18,9 @@
  */
 
  /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.configuration;
 
 import java.beans.IntrospectionException;
 import java.beans.PropertyDescriptor;
@@ -31,7 +31,7 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.text.ParseException;
-import org.opensolaris.opengrok.util.Getopt;
+import org.opengrok.util.Getopt;
 
 /**
  * Merge 2 config files together. More precisely, take the 1st as a base and

File: opengrok-indexer/src/main/java/org/opengrok/configuration/Group.java
Patch:
@@ -18,16 +18,16 @@
  */
 
  /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.configuration;
 
 import java.util.Locale;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
-import org.opensolaris.opengrok.util.ClassUtil;
+import org.opengrok.util.ClassUtil;
 
 /**
  * Placeholder for the information about subgroups of projects and repositories.

File: opengrok-indexer/src/main/java/org/opengrok/configuration/Groups.java
Patch:
@@ -18,9 +18,9 @@
  */
 
  /*
- * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.configuration;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -32,7 +32,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
-import org.opensolaris.opengrok.util.Getopt;
+import org.opengrok.util.Getopt;
 
 /**
  *

File: opengrok-indexer/src/main/java/org/opengrok/configuration/LuceneLockName.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.configuration;
 
 /**
  * Represents a container for OpenGrok's names of Lucene lock modes.

File: opengrok-indexer/src/main/java/org/opengrok/configuration/Nameable.java
Patch:
@@ -17,10 +17,10 @@
  * CDDL HEADER END
  */
 
- /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+/*
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.configuration;
 
 /**
  *

File: opengrok-indexer/src/main/java/org/opengrok/configuration/ThreadpoolSearcherFactory.java
Patch:
@@ -18,13 +18,12 @@
  */
 
  /*
-  * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+  * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved.
   */
-package org.opensolaris.opengrok.configuration;
+package org.opengrok.configuration;
 
 import java.io.IOException;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.SearcherFactory;
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/configuration/messages/Messages.java
Patch:
@@ -18,17 +18,17 @@
  */
 
 /*
- * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration.messages;
+package org.opengrok.configuration.messages;
 
 import java.io.File;
 import java.io.IOException;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
-import org.opensolaris.opengrok.util.Getopt;
+import org.opengrok.util.Getopt;
 
 public final class Messages {
 

File: opengrok-indexer/src/main/java/org/opengrok/configuration/messages/RepositoryMessage.java
Patch:
@@ -20,16 +20,16 @@
 /*
  * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.configuration.messages;
+package org.opengrok.configuration.messages;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.stream.Collectors;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.history.RepositoryInfo;
+import org.opengrok.configuration.RuntimeEnvironment;
+import org.opengrok.history.RepositoryInfo;
 
 /**
  * repository specific message

File: opengrok-indexer/src/main/java/org/opengrok/history/BazaarTagEntry.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 /**
  * Bazaar specific tag class with ability to compare itself with generic

File: opengrok-indexer/src/main/java/org/opengrok/history/BitKeeperAnnotationParser.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -26,8 +26,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * BitKeeperAnnotationParser handles parsing the output of `bk annotate` into an annotation object.

File: opengrok-indexer/src/main/java/org/opengrok/history/BitKeeperTagEntry.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.util.Date;
 

File: opengrok-indexer/src/main/java/org/opengrok/history/BitKeeperTagParser.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -29,8 +29,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.Executor;
 
 /**
  * BitKeeperTagParser handles parsing the output of `bk tags` into a set of tag entries.

File: opengrok-indexer/src/main/java/org/opengrok/history/GitTagEntry.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2012, 2015 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.util.Date;
 

File: opengrok-indexer/src/main/java/org/opengrok/history/History.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.util.ArrayList;
 import java.util.List;

File: opengrok-indexer/src/main/java/org/opengrok/history/HistoryCache.java
Patch:
@@ -18,14 +18,14 @@
  */
 
 /*
- * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.File;
 import java.util.Date;
 import java.util.Map;
-import org.opensolaris.opengrok.util.ForbiddenSymlinkException;
+import org.opengrok.util.ForbiddenSymlinkException;
 
 interface HistoryCache {
     /**

File: opengrok-indexer/src/main/java/org/opengrok/history/HistoryEntry.java
Patch:
@@ -23,14 +23,14 @@
 /*
  * Copyright 2006 Trond Norbye.  All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.util.Date;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.logger.LoggerFactory;
 
 /**
  * Collect all information of a given revision

File: opengrok-indexer/src/main/java/org/opengrok/history/HistoryException.java
Patch:
@@ -18,11 +18,10 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 /**
  * Exception thrown when retrieval or manipulation of history information

File: opengrok-indexer/src/main/java/org/opengrok/history/MercurialTagEntry.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2012, 2015 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 /**
  * Mercurial specific tag class with ability to compare itself with generic

File: opengrok-indexer/src/main/java/org/opengrok/history/PerforceHistoryParser.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -34,7 +34,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.opensolaris.opengrok.util.Executor;
+import org.opengrok.util.Executor;
 
 /**
  * Parse source history for a Perforce Repository

File: opengrok-indexer/src/main/java/org/opengrok/history/RCSHistoryParser.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -37,7 +37,7 @@
 import org.apache.commons.jrcs.rcs.Node;
 import org.apache.commons.jrcs.rcs.ParseException;
 import org.apache.commons.jrcs.rcs.Version;
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.logger.LoggerFactory;
 
 
 /**

File: opengrok-indexer/src/main/java/org/opengrok/history/RCSRepository.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.File;
 import java.io.FilenameFilter;
@@ -36,7 +36,7 @@
 import org.apache.commons.jrcs.rcs.Node;
 import org.apache.commons.jrcs.rcs.ParseException;
 import org.apache.commons.jrcs.rcs.Version;
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.logger.LoggerFactory;
 
 /**
  * Access to an RCS repository.

File: opengrok-indexer/src/main/java/org/opengrok/history/RazorHistoryParser.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
  */
 /* Portions Copyright 2008 Peter Bray */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -35,8 +35,8 @@
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.opensolaris.opengrok.logger.LoggerFactory;
-import org.opensolaris.opengrok.util.StringUtils;
+import org.opengrok.logger.LoggerFactory;
+import org.opengrok.util.StringUtils;
 
 /**
  * A History Parser for Razor

File: opengrok-indexer/src/main/java/org/opengrok/history/RazorRepository.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 /* Portions Copyright 2008 Peter Bray */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.io.BufferedInputStream;
 import java.io.File;
@@ -32,7 +32,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.zip.GZIPInputStream;
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.logger.LoggerFactory;
 
 /**
  * Adds access to to a Razor Repository

File: opengrok-indexer/src/main/java/org/opengrok/history/TagEntry.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2012, 2015 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.history;
+package org.opengrok.history;
 
 import java.util.Date;
 

File: opengrok-indexer/src/main/java/org/opengrok/index/DefaultIndexChangedListener.java
Patch:
@@ -18,12 +18,12 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.logger.LoggerFactory;
 
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: opengrok-indexer/src/main/java/org/opengrok/index/Filter.java
Patch:
@@ -18,10 +18,10 @@
  */
 
 /*
- * Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.File;
 import java.io.Serializable;

File: opengrok-indexer/src/main/java/org/opengrok/index/IgnoredDirs.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.File;
 

File: opengrok-indexer/src/main/java/org/opengrok/index/IgnoredFiles.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.File;
 

File: opengrok-indexer/src/main/java/org/opengrok/index/IgnoredNames.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.File;
 import java.io.Serializable;

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexAnalysisSettings.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexAnalysisSettingsAccessor.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 import java.io.IOException;
 import org.apache.lucene.document.Document;
@@ -37,8 +37,8 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TopDocs;
-import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
-import org.opensolaris.opengrok.search.QueryBuilder;
+import org.opengrok.analysis.CompatibleAnalyser;
+import org.opengrok.search.QueryBuilder;
 
 /**
  * Represents a data-access object for {@link IndexAnalysisSettings}.

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexChangedListener.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 /**
  * The changes in an index database may be monitored through this interface.

File: opengrok-indexer/src/main/java/org/opengrok/index/IndexerException.java
Patch:
@@ -18,10 +18,9 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 /**
  *

File: opengrok-indexer/src/main/java/org/opengrok/index/PendingFileDeletion.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 /**
  * Represents the metadata for a pending file deletion.

File: opengrok-indexer/src/main/java/org/opengrok/index/PendingFileRenaming.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.index;
+package org.opengrok.index;
 
 /**
  * Represents the metadata for a pending file renaming.

File: opengrok-indexer/src/main/java/org/opengrok/logger/LoggerFactory.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.logger;
+package org.opengrok.logger;
 
 import java.util.logging.Logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/logger/LoggerFactoryBridge.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.logger;
+package org.opengrok.logger;
 
 import java.util.logging.Logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/logger/PackageBasedLoggerFactoryBridge.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.logger;
+package org.opengrok.logger;
 
 import java.util.logging.Logger;
 

File: opengrok-indexer/src/main/java/org/opengrok/logger/formatter/FileLogFormatter.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.logger.formatter;
+package org.opengrok.logger.formatter;
 
-import org.opensolaris.opengrok.Info;
+import org.opengrok.Info;
 
 public class FileLogFormatter extends LogFormatter {
 

File: opengrok-indexer/src/main/java/org/opengrok/logger/formatter/LogFormatter.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2018 Oracle and/or its affiliates. All rights reserved.
  */
-package org.opensolaris.opengrok.logger.formatter;
+package org.opengrok.logger.formatter;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: opengrok-indexer/src/main/java/org/opengrok/search/DirectoryEntry.java
Patch:
@@ -18,11 +18,11 @@
  */
 
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.search;
+package org.opengrok.search;
 
 import java.io.File;
 

File: opengrok-indexer/src/main/java/org/opengrok/search/DirectoryExtraReader.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.search;
+package org.opengrok.search;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -34,7 +34,7 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
-import org.opensolaris.opengrok.logger.LoggerFactory;
+import org.opengrok.logger.LoggerFactory;
 
 /**
  * Represents a searcher to supplement metadata from the file-system with

File: opengrok-indexer/src/main/java/org/opengrok/search/FileExtra.java
Patch:
@@ -21,7 +21,7 @@
  * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
-package org.opensolaris.opengrok.search;
+package org.opengrok.search;
 
 /**
  * Represents supplemental, per-file data stored after OpenGrok analysis.

File: test/org/opensolaris/opengrok/search/context/ContextFormatterTest.java
Patch:
@@ -61,7 +61,7 @@ public void testLineMatchFormatted() {
         Passage p = new Passage();
         p.setStartOffset(woff);
         p.setEndOffset(woff + WORD.length());
-        p.addMatch(woff, p.getEndOffset(), new BytesRef(WORD));
+        p.addMatch(woff, p.getEndOffset(), new BytesRef(WORD),1);
         assertEquals("getNumMatches()", 1, p.getNumMatches());
 
         // First, test with contextCount==0
@@ -103,7 +103,7 @@ public void testLinesSpanningMatchFormatted() {
         Passage p = new Passage();
         p.setStartOffset(0);
         p.setEndOffset(DOC2.length());
-        p.addMatch(0, p.getEndOffset(), new BytesRef(DOC2));
+        p.addMatch(0, p.getEndOffset(), new BytesRef(DOC2),1);
         assertEquals("getNumMatches()", 1, p.getNumMatches());
 
         /**
@@ -136,7 +136,7 @@ public void testElidedMatchFormatted() {
         Passage p = new Passage();
         p.setStartOffset(woff);
         p.setEndOffset(woff + WORD.length());
-        p.addMatch(woff, p.getEndOffset(), new BytesRef(WORD));
+        p.addMatch(woff, p.getEndOffset(), new BytesRef(WORD),1);
         assertEquals("getNumMatches()", 1, p.getNumMatches());
 
         // First, test with contextCount==0

File: test/org/opensolaris/opengrok/search/context/SearchAndContextFormatterTest.java
Patch:
@@ -52,7 +52,7 @@
 import static org.opensolaris.opengrok.util.CustomAssertions.assertLinesEqual;
 
 /**
- * Represents a container for tests of {@link SearchEngine{ with
+ * Represents a container for tests of {@link SearchEngine} with
  * {@link ContextFormatter} etc.
  * <p>
  * Derived from Trond Norbye's {@code SearchEngineTest}

File: plugins/src/opengrok/auth/plugin/AbstractLdapPlugin.java
Patch:
@@ -44,7 +44,8 @@
  * </ul>
  *
  * <p>
- * The intended methods to implement are the and {@link #checkEntity(HttpServletRequest, Project)
+ * The intended methods to implement are the
+ * {@link #checkEntity(HttpServletRequest, Project)} and
  * {@link #checkEntity(HttpServletRequest, Group)}.
  * </p>
  *

File: plugins/src/opengrok/auth/plugin/entity/User.java
Patch:
@@ -79,11 +79,11 @@ public boolean isTimeouted() {
 
     /**
      * Implemented for the forced authentication as described
-     * {@link https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm#i1006381}
+     * @see <a href="https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm#i1006381">mod_osso documentation</a>
      *
      * @param forcedAuthDate the date of the forced authentication trigger
      * @param newLoginDate the date of the new login
-     * @return
+     * @return true if login date was before forced auth date or cookie timestamp
      */
     public boolean isForcedTimeouted(Date forcedAuthDate, Date newLoginDate) {
         if (cookieTimestamp == null || forcedAuthDate == null || newLoginDate == null) {

File: plugins/src/opengrok/auth/plugin/ldap/LdapFacade.java
Patch:
@@ -108,7 +108,6 @@ private interface AttributeMapper<T> {
      * Transforms the attributes to the set of strings used for authorization.
      *
      * Currently this behaves like it get all records stored in
-     * {@link #LDAP_VALUES}
      */
     private static class ContentAttributeMapper implements AttributeMapper<Map<String, Set<String>>> {
 
@@ -242,7 +241,6 @@ public boolean isConfigured() {
      * @param values match these LDAP values
      *
      * @return set of strings describing the user's attributes
-     * @see #LDAP_VALUES
      */
     @Override
     public Map<String, Set<String>> lookupLdapContent(User user, String filter, String[] values) {

File: plugins/src/opengrok/auth/plugin/ldap/LdapServer.java
Patch:
@@ -176,7 +176,7 @@ private synchronized LdapContext connect() {
      * @param cons controls for the LDAP request
      * @return LDAP enumeration with the results
      *
-     * @throws NamingException
+     * @throws NamingException naming exception
      */
     public NamingEnumeration<SearchResult> search(String name, String filter, SearchControls cons) throws NamingException {
         return search(name, filter, cons, false);
@@ -191,7 +191,7 @@ public NamingEnumeration<SearchResult> search(String name, String filter, Search
      * @param reconnected flag if the request has failed previously
      * @return LDAP enumeration with the results
      *
-     * @throws NamingException
+     * @throws NamingException naming exception
      */
     public NamingEnumeration<SearchResult> search(String name, String filter, SearchControls controls, boolean reconnected)
             throws NamingException {

File: plugins/src/opengrok/auth/plugin/util/Timestamp.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin.util;
@@ -26,7 +26,7 @@
 
 /**
  * Implementation of timestamp decoding as mentinoned in
- * {@link https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm}
+ * @see <a href="https://docs.oracle.com/cd/B28196_01/idmanage.1014/b15997/mod_osso.htm">mod_osso documentation</a>
  * in chapter 9.5.
  *
  * @author Krystof Tulinger
@@ -38,7 +38,7 @@ public class Timestamp {
      *
      * @param cookie string representing the timestamp cookie
      * @return java date object
-     * @throws NumberFormatException
+     * @throws NumberFormatException number format exception
      */
     public static Date decodeTimeCookie(String cookie) throws NumberFormatException {
         return new Date(Long.parseLong(cookie, 16) * 1000);

File: test/org/opensolaris/opengrok/analysis/archive/ZipAnalyzerFactoryTest.java
Patch:
@@ -38,7 +38,7 @@ public class ZipAnalyzerFactoryTest {
 
     /**
      * Tests a ZIP file.
-     * @throws IOException
+     * @throws IOException I/O exception
      */
     @Test
     public void testZipWrtAnalyzerGuru() throws IOException {

File: test/org/opensolaris/opengrok/analysis/c/CAnalyzerFactoryTest.java
Patch:
@@ -95,7 +95,7 @@ public static void tearDownClass() throws Exception {
     /**
      * Test of writeXref method, of class CAnalyzerFactory.
      *
-     * @throws java.lang.Exception
+     * @throws java.lang.Exception exception
      */
     @Test
     public void testScopeAnalyzer() throws Exception {

File: test/org/opensolaris/opengrok/analysis/c/CxxAnalyzerFactoryTest.java
Patch:
@@ -94,6 +94,7 @@ public static void tearDownClass() throws Exception {
 
     /**
      * Test of writeXref method, of class CAnalyzerFactory.
+     * @throws Exception exception
      */
     @Test
     public void testScopeAnalyzer() throws Exception {

File: test/org/opensolaris/opengrok/analysis/csharp/CSharpAnalyzerFactoryTest.java
Patch:
@@ -89,6 +89,7 @@ public static void tearDownClass() throws Exception {
 
     /**
      * Test of writeXref method, of class CSharpAnalyzerFactory.
+     * @throws Exception exception
      */
     @Test
     public void testScopeAnalyzer() throws Exception {

File: test/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzerFactoryTest.java
Patch:
@@ -39,7 +39,7 @@ public class JavaClassAnalyzerFactoryTest {
 
     /**
      * Tests a Java .class file.
-     * @throws IOException
+     * @throws IOException I/O exception
      */
     @Test
     public void testJavaClassWrtAnalyzerGuru() throws IOException {
@@ -56,7 +56,7 @@ public void testJavaClassWrtAnalyzerGuru() throws IOException {
 
     /**
      * Tests a dylib with spurious CAFEBABE.
-     * @throws IOException
+     * @throws IOException I/O exception
      */
     @Test
     public void testDylibCafebabeWrtAnalyzerGuru() throws IOException {

File: test/org/opensolaris/opengrok/analysis/pascal/PascalAnalyzerFactoryTest.java
Patch:
@@ -82,17 +82,17 @@ public static void setUpClass() throws Exception {
             analyzer.setCtags(new Ctags());
         }
     }
-    
+
     @AfterClass
     public static void tearDownClass() throws Exception {
         ctags.close();
         ctags = null;
     }
-    
+
     /**
      * Test of writeXref method, of class PascalAnalyzerFactory.
      *
-     * @throws java.lang.Exception
+     * @throws java.lang.Exception exception
      */
     @Test
     public void testAnalyzer() throws Exception {

File: test/org/opensolaris/opengrok/analysis/perl/PerlSymbolTokenizerTest.java
Patch:
@@ -95,6 +95,7 @@ public void testPerlWordCharDelimiters() throws Exception {
 
     /**
      * Test sample.pl v. samplesymbols.txt
+     * @throws Exception exception
      */
     @Test
     public void testPerlSymbolStream() throws Exception {

File: test/org/opensolaris/opengrok/analysis/plain/DefinitionsTokenStreamTest.java
Patch:
@@ -51,7 +51,7 @@ public class DefinitionsTokenStreamTest {
      * Tests sampleplain.cc v. sampletags_cc with no expand-tabs and
      * no supplement when ctags's pattern excerpt is insufficient w.r.t.
      * `signature'.
-     * @throws java.io.IOException
+     * @throws java.io.IOException I/O exception
      */
     @Test
     public void testCppDefinitionsForRawContentUnsupplemented()
@@ -73,7 +73,7 @@ public void testCppDefinitionsForRawContentUnsupplemented()
      * Tests sampleplain.cc v. sampletags_cc with no expand-tabs but
      * supplementing when ctags's pattern excerpt is insufficient w.r.t.
      * `signature'.
-     * @throws java.io.IOException
+     * @throws java.io.IOException I/O exception
      */
     @Test
     public void testCppDefinitionsWithRawContent1() throws IOException {
@@ -87,7 +87,7 @@ public void testCppDefinitionsWithRawContent1() throws IOException {
      * Tests sampleplain.cc v. sampletags_cc with expand-tabs and
      * supplementing when ctags's pattern excerpt is insufficient w.r.t.
      * `signature'.
-     * @throws java.io.IOException
+     * @throws java.io.IOException I/O exception
      */
     @Test
     public void testCppDefinitionsWithRawContent2() throws IOException {

File: test/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerTest.java
Patch:
@@ -81,6 +81,7 @@ public void bug806() throws IOException {
     /**
      * XML special chars inside a string were not escaped if single quotes
      * were used around the string. Bug #15859.
+     * @throws IOException I/O exception
      */
     @Test
     public void xrefWithSpecialCharsInStringLiterals() throws IOException {

File: test/org/opensolaris/opengrok/analysis/xml/XMLXrefTest.java
Patch:
@@ -43,7 +43,7 @@
 import static org.opensolaris.opengrok.util.StreamUtils.copyStream;
 
 /**
- * Tests the {@link XMLXref} class.
+ * Tests the {@code XMLXref} class.
  */
 public class XMLXrefTest {
 

File: test/org/opensolaris/opengrok/configuration/ConfigurationTest.java
Patch:
@@ -74,7 +74,7 @@ public void startElement(String uri, String localName, String qname, Attributes
 
     /**
      * Verify that encoding of Group class does  not contain transient members.
-     * @throws Exception 
+     * @throws Exception exception
      */
     @Test
     public void testTransientKeywordGroups() throws Exception {
@@ -114,7 +114,7 @@ public void testTransientKeywordGroups() throws Exception {
      * to several {@link Group}s shall be stored in a set while this
      * {@link Group} does not have a name yet (= {@code null}).
      *
-     * @throws IOException
+     * @throws IOException I/O exception
      * @see ClassUtil#remarkTransientFields(java.lang.Class)
      * ClassUtil#remarkTransientFields() for suggested solution
      */

File: test/org/opensolaris/opengrok/configuration/messages/ExpirationNormalMessageTest.java
Patch:
@@ -65,6 +65,7 @@ public void testExpirationMultiple() {
     /**
      * This doesn't make sense since we're testing the behaviour of the timer
      * thread.
+     * @throws Exception exception
      */
     @Test
     public void testExpirationConcurrent() throws Exception {

File: test/org/opensolaris/opengrok/configuration/messages/ProjectMessageTest.java
Patch:
@@ -216,6 +216,7 @@ public void testAdd() throws Exception {
     /**
      * Test that if the "add" message is applied on already existing project,
      * the repository list is refreshed.
+     * @throws Exception exception
      */
     @Test
     public void testRepositoryRefresh() throws Exception {
@@ -246,7 +247,7 @@ public void testRepositoryRefresh() throws Exception {
     /**
      * This test needs to perform indexing so that it can be verified that
      * the delete message handling performs removal of the index data.
-     * @throws Exception 
+     * @throws Exception exception
      */
     @Test
     public void testDelete() throws Exception {

File: test/org/opensolaris/opengrok/history/BazaarHistoryParserTest.java
Patch:
@@ -67,6 +67,7 @@ public void tearDown() {
 
     /**
      * Test of parse method, of class BazaarHistoryParser.
+     * @throws Exception exception
      */
     @Test
     public void parseEmpty() throws Exception {

File: test/org/opensolaris/opengrok/history/BazaarRepositoryTest.java
Patch:
@@ -71,7 +71,7 @@ public void tearDown() {
 
     /**
      * Test of parseAnnotation method, of class GitRepository.
-     * @throws java.lang.Exception
+     * @throws java.lang.Exception exception
      */
     @Test
     public void parseAnnotation() throws Exception {

File: test/org/opensolaris/opengrok/history/BitKeeperRepositoryTest.java
Patch:
@@ -48,7 +48,7 @@
 /**
  * Tests for BitKeeperRepository.
  *
- * @author James Service <jas2701@googlemail.com>
+ * @author James Service &lt;jas2701@googlemail.com&gt;
  */
 @ConditionalRun(condition = RepositoryInstalled.BitKeeperInstalled.class)
 public class BitKeeperRepositoryTest {

File: test/org/opensolaris/opengrok/history/CVSHistoryParserTest.java
Patch:
@@ -60,6 +60,7 @@ public void tearDown() {
 
     /**
      * Test of parse method, of class CVSHistoryParser.
+     * @throws Exception exception
      */
     @Test
     public void parseEmpty() throws Exception {

File: test/org/opensolaris/opengrok/history/ClearCaseHistoryParserTest.java
Patch:
@@ -61,6 +61,7 @@ public void tearDown() {
 
     /**
      * Test of parse method, of class ClearCaseHistoryParser.
+     * @throws Exception exception
      */
     @Test
     public void parseFileHistory() throws Exception {
@@ -124,6 +125,7 @@ public void parseFileHistory() throws Exception {
     
    /**
      * Test of parse method, of class ClearCaseHistoryParser.
+     * @throws Exception exception
      */
     @Test
     public void parseDirHistory() throws Exception {

File: test/org/opensolaris/opengrok/search/QueryBuilderTest.java
Patch:
@@ -36,6 +36,7 @@ public class QueryBuilderTest {
        
     /**
      * Test of setFreetext method, of class QueryBuilder.
+     * @throws ParseException parse exception
      */
     @Test
     public void testParsePath() throws ParseException {        

File: test/org/opensolaris/opengrok/search/SummarizerTest.java
Patch:
@@ -37,6 +37,7 @@ public class SummarizerTest {
      * If the last token in a text fragment is a token we're searching for,
      * and that token is also present earlier in the fragment, getSummary()
      * used to throw a StringIndexOutOfBoundsException. Bug #15858.
+     * @throws Exception exception
      */
     @Test
     public void bug15858() throws Exception {

File: test/org/opensolaris/opengrok/search/context/HistoryContextTest.java
Patch:
@@ -186,7 +186,7 @@ public void testGetContext_4args() throws Exception {
 
     /**
      * Test URI and HTML encoding of {@code writeMatch()}.
-     * @throws IOException
+     * @throws IOException I/O exception
      */
     @Test
     public void testWriteMatch() throws IOException {

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -126,9 +126,9 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.20.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.21.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
-        SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
+        SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
     }
 
     /**

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -126,9 +126,9 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.20.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.21.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
-        SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
+        SCRIPTS.put("diff", new FileScript("js/diff-0.0.3.js", 20));
     }
 
     /**

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.file.InvalidPathException;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -175,6 +176,8 @@ public void processStream(InputStream input) throws IOException {
                         } catch (ForbiddenSymlinkException e) {
                             LOGGER.log(Level.FINER, e.getMessage());
                             // ignored
+                        } catch (InvalidPathException e) {
+                            LOGGER.log(Level.WARNING, e.getMessage());
                         }
                     }
                     break;

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -30,6 +30,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.file.InvalidPathException;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -139,6 +140,8 @@ private void process(BufferedReader in) throws IOException {
                     } catch (FileNotFoundException e) { //NOPMD
                         // If the file is not located under the source root,
                         // ignore it (bug #11664).
+                    } catch (InvalidPathException e) {
+                        LOGGER.log(Level.WARNING, e.getMessage());
                     }
                 }
             }

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.file.InvalidPathException;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -150,6 +151,8 @@ public void processStream(InputStream input) throws IOException {
                         } catch (FileNotFoundException e) { // NOPMD
                             // If the file is not located under the source root,
                             // ignore it (bug #11664).
+                        } catch (InvalidPathException e) {
+                            LOGGER.log(Level.WARNING, e.getMessage());
                         }
                     }
                 }

File: src/org/opensolaris/opengrok/history/MonotoneHistoryParser.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.file.InvalidPathException;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -174,6 +175,8 @@ public void processStream(InputStream input) throws IOException {
                                 // ignore
                             } catch (FileNotFoundException e) { // NOPMD
                                 // If the file is not located under the source root, ignore it
+                            } catch (InvalidPathException e) {
+                                LOGGER.log(Level.WARNING, e.getMessage());
                             }
                         }
                     }

File: src/org/opensolaris/opengrok/util/PathUtils.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
+import java.nio.file.InvalidPathException;
 import java.nio.file.Paths;
 import java.util.Deque;
 import java.util.LinkedList;
@@ -94,10 +95,11 @@ public static String getRelativeToCanonical(String path, String canonical)
      * for portions of {@code path}
      * @throws ForbiddenSymlinkException if symbolic-link checking is active
      * and it encounters an ineligible link
+     * @throws InvalidPathException if path cannot be decoded
      */
     public static String getRelativeToCanonical(String path, String canonical,
         Set<String> allowedSymlinks)
-            throws IOException, ForbiddenSymlinkException {
+            throws IOException, ForbiddenSymlinkException, InvalidPathException {
 
         if (path.equals(canonical)) return "";
 

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -425,9 +425,9 @@ public ScoreDoc[] scoreDocs() {
     /**
      * Gets the document of the specified {@code docId} from
      * {@code search(...)} if it was called.
-     * @param docId
      * @return a defined instance if a query succeeded
-     * @throws java.io.IOException
+     * @throws java.io.IOException if an error occurs obtaining the Lucene
+     * document by ID
      */
     public Document doc(int docId) throws IOException {
         if (searcher == null) {

File: src/org/opensolaris/opengrok/search/context/LineHighlight.java
Patch:
@@ -123,7 +123,6 @@ public int getLelide() {
 
     /**
      * Sets the left elide value.
-     * @param value
      */
     public void setLelide(int value) {
         if (value < 0) {
@@ -142,7 +141,6 @@ public int getRelide() {
 
     /**
      * Sets the right elide value.
-     * @param value
      */
     public void setRelide(int value) {
         if (value < 0) {

File: src/org/opensolaris/opengrok/analysis/plain/DefinitionsTokenStream.java
Patch:
@@ -66,7 +66,7 @@ public class DefinitionsTokenStream extends TokenStream {
      * @throws IOException if I/O error occurs
      */
     public void initialize(Definitions defs, StreamSource src,
-        ReaderWrapper wrapper) throws IOException {
+            ReaderWrapper wrapper) throws IOException {
         if (defs == null) {
             throw new IllegalArgumentException("`defs' is null");
         }

File: test/org/opensolaris/opengrok/analysis/plain/DefinitionsTokenStreamTest.java
Patch:
@@ -116,7 +116,7 @@ private void testDefinitionsVsContent(boolean expandTabs,
         String source;
         try (Reader rdr = ExpandTabsReader.wrap(
                 IOUtils.createBOMStrippedReader(src.getStream(),
-                StandardCharsets.UTF_8.name()), tabSize)) {
+                    StandardCharsets.UTF_8.name()), tabSize)) {
             int c;
             while ((c = rdr.read()) != -1) {
                 bld.append((char)c);
@@ -158,8 +158,8 @@ private void testDefinitionsVsContent(boolean expandTabs,
 
             boolean cutContainsTerm = cutValue.endsWith(termValue);
             assertTrue("cut term" + count + " at " +
-                (offs.startOffset()) + "-" + (offs.endOffset()) + "["
-                + cutValue + "] vs [" + termValue + "]", cutContainsTerm);
+                (offs.startOffset()) + "-" + (offs.endOffset()) + "[" +
+                cutValue + "] vs [" + termValue + "]", cutContainsTerm);
         }
 
         assertEquals("token count", expectedCount, count);

File: src/org/opensolaris/opengrok/analysis/ExpandTabsReader.java
Patch:
@@ -110,7 +110,9 @@ public static int translate(String line, int column, int tabSize) {
         if (column > line.length()) {
             throw new IllegalArgumentException("`column' is out of bounds");
         }
-        if (tabSize < 1) return column;
+        if (tabSize < 1) {
+            return column;
+        }
 
         int newColumn = 0;
         for (int i = 0; i < column; ++i) {

File: src/org/opensolaris/opengrok/analysis/plain/DefinitionsTokenStream.java
Patch:
@@ -116,7 +116,7 @@ private void createTokens(Definitions defs, LineBreaker brk) {
             int lineno = tag.line - 1;
 
             if (lineno >= 0 && lineno < brk.count() && tag.symbol != null &&
-                tag.text != null) {
+                    tag.text != null) {
                 int lineoff = brk.getPosition(lineno);
                 if (tag.lineStart >= 0) {
                     PendingToken tok = new PendingToken(tag.symbol, lineoff +

File: test/org/opensolaris/opengrok/analysis/plain/DefinitionsTokenStreamTest.java
Patch:
@@ -115,8 +115,8 @@ private void testDefinitionsVsContent(boolean expandTabs,
         StringBuilder bld = new StringBuilder();
         String source;
         try (Reader rdr = ExpandTabsReader.wrap(
-            IOUtils.createBOMStrippedReader(src.getStream(),
-            StandardCharsets.UTF_8.name()), tabSize)) {
+                IOUtils.createBOMStrippedReader(src.getStream(),
+                StandardCharsets.UTF_8.name()), tabSize)) {
             int c;
             while ((c = rdr.read()) != -1) {
                 bld.append((char)c);

File: test/org/opensolaris/opengrok/util/StreamUtils.java
Patch:
@@ -62,12 +62,12 @@ public static byte[] copyStream(InputStream iss) throws IOException {
     }
 
     public static Definitions readTagsFromResource(String tagsResourceName)
-        throws IOException {
+            throws IOException {
         return readTagsFromResource(tagsResourceName, null);
     }
 
     public static Definitions readTagsFromResource(String tagsResourceName,
-        String rawResourceName) throws IOException {
+            String rawResourceName) throws IOException {
         return readTagsFromResource(tagsResourceName, rawResourceName, 0);
     }
 

File: test/org/opensolaris/opengrok/util/StreamUtils.java
Patch:
@@ -94,7 +94,7 @@ public static Definitions readTagsFromResource(String tagsResourceName,
                 try {
                     splitter.reset(src);
                 } catch (IOException ex) {
-                    Exceptions.printStackTrace(ex);
+                    System.err.println(ex.toString());
                     return null;
                 }
                 return splitter;

File: test/org/opensolaris/opengrok/search/context/ContextTest.java
Patch:
@@ -409,7 +409,7 @@ public void bug16848() throws Exception {
         QueryBuilder qb = new QueryBuilder().setFreetext("mixed");
         Context c = new Context(qb.build(), qb.getQueries());
         assertTrue(c.getContext(in, out, "", "", "", null, false, qb.isDefSearch(), null));
-        assertEquals("<a class=\"s\" href=\"#0\"><span class=\"l\">0</span> "
+        assertEquals("<a class=\"s\" href=\"#1\"><span class=\"l\">1</span> "
                 + "<b>Mixed</b> case: abc AbC dEf</a><br/>",
                 out.toString());
     }

File: src/org/opensolaris/opengrok/history/SCCSRepository.java
Patch:
@@ -78,7 +78,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
             return null;
         } catch (IOException ex) {
             LOGGER.log(Level.WARNING,
-                    "An error occured while getting revision", ex);
+                    "An error occurred while getting revision", ex);
             return null;
         }
     }

File: src/org/opensolaris/opengrok/search/DirectoryExtraReader.java
Patch:
@@ -71,7 +71,7 @@ public List<FileExtra> search(IndexSearcher searcher, String path)
             query = qbuild.build();
         } catch (ParseException e) {
             final String PARSE_ERROR =
-                "An error occured while parsing dirpath query";
+                "An error occurred while parsing dirpath query";
             LOGGER.log(Level.WARNING, PARSE_ERROR, e);
             throw new IOException(PARSE_ERROR);
         }

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -255,7 +255,7 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
                     }
                 }
             } catch (IOException e) {
-                LOGGER.log(Level.WARNING, "An error occured while reading data", e);
+                LOGGER.log(Level.WARNING, "An error occurred while reading data", e);
                 return anything;
             }
             if (charsRead == 0) {

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -245,7 +245,7 @@ public Xrefer writeXref(WriteXrefArgs args) throws IOException {
     }
 
     // you analyzer HAS to override this to get proper symbols in results
-    protected JFlexTokenizer symbolTokenizer;
+    protected final JFlexTokenizer symbolTokenizer;
 
     @Override
     protected TokenStreamComponents createComponents(String fieldName) {

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -88,7 +88,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
                     }
                     JavaClassAnalyzer jca =
                             (JavaClassAnalyzer) fac.getAnalyzer();
-                    jca.analyze(doc, new BufferedInputStream(zis), xrefOut,ename);
+                    jca.analyze(doc, new BufferedInputStream(zis), xrefOut);
                 }
             }
         }

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -93,11 +93,11 @@ protected JavaClassAnalyzer(FileAnalyzerFactory factory) {
     @Override
     public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOException {
         try (InputStream in = src.getStream()) {
-            analyze(doc, in, xrefOut,null);
+            analyze(doc, in, xrefOut);
         }
     }
 
-    void analyze(Document doc, InputStream in, Writer xrefOut, String extra) throws IOException {
+    void analyze(Document doc, InputStream in, Writer xrefOut) throws IOException {
         List<String> defs = new ArrayList<>();
         List<String> refs = new ArrayList<>();
         List<String> full = new ArrayList<>();

File: src/org/opensolaris/opengrok/analysis/JFlexNonXref.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis;
@@ -330,6 +330,7 @@ public String getDisjointSpanClassName() {
      */
     public void write(Writer out) throws IOException {
         this.out = out;
+        if (defs != null) defs.resetUnused();
         JFlexXrefUtils.writeSymbolTable(out, defs);
         setLineNumber(1);
         startNewLine();

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -478,6 +478,7 @@ private void disjointSpan(String className) throws IOException {
     @Override
     public void write(Writer out) throws IOException {
         this.out = out;
+        if (defs != null) defs.resetUnused();
         JFlexXrefUtils.writeSymbolTable(out, defs);
         startNewLine();
         while (matcher.yylex() != matcher.getYYEOF()) {

File: src/org/opensolaris/opengrok/index/DefaultIndexChangedListener.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.index;
 
@@ -34,7 +35,7 @@
  * @author Trond Norbye
  */
 @SuppressWarnings("PMD.SystemPrintln")
-class DefaultIndexChangedListener implements IndexChangedListener {
+public class DefaultIndexChangedListener implements IndexChangedListener {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(DefaultIndexChangedListener.class);
 

File: src/org/opensolaris/opengrok/analysis/JFlexNonXref.java
Patch:
@@ -20,7 +20,7 @@
 /*
  * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis;
@@ -330,6 +330,7 @@ public String getDisjointSpanClassName() {
      */
     public void write(Writer out) throws IOException {
         this.out = out;
+        if (defs != null) defs.resetUnused();
         JFlexXrefUtils.writeSymbolTable(out, defs);
         setLineNumber(1);
         startNewLine();

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -478,6 +478,7 @@ private void disjointSpan(String className) throws IOException {
     @Override
     public void write(Writer out) throws IOException {
         this.out = out;
+        if (defs != null) defs.resetUnused();
         JFlexXrefUtils.writeSymbolTable(out, defs);
         startNewLine();
         while (matcher.yylex() != matcher.getYYEOF()) {

File: src/org/opensolaris/opengrok/index/DefaultIndexChangedListener.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.index;
 
@@ -34,7 +35,7 @@
  * @author Trond Norbye
  */
 @SuppressWarnings("PMD.SystemPrintln")
-class DefaultIndexChangedListener implements IndexChangedListener {
+public class DefaultIndexChangedListener implements IndexChangedListener {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(DefaultIndexChangedListener.class);
 

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.StringReader;
 import java.io.Writer;
 import java.lang.reflect.InvocationTargetException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -921,7 +922,8 @@ private static String readOpening(InputStream in, byte[] sig)
 
         String encoding = IOUtils.findBOMEncoding(sig);
         if (encoding == null) {
-            encoding = "UTF-8";
+            // SRCROOT is read with UTF-8 as a default.
+            encoding = StandardCharsets.UTF_8.name();
         } else {
             int skipForBOM = IOUtils.skipForBOM(sig);
             if (in.skip(skipForBOM) < skipForBOM) {

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Locale;
@@ -54,7 +55,7 @@ private static void populateKeywordSet(Set<String> set, String file)
     {
         String line,lline;
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(
-                    Consts.class.getResourceAsStream(file), "US-ASCII"))) {
+            Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
                 lline = line.toLowerCase(Locale.US);

File: src/org/opensolaris/opengrok/analysis/sql/PLSQLConsts.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Locale;
@@ -55,7 +56,7 @@ private static void populateKeywordSet(Set<String> set, String file)
     {
         String line,lline;
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(
-                    Consts.class.getResourceAsStream(file), "US-ASCII"))) {
+            Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
                 lline = line.toLowerCase(Locale.US);

File: src/org/opensolaris/opengrok/util/IOUtils.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -219,7 +220,7 @@ public static Reader createBOMStrippedReader(InputStream stream, String defaultC
                 && head[2] == (byte) 0xBF) {
             // InputStreamReader does not properly discard BOM on UTF8 streams,
             // so don't reset the stream.
-            charset = "UTF-8";
+            charset = StandardCharsets.UTF_8.name();
         }
 
         if (charset == null) {

File: test/org/opensolaris/opengrok/analysis/c/CXrefTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis.c;
@@ -69,7 +69,7 @@ public void sampleTest() throws IOException {
         String ostr = new String(baos.toByteArray(), "UTF-8");
         String estr = new String(expbytes, "UTF-8");
         assertLinesEqual("C xref", estr, ostr);
-        assertEquals("C LOC", 52, actLOC);
+        assertEquals("C LOC", 69, actLOC);
     }
 
     private int writeCXref(InputStream iss, PrintStream oss)

File: test/org/opensolaris/opengrok/analysis/c/CxxXrefTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis.c;
@@ -68,7 +68,7 @@ public void sampleTest() throws IOException {
         String ostr = new String(baos.toByteArray(), "UTF-8");
         String estr = new String(expbytes, "UTF-8");
         assertLinesEqual("Cxx xref", estr, ostr);
-        assertEquals("Cxx LOC", 185, actLOC);
+        assertEquals("Cxx LOC", 199, actLOC);
     }
 
     private int writeCxxXref(InputStream iss, PrintStream oss)

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.StringReader;
 import java.io.Writer;
 import java.lang.reflect.InvocationTargetException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -921,7 +922,8 @@ private static String readOpening(InputStream in, byte[] sig)
 
         String encoding = IOUtils.findBOMEncoding(sig);
         if (encoding == null) {
-            encoding = "UTF-8";
+            // SRCROOT is read with UTF-8 as a default.
+            encoding = StandardCharsets.UTF_8.name();
         } else {
             int skipForBOM = IOUtils.skipForBOM(sig);
             if (in.skip(skipForBOM) < skipForBOM) {

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Locale;
@@ -54,7 +55,7 @@ private static void populateKeywordSet(Set<String> set, String file)
     {
         String line,lline;
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(
-                    Consts.class.getResourceAsStream(file), "US-ASCII"))) {
+            Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
                 lline = line.toLowerCase(Locale.US);

File: src/org/opensolaris/opengrok/analysis/sql/PLSQLConsts.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Locale;
@@ -55,7 +56,7 @@ private static void populateKeywordSet(Set<String> set, String file)
     {
         String line,lline;
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(
-                    Consts.class.getResourceAsStream(file), "US-ASCII"))) {
+            Consts.class.getResourceAsStream(file), StandardCharsets.UTF_8))) {
             while ((line = reader.readLine()) != null) {
                 line=line.trim();
                 lline = line.toLowerCase(Locale.US);

File: src/org/opensolaris/opengrok/util/IOUtils.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -219,7 +220,7 @@ public static Reader createBOMStrippedReader(InputStream stream, String defaultC
                 && head[2] == (byte) 0xBF) {
             // InputStreamReader does not properly discard BOM on UTF8 streams,
             // so don't reset the stream.
-            charset = "UTF-8";
+            charset = StandardCharsets.UTF_8.name();
         }
 
         if (charset == null) {

File: test/org/opensolaris/opengrok/analysis/c/CXrefTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis.c;
@@ -69,7 +69,7 @@ public void sampleTest() throws IOException {
         String ostr = new String(baos.toByteArray(), "UTF-8");
         String estr = new String(expbytes, "UTF-8");
         assertLinesEqual("C xref", estr, ostr);
-        assertEquals("C LOC", 52, actLOC);
+        assertEquals("C LOC", 69, actLOC);
     }
 
     private int writeCXref(InputStream iss, PrintStream oss)

File: test/org/opensolaris/opengrok/analysis/c/CxxXrefTest.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis.c;
@@ -68,7 +68,7 @@ public void sampleTest() throws IOException {
         String ostr = new String(baos.toByteArray(), "UTF-8");
         String estr = new String(expbytes, "UTF-8");
         assertLinesEqual("Cxx xref", estr, ostr);
-        assertEquals("Cxx LOC", 185, actLOC);
+        assertEquals("Cxx LOC", 199, actLOC);
     }
 
     private int writeCxxXref(InputStream iss, PrintStream oss)

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -215,7 +215,7 @@ public History getHistory(File file) throws HistoryException {
     }
 
     public History getHistory(File file, boolean withFiles) throws HistoryException {
-        return getHistory(file, true, false);
+        return getHistory(file, withFiles, false);
     }
 
     /**

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
- * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
+ * Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -215,7 +215,7 @@ public History getHistory(File file) throws HistoryException {
     }
 
     public History getHistory(File file, boolean withFiles) throws HistoryException {
-        return getHistory(file, true, false);
+        return getHistory(file, withFiles, false);
     }
 
     /**

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.index;
 
@@ -48,15 +49,13 @@ public class IndexDatabaseTest {
 
     private static TestRepository repository;
     private static IndexerParallelizer parallelizer;
-    private final static String ctagsProperty = "org.opensolaris.opengrok.analysis.Ctags";
 
     public IndexDatabaseTest() {
     }
 
     @BeforeClass
     public static void setUpClass() throws Exception {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty(ctagsProperty, "ctags"));
         assertTrue("No ctags available", env.validateExuberantCtags());
 
         repository = new TestRepository();

File: test/org/opensolaris/opengrok/index/IndexerRepoTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.index;
 
@@ -41,7 +42,6 @@
 public class IndexerRepoTest {
 
     TestRepository repository;
-    private final String ctagsProperty = "org.opensolaris.opengrok.analysis.Ctags";
 
     @Before
     public void setUp() throws IOException {
@@ -77,7 +77,6 @@ private void checkNumberOfThreads() {
     public void testMainWithH() throws IOException {
         System.out.println("Generate index by using command line options with -H");
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty(ctagsProperty, "ctags"));
         if (env.validateExuberantCtags()) {
             String[] argv = {"-S", "-H", "-s", repository.getSourceRoot(),
                 "-d", repository.getDataRoot(), "-v", "-c", env.getCtags()};
@@ -92,7 +91,6 @@ public void testMainWithH() throws IOException {
     public void testMainWithoutH() throws IOException {
         System.out.println("Generate index by using command line options without -H");
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty(ctagsProperty, "ctags"));
         if (env.validateExuberantCtags()) {
             String[] argv = {"-S", "-P", "-s", repository.getSourceRoot(),
                 "-d", repository.getDataRoot(), "-v", "-c", env.getCtags()};

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.search;
@@ -58,7 +59,6 @@ public static void setUpClass() throws Exception {
         repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty("org.opensolaris.opengrok.analysis.Ctags", "ctags"));
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
         RepositoryFactory.initializeIgnoredNames(env);

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.search;
 
@@ -60,7 +61,6 @@ public static void setUpClass() throws Exception {
         repository.create(IndexerTest.class.getResourceAsStream("source.zip"));
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty("org.opensolaris.opengrok.analysis.Ctags", "ctags"));
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
 

File: test/org/opensolaris/opengrok/web/SearchHelperTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2018, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.web;
@@ -46,7 +47,6 @@
  */
 public class SearchHelperTest {
     TestRepository repository;
-    private final String ctagsProperty = "org.opensolaris.opengrok.analysis.Ctags";
     RuntimeEnvironment env;
     
     @BeforeClass
@@ -108,7 +108,6 @@ public void testSearchAfterReindex() {
 
         env.setProjectsEnabled(true);
 
-        env.setCtags(System.getProperty(ctagsProperty, "ctags"));
         if (!env.validateExuberantCtags()) {
             System.out.println("Skipping test. Could not find a ctags I could use in path.");
             return;

File: test/org/opensolaris/opengrok/history/PerforceRepositoryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -78,7 +79,7 @@ public void testUpdate() throws Exception {
             return;
         }
         PerforceRepository instance = new PerforceRepository();
-        instance.setDirectoryName(root.getAbsolutePath());
+        instance.setDirectoryName(new File(root.getAbsolutePath()));
         instance.update();
     }
 
@@ -89,7 +90,7 @@ public void testHistoryAndAnnotations() throws Exception {
         }
 
         PerforceRepository instance = new PerforceRepository();
-        instance.setDirectoryName(root.getAbsolutePath());
+        instance.setDirectoryName(new File(root.getAbsolutePath()));
 
         for (File f : files) {
             if (instance.fileHasHistory(f)) {

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -19,6 +19,7 @@
 
  /*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.web;
 
@@ -125,7 +126,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.19.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.20.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: test/org/opensolaris/opengrok/history/PerforceRepositoryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -78,7 +79,7 @@ public void testUpdate() throws Exception {
             return;
         }
         PerforceRepository instance = new PerforceRepository();
-        instance.setDirectoryName(root.getAbsolutePath());
+        instance.setDirectoryName(new File(root.getAbsolutePath()));
         instance.update();
     }
 
@@ -89,7 +90,7 @@ public void testHistoryAndAnnotations() throws Exception {
         }
 
         PerforceRepository instance = new PerforceRepository();
-        instance.setDirectoryName(root.getAbsolutePath());
+        instance.setDirectoryName(new File(root.getAbsolutePath()));
 
         for (File f : files) {
             if (instance.fileHasHistory(f)) {

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.18.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.19.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: src/org/opensolaris/opengrok/configuration/ConfigMerge.java
Patch:
@@ -47,7 +47,7 @@ public class ConfigMerge {
      * Merge base and new configuration.
      * @param cfgBase base configuration
      * @param cfgNew new configuration, will receive properties from the base configuration
-     * @throws Exception
+     * @throws Exception exception
      */
     public static void merge(Configuration cfgBase, Configuration cfgNew) throws Exception {
         Configuration cfgDefault = new Configuration();

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -2029,6 +2029,7 @@ public void maybeRefreshIndexSearchers() {
      *
      * @param proj project
      * @return SearcherManager for given project
+     * @throws IOException I/O exception
      */
     public SuperIndexSearcher getIndexSearcher(String proj) throws IOException {
         SearcherManager mgr = searcherManagerMap.get(proj);

File: src/org/opensolaris/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -295,7 +295,7 @@ protected byte[] applyMessage(RuntimeEnvironment env) throws Exception {
     /**
      * Validate ProjectMessage.
      * Tags are project names, text is command (add/delete)
-     * @throws Exception 
+     * @throws Exception exception
      */
     @Override
     public void validate() throws Exception {

File: src/org/opensolaris/opengrok/configuration/messages/RepositoryMessage.java
Patch:
@@ -70,7 +70,7 @@ protected byte[] applyMessage(RuntimeEnvironment env) throws Exception {
     /**
      * Validate the message.
      * Tag is repository path, text is command.
-     * @throws Exception 
+     * @throws Exception exception
      */
     @Override
     public void validate() throws Exception {

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -160,7 +160,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
      * @param file file to annotate
      * @param revision revision to annotate
      * @return file annotation
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occurred
      */
     @Override
     public Annotation annotate(File file, String revision) throws IOException {

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -205,7 +205,7 @@ private static void drainStream(InputStream in) throws IOException {
      * @param file file to annotate
      * @param revision revision to annotate
      * @return file annotation
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occurred
      */
     @Override
     public Annotation annotate(File file, String revision) throws IOException {

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -299,7 +299,7 @@ public String get() {
      * @param fullpath file path
      * @param changeset changeset
      * @return original filename
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occurred
      */
     protected String findOriginalName(String fullpath, String changeset)
             throws IOException {
@@ -374,7 +374,7 @@ protected String findOriginalName(String fullpath, String changeset)
      * @param file file to annotate
      * @param revision revision to annotate
      * @return file annotation
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occurred
      */
     @Override
     public Annotation annotate(File file, String revision) throws IOException {

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -420,7 +420,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
      * @param file file to annotate
      * @param revision revision to annotate
      * @return file annotation
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occurred
      */
     @Override
     public Annotation annotate(File file, String revision) throws IOException {

File: src/org/opensolaris/opengrok/history/MonotoneRepository.java
Patch:
@@ -159,7 +159,7 @@ Executor getHistoryLogExecutor(File file, String sinceRevision)
      * @param file file to annotate
      * @param revision revision to annotate
      * @return file annotation
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occured
      */
     @Override
     public Annotation annotate(File file, String revision) throws IOException {

File: src/org/opensolaris/opengrok/history/SCCSRepository.java
Patch:
@@ -148,7 +148,7 @@ private void getAuthors(File file) throws IOException {
      * @param file file to annotate
      * @param revision revision to annotate
      * @return file annotation
-     * @throws java.io.IOException
+     * @throws java.io.IOException if I/O exception occurs
      */
     @Override
     public Annotation annotate(File file, String revision) throws IOException {

File: src/org/opensolaris/opengrok/history/TagEntry.java
Patch:
@@ -55,8 +55,8 @@ public abstract class TagEntry implements Comparable {
     /**
      * Revision number not present
      *
-     * @param revision
-     * @param tags
+     * @param revision revision number
+     * @param tags string representing tags
      */
     public TagEntry(int revision, String tags) {
         this.revision = revision;

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -1085,6 +1085,7 @@ public Set<String> getFiles() throws IOException {
     /**
      * Get number of documents in this index database.
      * @return number of documents
+     * @throws IOException if I/O exception occurred
      */
     public int getNumFiles() throws IOException {
         IndexReader ireader = null;

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -334,7 +334,7 @@ public static WebAddress parseWebAddress(String webAddr) {
      * 
      * @param argv the command line arguments
      * @return array of remaining non option arguments
-     * @throws ParseException 
+     * @throws ParseException if parsing failed
      */
     public static String[] parseOptions(String[] argv) throws ParseException {
         String[] usage = { "--help" };
@@ -786,6 +786,7 @@ private static void configureFileAnalyzer(String fileSpec, String analyzer) {
      * Write configuration to a file
      * @param env runtime environment
      * @param filename file name to write the configuration to
+     * @throws IOException if I/O exception occurred
      */
     public static void writeConfigToFile(RuntimeEnvironment env, String filename) throws IOException {
         if (filename != null) {
@@ -970,6 +971,7 @@ public void prepareIndexer(RuntimeEnvironment env,
      * @param noThreads number of threads in the pool that participate in the indexing
      * @param subFiles index just some subdirectories
      * @param progress object to receive notifications as indexer progress is made
+     * @throws IOException if I/O exception occurred
      */
     public void doIndexerExecution(final boolean update, int noThreads, List<String> subFiles,
             IndexChangedListener progress)

File: src/org/opensolaris/opengrok/util/BooleanUtil.java
Patch:
@@ -41,7 +41,6 @@ public class BooleanUtil {
      * <li>on</li>
      * <li>1</li>
      * </ul>
-     * </p>
      *
      * @param value the string value
      * @return if the value is boolean or not

File: src/org/opensolaris/opengrok/util/ClassUtil.java
Patch:
@@ -204,7 +204,7 @@ public static void invokeSetter(Object obj, String field, String value) throws I
      * @param obj the object
      * @param field string with field name
      * @return string representation of the field value
-     * @throws java.io.IOException 
+     * @throws java.io.IOException exception
      */
     public static String invokeGetter(Object obj, String field) throws IOException {
         String val = null;

File: src/org/opensolaris/opengrok/util/IOUtils.java
Patch:
@@ -185,6 +185,7 @@ public boolean accept(File dir, String name) {
      * Charset of the reader is set to UTF-8, UTF-16 or system's default.
      * @param stream input stream
      * @return reader for the stream without BOM
+     * @throws IOException if I/O exception occurred
      */
     public static Reader createBOMStrippedReader(InputStream stream) throws IOException {
         return createBOMStrippedReader(stream, Charset.defaultCharset().name());
@@ -196,6 +197,7 @@ public static Reader createBOMStrippedReader(InputStream stream) throws IOExcept
      * @param stream input stream
      * @param defaultCharset default charset
      * @return reader for the stream without BOM
+     * @throws IOException if I/O exception occurred
      */    
     public static Reader createBOMStrippedReader(InputStream stream, String defaultCharset) throws IOException {
         InputStream in = stream.markSupported() ?

File: src/org/opensolaris/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.configuration.messages;
 

File: test/org/opensolaris/opengrok/configuration/messages/ProjectMessageTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.configuration.messages;

File: src/org/opensolaris/opengrok/configuration/messages/Message.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.configuration.messages;

File: src/org/opensolaris/opengrok/configuration/messages/Messages.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.configuration.messages;

File: src/org/opensolaris/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.configuration.messages;

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -509,7 +509,8 @@ public void testJavaClassAnalyzer() throws Exception {
         };
         Document doc = new Document();
         StringWriter out = new StringWriter();
-        new JavaClassAnalyzerFactory().getAnalyzer().analyze(doc, src, out);
+        JavaClassAnalyzerFactory.DEFAULT_INSTANCE.getAnalyzer().analyze(
+            doc, src, out);
         // Used to throw SAXParseException.
         DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
                 new InputSource(new StringReader("<doc>" + out + "</doc>")));

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -485,7 +485,8 @@ public void testJavaClassAnalyzer() throws Exception {
         };
         Document doc = new Document();
         StringWriter out = new StringWriter();
-        new JavaClassAnalyzerFactory().getAnalyzer().analyze(doc, src, out);
+        JavaClassAnalyzerFactory.DEFAULT_INSTANCE.getAnalyzer().analyze(
+            doc, src, out);
         // Used to throw SAXParseException.
         DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
                 new InputSource(new StringReader("<doc>" + out + "</doc>")));

File: src/org/opensolaris/opengrok/web/HtmlConsts.java
Patch:
@@ -37,6 +37,7 @@ public class HtmlConsts {
     public static final String SPAN_FMT = "<span class=\"%s\">";
 
     public static final String AUTHOR_CLASS = "a";
+    public static final String BOLD_CLASS = "b";
     public static final String COMMENT_CLASS = "c";
     public static final String DELETED_CLASS = "d";
     public static final String MACRO_CLASS = "xm";

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -259,6 +259,8 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
         ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
         cmd.add(RepoCommand);
         cmd.add("cat");
+        cmd.add("--non-interactive");
+        cmd.addAll(getAuthCommandLineParams());
         cmd.add("-r");
         cmd.add(rev);
         cmd.add(escapeFileName(filename));

File: src/org/opensolaris/opengrok/web/Statistics.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
@@ -31,6 +31,7 @@
 import org.json.simple.JSONObject;
 
 /**
+ * Framework for statistics gathering. So far used only by the webapp.
  *
  * @author Krystof Tulinger
  */
@@ -111,7 +112,7 @@ synchronized public void addRequest(String category) {
     
     /**
      * Get value of given counter
-     * @param category
+     * @param category category
      * @return Long value
      */
     synchronized public Long getRequest(String category) {

File: src/org/opensolaris/opengrok/analysis/scala/Consts.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.analysis.scala;
 
@@ -55,6 +56,7 @@ public class Consts{
         kwd.add("override");
         kwd.add("package");
         kwd.add("private");
+        kwd.add("protected");
         kwd.add("return");
         kwd.add("sealed");
         kwd.add("super");

File: src/org/opensolaris/opengrok/analysis/scala/Consts.java
Patch:
@@ -31,7 +31,6 @@
 public class Consts{
     public static final Set<String> kwd = new HashSet<String>() ;
     static {
-        //Note that keywords with 1 letter will be ignored since we need at least 2 chars per identifier
         kwd.add("abstract");
         kwd.add("case");
         kwd.add("catch");
@@ -70,6 +69,7 @@ public class Consts{
         kwd.add("while");
         kwd.add("with");
         kwd.add("yield");
-    }
 
+        kwd.add("_");	// "Lexical syntax ... reserved words"
+    }
 }

File: plugins/LdapPlugin/test/opengrok/auth/plugin/LdapAttrPluginTest.java
Patch:
@@ -80,7 +80,8 @@ public void setUp() {
 
         plugin.load(parameters);
 
-        framework = new AuthorizationFramework(null);
+        framework = new AuthorizationFramework();
+        framework.reload();
     }
 
     private void prepareRequest(String username, String mail, String... ous) {

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -81,6 +81,7 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
          * possibly {@code null} causing the framework to allow every request.
          */
         env.setAuthorizationFramework(new AuthorizationFramework(env.getPluginDirectory(), env.getPluginStack()));
+        env.getAuthorizationFramework().reload();
 
         String address = context.getInitParameter("ConfigAddress");
         if (address != null && address.length() > 0) {

File: test/org/opensolaris/opengrok/web/PageConfigTest.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
@@ -187,7 +187,8 @@ public void testGetResourceFileList() {
          *  - disabling "mercurial"
          * </pre>
          */
-        env.setAuthorizationFramework(new AuthorizationFramework(null));
+        env.setAuthorizationFramework(new AuthorizationFramework());
+        env.getAuthorizationFramework().reload();
         env.getAuthorizationFramework().getStack()
                 .add(new AuthorizationPlugin(AuthControlFlag.REQUIRED, new TestPlugin() {
                     @Override

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -266,7 +266,8 @@ public void setUp() {
         Assert.assertNotNull("Repository map should not be null", env.getProjectRepositoriesMap());
         Assert.assertEquals("Repository map should contain 20 project", 20, env.getProjectRepositoriesMap().size());
 
-        env.setAuthorizationFramework(new AuthorizationFramework(null));
+        env.setAuthorizationFramework(new AuthorizationFramework());
+        env.getAuthorizationFramework().reload();
 
         IAuthorizationPlugin plugin = new TestPlugin() {
             @Override

File: test/org/opensolaris/opengrok/analysis/haskell/HaskellXrefTest.java
Patch:
@@ -59,7 +59,7 @@ public void basicTest() throws IOException {
             "<a class=\"l\" name=\"1\" href=\"#1\">1</a>" +
             "<a href=\"/source/s?defs=putStrLn\" class=\"intelliWindow-symbol\"" +
             " data-definition-place=\"undefined-in-file\">putStrLn</a>" +
-            " <span class=\"s\">\"Hello, world!\"</span>\n",
+            " <span class=\"s\">&quot;Hello, world!&quot;</span>\n",
                 w.toString());
     }
 

File: src/org/opensolaris/opengrok/analysis/haskell/Consts.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis.haskell;
@@ -57,5 +58,7 @@ public class Consts {
         kwd.add("then");
         kwd.add("type");
         kwd.add("where");
+
+        kwd.add("_");	// 2.4 Identifiers and Operators
     }
 }

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -439,9 +439,7 @@ public void testOptimizeDatabase() {
     @Test
     public void testUsingLuceneLocking() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
-        assertFalse(instance.isUsingLuceneLocking());
-        instance.setUsingLuceneLocking(true);
-        assertTrue(instance.isUsingLuceneLocking());
+        assertEquals("off", instance.getLuceneLocking());
     }
 
     @Test

File: plugins/LdapPlugin/src/opengrok/auth/plugin/AbstractLdapPlugin.java
Patch:
@@ -32,11 +32,9 @@
 import opengrok.auth.plugin.ldap.AbstractLdapProvider;
 import opengrok.auth.plugin.ldap.FakeLdapFacade;
 import opengrok.auth.plugin.ldap.LdapFacade;
-import org.opensolaris.opengrok.authorization.AuthorizationFramework;
 import org.opensolaris.opengrok.authorization.IAuthorizationPlugin;
 import org.opensolaris.opengrok.configuration.Group;
 import org.opensolaris.opengrok.configuration.Project;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  * Abstract class for all plug-ins working with LDAP. Takes care of

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -1663,7 +1663,7 @@ public void loadStatistics(InputStream in) throws IOException, ParseException {
      */
     synchronized public AuthorizationFramework getAuthorizationFramework() {
         if (authFramework == null) {
-            authFramework = new AuthorizationFramework(threadConfig.get().getPluginDirectory());
+            authFramework = new AuthorizationFramework(getPluginDirectory(), getPluginStack());
         }
         return authFramework;
     }
@@ -1750,6 +1750,7 @@ public void applyConfig(Configuration config, boolean reindex) {
 
         // set the new plugin directory and reload the authorization framework
         getAuthorizationFramework().setPluginDirectory(config.getPluginDirectory());
+        getAuthorizationFramework().setStack(config.getPluginStack());
         getAuthorizationFramework().reload();
     }
 

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
@@ -80,7 +80,7 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
          * (reading the configuration) failed then the plugin directory is
          * possibly {@code null} causing the framework to allow every request.
          */
-        env.setAuthorizationFramework(new AuthorizationFramework(env.getPluginDirectory()));
+        env.setAuthorizationFramework(new AuthorizationFramework(env.getPluginDirectory(), env.getPluginStack()));
 
         String address = context.getInitParameter("ConfigAddress");
         if (address != null && address.length() > 0) {

File: plugins/LdapPlugin/src/opengrok/auth/plugin/LdapAttrPlugin.java
Patch:
@@ -127,7 +127,7 @@ public void fillSession(HttpServletRequest req, User user) {
     protected void updateSession(HttpServletRequest req, boolean allowed) {
         req.getSession().setAttribute(SESSION_ALLOWED, allowed);
     }
-
+    
     @Override
     public boolean checkEntity(HttpServletRequest request, Project project) {
         return ((Boolean) request.getSession().getAttribute(SESSION_ALLOWED));

File: plugins/LdapPlugin/test/opengrok/auth/plugin/LdapFilterPluginTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-public class LdapFilterTest {
+public class LdapFilterPluginTest {
 
     private LdapFilterPlugin plugin;
 

File: plugins/LdapPlugin/test/opengrok/auth/plugin/util/DummyHttpServletRequestLdap.java
Patch:
@@ -40,6 +40,7 @@
 import javax.servlet.http.HttpSessionContext;
 import opengrok.auth.plugin.UserPlugin;
 import opengrok.auth.plugin.entity.User;
+import org.opensolaris.opengrok.util.RandomString;
 
 public class DummyHttpServletRequestLdap implements HttpServletRequest {
 
@@ -60,7 +61,7 @@ public String getId() {
             if ((user = (User) getAttribute(UserPlugin.REQUEST_ATTR)) != null) {
                 return user.getUsername();
             }
-            return Strings.generate(5);
+            return RandomString.generate(5);
         }
 
         @Override

File: src/org/opensolaris/opengrok/authorization/AuthorizationStack.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;

File: test/org/opensolaris/opengrok/authorization/AuthorizationEntityTest.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;

File: test/org/opensolaris/opengrok/authorization/AuthorizationFrameworkTest.java
Patch:
@@ -43,7 +43,7 @@
 @RunWith(Parameterized.class)
 public class AuthorizationFrameworkTest {
 
-    private static final Random random = new Random();
+    private static final Random RANDOM = new Random();
 
     private AuthorizationFramework framework;
     private final StackSetup setup;
@@ -688,12 +688,12 @@ static private Project createUnallowedProject() {
     }
 
     static private Group createAllowedGroup() {
-        Group g = new Group("allowed" + "_" + "group_" + random.nextInt());
+        Group g = new Group("allowed" + "_" + "group_" + RANDOM.nextInt());
         return g;
     }
 
     static private Group createUnallowedGroup() {
-        Group g = new Group("not_allowed" + "_" + "group_" + random.nextInt());
+        Group g = new Group("not_allowed" + "_" + "group_" + RANDOM.nextInt());
         return g;
     }
 

File: test/org/opensolaris/opengrok/authorization/AuthorizationPluginClassLoaderTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class AuthorizationPluginClassLoaderTest {
 
-    private File pluginDirectory;
+    private final File pluginDirectory;
 
     public AuthorizationPluginClassLoaderTest() {
         URL resource = AuthorizationPluginClassLoaderTest.class.getResource("testplugins.jar");

File: test/org/opensolaris/opengrok/authorization/TestPlugin.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;

File: test/org/opensolaris/opengrok/web/ProjectHelperTest.java
Patch:
@@ -61,7 +61,7 @@ public void testSynchronization() {
         List<RepositoryInfo> oldRepositories = new ArrayList<>(env.getRepositories());
         Set<Group> oldGroups = new TreeSet<>(env.getGroups());
         Map<Project, List<RepositoryInfo>> oldMap = new TreeMap<>(getRepositoriesMap());
-        env.getAuthorizationFramework().removeAll(env.getAuthorizationFramework().getStack());
+        env.getAuthorizationFramework().removeAll();
         env.setSourceRoot("/src"); // needed for setDirectoryName() below
 
         cfg = PageConfig.get(getRequest());

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -288,6 +288,6 @@ public boolean isAllowed(HttpServletRequest request, Group group) {
 
     @After
     public void tearDown() {
-        env.getAuthorizationFramework().removeAll(env.getAuthorizationFramework().getStack());
+        env.getAuthorizationFramework().removeAll();
     }
 }

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -415,7 +415,7 @@ public void testCsharpXrefVerbatimString() throws IOException {
         CSharpXref xref = new CSharpXref(in);
         StringWriter out = new StringWriter();
         xref.write(out);
-        assertTrue(out.toString().contains("<span class=\"s\">@\"\\some_windows_path_in_a_string\\\"</span>"));
+        assertTrue(out.toString().contains("<span class=\"s\">@&quot;\\some_windows_path_in_a_string\\&quot;</span>"));
     }
 
     /**

File: src/org/opensolaris/opengrok/web/HtmlConsts.java
Patch:
@@ -39,6 +39,7 @@ public class HtmlConsts {
     public static final String AUTHOR_CLASS = "a";
     public static final String COMMENT_CLASS = "c";
     public static final String DELETED_CLASS = "d";
+    public static final String MACRO_CLASS = "xm";
     public static final String NUMBER_CLASS = "n";
     public static final String STRING_CLASS = "s";
 

File: src/org/opensolaris/opengrok/analysis/sh/Consts.java
Patch:
@@ -20,6 +20,7 @@
 /*
  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 
 package org.opensolaris.opengrok.analysis.sh;
@@ -144,5 +145,6 @@ public class Consts{
         shkwd.add( "void" );
         shkwd.add( "unsigned" );
         shkwd.add( "nameref" );
+        shkwd.add( "in" );
     }
 }

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -80,7 +80,7 @@ private Results() {
      * @throws CorruptIndexException
      * @throws IOException
      */
-    private static Map<String, ArrayList<Document>> createMap(IndexSearcher searcher, ScoreDoc[] hits, int startIdx, int stopIdx)
+    private static Map<String, ArrayList<Document>> createMap(IndexSearcher searcher, ScoreDoc[] hits, int startIdx, long stopIdx)
             throws CorruptIndexException, IOException {
         LinkedHashMap<String, ArrayList<Document>> dirHash =
                 new LinkedHashMap<>();
@@ -147,7 +147,7 @@ private static Reader getXrefReader(
      * @throws ClassNotFoundException
      */
     public static void prettyPrint(Writer out, SearchHelper sh, int start,
-            int end)
+            long end)
             throws HistoryException, IOException, ClassNotFoundException {
         Project p;
         String ctxE = Util.URIEncodePath(sh.contextPath);

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -1304,7 +1304,7 @@ public static String createSlider(int offset, int limit, int size) {
      * to the page URL
      * @return string containing slider html
      */
-    public static String createSlider(int offset, int limit, int size, HttpServletRequest request) {
+    public static String createSlider(int offset, int limit, long size, HttpServletRequest request) {
         String slider = "";
         if (limit < size) {
             final StringBuilder buf = new StringBuilder(4096);

File: test/org/opensolaris/opengrok/util/CustomAssertions.java
Patch:
@@ -120,9 +120,9 @@ private static void printDiffs(String expecteds[], String actuals[],
 
         int ln0 = diffLines.get(0);
         int numln = diffLines.size();
-        int loff = ln0 < expecteds.length ? ln0 : expecteds.length;
+        int loff = (ln0 < expecteds.length ? ln0 : expecteds.length) + 1;
         int lnum = count_within(expecteds.length, ln0, numln);
-        int roff = ln0 < actuals.length ? ln0 : actuals.length;
+        int roff = (ln0 < actuals.length ? ln0 : actuals.length) + 1;
         int rnum = count_within(actuals.length, ln0, numln);
 
         System.out.format("@@ -%d,%d +%d,%d @@", loff, lnum, roff, rnum);

File: plugins/LdapPlugin/src/opengrok/auth/plugin/LdapFilterPlugin.java
Patch:
@@ -112,8 +112,7 @@ public void fillSession(HttpServletRequest req, User user) {
      * <li>%guid% - to be replaced with OSSO guid value</li>
      * </ul>
      *
-     * Use \% for printing the '%̈́' character.
-     *
+     * Use \% for printing the '%' character.
      * Also replaces any other LDAP attribute that would not be ambiguous.
      *
      * @param filter basic filter containing the special values

File: plugins/LdapPlugin/test/opengrok/auth/plugin/LdapUserPluginTest.java
Patch:
@@ -88,7 +88,7 @@ public void getFilterTest1() {
         String cl = "posixUser";
         params.put(LdapUserPlugin.OBJECT_CLASS, (Object) cl);
         plugin.load(params);
-        String cn = "cn=foo";
+        String cn = "cn=foo-foo_bar1";
         User user = new User(cn + ",l=EMEA,dc=foobar,dc=com", "id", null, false);
         String filter = plugin.getFilter(user);
         Assert.assertEquals("(&(" + LdapUserPlugin.OBJECT_CLASS + "=" + cl + ")(" + cn + "))",

File: plugins/LdapPlugin/src/opengrok/auth/plugin/ldap/LdapServer.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin.ldap;

File: src/org/opensolaris/opengrok/authorization/AuthorizationPlugin.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;

File: plugins/LdapPlugin/src/opengrok/auth/plugin/ldap/AbstractLdapProvider.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin.ldap;

File: plugins/UserPlugin/src/opengrok/auth/plugin/entity/User.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin.entity;

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;

File: src/org/opensolaris/opengrok/web/AuthorizationFilter.java
Patch:
@@ -61,6 +61,7 @@ public void doFilter(ServletRequest sr, ServletResponse sr1, FilterChain fc) thr
             } else {
                 LOGGER.log(Level.INFO, "Access denied for URI: {0}", httpReq.getRequestURI());
             }
+            
             /**
              * Add the request to the statistics. This is called just once for a
              * single request otherwise the next filter will count the same
@@ -73,10 +74,12 @@ public void doFilter(ServletRequest sr, ServletResponse sr1, FilterChain fc) thr
             config.getEnv().getStatistics().addRequest("requests_forbidden");
             config.getEnv().getStatistics().addRequestTime("requests_forbidden",
                     System.currentTimeMillis() - processTime);
+            
             if (!config.getEnv().getConfiguration().getForbiddenIncludeFileContent().isEmpty()) {
                 sr.getRequestDispatcher("/eforbidden").forward(sr, sr1);
                 return;
             }
+            
             httpRes.sendError(HttpServletResponse.SC_FORBIDDEN, "Access forbidden");
             return;
         }

File: test/org/opensolaris/opengrok/authorization/AuthorizationPluginClassLoaderTest.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;

File: plugins/LdapPlugin/src/opengrok/auth/plugin/ldap/FakeLdapFacade.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin.ldap;

File: plugins/LdapPlugin/test/opengrok/auth/plugin/configuration/ConfigurationTest.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin.configuration;

File: plugins/UserPlugin/src/opengrok/auth/plugin/UserPlugin.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin;
@@ -33,8 +33,9 @@
 import org.opensolaris.opengrok.configuration.Project;
 
 /**
+ * Authorization plug-in to extract user info from HTTP headers.
  *
- * @author ktulinge
+ * @author Krystof Tulinger
  */
 public class UserPlugin implements IAuthorizationPlugin {
 

File: plugins/UserPlugin/src/opengrok/auth/plugin/decoders/HeaderDecoder.java
Patch:
@@ -31,6 +31,7 @@
 
 /**
  * Decode Oracle SSO specific headers.
+ *
  * @author Krystof Tulinger
  */
 public class HeaderDecoder implements IUserDecoder {
@@ -79,7 +80,7 @@ public User fromRequest(HttpServletRequest request) {
 
         /**
          * Creating new user entity with provided information. The entity can be
-         * checked if it is timeouted via {@link User#isTimeouted()}.
+         * checked if the timeout expired via {@link User#isTimeouted()}.
          */
         User user = new User(username, userguid, cookieTimestamp,
                 "true".equalsIgnoreCase(timeouted));

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.19.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.18.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -277,8 +277,8 @@ private void testCXrefInclude(Class<? extends JFlexXref> klass) throws Exception
         String[][] testData = {
             {"#include <abc.h>", "#<b>include</b> &lt;<a href=\"/source/s?path=abc.h\">abc.h</a>&gt;"},
             {"#include <abc/def.h>", "#<b>include</b> &lt;<a href=\"/source/s?path=abc/\">abc</a>/<a href=\"/source/s?path=abc/def.h\">def.h</a>&gt;"},
-            {"#include \"abc.h\"", "#<b>include</b> <span class=\"s\">\"<a href=\"/source/s?path=abc.h\">abc.h</a>\"</span>"},
-            {"#include \"abc/def.h\"", "#<b>include</b> <span class=\"s\">\"<a href=\"/source/s?path=abc/\">abc</a>/<a href=\"/source/s?path=abc/def.h\">def.h</a>\"</span>"},
+            {"#include \"abc.h\"", "#<b>include</b> &quot;<a href=\"/source/s?path=abc.h\">abc.h</a>&quot;"},
+            {"#include \"abc/def.h\"", "#<b>include</b> &quot;<a href=\"/source/s?path=abc/\">abc</a>/<a href=\"/source/s?path=abc/def.h\">def.h</a>&quot;"},
             {"#include <vector>", "#<b>include</b> &lt;<a href=\"/source/s?path=vector\">vector</a>&gt;"},
         };
 

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -277,8 +277,8 @@ private void testCXrefInclude(Class<? extends JFlexXref> klass) throws Exception
         String[][] testData = {
             {"#include <abc.h>", "#<b>include</b> &lt;<a href=\"/source/s?path=abc.h\">abc.h</a>&gt;"},
             {"#include <abc/def.h>", "#<b>include</b> &lt;<a href=\"/source/s?path=abc/\">abc</a>/<a href=\"/source/s?path=abc/def.h\">def.h</a>&gt;"},
-            {"#include \"abc.h\"", "#<b>include</b> <span class=\"s\">\"<a href=\"/source/s?path=abc.h\">abc.h</a>\"</span>"},
-            {"#include \"abc/def.h\"", "#<b>include</b> <span class=\"s\">\"<a href=\"/source/s?path=abc/\">abc</a>/<a href=\"/source/s?path=abc/def.h\">def.h</a>\"</span>"},
+            {"#include \"abc.h\"", "#<b>include</b> &quot;<a href=\"/source/s?path=abc.h\">abc.h</a>&quot;"},
+            {"#include \"abc/def.h\"", "#<b>include</b> &quot;<a href=\"/source/s?path=abc/\">abc</a>/<a href=\"/source/s?path=abc/def.h\">def.h</a>&quot;"},
             {"#include <vector>", "#<b>include</b> &lt;<a href=\"/source/s?path=vector\">vector</a>&gt;"},
         };
 

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -204,7 +204,7 @@ protected void appendProject() throws IOException {
     }
 
     /**
-     * Calls {@link #appendLink(java.lang.String, boolean) with false to
+     * Calls {@link #appendLink(java.lang.String, boolean)} with false to
      * disable {@code doPushback} handling.
      * @param url the URL to append
      * @throws IOException if an error occurs while appending

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -168,7 +169,7 @@ public void processStream(InputStream input) throws IOException {
 
                         File f = new File(myDir, s);
                         String name = env.getPathRelativeToSourceRoot(f);
-                        entry.addFile(name);
+                        entry.addFile(name.intern());
                     }
                     break;
                 default:

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -128,7 +129,8 @@ private void process(BufferedReader in) throws IOException {
                 if (entry != null) {
                     try {
                         File f = new File(myDir, s);
-                        entry.addFile(env.getPathRelativeToSourceRoot(f));
+                        String path = env.getPathRelativeToSourceRoot(f);
+                        entry.addFile(path.intern());
                     } catch (FileNotFoundException e) { //NOPMD
                         // If the file is not located under the source root,
                         // ignore it (bug #11664).

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -140,7 +141,8 @@ public void processStream(InputStream input) throws IOException {
                     if (strings[ii].length() > 0) {
                         File f = new File(mydir, strings[ii]);
                         try {
-                            entry.addFile(env.getPathRelativeToSourceRoot(f));
+                            String path = env.getPathRelativeToSourceRoot(f);
+                            entry.addFile(path.intern());
                         } catch (FileNotFoundException e) { // NOPMD
                             // If the file is not located under the source root,
                             // ignore it (bug #11664).

File: plugins/LdapPlugin/src/opengrok/auth/plugin/LdapAttr.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017 Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin;

File: plugins/LdapPlugin/test/opengrok/auth/plugin/LdapFilterTest.java
Patch:
@@ -17,7 +17,7 @@
  * CDDL HEADER END
  */
 
- /*
+/*
  * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package opengrok.auth.plugin;

File: plugins/LdapPlugin/src/opengrok/auth/plugin/ldap/AbstractLdapProvider.java
Patch:
@@ -53,7 +53,7 @@ public Map<String, Set<String>> lookupLdapContent(User user) {
      * java.lang.String, java.lang.String[])
      */
     public Map<String, Set<String>> lookupLdapContent(User user, String filter) {
-        return lookupLdapContent(user, null, null);
+        return lookupLdapContent(user, filter, null);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/Resettable.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2017, cfraire@me.com.
+ * Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.analysis;
 

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -54,6 +54,7 @@
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.util.BytesRef;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
+import org.opensolaris.opengrok.analysis.ada.AdaAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.archive.BZip2AnalyzerFactory;
 import org.opensolaris.opengrok.analysis.archive.GZIPAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.archive.TarAnalyzerFactory;
@@ -247,7 +248,8 @@ public class AnalyzerGuru {
             new HaskellAnalyzerFactory(),
             new GolangAnalyzerFactory(),
             new LuaAnalyzerFactory(),
-            new PascalAnalyzerFactory()
+            new PascalAnalyzerFactory(),
+            new AdaAnalyzerFactory()
         };
 
         for (FileAnalyzerFactory analyzer : analyzers) {

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -19,6 +19,7 @@
 
  /*
   * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+  * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
   */
 package org.opensolaris.opengrok.configuration;
 

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -19,8 +19,8 @@
 
 /*
  * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
- *
  * Portions Copyright 2011 Jens Elkner.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.index;
 

File: src/org/opensolaris/opengrok/analysis/document/MandocAnalyzer.java
Patch:
@@ -71,7 +71,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut)
     }
 
     /**
-     * Create an {@see MandocXref} instance.
+     * Create a {@link MandocXref} instance.
      * @param reader the data to produce xref for
      * @return an xref instance
      */

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -557,7 +557,7 @@ public String getMandoc() {
     /**
      * Specify the mandoc program to use
      *
-     * @param ctags the mandoc program to use or {@code null}
+     * @param value the mandoc program to use or {@code null}
      */
     public void setMandoc(String value) {
         threadConfig.get().setMandoc(value);

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.18.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.19.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -62,6 +62,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
         if (xrefOut != null) {
             try (Reader in = getReader(src.getStream())) {
                 WriteXrefArgs args = new WriteXrefArgs(in, xrefOut);
+                args.setProject(project);
                 writeXref(args);
             }
         }

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -104,6 +104,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
             try (Reader in = getReader(src.getStream())) {
                 WriteXrefArgs args = new WriteXrefArgs(in, xrefOut);
                 args.setDefs(defs);
+                args.setProject(project);
                 JFlexXref xref = writeXref(args);
             
                 Scopes scopes = xref.getScopes();

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzer.java
Patch:
@@ -56,6 +56,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
         if (xrefOut != null) {
             try (Reader in = getReader(src.getStream())) {
                 WriteXrefArgs args = new WriteXrefArgs(in, xrefOut);
+                args.setProject(project);
                 writeXref(args);
             }
         }

File: src/org/opensolaris/opengrok/analysis/WriteXrefArgs.java
Patch:
@@ -28,7 +28,8 @@
 import org.opensolaris.opengrok.history.Annotation;
 
 /**
- * Represents the arguments for the {@link FileAnalyzerFactory.writeXref}
+ * Represents the arguments for the
+ * {@link org.opensolaris.opengrok.analysis.FileAnalyzer#writeXref(org.opensolaris.opengrok.analysis.WriteXrefArgs)}
  * method.
  */
 public class WriteXrefArgs {

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -68,7 +68,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
     }
 
     /**
-     * Create an {@see TroffXref} instance.
+     * Create a {@link TroffXref} instance.
      * @param reader the data to produce xref for
      * @return an xref instance
      */

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -58,7 +58,7 @@ protected PlainAnalyzer(FileAnalyzerFactory factory) {
     }
 
     /**
-     * Create an {@see PlainXref} instance.
+     * Create a {@link PlainXref} instance.
      * @param reader the data to produce xref for
      * @return an xref instance
      */

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzer.java
Patch:
@@ -62,7 +62,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
     }
 
     /**
-     * Create an {@see XMLXref} instance.
+     * Create an {@link XMLXref} instance.
      * @param reader the data to produce xref for
      * @return an xref instance
      */

File: src/org/opensolaris/opengrok/analysis/uue/UuencodeAnalyzer.java
Patch:
@@ -72,7 +72,7 @@ public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOExc
     }
 
     /**
-     * Create an {@see UuencodeXref} instance.
+     * Create a {@link UuencodeXref} instance.
      * @param reader the data to produce xref for
      * @return an xref instance
      */

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -39,7 +39,6 @@
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedList;
@@ -358,6 +357,9 @@ public void setGroupsCollapseThreshold(int groupsCollapseThreshold) throws Illeg
      * Creates a new instance of Configuration
      */
     public Configuration() {
+        /**
+         * This list of calls is sorted alphabetically so please keep it.
+         */
         // defaults for an opengrok instance configuration
         cmds = new HashMap<>();
         setAllowedSymlinks(new HashSet<>());

File: test/org/opensolaris/opengrok/condition/RunCondition.java
Patch:
@@ -18,11 +18,11 @@
  */
 
  /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.condition;
 
 public interface RunCondition {
 
-    boolean isSatisfied();
+    public boolean isSatisfied();
 }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -229,7 +229,7 @@ public static void main(String argv[]) {
             // emitted during indexing do not cause validation error.
             if (addProjects && host != null && port > 0) {
                 Message m = Message.createMessage("config");
-                m.addTag("addOption");
+                m.addTag("set");
                 m.setText("projectsEnabled = true");
                 m.write(host, port);
             }

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.5.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.17.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.18.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: src/org/opensolaris/opengrok/analysis/perl/PerlLexHelper.java
Patch:
@@ -38,7 +38,7 @@ interface PerlLexListener {
      * Passes a text fragment that is syntactically a symbol for write
      * processing
      * @param value the excised symbol
-     * @param captureOffset the offset from yychar where {@link value} began
+     * @param captureOffset the offset from yychar where {@code value} began
      * @param ignoreKwd a value indicating whether keywords should be ignored
      */
     void writeSymbol(String value, int captureOffset, boolean ignoreKwd)
@@ -68,7 +68,7 @@ void writeSymbol(String value, int captureOffset, boolean ignoreKwd)
 
     /**
      * Pushes back to the scanner a specified number of characters
-     * @param numChars 
+     * @param numChars
      */
     void pushback(int numChars);
 }
@@ -104,7 +104,7 @@ public PerlLexHelper(int qUO, int qUOxN, int qUOxL, int qUOxLxN,
         this.HEREinxN = hEREinxN;
         this.HERExN = hERExN;
         this.HEREin = hEREin;
-        this.HERE = hERE;        
+        this.HERE = hERE;
     }
 
     /**

File: test/org/opensolaris/opengrok/analysis/perl/PerlSymbolTokenizerTest.java
Patch:
@@ -127,7 +127,8 @@ private void testSymbolStream(Class<? extends JFlexTokenizer> klass,
 
         int count = 0;
         while (tokenizer.incrementToken()) {
-            assertTrue("too many tokens", count < expectedTokens.size());
+            assertTrue("too many tokens at term" + (1 + count) + ": " +
+                term.toString(), count < expectedTokens.size());
             String expected = expectedTokens.get(count);
             // 1-based offset to accord with line #
             assertEquals("term" + (1 + count), expected, term.toString());

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -36,7 +36,7 @@ public class JavaClassAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     private static final String[] MAGICS = {
-        "\312\376\272\276"      // cafebabe
+        new String(new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE})
     };
 
     public JavaClassAnalyzerFactory() {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -664,7 +664,7 @@ public static String[] parseOptions(String[] argv) throws ParseException {
             });
 
             parser.on("--userPageSuffix", "=URL-suffix", 
-                "URL Suffix for the user Information provider. Default: \"\"".).Do( suffix -> {
+                "URL Suffix for the user Information provider. Default: \"\".").Do( suffix -> {
                 cfg.setUserPageSuffix((String)suffix);
             });
 

File: src/org/opensolaris/opengrok/history/TagEntry.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2015 Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.history;
 
@@ -65,7 +66,7 @@ public TagEntry(int revision, String tags) {
 
     public TagEntry(Date date, String tags) {
         if (date == null) {
-            throw new NullPointerException("Can't create TagEntry using date==null");
+            throw new IllegalArgumentException("`date' is null");
         }
         this.revision = NOREV;
         this.date = date;

File: test/org/opensolaris/opengrok/analysis/php/PhpXrefTest.java
Patch:
@@ -19,6 +19,7 @@
 
 /*
  * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Portions Copyright (c) 2017, Chris Fraire <cfraire@me.com>.
  */
 package org.opensolaris.opengrok.analysis.php;
 
@@ -130,7 +131,7 @@ public void sampleTest() throws IOException {
         assertEquals(expected.length, gotten.length);
 
         for (int i = 0; i < gotten.length; i++) {
-            assertEquals(gotten[i].trim(), expected[i].trim());
+            assertEquals(expected[i], gotten[i]);
         }
     }
 }

File: src/org/opensolaris/opengrok/configuration/ConfigMerge.java
Patch:
@@ -31,8 +31,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.text.ParseException;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import org.opensolaris.opengrok.util.Getopt;
 
 /**
@@ -49,6 +47,7 @@ public class ConfigMerge {
      * Merge base and new configuration.
      * @param cfgBase base configuration
      * @param cfgNew new configuration, will receive properties from the base configuration
+     * @throws Exception
      */
     public static void merge(Configuration cfgBase, Configuration cfgNew) throws Exception {
         Configuration cfgDefault = new Configuration();

File: src/org/opensolaris/opengrok/history/RepositoryInfo.java
Patch:
@@ -43,7 +43,9 @@ public class RepositoryInfo implements Serializable {
     private static final long serialVersionUID = 3L;
 
     // dummy to avoid storing absolute path in XML encoded configuration
+    // Do not use this member.
     private transient String directoryName;
+    
     private String directoryNameRelative;
     protected Boolean working;
     protected String type;

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -689,7 +689,7 @@ public void prepareIndexer(RuntimeEnvironment env,
             LOGGER.log(Level.INFO, "Scanning for repositories...");
             long start = System.currentTimeMillis();
             if (env.isHistoryEnabled()) {
-                HistoryGuru.getInstance().addRepositories(env.getSourceRootPath());
+                env.setRepositories(env.getSourceRootPath());
             }
             long time = (System.currentTimeMillis() - start) / 1000;
             LOGGER.log(Level.INFO, "Done scanning for repositories ({0}s)", time);
@@ -730,7 +730,8 @@ public void prepareIndexer(RuntimeEnvironment env,
                     try {
                         HistoryGuru.getInstance().removeCache(toZap);
                     } catch (HistoryException e) {
-                        LOGGER.log(Level.WARNING, "Clearing history cache failed: {0}", e.getLocalizedMessage());
+                        LOGGER.log(Level.WARNING, "Clearing history cache failed: {0}",
+                                e.getLocalizedMessage());
                     }
                 }
                 return;

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -257,7 +257,7 @@ public void testQuickContextScan() {
     public void testRepositories() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
         assertNotNull(instance.getRepositories());
-        instance.setRepositories(null);
+        instance.removeRepositories();
         assertNull(instance.getRepositories());
         List<RepositoryInfo> reps = new ArrayList<>();
         instance.setRepositories(reps);

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -239,7 +239,7 @@ public void testIndexWithSetIndexVersionedFilesOnly() throws Exception {
         env.setCtags(System.getProperty(ctagsProperty, "ctags"));
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-        HistoryGuru.getInstance().addRepositories(repository.getSourceRoot());
+        env.setRepositories(repository.getSourceRoot());
 
         List<RepositoryInfo> repos = env.getRepositories();
         Repository r = null;
@@ -336,7 +336,7 @@ public void testRemoveFileOnFileChange() throws Exception {
 
         env.setSourceRoot(testrepo.getSourceRoot());
         env.setDataRoot(testrepo.getDataRoot());
-        HistoryGuru.getInstance().addRepositories(testrepo.getSourceRoot());
+        env.setRepositories(testrepo.getSourceRoot());
 
         // create index
         Project project = new Project("mercurial", "/mercurial");

File: test/org/opensolaris/opengrok/search/context/HistoryContextTest.java
Patch:
@@ -43,6 +43,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  * Unit tests for the {@code HistoryContext} class.
@@ -56,7 +57,7 @@ public static void setUpClass() throws Exception {
         repositories = new TestRepository();
         repositories.create(HistoryContextTest.class.getResourceAsStream(
                 "/org/opensolaris/opengrok/history/repositories.zip"));
-        HistoryGuru.getInstance().addRepositories(repositories.getSourceRoot());
+        RuntimeEnvironment.getInstance().setRepositories(repositories.getSourceRoot());
     }
 
     @AfterClass

File: test/org/opensolaris/opengrok/web/PageConfigTest.java
Patch:
@@ -64,7 +64,7 @@ public static void setUpClass() throws Exception {
         repository = new TestRepository();
         repository.create(
                 HistoryGuru.class.getResourceAsStream("repositories.zip"));
-        HistoryGuru.getInstance().addRepositories(repository.getSourceRoot());
+        RuntimeEnvironment.getInstance().setRepositories(repository.getSourceRoot());
     }
 
     @AfterClass

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.4.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.15.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.16.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -357,7 +357,7 @@ public Configuration() {
         cmds = new HashMap<>();
         setAllowedSymlinks(new HashSet<>());
         setAuthorizationWatchdogEnabled(false);
-        setBugPage("http://bugs.myserver.org/bugdatabase/view_bug.do?bug_id=");
+        //setBugPage("http://bugs.myserver.org/bugdatabase/view_bug.do?bug_id=");
         setBugPattern("\\b([12456789][0-9]{6})\\b");
         setCachePages(5);
         setCommandTimeout(600); // 10 minutes
@@ -392,7 +392,7 @@ public Configuration() {
         setRamBufferSize(defaultRamBufferSize); //MB
         setRemoteScmSupported(RemoteSCM.OFF);
         setRepositories(new ArrayList<>());
-        setReviewPage("http://arc.myserver.org/caselog/PSARC/");
+        //setReviewPage("http://arc.myserver.org/caselog/PSARC/");
         setReviewPattern("\\b(\\d{4}/\\d{3})\\b"); // in form e.g. PSARC 2008/305
         setRevisionMessageCollapseThreshold(200);
         setScanningDepth(defaultScanningDepth); // default depth of scanning for repositories
@@ -403,7 +403,7 @@ public Configuration() {
         setTagsEnabled(false);
         setUrlPrefix("/source/s?");
         //setUrlPrefix("../s?"); // TODO generate relative search paths, get rid of -w <webapp> option to indexer !
-        setUserPage("http://www.myserver.org/viewProfile.jspa?username=");
+        //setUserPage("http://www.myserver.org/viewProfile.jspa?username=");
         // Set to empty string so we can append it to the URL
         // unconditionally later.
         setUserPageSuffix("");

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -74,7 +74,7 @@ public CommandLineOptions() {
         options.add(new Option('?', null, "Help"));
         options.add(new Option('A', ".ext|prefix.:analyzer", "Files with the named prefix/extension should be analyzed with the specified class"));
         options.add(new Option('a', ON_OFF, "Allow or disallow leading wildcards in a search"));
-        options.add(new Option('B', "url", "Base URL of the user Information provider. Default: \"http://www.myserver.org/viewProfile.jspa?username=\""));
+        options.add(new Option('B', "url", "Base URL of the user Information provider. Example: \"http://www.myserver.org/viewProfile.jspa?username=\". Use \"none\" to disable link."));
         options.add(new Option('C', null, "Print per project percentage progress information(I/O extensive, since one read through dir structure is made before indexing, needs -v, otherwise it just goes to the log)"));
         options.add(new Option('c', "/path/to/ctags", "Path to Exuberant Ctags from http://ctags.sf.net by default takes the Exuberant Ctags in PATH."));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -124,7 +124,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-ui", new FileScript("js/jquery-ui-1.12.0-custom.min.js", 11));
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
-        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
+        SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.4.min.js", 14));
         SCRIPTS.put("utils", new FileScript("js/utils-0.0.14.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -520,8 +520,7 @@ protected void startNewLine() throws IOException {
 
         if (foldingEnabled && scopesEnabled) {
             if (iconId != null) {
-                // Fix for #1764 remove line below and add this -> out.write("<a style='cursor:pointer;' onclick='fold(this.parentNode.id)' id='");
-                out.write("<a href='#' onclick='fold(this.parentNode.id)' id='");
+                out.write("<a style='cursor:pointer;' onclick='fold(this.parentNode.id)' id='");
                 out.write(iconId);
                 /* space inside span for IE support */
                 out.write("'><span class='fold-icon'>&nbsp;</span></a>");

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -202,7 +202,7 @@ public Iterator<Script> iterator() {
      * @return true if script was added; false otherwise
      */
     public boolean addScript(String contextPath, String scriptName) {
-        contextPath = contextPath == null || contextPath.isEmpty() ? "" : contextPath + "/";
+        contextPath = contextPath == null || contextPath.isEmpty() ? "/" : contextPath + "/";
         if (SCRIPTS.containsKey(scriptName)) {
             this.addScript(
                     // put the context path end append the script path

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -371,7 +371,7 @@ public Configuration() {
         setGenerateHtml(true);
         setGroups(new TreeSet<>());
         setGroupsCollapseThreshold(4);
-        setHandleHistoryOfRenamedFiles(true);
+        setHandleHistoryOfRenamedFiles(false);
         setHistoryCache(true);
         setHistoryCacheTime(30);
         setHistoryEnabled(true);

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -78,7 +78,7 @@ public CommandLineOptions() {
         options.add(new Option('C', null, "Print per project percentage progress information(I/O extensive, since one read through dir structure is made before indexing, needs -v, otherwise it just goes to the log)"));
         options.add(new Option('c', "/path/to/ctags", "Path to Exuberant Ctags from http://ctags.sf.net by default takes the Exuberant Ctags in PATH."));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
-        options.add(new Option('D', null, "Disable generating history for renamed files. Makes indexing faster for repositories with lots of renamed files."));
+        options.add(new Option('D', ON_OFF, "Enable or disable generating history for renamed files. If set to on, makes history indexing slower for repositories with lots of renamed files."));
         options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow."));
         options.add(new Option('G', null, "Assign commit tags to all entries in history for all repositories."));
         options.add(new Option('H', null, "Get history for all repositories"));

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -246,7 +246,8 @@ public static void main(String argv[]) {
                             break;
                         }
                         case 'D':
-                            cfg.setHandleHistoryOfRenamedFiles(false);
+                            cfg.setHandleHistoryOfRenamedFiles(getopt.getOptarg().
+                                    equals("on"));
                             break;
                         case 'e':
                             cfg.setGenerateHtml(false);

File: test/org/opensolaris/opengrok/history/GitRepositoryTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.opensolaris.opengrok.util.TestRepository;
 
 import static org.junit.Assert.*;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  *
@@ -351,6 +352,7 @@ private void runRenamedTest(String fname, String cset, String content) throws Ex
 
     @Test
     public void testRenamedHistory() throws Exception {
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
         File root = new File(repository.getSourceRoot(), "git");
         GitRepository gitrepo
                 = (GitRepository) RepositoryFactory.getRepository(root);
@@ -381,6 +383,7 @@ public void testRenamedHistory() throws Exception {
 
     @Test
     public void testRenamedSingleHistory() throws Exception {
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
         File root = new File(repository.getSourceRoot(), "git");
         GitRepository gitrepo
                 = (GitRepository) RepositoryFactory.getRepository(root);

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -371,7 +371,7 @@ public Configuration() {
         setGenerateHtml(true);
         setGroups(new TreeSet<>());
         setGroupsCollapseThreshold(4);
-        setHandleHistoryOfRenamedFiles(true);
+        setHandleHistoryOfRenamedFiles(false);
         setHistoryCache(true);
         setHistoryCacheTime(30);
         setHistoryEnabled(true);

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -78,7 +78,7 @@ public CommandLineOptions() {
         options.add(new Option('C', null, "Print per project percentage progress information(I/O extensive, since one read through dir structure is made before indexing, needs -v, otherwise it just goes to the log)"));
         options.add(new Option('c', "/path/to/ctags", "Path to Exuberant Ctags from http://ctags.sf.net by default takes the Exuberant Ctags in PATH."));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
-        options.add(new Option('D', null, "Disable generating history for renamed files. Makes indexing faster for repositories with lots of renamed files."));
+        options.add(new Option('D', ON_OFF, "Enable or disable generating history for renamed files. If set to on, makes history indexing slower for repositories with lots of renamed files."));
         options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow."));
         options.add(new Option('G', null, "Assign commit tags to all entries in history for all repositories."));
         options.add(new Option('H', null, "Get history for all repositories"));

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -246,7 +246,8 @@ public static void main(String argv[]) {
                             break;
                         }
                         case 'D':
-                            cfg.setHandleHistoryOfRenamedFiles(false);
+                            cfg.setHandleHistoryOfRenamedFiles(getopt.getOptarg().
+                                    equals("on"));
                             break;
                         case 'e':
                             cfg.setGenerateHtml(false);

File: test/org/opensolaris/opengrok/history/GitRepositoryTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.opensolaris.opengrok.util.TestRepository;
 
 import static org.junit.Assert.*;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  *
@@ -351,6 +352,7 @@ private void runRenamedTest(String fname, String cset, String content) throws Ex
 
     @Test
     public void testRenamedHistory() throws Exception {
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
         File root = new File(repository.getSourceRoot(), "git");
         GitRepository gitrepo
                 = (GitRepository) RepositoryFactory.getRepository(root);
@@ -381,6 +383,7 @@ public void testRenamedHistory() throws Exception {
 
     @Test
     public void testRenamedSingleHistory() throws Exception {
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
         File root = new File(repository.getSourceRoot(), "git");
         GitRepository gitrepo
                 = (GitRepository) RepositoryFactory.getRepository(root);

File: src/org/opensolaris/opengrok/web/ProjectHelper.java
Patch:
@@ -128,10 +128,10 @@ public List<RepositoryInfo> getRepositoryInfo(Project p) {
     private void populateGroups() {
         groups.addAll(cfg.getEnv().getGroups());
         for (Project project : cfg.getEnv().getProjectList()) {
-            // filterProjects only groups which match project's description
+            // filterProjects() only adds groups which match project's name.
             Set<Group> copy = Group.matching(project, groups);
 
-            // if no group matches the project, add it to not-grouped projects
+            // If no group matches the project, add it to not-grouped projects.
             if (copy.isEmpty()) {
                 if (cfg.getEnv().getProjectRepositoriesMap().get(project) == null) {
                     ungroupedProjects.add(project);

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -520,7 +520,8 @@ protected void startNewLine() throws IOException {
 
         if (foldingEnabled && scopesEnabled) {
             if (iconId != null) {
-                out.write("<a style='cursor:pointer;' onclick='fold(this.parentNode.id)' id='");
+                // Fix for #1764 remove line below and add this -> out.write("<a style='cursor:pointer;' onclick='fold(this.parentNode.id)' id='");
+                out.write("<a href='#' onclick='fold(this.parentNode.id)' id='");
                 out.write(iconId);
                 /* space inside span for IE support */
                 out.write("'><span class='fold-icon'>&nbsp;</span></a>");

File: src/org/opensolaris/opengrok/history/AccuRevRepository.java
Patch:
@@ -506,7 +506,7 @@ History getHistory(File file) throws HistoryException {
 
     @Override
     String determineParent() throws IOException {
-        getAccuRevInfo(new File(directoryName));
+        getAccuRevInfo(new File(getDirectoryName()));
         return parent;
     }
 

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -111,6 +111,8 @@ private void initialize() throws IOException {
             command.add("--langmap=sql:+.pls"); // RFE #19208
             command.add("--langmap=sql:+.pld"); // RFE #19208
             command.add("--langmap=sql:+.pks"); // RFE #19208 ?
+            command.add("--langmap=sql:+.pkb"); // # 1763
+            command.add("--langmap=sql:+.pck"); // # 1763
 
             command.add("--langmap=javascript:+.ts");
             

File: src/org/opensolaris/opengrok/analysis/sql/PLSQLAnalyzerFactory.java
Patch:
@@ -41,7 +41,9 @@ public class PLSQLAnalyzerFactory extends FileAnalyzerFactory {
         "PLS",
         "PKS", //?
         "PLD",
-        "PLB"
+        "PLB",
+        "PKB",
+        "PCK"
     };
 
     public PLSQLAnalyzerFactory() {

File: src/org/opensolaris/opengrok/history/BitKeeperRepository.java
Patch:
@@ -172,7 +172,7 @@ String determineBranch() throws IOException {
      */
     @Override
     String determineParent() throws IOException {
-        final File directory = new File(directoryName);
+        final File directory = new File(getDirectoryName());
 
         final ArrayList<String> argv = new ArrayList<String>();
         ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -197,8 +197,8 @@ String determineBranch() throws IOException {
     Executor getHistoryLogExecutor(final File file) throws IOException {
         String abs = file.getCanonicalPath();
         String filename = "";
-        if (abs.length() > directoryName.length()) {
-            filename = abs.substring(directoryName.length() + 1);
+        if (abs.length() > getDirectoryName().length()) {
+            filename = abs.substring(getDirectoryName().length() + 1);
         }
 
         List<String> cmd = new ArrayList<>();
@@ -347,7 +347,7 @@ protected Annotation parseAnnotation(Reader input, String fileName)
 
     @Override
     String determineParent() throws IOException {
-        File rootFile = new File(directoryName + File.separator + "CVS"
+        File rootFile = new File(getDirectoryName() + File.separator + "CVS"
                 + File.separator + "Root");
         String parent = null;
 

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -344,7 +344,7 @@ final void createCache(HistoryCache cache, String sinceRevision)
         // We need to refresh list of tags for incremental reindex.
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.isTagsEnabled() && this.hasFileBasedTags()) {
-            this.buildTagList(new File(this.directoryName));
+            this.buildTagList(new File(this.getDirectoryName()));
         }
 
         if (history != null) {

File: test/org/opensolaris/opengrok/web/ProjectHelperTest.java
Patch:
@@ -53,7 +53,7 @@ public void testGetInstance() {
      * Test if projects and groups are always reloaded fully from the env.
      *
      * This ensures that when the RuntimeEnvironment changes that it also
-     * updates the projects in the ui.
+     * updates the projects in the UI.
      */
     @Test
     public void testSynchronization() {
@@ -62,6 +62,7 @@ public void testSynchronization() {
         Set<Group> oldGroups = new TreeSet<>(env.getGroups());
         Map<Project, List<RepositoryInfo>> oldMap = new TreeMap<>(getRepositoriesMap());
         env.getAuthorizationFramework().removeAll(env.getAuthorizationFramework().getStack());
+        env.setSourceRoot("/src"); // needed for setDirectoryName() below
 
         cfg = PageConfig.get(getRequest());
         helper = cfg.getProjectHelper();
@@ -89,7 +90,7 @@ public void testSynchronization() {
 
         RepositoryInfo info = new RepoRepository();
         info.setParent(repo.getName());
-        info.setDirectoryName(null);
+        info.setDirectoryName("/foo");
 
         List<RepositoryInfo> infos = getRepositoriesMap().get(repo);
         if (infos == null) {

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -71,7 +71,7 @@ protected static Project createRepository(
         for (int i = 0; i < cnt; i++) {
             RepositoryInfo info = new RepoRepository();
             info.setParent(p.getName() + "_" + i);
-            info.setDirectoryName(p.getPath());
+            info.setDirectoryNameRelative(p.getPath());
             rps.add(info);
             List<RepositoryInfo> infos = map.get(p);
             if (infos == null) {

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.13.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.14.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -217,7 +217,7 @@ private void initialize() throws IOException {
             command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?type[[:space:]]+([[:alnum:]_]+)/\\2/T,types,type definitions/");
             command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?enum[[:space:]]+([[:alnum:]_]+)/\\2/g,enum,enumeration names/");
             command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?struct[[:space:]]+([[:alnum:]_]+)/\\2/S,structure names/");
-            command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?mod[[:space:]]+([[:alnum:]_]+)/\\2/n,modules,module names/");
+            command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?mod[[:space:]]+([[:alnum:]_]+)/\\2/N,modules,module names/");
             command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?(static|const)[[:space:]]+(mut[[:space:]]+)?([[:alnum:]_]+)/\\4/C,consts,static constants/");
             command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?(unsafe[[:space:]]+)?trait[[:space:]]+([[:alnum:]_]+)/\\3/r,traits,traits/");
             command.add("--regex-rust=/^[[:space:]]*(pub[[:space:]]+)?(unsafe[[:space:]]+)?impl([[:space:]\n]*<[^>]*>)?[[:space:]]+(([[:alnum:]_:]+)[[:space:]]*(<[^>]*>)?[[:space:]]+(for)[[:space:]]+)?([[:alnum:]_]+)/\\5 \\7 \\8/I,impls,trait implementations/");

File: src/org/opensolaris/opengrok/configuration/messages/ProjectMessage.java
Patch:
@@ -91,7 +91,7 @@ private List<RepositoryInfo> getRepositoriesInDir(RuntimeEnvironment env, File p
         // since addRepositories() calls getRepository() for each of
         // the repos.
         hg.addRepositories(new File[]{projDir}, repos,
-            env.getIgnoredNames(), env.getScanningDepth());
+            env.getIgnoredNames());
 
         return repos;
     }

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -185,7 +185,7 @@ public String getHeaderData() {
     }
 
     /**
-     * Get all data required to create a diff view wrt. to this request in one
+     * Get all data required to create a diff view w.r.t. to this request in one
      * go.
      *
      * @return an instance with just enough information to render a sufficient

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -707,7 +707,7 @@ String determineBranch() throws IOException {
     private static final SimpleDateFormat outputDateFormat = new SimpleDateFormat("YYYY-MM-dd HH:mm");
 
     @Override
-    String determineCurrentVersion() throws IOException {
+    public String determineCurrentVersion() throws IOException {
         File directory = new File(directoryName);
         List<String> cmd = new ArrayList<>();
         // The delimiter must not be contained in the date format emitted by

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -702,7 +702,7 @@ String determineParent() throws IOException {
     }
 
     @Override
-    String determineCurrentVersion() throws IOException {
+    public String determineCurrentVersion() throws IOException {
         String line = null;
         File directory = new File(directoryName);
 

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -400,7 +400,7 @@ public List<String> getIgnoredDirs() {
      *
      * @return the version
      */
-    String determineCurrentVersion() throws IOException {
+    public String determineCurrentVersion() throws IOException {
         return null;
     }
 

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -115,7 +115,6 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             RuntimeEnvironment.getInstance().startWatchDogService(new File(env.getConfiguration().getPluginDirectory()));
         }
 
-        RuntimeEnvironment.getInstance().startIndexReopenThread();
         RuntimeEnvironment.getInstance().startExpirationTimer();
 
         try {
@@ -134,7 +133,6 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
     public void contextDestroyed(final ServletContextEvent servletContextEvent) {
         RuntimeEnvironment.getInstance().stopConfigurationListenerThread();
         RuntimeEnvironment.getInstance().stopWatchDogService();
-        RuntimeEnvironment.getInstance().stopIndexReopenThread();
         RuntimeEnvironment.getInstance().stopExpirationTimer();
         try {
             RuntimeEnvironment.getInstance().saveStatistics();

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis;
 
@@ -362,8 +362,8 @@ public void populateDocument(Document doc, File file, String path,
         if (fa != null) {
             Genre g = fa.getGenre();
             if (g == Genre.PLAIN || g == Genre.XREFABLE || g == Genre.HTML) {
-                doc.add(new Field(QueryBuilder.T, g.typeName(), string_ft_stored_nanalyzed_norms
-                ));
+                doc.add(new Field(QueryBuilder.T, g.typeName(),
+		        string_ft_stored_nanalyzed_norms));
             }
             fa.analyze(doc, StreamSource.fromFile(file), xrefOut);
 

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -177,7 +177,7 @@ public static Repository getRepository(RepositoryInfo info) throws Instantiation
      * inside repository classes rather than globally in IgnoredFiles/Dirs.
      * Should be called after {@code setConfiguration()}.
      */
-    public static void setIgnored(RuntimeEnvironment env) {
+    public static void initializeIgnoredNames(RuntimeEnvironment env) {
         for (Repository repo : repositories) {
             for (String file : repo.getIgnoredFiles()) {
                 env.getIgnoredNames().add("f:" + file);

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -541,7 +541,7 @@ public static void main(String argv[]) {
                 // Let repository types to add items to ignoredNames.
                 // This changes env so is called after the setConfiguration()
                 // call above.
-                RepositoryFactory.setIgnored(env);
+                RepositoryFactory.initializeIgnoredNames(env);
 
                 if (noindex) {
                     getInstance().sendToConfigHost(env, host, port);

File: test/org/opensolaris/opengrok/configuration/messages/ProjectMessageTest.java
Patch:
@@ -84,7 +84,7 @@ public void setUp() throws IOException {
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
         env.setProjectsEnabled(true);
-        RepositoryFactory.setIgnored(env);
+        RepositoryFactory.initializeIgnoredNames(env);
     }
 
     @After

File: test/org/opensolaris/opengrok/history/HistoryGuruTest.java
Patch:
@@ -59,7 +59,7 @@ public static void setUpClass() throws Exception {
         repository = new TestRepository();
         repository.create(HistoryGuru.class.getResourceAsStream(
                 "repositories.zip"));
-        RepositoryFactory.setIgnored(RuntimeEnvironment.getInstance());
+        RepositoryFactory.initializeIgnoredNames(RuntimeEnvironment.getInstance());
         FileUtilities.getAllFiles(new File(repository.getSourceRoot()),
                 files, true);
         RuntimeEnvironment.getInstance().setVerbose(true);

File: test/org/opensolaris/opengrok/history/PerforceRepositoryTest.java
Patch:
@@ -64,7 +64,7 @@ public static void setUpClass() throws Exception {
             return;
         }
         files = new ArrayList<>();
-        RepositoryFactory.setIgnored(RuntimeEnvironment.getInstance());
+        RepositoryFactory.initializeIgnoredNames(RuntimeEnvironment.getInstance());
         FileUtilities.getAllFiles(root, files, false);
     }
 

File: test/org/opensolaris/opengrok/index/IgnoredNamesTest.java
Patch:
@@ -65,7 +65,7 @@ public static void setUpClass() throws Exception {
                 "/org/opensolaris/opengrok/index/source.zip"));
 
         // Populate ignored lists with repository specific entries.
-        RepositoryFactory.setIgnored(RuntimeEnvironment.getInstance());
+        RepositoryFactory.initializeIgnoredNames(RuntimeEnvironment.getInstance());
     }
 
     /**

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -67,7 +67,7 @@ public static void setUpClass() throws Exception {
         env.setDataRoot(repository.getDataRoot());
         env.setHistoryEnabled(true);
         env.setProjectsEnabled(true);
-        RepositoryFactory.setIgnored(env);
+        RepositoryFactory.initializeIgnoredNames(env);
 
         // Note that all tests in this class share the index created below.
         // Ergo, if they need to modify it, this has to be done in such a way

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -73,7 +73,7 @@ public IndexerTest() {
     public static void setUpClass() throws Exception {
         assertTrue("No point in running indexer tests without valid ctags",
                 RuntimeEnvironment.getInstance().validateExuberantCtags());
-        RepositoryFactory.setIgnored(RuntimeEnvironment.getInstance());
+        RepositoryFactory.initializeIgnoredNames(RuntimeEnvironment.getInstance());
     }
 
     @AfterClass

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -61,7 +61,7 @@ public static void setUpClass() throws Exception {
         env.setCtags(System.getProperty("org.opensolaris.opengrok.analysis.Ctags", "ctags"));
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-        RepositoryFactory.setIgnored(env);
+        RepositoryFactory.initializeIgnoredNames(env);
 
         if (env.validateExuberantCtags()) {
             env.setSourceRoot(repository.getSourceRoot());

File: test/org/opensolaris/opengrok/web/DirectoryListingTest.java
Patch:
@@ -212,7 +212,7 @@ public void setUp() throws Exception {
 
         // Need to populate list of ignored entries for all repository types.
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        RepositoryFactory.setIgnored(env);
+        RepositoryFactory.initializeIgnoredNames(env);
     }
 
     @After

File: src/org/opensolaris/opengrok/util/ClassUtil.java
Patch:
@@ -56,7 +56,7 @@ public static void remarkTransientFields(Class targetClass) {
             BeanInfo info;
             info = Introspector.getBeanInfo(targetClass);
             PropertyDescriptor[] propertyDescriptors = info.getPropertyDescriptors();
-            for (Field f : Project.class.getDeclaredFields()) {
+            for (Field f : targetClass.getDeclaredFields()) {
                 if (Modifier.isTransient(f.getModifiers())) {
                     for (int i = 0; i < propertyDescriptors.length; ++i) {
                         if (propertyDescriptors[i].getName().equals(f.getName())) {

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -87,7 +87,7 @@ public CommandLineOptions() {
         options.add(new Option('i', "pattern", "Ignore the named files (prefix with 'f:') or directories (prefix with 'd:') (supports wildcards, example: -i *.so -i *.dll)"));
         options.add(new Option('k', "/path/to/repository", "Kill the history cache for the given repository and exit. Use '*' to delete the cache for all repositories."));
         options.add(new Option('K', null, "List all repository paths and exit."));
-        options.add(new Option('L', "path", "Path to the subdirectory in the web-application containing the requested stylesheet. The following factory-defaults exist: \"default\", \"offwhite\" and \"polished\""));
+        options.add(new Option('L', "path", "Path to the subdirectory in the web-application containing the requested stylesheet. The following factory-defaults exist: \"default\""));
         options.add(new Option('l', ON_OFF, "Turn on/off locking of the Lucene database during index generation"));
         options.add(new Option('m', NUMBER, "Amount of memory that may be used for buffering added documents and deletions before they are flushed to the Directory(default "+Configuration.defaultRamBufferSize+"MB). Please increase JVM heap accordingly, too."));
         options.add(new Option('N', "/path/to/symlink", "Allow this symlink to be followed. Option may be repeated. By default only symlinks directly under source root directory are allowed."));

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -431,7 +431,7 @@ public void update() throws IOException, HistoryException {
 
                     // Remove data for the trailing terms that indexDown()
                     // did not traverse. These correspond to files that have been
-                    // removed and have higher ordering that any present files.
+                    // removed and have higher ordering than any present files.
                     while (uidIter != null && uidIter.term() != null
                         && uidIter.term().utf8ToString().startsWith(startuid)) {
 

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -430,9 +430,8 @@ public void update() throws IOException, HistoryException {
                             getFileCount(sourceRoot, dir));
 
                     // Remove data for the trailing terms that indexDown()
-                    // did not traverse. These correspond to files that have
-                    // been removed and have higher ordering that any terms
-                    // in the index.
+                    // did not traverse. These correspond to files that have been
+                    // removed and have higher ordering that any present files.
                     while (uidIter != null && uidIter.term() != null
                         && uidIter.term().utf8ToString().startsWith(startuid)) {
 

File: src/org/opensolaris/opengrok/index/IndexChangedListener.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.index;
 
@@ -35,7 +35,7 @@ public interface IndexChangedListener {
      */
     void fileAdd(String path, String analyzer);
     /**
-     * A file is to be added to the index database
+     * A file was added to the index database
      * @param path The path to the file (absolute from source root)
      * @param analyzer The analyzer being used to analyze the file
      */
@@ -46,7 +46,7 @@ public interface IndexChangedListener {
      */
     void fileRemove(String path);
     /**
-     * A file is to be removed from the index database
+     * A file was removed from the index database
      * @param path The path to the file (absolute from source root)
      */
     void fileRemoved(String path);

File: test/org/opensolaris/opengrok/history/FileHistoryCacheTest.java
Patch:
@@ -353,7 +353,7 @@ public void testStoreAndGet() throws Exception {
      * rename+change file.
      * 
      * The scenario goes as follows:
-     * - create repo
+     * - create Mercurial repository
      * - perform full reindex
      * - add changesets which renamed and modify a file
      * - perform incremental reindex

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.12.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.13.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -757,7 +757,7 @@ public String getRequestedProjectsAsString() {
      * NOTE: This method assumes, that project names do <b>not</b> contain a
      * comma (','), since this character is used as name separator!
      *
-     * @return a possible empty set of project names aka descriptions but never
+     * @return a possible empty set of project names but never
      * {@code null}. It is determined as follows: <ol> <li>If there is no
      * project in the runtime environment (RTE) an empty set is returned.
      * Otherwise:</li> <li>If there is only one project in the RTE, this one
@@ -844,7 +844,7 @@ private List<String> getParamVals(String paramName) {
      * contains the project list in question.
      * @param cookieName name of the cookie which possible contains project
      * lists used as fallback
-     * @return a possible empty set but never {@code null}.
+     * @return set of project names. Possibly empty set but never {@code null}.
      */
     protected SortedSet<String> getRequestedProjects(String paramName,
             String cookieName) {

File: src/org/opensolaris/opengrok/authorization/AuthorizationEntity.java
Patch:
@@ -85,7 +85,6 @@ public boolean test(IAuthorizationPlugin t) {
          * @return true if plugin allows the action; false otherwise
          */
         public abstract boolean decision(IAuthorizationPlugin t);
-
     }
 
     /**

File: test/org/opensolaris/opengrok/configuration/messages/StatsMessageTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.web.DummyHttpServletRequest;
 import org.opensolaris.opengrok.web.Statistics;
 
 /**
@@ -105,7 +104,7 @@ public void testGetClean() {
     @Test
     public void testGet() {
         testClean();
-        env.getStatistics().addRequest(new DummyHttpServletRequest());
+        env.getStatistics().addRequest();
         Message m = new StatsMessage();
         m.setText("get");
         byte[] out = null;

File: src/org/opensolaris/opengrok/web/ProjectHelper.java
Patch:
@@ -159,7 +159,7 @@ private Set<Project> filterProjects(Set<Project> p) {
         repos.removeIf(new Predicate<Project>() {
             @Override
             public boolean test(Project t) {
-                return !cfg.isAllowed(t);
+                return !cfg.isAllowed(t) || !t.isIndexed();
             }
         });
         return repos;
@@ -196,7 +196,7 @@ private Set<Project> cacheProjects(String name, Set<Project> original) {
             p = filterProjects(original);
             cfg.setRequestAttribute(name, p);
         }
-        return p.stream().filter(proj -> proj.isIndexed()).collect(Collectors.toSet());
+        return p;
     }
 
     /**

File: test/org/opensolaris/opengrok/index/IndexerRepoTest.java
Patch:
@@ -69,7 +69,7 @@ private void checkNumberOfThreads() {
         Thread[] threads = new Thread[mainGroup.activeCount()];
         mainGroup.enumerate(threads);
         for (int i = 0; i < threads.length; i++) {
-            if (threads[i].getName() == null) {
+            if (threads[i] == null || threads[i].getName() == null) {
                 continue;
             }
             assertEquals(false, threads[i].getName().contains("renamed-handling"));

File: src/org/opensolaris/opengrok/history/AccuRevRepository.java
Patch:
@@ -309,7 +309,7 @@ public String getDepotRelativePath(File file) {
         String path = File.separator + "." + File.separator;
 
         try {
-            path = env.getPathRelativeToSourceRoot(file, 0);
+            path = env.getPathRelativeToSourceRoot(file);
 
             if (path.startsWith(File.separator)) {
                 path = File.separator + "." + path;

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -167,7 +167,7 @@ public void processStream(InputStream input) throws IOException {
                         }
 
                         File f = new File(myDir, s);
-                        String name = env.getPathRelativeToSourceRoot(f, 0);
+                        String name = env.getPathRelativeToSourceRoot(f);
                         entry.addFile(name);
                     }
                     break;

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -128,7 +128,7 @@ private void process(BufferedReader in) throws IOException {
                 if (entry != null) {
                     try {
                         File f = new File(myDir, s);
-                        entry.addFile(env.getPathRelativeToSourceRoot(f, 0));
+                        entry.addFile(env.getPathRelativeToSourceRoot(f));
                     } catch (FileNotFoundException e) { //NOPMD
                         // If the file is not located under the source root,
                         // ignore it (bug #11664).

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -140,7 +140,7 @@ public void processStream(InputStream input) throws IOException {
                     if (strings[ii].length() > 0) {
                         File f = new File(mydir, strings[ii]);
                         try {
-                            entry.addFile(env.getPathRelativeToSourceRoot(f, 0));
+                            entry.addFile(env.getPathRelativeToSourceRoot(f));
                         } catch (FileNotFoundException e) { // NOPMD
                             // If the file is not located under the source root,
                             // ignore it (bug #11664).
@@ -149,7 +149,7 @@ public void processStream(InputStream input) throws IOException {
                 }
             } else if (s.startsWith(MercurialRepository.FILE_COPIES) &&
                 entry != null && isDir) {
-                /* 
+                /*
                  * 'file_copies:' should be present only for directories but
                  * we use isDir to be on the safe side.
                  */

File: src/org/opensolaris/opengrok/history/MonotoneHistoryParser.java
Patch:
@@ -164,7 +164,7 @@ public void processStream(InputStream input) throws IOException {
                         for (String f : files) {
                             File file = new File(mydir, f);
                             try {
-                                entry.addFile(env.getPathRelativeToSourceRoot(file, 0));
+                                entry.addFile(env.getPathRelativeToSourceRoot(file));
                             } catch (FileNotFoundException e) { // NOPMD
                                 // If the file is not located under the source root, ignore it
                             }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -110,6 +110,7 @@ public CommandLineOptions() {
         options.add(new Option('W', "/path/to/configuration", "Write the current configuration to the specified file (so that the web application can use the same configuration"));
         options.add(new Option('w', "webapp-context", "Context of webapp. Default is /source. If you specify a different name, make sure to rename source.war to that name. Also FULL reindex is needed if this is changed."));
         options.add(new Option('X', "url:suffix", "URL Suffix for the user Information provider. Default: \"\""));
+        options.add(new Option('y', null, "populate the webapp with bare configuration and exit"));
         options.add(new Option('z', NUMBER, "depth of scanning for repositories in directory structure relative to source root. Default is "+Configuration.defaultScanningDepth+" ."));
     }
 

File: src/org/opensolaris/opengrok/web/ProjectHelper.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.TreeMap;
 import java.util.TreeSet;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
 import org.opensolaris.opengrok.configuration.Group;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.RepositoryInfo;
@@ -195,7 +196,7 @@ private Set<Project> cacheProjects(String name, Set<Project> original) {
             p = filterProjects(original);
             cfg.setRequestAttribute(name, p);
         }
-        return p;
+        return p.stream().filter(proj -> proj.isIndexed()).collect(Collectors.toSet());
     }
 
     /**

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -882,7 +882,7 @@ public static void dumpConfiguration(Appendable out) throws IOException,
         printTableRow(out, "User page suffix", env.getUserPageSuffix());
         printTableRow(out, "Review page", env.getReviewPage());
         printTableRow(out, "Review pattern", env.getReviewPattern());
-        printTableRow(out, "Using projects", env.hasProjects());
+        printTableRow(out, "Using projects", env.isProjectsEnabled());
         out.append("<tr><td>Ignored files</td><td>");
         printUnorderedList(out, env.getIgnoredNames().getItems());
         out.append("</td></tr>");

File: test/org/opensolaris/opengrok/authorization/AuthorizationEntityTest.java
Patch:
@@ -101,6 +101,7 @@ public void testForGroupsAndForProjectsDiscovery() {
         AuthorizationEntity authEntity;
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
+        env.setProjectsEnabled(true);
 
         env.getProjects().put("project 1", new Project("project 1"));
         env.getProjects().put("project 2", new Project("project 2"));

File: test/org/opensolaris/opengrok/configuration/ProjectTest.java
Patch:
@@ -100,6 +100,7 @@ public void testGetProject() {
         projects.put("foo", foo);
         projects.put("bar", bar);
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
+        env.setProjectsEnabled(true);
         env.setProjects(projects);
 
         // The matching of project name to project should be exact.

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -133,6 +133,7 @@ public void testSourceRoot() throws IOException {
     @Test
     public void testProjects() throws IOException {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
+        instance.setProjectsEnabled(true);
         assertFalse(instance.hasProjects());
         assertNotNull(instance.getProjects());
         assertEquals(0, instance.getProjects().size());

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -63,7 +63,7 @@ public static void setUpClass() throws Exception {
 
         Indexer indexer = Indexer.getInstance();
         indexer.prepareIndexer(
-                env, true, true, new TreeSet<>(Arrays.asList(new String[]{"/c"})), null,
+                env, true, true, new TreeSet<>(Arrays.asList(new String[]{"/c"})),
                 false, false, null, null, new ArrayList<String>(), false);
         indexer.doIndexerExecution(true, 1, null, null);
     }

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -70,7 +70,7 @@ public static void setUpClass() throws Exception {
             env.setHistoryEnabled(false);
             Indexer.getInstance().prepareIndexer(env, true, true,
                 new TreeSet<>(Arrays.asList(new String[]{"/c"})),
-                null, false, false, null, null, new ArrayList<>(), false);
+                false, false, null, null, new ArrayList<>(), false);
             Indexer.getInstance().doIndexerExecution(true, 1, null, null);
         } else {
             System.out.println("Skipping test. Could not find a ctags I could use in path.");

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -70,7 +70,7 @@ public static void setUpClass() throws Exception {
             env.setVerbose(false);
             env.setHistoryEnabled(false);
             Indexer.getInstance().prepareIndexer(env, true, true,
-                    new TreeSet<>(Arrays.asList(new String[]{"/c"})), null,
+                    new TreeSet<>(Arrays.asList(new String[]{"/c"})),
                     false, false, null, null, new ArrayList<>(), false);
             Indexer.getInstance().doIndexerExecution(true, 1, null, null);
         } else {

File: test/org/opensolaris/opengrok/web/ProjectHelperExtendedTest.java
Patch:
@@ -81,6 +81,7 @@ public Cookie[] getCookies() {
 
     protected static Project createProject(String name) {
         Project p = new Project(name);
+        p.setIndexed(true);
         return p;
     }
 

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -99,6 +99,7 @@ protected static Project createProject(
                 + (repository ? "repository" : "project")
                 + "_" + index + "_" + number);
         prjs.put(p.getName(), p);
+        p.setIndexed(true);
         return p;
     }
 

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,9 +125,9 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.11.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.12.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
-        SCRIPTS.put("diff", new FileScript("js/diff-0.0.1.js", 20));
+        SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }
 
     /**

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,9 +125,9 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.11.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.12.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
-        SCRIPTS.put("diff", new FileScript("js/diff-0.0.1.js", 20));
+        SCRIPTS.put("diff", new FileScript("js/diff-0.0.2.js", 20));
     }
 
     /**

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.10.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.11.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.1.js", 20));
     }

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -125,7 +125,7 @@ public String toHtml() {
         SCRIPTS.put("jquery-tablesorter", new FileScript("js/jquery-tablesorter-2.26.6.min.js", 12));
         SCRIPTS.put("tablesorter-parsers", new FileScript("js/tablesorter-parsers-0.0.1.js", 13));
         SCRIPTS.put("searchable-option-list", new FileScript("js/searchable-option-list-2.0.3.min.js", 14));
-        SCRIPTS.put("utils", new FileScript("js/utils-0.0.9.js", 15));
+        SCRIPTS.put("utils", new FileScript("js/utils-0.0.10.js", 15));
         SCRIPTS.put("repos", new FileScript("js/repos-0.0.1.js", 20));
         SCRIPTS.put("diff", new FileScript("js/diff-0.0.1.js", 20));
     }

File: src/org/opensolaris/opengrok/configuration/Groups.java
Patch:
@@ -246,7 +246,7 @@ public boolean call(Group g) {
                 for (int i = 0; i < g.getFlag() * 2; i++) {
                     out.print(" ");
                 }
-                out.println(g.getName() + " ~ \"" + g.getPattern() + "\"");
+                out.println(g.getName() + " ~ '" + g.getPattern() + "'");
                 return false;
             }
         });

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -81,7 +81,7 @@ public CommandLineOptions() {
         options.add(new Option('D', null, "Disable generating history for renamed files. Makes indexing faster for repositories with lots of renamed files."));
         options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow."));
         options.add(new Option('G', null, "Assign commit tags to all entries in history for all repositories."));
-        options.add(new Option('H', null, "Generate history cache for all repositories"));
+        options.add(new Option('H', null, "Get history for all repositories"));
         options.add(new Option('h', "/path/to/repository", "just generate history cache for the specified repos (absolute path from source root)"));
         options.add(new Option('I', "pattern", "Only files matching this pattern will be examined (supports wildcards, example: -I *.java -I *.c)"));
         options.add(new Option('i', "pattern", "Ignore the named files (prefix with 'f:') or directories (prefix with 'd:') (supports wildcards, example: -i *.so -i *.dll)"));

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -59,11 +59,12 @@ public static void setUpClass() throws Exception {
 
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
+        env.setHistoryEnabled(false);
 
         Indexer indexer = Indexer.getInstance();
         indexer.prepareIndexer(
                 env, true, true, new TreeSet<>(Arrays.asList(new String[]{"/c"})), null,
-                false, false, false, null, null, new ArrayList<String>(), false);
+                false, false, null, null, new ArrayList<String>(), false);
         indexer.doIndexerExecution(true, 1, null, null);
     }
 

File: src/org/opensolaris/opengrok/history/RCSRepository.java
Patch:
@@ -180,7 +180,7 @@ String determineParent() throws IOException {
     }
 
     @Override
-    String determineBranch() {
+    String determineBranch() throws IOException {
         return null;
     }
 }

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -83,6 +83,7 @@
 import org.opensolaris.opengrok.analysis.sh.ShAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sql.PLSQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sql.SQLAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.swift.SwiftAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.tcl.TclAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.uue.UuencodeAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.vb.VBAnalyzerFactory;
@@ -180,6 +181,7 @@ public class AnalyzerGuru {
             new JavaAnalyzerFactory(),
             new JavaScriptAnalyzerFactory(),
             new KotlinAnalyzerFactory(),
+            new SwiftAnalyzerFactory(),
             new PythonAnalyzerFactory(),
             new RustAnalyzerFactory(),
             new PerlAnalyzerFactory(),

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -207,9 +207,8 @@ Executor getHistoryLogExecutor(final File file) throws IOException {
         cmd.add("log");
 
         if (getBranch() != null && !getBranch().isEmpty()) {
-            // Just generate THIS branch history, we don't care about the other
-            // branches which are not checked out.
-            cmd.add("-r" + branch);
+            // Generate history on this branch and follow up to the origin.
+            cmd.add("-r1.1:" + branch);
         } else {
             // Get revisions on this branch only (otherwise the revisions
             // list produced by the cvs log command would be unsorted).

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -296,6 +296,9 @@ Annotation annotate(File file, String revision) throws IOException {
         if (revision != null) {
             cmd.add("-r");
             cmd.add(revision);
+        } else if (getBranch() != null && !getBranch().isEmpty()) {
+            cmd.add("-r");
+            cmd.add(getBranch());
         }
         cmd.add(file.getName());
 

File: src/org/opensolaris/opengrok/configuration/messages/ConfigMessage.java
Patch:
@@ -55,7 +55,7 @@ protected byte[] applyMessage(RuntimeEnvironment env) throws IOException {
         if (hasTag("getconf")) {
             return env.getConfiguration().getXMLRepresentationAsString().getBytes();
         } else if (hasTag("auth") && "reload".equalsIgnoreCase(getText())) {
-            AuthorizationFramework.getInstance().reload();
+            env.getAuthorizationFramework().reload();
         } else if (hasTag("set")) {
             Matcher matcher = VARIABLE_PATTERN.matcher(getText());
             if (matcher.find()) {

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -1325,7 +1325,7 @@ public static PageConfig get(HttpServletRequest request) {
 
     private PageConfig(HttpServletRequest req) {
         this.req = req;
-        this.authFramework = AuthorizationFramework.getInstance();
+        this.authFramework = RuntimeEnvironment.getInstance().getAuthorizationFramework();
     }
 
     /**

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -60,7 +60,6 @@
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
 import org.opensolaris.opengrok.Info;
-import org.opensolaris.opengrok.authorization.AuthorizationFramework;
 import org.opensolaris.opengrok.configuration.Group;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
@@ -888,7 +887,7 @@ public static void dumpConfiguration(Appendable out) throws IOException,
                 env.isAllowLeadingWildcard());
         printTableRow(out, "History cache", HistoryGuru.getInstance()
                 .getCacheInfo());
-        printTableRow(out, "Authorization", "<pre>" + AuthorizationFramework.getInstance().getStack().hierarchyToString() + "</pre>");
+        printTableRow(out, "Authorization", "<pre>" + env.getAuthorizationFramework().getStack().hierarchyToString() + "</pre>");
         out.append("</table>");
     }
 

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -37,7 +37,6 @@
 import javax.servlet.ServletRequestEvent;
 import javax.servlet.ServletRequestListener;
 import org.json.simple.parser.ParseException;
-import org.opensolaris.opengrok.authorization.AuthorizationFramework;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.logger.LoggerFactory;
 
@@ -104,8 +103,6 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
             LOGGER.log(Level.SEVERE, "Could not parse statistics from a file.", ex);
         }
 
-        AuthorizationFramework.getInstance(); // start + load
-
         if (env.getConfiguration().getPluginDirectory() != null && env.isAuthorizationWatchdog()) {
             RuntimeEnvironment.getInstance().startWatchDogService(new File(env.getConfiguration().getPluginDirectory()));
         }

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -193,6 +193,9 @@ Executor getHistoryLogExecutor(File file, String sinceRevision)
             // For files this does not matter since if getHistory() is called
             // for a file, the file has to be renamed so we want its complete history.
             cmd.add("--follow");
+        }
+
+        if (!filename.isEmpty()) {
             cmd.add(filename);
         }
 

File: src/org/opensolaris/opengrok/configuration/Groups.java
Patch:
@@ -289,9 +289,7 @@ public boolean call(Group g) {
      * @return false if parent group was not found, true otherwise
      */
     private static boolean modifyGroup(Set<Group> groups, String groupname, String grouppattern, String parent) {
-        Group g = new Group();
-        g.setName(groupname);
-        g.setPattern(grouppattern);
+        Group g = new Group(groupname, grouppattern);
 
         if (updateGroup(groups, groupname, grouppattern)) {
             return true;

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -156,9 +156,7 @@ public void testGroups() throws IOException {
         assertNotNull(instance.getGroups());
         assertEquals(0, instance.getGroups().size());
 
-        Group g = new Group();
-        g.setName("Random");
-        g.setPattern("xyz.*");
+        Group g = new Group("Random", "xyz.*");
 
         instance.getGroups().add(g);
         assertEquals(1, instance.getGroups().size());

File: test/org/opensolaris/opengrok/web/ProjectHelperTest.java
Patch:
@@ -80,8 +80,7 @@ public void testSynchronization() {
         Project p = new Project("some random name not in any group");
 
         // group
-        Group g = new Group();
-        g.setName("some random name of a group");
+        Group g = new Group("some random name of a group");
 
         // repository
         Project repo = new Project("some random name not in any other group");

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -116,8 +116,7 @@ protected static void createGroups(
             List<Group> grps) {
 
         for (int i = start; i < start + cnt; i++) {
-            Group g = new Group();
-            g.setName((allowed ? "allowed_" : "") + "group_" + i);
+            Group g = new Group((allowed ? "allowed_" : "") + "group_" + i);
             String pattern = "";
 
             pattern += createProject(i, 1, true, false, false, rps, prjs, map).getName() + "|";

File: src/org/opensolaris/opengrok/authorization/AuthorizationFramework.java
Patch:
@@ -321,6 +321,7 @@ public void addPlugin(AuthorizationStack stack, IAuthorizationPlugin plugin, Aut
      */
     public void removeAll(AuthorizationStack stack) {
         unloadAllPlugins(stack);
+        stack.getStack().clear();
     }
 
     /**

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -193,6 +193,9 @@ Executor getHistoryLogExecutor(File file, String sinceRevision)
             // For files this does not matter since if getHistory() is called
             // for a file, the file has to be renamed so we want its complete history.
             cmd.add("--follow");
+        }
+
+        if (!filename.isEmpty()) {
             cmd.add(filename);
         }
 

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.executables;
 

File: src/org/opensolaris/opengrok/analysis/javascript/Consts.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.analysis.javascript;

File: src/org/opensolaris/opengrok/web/EftarFileReader.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
 

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -174,7 +174,7 @@ private void initialize() throws IOException {
             command.add("--regex-pascal=/^destructor[[:space:]]+(T[a-zA-Z0-9_]+(<[a-zA-Z0-9_, ]+>)?\\.)([a-zA-Z0-9_<>, ]+)(.*)+/\\1\\3/d,Destructor/");
             command.add("--regex-pascal=/^(procedure)[[:space:]]+T[a-zA-Z0-9_<>, ]+\\.([a-zA-Z0-9_<>, ]+)(.*)/\\2/m,procedure/");
             command.add("--regex-pascal=/^(function)[[:space:]]+T[a-zA-Z0-9_<>, ]+\\.([a-zA-Z0-9_<>, ]+)(.*)/\\2/f,function/");
-            command.add("--regex-pascal=/^[[:space:]]*property[[:space:]]+([a-zA-Z0-9_<>, ]+)[[:space:]]*\\:(.*)/\\1/p,property/");
+            command.add("--regex-pascal=/^[[:space:]]*property[[:space:]]+([a-zA-Z0-9_<>, ]+)[[:space:]]*\\:(.*)/\\1/o,property/");
             command.add("--regex-pascal=/^(uses|interface|implementation)$/\\1/s,Section/");
             command.add("--regex-pascal=/^unit[[:space:]]+([a-zA-Z0-9_<>, ]+)[;(]/\\1/u,unit/");
 

File: src/org/opensolaris/opengrok/authorization/AuthorizationPlugin.java
Patch:
@@ -94,6 +94,9 @@ public AuthorizationPlugin(AuthControlFlag flag, String name, IAuthorizationPlug
      */
     @Override
     public synchronized void load(Map<String, Object> parameters) {
+        // fill properly the "forGroups" and "forProjects" fields
+        processTargetGroupsAndProjects();
+
         if (!hasPlugin()) {
             LOGGER.log(Level.SEVERE, "Configured plugin \"{0}\" has not been loaded into JVM (missing file?). "
                     + "This can cause the authorization to fail always.",
@@ -112,9 +115,6 @@ public synchronized void load(Map<String, Object> parameters) {
         s.putAll(parameters);
         s.putAll(getSetup());
 
-        // fill properly the "forGroups" and "forProjects" fields
-        discoverGroups();
-
         try {
             plugin.load(s);
             setWorking();

File: src/org/opensolaris/opengrok/authorization/AuthorizationStack.java
Patch:
@@ -134,7 +134,7 @@ public void load(Map<String, Object> parameters) {
                     getName()});
 
         // fill properly the "forGroups" and "forProjects" fields
-        discoverGroups();
+        processTargetGroupsAndProjects();
 
         setWorking();
 

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -420,7 +420,7 @@ private List<String> getAuthCommandLineParams() {
             result.add("--password");
             result.add(password);
         }
-        result.add("--trust-server-cert");
+
         return result;
     }
 

File: src/org/opensolaris/opengrok/configuration/Group.java
Patch:
@@ -139,7 +139,7 @@ public Set<Group> getParents() {
      * <ul>
      * <li>any anchestor</li>
      * <li>any subgroup</li>
-     * <ul>
+     * </ul>
      *
      * @return all collected related groups to this group
      */

File: src/org/opensolaris/opengrok/web/Scripts.java
Patch:
@@ -140,8 +140,6 @@ public String toHtml() {
      * Convert the page scripts into HTML.
      *
      * @return the HTML
-     *
-     * @see #sort()
      */
     public String toHtml() {
         StringBuilder builder = new StringBuilder();

File: src/org/opensolaris/opengrok/authorization/AuthorizationFramework.java
Patch:
@@ -428,7 +428,7 @@ private String getClassName(JarEntry f) {
      * Old instances of stack are removed and new list of stack is constructed.
      * Unload and load event is fired on each plugin.
      *
-     * @see IAuthorizationPlugin#load()
+     * @see IAuthorizationPlugin#load(java.util.Map)
      * @see IAuthorizationPlugin#unload()
      * @see Configuration#getPluginDirectory()
      */

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -118,6 +118,7 @@ public MercurialRepository() {
         };
 
         ignoredFiles.add(".hgtags");
+        ignoredFiles.add(".hgignore");
         ignoredDirs.add(".hg");
     }
 

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -83,7 +83,7 @@ public boolean ignore(File file) {
     }
 
     /**
-     * Should the file be ignored or not?
+     * Should the file name be ignored or not ?
      *
      * @param name the name of the file to check
      * @return true if this pathname should be ignored, false otherwise

File: src/org/opensolaris/opengrok/authorization/AuthorizationPluginClassLoader.java
Patch:
@@ -182,7 +182,7 @@ private void checkPackage(String name) throws SecurityException {
      * <li>loading from .jar files</li>
      * </ol>
      *
-     * Package blacklist: {@link #PACKAGE_BLACKLIST}.<br />
+     * Package blacklist: {@link #PACKAGE_BLACKLIST}.<br>
      * Classes whitelist: {@link #CLASS_WHITELIST}.
      *
      * @param name class name
@@ -206,7 +206,7 @@ public Class loadClass(String name) throws ClassNotFoundException, SecurityExcep
      * <li>loading from .jar files</li>
      * </ol>
      *
-     * Package blacklist: {@link #PACKAGE_BLACKLIST}.<br />
+     * Package blacklist: {@link #PACKAGE_BLACKLIST}.<br>
      * Classes whitelist: {@link #CLASS_WHITELIST}.
      *
      * @param name class name

File: src/org/opensolaris/opengrok/history/BitKeeperAnnotationParser.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * BitKeeperAnnotationParser handles parsing the output of `bk annotate` into an annotation object.
  *
- * @author James Service <jas2701@googlemail.com>
+ * @author James Service  {@literal <jas2701@googlemail.com>}
  */
 public class BitKeeperAnnotationParser implements Executor.StreamHandler {
 

File: src/org/opensolaris/opengrok/history/BitKeeperHistoryParser.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * BitKeeperHistoryParser handles parsing the output of `bk log` into a history object.
  *
- * @author James Service <jas2701@googlemail.com>
+ * @author James Service  {@literal <jas2701@googlemail.com>}
  */
 class BitKeeperHistoryParser implements Executor.StreamHandler {
 

File: src/org/opensolaris/opengrok/history/BitKeeperRepository.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Access to a BitKeeper repository.
  *
- * @author James Service <jas2701@googlemail.com>
+ * @author James Service  {@literal <jas2701@googlemail.com>}
  */
 public class BitKeeperRepository extends Repository {
 

File: src/org/opensolaris/opengrok/history/BitKeeperTagEntry.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * BitKeeper specific tag class with ability to compare itself with generic HistoryEntry.
  *
- * @author James Service <jas2701@googlemail.com>
+ * @author James Service  {@literal <jas2701@googlemail.com>}
  */
 public class BitKeeperTagEntry extends TagEntry {
 

File: src/org/opensolaris/opengrok/history/BitKeeperTagParser.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * BitKeeperTagParser handles parsing the output of `bk tags` into a set of tag entries.
  *
- * @author James Service <jas2701@googlemail.com>
+ * @author James Service  {@literal <jas2701@googlemail.com>}
  */
 public class BitKeeperTagParser implements Executor.StreamHandler {
 

File: src/org/opensolaris/opengrok/util/IOUtils.java
Patch:
@@ -101,8 +101,7 @@ public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOEx
     /**
      * List files in the directory recursively.
      *
-     * @param root starting directory
-     * @param suffix suffix for the files
+     * @param root starting directory     
      * @return recursively traversed list of files with given suffix
      */
     public static List<File> listFilesRec(File root) {

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -78,6 +78,7 @@ public CommandLineOptions() {
         options.add(new Option('C', null, "Print per project percentage progress information(I/O extensive, since one read through dir structure is made before indexing, needs -v, otherwise it just goes to the log)"));
         options.add(new Option('c', "/path/to/ctags", "Path to Exuberant Ctags from http://ctags.sf.net by default takes the Exuberant Ctags in PATH."));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
+        options.add(new Option('D', null, "Disable generating history for renamed files. Makes indexing faster for repositories with lots of renamed files."));
         options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow."));
         options.add(new Option('G', null, "Assign commit tags to all entries in history for all repositories."));
         options.add(new Option('H', null, "Generate history cache for all repositories"));

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -243,6 +243,9 @@ public static void main(String argv[]) {
                             cfg.setDataRoot(dataRoot.getCanonicalPath());
                             break;
                         }
+                        case 'D':
+                            cfg.setHandleHistoryOfRenamedFiles(false);
+                            break;
                         case 'e':
                             cfg.setGenerateHtml(false);
                             break;

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -94,7 +94,7 @@ public CommandLineOptions() {
         options.add(new Option('O', ON_OFF, "Turn on/off the optimization of the index database as part of the indexing step"));
         options.add(new Option('o', "path", "File with extra command line options for ctags"));
         options.add(new Option('P', null, "Generate a project for each of the top-level directories in source root"));
-        options.add(new Option('p', "/path/to/default/project", "This is the path to the project that should be selected by default in the web application(when no other project set either in cookie or in parameter). You should strip off the source root."));
+        options.add(new Option('p', "/path/to/default/project", "This is the path to the project that should be selected by default in the web application (when no other project set either in cookie or in parameter). May be used multiple times for several projects. Use \"__all__\" for all projects. You should strip off the source root."));
         options.add(new Option('Q', ON_OFF, "Turn on/off quick context scan. By default only the first 1024k of a file is scanned, and a '[..all..]' link is inserted if the file is bigger. Activating this may slow the server down (Note: this is setting only affects the web application)"));
         options.add(new Option('q', null, "Run as quietly as possible"));
         options.add(new Option('R', "/path/to/configuration", "Read configuration from the specified file"));

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -133,7 +133,7 @@ public void testProjects() throws IOException {
         assertFalse(instance.hasProjects());
         assertNotNull(instance.getProjects());
         assertEquals(0, instance.getProjects().size());
-        assertNull(instance.getDefaultProject());
+        assertNull(instance.getDefaultProjects());
 
         File file = new File("/opengrok_automatic_test/foo/bar");
         instance.setSourceRoot("/opengrok_automatic_test/foo");

File: test/org/opensolaris/opengrok/web/SearchHelperTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import org.junit.After;
@@ -74,8 +75,8 @@ public void tearDown() {
     private void reindex() throws Exception {
         System.out.println("Generating index by using the class methods");
 
-        Indexer.getInstance().prepareIndexer(env, true, true, "/c", null,
-            false, false, false, null, null, new ArrayList<>(), false);
+        Indexer.getInstance().prepareIndexer(env, true, true, new TreeSet<>(Arrays.asList(new String[]{"/c"})), null,
+                false, false, false, null, null, new ArrayList<>(), false);
         Indexer.getInstance().doIndexerExecution(true, 1, null, null);
     }
 

File: src/org/opensolaris/opengrok/history/RepositoryInfo.java
Patch:
@@ -82,7 +82,7 @@ public void setDirectoryName(String directoryName) {
 
     /**
      * Returns true if this repository is usable in this context (for SCM
-     * systems that use external binaries, the binary must be availabe etc)
+     * systems that use external binaries, the binary must be available etc)
      *
      * @return true if the HistoryGuru may use the repository
      */

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -758,7 +758,9 @@ public void setCurrentIndexedCollapseThreshold(int currentIndexedCollapseThresho
     public Date getDateForLastIndexRun() {
         if (lastModified == null) {
             File timestamp = new File(getDataRoot(), "timestamp");
-            lastModified = new Date(timestamp.lastModified());
+            if(timestamp.exists()){
+                lastModified = new Date(timestamp.lastModified());
+            }
         }
         return lastModified;
     }

File: test/org/opensolaris/opengrok/configuration/messages/StatsMessageTest.java
Patch:
@@ -155,7 +155,7 @@ public void testGetValidJson() {
     public void testInvalidReload() {
         Message m = new StatsMessage();
         m.setText("reload");
-        env.getConfiguration().setStatisticsFilePath(null);
+        env.getConfiguration().setStatisticsFilePath("/file/that/doesnot/exists");
 
         try {
             m.apply(env);

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -355,10 +355,10 @@ private void addRepositories(File[] files, Collection<RepositoryInfo> repos,
             try {
                 repository = RepositoryFactory.getRepository(file);
             } catch (InstantiationException ie) {
-                LOGGER.log(Level.WARNING, "Could not create repoitory for '"
+                LOGGER.log(Level.WARNING, "Could not create repository for '"
                         + file + "', could not instantiate the repository.", ie);
             } catch (IllegalAccessException iae) {
-                LOGGER.log(Level.WARNING, "Could not create repoitory for '"
+                LOGGER.log(Level.WARNING, "Could not create repository for '"
                         + file + "', missing access rights.", iae);
             }
             if (repository == null) {

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -218,7 +218,7 @@ public void setFoldingEnabled(boolean foldingEnabled) {
     protected void appendProject() throws IOException {
         if (project != null) {
             out.write("&amp;project=");
-            out.write(project.getDescription());
+            out.write(project.getName());
         }
     }
 
@@ -232,7 +232,7 @@ protected void appendLink(String url) throws IOException {
 
     protected String getProjectPostfix(boolean encoded) {
         String amp = encoded ? "&amp;" : "&";
-        return project == null ? "" : (amp + "project=" + project.getDescription());
+        return project == null ? "" : (amp + "project=" + project.getName());
     }
 
     protected void startScope() {

File: src/org/opensolaris/opengrok/authorization/AuthorizationFramework.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;
 
@@ -81,7 +81,7 @@ public boolean isAllowed(HttpServletRequest request, Project project) {
         return checkAll(
                 request,
                 "plugin_framework_project_cache",
-                project.getDescription(),
+                project.getName(),
                 new Predicate<IAuthorizationPlugin>() {
             @Override
             public boolean test(IAuthorizationPlugin plugin) {

File: src/org/opensolaris/opengrok/configuration/Groups.java
Patch:
@@ -258,7 +258,7 @@ public boolean call(Group g) {
      */
     private static void matchGroups(PrintStream out, Set<Group> groups, String match) {
         Project p = new Project();
-        p.setDescription(match);
+        p.setName(match);
 
         List<Group> matched = new ArrayList<>();
         linearTraverseGroups(groups, new Walker() {

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -414,7 +414,7 @@ public List<Project> getProjects() {
      */
     public List<String> getProjectDescriptions() {
         return threadConfig.get().getProjects().stream().
-            map(Project::getDescription).collect(Collectors.toList());
+            map(Project::getName).collect(Collectors.toList());
     }
 
     /**

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -176,7 +176,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
                             RuntimeEnvironment.MESSAGES_MAIN_PAGE_TAG
                     )).size() > 0) {
                 out.write(" <a ");
-                out.write("href=\"" + xrefPrefix + "/" + p.getDescription() + "\">");
+                out.write("href=\"" + xrefPrefix + "/" + p.getName() + "\">");
                 out.write("<span class=\"important-note important-note-rounded\" data-messages='" + messages + "'>!</span>");
                 out.write("</a>");
             }

File: src/org/opensolaris/opengrok/web/ProjectHelper.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
 
@@ -429,7 +429,7 @@ public boolean test(Project t) {
      * @return true if it is favourite
      */
     public boolean isFavourite(Project project) {
-        return cfg.getCookieVals(OPEN_GROK_PROJECT).contains(project.getDescription());
+        return cfg.getCookieVals(OPEN_GROK_PROJECT).contains(project.getName());
     }
 
     /**

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -1078,7 +1078,7 @@ public static JSONArray messagesToJson(Project project, String... additionalTags
         }
         List<String> tags = new ArrayList<>();
         tags.addAll(Arrays.asList(additionalTags));
-        tags.add(project.getDescription());
+        tags.add(project.getName());
         project.getGroups().stream().forEach((Group t) -> {
             tags.add(t.getName());
         });

File: test/org/opensolaris/opengrok/authorization/AuthorizationPluginClassLoaderTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.authorization;
 
@@ -153,7 +153,7 @@ public void testFalsePlugin() {
         Group g = new Group();
         g.setName("group1");
         Project p = new Project();
-        p.setDescription(("project1"));
+        p.setName(("project1"));
 
         Assert.assertFalse(
                 plugin.isAllowed(new DummyHttpServletRequest(), g)
@@ -175,7 +175,7 @@ public void testTruePlugin() {
         Group g = new Group();
         g.setName("group1");
         Project p = new Project();
-        p.setDescription(("project1"));
+        p.setName(("project1"));
 
         Assert.assertTrue(
                 plugin.isAllowed(new DummyHttpServletRequest(), g)

File: test/org/opensolaris/opengrok/web/ProjectHelperExtendedTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
 
@@ -81,7 +81,7 @@ public Cookie[] getCookies() {
 
     protected static Project createProject(String name) {
         Project p = new Project();
-        p.setDescription(name);
+        p.setName(name);
         return p;
     }
 

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -1158,6 +1158,7 @@ public void writeConfiguration(File file) throws IOException {
      */
     public void writeConfiguration(String host, int port) throws IOException {
         Message m = Message.createMessage("config");
+        m.addTag("setconf");
         m.addTag("reindex");
         m.setText(configuration.getXMLRepresentationAsString());
         try {

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -329,7 +329,7 @@ public Configuration() {
         setGroupsCollapseThreshold(4);
         setPluginDirectory(null);
         setMaxSearchThreadCount(2 * Runtime.getRuntime().availableProcessors());
-        setIndexRefreshPeriod(60);
+        setIndexRefreshPeriod(3600);
         setMessageLimit(500);
         setCurrentIndexedCollapseThreshold(27);
     }

File: test/org/opensolaris/opengrok/configuration/messages/ConfigMessageTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2017, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.configuration.messages;
 

File: src/org/opensolaris/opengrok/analysis/HistoryAnalyzer.java
Patch:
@@ -58,7 +58,7 @@ public HistoryAnalyzer() {
      */
     @Override
     protected TokenStreamComponents createComponents(String fieldName) {        
-        final PlainFullTokenizer plainfull = new PlainFullTokenizer();
+        final PlainFullTokenizer plainfull = new PlainFullTokenizer(FileAnalyzer.dummyReader);
         //we are counting position increments, this might affect the queries later and need to be in sync, especially for highlighting of results
         return new TokenStreamComponents(plainfull, new StopFilter(plainfull, stopWords));
     }

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -47,7 +48,7 @@ public class CAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected CAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new CSymbolTokenizer(null);
+        SymbolTokenizer=new CSymbolTokenizer(FileAnalyzer.dummyReader);
     }
         
     @Override

File: src/org/opensolaris/opengrok/analysis/c/CxxAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -45,7 +46,7 @@ public class CxxAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected CxxAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new CxxSymbolTokenizer(null);    
+        SymbolTokenizer=new CxxSymbolTokenizer(FileAnalyzer.dummyReader);    
     }      
 
     @Override

File: src/org/opensolaris/opengrok/analysis/clojure/ClojureAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -36,7 +37,7 @@ public class ClojureAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected ClojureAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new ClojureSymbolTokenizer(null);    
+        SymbolTokenizer=new ClojureSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
     
     @Override

File: src/org/opensolaris/opengrok/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexTokenizer;
 import org.opensolaris.opengrok.analysis.JFlexXref;
@@ -41,7 +42,7 @@ public class CSharpAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected CSharpAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new CSharpSymbolTokenizer(null);    
+        SymbolTokenizer=new CSharpSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
    
     @Override

File: src/org/opensolaris/opengrok/analysis/erlang/ErlangAnalyzer.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -41,7 +42,7 @@ public class ErlangAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected ErlangAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new ErlangSymbolTokenizer(null);    
+        SymbolTokenizer=new ErlangSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
 
 //    @Override

File: src/org/opensolaris/opengrok/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
 import org.opensolaris.opengrok.configuration.Project;
@@ -40,7 +41,7 @@ public class FortranAnalyzer extends AbstractSourceCodeAnalyzer {
 
     FortranAnalyzer(FortranAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new FortranSymbolTokenizer(null);    
+        SymbolTokenizer=new FortranSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
     
     @Override

File: src/org/opensolaris/opengrok/analysis/golang/GolangAnalyzer.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -45,7 +46,7 @@ public class GolangAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected GolangAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new GolangSymbolTokenizer(null);    
+        SymbolTokenizer=new GolangSymbolTokenizer(FileAnalyzer.dummyReader);    
     }   
 
     @Override

File: src/org/opensolaris/opengrok/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -45,7 +46,7 @@ public class HaskellAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected HaskellAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new HaskellSymbolTokenizer(null);
+        SymbolTokenizer=new HaskellSymbolTokenizer(FileAnalyzer.dummyReader);
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class JavaAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected JavaAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new JavaSymbolTokenizer(null);
+        SymbolTokenizer=new JavaSymbolTokenizer(FileAnalyzer.dummyReader);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -45,7 +46,7 @@ public class JavaScriptAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected JavaScriptAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new JavaScriptSymbolTokenizer(null);    
+        SymbolTokenizer=new JavaScriptSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -40,7 +41,7 @@ public class LispAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected LispAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new LispSymbolTokenizer(null);    
+        SymbolTokenizer=new LispSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
     
     @Override

File: src/org/opensolaris/opengrok/analysis/lua/LuaAnalyzer.java
Patch:
@@ -27,8 +27,8 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
-import org.opensolaris.opengrok.analysis.JFlexTokenizer;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
 import org.opensolaris.opengrok.configuration.Project;
@@ -46,7 +46,7 @@ public class LuaAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected LuaAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new LuaSymbolTokenizer(null);    
+        SymbolTokenizer=new LuaSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class PascalAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected PascalAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new PascalSymbolTokenizer(null);    
+        SymbolTokenizer=new PascalSymbolTokenizer(FileAnalyzer.dummyReader);    
     }       
 
     @Override

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class PerlAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected PerlAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new PerlSymbolTokenizer(null);    
+        SymbolTokenizer=new PerlSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
     
     @Override

File: src/org/opensolaris/opengrok/analysis/php/PhpAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class PhpAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected PhpAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new PhpSymbolTokenizer(null);    
+        SymbolTokenizer=new PhpSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/python/PythonAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class PythonAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected PythonAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new PythonSymbolTokenizer(null);    
+        SymbolTokenizer=new PythonSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
     
     @Override

File: src/org/opensolaris/opengrok/analysis/rust/RustAnalyzer.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -47,7 +48,7 @@ public class RustAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected RustAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new RustSymbolTokenizer(null);    
+        SymbolTokenizer=new RustSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/scala/ScalaAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class ScalaAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected ScalaAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new ScalaSymbolTokenizer(null);    
+        SymbolTokenizer=new ScalaSymbolTokenizer(FileAnalyzer.dummyReader);    
     }
     
     @Override

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -45,7 +46,7 @@ public class ShAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected ShAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new ShSymbolTokenizer(null);    
+        SymbolTokenizer=new ShSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -40,7 +41,7 @@ public class TclAnalyzer extends AbstractSourceCodeAnalyzer {
 
     protected TclAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new TclSymbolTokenizer(null);    
+        SymbolTokenizer=new TclSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.Reader;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.JFlexXref;
 import org.opensolaris.opengrok.analysis.plain.AbstractSourceCodeAnalyzer;
@@ -44,7 +45,7 @@ public class VBAnalyzer extends AbstractSourceCodeAnalyzer {
      */
     protected VBAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
-        SymbolTokenizer=new VBSymbolTokenizer(null);    
+        SymbolTokenizer=new VBSymbolTokenizer(FileAnalyzer.dummyReader);    
     }    
 
     @Override

File: test/org/opensolaris/opengrok/analysis/haskell/HaskellSymbolTokenizerTest.java
Patch:
@@ -77,8 +77,7 @@ public void sampleTest() throws UnsupportedEncodingException {
         InputStream res = getClass().getClassLoader().getResourceAsStream(
                 "org/opensolaris/opengrok/analysis/haskell/sample.hs");
         InputStreamReader r = new InputStreamReader(res, "UTF-8");
-        String[] termsFor = getTermsFor(r);
-        LOGGER.log(Level.SEVERE, null, termsFor);
+        String[] termsFor = getTermsFor(r);        
         assertArrayEquals(
                 new String[]{
                     "qsort", // line 2

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
  /*
- * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.configuration;
 
@@ -520,6 +520,7 @@ public void testCanAcceptMessage() throws Exception {
         for (int i = 0; i < instance.getMessageLimit(); i++) {
             Message m2 = new NormalMessage();
             m2.addTag("main");
+            m2.setText("text");
             m2.setExpiration(new Date(System.currentTimeMillis() + 5000));
             m2.setCreated(new Date(System.currentTimeMillis() + i));
 
@@ -532,6 +533,7 @@ public void testCanAcceptMessage() throws Exception {
         for (int i = 0; i < instance.getMessageLimit() * 2; i++) {
             Message m2 = new NormalMessage();
             m2.addTag("main");
+            m2.setText("text");
             m2.setExpiration(new Date(System.currentTimeMillis() + 5000));
             m2.setCreated(new Date(System.currentTimeMillis() + i + instance.getMessageLimit()));
 

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -135,6 +135,7 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision)
         }
 
         if (filename.length() > 0) {
+            cmd.add("--");
             cmd.add(filename);
         }
 

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -896,8 +896,7 @@ public void sendToConfigHost(RuntimeEnvironment env, String configHost) {
             LOGGER.log(Level.INFO, "Send configuration to: {0}", configHost);
             if (cfg.length == 2) {
                 try {
-                    InetAddress host = InetAddress.getByName(cfg[0]);
-                    env.writeConfiguration(host, Integer.parseInt(cfg[1]));
+                    env.writeConfiguration(cfg[0], Integer.parseInt(cfg[1]));
                 } catch (NumberFormatException | IOException ex) {
                     LOGGER.log(Level.SEVERE, "Failed to send configuration to "
                             + configHost + " (is web application server running with opengrok deployed?)", ex);

File: src/org/opensolaris/opengrok/index/IgnoredDirs.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.index;
 
@@ -58,7 +58,7 @@ public IgnoredDirs() {
      * @return true if this file should be ignored, false otherwise
      */
     public boolean ignore(File file) {
-        return match(file) && file.isDirectory();
+        return file.isDirectory() && match(file);
     }
 
     /**

File: src/org/opensolaris/opengrok/index/IgnoredFiles.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.index;
 
@@ -72,7 +72,7 @@ public IgnoredFiles() {
      * @return true if this file should be ignored, false otherwise
      */
     public boolean ignore(File file) {
-        return match(file) && file.isFile();
+        return file.isFile() && match(file);
     }
 
     /**

File: src/org/opensolaris/opengrok/index/IgnoredDirs.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.index;
 
@@ -58,7 +58,7 @@ public IgnoredDirs() {
      * @return true if this file should be ignored, false otherwise
      */
     public boolean ignore(File file) {
-        return match(file) && file.isDirectory();
+        return file.isDirectory() && match(file);
     }
 
     /**

File: src/org/opensolaris/opengrok/index/IgnoredFiles.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.index;
 
@@ -72,7 +72,7 @@ public IgnoredFiles() {
      * @return true if this file should be ignored, false otherwise
      */
     public boolean ignore(File file) {
-        return match(file) && file.isFile();
+        return file.isFile() && match(file);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -300,7 +300,7 @@ public void write(Writer out) throws IOException {
 
         // terminate scopes
         if (scopeOpen) {
-            out.write("</div>");
+            out.write("</span>");
             scopeOpen = false;
         }
 

File: test/org/opensolaris/opengrok/analysis/haskell/HaskellSymbolTokenizerTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.haskell;
 
@@ -57,7 +57,7 @@ public HaskellSymbolTokenizerTest() {
 
     private String[] getTermsFor(Reader r) {
         List<String> l = new LinkedList<>();
-        JFlexTokenizer ts = (JFlexTokenizer) this.analyzer.createComponents("refs").getTokenStream();        
+        JFlexTokenizer ts = (JFlexTokenizer) this.analyzer.tokenStream("refs", r);
         ts.setReader(r);        
         ts.yyreset(r);
         CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);

File: test/org/opensolaris/opengrok/history/FileHistoryCacheTest.java
Patch:
@@ -351,7 +351,7 @@ public void testRenamedFile() throws Exception {
         Repository repo = RepositoryFactory.getRepository(reposRoot);
 
         // The test expects support for renamed files.
-        System.setProperty("org.opensolaris.opengrok.history.RenamedHandlingEnabled", "1");
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
 
         History historyToStore = repo.getHistory(reposRoot);
 

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -398,7 +398,7 @@ public DateFormat getDateFormat() {
             {
                 // initialize date formatters
                 for (int i = 0; i < datePatterns.length; i++) {
-                    formatters[i] = new SimpleDateFormat(datePatterns[i], Locale.US);
+                    formatters[i] = new SimpleDateFormat(datePatterns[i]);
                     /*
                      * TODO: the following would be nice - but currently it
                      * could break the compatibility with some repository dates

File: src/org/opensolaris/opengrok/history/AccuRevHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 

File: src/org/opensolaris/opengrok/history/ClearCaseHistoryParser.java
Patch:
@@ -17,6 +17,9 @@
  * CDDL HEADER END
  */
 
+/*
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ */
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 

File: test/org/opensolaris/opengrok/history/SubversionHistoryParserTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -152,6 +152,7 @@ private void initSaxParser() throws HistoryException {
      */
     History parse(File file, SubversionRepository repos, String sinceRevision)
             throws HistoryException {
+
         initSaxParser();
         handler = new Handler(repos.getDirectoryName(), repos.reposPath,
                 RuntimeEnvironment.getInstance().getSourceRootPath().length(),

File: test/org/opensolaris/opengrok/history/SubversionHistoryParserTest.java
Patch:
@@ -67,7 +67,9 @@ public void tearDown() {
      */
     @Test
     public void parseEmpty() throws Exception {
-        History result = instance.parse("");
+        // Empty repository shoud produce at least valid XML.
+        History result = instance.parse("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
+            "<log>\n" + "</log>");
         assertNotNull(result);
         assertNotNull(result.getHistoryEntries());
         assertTrue("Should not contain any history entries", 0 == result.getHistoryEntries().size());

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -40,6 +40,7 @@
 import org.opensolaris.opengrok.util.Executor;
 import org.opensolaris.opengrok.util.Interner;
 import org.xml.sax.Attributes;
+import org.xml.sax.SAXException;
 import org.xml.sax.ext.DefaultHandler2;
 
 /**
@@ -84,15 +85,15 @@ public void startElement(String uri, String localName, String qname, Attributes
         }
 
         @Override
-        public void endElement(String uri, String localName, String qname) {
+        public void endElement(String uri, String localName, String qname) throws SAXException {
             String s = sb.toString();
             if ("author".equals(qname)) {
                 entry.setAuthor(s);
             } else if ("date".equals(qname)) {
                 try {
                     entry.setDate(format.parse(s));
                 } catch (ParseException ex) {
-                    LOGGER.log(Level.SEVERE, "Failed to parse: " + s, ex);
+                    throw new SAXException("Failed to parse date: " + s, ex);
                 }
             } else if ("path".equals(qname)) {
                 /*

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -1458,8 +1458,7 @@ public void saveStatistics(OutputStream out) throws IOException {
 
     /**
      * Load statistics from JSON file specified in configuration.
-     *
-     * @param in the file with json
+     *     
      * @throws IOException
      * @throws ParseException
      */

File: src/org/opensolaris/opengrok/configuration/messages/Message.java
Patch:
@@ -250,7 +250,7 @@ public boolean equals(Object obj) {
      * @param port port number
      * @throws IOException
      *
-     * @see #throwIfError(int)
+     * @see #throwIfError(int c, String message)
      *
      * @return possible output for this application, null if no output
      */
@@ -334,7 +334,7 @@ private static Message decodeObject(InputStream in) throws IOException {
      * Decode the return code from the remote server.
      *
      * @param c the code
-     * @param out error message stored in string
+     * @param message error message stored in string
      * @throws IOException if the return code meant an error
      */
     protected void throwIfError(int c, String message) throws IOException {

File: src/org/opensolaris/opengrok/configuration/messages/Messages.java
Patch:
@@ -153,7 +153,7 @@ public static void main(String[] argv) {
         try {
             m.write(server, port);
         } catch (IOException ex) {
-            System.err.println("Cannot contact the target server");
+            System.err.println(ex.getMessage());
             ex.printStackTrace(System.err);
             System.exit(5);
         }

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -539,7 +539,7 @@ public static void readableLine(int num, Writer out, Annotation annotation,
                 }
                 if (annotation.getFileVersion(r) != 0) {
                     out.write("&lt;br/&gt;version: " + annotation.getFileVersion(r) + "/"
-                            + annotation.getFileVersionsCount());
+                            + annotation.getRevisions().size());
                 }
                 out.write(closeQuotedTag);
             }

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -539,7 +539,7 @@ public static void readableLine(int num, Writer out, Annotation annotation,
                 }
                 if (annotation.getFileVersion(r) != 0) {
                     out.write("&lt;br/&gt;version: " + annotation.getFileVersion(r) + "/"
-                            + annotation.getFileVersionsCount());
+                            + annotation.getRevisions().size());
                 }
                 out.write(closeQuotedTag);
             }

File: test/org/opensolaris/opengrok/configuration/messages/NormalMessageTest.java
Patch:
@@ -103,9 +103,11 @@ public void testApplyMultiple() {
     @Test
     public void testApplyMultipleUnique() {
         Message[] m = makeArray(new NormalMessage(), new NormalMessage(), new NormalMessage());
+        Date d = new Date();
 
         for (int i = 0; i < m.length; i++) {
             m[i].addTag("main");
+            m[i].setCreated(d);
         }
 
         Assert.assertEquals(0, env.getMessagesInTheSystem());

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -1732,7 +1732,7 @@ private void refreshSearcherManagerMap() {
      * so we add them to the map.
      *
      * @param projects list of projects
-     * @param list each SuperIndexSearcher produced will be put into this list
+     * @param searcherList each SuperIndexSearcher produced will be put into this list
      * @return MultiReader for the projects
      */
     public MultiReader getMultiReader(SortedSet<String> projects,

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -1732,7 +1732,7 @@ private void refreshSearcherManagerMap() {
      * so we add them to the map.
      *
      * @param projects list of projects
-     * @param list each SuperIndexSearcher produced will be put into this list
+     * @param searcherList each SuperIndexSearcher produced will be put into this list
      * @return MultiReader for the projects
      */
     public MultiReader getMultiReader(SortedSet<String> projects,

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -68,7 +68,6 @@
 import java.util.stream.Collectors;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiReader;
-import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.SearcherManager;
 import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.store.Directory;
@@ -108,7 +107,7 @@ public final class RuntimeEnvironment {
     private final Map<Project, Set<Group>> project_group_map = new TreeMap<>();
     private final Map<String, SearcherManager> searcherManagerMap = new ConcurrentHashMap<>();
     
-    private static final String MESSAGES_MAIN_PAGE_TAG = "main";
+    public static final String MESSAGES_MAIN_PAGE_TAG = "main";
     /*
     initial capacity - default 16
     initial load factor - default 0.75f

File: src/org/opensolaris/opengrok/configuration/ThreadpoolSearcherFactory.java
Patch:
@@ -35,9 +35,9 @@
  */
 class ThreadpoolSearcherFactory extends SearcherFactory {
     @Override
-    public IndexSearcher newSearcher(IndexReader r, IndexReader prev) throws IOException {
+    public SuperIndexSearcher newSearcher(IndexReader r, IndexReader prev) throws IOException {
         // The previous IndexReader is not used here.
-        IndexSearcher searcher = new IndexSearcher(r,
+        SuperIndexSearcher searcher = new SuperIndexSearcher(r,
             RuntimeEnvironment.getInstance().getSearchExecutor());
         return searcher;
     }

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -181,7 +181,7 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision)
      * Formatter for rfc 2822 which allows (as rfc) the optional day at the
      * beginning.
      *
-     * @link https://tools.ietf.org/html/rfc2822#page-14
+     * @see <a href="https://tools.ietf.org/html/rfc2822#page-14" target="_blank">https://tools.ietf.org/html/rfc2822#page-14</a>
      *
      * @return DateFormat which accepts the optional day format
      */

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -181,7 +181,7 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision)
      * Formatter for rfc 2822 which allows (as rfc) the optional day at the
      * beginning.
      *
-     * @link https://tools.ietf.org/html/rfc2822#page-14
+     * @see <a href="https://tools.ietf.org/html/rfc2822#page-14" target="_blank">https://tools.ietf.org/html/rfc2822#page-14</a>
      *
      * @return DateFormat which accepts the optional day format
      */

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -544,8 +544,8 @@ private boolean isDirty() {
     private void setDirty() {
         synchronized (lock) {
             try {
-                if (!dirty && !dirtyFile.createNewFile()) {
-                    if (!dirtyFile.exists()) {
+                if (!dirty) {
+                    if (!dirtyFile.createNewFile() && !dirtyFile.exists()) {
                         LOGGER.log(Level.FINE,
                                 "Failed to create \"dirty-file\": {0}",
                                 dirtyFile.getAbsolutePath());

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -544,8 +544,8 @@ private boolean isDirty() {
     private void setDirty() {
         synchronized (lock) {
             try {
-                if (!dirty && !dirtyFile.createNewFile()) {
-                    if (!dirtyFile.exists()) {
+                if (!dirty) {
+                    if (!dirtyFile.createNewFile() && !dirtyFile.exists()) {
                         LOGGER.log(Level.FINE,
                                 "Failed to create \"dirty-file\": {0}",
                                 dirtyFile.getAbsolutePath());

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -1091,7 +1091,7 @@ protected void writeConfiguration() throws IOException {
      */
     private void generateProjectRepositoriesMap() throws IOException {
         repository_map.clear();
-        for (RepositoryInfo r : configuration.getRepositories()) {
+        for (RepositoryInfo r : getRepositories()) {
             Project proj;
             String repoPath;
 
@@ -1148,26 +1148,26 @@ public boolean test(Group g) {
      */
     public void setConfiguration(Configuration configuration) {
         this.configuration = configuration;
+        register();
         try {
             generateProjectRepositoriesMap();
         } catch (IOException ex) {
             LOGGER.log(Level.SEVERE, "Cannot generate project - repository map", ex);
         }
         populateGroups(getGroups(), getProjects());
-        register();
         HistoryGuru.getInstance().invalidateRepositories(
                 configuration.getRepositories());
     }
 
     public void setConfiguration(Configuration configuration, List<String> subFileList) {
         this.configuration = configuration;
+        register();
         try {
             generateProjectRepositoriesMap();
         } catch (IOException ex) {
             LOGGER.log(Level.SEVERE, "Cannot generate project - repository map", ex);
         }
         populateGroups(getGroups(), getProjects());
-        register();
         HistoryGuru.getInstance().invalidateRepositories(
                 configuration.getRepositories(), subFileList);
     }

File: test/org/opensolaris/opengrok/web/ProjectHelperTestBase.java
Patch:
@@ -196,7 +196,7 @@ protected static void setRepositoriesMap(Map<Project, List<RepositoryInfo>> map)
      *  allowed_ungrouped_project_2_1, allowed_ungrouped_project_3_1
      *
      * ungrouped repositories: 
-     *  ungrouped_repository_1_1,
+     *  ungrouped_repository_0_1, ungrouped_repository_1_1,
      *  allowed_ungrouped_repository_2_1, allowed_ungrouped_repository_3_1
      *
      */
@@ -282,8 +282,7 @@ protected HttpServletRequest getRequest() {
 
     @Before
     public void setUp() {
-
-        Assert.assertEquals("Should contain 5 groups", 4, env.getGroups().size());
+        Assert.assertEquals("Should contain 4 groups", 4, env.getGroups().size());
         Assert.assertEquals("Should contain 40 project", 40, env.getProjects().size());
         Assert.assertEquals("Should contain 20 repositories", 20, env.getRepositories().size());
         Assert.assertNotNull("Repository map should not be null", env.getProjectRepositoriesMap());

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -121,8 +121,8 @@ private void initialize() throws IOException {
             command.add("--langmap=scala:.scala");
             command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*class[[:space:]]+([a-zA-Z0-9_]+)/\\4/c,classes/");
             command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*object[[:space:]]+([a-zA-Z0-9_]+)/\\4/o,objects/");
-            command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*case class[[:space:]]+([a-zA-Z0-9_]+)/\\4/c,case classes/"); //replace c with cc(or y?)?
-            command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*case object[[:space:]]+([a-zA-Z0-9_]+)/\\4/c,case objects/"); //replace c with co(or z)?
+            command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*case class[[:space:]]+([a-zA-Z0-9_]+)/\\4/C,case classes/");
+            command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*case object[[:space:]]+([a-zA-Z0-9_]+)/\\4/O,case objects/"); 
             command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*(private|protected)?[[:space:]]*trait[[:space:]]+([a-zA-Z0-9_]+)/\\4/t,traits/");
             command.add("--regex-scala=/^[[:space:]]*type[[:space:]]+([a-zA-Z0-9_]+)/\\1/T,types/");
             command.add("--regex-scala=/^[[:space:]]*((abstract|final|sealed|implicit|lazy)[[:space:]]*)*def[[:space:]]+([a-zA-Z0-9_]+)/\\3/m,methods/");

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -49,8 +49,8 @@ final class Search {
 
     private SearchEngine engine;
     final List<Hit> results = new ArrayList<>();
-    int totalResults =0;
-    int nhits=0;
+    int totalResults = 0;
+    int nhits = 0;
 
     @SuppressWarnings({"PMD.SwitchStmtsShouldHaveDefault"})
     protected boolean parseCmdLine(String[] argv) {
@@ -119,6 +119,7 @@ protected boolean search() {
             engine.results(0, nhits, results);
         }
         totalResults = engine.totalHits;
+        engine.destroy();
 
         return true;
     }

File: src/org/opensolaris/opengrok/web/JSONSearchServlet.java
Patch:
@@ -141,6 +141,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
             result.put(ATTRIBUTE_RESULT_COUNT, results.size());
 
             result.put(ATTRIBUTE_RESULTS, resultsArray);
+
+            engine.destroy();
         }
         resp.getWriter().write(result.toString());
     }

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -114,6 +114,8 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
         if (pluginDirectory != null && watchDog != null && Boolean.parseBoolean(watchDog)) {
             RuntimeEnvironment.getInstance().startWatchDogService(new File(pluginDirectory));
         }
+
+        RuntimeEnvironment.getInstance().startIndexReopenThread();
     }
 
     /**
@@ -123,6 +125,7 @@ public void contextInitialized(final ServletContextEvent servletContextEvent) {
     public void contextDestroyed(final ServletContextEvent servletContextEvent) {
         RuntimeEnvironment.getInstance().stopConfigurationListenerThread();
         RuntimeEnvironment.getInstance().stopWatchDogService();
+        RuntimeEnvironment.getInstance().stopIndexReopenThread();
     }
 
     /**

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.opensolaris.opengrok.util.TestRepository;
 
 /**
- * Basic testing of the Search class
+ * Basic testing of the Search class, i.e. the command line utility.
  *
  * @author Trond Norbye
  */
@@ -139,7 +139,9 @@ public void testSearch() {
         if (skip) {
             return;
         }
+
         Search instance = new Search();
+
         assertFalse(instance.search());
         assertTrue(instance.parseCmdLine(new String[]{"-p", "Makefile"}));
         assertTrue(instance.search());

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -642,7 +642,7 @@ public Annotation getAnnotation() {
         }
         getRequestedRevision();
         try {
-            annotation = HistoryGuru.getInstance().annotate(resourceFile, rev.isEmpty() ? null : rev.substring(2));
+            annotation = HistoryGuru.getInstance().annotate(resourceFile, rev.isEmpty() ? null : rev);
         } catch (IOException e) {
             LOGGER.log(Level.WARNING, "Failed to get annotations: ", e);
             /* ignore */

File: src/org/opensolaris/opengrok/configuration/Project.java
Patch:
@@ -146,7 +146,7 @@ public void setGroups(Set<Group> groups) {
     /**
      * Adds a group where this project belongs
      *
-     * @param group
+     * @param group group to add
      */
     public void addGroup(Group group) {
         while (group != null) {

File: src/org/opensolaris/opengrok/jdbc/ConnectionResource.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2016, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.jdbc;
@@ -41,7 +41,7 @@ public class ConnectionResource {
 
     /** Statement cache. */
     private final Map<StatementCreator, PreparedStatement> statements =
-            new HashMap<StatementCreator, PreparedStatement>();
+            new HashMap<>();
 
     /**
      * Create a new {@code ConnectionResource} instance.
@@ -109,7 +109,7 @@ public PreparedStatement getStatement(StatementCreator creator)
     /**
      * Create a new {@code Statement} object.
      * @return a {@code Statement} object
-     * @throws java.sql.SQLException
+     * @throws java.sql.SQLException if we cannot allocate the statement
      */
     public Statement createStatement() throws SQLException {
         return conn.createStatement();

File: src/org/opensolaris/opengrok/management/JMXConfigurationMBean.java
Patch:
@@ -18,10 +18,8 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opensolaris.opengrok.management;
 
 import java.io.IOException;
@@ -43,6 +41,7 @@ public interface JMXConfigurationMBean {
     /**
      * Deploy a new configuration for OpenGrok
      * @param config String the configuration object in xml to set
+     * @throws java.io.IOException in case of io problem
      */
     public void setConfiguration(String config) throws IOException;
 }

File: src/org/opensolaris/opengrok/analysis/pascal/Consts.java
Patch:
@@ -43,6 +43,7 @@ public class Consts{
         kwd.add( "const" );
         kwd.add( "constructor" );
         kwd.add( "continue" );
+        kwd.add( "default" );
         kwd.add( "destructor" );
         kwd.add( "dispinterface" );
         kwd.add( "div" );
@@ -81,6 +82,7 @@ public class Consts{
         kwd.add( "operator" );
         kwd.add( "or" );
         kwd.add( "out" );
+        kwd.add( "override" );
         kwd.add( "packed" );
         kwd.add( "private" );
         kwd.add( "procedure" );

File: src/org/opensolaris/opengrok/analysis/pascal/Consts.java
Patch:
@@ -18,16 +18,15 @@
  */
 
 /*
- * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.pascal;
 
 import java.util.HashSet;
 import java.util.Set;
 
 /**
-  * Holds static hash set containing the Java keywords
+  * Holds static hash set containing the Pascal keywords
   */
 public class Consts{
     public static final Set<String> kwd = new HashSet<String>() ;

File: src/org/opensolaris/opengrok/analysis/pascal/PascalAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.pascal;
 

File: src/org/opensolaris/opengrok/analysis/pascal/PascalAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2015 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.analysis.pascal;
@@ -35,7 +35,7 @@
 
 /**
  *
- * @author Lubos Kosco
+ * @author Alex Anthony
  */
 
 public class PascalAnalyzerFactory extends FileAnalyzerFactory {

File: src/org/opensolaris/opengrok/authorization/AuthorizationFramework.java
Patch:
@@ -262,9 +262,10 @@ private String getClassName(JarEntry f) {
      * Plugins are taken from the pluginDirectory (set in web.xml).
      *
      * Old instances of plugins are removed and new list of plugins is
-     * constructed. Reload event is fired on each plugin.
+     * constructed. Unload and load event is fired on each plugin.
      *
-     * @see IAuthorizationPlugin#reload()
+     * @see IAuthorizationPlugin#load() 
+     * @see IAuthorizationPlugin#unload() 
      */
     @SuppressWarnings("unchecked")
     public synchronized void reload() {

File: src/org/opensolaris/opengrok/authorization/AuthorizationFramework.java
Patch:
@@ -262,9 +262,10 @@ private String getClassName(JarEntry f) {
      * Plugins are taken from the pluginDirectory (set in web.xml).
      *
      * Old instances of plugins are removed and new list of plugins is
-     * constructed. Reload event is fired on each plugin.
+     * constructed. Unload and load event is fired on each plugin.
      *
-     * @see IAuthorizationPlugin#reload()
+     * @see IAuthorizationPlugin#load() 
+     * @see IAuthorizationPlugin#unload() 
      */
     @SuppressWarnings("unchecked")
     public synchronized void reload() {

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -212,7 +212,7 @@ private void searchMultiDatabase(List<Project> root, boolean paging) throws IOEx
         }
         MultiReader searchables = new MultiReader(subreaders, true);
         if (Runtime.getRuntime().availableProcessors() > 1) {
-            int noThreads = 2 + (2 * Runtime.getRuntime().availableProcessors()); //TODO there might be a better way for counting this - or we should honor the command line option here too!
+            int noThreads = RuntimeEnvironment.getInstance().getMaxSearchThreadCount();
             ExecutorService executor = Executors.newFixedThreadPool(noThreads);
             searcher = new IndexSearcher(searchables, executor);
         } else {

File: src/org/opensolaris/opengrok/web/SearchHelper.java
Patch:
@@ -57,6 +57,7 @@
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.index.IndexDatabase;
 import org.opensolaris.opengrok.logger.LoggerFactory;
 import org.opensolaris.opengrok.search.QueryBuilder;
@@ -262,7 +263,7 @@ public SearchHelper prepareExec(SortedSet<String> projects) {
                 }
                 MultiReader searchables = new MultiReader(subreaders, true);
                 if (parallel) {
-                    int noThreads = 2 + (2 * Runtime.getRuntime().availableProcessors()); //TODO there might be a better way for counting this
+                    int noThreads = RuntimeEnvironment.getInstance().getMaxSearchThreadCount();
                     executor = Executors.newFixedThreadPool(noThreads);
                 }
                 searcher = parallel

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -67,6 +67,7 @@ public class CVSRepository extends RCSRepository {
             = Pattern.compile("([\\.\\d]+)\\W+\\((\\w+)");
 
     public CVSRepository() {
+        working = Boolean.FALSE;
         setType("CVS");
         setDatePattern("yyyy-MM-dd hh:mm:ss");
     }

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -170,7 +170,7 @@ public void run() {
         });
         t.start();
         t.join();
-        assertEquals(new File(path).getCanonicalFile().getAbsolutePath(), instance.getDataRootPath());
+        assertEquals(new File(path), new File(instance.getDataRootPath()));
     }
 
     @Test

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -340,7 +340,7 @@ public void store(History history, Repository repository)
             new Object[] {repository.getDirectoryName()});
 
         HashMap<String, List<HistoryEntry>> map =
-                new HashMap<String, List<HistoryEntry>>();
+                new HashMap<>();
 
         /*
          * Go through all history entries for this repository (acquired through

File: test/org/opensolaris/opengrok/history/BazaarRepositoryTest.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -72,6 +71,7 @@ public void tearDown() {
 
     /**
      * Test of parseAnnotation method, of class GitRepository.
+     * @throws java.lang.Exception
      */
     @Test
     public void parseAnnotation() throws Exception {

File: test/org/opensolaris/opengrok/history/CVSRepositoryTest.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -34,7 +33,6 @@
 import org.opensolaris.opengrok.condition.ConditionalRun;
 import org.opensolaris.opengrok.condition.ConditionalRunRule;
 import org.opensolaris.opengrok.condition.RepositoryInstalled;
-import org.opensolaris.opengrok.condition.RunCondition;
 
 import static org.junit.Assert.*;
 
@@ -91,6 +89,7 @@ public void testFileHasHistory() {
 
     /**
      * Test of parseAnnotation method, of class CVSRepository.
+     * @throws java.lang.Exception
      */
     @Test
     public void testParseAnnotation() throws Exception {

File: test/org/opensolaris/opengrok/history/GitRepositoryTest.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -34,7 +33,6 @@
 import org.opensolaris.opengrok.condition.ConditionalRun;
 import org.opensolaris.opengrok.condition.ConditionalRunRule;
 import org.opensolaris.opengrok.condition.RepositoryInstalled;
-import org.opensolaris.opengrok.condition.RunCondition;
 
 import static org.junit.Assert.*;
 
@@ -73,6 +71,7 @@ public void tearDown() {
 
     /**
      * Test of parseAnnotation method, of class GitRepository.
+     * @throws java.lang.Exception
      */
     @Test
     public void parseAnnotation() throws Exception {

File: test/org/opensolaris/opengrok/history/MercurialRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2016, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 

File: test/org/opensolaris/opengrok/analysis/CtagsTest.java
Patch:
@@ -151,5 +151,5 @@ public void bug19195() throws Exception {
             }
         }
         assertEquals("function count", names.length, count);
-    }
+    }       
 }

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -358,7 +358,7 @@ String determineParent() throws IOException {
         cmd.add("config");
         cmd.add("parent_location");
         Executor executor = new Executor(cmd, directory);
-        if (executor.exec() != 0) {
+        if (executor.exec(false) != 0) {
             throw new IOException(executor.getErrorString());
         }
 

File: testdata/sources/scopes/scopes_eol_win/WeirdEOL.java
Patch:
@@ -0,0 +1 @@
+/** Test scopes with weird eol*/package test.scopes;import weird.eol;public class WeirdEOL{   private int m_propertyOrder;   public WeirdEOL(int propertyOrder)   {      this.m_propertyOrder = propertyOrder;   }         /**    * Get property order     *     * @return property order.    */   public int getPropertyOrder()    {      return this.m_propertyOrder;   }}
\ No newline at end of file

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -314,6 +314,7 @@ public void write(Writer out) throws IOException {
 
         while (!stack.empty()) {
             yypop();
+        }
 
         writeScopesFooter();
     }

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -133,7 +133,7 @@ public final class Configuration {
     private boolean chattyStatusPage;
     private final Map<String, String> cmds;
     private int tabSize;
-    private int command_timeout;
+    private int command_timeout; // in seconds
     private boolean scopesEnabled;
     private boolean foldingEnabled;
 

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -70,6 +70,8 @@ public BazaarRepository() {
      * file.
      *
      * @param file The file to retrieve history for
+     * @param sinceRevision the oldest changeset to return from the executor, or
+     *                      {@code null} if all changesets should be returned
      * @return An Executor ready to be started
      */
     Executor getHistoryLogExecutor(final File file, final String sinceRevision)
@@ -95,7 +97,7 @@ Executor getHistoryLogExecutor(final File file, final String sinceRevision)
             cmd.add(sinceRevision + "..-1");
         }
 
-        return new Executor(cmd, new File(getDirectoryName()));
+        return new Executor(cmd, new File(getDirectoryName()), sinceRevision != null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -147,6 +147,8 @@ private void process(BufferedReader in) throws IOException {
      *
      * @param file the file to parse history for
      * @param repos Pointer to the SubversionReporitory
+     * @param sinceRevision the oldest changeset to return from the executor, or
+     *                      {@code null} if all changesets should be returned
      * @return object representing the file's history
      */
     History parse(File file, Repository repos, String sinceRevision) throws HistoryException {

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -162,7 +162,8 @@ public void setDirectoryName(String directoryName) {
      *
      * @param file The file to retrieve history for
      * @param sinceRevision the revision number immediately preceding the first
-     * revision we want, or {@code null} to fetch the entire history
+     *                      revision we want, or {@code null} to fetch the entire
+     *                      history
      * @return An Executor ready to be started
      */
     Executor getHistoryLogExecutor(final File file, String sinceRevision) {
@@ -199,7 +200,7 @@ Executor getHistoryLogExecutor(final File file, String sinceRevision) {
             cmd.add(escapeFileName(filename));
         }
 
-        return new Executor(cmd, new File(directoryName));
+        return new Executor(cmd, new File(directoryName), sinceRevision != null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/lua/Consts.java
Patch:
@@ -30,9 +30,10 @@
   * @author Evan Kinney
   */
 public class Consts{
-    public static final Set<String> kwd = new HashSet<String>() ;
+    public static final Set<String> kwd = new HashSet<>() ;
     static {
         // Lua 5.3 Reference Manual, Chapter 3.1
+        // http://www.lua.org/manual/5.3/manual.html
         kwd.add( "and" );
         kwd.add( "break" );
         kwd.add( "do" );

File: src/org/opensolaris/opengrok/analysis/JFlexScopeParser.java
Patch:
@@ -60,7 +60,7 @@ public Scopes getScopes() {
     
     public void parse(Tag tag, Reader reader) throws IOException {
         try {
-            int lineNo = 0;            
+            int lineNo = 1; /* ctags count lines starting from 1 */
             int c;
             int oldc='\n';
             while (lineNo < tag.line) {
@@ -69,7 +69,7 @@ public void parse(Tag tag, Reader reader) throws IOException {
                     lineNo++;
                 }
                 if ( c == '\n') {
-                    if (oldc!='\r') {                                            
+                    if (oldc!='\r') {
                         lineNo++;
                     }
                 }
@@ -83,7 +83,7 @@ public void parse(Tag tag, Reader reader) throws IOException {
         }
 
         reInit(reader);
-        setLineNumber(tag.line+1);
+        setLineNumber(tag.line);
         start(tag.text);
 
         scope = new Scope(tag.line, tag.line, tag.symbol, tag.scope, tag.signature);

File: testdata/sources/java/Sample.java
Patch:
@@ -39,6 +39,8 @@ public int Method(int arg) {
         
         return i.InnerMethod().length() * res;
     }
+
+    public abstract int AbstractMethod(int test);
     
     private class InnerClass {
         

File: src/org/opensolaris/opengrok/analysis/Scopes.java
Patch:
@@ -89,7 +89,7 @@ public void addScope(Scope scope) {
     
     public Scope getScope(int line) {
         // find closest scope that starts before or on given line
-        Scope s = scopes.ceiling(new Scope(line));
+        Scope s = scopes.floor(new Scope(line));
         return (s != null && s.matches(line)) ? s : globalScope;
     }
     

File: src/org/opensolaris/opengrok/analysis/Scopes.java
Patch:
@@ -57,7 +57,7 @@ public Scope(int lineFrom) {
         }
         
         public String getName() {
-            return name; //(scope == null ? name : scope + "::" + name) + "()";
+            return name;
         }
 
         public boolean matches(int line) {
@@ -90,7 +90,7 @@ public void addScope(Scope scope) {
     public Scope getScope(int line) {
         // find closest scope that starts before or on given line
         Scope s = scopes.ceiling(new Scope(line));
-        return (s != null && s.matches(line) ) ? s : GLOBAL_SCOPE;
+        return (s != null && s.matches(line)) ? s : globalScope;
     }
     
     /**

File: src/org/opensolaris/opengrok/analysis/JFlexScopeParser.java
Patch:
@@ -60,7 +60,7 @@ public Scopes getScopes() {
     
     public void parse(Tag tag, Reader reader) throws IOException {
         try {
-            int lineNo = 0;
+            int lineNo = 1; /* ctags count lines starting from 1 */
             while (lineNo < tag.line) {
                 if (reader.read() == '\n') {
                     lineNo++;
@@ -71,7 +71,7 @@ public void parse(Tag tag, Reader reader) throws IOException {
         }
 
         reInit(reader);
-        setLineNumber(tag.line+1);
+        setLineNumber(tag.line);
         start(tag.text);
 
         scope = new Scope(tag.line, tag.line, tag.symbol, tag.scope);

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
  * Portions copyright (c) 2011 Jens Elkner.
  */
 package org.opensolaris.opengrok.web;
@@ -416,7 +416,7 @@ public int getIntParam(String name, int defaultValue) {
         }
         return ret;
     }
-
+    
     /**
      * Get the <b>start</b> index for a search result to return by looking up
      * the {@code start} request parameter.

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -675,7 +675,7 @@ private static String getFileContent(File file) {
      * be included into the footer of generated web pages.
      */
     public static final String FOOTER_INCLUDE_FILE = "footer_include";
-    
+
     private transient String footer = null;
 
     /**
@@ -693,14 +693,14 @@ public String getFooterIncludeFileContent() {
 
     /**
      * The name of the file relative to the <var>DATA_ROOT</var>, which should
-     * be included into the footer of generated web pages.
+     * be included into the header of generated web pages.
      */
     public static final String HEADER_INCLUDE_FILE = "header_include";
 
     private transient String header = null;
 
     /**
-     * Get the contents of the footer include file.
+     * Get the contents of the header include file.
      *
      * @return an empty string if it could not be read successfully, the
      * contents of the file otherwise.

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -389,11 +389,9 @@ public void update() throws IOException, HistoryException {
                     if (RuntimeEnvironment.getInstance().isPrintProgress()) {
                         LOGGER.log(Level.INFO, "Counting files in {0} ...", dir);
                         file_cnt = indexDown(sourceRoot, dir, true, 0, 0);
-                        if (LOGGER.isLoggable(Level.INFO)) {
-                            LOGGER.log(Level.INFO,
+                        LOGGER.log(Level.INFO,
                                 "Need to process: {0} files for {1}",
                                 new Object[]{file_cnt, dir});
-                        }
                     }
 
                     indexDown(sourceRoot, dir, false, 0, file_cnt);

File: src/org/opensolaris/opengrok/logger/formatter/LogFormatter.java
Patch:
@@ -47,7 +47,6 @@
 public class LogFormatter extends Formatter {
 
     private static final String DEFAULT_FORMAT = "%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%6$s%n";
-    private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
     private String format;
     private String version;
@@ -81,7 +80,6 @@ public String format(LogRecord record) {
             pw.println();
             record.getThrown().printStackTrace(pw);
             pw.close();
-            throwable.append(LINE_SEPARATOR);
             throwable.append(sw.toString());
         }
 

File: src/org/opensolaris/opengrok/web/SearchHelper.java
Patch:
@@ -498,9 +498,7 @@ public void destroy() {
                 executor.shutdown();
             } catch (SecurityException se) {
                 LOGGER.warning(se.getLocalizedMessage());
-                if (LOGGER.isLoggable(Level.FINE)) {
-                    LOGGER.log(Level.FINE, "destroy", se);
-                }
+                LOGGER.log(Level.FINE, "destroy", se);
             }
         }
     }

File: src/org/opensolaris/opengrok/logger/LoggerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger;
 

File: src/org/opensolaris/opengrok/logger/LoggerFactoryBridge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger;
 

File: src/org/opensolaris/opengrok/logger/LoggerUtil.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger;
 

File: src/org/opensolaris/opengrok/logger/PackageBasedLoggerFactoryBridge.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger;
 

File: src/org/opensolaris/opengrok/logger/formatter/ConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger.formatter;
 

File: src/org/opensolaris/opengrok/logger/formatter/FileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger.formatter;
 

File: src/org/opensolaris/opengrok/logger/formatter/LogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger.formatter;
 

File: src/org/opensolaris/opengrok/logger/formatter/SimpleConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger.formatter;
 

File: src/org/opensolaris/opengrok/logger/formatter/SimpleFileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.logger.formatter;
 

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -103,7 +103,7 @@ public class IndexDatabase {
     private boolean running;
     private List<String> directories;
     static final Logger log = Logger.getLogger(IndexDatabase.class.getName());
-    private static final Comparator fileComparator = new Comparator<File>() {
+    private static final Comparator<File> fileComparator = new Comparator<File>() {
         @Override
         public int compare(File p1, File p2) {
             return p1.getName().compareTo(p2.getName());

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -103,7 +103,7 @@ public class IndexDatabase {
     private boolean running;
     private List<String> directories;
     static final Logger log = Logger.getLogger(IndexDatabase.class.getName());
-    private static final Comparator fileComparator = new Comparator<File>() {
+    private static final Comparator<File> fileComparator = new Comparator<File>() {
         @Override
         public int compare(File p1, File p2) {
             return p1.getName().compareTo(p2.getName());

File: src/org/opensolaris/opengrok/analysis/golang/Consts.java
Patch:
@@ -1,4 +1,4 @@
-/*Patrick Lundquist
+/*
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -120,8 +120,8 @@ public List<String> listTo(String contextPath, File dir, Writer out,
             }
         }
 
-        out.write("<table id=\"dirlist\">\n");
-        out.write("<thead>\n<tr><th/><th>Name</th><th></th><th>Date</th><th>Size</th>");
+        out.write("<table id=\"dirlist\" class=\"tablesorter\">\n");
+        out.write("<thead>\n<tr><th></th><th>Name</th><th></th><th>Date</th><th>Size</th>");
         if (offset > 0) {
             out.write("<th><tt>Description</tt></th>");
         }

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -382,7 +382,7 @@ public boolean validateExuberantCtags() {
 
         executor.exec(false);
         String output = executor.getOutputString();
-        if (output == null || output.indexOf("Exuberant Ctags") == -1) {
+        if (output == null || ( output.indexOf("Exuberant Ctags") == -1 && output.indexOf("Universal Ctags") == -1 ) ) {
             log.log(Level.SEVERE, "Error: No Exuberant Ctags found in PATH !\n"
                     + "(tried running " + "{0}" + ")\n"
                     + "Please use option -c to specify path to a good "

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -45,7 +45,8 @@ public class PerlAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {
         "PL",
         "PERL",
-        "PM"
+        "PM",
+        "PH"
     };
     private static final String[] MAGICS = {
         "#!/usr/bin/env perl",

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -45,7 +45,8 @@ public class PerlAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {
         "PL",
         "PERL",
-        "PM"
+        "PM",
+        "PH"
     };
     private static final String[] MAGICS = {
         "#!/usr/bin/env perl",

File: src/org/opensolaris/opengrok/configuration/Project.java
Patch:
@@ -123,7 +123,7 @@ public boolean hasTabSizeSetting() {
      */
     public static Project getProject(String path) {
         Project ret = null;
-        String lpath=path;
+        String lpath = path;
         if (File.separatorChar != '/') {
             lpath = path.replace(File.separatorChar, '/');
         }

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -122,7 +122,7 @@ public static Repository getRepository(File file) throws InstantiationException,
                         res.setBranch(res.determineBranch());
                     } catch (IOException ex) {
                         OpenGrokLogger.getLogger().log(Level.WARNING,
-                            "Failed to get branch for " + file.getAbsolutePath(), ex);
+                            "Failed to get branch for " + file.getAbsolutePath());
                     }
                 }
 

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -144,6 +144,7 @@ private void writeXref(Reader in, Writer out, Scopes scopes) throws IOException
         }
         xref.setDefs(defs);
         xref.setScopes(scopes);
+        xref.setFoldingEnabled(foldingEnabled);
         xref.project = project;
         xref.write(out);
     }

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -609,6 +609,7 @@ private void addFile(File file, String path) throws IOException {
         fa.setCtags(ctags);
         fa.setProject(Project.getProject(path));
         fa.setScopesEnabled(RuntimeEnvironment.getInstance().isScopesEnabled());
+        fa.setFoldingEnabled(RuntimeEnvironment.getInstance().isFoldingEnabled());
 
         Document doc = new Document();
         try (Writer xrefOut = getXrefWriter(fa, path)) {

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -316,7 +316,7 @@ private void addRepositories(File[] files, Collection<RepositoryInfo> repos,
     }
 
     /**
-     * recursivelly search for repositories with a depth limit
+     * recursively search for repositories with a depth limit
      * @param files list of files to check if they contain a repo
      * @param repos list of found repos
      * @param ignoredNames what files to ignore

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -84,7 +84,7 @@ public CommandLineOptions() {
         options.add(new Option('H', null, "Generate history cache for all repositories"));
         options.add(new Option('h', "/path/to/repository", "just generate history cache for the specified repos (absolute path from source root)"));
         options.add(new Option('I', "pattern", "Only files matching this pattern will be examined (supports wildcards, example: -I *.java -I *.c)"));
-        options.add(new Option('i', "pattern", "Ignore the named files or directories (supports wildcards, example: -i *.so -i *.dll)"));
+        options.add(new Option('i', "pattern", "Ignore the named files (prefix with 'f:') or directories (prefix with 'd:') (supports wildcards, example: -i *.so -i *.dll)"));
         options.add(new Option('j', "class", "Name of the JDBC driver class used by the history cache. Can use one of the shorthands \"client\" (org.apache.derby.jdbc.ClientDriver) or \"embedded\" (org.apache.derby.jdbc.EmbeddedDriver). Default: \"client\""));
         options.add(new Option('k', "/path/to/repository", "Kill the history cache for the given repository and exit. Use '*' to delete the cache for all repositories."));
         options.add(new Option('K', null, "List all repository pathes and exit."));

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -390,7 +390,8 @@ protected void startNewLine() throws IOException {
         if (iconId != null) {
             out.write("<a href=\"#\" onclick='fold(this.parentNode.id)' id='");
             out.write(iconId);
-            out.write("'><span class='fold-icon' /></a>");
+            /* space inside span for IE support */
+            out.write("'><span class='fold-icon'>&nbsp;</span></a>");
         }
     }
 

File: src/org/opensolaris/opengrok/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -42,6 +42,7 @@ public class HaskellAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**
      * Creates a new instance of HaskellAnalyzer
+     * @param factory
      */
     protected HaskellAnalyzer(FileAnalyzerFactory factory) {
         super(factory);

File: src/org/opensolaris/opengrok/analysis/haskell/HaskellAnalyzer.java
Patch:
@@ -42,6 +42,7 @@ public class HaskellAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**
      * Creates a new instance of HaskellAnalyzer
+     * @param factory
      */
     protected HaskellAnalyzer(FileAnalyzerFactory factory) {
         super(factory);

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -387,19 +387,19 @@ public void store(History history, Repository repository)
         final File root = RuntimeEnvironment.getInstance().getSourceRootFile();
         for (Map.Entry<String, List<HistoryEntry>> map_entry : map.entrySet()) {
             try {
-                if (RuntimeEnvironment.isRenamedFilesEnabled() &&
+                if (env.isHandleHistoryOfRenamedFiles() &&
                     isRenamedFile(map_entry, env, repository, history)) {
                         continue;
                 }
             } catch (IOException ex) {
                OpenGrokLogger.getLogger().log(Level.WARNING,
                    "isRenamedFile() got exception: " + ex);
             }
-            
+
             doFileHistory(map_entry, env, repository, null, root, false);
         }
 
-        if (!RuntimeEnvironment.isRenamedFilesEnabled()) {
+        if (!env.isHandleHistoryOfRenamedFiles()) {
             finishStore(repository, latestRev);
             return;
         }

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -179,7 +179,7 @@ Executor getHistoryLogExecutor(File file, String changeset)
 
         cmd.add("--template");
         if (file.isDirectory()) {
-            cmd.add(RuntimeEnvironment.isRenamedFilesEnabled() ? DIR_TEMPLATE_RENAMED : DIR_TEMPLATE);
+            cmd.add(env.isHandleHistoryOfRenamedFiles() ? DIR_TEMPLATE_RENAMED : DIR_TEMPLATE);
         } else {
             /* JDBC requires complete list of files. */
             cmd.add(env.storeHistoryCacheInDB() ? FILE_TEMPLATE_LIST : FILE_TEMPLATE);

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -578,8 +578,9 @@ public static void main(String argv[]) {
 
                 // Issue a warning when JDBC is used with renamed file handling.
                 // This causes heavy slowdown when used with JavaDB (issue #774).
-                if (RuntimeEnvironment.isRenamedFilesEnabled() && cfg.isHistoryCacheInDB()) {
-                    System.out.println("History stored in DB and renamed file handling is on - possible performance degradation");
+                if (env.isHandleHistoryOfRenamedFiles() && cfg.isHistoryCacheInDB()) {
+                    System.out.println("History stored in DB and renamed file " +
+                        "handling is on - possible performance degradation");
                 }
 
                 // Get history first.

File: test/org/opensolaris/opengrok/history/FileHistoryCacheTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.history;
@@ -206,7 +206,7 @@ public void testStoreAndGet() throws Exception {
         File reposRoot = new File(repositories.getSourceRoot(), "mercurial");
 
         // The test expects support for renamed files.
-        System.setProperty("org.opensolaris.opengrok.history.RenamedHandlingEnabled", "1");
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
 
         Repository repo = RepositoryFactory.getRepository(reposRoot);
         History historyToStore = repo.getHistory(reposRoot);

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2009, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.history;
@@ -87,7 +87,7 @@ public static Test suite() {
         RuntimeEnvironment.getInstance().setStoreHistoryCacheInDB(true);
 
         // The tests expect support for renamed files.
-        System.setProperty("org.opensolaris.opengrok.history.RenamedHandlingEnabled", "1");
+        RuntimeEnvironment.getInstance().setHandleHistoryOfRenamedFiles(true);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -61,7 +61,7 @@ protected JFlexTokenizer(Reader in) {
     
     protected JFlexTokenizer() {
         super();
-    }
+    }        
 
     /**
      * Reinitialize the tokenizer with new reader.

File: src/org/opensolaris/opengrok/analysis/data/IgnorantAnalyzerFactory.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2007, 2015, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.analysis.data;
@@ -43,7 +42,7 @@ public class IgnorantAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public IgnorantAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, null, null);
+        super(null, null, SUFFIXES, MAGICS, null, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/erlang/ErlangAnalyzerFactory.java
Patch:
@@ -35,6 +35,8 @@
 
 public class ErlangAnalyzerFactory extends FileAnalyzerFactory {
 
+    private static final String name = "Erlang";
+    
     private static final String[] SUFFIXES = {
         "ERL", "HRL", "ESCRIPT"
     };
@@ -43,7 +45,7 @@ public class ErlangAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ErlangAnalyzerFactory() {
-        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN, name);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis;
 

File: src/org/opensolaris/opengrok/history/PerforceHistoryParser.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.history;
@@ -30,7 +30,6 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.HashSet;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -87,7 +86,7 @@ public static History getRevisions(File file, String rev) throws IOException {
         ArrayList<String> cmd = new ArrayList<String>();
         cmd.add("p4");
         cmd.add("filelog");
-        cmd.add("-lt");
+        cmd.add("-lti");
         cmd.add(file.getName() + PerforceRepository.getRevisionCmd(rev));
         Executor executor = new Executor(cmd, file.getCanonicalFile().getParentFile());
         executor.exec();

File: test/org/opensolaris/opengrok/history/PerforceHistoryParserTest.java
Patch:
@@ -123,7 +123,7 @@ public void parseFileLog() throws Exception {
         assertEquals(4, result.getHistoryEntries().size());
 
         HistoryEntry e1 = result.getHistoryEntries().get(0);
-        assertEquals("4", e1.getRevision());
+        assertEquals("1234", e1.getRevision());
         assertEquals("User", e1.getAuthor());
         assertEquals(0, e1.getFiles().size());
         assertTrue(e1.getMessage().contains("number 4"));

File: test/org/opensolaris/opengrok/analysis/csharp/CSharpAnalyzerFactoryTest.java
Patch:
@@ -96,7 +96,7 @@ public static void tearDownClass() throws Exception {
      */
     @Test
     public void testScopeAnalyzer() throws Exception {
-        String path = "D:/projects/GitHub/OpenGrok/testdata/sources/csharp/Sample.cs"; //repository.getSourceRoot() + "/csharp/Sample.cs";
+        String path = repository.getSourceRoot() + "/csharp/Sample.cs";
         File f = new File(path);
         if (!(f.canRead() && f.isFile())) {
             fail("csharp testfile " + f + " not found");

File: test/org/opensolaris/opengrok/analysis/c/CAnalyzerFactoryTest.java
Patch:
@@ -80,7 +80,7 @@ public static void setUpClass() throws Exception {
         ctags.setBinary(RuntimeEnvironment.getInstance().getCtags());
 
         repository = new TestRepository();
-        repository.create(CxxAnalyzerFactoryTest.class.getResourceAsStream(
+        repository.create(CAnalyzerFactoryTest.class.getResourceAsStream(
                 "/org/opensolaris/opengrok/index/source.zip"));
     }
 

File: test/org/opensolaris/opengrok/analysis/java/JavaAnalyzerFactoryTest.java
Patch:
@@ -40,7 +40,6 @@
 import org.opensolaris.opengrok.analysis.Scopes;
 import org.opensolaris.opengrok.analysis.Scopes.Scope;
 import org.opensolaris.opengrok.analysis.StreamSource;
-import org.opensolaris.opengrok.analysis.c.CxxAnalyzerFactoryTest;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.search.QueryBuilder;
 import org.opensolaris.opengrok.util.TestRepository;
@@ -81,7 +80,7 @@ public static void setUpClass() throws Exception {
         ctags.setBinary(RuntimeEnvironment.getInstance().getCtags());
 
         repository = new TestRepository();
-        repository.create(CxxAnalyzerFactoryTest.class.getResourceAsStream(
+        repository.create(JavaAnalyzerFactoryTest.class.getResourceAsStream(
                 "/org/opensolaris/opengrok/index/source.zip"));
     }
 

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -244,6 +244,6 @@ public void testSearch() {
         // file name search is case insensitive
         instance = new SearchEngine();
         instance.setFile("JaVa"); // should match java
-        assertEquals(6, instance.search());
+        assertEquals(7, instance.search());
     }
 }

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -167,11 +167,11 @@ public void testSearch() {
 
         assertTrue(instance.parseCmdLine(new String[]{"-f", "opengrok && something || else"}));
         assertTrue(instance.search());
-        assertEquals(6, instance.results.size());
+        assertEquals(7, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-f", "op*ng?ok"}));
         assertTrue(instance.search());
-        assertEquals(5, instance.results.size());
+        assertEquals(6, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-f", "\"op*n g?ok\""}));
         assertTrue(instance.search());

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -1079,7 +1079,8 @@ public String getDirectoryRedirect() {
                 return null;
             }
             getPrefix();
-            if (prefix != Prefix.XREF_P && prefix != Prefix.HIST_L) {
+            if (prefix != Prefix.XREF_P && prefix != Prefix.HIST_L &&
+                prefix != Prefix.RSS_P) {
                 // if it is an existing dir perhaps people wanted dir xref
                 return req.getContextPath() + Prefix.XREF_P
                         + getUriEncodedPath() + trailingSlash(path);

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -1079,7 +1079,8 @@ public String getDirectoryRedirect() {
                 return null;
             }
             getPrefix();
-            if (prefix != Prefix.XREF_P && prefix != Prefix.HIST_L) {
+            if (prefix != Prefix.XREF_P && prefix != Prefix.HIST_L &&
+                prefix != Prefix.RSS_P) {
                 // if it is an existing dir perhaps people wanted dir xref
                 return req.getContextPath() + Prefix.XREF_P
                         + getUriEncodedPath() + trailingSlash(path);

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -539,7 +539,6 @@ public static void main(String argv[]) {
                 // a list of paths). This will be used to perform more fine
                 // grained checking in invalidateRepositories().
                 int optind = getopt.getOptind();
-                int orig_optind = optind;
                 if (optind != -1) {
                     while (optind < argv.length) {
                         subFilesList.add(cfg.getSourceRoot() + argv[optind++]);

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -344,7 +344,7 @@ public void unterminatedHeredoc() throws IOException {
         xref.write(out);
 
         assertEquals("<a class=\"l\" name=\"1\" href=\"#1\">1</a>"
-            + "<a href=\"/source/s?defs=cat\">cat</a> &lt;&lt; EOF"
+            + "<a href=\"/source/s?defs=cat\" onmouseover=\"onMouseOverSymbol('cat', 'undefined-in-file')\">cat</a> &lt;&lt; EOF"
             + "<span class=\"s\">\n"
             + "<a class=\"l\" name=\"2\" href=\"#2\">2</a>"
             + "unterminated heredoc</span>",

File: test/org/opensolaris/opengrok/analysis/php/PhpXrefTest.java
Patch:
@@ -17,7 +17,7 @@ public void basicTest() throws IOException {
         PhpAnalyzer.writeXref(new StringReader(s), w, null, null, null);
         assertEquals(
                 "<a class=\"l\" name=\"1\" href=\"#1\">1</a><strong>&lt;?php</strong> <a href=\"/"
-                + "source/s?defs=foo\">foo</a> <a href=\"/source/s?defs=bar\">bar</a>",
+                + "source/s?defs=foo\" onmouseover=\"onMouseOverSymbol('foo', 'undefined-in-file')\">foo</a> <a href=\"/source/s?defs=bar\" onmouseover=\"onMouseOverSymbol('bar', 'undefined-in-file')\">bar</a>",
                 w.toString());
     }
 

File: src/org/opensolaris/opengrok/analysis/Scopes.java
Patch:
@@ -67,7 +67,7 @@ public int compareTo(Scope o) {
     }
     
     // default global scope
-    private static Scope globalScope = new Scope(0, 0, "global", "");
+    private static Scope globalScope = new Scope(0, 0, "global", null);
     
     // tree of scopes sorted by starting line
     private TreeSet<Scope> scopes = new TreeSet<>();

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -114,7 +114,7 @@ private void addScopes(Document doc, StreamSource src) throws IOException {
         JFlexScopeParser scopeParser = newScopeParser(getReader(src.getStream()));
         if (scopeParser != null) {
             for (Definitions.Tag tag : defs.getTags()) {
-                if (tag.type.startsWith("function")) {
+                if (tag.type.startsWith("function") || tag.type.startsWith("method")) {
                     scopeParser.parse(tag, getReader(src.getStream()));
                 }
             }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -149,7 +149,7 @@ private void spool(BufferedReader reader, PrintWriter out, String tag) throws IO
     public String getUsage() {
         StringWriter wrt = new StringWriter();
         try (PrintWriter out = new PrintWriter(wrt)) {
-            out.println("Usage: opengrok.jar [options]");
+            out.println("Usage: opengrok.jar [options] [subDir1 ..]");
             for (Option o : options) {
                 out.println(o.getUsage());
             }

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -147,7 +147,8 @@ void removeAndVerifyOldestChangeset(List<HistoryEntry> entries,
         // and compare more fields, like author and date.
         if (entry == null || !revision.equals(entry.getRevision())) {
             throw new HistoryException("Cached revision '" + revision +
-                                       "' not found in the repository");
+                                       "' not found in the repository " +
+                                       getDirectoryName());
         }
     }
 

File: test/org/opensolaris/opengrok/web/UtilTest.java
Patch:
@@ -126,13 +126,13 @@ public void redableSize() {
     @Test
     public void readableLine() throws Exception {
         StringWriter out = new StringWriter();
-        // hmmm - where do meaningful test start?
-        Util.readableLine(42, out, null, null, null);
+        // hmmm - where do meaningful tests start?
+        Util.readableLine(42, out, null, null, null, null);
         assertEquals("\n<a class=\"l\" name=\"42\" href=\"#42\">42</a>",
                      out.toString());
 
         out.getBuffer().setLength(0); // clear buffer
-        Util.readableLine(110, out, null, null, null);
+        Util.readableLine(110, out, null, null, null, null);
         assertEquals("\n<a class=\"hl\" name=\"110\" href=\"#110\">110</a>",
                      out.toString());
     }

File: test/org/opensolaris/opengrok/web/UtilTest.java
Patch:
@@ -126,13 +126,13 @@ public void redableSize() {
     @Test
     public void readableLine() throws Exception {
         StringWriter out = new StringWriter();
-        // hmmm - where do meaningful test start?
-        Util.readableLine(42, out, null, null, null);
+        // hmmm - where do meaningful tests start?
+        Util.readableLine(42, out, null, null, null, null);
         assertEquals("\n<a class=\"l\" name=\"42\" href=\"#42\">42</a>",
                      out.toString());
 
         out.getBuffer().setLength(0); // clear buffer
-        Util.readableLine(110, out, null, null, null);
+        Util.readableLine(110, out, null, null, null, null);
         assertEquals("\n<a class=\"hl\" name=\"110\" href=\"#110\">110</a>",
                      out.toString());
     }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -110,7 +110,7 @@ public CommandLineOptions() {
         options.add(new Option('V', null, "Print version and quit"));
         options.add(new Option('v', null, "Print progress information as we go along"));
         options.add(new Option('W', "/path/to/configuration", "Write the current configuration to the specified file (so that the web application can use the same configuration"));
-        options.add(new Option('w', "webapp-context", "Context of webapp. Default is /source. If you specify a different name, make sure to rename source.war to that name."));
+        options.add(new Option('w', "webapp-context", "Context of webapp. Default is /source. If you specify a different name, make sure to rename source.war to that name. Also FULL reindex is needed if this is changed."));
         options.add(new Option('X', "url:suffix", "URL Suffix for the user Information provider. Default: \"\""));
         options.add(new Option('z', NUMBER, "depth of scanning for repositories in directory structure relative to source root. Default is "+Configuration.defaultScanningDepth+" ."));
     }

File: src/org/opensolaris/opengrok/ConsoleFormatter.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Opengrok console formatter
  * Creates a logentry on the console using the following format
- * [#|HH:MM:ss.SSS | <logmessage> |#]
+ * [#|HH:MM:ss.SSS | &lt;logmessage&gt; |#]
  * @author Jan S Berg
  */
 final public class ConsoleFormatter extends Formatter {

File: src/org/opensolaris/opengrok/FileLogFormatter.java
Patch:
@@ -31,8 +31,8 @@
 /**
  * Opengrok logfile formatter
  * Creates a logentry in the logfile on the following format
- * [#|YYYY-MM-DD HH:MM:ss.SSSZ |<loglevel>|<version>|OG|T=<threadnumber>|
- * <Class.method>: <logmessage> |#]
+ * [#|YYYY-MM-DD HH:MM:ss.SSSZ |&lt;loglevel&gt;|&lt;version&gt;|OG|T=&lt;threadnumber&gt;|
+ * &lt;Class.method&gt;: &lt;logmessage&gt; |#]
  * @author Jan S Berg
  */
 final public class FileLogFormatter extends Formatter {

File: src/org/opensolaris/opengrok/SimpleConsoleFormatter.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Opengrok console formatter
  * Creates a logentry on the console using the following format
- * HH:MM:ss <loglevel>: <logmessage>
+ * HH:MM:ss &lt;loglevel&gt;: &lt;logmessage&gt;
  * @author Lubos Kosco
  */
 final public class SimpleConsoleFormatter extends Formatter {

File: src/org/opensolaris/opengrok/SimpleFileLogFormatter.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Opengrok logfile formatter
  * Creates a logentry in the logfile on the following format
- * YYYY-MM-DD HH:MM:ss.SSSZ <loglevel> t<threadnumber> <Class.method>: <logmessage>
+ * YYYY-MM-DD HH:MM:ss.SSSZ &lt;loglevel&gt; t&lt;threadnumber&gt; &lt;Class.method&gt;: &lt;logmessage&gt;
  * @author Lubos Kosco
  */
 final public class SimpleFileLogFormatter extends Formatter {

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -154,6 +154,7 @@ public String getFileTypeName() {
      * @param doc the Lucene document
      * @param src the input data source
      * @param xrefOut where to write the xref (may be {@code null})
+     * @throws IOException if any I/O error
      */
     public void analyze(Document doc, StreamSource src, Writer xrefOut) throws IOException {
         // not used

File: src/org/opensolaris/opengrok/analysis/javascript/JavaScriptAnalyzer.java
Patch:
@@ -42,6 +42,7 @@ public class JavaScriptAnalyzer extends AbstractSourceCodeAnalyzer {
 
     /**
      * Creates a new instance of JavaAnalyzer
+     * @param factory factory for this analyzer
      */
     protected JavaScriptAnalyzer(FileAnalyzerFactory factory) {
         super(factory);

File: src/org/opensolaris/opengrok/analysis/plain/AbstractSourceCodeAnalyzer.java
Patch:
@@ -81,10 +81,13 @@ public Analyzer.TokenStreamComponents createComponents(String fieldName, Reader
     /**
      * Write a cross referenced HTML file reads the source from in
      *
+     * @param lxref xrefer to be used
      * @param in Input source
      * @param out Output xref writer
      * @param defs definitions for the file (could be null)
      * @param annotation annotation for the file (could be null)
+     * @param project project where this xref belongs to
+     * @throws IOException when any I/O error occurs
      */
     static protected void writeXref(JFlexXref lxref, Reader in, Writer out, Definitions defs, Annotation annotation, Project project) throws IOException {
         if (lxref != null) {

File: src/org/opensolaris/opengrok/analysis/uue/UuencodeAnalyzerFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2012, 2013 Constantine A. Murenin <C++@Cns.SU>
+ * Copyright (c) 2012, 2013 Constantine A. Murenin &lt;C++@Cns.SU&gt;
  */
 
 package org.opensolaris.opengrok.analysis.uue;
@@ -35,7 +35,7 @@
 import org.opensolaris.opengrok.history.Annotation;
 
 /**
- * @author Constantine A. Murenin <http://cnst.su/>
+ * @author Constantine A. Murenin &lt;http://cnst.su/&gt;
  */
 
 public class UuencodeAnalyzerFactory extends FileAnalyzerFactory {

File: src/org/opensolaris/opengrok/history/AccuRevRepository.java
Patch:
@@ -40,7 +40,7 @@
  *
  * AccuRev requires that a user logs into their system before it can be used. So
  * on the machine acting as the OpenGrok server, some valid user has to be
- * permanently logged in. (accurev login -n <user>)
+ * permanently logged in. (accurev login -n &lt;user&gt;)
  *
  * It appears that the file path that is given to all these methods is the
  * complete path to the file which includes the path to the root of the source

File: src/org/opensolaris/opengrok/history/RepoRepository.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Access to a Git repository.
  *
- * @author Trond Norbye <trond.norbye@gmail.com>
+ * @author Trond Norbye &lt;trond.norbye@gmail.com&gt;
  */
 public class RepoRepository extends Repository {
     // TODO: cache all of the GitRepositories within the class

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -49,7 +49,7 @@ public abstract class Repository extends RepositoryInfo {
     protected String cmd;
     
     /**
-     * List of <revision, tags> pairs for repositories which display tags
+     * List of &lt;revision, tags&gt; pairs for repositories which display tags
      * only for files changed by the tagged commit.
      */
     protected TreeSet<TagEntry> tagList = null;
@@ -331,7 +331,7 @@ final void createCache(HistoryCache cache, String sinceRevision)
     /**
      * Update the content in this repository by pulling the changes from the
      * upstream repository..
-     * @throws Exception if an error occurs.
+     * @throws IOException if an error occurs.
      */
     abstract void update() throws IOException;
 

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -179,7 +179,7 @@ public void run() {
      *
      * @param executor An executor to run the job
      * @param listener where to signal the changes to the database
-     * @param paths
+     * @param paths list of paths to be indexed
      * @throws IOException if an error occurs
      */
     public static void update(ExecutorService executor, IndexChangedListener listener, List<String> paths) throws IOException {

File: src/org/opensolaris/opengrok/management/AgentIndexRunner.java
Patch:
@@ -81,6 +81,7 @@ private AgentIndexRunner(boolean enabledParam) {
     /**
      * Static factory method to get an instance of AgentIndexRunner.
      * @param enabledParam if true, the initial instance should be running or not
+     * @return AgentIndexRunner instance
      */
     @SuppressWarnings("PMD.AvoidSynchronizedAtMethodLevel")
     public static synchronized AgentIndexRunner getInstance(boolean enabledParam) {

File: src/org/opensolaris/opengrok/util/IOUtils.java
Patch:
@@ -37,7 +37,7 @@
  * A small utility class to provide common functionality related to
  * IO so that we don't need to duplicate the logic all over the place.
  * 
- * @author Trond Norbye <trond.norbye@gmail.com>
+ * @author Trond Norbye &lt;trond.norbye@gmail.com&gt;
  */
 public final class IOUtils {
 

File: src/org/opensolaris/opengrok/web/EftarFile.java
Patch:
@@ -42,8 +42,8 @@
  * Created on October 12, 2005
  *
  * A Eftar File has the following format
- * FILE --> Record  ( Record | tagString ) *
- * Record --> 64bit:Hash 16bit:childrenOffset  16bit:(numberChildren|lenthOfTag) 16bit:tagOffset
+ * FILE --&gt; Record  ( Record | tagString ) *
+ * Record --&gt; 64bit:Hash 16bit:childrenOffset  16bit:(numberChildren|lenthOfTag) 16bit:tagOffset
  *
  * It is a tree of tagged names,
  * doing binary search in sorted list of children

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -431,7 +431,7 @@ public static String readableSize(long num) {
      *
      * @param s
      *            input text
-     * @return encoded text for use in <a title=""> tag
+     * @return encoded text for use in &lt;a title=""&gt; tag 
      */
     public static String encode(String s) {
         StringBuilder sb = new StringBuilder();

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -43,7 +43,6 @@
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.index.IgnoredNames;
 import org.opensolaris.opengrok.util.Statistics;
-import org.opensolaris.opengrok.util.StringUtils;
 
 /**
  * The HistoryGuru is used to implement an transparent layer to the various

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -88,7 +88,8 @@ public static Repository getRepository(File file) throws InstantiationException,
                 try {
                     res.setDirectoryName(file.getCanonicalPath());
                 } catch (IOException e) {
-                    OpenGrokLogger.getLogger().log(Level.SEVERE, "Failed to get canonical path name for " + file.getAbsolutePath(), e);
+                    OpenGrokLogger.getLogger().log(Level.SEVERE,
+                        "Failed to get canonical path name for " + file.getAbsolutePath(), e);
                 }
 
                 if (!res.isWorking()) {

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -496,7 +496,7 @@ public void testTags() throws Exception {
         List<HistoryEntry> dirHistory =
                 cache.get(reposRoot, repos, false).getHistoryEntries();
         assertEquals("Size of history", 10, dirHistory.size());
-        assertEquals("tip", dirHistory.get(0).getTags());
+        assertEquals(null, dirHistory.get(0).getTags());
         assertNull(dirHistory.get(1).getTags());
         assertEquals("start_of_novel", dirHistory.get(2).getTags());
         assertNull(dirHistory.get(3).getTags());
@@ -505,14 +505,14 @@ public void testTags() throws Exception {
                 cache.get(new File(reposRoot, "novel.txt"),
                           repos, false).getHistoryEntries();
         assertEquals("Size of history", 6, novelHistory.size());
-        assertEquals("tip", novelHistory.get(0).getTags());
+        assertEquals(null, novelHistory.get(0).getTags());
         assertEquals("start_of_novel", novelHistory.get(1).getTags());
 
         List<HistoryEntry> maincHistory =
                 cache.get(new File(reposRoot, "main.c"),
                           repos, false).getHistoryEntries();
         assertEquals("Size of history", 2, maincHistory.size());
-        assertEquals("tip, start_of_novel", maincHistory.get(0).getTags());
+        assertEquals("start_of_novel", maincHistory.get(0).getTags());
         assertNull(maincHistory.get(1).getTags());
     }
 }

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -43,7 +43,6 @@
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.index.IgnoredNames;
 import org.opensolaris.opengrok.util.Statistics;
-import org.opensolaris.opengrok.util.StringUtils;
 
 /**
  * The HistoryGuru is used to implement an transparent layer to the various

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -88,7 +88,8 @@ public static Repository getRepository(File file) throws InstantiationException,
                 try {
                     res.setDirectoryName(file.getCanonicalPath());
                 } catch (IOException e) {
-                    OpenGrokLogger.getLogger().log(Level.SEVERE, "Failed to get canonical path name for " + file.getAbsolutePath(), e);
+                    OpenGrokLogger.getLogger().log(Level.SEVERE,
+                        "Failed to get canonical path name for " + file.getAbsolutePath(), e);
                 }
 
                 if (!res.isWorking()) {

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -496,7 +496,7 @@ public void testTags() throws Exception {
         List<HistoryEntry> dirHistory =
                 cache.get(reposRoot, repos, false).getHistoryEntries();
         assertEquals("Size of history", 10, dirHistory.size());
-        assertEquals("tip", dirHistory.get(0).getTags());
+        assertEquals(null, dirHistory.get(0).getTags());
         assertNull(dirHistory.get(1).getTags());
         assertEquals("start_of_novel", dirHistory.get(2).getTags());
         assertNull(dirHistory.get(3).getTags());
@@ -505,14 +505,14 @@ public void testTags() throws Exception {
                 cache.get(new File(reposRoot, "novel.txt"),
                           repos, false).getHistoryEntries();
         assertEquals("Size of history", 6, novelHistory.size());
-        assertEquals("tip", novelHistory.get(0).getTags());
+        assertEquals(null, novelHistory.get(0).getTags());
         assertEquals("start_of_novel", novelHistory.get(1).getTags());
 
         List<HistoryEntry> maincHistory =
                 cache.get(new File(reposRoot, "main.c"),
                           repos, false).getHistoryEntries();
         assertEquals("Size of history", 2, maincHistory.size());
-        assertEquals("tip, start_of_novel", maincHistory.get(0).getTags());
+        assertEquals("start_of_novel", maincHistory.get(0).getTags());
         assertNull(maincHistory.get(1).getTags());
     }
 }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -91,7 +91,7 @@ public CommandLineOptions() {
         options.add(new Option('L', "path", "Path to the subdirectory in the web-application containing the requested stylesheet. The following factory-defaults exist: \"default\", \"offwhite\" and \"polished\""));
         options.add(new Option('l', ON_OFF, "Turn on/off locking of the Lucene database during index generation"));
         options.add(new Option('m', NUMBER, "Amount of memory that may be used for buffering added documents and deletions before they are flushed to the Directory(default "+Configuration.defaultRamBufferSize+"MB). Please increase JVM heap accordingly, too."));
-        options.add(new Option('N', "/path/to/symlink", "Allow this symlink to be followed. Option may be repeated."));
+        options.add(new Option('N', "/path/to/symlink", "Allow this symlink to be followed. Option may be repeated. By default only symlinks directly under source root directory are allowed."));
         options.add(new Option('n', null, "Do not generate indexes, but process all other command line options"));
         options.add(new Option('O', ON_OFF, "Turn on/off the optimization of the index database as part of the indexing step"));
         options.add(new Option('o', "path", "File with extra command line options for ctags"));

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -603,6 +603,9 @@ public static void writeHAD(Writer out, String ctxE, String entry,
 
         out.write("<td class=\"q\"><a href=\"");
         out.write(histPrefixE);
+        if (!entry.startsWith("/")) {
+            entry = "/" + entry;
+        }
         out.write(entry);
         out.write("\" title=\"History\">H</a>");
 

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -603,6 +603,9 @@ public static void writeHAD(Writer out, String ctxE, String entry,
 
         out.write("<td class=\"q\"><a href=\"");
         out.write(histPrefixE);
+        if (!entry.startsWith("/")) {
+            entry = "/" + entry;
+        }
         out.write(entry);
         out.write("\" title=\"History\">H</a>");
 

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2014, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -162,8 +162,7 @@ public Annotation annotate(File file, String rev) throws IOException {
     }
 
     /**
-     * Get the appropriate history reader for the file specified by parent and
-     * basename.
+     * Get the appropriate history reader for given file.
      *
      * @param file The file to get the history reader for
      * @throws HistoryException If an error occurs while getting the history
@@ -601,6 +600,7 @@ public void run() {
         String time_str = StringUtils.getReadableTime(stop - start);
         log.log(Level.INFO, "Done historycache for all repositories (took {0})",
             time_str);
+        historyCache.setHistoryIndexDone();
     }
 
     public void createCache(Collection<String> repositories) {

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -354,7 +354,7 @@ public void store(History history, Repository repository)
         final File root = RuntimeEnvironment.getInstance().getSourceRootFile();
         for (Map.Entry<String, List<HistoryEntry>> map_entry : map.entrySet()) {
             try {
-                if (RuntimeEnvironment.RenamedFilesEnabled() &&
+                if (RuntimeEnvironment.isRenamedFilesEnabled() &&
                     isRenamedFile(map_entry, env, repository, history)) {
                         continue;
                 }
@@ -366,7 +366,7 @@ public void store(History history, Repository repository)
             doFileHistory(map_entry, env, repository, null, root, false);
         }
 
-        if (!RuntimeEnvironment.RenamedFilesEnabled()) {
+        if (!RuntimeEnvironment.isRenamedFilesEnabled()) {
             return;
         }
 

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -601,7 +601,7 @@ private History getHistory(
                 ps.setString(2, filePath);
             } else {
                 // Fetch history for a single file only.
-                ps = conn.getStatement(env.RenamedFilesEnabled() && (getFilemovesCount() > 0) ?
+                ps = conn.getStatement(RuntimeEnvironment.isRenamedFilesEnabled() && (getFilemovesCount() > 0) ?
                     GET_FILE_HISTORY : GET_FILE_HISTORY_FOLDED);
                 ps.setString(2, getParentPath(filePath));
                 ps.setString(3, getBaseName(filePath));
@@ -828,7 +828,7 @@ private void storeHistory(final ConnectionResource conn, History history,
                         String fullPath = toUnixPath(file);
                         if (!history.isRenamed(
                             file.substring(repodir.length() + 1)) ||
-                            !RuntimeEnvironment.RenamedFilesEnabled()) {
+                            !RuntimeEnvironment.isRenamedFilesEnabled()) {
                                 int fileId = files.get(fullPath);
                                 addFilechange.setInt(2, fileId);
                                 addFilechange.executeUpdate();
@@ -858,7 +858,7 @@ private void storeHistory(final ConnectionResource conn, History history,
             }
         }
 
-        if (!RuntimeEnvironment.RenamedFilesEnabled()) {
+        if (!RuntimeEnvironment.isRenamedFilesEnabled()) {
             return;
         }
 

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2014, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 

File: test/org/opensolaris/opengrok/history/FileHistoryCacheTest.java
Patch:
@@ -50,6 +50,9 @@ public class FileHistoryCacheTest extends TestCase {
 
         cache = new FileHistoryCache();
         cache.initialize();
+
+        // The tests expect support for renamed files.
+        System.setProperty("org.opensolaris.opengrok.history.RenamedHandlingEnabled", "1");
     }
 
     /**

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -542,7 +542,9 @@ public static void main(String argv[]) {
                 RuntimeEnvironment env = RuntimeEnvironment.getInstance();
                 env.setConfiguration(cfg);
 
-                if (RuntimeEnvironment.isRenamedFilesEnabled()) {
+                // Issue a warning when JDBC is used with renamed file handling.
+                // This causes heavy slowdown when used with JavaDB (issue #774).
+                if (RuntimeEnvironment.isRenamedFilesEnabled() && cfg.isHistoryCacheInDB()) {
                     System.out.println("History stored in DB and renamed file handling is on - possible performance degradation");
                 }
 

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -354,7 +354,7 @@ public void store(History history, Repository repository)
         final File root = RuntimeEnvironment.getInstance().getSourceRootFile();
         for (Map.Entry<String, List<HistoryEntry>> map_entry : map.entrySet()) {
             try {
-                if (RuntimeEnvironment.RenamedFilesEnabled() &&
+                if (RuntimeEnvironment.isRenamedFilesEnabled() &&
                     isRenamedFile(map_entry, env, repository, history)) {
                         continue;
                 }
@@ -366,7 +366,7 @@ public void store(History history, Repository repository)
             doFileHistory(map_entry, env, repository, null, root, false);
         }
 
-        if (!RuntimeEnvironment.RenamedFilesEnabled()) {
+        if (!RuntimeEnvironment.isRenamedFilesEnabled()) {
             return;
         }
 

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -601,7 +601,7 @@ private History getHistory(
                 ps.setString(2, filePath);
             } else {
                 // Fetch history for a single file only.
-                ps = conn.getStatement(env.RenamedFilesEnabled() && (getFilemovesCount() > 0) ?
+                ps = conn.getStatement(RuntimeEnvironment.isRenamedFilesEnabled() && (getFilemovesCount() > 0) ?
                     GET_FILE_HISTORY : GET_FILE_HISTORY_FOLDED);
                 ps.setString(2, getParentPath(filePath));
                 ps.setString(3, getBaseName(filePath));
@@ -828,7 +828,7 @@ private void storeHistory(final ConnectionResource conn, History history,
                         String fullPath = toUnixPath(file);
                         if (!history.isRenamed(
                             file.substring(repodir.length() + 1)) ||
-                            !RuntimeEnvironment.RenamedFilesEnabled()) {
+                            !RuntimeEnvironment.isRenamedFilesEnabled()) {
                                 int fileId = files.get(fullPath);
                                 addFilechange.setInt(2, fileId);
                                 addFilechange.executeUpdate();
@@ -858,7 +858,7 @@ private void storeHistory(final ConnectionResource conn, History history,
             }
         }
 
-        if (!RuntimeEnvironment.RenamedFilesEnabled()) {
+        if (!RuntimeEnvironment.isRenamedFilesEnabled()) {
             return;
         }
 

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2014, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 

File: test/org/opensolaris/opengrok/history/FileHistoryCacheTest.java
Patch:
@@ -50,6 +50,9 @@ public class FileHistoryCacheTest extends TestCase {
 
         cache = new FileHistoryCache();
         cache.initialize();
+
+        // The tests expect support for renamed files.
+        System.setProperty("org.opensolaris.opengrok.history.RenamedHandlingEnabled", "1");
     }
 
     /**

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -221,7 +221,7 @@ public History getHistory(File file, boolean withFiles, boolean ui)
         RemoteSCM rscm = RuntimeEnvironment.getInstance().getRemoteScmSupported();
         boolean doRemote = (ui && (rscm == RemoteSCM.UIONLY))
             || (rscm == RemoteSCM.ON)
-            || ((rscm == RemoteSCM.DIRBASED) && (repo != null) && repo.hasHistoryForDirectories());
+            || (ui || ((rscm == RemoteSCM.DIRBASED) && (repo != null) && repo.hasHistoryForDirectories()));
 
         if (repo != null && repo.isWorking() && repo.fileHasHistory(file)
             && (!repo.isRemote() || doRemote)) {

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -221,7 +221,7 @@ public History getHistory(File file, boolean withFiles, boolean ui)
         RemoteSCM rscm = RuntimeEnvironment.getInstance().getRemoteScmSupported();
         boolean doRemote = (ui && (rscm == RemoteSCM.UIONLY))
             || (rscm == RemoteSCM.ON)
-            || ((rscm == RemoteSCM.DIRBASED) && (repo != null) && repo.hasHistoryForDirectories());
+            || (ui || ((rscm == RemoteSCM.DIRBASED) && (repo != null) && repo.hasHistoryForDirectories()));
 
         if (repo != null && repo.isWorking() && repo.fileHasHistory(file)
             && (!repo.isRemote() || doRemote)) {

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -488,9 +488,9 @@ public QueryBuilder getQueryBuilder() {
     }
 
     /**
-     * Get the eftar reader for the opengrok data directory. If it has been
+     * Get the eftar reader for the data directory. If it has been
      * already opened and not closed, this instance gets returned. One should
-     * not close it once used: {@link #cleanup()} takes care to close it.
+     * not close it once used: {@link #cleanup(ServletRequest)} takes care to close it.
      *
      * @return {@code null} if a reader can't be established, the reader
      * otherwise.
@@ -1216,7 +1216,6 @@ private PageConfig(HttpServletRequest req) {
      * the given request.
      * @param sr request to check, cleanup. Ignored if {@code null}.
      * @see PageConfig#get(HttpServletRequest)
-     * 
      */
     public static void cleanup(ServletRequest sr) {
         if (sr == null) {

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -85,6 +85,9 @@ public static Test suite() {
         cache = new JDBCHistoryCache(
                 DERBY_EMBEDDED_DRIVER, getURL() + ";create=true");
         cache.initialize();
+
+        // Mercurial parser needs to know if the history is stored in DB.
+        RuntimeEnvironment.getInstance().setStoreHistoryCacheInDB(true);
     }
 
     /**

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -96,7 +96,7 @@ public void setDirectoryName(String directoryName) {
                     }
                 }
             } catch (java.io.FileNotFoundException e) {
-                logger.fine("not loading header include file: " + e);
+                logger.fine("not loading CVS Root file: " + e);
                 return;
             }
 

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -152,7 +152,7 @@ void removeAndVerifyOldestChangeset(List<HistoryEntry> entries,
     }
 
     /**
-     * Get an input stream that I may use to read a speciffic version of a
+     * Get an input stream that I may use to read a specific version of a
      * named file.
      * @param parent the name of the directory containing the file
      * @param basename the name of the file to get
@@ -338,7 +338,7 @@ final void createCache(HistoryCache cache, String sinceRevision)
     abstract boolean isRepositoryFor(File file);
 
     /**
-     * Returns true if this repository supports sub reporitories (a.k.a. forests).
+     * Returns true if this repository supports sub repositories (a.k.a. forests).
      *
      * @return true if this repository supports sub repositories
      */

File: test/org/opensolaris/opengrok/history/MercurialRepositoryTest.java
Patch:
@@ -223,5 +223,4 @@ public void testGetHistoryWithNoSuchRevision() throws Exception {
             }
         }
     }
-
 }

File: src/org/opensolaris/opengrok/util/StringUtils.java
Patch:
@@ -36,7 +36,7 @@ private StringUtils() {
      * Returns true if the string is empty or only includes whitespace characters.
      *
      * @param str the string to be checked
-     * @return true if string is empty or only contains whitespace charadcters
+     * @return true if string is empty or only contains whitespace characters
      */
     public static boolean isOnlyWhitespace(String str) {
         for (int i = 0; i < str.length(); i++) {
@@ -66,8 +66,8 @@ public static boolean isPossiblyJavaClass(String s) {
 
   /**
    * Convert value in milliseconds to readable time.
-   * @param time delta in milliseconds
-   * @returns human readable string
+   * @param time_ms delta in milliseconds
+   * @return human readable string   
    */
   public static String getReadableTime(long time_ms) {
       String output = "";

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -368,7 +368,7 @@ public void update() throws IOException, HistoryException {
                                 startuid);
                         }
                     }
-                    // TODO below should be optional, since it traverses the tree once more to get total count! :(
+                    // The code below traverses the tree to get total count.
                     int file_cnt = 0;
                     if (RuntimeEnvironment.getInstance().isPrintProgress()) {
                         log.log(Level.INFO, "Counting files in {0} ...", dir);

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -54,7 +54,7 @@ public static void setUpClass() throws Exception {
         repository.create(HistoryGuru.class.getResourceAsStream("repositories.zip"));
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty("org.opensolaris.opengrok.configuration.ctags", "ctags"));
+        env.setCtags(System.getProperty("org.opensolaris.opengrok.analysis.Ctags", "ctags"));
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
 

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -55,15 +55,16 @@ public static void setUpClass() throws Exception {
         repository.create(IndexerTest.class.getResourceAsStream("source.zip"));
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        env.setCtags(System.getProperty("org.opensolaris.opengrok.configuration.ctags", "ctags"));
+        env.setCtags(System.getProperty("org.opensolaris.opengrok.analysis.Ctags", "ctags"));
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
 
         if (env.validateExuberantCtags()) {
             env.setSourceRoot(repository.getSourceRoot());
             env.setDataRoot(repository.getDataRoot());
             env.setVerbose(false);
-            Indexer.getInstance().prepareIndexer(env, true, true, "/c", null, false, false, false, null, null, new ArrayList<String>(), false);
+            Indexer.getInstance().prepareIndexer(env, true, true, "/c", null,
+                false, false, false, null, null, new ArrayList<String>(), false);
             Indexer.getInstance().doIndexerExecution(true, 1, null, null);
         } else {
             System.out.println("Skipping test. Could not find a ctags I could use in path.");

File: egrok/src/org/opensolaris/opengrok/egrok/model/Hit.java
Patch:
@@ -3,6 +3,7 @@
 import org.eclipse.equinox.internal.security.storage.Base64;
 import org.json.simple.JSONObject;
 
+@SuppressWarnings("restriction")
 public class Hit {
   public Hit(JSONObject jsonobj) {
     String directory = (String) jsonobj.get("directory");

File: egrok/src/org/opensolaris/opengrok/egrok/model/HitContainer.java
Patch:
@@ -9,7 +9,6 @@ public class HitContainer {
 
   public HitContainer(String name) {
     this.name = name;
-
   }
 
   public void add(Hit hit) {

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -755,11 +755,11 @@ public void setWebappLAF(String laf) {
         threadConfig.get().setWebappLAF(laf);
     }
 
-    public boolean isRemoteScmSupported() {
-        return threadConfig.get().isRemoteScmSupported();
+    public Configuration.RemoteSCM getRemoteScmSupported() {
+        return threadConfig.get().getRemoteScmSupported();
     }
 
-    public void setRemoteScmSupported(boolean supported) {
+    public void setRemoteScmSupported(Configuration.RemoteSCM supported) {
         threadConfig.get().setRemoteScmSupported(supported);
     }
 

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -57,8 +57,9 @@ public class CVSRepository extends RCSRepository {
         Pattern.compile("([\\.\\d]+)\\W+\\((\\w+)");
 
     public CVSRepository() {
-        type = "CVS";
-        datePattern = "yyyy-MM-dd hh:mm:ss";
+        setType("CVS");
+        setDatePattern("yyyy-MM-dd hh:mm:ss");
+        setRemote(true);
     }
 
     @Override

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -564,7 +564,7 @@ public boolean hasHistory() {
     /**
      * Check, whether annotations are available for the related resource.
      *
-     * @return {@code true} if annotions are available.
+     * @return {@code true} if annotations are available.
      */
     public boolean hasAnnotations() {
         if (hasAnnotation == null) {

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -114,7 +114,7 @@ public static Test suite() {
         // test runs (like tags enabled) and this makes other tests fail in
         // very nasty fashion (what is caused by fetch of particular thread
         // with cached thread-local value appears like race condition).
-        RuntimeEnvironment.freeHistoryExecutor();
+        RuntimeEnvironment.freeRenamedHistoryExecutor();
     }
 
     /**

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -344,7 +344,7 @@ public void store(History history, Repository repository)
             }
 
             repository.incrHistoryIndexThreadCount();
-            RuntimeEnvironment.getHistoryExecutor().submit(new Runnable() {
+            RuntimeEnvironment.getHistoryRenamedExecutor().submit(new Runnable() {
                 @Override
                 public void run() {
                     try {

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -841,7 +841,7 @@ private void storeHistory(final ConnectionResource conn, History history,
             final String repo_path = file_path.substring(env.getSourceRootPath().length());
 
             repository.incrHistoryIndexThreadCount();
-            RuntimeEnvironment.getHistoryExecutor().submit(new Runnable() {
+            RuntimeEnvironment.getHistoryRenamedExecutor().submit(new Runnable() {
                 @Override
                 public void run() {
                     try {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -794,6 +794,7 @@ public void run() {
                 log.log(Level.WARNING, "Received interrupt while waiting for executor to finish", exp);
             }
         }
+        log.info("Done indexing");
     }
 
     public void sendToConfigHost(RuntimeEnvironment env, String configHost) {

File: src/org/opensolaris/opengrok/history/SSCMRepository.java
Patch:
@@ -86,10 +86,11 @@ public boolean isWorking() {
     private Properties getProperties(File file) {
         Properties props = new Properties();
         File propFile;
-        if (file.isDirectory())
+        if (file.isDirectory()) {
             propFile = new File(file, MYSCMSERVERINFO_FILE);
-        else
+        } else {
             propFile = new File(file.getParent(), MYSCMSERVERINFO_FILE);
+        }
 
         if (propFile.isFile()) {
             try (BufferedReader br = new BufferedReader(new FileReader(propFile))) {

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -225,9 +225,9 @@ public void testRepositories() {
     @Test
     public void testRamBufferSize() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
-        assertEquals(16, instance.getRamBufferSize());  //default is 16
+        assertEquals(16, instance.getRamBufferSize(), 0);  //default is 16
         instance.setRamBufferSize(256);
-        assertEquals(256, instance.getRamBufferSize());
+        assertEquals(256, instance.getRamBufferSize(), 0);
     }
 
     @Test

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -326,10 +326,9 @@ public void update() throws IOException, HistoryException {
             Analyzer analyzer = AnalyzerGuru.getAnalyzer();
             IndexWriterConfig iwc = new IndexWriterConfig(SearchEngine.LUCENE_VERSION, analyzer);
             iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);
-            //iwc.setRAMBufferSizeMB(256.0);  //TODO check what is the sweet spot
+            iwc.setRAMBufferSizeMB(RuntimeEnvironment.getInstance().getRamBufferSize());
             writer = new IndexWriter(indexDirectory, iwc);
-            writer.commit(); // to make sure index exists on the disk
-            //writer.setMaxFieldLength(RuntimeEnvironment.getInstance().getIndexWordLimit());
+            writer.commit(); // to make sure index exists on the disk            
 
             if (directories.isEmpty()) {
                 if (project == null) {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -318,7 +318,7 @@ public static void main(String argv[]) {
                             break;
                         case 'm': {
                             try {
-                                cfg.setIndexWordLimit(Integer.parseInt(getopt.getOptarg()));
+                                cfg.setRamBufferSize(Double.parseDouble(getopt.getOptarg()));
                             } catch (NumberFormatException exp) {
                                 System.err.println("ERROR: Failed to parse argument to \"-m\": " + exp.getMessage());
                                 System.exit(1);

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -812,7 +812,7 @@ public static void dumpConfiguration(Appendable out) throws IOException,
         out.append("<tr><td>Ignored files</td><td>");
         printUnorderedList(out, env.getIgnoredNames().getItems());
         out.append("</td></tr>");
-        printTableRow(out, "Index word limit", env.getIndexWordLimit());
+        printTableRow(out, "lucene RAM_BUFFER_SIZE_MB", env.getRamBufferSize());
         printTableRow(out, "Allow leading wildcard in search",
             env.isAllowLeadingWildcard());
         printTableRow(out, "History cache", HistoryGuru.getInstance()

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -263,7 +263,7 @@ void assignTagsInHistory(History hist) throws HistoryException {
             return;
         }
         if (this.getTagList() == null) {
-            throw new HistoryException("Tag list was not created before assigning tags to changesets!" + this);
+            throw new HistoryException("Tag list was not created before assigning tags to changesets!");
         }
         Iterator<TagEntry> it = this.getTagList().descendingIterator();
         TagEntry lastTagEntry = null;

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -109,7 +109,7 @@ public static Test suite() {
         // Reset any changes the test made to the runtime environment.
         RuntimeEnvironment.getInstance().setConfiguration(new Configuration());
 
-        // We really need to destroy the thead pool here since some of the
+        // We really need to destroy the thread pool here since some of the
         // threads might have some thread-local variables cached from previous
         // test runs (like tags enabled) and this makes other tests fail in
         // very nasty fashion (what is caused by fetch of particular thread

File: src/org/opensolaris/opengrok/jdbc/ConnectionManager.java
Patch:
@@ -74,7 +74,7 @@ Connection openConnection() throws SQLException {
      * @return a {@code ConnectionResource} object
      * @throws SQLException if a database error occurs
      */
-    public ConnectionResource getConnectionResource() throws SQLException {
+    public synchronized ConnectionResource getConnectionResource() throws SQLException {
         ConnectionResource cr = connections.poll();
         if (cr == null || !cr.isValid()) {
             cr = new ConnectionResource(this);

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -585,7 +585,7 @@ public boolean annotate() {
     }
 
     /**
-     * Get the annotation for the reqested resource.
+     * Get the annotation for the requested resource.
      *
      * @return {@code null} if not available or annotation was not requested,
      * the cached annotation otherwise.

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -585,7 +585,7 @@ public boolean annotate() {
     }
 
     /**
-     * Get the annotation for the reqested resource.
+     * Get the annotation for the requested resource.
      *
      * @return {@code null} if not available or annotation was not requested,
      * the cached annotation otherwise.

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -741,7 +741,7 @@ public static String[] diffline(StringBuilder line1, StringBuilder line2) {
             n--;
         }
 
-        // added
+        // deleted
         if (s <= m) {
             StringBuilder sb = new StringBuilder();
             sb.append(Util.htmlize(line1.substring(0, s)));
@@ -754,7 +754,7 @@ public static String[] diffline(StringBuilder line1, StringBuilder line2) {
             ret[0] = line1.toString(); // no change
         }
 
-        // deleted
+        // added
         if (s <= n) {
             StringBuilder sb = new StringBuilder();
             sb.append(Util.htmlize(line2.substring(0, s)));

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -144,7 +144,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
         String morePrefix = sh.contextPath + Prefix.MORE_P;
         String xrefPrefixE = ctxE + Prefix.XREF_P;
         String histPrefixE = ctxE + Prefix.HIST_L;
-        String rawPrefixE = ctxE + Prefix.RAW_P;
+        String downloadPrefixE = ctxE + Prefix.DOWNLOAD_P;
         File xrefDataDir = new File(sh.dataRoot, Prefix.XREF_P.toString());
 
         for (Map.Entry<String, ArrayList<Document>> entry :
@@ -172,7 +172,7 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
                 out.write(xrefPrefixE);
                 out.write(rpathE);
                 out.write("?a=true\" title=\"Annotate\">A</a> <a href=\"");
-                out.write(rawPrefixE);
+                out.write(downloadPrefixE);
                 out.write(rpathE);
                 out.write("\" title=\"Download\">D</a>");
                 out.write("</td>");

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -311,8 +311,9 @@ public String canProcess() {
                         && !getRequestedRevision().isEmpty() && !hasHistory()) {
                     return null;
                 }
-            } else if (getPrefix() == Prefix.RAW_P) {
-                return null;
+            } else if ((getPrefix() == Prefix.RAW_P) ||
+                (getPrefix() == Prefix.DOWNLOAD_P)) {
+                    return null;
             }
         }
         return redir == null ? "" : redir;

File: src/org/opensolaris/opengrok/web/Prefix.java
Patch:
@@ -60,6 +60,8 @@ public enum Prefix {
     /** RSS XML Feed of latest changes (link prefix) */
     RSS_P("/rss"),
     /** Download file (link prefix) */
+    DOWNLOAD_P("/download"),
+    /** Raw file display (link prefix) */
     RAW_P("/raw"),
     /** full blown search from main page or top bar (link prefix) */
     SEARCH_P("/search"),

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -253,6 +253,9 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
                         if (!isDefSearch) {
                             tokens.printContext();
                         }
+                        if (isDefSearch && tokens.tags.containsKey(tokens.markedLine)) {
+                            tokens.printContext();
+                        }
                         matchedLines++;
                         //out.write("<br> <i>Matched " + token + " maxlines = " + matchedLines + "</i><br>");
                         break;

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -202,8 +202,8 @@ public static void prettyPrint(Writer out, SearchHelper sh, int start,
                         FileReader r = genre == Genre.PLAIN
                                 ? new FileReader(new File(sh.sourceRoot, rpath))
                                 : null;
-                        sh.sourceContext.getContext(r, out, xrefPrefix,
-                                morePrefix, rpath, tags, true, null);
+                        sh.sourceContext.getContext(r, out, xrefPrefix, morePrefix, 
+                                rpath, tags, true, sh.builder.isDefSearch(), null);
                     }
                 }
                 if (sh.historyContext != null) {

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -354,7 +354,7 @@ public void results(int start, int end, List<Hit> ret) {
                         if (Genre.PLAIN == genre && (source != null)) {
                             hasContext = sourceContext.getContext(new InputStreamReader(new FileInputStream(source
                                     + filename)), null, null, null, filename,
-                                    tags, nhits > 100, ret);
+                                    tags, nhits > 100, false, ret);
                         } else if (Genre.XREFABLE == genre && data != null && summarizer != null) {
                             int l = 0;
                             try (Reader r = RuntimeEnvironment.getInstance().isCompressXref() ?
@@ -377,11 +377,11 @@ public void results(int start, int end, List<Hit> ret) {
                             }
                         } else {
                             OpenGrokLogger.getLogger().log(Level.WARNING, "Unknown genre: {0} for {1}", new Object[]{genre, filename});
-                            hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
+                            hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, false, ret);
                         }
                     } catch (FileNotFoundException exp) {
                         OpenGrokLogger.getLogger().log(Level.WARNING, "Couldn''t read summary from {0} ({1})", new Object[]{filename, exp.getMessage()});
-                        hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
+                        hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, false, ret);
                     }
                 }
                 if (historyContext != null) {

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
 import java.util.ArrayList;
@@ -48,14 +49,14 @@
 import org.apache.bcel.classfile.LocalVariable;
 import org.apache.bcel.classfile.LocalVariableTable;
 import org.apache.bcel.classfile.Utility;
+import org.apache.lucene.analysis.charfilter.HTMLStripCharFilter;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.TextField;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.IteratorReader;
 import org.opensolaris.opengrok.analysis.StreamSource;
-import org.opensolaris.opengrok.analysis.TagFilter;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
@@ -107,8 +108,7 @@ void analyze(Document doc, InputStream in, Writer xrefOut) throws IOException {
 
         doc.add(new TextField("defs", new IteratorReader(defs)));
         doc.add(new TextField("refs", new IteratorReader(refs)));
-        // TODO could be improved, lucene has xhtml parsers/readers
-        doc.add(new TextField("full", new TagFilter(xref)));
+        doc.add(new TextField("full", new HTMLStripCharFilter(new StringReader(xref))));
         doc.add(new TextField("full", constants, Store.NO));
     }
 

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.zip.GZIPInputStream;
+import org.apache.lucene.analysis.charfilter.HTMLStripCharFilter;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.IndexableField;
@@ -45,7 +46,6 @@
 import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
-import org.opensolaris.opengrok.analysis.TagFilter;
 import org.opensolaris.opengrok.history.HistoryException;
 import org.opensolaris.opengrok.web.Prefix;
 import org.opensolaris.opengrok.web.SearchHelper;
@@ -92,7 +92,7 @@ private static Map<String, ArrayList<Document>> createMap(IndexSearcher searcher
 
     private static String getTags(File basedir, String path, boolean compressed) {
         char[] content = new char[1024 * 8];
-        try (TagFilter r = new TagFilter(getXrefReader(basedir, path, compressed))) {
+        try (HTMLStripCharFilter r = new HTMLStripCharFilter(getXrefReader(basedir, path, compressed))) {
             int len = r.read(content);
             return new String(content, 0, len);
         } catch (Exception e) {

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.Executors;
 import java.util.logging.Level;
 import java.util.zip.GZIPInputStream;
+import org.apache.lucene.analysis.charfilter.HTMLStripCharFilter;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
@@ -44,7 +45,6 @@
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
-import org.opensolaris.opengrok.analysis.TagFilter;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.history.HistoryException;
@@ -358,8 +358,8 @@ public void results(int start, int end, List<Hit> ret) {
                         } else if (Genre.XREFABLE == genre && data != null && summarizer != null) {
                             int l = 0;
                             try (Reader r = RuntimeEnvironment.getInstance().isCompressXref() ?
-                                     new TagFilter(new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(data + "/xref" + filename + ".gz"))))) :
-                                     new TagFilter(new BufferedReader(new FileReader(data + "/xref" + filename)))) {
+                                     new HTMLStripCharFilter(new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(data + "/xref" + filename + ".gz"))))) :
+                                     new HTMLStripCharFilter(new BufferedReader(new FileReader(data + "/xref" + filename)))) {
                                 l = r.read(content);
                             }
                             //TODO FIX below fragmenter according to either summarizer or context (to get line numbers, might be hard, since xref writers will need to be fixed too, they generate just one line of html code now :( )

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -60,6 +60,7 @@ public JFlexTokenizer(Reader input) {
 
     /**
      * Reinitialize the tokenizer with new reader.
+     * @throws java.io.IOException
      */
     @Override
     public void reset() throws IOException {
@@ -70,6 +71,7 @@ public void reset() throws IOException {
 
     @Override
     public final void close() throws IOException {
+        super.close();
         this.yyclose();
     }
     protected CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -74,7 +74,7 @@ public class SearchEngine {
     /**
      * version of lucene index common for whole app
      */
-    public static final Version LUCENE_VERSION = Version.LUCENE_45;
+    public static final Version LUCENE_VERSION = Version.LUCENE_46;
     /**
      * Holds value of property definition.
      */

File: test/org/opensolaris/opengrok/analysis/PathTokenizerTest.java
Patch:
@@ -48,6 +48,7 @@ public void testIncrementToken() throws Exception {
 
         int count = 0;
         int dots = 0;
+        tokenizer.reset();
         while (tokenizer.incrementToken()) {
             if ( term.toString().equals(".") ) { dots++;break; }
             assertTrue("too many tokens", count < expectedTokens.length);
@@ -60,6 +61,8 @@ public void testIncrementToken() throws Exception {
                     offset.endOffset());
             count++;
         }
+        tokenizer.end();
+        tokenizer.close();
         assertEquals("wrong number of tokens", expectedTokens.length, count+dots);
     }
 }

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -194,9 +194,9 @@ public void testSearch() {
         assertEquals(1, instance.results.size());
 
 	RuntimeEnvironment.getInstance().setAllowLeadingWildcard(true);
-        assertTrue(instance.parseCmdLine(new String[]{"-f", "********in argv"}));
+        assertTrue(instance.parseCmdLine(new String[]{"-f", "********in argv path:main.c"}));
         assertTrue(instance.search());
-        assertEquals(21, instance.results.size());
+        assertEquals(4, instance.results.size());
 	
     }
 

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -155,8 +155,9 @@ public void processStream(InputStream input) throws IOException {
                       */
                      String[] move = part.split(" \\(");
                      File f = new File(mydir + move[0]);
-                     if (!move[0].isEmpty() && f.exists()) {
-                        renamedFiles.add(move[0]);
+                     if (!move[0].isEmpty() && f.exists() &&
+                         !renamedFiles.contains(move[0])) {
+                             renamedFiles.add(move[0]);
                      }
                 }
 

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -1078,6 +1078,8 @@ public static Definitions getDefinitions(File file)
             throws IOException, ParseException, ClassNotFoundException {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         String path = env.getPathRelativeToSourceRoot(file, 0);
+        //sanitize windows path delimiters
+        path=path.replace("\\", "/");
 
         IndexReader ireader = getIndexReader(path);
 

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -253,7 +253,7 @@ public void store(History history, Repository repository)
                 String repodir = env.getPathRelativeToSourceRoot(
                     new File(repository.getDirectoryName()), 0);
                 String shortestfile = fullfile.substring(repodir.length() + 1);
-                if (history.isIgnored(shortestfile)) {
+                if (history.isRenamed(shortestfile)) {
                     hist = repository.getHistory(test);
                 }
             } catch (IOException ex) {

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -51,7 +51,7 @@ class MercurialHistoryParser implements Executor.StreamHandler {
     private final MercurialRepository repository;
     private final String mydir;
     private boolean isDir;
-    private final List<String> ignoredFiles = new ArrayList<String>();
+    private final List<String> renamedFiles = new ArrayList<String>();
         
     MercurialHistoryParser(MercurialRepository repository) {
         this.repository = repository;
@@ -93,7 +93,7 @@ History parse(File file, String changeset) throws HistoryException {
             repository.removeAndVerifyOldestChangeset(entries, changeset);
         }
 
-        return new History(entries, ignoredFiles);
+        return new History(entries, renamedFiles);
     }
 
     /**
@@ -156,7 +156,7 @@ public void processStream(InputStream input) throws IOException {
                      String[] move = part.split(" \\(");
                      File f = new File(mydir + move[0]);
                      if (!move[0].isEmpty() && f.exists()) {
-                        ignoredFiles.add(move[0]);
+                        renamedFiles.add(move[0]);
                      }
                 }
 

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -354,7 +354,7 @@ public void results(int start, int end, List<Hit> ret) {
                         if (Genre.PLAIN == genre && (source != null)) {
                             hasContext = sourceContext.getContext(new InputStreamReader(new FileInputStream(source
                                     + filename)), null, null, null, filename,
-                                    tags, nhits > 100, ret);
+                                    tags, nhits > 100, false, ret);
                         } else if (Genre.XREFABLE == genre && data != null && summarizer != null) {
                             int l = 0;
                             try (Reader r = RuntimeEnvironment.getInstance().isCompressXref() ?
@@ -377,11 +377,11 @@ public void results(int start, int end, List<Hit> ret) {
                             }
                         } else {
                             OpenGrokLogger.getLogger().log(Level.WARNING, "Unknown genre: {0} for {1}", new Object[]{genre, filename});
-                            hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
+                            hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, false, ret);
                         }
                     } catch (FileNotFoundException exp) {
                         OpenGrokLogger.getLogger().log(Level.WARNING, "Couldn''t read summary from {0} ({1})", new Object[]{filename, exp.getMessage()});
-                        hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
+                        hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, false, ret);
                     }
                 }
                 if (historyContext != null) {

File: src/org/opensolaris/opengrok/history/RepositoryInfo.java
Patch:
@@ -34,7 +34,7 @@
 public class RepositoryInfo implements Serializable {
     private static final long serialVersionUID = 1L;
 
-    protected String directoryName;
+    protected String directoryName; // absolute path
     protected Boolean working;
     protected String type;
     protected boolean remote;

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -354,12 +354,12 @@ public static void main(String argv[]) {
                                 arg[0] = arg[0].substring(arg[0].lastIndexOf('.') + 1).toUpperCase();
                             } else {
                                 A_usage();
-			    }
+                            }
 
                             if (arg[1].equals("-")) {
                                 if (prefix) {
                                     AnalyzerGuru.addPrefix(arg[0], null);
-				} else {
+                                } else {
                                     AnalyzerGuru.addExtension(arg[0], null);
                                 }
                                 break;
@@ -375,7 +375,7 @@ public static void main(String argv[]) {
                                     log.log(Level.SEVERE, "Stack: ", e.fillInStackTrace());
                                     System.exit(1);
                                 }
-			    } else {
+                            } else {
                                 try {
                                     AnalyzerGuru.addExtension(
                                             arg[0],

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -73,6 +73,7 @@ public final class IgnoredNames extends Filter {
         ".sln",
         ".vsmdi",
         ".dll",
+        ".opengrok_skip_history",
     };
 
     public IgnoredNames() {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -350,7 +350,7 @@ public static void main(String argv[]) {
                             if (arg[0].endsWith(".")) {
                                 arg[0] = arg[0].substring(0, arg[0].lastIndexOf('.')).toUpperCase();
                                 prefix = true;
-			    } else if (arg[0].startsWith(".")) {
+                            } else if (arg[0].startsWith(".")) {
                                 arg[0] = arg[0].substring(arg[0].lastIndexOf('.') + 1).toUpperCase();
                             } else {
                                 A_usage();

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -21,7 +21,6 @@
 package org.opensolaris.opengrok.search;
 
 import java.io.IOException;
-import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.HashSet;

File: src/org/opensolaris/opengrok/web/SearchHelper.java
Patch:
@@ -246,7 +246,7 @@ public SearchHelper prepareExec(SortedSet<String> projects) {
         }
         // the Query created by the QueryBuilder
         try {
-	    indexDir=new File(dataRoot, "index");
+            indexDir=new File(dataRoot, "index");
             query = builder.build();
             if (projects == null) {
                 errorMsg = "No project selected!";

File: src/org/opensolaris/opengrok/analysis/PathTokenizer.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
-import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 
 /**
  * Tokenizer for paths filenames and extensions Input:

File: src/org/opensolaris/opengrok/analysis/archive/BZip2AnalyzerFactory.java
Patch:
@@ -36,7 +36,7 @@ public class BZip2AnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public BZip2AnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, null, null);
+        super(null, null, SUFFIXES, MAGICS, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/archive/GZIPAnalyzerFactory.java
Patch:
@@ -37,7 +37,7 @@ public class GZIPAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public GZIPAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, null, null);
+        super(null, null, SUFFIXES, MAGICS, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzerFactory.java
Patch:
@@ -34,7 +34,7 @@ public class TarAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TarAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, null, Genre.XREFABLE);
+        super(null, null, SUFFIXES, null, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzerFactory.java
Patch:
@@ -99,7 +99,7 @@ public FileAnalyzerFactory isMagic(byte[] contents, InputStream in)
             new ZipAnalyzerFactory();
 
     private ZipAnalyzerFactory() {
-        super(null, SUFFIXES, null, MATCHER, null, Genre.XREFABLE);
+        super(null, null, SUFFIXES, null, MATCHER, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -49,7 +49,7 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/c/CxxAnalyzerFactory.java
Patch:
@@ -45,7 +45,7 @@ public class CxxAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CxxAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/csharp/CSharpAnalyzerFactory.java
Patch:
@@ -43,7 +43,7 @@ public class CSharpAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CSharpAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/data/IgnorantAnalyzerFactory.java
Patch:
@@ -43,7 +43,7 @@ public class IgnorantAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public IgnorantAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, null, null);
+        super(null, null, SUFFIXES, MAGICS, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/data/ImageAnalyzerFactory.java
Patch:
@@ -37,7 +37,7 @@ public class ImageAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ImageAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, null, Genre.IMAGE);
+        super(null, null, SUFFIXES, null, null, null, Genre.IMAGE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class TroffAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TroffAnalyzerFactory() {
-        super(null, null, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, null, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzerFactory.java
Patch:
@@ -34,7 +34,7 @@ public class ELFAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ELFAnalyzerFactory() {
-        super(null, null, MAGICS, null, null, Genre.XREFABLE);
+        super(null, null, null, MAGICS, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzerFactory.java
Patch:
@@ -38,7 +38,7 @@ public final class JarAnalyzerFactory extends FileAnalyzerFactory {
 
     private JarAnalyzerFactory() {
         // no magics for jar files, ZipAnalyzerFactory will handle it for us
-        super(null, SUFFIXES, null, null, null, Genre.XREFABLE);
+        super(null, null, SUFFIXES, null, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class JavaClassAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JavaClassAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, null, Genre.XREFABLE);
+        super(null, null, SUFFIXES, MAGICS, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/fortran/FortranAnalyzerFactory.java
Patch:
@@ -40,7 +40,7 @@ public class FortranAnalyzerFactory extends FileAnalyzerFactory {
         "INC",};
 
     public FortranAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -43,7 +43,7 @@ public class JavaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JavaAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/javascript/JavaScriptAnalyzerFactory.java
Patch:
@@ -42,7 +42,7 @@ public class JavaScriptAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JavaScriptAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -42,7 +42,7 @@ public class LispAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public LispAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -48,11 +48,12 @@ public class PerlAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] MAGICS = {
         "#!/usr/bin/env perl",
         "#!/usr/bin/perl",
+        "#!/usr/local/bin/perl",
         "#!/bin/perl"
     };
 
     public PerlAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/php/PhpAnalyzerFactory.java
Patch:
@@ -45,7 +45,7 @@ public class PhpAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PhpAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -89,7 +89,7 @@ private boolean isPlainText(String str) {
             new PlainAnalyzerFactory();
 
     private PlainAnalyzerFactory() {
-        super(null, null, null, MATCHER, "text/plain", Genre.PLAIN);
+        super(null, null, null, null, MATCHER, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -45,7 +45,7 @@ public class XMLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public XMLAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/html", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/html", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/python/PythonAnalyzerFactory.java
Patch:
@@ -52,7 +52,7 @@ public class PythonAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PythonAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/scala/ScalaAnalyzerFactory.java
Patch:
@@ -48,7 +48,7 @@ public class ScalaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ScalaAnalyzerFactory() {
-        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/sql/PLSQLAnalyzerFactory.java
Patch:
@@ -42,7 +42,7 @@ public class PLSQLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public PLSQLAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class SQLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public SQLAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -46,7 +46,7 @@ public class TclAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TclAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/uue/UuencodeAnalyzer.java
Patch:
@@ -95,7 +95,7 @@ private void writeXref(Reader in, Writer out) throws IOException {
      */
     static void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project) throws IOException {
         UuencodeXref xref = new UuencodeXref(in);
-	xref.annotation = annotation;
+        xref.annotation = annotation;
         xref.project = project;
         xref.setDefs(defs);
         xref.write(out);

File: src/org/opensolaris/opengrok/analysis/vb/VBAnalyzerFactory.java
Patch:
@@ -44,7 +44,7 @@ public class VBAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public VBAnalyzerFactory() {
-        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -39,6 +39,7 @@ public class CommandLineOptions {
 
     private static final String ON_OFF = "on/off";
     private static final String NUMBER = "number";
+    private final List<Option> options;
 
     static class Option {
 
@@ -66,12 +67,11 @@ public String getUsage() {
             return sb.toString();
         }
     }
-    private final List<Option> options;
 
     public CommandLineOptions() {
         options = new ArrayList<Option>();
         options.add(new Option('?', null, "Help"));
-        options.add(new Option('A', "ext:analyzer", "Files with the named extension should be analyzed with the specified class"));
+        options.add(new Option('A', ".ext|prefix.:analyzer", "Files with the named prefix/extension should be analyzed with the specified class"));
         options.add(new Option('a', ON_OFF, "Allow or disallow leading wildcards in a search"));
         options.add(new Option('B', "url", "Base URL of the user Information provider. Default: \"http://www.myserver.org/viewProfile.jspa?username=\""));
         options.add(new Option('C', null, "Print per project percentage progress information(I/O extensive, since one read through dir structure is made before indexing, needs -v, otherwise it just goes to the log)"));

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -506,7 +506,7 @@ public String getType() {
     /**
      * Setter for property type.
      *
-     * @param type New value of property type.
+     * @param fileType New value of property type.
      */
     public void setType(String fileType) {
         this.type = fileType;

File: test/org/opensolaris/opengrok/analysis/JFlexTokenizerTest.java
Patch:
@@ -62,7 +62,7 @@ public void testOffsetAttribute() throws Exception {
         testOffsetAttribute(CSymbolTokenizer.class);
         testOffsetAttribute(CxxSymbolTokenizer.class);
         testOffsetAttribute(JavaSymbolTokenizer.class);
-		testOffsetAttribute(ScalaSymbolTokenizer.class);
+        testOffsetAttribute(ScalaSymbolTokenizer.class);
         testOffsetAttribute(LispSymbolTokenizer.class);
         testOffsetAttribute(TclSymbolTokenizer.class);
 

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -104,7 +104,7 @@ public void testBug15890LineCount() throws Exception {
         bug15890LineCount(new CxxXref(new StringReader(fileContents)));
         bug15890LineCount(new LispXref(new StringReader(fileContents)));
         bug15890LineCount(new JavaXref(new StringReader(fileContents)));
-		bug15890LineCount(new ScalaXref(new StringReader(fileContents)));
+        bug15890LineCount(new ScalaXref(new StringReader(fileContents)));
         bug15890LineCount(new FortranXref(new StringReader(fileContents)));
         bug15890LineCount(new XMLXref(new StringReader(fileContents)));
         bug15890LineCount(new ShXref(new StringReader(fileContents)));

File: test/org/opensolaris/opengrok/analysis/PathTokenizerTest.java
Patch:
@@ -62,6 +62,4 @@ public void testIncrementToken() throws Exception {
         }
         assertEquals("wrong number of tokens", expectedTokens.length, count+dots);
     }
-
-
-}
\ No newline at end of file
+}

File: test/org/opensolaris/opengrok/analysis/document/TroffAnalyzerTest.java
Patch:
@@ -38,10 +38,10 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.opensolaris.opengrok.web.Util;
 import static org.junit.Assert.*;
 import org.opensolaris.opengrok.analysis.StreamSource;
 import org.opensolaris.opengrok.util.TestRepository;
+import org.opensolaris.opengrok.web.Util;
 
 /**
  * @author  Jens Elkner

File: test/org/opensolaris/opengrok/search/QueryBuilderTest.java
Patch:
@@ -52,4 +52,4 @@ public void testParsePath() throws ParseException {
         
     }
     
-}
\ No newline at end of file
+}

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -192,7 +192,7 @@ public void testSearch() {
         assertTrue(instance.parseCmdLine(new String[]{"-p", "?akefile"}));
         assertTrue(instance.search());
         assertEquals(1, instance.results.size());
-	
+
 	RuntimeEnvironment.getInstance().setAllowLeadingWildcard(true);
         assertTrue(instance.parseCmdLine(new String[]{"-f", "********in argv"}));
         assertTrue(instance.search());

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -74,7 +74,7 @@ public class MercurialRepository extends Repository {
 
     /** Template for formatting hg log output for directories. */
     private static final String DIR_TEMPLATE = TEMPLATE
-        + "files: {files}{file_copies}\\n";
+        + "files: {files} {file_copies}\\n";
 
     public MercurialRepository() {
         type = "Mercurial";

File: test/org/opensolaris/opengrok/history/MercurialRepositoryTest.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.history;
@@ -44,6 +43,7 @@ public class MercurialRepositoryTest {
      * that is latest changeset first.
      */
     private static final String[] REVISIONS = {
+        "9:8b340409b3a8",
         "8:6a8c423f5624", "7:db1394c05268", "6:e386b51ddbcc",
         "5:8706402863c6", "4:e494d67af12f", "3:2058725c1470",
         "2:585a1b3f2efb", "1:f24a5fd7a85d", "0:816b6279ae9c"

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -279,8 +279,8 @@ public void populateDocument(Document doc, File file, String path,
             }                   
             fa.analyze(doc, StreamSource.fromFile(file), xrefOut);
             
-            String fileType = fa.getFileTypeName();
-            doc.add(new StringField(QueryBuilder.FILETYPE, fileType, Store.YES));
+            String type = fa.getFileTypeName();
+            doc.add(new StringField(QueryBuilder.TYPE, type, Store.YES));
         }
     }
 

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -43,7 +43,7 @@ final class Search {
             "\t -p Path\n" +
             "\t -h History\n" +
             "\t -f Full text\n" +
-            "\t -t File Type";
+            "\t -t Type";
 
     private SearchEngine engine;
     final List<Hit> results = new ArrayList<Hit>();
@@ -90,7 +90,7 @@ protected boolean parseCmdLine(String[] argv) {
                     engine.setFreetext(getopt.getOptarg());
                     break;
                 case 't':
-                    engine.setFileType(getopt.getOptarg());
+                    engine.setType(getopt.getOptarg());
                     break;
             }
         }

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -466,7 +466,7 @@ public QueryBuilder getQueryBuilder() {
                     .setRefs(req.getParameter("refs"))
                     .setPath(req.getParameter("path"))
                     .setHist(req.getParameter("hist"))
-                    .setFileType(req.getParameter("type"));
+                    .setType(req.getParameter("type"));
 
             // This is for backward compatibility with links created by OpenGrok
             // 0.8.x and earlier. We used to concatenate the entire query into a

File: test/org/opensolaris/opengrok/web/UtilTest.java
Patch:
@@ -179,6 +179,7 @@ public void formQuoteEscape() {
         assertEquals("", Util.formQuoteEscape(null));
         assertEquals("abc", Util.formQuoteEscape("abc"));
         assertEquals("&quot;abc&quot;", Util.formQuoteEscape("\"abc\""));
+        assertEquals("&amp;aring;", Util.formQuoteEscape("&aring;"));
     }
 
     @Test

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -278,6 +278,9 @@ public void populateDocument(Document doc, File file, String path,
                     ));
             }                   
             fa.analyze(doc, StreamSource.fromFile(file), xrefOut);
+            
+            String fileType = fa.getFileTypeName();
+            doc.add(new StringField(QueryBuilder.FILETYPE, fileType, Store.YES));
         }
     }
 

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -182,10 +182,10 @@ public Configuration() {
         setQuickContextScan(true);
         setIgnoredNames(new IgnoredNames());
         setIncludedNames(new Filter());
-        setUserPage("http://www.opensolaris.org/viewProfile.jspa?username=");
-        setBugPage("http://bugs.opensolaris.org/bugdatabase/view_bug.do?bug_id=");
+        setUserPage("http://www.myserver.org/viewProfile.jspa?username=");
+        setBugPage("http://bugs.myserver.org/bugdatabase/view_bug.do?bug_id=");
         setBugPattern("\\b([12456789][0-9]{6})\\b");
-        setReviewPage("http://arc.opensolaris.org/caselog/PSARC/");
+        setReviewPage("http://arc.myserver.org/caselog/PSARC/");
         setReviewPattern("\\b(\\d{4}/\\d{3})\\b"); // in form e.g. PSARC 2008/305
         setWebappLAF("default");
         setRemoteScmSupported(false);

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -73,7 +73,7 @@ public CommandLineOptions() {
         options.add(new Option('?', null, "Help"));
         options.add(new Option('A', "ext:analyzer", "Files with the named extension should be analyzed with the specified class"));
         options.add(new Option('a', ON_OFF, "Allow or disallow leading wildcards in a search"));
-        options.add(new Option('B', "url", "Base URL of the user Information provider. Default: \"http://www.opensolaris.org/viewProfile.jspa?username=\""));
+        options.add(new Option('B', "url", "Base URL of the user Information provider. Default: \"http://www.myserver.org/viewProfile.jspa?username=\""));
         options.add(new Option('C', null, "Print per project percentage progress information(I/O extensive, since one read through dir structure is made before indexing, needs -v, otherwise it just goes to the log)"));
         options.add(new Option('c', "/path/to/ctags", "Path to Exuberant Ctags from http://ctags.sf.net by default takes the Exuberant Ctags in PATH."));
         options.add(new Option('D', null, "Store history cache in a database (needs the JDBC driver in the classpath, typically derbyclient.jar or derby.jar)"));

File: test/org/opensolaris/opengrok/analysis/CtagsTest.java
Patch:
@@ -134,7 +134,7 @@ public void bug19195() throws Exception {
         // Expected method names found in the file
         String[] names = {"foo", "bar", "_fce", "__fce"};
         // Expected line numbers for the methods
-        int[] lines = {28, 51, 71, 71};
+        int[] lines = {26, 49, 69, 69};
 
         /* Perform the actual test. */
         Definitions result = getDefs("bug19195/test.s");

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -143,6 +143,9 @@ public List<String> listTo(File dir, Writer out, String path, List<String> files
                     continue;
                 }
                 File child = new File(dir, file);
+                if (ignoredNames.ignore(child)) {
+                    continue;
+                }
                 if (file.startsWith("README") || file.endsWith("README")
                     || file.startsWith("readme"))
                 {

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -972,7 +972,8 @@ public String getResourcePath() {
     public boolean resourceNotAvailable() {
         getIgnoredNames();
         return getResourcePath().equals("/") || ignoredNames.ignore(getPath())
-                || ignoredNames.ignore(resourceFile.getParentFile().getName());
+                || ignoredNames.ignore(resourceFile.getParentFile().getName())
+                || ignoredNames.ignore(resourceFile);
     }
 
     /**

File: test/org/opensolaris/opengrok/web/UtilTest.java
Patch:
@@ -18,11 +18,12 @@
  */
 
 /*
- * Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.web;
 
 import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.StringWriter;
 import java.util.Locale;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -52,7 +53,7 @@ public static void tearDownClass() {
     }
 
     @Test
-    public void htmlize() {
+    public void htmlize() throws IOException {
         String[][] input_output = {
             {"This is a test", "This is a test" },
             {"Newline\nshould become <br/>",

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -54,7 +54,7 @@ public abstract class JFlexTokenizer extends Tokenizer {
 
     abstract public int yystate();
 
-    public JFlexTokenizer(java.io.Reader input) {
+    public JFlexTokenizer(Reader input) {
         super(input);
     }
 
@@ -82,10 +82,10 @@ public final void close() throws IOException {
      * end of input Reader ...
      *
      * @return false if no more tokens, otherwise true
-     * @throws java.io.IOException
+     * @throws IOException
      */
     @Override
-    public final boolean incrementToken() throws java.io.IOException {
+    public final boolean incrementToken() throws IOException {
         return this.yylex();
     }
 

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzer.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.tools.tar.TarInputStream;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
-import org.opensolaris.opengrok.analysis.plain.PlainFullTokenizer;
 import org.opensolaris.opengrok.web.Util;
 
 /**
@@ -43,8 +42,6 @@
 public class TarAnalyzer extends FileAnalyzer {
 
     private final StringBuilder content;
-    private PlainFullTokenizer plainfull;
-    TokenStreamComponents tsc_pf;
 
     protected TarAnalyzer(FileAnalyzerFactory factory) {
         super(factory);

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzer.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.lucene.document.TextField;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
-import org.opensolaris.opengrok.analysis.plain.PlainFullTokenizer;
 import org.opensolaris.opengrok.web.Util;
 
 /**
@@ -43,8 +42,6 @@
 public class ZipAnalyzer extends FileAnalyzer {
 
     private final StringBuilder content;
-    private PlainFullTokenizer plainfull;
-    TokenStreamComponents tc;
 
     protected ZipAnalyzer(FileAnalyzerFactory factory) {
         super(factory);

File: src/org/opensolaris/opengrok/history/History.java
Patch:
@@ -80,9 +80,9 @@ public boolean hasFileList() {
      *
      * @return {@code true} if at least one of the entries has a non-empty
      * tag list, {@code false} otherwise
-     * @todo Use a private variable instead of for loop?
      */
     public boolean hasTags() {
+        // TODO Use a private variable instead of for loop?
         for (HistoryEntry entry : entries) {
             if (entry.getTags() != null) {
                 return true;

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -40,7 +40,7 @@ public class ShAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {
         "SH",
         "KSH",
-        "KSHLIB",	// RFE #17849
+        "KSHLIB", // RFE #17849
         "CSH",
         "BASH",
         "RUBY",
@@ -52,7 +52,7 @@ public class ShAnalyzerFactory extends FileAnalyzerFactory {
         "COM",
         "SPEC",
         "FLG",
-        "XCL",		// message
+        "XCL", // message
     };
 
     private static final String[] MAGICS = {

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -18,9 +18,8 @@
  */
 
 /*
- * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedReader;
@@ -118,7 +117,6 @@ Executor getHistoryLogExecutor(final File file) throws IOException {
         ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
         cmd.add(this.cmd);
         cmd.add("log");
-        cmd.add("-N"); //don't display tags
 
         if (isBranch==null) {
             File tagFile = new File(getDirectoryName(), "CVS/Tag");

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -197,7 +197,7 @@ private boolean next() throws IOException {
 
         icomment = citer.next();
 
-        currentEntry = new HistoryEntry(null, idate, iauthor, icomment, true);
+        currentEntry = new HistoryEntry(null, idate, iauthor, null, icomment, true);
 
         return true;
     }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -80,6 +80,7 @@ public CommandLineOptions() {
         options.add(new Option('D', null, "Store history cache in a database (needs the JDBC driver in the classpath, typically derbyclient.jar or derby.jar)"));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
         options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow."));
+        options.add(new Option('G', null, "Assign commit tags to all entries in history for all repositories."));
         options.add(new Option('H', null, "Generate history cache for all repositories"));
         options.add(new Option('h', "/path/to/repository", "just generate history cache for the specified repos (absolute path from source root)"));
         options.add(new Option('I', "pattern", "Only files matching this pattern will be examined (supports wildcards, example: -I *.java -I *.c)"));

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -186,6 +186,9 @@ public static void main(String argv[]) {
                         case 'n':
                             runIndex = false;
                             break;
+                        case 'G':
+                            cfg.setTagsEnabled(true);
+                            break;
                         case 'H':
                             refreshHistory = true;
                             break;

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -222,7 +222,8 @@ public void testStoreAndGet() throws Exception {
         HistoryEntry newEntry = new HistoryEntry(
                 "3:78649c3ec6cb",
                 new Date(1245446973L / 60 * 60 * 1000), // whole minutes only
-                "xyz", "Return failure when executed with no arguments", true);
+                "xyz", null, "Return failure when executed with no arguments",
+                true);
         newEntry.addFile("/mercurial/main.c");
 
         LinkedList<HistoryEntry> updatedEntries = new LinkedList<HistoryEntry>(
@@ -424,7 +425,7 @@ public void testNullAuthor() throws Exception {
         Repository r = RepositoryFactory.getRepository(reposRoot);
         // Create an entry where author is null
         HistoryEntry e = new HistoryEntry(
-                "1", new Date(), null, "Initial revision", true);
+                "1", new Date(), null, null, "Initial revision", true);
         e.addFile("/svn/file.txt");
         List<HistoryEntry> entries = Collections.singletonList(e);
         cache.store(new History(entries), r);

File: test/org/opensolaris/opengrok/util/TestRepository.java
Patch:
@@ -27,8 +27,8 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import static org.junit.Assert.*;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  * A source repository to be used during a test

File: src/org/opensolaris/opengrok/web/WebappListener.java
Patch:
@@ -37,6 +37,7 @@
 
 /**
  * Populate the Mercurial Repositories
+ *
  * @author Trond Norbye
  */
 public final class WebappListener implements ServletContextListener {

File: test/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizerTest.java
Patch:
@@ -16,6 +16,7 @@
 
 /**
  * Tests the {@link PhpSymbolTokenizer} class.
+ *
  * @author Gustavo Lopes
  */
 public class PhpSymbolTokenizerTest {
@@ -33,8 +34,7 @@ private String[] getTermsFor(String s) {
 
     private String[] getTermsFor(Reader r) {
         List<String> l = new LinkedList<String>();
-        JFlexTokenizer ts = (JFlexTokenizer)
-                this.analyzer.overridableTokenStream("refs", null);
+        JFlexTokenizer ts = (JFlexTokenizer) this.analyzer.createComponents("refs", r).getTokenStream();
         ts.yyreset(r);
         CharTermAttribute term = ts.addAttribute(CharTermAttribute.class);
         try {

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -32,12 +32,12 @@
 import java.util.List;
 import org.junit.After;
 import org.junit.AfterClass;
+import static org.junit.Assert.*;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.opensolaris.opengrok.analysis.plain.PlainXref;
 import org.opensolaris.opengrok.history.RepositoryInfo;
-import static org.junit.Assert.*;
 
 /**
  * Test the RuntimeEnvironment class

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -20,23 +20,23 @@
 /*
  * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
  */
-
 package org.opensolaris.opengrok.index;
 
 import java.io.File;
 import java.util.ArrayList;
 import org.junit.AfterClass;
+import static org.junit.Assert.*;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.util.TestRepository;
-import static org.junit.Assert.*;
 
 /**
  * Unit tests for the {@code IndexDatabase} class.
  */
 public class IndexDatabaseTest {
+
     private static TestRepository repository;
 
     public IndexDatabaseTest() {
@@ -84,5 +84,4 @@ public void testGetDefinitions() throws Exception {
         Definitions defs2 = IndexDatabase.getDefinitions(f2);
         assertNull(defs2);
     }
-
 }

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -18,8 +18,9 @@
  */
 
 /*
- * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
  */
+
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedInputStream;
@@ -323,7 +324,7 @@ public boolean fileHasHistory(File file) {
     public boolean isWorking() {
         if (working == null) {
             ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
-            working = checkCmd(cmd, "–version");
+            working = checkCmd(cmd, "-version");
         }
         return working.booleanValue();
     }

File: test/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizerTest.java
Patch:
@@ -7,7 +7,6 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.StringReader;
-import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
@@ -64,7 +63,6 @@ public void sampleTest() throws UnsupportedEncodingException {
                 "org/opensolaris/opengrok/analysis/php/sample.php");
         InputStreamReader r = new InputStreamReader(res, "UTF-8");
         String[] termsFor = getTermsFor(r);
-        System.out.println(Arrays.toString(termsFor));
         assertArrayEquals(
                 new String[]{
                     "a", //line 3

File: test/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizerTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.StringReader;
+import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
@@ -63,10 +64,11 @@ public void sampleTest() throws UnsupportedEncodingException {
                 "org/opensolaris/opengrok/analysis/php/sample.php");
         InputStreamReader r = new InputStreamReader(res, "UTF-8");
         String[] termsFor = getTermsFor(r);
+        System.out.println(Arrays.toString(termsFor));
         assertArrayEquals(
                 new String[]{
                     "a", //line 3
-                    "bar", //line 5
+                    "foo", "bar", //line 5
                     "g", "a", "c", //line 6
                     "b", "c", "a", "a", //line 7
                     "doo", //line 9

File: test/org/opensolaris/opengrok/analysis/php/PhpXrefTest.java
Patch:
@@ -12,11 +12,11 @@ public class PhpXrefTest {
 
     @Test
     public void basicTest() throws IOException {
-        String s = "foo bar";
+        String s = "<?php foo bar";
         Writer w = new StringWriter();
         PhpAnalyzer.writeXref(new StringReader(s), w, null, null, null);
         assertEquals(
-                "<a class=\"l\" name=\"1\" href=\"#1\">1</a><a href=\"/"
+                "<a class=\"l\" name=\"1\" href=\"#1\">1</a>&lt;?php <a href=\"/"
                 + "source/s?defs=foo\">foo</a> <a href=\"/source/s?defs=bar\">bar</a>",
                 w.toString());
     }

File: src/org/opensolaris/opengrok/history/MonotoneHistoryParser.java
Patch:
@@ -101,7 +101,9 @@ public void processStream(InputStream input) throws IOException {
         int state = 0;
         while ((s = in.readLine()) != null) {
             s = s.trim();
-            if ("-----------------------------------------------------------------".equals(s)) {
+            // Later versions of monotone (such as 1.0) output even more dashes so lets require
+            // the minimum amount for maximum compatibility between monotone versions.
+            if (s.startsWith("-----------------------------------------------------------------")) {
                 if (entry != null && state > 2) {
                     entries.add(entry);
                 }

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -46,6 +46,7 @@
 import org.opensolaris.opengrok.analysis.archive.ZipAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.c.CAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.c.CxxAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.csharp.CSharpAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.data.IgnorantAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.data.ImageAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.document.TroffAnalyzerFactory;
@@ -62,10 +63,9 @@
 import org.opensolaris.opengrok.analysis.plain.XMLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.python.PythonAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sh.ShAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.sql.PLSQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sql.SQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.tcl.TclAnalyzerFactory;
-import org.opensolaris.opengrok.analysis.csharp.CSharpAnalyzerFactory;
-import org.opensolaris.opengrok.analysis.sql.PLSQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.vb.VBAnalyzerFactory;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -53,7 +53,6 @@
 import org.apache.lucene.store.LockFactory;
 import org.apache.lucene.store.NoLockFactory;
 import org.apache.lucene.store.SimpleFSLockFactory;
-import org.apache.lucene.util.Version;
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
 import org.opensolaris.opengrok.analysis.Ctags;
 import org.opensolaris.opengrok.analysis.Definitions;
@@ -65,7 +64,6 @@
 import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.search.QueryBuilder;
 import org.opensolaris.opengrok.search.SearchEngine;
-import org.opensolaris.opengrok.util.Executor;
 import org.opensolaris.opengrok.web.Util;
 
 /**

File: src/org/opensolaris/opengrok/search/QueryBuilder.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright 2010 Sun Micosystems.  All rights reserved.
  * Use is subject to license terms.

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
  *
@@ -40,8 +41,8 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.ScoreDoc;
 import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: test/org/opensolaris/opengrok/web/EftarFileTest.java
Patch:
@@ -27,8 +27,6 @@
 import java.io.FileWriter;
 import java.io.PrintWriter;
 
-import junit.framework.Assert;
-
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -65,6 +65,7 @@
 import org.opensolaris.opengrok.analysis.sql.SQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.tcl.TclAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.csharp.CSharpAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.sql.PLSQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.vb.VBAnalyzerFactory;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
@@ -142,6 +143,7 @@ public class AnalyzerGuru {
             new LispAnalyzerFactory(),
             new TclAnalyzerFactory(),
             new SQLAnalyzerFactory(),
+            new PLSQLAnalyzerFactory(),
             new FortranAnalyzerFactory()
         };
 

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -37,7 +37,8 @@ public final class Consts {
         HashSet<String> kwds = new HashSet<String>();
         try {
             //populateKeywordSet(kwds, "sql2003reserved.dat");
-            populateKeywordSet(kwds, "sql2008reserved.dat");
+            //populateKeywordSet(kwds, "sql2008reserved.dat");
+            populateKeywordSet(kwds, "sql2011reserved.dat");
         } catch (IOException ioe) {
             throw new RuntimeException(ioe);
         }

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -35,7 +35,7 @@
 
 public class SQLAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {
-        "SQL"
+        "SQL"        
     };
 
     public SQLAnalyzerFactory() {

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -600,12 +600,12 @@ public String getCrossFilename() {
     public String[] getSearchOnlyIn() {
         if (isDir()) {
             return path.length() == 0
-                    ? new String[]{"/", "/", "disabled=\"\""}
-                    : new String[]{path, path, ""};
+                    ? new String[]{"/", "this directory", "disabled=\"\""}
+                    : new String[]{path, "this directory", ""};
         }
         String[] res = new String[3];
         res[0] = path.substring(0, path.lastIndexOf('/') + 1);
-        res[1] = path.substring(res[0].length());
+        res[1] = res[0];
         res[2] = "";
         return res;
     }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
  *
  * Portions Copyright 2011 Jens Elkner.
  */
@@ -93,6 +93,7 @@ public CommandLineOptions() {
         options.add(new Option('N', "/path/to/symlink", "Allow this symlink to be followed. Option may be repeated."));
         options.add(new Option('n', null, "Do not generate indexes, but process all other command line options"));
         options.add(new Option('O', ON_OFF, "Turn on/off the optimization of the index database as part of the indexing step"));
+        options.add(new Option('o', "path", "File with extra command line options for ctags"));
         options.add(new Option('P', null, "Generate a project for each of the top-level directories in source root"));
         options.add(new Option('p', "/path/to/default/project", "This is the path to the project that should be selected by default in the web application(when no other project set either in cookie or in parameter). You should strip off the source root."));
         options.add(new Option('Q', ON_OFF, "Turn on/off quick context scan. By default only the first 32k of a file is scanned, and a '[..all..]' link is inserted if the file is bigger. Activating this may slow the server down (Note: this is setting only affects the web application)"));

File: src/org/opensolaris/opengrok/analysis/Hash2TokenStream.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis;
 
@@ -39,7 +39,7 @@ public Hash2TokenStream(Set<String> symbols){
     }
 
     @Override
-    public boolean incrementToken() throws java.io.IOException {
+    public final boolean incrementToken() throws java.io.IOException {
         while (i <= 0) {
             if (keys.hasNext()) {
                 term = keys.next();

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -75,7 +75,7 @@ public final void close() throws IOException {
      * @throws java.io.IOException
      */
     @Override
-    public boolean incrementToken() throws java.io.IOException {
+    public final boolean incrementToken() throws java.io.IOException {
         return this.yylex();
     }
 

File: src/org/opensolaris/opengrok/analysis/List2TokenStream.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis;
 
@@ -39,7 +39,7 @@ public List2TokenStream(List<String> l) {
     }
 
     @Override
-    public boolean incrementToken() {
+    public final boolean incrementToken() {
         if (!it.hasNext()) {
             // reached end of stream
             return false;

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.document;
 
@@ -81,12 +81,12 @@ public void analyze(Document doc, InputStream in) throws IOException {
     }
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if ("full".equals(fieldName)) {
             troffull.reInit(content, len);
             return troffull;
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.executables;
 
@@ -181,14 +181,14 @@ private String getName(int tab, int stroff, MappedByteBuffer fmap) {
     }
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if ("full".equals(fieldName)) {
             char[] cs = new char[content.length()];
             content.getChars(0, cs.length, cs, 0);
             plainfull.reInit(cs, cs.length);
             return plainfull;
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.executables;
 
@@ -117,11 +117,11 @@ public String getXref() {
     private ConstantPool cp;
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if ("full".equals(fieldName)) {
             return new PlainFullTokenizer(new TagFilter(reader));
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     protected String linkPath(String path) {

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.perl;
 
@@ -61,12 +61,12 @@ public void analyze(Document doc, Reader in) throws IOException {
     }
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
             cref.reInit(super.content, super.len);
             return cref;
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.plain;
 
@@ -96,7 +96,7 @@ public void analyze(Document doc, Reader in) throws IOException {
     }
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if ("full".equals(fieldName)) {
             plainfull.reInit(content, len);
             return plainfull;
@@ -106,7 +106,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
         } else if ("defs".equals(fieldName)) {
             return new Hash2TokenStream(defs.getSymbols());
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/python/PythonAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.python;
 
@@ -61,12 +61,12 @@ public void analyze(Document doc, Reader in) throws IOException {
     }
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
             cref.reInit(super.content, super.len);
             return cref;
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2012, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.vb;
 
@@ -60,12 +60,12 @@ public void analyze(Document doc, Reader in) throws IOException {
     }
 
     @Override
-    public TokenStream tokenStream(String fieldName, Reader reader) {
+    public TokenStream overridableTokenStream(String fieldName, Reader reader) {
         if ("refs".equals(fieldName)) {
             cref.reInit(super.content, super.len);
             return cref;
         }
-        return super.tokenStream(fieldName, reader);
+        return super.overridableTokenStream(fieldName, reader);
     }
 
     /**

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
  *
  * Portions Copyright 2011 Jens Elkner.
  */
@@ -135,7 +135,8 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
         }
         boolean anything = false;
         TreeMap<Integer, String[]> matchingTags = null;
-        String urlPrefixE = Util.URIEncodePath(urlPrefix);
+        String urlPrefixE =
+                (urlPrefix == null) ? "" : Util.URIEncodePath(urlPrefix);
         String pathE = Util.URIEncodePath(path);
         if (tags != null) {
             matchingTags = new TreeMap<Integer, String[]>();

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -174,7 +174,7 @@ public Configuration() {
         setCachePages(5);
         setScanningDepth(3); // default depth of scanning for repositories
         setAllowedSymlinks(new HashSet<String>());
-        setTabSize(4);
+        //setTabSize(4);
         cmds = new HashMap<String, String>();
     }
 

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -206,7 +206,7 @@ public Annotation annotate(File file, String revision) throws IOException {
 
         // Construct hash map for history entries from history cache. This is
         // needed later to get user string for particular revision.
-	try {
+        try {
             History hist = HistoryGuru.getInstance().getHistory(file, false);
             for (HistoryEntry e : hist.getHistoryEntries()) {
 	        // Chop out the colon and all hexadecimal what follows.

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -119,11 +119,10 @@ public List<String> listTo(File dir, Writer out, String path, List<String> files
 
         // print the '..' entry even for empty directories
         if (!dotdot && path.length() != 0) {
-            File parentDir = new File(dir, "..");
             out.write("<tr><td><p class=\"'r'\"/></td><td>");
             dotdot = true;
             out.write("<b><a href=\"..\">..</a></b></td>");
-            PrintDateSize(out, parentDir);
+            PrintDateSize(out, dir.getParentFile());
             out.write("</tr>\n");
         }
 

File: src/org/opensolaris/opengrok/web/SearchHelper.java
Patch:
@@ -208,7 +208,7 @@ public SearchHelper prepareExec(SortedSet<String> projects) {
                     break;
             }
         } catch (ParseException e) {
-            errorMsg = "Unable to parse your query: " + e.getMessage();
+            errorMsg = PARSE_ERROR_MSG + e.getMessage();
         } catch (FileNotFoundException e) {
 //          errorMsg = "Index database(s) not found: " + e.getMessage();
             errorMsg = "Index database(s) not found.";

File: src/org/opensolaris/opengrok/analysis/csharp/CSharpAnalyzer.java
Patch:
@@ -81,7 +81,7 @@ public void writeXref(Writer out) throws IOException {
      * @param annotation annotation for the file (could be null)
      */
     static void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project) throws IOException {
-    	CSharpXref xref = new CSharpXref(in);
+        CSharpXref xref = new CSharpXref(in);
         xref.annotation = annotation;
         xref.project = project;
         //xref.setDefs(defs);

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -46,7 +46,6 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
         "S",
         "XS",                   // Mainly found in perl directories
         "X",                    // rpcgen input files
-        "CS",                   // C#
     };
 
     public CAnalyzerFactory() {

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -35,7 +35,7 @@
 
 public class XMLAnalyzerFactory extends FileAnalyzerFactory {
     private static final String[] SUFFIXES = {
-        "HTML", "HTM", "XML"
+        "HTML", "HTM", "XML", "ASPX", "ASCX", "ASAX", "MASTER", "XAML"
     };
 
     private static final String[] MAGICS = {

File: test/org/opensolaris/opengrok/web/PageConfigTest.java
Patch:
@@ -26,10 +26,11 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import static org.junit.Assert.*;
 import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.util.TestRepository;
 
+import static org.junit.Assert.*;
+
 /**
  * Unit tests for the {@code PageConfig} class.
  */

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -1036,7 +1036,7 @@ public String getDirectoryRedirect() {
                 return null;
             }
             getPrefix();
-            if (prefix != Prefix.XREF_P && prefix != Prefix.HIST_P) {
+            if (prefix != Prefix.XREF_P && prefix != Prefix.HIST_L) {
                 //if it is an existing dir perhaps people wanted dir xref
                 return req.getContextPath() + Prefix.XREF_P
                         + getUriEncodedPath() + trailingSlash(path);

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -693,6 +693,7 @@ public static void dumpConfiguration(Appendable out) throws IOException,
         printTableRow(out, "Bug page", env.getBugPage());
         printTableRow(out, "Bug pattern", env.getBugPattern());
         printTableRow(out, "User page", env.getUserPage());
+        printTableRow(out, "User page suffix", env.getUserPageSuffix());
         printTableRow(out, "Review page", env.getReviewPage());
         printTableRow(out, "Review pattern", env.getReviewPattern());
         printTableRow(out, "Using projects", env.hasProjects());

File: src/org/opensolaris/opengrok/SimpleConsoleFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok;
@@ -54,7 +54,7 @@ public String format(LogRecord record) {
       sb.append(": ");
       sb.append(formatMessage(record));
       Throwable thrown = record.getThrown();
-      if (null != thrown && record.getLevel().intValue() < Level.CONFIG.intValue()) {
+      if (null != thrown && record.getLevel().intValue() > Level.CONFIG.intValue()) {
          sb.append(lineSeparator);
          java.io.ByteArrayOutputStream ba=new java.io.ByteArrayOutputStream();
          thrown.printStackTrace(new java.io.PrintStream(ba, true));

File: src/org/opensolaris/opengrok/SimpleFileLogFormatter.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok;
@@ -69,7 +69,7 @@ public String format(LogRecord record) {
       sb.append(": ");
       sb.append(formatMessage(record));
       Throwable thrown = record.getThrown();
-      if (null != thrown && record.getLevel().intValue() < Level.CONFIG.intValue()) {
+      if (null != thrown && record.getLevel().intValue() > Level.CONFIG.intValue()) {
          sb.append(lineSeparator);
          java.io.ByteArrayOutputStream ba=new java.io.ByteArrayOutputStream();
          thrown.printStackTrace(new java.io.PrintStream(ba, true));

File: test/org/opensolaris/opengrok/web/DirectoryListingTest.java
Patch:
@@ -22,12 +22,12 @@
  */
 package org.opensolaris.opengrok.web;
 
-import java.util.Arrays;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
+import java.util.Arrays;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import org.junit.After;

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -245,7 +245,7 @@ boolean isRepositoryFor(File file) {
     public boolean isWorking() {
         if (working == null) {
             ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
-            working = checkCmd(new String[]{ cmd, "--help" });
+            working = checkCmd(cmd, "--help");
         }
         return working.booleanValue();
     }

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.history;
@@ -60,7 +60,7 @@ public CVSRepository() {
     public boolean isWorking() {
         if (working == null) {
             ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
-            working = checkCmd(new String[]{ cmd , "--version" });
+            working = checkCmd(cmd , "--version");
         }
         return working.booleanValue();
     }

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -264,7 +264,7 @@ boolean isRepositoryFor(File file) {
     public boolean isWorking() {
         if (working == null) {
             ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
-            working = checkCmd(new String[]{ cmd, "--help" });
+            working = checkCmd(cmd, "--help");
         }
         return working.booleanValue();
     }

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -263,7 +263,7 @@ public DateFormat getDateFormat() {
         return new SimpleDateFormat(datePattern, Locale.US);
     }
 
-    static Boolean checkCmd(final String[] args) {
+    static Boolean checkCmd(String... args) {
         Executor exec = new Executor(args);
         return Boolean.valueOf(exec.exec(false) == 0);
     }

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok.history;
@@ -366,7 +366,7 @@ boolean isRepositoryFor(File file) {
     public boolean isWorking() {
         if (working == null) {
             ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
-            working = checkCmd(new String[]{ cmd, "--help" });
+            working = checkCmd(cmd, "--help");
         }
         return working.booleanValue();
     }

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -628,7 +628,7 @@ public static String[] diffline(StringBuilder line1, StringBuilder line2) {
         int m = line1.length();
         int n = line2.length();
         if (n == 0 || m == 0) {
-            return new String[] { line1.toString(), line2.toString() };
+            return new String[] {line1.toString(), line2.toString()};
         }
 
         int s = 0;

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -732,7 +732,7 @@ private List<String> getParamVals(String paramName) {
      *  lists used as fallback
      * @return a possible empty set but never {@code null}.
      */
-    protected TreeSet<String> getRequestedProjects(String paramName,
+    protected SortedSet<String> getRequestedProjects(String paramName,
             String cookieName) {
         TreeSet<String> set = new TreeSet<String>();
         List<Project> projects = getEnv().getProjects();

File: src/org/opensolaris/opengrok/util/Executor.java
Patch:
@@ -177,10 +177,10 @@ public void run() {
                     .append(processBuilder.command().toString())
                     .append(" in directory ");
             File cwd = processBuilder.directory();
-            if (cwd != null) {
-                    msg.append(cwd.toString());
+            if (cwd == null) {
+                msg.append(System.getProperty("user.dir"));
             } else {
-                    msg.append(System.getProperty("user.dir"));
+                msg.append(cwd.toString());
             }
             if (stderr != null && stderr.length > 0) {
                     msg.append(": ");

File: src/org/opensolaris/opengrok/util/IOUtils.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2011 Trond Norbye
  */

File: src/org/opensolaris/opengrok/web/DiffData.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright 2009 - 2011 Jens Elkner.
  */

File: src/org/opensolaris/opengrok/web/DiffType.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright 2009 - 2011 Jens Elkner.
  */

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2011 Jens Elkner.
  */

File: src/org/opensolaris/opengrok/web/SortOrder.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2011 Jens Elkner.
  */

File: src/org/opensolaris/opengrok/web/Suggestion.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2011 Jens Elkner.
  */

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
  * Portions Copyright 2011 Jens Elkner.

File: test/org/opensolaris/opengrok/analysis/document/TroffAnalyzerTest.java
Patch:
@@ -16,12 +16,12 @@
  *
  * CDDL HEADER END
  */
+
 /*
  * Copyright 2009 - 2011 Jens Elkner.
  */
 package org.opensolaris.opengrok.analysis.document;
 
-import static org.junit.Assert.*;
 
 import java.io.ByteArrayInputStream;
 import java.io.CharArrayWriter;
@@ -37,6 +37,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.opensolaris.opengrok.web.Util;
+import static org.junit.Assert.*;
 
 /**
  * @author  Jens Elkner

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -23,8 +23,8 @@
 
 package org.opensolaris.opengrok.index;
 
-import java.util.ArrayList;
 import java.io.File;
+import java.util.ArrayList;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -23,10 +23,10 @@
 
 package org.opensolaris.opengrok.search;
 
-import java.util.ArrayList;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.PrintStream;
+import java.util.ArrayList;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/org/opensolaris/opengrok/web/PageConfig.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
+import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -96,7 +97,7 @@ public final class PageConfig {
     private Boolean hasHistory;
     private static final EnumSet<Genre> txtGenres =
             EnumSet.of(Genre.DATA, Genre.PLAIN, Genre.HTML);
-    private Set<String> requestedProjects;
+    private SortedSet<String> requestedProjects;
     private String requestedProjectsString;
     private String[] dirFileList;
     private QueryBuilder queryBuilder;
@@ -664,7 +665,7 @@ public String getDocumentHash() {
      *  <li>an empty set</li>
      * </ol>
      */
-    public Set<String> getRequestedProjects() {
+    public SortedSet<String> getRequestedProjects() {
         if (requestedProjects == null) {
             requestedProjects =
                     getRequestedProjects("project", "OpenGrokProject");

File: src/org/opensolaris/opengrok/web/SearchHelper.java
Patch:
@@ -151,7 +151,7 @@ public class SearchHelper {
      *  multiple DATA_ROOT/$project/index).
      * @return this instance
      */
-    public SearchHelper prepareExec(TreeSet<String> projects) {
+    public SearchHelper prepareExec(SortedSet<String> projects) {
         if (redirect != null || errorMsg != null) {
             return this;
         }

File: test/org/opensolaris/opengrok/history/HistoryGuruTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import org.junit.After;
 import org.junit.AfterClass;
@@ -86,7 +87,7 @@ public void testAddRepositories() throws IOException {
     public void testCreateCache() {
         HistoryGuru instance = HistoryGuru.getInstance();
         instance.createCache();
-        List<String> repos = new ArrayList<String>();
+        Collection<String> repos = new ArrayList<String>();
         repos.add("git");
         repos.add("bazaar");
         repos.add("mercurial");

File: src/org/opensolaris/opengrok/ConsoleFormatter.java
Patch:
@@ -35,12 +35,12 @@
  * @author Jan S Berg
  */
 final public class ConsoleFormatter extends Formatter {
-   
+
    private final java.text.SimpleDateFormat formatter =
       new java.text.SimpleDateFormat("HH:mm:ss.SSS");
    private final static String lineSeparator = System.
       getProperty("line.separator");
-   
+
    private String ts(Date date) {
       return formatter.format(date);
    }

File: src/org/opensolaris/opengrok/SimpleConsoleFormatter.java
Patch:
@@ -35,19 +35,19 @@
  * @author Lubos Kosco
  */
 final public class SimpleConsoleFormatter extends Formatter {
-   
+
    private final java.text.SimpleDateFormat formatter =
       new java.text.SimpleDateFormat("HH:mm:ss");
    private final static String lineSeparator = System.
       getProperty("line.separator");
-   
+
    private String ts(Date date) {
       return formatter.format(date);
    }
 
     @Override
    public String format(LogRecord record) {
-      StringBuilder sb = new StringBuilder();      
+      StringBuilder sb = new StringBuilder();
       sb.append(ts(new Date(record.getMillis())));
       sb.append(" ");
       sb.append(record.getLevel().getName());

File: src/org/opensolaris/opengrok/analysis/CompatibleAnalyser.java
Patch:
@@ -32,12 +32,12 @@
 public class CompatibleAnalyser extends Analyzer {
     PathAnalyzer pather;
     HistoryAnalyzer historer;
-    
+
     public CompatibleAnalyser() {
         historer = new HistoryAnalyzer();
         pather  = new PathAnalyzer();
     }
-    
+
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if ("full".equals(fieldName)) {
             return new PlainFullTokenizer(reader);
@@ -49,7 +49,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
             return pather.tokenStream(fieldName, reader);
         } else if ("hist".equals(fieldName)) {
             return historer.tokenStream(fieldName, reader);
-        } 
+        }
         return new PlainFullTokenizer(reader);
     }
 }

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -101,7 +101,7 @@ public void run() {
                         sb.append('\n');
                     }
                 } catch (IOException exp) {
-                     log.log(Level.WARNING, "Got an exception reading ctags error stream: ", exp);                
+                     log.log(Level.WARNING, "Got an exception reading ctags error stream: ", exp);
                 } finally {
                     try {
                         error.close();
@@ -217,7 +217,7 @@ private void readTags(Definitions defs) {
                 final String type =
                         inher == null ? kind : kind + " in " + inher;
                 defs.addTag(Integer.parseInt(lnum), def.trim(), type.trim(), match.trim());
-                if (signature != null) {                  
+                if (signature != null) {
                     //TODO if some languages use different character for separating arguments, below needs to be adjusted
                     String[] args = signature.split(",");
                     for (String arg : args) {

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -81,15 +81,15 @@ public static enum Genre {
         private Genre(String typename) {
             this.typeName = typename;
         }
-        
+
         /**
          * Get the type name value used to tag lucence documents.
          * @return a none-null string.
          */
         public String typeName() {
             return typeName;
         }
-        
+
         /**
          * Get the Genre for the given type name.
          * @param typeName name to check
@@ -148,7 +148,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
         } else if ("hist".equals(fieldName)) {
             return hista.tokenStream(fieldName, reader);
         }
-        OpenGrokLogger.getLogger().log(Level.WARNING, "Have no analyzer for: {0}", fieldName);        
+        OpenGrokLogger.getLogger().log(Level.WARNING, "Have no analyzer for: {0}", fieldName);
         return null;
     }
 

File: src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java
Patch:
@@ -217,7 +217,7 @@ FileAnalyzerFactory isMagic(byte[] contents, InputStream in)
      * @param defs definitions for the file (could be {@code null})
      * @param annotation annotation for the file (could be {@code null})
      * @param project project the file belongs to (could be {@code null})
-     * @throws java.io.IOException if an error occurs 
+     * @throws java.io.IOException if an error occurs
      */
     public void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project)
             throws IOException {

File: src/org/opensolaris/opengrok/analysis/Hash2TokenStream.java
Patch:
@@ -38,7 +38,7 @@ public final class Hash2TokenStream extends TokenStream {
     public Hash2TokenStream(Set<String> symbols){
         keys = symbols.iterator();
     }
-    
+
     @Override
     public boolean incrementToken() throws java.io.IOException {
         while (true) {
@@ -65,5 +65,5 @@ public boolean incrementToken() throws java.io.IOException {
     @Override
     public void close() {
         // Nothing to close
-    }    
+    }
 }

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -65,17 +65,17 @@ public final void close() throws IOException {
     }
 
     protected TermAttribute termAtt= addAttribute(TermAttribute.class);
-    protected OffsetAttribute offsetAtt= addAttribute(OffsetAttribute.class);    
+    protected OffsetAttribute offsetAtt= addAttribute(OffsetAttribute.class);
     protected PositionIncrementAttribute posIncrAtt= addAttribute(PositionIncrementAttribute.class);
 
     /**
      * This will reinitalize internal AttributeImpls, or it returns false if end of input Reader ...
      * @return false if no more tokens, otherwise true
      * @throws java.io.IOException
-     */    
+     */
     @Override
     public boolean incrementToken() throws java.io.IOException {
-        return this.yylex();        
+        return this.yylex();
     }
 
     protected void setAttribs(String str, int start, int end) {

File: src/org/opensolaris/opengrok/analysis/List2TokenStream.java
Patch:
@@ -58,13 +58,13 @@ public boolean incrementToken() {
                 subTokens = tok.split("[^a-z0-9A-Z_]+");
             } else {
                 subTokens = null;
-                termAtt.setTermBuffer(tok);                    
+                termAtt.setTermBuffer(tok);
                 return true;
             }
             si = 0;
         }
         if (si < subTokens.length) {
-            termAtt.setTermBuffer(subTokens[si++]);            
+            termAtt.setTermBuffer(subTokens[si++]);
             return true;
         }
         return false;

File: src/org/opensolaris/opengrok/analysis/PathTokenizer.java
Patch:
@@ -33,7 +33,7 @@ public class PathTokenizer extends Tokenizer {
     private static final char dirSep = '/';
     private boolean dot = false;
     private final static char ADOT[]={'.'};
-    private final TermAttribute termAtt = addAttribute(TermAttribute.class);    
+    private final TermAttribute termAtt = addAttribute(TermAttribute.class);
 
     public PathTokenizer(Reader input) {
         super(input);
@@ -69,7 +69,7 @@ public final boolean incrementToken() throws java.io.IOException {
         if (c == '.') {
             dot = true;
         }
-        termAtt.setTermBuffer(buf, 0, i);       
+        termAtt.setTermBuffer(buf, 0, i);
         return true;
     }
 }

File: src/org/opensolaris/opengrok/analysis/TagFilter.java
Patch:
@@ -51,7 +51,7 @@ public TagFilter(Reader in) {
         escs.put("&lt",  Character.valueOf('<'));
         escs.put("&amp",  Character.valueOf('&'));
     }
-    
+
     public final int read(char[] buf, int start, int len) throws java.io.IOException {
         int n=0;
         int pos = start;
@@ -65,7 +65,7 @@ public final int read(char[] buf, int start, int len) throws java.io.IOException
         }
         return n;
     }
-    
+
     @Override
     public final int read() throws java.io.IOException {
         int c;
@@ -105,7 +105,7 @@ public final int read() throws java.io.IOException {
         }
         return -1;
     }
-    
+
     public static boolean isSpace(int ch) {
         return (ch <= 0x0020) &&
                 (((((1L << 0x0009) |

File: src/org/opensolaris/opengrok/analysis/TextAnalyzer.java
Patch:
@@ -59,6 +59,6 @@ public final void analyze(Document doc, InputStream in) throws IOException {
 
         analyze(doc, new InputStreamReader(in, charset));
     }
-    
+
     protected abstract void analyze(Document doc, Reader reader) throws IOException;
 }

File: src/org/opensolaris/opengrok/analysis/archive/BZip2Analyzer.java
Patch:
@@ -86,7 +86,7 @@ public void analyze(Document doc, InputStream in) throws IOException {
                 if(doc.get("t") != null) {
                     doc.removeField("t");
                     if (g == Genre.XREFABLE) {
-                        doc.add(new Field("t", g.typeName(), Field.Store.YES, 
+                        doc.add(new Field("t", g.typeName(), Field.Store.YES,
                             Field.Index.NOT_ANALYZED));
                     }
                 }
@@ -96,7 +96,7 @@ public void analyze(Document doc, InputStream in) throws IOException {
             }
         }
     }
-    
+
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if (fa != null) {

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzer.java
Patch:
@@ -48,7 +48,7 @@ public class ZipAnalyzer extends FileAnalyzer {
     private StringBuilder content;
 
     private static final Reader dummy = new StringReader("");
-    
+
     private final PlainFullTokenizer plainfull;
 
     protected ZipAnalyzer(FileAnalyzerFactory factory) {
@@ -68,7 +68,7 @@ public void analyze(Document doc, InputStream in) throws IOException {
         content.trimToSize();
         doc.add(new Field("full",dummy));
     }
-    
+
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("full".equals(fieldName)) {
@@ -79,7 +79,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
         }
         return super.tokenStream(fieldName, reader);
     }
-    
+
     /**
      * Write a cross referenced HTML file.
      * @param out Writer to store HTML cross-reference

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -58,8 +58,8 @@ protected CAnalyzer(FileAnalyzerFactory factory) {
     public void analyze(Document doc, Reader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
-    }    
-    
+    }
+
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
             cref.reInit(super.content, super.len);
@@ -78,7 +78,7 @@ public void writeXref(Writer out) throws IOException {
         xref.setDefs(defs);
         xref.write(out);
     }
-    
+
     /**
      * Write a cross referenced HTML file reads the source from in
      * @param in Input source

File: src/org/opensolaris/opengrok/analysis/c/CxxAnalyzer.java
Patch:
@@ -55,8 +55,8 @@ protected CxxAnalyzer(FileAnalyzerFactory factory) {
     public void analyze(Document doc, Reader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
-    }    
-    
+    }
+
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
             cref.reInit(super.content, super.len);
@@ -75,7 +75,7 @@ public void writeXref(Writer out) throws IOException {
         xref.setDefs(defs);
         xref.write(out);
     }
-    
+
     /**
      * Write a cross referenced HTML file reads the source from in
      * @param in Input source

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -149,7 +149,7 @@ public void parseELF(FileInputStream f) throws IOException {
         sb.trimToSize();
         content = sb;
     }
-    
+
     private boolean isReadable(int c) {
         if (c > ' ' && c <= 127) {
             return true;

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -64,7 +64,7 @@ protected JarAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
         content = new byte[16 * 1024];
     }
-    
+
     public void analyze(Document doc, InputStream in) throws IOException {
         defs = new LinkedList<String>();
         refs = new LinkedList<String>();
@@ -115,7 +115,7 @@ public void analyze(Document doc, InputStream in) throws IOException {
             doc.add(new Field("refs",dummy));
         }
     }
-    
+
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if ("defs".equals(fieldName)) {
             return new List2TokenStream(defs);
@@ -126,7 +126,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
         }
         return super.tokenStream(fieldName, reader);
     }
-    
+
     /**
      * Write a cross referenced HTML file.
      * @param out Writer to write HTML cross-reference

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -150,7 +150,7 @@ protected String linkDef(String def) {
     protected String tagDef(String def) {
         return "<a class=\"d\" name=\"" + def + "\" href=\"" + urlPrefix + "defs=" + def + "\">" + def + "</a>";
     }
-    
+
 //TODO this class needs to be thread safe to avoid bug 13364, which was fixed by just updating bcel to 5.2
     private void getContent(Writer out) throws IOException {
         String t;
@@ -295,7 +295,7 @@ private void getContent(Writer out) throws IOException {
                 }
             }
         }
-    }    
+    }
 
     /**
      * Write a cross referenced HTML file.

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzer.java
Patch:
@@ -57,8 +57,8 @@ protected JavaAnalyzer(FileAnalyzerFactory factory) {
     public void analyze(Document doc, Reader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
-    }    
-    
+    }
+
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
             cref.reInit(super.content, super.len);
@@ -77,7 +77,7 @@ public void writeXref(Writer out) throws IOException {
         xref.project = project;
         xref.write(out);
     }
-    
+
     /**
      * Write a cross referenced HTML file reads the source from in
      * @param in Input source

File: src/org/opensolaris/opengrok/analysis/perl/Consts.java
Patch:
@@ -295,5 +295,5 @@ public class Consts{
         kwd.add("given"); //Perl 5.10
         kwd.add("break");
     }
-    
+
 }

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzer.java
Patch:
@@ -58,8 +58,8 @@ protected PerlAnalyzer(FileAnalyzerFactory factory) {
     public void analyze(Document doc, Reader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
-    }    
-    
+    }
+
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
@@ -80,7 +80,7 @@ public void writeXref(Writer out) throws IOException {
         xref.project = project;
         xref.write(out);
     }
-    
+
     /**
      * Write a cross referenced HTML file reads the source from in
      * @param in Input source

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@
  */
 
 public class PerlAnalyzerFactory extends FileAnalyzerFactory {
-    
+
     private static final String[] SUFFIXES = {
         "PL",
         "PERL",

File: src/org/opensolaris/opengrok/analysis/python/Consts.java
Patch:
@@ -58,11 +58,11 @@ public class Consts{
         kwd.add( "pass" );
         kwd.add( "print" );
         kwd.add( "raise" );
-        kwd.add( "return" );        
-        kwd.add( "try" );        
+        kwd.add( "return" );
+        kwd.add( "try" );
         kwd.add( "while" );
         kwd.add( "with" ); //2.5 , 2.6
-        kwd.add( "yield" );        
+        kwd.add( "yield" );
         kwd.add( "None" );  //2.4
     }
 }

File: src/org/opensolaris/opengrok/analysis/python/PythonAnalyzer.java
Patch:
@@ -58,8 +58,8 @@ protected PythonAnalyzer(FileAnalyzerFactory factory) {
     public void analyze(Document doc, Reader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
-    }    
-    
+    }
+
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
@@ -80,7 +80,7 @@ public void writeXref(Writer out) throws IOException {
         xref.project = project;
         xref.write(out);
     }
-    
+
     /**
      * Write a cross referenced HTML file reads the source from in
      * @param in Input source

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzer.java
Patch:
@@ -58,7 +58,7 @@ protected ShAnalyzer(FileAnalyzerFactory factory) {
     public void analyze(Document doc, Reader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
-    }    
+    }
 
     public TokenStream tokenStream(String fieldName, Reader reader) {
         if("refs".equals(fieldName)) {
@@ -67,7 +67,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
         }
         return super.tokenStream(fieldName, reader);
     }
-    
+
     /**
      * Write a cross referenced HTML file.
      * @param out Writer to write HTML cross-reference
@@ -78,7 +78,7 @@ public void writeXref(Writer out) throws IOException {
         xref.setDefs(super.defs);
         xref.write(out);
     }
-    
+
     /**
      * Write a cross referenced HTML file reads the source from in
      * @param in Input source

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -42,9 +42,9 @@ public class ShAnalyzerFactory extends FileAnalyzerFactory {
         "KSH",
         "KSHLIB",   // RFE #17849
         "CSH",
-        "BASH",        
-        "RUBY",        
-        "RB",        
+        "BASH",
+        "RUBY",
+        "RB",
         "P5",
         "AWK",
         "GMK",

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -47,7 +47,7 @@ public final class Consts {
     private Consts() {
         // Util class, can not be constructed.
     }
-    
+
     private static void populateKeywordSet(Set<String> set, String file)
             throws IOException
     {

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -172,10 +172,10 @@ public void processStream(InputStream input) throws IOException {
             entries.add(entry);
         }
     }
-    
+
    /**
      * Parse the given string.
-     * 
+     *
      * @param buffer The string to be parsed
      * @return The parsed history
      * @throws IOException if we fail to parse the buffer

File: src/org/opensolaris/opengrok/history/ClearCaseHistoryParser.java
Patch:
@@ -51,7 +51,7 @@ History parse(File file, Repository repos) throws HistoryException {
                 throw new HistoryException("Failed to get history for: \"" +
                                            file.getAbsolutePath() + "\" Exit code: " + status);
             }
-            
+
             return history;
         } catch (IOException e) {
             throw new HistoryException("Failed to get history for: \"" +
@@ -122,7 +122,7 @@ public void processStream(InputStream input) throws IOException {
 
     /**
      * Parse the given string.
-     * 
+     *
      * @param buffer The string to be parsed
      * @return The parsed history
      * @throws IOException if we fail to parse the buffer

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -86,9 +86,9 @@ public DirectoryHistoryReader(String path) throws IOException {
             }
             searcher = new IndexSearcher(ireader);
             SortField sfield=new SortField("date",SortField.STRING, true);
-            Sort sort = new Sort(sfield);            
+            Sort sort = new Sort(sfield);
             QueryParser qparser = new QueryParser(SearchEngine.LUCENE_VERSION,"path", new CompatibleAnalyser());
-            Query query = null;            
+            Query query = null;
             ScoreDoc[] hits = null;
             try {
                 query = qparser.parse(path);

File: src/org/opensolaris/opengrok/history/History.java
Patch:
@@ -45,7 +45,7 @@ public History() {
     /**
      * Set the list of log entries for the file. The first entry is the most
      * recent one.
-     * 
+     *
      * @param entries The entries to add to the list
      */
     public void setHistoryEntries(List<HistoryEntry> entries) {
@@ -54,7 +54,7 @@ public void setHistoryEntries(List<HistoryEntry> entries) {
 
     /**
      * Get the list of log entries, most recent first.
-     * 
+     *
      * @return The list of entries in this history
      */
     public List<HistoryEntry> getHistoryEntries() {

File: src/org/opensolaris/opengrok/history/HistoryCache.java
Patch:
@@ -64,7 +64,7 @@ History get(File file, Repository repository, boolean withFiles)
 
     /**
      * Store the history for a repository.
-     * 
+     *
      * @param history The history to store
      * @param repository The repository whose history to store
      * @throws HistoryException if the history cannot be stored

File: src/org/opensolaris/opengrok/history/HistoryReader.java
Patch:
@@ -47,7 +47,7 @@ public int read(char[] cbuf, int off, int len) throws IOException {
         }
         return input.read(cbuf, off, len);
     }
-    
+
     @Override
     public void close() throws IOException {
         if (input != null) {

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -107,11 +107,11 @@ class JDBCHistoryCache implements HistoryCache {
             throw new ExceptionInInitializerError(ioe);
         } finally { //NOPMD
           try {
-             if (in != null ) { 
+             if (in != null ) {
               in.close(); }
-          } catch (IOException ioe) {                         
+          } catch (IOException ioe) {
             throw new ExceptionInInitializerError(ioe); //NOPMD
-          } 
+          }
         }
     }
 

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -71,7 +71,7 @@ History parse(File file, String changeset) throws HistoryException {
         try {
             Executor executor = repository.getHistoryLogExecutor(file, changeset);
             int status = executor.exec(true, this);
-            
+
             if (status != 0) {
                 throw new HistoryException("Failed to get history for: \"" +
                                            file.getAbsolutePath() + "\" Exit code: " + status);

File: src/org/opensolaris/opengrok/history/MonotoneHistoryParser.java
Patch:
@@ -41,7 +41,7 @@
 
 /**
  * Class used to parse the history log from Monotone
- * 
+ *
  * @author Trond Norbye
  */
 class MonotoneHistoryParser implements Executor.StreamHandler {
@@ -70,7 +70,7 @@ History parse(File file, String changeset) throws HistoryException {
         try {
             Executor executor = repository.getHistoryLogExecutor(file, changeset);
             int status = executor.exec(true, this);
-            
+
             if (status != 0) {
                 throw new HistoryException("Failed to get history for: \"" +
                                            file.getAbsolutePath() + "\" Exit code: " + status);

File: src/org/opensolaris/opengrok/history/RCSHistoryParser.java
Patch:
@@ -142,7 +142,7 @@ protected static File getCVSFile(String parent, String name) {
                 }
             }
         } catch (Exception e) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, 
+            OpenGrokLogger.getLogger().log(Level.WARNING,
                     "Failed to retrieve CVS file of parent: " + parent + ", name: " + name, e);
         }
         return null;

File: src/org/opensolaris/opengrok/history/RCSRepository.java
Patch:
@@ -59,7 +59,7 @@ InputStream getHistoryGet(String parent, String basename, String rev) {
             File rcsFile = getRCSFile(file);
             return new RCSget(rcsFile.getPath(), rev);
         } catch (IOException ioe) {
-            OpenGrokLogger.getLogger().log(Level.SEVERE, 
+            OpenGrokLogger.getLogger().log(Level.SEVERE,
                     "Failed to retrieve revision " + rev + " of " + basename, ioe);
             return null;
         }

File: src/org/opensolaris/opengrok/history/RazorHistoryParser.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * A History Parser for Razor
- * 
+ *
  * @author Peter Bray <Peter.Darren.Bray@gmail.com>
  */
 class RazorHistoryParser {
@@ -194,11 +194,11 @@ protected History parseContents(BufferedReader contents) throws IOException {
         history.setHistoryEntries(entries);
         return history;
     }
-    
+
     private void dumpEntry(HistoryEntry entry) {
         if (DUMP_HISTORY_ENTRY_ADDITIONS) {
             entry.dump();
-        }        
+        }
     }
 
     private void parseDebug(String message) {

File: src/org/opensolaris/opengrok/history/RepoRepository.java
Patch:
@@ -39,7 +39,7 @@ public class RepoRepository extends Repository {
 
     private static final long serialVersionUID = 1L;
     /** The property name used to obtain the client command for this repository.*/
-    public static final String CMD_PROPERTY_KEY = 
+    public static final String CMD_PROPERTY_KEY =
         "org.opensolaris.opengrok.history.repo";
     /** The command to use to access the repository if none was given explicitly */
     public static final String CMD_FALLBACK = "repo";

File: src/org/opensolaris/opengrok/history/SCCSHistoryParser.java
Patch:
@@ -70,7 +70,7 @@ private History parseFile(File file) throws IOException {
         if (f == null) {
             return null;
         }
-        
+
         in = new BufferedReader(new FileReader(getSCCSFile(file)));
         pass = sep = false;
         passRecord = true;

File: src/org/opensolaris/opengrok/history/SCCSget.java
Patch:
@@ -31,7 +31,7 @@
 
 
 public final class SCCSget {
-           
+
     public static InputStream getRevision(String command, File file, String revision) throws IOException {
         InputStream ret = null;
         ArrayList<String> argv = new ArrayList<String>();

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -146,10 +146,10 @@ private void initSaxParser() throws HistoryException {
     History parse(File file, SubversionRepository repos, String sinceRevision)
             throws HistoryException {
         initSaxParser();
-        handler = new Handler(repos.getDirectoryName(), repos.reposPath, 
+        handler = new Handler(repos.getDirectoryName(), repos.reposPath,
                 RuntimeEnvironment.getInstance().getSourceRootPath().length(),
                 repos.getDateFormat());
-        
+
         Executor executor = repos.getHistoryLogExecutor(file, sinceRevision);
         int status = executor.exec(true, this);
 
@@ -187,7 +187,7 @@ public void processStream(InputStream input) {
 
     /**
      * Parse the given string.
-     * 
+     *
      * @param buffer The string to be parsed
      * @return The parsed history
      * @throws IOException if we fail to parse the buffer

File: src/org/opensolaris/opengrok/index/Filter.java
Patch:
@@ -145,7 +145,7 @@ public boolean match(String name) {
 
     /**
      * Add a pattern to the correct list of internal filters to match
-     * 
+     *
      * @param pattern the pattern to add
      */
     @SuppressWarnings("PMD.ConfusingTernary")

File: src/org/opensolaris/opengrok/index/IndexChangedListener.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * The changes in an index database may be monitored through this interface.
- * 
+ *
  * @author Trond Norbye
  */
 public interface IndexChangedListener {

File: src/org/opensolaris/opengrok/management/JMXConfigurationMBean.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * MBean for doing settings and get on the OpenGrok RuntimeEnvironment
- * 
+ *
  * @author Jan Berg
  */
 public interface JMXConfigurationMBean {

File: src/org/opensolaris/opengrok/management/client/OpenGrokTrayApp.java
Patch:
@@ -123,10 +123,10 @@ public void actionPerformed(ActionEvent e) {
 
         return exitListener;
     }
-    
+
     private ActionListener getConfigurationListener() {
         ActionListener configListener = new ActionListener() {
-            
+
             public void actionPerformed(ActionEvent e) {
                 log.finer("Config...");
                 ConfigurationsFrame sf;
@@ -137,7 +137,7 @@ public void actionPerformed(ActionEvent e) {
                     Logger.getLogger(OpenGrokTrayApp.class.getName()).log(Level.SEVERE, null, ex);
 
                 }
-                
+
                 log.finer("Done config");
             }
         };

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -43,8 +43,8 @@ public class SettingsFrame extends javax.swing.JFrame {
     private static final long serialVersionUID = -5229330170574558105L;
     private final SettingsPersistence properties;
 
-    /** 
-     * Creates new form SettingsFrame 
+    /**
+     * Creates new form SettingsFrame
      * @param sp settings to start and save with
      */
     public SettingsFrame(SettingsPersistence sp) {
@@ -76,7 +76,7 @@ private void loadSettings() {
 
     private void saveSettings() {
         //properties.setProperty(SettingsPersistence.USERNAMEKEY, userTextField.getText());
-        //properties.setProperty(properties.PASSWORDKEY, 
+        //properties.setProperty(properties.PASSWORDKEY,
         //        String.copyValueOf(passwordField.getPassword()));
         //properties.setPassword(passwordField.getPassword());
         properties.setProperty(SettingsPersistence.JMXURL, agentURLField.getText());

File: src/org/opensolaris/opengrok/management/client/SettingsPersistence.java
Patch:
@@ -87,7 +87,7 @@ public SettingsPersistence(String cfgfile) throws IOException {
                   is.close();
               }
               } catch (IOException ioe) { //NOPMD
-                throw ioe; 
+                throw ioe;
               } finally {
               existingSettings = true;
               }

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -131,9 +131,9 @@ protected void dumpResults() {
             if (nhits<totalResults) {
                 System.out.println("Printed results 1 - " + nhits +" of " + totalResults + " total matching documents collected.");
                 System.out.println("Collect the rest (y/n) ?");
-                BufferedReader in=null;                
+                BufferedReader in=null;
                 try {
-                    in = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));                                              
+                    in = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));
                     String line = in.readLine();
                     if (null == line || line.length() == 0 || line.charAt(0) == 'n') {
                        return;

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -19,7 +19,7 @@
 
 /*
  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
- * 
+ *
  * Portions Copyright 2011 Jens Elkner.
  */
 
@@ -115,7 +115,7 @@ private void buildQueryAsURI(Map<String, String> subqueries) {
     /**
      * ???.
      * Closes the given <var>in</var> reader on return.
-     * 
+     *
      * @param in File to be matched
      * @param out to write the context
      * @param morePrefix to link to more... page

File: src/org/opensolaris/opengrok/search/context/LineMatcher.java
Patch:
@@ -33,7 +33,7 @@ public abstract class LineMatcher {
     public static String tagBegin, tagEnd;
     public static final int NOT_MATCHED = 0;
     public static final int MATCHED = 1;
-    public static final int WAIT = 2;    
+    public static final int WAIT = 2;
 
     /**
      * Tells whether the matching should be done in a case insensitive manner.

File: src/org/opensolaris/opengrok/search/context/PhraseMatcher.java
Patch:
@@ -30,13 +30,13 @@
 class PhraseMatcher extends LineMatcher {
     private final String[] phraseTerms;
     private int cur;
-    
+
     PhraseMatcher(String[] phraseTerms, boolean caseInsensitive) {
         super(caseInsensitive);
         this.phraseTerms  = phraseTerms.clone();
         cur = 0;
     }
-    
+
     public int match(String token) {
         if (equal(token, phraseTerms[cur])) {
             //System.out.println(" PhraseMatcher matched " + token);

File: src/org/opensolaris/opengrok/search/context/WildCardMatcher.java
Patch:
@@ -27,7 +27,7 @@
 
 public class WildCardMatcher extends LineMatcher {
     final String pattern;
-    
+
     public WildCardMatcher(String pattern, boolean caseInsensitive) {
         super(caseInsensitive);
         this.pattern = normalizeString(pattern);

File: src/org/opensolaris/opengrok/web/Constants.java
Patch:
@@ -33,7 +33,7 @@ public final class Constants {
     //full name of cross reference prefix
     public static final String xrefP="/xref";
     //short cut for easier recognition of servlets in jsp pages, TODO redesign to be more intuitive
-    public static final String xrefS="/xr"; 
+    public static final String xrefS="/xr";
     public static final String moreP="/more";
     public static final String moreS="/mo";
     public static final String diffP="/diff";
@@ -46,5 +46,5 @@ public final class Constants {
     //full blown search from main page or top bar
     public static final String searchP="/search";
     //search from cross reference, can lead to direct match(which opens directly)
-    public static final String searchR="/s"; 
+    public static final String searchR="/s";
 }

File: src/org/opensolaris/opengrok/web/DiffData.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * A simple container to store the data required to generated a view of diffs
  * for a certain versioned file.
- * 
+ *
  * @author  Jens Elkner
  * @version $Revision$
  */
@@ -42,12 +42,12 @@ public class DiffData {
     public Genre genre;
     /** the orignal and new revision container */
     public Revision revision;
-    /** the URI encoded parameter values of the request. {@code param[0]} 
+    /** the URI encoded parameter values of the request. {@code param[0]}
      * belongs to {@code r1}, {@code param[1]} to {@code r2}. */
     public String param[];
     /** the revision names extracted from {@link #param} */
     public String rev[];
-    /** the content of the original and new file line-by-line corresponding 
+    /** the content of the original and new file line-by-line corresponding
      * with {@link #rev} */
     public String[][] file;
     /** error message to show, if diffs are not available */

File: src/org/opensolaris/opengrok/web/DiffType.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Known diff display types.
- * 
+ *
  * @author  Jens Elkner
  * @version $Revision$
  */

File: src/org/opensolaris/opengrok/web/EftarFile.java
Patch:
@@ -250,7 +250,7 @@ public void create(String[] args) throws IOException, FileNotFoundException {
     /**
      * Main method is used to generate eftar file from the path description
      * file in the run scripts.
-     * 
+     *
      * @param args Input files and output file
      */
     @SuppressWarnings("PMD.SystemPrintln")

File: src/org/opensolaris/opengrok/web/SortOrder.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Sort orders recognized in the web UI.
- * 
+ *
  * @author  Jens Elkner
  * @version $Revision$
  */
@@ -45,8 +45,8 @@ private SortOrder(String name, String desc) {
 
     /**
      * Get the Sort order wrt. the given name.
-     * @param name the query parameter name of the order to find. 
-     * @return {@code null} if there is no SortOrder with the given name, 
+     * @param name the query parameter name of the order to find.
+     * @return {@code null} if there is no SortOrder with the given name,
      *  the corresponding SortOrder otherwise.
      * @see #toString()
      */

File: src/org/opensolaris/opengrok/ConsoleFormatter.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.Date;
 import java.util.logging.Formatter;
+import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 /**
@@ -51,7 +52,7 @@ public String format(LogRecord record) {
       sb.append(" | ");
       sb.append(formatMessage(record));
       Throwable thrown = record.getThrown();
-      if (null != thrown) {
+      if (null != thrown && record.getLevel().intValue() < Level.CONFIG.intValue()) {
          sb.append(lineSeparator);
          java.io.ByteArrayOutputStream ba=new java.io.ByteArrayOutputStream();
          thrown.printStackTrace(new java.io.PrintStream(ba, true));

File: src/org/opensolaris/opengrok/FileLogFormatter.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.Date;
 import java.util.logging.Formatter;
+import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 /**
@@ -70,7 +71,7 @@ public String format(LogRecord record) {
       sb.append(": ");
       sb.append(record.getMessage());
       Throwable thrown = record.getThrown();
-      if (null != thrown) {
+      if (null != thrown && record.getLevel().intValue() < Level.CONFIG.intValue()) {
          sb.append(lineSeparator);
          java.io.ByteArrayOutputStream ba=new java.io.ByteArrayOutputStream();
          thrown.printStackTrace(new java.io.PrintStream(ba, true));

File: src/org/opensolaris/opengrok/SimpleConsoleFormatter.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.Date;
 import java.util.logging.Formatter;
+import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 /**
@@ -53,7 +54,7 @@ public String format(LogRecord record) {
       sb.append(": ");
       sb.append(formatMessage(record));
       Throwable thrown = record.getThrown();
-      if (null != thrown) {
+      if (null != thrown && record.getLevel().intValue() < Level.CONFIG.intValue()) {
          sb.append(lineSeparator);
          java.io.ByteArrayOutputStream ba=new java.io.ByteArrayOutputStream();
          thrown.printStackTrace(new java.io.PrintStream(ba, true));

File: src/org/opensolaris/opengrok/SimpleFileLogFormatter.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.Date;
 import java.util.logging.Formatter;
+import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 /**
@@ -68,7 +69,7 @@ public String format(LogRecord record) {
       sb.append(": ");
       sb.append(formatMessage(record));
       Throwable thrown = record.getThrown();
-      if (null != thrown) {
+      if (null != thrown && record.getLevel().intValue() < Level.CONFIG.intValue()) {
          sb.append(lineSeparator);
          java.io.ByteArrayOutputStream ba=new java.io.ByteArrayOutputStream();
          thrown.printStackTrace(new java.io.PrintStream(ba, true));

File: src/org/opensolaris/opengrok/history/RepoRepository.java
Patch:
@@ -110,7 +110,7 @@ InputStream getHistoryGet(String parent, String basename, String rev) {
 
     @Override
     boolean fileHasAnnotation(File file) {
-        throw new UnsupportedOperationException("Should never be called!");
+        return false;
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -28,7 +28,6 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -63,7 +62,7 @@ public void processStream(InputStream input) throws IOException {
         DateFormat df = repository.getDateFormat();
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
 
-        BufferedReader in = new BufferedReader(new InputStreamReader(input));
+        BufferedReader in = new BufferedReader(repository.newLogReader(input));
 
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
 

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -56,6 +56,7 @@
 import org.opensolaris.opengrok.analysis.java.JavaAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.lisp.LispAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.perl.PerlAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.php.PhpAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.PlainAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.XMLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.python.PythonAnalyzerFactory;
@@ -131,6 +132,7 @@ public class AnalyzerGuru {
             new JavaAnalyzerFactory(),
             new PythonAnalyzerFactory(),
             new PerlAnalyzerFactory(),
+            new PhpAnalyzerFactory(),
             new LispAnalyzerFactory(),
             new TclAnalyzerFactory(),
             new SQLAnalyzerFactory(),

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -46,7 +46,6 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
         "S",
         "XS",                   // Mainly found in perl directories
         "X",                    // rpcgen input files
-        "PHP",
         "CS",                   // C#
     };
 

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -18,9 +18,9 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
  */
+
 package org.opensolaris.opengrok.search;
 
 import java.io.File;
@@ -244,6 +244,6 @@ public void testSearch() {
         // file name search is case insensitive
         instance = new SearchEngine();
         instance.setFile("JaVa"); // should match java
-        assertEquals(5, instance.search());
+        assertEquals(6, instance.search());
     }
 }

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -72,11 +72,11 @@ public abstract class JFlexXref {
         {"package",    "xp",   "Package"},
         {"interface",  "xi",   "Interface"},
         {"namespace",  "xn",   "Namespace"},
-        {"enum",       "xe",   "Enum"},
         {"enumerator", "xer",  null},
+        {"enum",       "xe",   "Enum"},
         {"struct",     "xs",   "Struct"},
-        {"typedef",    "xt",   "Typedef"},
         {"typedefs",   "xts",  null},
+        {"typedef",    "xt",   "Typedef"},
         {"union",      "xu",   null},
         {"field",      "xfld", null},
         {"member",     "xmb",  null},

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -130,8 +130,6 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
             try {
                 for (Definitions.Tag tag : tags.getTags()) {
                     for (int i = 0; i < m.length; i++) {
-                        //TODO symbol.toLowerCase makes below check work for all searches and shows the proper tag, hence QueryMatchers or someone from the matchers incorrectly lowercases search for index which IS case sensitive !!!
-                        // please fix bug 17582
                         if (m[i].match(tag.symbol) == LineMatcher.MATCHED) {
                             /*
                              * desc[1] is line number

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -165,6 +165,8 @@ protected void writeSymbol(String symbol, Set<String> keywords, int line)
                 style_class = "xv";
             } else if (type.startsWith("class")) {
                 style_class = "xc";
+            } else if (type.startsWith("package")) {
+                style_class = "xp";
             } else if (type.startsWith("interface")) {
                 style_class = "xi";
             } else if (type.startsWith("namespace")) {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -404,7 +404,7 @@ public static void main(String argv[]) {
                 //logging starts here
                 if (cfg.isVerbose()) {
                   String fn=LogManager.getLogManager().getProperty("java.util.logging.FileHandler.pattern");
-                  if (fn!=null) {System.out.println("Logging to file: "+fn);}
+                  if (fn!=null) {System.out.println("Logging filehandler pattern: "+fn);}
                 }
                 
                 if (cfg.isHistoryCacheInDB()) {

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -125,6 +125,8 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
             try {
                 for (Definitions.Tag tag : tags.getTags()) {
                     for (int i = 0; i < m.length; i++) {
+                        //TODO symbol.toLowerCase makes below check work for all searches and shows the proper tag, hence QueryMatchers or someone from the matchers incorrectly lowercases search for index which IS case sensitive !!!
+                        // please fix bug 17582
                         if (m[i].match(tag.symbol) == LineMatcher.MATCHED) {
                             /*
                              * desc[1] is line number

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -123,7 +123,7 @@ public static void prettyPrintHTML(Searcher searcher,ScoreDoc[] hits, int start,
                 }
                 alt ^= true;
                 out.write(">");
-                out.write("<td class=\"q\"><a id=\"history\" href=\""+context+Constants.histL+rpath+"\" title=\"History\">H</a> <a href=\""+context+Constants.xrefP+rpath+"?a=true\" title=\"Annotate\">A</a> <a id=\"download\" href=\""+context+Constants.rawP+rpath+"\" title=\"Download\">D</a>");
+                out.write("<td class=\"q\"><a href=\""+context+Constants.histL+rpath+"\" title=\"History\">H</a> <a href=\""+context+Constants.xrefP+rpath+"?a=true\" title=\"Annotate\">A</a> <a href=\""+context+Constants.rawP+rpath+"\" title=\"Download\">D</a>");
                 out.write("</td>");
                 out.write("<td class=\"f\"><a href=\"" +
                         selfUrl + "\">"+self+"</a>&nbsp;</td><td><tt class=\"con\">");

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -373,7 +373,7 @@ public static void readableLine(int num, Writer out, Annotation annotation)
                 out.write(URIEncode(r));
                 String msg=annotation.getDesc(r);
                 if (msg!=null) {
-                 out.write("\" id=\"r\" title=\""+msg+"\"");
+                 out.write("\" name=\"r\" title=\""+msg+"\"");
                 }
                 out.write(closeQuotedTag);
             }

File: test/org/opensolaris/opengrok/index/IndexDatabaseTest.java
Patch:
@@ -27,10 +27,10 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import static org.junit.Assert.*;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.util.TestRepository;
+import static org.junit.Assert.*;
 
 /**
  * Unit tests for the {@code IndexDatabase} class.

File: src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis;
 
@@ -215,11 +214,12 @@ FileAnalyzerFactory isMagic(byte[] contents, InputStream in)
      * Write a cross referenced HTML file. Reads the source from {@code in}.
      * @param in input source
      * @param out output xref writer
+     * @param defs definitions for the file (could be {@code null})
      * @param annotation annotation for the file (could be {@code null})
      * @param project project the file belongs to (could be {@code null})
      * @throws java.io.IOException if an error occurs 
      */
-    public void writeXref(Reader in, Writer out, Annotation annotation, Project project)
+    public void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project)
             throws IOException {
         throw new UnsupportedOperationException("Not yet implemented");
     }

File: src/org/opensolaris/opengrok/analysis/perl/PerlAnalyzerFactory.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
+import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
@@ -60,8 +61,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(Reader in, Writer out, Annotation annotation, Project project)
+    public void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project)
         throws IOException {
-        PerlAnalyzer.writeXref(in, out, annotation, project);
+        PerlAnalyzer.writeXref(in, out, defs, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/python/PythonAnalyzerFactory.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
+import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
@@ -60,8 +61,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(Reader in, Writer out, Annotation annotation, Project project)
+    public void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project)
         throws IOException {
-        PythonAnalyzer.writeXref(in, out, annotation, project);
+        PythonAnalyzer.writeXref(in, out, defs, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
+import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
@@ -69,8 +70,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(Reader in, Writer out, Annotation annotation, Project project)
+    public void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project)
         throws IOException {
-        ShAnalyzer.writeXref(in, out, annotation, project);
+        ShAnalyzer.writeXref(in, out, defs, annotation, project);
     }
 }

File: test/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerTest.java
Patch:
@@ -41,7 +41,7 @@ public void bug2225() throws IOException {
                 "</foo>";
         StringReader sr = new StringReader(xmlText);
         StringWriter sw = new StringWriter();
-        XMLAnalyzer.writeXref(sr, sw, null, null);
+        XMLAnalyzer.writeXref(sr, sw, null, null, null);
         String[] xref = sw.toString().split("\n");
         // Reference to a Java class should have / instead of . in the path
         assertTrue(xref[2].contains("path=com/foo/bar/MyClass"));
@@ -58,12 +58,12 @@ public void xrefWithSpecialCharsInStringLiterals() throws IOException {
         StringReader input =
                 new StringReader("<foo xyz='<betweensinglequotes>'> </foo>");
         StringWriter output = new StringWriter();
-        XMLAnalyzer.writeXref(input, output, null, null);
+        XMLAnalyzer.writeXref(input, output, null, null, null);
         assertTrue(output.toString().contains("&lt;betweensinglequotes&gt;"));
 
         input = new StringReader("<foo xyz=\"<betweendoublequotes>\"> </foo>");
         output = new StringWriter();
-        XMLAnalyzer.writeXref(input, output, null, null);
+        XMLAnalyzer.writeXref(input, output, null, null, null);
         assertTrue(output.toString().contains("&lt;betweendoublequotes&gt;"));
     }
 }

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -251,7 +251,7 @@ public void testXref() throws IOException {
             FileReader in = new FileReader(f);
             StringWriter out = new StringWriter();
             try {
-                AnalyzerGuru.writeXref(factory, in, out, null, null);
+                AnalyzerGuru.writeXref(factory, in, out, null, null, null);
             } catch (UnsupportedOperationException exp) {
                 // ignore
             }

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -249,10 +249,10 @@ private static void appendPath(
                         elements.remove(elements.size() - 1);
                     }
                 } else if (!"".equals(path[i])) {
-                    elements.add(path[i]);
+                    elements.add(URIEncodePath(path[i]));
                 }
             } else {
-                elements.add(path[i]);
+                elements.add(URIEncodePath(path[i]));
             }
         }
 

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -162,7 +162,7 @@ public static void prettyPrintHTML(Searcher searcher,ScoreDoc[] hits, int start,
                     //out.write("Genre = " + genre);
                 }
                 if(historyContext != null) {
-                    historyContext.getContext(srcRoot + parent, self, rpath, out);
+                    historyContext.getContext(srcRoot + parent, self, rpath, out,context);
                 }
                 out.write("</tt></td></tr>\n");
             }

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.logging.Level;
-import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 import org.opensolaris.opengrok.OpenGrokLogger;

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -208,6 +208,9 @@ History getHistory(File file, String sinceRevision)
     }
 
     private String escapeFileName(String name) {
+        if (name.length() == 0) {
+            return name;
+        }
         return name + "@";
     }
 

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -51,6 +51,7 @@ public final class IgnoredNames extends Filter {
         "tags",
         ".svn",
         ".git",
+        ".repo",
         ".hg",
         ".hgtags",
         ".bzr",

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -156,9 +156,10 @@ private void bug15890Anchor(Class<? extends JFlexXref> klass, String path)
 
         StringWriter out = new StringWriter();
         xref.write(out);
+        //TODO improve below to reflect all possible classes of a definition
         assertTrue(
                 "No anchor found",
-                out.toString().contains("<a class=\"d\" name=\"bug15890\"/>"));
+                out.toString().contains("\" name=\"bug15890\"/><a href="));
     }
 
     /**

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -99,6 +99,8 @@ public CommandLineOptions() {
         options.add(new Option('s', "/path/to/source/root", "The root directory of the source tree"));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
         options.add(new Option('T', "number", "The number of threads to use for index generation. By default the number of threads will be set to the number of available CPUs"));        
+        options.add(new Option('B', "url", "Base URL of the user Information provider. Default: \"http://www.opensolaris.org/viewProfile.jspa?username=\""));
+        options.add(new Option('X', "url:suffix", "URL Suffix for the user Information provider. Default: \"\""));
         options.add(new Option('?', null, "Help"));
         options.add(new Option('V', null, "Print version and quit"));
     }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -418,8 +418,8 @@ public static void main(String argv[]) {
 
                 // automatically allow symlinks that are directly in source root
                 String file = cfg.getSourceRoot();
-                File sourceRootFile = file != null ? new File(file) : null;
-                if (sourceRootFile != null) {
+                if (file != null) {
+                    File sourceRootFile = new File(file);
                     File[] projectDirs = sourceRootFile.listFiles();
                     if (projectDirs != null) {
                         for (File projectDir : projectDirs) {

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -680,8 +680,8 @@ protected void writeConfiguration() throws IOException {
 
     public void setConfiguration(Configuration configuration) {
         this.configuration = configuration;
-        HistoryGuru.getInstance().invalidateRepositories(configuration.getRepositories());
         register();
+        HistoryGuru.getInstance().invalidateRepositories(configuration.getRepositories());
     }
 
     public Configuration getConfiguration() {

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -88,7 +88,7 @@ private String getValue(Node node) {
     public void setDirectoryName(String directoryName) {
         super.setDirectoryName(directoryName);
 
-        if (isWorking()) {
+        if (svnBinary.available) {
             boolean working = false; // set to true if we manage to find the
                                      // root directory
 

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -55,10 +55,10 @@
 import org.opensolaris.opengrok.analysis.fortran.FortranAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.java.JavaAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.lisp.LispAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.perl.PerlAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.PlainAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.XMLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.python.PythonAnalyzerFactory;
-import org.opensolaris.opengrok.analysis.perl.PerlAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sh.ShAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sql.SQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.tcl.TclAnalyzerFactory;

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -144,7 +144,7 @@ protected void startNewLine() throws IOException {
    */
   protected void writeSymbol(String symbol, Set<String> keywords, int line)
           throws IOException {
-      if (keywords.contains(symbol)) {
+      if (keywords!=null && keywords.contains(symbol)) {
           // This is a keyword, so we don't create a link.
           out.append("<b>").append(symbol).append("</b>");
 

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.analysis.sql;
 
@@ -57,7 +56,7 @@ private static void populateKeywordSet(Set<String> set, String file)
                     Consts.class.getResourceAsStream(file), "US-ASCII"));
         try {
             while ((line = reader.readLine()) != null) {
-                line = line.trim().toLowerCase(Locale.US);
+                line = line.trim().toLowerCase(Locale.getDefault());
                 if (line.charAt(0) != '#') {
                     set.add(line);
                 }

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -121,7 +120,7 @@ public void processStream(InputStream input) throws IOException {
                         try {
                             File f = new File(myDir, s);
                             entry.addFile(env.getPathRelativeToSourceRoot(f, 0));
-                        } catch (FileNotFoundException e) {
+                        } catch (FileNotFoundException e) { //NOPMD
                             // If the file is not located under the source root,
                             // ignore it (bug #11664).
                         }

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -251,6 +251,6 @@ boolean supportsSubRepositories() {
     }
 
     public DateFormat getDateFormat() {
-        return new SimpleDateFormat(datePattern, Locale.US);
+        return new SimpleDateFormat(datePattern, Locale.getDefault());
     }
 }

File: src/org/opensolaris/opengrok/history/SCCSHistoryParser.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -77,7 +76,7 @@ private History parseFile(File file) throws IOException {
         passRecord = true;
         active = true;
         field = 0;
-        sccsDateFormat =  new SimpleDateFormat("yy/MM/dd", Locale.US);
+        sccsDateFormat =  new SimpleDateFormat("yy/MM/dd", Locale.getDefault());
 
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
         while (next()) {

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok.history;
 
@@ -203,7 +202,7 @@ public void processStream(InputStream input) throws IOException {
      * @throws IOException if we fail to parse the buffer
      */
     History parse(String buffer) throws IOException {
-        handler = new Handler("/", "", 0, new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US));
+        handler = new Handler("/", "", 0, new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault()));
         processStream(new ByteArrayInputStream(buffer.getBytes("UTF-8")));
         return new History(handler.entries);
     }

File: test/org/opensolaris/opengrok/history/HistoryEntryTest.java
Patch:
@@ -228,8 +228,7 @@ public void getFiles() {
      * Test of setFiles method, of class HistoryEntry.
      */
     @Test
-    public void setFiles() {
-        System.out.println("setFiles");
+    public void setFiles() {        
         TreeSet<String> files = new TreeSet<String>();
         files.add("file1.file");
         files.add("file2.file");

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -142,23 +142,23 @@ public void testSearch() {
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "main~"}));
         assertTrue(instance.search());
-        assertEquals(7, instance.results.size());
+        assertEquals("Search for main~ in testdata sources",8, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "\"main troff\"~5"}));
         assertTrue(instance.search());
         assertEquals(0, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "Main OR main"}));
         assertTrue(instance.search());
-        assertEquals(7, instance.results.size());
+        assertEquals("Search for Main OR main in testdata sources",8, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "\"main file\""}));
         assertTrue(instance.search());
         assertEquals(0, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "+main -file"}));
         assertTrue(instance.search());
-        assertEquals(7, instance.results.size());
+        assertEquals("search for main but not file",8, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "main AND (file OR field)"}));
         assertTrue(instance.search());

File: testdata/sources/java/Main.java
Patch:
@@ -6,6 +6,7 @@
 class Main {
 
     private String[] argv;
+    private float test = 12.36;
 
     public Main(String[] argv) {
         this.argv = argv;

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 
 /**
@@ -102,7 +101,7 @@ private void buildQueryAsURI(Map<String, String> subqueries) {
 
     private boolean alt = true;
 
-        /**
+    /**
      *
      * @param in File to be matched
      * @param out to write the context
@@ -159,6 +158,7 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
                                     out.write("</a> <i> ");
                                     out.write(desc[2]);
                                     out.write(" </i><br/>");
+                                    anything = true;
                                 }
                             } else {
                                 matchingTags.put(tag.line, desc);

File: src/org/opensolaris/opengrok/OpenGrokLogger.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 package org.opensolaris.opengrok;
 
@@ -205,7 +204,7 @@ private static void clearForeignHandlers() {
             h = l.getHandlers();
         }
     }
-    
+
     private OpenGrokLogger() {
     }
 }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -384,7 +384,7 @@ public static void main(String argv[]) {
                 //logging starts here
                 if (env.isVerbose()) {
                   String fn=LogManager.getLogManager().getProperty("java.util.logging.FileHandler.pattern");
-                  if (fn!=null)System.out.println("Logging to file: "+fn);
+                  if (fn!=null) {System.out.println("Logging to file: "+fn);}
                 }
                 
                 if (env.storeHistoryCacheInDB()) {

File: src/org/opensolaris/opengrok/management/client/SettingsPersistence.java
Patch:
@@ -29,8 +29,8 @@
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.logging.Level;
-import org.opensolaris.opengrok.management.OGAgent;
 import org.opensolaris.opengrok.management.Constants;
+import org.opensolaris.opengrok.management.OGAgent;
 
 /**
  *

File: test/org/opensolaris/opengrok/history/PerforceHistoryParserTest.java
Patch:
@@ -23,8 +23,8 @@
 
 package org.opensolaris.opengrok.history;
 
-import java.util.Calendar;
 import java.io.StringReader;
+import java.util.Calendar;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/org/opensolaris/opengrok/ConsoleFormatter.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok;
@@ -50,7 +49,7 @@ public String format(LogRecord record) {
       sb.append("[#|");
       sb.append(ts(new Date(record.getMillis())));
       sb.append(" | ");
-      sb.append(record.getMessage());
+      sb.append(formatMessage(record));
       Throwable thrown = record.getThrown();
       if (null != thrown) {
          sb.append(lineSeparator);

File: src/org/opensolaris/opengrok/FileLogFormatter.java
Patch:
@@ -18,8 +18,7 @@
  */
 
 /*
- * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
+ * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
  */
 
 package org.opensolaris.opengrok;
@@ -67,7 +66,7 @@ public String format(LogRecord record) {
       sb.append("| ");  
       sb.append(classNameOnly(record.getSourceClassName()));
       sb.append('.');
-      sb.append(record.getSourceMethodName());
+      sb.append(formatMessage(record));
       sb.append(": ");
       sb.append(record.getMessage());
       Throwable thrown = record.getThrown();

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -162,7 +162,7 @@ public Annotation annotate(File file, String revision) throws IOException {
         int status = exec.exec();
         
         if (status != 0) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to get annotations for: \"{0}\" Exit code: {1}", new Object[]{file.getAbsolutePath(), status});
+            OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to get annotations for: \"{0}\" Exit code: {1}", new Object[]{file.getAbsolutePath(), String.valueOf(status)});
         }
 
         return parseAnnotation(exec.getOutputReader(), file.getName());
@@ -182,7 +182,7 @@ protected Annotation parseAnnotation(Reader input, String fileName) throws IOExc
                 String author = matcher.group(2).trim();
                 ret.addLine(rev, author, true);
             } else {
-                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line {0}: [{1}]", new Object[]{lineno, line});
+                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line {0}: [{1}]", new Object[]{String.valueOf(lineno), line});
             }
         }
         return ret;

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -240,7 +240,7 @@ Annotation annotate(File file, String revision) throws IOException {
         int status = exec.exec();
 
         if (status != 0) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to get annotations for: \"{0}\" Exit code: {1}", new Object[]{file.getAbsolutePath(), status});
+            OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to get annotations for: \"{0}\" Exit code: {1}", new Object[]{file.getAbsolutePath(), String.valueOf(status)});
         }
 
         return parseAnnotation(exec.getOutputReader(), file.getName());
@@ -272,7 +272,7 @@ protected Annotation parseAnnotation(Reader input, String fileName) throws IOExc
                 String author = matcher.group(2).trim();
                 ret.addLine(rev, author, true);
             } else {
-                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line {0}: [{1}]", new Object[]{lineno, line});
+                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line {0}: [{1}]", new Object[]{String.valueOf(lineno), line});
             }
         }
         return ret;

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -155,7 +155,7 @@ public Annotation annotate(File file, String revision) throws IOException {
         int status = exec.exec();
         
         if (status != 0) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to get annotations for: \"{0}\" Exit code: {1}", new Object[]{file.getAbsolutePath(), status});
+            OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to get annotations for: \"{0}\" Exit code: {1}", new Object[]{file.getAbsolutePath(), String.valueOf(status)});
         }
 
         return parseAnnotation(exec.getOutputReader(), file.getName());
@@ -175,7 +175,7 @@ protected Annotation parseAnnotation(Reader input, String fileName) throws IOExc
                 String author = matcher.group(2).trim();
                 ret.addLine(rev, author, true);
             } else {
-                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line {0}: [{1}] of {2}", new Object[]{lineno, line, fileName});
+                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line {0}: [{1}] of {2}", new Object[]{String.valueOf(lineno), line, fileName});
             }
         }
         return ret;

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -438,10 +438,10 @@ private void createCache(Repository repository, String sinceRevision) {
 
             if (verbose) {
                 long stop = System.currentTimeMillis();
-                log.log(Level.INFO, "Creating historycache for {0} took ({1}ms)", new Object[]{path, stop - start});
+                log.log(Level.INFO, "Creating historycache for {0} took ({1}ms)", new Object[]{path, String.valueOf(stop - start)});
             }
         } else {
-            log.warning(String.format("Skipping creation of historycache of %s repository in %s: Missing SCM dependencies?", type, path));
+            log.log(Level.WARNING,"Skipping creation of historycache of {0} repository in {1}: Missing SCM dependencies?", new Object[]{type, path});
         }
     }
 

File: src/org/opensolaris/opengrok/management/AgentIndexRunner.java
Patch:
@@ -135,7 +135,7 @@ public void run() {
                 log.info("Update source repositories");
                 HistoryGuru.getInstance().updateRepositories();
                 List<String> subFiles = Arrays.asList(sublist);
-                log.log(Level.INFO, "Starting index, update {0} noThreads {1} subfiles {2}", new Object[]{update, noThreads, subFiles.size()});
+                log.log(Level.INFO, "Starting index, update {0} noThreads {1} subfiles {2}", new Object[]{String.valueOf(update), String.valueOf(noThreads), String.valueOf(subFiles.size())});
                 index.doIndexerExecution(update, noThreads, subFiles, this);
                 log.info("Finished indexing");
                 lastIndexFinish = System.currentTimeMillis();

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -374,11 +374,11 @@ private static String[] runLsvob() {
             } else {
                 String sep = System.getProperty("line.separator");
                 String[] vobs = output.split(Pattern.quote(sep));
-                OpenGrokLogger.getLogger().log(Level.INFO, "Found VOBs: "+Arrays.asList(vobs));
+                OpenGrokLogger.getLogger().log(Level.CONFIG, "Found VOBs: {0}", Arrays.asList(vobs));
                 return vobs;
             }
         } else {
-            OpenGrokLogger.getLogger().log(Level.SEVERE, "\"cleartool lsvob -s\" returned non-zero status: "+rc);
+            OpenGrokLogger.getLogger().log(Level.SEVERE, "\"cleartool lsvob -s\" returned non-zero status: {0}", rc);
             return new String[0];
         }
     }

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -79,9 +79,7 @@ private void saveSettings() {
         //properties.setProperty(properties.PASSWORDKEY, 
         //        String.copyValueOf(passwordField.getPassword()));
         //properties.setPassword(passwordField.getPassword());
-        String[] agenturl = agentURLField.getText().split(":");
-        properties.setProperty(SettingsPersistence.HOST, agenturl[0]);
-        properties.setProperty(SettingsPersistence.JMXPORT, agenturl[1]);
+        properties.setProperty(SettingsPersistence.JMXURL, agentURLField.getText());
         properties.setProperty(SettingsPersistence.INDEXTIMEOUTKEY, indexingTimeoutField.getText());
         properties.setProperty(SettingsPersistence.CONNECTIONTIMEOUTKEY, connTimeoutField.getText());
 

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -155,7 +155,7 @@ public String getManPage() throws IOException {
         PrintWriter out = new PrintWriter(wrt);
 
         BufferedReader reader = new BufferedReader(new InputStreamReader(
-                CommandLineOptions.class.getResourceAsStream("opengrok.xml"), "US-ASCII"));
+                getClass().getResourceAsStream("opengrok.xml"), "US-ASCII"));
 
         spool(reader, out, "___INSERT_DATE___");
         out.print("<refmiscinfo class=\"date\">");

File: test/org/opensolaris/opengrok/history/SCCSgetTest.java
Patch:
@@ -88,7 +88,7 @@ public void setUp() throws IOException {
                 fail("Failed to set up the test-directory");
             }
             sccsfile = new File(sccsdir, "s.note.txt");
-            InputStream in = SCCSgetTest.class.getResourceAsStream("s.note.txt");
+            InputStream in = getClass().getResourceAsStream("s.note.txt");
             FileOutputStream out = new FileOutputStream(sccsfile);
             byte[] buffer = new byte[8192];
             int nr;
@@ -142,7 +142,7 @@ public void getRevision() throws Exception {
             System.out.println("sccs not available. Skipping test");
             return;
         }
-        ZipInputStream zstream = new ZipInputStream(SCCSgetTest.class.getResourceAsStream("sccs-revisions.zip"));
+        ZipInputStream zstream = new ZipInputStream(getClass().getResourceAsStream("sccs-revisions.zip"));
         ZipEntry entry;
 
         while ((entry = zstream.getNextEntry()) != null) {

File: test/org/opensolaris/opengrok/management/OGAgentTest.java
Patch:
@@ -31,11 +31,13 @@
 import java.util.Properties;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.util.FileUtilities;
 import static org.junit.Assert.*;
 
+@Ignore("Bug #16451")
 public class OGAgentTest {
 
     private Properties savedProperties;

File: test/org/opensolaris/opengrok/management/client/AgentConnectionTest.java
Patch:
@@ -24,6 +24,7 @@
 
 package org.opensolaris.opengrok.management.client;
 
+import org.junit.Ignore;
 import java.io.File;
 import java.net.InetAddress;
 import java.util.Properties;
@@ -34,6 +35,7 @@
 import org.opensolaris.opengrok.util.FileUtilities;
 import static org.junit.Assert.*;
 
+@Ignore("Bug #16451")
 public class AgentConnectionTest {
 
     private Properties savedProperties;

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -58,6 +58,7 @@
 import org.opensolaris.opengrok.analysis.lisp.LispAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.PlainAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.XMLAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.python.PythonAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sh.ShAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.sql.SQLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.tcl.TclAnalyzerFactory;
@@ -128,6 +129,7 @@ public class AnalyzerGuru {
             PlainAnalyzerFactory.DEFAULT_INSTANCE,
             new GZIPAnalyzerFactory(),
             new JavaAnalyzerFactory(),
+            new PythonAnalyzerFactory(),
             new LispAnalyzerFactory(),
             new TclAnalyzerFactory(),
             new SQLAnalyzerFactory(),

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -212,6 +212,7 @@ private void readTags(Definitions defs) {
                         int space = arg.lastIndexOf(' ');//TODO this is not the best way, but works to find the last string(name) in the argument, hence skipping type
                         if (space > 0 && space < arg.length()) {
                             String afters=arg.substring(space+1);
+                            //FIXME this will not work for typeless languages such as python or assignments inside signature ... but since ctags doesn't provide signatures for python yet and assigning stuff in signature is not the case for c or java, we don't care ...
                             String[] names=afters.split("[\\W]"); //this should just parse out variables, we assume first non empty text is the argument name
                             for (String string : names) {
                              if (string.length()>0) {

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 /*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
+ * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
 package org.opensolaris.opengrok.analysis.sh;
@@ -45,8 +45,7 @@ public class ShAnalyzerFactory extends FileAnalyzerFactory {
         "PERL",
         "RUBY",
         "PM",
-        "RB",
-        "PY",
+        "RB",        
         "PL",
         "P5",
         "AWK",

File: src/org/opensolaris/opengrok/index/Filter.java
Patch:
@@ -16,6 +16,8 @@
  *
  * CDDL HEADER END
  */
+
+
 package org.opensolaris.opengrok.index;
 
 import java.io.File;

File: test/org/opensolaris/opengrok/search/SearchTest.java
Patch:
@@ -142,23 +142,23 @@ public void testSearch() {
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "main~"}));
         assertTrue(instance.search());
-        assertEquals(6, instance.results.size());
+        assertEquals(7, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "\"main troff\"~5"}));
         assertTrue(instance.search());
         assertEquals(0, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "Main OR main"}));
         assertTrue(instance.search());
-        assertEquals(6, instance.results.size());
+        assertEquals(7, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "\"main file\""}));
         assertTrue(instance.search());
         assertEquals(0, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "+main -file"}));
         assertTrue(instance.search());
-        assertEquals(6, instance.results.size());
+        assertEquals(7, instance.results.size());
 
         assertTrue(instance.parseCmdLine(new String[]{"-p", "main AND (file OR field)"}));
         assertTrue(instance.search());

File: test/org/opensolaris/opengrok/analysis/JFlexXrefTest.java
Patch:
@@ -70,6 +70,7 @@ public static void setUpClass() throws Exception {
     public static void tearDownClass() throws Exception {
         ctags.close();
         ctags = null;
+        repository.destroy();
     }
 
     /**
@@ -135,7 +136,7 @@ public void testBug15890Anchor() throws Exception {
      */
     private void bug15890Anchor(Class<? extends JFlexXref> klass, String path)
             throws Exception {
-        File file = new File(repository.getSourceRoot() + "/" + path);
+        File file = new File(repository.getSourceRoot() + File.separator + path);
         Definitions defs = ctags.doCtags(file.getAbsolutePath() + "\n");
 
         // Input files contain non-ascii characters and are encoded in UTF-8

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -222,7 +222,7 @@ public void testBug11896() throws Exception {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         env.setSourceRoot(repository.getSourceRoot());
         env.setDataRoot(repository.getDataRoot());
-
+        
         executor = new Executor(new String[] {"mkdir", "-p", repository.getSourceRoot()+"/testBug11896"});
         executor.exec(true);
 

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -244,6 +244,6 @@ public void testSearch() {
         // file name search is case insensitive
         instance = new SearchEngine();
         instance.setFile("JaVa"); // should match java
-        assertEquals(4, instance.search());
+        assertEquals(5, instance.search());
     }
 }

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -53,7 +53,7 @@
 public class ELFAnalyzer extends FileAnalyzer {
 
     private String content;
-    private int len;
+    private int len=0;
     PlainFullTokenizer plainfull;
     StringReader dummy = new StringReader("");
 
@@ -148,6 +148,7 @@ public void parseELF(FileInputStream f) throws IOException {
             sb.append('\n');
         }
         content = sb.toString();
+        len = content.length();
 
     }
     

File: src/org/opensolaris/opengrok/util/Interner.java
Patch:
@@ -25,6 +25,7 @@
 package org.opensolaris.opengrok.util;
 
 import java.util.HashMap;
+import java.util.Map;
 
 /**
  * <p>
@@ -50,7 +51,7 @@
 public class Interner<T> {
 
     /** Map of interned objects. Key and value contain the same object. */
-    private final HashMap<T, T> map = new HashMap<T, T>();
+    private final Map<T, T> map = new HashMap<T, T>();
 
     /**
      * <p>

File: test/org/opensolaris/opengrok/util/InternerTest.java
Patch:
@@ -110,6 +110,7 @@ public void testInternList() {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testInternNull() {
         assertNull(new Interner().intern(null));
     }

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -70,8 +70,8 @@ private String getCommand() {
      * @param file The file to retrieve history for
      * @return An Executor ready to be started
      */
-    Executor getHistoryLogExecutor(final File file, final String sinceRevision) {
-        String abs = file.getAbsolutePath();
+    Executor getHistoryLogExecutor(final File file, final String sinceRevision) throws IOException {
+        String abs = file.getCanonicalPath();
         String filename = "";
         if (abs.length() > directoryName.length()) {
             filename = abs.substring(directoryName.length() + 1);
@@ -100,9 +100,9 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
 
         File directory = new File(directoryName);
 
-        String filename =  (new File(parent, basename)).getAbsolutePath().substring(directoryName.length() + 1);
         Process process = null;
         try {
+            String filename =  (new File(parent, basename)).getCanonicalPath().substring(directoryName.length() + 1);
             String argv[] = {getCommand(), "cat", "-r", rev, filename};
             process = Runtime.getRuntime().exec(argv, null, directory);
 

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -112,8 +112,8 @@ public void update() throws IOException {
      * @param file The file to retrieve history for
      * @return An Executor ready to be started
      */
-    Executor getHistoryLogExecutor(final File file) {
-        String abs = file.getAbsolutePath();
+    Executor getHistoryLogExecutor(final File file) throws IOException {
+        String abs = file.getCanonicalPath();
         String filename = "";
         if (abs.length() > directoryName.length()) {
             filename = abs.substring(directoryName.length() + 1);

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -61,8 +61,8 @@ public GitRepository() {
      * @param file The file to retrieve history for
      * @return An Executor ready to be started
      */
-    Executor getHistoryLogExecutor(final File file) {
-        String abs = file.getAbsolutePath();
+    Executor getHistoryLogExecutor(final File file) throws IOException {
+        String abs = file.getCanonicalPath();
         String filename = "";
         if (abs.length() > directoryName.length()) {
             filename = abs.substring(directoryName.length() + 1);
@@ -97,9 +97,9 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
         ByteArrayOutputStream output = new ByteArrayOutputStream();
         byte[] buffer = new byte[8192];
         
-        String filename =  (new File(parent, basename)).getAbsolutePath().substring(directoryName.length() + 1);
         Process process = null;
         try {
+            String filename =  (new File(parent, basename)).getCanonicalPath().substring(directoryName.length() + 1);
             String argv[] = {getCommand(), "show", rev + ":" + filename};
             process = Runtime.getRuntime().exec(argv, null, directory);
             

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -79,9 +79,9 @@ public MercurialRepository() {
      * @return An Executor ready to be started
      */
     Executor getHistoryLogExecutor(File file, String changeset)
-            throws HistoryException
+             throws HistoryException, IOException
     {
-        String abs = file.getAbsolutePath();
+        String abs = file.getCanonicalPath();
         String filename = "";
         if (abs.length() > directoryName.length()) {
             filename = abs.substring(directoryName.length() + 1);
@@ -117,7 +117,6 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
 
         File directory = new File(directoryName);
 
-        String filename =  (new File(parent, basename)).getAbsolutePath().substring(directoryName.length() + 1);
         Process process = null;
         InputStream in = null;
         String revision = rev;
@@ -126,6 +125,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
             revision = rev.substring(0, rev.indexOf(':'));
         }
         try {
+            String filename =  (new File(parent, basename)).getCanonicalPath().substring(directoryName.length() + 1);
             String argv[] = {getCommand(), "cat", "-r", revision, filename};
             process = Runtime.getRuntime().exec(argv, null, directory);
             

File: src/org/opensolaris/opengrok/history/MonotoneRepository.java
Patch:
@@ -69,12 +69,12 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
 
         File directory = new File(directoryName);
 
-        String filename = (new File(parent, basename)).getAbsolutePath().substring(directoryName.length() + 1);
         Process process = null;
         InputStream in = null;
         String revision = rev;
 
         try {
+            String filename = (new File(parent, basename)).getCanonicalPath().substring(directoryName.length() + 1);
             String argv[] = {getCommand(), "cat", "-r", revision, filename};
             process = Runtime.getRuntime().exec(argv, null, directory);
 
@@ -115,8 +115,8 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
     }
 
     Executor getHistoryLogExecutor(File file, String changeset)
-            throws HistoryException {
-        String abs = file.getAbsolutePath();
+        throws HistoryException, IOException {
+        String abs = file.getCanonicalPath();
         String filename = "";
         if (abs.length() > directoryName.length()) {
             filename = abs.substring(directoryName.length() + 1);

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -78,6 +78,7 @@ public CommandLineOptions() {
         options.add(new Option('P', null, "Generate a project for each of the top-level directories in source root"));
         options.add(new Option('p', "/path/to/default/project", "This is the path to the project that should be selected by default in the web application(when no other project set either in cookie or in parameter). You should strip off the source root."));
         options.add(new Option('Q', ON_OFF, "Turn on/off quick context scan. By default only the first 32k of a file is scanned, and a '[..all..]' link is inserted if the file is bigger. Activating this may slow the server down (Note: this is setting only affects the web application)"));
+        options.add(new Option('N', "/path/to/symlink", "Allow this symlink to be followed. Option may be repeated."));
         options.add(new Option('n', null, "Do not generate indexes, but process all other command line options"));
         options.add(new Option('H', null, "Generate history cache for all external repositories"));
         options.add(new Option('h', "/path/to/repository", "Generate history cache for the specified repos (absolute path from source root)"));

File: test/org/opensolaris/opengrok/search/SummarizerTest.java
Patch:
@@ -37,12 +37,9 @@ public class SummarizerTest {
      * If the last token in a text fragment is a token we're searching for,
      * and that token is also present earlier in the fragment, getSummary()
      * used to throw a StringIndexOutOfBoundsException. Bug #15858.
-     *
-     * The test case is currently disabled because the bug is not fixed.
      */
     @Test
     public void bug15858() throws Exception {
-        if (true) return; // disable until bug #15858 has been fixed
         Query query = new QueryBuilder().setFreetext("beta").build();
         Summarizer instance = new Summarizer(query, new CompatibleAnalyser());
         // This call used to result in a StringIndexOutOfBoundsException

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -229,8 +229,11 @@ public boolean fileHasHistory(File file) {
 
     @Override
     boolean isRepositoryFor(File file) {
+       if (file.isDirectory()) {
         File f = new File(file, ".bzr");
         return f.exists() && f.isDirectory();
+       } else {
+        return false; }
     }
     
     @Override

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -82,8 +82,11 @@ File getRCSFile(File file) {
 
     @Override
     public boolean isRepositoryFor(File file) {
+       if (file.isDirectory()) {
         File cvsDir = new File(file, "CVS");
         return cvsDir.isDirectory();
+       } else {
+        return false; }
     }
     
     @Override

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -224,8 +224,11 @@ public boolean fileHasHistory(File file) {
 
     @Override
     boolean isRepositoryFor(File file) {
+       if (file.isDirectory()) {
         File f = new File(file, ".git");
         return f.exists() && f.isDirectory();
+       } else {
+        return false; }
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -276,8 +276,11 @@ public boolean fileHasHistory(File file) {
     
     @Override
     boolean isRepositoryFor(File file) {
+      if (file.isDirectory()) {
         File f = new File(file, ".hg");
         return f.exists() && f.isDirectory();
+      } else {
+        return false; }
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/SCCSRepository.java
Patch:
@@ -224,7 +224,10 @@ public boolean fileHasHistory(File file) {
 
     @Override
     boolean isRepositoryFor(File file) {
+       if (file.isDirectory()) {        
         return new File(file, "SCCS").isDirectory();
+       } else {
+        return false; }
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -329,8 +329,11 @@ public void update() throws IOException {
 
     @Override
     boolean isRepositoryFor(File file) {
+       if (file.isDirectory()) {
         File f = new File(file, ".svn");
         return f.exists() && f.isDirectory();
+       } else {
+        return false; }
     }
 
     @Override

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -94,9 +94,10 @@ public CommandLineOptions() {
         options.add(new Option('A', "ext:analyzer", "Files with the named extension should be analyzed with the specified class"));
         options.add(new Option('m', "number", "The maximum words to index in a file"));
         options.add(new Option('S', null, "Search for \"external\" source repositories and add them"));
+        options.add(new Option('z', "number", "depth of scanning for repositories in directory structure relative to source root"));
         options.add(new Option('s', "/path/to/source/root", "The root directory of the source tree"));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
-        options.add(new Option('T', "number", "The number of threads to use for index generation. By default the number of threads will be set to the number of available CPUs"));
+        options.add(new Option('T', "number", "The number of threads to use for index generation. By default the number of threads will be set to the number of available CPUs"));        
         options.add(new Option('?', null, "Help"));
         options.add(new Option('V', null, "Print version and quit"));
     }

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -124,7 +124,7 @@ Executor getHistoryLogExecutor(final File file) {
             if ( tagFile.isFile() ) {isBranch=Boolean.TRUE;}
             else { isBranch=Boolean.FALSE; }
         }
-        if (isBranch==Boolean.TRUE) {
+        if (isBranch.equals(Boolean.TRUE)) {
             cmd.add("-b"); //just generate THIS branch history, we don't care about the other branches which are not checked out
         }
         

File: test/org/opensolaris/opengrok/search/SearchEngineTest.java
Patch:
@@ -150,7 +150,7 @@ public void testGetQuery() throws Exception {
         instance.setSymbol("toString");
         instance.setFreetext("OpenGrok");
         assertTrue(instance.isValidQuery());
-        assertEquals("+full:opengrok +defs:\"std string\" +refs:toString +path:makefile +(+hist:once +hist:upon +hist:time)",
+        assertEquals("+defs:\"std string\" +full:opengrok +hist:once +hist:upon +hist:time +path:makefile +refs:toString",
                 instance.getQuery());
     }
 
@@ -218,6 +218,8 @@ public void testSearch() {
         instance.setDefinition("Mai*"); // definition is case sensitive
         instance.setFile("Main.java OR main.c");
         instance.search();
+        assertEquals("+defs:Mai* +(path:\"main . java\" path:\"main . c\")",
+                     instance.getQuery());
         assertEquals(2, instance.search());
         instance.setDefinition("MaI*"); // should not match Main
         instance.search();

File: src/org/opensolaris/opengrok/analysis/c/CxxAnalyzerFactory.java
Patch:
@@ -41,6 +41,7 @@ public class CxxAnalyzerFactory extends FileAnalyzerFactory {
         "HH",
         "CXX",
         "HXX",
+        "TXX"
     };
 
     public CxxAnalyzerFactory() {

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -117,7 +117,7 @@ Executor getHistoryLogExecutor(final File file) {
         cmd.add(getCommand());
         cmd.add("log");
         cmd.add("-N"); //don't display tags
-        File tagFile = new File(file, "CVS/Tag");
+        File tagFile = new File(getDirectoryName(), "CVS/Tag");
         if ( tagFile.isFile() ) {
                 cmd.add("-b"); //just generate THIS branch history, we don't care about the other branches which are not checked out
         }

File: src/org/opensolaris/opengrok/index/DefaultIndexChangedListener.java
Patch:
@@ -43,7 +43,7 @@ class DefaultIndexChangedListener implements IndexChangedListener {
     public void fileAdded(String path, String analyzer) {
         if (verbose) {
             synchronized (this) {
-                System.out.println("Adding: " + path + " (" + analyzer + ")");
+                System.out.println("Added: " + path + " (" + analyzer + ")");
             }
         }
     }

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -559,6 +559,8 @@ private void addFile(File file, String path) throws IOException {
                 new BufferedInputStream(new FileInputStream(file));
         try {
             FileAnalyzer fa = AnalyzerGuru.getAnalyzer(in, path);
+            if (log.isLoggable(Level.FINER)) {
+                log.finer("Adding file:"+path);}
             fa.setCtags(ctags);
             fa.setProject(Project.getProject(path));
 

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -606,7 +606,7 @@ public void sendToConfigHost(RuntimeEnvironment env, String configHost) {
                     InetAddress host = InetAddress.getByName(cfg[0]);
                     RuntimeEnvironment.getInstance().writeConfiguration(host, Integer.parseInt(cfg[1]));
                 } catch (Exception ex) {
-                    log.log(Level.SEVERE, "Failed to send configuration to " + configHost, ex);
+                    log.log(Level.SEVERE, "Failed to send configuration to " + configHost+" (is web application server running with opengrok deployed?)", ex);
                 }
             } else {
                 System.err.println("Syntax error: ");

File: src/org/opensolaris/opengrok/analysis/TextAnalyzer.java
Patch:
@@ -45,7 +45,7 @@ public final void analyze(Document doc, InputStream in) throws IOException {
                 (head[0] == (byte)0xFF && head[1] == (byte)0xFE)) {
             charset = "UTF-16";
             in.reset();
-        } else if (br >= 3 & head[0] == (byte)0xEF && head[1] == (byte)0xBB &&
+        } else if (br >= 3 && head[0] == (byte)0xEF && head[1] == (byte)0xBB &&
                 head[2] == (byte)0xBF) {
             // InputStreamReader does not properly discard BOM on UTF8 streams,
             // so don't reset the stream.

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -116,7 +116,8 @@ Executor getHistoryLogExecutor(final File file) {
         List<String> cmd = new ArrayList<String>();
         cmd.add(getCommand());
         cmd.add("log");
-        cmd.add("-N");
+        cmd.add("-N"); //don't display tags
+	cmd.add("-b"); //just generate THIS branch history, we don't care about the other branches which are not checked out
 
         if (filename.length() > 0) {
            cmd.add(filename);

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -54,7 +56,7 @@ protected CAnalyzer(FileAnalyzerFactory factory) {
         xref = new CXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/c/CxxAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -51,7 +53,7 @@ protected CxxAnalyzer(FileAnalyzerFactory factory) {
         xref = new CxxXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -51,7 +53,7 @@ public class FortranAnalyzer extends PlainAnalyzer {
     }
 
     @Override
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -53,7 +55,7 @@ protected JavaAnalyzer(FileAnalyzerFactory factory) {
         xref = new JavaXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -48,7 +50,7 @@ protected LispAnalyzer(FileAnalyzerFactory factory) {
         xref = new LispXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -54,7 +56,7 @@ protected ShAnalyzer(FileAnalyzerFactory factory) {
         xref = new ShXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java
Patch:
@@ -25,9 +25,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.Writer;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -48,7 +50,7 @@ protected TclAnalyzer(FileAnalyzerFactory factory) {
         xref = new TclXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) throws IOException {
+    public void analyze(Document doc, InputStreamReader in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }

File: src/org/opensolaris/opengrok/configuration/Project.java
Patch:
@@ -119,11 +119,12 @@ public boolean hasTabSizeSetting() {
      */
     public static Project getProject(String path) {
         Project ret = null;
-        if (System.getProperty("file.separator").compareTo("/")!=0) {path=path.replace(File.separatorChar, '/');}
+        String lpath=path;
+        if (System.getProperty("file.separator").compareTo("/")!=0) {lpath=path.replace(File.separatorChar, '/');}
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.hasProjects()) {
             for (Project proj : env.getProjects()) {                
-                if (path.indexOf(proj.getPath()) == 0) {
+                if (lpath.indexOf(proj.getPath()) == 0) {
                     ret = proj;
                 }
             }

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -76,7 +76,7 @@ public class SearchEngine {
     //increase the version - every change of below makes us incompatible with the
     //old index and we need to ask for reindex
     /** version of lucene index common for whole app*/
-    public static Version LUCENE_VERSION=Version.LUCENE_30;
+    public static final Version LUCENE_VERSION=Version.LUCENE_30;
 
     /**
      * Holds value of property definition.

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -44,11 +44,11 @@
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TopFieldDocs;
-import org.apache.lucene.util.Version;
 import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.index.IndexDatabase;
+import org.opensolaris.opengrok.search.SearchEngine;
 
 /**
  * Generate SCM history for directory by using the Index database. (Please note
@@ -86,8 +86,8 @@ public DirectoryHistoryReader(String path) throws IOException {
             }
             searcher = new IndexSearcher(ireader);
             SortField sfield=new SortField("date",SortField.STRING, true);
-            Sort sort = new Sort(sfield);
-            QueryParser qparser = new QueryParser(Version.LUCENE_CURRENT,"path", new CompatibleAnalyser());
+            Sort sort = new Sort(sfield);            
+            QueryParser qparser = new QueryParser(SearchEngine.LUCENE_VERSION,"path", new CompatibleAnalyser());
             Query query = null;            
             ScoreDoc[] hits = null;
             try {

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -117,7 +117,7 @@ public static void prettyPrintHTML(Searcher searcher,ScoreDoc[] hits, int start,
                             else {
                                     r = new TagFilter(new BufferedReader(new FileReader(dataRoot + "/xref" + rpath))); }                            
                             int len = r.read(content);
-                            //fixme use Highlighter from lucene contrib here, instead of summarizer, we'd also get rid of apache lucene in whole source ...
+                            //FIXME use Highlighter from lucene contrib here, instead of summarizer, we'd also get rid of apache lucene in whole source ...
                             out.write(summer.getSummary(new String(content, 0, len)).toString());
                             r.close();
                         } else if("h".equals(genre) && srcRoot != null && summer != null){

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -286,7 +286,7 @@ public int compare(Excerpt excerpt1, Excerpt excerpt2) {
     }
     
     private Token[] getTokens(String text) throws IOException {
-        //fixme somehow integrate below cycle to getSummary to save the cloning and memory,
+        //FIXME somehow integrate below cycle to getSummary to save the cloning and memory,
         //also creating Tokens is suboptimal with 3.0.0 , this whole class could be replaced by highlighter
         ArrayList<Token> result = new ArrayList<Token>();
         TokenStream ts = analyzer.tokenStream("full", new StringReader(text));

File: src/org/opensolaris/opengrok/analysis/PathTokenizer.java
Patch:
@@ -29,6 +29,7 @@
 
 public class PathTokenizer extends Tokenizer {
 
+    // below should be '/' since we try to convert even windows file separators to unix ones
     private static final char dirSep = '/';
     private boolean dot = false;
     private final static char ADOT[]={'.'};

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -106,7 +106,7 @@ public void testMain() throws IOException {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         env.setCtags(System.getProperty("org.opensolaris.opengrok.configuration.ctags", "ctags"));
         if (env.validateExuberantCtags()) {
-            String[] argv = { "-S", "-P", "-p", "/c", "-H", "-Q", "off", "-s", repository.getSourceRoot(), "-d", repository.getDataRoot(), "-v"};
+            String[] argv = { "-S", "-P", "-H", "-Q", "off", "-s", repository.getSourceRoot(), "-d", repository.getDataRoot(), "-v"};
             Indexer.main(argv);
         } else {
             System.out.println("Skipping test. Could not find a ctags I could use in path.");

File: src/org/opensolaris/opengrok/analysis/List2TokenStream.java
Patch:
@@ -36,7 +36,7 @@ public final class List2TokenStream extends TokenStream {
 
     public List2TokenStream(List<String> l) {
         if (l == null) {
-            throw new NullPointerException();
+            throw new IllegalArgumentException("list is null");
         }
         this.l = l;
         subTokens = null;

File: test/org/opensolaris/opengrok/analysis/List2TokenStreamTest.java
Patch:
@@ -79,8 +79,8 @@ public void testBug3094() throws IOException {
     public void testFailfastOnNull() {
         try {
             new List2TokenStream(null);
-            fail("expected a NullPointerException");
-        } catch (NullPointerException npe) {
+            fail("expected an IllegalArgumentException");
+        } catch (IllegalArgumentException iae) {
             // expected
         }
     }

File: src/org/opensolaris/opengrok/analysis/ExpandTabsReader.java
Patch:
@@ -127,7 +127,9 @@ public long skip(long n) throws IOException {
         long skipped = 0;
         for (long l = 0; l < n; l++) {
             int c = read();
-            if (c == -1) break;
+            if (c == -1) {
+                break;
+            }
             skipped++;
         }
 

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.ExpandTabsReader;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.Hash2TokenStream;
@@ -67,7 +68,8 @@ protected PlainAnalyzer(FileAnalyzerFactory factory) {
 
     @Override
     public void analyze(Document doc, InputStream in) throws IOException {
-        InputStreamReader inReader = new InputStreamReader(in);
+        Reader inReader =
+                ExpandTabsReader.wrap(new InputStreamReader(in), project);
         len = 0;
         do {
             int rbytes = inReader.read(content, len, content.length - len);

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -554,6 +554,7 @@ private void addFile(File file, String path) throws IOException {
         try {
             FileAnalyzer fa = AnalyzerGuru.getAnalyzer(in, path);
             fa.setCtags(ctags);
+            fa.setProject(Project.getProject(path));
 
             Document d;
             try {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -617,7 +617,7 @@ public void sendToConfigHost(RuntimeEnvironment env, String configHost) {
                 System.err.println();
             }
             if (env.isVerbose()) {
-                log.info("Configuration successfully updated");
+                log.info("Configuration update routine done, check previous output for errors.");
             }
         }
     }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -93,7 +93,7 @@ public static void main(String argv[]) {
             String defaultProject = null;
             boolean listFiles = false;
             boolean createDict = false;
-            int noThreads = Runtime.getRuntime().availableProcessors();
+            int noThreads = 2 + (2 * Runtime.getRuntime().availableProcessors());
 
             // Parse command line options:
             Getopt getopt = new Getopt(argv, cmdOptions.getCommandString());
@@ -572,7 +572,7 @@ public void run() {
                             }
                         } catch (Exception e) {
                             if (update) {
-                                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while updating index", e);                                
+                                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while updating index", e);
                             } else {
                                 OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while optimizing index", e);
                             }

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -67,6 +67,7 @@ public final class Configuration {
     private List<RepositoryInfo> repositories;
     private String urlPrefix;
     private boolean generateHtml;
+    /** Default project will be used, when no project is selected and no project is in cookie, so basically only the first time you open the first page, or when you clear your web cookies */
     private Project defaultProject;
     private int indexWordLimit;
     private boolean verbose;

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -76,7 +76,7 @@ public CommandLineOptions() {
         options.add(new Option('W', "/path/to/configuration", "Write the current configuration to the specified file (so that the web application can use the same configuration"));
         options.add(new Option('U', "host:port", "Send the current configuration to the specified address (This is most likely the web-app configured with ConfigAddress)"));
         options.add(new Option('P', null, "Generate a project for each of the top-level directories in source root"));
-        options.add(new Option('p', "/path/to/default/project", "This is the path to the project that should be selected by default in the web application. You should strip off the source root."));
+        options.add(new Option('p', "/path/to/default/project", "This is the path to the project that should be selected by default in the web application(when no other project set either in cookie or in parameter). You should strip off the source root."));
         options.add(new Option('Q', ON_OFF, "Turn on/off quick context scan. By default only the first 32k of a file is scanned, and a '[..all..]' link is inserted if the file is bigger. Activating this may slow the server down (Note: this is setting only affects the web application)"));
         options.add(new Option('n', null, "Do not generate indexes, but process all other command line options"));
         options.add(new Option('H', null, "Generate history cache for all external repositories"));

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -184,9 +184,9 @@ public static void main(String argv[]) {
                             // Should be a full class name, but we also accept
                             // the shorthands "client" and "embedded". Expand
                             // the shorthands here.
-                            if (databaseDriver.equals("client")) {
+                            if ("client".equals(databaseDriver)) {
                                 databaseDriver = DERBY_CLIENT_DRIVER;
-                            } else if (databaseDriver.equals("embedded")) {
+                            } else if ("embedded".equals(databaseDriver)) {
                                 databaseDriver = DERBY_EMBEDDED_DRIVER;
                             }
                             break;

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -97,7 +97,7 @@ public FileAnalyzer(FileAnalyzerFactory factory) {
         hista = new HistoryAnalyzer();
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         // not used
     }
 

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -54,7 +54,7 @@ protected CAnalyzer(FileAnalyzerFactory factory) {
         xref = new CXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/c/CxxAnalyzer.java
Patch:
@@ -51,7 +51,7 @@ protected CxxAnalyzer(FileAnalyzerFactory factory) {
         xref = new CxxXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -51,7 +51,7 @@ public class FortranAnalyzer extends PlainAnalyzer {
     }
 
     @Override
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzer.java
Patch:
@@ -53,7 +53,7 @@ protected JavaAnalyzer(FileAnalyzerFactory factory) {
         xref = new JavaXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzer.java
Patch:
@@ -48,7 +48,7 @@ protected LispAnalyzer(FileAnalyzerFactory factory) {
         xref = new LispXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzer.java
Patch:
@@ -54,7 +54,7 @@ protected ShAnalyzer(FileAnalyzerFactory factory) {
         xref = new ShXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }    

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java
Patch:
@@ -48,7 +48,7 @@ protected TclAnalyzer(FileAnalyzerFactory factory) {
         xref = new TclXref(dummy);
     }
 
-    public void analyze(Document doc, InputStream in) {
+    public void analyze(Document doc, InputStream in) throws IOException {
         super.analyze(doc, in);
         doc.add(new Field("refs", dummy));
     }

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -196,7 +196,7 @@ public History getHistory(File file, boolean withFiles)
         if (repos != null && repos.isWorking() && repos.fileHasHistory(file) &&
                 (!repos.isRemote() ||
                 RuntimeEnvironment.getInstance().isRemoteScmSupported())) {
-            if (useCache()) {
+            if (useCache() && historyCache.supportsRepository(repos)) {
                 history = historyCache.get(file, repos, withFiles);
             } else {
                 history = repos.getHistory(file);

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -28,10 +28,10 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.HashSet;
-import java.util.Iterator;
+import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
@@ -133,7 +133,7 @@ public Annotation annotate(File file, String rev) throws IOException {
                 h=false;
             }
             if (h) {
-             HashSet<String> revs=ret.getRevisions();
+             Set<String> revs=ret.getRevisions();
              List<HistoryEntry> hent = hist.getHistoryEntries();
              //if (hent.indexOf(rev)>0) {
              // hent = hent.subList(hent.indexOf(rev), hent.size()); // !!! cannot do this because of not matching rev ids (keys)

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -297,7 +297,7 @@ public static String encode(String s) {
     		char c = s.charAt(i);
 
         switch (c) {
-        		case '"': sb.append("'"); break; // \\\"
+        		case '"': sb.append('\''); break; // \\\"
 	    		case '&': sb.append("&amp;"); break;
 	            case '>': sb.append("&gt;"); break;
 	            case '<': sb.append("&lt;"); break;

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -209,13 +209,13 @@ public Annotation annotate(File file, String revision) throws IOException {
                 Matcher matcher = ANNOTATION_PATTERN.matcher(line);
                 if (matcher.find()) {
                     String author = matcher.group(1);
-                    String rev = matcher.group(2);
-                    ret.addLine(rev, author, true);
+                    String rev = matcher.group(2);                    
+                    ret.addLine(rev, author, true);                    
                 } else {
                     OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line " + 
                             lineno + ": [" + line + "]");
                 }
-            }
+            }                    
         } finally {
             if (in != null) {
                 try {

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -108,7 +108,7 @@ public Configuration() {
         setUserPage("http://www.opensolaris.org/viewProfile.jspa?username=");
         setBugPage("http://bugs.opensolaris.org/bugdatabase/view_bug.do?bug_id=");
         setBugPattern("\\b([12456789][0-9]{6})\\b");
-        setReviewPage("http://www.opensolaris.org/os/community/arc/caselog/");
+        setReviewPage("http://arc.opensolaris.org/caselog/PSARC/");
         setReviewPattern("\\b(\\d{4}/\\d{3})\\b"); // in form e.g. PSARC 2008/305
         setWebappLAF("default");
         setRemoteScmSupported(false);

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -220,7 +220,7 @@ public void testRepositories() {
     @Test
     public void testIndexWordLimit() {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
-        assertEquals(60000, instance.getIndexWordLimit());
+        assertEquals(Integer.MAX_VALUE, instance.getIndexWordLimit());  //default is unlimited
         instance.setIndexWordLimit(100000);
         assertEquals(100000, instance.getIndexWordLimit());
     }

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -99,7 +99,8 @@ public Configuration() {
         setUrlPrefix("/source/s?");
         //setUrlPrefix("../s?"); // TODO generate relative search paths, get rid of -w <webapp> option to indexer !
         setCtags("ctags");
-        setIndexWordLimit(60000);
+        //below can cause an outofmemory error, since it is defaulting to NO LIMIT
+        setIndexWordLimit(Integer.MAX_VALUE);
         setVerbose(false);
         setGenerateHtml(true);
         setQuickContextScan(true);

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -59,6 +59,8 @@ public IndexerTest() {
 
     @BeforeClass
     public static void setUpClass() throws Exception {
+        assertTrue("No point in running indexer tests without valid ctags",
+                RuntimeEnvironment.getInstance().validateExuberantCtags());
     }
 
     @AfterClass

File: src/org/opensolaris/opengrok/Info.java
Patch:
@@ -55,9 +55,8 @@ public final class Info {
 	    if (in != null) {
 		in.close();
 	        }
-            } catch (IOException ioe) {
-            //NOPMD
-            //throw new RuntimeException(ioe);
+            } catch (IOException ioe) {           
+            System.err.println(ioe.getMessage()); //NOPMD
             }
 	}
     }

File: src/org/opensolaris/opengrok/analysis/fortran/Consts.java
Patch:
@@ -6,7 +6,8 @@
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific
- * language governing permissions and limitations under the License.                                                          *
+ * language governing permissions and limitations under the License.
+ *
  * When distributing Covered Code, include this CDDL HEADER in each
  * file and include the License file at LICENSE.txt.
  * If applicable, add the following below this CDDL HEADER, with the

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -46,8 +46,8 @@ class BazaarHistoryParser implements Executor.StreamHandler {
 
     private String myDir;
     private int rootLength;
-    private List<HistoryEntry> entries = new ArrayList<HistoryEntry>();
-    private BazaarRepository repository=new BazaarRepository();
+    private List<HistoryEntry> entries = new ArrayList<HistoryEntry>(); //NOPMD
+    private BazaarRepository repository=new BazaarRepository(); //NOPMD
 
     BazaarHistoryParser(BazaarRepository repository) {
         this.repository = repository;

File: src/org/opensolaris/opengrok/history/MonotoneHistoryParser.java
Patch:
@@ -45,7 +45,7 @@
  */
 class MonotoneHistoryParser implements Executor.StreamHandler {
 
-    private List<HistoryEntry> entries = new ArrayList<HistoryEntry>();
+    private List<HistoryEntry> entries = new ArrayList<HistoryEntry>(); //NOPMD
     private final MonotoneRepository repository;
     private final String mydir;
     private final int rootLength;
@@ -142,7 +142,7 @@ public void processStream(InputStream input) throws IOException {
                     }
                     break;
                 case 4:
-                    if (s.startsWith("Modified ") || s.startsWith("Added ") || s.startsWith("Deleted ")) {
+                    if (s.startsWith("Modified ") || s.startsWith("Added ") || s.startsWith("Deleted ")) { //NOPMD
                         /* swallow */
                     } else if (s.equalsIgnoreCase("ChangeLog:")) {
                         state = 5;

File: src/org/opensolaris/opengrok/history/SCCSHistoryParser.java
Patch:
@@ -175,7 +175,7 @@ private boolean isActive() {
     private int read() throws java.io.IOException {
         int c, d, dt;
         while((c = in.read()) != -1) {
-            switch (c) {
+            switch (c) { //NOPMD
                 case 01:
                     d = in.read();
                     switch (d) {

File: src/org/opensolaris/opengrok/Info.java
Patch:
@@ -56,7 +56,8 @@ public final class Info {
 		in.close();
 	        }
             } catch (IOException ioe) {
-            throw new RuntimeException(ioe);
+            //NOPMD
+            //throw new RuntimeException(ioe);
             }
 	}
     }

File: src/org/opensolaris/opengrok/analysis/fortran/Consts.java
Patch:
@@ -2,12 +2,11 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific
- * language governing permissions and limitations under the License.
- *
+ * language governing permissions and limitations under the License.                                                          *
  * When distributing Covered Code, include this CDDL HEADER in each
  * file and include the License file at LICENSE.txt.
  * If applicable, add the following below this CDDL HEADER, with the

File: src/org/opensolaris/opengrok/analysis/fortran/FortranAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -102,7 +102,8 @@ class JDBCHistoryCache implements HistoryCache {
           try {
              if (in != null ) { 
               in.close(); }
-          } catch (IOException ioe) {
+          } catch (IOException ioe) { 
+            //NOPMD
             //ignore
             //throw new ExceptionInInitializerError(ioe);
           } 

File: src/org/opensolaris/opengrok/history/PerforceRepository.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -26,8 +26,8 @@
 
 import java.io.IOException;
 import java.io.Writer;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.configuration.Project;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.history.Annotation;
 
 /**

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -177,7 +177,7 @@ protected Annotation parseAnnotation(Reader input, String fileName) throws IOExc
                 String author = matcher.group(2).trim();
                 ret.addLine(rev, author, true);
             } else {
-                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line " + lineno + ": [" + line + "]");
+                OpenGrokLogger.getLogger().log(Level.SEVERE, "Error: did not find annotation in line " + lineno + ": [" + line + "] of "+fileName);
             }
         }
         return ret;

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -138,7 +138,7 @@ protected void dumpResults() {
                 try {
                     in = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));                                              
                     String line = in.readLine();
-                    if (line.length() == 0 || line.charAt(0) == 'n') {
+                    if (null == line || line.length() == 0 || line.charAt(0) == 'n') {
                        return;
                     }
                 } catch (Exception ex) {

File: src/org/opensolaris/opengrok/analysis/JFlexXref.java
Patch:
@@ -27,8 +27,8 @@
 import java.io.IOException;
 import java.io.Writer;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.history.Annotation;
 import org.opensolaris.opengrok.configuration.Project;
+import org.opensolaris.opengrok.history.Annotation;
 
 /**
  *
@@ -48,12 +48,12 @@ public void setDefs(Definitions defs) {
   protected void appendProject() throws IOException {
       if (project != null) {
           out.write("&amp;project=");
-          out.write(project.getPath());
+          out.write(project.getDescription());
       }
   }
   
   protected String getProjectPostfix() {
-      return project == null ? "" : ("&amp;project=" + project.getPath());
+      return project == null ? "" : ("&amp;project=" + project.getDescription());
   }
 
 }

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -38,7 +38,7 @@ public abstract class JFlexTokenizer extends Tokenizer {
     // default jflex scanner method
     abstract public Token yylex() throws java.io.IOException ;
 
-    protected static Token reuseToken=new Token();
+    protected final static Token reuseToken=new Token();
 
     /**
      * This is a convenience method for having correctly generated classes who reuse Tokens and save gc for lucene summarizer

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -97,6 +97,7 @@ public Configuration() {
         setProjects(new ArrayList<Project>());
         setRepositories(new ArrayList<RepositoryInfo>());
         setUrlPrefix("/source/s?");
+        //setUrlPrefix("../s?"); // TODO generate relative search paths, get rid of -w <webapp> option to indexer !
         setCtags("ctags");
         setIndexWordLimit(60000);
         setVerbose(false);

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -314,7 +314,7 @@ public static void readableLine(int num, Writer out, Annotation annotation)
             if (enabled) {
                 out.write(anchorLinkStart);
                 out.write(URIEncode(annotation.getFilename()));
-                out.write("?a=true&r=");
+                out.write("?a=true&amp;r=");
                 out.write(URIEncode(r));
                 out.write(closeQuotedTag);
             }
@@ -364,7 +364,7 @@ public static String uid2url(String uid) {
 
     /**
      * wrapper arround UTF-8 URL encoding of a string
-     * @param query
+     * @param q query to be encoded
      * @return null if fail, otherwise the encoded string
      */
     public static String URIEncode(String q) {

File: src/org/opensolaris/opengrok/analysis/JFlexTokenizer.java
Patch:
@@ -38,6 +38,8 @@ public abstract class JFlexTokenizer extends Tokenizer {
     // default jflex scanner method
     abstract public Token yylex() throws java.io.IOException ;
 
+    protected static Token reuseToken=new Token();
+
     /**
      * This is a convenience method for having correctly generated classes who reuse Tokens and save gc for lucene summarizer
      * you MUST consume the returned token to properly get the null value !

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -116,7 +116,7 @@ public Configuration() {
         setIndexVersionedFilesOnly(false);
         setHitsPerPage(25);
         setCachePages(5);
-        setDatabaseDriver("org.apache.derby.jdbc.EmbeddedDriver");
+        setDatabaseDriver("org.apache.derby.jdbc.ClientDriver");
     }
     
     public String getCtags() {
@@ -406,8 +406,7 @@ public void setDatabaseDriver(String databaseDriver) {
 
     public String getDatabaseUrl() {
         if (databaseUrl == null) {
-            return "jdbc:derby:" + getDataRoot() +
-                File.separator + "cachedb;create=true";
+            return "jdbc:derby://localhost/cachedb;create=true";
         }
         return databaseUrl;
     }

File: src/org/opensolaris/opengrok/search/context/HistoryContext.java
Patch:
@@ -37,7 +37,6 @@
 import org.opensolaris.opengrok.history.HistoryEntry;
 import org.opensolaris.opengrok.history.HistoryException;
 import org.opensolaris.opengrok.history.HistoryGuru;
-import org.opensolaris.opengrok.history.HistoryReader;
 import org.opensolaris.opengrok.search.Hit;
 
 /**

File: src/org/opensolaris/opengrok/configuration/Project.java
Patch:
@@ -84,6 +84,7 @@ public static Project getProject(String path) {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.hasProjects()) {
             for (Project proj : env.getProjects()) {
+                //TODO below is buggy, since on Windows the path separator is not "/", hence mast.jsp:192 will not show the searchbox
                 if (path.indexOf(proj.getPath()) == 0) {
                     ret = proj;
                 }

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -465,6 +465,7 @@ public void createSpellingSuggestions() {
             }
             indexReader = IndexReader.open(indexDirectory);
             checker = new SpellChecker(spellDirectory);
+            //TODO below seems only to index "defs" , possible bug ?
             checker.indexDictionary(new LuceneDictionary(indexReader, "defs"));
             if (RuntimeEnvironment.getInstance().isVerbose()) {
                 log.info("done");

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -41,6 +41,7 @@ public final class RepositoryFactory {
         new MercurialRepository(),
         new BazaarRepository(),
         new GitRepository(),
+        new MonotoneRepository(),
         new SubversionRepository(),
         new SCCSRepository(),
         new RazorRepository(),

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -66,7 +66,8 @@ public final class IgnoredNames implements Serializable {
         "*~",
         "deleted_files",
         ".make.*",
-        ".del-*"
+        ".del-*",
+        "_MTN"
     };
     static final long serialVersionUID = 1L;
     

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -72,7 +72,7 @@ class MercurialHistoryParser implements Executor.StreamHandler {
     History parse(File file, String changeset) throws HistoryException {
         Executor executor = repository.getHistoryLogExecutor(file, changeset);
         int status = executor.exec(true, this);
-
+        
         if (status != 0) {
             throw new HistoryException("Failed to get history for: \"" +
                     file.getAbsolutePath() + "\" Exit code: " + status);

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -90,7 +90,7 @@ Executor getHistoryLogExecutor(File file, String changeset)
         List<String> cmd = new ArrayList<String>();
         cmd.add(getCommand());
         cmd.add("log");
-	cmd.add("-f");
+        if ( !file.isDirectory() ) { cmd.add("-f"); }
 
         if (changeset != null) {
             cmd.add("-r");
@@ -102,7 +102,7 @@ Executor getHistoryLogExecutor(File file, String changeset)
                         "Don't know how to parse changeset identifier: " +
                         changeset);
             }
-        }
+        }        
 
         cmd.add("--template");
         cmd.add(file.isDirectory() ? DIR_TEMPLATE : TEMPLATE);

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -90,6 +90,7 @@ Executor getHistoryLogExecutor(File file, String changeset)
         List<String> cmd = new ArrayList<String>();
         cmd.add(getCommand());
         cmd.add("log");
+	cmd.add("-f");
 
         if (changeset != null) {
             cmd.add("-r");

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -201,7 +201,7 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
             String token;
             int matchState = LineMatcher.NOT_MATCHED;
             int matchedLines = 0;
-            while ((token = tokens.next()) != null && (!lim || matchedLines < 10)) {
+            while ((token = tokens.yylex()) != null && (!lim || matchedLines < 10)) {
                 for (int i = 0; i< m.length; i++) {
                     matchState = m[i].match(token);
                     if (matchState == LineMatcher.MATCHED) {

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -195,7 +195,7 @@ public void writeXref(Writer out) throws IOException {
         out.write("<pre>");
     }
 
-    class ELFHeader {
+    private static class ELFHeader {
         // Elf32 Addr = readInt
         // elf32 half = readUnsignedShort
         // Off = int

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -78,7 +78,7 @@ class JDBCHistoryCache implements HistoryCache {
             QUERIES.load(klazz.getResourceAsStream(
                     klazz.getSimpleName() + "_queries.properties"));
         } catch (IOException ioe) {
-            throw new Error(ioe);
+            throw new ExceptionInInitializerError(ioe);
         }
     }
 

File: src/org/opensolaris/opengrok/history/SCCSget.java
Patch:
@@ -39,8 +39,7 @@ public static InputStream getRevision(String command, File file, String revision
         argv.add("get");
         argv.add("-p");
         if (revision != null) {
-            argv.add("-r");
-            argv.add(revision);
+            argv.add("-r"+revision);
         }
         argv.add(file.getCanonicalPath());
 

File: test/org/opensolaris/opengrok/history/BazaarHistoryParserTest.java
Patch:
@@ -23,7 +23,6 @@
  */
 package org.opensolaris.opengrok.history;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import org.junit.After;
@@ -149,6 +148,7 @@ public void parseLogNoFile() throws Exception {
     }
     
     @Test
+    @SuppressWarnings("unchecked")
     public void parseLogDirectory() throws Exception {
         String revId1 = "1234";
         String author1 = "username@example.com";

File: test/org/opensolaris/opengrok/index/IndexerTest.java
Patch:
@@ -134,7 +134,7 @@ public void testRFE2575() throws Exception {
         List<RepositoryInfo> repos = env.getRepositories();
         Repository r = null;
         for (RepositoryInfo ri : repos) {
-            if (ri.getDirectoryName().equals(repository.getSourceRoot())) {
+            if (ri.getDirectoryName().equals(repository.getSourceRoot()+"/rfe2575")) {
                 r = RepositoryFactory.getRepository(ri);
                 break;
             }
@@ -156,8 +156,9 @@ public void testRFE2575() throws Exception {
             idb.addIndexChangedListener(listener);
             idb.update();
             assertEquals(1, listener.files.size());
+            RuntimeEnvironment.getInstance().setIndexVersionedFilesOnly(false);
         } else {
-            System.out.println("Skipping test. Could not find a ctags or an sccs I could use in path.");
+            System.out.println("Skipping test. Repository for rfe2575 not found or could not find a ctags or an sccs I could use in path.");
         }
     }
     

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -191,7 +191,7 @@ public String getManPage() throws IOException {
      * 
      * @return an iterator to iterate through all of the command line options
      */
-    public Iterator<Option> getOptionsIterator() {
+    Iterator<Option> getOptionsIterator() {
         return options.iterator();
     }
     

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -539,10 +539,10 @@ private void storeHistory(ConnectionResource conn, History history,
         for (ListIterator<HistoryEntry> it =
                 entries.listIterator(entries.size());
                 it.hasPrevious();) {
+            HistoryEntry entry = it.previous();
             retry:
             for (int i = 0;; i++) {
                 try {
-                    HistoryEntry entry = it.previous();
                     addChangeset.setString(2, entry.getRevision());
                     addChangeset.setInt(3, authors.get(entry.getAuthor()));
                     addChangeset.setTimestamp(4,

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -182,7 +182,7 @@ public void initialize() throws HistoryException {
 
     private static final PreparedQuery IS_DIR_IN_CACHE = new PreparedQuery(
             "SELECT 1 FROM REPOSITORIES R WHERE R.PATH = ? AND EXISTS " +
-            "(SELECT 1 FROM FILES F WHERE F.ID = R.ID AND " +
+            "(SELECT 1 FROM FILES F WHERE F.REPOSITORY = R.ID AND " +
             "F.PATH LIKE ? ESCAPE '#')");
 
     // We do check the return value from ResultSet.next(), but PMD doesn't

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -134,12 +134,12 @@ public void testStoreAndGet() throws Exception {
         HistoryEntry e1 = entryIt.next();
         assertEquals(TROND, e1.getAuthor());
         assertEquals("2:585a1b3f2efb", e1.getRevision());
-        // TODO: assertEquals(2, e1.getFiles().size());
+        assertEquals(2, e1.getFiles().size());
 
         HistoryEntry e2 = entryIt.next();
         assertEquals(TROND, e2.getAuthor());
         assertEquals("1:f24a5fd7a85d", e2.getRevision());
-        // TODO: assertEquals(3, e2.getFiles().size());
+        assertEquals(3, e2.getFiles().size());
     }
 
     /**

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -62,9 +62,9 @@ public final class HistoryGuru {
      */
     private HistoryGuru() {
         HistoryCache cache = null;
-        if (RuntimeEnvironment.getInstance().useHistoryCache()) {
-            if (Boolean.getBoolean("org.opensolaris.opengrok.useJdbcCache")) {
-                // for testing only
+        RuntimeEnvironment env = RuntimeEnvironment.getInstance();
+        if (env.useHistoryCache()) {
+            if (env.storeHistoryCacheInDB()) {
                 cache = new JDBCHistoryCache();
             } else {
                 cache = new FileHistoryCache();

File: test/org/opensolaris/opengrok/history/JDBCHistoryCacheTest.java
Patch:
@@ -120,9 +120,8 @@ public void testStoreAndGet() throws Exception {
 
         cache.store(historyToStore, repos);
 
-        // TODO: Why reposRoot + mercurial? That's not where the file is.
-        File makefile = new File(new File(reposRoot, "mercurial"), "Makefile");
-        // fails: assertTrue(makefile.exists());
+        File makefile = new File(reposRoot, "Makefile");
+        assertTrue(makefile.exists());
 
         History retrievedHistory = cache.get(makefile, repos);
 

File: src/org/opensolaris/opengrok/analysis/sh/Consts.java
Patch:
@@ -112,6 +112,7 @@ public class Consts{
         shkwd.add( "autoload" );
         shkwd.add( "builtin" );
         shkwd.add( "command" );
+        shkwd.add( "compound" );
         shkwd.add( "redirect" );
         shkwd.add( "my" );
         shkwd.add( "next" );

File: test/org/opensolaris/opengrok/history/CVSRepositoryTest.java
Patch:
@@ -97,7 +97,7 @@ public void getHistoryParser() {
     public void getDirectoryHistoryParser() {
         Class<? extends HistoryParser> expResult = CVSHistoryParser.class;
         //Class<? extends HistoryParser> result = instance.getDirectoryHistoryParser();
-		result = null;
+		Class result = null;
         assertEquals(expResult, result);
     }
 

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -46,7 +46,7 @@ class BazaarHistoryParser implements HistoryParser, Executor.StreamHandler {
     private String myDir;
     private int rootLength;
     private History history;
-    private BazaarRepository repository;
+    private BazaarRepository repository=BazaarRepository();
 
     public History parse(File file, Repository repos) throws HistoryException {
         myDir = repos.getDirectoryName()+ File.separator;

File: src/org/opensolaris/opengrok/history/CVSHistoryParser.java
Patch:
@@ -46,7 +46,7 @@ private enum ParseState {
     };      
 
     private History history;
-    private CVSRepository repository;
+    private CVSRepository repository=new CVSRepository();
 
    /**
      * Process the output from the log command and insert the HistoryEntries

File: src/org/opensolaris/opengrok/history/ClearCaseHistoryParser.java
Patch:
@@ -39,7 +39,7 @@
 class ClearCaseHistoryParser implements HistoryParser, Executor.StreamHandler {
 
     private History history;
-    private ClearCaseRepository repository;
+    private ClearCaseRepository repository=ClearCaseRepository();
 
     public History parse(File file, Repository repos) throws HistoryException {
         repository = (ClearCaseRepository)repos;

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -50,7 +50,7 @@ private enum ParseState {
     private String myDir;
     private int rootLength;
     private History history;
-    private GitRepository repository;
+    private GitRepository repository=GitRepository();
     
    /**
      * Process the output from the log command and insert the HistoryEntries

File: src/org/opensolaris/opengrok/history/RazorHistoryParser.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class RazorHistoryParser implements HistoryParser {
 
-    private RazorRepository repository;
+    private RazorRepository repository=RazorRepository();
 
     private final static Pattern ACTION_TYPE_PATTERN =
             Pattern.compile("^(INTRODUCE|CHECK-OUT|CHECK-IN|UN-CHECK-OUT|RENAME|EDIT_PROPS|ALTERED|CHECK-POINT|REVERT|INTRODUCE_AND_EDIT|BRANCH|BUMP|MERGE-CHECK-IN|PROMOTE)\\s+(\\S*)\\s+([\\.0-9]+)?\\s+(\\S*)\\s+(\\S*)\\s*$");

File: test/org/opensolaris/opengrok/history/CVSRepositoryTest.java
Patch:
@@ -96,7 +96,8 @@ public void getHistoryParser() {
     @Test
     public void getDirectoryHistoryParser() {
         Class<? extends HistoryParser> expResult = CVSHistoryParser.class;
-        Class<? extends HistoryParser> result = instance.getDirectoryHistoryParser();
+        //Class<? extends HistoryParser> result = instance.getDirectoryHistoryParser();
+		result = null;
         assertEquals(expResult, result);
     }
 

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -51,7 +51,7 @@ public class CVSRepository extends RCSRepository {
 
     public CVSRepository() {
         type = "CVS";
-        datePattern = "yyyy-mm-dd hh:mm:ss";
+        datePattern = "yyyy-MM-dd hh:mm:ss";
     }
     
    /**

File: src/org/opensolaris/opengrok/history/CVSHistoryParser.java
Patch:
@@ -85,6 +85,7 @@ public void processStream(InputStream input) throws IOException {
 
                     if ("date".equals(key)) {
                         try {
+                            val = val.replace('/', '-');
                             entry.setDate(df.parse(val));
                         } catch (ParseException pe) {
                             OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to parse date: '" + val + "'", pe);

File: src/org/opensolaris/opengrok/history/CVSRepository.java
Patch:
@@ -42,12 +42,12 @@
 public class CVSRepository extends RCSRepository {
 
     private static ScmChecker cvsBinary = new ScmChecker(new String[]{
-                getCommand(), "--help"
+                getCommand(), "--version"
             });
 
     public CVSRepository() {
         type = "CVS";
-        datePattern = "yyyy-mm-dd hh:mm:ss ZZZZ";
+        datePattern = "yyyy-mm-dd hh:mm:ss";
     }
     
    /**
@@ -126,7 +126,7 @@ public Class<? extends HistoryParser> getHistoryParser() {
 
     @Override
     public Class<? extends HistoryParser> getDirectoryHistoryParser() {
-        return CVSHistoryParser.class;
+        return null;
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/JDBCHistoryCache.java
Patch:
@@ -214,6 +214,7 @@ private static String getRelativePath(File file, Repository repository)
             "SELECT CS.REVISION, A.NAME, CS.TIME, CS.MESSAGE " +
             "FROM CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, " +
             "FILES F, AUTHORS A WHERE R.PATH = ? AND F.PATH = ? AND " +
+            "F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND " +
             "CS.ID = FC.CHANGESET AND R.ID = CS.REPOSITORY AND " +
             "FC.FILE = F.ID AND A.ID = CS.AUTHOR ORDER BY FC.ID");
 

File: src/org/opensolaris/opengrok/history/RazorHistoryParser.java
Patch:
@@ -45,7 +45,7 @@ public class RazorHistoryParser implements HistoryParser {
     private final static SimpleDateFormat DATE_TIME_FORMAT =
             new SimpleDateFormat("yyyy/MM/dd,hh:mm:ss", Locale.US);
     private final static Pattern ACTION_TYPE_PATTERN =
-            Pattern.compile("^(INTRODUCE|CHECK-OUT|CHECK-IN|UN-CHECK-OUT|RENAME|EDIT_PROPS|ALTERED|CHECK-POINT|REVERT|INTRODUCE_AND_EDIT|BRANCH|BUMP|MERGE-CHECK-IN|PROMOTE)\\s+(.*)\\s+([\\.0-9]+)?\\s+(.*)\\s+(.*)\\s*$");
+            Pattern.compile("^(INTRODUCE|CHECK-OUT|CHECK-IN|UN-CHECK-OUT|RENAME|EDIT_PROPS|ALTERED|CHECK-POINT|REVERT|INTRODUCE_AND_EDIT|BRANCH|BUMP|MERGE-CHECK-IN|PROMOTE)\\s+(\\S*)\\s+([\\.0-9]+)?\\s+(\\S*)\\s+(\\S*)\\s*$");
     private final static Pattern ADDITIONAL_INFO_PATTERN =
             Pattern.compile("^##(TITLE|NOTES|AUDIT|ISSUE):\\s+(.*)\\s*$");
     private final static boolean DUMP_HISTORY_ENTRY_ADDITIONS = false;
@@ -85,7 +85,7 @@ private History parseFile(File file, Repository repository)
     }
 
     @SuppressWarnings("PMD.ConfusingTernary")
-    private History parseContents(BufferedReader contents) throws IOException {
+    protected History parseContents(BufferedReader contents) throws IOException {
         String line;
 
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();

File: src/org/opensolaris/opengrok/history/RazorRepository.java
Patch:
@@ -363,7 +363,7 @@ private void createCacheHelper(HistoryCache cache)
                 hist.setHistoryEntries(e.getValue());
                 File file = new File(root, e.getKey());
                 if (!file.isDirectory()) {
-                    cache.store(hist, file);
+                    cache.store(hist, file, this);
                 }
             }
         }

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -154,7 +154,7 @@ private void createCacheHelper(HistoryCache cache)
                 hist.setHistoryEntries(e.getValue());
                 File file = new File(root, e.getKey());
                 if (!file.isDirectory()) {
-                    cache.store(hist, file);
+                    cache.store(hist, file, this);
                 }
             }
         }

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -105,6 +105,7 @@ public Definitions doCtags(String file) throws IOException {
             //log.fine("doing >" + file + "<");
             ctagsIn.write(file);
             ctagsIn.flush();
+            ret = new Definitions();
             readTags(ret);
         }
 
@@ -196,7 +197,7 @@ private void readTags(Definitions defs) {
             //log.fine("Read = " + def + " : " + lnum + " = " + kind + " IS " + inher + " M " + match);
             } while (true);
         } catch (Exception e) {
-            log.log(Level.FINE, "CTags parsing problem: ", e);
+            log.log(Level.WARNING, "CTags parsing problem: ", e);
         }
         log.severe("CTag reader cycle was interrupted!");
     }

File: test/org/opensolaris/opengrok/management/OGAgentTest.java
Patch:
@@ -100,8 +100,8 @@ public void disableConsoleLogging() throws Exception {
         System.setOut(printer);
         System.setErr(printer);
 
-        OGAgent oga = new OGAgent();
-        oga.runOGA();
+        OGAgent.main(new String[0]); // ) oga = new OGAgent();
+        //oga.runOGA();
         assertTrue(baos.toString().contains("Logging to " + logDirName));
         baos.reset();
         String loggedMessage = "Should go to console!";

File: test/org/opensolaris/opengrok/management/client/AgentConnectionTest.java
Patch:
@@ -55,8 +55,9 @@ public void testAgentConnection() throws Exception {
         File logDir = FileUtilities.createTemporaryDirectory("logdir");
         System.setProperty("org.opensolaris.opengrok.management.logging.path",
                            logDir.getAbsolutePath());
-        OGAgent oga = new OGAgent();
-        oga.runOGA();
+//        OGAgent oga = new OGAgent();
+//        oga.runOGA();
+        OGAgent.main(new String[0]);
         String url = InetAddress.getLocalHost().getHostName() + ":" + 9292;
         AgentConnection ac = new AgentConnection(url);
         assertFalse("Shouldn't be connected", ac.isConnected());

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -85,7 +85,7 @@ public static Repository getRepository(File file) throws InstantiationException,
     /**
      * Returns a repository for the given file, or null if no repository was found.
      *
-     * @param file File that might contain a repository
+     * @param info Information about the repository
      * @return Correct repository for the given file
      */
     public static Repository getRepository(RepositoryInfo info) throws InstantiationException, IllegalAccessException {

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -37,7 +37,6 @@
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.List;
 import org.opensolaris.opengrok.history.RepositoryInfo;
 import org.opensolaris.opengrok.index.IgnoredNames;

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -450,10 +450,10 @@ public void invalidateRepositories(List<RepositoryInfo> repos) {
         for (RepositoryInfo i : repos) {
             try {
                 Repository r = RepositoryFactory.getRepository(i);
-                if (r != null) {
-                    nrep.put(r.getDirectoryName(), r);
-                } else {
+                if (r == null) {
                     log.warning("Failed to instanciate internal repository data for " + i.getType() + " in " + i.getDirectoryName());
+                } else {
+                    nrep.put(r.getDirectoryName(), r);
                 }
             } catch (InstantiationException ex) {
                 log.log(Level.WARNING, "Could not create " + i.getType() + " for '" + i.getDirectoryName() + "', could not instantiate the repository.", ex);

File: src/org/opensolaris/opengrok/history/RepositoryFactory.java
Patch:
@@ -29,7 +29,6 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import org.opensolaris.opengrok.OpenGrokLogger;
-import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  * This is a factory class for the different repositories.

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -45,6 +45,7 @@
 import org.opensolaris.opengrok.analysis.archive.TarAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.archive.ZipAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.c.CAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.c.CxxAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.data.IgnorantAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.data.ImageAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.document.TroffAnalyzerFactory;
@@ -120,6 +121,7 @@ public class AnalyzerGuru {
             ZipAnalyzerFactory.DEFAULT_INSTANCE,
             new TarAnalyzerFactory(),
             new CAnalyzerFactory(),
+            new CxxAnalyzerFactory(),
             new ShAnalyzerFactory(),
             PlainAnalyzerFactory.DEFAULT_INSTANCE,
             new GZIPAnalyzerFactory(),

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -387,7 +387,6 @@ public void prepareIndexer(RuntimeEnvironment env,
             if (env.isVerbose()) {
                 System.out.println("Scanning for repositories...");
             }
-            env.getRepositories().clear();
             long start = System.currentTimeMillis();
             HistoryGuru.getInstance().addRepositories(env.getSourceRootPath());
             long time = (System.currentTimeMillis() - start) / 1000;

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -310,11 +310,11 @@ public boolean fileHasHistory(File file) {
     }
 
     @Override
-    boolean isRepositoryFor( File file) {
+    boolean isRepositoryFor(File file) {
         // if the parent contains a file named "view.dat" or
         // the parent is named "vobs"
         File f = new File(file, "view.dat");
-        if (f.exists() && f.isDirectory()) {
+        if (f.exists()) {
             return true;
         } else {
             return file.isDirectory() && file.getName().equalsIgnoreCase("vobs");

File: src/org/opensolaris/opengrok/management/AgentIndexRunner.java
Patch:
@@ -81,8 +81,7 @@ private AgentIndexRunner(boolean enabledParam) {
 
     /**
      * Static factory method to get an instance of AgentIndexRunner.
-     * @param enabledParam if true, the initial instance of the purgatory will
-     * have purging enabled.
+     * @param enabledParam if true, the initial instance should be running or not
      */
     @SuppressWarnings("PMD.AvoidSynchronizedAtMethodLevel")
     public static synchronized AgentIndexRunner getInstance(boolean enabledParam) {

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -234,7 +234,7 @@ public void update() throws IOException {
                     directories.add(project.getPath());
                 }
             }
-            
+
             for (String dir : directories) {
                 File sourceRoot;
                 if ("".equals(dir)) {
@@ -243,6 +243,8 @@ public void update() throws IOException {
                     sourceRoot = new File(RuntimeEnvironment.getInstance().getSourceRootFile(), dir);
                 }
                 
+                HistoryGuru.getInstance().ensureHistoryCacheExists(sourceRoot);
+
                 String startuid = Util.uid(dir, "");
                 IndexReader reader = IndexReader.open(indexDirectory);		 // open existing index
                 try {

File: src/org/opensolaris/opengrok/management/client/ConfigurationsFrame.java
Patch:
@@ -73,8 +73,6 @@ public ConfigurationsFrame(AgentConnection ac) throws IOException {
         } catch (MalformedObjectNameException ex) {
             logger.log(Level.SEVERE, "MalformedObjectName", ex);
             throw new IOException("Malformedname " + ex);
-        } catch (NullPointerException ex) {
-            logger.log(Level.SEVERE, "NullPointer", ex);
         }
         initComponents();
         createLogLevelCombos();

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -137,7 +137,6 @@ private void initSaxParser() {
      * @param repos Pointer to the SubversionReporitory
      * @return object representing the file's history
      */
-    @Override
     public History parse(File file, Repository repos) throws HistoryException {
         initSaxParser();
         handler = new Handler(repos.getDirectoryName(), 

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -157,6 +157,7 @@ public void processStream(InputStream input) throws IOException {
             entries.add(entry);
         }
 
+        history = new History();
         history.setHistoryEntries(entries);
     }
     

File: src/org/opensolaris/opengrok/history/PerforceHistoryParser.java
Patch:
@@ -98,7 +98,7 @@ public static List<HistoryEntry> getRevisions(File file, String rev) throws IOEx
      * Parse the history for the specified file.
      *
      * @param file the file to parse history for
-     * @param repository Pointer to the PerforceReporitory
+     * @param repos Pointer to the {@code PerforceRepository}
      * @return object representing the file's history
      * @throws HistoryException if a problem occurs while executing p4 command
      */

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -119,7 +119,7 @@ public void testProjects() throws IOException {
     }
 
     @Test
-    public void testRegister() throws InterruptedException {
+    public void testRegister() throws InterruptedException, IOException {
         RuntimeEnvironment instance = RuntimeEnvironment.getInstance();
         String path = "/tmp/dataroot";
         instance.setDataRoot(path);
@@ -134,7 +134,7 @@ public void run() {
         });
         t.start();
         t.join();
-        assertEquals(path, instance.getDataRootPath());
+        assertEquals(new File(path).getCanonicalFile().getAbsolutePath(), instance.getDataRootPath());
     }
 
     @Test

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -430,7 +430,7 @@ private void removeFile() throws IOException {
         }
         File parent = xrefFile.getParentFile();
 
-        if (!xrefFile.delete()) {
+        if (!xrefFile.delete() && xrefFile.exists()) {
             log.info("Failed to remove obsolete xref-file: " +
                     xrefFile.getAbsolutePath());
         }

File: src/org/opensolaris/opengrok/history/SubversionRepository.java
Patch:
@@ -48,7 +48,7 @@
 /**
  * Access to a Subversion repository.
  *
- * @todo The current implementation does <b>not</b> support nestet
+ * <b>TODO</b> The current implementation does <b>not</b> support nested
  * repositories as described in http://svnbook.red-bean.com/en/1.0/ch07s03.html
  *
  * @author Trond Norbye

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -39,7 +39,7 @@ public class SettingsFrame extends javax.swing.JFrame {
 
     /** 
      * Creates new form SettingsFrame 
-     * @param SettingsPersistence settings to start and save with
+     * @param sp settings to start and save with
      */
     public SettingsFrame(SettingsPersistence sp) {
         properties = sp;

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -316,7 +316,7 @@ private void createCache(Repository repository) {
         }
     }
 
-    private void createCache(ArrayList<Repository> repositories) {
+    private void createCacheReal(List<Repository> repositories) {
         for (Repository repos : repositories) {
             createCache(repos);
         }
@@ -330,7 +330,7 @@ public void createCache() {
         for (Map.Entry<String, Repository> entry : RuntimeEnvironment.getInstance().getRepositories().entrySet()) {
             repos.add(entry.getValue());
         }
-        createCache(repos);
+        createCacheReal(repos);
     }
 
     public void createCache(List<String> repositories) {
@@ -345,7 +345,7 @@ public void createCache(List<String> repositories) {
                 repos.add(r);
             }
         }
-        createCache(repos);
+        createCacheReal(repos);
     }
 
     

File: src/org/opensolaris/opengrok/web/EftarFileReader.java
Patch:
@@ -122,6 +122,7 @@ public String toString() {
             try {
                 tagString = getTag();
             } catch (IOException e) {
+                tagString = null;
             }
             return "H[" + hash + "] num = " + numChildren + " tag = " + tagString;
         }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -537,7 +537,8 @@ public void run() {
         while (!executor.isTerminated()) {
             try {
                 // Wait forever
-                executor.awaitTermination(999, TimeUnit.DAYS);
+                // @newjdk : 999,TimeUnit.DAYS
+                executor.awaitTermination(999*60*60*24, TimeUnit.SECONDS);
             } catch (InterruptedException exp) {
                 OpenGrokLogger.getLogger().log(Level.WARNING, "Received interrupt while waiting for executor to finish", exp);
             }

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -153,6 +153,7 @@ public static String breadcrumbPath(String urlPrefix, String l, char sep) {
                 hyperl.append(anchorLinkStart);
                 hyperl.append(urlPrefix);
                 hyperl.append(l.substring(0, e));
+                hyperl.append("/");
                 hyperl.append(closeQuotedTag);
                 hyperl.append(l.substring(s, e));
                 hyperl.append(anchorEnd);
@@ -196,8 +197,8 @@ public static void readableLine(int num, Writer out, Annotation annotation)
         out.write(closeQuotedTag);
         out.write((num > 999 ? "   " : (num > 99 ? "    " : (num > 9 ? "     " : "      "))));
         out.write(snum);
-        out.write(anchorEnd);
         out.write(" ");
+        out.write(anchorEnd);
         if (annotation != null) {
             String r = annotation.getRevision(num);
             boolean enabled = annotation.isEnabled(num);

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -26,10 +26,8 @@
 import java.beans.XMLDecoder;
 import java.beans.XMLEncoder;
 import java.io.BufferedInputStream;
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -113,7 +113,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
                 return null;
             }
 
-            ret = new BufferedInputStream(new FileInputStream(tmp) {
+            ret = new BufferedInputStream(new FileInputStream(tmp)) {
 
                 public void close() throws IOException {
                     super.close();
@@ -124,7 +124,7 @@ public void close() throws IOException {
                         tmp.deleteOnExit();
                     }
                 }
-            });
+            };
         } catch (Exception exp) {
             OpenGrokLogger.getLogger().log(Level.SEVERE, "Failed to get history: " + exp.getClass().toString(), exp);
         } finally {

File: test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java
Patch:
@@ -81,6 +81,7 @@ public void testDataRoot() throws IOException {
         String path = f.getCanonicalPath();
         assertTrue(f.delete());
         instance.setDataRoot(path);
+        assertTrue(f.delete());
         assertEquals(path, instance.getDataRootPath());
         assertEquals(path, instance.getDataRootFile().getCanonicalPath());
     }

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzer.java
Patch:
@@ -48,7 +48,7 @@ public SQLAnalyzer(FileAnalyzerFactory factory) {
     public void writeXref(Writer out) throws IOException {
         xref.reInit(content, len);
         xref.project = project;
-        // @TODO xref.setDefs(defs);
+        xref.setDefs(defs);
         xref.write(out);
     }
 

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -135,7 +135,9 @@ public void writeXref(File xrefDir, String path) throws IOException {
             if (compressed) {
                 out = new GZIPOutputStream(out);
             }
-            writeXref(new BufferedWriter(new OutputStreamWriter(out)));
+            Writer w = new BufferedWriter(new OutputStreamWriter(out));
+            writeXref(w);
+            w.close();
         } finally {
             out.close();
         }

File: src/org/opensolaris/opengrok/history/RCSRepository.java
Patch:
@@ -59,7 +59,9 @@ boolean fileHasHistory(File file) {
     @Override
     InputStream getHistoryGet(String parent, String basename, String rev) {
         try {
-            return new RCSget(new File(parent, basename).getPath(), rev);
+            File file = new File(parent, basename);
+            File rcsFile = getRCSFile(file);
+            return new RCSget(rcsFile.getPath(), rev);
         } catch (IOException ioe) {
             OpenGrokLogger.getLogger().log(Level.SEVERE, 
                     "Failed to retrieve revision " + rev + " of " + basename, ioe);

File: test/org/opensolaris/opengrok/history/PerforceRepositoryTest.java
Patch:
@@ -123,7 +123,7 @@ public void testHistoryAndAnnotations() throws Exception {
         for (File f : files) {
             if (instance.fileHasHistory(f)) {
                 History history = parser.parse(f, instance);
-                assertNotNull(history);
+                assertNotNull("Failed to get history for: " + f.getAbsolutePath(), history);
                 HistoryReader reader = new HistoryReader(history);
 
                 while (reader.next()) {
@@ -132,7 +132,7 @@ public void testHistoryAndAnnotations() throws Exception {
                     in.close();
 
                     if (instance.fileHasAnnotation(f)) {
-                        assertNotNull(instance.annotate(f, reader.getRevision()));
+                        assertNotNull("Failed to annotate: " + f.getAbsolutePath(), instance.annotate(f, reader.getRevision()));
                     }
                 }
                 reader.close();

File: src/org/opensolaris/opengrok/history/RCSget.java
Patch:
@@ -25,7 +25,6 @@
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
-import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -285,14 +285,16 @@ public void updateRepositories() {
             String type = repository.getClass().getSimpleName();
 
             if (!repository.isWorking()) {
-                OpenGrokLogger.getLogger().warning("Skipping " + type + " repository in " + path + ": Missing SCM dependencies?");
+                OpenGrokLogger.getLogger().warning("Skipping update of " + type + " repository in " + path + ": Missing SCM dependencies?");
             } else {
                 if (verbose) {
                     OpenGrokLogger.getLogger().info("Update " + type + " repository in " + path);
                 }
 
                 try {
                     repository.update();
+                } catch (UnsupportedOperationException e) {
+                    OpenGrokLogger.getLogger().warning("Skipping update of " + type + " repository in " + path + ": Not implemented");
                 } catch (Exception e) {
                     OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while updating " + path + " (" + type + ")", e);
                 }

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -118,7 +118,9 @@ public File getDataRootFile() {
     public void setDataRoot(String dataRoot) {
         final File file = new File(dataRoot);
         if (!file.exists()) {
-           file.mkdirs();
+            if (!file.mkdirs()) {
+                OpenGrokLogger.getLogger().log(Level.SEVERE, "Failed to create dataroot: " + dataRoot);
+            }
         }
         threadConfig.get().setDataRoot(getCanonicalPath(dataRoot));
     }

File: src/org/opensolaris/opengrok/analysis/archive/BZip2AnalyzerFactory.java
Patch:
@@ -36,7 +36,7 @@ public class BZip2AnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public BZip2AnalyzerFactory() {
-        super(SUFFIXES, MAGICS, null, null, null);
+        super(null, SUFFIXES, MAGICS, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/archive/GZIPAnalyzerFactory.java
Patch:
@@ -37,7 +37,7 @@ public class GZIPAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public GZIPAnalyzerFactory() {
-        super(SUFFIXES, MAGICS, null, null, null);
+        super(null, SUFFIXES, MAGICS, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzerFactory.java
Patch:
@@ -34,7 +34,7 @@ public class TarAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TarAnalyzerFactory() {
-        super(SUFFIXES, null, null, null, Genre.XREFABLE);
+        super(null, SUFFIXES, null, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzerFactory.java
Patch:
@@ -99,7 +99,7 @@ public FileAnalyzerFactory isMagic(byte[] contents, InputStream in)
             new ZipAnalyzerFactory();
 
     private ZipAnalyzerFactory() {
-        super(SUFFIXES, null, MATCHER, null, Genre.XREFABLE);
+        super(null, SUFFIXES, null, MATCHER, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -57,7 +57,7 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public CAnalyzerFactory() {
-        super(SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/data/IgnorantAnalyzerFactory.java
Patch:
@@ -43,7 +43,7 @@ public class IgnorantAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public IgnorantAnalyzerFactory() {
-        super(SUFFIXES, MAGICS, null, null, null);
+        super(null, SUFFIXES, MAGICS, null, null, null);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/data/ImageAnalyzerFactory.java
Patch:
@@ -37,7 +37,7 @@ public class ImageAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ImageAnalyzerFactory() {
-        super(SUFFIXES, null, null, null, Genre.IMAGE);
+        super(null, SUFFIXES, null, null, null, Genre.IMAGE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class TroffAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TroffAnalyzerFactory() {
-        super(null, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, null, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzerFactory.java
Patch:
@@ -34,7 +34,7 @@ public class ELFAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public ELFAnalyzerFactory() {
-        super(null, MAGICS, null, null, Genre.XREFABLE);
+        super(null, null, MAGICS, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzerFactory.java
Patch:
@@ -38,7 +38,7 @@ public final class JarAnalyzerFactory extends FileAnalyzerFactory {
 
     private JarAnalyzerFactory() {
         // no magics for jar files, ZipAnalyzerFactory will handle it for us
-        super(SUFFIXES, null, null, null, Genre.XREFABLE);
+        super(null, SUFFIXES, null, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class JavaClassAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JavaClassAnalyzerFactory() {
-        super(SUFFIXES, MAGICS, null, null, Genre.XREFABLE);
+        super(null, SUFFIXES, MAGICS, null, null, Genre.XREFABLE);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -43,7 +43,7 @@ public class JavaAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public JavaAnalyzerFactory() {
-        super(SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -42,7 +42,7 @@ public class LispAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public LispAnalyzerFactory() {
-        super(SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -62,7 +62,7 @@ public FileAnalyzerFactory isMagic(byte[] content, InputStream in) {
             new PlainAnalyzerFactory();
 
     private PlainAnalyzerFactory() {
-        super(null, null, MATCHER, "text/plain", Genre.PLAIN);
+        super(null, null, null, MATCHER, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -45,7 +45,7 @@ public class XMLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public XMLAnalyzerFactory() {
-        super(SUFFIXES, MAGICS, null, "text/html", Genre.PLAIN);
+        super(null, SUFFIXES, MAGICS, null, "text/html", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -39,7 +39,7 @@ public class SQLAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public SQLAnalyzerFactory() {
-        super(SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -46,7 +46,7 @@ public class TclAnalyzerFactory extends FileAnalyzerFactory {
     };
 
     public TclAnalyzerFactory() {
-        super(SUFFIXES, null, null, "text/plain", Genre.PLAIN);
+        super(null, SUFFIXES, null, null, "text/plain", Genre.PLAIN);
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/BazaarHistoryParser.java
Patch:
@@ -56,7 +56,7 @@ public History parse(File file, Repository repos)
             }
 
             SimpleDateFormat df =
-                    new SimpleDateFormat("EEE yyyy-MM-dd hh:mm:ss ZZZZ", Locale.getDefault());
+                    new SimpleDateFormat("EEE yyyy-MM-dd hh:mm:ss ZZZZ", Locale.US);
             ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
 
             String mydir = mrepos.getDirectoryName() + File.separator;

File: src/org/opensolaris/opengrok/history/ClearCaseHistoryParser.java
Patch:
@@ -35,7 +35,7 @@
  * Parse a stream of ClearCase log comments.
  */
 class ClearCaseHistoryParser implements HistoryParser {
-    private static final SimpleDateFormat FORMAT = new SimpleDateFormat("yyyyMMdd.HHmmss", Locale.getDefault());
+    private static final SimpleDateFormat FORMAT = new SimpleDateFormat("yyyyMMdd.HHmmss", Locale.US);
 
     public History parse(File file, Repository repos)
             throws IOException {

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -62,7 +62,7 @@ public History parse(File file, Repository repos)
             }
 
             SimpleDateFormat df =
-                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ", Locale.getDefault());
+                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ", Locale.US);
             ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
 
             InputStream is = process.getInputStream();

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -56,7 +56,7 @@ public History parse(File file, Repository repos)
             }
             
             SimpleDateFormat df =
-                    new SimpleDateFormat("yyyy-MM-dd hh:mm ZZZZ", Locale.getDefault());
+                    new SimpleDateFormat("yyyy-MM-dd hh:mm ZZZZ", Locale.US);
             ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
             
             InputStream is = process.getInputStream();

File: src/org/opensolaris/opengrok/history/RazorHistoryParser.java
Patch:
@@ -42,7 +42,7 @@
 public class RazorHistoryParser implements HistoryParser {
 
     private final static SimpleDateFormat DATE_TIME_FORMAT =
-            new SimpleDateFormat("yyyy/MM/dd,hh:mm:ss", Locale.getDefault());
+            new SimpleDateFormat("yyyy/MM/dd,hh:mm:ss", Locale.US);
     private final static Pattern ACTION_TYPE_PATTERN =
             Pattern.compile("^(INTRODUCE|CHECK-OUT|CHECK-IN|UN-CHECK-OUT|RENAME|EDIT_PROPS|ALTERED|CHECK-POINT|REVERT|INTRODUCE_AND_EDIT|BRANCH|BUMP|MERGE-CHECK-IN|PROMOTE)\\s+(.*)\\s+([\\.0-9]+)?\\s+(.*)\\s+(.*)\\s*$");
     private final static Pattern ADDITIONAL_INFO_PATTERN =

File: src/org/opensolaris/opengrok/history/SCCSHistoryParser.java
Patch:
@@ -68,7 +68,7 @@ public History parse(File file, Repository repos)
         passRecord = true;
         active = true;
         field = 0;
-        sccsDateFormat =  new SimpleDateFormat("yy/MM/dd", Locale.getDefault());
+        sccsDateFormat =  new SimpleDateFormat("yy/MM/dd", Locale.US);
 
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
         while (next()) {

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -54,7 +54,7 @@ private static class Handler extends DefaultHandler2 {
         final String home;
         final int length;
         final List<HistoryEntry> entries = new ArrayList<HistoryEntry>();
-        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault());
+        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US);
         HistoryEntry entry;
         StringBuilder sb;
 

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -76,7 +76,7 @@ public void listTo(File dir, Writer out) throws IOException {
      * @throws java.io.IOException
      *
      */
-    public List listTo(File dir, Writer out, String path, String[] files) throws IOException {
+    public List<String> listTo(File dir, Writer out, String path, String[] files) throws IOException {
         Arrays.sort(files, String.CASE_INSENSITIVE_ORDER);
         boolean alt = true;
         Format dateFormatter = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -95,6 +95,7 @@ public CommandLineOptions() {
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
         options.add(new Option('T', "number", "The number of threads to use for index generation. By default the number of threads will be set to the number of available CPUs"));
         options.add(new Option('?', null, "Help"));
+        options.add(new Option('V', null, "Print version and quit"));
     }
 
     public String getCommandString() {

File: src/org/opensolaris/opengrok/OpenGrokLogger.java
Patch:
@@ -65,7 +65,7 @@ public static String setupLogger(String logpath, Level filelevel, Level consolel
         } else {
             logfile = new StringBuffer(logpath);
         }
-        logfile.append(File.separatorChar).append("opengrok%g.%u").append(".log");
+        logfile.append(File.separatorChar).append("opengrok%g.%u.log");
         try {
             FileHandler fh = new FileHandler(logfile.toString(),
                     LOGFILESIZELIMIT, // size (unlimited)

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -55,7 +55,7 @@ private static void populateKeywordSet(Set<String> set, String file)
         try {
             while ((line = reader.readLine()) != null) {
                 line = line.trim().toLowerCase(Locale.US);
-                if (!line.startsWith("#")) {
+                if (line.charAt(0) != '#') {
                     set.add(line);
                 }
             }

File: src/org/opensolaris/opengrok/history/RCSHistoryParser.java
Patch:
@@ -108,7 +108,7 @@ protected static File getCVSFile(String parent, String name) {
                 if (root.canRead()) {
                     BufferedReader rootReader = new BufferedReader(new FileReader(root));
                     String cvsroot = rootReader.readLine();
-                    if (cvsroot != null && cvsroot.startsWith("/")) {
+                    if (cvsroot != null && cvsroot.charAt(0) == '/') {
                         File repository = new File(CVSdir, "Repository");
                         BufferedReader repoReader = new BufferedReader(new FileReader(repository));
                         String repo = repoReader.readLine();

File: src/org/opensolaris/opengrok/history/RazorHistoryParser.java
Patch:
@@ -156,7 +156,7 @@ public History parse(File file, Repository repository) throws IOException {
                             parseDebug("Ignoring Info Type Line '" + line + "'");
                         }
                     } else {
-                        if (!line.startsWith("##") && line.startsWith("#")) {
+                        if (!line.startsWith("##") && line.charAt(0) == '#') {
                             parseDebug("Seen Comment : '" + line + "'");
                             if (lastWasTitle) {
                                 entry.appendMessage("");

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -198,11 +198,12 @@ private synchronized void initialize() throws IOException {
      * @param dir The directory to scan
      * @return <code>true</code> if the file is added, false oth
      */
+    @SuppressWarnings("PMD.UseStringBufferForStringAppends")
     public boolean addDirectory(String dir) {
         String directory = dir;
         if (directory.startsWith("\\")) {
             directory = directory.replace('\\', '/');
-        } else if (!directory.startsWith("/")) {
+        } else if (directory.charAt(0) != '/') {
             directory = "/" + directory;
         }
         File file = new File(RuntimeEnvironment.getInstance().getSourceRootFile(), directory);

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -62,6 +62,7 @@ public static Indexer getInstance() {
      * Program entry point
      * @param argv argument vector
      */
+    @SuppressWarnings("PMD.UseStringBufferForStringAppends")
     public static void main(String argv[]) {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         boolean runIndex = true;
@@ -124,7 +125,7 @@ public static void main(String argv[]) {
                     case 'c': env.setCtags(getopt.getOptarg()); break;
                     case 'w': {
                         String webapp = getopt.getOptarg();
-                        if (!webapp.startsWith("/") && !webapp.startsWith("http")) {
+                        if (webapp.charAt(0) != '/' && !webapp.startsWith("http")) {
                             webapp = "/" + webapp;
                         }
                         if (webapp.endsWith("/")) {

File: src/org/opensolaris/opengrok/management/OGAgent.java
Patch:
@@ -159,7 +159,7 @@ private void createIndexTimer(Properties properties) throws IOException, JMExcep
         server.invoke(timer, "start", null, null);
         log.info("Started timer service");
 
-        boolean enabled = Boolean.valueOf(properties.getProperty("org.opensolaris.opengrok.management.indexer.enabled")).booleanValue();
+        boolean enabled = Boolean.parseBoolean(properties.getProperty("org.opensolaris.opengrok.management.indexer.enabled"));
         int period = Integer.parseInt(properties.getProperty("org.opensolaris.opengrok.management.indexer.sleeptime"));
         log.fine("Indexer enabled: " + enabled);
         log.fine("Indexer period: " + period + " seconds");

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -56,7 +56,7 @@ public History parse(File file, Repository repos)
             }
             
             SimpleDateFormat df =
-                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ", Locale.getDefault());
+                    new SimpleDateFormat("yyyy-MM-dd hh:mm ZZZZ", Locale.getDefault());
             ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
             
             InputStream is = process.getInputStream();

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -64,9 +64,9 @@ Process getHistoryLogProcess(File file) throws IOException {
         
         String argv[];
         if (file.isDirectory()) {
-            argv = new String[] {getCommand(), "log", "-v", filename};
+            argv = new String[] {getCommand(), "log", "--template", "changeset:   {rev}:{node|short}\\n{branches}{tags}{parents}user:        {author}\\ndate:        {date|isodate}\\n{files}{file_copies}\\ndescription:\\n{desc|strip}\\n\\n\\n", filename};
         } else {
-            argv = new String[] {getCommand(), "log", filename};
+            argv = new String[] {getCommand(), "log", "--template", "changeset:   {rev}:{node|short}\\n{branches}{tags}{parents}user:        {author}\\ndate:        {date|isodate}\\ndescription:\\n{desc|strip}\\n\\n", filename};
         }
 
         File directory = new File(getDirectoryName());

File: src/org/opensolaris/opengrok/analysis/List2TokenStream.java
Patch:
@@ -23,7 +23,6 @@
  */
 package org.opensolaris.opengrok.analysis;
 
-import java.util.LinkedList;
 import java.util.List;
 import java.util.NoSuchElementException;
 import org.apache.lucene.analysis.Token;

File: src/org/opensolaris/opengrok/history/HistoryReader.java
Patch:
@@ -52,8 +52,9 @@ public class HistoryReader extends Reader {
     private Reader input;
 
     HistoryReader() {
+        // So that DirectoryHistoryReader can inherit this class
     }
-
+    
     HistoryReader(History history) {
         entries = history.getHistoryEntries();
         iterator = entries.iterator();

File: src/org/opensolaris/opengrok/search/Summary.java
Patch:
@@ -87,9 +87,6 @@ public static class Ellipsis extends Fragment {
     
     private static final Fragment[] FRAGMENT_PROTO = new Fragment[0];
     
-    /** Constructs an empty Summary.*/
-    public Summary() {}
-    
     /** Adds a fragment to a summary.*/
     public void add(Fragment fragment) { fragments.add(fragment); }
     

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -86,7 +86,7 @@ public Genre getGenre() {
         return factory.getGenre();
     }
 
-    private HistoryAnalyzer hista;
+    private final HistoryAnalyzer hista;
     /** Creates a new instance of FileAnalyzer */
     public FileAnalyzer(FileAnalyzerFactory factory) {
         this.factory = factory;

File: src/org/opensolaris/opengrok/analysis/Hash2TokenStream.java
Patch:
@@ -64,5 +64,6 @@ public Token next() {
     
     @Override
     public void close() {
+        // Nothing to close
     }
 }

File: src/org/opensolaris/opengrok/analysis/TagFilter.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.FilterReader;
 import java.io.Reader;
 import java.util.HashMap;
+import java.util.Map;
 
 /**
  * A reader that reads only plain text from a HTML or XML file
@@ -39,7 +40,7 @@ public class TagFilter extends FilterReader {
     private int esc;
     private boolean p;
     private char[] esctag;
-    private final HashMap<String, Character> escs;
+    private final Map<String, Character> escs;
 
     public TagFilter(Reader in) {
         super(in);

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -49,7 +49,6 @@
 public class ELFAnalyzer extends FileAnalyzer {
     private char[] content;
     private int len;
-    private int[] readables;
     PlainFullTokenizer plainfull;
     StringReader dummy = new StringReader("");
     
@@ -99,7 +98,7 @@ public void parseELF(FileInputStream f) throws IOException, Exception {
 	shstrtab = fmap.getInt(eh.e_shoff + (eh.e_shstrndx) * eh.e_shentsize + 16);
 	fmap.position(eh.e_shoff);
 	sections = new ELFSection[eh.e_shnum];
-	readables = new int[eh.e_shnum];
+	int[] readables = new int[eh.e_shnum];
 	int ri = 0;
 	for(int i = 0 ; i< eh.e_shnum; i++) {
 	    sections[i] = new ELFSection(fmap);

File: src/org/opensolaris/opengrok/history/Annotation.java
Patch:
@@ -25,14 +25,15 @@
 package org.opensolaris.opengrok.history;
 
 import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Class representing file annotation, i.e., revision and author for the last
  * modification of each line in the file.
  */
 public class Annotation {
 
-    private final ArrayList<Line> lines = new ArrayList<Line>();
+    private final List<Line> lines = new ArrayList<Line>();
     private int widestRevision;
     private int widestAuthor;
     private final String filename;

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.logging.Level;
 import org.apache.lucene.document.DateTools;
 import org.apache.lucene.document.Document;
@@ -53,7 +54,7 @@
  */
 public class DirectoryHistoryReader extends HistoryReader {
 
-    public LinkedHashMap<Date, HashMap<String, HashMap<String, ArrayList<String>>>> hash = new LinkedHashMap<Date, HashMap<String, HashMap<String, ArrayList<String>>>>();
+    public HashMap<Date, HashMap<String, HashMap<String, ArrayList<String>>>> hash = new LinkedHashMap<Date, HashMap<String, HashMap<String, ArrayList<String>>>>();
     Iterator<Date> diter;
     Date idate;
     Iterator<String> aiter;
@@ -228,7 +229,7 @@ public String getComment() {
     }
 
     @Override
-    public ArrayList<String> getFiles() {
+    public List<String> getFiles() {
         return hash.get(idate).get(iauthor).get(icomment);
     }
 

File: src/org/opensolaris/opengrok/history/HistoryEntry.java
Patch:
@@ -40,7 +40,10 @@ public class HistoryEntry {
     private String revision;
     private Date date;
     private String author;
+
+    @SuppressWarnings("PMD.AvoidStringBufferField")
     private final StringBuffer message;
+
     private boolean active;
     private List<String> files;
     private List<String> changeRequests;

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -29,6 +29,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Locale;
 import java.util.logging.Level;
 import javax.xml.parsers.ParserConfigurationException;
@@ -52,7 +53,7 @@ private static class Handler extends DefaultHandler2 {
         final String prefix;
         final String home;
         final int length;
-        final ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
+        final List<HistoryEntry> entries = new ArrayList<HistoryEntry>();
         final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault());
         HistoryEntry entry;
         StringBuilder sb;

File: src/org/opensolaris/opengrok/index/IndexChangedListener.java
Patch:
@@ -34,10 +34,10 @@ public interface IndexChangedListener {
      * @param path The path to the file (absolute from source root)
      * @param analyzer The analyzer being used to analyze the file
      */
-    public void fileAdded(String path, String analyzer);
+    void fileAdded(String path, String analyzer);
     /**
      * A file is being removed from the index database
      * @param path The path to the file (absolute from source root)
      */
-    public void fileRemoved(String path);
+    void fileRemoved(String path);
 }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -326,8 +326,8 @@ public void prepareIndexer(RuntimeEnvironment env,
            boolean refreshHistory,
            boolean listFiles,
            boolean createDict,
-           ArrayList<String> subFiles,
-           ArrayList<String> repositories) throws IndexerException,IOException {
+           List<String> subFiles,
+           List<String> repositories) throws IndexerException,IOException {
                 
                 if (env.getDataRootPath()  == null) {
                     throw new IndexerException("ERROR: Please specify a DATA ROOT path");

File: src/org/opensolaris/opengrok/management/client/AgentConnection.java
Patch:
@@ -44,7 +44,7 @@ public class AgentConnection implements NotificationListener {
 
     private MBeanServerConnection server = null;
     private final ObjectName objName;
-    private final String objStrName = "OGA:name=AgentIndexRunner,source=timer";
+    private static final String objStrName = "OGA:name=AgentIndexRunner,source=timer";
     private static final Logger logger = Logger.getLogger("org.opensolaris.opengrok");
     private String agenturl = "";
     private JMXConnector jmxconn = null; // TODO: Set to private

File: src/org/opensolaris/opengrok/management/client/NotificationsFrame.java
Patch:
@@ -27,6 +27,7 @@
  *
  * @author  Jan S Berg
  */
+@SuppressWarnings("PMD.SingularField")
 public class NotificationsFrame extends javax.swing.JFrame {
 
     private static final long serialVersionUID = -7314367696755820002L;

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -31,6 +31,7 @@
  *
  * @author  Jan S Berg
  */
+@SuppressWarnings("PMD.SingularField")
 public class SettingsFrame extends javax.swing.JFrame {
 
     private static final long serialVersionUID = -5229330170574558105L;

File: src/org/opensolaris/opengrok/search/Summary.java
Patch:
@@ -16,6 +16,7 @@
 package org.opensolaris.opengrok.search;
 
 import java.util.ArrayList;
+import java.util.List;
 
 /** A document summary dynamically generated to match a query. */
 public class Summary {
@@ -82,7 +83,7 @@ public static class Ellipsis extends Fragment {
         public String toString() { return "<b> ... </b>"; }
     }
     
-    private final ArrayList<Fragment> fragments = new ArrayList<Fragment>();
+    private final List<Fragment> fragments = new ArrayList<Fragment>();
     
     private static final Fragment[] FRAGMENT_PROTO = new Fragment[0];
     

File: src/org/opensolaris/opengrok/search/context/TokenSetMatcher.java
Patch:
@@ -23,11 +23,11 @@
  */
 package org.opensolaris.opengrok.search.context;
 
-import java.util.HashSet;
+import java.util.Set;
 
 public class TokenSetMatcher extends LineMatcher {
-    private final HashSet tokenSet;
-    public TokenSetMatcher(HashSet tokenSet) {
+    private final Set tokenSet;
+    public TokenSetMatcher(Set tokenSet) {
         this.tokenSet  = tokenSet;
     }
     

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
+import java.util.List;
 import java.util.Locale;
 import java.util.logging.Level;
 import org.opensolaris.opengrok.OpenGrokLogger;
@@ -75,7 +76,7 @@ public void listTo(File dir, Writer out) throws IOException {
      * @throws java.io.IOException
      *
      */
-    public ArrayList listTo(File dir, Writer out, String path, String[] files) throws IOException {
+    public List listTo(File dir, Writer out, String path, String[] files) throws IOException {
         Arrays.sort(files, String.CASE_INSENSITIVE_ORDER);
         boolean alt = true;
         Format dateFormatter = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());

File: src/org/opensolaris/opengrok/web/EftarFile.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.RandomAccessFile;
+import java.util.Map;
 import java.util.StringTokenizer;
 import java.util.TreeMap;
 import java.util.logging.Level;
@@ -61,7 +62,7 @@ class Node {
 
         public long hash;
         public String tag;
-        public java.util.TreeMap<Long, Node> children;
+        public Map<Long, Node> children;
         public long tagOffset;
         public long childOffset;
         public long myOffset;

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -87,7 +87,7 @@ public Definitions doCtags(String file) throws IOException {
             initialize();
         }
 
-        if (file.length() > 0 && !file.equals("\n")) {
+        if (file.length() > 0 && !"\n".equals(file)) {
             //log.fine("doing >" + file + "<");
             ctagsIn.write(file);
             ctagsIn.flush();
@@ -116,7 +116,7 @@ private void readTags(Definitions defs) {
                     return ;
                 }
                 
-                if (tagLine.equals("__ctags_done_with_file__")) {
+                if ("__ctags_done_with_file__".equals(tagLine)) {
                     return;
                 }
                 int p = tagLine.indexOf('\t');

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -94,6 +94,7 @@ public FileAnalyzer(FileAnalyzerFactory factory) {
     }
     
     public void analyze(Document doc, InputStream in) {
+        // not used
     }
     
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/analysis/Hash2TokenStream.java
Patch:
@@ -62,6 +62,7 @@ public Token next() {
 	}
     }
     
+    @Override
     public void close() {
     }
 }

File: src/org/opensolaris/opengrok/analysis/HistoryAnalyzer.java
Patch:
@@ -31,7 +31,7 @@
 import org.opensolaris.opengrok.analysis.plain.PlainFullTokenizer;
 
 public final class HistoryAnalyzer extends Analyzer {
-    private Set stopWords;
+    private final Set stopWords;
     
     /** An array containing some common English words that are not usually useful
     for searching. */

File: src/org/opensolaris/opengrok/analysis/TagFilter.java
Patch:
@@ -39,7 +39,8 @@ public class TagFilter extends FilterReader {
     private int esc;
     private boolean p;
     private char[] esctag;
-    private HashMap<String, Character> escs;
+    private final HashMap<String, Character> escs;
+
     public TagFilter(Reader in) {
         super(in);
         pass = true;

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzer.java
Patch:
@@ -51,7 +51,8 @@ public class TarAnalyzer extends FileAnalyzer {
     
     private static final Reader dummy = new StringReader("");
     
-    private PlainFullTokenizer plainfull;
+    private final PlainFullTokenizer plainfull;
+
     protected TarAnalyzer(FileAnalyzerFactory factory) {
         super(factory);
         content = new char[64*1024];

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzer.java
Patch:
@@ -50,7 +50,7 @@ public class ZipAnalyzer extends FileAnalyzer {
 
     private static final Reader dummy = new StringReader("");
     
-    private PlainFullTokenizer plainfull;
+    private final PlainFullTokenizer plainfull;
 
     protected ZipAnalyzer(FileAnalyzerFactory factory) {
         super(factory);

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -47,8 +47,8 @@ public class TroffAnalyzer extends FileAnalyzer {
     private char[] content;
     private int len;
     
-    private TroffFullTokenizer troffull;
-    private TroffXref xref;
+    private final TroffFullTokenizer troffull;
+    private final TroffXref xref;
     Reader dummy = new StringReader("");
     /**
      * Creates a new instance of TroffAnalyzer

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -349,9 +349,11 @@ public String toString() {
 	    int type = st_info & 0xf;
 	    String stype = " NULL ";
 	    switch(type) {
-		case 2 : stype = " FUNCTION "; break;
 		case 1 : stype = " OBJECT "; break;
+		case 2 : stype = " FUNCTION "; break;
 		case 4 : stype = " FILE "; break;
+                default:
+                    stype = "NULL"; break;
 	    }
 	    return(" st_name : " + st_name + "(" + st_size + ") = " + st_value + stype);
 	}

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -110,10 +110,10 @@ public void analyze(Document doc, InputStream in) {
 		}
 	    }
 	    doc.add(new Field("full", new TagFilter(new StringReader(fullText.toString()))));
-	    if(defs.size() > 0) {
+	    if(!defs.isEmpty()) {
 		doc.add(new Field("defs",dummy));
 	    }
-	    if(refs.size() > 0) {
+	    if(!refs.isEmpty()) {
 		doc.add(new Field("refs",dummy));
 	    }
 	} catch (IOException e) {

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -70,7 +70,7 @@
  * @author Chandan
  */
 public class JavaClassAnalyzer extends FileAnalyzer {
-    private String urlPrefix = RuntimeEnvironment.getInstance().getUrlPrefix();
+    private final String urlPrefix = RuntimeEnvironment.getInstance().getUrlPrefix();
    
     /** Creates a new instance of JavaClassAnalyzer */
     protected JavaClassAnalyzer(FileAnalyzerFactory factory) {
@@ -83,7 +83,7 @@ protected JavaClassAnalyzer(FileAnalyzerFactory factory) {
     private String xref;
     private String fullText;
     private JavaClass c;
-    private Reader dummy = new StringReader("");
+    private final Reader dummy = new StringReader("");
 
     public void analyze(Document doc, InputStream in) {
         defs = new LinkedList<String>();
@@ -270,7 +270,7 @@ public void getContent(Writer out) throws IOException {
                 }
             }
             out.write("\n");
-            if (locals.size()>0) {
+            if (!locals.isEmpty()) {
                 for(LocalVariable[] ls: locals) {
                     for(LocalVariable l: ls) {
                         printLocal(out, l);

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -50,9 +50,9 @@
 public class PlainAnalyzer extends FileAnalyzer {
     protected char[] content;
     protected int len;
-    private PlainFullTokenizer plainfull;
-    private PlainSymbolTokenizer plainref;
-    private PlainXref xref;
+    private final PlainFullTokenizer plainfull;
+    private final PlainSymbolTokenizer plainref;
+    private final PlainXref xref;
     private static final Reader dummy = new StringReader(" ");
     private Ctags ctags;
     protected Definitions defs;

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzer.java
Patch:
@@ -47,8 +47,8 @@ public class XMLAnalyzer extends FileAnalyzer {
     
     private char[] content;
     private int len;
-    private PlainFullTokenizer plainfull;
-    private XMLXref xref;
+    private final PlainFullTokenizer plainfull;
+    private final XMLXref xref;
     private static final Reader dummy = new StringReader("");
     
     /**

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -49,7 +49,7 @@
  */
 public final class RuntimeEnvironment {
     private Configuration configuration;
-    private ThreadLocal<Configuration> threadConfig;
+    private final ThreadLocal<Configuration> threadConfig;
     
     private static final Logger log = Logger.getLogger(RuntimeEnvironment.class.getName());
     
@@ -160,7 +160,7 @@ public void setSourceRoot(String sourceRoot) {
      */
     public boolean hasProjects() {
         List<Project> proj = getProjects();
-        return (proj != null && proj.size() > 0);
+        return (proj != null && !proj.isEmpty());
     }
     
     /**

File: src/org/opensolaris/opengrok/history/Annotation.java
Patch:
@@ -35,7 +35,7 @@ public class Annotation {
     private final ArrayList<Line> lines = new ArrayList<Line>();
     private int widestRevision;
     private int widestAuthor;
-    private String filename;
+    private final String filename;
     
     public Annotation(String filename) {
         this.filename = filename;

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -177,6 +177,7 @@ public final void put(Date date, String author, String comment, String path) {
 
     @Override
     public void close() {
+        // don't close input
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/GitHistoryParser.java
Patch:
@@ -32,6 +32,7 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.Locale;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
@@ -59,7 +60,7 @@ public History parse(File file, Repository repos)
             }
 
             SimpleDateFormat df =
-                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ");
+                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ", Locale.getDefault());
             ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
 
             InputStream is = process.getInputStream();

File: src/org/opensolaris/opengrok/history/HistoryEntry.java
Patch:
@@ -40,7 +40,7 @@ public class HistoryEntry {
     private String revision;
     private Date date;
     private String author;
-    private StringBuffer message;
+    private final StringBuffer message;
     private boolean active;
     private List<String> files;
     private List<String> changeRequests;

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -32,6 +32,7 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.Locale;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
@@ -53,7 +54,7 @@ public History parse(File file, Repository repos)
             }
             
             SimpleDateFormat df =
-                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ");
+                    new SimpleDateFormat("EEE MMM dd hh:mm:ss yyyy ZZZZ", Locale.getDefault());
             ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
             
             InputStream is = process.getInputStream();

File: src/org/opensolaris/opengrok/history/RazorDirectoryHistoryParser.java
Patch:
@@ -59,7 +59,7 @@ public History parse(File directory, Repository repository) throws Exception {
     private void traverse(File directory, RazorRepository repo, HistoryEntry entry) throws Exception {
 
         for (String filename : directory.list()) {
-            if (!filename.equals(".razor")) {
+            if (!".razor".equals(filename)) {
                 File file = new File(directory, filename);
                 File mappedFile = repo.getRazorHistoryFileFor(file);
                 String opengrokName = repo.getOpenGrokFileNameFor(file);

File: src/org/opensolaris/opengrok/history/SCCSHistoryParser.java
Patch:
@@ -33,6 +33,7 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.Locale;
 
 /**
  * Reads and filters out junk from a SCCS history file
@@ -67,7 +68,7 @@ public History parse(File file, Repository repos)
         passRecord = true;
         active = true;
         field = 0;
-        sccsDateFormat =  new SimpleDateFormat("yy/MM/dd");
+        sccsDateFormat =  new SimpleDateFormat("yy/MM/dd", Locale.getDefault());
 
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
         while (next()) {

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -29,6 +29,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Locale;
 import java.util.logging.Level;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
@@ -52,7 +53,7 @@ private static class Handler extends DefaultHandler2 {
         final String home;
         final int length;
         final ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
-        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
+        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault());
         HistoryEntry entry;
         StringBuilder sb;
 
@@ -94,7 +95,7 @@ public void endElement(String uri, String localName, String qname) throws SAXExc
                 }
             } else if ("msg".equals(qname)) {
                 entry.setMessage(s);
-            } if (qname.equals("logentry")) {
+            } if ("logentry".equals(qname)) {
                 entries.add(entry);
             }
             sb.setLength(0);

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -62,7 +62,7 @@ public String getUsage() {
             return sb.toString();
         }
     }
-    private List<Option> options;
+    private final List<Option> options;
 
     public CommandLineOptions() {
         options = new ArrayList<Option>();

File: src/org/opensolaris/opengrok/index/DefaultIndexChangedListener.java
Patch:
@@ -34,7 +34,7 @@
 @SuppressWarnings("PMD.SystemPrintln")
 class DefaultIndexChangedListener implements IndexChangedListener {
 
-    private boolean verbose;
+    private final boolean verbose;
 
     DefaultIndexChangedListener() {
         verbose = RuntimeEnvironment.getInstance().isVerbose();

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -235,7 +235,7 @@ public void update() throws Exception {
             writer = new IndexWriter(indexDirectory, AnalyzerGuru.getAnalyzer());
             writer.setMaxFieldLength(RuntimeEnvironment.getInstance().getIndexWordLimit());
 
-            if (directories.size() == 0) {
+            if (directories.isEmpty()) {
                 if (project != null) {
                     directories.add(project.getPath());
                 } else {
@@ -245,7 +245,7 @@ public void update() throws Exception {
             
             for (String dir : directories) {
                 File sourceRoot;
-                if (dir.equals("")) {
+                if ("".equals(dir)) {
                     sourceRoot = RuntimeEnvironment.getInstance().getSourceRootFile();
                 } else {
                     sourceRoot = new File(RuntimeEnvironment.getInstance().getSourceRootFile(), dir);

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -421,7 +421,7 @@ public int compare(Project p1, Project p2){
                 
                 if (refreshHistory) {
                     HistoryGuru.getInstance().createCache();
-                } else if (repositories != null && repositories.size() > 0) {
+                } else if (repositories != null && !repositories.isEmpty()) {
                     HistoryGuru.getInstance().createCache(repositories);
                 }
 

File: src/org/opensolaris/opengrok/management/NotificationHolder.java
Patch:
@@ -31,9 +31,9 @@
  */
 public class NotificationHolder {
 
-    private NotificationListener notl = null;
-    private Object obNL = null;
-    private NotificationFilter nfilt = null;
+    private final NotificationListener notl;
+    private final Object obNL;
+    private final NotificationFilter nfilt;
 
     public NotificationHolder(NotificationListener nl, NotificationFilter nf, Object obj) {
         notl = nl;

File: src/org/opensolaris/opengrok/management/client/AgentConnection.java
Patch:
@@ -43,8 +43,8 @@
 public class AgentConnection implements NotificationListener {
 
     private MBeanServerConnection server = null;
-    private ObjectName objName = null;
-    private String objStrName = "OGA:name=AgentIndexRunner,source=timer";
+    private final ObjectName objName;
+    private final String objStrName = "OGA:name=AgentIndexRunner,source=timer";
     private static final Logger logger = Logger.getLogger("org.opensolaris.opengrok");
     private String agenturl = "";
     private JMXConnector jmxconn = null; // TODO: Set to private

File: src/org/opensolaris/opengrok/management/client/OpenGrokTrayApp.java
Patch:
@@ -45,7 +45,7 @@ public class OpenGrokTrayApp {
 
     private static TrayIcon trayIcon;
     private static String cfgfile;
-    private SettingsPersistence settings;
+    private final SettingsPersistence settings;
     private final static Logger log = OpenGrokLogger.getLogger();
     public static final String OPENGROKICONURL = "opengrok.gif";
     public static final String INDEXWARNINGICONURL = "opengrok_indexwarning.gif";

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -34,7 +34,7 @@
 public class SettingsFrame extends javax.swing.JFrame {
 
     private static final long serialVersionUID = -5229330170574558105L;
-    private SettingsPersistence properties;
+    private final SettingsPersistence properties;
 
     /** 
      * Creates new form SettingsFrame 

File: src/org/opensolaris/opengrok/management/client/SettingsPersistence.java
Patch:
@@ -40,7 +40,7 @@ public class SettingsPersistence {
     public final static String LOGGINGPATHKEY = "org.opensolaris.opengrok.management.logging.path";
     public final static String FILELOGLEVELKEY = "org.opensolaris.opengrok.management.logging.filelevel";
     public final static String CONSOLELOGLEVELKEY = "org.opensolaris.opengrok.management.logging.consolelevel";
-    private Properties ogcProperties = new Properties();
+    private final Properties ogcProperties = new Properties();
     private File propertyFile;
     private boolean existingSettings = false;
 

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -52,7 +52,7 @@ public class Summarizer {
     /** Converts text to tokens. */
     private final Analyzer analyzer;
     
-    private HashSet<String> highlight = new HashSet<String>();            // put query terms in table
+    private final HashSet<String> highlight = new HashSet<String>();            // put query terms in table
     
     public Summarizer(Query query, Analyzer a) {
         analyzer = a;

File: src/org/opensolaris/opengrok/search/Summary.java
Patch:
@@ -40,7 +40,7 @@ public static String htmlize(String q) {
     
     /** A fragment of text within a summary. */
     public static class Fragment {
-        private String text;
+        private final String text;
         
         /** Constructs a fragment for the given text. */
         public Fragment(String text) { this.text = text; }
@@ -82,7 +82,7 @@ public static class Ellipsis extends Fragment {
         public String toString() { return "<b> ... </b>"; }
     }
     
-    private ArrayList<Fragment> fragments = new ArrayList<Fragment>();
+    private final ArrayList<Fragment> fragments = new ArrayList<Fragment>();
     
     private static final Fragment[] FRAGMENT_PROTO = new Fragment[0];
     

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -52,7 +52,7 @@
 
 
 public class Context {
-    private LineMatcher[] m;
+    private final LineMatcher[] m;
     static final int MAXFILEREAD = 32768;
     private char[] buffer;
     PlainLineTokenizer tokens;

File: src/org/opensolaris/opengrok/search/context/HistoryContext.java
Patch:
@@ -48,7 +48,7 @@
  * since lucene does not easily give the match context.
  */
 public class HistoryContext {
-    private LineMatcher[] m;
+    private final LineMatcher[] m;
     HistoryLineTokenizer tokens;
     private static Set<String> tokenFields = new HashSet<String>(1);
     static {

File: src/org/opensolaris/opengrok/search/context/PrefixMatcher.java
Patch:
@@ -27,7 +27,7 @@
  * Matches a term against a prefix
  */
 public class PrefixMatcher extends LineMatcher {
-    private String prefix;
+    private final String prefix;
     public PrefixMatcher(String prefix) {
         this.prefix  = prefix;
     }

File: src/org/opensolaris/opengrok/search/context/SingleTokenMatcher.java
Patch:
@@ -24,7 +24,7 @@
 package org.opensolaris.opengrok.search.context;
 
 public class SingleTokenMatcher extends LineMatcher {
-    private String mt;
+    private final String mt;
     public SingleTokenMatcher(String token) {
         this.mt = token;
     }

File: src/org/opensolaris/opengrok/search/context/TokenSetMatcher.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.HashSet;
 
 public class TokenSetMatcher extends LineMatcher {
-    private HashSet tokenSet;
+    private final HashSet tokenSet;
     public TokenSetMatcher(HashSet tokenSet) {
         this.tokenSet  = tokenSet;
     }

File: src/org/opensolaris/opengrok/util/Getopt.java
Patch:
@@ -39,7 +39,7 @@ static class Option {
         String argument;
     };
     
-    private ArrayList<Option> options;
+    private final ArrayList<Option> options;
     private int current;
     private int optind;
     private String[] argv;

File: src/org/opensolaris/opengrok/web/EftarFileReader.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class EftarFileReader {
 
-    private RandomAccessFile f;
+    private final RandomAccessFile f;
 
     class FNode {
 

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -53,6 +53,7 @@ public class CAnalyzerFactory extends FileAnalyzerFactory {
         "XS",                   // Mainly found in perl directories
         "X",                    // rpcgen input files
         "PHP",
+        "HXX",
     };
 
     public CAnalyzerFactory() {

File: src/org/opensolaris/opengrok/util/Executor.java
Patch:
@@ -66,7 +66,7 @@ public void exec() {
             stdout.join();
             stderr.join();
             stdoutString = stdout.getString();
-            stderrString = stdout.getString();
+            stderrString = stderr.getString();
         } catch (IOException e) {
             OpenGrokLogger.getLogger().log(Level.SEVERE, 
                     "Failed to read from process: " + cmdList.get(0), e);

File: src/org/opensolaris/opengrok/analysis/Definitions.java
Patch:
@@ -106,7 +106,7 @@ public List<Tag> getTags() {
     /**
      * Class that represents a single tag.
      */
-    private static class Tag implements Serializable {
+    public static class Tag implements Serializable {
         /** Line number of the tag. */
         public final int line;
         /** The symbol used in the definition. */

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -190,7 +190,7 @@ public InputStream getRevision(String parent, String basename, String rev) throw
      */
     public boolean hasHistory(File file) {
         Repository repos = getRepository(file);
-        return repos != null && repos.fileHasHistory(file);
+        return repos != null && repos.isWorking() && repos.fileHasHistory(file);
     }
 
     /**
@@ -203,7 +203,7 @@ public boolean hasHistory(File file) {
     public boolean hasAnnotation(File file) {
         if (!file.isDirectory()) {
             Repository repos = getRepository(file);
-            if (repos != null) {
+            if (repos != null && repos.isWorking()) {
                 return repos.fileHasAnnotation(file);
             }
         }

File: src/org/opensolaris/opengrok/analysis/Definitions.java
Patch:
@@ -106,7 +106,7 @@ public List<Tag> getTags() {
     /**
      * Class that represents a single tag.
      */
-    public static class Tag implements Serializable {
+    private static class Tag implements Serializable {
         /** Line number of the tag. */
         public final int line;
         /** The symbol used in the definition. */

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -594,7 +594,7 @@ public void writeConfiguration(InetAddress host, int port) throws IOException {
         try {
             sock.close();
         } catch (Exception ex) {
-            ;
+            log.log(Level.INFO, "Couldn't close socket after writing configuration.", ex);
         }
     }
 
@@ -611,7 +611,7 @@ public void setConfiguration(Configuration configuration) {
     public void stopConfigurationListenerThread() {
         try {
             configServerSocket.close();
-        } catch (Exception e) { log.log(Level.FINE,"Stopping config listener thread: ",e); }
+        } catch (Exception e) { log.log(Level.FINE, "Stopping config listener thread: ", e); }
     }
     
     /**
@@ -649,7 +649,7 @@ public void run() {
                         } catch (IOException e) {
                             log.log(Level.FINE,"Error reading config file: ",e);
                         } finally {
-                            try { s.close(); } catch (Exception ex) { log.log(Level.FINE,"Interrupt closing config listener reader socket: ",ex); }
+                            try { s.close(); } catch (Exception ex) { log.log(Level.FINE, "Interrupt closing config listener reader socket: ", ex); }
                         }
                     }
                 }

File: src/org/opensolaris/opengrok/history/ClearCaseHistoryParser.java
Patch:
@@ -68,7 +68,9 @@ public History parse(File file, Repository repos)
 
                 entry = new HistoryEntry();
                 if ((s = in.readLine()) != null) {
-                    entry.setDate(FORMAT.parse(s));
+                    synchronized (FORMAT) {
+                        entry.setDate(FORMAT.parse(s));
+                    }
                 }
                 if ((s = in.readLine()) != null) {
                     entry.setAuthor(s);

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -256,6 +256,7 @@ private int waitFor(Process process) {
         } while (true);
     }
 
+    @SuppressWarnings("PMD.EmptyWhileStmt")
     public void update() throws Exception {
         Process process = null;
         BufferedReader in = null;

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -104,6 +104,7 @@ public Annotation annotate(File file, String rev) throws Exception {
      * @throws java.io.IOException If an error occurs while trying to access the filesystem
      * @return A HistorReader that may be used to read out history data for a named file
      */
+    @SuppressWarnings("PMD.AvoidRethrowingException")
     public HistoryReader getHistoryReader(File file) throws IOException {
         if (file.isDirectory()) {
             return getDirectoryHistoryReader(file);
@@ -136,6 +137,7 @@ public HistoryReader getHistoryReader(File file) throws IOException {
      * @throws java.io.IOException If an error occurs while trying to access the filesystem
      * @return A HistorReader that may be used to read out history data for a named file
      */
+    @SuppressWarnings("PMD.AvoidRethrowingException")
     private HistoryReader getDirectoryHistoryReader(File file) throws IOException {
         Class<? extends HistoryParser> parser = null;
         Repository repos = getRepository(file);

File: src/org/opensolaris/opengrok/history/Repository.java
Patch:
@@ -174,6 +174,7 @@ void createCache(HistoryCache cache) throws Exception {
      * 
      * @return true if this repository supports sub repositories
      */
+    @SuppressWarnings("PMD.EmptyMethodInAbstractClassShouldBeAbstract")
     boolean supportsSubRepositories() {
         return false;
     }

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -124,9 +124,7 @@ public static void main(String argv[]) {
                     case 'c': env.setCtags(getopt.getOptarg()); break;
                     case 'w': {
                         String webapp = getopt.getOptarg();
-                        if (webapp.startsWith("/") || webapp.startsWith("http")) {
-                            ;
-                        } else {
+                        if (!webapp.startsWith("/") && !webapp.startsWith("http")) {
                             webapp = "/" + webapp;
                         }
                         if (webapp.endsWith("/")) {

File: src/org/opensolaris/opengrok/management/Management.java
Patch:
@@ -200,6 +200,7 @@ public void setSubFiles(String[] sublist) {
         this.subFiles = (sublist == null) ? null : (String[]) sublist.clone();
     }
 
+    @SuppressWarnings("PMD.MethodReturnsInternalArray")
     public String[] getSubFiles() {
         return (subFiles == null) ? null : (String[]) subFiles.clone();
     }

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -244,7 +244,6 @@ public void more(int start, int end, List<Hit> ret) {
                                 }
                             }
                         } else {
-                            System.out.println(genre);
                             OpenGrokLogger.getLogger().warning("Unknown genre: " + genre);
                             hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
                         }

File: src/org/opensolaris/opengrok/OpenGrokLogger.java
Patch:
@@ -37,6 +37,7 @@
  * 
  * @author Jan S Berg
  */
+@SuppressWarnings({"PMD.MoreThanOneLogger", "PMD.SystemPrintln"})
 public class OpenGrokLogger {
 
     private static int LOGFILESIZELIMIT = 1000000;

File: src/org/opensolaris/opengrok/analysis/TagFilter.java
Patch:
@@ -113,8 +113,9 @@ public static boolean isSpace(int ch) {
                 (1L << 0x000D) |
                 (1L << 0x0020)) >> ch) & 1L) != 0);
     }
-    
-    public static void main(String[] args) throws Throwable {
+
+@SuppressWarnings("PMD.SystemPrintln")
+public static void main(String[] args) throws Throwable {
         BufferedReader r = new BufferedReader(new TagFilter(new FileReader(args[0])));
         String l;
         while ((l = r.readLine())!= null) {

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -196,6 +196,7 @@ public Iterator<Option> getOptionsIterator() {
      * 
      * @param argv argument vector. not used.
      */
+    @SuppressWarnings("PMD.SystemPrintln")
     public static void main(String[] argv) {
         CommandLineOptions co = new CommandLineOptions();
         try {

File: src/org/opensolaris/opengrok/index/DefaultIndexChangedListener.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @author Trond Norbye
  */
+@SuppressWarnings("PMD.SystemPrintln")
 class DefaultIndexChangedListener implements IndexChangedListener {
 
     private boolean verbose;

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -49,6 +49,7 @@
  * as well as generates Xref, file stats etc., if specified
  * in the options
  */
+@SuppressWarnings({"PMD.AvoidPrintStackTrace","PMD.SystemPrintln"})
 public class Indexer {
    
    private static Indexer index = new Indexer();

File: src/org/opensolaris/opengrok/management/OGAgent.java
Patch:
@@ -59,6 +59,7 @@ public class OGAgent {
     private MBeanServer server = null;
     private static OGAgent oga = null;
 
+    @SuppressWarnings("PMD.SystemPrintln")
     public static void main(final String args[]) {
 
         for (int i = 0; i < args.length; i++) {

File: src/org/opensolaris/opengrok/management/client/NotificationsFrame.java
Patch:
@@ -136,6 +136,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
       pack();
    }// </editor-fold>//GEN-END:initComponents
 
+@SuppressWarnings("unused")
 private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
 // TODO add your handling code here:
     this.dispose();

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -246,6 +246,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
         pack();
     }// </editor-fold>//GEN-END:initComponents
 
+@SuppressWarnings("unused")
 private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
 // TODO add your handling code here:
     saveSettings();

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Search and list the matching files
  */
+@SuppressWarnings({"PMD.AvoidPrintStackTrace","PMD.SystemPrintln"})
 final class Search {
 
     /**

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -350,6 +350,7 @@ private void getPrefix(PrefixQuery query) {
      * Tests Summary-generation.  User inputs the name of a
      * text file and a query string
      */
+    @SuppressWarnings("PMD.SystemPrintln")
     public static void main(String argv[]) throws Exception {
         // Test arglist
         if (argv.length < 2) {

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -241,6 +241,7 @@ public boolean getContext(Reader in, Writer out, String urlPrefix,
         return anything;
     }
     
+    @SuppressWarnings("PMD.SystemPrintln")
     public static void main(String[] args) {
         try{
             QueryParser parser = new QueryParser("full", new CompatibleAnalyser());

File: src/org/opensolaris/opengrok/search/context/HistoryContext.java
Patch:
@@ -126,6 +126,7 @@ private boolean getHistoryContext(HistoryReader in, String path, Writer out, Lis
         return matchedLines > 0;
     }
     
+    @SuppressWarnings({"PMD.AvoidPrintStackTrace","PMD.SystemPrintln"})
     public static void main(String[] args) {
         try {
             QueryParser parser = new QueryParser("hist", new CompatibleAnalyser());

File: src/org/opensolaris/opengrok/web/EftarFile.java
Patch:
@@ -245,6 +245,7 @@ public void create(String[] args) throws Exception {
         write(args[args.length - 1]);
     }
 
+    @SuppressWarnings("PMD.SystemPrintln")
     public static void main(String[] args) {
         if (args.length < 2) {
             System.err.println("Usage inputFile [inputFile ...] outputFile");

File: src/org/opensolaris/opengrok/web/EftarFileReader.java
Patch:
@@ -202,6 +202,7 @@ public void close() throws IOException {
         }
     }
 
+    @SuppressWarnings("PMD.SystemPrintln")
     public static void main(String[] args) throws Throwable {
         EftarFileReader fr = new EftarFileReader(args[0]);
         for (int i = 1; i < args.length; i++) {

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -31,6 +31,8 @@
 import java.net.URLEncoder;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
+import java.util.logging.Level;
+import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.history.Annotation;
 
@@ -260,7 +262,7 @@ public static String URIEncodePath(String path) {
            URI uri = new URI(null, null, path, null);
            return uri.getRawPath();
         } catch (URISyntaxException ex) {
-            ex.printStackTrace();
+            OpenGrokLogger.getLogger().log(Level.WARNING, "Could not encode path " + path, ex);
             return "";
         }
     }

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -117,7 +117,9 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
 
             drainStream(process.getInputStream());
 
-            process.exitValue();
+            if(waitFor(process) != 0) {
+                return null;
+            }
 
             ret = new BufferedInputStream(new FileInputStream(tmp) {
 

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -558,7 +558,7 @@ public boolean isUsingLuceneLocking() {
     }
 
     public void setUsingLuceneLocking(boolean useLuceneLocking) {
-        threadConfig.get().setOptimizeDatabase(useLuceneLocking);
+        threadConfig.get().setUsingLuceneLocking(useLuceneLocking);
     }
 
     /**

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -201,7 +201,7 @@ public static void main(String[] argv) {
         try {
             System.out.println(co.getManPage());
         } catch (IOException exp) {
-            exp.printStackTrace();
+            exp.printStackTrace(System.err);
             System.exit(1);
         }
         System.exit(0);

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -33,6 +33,8 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
+import java.util.logging.Level;
+import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.index.IgnoredNames;
 
@@ -140,7 +142,7 @@ public static void main(String[] args) {
             dl.listTo(tolist, out);
             out.close();
         } catch (Exception e) {
-            System.out.println(" ERROR " + e + "\n Usage DirListing <dir> <output.html>");
+            OpenGrokLogger.getLogger().log(Level.WARNING, "Usage DirListing <dir> <output.html>", e);
         }
     }
 }

File: src/org/opensolaris/opengrok/web/EftarFile.java
Patch:
@@ -34,6 +34,8 @@
 import java.io.RandomAccessFile;
 import java.util.StringTokenizer;
 import java.util.TreeMap;
+import java.util.logging.Level;
+import org.opensolaris.opengrok.OpenGrokLogger;
 
 
 /**
@@ -253,7 +255,7 @@ public static void main(String[] args) {
             EftarFile ef = new EftarFile();
             ef.create(args);
         } catch (Exception e) {
-            System.err.println("EftarFile: Error in " + e.getStackTrace()[0] + "\n\t" + e.getMessage());
+            OpenGrokLogger.getLogger().log(Level.WARNING, "EftarFile error", e);
         }
     }
 }

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
+import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
@@ -103,7 +104,7 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
         }
         
         if (RuntimeEnvironment.getInstance().isVerbose()) {
-            System.out.println("Have no analyzer for: " + fieldName);
+            OpenGrokLogger.getLogger().info("Have no analyzer for: " + fieldName);
         }
 	return null;
     }

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -32,11 +32,13 @@
 import java.io.StringWriter;
 import java.io.Writer;
 import java.util.LinkedList;
+import java.util.logging.Level;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
+import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
@@ -115,7 +117,7 @@ public void analyze(Document doc, InputStream in) {
 		doc.add(new Field("refs",dummy));
 	    }
 	} catch (IOException e) {
-	    e.printStackTrace();
+            OpenGrokLogger.getLogger().log(Level.SEVERE, "Failed to read from ZIP ", e);
 	}
     }
     

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
+import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.Ctags;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
@@ -68,8 +69,8 @@ protected PlainAnalyzer(FileAnalyzerFactory factory) {
             ctags = new Ctags();
         } catch (IOException e) {
         }
-        if(ctags == null) {
-            System.err.println("WARNING: unable to run ctags! searching definitions will not work!");
+        if (ctags == null) {
+            OpenGrokLogger.getLogger().severe("WARNING: unable to run ctags! searching definitions will not work!");
         }
     }
 

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -77,7 +77,7 @@ private static File getCachedFile(File file) {
             }
             sb.append(add);
         } catch (IOException ex) {
-            ex.printStackTrace();
+            OpenGrokLogger.getLogger().log(Level.INFO, "Could not get path for: " + file, ex);
         }
         sb.append(".gz");
         
@@ -148,7 +148,7 @@ public History get(File file, Repository repository) throws Exception {
                 return readCache(cache);
             } catch (Exception e) {
                 OpenGrokLogger.getLogger().log(Level.WARNING, 
-                        "Error when reading cache file '" + cache + "':", e);
+                        "Error when reading cache file '" + cache, e);
             }
         }
         

File: src/org/opensolaris/opengrok/history/PerforceRepository.java
Patch:
@@ -116,7 +116,8 @@ public Annotation annotate(File file, String rev) throws IOException {
                 }
             }
         } catch (IOException e) {
-            e.printStackTrace();
+            OpenGrokLogger.getLogger().log(Level.SEVERE,
+                    "Error: Could not read annotations for " + file, e);
         }
         return a;
     }

File: src/org/opensolaris/opengrok/history/RCSRepository.java
Patch:
@@ -59,8 +59,7 @@ InputStream getHistoryGet(String parent, String basename, String rev) {
             return new RCSget(new File(parent, basename).getPath(), rev);
         } catch (IOException ioe) {
             OpenGrokLogger.getLogger().log(Level.SEVERE, 
-                    "Failed to retrieve revision " + rev + " of " + basename);
-            ioe.printStackTrace();
+                    "Failed to retrieve revision " + rev + " of " + basename, ioe);
             return null;
         }
     }

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.SortedMap;
 import java.util.TreeMap;
@@ -402,7 +403,7 @@ public static FileAnalyzerFactory find(String file) {
                 file = file.substring(i + 1);
             }
         }
-        file = file.toUpperCase();
+        file = file.toUpperCase(Locale.US);
         int dotpos = file.lastIndexOf('.');
         if (dotpos >= 0) {
             FileAnalyzerFactory factory =

File: src/org/opensolaris/opengrok/analysis/c/Consts.java
Patch:
@@ -29,12 +29,13 @@
 package org.opensolaris.opengrok.analysis.c;
 
 import java.util.HashSet;
+import java.util.Set;
 
 /**
   * Holds static hash set containing the C keywords
   */
 public class Consts{
-    public static final HashSet<String> kwd = new HashSet<String>() ;
+    public static final Set<String> kwd = new HashSet<String>() ;
     static {
         // CPP
         kwd.add( "ident" );

File: src/org/opensolaris/opengrok/analysis/java/Consts.java
Patch:
@@ -24,12 +24,13 @@
 package org.opensolaris.opengrok.analysis.java;
 
 import java.util.HashSet;
+import java.util.Set;
 
 /**
   * Holds static hash set containing the Java keywords
   */
 public class Consts{
-    public static final HashSet<String> kwd = new HashSet<String>() ;
+    public static final Set<String> kwd = new HashSet<String>() ;
     static {
         kwd.add( "abstract" );
         kwd.add( "assert" );

File: src/org/opensolaris/opengrok/analysis/lisp/Consts.java
Patch:
@@ -24,12 +24,13 @@
 package org.opensolaris.opengrok.analysis.lisp;
 
 import java.util.HashSet;
+import java.util.Set;
 
 /**
   * Holds static hash set containing Lisp keywords
   */
 public class Consts {
-    public static final HashSet<String> kwd = new HashSet<String>();
+    public static final Set<String> kwd = new HashSet<String>();
     static {
         kwd.add("and");
         kwd.add("assert");

File: src/org/opensolaris/opengrok/analysis/sh/Consts.java
Patch:
@@ -25,11 +25,12 @@
 package org.opensolaris.opengrok.analysis.sh;
 
 import java.util.HashSet;
+import java.util.Set;
 /**
  * Shell keyword hash
  */
 public class Consts{
-    public static final HashSet<String> shkwd = new HashSet<String>() ;
+    public static final Set<String> shkwd = new HashSet<String>() ;
     static {
         // Built-in shell commands mentioned in shell_builtins(1)
         shkwd.add( ":" );

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -55,7 +55,7 @@ private static void populateKeywordSet(Set<String> set, String file)
                 }
             }
         } finally {
-            reader.close();;
+            reader.close();
         }
     }
 

File: src/org/opensolaris/opengrok/analysis/tcl/Consts.java
Patch:
@@ -24,12 +24,13 @@
 package org.opensolaris.opengrok.analysis.tcl;
 
 import java.util.HashSet;
+import java.util.Set;
 
 /**
   * Holds static hash set containing Tcl keywords
   */
 public class Consts {
-    public static final HashSet<String> kwd = new HashSet<String>();
+    public static final Set<String> kwd = new HashSet<String>();
     static {
         // Tcl cmds
         kwd.add("after");

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -89,8 +89,7 @@ Process getHistoryLogProcess(File file) throws IOException {
         ProcessBuilder pb = new ProcessBuilder(argv);
         File directory = new File(getDirectoryName());
         pb.directory(directory);
-        Process process = pb.start();
-        return process;
+        return pb.start();
     }
 
     public InputStream getHistoryGet(String parent, String basename, String rev) {
@@ -282,6 +281,7 @@ public void update() throws Exception {
                 in = new BufferedReader(new InputStreamReader(process.getInputStream()));
                 // consume output
                 while ((line = in.readLine()) != null) {
+                    // do nothing
                 }
 
                 if (waitFor(process) != 0) {
@@ -322,7 +322,7 @@ boolean isRepositoryFor( File file) {
         if (f.exists() && f.isDirectory()) {
             return true;
         } else {
-            return file.isDirectory() && file.getName().toLowerCase().equals("vobs");
+            return file.isDirectory() && file.getName().equalsIgnoreCase("vobs");
         }
     }
 }

File: src/org/opensolaris/opengrok/management/client/AgentConnection.java
Patch:
@@ -45,7 +45,7 @@ public class AgentConnection implements NotificationListener {
     private MBeanServerConnection server = null;
     private ObjectName objName = null;
     private String objStrName = "OGA:name=AgentIndexRunner,source=timer";
-    private Logger logger = Logger.getLogger("org.opensolaris.opengrok");
+    private static final Logger logger = Logger.getLogger("org.opensolaris.opengrok");
     private String agenturl = "";
     private JMXConnector jmxconn = null; // TODO: Set to private
     private boolean connected = false;

File: src/org/opensolaris/opengrok/search/context/PhraseMatcher.java
Patch:
@@ -32,7 +32,7 @@ class PhraseMatcher extends LineMatcher {
     private int cur;
     
     public PhraseMatcher(String[] phraseTerms) {
-        this.phraseTerms  = phraseTerms;
+        this.phraseTerms  = (String[]) phraseTerms.clone();
         cur = 0;
     }
     

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzerFactory.java
Patch:
@@ -36,7 +36,7 @@ public class ZipAnalyzerFactory extends FileAnalyzerFactory {
         "ZIP"
     };
 
-    private static final byte[] MAGIC = { 'P', 'K', 3, 4 };
+    private static final byte[] MAGIC = {'P', 'K', 3, 4};
 
     // Derived from /usr/src/cmd/file/file.c in OpenSolaris
     private static final Matcher MATCHER = new Matcher() {

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -47,7 +47,7 @@ class FileHistoryCache implements HistoryCache {
     static class FilePersistenceDelegate extends PersistenceDelegate {
         protected Expression instantiate(Object oldInstance, Encoder out) {
             File f = (File)oldInstance;
-            return new Expression(oldInstance, f.getClass(), "new", new Object[] { f.toString() });
+            return new Expression(oldInstance, f.getClass(), "new", new Object[] {f.toString()});
         }
     }
             

File: src/org/opensolaris/opengrok/history/GitRepository.java
Patch:
@@ -52,7 +52,7 @@ Process getHistoryLogProcess(File file) throws IOException {
             filename = abs.substring(directoryName.length() + 1);
         }
         
-        String[] argv = new String[] { command, "log", "--name-only", "--pretty=fuller", filename };
+        String[] argv = new String[] {command, "log", "--name-only", "--pretty=fuller", filename};
 
         File directory = new File(getDirectoryName());
         return Runtime.getRuntime().exec(argv, null, directory);        
@@ -71,7 +71,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
         String filename =  (new File(parent, basename)).getAbsolutePath().substring(directoryName.length() + 1);
         Process process = null;
         try {
-            String argv[] = { command, "show", rev + ":" + filename };
+            String argv[] = {command, "show", rev + ":" + filename};
             process = Runtime.getRuntime().exec(argv, null, directory);
             
             InputStream in = process.getInputStream();

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -83,9 +83,9 @@ Process getHistoryLogProcess(File file) throws IOException {
         
         String argv[];
         if (verbose || file.isDirectory()) {
-            argv = new String[] { getCommand(), "log", "-v", filename };
+            argv = new String[] {getCommand(), "log", "-v", filename};
         } else {
-            argv = new String[] { getCommand(), "log", filename };
+            argv = new String[] {getCommand(), "log", filename};
         }
 
         File directory = new File(getDirectoryName());
@@ -102,7 +102,7 @@ public InputStream getHistoryGet(String parent, String basename, String rev) {
         Process process = null;
         InputStream in = null;
         try {
-            String argv[] = { getCommand(), "cat", "-r", rev, filename };
+            String argv[] = {getCommand(), "cat", "-r", rev, filename};
             process = Runtime.getRuntime().exec(argv, null, directory);
             
             ByteArrayOutputStream out = new ByteArrayOutputStream();

File: src/org/opensolaris/opengrok/history/HistoryEntry.java
Patch:
@@ -122,7 +122,7 @@ public void setDate(Date date) {
         if (date != null) {
             this.date = (Date) date.clone();
         } else {
-            date = null;
+            this.date = null;
         }
     }
     

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -354,7 +354,7 @@ public void prepareIndexer(RuntimeEnvironment env,
                 }
 
                 if (!env.validateExuberantCtags()) {
-                    System.exit(1);
+                    throw new IndexerException("Didn't find Exuberant Ctags");
                 }
 
                 if (searchRepositories) {

File: src/org/opensolaris/opengrok/management/Management.java
Patch:
@@ -197,11 +197,11 @@ public Integer getNumberOfThreads() {
     }
 
     public void setSubFiles(String[] sublist) {
-        this.subFiles = sublist;
+        this.subFiles = (sublist == null) ? null : (String[]) sublist.clone();
     }
 
     public String[] getSubFiles() {
-        return this.subFiles;
+        return (subFiles == null) ? null : (String[]) subFiles.clone();
     }
 
     public String getConfigurationFile() {

File: src/org/opensolaris/opengrok/search/context/PhraseMatcher.java
Patch:
@@ -27,8 +27,8 @@
  * Matches a term against a set of tokens
  *
  */
-public class PhraseMatcher extends LineMatcher {
-    private String[] phraseTerms;
+class PhraseMatcher extends LineMatcher {
+    private final String[] phraseTerms;
     private int cur;
     
     public PhraseMatcher(String[] phraseTerms) {

File: src/org/opensolaris/opengrok/analysis/CompatibleAnalyser.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/Ctags.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/List2TokenStream.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/PathAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/PathTokenizer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/TagFilter.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/archive/BZip2Analyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/archive/BZip2AnalyzerFactory.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
-
 package org.opensolaris.opengrok.analysis.archive;
 
 import org.opensolaris.opengrok.analysis.FileAnalyzer;

File: src/org/opensolaris/opengrok/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/c/Consts.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/lisp/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
-
 package org.opensolaris.opengrok.analysis.lisp;
 
 import java.util.HashSet;

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzer.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/analysis/sql/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
-
 package org.opensolaris.opengrok.analysis.sql;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/analysis/tcl/Consts.java
Patch:
@@ -21,7 +21,6 @@
  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
-
 package org.opensolaris.opengrok.analysis.tcl;
 
 import java.util.HashSet;

File: src/org/opensolaris/opengrok/history/ClearCaseHistoryParser.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/history/ClearCaseRepository.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedInputStream;

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/history/PerforceHistoryParser.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/history/PerforceRepository.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.history;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/history/SCCSget.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/management/client/AgentConnection.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.management.client;
 
 import java.awt.event.ActionEvent;

File: src/org/opensolaris/opengrok/management/client/NotificationsFrame.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.management.client;
 
 import java.awt.Dimension;

File: src/org/opensolaris/opengrok/management/client/OpenGrokTrayApp.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.management.client;
 
 import java.awt.AWTException;

File: src/org/opensolaris/opengrok/management/client/SettingsFrame.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.management.client;
 
 import java.awt.Dimension;

File: src/org/opensolaris/opengrok/management/client/SettingsPersistence.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.management.client;
 
 import java.io.File;

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/search/context/PrefixMatcher.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific
@@ -21,7 +21,6 @@
  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
-
 package org.opensolaris.opengrok.search.context;
 
 /**

File: src/org/opensolaris/opengrok/search/context/SingleTokenMatcher.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/search/context/TokenSetMatcher.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/util/Executor.java
Patch:
@@ -16,6 +16,7 @@
  *
  * CDDL HEADER END
  */
+
 package org.opensolaris.opengrok.util;
 
 import java.io.BufferedReader;

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -2,7 +2,7 @@
  * CDDL HEADER START
  *
  * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").  
+ * Common Development and Distribution License (the "License").
  * You may not use this file except in compliance with the License.
  *
  * See LICENSE.txt included in this distribution for the specific

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -11,7 +11,7 @@
  * When distributing Covered Code, include this CDDL HEADER in each
  * file and include the License file at LICENSE.txt.
  * If applicable, add the following below this CDDL HEADER, with the
- * s enclosed by brackets "[]" replaced with your own identifying
+ * fields enclosed by brackets "[]" replaced with your own identifying
  * information: Portions Copyright [yyyy] [name of copyright owner]
  *
  * CDDL HEADER END

File: src/org/opensolaris/opengrok/management/TimerFilter.java
Patch:
@@ -42,8 +42,7 @@ public TimerFilter(Integer id) {
 
     public boolean isNotificationEnabled(Notification n) {
 
-        if (n.getType().equals("timer.notification") &&
-                n instanceof TimerNotification) {
+        if (n instanceof TimerNotification) {
             TimerNotification timerNotif = (TimerNotification) n;
             if (timerNotif.getNotificationID().equals(id)) {
                 return true;

File: src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java
Patch:
@@ -23,8 +23,8 @@
  */
 package org.opensolaris.opengrok.analysis;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import java.util.Arrays;
 import java.util.Collections;

File: src/org/opensolaris/opengrok/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -29,9 +29,9 @@
 import java.io.Reader;
 import java.io.Writer;
 import java.util.zip.GZIPInputStream;
+import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.analysis.TokenStream;
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzer.java
Patch:
@@ -33,10 +33,10 @@
 import org.apache.lucene.document.Field;
 import org.apache.tools.tar.TarEntry;
 import org.apache.tools.tar.TarInputStream;
-import org.opensolaris.opengrok.web.Util;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.PlainFullTokenizer;
+import org.opensolaris.opengrok.web.Util;
 
 /**
  * Analyzes TAR files

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.c;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.document;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.java;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.lisp;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.plain;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.plain;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -21,11 +21,10 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
-
 package org.opensolaris.opengrok.analysis.sh;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.sql;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -24,8 +24,8 @@
 
 package org.opensolaris.opengrok.analysis.tcl;
 
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Writer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -29,12 +29,12 @@
 import java.beans.PersistenceDelegate;
 import java.beans.XMLDecoder;
 import java.beans.XMLEncoder;
+import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.BufferedInputStream;
-import java.io.FileInputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;

File: src/org/opensolaris/opengrok/history/HistoryReader.java
Patch:
@@ -28,8 +28,8 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.util.Date;
-import java.util.List;
 import java.util.Iterator;
+import java.util.List;
 
 /**
  * Class for reading history entries. The HistoryReader have

File: src/org/opensolaris/opengrok/history/RazorHistoryParser.java
Patch:
@@ -20,9 +20,9 @@
 /* Portions Copyright 2008 Peter Bray */
 package org.opensolaris.opengrok.history;
 
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
-import java.io.BufferedReader;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;

File: src/org/opensolaris/opengrok/history/SubversionHistoryParser.java
Patch:
@@ -28,15 +28,15 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.List;
 import java.util.LinkedHashMap;
+import java.util.List;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.tigris.subversion.javahl.ChangePath;
 import org.tigris.subversion.javahl.ClientException;
 import org.tigris.subversion.javahl.Info;
-import org.tigris.subversion.javahl.SVNClient;
-import org.tigris.subversion.javahl.Revision;
 import org.tigris.subversion.javahl.LogMessage;
+import org.tigris.subversion.javahl.Revision;
+import org.tigris.subversion.javahl.SVNClient;
 
 /**
  * Parse source history for a Subversion Repository

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -39,8 +39,8 @@
 import java.util.logging.Logger;
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
 import org.opensolaris.opengrok.configuration.Project;
-import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.util.Getopt;
 
 /**

File: src/org/opensolaris/opengrok/management/Management.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Properties;
 import java.util.logging.Logger;
 import javax.management.MBeanRegistration;
-import javax.management.ObjectName;
 import javax.management.MBeanServer;
+import javax.management.ObjectName;
 import org.opensolaris.opengrok.Info;
 
 public final class Management implements ManagementMBean, MBeanRegistration {

File: src/org/opensolaris/opengrok/management/NotificationHolder.java
Patch:
@@ -23,8 +23,8 @@
  */
 package org.opensolaris.opengrok.management;
 
-import javax.management.NotificationListener;
 import javax.management.NotificationFilter;
+import javax.management.NotificationListener;
 
 /**
  * @author Jan S Berg

File: src/org/opensolaris/opengrok/search/context/QueryMatchers.java
Patch:
@@ -23,8 +23,8 @@
  */
 package org.opensolaris.opengrok.search.context;
 
-import java.util.HashSet;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.Set;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.BooleanClause;

File: src/org/opensolaris/opengrok/web/raw.java
Patch:
@@ -35,8 +35,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
-import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.history.HistoryReader;
 
 /**

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -218,7 +218,7 @@ public String getRevision() {
     }
 
     public Date getDate() {
-        return idate;
+        return (Date) idate.clone();
     }
 
     public String getAuthor() {

File: src/org/opensolaris/opengrok/history/HistoryEntry.java
Patch:
@@ -58,7 +58,7 @@ public HistoryEntry() {
     public HistoryEntry(String revision, Date date, String author,
             String message, boolean active) {
         this.revision = revision;
-        this.date = date;
+        setDate(date);
         this.author = author;
         this.message = new StringBuffer(message);
         this.active = active;
@@ -99,7 +99,7 @@ public String getAuthor() {
     }
     
     public Date getDate() {
-        return date;
+        return (Date) date.clone();
     }
     
     public String getMessage() {
@@ -115,7 +115,7 @@ public void setAuthor(String author) {
     }
     
     public void setDate(Date date) {
-        this.date = date;
+        this.date = (Date) date.clone();
     }
     
     public boolean isActive() {

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
-import org.opensolaris.opengrok.search.scope.SearchEngine;
+import org.opensolaris.opengrok.search.SearchEngine;
 import org.opensolaris.opengrok.util.Getopt;
 
 /**

File: src/org/opensolaris/opengrok/search/SearchEngine.java
Patch:
@@ -22,7 +22,7 @@
  * Use is subject to license terms.
  */
 
-package org.opensolaris.opengrok.search.scope;
+package org.opensolaris.opengrok.search;
 
 import java.io.BufferedReader;
 import java.io.File;

File: src/org/opensolaris/opengrok/management/OGAgent.java
Patch:
@@ -89,7 +89,7 @@ public final void runOGA() throws Exception {
 
         Properties props = new Properties(System.getProperties());
         // Load default values
-        InputStream in = Info.class.getResourceAsStream("oga.properties");
+        InputStream in = OGAgent.class.getResourceAsStream("oga.properties");
         if (in != null) {
             props.load(in);
             in.close();

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -68,6 +68,7 @@ public class IgnoredNames implements Serializable {
         ".make.*",
         ".del-*"
     };
+    static final long serialVersionUID = 1L;
     
     /** The list of exact filenames to ignore */     
     private Set<String> ignore;

File: src/org/opensolaris/opengrok/analysis/HistoryAnalyzer.java
Patch:
@@ -40,7 +40,7 @@ public final class HistoryAnalyzer extends Analyzer {
     
     /** An array containing some common English words that are not usually useful
     for searching. */
-    public static final String[] ENGLISH_STOP_WORDS = {
+    private static final String[] ENGLISH_STOP_WORDS = {
         "a", "an", "and", "are", "as", "at", "be", "but", "by",
         "for", "if", "in", "into", "is", "it",
         "no", "not", "of", "on", "or", "s", "such",

File: src/org/opensolaris/opengrok/management/TimerFilter.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class TimerFilter implements NotificationFilter {
 
-    private Integer id = null;
+    private final Integer id;
 
     /** Creates a new instance of TimerFilter */
     public TimerFilter(Integer id) {
@@ -42,7 +42,8 @@ public TimerFilter(Integer id) {
 
     public boolean isNotificationEnabled(Notification n) {
 
-        if (n.getType().equals("timer.notification")) {
+        if (n.getType().equals("timer.notification") &&
+                n instanceof TimerNotification) {
             TimerNotification timerNotif = (TimerNotification) n;
             if (timerNotif.getNotificationID().equals(id)) {
                 return true;

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -95,10 +95,12 @@ public static void prettyPrintHTML(Hits hits, int start, int end, Writer out,
                             Reader r = new TagFilter(new BufferedReader(new FileReader(dataRoot + "/xref" + rpath)));
                             int len = r.read(content);
                             out.write(summer.getSummary(new String(content, 0, len)).toString());
+                            r.close();
                         } else if("h".equals(genre) && srcRoot != null && summer != null){
                             Reader r = new TagFilter(new BufferedReader(new FileReader(srcRoot + rpath)));
                             int len = r.read(content);
                             out.write(summer.getSummary(new String(content, 0, len)).toString());
+                            r.close();
                         } else {
                             sourceContext.getContext(null, out, urlPrefix, morePrefix, rpath, tags, true, null);
                         }

File: src/org/opensolaris/opengrok/management/AgentIndexRunner.java
Patch:
@@ -56,7 +56,7 @@ public final class AgentIndexRunner implements AgentIndexRunnerMBean, Notificati
     private final static String NOTIFICATIONEXCEPTIONTYPE = "ogaexception";
     private final static String NOTIFICATIONINFOSTRINGTYPE = "ogainfostring";
     private final static String NOTIFICATIONINFOLONGTYPE = "ogainfolong";
-    private static boolean enabled = true;
+    private boolean enabled;
     private transient Thread indexThread = null;
     private final static Logger log = Logger.getLogger("org.opensolaris.opengrok");
     private final Management jagmgt;

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -51,7 +51,7 @@
 
 public class Context {
     private LineMatcher[] m;
-    private int MAXFILEREAD = 32768;
+    static final int MAXFILEREAD = 32768;
     private char[] buffer;
     PlainLineTokenizer tokens;
     String queryAsURI;

File: src/org/opensolaris/opengrok/history/RCSHistoryParser.java
Patch:
@@ -102,7 +102,7 @@ protected static File getCVSFile(String parent, String name) {
                 if (root.canRead()) {
                     BufferedReader rootReader = new BufferedReader(new FileReader(root));
                     String cvsroot = rootReader.readLine();
-                    if (cvsroot.startsWith("/")) {
+                    if (cvsroot != null && cvsroot.startsWith("/")) {
                         File repository = new File(CVSdir, "Repository");
                         BufferedReader repoReader = new BufferedReader(new FileReader(repository));
                         String repo = repoReader.readLine();

File: src/org/opensolaris/opengrok/util/Getopt.java
Patch:
@@ -54,7 +54,8 @@ public Getopt(String[] argv, String opts) {
         options = new ArrayList<Option>();
         current = -1;
         optind = -1;
-        this.argv = argv;
+        this.argv = new String[argv.length];
+        System.arraycopy(argv, 0, this.argv, 0, argv.length);
         this.opts = opts;
     }
     

File: src/org/opensolaris/opengrok/history/DirectoryHistoryParser.java
Patch:
@@ -57,6 +57,7 @@ public History parse(File file, Repository repository)
 
         History history = new History();
         history.setHistoryEntries(entries);
+        hr.close();
         return history;
     }
 

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzer.java
Patch:
@@ -95,7 +95,8 @@ public void analyze(Document doc, InputStream in) {
                 if(defs != null && defs.numberOfSymbols() > 0) {
                     doc.add(new Field("defs", dummy));
                     doc.add(new Field("refs", dummy)); //XXX adding a refs field only if it has defs?
-                    doc.add(new Field("tags", ctags.tagString(), Field.Store.YES, Field.Index.UN_TOKENIZED));
+                    byte[] tags = defs.serialize();
+                    doc.add(new Field("tags", tags, Field.Store.YES));
                 }
             }
         } catch (IOException e) {

File: src/org/opensolaris/opengrok/analysis/Hash2TokenStream.java
Patch:
@@ -37,8 +37,8 @@ public final class Hash2TokenStream extends TokenStream {
     String term;
     String terms[];
     Iterator<String> keys;
-    public Hash2TokenStream(HashMap<String, HashMap<Integer, String>> h){
-	keys = h.keySet().iterator();
+    public Hash2TokenStream(Set<String> symbols){
+        keys = symbols.iterator();
     }
     
     public Token next() {

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzer.java
Patch:
@@ -91,6 +91,6 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
      * @param out Writer to store HTML cross-reference
      */
     public void writeXref(Writer out) throws IOException {
-        Util.Htmlize(content, len, out);
+        Util.htmlize(content, len, out);
     }
 }

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzer.java
Patch:
@@ -92,6 +92,6 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
      * @param out Writer to store HTML cross-reference
      */
     public void writeXref(Writer out) throws IOException {
-        Util.Htmlize(content, len, out);
+        Util.htmlize(content, len, out);
     }
 }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -145,9 +145,8 @@ public String getManPage() throws IOException {
         PrintWriter out = new PrintWriter(wrt);
 
         BufferedReader reader = new BufferedReader(new InputStreamReader(
-                this.getClass().getResourceAsStream("opengrok.xml"), "US-ASCII"));
+                CommandLineOptions.class.getResourceAsStream("opengrok.xml"), "US-ASCII"));
 
-        String line;
         spool(reader, out, "___INSERT_DATE___");
         out.print("<refmiscinfo class=\"date\">");
         out.print(DateFormat.getDateInstance(DateFormat.MEDIUM).format(new Date()));

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.File;
 import java.io.FileFilter;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
@@ -38,7 +39,7 @@
  *
  * @author Chandan
  */
-public class IgnoredNames {
+public class IgnoredNames implements Serializable {
     private static final String[] defaultPatterns = {
         "SCCS",
         "CVS",

File: src/org/opensolaris/opengrok/index/IndexerWizard.java
Patch:
@@ -635,7 +635,7 @@ private void bstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:
         } else {
             // save the ctags that worked for us!
             Preferences prefs = Preferences.userNodeForPackage(IndexerWizard.class);
-            if(prefs.get("ctags","") != ctagsText.getText())
+            if(prefs.get("ctags","").equals(ctagsText.getText()))
                 prefs.put("ctags", ctagsText.getText());
             try{
                 prefs.flush();

File: src/org/opensolaris/opengrok/search/Hit.java
Patch:
@@ -186,7 +186,7 @@ public int compareTo(Object o) throws ClassCastException {
                     o.toString() + " " + o.getClass().toString());
         }
     }
-    
+
     /**
      * Getter for property binary.
      *

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -127,12 +127,12 @@ public boolean getContext(Reader in, Writer out, String urlPrefix, String morePr
                                         out.write("\"><span class=\"l\">");
                                         out.write(desc[1]);
                                         out.write("</span> ");
-                                        out.write(Util.Htmlize(desc[3]).replaceAll(desc[0], "<b>" + desc[0] + "</b>"));
+                                        out.write(Util.htmlize(desc[3]).replaceAll(desc[0], "<b>" + desc[0] + "</b>"));
                                         out.write("</a> <i> ");
                                         out.write(desc[2]);
                                         out.write(" </i><br/>");
                                     } else  {
-                                        Hit hit = new Hit(path, Util.Htmlize(desc[3]).replaceAll(desc[0], "<b>" + desc[0] + "</b>"), desc[1], false, alt);
+                                        Hit hit = new Hit(path, Util.htmlize(desc[3]).replaceAll(desc[0], "<b>" + desc[0] + "</b>"), desc[1], false, alt);
                                         hits.add(hit);
                                         anything = true;
                                     }

File: test/org/opensolaris/opengrok/web/UtilTest.java
Patch:
@@ -28,7 +28,7 @@ public static void tearDownClass() {
     }
 
     @Test
-    public void Htmlize() {
+    public void htmlize() {
         String[][] input_output = {
             { "This is a test", "This is a test" },
             { "Newline\nshould become <br/>",
@@ -38,10 +38,10 @@ public void Htmlize() {
         };
         for (String[] in_out : input_output) {
             // 1 arg
-            assertEquals(in_out[1], Util.Htmlize(in_out[0]));
+            assertEquals(in_out[1], Util.htmlize(in_out[0]));
             // 2 args
             StringBuilder sb = new StringBuilder();
-            Util.Htmlize(in_out[0], sb);
+            Util.htmlize(in_out[0], sb);
             assertEquals(in_out[1], sb.toString());
         }
     }

File: src/org/opensolaris/opengrok/analysis/TagFilter.java
Patch:
@@ -49,9 +49,9 @@ public TagFilter(Reader in) {
         p = false;
         esctag = new char[10];
         escs = new HashMap<String, Character>();
-        escs.put("&gt", new Character('>'));
-        escs.put("&lt",  new Character('<'));
-        escs.put("&amp",  new Character('&'));
+        escs.put("&gt", Character.valueOf('>'));
+        escs.put("&lt",  Character.valueOf('<'));
+        escs.put("&amp",  Character.valueOf('&'));
     }
     
     public final int read(char[] buf, int start, int len) throws java.io.IOException {

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -283,7 +283,7 @@ public String toString() {
 		"\ne_shstrndx: "+e_shstrndx);
 	}
     }
-    class ELFSection {
+    static class ELFSection {
 	public int sh_name;
 	public int sh_type;
 	public int sh_flags;
@@ -322,7 +322,7 @@ public String toString() {
 		"\nsh_entsize: " + sh_entsize );
 	}
     }
-    class ELFSymbol {
+    static class ELFSymbol {
 	public int st_name;
 	public int st_value;
 	public int st_size;
@@ -350,7 +350,7 @@ public String toString() {
 	    return(" st_name : " + st_name + "(" + st_size + ") = " + st_value + stype);
 	}
     }
-    class ELFDynamic {
+    static class ELFDynamic {
 	public long d_tag;
 	public long d_val;
 	

File: src/org/opensolaris/opengrok/analysis/executables/JavaClassAnalyzer.java
Patch:
@@ -302,7 +302,7 @@ public String constantToString(Constant c)  throws ClassFormatException {
                 i	= ((ConstantString)c).getStringIndex();
                 v[i]=1;
                 c	= cp.getConstant(i, org.apache.bcel.Constants.CONSTANT_Utf8);
-                str =  new String(((ConstantUtf8)c).getBytes());
+                str =  ((ConstantUtf8)c).getBytes();
                 break;
                 
             case org.apache.bcel.Constants.CONSTANT_Utf8:    str = ((ConstantUtf8)c).getBytes();         break;

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -35,7 +35,7 @@
 
 public class CommandLineOptions {
 
-    class Option {
+    static class Option {
 
         char option;
         String argument;

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -185,7 +185,7 @@ private void addPattern(String pattern) {
      * lists, I need to detect when an object is beeing added to this list 
      * (So I may populate it to the correct list as well)
      */
-    public class PatternList extends ArrayList<String> {
+    public static class PatternList extends ArrayList<String> {
         private IgnoredNames owner;
         
         public PatternList(IgnoredNames owner) {

File: src/org/opensolaris/opengrok/search/Results.java
Patch:
@@ -61,15 +61,16 @@ public static void prettyPrintHTML(Hits hits, int start, int end, Writer out,
             dirDocs.add(doc);
         }
         
-        for (String parent: dirHash.keySet()) {
+        for (Map.Entry<String, ArrayList<Document>> entry: dirHash.entrySet()) {
+            String parent = entry.getKey();
             String tag = (desc != null) ? " - <i>" + desc.get(parent) + "</i>": "";
             
             out.write("<tr class=\"dir\"><td colspan=\"2\">&nbsp;&nbsp;<a href=\"");
             out.write(Util.URIEncodePath(urlPrefix + parent));
             out.write("/\">" + parent + "/</a>" + tag + "</td></tr>");
 
             boolean alt = false;
-            for (Document doc: dirHash.get(parent)) {
+            for (Document doc: entry.getValue()) {
                 String rpath = doc.get("path");
                 String self = rpath.substring(rpath.lastIndexOf('/')+1, rpath.length());
                 String selfUrl = Util.URIEncodePath(urlPrefix + rpath);

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -46,7 +46,7 @@ public Summarizer(Query query, Analyzer a) {
      * Class Excerpt represents a single passage found in the
      * document, with some appropriate regions highlit.
      */
-    class Excerpt {
+    static class Excerpt {
         Vector<Summary.Fragment> passages = new Vector<Summary.Fragment>();
         SortedSet<String> tokenSet = new TreeSet<String>();
         int numTerms = 0;

File: src/org/opensolaris/opengrok/util/Executor.java
Patch:
@@ -34,8 +34,8 @@ public class Executor {
 
     private List<String> cmdList;
     private File workingDirectory;
-    private String stdoutString = new String("");
-    private String stderrString = new String("");
+    private String stdoutString = "";
+    private String stderrString = "";
 
     public Executor(List<String> cmdList) {
         this(cmdList, null);
@@ -95,7 +95,7 @@ public BufferedReader get_stderr_reader() {
         return new BufferedReader(new StringReader(stderrString));
     }
 
-    private class StringPipe extends Thread {
+    private static class StringPipe extends Thread {
 
         private InputStream input = null;
         private String output = null;

File: src/org/opensolaris/opengrok/util/Getopt.java
Patch:
@@ -34,7 +34,7 @@
  *
  */
 public class Getopt {
-    class Option {
+    static class Option {
         char option;
         String argument;
     };

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -217,7 +217,7 @@ public String getRevision() {
     }
 
     public Date getDate() {
-        return idate;
+        return (Date) idate.clone();
     }
 
     public String getAuthor() {

File: src/org/opensolaris/opengrok/history/HistoryEntry.java
Patch:
@@ -58,7 +58,7 @@ public HistoryEntry() {
     public HistoryEntry(String revision, Date date, String author,
             String message, boolean active) {
         this.revision = revision;
-        this.date = date;
+        this.date = (Date) date.clone();
         this.author = author;
         this.message = new StringBuffer(message);
         this.active = active;
@@ -99,7 +99,7 @@ public String getAuthor() {
     }
     
     public Date getDate() {
-        return date;
+        return (Date) date.clone();
     }
     
     public String getMessage() {
@@ -115,7 +115,7 @@ public void setAuthor(String author) {
     }
     
     public void setDate(Date date) {
-        this.date = date;
+        this.date = (Date) date.clone();
     }
     
     public boolean isActive() {

File: src/org/opensolaris/opengrok/history/RCSHistoryParser.java
Patch:
@@ -102,7 +102,7 @@ protected static File getCVSFile(String parent, String name) {
                 if (root.canRead()) {
                     BufferedReader rootReader = new BufferedReader(new FileReader(root));
                     String cvsroot = rootReader.readLine();
-                    if (cvsroot.startsWith("/")) {
+                    if (cvsroot != null && cvsroot.startsWith("/")) {
                         File repository = new File(CVSdir, "Repository");
                         BufferedReader repoReader = new BufferedReader(new FileReader(repository));
                         String repo = repoReader.readLine();

File: src/org/opensolaris/opengrok/search/scope/MainFrame.java
Patch:
@@ -455,7 +455,6 @@ private void moreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FI
         Thread t = new Thread() {
             public void run() {
                 long start = System.currentTimeMillis();
-                int mySession = searchSession;
                 int inc = 7;
                 int i = shownhits;
                 int e = shownhits;
@@ -593,8 +592,7 @@ private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-
         Thread t = new Thread() {
             public void run() {
                 long start = System.currentTimeMillis();
-                int mySession;
-                nhits = m.search(mySession = searchSession);
+                nhits = m.search(searchSession);
                 setDefaultColumnWidth();
                 int inc = 7;
                 int i = 0;

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -108,7 +108,6 @@ public void writeXref(Writer out) throws IOException {
      */
     static void writeXref(InputStream in, Writer out, Annotation annotation, Project project) throws IOException {
 	TroffXref xref = new TroffXref(in);
-        xref.annotation = annotation;
         xref.project = project;
 	out.write("</pre>");
 	xref.write(out);

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -44,7 +44,6 @@
 
 public class JarAnalyzer extends FileAnalyzer {
     private byte[] content;
-    private int len;
 
     private LinkedList<String> defs;
     private LinkedList<String> refs;

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -52,7 +52,6 @@
 public class DirectoryHistoryReader extends HistoryReader {
 
     public LinkedHashMap<Date, HashMap<String, HashMap<String, ArrayList<String>>>> hash = new LinkedHashMap<Date, HashMap<String, HashMap<String, ArrayList<String>>>>();
-    Format df;
     Iterator<Date> diter;
     Date idate;
     Iterator<String> aiter;

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -54,7 +54,6 @@ public class Context {
     private int MAXFILEREAD = 32768;
     private char[] buffer;
     PlainLineTokenizer tokens;
-    Query query;
     String queryAsURI;
     private static Set<String> tokenFields = new HashSet<String>(3);
     static {
@@ -68,7 +67,7 @@ public class Context {
      */
     public Context(Query query) {
         QueryMatchers qm = new QueryMatchers();
-        m = qm.getMatchers(this.query = query, tokenFields);
+        m = qm.getMatchers(query, tokenFields);
         if(m != null) {
         queryAsURI = Util.URIEncode(query.toString());
         //System.err.println("Found Matchers = "+ m.length + " for " + query);

File: src/org/opensolaris/opengrok/search/context/HistoryContext.java
Patch:
@@ -43,7 +43,6 @@
 public class HistoryContext {
     private LineMatcher[] m;
     HistoryLineTokenizer tokens;
-    String filename;
     private static Set<String> tokenFields = new HashSet<String>(1);
     static {
         tokenFields.add("hist");
@@ -55,7 +54,6 @@ public HistoryContext(Query query) {
         if(m != null) {
             tokens = new HistoryLineTokenizer((Reader)null);
         }
-        filename = null;
     }
     public boolean isEmpty() {
         return m == null;
@@ -65,7 +63,6 @@ public boolean getContext(String filename, String path, List<Hit> hits) throws F
             return false;
         }
         File f = new File(filename);
-        this.filename = filename;
         return getHistoryContext(HistoryGuru.getInstance().getHistoryReader(f),
                                  path, null, hits);
         

File: src/org/opensolaris/opengrok/search/context/PrefixMatcher.java
Patch:
@@ -34,10 +34,8 @@
 
 public class PrefixMatcher extends LineMatcher {
     private String prefix;
-    private int cur;
     public PrefixMatcher(String prefix) {
         this.prefix  = prefix;
-        cur = 0;
     }
     
     public int match(String token) {

File: src/org/opensolaris/opengrok/history/DirectoryHistoryReader.java
Patch:
@@ -61,7 +61,7 @@ public class DirectoryHistoryReader extends HistoryReader {
     String icomment;
 
     /** Creates a new instance of DirectoryHistoryReader */
-    public void DirectoryHistoryReader() {
+    public DirectoryHistoryReader() {
 
     }
 

File: src/org/opensolaris/opengrok/history/FileHistoryCache.java
Patch:
@@ -166,7 +166,7 @@ public History get(File file, Repository repository) throws Exception {
             throw e;
         }
 
-        if (repository != null && repository.isCacheable() && !file.isDirectory()) {
+        if (repository.isCacheable() && !file.isDirectory()) {
             // Don't cache history-information for directories, since the 
             // history information on the directory may change if a file in
             // a sub-directory change. This will cause us to present a stale

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -151,7 +151,7 @@ public void run() {
 
     }
 
-    private void initialize() throws IOException {
+    private synchronized void initialize() throws IOException {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         File indexDir = new File(env.getDataRootFile(), "index");
         File spellDir = new File(env.getDataRootFile(), "spellIndex");
@@ -373,7 +373,7 @@ public void createSpellingSuggestions() {
         }
     }
 
-    private void setDirty() {
+    private synchronized void setDirty() {
         try {
             if (!dirty) {
                 dirtyFile.createNewFile();

File: src/org/opensolaris/opengrok/search/scope/MainFrame.java
Patch:
@@ -57,6 +57,7 @@
 public class MainFrame extends javax.swing.JFrame {
     static final long serialVersionUID = 1L;
     private Integer searchSession;
+    private Object searchSessionLock = new Object();
     private Boolean searching;
     private Object searchingLock = new Object();
     private int nhits;
@@ -583,7 +584,7 @@ private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-
         se.setFreetext(fullField.getText().trim());
         se.setHistory(historyField.getText().trim());
         se.setSymbol(symbolField.getText().trim());
-        synchronized(searchSession) {
+        synchronized(searchSessionLock) {
             searchSession++;
         };
         final HitTableModel m = (HitTableModel)hitsTable.getModel();
@@ -653,7 +654,7 @@ private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-F
                 return;
             }
         }
-        synchronized(searchSession) {
+        synchronized(searchSessionLock) {
             searchSession++;
         };
         definitionField.setText("");

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -53,7 +53,7 @@
 public class Indexer {
    
    private static Indexer index = new Indexer();
-   private static final Logger log = Logger.getLogger("org.opensolaris.opengrok");
+   private static final Logger log = Logger.getLogger(Indexer.class.getName());
    
    public static Indexer getInstance() {
       return index;

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -33,7 +33,7 @@ public class Summarizer {
     private static final int SUM_LENGTH = 20;
     
     /** Converts text to tokens. */
-    private static Analyzer ANALYZER;
+    private final Analyzer ANALYZER;
     
     private HashSet<String> highlight = new HashSet<String>();            // put query terms in table
     
@@ -304,8 +304,7 @@ private void getBooleans(BooleanQuery query) {
     }
     
     private void getPhrases(PhraseQuery query) {
-        Term[] queryTerms = query.getTerms();
-        String[] terms = new String[queryTerms.length];
+        Term[] queryTerms = query.getTerms();        
         for (int i = 0; i < queryTerms.length; i++) {
             highlight.add(queryTerms[i].text());
         }

File: src/org/opensolaris/opengrok/search/context/WildCardMatcher.java
Patch:
@@ -48,7 +48,7 @@ public WildCardMatcher(String pattern) {
         }
         pre = pattern.substring(0,idx);
         preLen = pre.length();
-        pattern = pattern.substring(preLen);
+        this.pattern = pattern.substring(preLen);
     }
     
     public int match(String token) {

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -518,7 +518,7 @@ private void addRepository(Repository rep, String path, Map<String, Repository>
      */
     public void addRepositories(String dir) {
         Map<String, Repository> repos = new HashMap<String, Repository>();
-        addRepositories((new File(dir)).listFiles(), repos,
+        addRepositories(new File[] {new File(dir)}, repos, 
                 RuntimeEnvironment.getInstance().getIgnoredNames());
         RuntimeEnvironment.getInstance().setRepositories(repos);
     }

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -541,7 +541,7 @@ public void interrupt() {
      * 
      * @param listener the object to receive the events
      */
-    void addIndexChangedListener(IndexChangedListener listener) {
+    public void addIndexChangedListener(IndexChangedListener listener) {
         listeners.add(listener);
     }
 
@@ -551,7 +551,7 @@ void addIndexChangedListener(IndexChangedListener listener) {
      * 
      * @param listener the object to remove
      */
-    void removeIndexChangedListener(IndexChangedListener listener) {
+    public void removeIndexChangedListener(IndexChangedListener listener) {
         listeners.remove(listener);
     }
 

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -80,6 +80,7 @@ public CommandLineOptions() {
         options.add(new Option('h', "/path/to/repository", "Generate history cache for the specified repos (absolute path from source root)"));
         options.add(new Option('r', "on/off", "Turn on/off support for remote SCM systems"));
         options.add(new Option('L', "path", "Path to the subdirectory in the web-application containing the requested stylesheet. The following factory-defaults exist: \"default\", \"offwhite\" and \"polished\""));
+        options.add(new Option('l', "on/off", "Turn on/off locking of the Lucene database during index generation"));
         options.add(new Option('O', "on/off", "Turn on/off the optimization of the index database as part of the indexing step"));
         options.add(new Option('a', "on/off", "Allow or disallow leading wildcards in a search"));
         options.add(new Option('w', "webapp-context", "Context of webapp. Default is /source. If you specify a different name, make sure to rename source.war to that name."));

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -104,7 +104,7 @@ public ArrayList listTo(File dir, Writer out, String path, String[] files) throw
                 out.write(alt ? " class=\"alt\"" : "");
 
                 boolean isDir = child.isDirectory();
-                out.write("><td align=\"left\"><tt><a href=\"" + Util.URIEncode(file) + (isDir ? "/\" class=\"r\"" : "\" class=\"p\"") + ">");
+                out.write("><td align=\"left\"><tt><a href=\"" + Util.URIEncodePath(file) + (isDir ? "/\" class=\"r\"" : "\" class=\"p\"") + ">");
                 if (isDir) {
                     out.write("<b>" + file + "</b></a>/");
                 } else {

File: src/org/opensolaris/opengrok/history/PerforceRepository.java
Patch:
@@ -81,7 +81,7 @@ public Annotation annotate(File file, String rev) throws IOException {
     
     @Override
     Class<? extends HistoryParser> getDirectoryHistoryParser() {
-        return null;
+        return PerforceHistoryParser.class;
     }
 
     @Override

File: src/org/opensolaris/opengrok/history/SCCSget.java
Patch:
@@ -33,9 +33,9 @@
 
 
 public class SCCSget {
-    public static InputStream getRevision(File file, String revision) throws IOException {
+           
+    public static InputStream getRevision(String command, File file, String revision) throws IOException {
         InputStream ret = null;
-        String command = System.getProperty("org.opensolaris.opengrok.history.Teamware", "sccs");
 
         ArrayList<String> argv = new ArrayList<String>();
         argv.add(command);

File: src/org/opensolaris/opengrok/history/TeamwareRepository.java
Patch:
@@ -94,7 +94,7 @@ public void setVerbose(boolean verbose) {
     public InputStream getHistoryGet(String parent, String basename, String rev) {
         try {
             File history = SCCSHistoryParser.getSCCSFile(parent, basename);
-            return SCCSget.getRevision(history, rev);
+            return SCCSget.getRevision(command,history, rev);
         } catch (FileNotFoundException ex) {
             return null;
         } catch (IOException ex) {

File: test/org/opensolaris/opengrok/history/SCCSgetTest.java
Patch:
@@ -146,7 +146,7 @@ public void getRevision() throws Exception {
 
         while ((entry = zstream.getNextEntry()) != null) {
             String expected = readInput(zstream);
-            InputStream sccs = SCCSget.getRevision(sccsfile, entry.getName());
+            InputStream sccs = SCCSget.getRevision("sccs",sccsfile, entry.getName());
             String got = readInput(sccs);
             sccs.close();
             zstream.closeEntry();

File: src/org/opensolaris/opengrok/web/EftarFile.java
Patch:
@@ -211,7 +211,7 @@ public void readInput(String tagsPath) throws IOException {
                 String path = line.substring(0, tab);
                 String desc = line.substring(tab + 1);
                 size += desc.length() + 1 + 15;
-                StringTokenizer toks = new StringTokenizer(path, File.separator);
+                StringTokenizer toks = new StringTokenizer(path, "\\/");
                 Node n = root;
                 while (toks.hasMoreTokens()) {
                     n = n.put(myHash(toks.nextToken()), null);

File: test/org/opensolaris/opengrok/web/UtilTest.java
Patch:
@@ -132,7 +132,7 @@ public void buildQueryString() {
         String refs = "";
         String path = "";
         String hist = null;
-        String expResult = "foo:(bar) foo::bar defs:(foo\\:\\:bar)";
+        String expResult = "foo:(bar) foo\\:\\:bar defs:(foo\\:\\:bar)";
         String result = Util.buildQueryString(freetext, defs, refs, path, hist);
         assertEquals(expResult, result);
     }

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -308,7 +308,7 @@ public static String formQuoteEscape(String q) {
     public static String buildQueryString(String freetext, String defs, String refs, String path, String hist) {
         StringBuilder sb = new StringBuilder();
         if (freetext != null && freetext.length() > 0) {
-            sb.append(freetext);
+            sb.append(freetext.replace("::", "\\:\\:"));
         }
 
         if (defs != null && defs.length() > 0) {

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -67,7 +67,7 @@ public CommandLineOptions() {
         options = new ArrayList<Option>();
         options.add(new Option('q', null, "Run as quietly as possible"));
         options.add(new Option('v', null, "Print progress information as we go along"));
-        options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow. It also does not generate a spelling correction database."));
+        options.add(new Option('e', null, "Economical - consumes less disk space. It does not generate hyper text cross reference files offline, but will do so on demand - which could be sightly slow."));
         options.add(new Option('c', "/path/to/ctags", "Path to Exuberant Ctags from http://ctags.sf.net by default takes the Exuberant Ctags in PATH."));
         options.add(new Option('R', "/path/to/configuration", "Read configuration from the specified file"));
         options.add(new Option('W', "/path/to/configuration", "Write the current configuration to the specified file (so that the web application can use the same configuration"));

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -275,14 +275,15 @@ public static String getContentType(InputStream in, String file) throws IOExcept
      * @param in The input stream containing the data
      * @param out Where to write the result
      * @param annotation Annotation information for the file
+     * @param project Project the file belongs to
      * @throws java.io.IOException If an error occurs while creating the
      *                             output
      */
     public static void writeXref(FileAnalyzerFactory factory, InputStream in,
-                                 Writer out, Annotation annotation)
+                                 Writer out, Annotation annotation, Project project)
         throws IOException
     {
-        factory.writeXref(in, out, annotation);
+        factory.writeXref(in, out, annotation, project);
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class CAnalyzerFactory extends FileAnalyzerFactory {
@@ -64,8 +65,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException {
-        CAnalyzer.writeXref(in, out, annotation);
+        CAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class TroffAnalyzerFactory extends FileAnalyzerFactory {
@@ -47,10 +48,10 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException
     {
-        TroffAnalyzer.writeXref(in, out, annotation);
+        TroffAnalyzer.writeXref(in, out, annotation, project);
     }
 
 }

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class JavaAnalyzerFactory extends FileAnalyzerFactory {
@@ -51,8 +52,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException {
-        JavaAnalyzer.writeXref(in, out, annotation);
+        JavaAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class LispAnalyzerFactory extends FileAnalyzerFactory {
@@ -50,8 +51,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException {
-        LispAnalyzer.writeXref(in, out, annotation);
+        LispAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/plain/PlainAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class PlainAnalyzerFactory extends FileAnalyzerFactory {
@@ -70,9 +71,9 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException
     {
-        PlainAnalyzer.writeXref(in, out, annotation);
+        PlainAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class XMLAnalyzerFactory extends FileAnalyzerFactory {
@@ -53,9 +54,9 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException
     {
-        XMLAnalyzer.writeXref(in, out, annotation);
+        XMLAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class ShAnalyzerFactory extends FileAnalyzerFactory {
@@ -71,8 +72,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException {
-        ShAnalyzer.writeXref(in, out, annotation);
+        ShAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class SQLAnalyzerFactory extends FileAnalyzerFactory {
@@ -47,8 +48,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException {
-        SQLAnalyzer.writeXref(in, out, annotation);
+        SQLAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzerFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.Annotation;
 
 public class TclAnalyzerFactory extends FileAnalyzerFactory {
@@ -54,8 +55,8 @@ protected FileAnalyzer newAnalyzer() {
     }
 
     @Override
-    public void writeXref(InputStream in, Writer out, Annotation annotation)
+    public void writeXref(InputStream in, Writer out, Annotation annotation, Project project)
         throws IOException {
-        TclAnalyzer.writeXref(in, out, annotation);
+        TclAnalyzer.writeXref(in, out, annotation, project);
     }
 }

File: src/org/opensolaris/opengrok/index/CommandLineOptions.java
Patch:
@@ -89,6 +89,7 @@ public CommandLineOptions() {
         options.add(new Option('S', null, "Search for \"external\" source repositories and add them"));
         options.add(new Option('s', "/path/to/source/root", "The root directory of the source tree"));
         options.add(new Option('d', "/path/to/data/root", "The directory where OpenGrok stores the generated data"));
+        options.add(new Option('T', "number", "The number of threads to use for index generation. By default the number of threads will be set to the number of available CPUs"));
         options.add(new Option('?', null, "Help"));
     }
 

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -165,6 +165,7 @@ public synchronized void update() throws Exception {
         interrupted = false;
         try {
             writer = new IndexWriter(indexDirectory, AnalyzerGuru.getAnalyzer());
+            writer.setMaxFieldLength(RuntimeEnvironment.getInstance().getIndexWordLimit());
             String root;
             File sourceRoot;
 

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -185,11 +185,11 @@ public static void main(String argv[]) {
                         if (getopt.getOptarg().equalsIgnoreCase("on")) {
                             env.setRemoteScmSupported(true);
                         } else if (getopt.getOptarg().equalsIgnoreCase("off")) {
-                            env.setRemoteScmSupported(true);
+                            env.setRemoteScmSupported(false);
                         } else {
                             System.err.println("ERROR: You should pass either \"on\" or \"off\" as argument to -r");
                             System.err.println("       Ex: \"-r on\" will allow retrival for remote SCM systems");
-                            System.err.println("           \"-Q off\" will ignore SCM for remote systems");
+                            System.err.println("           \"-r off\" will ignore SCM for remote systems");
                         }
                     }
                     break;

File: src/org/opensolaris/opengrok/history/BazaarRepository.java
Patch:
@@ -48,7 +48,7 @@ public BazaarRepository() { }
      */
     public BazaarRepository(String directory) {
         setDirectoryName(new File(directory).getAbsolutePath());
-        command = System.getProperty("org.opensolaris.opengrok.history.Bazaar", "/Users/trond/bin/bzr");
+        command = System.getProperty("org.opensolaris.opengrok.history.Bazaar", "bzr");
     }
     
     /**

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -315,6 +315,8 @@ private void addFile(File file, String path) throws IOException {
         } else {
             System.err.println("Warning: did not add " + path);
         }
+
+        try { in.close(); } catch (Exception e) {}
     }
 
     /**

File: src/org/opensolaris/opengrok/configuration/RuntimeEnvironment.java
Patch:
@@ -489,6 +489,7 @@ public void setRemoteScmSupported(boolean supported) {
      */
     public void readConfiguration(File file) throws IOException {
         configuration = Configuration.read(file);
+        register();
     }
     
     /**
@@ -520,6 +521,7 @@ public void writeConfiguration(InetAddress host, int port) throws IOException {
 
     public void setConfiguration(Configuration configuration) {
         this.configuration = configuration;
+        register();
     }
     
     private ServerSocket configServerSocket;

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -40,8 +40,8 @@
  * @author Chandan
  */
 public class TroffAnalyzer extends FileAnalyzer {
-    public static char[] content;
-    public int len;
+    private char[] content;
+    private int len;
     
     private TroffFullTokenizer troffull;
     private TroffXref xref;

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzer.java
Patch:
@@ -40,11 +40,11 @@
  */
 public class XMLAnalyzer extends FileAnalyzer {
     
-    public static char[] content;
+    private char[] content;
+    private int len;
     private PlainFullTokenizer plainfull;
     private XMLXref xref;
-    private Reader dummy = new StringReader("");
-    int len;
+    private static final Reader dummy = new StringReader("");
     
     /**
      * Creates a new instance of XMLAnalyzer

File: src/org/opensolaris/opengrok/analysis/sql/SQLAnalyzer.java
Patch:
@@ -33,9 +33,6 @@
 import org.opensolaris.opengrok.history.Annotation;
 
 public class SQLAnalyzer extends PlainAnalyzer {
-    public static String[] suffixes = {
-        "SQL",
-    };
 
     private final SQLXref xref = new SQLXref((Reader)null);
 

File: src/org/opensolaris/opengrok/index/IndexDatabase.java
Patch:
@@ -302,7 +302,7 @@ private void addFile(File file, String path) throws IOException {
             listener.fileAdded(path, fa.getClass().getSimpleName());
         }
 
-        Document d = analyzerGuru.getDocument(file, in, path);
+        Document d = analyzerGuru.getDocument(file, in, path, fa);
         if (d != null) {
             writer.addDocument(d, fa);
             Genre g = fa.getFactory().getGenre();

File: src/org/opensolaris/opengrok/index/Index.java
Patch:
@@ -438,7 +438,7 @@ private void addFile(File file, String path) throws IOException {
         if (d != null) {
             //out.println(path);
             writer.addDocument(d, fa);
-            Genre g = AnalyzerGuru.getGenre(fa.getClass());
+            Genre g = fa.getFactory().getGenre();
             if (xrefDir != null && (g == Genre.PLAIN || g == Genre.XREFABLE)) {
                 fa.writeXref(xrefDir, path);
             }

File: src/org/opensolaris/opengrok/history/HistoryGuru.java
Patch:
@@ -73,7 +73,6 @@ private boolean isSvnAvailable() {
                 ex.printStackTrace();
             } catch (UnsatisfiedLinkError ex) {
                 System.err.println("Failed to initialize Subversion library.");
-                System.err.println("Please verify that you have Subversions native library in your ");
                 if (File.separatorChar == '/') {
                     System.err.println("Please verify that you have Subversions native library (libsvnjavahl-1.so) in your LD_LIBRARY_PATH");                    
                 } else {

File: src/org/opensolaris/opengrok/history/MercurialRepository.java
Patch:
@@ -190,7 +190,7 @@ public Annotation annotate(File file, String revision) throws Exception {
                 if (matcher.find()) {
                     String author = matcher.group(1);
                     String rev = matcher.group(2);
-                    a.addLine(rev, author);
+                    a.addLine(rev, author, true);
                 } else {
                     System.err.println("Error: did not find annotation in line " + lineno);
                     System.err.println("[" + line + "]");

File: src/org/opensolaris/opengrok/index/Index.java
Patch:
@@ -319,6 +319,8 @@ public int compare(File o1, File o2) {
      * May need to optimize if this gets worse.
      */
     private void startIndexing(File file, File indexDir, String parent) throws IOException {
+        parent = parent.replace('\\', '/');
+        
         if (!create) {
             String startuid =  Util.uid(parent + '/' + file.getName(), "");
             //System.out.println("Start uid = " + startuid);

File: src/org/opensolaris/opengrok/web/Util.java
Patch:
@@ -204,7 +204,7 @@ public static void readableLine(int num, Writer out, Annotation annotation)
      * separate the path from the date.
      */
     public static String uid(String path, String date) {
-        return path.replace(File.separatorChar, '\u0000') + "\u0000" + date;
+        return path.replace('/', '\u0000') + "\u0000" + date;
     }
     
     public static String uid2url(String uid) {

File: src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
Patch:
@@ -436,7 +436,8 @@ public static Class<? extends FileAnalyzer> find(String file) {
                 return analyzer;
             }
         }
-        return ext.get(file);
+        // file doesn't have any of the extensions we know
+        return null;
     }
 
     /**

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -54,7 +54,6 @@ public class CAnalyzer extends PlainAnalyzer {
                 "CC",
                 "C++",
                 "HH",
-                "JAVA",
                 "I",
                 "CXX",
                 "L",

File: test/org/opensolaris/opengrok/web/EftarFileTest.java
Patch:
@@ -107,7 +107,6 @@ public void createEftarFile() throws Exception {
      */
     @Test
     public void searchEftarFile() throws Exception {
-        System.out.println("search");
         EftarFileReader er = new EftarFileReader(eftar.getAbsolutePath());
         StringBuilder sb = new StringBuilder();
         StringBuilder match = new StringBuilder();

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.lucene.search.*;
 import org.apache.lucene.queryParser.*;
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 /**
  * Search and list the matching files
@@ -107,6 +108,7 @@ public static void main(String[] argv) {
 		
 		QueryParser qparser = new QueryParser("full", analyzer);
 		qparser.setDefaultOperator(QueryParser.AND_OPERATOR);
+                qparser.setAllowLeadingWildcard(RuntimeEnvironment.getInstance().isAllowLeadingWildcard());
 		Query query = qparser.parse(qstr); //parse the
 		File src_root = new File(DATA_ROOT, "SRC_ROOT");
 		String SRC_ROOT = "";

File: src/org/opensolaris/opengrok/search/scope/SearchEngine.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.lucene.search.Searcher;
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
 import org.opensolaris.opengrok.analysis.TagFilter;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.search.*;
-
 import org.opensolaris.opengrok.search.Summary.Fragment;
 import org.opensolaris.opengrok.search.context.Context;
 import org.opensolaris.opengrok.search.context.HistoryContext;
@@ -104,6 +104,7 @@ public SearchEngine() {
         analyzer = new CompatibleAnalyser();
         qparser = new QueryParser("full", analyzer);
         qparser.setDefaultOperator(QueryParser.AND_OPERATOR);
+        qparser.setAllowLeadingWildcard(RuntimeEnvironment.getInstance().isAllowLeadingWildcard());
     }
     
     /**

File: src/org/opensolaris/opengrok/configuration/Configuration.java
Patch:
@@ -59,6 +59,7 @@ public Configuration() {
         setCtags("ctags");
         setIndexWordLimit(60000);
         setVerbose(false);
+        setGenerateHtml(true);
     }
     
     public String getCtags() {

File: src/org/opensolaris/opengrok/index/Indexer.java
Patch:
@@ -314,7 +314,7 @@ public int compare(Project p1, Project p2){
 
                 if (runIndex) {
                     Index idx = new Index(env.isVerbose() ? new StandardPrinter(System.out) : new NullPrinter(), new StandardPrinter(System.err));
-                    idx.runIndexer(env.getDataRootFile(), env.getSourceRootFile(), subFiles, env.isGenerateHtml());
+                    idx.runIndexer(env.getDataRootFile(), env.getSourceRootFile(), subFiles, !env.isGenerateHtml());
                 }
 
                 if (configHost != null) {

File: src/org/opensolaris/opengrok/analysis/archive/BZip2Analyzer.java
Patch:
@@ -84,7 +84,7 @@ public void analyze(Document doc, InputStream in) {
 		    if(doc.get("t") != null) {
 			doc.removeField("t");
 			if (g == Genre.XREFABLE) {
-			    doc.add(new Field("t", "x", true, true, false));
+			    doc.add(new Field("t", "x", Field.Store.YES, Field.Index.UN_TOKENIZED));
 			}
 		    }
 		} else {

File: src/org/opensolaris/opengrok/analysis/archive/GZIPAnalyzer.java
Patch:
@@ -79,7 +79,7 @@ public void analyze(Document doc, InputStream in) {
 		    if(doc.get("t") != null) {
 			doc.removeField("t");
 			if (g == Genre.XREFABLE) {
-			    doc.add(new Field("t", "x", true, true, false));
+			    doc.add(new Field("t", "x", Field.Store.YES, Field.Index.UN_TOKENIZED));
 			}
 		    }
 		    return;

File: src/org/opensolaris/opengrok/analysis/archive/TarAnalyzer.java
Patch:
@@ -82,7 +82,7 @@ public void analyze(Document doc, InputStream in) {
                 len += ename.length();
                 content[len++] = '\n';
             }
-            doc.add(Field.Text("full",dummy));
+            doc.add(new Field("full",dummy));
         } catch (IOException e) {
         }
     }

File: src/org/opensolaris/opengrok/analysis/archive/ZipAnalyzer.java
Patch:
@@ -85,7 +85,7 @@ public void analyze(Document doc, InputStream in) {
                 len += ename.length();
                 content[len++] = '\n';
             }
-            doc.add(Field.Text("full",dummy));
+            doc.add(new Field("full",dummy));
         } catch (IOException e) {
         }
     }

File: src/org/opensolaris/opengrok/analysis/c/CAnalyzer.java
Patch:
@@ -77,7 +77,7 @@ public CAnalyzer() {
 
     public void analyze(Document doc, InputStream in) {
         super.analyze(doc, in);
-        doc.add(Field.Text("refs", dummy));
+        doc.add(new Field("refs", dummy));
     }    
     
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/analysis/document/TroffAnalyzer.java
Patch:
@@ -90,7 +90,7 @@ public void analyze(Document doc, InputStream in) {
 	} catch (IOException e) {
 	    return;
 	}
-	doc.add(Field.Text("full",  new StringReader("")));
+	doc.add(new Field("full", new StringReader("")));
     }
     
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/analysis/executables/ELFAnalyzer.java
Patch:
@@ -76,15 +76,15 @@ public void analyze(Document doc, InputStream in) {
 	    if(in instanceof FileInputStream) {
 		parseELF((FileInputStream) in);
 		if (len > 0) {
-		    doc.add(Field.Text("full", " "));
+		    doc.add(new Field("full", " ", Field.Store.YES, Field.Index.TOKENIZED));
 		    //doc.add(Field.Text("refs", " "));
 		}
 	    } else {
 		String fullpath = doc.get("fullpath");
 		FileInputStream fin = new FileInputStream(fullpath);
 		parseELF((FileInputStream) fin);
 		if (len > 0) {
-		    doc.add(Field.Text("full", " "));
+		    doc.add(new Field("full", " ", Field.Store.YES, Field.Index.TOKENIZED));
 		    //doc.add(Field.Text("refs", " "));
 		}
 	    }

File: src/org/opensolaris/opengrok/analysis/executables/JarAnalyzer.java
Patch:
@@ -118,12 +118,12 @@ public void analyze(Document doc, InputStream in) {
 		    
 		}
 	    }
-	    doc.add(Field.Text("full", new TagFilter(new StringReader(fullText.toString()))));
+	    doc.add(new Field("full", new TagFilter(new StringReader(fullText.toString()))));
 	    if(defs.size() > 0) {
-		doc.add(Field.Text("defs",dummy));
+		doc.add(new Field("defs",dummy));
 	    }
 	    if(refs.size() > 0) {
-		doc.add(Field.Text("refs",dummy));
+		doc.add(new Field("refs",dummy));
 	    }
 	} catch (IOException e) {
 	    e.printStackTrace();

File: src/org/opensolaris/opengrok/analysis/java/JavaAnalyzer.java
Patch:
@@ -41,7 +41,7 @@ public JavaAnalyzer() {
 
     public void analyze(Document doc, InputStream in) {
         super.analyze(doc, in);
-        doc.add(Field.Text("refs", dummy));
+        doc.add(new Field("refs", dummy));
     }    
     
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/analysis/lisp/LispAnalyzer.java
Patch:
@@ -52,7 +52,7 @@ public LispAnalyzer() {
 
     public void analyze(Document doc, InputStream in) {
         super.analyze(doc, in);
-        doc.add(Field.Text("refs", dummy));
+        doc.add(new Field("refs", dummy));
     }
 
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/analysis/plain/XMLAnalyzer.java
Patch:
@@ -95,7 +95,7 @@ public void analyze(Document doc, InputStream in) {
 	} catch (IOException e) {
 	    return;
 	}
-	doc.add(Field.Text("full", dummy));
+	doc.add(new Field("full", dummy));
     }
     
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/analysis/sh/ShAnalyzer.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.lucene.document.*;
 import org.apache.lucene.analysis.*;
 import java.io.*;
-import org.opensolaris.opengrok.analysis.FileAnalyzer;
 import org.opensolaris.opengrok.analysis.plain.*;
 import org.opensolaris.opengrok.history.Annotation;
 
@@ -82,7 +81,7 @@ public ShAnalyzer() {
 
     public void analyze(Document doc, InputStream in) {
         super.analyze(doc, in);
-        doc.add(Field.Text("refs", dummy));
+        doc.add(new Field("refs", dummy));
     }    
 
     public TokenStream tokenStream(String fieldName, Reader reader) {

File: src/org/opensolaris/opengrok/history/ExternalRepository.java
Patch:
@@ -56,6 +56,7 @@ public interface ExternalRepository {
      * @param file the file to annotate
      * @param revision revision of the file
      * @return an <code>Annotation</code> object
+     * @throws java.lang.Exception if an error occurs
      */
     Annotation annotate(File file, String revision) throws Exception;
 

File: src/org/opensolaris/opengrok/index/PathIndex.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String argv[]) {
                 String parent = (lastSlash != -1) ? path.substring(0, lastSlash) : "";
                 //System.out.println(parent);
                 Document doc = new Document();
-                doc.add(new Field("p", parent, true, true, false));
+                doc.add(new Field("p", parent, Field.Store.YES, Field.Index.TOKENIZED));
                 writer.addDocument(doc);
                 i++;
             }

File: src/org/opensolaris/opengrok/search/Search.java
Patch:
@@ -106,7 +106,7 @@ public static void main(String[] argv) {
 		    (hist == null ? "" : " hist:(" + hist+")");
 		
 		QueryParser qparser = new QueryParser("full", analyzer);
-		qparser.setOperator(QueryParser.DEFAULT_OPERATOR_AND);
+		qparser.setDefaultOperator(QueryParser.AND_OPERATOR);
 		Query query = qparser.parse(qstr); //parse the
 		File src_root = new File(DATA_ROOT, "SRC_ROOT");
 		String SRC_ROOT = "";

File: src/org/opensolaris/opengrok/search/Summarizer.java
Patch:
@@ -297,8 +297,9 @@ else if (query instanceof PrefixQuery)
     private void getBooleans(BooleanQuery query) {
         BooleanClause[] queryClauses = query.getClauses();
         for (int i = 0; i < queryClauses.length; i++) {
-            if (!queryClauses[i].prohibited)
-                getTerms(queryClauses[i].query);
+            if (!queryClauses[i].isProhibited()) {
+                getTerms(queryClauses[i].getQuery());
+            }
         }
     }
     

File: src/org/opensolaris/opengrok/search/context/Context.java
Patch:
@@ -34,6 +34,7 @@
 
 import java.io.*;
 import java.util.*;
+import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.search.*;
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
 import org.opensolaris.opengrok.search.Hit;
@@ -222,7 +223,8 @@ public boolean getContext(Reader in, Writer out, String urlPrefix, String morePr
     
     public static void main(String[] args) {
         try{
-            Context ctx = new Context(org.apache.lucene.queryParser.QueryParser.parse(args[0], "full", new CompatibleAnalyser()));
+            QueryParser parser = new QueryParser("full", new CompatibleAnalyser());
+            Context ctx = new Context(parser.parse(args[0]));
             Date start = new Date();
             Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
             ctx.getContext(new BufferedReader(new FileReader(args[1])), out, null, null, args[1], null, false, null);

File: src/org/opensolaris/opengrok/search/context/QueryMatchers.java
Patch:
@@ -87,8 +87,9 @@ else if (query instanceof PrefixQuery)
     private final void getBooleans(BooleanQuery query) {
         BooleanClause[] queryClauses = query.getClauses();
         for (int i = 0; i < queryClauses.length; i++) {
-            if (!queryClauses[i].prohibited)
-                getTerms(queryClauses[i].query);
+            if (!queryClauses[i].isProhibited()) {
+                getTerms(queryClauses[i].getQuery());
+            }
         }
     }
     

File: src/org/opensolaris/opengrok/search/scope/SearchEngine.java
Patch:
@@ -103,7 +103,7 @@ public class SearchEngine {
     public SearchEngine() {
         analyzer = new CompatibleAnalyser();
         qparser = new QueryParser("full", analyzer);
-        qparser.setOperator(QueryParser.DEFAULT_OPERATOR_AND);
+        qparser.setDefaultOperator(QueryParser.AND_OPERATOR);
     }
     
     /**

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -32,7 +32,6 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.StringTokenizer;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
 // This is a rewrite of the class that was previously called

File: src/org/opensolaris/opengrok/search/scope/HitTableModel.java
Patch:
@@ -104,7 +104,6 @@ public void addTableModelListener(TableModelListener l) {
      * @param aValue Not used
      * @param rowIndex Not used
      * @param columnIndex Not used
-     * @see setHits
      */
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         ;
@@ -254,7 +253,7 @@ public int getColumnCount() {
     
     /**
      * Set the searchEngine this TableModel should use
-     * @param hits A list containing all of the hits.
+     * @param se a <code>SearchEngine</code> object
      */
     public void setSearchEngine(SearchEngine se) {
         this.se = se;

File: src/org/opensolaris/opengrok/analysis/CompatibleAnalyser.java
Patch:
@@ -49,11 +49,11 @@ public TokenStream tokenStream(String fieldName, Reader reader) {
             return new PlainSymbolTokenizer(reader);
         } else if (fieldName.equals("defs")) {
             return new PlainSymbolTokenizer(reader);
-        } else if (fieldName.equals("path")) {
+        } else if (fieldName.equals("path") || fieldName.equals("project")) {
             return pather.tokenStream(fieldName, reader);
         } else if (fieldName.equals("hist")) {
             return historer.tokenStream(fieldName, reader);
-        }
+        } 
         return new PlainFullTokenizer(reader);
     }
 }

File: src/org/opensolaris/opengrok/analysis/FileAnalyzer.java
Patch:
@@ -81,11 +81,11 @@ public void analyze(Document doc, InputStream in) {
     }
     
     public TokenStream tokenStream(String fieldName, Reader reader) {
-	if("path".equals(fieldName)) {
+	if ("path".equals(fieldName) || "project".equals(fieldName)) {
 	    return new PathTokenizer(reader);
 	} else if("hist".equals(fieldName)) {
 	    return hista.tokenStream(fieldName, reader);
-	}
+        }
 	return null;
     }
     

File: src/org/opensolaris/opengrok/history/MercurialHistoryParser.java
Patch:
@@ -53,7 +53,7 @@ public History parse(File file, ExternalRepository repos)
         ArrayList<HistoryEntry> entries = new ArrayList<HistoryEntry>();
         InputStream is = mrepos.getHistoryStream(file);
         BufferedReader in = new BufferedReader(new InputStreamReader(is));
-        String mydir = mrepos.getDirectory().getAbsolutePath() + File.separator;
+        String mydir = mrepos.getDirectoryName() + File.separator;
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         String s;
         boolean description = false;

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -58,7 +58,6 @@ public class IgnoredNames {
         ".svn",
         ".hg",
         ".hgtags",
-        ".ogcache",
         "*~",
     };
     private static Set<String> ignore = new HashSet<String>();

File: src/org/opensolaris/opengrok/history/SubversionGet.java
Patch:
@@ -56,7 +56,7 @@ public int read(byte[] b, int off, int len) throws IOException {
             try {
                 revision = Long.parseLong(rev);
             } catch (NumberFormatException exp) {
-                throw new IOException("Failed to retrieve rev (" + rev + "): Nrot a vaild Subversion revision format");
+                throw new IOException("Failed to retrieve rev (" + rev + "): Not a valid Subversion revision format");
             }
             
             

File: src/org/opensolaris/opengrok/search/Summary.java
Patch:
@@ -82,7 +82,7 @@ public static class Ellipsis extends Fragment {
         public String toString() { return "<b> ... </b>"; }
     }
     
-    private ArrayList fragments = new ArrayList();
+    private ArrayList<Fragment> fragments = new ArrayList<Fragment>();
     
     private static final Fragment[] FRAGMENT_PROTO = new Fragment[0];
     

File: src/org/opensolaris/opengrok/web/DirectoryListing.java
Patch:
@@ -93,7 +93,7 @@ public ArrayList listTo(File dir, Writer out, String path, String[] files) throw
 	    out.write("<th><tt>Description</tt></th>");
 	}
 	out.write("</tr>");
-	ArrayList readMes = new ArrayList();
+	ArrayList<String> readMes = new ArrayList<String>();
 	for (int i = 0; i < files.length; i++) {
 	    if(!ignore.contains(files[i])) {
 		File child = new File(dir, files[i]);

File: src/org/opensolaris/opengrok/index/IgnoredNames.java
Patch:
@@ -56,7 +56,9 @@ public class IgnoredNames {
         "TAGS",
         "tags",
         ".svn",
-        ".hg"
+        ".hg",
+        ".hgtags",
+        ".hgcache"
     };
     public static Set<String> ignore = new HashSet<String>();
     static {

File: src/org/opensolaris/opengrok/analysis/c/Consts.java
Patch:
@@ -28,13 +28,13 @@
 
 package org.opensolaris.opengrok.analysis.c;
 
-import java.util.*;
+import java.util.HashSet;
 
 /**
   * Holds static hash set containing the C keywords
   */
 public class Consts{
-    public static final HashSet kwd = new HashSet() ;
+    public static final HashSet<String> kwd = new HashSet<String>() ;
     static {
         kwd.add( "throws" );
         kwd.add( "import" );

File: src/org/opensolaris/opengrok/analysis/java/Consts.java
Patch:
@@ -28,13 +28,13 @@
 
 package org.opensolaris.opengrok.analysis.java;
 
-import java.util.*;
+import java.util.HashSet;
 
 /**
   * Holds static hash set containing the Java keywords
   */
 public class Consts{
-    public static final HashSet kwd = new HashSet() ;
+    public static final HashSet<String> kwd = new HashSet<String>() ;
     static {
         kwd.add( "abstract" );
         kwd.add( "assert" );

File: src/org/opensolaris/opengrok/analysis/sh/Consts.java
Patch:
@@ -28,12 +28,12 @@
 
 package org.opensolaris.opengrok.analysis.sh;
 
-import java.util.*;
+import java.util.HashSet;
 /**
  * Shell keyword hash
  */
 public class Consts{
-    public static final HashSet shkwd = new HashSet() ;
+    public static final HashSet<String> shkwd = new HashSet<String>() ;
     static {
         shkwd.add( "my" );
         shkwd.add( "next" );

File: src/org/opensolaris/opengrok/search/scope/AltRenderer.java
Patch:
@@ -35,10 +35,7 @@
 
 import java.awt.Color;
 import java.awt.Graphics;
-import java.util.*;
-import javax.swing.table.AbstractTableModel;
 import javax.swing.table.*;
-import javax.swing.border.*;
 import javax.swing.*;
 import java.awt.Component;
 

File: src/org/opensolaris/opengrok/search/scope/IndexDatabase.java
Patch:
@@ -30,7 +30,6 @@
 
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
 

