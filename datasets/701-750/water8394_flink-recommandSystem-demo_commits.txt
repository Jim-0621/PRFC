File: flink-2-hbase/src/main/java/com/demo/map/LogMapFunction.java
Patch:
@@ -12,7 +12,7 @@ public class LogMapFunction implements MapFunction<String, LogEntity> {
 
     @Override
     public LogEntity map(String s) throws Exception {
-
+        System.out.println(s);
         LogEntity log = LogToEntity.getLog(s);
         if (null != log){
             String rowKey = log.getUserId() + "_" + log.getProductId()+ "_"+ log.getTime();

File: flink-2-hbase/src/main/java/com/demo/task/UserHistoryTask.java
Patch:
@@ -16,7 +16,7 @@ public static void main(String[] args) throws Exception {
         StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
 
         Properties properties = Property.getKafkaProperties("history");
-        DataStreamSource<String> dataStream = env.addSource(new FlinkKafkaConsumer<String>("history", new SimpleStringSchema(), properties));
+        DataStreamSource<String> dataStream = env.addSource(new FlinkKafkaConsumer<String>("con", new SimpleStringSchema(), properties));
         dataStream.map(new UserHistoryMapFunction());
 
         env.execute("User Product History");

File: flink-2-hbase/src/main/java/com/demo/task/UserInterestTask.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) throws Exception {
         StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
 
         Properties properties = Property.getKafkaProperties("interest");
-        DataStreamSource<String> dataStream = env.addSource(new FlinkKafkaConsumer<String>("history", new SimpleStringSchema(), properties));
+        DataStreamSource<String> dataStream = env.addSource(new FlinkKafkaConsumer<String>("con", new SimpleStringSchema(), properties));
         dataStream.map(new GetLogFunction()).keyBy("userId").map(new UserHistoryWithInterestMapFunction());
 
         env.execute("User Product History");

File: web/src/main/java/com/demo/service/impl/RecommandServiceImpl.java
Patch:
@@ -195,7 +195,7 @@ private List<ProductDto> transferToDto(List<String> list, List<ContactEntity> co
             }
             ret.add(dto);
         }
-        ret.forEach(System.out::println);
+//        ret.forEach(System.out::println);
         return ret;
     }
 

File: web/src/main/java/com/demo/service/impl/kafkaServiceImpl.java
Patch:
@@ -12,7 +12,7 @@
 @Service("kafkaService")
 public class kafkaServiceImpl implements KafkaService {
 
-    private String TOPIC = "log";
+    private String TOPIC = "con";
 
     @Override
     public void send(String key, String value) {
@@ -41,7 +41,6 @@ public String makeLog(String userId, String productId, String action) {
         sb.append(getSecondTimestamp(new Date()));
         sb.append(",");
         sb.append(action);
-        sb.append(",");
         return sb.toString();
     }
 

File: web/src/main/java/com/demo/util/Property.java
Patch:
@@ -39,6 +39,8 @@ public static Properties getKafkaProperties(String groupId) {
 		properties.setProperty("bootstrap.servers", getStrValue("kafka.bootstrap.servers"));
 		properties.setProperty("zookeeper.connect", getStrValue("kafka.zookeeper.connect"));
 		properties.setProperty("group.id", groupId);
+		properties.setProperty("key.serializer",getStrValue("kafka.key.serializer"));
+		properties.setProperty("value.serializer",getStrValue("kafka.value.serializer"));
 		return properties;
 	}
 

File: flink-2-hbase/src/main/java/com/demo/client/RedisClient.java
Patch:
@@ -33,7 +33,7 @@ public List<String> getTopList(int topRange){
     public static void main(String[] args) {
         RedisClient client = new RedisClient();
 
-        String data = client.getData("0");
+        String data = client.getData("3");
         System.out.println(data);
     }
 }

File: flink-2-hbase/src/main/java/com/demo/sink/TopNRedisSink.java
Patch:
@@ -10,13 +10,12 @@ public class TopNRedisSink implements RedisMapper<TopProductEntity> {
 
     @Override
     public RedisCommandDescription getCommandDescription() {
-        return new RedisCommandDescription(RedisCommand.LPUSH, "topN");
+        return new RedisCommandDescription(RedisCommand.SET, null);
     }
 
     @Override
     public String getKeyFromData(TopProductEntity s) {
-
-        return String.valueOf(s.getWindowEnd());
+        return String.valueOf(s.getRankName());
     }
 
     @Override

File: flink-2-hbase/src/main/java/com/demo/util/LogToEntity.java
Patch:
@@ -17,7 +17,7 @@ public static LogEntity getLog(String s){
         LogEntity log = new LogEntity();
         log.setUserId(Integer.parseInt(values[0]));
         log.setProductId(Integer.parseInt(values[1]));
-        log.setTime(new Long(values[2]));
+        log.setTime(Long.parseLong(values[2]));
         log.setAction(values[3]);
 
         return log;

File: web/src/main/java/com/demo/client/RedisClient.java
Patch:
@@ -11,7 +11,7 @@
 
 @Component
 public class RedisClient {
-    private Jedis jedis = new Jedis("192.168.0.100", 6379);
+    private Jedis jedis = new Jedis("192.168.124.110", 6379);
 
     @Autowired
     private ProductService productService;

File: web/src/main/java/com/demo/controller/BackstageController.java
Patch:
@@ -24,12 +24,12 @@ public class BackstageController {
      * 获取后台数据
      * @return json
      */
-    @GetMapping
+    @GetMapping("/index")
     public String getBackStage(Model model){
         List<String> topList = redisClient.getTopList(topSize);
+        System.out.println(topList);
         List<ProductEntity> topProduct = productService.selectByIds(topList);
         model.addAttribute("topProduct", topProduct);
         return "index";
     }
-
 }

