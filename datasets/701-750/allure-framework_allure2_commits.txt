File: allure-plugin-api/src/main/java/io/qameta/allure/metric/TimeMetric.java
Patch:
@@ -49,7 +49,9 @@ public List<MetricLine> getLines() {
                 lineFactory.apply("duration", zeroIfNull(groupTime.getDuration())),
                 lineFactory.apply("min_duration", zeroIfNull(groupTime.getMinDuration())),
                 lineFactory.apply("max_duration", zeroIfNull(groupTime.getMaxDuration())),
-                lineFactory.apply("sum_duration", zeroIfNull(groupTime.getSumDuration()))
+                lineFactory.apply("sum_duration", zeroIfNull(groupTime.getSumDuration())),
+                lineFactory.apply("start", zeroIfNull(groupTime.getStart())),
+                lineFactory.apply("stop", zeroIfNull(groupTime.getStop()))
         );
     }
 

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeUtils.java
Patch:
@@ -49,6 +49,7 @@ public static List<TreeLayer> groupByLabels(final TestResult testResult,
                                                 final LabelName... labelNames) {
         return Stream.of(labelNames)
                 .map(testResult::findAllLabels)
+                .map(strings -> strings.stream().distinct().collect(Collectors.toList()))
                 .filter(strings -> !strings.isEmpty())
                 .map(DefaultTreeLayer::new)
                 .collect(Collectors.toList());

File: allure-commandline/src/main/java/io/qameta/allure/command/PluginCommand.java
Patch:
@@ -25,7 +25,7 @@
  * @since 2.0
  */
 @SuppressWarnings("PMD.ImmutableField")
-@Parameters(commandDescription = "Generate the report")
+@Parameters(commandDescription = "Display plugins")
 public class PluginCommand {
 
     @ParametersDelegate

File: allure-generator/src/main/java/io/qameta/allure/allure2/Allure2Plugin.java
Patch:
@@ -75,9 +75,10 @@
  * @since 2.0
  */
 @SuppressWarnings({
-        "PMD.ExcessiveImports",
         "ClassDataAbstractionCoupling",
-        "ClassFanOutComplexity"
+        "ClassFanOutComplexity",
+        "PMD.ExcessiveImports",
+        "PMD.TooManyMethods",
 })
 public class Allure2Plugin implements Reader {
 

File: allure-generator/src/main/java/io/qameta/allure/core/ReportWebGenerator.java
Patch:
@@ -43,6 +43,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
+@SuppressWarnings("PMD.CognitiveComplexity")
 public class ReportWebGenerator {
 
     private static final String FAVICON_ICO = "favicon.ico";

File: allure-generator/src/main/java/io/qameta/allure/severity/SeverityPlugin.java
Patch:
@@ -52,7 +52,7 @@ public SeverityPlugin() {
     /**
      * Adds severity to test results.
      */
-    private static class SeverityAggregator implements Aggregator2 {
+    private static final class SeverityAggregator implements Aggregator2 {
 
         @Override
         public void aggregate(final Configuration configuration,
@@ -75,7 +75,7 @@ private void setSeverityLevel(final TestResult result) {
     /**
      * Generates widget data.
      */
-    private static class WidgetAggregator extends CommonJsonAggregator2 {
+    private static final class WidgetAggregator extends CommonJsonAggregator2 {
 
         WidgetAggregator() {
             super("widgets", JSON_FILE_NAME);

File: allure-plugin-api/src/main/java/io/qameta/allure/core/Configuration.java
Patch:
@@ -99,7 +99,7 @@ default <T extends Extension> List<T> getExtensions(final Class<T> extensionType
      * @param <T>         the java type of context's type.
      * @return resolved context.
      */
-    default <T, S extends Context<T>> Optional<S> getContext(Class<S> contextType) {
+    default <T, S extends Context<T>> Optional<S> getContext(final Class<S> contextType) {
         return getExtensions(contextType).stream()
                 .findFirst();
     }
@@ -111,7 +111,7 @@ default <T, S extends Context<T>> Optional<S> getContext(Class<S> contextType) {
      * @return resolved context.
      * @throws ContextNotFoundException if no such context present.
      */
-    default <T, S extends Context<T>> S requireContext(Class<S> contextType) {
+    default <T, S extends Context<T>> S requireContext(final Class<S> contextType) {
         return getContext(contextType).orElseThrow(() -> new ContextNotFoundException(contextType));
     }
 }

File: allure-plugin-api/src/main/java/io/qameta/allure/core/LaunchResults.java
Patch:
@@ -75,7 +75,7 @@ default Set<TestResult> getResults() {
      * @param <T>          the java type of extra block.
      * @return the found block or default value.
      */
-    default <T> T getExtra(String name, Supplier<T> defaultValue) {
+    default <T> T getExtra(final String name, final Supplier<T> defaultValue) {
         final Optional<T> extra = getExtra(name);
         return extra.orElseGet(defaultValue);
     }

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/Summarizable.java
Patch:
@@ -65,7 +65,7 @@ default boolean shouldDisplayMessage() {
                 .noneMatch(step -> step.hasMessage(message.get()));
     }
 
-    default boolean hasMessage(String message) {
+    default boolean hasMessage(final String message) {
         final Optional<String> current = Optional.ofNullable(getStatusMessage())
                 .filter(s -> Objects.equals(s, message));
         return current.isPresent() || getSteps().stream()

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithGroupTime.java
Patch:
@@ -24,11 +24,11 @@ public interface WithGroupTime {
 
     void setTime(GroupTime time);
 
-    default void updateTime(GroupTime groupTime) {
+    default void updateTime(final GroupTime groupTime) {
         getTimeSafe().merge(groupTime);
     }
 
-    default void updateTime(Timeable timed) {
+    default void updateTime(final Timeable timed) {
         getTimeSafe().update(timed.getTime());
     }
 

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithStatistic.java
Patch:
@@ -25,15 +25,15 @@ public interface WithStatistic {
 
     void setStatistic(Statistic statistic);
 
-    default void updateStatistic(Statistic other) {
+    default void updateStatistic(final Statistic other) {
         getStatistic().setFailed(other.getFailed() + getStatistic().getFailed());
         getStatistic().setBroken(other.getBroken() + getStatistic().getBroken());
         getStatistic().setPassed(other.getPassed() + getStatistic().getPassed());
         getStatistic().setSkipped(other.getSkipped() + getStatistic().getSkipped());
         getStatistic().setUnknown(other.getUnknown() + getStatistic().getUnknown());
     }
 
-    default void updateStatistic(Statusable statusable) {
+    default void updateStatistic(final Statusable statusable) {
         if (statusable == null) {
             return;
         }

File: plugins/junit-xml-plugin/src/main/java/io/qameta/allure/junitxml/JunitXmlPlugin.java
Patch:
@@ -269,7 +269,7 @@ private Status getStatus(final XmlElement testCaseElement) {
         }
 
         if ((testCaseElement.containsAttribute(STATUS_ATTRIBUTE_NAME))
-                && (testCaseElement.getAttribute(STATUS_ATTRIBUTE_NAME).equals(SKIPPED_ATTRIBUTE_VALUE))) {
+                && (SKIPPED_ATTRIBUTE_VALUE.equals(testCaseElement.getAttribute(STATUS_ATTRIBUTE_NAME)))) {
             return Status.SKIPPED;
         }
 

File: plugins/xray-plugin/src/main/java/io/qameta/allure/xray/XrayTestRunExportPlugin.java
Patch:
@@ -98,6 +98,7 @@ public void aggregate(final Configuration configuration,
         }
     }
 
+    @SuppressWarnings("PMD.CognitiveComplexity")
     private void updateTestRunStatuses(final List<LaunchResults> launchesResults) {
         final List<String> executionIssues = splitByComma(issues);
         final JiraService jiraService = jiraServiceSupplier.get();
@@ -132,7 +133,7 @@ private void updateTestRunStatuses(final List<LaunchResults> launchesResults) {
 
                                 case XRAY_STATUS_PASS:
                                     if (!linkNamePerStatus.containsKey(link.getName())
-                                        || linkNamePerStatus.get(link.getName()).equals(XRAY_STATUS_TODO)) {
+                                        || XRAY_STATUS_TODO.equals(linkNamePerStatus.get(link.getName()))) {
                                         linkNamePerStatus.put(link.getName(), status);
                                     }
                                     break;

File: allure-commandline/src/main/java/io/qameta/allure/CommandLine.java
Patch:
@@ -161,6 +161,7 @@ public ExitCode run() {
                         generateCommand.getReportDirectory(),
                         generateCommand.getResultsOptions().getResultsDirectories(),
                         generateCommand.isCleanReportDirectory(),
+                        generateCommand.isSingleFileMode(),
                         generateCommand.getConfigOptions()
                 );
             case SERVE_COMMAND:

File: allure-generator/src/main/java/io/qameta/allure/ConfigurationBuilder.java
Patch:
@@ -28,7 +28,6 @@
 import io.qameta.allure.core.Configuration;
 import io.qameta.allure.core.MarkdownDescriptionsPlugin;
 import io.qameta.allure.core.Plugin;
-import io.qameta.allure.core.ReportWebPlugin;
 import io.qameta.allure.core.TestsResultsPlugin;
 import io.qameta.allure.duration.DurationPlugin;
 import io.qameta.allure.duration.DurationTrendPlugin;
@@ -110,7 +109,6 @@ public ConfigurationBuilder useDefault() {
                 new StatusChartPlugin(),
                 new TimelinePlugin(),
                 new SuitesPlugin(),
-                new ReportWebPlugin(),
                 new TestsResultsPlugin(),
                 new AttachmentsPlugin(),
                 new MailPlugin(),

File: allure-generator/src/main/java/io/qameta/allure/category/CategoriesTrendPlugin.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.trend.AbstractTrendPlugin;
@@ -87,7 +87,7 @@ private static CategoriesTrendItem createCurrent(final List<LaunchResults> launc
     /**
      * Generates history trend data.
      */
-    private static class JsonAggregator extends CommonJsonAggregator {
+    private static class JsonAggregator extends CommonJsonAggregator2 {
 
         JsonAggregator() {
             super(Constants.HISTORY_DIR, JSON_FILE_NAME);
@@ -102,7 +102,7 @@ protected List<CategoriesTrendItem> getData(final List<LaunchResults> launches)
     /**
      * Generates widget data.
      */
-    private static class WidgetAggregator extends CommonJsonAggregator {
+    private static class WidgetAggregator extends CommonJsonAggregator2 {
 
         WidgetAggregator() {
             super(Constants.WIDGETS_DIR, JSON_FILE_NAME);

File: allure-generator/src/main/java/io/qameta/allure/core/ReportWebPlugin.java
Patch:
@@ -45,7 +45,9 @@
  * Plugins that stores report static files to data directory.
  *
  * @since 2.0
+ * @deprecated for removal. Use {@link ReportWebGenerator instead}.
  */
+@Deprecated
 public class ReportWebPlugin implements Aggregator {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ReportWebPlugin.class);

File: allure-generator/src/main/java/io/qameta/allure/duration/DurationPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.duration;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.TestResult;
@@ -29,7 +29,7 @@
  *
  * @since 2.0
  */
-public class DurationPlugin extends CommonJsonAggregator {
+public class DurationPlugin extends CommonJsonAggregator2 {
 
     public DurationPlugin() {
         super(Constants.WIDGETS_DIR, "duration.json");

File: allure-generator/src/main/java/io/qameta/allure/duration/DurationTrendPlugin.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.trend.AbstractTrendPlugin;
@@ -88,7 +88,7 @@ private static DurationTrendItem createCurrent(final List<LaunchResults> launche
     /**
      * Generates tree data.
      */
-    private static class JsonAggregator extends CommonJsonAggregator {
+    private static class JsonAggregator extends CommonJsonAggregator2 {
 
         JsonAggregator() {
             super(Constants.HISTORY_DIR, JSON_FILE_NAME);
@@ -103,7 +103,7 @@ protected List<DurationTrendItem> getData(final List<LaunchResults> launches) {
     /**
      * Generates widget data.
      */
-    private static class WidgetAggregator extends CommonJsonAggregator {
+    private static class WidgetAggregator extends CommonJsonAggregator2 {
 
         WidgetAggregator() {
             super(Constants.WIDGETS_DIR, JSON_FILE_NAME);

File: allure-generator/src/main/java/io/qameta/allure/environment/Allure1EnvironmentPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.environment;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.EnvironmentItem;
 
@@ -35,7 +35,7 @@
 /**
  * @author Egor Borisov ehborisov@gmail.com
  */
-public class Allure1EnvironmentPlugin extends CommonJsonAggregator {
+public class Allure1EnvironmentPlugin extends CommonJsonAggregator2 {
 
     public Allure1EnvironmentPlugin() {
         super("widgets", "environment.json");

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.executor;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.Reader;
 import io.qameta.allure.context.JacksonContext;
@@ -35,7 +35,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class ExecutorPlugin extends CommonJsonAggregator implements Reader {
+public class ExecutorPlugin extends CommonJsonAggregator2 implements Reader {
 
     public static final String EXECUTORS_BLOCK_NAME = "executor";
     protected static final String JSON_FILE_NAME = "executor.json";

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryTrendPlugin.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.Statistic;
@@ -100,7 +100,7 @@ private static List<HistoryTrendItem> getPreviousTrendData(final LaunchResults r
     /**
      * Generates history trend data.
      */
-    protected static class JsonAggregator extends CommonJsonAggregator {
+    protected static class JsonAggregator extends CommonJsonAggregator2 {
 
         JsonAggregator() {
             super(Constants.HISTORY_DIR, JSON_FILE_NAME);
@@ -115,7 +115,7 @@ protected List<HistoryTrendItem> getData(final List<LaunchResults> launches) {
     /**
      * Generates widget data.
      */
-    private static class WidgetAggregator extends CommonJsonAggregator {
+    private static class WidgetAggregator extends CommonJsonAggregator2 {
 
         WidgetAggregator() {
             super(Constants.WIDGETS_DIR, JSON_FILE_NAME);

File: allure-generator/src/main/java/io/qameta/allure/influxdb/InfluxDbExportPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.influxdb;
 
-import io.qameta.allure.CommonMetricAggregator;
+import io.qameta.allure.CommonMetricAggregator2;
 import io.qameta.allure.category.CategoriesMetric;
 import io.qameta.allure.metric.Metric;
 import io.qameta.allure.metric.StatusMetric;
@@ -30,7 +30,7 @@
 /**
  * Plugin that generates data for influx db.
  */
-public class InfluxDbExportPlugin extends CommonMetricAggregator {
+public class InfluxDbExportPlugin extends CommonMetricAggregator2 {
 
     public InfluxDbExportPlugin() {
         super("influxDbData.txt");

File: allure-generator/src/main/java/io/qameta/allure/launch/LaunchPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.launch;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.Reader;
 import io.qameta.allure.context.JacksonContext;
@@ -35,7 +35,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class LaunchPlugin extends CommonJsonAggregator implements Reader {
+public class LaunchPlugin extends CommonJsonAggregator2 implements Reader {
 
     private static final String LAUNCH_BLOCK_NAME = "launch";
     private static final String JSON_FILE_NAME = "launch.json";

File: allure-generator/src/main/java/io/qameta/allure/plugin/DefaultPluginLoader.java
Patch:
@@ -73,7 +73,7 @@ private Optional<Extension> load(final ClassLoader classLoader, final String nam
                     .getDeclaredConstructor().newInstance();
             return Optional.of(loaded);
         } catch (Exception e) {
-            LOGGER.error("Could not load extension class {}: {}", name, e);
+            LOGGER.error("Could not load extension class {}", name, e);
             return Optional.empty();
         }
     }

File: allure-generator/src/main/java/io/qameta/allure/prometheus/PrometheusExportPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.prometheus;
 
-import io.qameta.allure.CommonMetricAggregator;
+import io.qameta.allure.CommonMetricAggregator2;
 import io.qameta.allure.category.CategoriesMetric;
 import io.qameta.allure.metric.Metric;
 import io.qameta.allure.metric.StatusMetric;
@@ -28,7 +28,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class PrometheusExportPlugin extends CommonMetricAggregator {
+public class PrometheusExportPlugin extends CommonMetricAggregator2 {
 
     private static final String ALLURE_PROMETHEUS_LABELS = "allure.prometheus.labels";
 

File: allure-generator/src/main/java/io/qameta/allure/retry/RetryTrendPlugin.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.trend.AbstractTrendPlugin;
@@ -88,7 +88,7 @@ private static RetryTrendItem createCurrent(final List<LaunchResults> launchesRe
     /**
      * Generates retries trend data.
      */
-    protected static class JsonAggregator extends CommonJsonAggregator {
+    protected static class JsonAggregator extends CommonJsonAggregator2 {
 
         JsonAggregator() {
             super(Constants.HISTORY_DIR, JSON_FILE_NAME);
@@ -103,7 +103,7 @@ protected List<RetryTrendItem> getData(final List<LaunchResults> launches) {
     /**
      * Generates widget data.
      */
-    private static class WidgetAggregator extends CommonJsonAggregator {
+    private static class WidgetAggregator extends CommonJsonAggregator2 {
 
         WidgetAggregator() {
             super(Constants.WIDGETS_DIR, JSON_FILE_NAME);

File: allure-generator/src/main/java/io/qameta/allure/status/StatusChartPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.status;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.TestResult;
@@ -29,7 +29,7 @@
  *
  * @since 2.0
  */
-public class StatusChartPlugin extends CommonJsonAggregator {
+public class StatusChartPlugin extends CommonJsonAggregator2 {
 
     public StatusChartPlugin() {
         super(Constants.WIDGETS_DIR, "status-chart.json");

File: allure-generator/src/main/java/io/qameta/allure/summary/SummaryPlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.summary;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.Constants;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.GroupTime;
@@ -28,7 +28,7 @@
  *
  * @since 2.0
  */
-public class SummaryPlugin extends CommonJsonAggregator {
+public class SummaryPlugin extends CommonJsonAggregator2 {
 
     /**
      * Name of the json file.

File: allure-generator/src/main/java/io/qameta/allure/timeline/TimelinePlugin.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.qameta.allure.timeline;
 
-import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.CommonJsonAggregator2;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.LabelName;
 import io.qameta.allure.entity.TestResult;
@@ -32,7 +32,7 @@
  *
  * @since 2.0
  */
-public class TimelinePlugin extends CommonJsonAggregator {
+public class TimelinePlugin extends CommonJsonAggregator2 {
 
     public TimelinePlugin() {
         super("timeline.json");

File: allure-generator/src/test/java/io/qameta/allure/history/HistoryTrendPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.qameta.allure.context.JacksonContext;
 import io.qameta.allure.core.Configuration;
+import io.qameta.allure.core.InMemoryReportStorage;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.core.ResultsVisitor;
 import io.qameta.allure.entity.ExecutorInfo;
@@ -148,7 +149,7 @@ void shouldProcessCorruptedData(@TempDir final Path resultsDirectory) throws Exc
 
     @SuppressWarnings("unchecked")
     @Test
-    void shouldAggregateForEmptyReport(@TempDir final Path outputDirectory) throws Exception {
+    void shouldAggregateForEmptyReport() throws Exception {
         final Configuration configuration = mock(Configuration.class);
         final JacksonContext context = mock(JacksonContext.class);
         final ObjectMapper mapper = mock(ObjectMapper.class);
@@ -160,7 +161,7 @@ void shouldAggregateForEmptyReport(@TempDir final Path outputDirectory) throws E
                 .thenReturn(mapper);
 
         final HistoryTrendPlugin.JsonAggregator aggregator = new HistoryTrendPlugin.JsonAggregator();
-        aggregator.aggregate(configuration, Collections.emptyList(), outputDirectory);
+        aggregator.aggregate(configuration, Collections.emptyList(), new InMemoryReportStorage());
 
         final ArgumentCaptor<List<HistoryTrendItem>> captor = ArgumentCaptor.forClass(List.class);
         verify(mapper, times(1))

File: allure-generator/src/test/java/io/qameta/allure/idea/IdeaLinksPluginTest.java
Patch:
@@ -16,13 +16,13 @@
 package io.qameta.allure.idea;
 
 import io.qameta.allure.core.Configuration;
+import io.qameta.allure.core.InMemoryReportStorage;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.Label;
 import io.qameta.allure.entity.Link;
 import io.qameta.allure.entity.TestResult;
 import org.junit.jupiter.api.Test;
 
-import java.nio.file.Paths;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
@@ -49,7 +49,7 @@ void shouldExportTestResultToJira() {
         jiraTestResultExportPlugin.aggregate(
                 mock(Configuration.class),
                 Collections.singletonList(launchResults),
-                Paths.get("/")
+                new InMemoryReportStorage()
         );
 
         assertThat(testResult.getLinks()).hasSize(1);

File: allure-plugin-api/src/main/java/io/qameta/allure/Aggregator.java
Patch:
@@ -27,8 +27,10 @@
  * some data to report directory.
  *
  * @since 2.0
+ * @deprecated for removal. Use {@link Aggregator2} instead.
  */
 @FunctionalInterface
+@Deprecated
 public interface Aggregator extends Extension {
 
     /**

File: allure-plugin-api/src/main/java/io/qameta/allure/CommonCsvExportAggregator.java
Patch:
@@ -37,7 +37,9 @@
  *
  * @param <T> type of result bean.
  * @since 2.0
+ * @deprecated for removal. Use {@link CommonCsvExportAggregator2} instead.
  */
+@Deprecated
 public abstract class CommonCsvExportAggregator<T> implements Aggregator {
 
     private final String fileName;
@@ -96,7 +98,7 @@ public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
 
         private String extractHeaderName(final BeanField<T> beanField) {
             if (beanField == null || beanField.getField() == null
-                    || beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class).length == 0) {
+                || beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class).length == 0) {
                 return StringUtils.EMPTY;
             }
 

File: allure-plugin-api/src/main/java/io/qameta/allure/CommonJsonAggregator.java
Patch:
@@ -27,7 +27,10 @@
 
 /**
  * Common json aggregator.
+ *
+ * @deprecated for removal. Use {@link CommonJsonAggregator2} instead.
  */
+@Deprecated
 public abstract class CommonJsonAggregator implements Aggregator {
 
     private final String location;

File: allure-plugin-api/src/main/java/io/qameta/allure/CommonMetricAggregator.java
Patch:
@@ -32,7 +32,9 @@
 
 /**
  * @author charlie (Dmitry Baev).
+ * @deprecated for removal. Use {@link CommonJsonAggregator2} instead.
  */
+@Deprecated
 public abstract class CommonMetricAggregator implements Aggregator {
 
     private final String location;

File: allure-plugin-api/src/main/java/io/qameta/allure/CompositeAggregator.java
Patch:
@@ -26,7 +26,9 @@
  * Composite aggregator extension. Can be used to process the list of aggregator.
  *
  * @since 2.0
+ * @deprecated for removal. Use {@link CompositeAggregator2} instead.
  */
+@Deprecated
 public class CompositeAggregator implements Aggregator {
 
     private final List<Aggregator> aggregators;

File: plugins/jira-plugin/src/test/java/io/qameta/allure/jira/JiraLaunchExportPluginTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.qameta.allure.jira;
 
 import io.qameta.allure.core.Configuration;
+import io.qameta.allure.core.InMemoryReportStorage;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.ExecutorInfo;
 import io.qameta.allure.entity.Statistic;
@@ -24,7 +25,6 @@
 import org.apache.commons.lang3.RandomStringUtils;
 import org.junit.jupiter.api.Test;
 
-import java.nio.file.Paths;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
@@ -72,7 +72,7 @@ void shouldExportLaunchToJira() {
         jiraLaunchExportPlugin.aggregate(
                 mock(Configuration.class),
                 Collections.singletonList(launchResults),
-                Paths.get("/")
+                new InMemoryReportStorage()
         );
 
         verify(service, times(1)).createJiraLaunch(any(JiraLaunch.class), anyList());

File: plugins/jira-plugin/src/test/java/io/qameta/allure/jira/JiraTestResultExportPluginTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.qameta.allure.jira;
 
 import io.qameta.allure.core.Configuration;
+import io.qameta.allure.core.InMemoryReportStorage;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.ExecutorInfo;
 import io.qameta.allure.entity.Link;
@@ -25,7 +26,6 @@
 import org.apache.commons.lang3.RandomStringUtils;
 import org.junit.jupiter.api.Test;
 
-import java.nio.file.Paths;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
@@ -76,7 +76,7 @@ void shouldExportTestResultToJira() {
         jiraExportPlugin.aggregate(
                 mock(Configuration.class),
                 Collections.singletonList(launchResults),
-                Paths.get("/")
+                new InMemoryReportStorage()
         );
 
 

File: allure-generator/src/main/java/io/qameta/allure/DummyReportGenerator.java
Patch:
@@ -23,6 +23,7 @@
 import io.qameta.allure.context.JacksonContext;
 import io.qameta.allure.context.MarkdownContext;
 import io.qameta.allure.context.RandomUidContext;
+import io.qameta.allure.context.ReportInfoContext;
 import io.qameta.allure.core.AttachmentsPlugin;
 import io.qameta.allure.core.Configuration;
 import io.qameta.allure.core.LaunchResults;
@@ -81,6 +82,7 @@ public final class DummyReportGenerator {
     private static final List<Extension> EXTENSIONS = Arrays.asList(
             new JacksonContext(),
             new MarkdownContext(),
+            new ReportInfoContext("dev"),
             new FreemarkerContext(),
             new RandomUidContext(),
             new MarkdownDescriptionsPlugin(),

File: allure-generator/src/main/java/io/qameta/allure/ga/GaParameters.java
Patch:
@@ -27,6 +27,8 @@
 @Accessors(chain = true)
 public class GaParameters {
 
+    private String reportUuid;
+
     private String allureVersion;
 
     private String executorType;

File: allure-jira-commons/src/main/java/io/qameta/allure/jira/JiraService.java
Patch:
@@ -47,7 +47,7 @@ public interface JiraService {
     List<JiraTestResult> getTestResults(@Query("issueKey") String issueKey);
 
     @GET("raven/1.0/api/testexec/{issueKey}/test")
-    List<XrayTestRun> getTestRunsForTestExecution(@Path("issueKey") String issueKey);
+    List<XrayTestRun> getTestRunsForTestExecution(@Path("issueKey") String issueKey, @Query("page") int page);
 
     @PUT("raven/1.0/api/testrun/{externalId}/status")
     Response<ResponseBody> updateTestRunStatus(@Path("externalId") Integer externalId, @Query("status") String status);

File: allure-commandline/src/main/java/io/qameta/allure/Commands.java
Patch:
@@ -20,14 +20,14 @@
 import io.qameta.allure.core.Plugin;
 import io.qameta.allure.option.ConfigOptions;
 import io.qameta.allure.plugin.DefaultPluginLoader;
-import java.awt.AWTError;
 import org.apache.commons.io.FileUtils;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.handler.ResourceHandler;
 import org.eclipse.jetty.util.resource.Resource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.awt.AWTError;
 import java.awt.Desktop;
 import java.io.IOException;
 import java.net.InetSocketAddress;

File: allure-commandline/src/main/java/io/qameta/allure/Commands.java
Patch:
@@ -20,6 +20,7 @@
 import io.qameta.allure.core.Plugin;
 import io.qameta.allure.option.ConfigOptions;
 import io.qameta.allure.plugin.DefaultPluginLoader;
+import java.awt.AWTError;
 import org.apache.commons.io.FileUtils;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.handler.ResourceHandler;
@@ -149,7 +150,7 @@ public ExitCode open(final Path reportDirectory, final String host, final int po
 
         try {
             openBrowser(server.getURI());
-        } catch (IOException e) {
+        } catch (IOException | AWTError e) {
             LOGGER.error(
                     "Could not open the report in browser, try to open it manually {}: {}",
                     server.getURI(),

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/TestResult.java
Patch:
@@ -58,6 +58,7 @@ public class TestResult implements Serializable, Nameable, Parameterizable, Stat
     protected boolean flaky;
     protected boolean newFailed;
     protected boolean newPassed;
+    protected boolean newBroken;
 
     //    Execution
     protected List<StageResult> beforeStages = new ArrayList<>();

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/TestResult.java
Patch:
@@ -57,6 +57,7 @@ public class TestResult implements Serializable, Nameable, Parameterizable, Stat
 
     protected boolean flaky;
     protected boolean newFailed;
+    protected boolean newPassed;
 
     //    Execution
     protected List<StageResult> beforeStages = new ArrayList<>();

File: allure-commandline/src/main/java/io/qameta/allure/command/OpenCommand.java
Patch:
@@ -46,7 +46,7 @@ public class OpenCommand {
     private HostPortOptions hostPortOptions = new HostPortOptions();
 
     public List<Path> getReportDirectories() {
-        return reportDirectories;
+        return Collections.unmodifiableList(reportDirectories);
     }
 
     public HostPortOptions getHostPortOptions() {

File: allure-commandline/src/main/java/io/qameta/allure/option/ResultsOptions.java
Patch:
@@ -21,6 +21,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import static java.util.Collections.singletonList;
@@ -40,6 +41,6 @@ public class ResultsOptions {
     private List<Path> resultsDirectories = new ArrayList<>(singletonList(Paths.get("allure-results")));
 
     public List<Path> getResultsDirectories() {
-        return resultsDirectories;
+        return Collections.unmodifiableList(resultsDirectories);
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/ReportGenerator.java
Patch:
@@ -72,7 +72,7 @@ private void generate(final Path outputDirectory, final Stream<Path> resultsDire
 
     private boolean isValidResultsDirectory(final Path resultsDirectory) {
         if (Files.notExists(resultsDirectory)) {
-            LOGGER.warn("{} does not exists", resultsDirectory);
+            LOGGER.warn("{} does not exist", resultsDirectory);
             return false;
         }
         if (!Files.isDirectory(resultsDirectory)) {

File: allure-jira-commons/src/main/java/io/qameta/allure/jira/JiraLaunch.java
Patch:
@@ -29,7 +29,7 @@
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class JiraLaunch {
 
-    private int id;
+    private String externalId;
 
     private List<String> issueKeys;
 

File: allure-jira-commons/src/main/java/io/qameta/allure/jira/JiraTestResult.java
Patch:
@@ -31,7 +31,7 @@ public class JiraTestResult {
 
     private int id;
 
-    private Integer launchId;
+    private String externalId;
     private List<String> issueKeys;
 
     private String name;

File: plugins/jira-plugin/src/main/java/io/qameta/allure/jira/JiraExportPlugin.java
Patch:
@@ -121,7 +121,7 @@ private Optional<JiraTestResult> getJiraTestResult(final JiraLaunch launch,
                     .setUrl(getJiraTestResultUrl(executor.getReportUrl(), testResult.getUid()))
                     .setStatus(testResult.getStatus().toString())
                     .setDate(testResult.getTime().getStop())
-                    .setLaunchId(launch.getId());
+                    .setExternalId(launch.getExternalId());
             return Optional.of(jiraTestResult);
         }
     }
@@ -158,7 +158,7 @@ private JiraLaunch exportLaunchToJira(final JiraService jiraService, final JiraL
         try {
             final JiraLaunch created = jiraService.createJiraLaunch(launch);
             LOGGER.info(String.format("Allure launch '%s' synced with issues '%s' successfully",
-                    created.getId(), created.getIssueKeys()));
+                    created.getExternalId(), created.getIssueKeys()));
             return created;
         } catch (Throwable e) {
             LOGGER.error(String.format("Allure launch sync with issue '%s' error", launch.getIssueKeys()), e);

File: plugins/jira-plugin/src/test/java/io/qameta/allure/jira/JiraTestResultExportPluginTest.java
Patch:
@@ -86,7 +86,7 @@ void shouldExportTestResultToJira() {
         verify(service).createTestResult(argThat(result -> testResult.getName().equals(result.getName())));
         verify(service).createTestResult(argThat(result -> testResult.getStatus().toString().equals(result.getStatus())));
         verify(service).createTestResult(argThat(result -> result.getUrl().contains(testResult.getUid())));
-        verify(service).createTestResult(argThat(result -> Objects.nonNull(result.getLaunchId())));
+        verify(service).createTestResult(argThat(result -> Objects.nonNull(result.getExternalId())));
 
     }
 

File: plugins/jira-plugin/src/test/java/io/qameta/allure/jira/TestData.java
Patch:
@@ -33,7 +33,7 @@ public static JiraService mockJiraService() {
         final JiraService service = mock(JiraService.class);
         when(service.createJiraLaunch(any(JiraLaunch.class))).thenAnswer(i -> {
             final JiraLaunch launch = i.getArgument(0);
-            launch.setId(RandomUtils.nextInt());
+            launch.setExternalId(String.valueOf(RandomUtils.nextInt()));
             return launch;
         });
         when(service.createTestResult(any(JiraTestResult.class))).thenAnswer(i -> {

File: allure-commandline/src/main/java/io/qameta/allure/validator/PortValidator.java
Patch:
@@ -27,7 +27,7 @@ public class PortValidator implements IParameterValidator {
     private static final String MESSAGE = "invalid port value. Should be an integer between 0 and 65535";
 
     @Override
-    public void validate(final String name, final String value) throws ParameterException {
+    public void validate(final String name, final String value) {
         try {
             final int port = Integer.parseInt(value);
             if (port < 0 || port > MAX_PORT_VALUE) {

File: plugins/behaviors-plugin/src/main/java/io/qameta/allure/behaviors/BehaviorsPlugin.java
Patch:
@@ -63,7 +63,7 @@ public class BehaviorsPlugin extends CompositeAggregator {
     protected static final String CSV_FILE_NAME = "behaviors.csv";
 
     @SuppressWarnings("PMD.DefaultPackage")
-    /* default */ static final LabelName[] LABEL_NAMES = new LabelName[]{EPIC, FEATURE, STORY};
+    /* default */ static final LabelName[] LABEL_NAMES = {EPIC, FEATURE, STORY};
 
     public BehaviorsPlugin() {
         super(Arrays.asList(

File: plugins/trx-plugin/src/main/java/io/qameta/allure/trx/TrxPlugin.java
Patch:
@@ -268,7 +268,7 @@ protected Optional<Long> parseTime(final String time) {
             return Optional.ofNullable(time)
                     .map(ZonedDateTime::parse)
                     .map(ChronoZonedDateTime::toInstant)
-                    .map(Instant::getEpochSecond);
+                    .map(Instant::toEpochMilli);
         } catch (Exception e) {
             LOGGER.error("Could not parse time {}", time, e);
             return Optional.empty();

File: allure-generator/src/main/java/io/qameta/allure/timeline/TimelinePlugin.java
Patch:
@@ -49,7 +49,7 @@ protected Tree<TestResult> getData(final List<LaunchResults> launchResults) {
         // @formatter:on
 
         launchResults.stream()
-                .map(LaunchResults::getResults)
+                .map(LaunchResults::getAllResults)
                 .flatMap(Collection::stream)
                 .forEach(timeline::add);
         return timeline;

File: allure-generator/src/main/java/io/qameta/allure/ConfigurationBuilder.java
Patch:
@@ -71,10 +71,10 @@ public ConfigurationBuilder useDefault() {
                 new SeverityPlugin(),
                 new OwnerPlugin(),
                 new IdeaLinksPlugin(),
-                new CategoriesPlugin(),
-                new CategoriesTrendPlugin(),
                 new HistoryPlugin(),
                 new HistoryTrendPlugin(),
+                new CategoriesPlugin(),
+                new CategoriesTrendPlugin(),
                 new DurationPlugin(),
                 new DurationTrendPlugin(),
                 new StatusChartPlugin(),

File: allure-generator/src/main/java/io/qameta/allure/DummyReportGenerator.java
Patch:
@@ -75,10 +75,10 @@ public final class DummyReportGenerator {
             new SeverityPlugin(),
             new OwnerPlugin(),
             new IdeaLinksPlugin(),
-            new CategoriesPlugin(),
-            new CategoriesTrendPlugin(),
             new HistoryPlugin(),
             new HistoryTrendPlugin(),
+            new CategoriesPlugin(),
+            new CategoriesTrendPlugin(),
             new DurationPlugin(),
             new DurationTrendPlugin(),
             new StatusChartPlugin(),

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/TestResult.java
Patch:
@@ -41,6 +41,7 @@ public class TestResult implements Serializable, Nameable, Parameterizable, Stat
     protected String statusTrace;
 
     protected boolean flaky;
+    protected boolean newFailed;
 
     //    Execution
     protected List<StageResult> beforeStages = new ArrayList<>();

File: plugins/jira-plugin/src/test/java/io/qameta/allure/jira/JiraLaunchExportPluginTest.java
Patch:
@@ -33,7 +33,7 @@ public class JiraLaunchExportPluginTest {
     @Rule
     public final EnvironmentVariables jiraEnabled = new EnvironmentVariables()
             .set("ALLURE_JIRA_LAUNCH_ENABLED", "true")
-            .set("ALLURE_JIRA_LAUNCH_ISSUE", ISSUE);
+            .set("ALLURE_JIRA_LAUNCH_ISSUES", ISSUE);
 
 
     @Test
@@ -54,7 +54,8 @@ public void shouldExportLaunchToJira() {
         when(launchResults.getExtra("executor")).thenReturn(Optional.of(executorInfo));
 
         final JiraService service = mockJiraService();
-        final JiraLaunchExportPlugin jiraLaunchExportPlugin = new JiraLaunchExportPlugin(service);
+        final JiraLaunchExportPlugin jiraLaunchExportPlugin = new JiraLaunchExportPlugin();
+        jiraLaunchExportPlugin.setJiraService(service);
 
         jiraLaunchExportPlugin.aggregate(
                 mock(Configuration.class),

File: plugins/jira-plugin/src/test/java/io/qameta/allure/jira/JiraTestResultExportPluginTest.java
Patch:
@@ -49,7 +49,8 @@ public void shouldExportTestResultToJira() {
         when(launchResults.getExtra("executor")).thenReturn(Optional.of(executorInfo));
 
         final JiraService service = mockJiraService();
-        final JiraTestResultExportPlugin jiraTestResultExportPlugin = new JiraTestResultExportPlugin(service);
+        final JiraTestResultExportPlugin jiraTestResultExportPlugin = new JiraTestResultExportPlugin();
+        jiraTestResultExportPlugin.setJiraService(service);
 
         jiraTestResultExportPlugin.aggregate(
                 mock(Configuration.class),

File: plugins/xray-plugin/src/test/java/io/qameta/allure/xray/XrayTestRunExportPluginTest.java
Patch:
@@ -58,7 +58,8 @@ public void shouldExportTestRunToXray() {
                 Collections.singletonList(new XrayTestRun().setId(TESTRUN_ID).setKey(TESTRUN_KEY).setStatus("TODO"))
         );
 
-        final XrayTestRunExportPlugin xrayTestRunExportPlugin = new XrayTestRunExportPlugin(service);
+        final XrayTestRunExportPlugin xrayTestRunExportPlugin = new XrayTestRunExportPlugin();
+        xrayTestRunExportPlugin.setJiraService(service);
 
         xrayTestRunExportPlugin.aggregate(
                 mock(Configuration.class),

File: allure-commandline/src/main/java/io/qameta/allure/command/OpenCommand.java
Patch:
@@ -37,4 +37,4 @@ public List<Path> getReportDirectories() {
     public HostPortOptions getHostPortOptions() {
         return hostPortOptions;
     }
-}
\ No newline at end of file
+}

File: allure-commandline/src/main/java/io/qameta/allure/config/ConfigLoader.java
Patch:
@@ -24,6 +24,7 @@ public ConfigLoader(final Path configFile) {
         this.configFile = configFile;
     }
 
+    @SuppressWarnings("ReturnCount")
     public CommandlineConfig load() {
         if (Files.notExists(configFile)) {
             LOGGER.error("Could not find config file {}. Using the empty configuration", configFile);

File: allure-generator/src/main/java/io/qameta/allure/allure1/StatusDeserializer.java
Patch:
@@ -19,7 +19,7 @@ protected StatusDeserializer() {
 
     @Override
     public Status deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {
-        String value = p.readValueAs(String.class);
+        final String value = p.readValueAs(String.class);
         return Stream.of(Status.values())
                 .filter(status -> status.value().equalsIgnoreCase(value))
                 .findAny()

File: allure-generator/src/main/java/io/qameta/allure/environment/Allure1EnvironmentPlugin.java
Patch:
@@ -22,7 +22,7 @@ public Allure1EnvironmentPlugin() {
         super("widgets", "environment.json");
     }
 
-
+    @Override
     protected List<EnvironmentItem> getData(final List<LaunchResults> launches) {
         final List<Map.Entry<String, String>> launchEnvironments = launches.stream()
                 .flatMap(launch -> launch.getExtra(ENVIRONMENT_BLOCK_NAME,

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorPlugin.java
Patch:
@@ -1,6 +1,7 @@
 package io.qameta.allure.executor;
 
 import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.Constants;
 import io.qameta.allure.Reader;
 import io.qameta.allure.context.JacksonContext;
 import io.qameta.allure.core.Configuration;
@@ -25,7 +26,7 @@ public class ExecutorPlugin extends CommonJsonAggregator implements Reader {
     protected static final String JSON_FILE_NAME = "executor.json";
 
     public ExecutorPlugin() {
-        super("widgets", "executors.json");
+        super(Constants.WIDGETS_DIR, "executors.json");
     }
 
     @Override

File: allure-generator/src/main/java/io/qameta/allure/ga/GaParameters.java
Patch:
@@ -4,8 +4,9 @@
 import lombok.experimental.Accessors;
 
 /**
- * eroshenkoam
- * 06.08.17
+ * Parameters for {@link GaPlugin}.
+ *
+ * @author eroshnkoam
  */
 @Data
 @Accessors(chain = true)

File: allure-generator/src/main/java/io/qameta/allure/ga/GaPlugin.java
Patch:
@@ -85,14 +85,13 @@ public void aggregate(final Configuration configuration,
     protected void sendStats(final String clientId, final GaParameters parameters) {
         final HttpClientBuilder builder = HttpClientBuilder.create();
         try (CloseableHttpClient client = builder.build()) {
-            List<NameValuePair> pairs = Arrays.asList(
+            final List<NameValuePair> pairs = Arrays.asList(
                     pair("v", GA_API_VERSION),
                     pair("aip", GA_API_VERSION),
                     pair("tid", GA_ID),
                     pair("z", UUID.randomUUID().toString()),
                     pair("sc", "end"),
                     pair("t", "event"),
-                    pair("ds", "allure cli"),
                     pair("cid", clientId),
                     pair("an", "Allure Report"),
                     pair("ec", "Allure CLI events"),
@@ -156,7 +155,7 @@ private static long getTestResultsCount(final List<LaunchResults> launchesResult
 
     private static String getLabelValuesAsString(final List<LaunchResults> launchesResults,
                                                  final LabelName labelName) {
-        String values = launchesResults.stream()
+        final String values = launchesResults.stream()
                 .flatMap(results -> results.getResults().stream())
                 .flatMap(result -> result.getLabels().stream())
                 .filter(label -> labelName.value().equals(label.getName()))

File: allure-generator/src/main/java/io/qameta/allure/launch/LaunchPlugin.java
Patch:
@@ -1,6 +1,7 @@
 package io.qameta.allure.launch;
 
 import io.qameta.allure.CommonJsonAggregator;
+import io.qameta.allure.Constants;
 import io.qameta.allure.Reader;
 import io.qameta.allure.context.JacksonContext;
 import io.qameta.allure.core.Configuration;
@@ -25,7 +26,7 @@ public class LaunchPlugin extends CommonJsonAggregator implements Reader {
     private static final String JSON_FILE_NAME = "launch.json";
 
     public LaunchPlugin() {
-        super("widgets", JSON_FILE_NAME);
+        super(Constants.WIDGETS_DIR, JSON_FILE_NAME);
     }
 
     @Override

File: allure-generator/src/main/java/io/qameta/allure/mail/MailPlugin.java
Patch:
@@ -3,6 +3,7 @@
 import freemarker.template.Template;
 import freemarker.template.TemplateException;
 import io.qameta.allure.Aggregator;
+import io.qameta.allure.Constants;
 import io.qameta.allure.context.FreemarkerContext;
 import io.qameta.allure.core.Configuration;
 import io.qameta.allure.core.LaunchResults;
@@ -30,7 +31,7 @@ public void aggregate(final Configuration configuration,
                           final List<LaunchResults> launchesResults,
                           final Path outputDirectory) throws IOException {
         final FreemarkerContext context = configuration.requireContext(FreemarkerContext.class);
-        final Path exportFolder = Files.createDirectories(outputDirectory.resolve("export"));
+        final Path exportFolder = Files.createDirectories(outputDirectory.resolve(Constants.EXPORT_DIR));
         final Path mailFile = exportFolder.resolve("mail.html");
         try (BufferedWriter writer = Files.newBufferedWriter(mailFile)) {
             final Template template = context.getValue().getTemplate("mail.html.ftl");

File: allure-generator/src/main/java/io/qameta/allure/owner/OwnerPlugin.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class OwnerPlugin implements Aggregator {
 
-    private static final String OWNER_BLOCK_NAME = "owner";
+    public static final String OWNER_BLOCK_NAME = "owner";
 
     @Override
     public void aggregate(final Configuration configuration,

File: allure-generator/src/test/java/io/qameta/allure/allure2/Allure2PluginTest.java
Patch:
@@ -73,9 +73,7 @@ public void shouldExcludeDuplicatedParams() throws Exception {
         ).getResults();
 
         assertThat(testResults)
-                .hasSize(1)
                 .flatExtracting(TestResult::getParameters)
-                .hasSize(4)
                 .extracting(Parameter::getName, Parameter::getValue)
                 .containsExactlyInAnyOrder(
                         tuple("name", "value"),

File: allure-plugin-api/src/main/java/io/qameta/allure/CommonJsonAggregator.java
Patch:
@@ -20,7 +20,7 @@ public abstract class CommonJsonAggregator implements Aggregator {
     private final String fileName;
 
     protected CommonJsonAggregator(final String fileName) {
-        this("data", fileName);
+        this(Constants.DATA_DIR, fileName);
     }
 
     protected CommonJsonAggregator(final String location, final String fileName) {
@@ -40,5 +40,5 @@ public void aggregate(final Configuration configuration,
         }
     }
 
-    protected abstract Object getData(final List<LaunchResults> launches);
+    protected abstract Object getData(List<LaunchResults> launches);
 }

File: allure-plugin-api/src/main/java/io/qameta/allure/CommonMetricAggregator.java
Patch:
@@ -25,7 +25,7 @@ public abstract class CommonMetricAggregator implements Aggregator {
     private final String fileName;
 
     protected CommonMetricAggregator(final String fileName) {
-        this("export", fileName);
+        this(Constants.EXPORT_DIR, fileName);
     }
 
     protected CommonMetricAggregator(final String location, final String fileName) {
@@ -46,6 +46,7 @@ public void aggregate(final Configuration configuration,
 
     public abstract List<Metric> getMetrics();
 
+    @SuppressWarnings("MultipleStringLiterals")
     protected String getData(final List<LaunchResults> launchesResults) {
         final List<Metric> metrics = getMetrics();
         final List<TestResult> results = launchesResults.stream()

File: allure-plugin-api/src/main/java/io/qameta/allure/Context.java
Patch:
@@ -3,12 +3,13 @@
 /**
  * Report context. Can be added via plugins and used from
  * report configuration.
- * <p>
+ *
  * <code>
  * JacksonContext context = configuration.requireContext(JacksonContext.class)
  * ObjectMapper mapper = context.getValue();
  * </code>
  *
+ * @param <T> the type of context value
  * @see io.qameta.allure.context.JacksonContext
  * @see io.qameta.allure.context.MarkdownContext
  * @see io.qameta.allure.context.FreemarkerContext

File: allure-plugin-api/src/main/java/io/qameta/allure/context/MarkdownContext.java
Patch:
@@ -15,8 +15,8 @@ public class MarkdownContext implements Context<Function<String, String>> {
 
     @Override
     public Function<String, String> getValue() {
-        Parser parser = Parser.builder().build();
-        HtmlRenderer renderer = HtmlRenderer.builder().build();
+        final Parser parser = Parser.builder().build();
+        final HtmlRenderer renderer = HtmlRenderer.builder().build();
         return s -> renderer.render(parser.parse(s));
     }
 }

File: allure-plugin-api/src/main/java/io/qameta/allure/context/RandomUidContext.java
Patch:
@@ -20,7 +20,7 @@ public class RandomUidContext implements Context<Supplier<String>> {
     @Override
     public Supplier<String> getValue() {
         return () -> {
-            byte[] randomBytes = new byte[UID_RANDOM_BYTES_COUNT];
+            final byte[] randomBytes = new byte[UID_RANDOM_BYTES_COUNT];
             ThreadLocalRandom.current().nextBytes(randomBytes);
             return new BigInteger(1, randomBytes).toString(RADIX);
         };

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/TestResult.java
Patch:
@@ -116,7 +116,7 @@ public void addLabelIfNotExists(final String name, final String value) {
         if (value == null || name == null) {
             return;
         }
-        Optional<String> any = getLabels().stream()
+        final Optional<String> any = getLabels().stream()
                 .map(Label::getName)
                 .filter(name::equals)
                 .findAny();

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithLabels.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * @author Dmitry Baev baev@qameta.io
- *         Date: 31.01.16
+ * Date: 31.01.16
  */
 public interface WithLabels {
 
@@ -53,7 +53,7 @@ default void addLabelIfNotExists(String name, String value) {
         if (value == null || name == null) {
             return;
         }
-        Optional<String> any = getLabels().stream()
+        final Optional<String> any = getLabels().stream()
                 .map(Label::getName)
                 .filter(name::equals)
                 .findAny();

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/AbstractTree.java
Patch:
@@ -5,6 +5,9 @@
 import java.util.stream.Stream;
 
 /**
+ * @param <T> the type of accepted items
+ * @param <S> the type of tree group
+ * @param <U> the type of tree leaf
  * @author charlie (Dmitry Baev).
  */
 public abstract class AbstractTree<T, S extends TreeGroup, U extends TreeLeaf> implements Tree<T> {

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/Tree.java
Patch:
@@ -1,6 +1,7 @@
 package io.qameta.allure.tree;
 
 /**
+ * @param <T> the type of tree item.
  * @author charlie (Dmitry Baev).
  */
 public interface Tree<T> extends TreeGroup {

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeClassifier.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.List;
 
 /**
+ * @param <T> the type of classified items.
  * @author charlie (Dmitry Baev).
  */
 @FunctionalInterface

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeGroupFactory.java
Patch:
@@ -1,6 +1,8 @@
 package io.qameta.allure.tree;
 
 /**
+ * @param <T> the type of tree items
+ * @param <S> the type of tree leafs
  * @author charlie (Dmitry Baev).
  */
 @FunctionalInterface

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeLeafFactory.java
Patch:
@@ -1,6 +1,9 @@
 package io.qameta.allure.tree;
 
 /**
+ * @param <T> the type of tree items
+ * @param <S> the type of tree groups
+ * @param <U> the type of tree leafs
  * @author charlie (Dmitry Baev).
  */
 @FunctionalInterface

File: plugins/junit-xml-plugin/src/main/java/io/qameta/allure/junitxml/JunitXmlPlugin.java
Patch:
@@ -49,7 +49,7 @@
  *
  * @since 2.0
  */
-@SuppressWarnings("PMD.ExcessiveImports")
+@SuppressWarnings({"PMD.ExcessiveImports", "ClassDataAbstractionCoupling", "ClassFanOutComplexity"})
 public class JunitXmlPlugin implements Reader {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(JunitXmlPlugin.class);
@@ -279,7 +279,7 @@ private boolean isFlaky(final XmlElement testCaseElement) {
     }
 
     private static List<Path> listResults(final Path directory) {
-        List<Path> result = new ArrayList<>();
+        final List<Path> result = new ArrayList<>();
         if (!Files.isDirectory(directory)) {
             return result;
         }

File: plugins/trx-plugin/src/main/java/io/qameta/allure/trx/TrxPlugin.java
Patch:
@@ -221,7 +221,7 @@ protected Optional<Long> parseTime(final String time) {
     }
 
     private static List<Path> listResults(final Path directory) {
-        List<Path> result = new ArrayList<>();
+        final List<Path> result = new ArrayList<>();
         if (!Files.isDirectory(directory)) {
             return result;
         }

File: plugins/xunit-xml-plugin/src/main/java/io/qameta/allure/xunitxml/XunitXmlPlugin.java
Patch:
@@ -209,7 +209,7 @@ private Time getTime(final XmlElement testElement) {
     }
 
     private static List<Path> listResults(final Path directory) {
-        List<Path> result = new ArrayList<>();
+        final List<Path> result = new ArrayList<>();
         if (!Files.isDirectory(directory)) {
             return result;
         }

File: allure-generator/src/main/java/io/qameta/allure/allure2/Allure2Plugin.java
Patch:
@@ -115,6 +115,8 @@ private StageResult convert(final Path source,
                 .setTime(convert(result.getStart(), result.getStop()))
                 .setStatus(convert(result.getStatus()))
                 .setSteps(convert(result.getSteps(), step -> convert(source, visitor, step)))
+                .setDescription(result.getDescription())
+                .setDescriptionHtml(result.getDescriptionHtml())
                 .setAttachments(convert(result.getAttachments(), attach -> convert(source, visitor, attach)))
                 .setParameters(convert(result.getParameters(), this::convert));
         Optional.of(result)

File: allure-generator/src/main/java/io/qameta/allure/duration/DurationData.java
Patch:
@@ -1,4 +1,4 @@
-package io.qameta.allure.graph;
+package io.qameta.allure.duration;
 
 import io.qameta.allure.entity.Status;
 import io.qameta.allure.entity.Time;
@@ -13,7 +13,7 @@
  */
 @Data
 @Accessors(chain = true)
-public class GraphData implements Serializable {
+public class DurationData implements Serializable {
 
     private static final long serialVersionUID = 1L;
 

File: allure-generator/src/test/java/io/qameta/allure/allure2/Allure2PluginTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.qameta.allure.ConfigurationBuilder;
 import io.qameta.allure.DefaultResultsVisitor;
-import io.qameta.allure.allure1.Allure1Plugin;
 import io.qameta.allure.core.Configuration;
 import io.qameta.allure.core.LaunchResults;
 import io.qameta.allure.entity.Attachment;
@@ -27,7 +26,6 @@
 import static io.qameta.allure.AllureUtils.generateTestResultContainerName;
 import static io.qameta.allure.AllureUtils.generateTestResultName;
 import static io.qameta.allure.entity.Status.UNKNOWN;
-import static org.allurefw.allure1.AllureUtils.generateTestSuiteXmlName;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.tuple;
 

File: allure-generator/src/test/java/io/qameta/allure/environment/Allure1EnvironmentPluginTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
@@ -127,7 +125,7 @@ private final List<EnvironmentItem> process(List<String>... results) throws IOEx
             launches.add(resultsVisitor.getLaunchResults());
         }
         Allure1EnvironmentPlugin envPlugin = new Allure1EnvironmentPlugin();
-        return envPlugin.getData(configuration, launches);
+        return envPlugin.getData(launches);
     }
 
     private void copyFile(Path dir, String resourceName, String fileName) throws IOException {

File: allure-generator/src/main/java/io/qameta/allure/allure1/Allure1Plugin.java
Patch:
@@ -97,7 +97,7 @@ public class Allure1Plugin implements Reader {
     private final ObjectMapper xmlMapper;
 
     public Allure1Plugin() {
-        final SimpleModule module = new SimpleModule()
+        final SimpleModule module = new XmlParserModule()
                 .addDeserializer(ru.yandex.qatools.allure.model.Status.class, new StatusDeserializer());
         xmlMapper = new XmlMapper()
                 .configure(USE_WRAPPER_NAME_AS_PROPERTY_NAME, true)
@@ -431,7 +431,7 @@ private Optional<TestSuiteResult> readXmlTestSuiteFile(final Path source) {
         try (InputStream is = Files.newInputStream(source)) {
             return Optional.of(xmlMapper.readValue(is, TestSuiteResult.class));
         } catch (IOException e) {
-            LOGGER.debug("Could not read result {}: {}", source, e);
+            LOGGER.error("Could not read result {}: {}", source, e);
         }
         return Optional.empty();
     }
@@ -440,7 +440,7 @@ private Optional<TestSuiteResult> readJsonTestSuiteFile(final Path source) {
         try (InputStream is = Files.newInputStream(source)) {
             return Optional.of(jsonMapper.readValue(is, TestSuiteResult.class));
         } catch (IOException e) {
-            LOGGER.debug("Could not read result {}: {}", source, e);
+            LOGGER.error("Could not read result {}: {}", source, e);
             return Optional.empty();
         }
     }

File: plugins/junit-xml-plugin/src/main/java/io/qameta/allure/junitxml/JunitXmlPlugin.java
Patch:
@@ -64,6 +64,7 @@ public class JunitXmlPlugin implements Reader {
     private static final String MESSAGE_ATTRIBUTE_NAME = "message";
     private static final String RERUN_FAILURE_ELEMENT_NAME = "rerunFailure";
     private static final String RERUN_ERROR_ELEMENT_NAME = "rerunError";
+    private static final String XML_GLOB = "*.xml";
 
     private static final Map<String, Status> RETRIES;
 
@@ -229,7 +230,7 @@ private static List<Path> listResults(final Path directory) {
             return result;
         }
 
-        try (DirectoryStream<Path> directoryStream = newDirectoryStream(directory, "TEST-*.xml")) {
+        try (DirectoryStream<Path> directoryStream = newDirectoryStream(directory, XML_GLOB)) {
             for (Path path : directoryStream) {
                 if (!Files.isDirectory(path)) {
                     result.add(path);

File: allure-generator/src/main/java/io/qameta/allure/category/CategoriesPlugin.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.stream.Collectors;
 
 import static io.qameta.allure.entity.Statistic.comparator;
-import static io.qameta.allure.entity.TestResult.comparingByTime;
+import static io.qameta.allure.entity.TestResult.comparingByTimeAsc;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByLeafs;
 import static java.util.Objects.isNull;
 import static java.util.Objects.nonNull;
@@ -120,7 +120,7 @@ public Object getData(final Configuration configuration, final List<LaunchResult
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
-                .sorted(comparingByTime())
+                .sorted(comparingByTimeAsc())
                 .forEach(categories::add);
         return categories;
     }

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryPlugin.java
Patch:
@@ -96,7 +96,7 @@ private void updateHistory(final Map<String, HistoryData> history,
 
         data.getStatistic().update(result);
         if (!data.getItems().isEmpty()) {
-            result.addExtraBlock(HISTORY_BLOCK_NAME, copy(data));
+            result.setExtraBlock(HISTORY_BLOCK_NAME, copy(data));
         }
 
         final HistoryItem newItem = new HistoryItem()

File: allure-generator/src/main/java/io/qameta/allure/owner/OwnerPlugin.java
Patch:
@@ -29,6 +29,6 @@ public void aggregate(final Configuration configuration,
 
     private void setOwner(final TestResult result) {
         result.findOneLabel(LabelName.OWNER)
-                .ifPresent(owner -> result.addExtraBlock(OWNER_BLOCK_NAME, owner));
+                .ifPresent(owner -> result.setExtraBlock(OWNER_BLOCK_NAME, owner));
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/severity/SeverityPlugin.java
Patch:
@@ -31,6 +31,6 @@ private void setSeverityLevel(final TestResult result) {
         final SeverityLevel severityLevel = result.findOneLabel(SEVERITY)
                 .flatMap(SeverityLevel::fromValue)
                 .orElse(SeverityLevel.NORMAL);
-        result.addExtraBlock("severity", severityLevel);
+        result.setExtraBlock("severity", severityLevel);
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/suites/SuitesPlugin.java
Patch:
@@ -25,7 +25,7 @@
 import static io.qameta.allure.entity.LabelName.SUB_SUITE;
 import static io.qameta.allure.entity.LabelName.SUITE;
 import static io.qameta.allure.entity.Statistic.comparator;
-import static io.qameta.allure.entity.TestResult.comparingByTime;
+import static io.qameta.allure.entity.TestResult.comparingByTimeAsc;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByLeafs;
 import static io.qameta.allure.tree.TreeUtils.groupByLabels;
 
@@ -61,7 +61,7 @@ public void aggregate(final Configuration configuration,
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
-                .sorted(comparingByTime())
+                .sorted(comparingByTimeAsc())
                 .forEach(xunit::add);
         return xunit;
     }

File: allure-generator/src/main/java/io/qameta/allure/tags/TagsPlugin.java
Patch:
@@ -26,7 +26,7 @@ public void aggregate(final Configuration configuration,
                 .flatMap(Collection::stream)
                 .forEach(result -> {
                     final Set<String> tags = new HashSet<>(result.findAllLabels(LabelName.TAG));
-                    result.addExtraBlock("tags", tags);
+                    result.setExtraBlock("tags", tags);
                 });
     }
 }

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/AbstractTree.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.Collections;
 import java.util.List;
-import java.util.Set;
 import java.util.stream.Stream;
 
 /**
@@ -62,8 +61,8 @@ public String getName() {
     }
 
     @Override
-    public Set<TreeNode> getChildren() {
-        return Collections.unmodifiableSet(root.getChildren());
+    public List<TreeNode> getChildren() {
+        return Collections.unmodifiableList(root.getChildren());
     }
 
     @Override

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeGroup.java
Patch:
@@ -1,15 +1,15 @@
 package io.qameta.allure.tree;
 
+import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.Set;
 
 /**
  * @author charlie (Dmitry Baev).
  */
 public interface TreeGroup extends TreeNode {
 
-    Set<TreeNode> getChildren();
+    List<TreeNode> getChildren();
 
     void addChild(TreeNode node);
 

File: plugins/behaviors-plugin/src/main/java/io/qameta/allure/behaviors/BehaviorsPlugin.java
Patch:
@@ -25,7 +25,7 @@
 import static io.qameta.allure.entity.LabelName.FEATURE;
 import static io.qameta.allure.entity.LabelName.STORY;
 import static io.qameta.allure.entity.Statistic.comparator;
-import static io.qameta.allure.entity.TestResult.comparingByTime;
+import static io.qameta.allure.entity.TestResult.comparingByTimeAsc;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByChildren;
 import static io.qameta.allure.tree.TreeUtils.groupByLabels;
 
@@ -61,7 +61,7 @@ public void aggregate(final Configuration configuration,
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
-                .sorted(comparingByTime())
+                .sorted(comparingByTimeAsc())
                 .forEach(behaviors::add);
         return behaviors;
     }

File: plugins/packages-plugin/src/main/java/io/qameta/allure/packages/PackagesPlugin.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import static io.qameta.allure.entity.TestResult.comparingByTime;
+import static io.qameta.allure.entity.TestResult.comparingByTimeAsc;
 
 /**
  * The plugin adds packages tab to the report.
@@ -58,7 +58,7 @@ public void aggregate(final Configuration configuration,
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
-                .sorted(comparingByTime())
+                .sorted(comparingByTimeAsc())
                 .forEach(packages::add);
 
         return collapseGroupsWithOnlyOneChild(packages);

File: allure-generator/src/main/java/io/qameta/allure/ga/GaPlugin.java
Patch:
@@ -90,6 +90,7 @@ protected void sendStats(final String clientId, final GaParameters parameters) {
                     pair("aip", GA_API_VERSION),
                     pair("tid", GA_ID),
                     pair("z", UUID.randomUUID().toString()),
+                    pair("sc", "end"),
                     pair("t", "event"),
                     pair("ds", "allure cli"),
                     pair("cid", clientId),

File: allure-generator/src/main/java/io/qameta/allure/category/CategoriesPlugin.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.stream.Collectors;
 
 import static io.qameta.allure.entity.Statistic.comparator;
+import static io.qameta.allure.entity.TestResult.comparingByTime;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByLeafs;
 import static java.util.Objects.isNull;
 import static java.util.Objects.nonNull;
@@ -119,6 +120,7 @@ public Object getData(final Configuration configuration, final List<LaunchResult
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
+                .sorted(comparingByTime())
                 .forEach(categories::add);
         return categories;
     }

File: allure-generator/src/main/java/io/qameta/allure/suites/SuitesPlugin.java
Patch:
@@ -25,6 +25,7 @@
 import static io.qameta.allure.entity.LabelName.SUB_SUITE;
 import static io.qameta.allure.entity.LabelName.SUITE;
 import static io.qameta.allure.entity.Statistic.comparator;
+import static io.qameta.allure.entity.TestResult.comparingByTime;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByLeafs;
 import static io.qameta.allure.tree.TreeUtils.groupByLabels;
 
@@ -60,6 +61,7 @@ public void aggregate(final Configuration configuration,
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
+                .sorted(comparingByTime())
                 .forEach(xunit::add);
         return xunit;
     }

File: plugins/behaviors-plugin/src/main/java/io/qameta/allure/behaviors/BehaviorsPlugin.java
Patch:
@@ -25,6 +25,7 @@
 import static io.qameta.allure.entity.LabelName.FEATURE;
 import static io.qameta.allure.entity.LabelName.STORY;
 import static io.qameta.allure.entity.Statistic.comparator;
+import static io.qameta.allure.entity.TestResult.comparingByTime;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByChildren;
 import static io.qameta.allure.tree.TreeUtils.groupByLabels;
 
@@ -60,6 +61,7 @@ public void aggregate(final Configuration configuration,
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
+                .sorted(comparingByTime())
                 .forEach(behaviors::add);
         return behaviors;
     }

File: plugins/packages-plugin/src/main/java/io/qameta/allure/packages/PackagesPlugin.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
+import static io.qameta.allure.entity.TestResult.comparingByTime;
+
 /**
  * The plugin adds packages tab to the report.
  *
@@ -56,6 +58,7 @@ public void aggregate(final Configuration configuration,
         launchResults.stream()
                 .map(LaunchResults::getResults)
                 .flatMap(Collection::stream)
+                .sorted(comparingByTime())
                 .forEach(packages::add);
 
         return collapseGroupsWithOnlyOneChild(packages);

File: plugins/packages-plugin/src/main/java/io/qameta/allure/packages/PackagesPlugin.java
Patch:
@@ -89,7 +89,7 @@ protected void collapseGroupsWithOnlyOneChild(final TestResultTreeGroup groupNod
                 .filter(TestResultTreeGroup.class::isInstance)
                 .count();
 
-        if (count == 1) {
+        if (groupNode.getChildren().size() == 1 && count == 1) {
             groupNode.getChildren().stream()
                     .filter(TestResultTreeGroup.class::isInstance)
                     .map(TestResultTreeGroup.class::cast)

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/TestResult.java
Patch:
@@ -96,8 +96,8 @@ public Optional<String> findOneLabel(final LabelName name) {
     public Optional<String> findOneLabel(final String name) {
         return getLabels().stream()
                 .filter(label -> name.equals(label.getName()))
-                .map(Label::getValue)
-                .findAny();
+                .findAny()
+                .map(Label::getValue);
     }
 
     public void addLabelIfNotExists(final LabelName name, final String value) {

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/Statistic.java
Patch:
@@ -1,5 +1,6 @@
 package io.qameta.allure.entity;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Data;
 import lombok.experimental.Accessors;
@@ -54,6 +55,7 @@ public long get(final Status status) {
         }
     }
 
+    @JsonIgnore
     public Status getStatus() {
         for (final Status status : Status.values()) {
             if (get(status) > 0) {

File: allure-generator/src/main/java/io/qameta/allure/core/ReportWebPlugin.java
Patch:
@@ -40,7 +40,7 @@ public void aggregate(final Configuration configuration,
         writeStatic(outputDirectory);
     }
 
-    private void writePluginsStatic(final Configuration configuration,
+    protected void writePluginsStatic(final Configuration configuration,
                                     final Path outputDirectory) throws IOException {
         final Path pluginsFolder = outputDirectory.resolve("plugins");
         for (Plugin plugin : configuration.getPlugins()) {
@@ -49,7 +49,7 @@ private void writePluginsStatic(final Configuration configuration,
         }
     }
 
-    private void writeIndexHtml(final Configuration configuration,
+    protected void writeIndexHtml(final Configuration configuration,
                                 final Path outputDirectory) throws IOException {
         final FreemarkerContext context = configuration.requireContext(FreemarkerContext.class);
         final Path indexHtml = outputDirectory.resolve("index.html");
@@ -67,7 +67,7 @@ private void writeIndexHtml(final Configuration configuration,
         }
     }
 
-    private void writeStatic(final Path outputDirectory) {
+    protected void writeStatic(final Path outputDirectory) {
         staticFiles.forEach(resourceName -> {
             try (InputStream is = getClass().getClassLoader().getResourceAsStream(resourceName)) {
                 Files.copy(is, outputDirectory.resolve(resourceName), StandardCopyOption.REPLACE_EXISTING);

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryPlugin.java
Patch:
@@ -125,7 +125,7 @@ private static HistoryData copy(final HistoryData other) {
     }
 
     private static String createReportUrl(final String reportUrl, final String uuid) {
-        final String pattern = reportUrl.endsWith("index.html") ? "%s#testcase/%s" : "%s/#testcase/%s";
+        final String pattern = reportUrl.endsWith("index.html") ? "%s#testresult/%s" : "%s/#testresult/%s";
         return String.format(pattern, reportUrl, uuid);
     }
 }

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/DefaultTreeLeaf.java
Patch:
@@ -15,4 +15,5 @@ public DefaultTreeLeaf(final String name) {
     public String getName() {
         return name;
     }
+
 }

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TestResultTreeGroup.java
Patch:
@@ -7,7 +7,7 @@ public class TestResultTreeGroup extends DefaultTreeGroup {
 
     private String uid;
 
-    public TestResultTreeGroup(final String name, final String uid) {
+    public TestResultTreeGroup(final String uid, final String name) {
         super(name);
         this.uid = uid;
     }

File: plugins/behaviors-plugin/src/main/java/io/qameta/allure/behaviors/BehaviorsPlugin.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.stream.Collectors;
 
 import static io.qameta.allure.entity.ExtraStatisticMethods.comparator;
+import static io.qameta.allure.entity.LabelName.EPIC;
 import static io.qameta.allure.entity.LabelName.FEATURE;
 import static io.qameta.allure.entity.LabelName.STORY;
 import static io.qameta.allure.tree.TreeUtils.calculateStatisticByChildren;
@@ -53,7 +54,7 @@ public void aggregate(final Configuration configuration,
         // @formatter:off
         final Tree<TestResult> behaviors = new DefaultTree<>(
             "behaviors",
-            testResult -> groupByLabels(testResult, FEATURE, STORY),
+            testResult -> groupByLabels(testResult, EPIC, FEATURE, STORY),
             TestResultTreeLeaf::create
         );
         // @formatter:on

File: allure-generator/src/main/java/io/qameta/allure/ConfigurationBuilder.java
Patch:
@@ -23,11 +23,11 @@
 import io.qameta.allure.owner.OwnerPlugin;
 import io.qameta.allure.retry.RetryPlugin;
 import io.qameta.allure.severity.SeverityPlugin;
+import io.qameta.allure.suites.SuitesPlugin;
 import io.qameta.allure.summary.SummaryPlugin;
 import io.qameta.allure.tags.TagsPlugin;
 import io.qameta.allure.timeline.TimelinePlugin;
 import io.qameta.allure.widget.WidgetsPlugin;
-import io.qameta.allure.xunit.XunitPlugin;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -63,7 +63,7 @@ public ConfigurationBuilder useDefault() {
                 new HistoryTrendPlugin(),
                 new GraphPlugin(),
                 new TimelinePlugin(),
-                new XunitPlugin(),
+                new SuitesPlugin(),
                 new ReportWebPlugin(),
                 new TestsResultsPlugin(),
                 new AttachmentsPlugin(),

File: allure-generator/src/test/java/io/qameta/allure/ReportGeneratorTest.java
Patch:
@@ -57,7 +57,7 @@ public void shouldGenerateGraphJson() throws Exception {
 
     @Test
     public void shouldGenerateXunitJson() throws Exception {
-        assertThat(output.resolve("data/xunit.json"))
+        assertThat(output.resolve("data/suites.json"))
                 .isRegularFile();
     }
 

File: allure-commandline/src/main/java/io/qameta/allure/option/ResultsOptions.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.beust.jcommander.Parameter;
 import io.qameta.allure.convert.PathConverter;
-import io.qameta.allure.validator.DirectoryExistsValidator;
 
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -21,8 +20,7 @@ public class ResultsOptions {
 
     @Parameter(
             description = "The directories with allure results",
-            converter = PathConverter.class,
-            validateWith = DirectoryExistsValidator.class
+            converter = PathConverter.class
     )
     private List<Path> resultsDirectories = new ArrayList<>(singletonList(Paths.get("allure-results")));
 

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorPlugin.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class ExecutorPlugin implements Reader, Widget {
 
-    private static final String EXECUTORS_BLOCK_NAME = "executor";
+    public static final String EXECUTORS_BLOCK_NAME = "executor";
     private static final String EXECUTOR_JSON = "executor.json";
 
     @Override

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/AbstractTreeAggregator.java
Patch:
@@ -96,7 +96,8 @@ protected void addResultToTree(final Supplier<String> uidGenerator,
                 .withName(getNodeName(result))
                 .withStatus(result.getStatus())
                 .withTime(result.getTime())
-                .withFlaky(isFlaky);
+                .withFlaky(isFlaky)
+                .withParameters(result.getParameters());
         for (WithChildren currentLevelGroup : currentLevelGroups) {
             currentLevelGroup.getChildren().add(testCaseNode);
         }

File: allure-commandline/src/main/java/io/qameta/allure/CommandLine.java
Patch:
@@ -130,21 +130,21 @@ public ExitCode run() {
                         generateCommand.getReportDirectory(),
                         generateCommand.getResultsOptions().getResultsDirectories(),
                         generateCommand.isCleanReportDirectory(),
-                        generateCommand.getProfileOptions().getProfile()
+                        generateCommand.getConfigOptions()
                 );
             case SERVE_COMMAND:
                 return commands.serve(
                         serveCommand.getResultsOptions().getResultsDirectories(),
                         serveCommand.getPortOptions().getPort(),
-                        serveCommand.getProfileOptions().getProfile()
+                        serveCommand.getConfigOptions()
                 );
             case OPEN_COMMAND:
                 return commands.open(
                         openCommand.getReportDirectories().get(0),
                         openCommand.getPortOptions().getPort()
                 );
             case PLUGIN_COMMAND:
-                return commands.listPlugins(pluginCommand.getProfileOptions().getProfile());
+                return commands.listPlugins(pluginCommand.getConfigOptions());
             default:
                 printUsage(commander);
                 return ExitCode.ARGUMENT_PARSING_ERROR;

File: allure-generator/src/main/java/io/qameta/allure/environment/Allure1EnvironmentPlugin.java
Patch:
@@ -20,8 +20,8 @@
 public class Allure1EnvironmentPlugin implements Widget {
 
     @Override
-    public List getData(final Configuration configuration,
-                        final List<LaunchResults> launches) {
+    public List<EnvironmentItem> getData(final Configuration configuration,
+                                         final List<LaunchResults> launches) {
         final List<Map.Entry<String, String>> launchEnvironments = launches.stream()
                 .flatMap(launch -> launch.getExtra(ENVIRONMENT_BLOCK_NAME,
                         (Supplier<Map<String, String>>) HashMap::new).entrySet().stream())

File: allure-generator/src/main/java/io/qameta/allure/core/ReportWebPlugin.java
Patch:
@@ -29,7 +29,7 @@ public class ReportWebPlugin implements Aggregator {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ReportWebPlugin.class);
 
-    private final List<String> staticFiles = Arrays.asList("app.js", "styles.css");
+    private final List<String> staticFiles = Arrays.asList("app.js", "styles.css", "favicon.ico");
 
     @Override
     public void aggregate(final Configuration configuration,

File: allure-generator/src/test/java/io/qameta/allure/retry/RetryPluginTest.java
Patch:
@@ -47,7 +47,7 @@ public void shouldMergeRetriesTestResults() throws IOException {
         assertThat(results).as("test retries")
                 .filteredOn(TestResult::isHidden)
                 .extracting(TestResult::getName)
-                .containsSequence(FIRST_RESULT, SECOND_RESULT);
+                .containsExactlyInAnyOrder(FIRST_RESULT, SECOND_RESULT);
 
         TestResult lastResult = results.stream()
                 .filter(r -> !r.isHidden()).findFirst().orElseGet(null);

File: allure-commandline/src/main/java/io/qameta/allure/util/CopyVisitor.java
Patch:
@@ -5,6 +5,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
+import java.nio.file.StandardCopyOption;
 import java.nio.file.attribute.BasicFileAttributes;
 
 /**
@@ -32,7 +33,7 @@ public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttribut
     @Override
     public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
         final Path dest = outputDirectory.resolve(sourceDirectory.relativize(file));
-        Files.copy(file, dest);
+        Files.copy(file, dest, StandardCopyOption.REPLACE_EXISTING);
         return FileVisitResult.CONTINUE;
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/core/ReportWebPlugin.java
Patch:
@@ -13,7 +13,7 @@
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
+import java.nio.file.StandardCopyOption;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
@@ -57,7 +57,7 @@ private void writeIndexHtml(final Configuration configuration,
                 .map(Plugin::getConfig)
                 .collect(Collectors.toList());
 
-        try (BufferedWriter writer = Files.newBufferedWriter(indexHtml, StandardOpenOption.CREATE)) {
+        try (BufferedWriter writer = Files.newBufferedWriter(indexHtml)) {
             final Template template = context.getValue().getTemplate("index.html.ftl");
             final Map<String, Object> dataModel = new HashMap<>();
             dataModel.put("plugins", pluginConfigurations);
@@ -70,7 +70,7 @@ private void writeIndexHtml(final Configuration configuration,
     private void writeStatic(final Path outputDirectory) {
         staticFiles.forEach(resourceName -> {
             try (InputStream is = getClass().getClassLoader().getResourceAsStream(resourceName)) {
-                Files.copy(is, outputDirectory.resolve(resourceName));
+                Files.copy(is, outputDirectory.resolve(resourceName), StandardCopyOption.REPLACE_EXISTING);
             } catch (IOException e) {
                 LOGGER.error("Couldn't unpack report static");
             }

File: allure-generator/src/main/java/io/qameta/allure/mail/MailPlugin.java
Patch:
@@ -13,7 +13,6 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
 import java.util.HashMap;
 import java.util.List;
 
@@ -33,7 +32,7 @@ public void aggregate(final Configuration configuration,
         final FreemarkerContext context = configuration.requireContext(FreemarkerContext.class);
         final Path exportFolder = Files.createDirectories(outputDirectory.resolve("export"));
         final Path mailFile = exportFolder.resolve("mail.html");
-        try (BufferedWriter writer = Files.newBufferedWriter(mailFile, StandardOpenOption.CREATE)) {
+        try (BufferedWriter writer = Files.newBufferedWriter(mailFile)) {
             final Template template = context.getValue().getTemplate("mail.html.ftl");
             template.process(new HashMap<>(), writer);
         } catch (TemplateException e) {

File: allure-generator/src/main/java/io/qameta/allure/ReportGenerator.java
Patch:
@@ -20,7 +20,8 @@ public ReportGenerator(final Configuration configuration) {
         this.configuration = configuration;
     }
 
-    public LaunchResults readResults(final DefaultResultsVisitor visitor, final Path resultsDirectory) {
+    public LaunchResults readResults(final Path resultsDirectory) {
+        final DefaultResultsVisitor visitor = new DefaultResultsVisitor(configuration);
         configuration
                 .getReaders()
                 .forEach(reader -> reader.readResults(configuration, visitor, resultsDirectory));
@@ -42,9 +43,8 @@ public void generate(final Path outputDirectory, final Path... resultsDirectorie
     }
 
     private void generate(final Path outputDirectory, final Stream<Path> resultsDirectories) throws IOException {
-        final DefaultResultsVisitor visitor = new DefaultResultsVisitor(configuration);
         final List<LaunchResults> results = resultsDirectories
-                .map(path -> readResults(visitor, path))
+                .map(this::readResults)
                 .collect(Collectors.toList());
         aggregate(results, outputDirectory);
     }

File: allure-generator/src/main/java/io/qameta/allure/core/AttachmentsPlugin.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.List;
 import java.util.Map;
 
@@ -24,7 +25,7 @@ public void aggregate(final Configuration configuration,
         for (LaunchResults launch : launchesResults) {
             for (Map.Entry<Path, Attachment> entry : launch.getAttachments().entrySet()) {
                 final Path file = attachmentsFolder.resolve(entry.getValue().getSource());
-                Files.copy(entry.getKey(), file);
+                Files.copy(entry.getKey(), file, StandardCopyOption.REPLACE_EXISTING);
             }
         }
     }

File: allure-generator/src/main/java/io/qameta/allure/allure1/Allure1Plugin.java
Patch:
@@ -129,7 +129,7 @@ private void convert(final Supplier<String> randomUid,
                 dest.getLinks().add(getLink(ISSUE, issue, getIssueUrl(issue)))
         );
         dest.findOne("testId").ifPresent(testId ->
-                dest.getLinks().add(new Link().withName("testId").withType("testId").withUrl(getTestCaseIdUrl(testId)))
+                dest.getLinks().add(new Link().withName(testId).withType("tms").withUrl(getTestCaseIdUrl(testId)))
         );
 
         //TestNG nested suite

File: allure-generator/src/main/java/io/qameta/allure/ConfigurationBuilder.java
Patch:
@@ -16,6 +16,7 @@
 import io.qameta.allure.executor.ExecutorPlugin;
 import io.qameta.allure.graph.GraphPlugin;
 import io.qameta.allure.history.HistoryPlugin;
+import io.qameta.allure.history.HistoryTrendPlugin;
 import io.qameta.allure.launch.LaunchPlugin;
 import io.qameta.allure.mail.MailPlugin;
 import io.qameta.allure.owner.OwnerPlugin;
@@ -37,6 +38,7 @@
  * @see Configuration
  * @since 2.0
  */
+@SuppressWarnings("PMD.ExcessiveImports")
 public class ConfigurationBuilder {
 
     private final List<Extension> extensions = new ArrayList<>();
@@ -55,6 +57,7 @@ public ConfigurationBuilder useDefault() {
                 new OwnerPlugin(),
                 new CategoriesPlugin(),
                 new HistoryPlugin(),
+                new HistoryTrendPlugin(),
                 new GraphPlugin(),
                 new TimelinePlugin(),
                 new XunitPlugin(),

File: allure-generator/src/test/java/io/qameta/allure/allure1/Allure1PluginTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.allurefw.allure1.AllureUtils.generateTestSuiteXmlName;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class Allure1ReaderTest {
+public class Allure1PluginTest {
 
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();

File: allure-plugin-api/src/main/java/io/qameta/allure/context/JacksonContext.java
Patch:
@@ -1,6 +1,7 @@
 package io.qameta.allure.context;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
@@ -22,6 +23,7 @@ public JacksonContext() {
                 .configure(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME, true)
                 .setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()))
                 .enable(SerializationFeature.INDENT_OUTPUT)
+                .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
                 .setSerializationInclusion(JsonInclude.Include.NON_NULL);
     }
 

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryPlugin.java
Patch:
@@ -44,7 +44,7 @@ public void readResults(final Configuration configuration,
                             final ResultsVisitor visitor,
                             final Path directory) {
         final JacksonContext context = configuration.requireContext(JacksonContext.class);
-        final Path historyFile = directory.resolve(HISTORY_FILE_NAME);
+        final Path historyFile = directory.resolve(HISTORY_BLOCK_NAME).resolve(HISTORY_FILE_NAME);
         if (Files.exists(historyFile)) {
             try (InputStream is = Files.newInputStream(historyFile)) {
                 final Map<String, HistoryData> history = context.getValue().readValue(is, HISTORY_TYPE);

File: allure-commandline/src/main/java/io/qameta/allure/Commands.java
Patch:
@@ -3,7 +3,7 @@
 import io.qameta.allure.config.ConfigLoader;
 import io.qameta.allure.core.Configuration;
 import io.qameta.allure.core.Plugin;
-import io.qameta.allure.plugins.DirectoryPluginLoader;
+import io.qameta.allure.plugin.DefaultPluginLoader;
 import org.apache.commons.io.FileUtils;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;
@@ -135,7 +135,7 @@ public ExitCode listPlugins(final String profile) {
      * @throws IOException if any occurs.
      */
     protected Configuration createReportConfiguration(final String profile) throws IOException {
-        final DirectoryPluginLoader loader = new DirectoryPluginLoader();
+        final DefaultPluginLoader loader = new DefaultPluginLoader();
         final CommandlineConfig commandlineConfig = getConfig(profile);
         final ClassLoader classLoader = getClass().getClassLoader();
         final List<Plugin> plugins = commandlineConfig.getPlugins().stream()

File: allure-commandline/src/main/java/io/qameta/allure/plugin/DefaultPlugin.java
Patch:
@@ -1,9 +1,9 @@
-package io.qameta.allure.plugins;
+package io.qameta.allure.plugin;
 
 import io.qameta.allure.Extension;
 import io.qameta.allure.PluginConfiguration;
 import io.qameta.allure.core.Plugin;
-import io.qameta.allure.utils.CopyVisitor;
+import io.qameta.allure.util.CopyVisitor;
 
 import java.io.IOException;
 import java.nio.file.Files;

File: allure-generator/src/main/java/io/qameta/allure/ConfigurationBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import io.qameta.allure.launch.LaunchPlugin;
 import io.qameta.allure.mail.MailPlugin;
 import io.qameta.allure.owner.OwnerPlugin;
+import io.qameta.allure.retry.RetryPlugin;
 import io.qameta.allure.severity.SeverityPlugin;
 import io.qameta.allure.summary.SummaryPlugin;
 import io.qameta.allure.timeline.TimelinePlugin;
@@ -49,6 +50,7 @@ public ConfigurationBuilder useDefault() {
                 new FreemarkerContext(),
                 new RandomUidContext(),
                 new MarkdownDescriptionsPlugin(),
+                new RetryPlugin(),
                 new SeverityPlugin(),
                 new OwnerPlugin(),
                 new CategoriesPlugin(),

File: allure-generator/src/main/java/io/qameta/allure/core/TestsResultsPlugin.java
Patch:
@@ -25,7 +25,7 @@ public void aggregate(final Configuration configuration,
         final JacksonContext context = configuration.requireContext(JacksonContext.class);
         final Path testCasesFolder = Files.createDirectories(outputDirectory.resolve("data/test-cases"));
         final List<TestCaseResult> results = launchesResults.stream()
-                .flatMap(launch -> launch.getResults().stream())
+                .flatMap(launch -> launch.getAllResults().stream())
                 .collect(Collectors.toList());
         for (TestCaseResult result : results) {
             final Path file = testCasesFolder.resolve(result.getSource());

File: allure-generator/src/main/java/io/qameta/allure/markdown/MarkdownAggregator.java
Patch:
@@ -27,7 +27,7 @@ public void aggregate(final Configuration configuration,
     private void processDescriptions(final List<LaunchResults> launches, final MarkdownContext context) {
         launches.stream()
                 .flatMap(launch -> launch.getResults().stream())
-                .filter(result -> isNotEmpty(result.getDescriptionHtml()) || isEmpty(result.getDescription()))
+                .filter(result -> isEmpty(result.getDescriptionHtml()) && isNotEmpty(result.getDescription()))
                 .forEach(result -> {
                     final String html = context.getValue().markdownToHtml(result.getDescription());
                     result.setDescriptionHtml(html);

File: allure-generator/src/main/java/io/qameta/allure/DefaultConfiguration.java
Patch:
@@ -35,6 +35,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
+@SuppressWarnings("PMD.ExcessiveImports")
 public class DefaultConfiguration implements Configuration {
 
     private final Map<Class, Object> context = new HashMap<>();

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorPlugin.java
Patch:
@@ -41,7 +41,8 @@ public void readResults(final Configuration configuration,
     }
 
     @Override
-    public List<ExecutorInfo> getData(Configuration configuration, List<LaunchResults> launches) {
+    public List<ExecutorInfo> getData(final Configuration configuration,
+                                      final List<LaunchResults> launches) {
         return launches.stream()
                 .map(launchResults -> launchResults.getExtra(EXECUTORS_BLOCK_NAME))
                 .filter(Optional::isPresent)

File: allure-generator/src/test/java/io/qameta/allure/plugins/DirectoryPluginLoaderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.qameta.allure.Aggregator;
 import io.qameta.allure.core.Plugin;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.nio.file.Path;
@@ -16,6 +17,7 @@
 public class DirectoryPluginLoaderTest {
 
     @Test
+    @Ignore
     public void shouldLoad() throws Exception {
         final DirectoryPluginLoader pluginLoader = new DirectoryPluginLoader();
         final Path directory = Paths.get("/Users/charlie/projects/allure2/allure-commandline/build/plugins/behaviors-plugin-2.0-SNAPSHOT");

File: allure-generator/src/main/java/io/qameta/allure/allure1/Allure1ResultsReader.java
Patch:
@@ -46,6 +46,7 @@
 import static io.qameta.allure.entity.LabelName.ISSUE;
 import static io.qameta.allure.entity.LabelName.PACKAGE;
 import static io.qameta.allure.entity.LabelName.PARENT_SUITE;
+import static io.qameta.allure.entity.LabelName.SUB_SUITE;
 import static io.qameta.allure.entity.LabelName.SUITE;
 import static io.qameta.allure.entity.LabelName.TEST_CLASS;
 import static io.qameta.allure.entity.LabelName.TEST_ID;
@@ -148,6 +149,7 @@ private TestCaseResult convert(final TestSuiteResult testSuite,
         if (testGroupLabel.isPresent() && testSuiteLabel.isPresent()) {
             dest.addLabelIfNotExists(PARENT_SUITE, testSuiteLabel.get());
             dest.addLabelIfNotExists(SUITE, testGroupLabel.get());
+            dest.addLabelIfNotExists(SUB_SUITE, testClass);
         } else {
             dest.addLabelIfNotExists(SUITE, suiteName);
         }

File: allure-generator/src/main/java/io/qameta/allure/ParentModule.java
Patch:
@@ -36,7 +36,7 @@ public class ParentModule extends AbstractModule {
 
     private final List<Module> children;
 
-    public ParentModule(List<Plugin> plugins, List<Module> children) {
+    public ParentModule(final List<Plugin> plugins, final List<Module> children) {
         this.plugins = plugins;
         this.children = children;
     }
@@ -84,7 +84,7 @@ protected void configure() {
         children.forEach(this::install);
     }
 
-    private void bindPlugin(Plugin plugin) {
+    private void bindPlugin(final Plugin plugin) {
         Multibinder.newSetBinder(binder(), Plugin.class).addBinding().toInstance(plugin);
     }
 

File: allure-generator/src/main/java/io/qameta/allure/ReportGenerationException.java
Patch:
@@ -13,7 +13,7 @@ public class ReportGenerationException extends RuntimeException {
      *
      * @param cause given {@link java.lang.Throwable} cause
      */
-    public ReportGenerationException(Throwable cause) {
+    public ReportGenerationException(final Throwable cause) {
         super(cause);
     }
 
@@ -24,7 +24,7 @@ public ReportGenerationException(Throwable cause) {
      * @param message the detail message.
      * @param cause   given {@link java.lang.Throwable} cause
      */
-    public ReportGenerationException(String message, Throwable cause) {
+    public ReportGenerationException(final String message, final Throwable cause) {
         super(message, cause);
     }
 
@@ -33,7 +33,7 @@ public ReportGenerationException(String message, Throwable cause) {
      *
      * @param message the detail message.
      */
-    public ReportGenerationException(String message) {
+    public ReportGenerationException(final String message) {
         super(message);
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/ReportInfo.java
Patch:
@@ -18,7 +18,9 @@ public class ReportInfo {
 
     private final List<TestCaseResult> results;
 
-    public ReportInfo(Set<Plugin> plugins, Map<String, TestCase> testCases, List<TestCaseResult> results) {
+    public ReportInfo(final Set<Plugin> plugins,
+                      final Map<String, TestCase> testCases,
+                      final List<TestCaseResult> results) {
         this.plugins = plugins;
         this.testCases = testCases;
         this.results = results;

File: allure-generator/src/main/java/io/qameta/allure/core/DefaultTestRunReader.java
Patch:
@@ -30,7 +30,7 @@ public DefaultTestRunReader() {
     }
 
     @Override
-    public TestRun readTestRun(Path source) {
+    public TestRun readTestRun(final Path source) {
         Path file = source.resolve(TESTRUN_FILE_NAME);
         if (Files.exists(file)) {
             try (InputStream is = Files.newInputStream(file)) {

File: allure-generator/src/main/java/io/qameta/allure/core/ProcessTestCaseStage.java
Patch:
@@ -16,14 +16,14 @@ public class ProcessTestCaseStage {
     private final Map<String, TestCaseAggregator> aggregators;
 
     @Inject
-    public ProcessTestCaseStage(Map<String, TestCaseAggregator> aggregators) {
+    public ProcessTestCaseStage(final Map<String, TestCaseAggregator> aggregators) {
         this.aggregators = aggregators;
     }
 
     @SuppressWarnings("unchecked")
-    public Consumer<Map<String, Object>> process(TestRun testRun, TestCase testCase) {
+    public Consumer<Map<String, Object>> process(final TestRun testRun, final TestCase testCase) {
         return data -> aggregators.forEach((uid, aggregator) -> {
-            Object value = data.computeIfAbsent(uid, key -> aggregator.supplier(testRun).get());
+            final Object value = data.computeIfAbsent(uid, key -> aggregator.supplier(testRun).get());
             aggregator.aggregate(testRun, testCase).accept(value);
         });
     }

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorAggregator.java
Patch:
@@ -21,9 +21,9 @@ public Supplier<List<ExecutorWidgetItem>> supplier() {
     }
 
     @Override
-    public Consumer<List<ExecutorWidgetItem>> aggregate(TestRun testRun) {
+    public Consumer<List<ExecutorWidgetItem>> aggregate(final TestRun testRun) {
         return items -> {
-            ExecutorWidgetItem item = new ExecutorWidgetItem();
+            final ExecutorWidgetItem item = new ExecutorWidgetItem();
             item.setName(testRun.getName());
             item.setInfo(testRun.getExtraBlock(EXECUTOR_BLOCK_NAME, null));
             items.add(item);

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorWidgetItem.java
Patch:
@@ -15,15 +15,15 @@ public String getName() {
         return name;
     }
 
-    public void setName(String name) {
+    public void setName(final String name) {
         this.name = name;
     }
 
     public ExecutorInfo getInfo() {
         return info;
     }
 
-    public void setInfo(ExecutorInfo info) {
+    public void setInfo(final ExecutorInfo info) {
         this.info = info;
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryPlugin.java
Patch:
@@ -26,10 +26,10 @@ protected void configure() {
                 .addBinding().to(HistoryReader.class);
     }
 
-    public static HistoryData copy(HistoryData other) {
-        Statistic statistic = new Statistic();
+    public static HistoryData copy(final HistoryData other) {
+        final Statistic statistic = new Statistic();
         statistic.merge(other.getStatistic());
-        List<HistoryItem> items = new ArrayList<>(other.getItems());
+        final List<HistoryItem> items = new ArrayList<>(other.getItems());
         return new HistoryData()
                 .withId(other.getId())
                 .withName(other.getName())

File: allure-generator/src/main/java/io/qameta/allure/markdown/MarkdownProcessor.java
Patch:
@@ -18,16 +18,16 @@ public class MarkdownProcessor implements Processor {
     private final MarkdownSupport markdownSupport;
 
     @Inject
-    public MarkdownProcessor(MarkdownSupport markdownSupport) {
+    public MarkdownProcessor(final MarkdownSupport markdownSupport) {
         this.markdownSupport = markdownSupport;
     }
 
     @Override
-    public void process(TestRun testRun, TestCase testCase, TestCaseResult result) {
+    public void process(final TestRun testRun, final TestCase testCase, final TestCaseResult result) {
         if (isNotEmpty(result.getDescriptionHtml()) || isEmpty(result.getDescription())) {
             return;
         }
-        String html = markdownSupport.getProcessor().markdownToHtml(result.getDescription());
+        final String html = markdownSupport.getProcessor().markdownToHtml(result.getDescription());
         result.setDescriptionHtml(html);
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/owner/OwnerPlugin.java
Patch:
@@ -3,10 +3,12 @@
 import io.qameta.allure.AbstractPlugin;
 
 /**
- * Created by bvo2002 on 19.02.17.
+ * @author charlie (Dmitry Baev).
  */
 public class OwnerPlugin extends AbstractPlugin {
 
+    public static final String OWNER = "owner";
+
     @Override
     protected void configure() {
         processor(OwnerProcessor.class);

File: allure-generator/src/main/java/io/qameta/allure/plugins/EmptyPluginsLoader.java
Patch:
@@ -13,7 +13,7 @@
 public class EmptyPluginsLoader implements PluginsLoader {
 
     @Override
-    public List<Plugin> loadPlugins(Set<String> enabledPlugins) {
+    public List<Plugin> loadPlugins(final Set<String> enabledPlugins) {
         return Collections.emptyList();
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/severity/SeverityProcessor.java
Patch:
@@ -19,15 +19,15 @@ public class SeverityProcessor implements Processor {
     private static final Logger LOGGER = LoggerFactory.getLogger(SeverityProcessor.class);
 
     @Override
-    public void process(TestRun testRun, TestCase testCase, TestCaseResult result) {
-        Optional<String> severity = result.findOne(LabelName.SEVERITY);
+    public void process(final TestRun testRun, final TestCase testCase, final TestCaseResult result) {
+        final Optional<String> severity = result.findOne(LabelName.SEVERITY);
         result.addExtraBlock("severity", severity.isPresent()
                 ? getSeverity(severity.get())
                 : SeverityLevel.NORMAL
         );
     }
 
-    public SeverityLevel getSeverity(String value) {
+    public SeverityLevel getSeverity(final String value) {
         try {
             return SeverityLevel.fromValue(value);
         } catch (Exception e) {

File: allure-generator/src/main/java/io/qameta/allure/timeline/TimelineResultAggregator.java
Patch:
@@ -2,8 +2,8 @@
 
 import io.qameta.allure.entity.LabelName;
 import io.qameta.allure.entity.TestCaseResult;
-import io.qameta.allure.tree.TreeResultAggregator;
 import io.qameta.allure.tree.TreeGroup;
+import io.qameta.allure.tree.TreeResultAggregator;
 
 import java.util.Arrays;
 import java.util.List;
@@ -15,7 +15,7 @@
 public class TimelineResultAggregator extends TreeResultAggregator {
 
     @Override
-    protected List<TreeGroup> getGroups(TestCaseResult result) {
+    protected List<TreeGroup> getGroups(final TestCaseResult result) {
         return Arrays.asList(
                 TreeGroup.oneByLabel(result, LabelName.HOST, "Default hostname"),
                 TreeGroup.oneByLabel(result, LabelName.THREAD, "Default thread")

File: allure-generator/src/main/java/io/qameta/allure/xunit/XunitResultAggregator.java
Patch:
@@ -17,7 +17,7 @@
 public class XunitResultAggregator extends TreeResultAggregator {
 
     @Override
-    protected List<TreeGroup> getGroups(TestCaseResult result) {
+    protected List<TreeGroup> getGroups(final TestCaseResult result) {
         return Stream.of(LabelName.PARENT_SUITE, LabelName.SUITE, LabelName.SUB_SUITE)
                 .map(result::findOne)
                 .filter(Optional::isPresent)

File: allure-generator/src/test/java/io/qameta/allure/allure1/Allure1ResultsReaderTest.java
Patch:
@@ -59,6 +59,7 @@ public void setUp() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldProcessEmptyOrNullStatus() throws Exception {
         List<TestCaseResult> testResults = process(
                 "allure1/empty-status-testsuite.xml", generateTestSuiteXmlName()

File: allure-generator/src/test/java/io/qameta/allure/allure2/Allure2ResultsReaderTest.java
Patch:
@@ -73,6 +73,7 @@ public void shouldCreateReportInfo() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldReadBeforesFromGroups() throws Exception {
         List<TestCaseResult> testResults = process(
                 "allure2/simple-testcase.json", generateTestResultName(),
@@ -90,6 +91,7 @@ public void shouldReadBeforesFromGroups() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldReadAftersFromGroups() throws Exception {
         List<TestCaseResult> testResults = process(
                 "allure2/simple-testcase.json", generateTestResultName(),

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeWidgetFinalizer.java
Patch:
@@ -14,8 +14,8 @@
 public class TreeWidgetFinalizer implements Finalizer<TreeData> {
 
     @Override
-    public Object convert(TreeData identity) {
-        List<TreeWidgetItem> items = identity.getChildren().stream()
+    public Object convert(final TreeData identity) {
+        final List<TreeWidgetItem> items = identity.getChildren().stream()
                 .filter(TestGroupNode.class::isInstance)
                 .map(TestGroupNode.class::cast)
                 .sorted(Comparator.comparing(TestGroupNode::getStatistic, comparator()).reversed())

File: plugins/behaviors-plugin/src/main/java/io/qameta/allure/behaviors/BehaviorsResultAggregator.java
Patch:
@@ -2,8 +2,8 @@
 
 import io.qameta.allure.entity.LabelName;
 import io.qameta.allure.entity.TestCaseResult;
-import io.qameta.allure.tree.TreeResultAggregator;
 import io.qameta.allure.tree.TreeGroup;
+import io.qameta.allure.tree.TreeResultAggregator;
 
 import java.util.Arrays;
 import java.util.List;
@@ -15,7 +15,7 @@
 public class BehaviorsResultAggregator extends TreeResultAggregator {
 
     @Override
-    protected List<TreeGroup> getGroups(TestCaseResult result) {
+    protected List<TreeGroup> getGroups(final TestCaseResult result) {
         return Arrays.asList(
                 TreeGroup.allByLabel(result, LabelName.FEATURE, "Default feature"),
                 TreeGroup.allByLabel(result, LabelName.STORY, "Default story")

File: plugins/packages-plugin/src/main/java/io/qameta/allure/packages/PackagesResultAggregator.java
Patch:
@@ -17,8 +17,8 @@
 public class PackagesResultAggregator extends TreeResultAggregator {
 
     @Override
-    protected List<TreeGroup> getGroups(TestCaseResult result) {
-        Optional<String> aPackage = result.findOne("package");
+    protected List<TreeGroup> getGroups(final TestCaseResult result) {
+        final Optional<String> aPackage = result.findOne(LabelName.PACKAGE);
         if (!aPackage.isPresent()) {
             return Collections.emptyList();
         }
@@ -31,7 +31,7 @@ protected List<TreeGroup> getGroups(TestCaseResult result) {
     }
 
     @Override
-    protected String getNodeName(TestCaseResult result) {
+    protected String getNodeName(final TestCaseResult result) {
         return result
                 .findOne(LabelName.TEST_METHOD)
                 .filter(method -> !method.isEmpty())

File: allure-generator/src/main/java/io/qameta/allure/summary/SummaryPlugin.java
Patch:
@@ -10,6 +10,7 @@ public class SummaryPlugin extends AbstractPlugin {
     @Override
     protected void configure() {
         aggregateResults(SummaryAggregator.class)
+                .toReportData("summary.json")
                 .toWidget("summary");
     }
 }

File: allure-generator/src/main/java/io/qameta/allure/ParentModule.java
Patch:
@@ -9,9 +9,9 @@
 import com.google.inject.name.Names;
 import io.qameta.allure.allure1.Allure1ResultsReader;
 import io.qameta.allure.allure2.Allure2ResultsReader;
+import io.qameta.allure.categories.CategoriesPlugin;
 import io.qameta.allure.core.DefaultAttachmentsStorage;
 import io.qameta.allure.core.DefaultTestRunReader;
-import io.qameta.allure.defects.DefectsPlugin;
 import io.qameta.allure.executor.ExecutorPlugin;
 import io.qameta.allure.graph.GraphPlugin;
 import io.qameta.allure.history.HistoryPlugin;
@@ -92,8 +92,8 @@ protected List<AbstractModule> getDefaultModules() {
         return Arrays.asList(
                 new SummaryPlugin(),
                 new GraphPlugin(),
+                new CategoriesPlugin(),
                 new TimelinePlugin(),
-                new DefectsPlugin(),
                 new XunitPlugin(),
                 new HistoryPlugin(),
                 new ExecutorPlugin(),

File: allure-generator/src/test/java/io/qameta/allure/MainTest.java
Patch:
@@ -64,7 +64,7 @@ public void shouldGenerateReport() throws Exception {
         assertThat(attachments, isDirectory());
         assertThat(attachments, hasFilesCount(13));
 
-        assertThat(data, contains("defects.json"));
+        assertThat(data, contains("categories.json"));
         assertThat(data, contains("graph.json"));
         assertThat(data, contains("history.json"));
         assertThat(data, contains("timeline.json"));

File: allure-generator/src/test/java/io/qameta/allure/allure2/Allure2ResultsReaderTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.qameta.allure.allure2;
 
-import com.google.common.collect.Iterables;
 import io.qameta.allure.AttachmentsStorage;
 import io.qameta.allure.Main;
 import io.qameta.allure.ReportInfo;
@@ -221,7 +220,7 @@ public void shouldGenerateReport() throws Exception {
         assertThat(testCases, isDirectory());
         assertThat(testCases, hasFilesCount(4, "*.json"));
 
-        assertThat(data, contains("defects.json"));
+        assertThat(data, contains("categories.json"));
         assertThat(data, contains("graph.json"));
         assertThat(data, contains("history.json"));
         assertThat(data, contains("timeline.json"));

File: allure-commandline/src/main/java/io/qameta/allure/command/AllureCommandException.java
Patch:
@@ -7,11 +7,11 @@
  */
 public class AllureCommandException extends RuntimeException {
 
-    public AllureCommandException(String message) {
+    public AllureCommandException(final String message) {
         super(message);
     }
 
-    public AllureCommandException(Throwable cause) {
-        super(cause);
+    public AllureCommandException(final String message, final Throwable cause) {
+        super(message, cause);
     }
 }

File: allure-commandline/src/main/java/io/qameta/allure/command/Context.java
Patch:
@@ -18,8 +18,8 @@ public class Context {
 
     private final Set<String> enabledPlugins;
 
-    public Context(Path workDirectory, Path pluginsDirectory, Path webDirectory,
-                   String toolVersion, Set<String> enabledPlugins) {
+    public Context(final Path workDirectory, final Path pluginsDirectory, final Path webDirectory,
+                   final String toolVersion, final Set<String> enabledPlugins) {
         this.workDirectory = workDirectory;
         this.pluginsDirectory = pluginsDirectory;
         this.webDirectory = webDirectory;

File: allure-commandline/src/main/java/io/qameta/allure/command/ExitCode.java
Patch:
@@ -11,7 +11,7 @@ public enum ExitCode {
 
     private final int code;
 
-    ExitCode(int code) {
+    ExitCode(final int code) {
         this.code = code;
     }
 

File: allure-commandline/src/main/java/io/qameta/allure/command/Help.java
Patch:
@@ -27,10 +27,10 @@ public class Help<T> implements AllureCommand {
             name = {"--include-hidden"},
             description = "When set the help output will include hidden commands and options",
             hidden = true)
-    public boolean includeHidden = false;
+    public boolean includeHidden;
 
     @Override
-    public void run(Context context) throws Exception {
+    public void run(final Context context) throws Exception {
         help(global, command, this.includeHidden);
     }
 }

File: allure-commandline/src/main/java/io/qameta/allure/command/PortOptions.java
Patch:
@@ -11,7 +11,7 @@ public class PortOptions {
     @Port
     @Option(name = {"-p", "--port"},
             description = "This port will be used to start web server for the report")
-    protected int port = 0;
+    protected int port;
 
     public int getPort() {
         return port;

File: allure-commandline/src/main/java/io/qameta/allure/command/VerboseOptions.java
Patch:
@@ -12,12 +12,12 @@ public class VerboseOptions {
     @Option(
             name = {"-v", "--verbose"},
             description = "Switch on the verbose mode.")
-    protected boolean verbose = false;
+    protected boolean verbose;
 
     @Option(
             name = {"-q", "--quiet"},
             description = "Switch on the quiet mode.")
-    protected boolean quiet = false;
+    protected boolean quiet;
 
     /**
      * Returns true if silent mode is enabled, false otherwise.

File: allure-commandline/src/main/java/io/qameta/allure/command/Version.java
Patch:
@@ -9,7 +9,8 @@
 public class Version implements AllureCommand {
 
     @Override
-    public void run(Context context) throws Exception {
+    @SuppressWarnings("PMD.SystemPrintln")
+    public void run(final Context context) throws Exception {
         System.out.println(context.getToolVersion());
     }
 }

File: allure-commandline/src/main/java/io/qameta/allure/utils/AutoCleanablePath.java
Patch:
@@ -11,7 +11,7 @@ public class AutoCleanablePath implements AutoCloseable {
 
     private final Path path;
 
-    public AutoCleanablePath(Path path) {
+    public AutoCleanablePath(final Path path) {
         this.path = path;
     }
 
@@ -24,7 +24,7 @@ public void close() throws Exception {
         Files.walkFileTree(path, new DeleteVisitor());
     }
 
-    public static AutoCleanablePath create(String prefix) throws IOException {
+    public static AutoCleanablePath create(final String prefix) throws IOException {
         return new AutoCleanablePath(Files.createTempDirectory(prefix));
     }
 }

File: allure-commandline/src/main/java/io/qameta/allure/utils/DeleteVisitor.java
Patch:
@@ -13,13 +13,13 @@
 public class DeleteVisitor extends SimpleFileVisitor<Path> {
 
     @Override
-    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
+    public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
         Files.delete(file);
         return FileVisitResult.CONTINUE;
     }
 
     @Override
-    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
+    public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {
         Files.delete(dir);
         return FileVisitResult.CONTINUE;
     }

File: allure-generator/src/main/java/io/qameta/allure/ProcessStage.java
Patch:
@@ -112,20 +112,19 @@ private Statistic processData(ReportWriter writer, Map<String, Object> data, Pat
         return statistic;
     }
 
+    @SuppressWarnings("unchecked")
     private void writeData(ReportWriter writer, Map<String, Object> data) {
         Map<String, Object> widgets = new HashMap<>();
         data.forEach((uid, object) -> {
             Set<String> fileNames = filesNamesMap.getOrDefault(uid, Collections.emptySet());
             fileNames.forEach(fileName -> {
                 Finalizer finalizer = finalizers.getOrDefault(fileName, Finalizer.identity());
-                //noinspection unchecked
                 writer.writeJsonData(fileName, finalizer.convert(object));
             });
 
             Set<String> widgetNames = widgetsNamesMap.getOrDefault(uid, Collections.emptySet());
             widgetNames.forEach(name -> {
                 Finalizer finalizer = finalizers.getOrDefault(name, Finalizer.identity());
-                //noinspection unchecked
                 widgets.put(name, finalizer.convert(object));
             });
         });

File: allure-generator/src/main/java/io/qameta/allure/core/ProcessResultStage.java
Patch:
@@ -21,12 +21,12 @@ public class ProcessResultStage {
     @Inject
     protected Map<String, ResultAggregator> aggregators;
 
+    @SuppressWarnings("unchecked")
     public Consumer<Map<String, Object>> process(TestRun testRun, TestCase testCase, TestCaseResult result) {
         return data -> {
             processors.forEach((uid, processor) -> processor.process(testRun, testCase, result));
             aggregators.forEach((uid, aggregator) -> {
                 Object value = data.computeIfAbsent(uid, key -> aggregator.supplier(testRun, testCase).get());
-                //noinspection unchecked
                 aggregator.aggregate(testRun, testCase, result).accept(value);
             });
         };

File: allure-generator/src/main/java/io/qameta/allure/core/ProcessTestCaseStage.java
Patch:
@@ -20,10 +20,10 @@ public ProcessTestCaseStage(Map<String, TestCaseAggregator> aggregators) {
         this.aggregators = aggregators;
     }
 
+    @SuppressWarnings("unchecked")
     public Consumer<Map<String, Object>> process(TestRun testRun, TestCase testCase) {
         return data -> aggregators.forEach((uid, aggregator) -> {
             Object value = data.computeIfAbsent(uid, key -> aggregator.supplier(testRun).get());
-            //noinspection unchecked
             aggregator.aggregate(testRun, testCase).accept(value);
         });
     }

File: allure-generator/src/main/java/io/qameta/allure/core/ProcessTestRunStage.java
Patch:
@@ -31,10 +31,10 @@ public ProcessTestRunStage(TestRunReader reader, Set<TestRunDetailsReader> detai
         this.aggregators = aggregators;
     }
 
+    @SuppressWarnings("unchecked")
     public Consumer<Map<String, Object>> process(TestRun testRun) {
         return data -> aggregators.forEach((uid, aggregator) -> {
             Object value = data.computeIfAbsent(uid, key -> aggregator.supplier().get());
-            //noinspection unchecked
             aggregator.aggregate(testRun).accept(value);
         });
     }

File: allure-generator/src/main/java/io/qameta/allure/plugins/DefaultPluginLoader.java
Patch:
@@ -109,7 +109,7 @@ public static Optional<PluginDescriptor> readPluginDescriptor(Path pluginDirecto
         try (InputStream is = Files.newInputStream(descriptor)) {
             return Optional.of(JAXB.unmarshal(is, PluginDescriptor.class));
         } catch (IOException e) {
-            LOGGER.error("Could not read plugin descriptor {} {}", pluginDirectory.getFileName().toString(), e);
+            LOGGER.error("Could not read plugin descriptor {} {}", pluginDirectory.getFileName(), e);
             return Optional.empty();
         }
     }

File: allure-generator/src/main/java/io/qameta/allure/utils/ListUtils.java
Patch:
@@ -30,7 +30,8 @@ public static <T, S> Predicate<T> compareBy(Function<T, S> map, Supplier<S> comp
         return item -> Objects.nonNull(item) && Objects.equals(map.apply(item), compareWith.get());
     }
 
-    public static <T> T firstNonNull(T... items) {
+    @SafeVarargs
+    public static <T> T firstNonNull(final T... items) {
         return Stream.of(items)
                 .filter(Objects::nonNull)
                 .findFirst()

File: allure-generator/src/test/java/io/qameta/allure/testdata/TestData.java
Patch:
@@ -14,6 +14,7 @@
 import java.nio.file.Path;
 import java.util.Map;
 import java.util.Random;
+import java.util.concurrent.ThreadLocalRandom;
 import java.util.stream.Collectors;
 
 /**
@@ -37,7 +38,7 @@ public static String randomName() {
     }
 
     public static long randomLong() {
-        return new Random().nextLong();
+        return ThreadLocalRandom.current().nextLong();
     }
 
     public static String randomFileName() {

File: allure-plugin-api/src/main/java/io/qameta/allure/ReportApiUtils.java
Patch:
@@ -12,6 +12,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.SecureRandom;
+import java.util.Objects;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
@@ -56,7 +57,7 @@ public static String getExtensionByMimeType(String type) {
 
     public static String probeContentType(Path path) {
         try (InputStream stream = newInputStream(path)) {
-            return probeContentType(stream, path.getFileName().toString());
+            return probeContentType(stream, Objects.toString(path.getFileName()));
         } catch (IOException e) {
             LOGGER.warn("Couldn't detect the mime-type of attachment {} {}", path, e);
             return "unknown";

File: allure-plugin-api/src/test/java/io/qameta/allure/tree/TreeResultAggregatorTest.java
Patch:
@@ -88,6 +88,7 @@ public void shouldUpdateGroupTime() throws Exception {
         aggregator.aggregate(testRun, testCase, first).accept(treeData);
         aggregator.aggregate(testRun, testCase, second).accept(treeData);
         assertThat(treeData.getTime(), notNullValue());
+        assertThat(treeData.getTime().getMinDuration(), is(123L));
         assertThat(treeData.getTime().getMaxDuration(), is(321L));
         assertThat(treeData.getTime().getSumDuration(), is(444L));
         assertThat(treeData.getTime().getStart(), nullValue());

File: allure-generator/src/main/java/io/qameta/allure/ParentModule.java
Patch:
@@ -17,6 +17,7 @@
 import io.qameta.allure.history.HistoryPlugin;
 import io.qameta.allure.jackson.JacksonMapperModule;
 import io.qameta.allure.markdown.MarkdownPlugin;
+import io.qameta.allure.owner.OwnerPlugin;
 import io.qameta.allure.severity.SeverityPlugin;
 import io.qameta.allure.summary.SummaryPlugin;
 import io.qameta.allure.testrun.TestRunPlugin;
@@ -98,7 +99,8 @@ protected List<AbstractModule> getDefaultModules() {
                 new ExecutorPlugin(),
                 new TestRunPlugin(),
                 new SeverityPlugin(),
-                new MarkdownPlugin()
+                new MarkdownPlugin(),
+                new OwnerPlugin()
         );
     }
 }

File: allure-generator/src/test/java/io/qameta/allure/allure1/Allure1ResultsReaderTest.java
Patch:
@@ -218,7 +218,7 @@ public void shouldUseTestClassLabelForFullName() throws Exception {
         );
         assertThat(testResults, hasSize(1));
         TestCaseResult result = testResults.iterator().next();
-        assertThat(result.getFullName(), is("my.company.package.subpackage.MyClass#testThree"));
+        assertThat(result.getFullName(), is("my.company.package.subpackage.MyClass.testThree"));
     }
 
     private List<TestCaseResult> process(String... strings) throws IOException {

File: plugins/junit-plugin/src/main/java/io/qameta/allure/junit/JunitResultsReader.java
Patch:
@@ -67,6 +67,7 @@ public List<TestCaseResult> readResults(Path source) {
                         log.ifPresent(result.getTestStage().getAttachments()::add);
                         result.addLabelIfNotExists(LabelName.SUITE, testSuite.getFullClassName());
                         result.addLabelIfNotExists(LabelName.TEST_CLASS, testSuite.getFullClassName());
+                        result.addLabelIfNotExists(LabelName.PACKAGE, testSuite.getFullClassName());
                         results.add(result);
                     }
                     return results.stream();

File: allure-generator/src/test/java/io/qameta/allure/testdata/TestData.java
Patch:
@@ -81,7 +81,7 @@ public static void unpackDummyResources(String prefix, Path output) throws IOExc
             try (InputStream is = url.openStream()) {
                 Files.copy(is, file);
             } catch (IOException e) {
-                throw new RuntimeException(e);
+                throw new RuntimeException(String.format("name: %s, url: %s", name, url), e);
             }
         });
     }

File: allure-commandline/src/main/java/io/qameta/allure/utils/CommandUtils.java
Patch:
@@ -53,7 +53,6 @@ public static Server setUpServer(int port, Path reportDirectory) {
         Server server = new Server(port);
         ResourceHandler handler = new ResourceHandler();
         handler.setDirectoriesListed(true);
-        handler.setWelcomeFiles(new String[]{"index.html"});
         handler.setResourceBase(reportDirectory.toAbsolutePath().toString());
         HandlerList handlers = new HandlerList();
         handlers.setHandlers(new Handler[]{handler, new DefaultHandler()});

File: allure-generator/src/main/java/io/qameta/allure/defects/DefectsResultAggregator.java
Patch:
@@ -1,7 +1,6 @@
 package io.qameta.allure.defects;
 
 import io.qameta.allure.ResultAggregator;
-import io.qameta.allure.entity.Failure;
 import io.qameta.allure.entity.Status;
 import io.qameta.allure.entity.TestCase;
 import io.qameta.allure.entity.TestCaseResult;
@@ -35,8 +34,7 @@ public Consumer<DefectsData> aggregate(TestRun testRun, TestCase testCase, TestC
             }
 
             List<Defect> defects = status == FAILED ? identity.getProductDefects() : identity.getTestDefects();
-            String defectMessage = result.getFailureIfExists()
-                    .map(Failure::getMessage)
+            String defectMessage = result.getStatusMessage()
                     .orElse("Unknown error");
 
             Defect defect = defects.stream()

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryResultAggregator.java
Patch:
@@ -46,7 +46,7 @@ public Consumer<Map<String, HistoryData>> aggregate(TestRun testRun, TestCase te
 
             HistoryItem newItem = new HistoryItem()
                     .withStatus(result.getStatus())
-                    .withStatusDetails(Objects.isNull(result.getFailure()) ? null : result.getFailure().getMessage())
+                    .withStatusDetails(result.getStatusMessage().orElse(null))
                     .withTime(result.getTime())
                     .withTestRunName(testRun.getName());
 

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/ExtraStatisticMethods.java
Patch:
@@ -31,7 +31,7 @@ public interface ExtraStatisticMethods {
 
     @XmlElement
     default long getTotal() {
-        return getFailed() + getBroken() + getPassed() + getSkipped();
+        return getFailed() + getBroken() + getPassed() + getSkipped() + getUnknown();
     }
 
     /**

File: allure-generator/src/main/java/io/qameta/allure/ReportFactory.java
Patch:
@@ -47,7 +47,7 @@ public ReportInfo create(Path... sources) {
     }
 
     private TestCase getTestCase(TestCaseResult result) {
-        return testCases.computeIfAbsent(result.getId(), id -> new TestCase()
+        return testCases.computeIfAbsent(result.getTestCaseId(), id -> new TestCase()
                 .withId(id)
                 .withName(result.getName())
                 .withDescription(result.getDescription())

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryProcessor.java
Patch:
@@ -19,12 +19,12 @@ public class HistoryProcessor implements Processor {
 
     @Override
     public void process(TestRun testRun, TestCase testCase, TestCaseResult result) {
-        if (Objects.isNull(result.getId())) {
+        if (Objects.isNull(result.getTestCaseId())) {
             return;
         }
         Map<String, HistoryData> history = testRun.getExtraBlock(HISTORY, new HashMap<>());
         HistoryData data = history.computeIfAbsent(
-                result.getId(),
+                result.getTestCaseId(),
                 id -> new HistoryData().withId(id).withName(result.getName())
         );
         data.updateStatistic(result);

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryResultAggregator.java
Patch:
@@ -35,11 +35,11 @@ public Supplier<Map<String, HistoryData>> supplier(TestRun testRun, TestCase tes
     @Override
     public Consumer<Map<String, HistoryData>> aggregate(TestRun testRun, TestCase testCase, TestCaseResult result) {
         return (history) -> {
-            if (Objects.isNull(result.getId())) {
+            if (Objects.isNull(result.getTestCaseId())) {
                 return;
             }
             HistoryData data = history.computeIfAbsent(
-                    result.getId(),
+                    result.getTestCaseId(),
                     id -> new HistoryData().withId(id).withName(result.getName())
             );
             data.updateStatistic(result);

File: allure-generator/src/test/java/io/qameta/allure/history/HistoryProcessorTest.java
Patch:
@@ -39,7 +39,7 @@ public void shouldAddTestCaseHistoryBlock() throws Exception {
 
         TestCase testCase = mock(TestCase.class);
         TestCaseResult result = mock(TestCaseResult.class);
-        doReturn(id).when(result).getId();
+        doReturn(id).when(result).getTestCaseId();
 
         HistoryProcessor processor = new HistoryProcessor();
         processor.process(testRun, testCase, result);

File: plugins/cucumber-json-plugin/src/test/java/io/qameta/allure/cucumberjson/test/CucumberJsonReportTest.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.List;
 
 import static io.qameta.allure.entity.Status.BROKEN;
-import static io.qameta.allure.entity.Status.CANCELED;
 import static io.qameta.allure.entity.Status.FAILED;
 import static io.qameta.allure.entity.Status.PASSED;
-import static io.qameta.allure.entity.Status.PENDING;
+import static io.qameta.allure.entity.Status.SKIPPED;
+import static io.qameta.allure.entity.Status.UNKNOWN;
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
@@ -49,7 +49,7 @@ public void readSingleJsonFile() throws Exception {
                 .isNotNull()
                 .hasSize(5)
                 .extracting(TestCaseResult::getStatus)
-                .contains(FAILED, PASSED, CANCELED, PENDING, BROKEN);
+                .contains(FAILED, PASSED, SKIPPED, UNKNOWN);
     }
 
     @Test

File: plugins/junit-plugin/src/main/java/io/qameta/allure/junit/JunitResultsReader.java
Patch:
@@ -76,7 +76,7 @@ public List<TestCaseResult> readResults(Path source) {
 
     protected TestCaseResult convert(ReportTestCase source) {
         TestCaseResult dest = new TestCaseResult();
-        dest.setId(String.format("%s#%s", source.getFullClassName(), source.getName()));
+        dest.setTestCaseId(String.format("%s#%s", source.getFullClassName(), source.getName()));
         dest.setUid(generateUid());
         dest.setName(source.getName());
         dest.setTime(new Time()
@@ -95,7 +95,7 @@ protected Status getStatus(ReportTestCase source) {
             return Status.FAILED;
         }
         if ("skipped".equalsIgnoreCase(source.getFailureType())) {
-            return Status.CANCELED;
+            return Status.SKIPPED;
         }
         return Status.BROKEN;
     }

File: plugins/junit-plugin/src/test/java/org/allurefw/report/junit/JunitTestResultsTest.java
Patch:
@@ -50,12 +50,12 @@ public void shouldReadJunitResults() throws Exception {
         assertThat(testCases, hasSize(5));
 
         List<TestCaseResult> failed = filterByStatus(testCases, Status.FAILED);
-        List<TestCaseResult> canceled = filterByStatus(testCases, Status.CANCELED);
+        List<TestCaseResult> skipped = filterByStatus(testCases, Status.SKIPPED);
         List<TestCaseResult> passed = filterByStatus(testCases, Status.PASSED);
 
         assertThat("Should parse failed status", failed, hasSize(1));
-        assertThat("Should parse skipped status", canceled, hasSize(1));
-        assertThat(passed, hasSize(3));
+        assertThat("Should parse skipped status", skipped, hasSize(1));
+        assertThat("Should parse passed status", passed, hasSize(3));
     }
 
     @Test

File: allure-generator/src/test/java/io/qameta/allure/history/HistoryFileTest.java
Patch:
@@ -35,8 +35,7 @@ public class HistoryFileTest {
     public void skipHistoryForTestCaseWithoutId() throws Exception {
         String testName = "noIdTest";
 
-        Path plugins = folder.newFolder().toPath();
-        Main main = new Main(plugins, null);
+        Main main = new Main();
         Path resultsDirectory = folder.newFolder().toPath();
         Path output = folder.newFolder().toPath();
         unpackDummyResources("allure2/", resultsDirectory);
@@ -46,14 +45,15 @@ public void skipHistoryForTestCaseWithoutId() throws Exception {
         Path data = output.resolve("data");
         assertThat(data, contains("history.json"));
 
-        try (InputStream is = Files.newInputStream(data.resolve("history.json"))){
+        try (InputStream is = Files.newInputStream(data.resolve("history.json"))) {
             Map<String, HistoryData> history = mapper.readValue(is, HISTORY_TYPE);
             assertThat(history.entrySet(), hasSize(1));
             Optional<Map.Entry<String, HistoryData>> historyEntry = history.entrySet().stream()
                     .filter(entry -> entry.getValue().getName().equals(testName)).findFirst();
             assertThat("Corresponding entry for test case without id should not exist in history file",
                     historyEntry.isPresent(), equalTo(false));
         } catch (IOException e) {
+            e.printStackTrace(System.err);
             fail("Cannot read history.json file");
         }
     }

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryResultAggregator.java
Patch:
@@ -35,6 +35,9 @@ public Supplier<Map<String, HistoryData>> supplier(TestRun testRun, TestCase tes
     @Override
     public Consumer<Map<String, HistoryData>> aggregate(TestRun testRun, TestCase testCase, TestCaseResult result) {
         return (history) -> {
+            if (Objects.isNull(result.getId())) {
+                return;
+            }
             HistoryData data = history.computeIfAbsent(
                     result.getId(),
                     id -> new HistoryData().withId(id).withName(result.getName())

File: allure-generator/src/main/java/io/qameta/allure/history/HistoryResultAggregator.java
Patch:
@@ -44,7 +44,7 @@ public Consumer<Map<String, HistoryData>> aggregate(TestRun testRun, TestCase te
             HistoryItem newItem = new HistoryItem()
                     .withStatus(result.getStatus())
                     .withStatusDetails(Objects.isNull(result.getFailure()) ? null : result.getFailure().getMessage())
-                    .withTimestamp(result.getTime().getStop())
+                    .withTime(result.getTime())
                     .withTestRunName(testRun.getName());
 
             List<HistoryItem> newItems = Stream.concat(Stream.of(newItem), data.getItems().stream())

File: allure-commandline/src/main/java/io/qameta/allure/command/AllureCommand.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-commandline/src/main/java/io/qameta/allure/command/AllureCommandException.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 /**
  * The exception indicates about some problems during Allure commandline execution.

File: allure-commandline/src/main/java/io/qameta/allure/command/Context.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import java.nio.file.Path;
 import java.util.Set;

File: allure-commandline/src/main/java/io/qameta/allure/command/ExitCode.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 /**
  * @author etki

File: allure-commandline/src/main/java/io/qameta/allure/command/Help.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Arguments;
 import com.github.rvesse.airline.annotations.Command;

File: allure-commandline/src/main/java/io/qameta/allure/command/ListPlugins.java
Patch:
@@ -1,11 +1,11 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Command;
-import org.allurefw.report.Plugin;
+import io.qameta.allure.Plugin;
 
 import javax.inject.Inject;
 
-import static org.allurefw.report.utils.CommandUtils.createMain;
+import static io.qameta.allure.utils.CommandUtils.createMain;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-commandline/src/main/java/io/qameta/allure/command/PortOptions.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Option;
 import com.github.rvesse.airline.annotations.restrictions.Port;

File: allure-commandline/src/main/java/io/qameta/allure/command/ReportOpen.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Arguments;
 import com.github.rvesse.airline.annotations.Command;
@@ -11,8 +11,8 @@
 import javax.inject.Inject;
 import java.nio.file.Paths;
 
-import static org.allurefw.report.utils.CommandUtils.openBrowser;
-import static org.allurefw.report.utils.CommandUtils.setUpServer;
+import static io.qameta.allure.utils.CommandUtils.openBrowser;
+import static io.qameta.allure.utils.CommandUtils.setUpServer;
 
 /**
  * @author Artem Eroshenko <eroshenkoam@qameta.io>

File: allure-commandline/src/main/java/io/qameta/allure/command/ResultsOptions.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Arguments;
 import com.github.rvesse.airline.annotations.restrictions.Path;

File: allure-commandline/src/main/java/io/qameta/allure/command/VerboseOptions.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Option;
 import org.apache.log4j.Level;

File: allure-commandline/src/main/java/io/qameta/allure/command/Version.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.command;
+package io.qameta.allure.command;
 
 import com.github.rvesse.airline.annotations.Command;
 

File: allure-commandline/src/main/java/io/qameta/allure/utils/AutoCleanablePath.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.utils;
+package io.qameta.allure.utils;
 
 import java.io.IOException;
 import java.nio.file.Files;

File: allure-commandline/src/main/java/io/qameta/allure/utils/CopyVisitor.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.utils;
+package io.qameta.allure.utils;
 
 import java.io.IOException;
 import java.nio.file.FileVisitResult;

File: allure-commandline/src/main/java/io/qameta/allure/utils/DeleteVisitor.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.utils;
+package io.qameta.allure.utils;
 
 import java.io.IOException;
 import java.nio.file.FileVisitResult;

File: allure-generator/src/main/java/io/qameta/allure/DummyReportGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: allure-generator/src/main/java/io/qameta/allure/ReportFactory.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.TestCase;
-import org.allurefw.report.entity.TestCaseResult;
+import io.qameta.allure.entity.TestCase;
+import io.qameta.allure.entity.TestCaseResult;
 
 import javax.inject.Inject;
 import java.nio.file.Path;

File: allure-generator/src/main/java/io/qameta/allure/ReportGenerationException.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-generator/src/main/java/io/qameta/allure/defects/DefectsPlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.defects;
+package io.qameta.allure.defects;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-generator/src/main/java/io/qameta/allure/defects/ProductDefectsWidgetFinalizer.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.defects;
+package io.qameta.allure.defects;
 
-import org.allurefw.report.Finalizer;
+import io.qameta.allure.Finalizer;
 
 import java.util.Comparator;
 import java.util.List;

File: allure-generator/src/main/java/io/qameta/allure/defects/TestDefectsWidgetFinalizer.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.defects;
+package io.qameta.allure.defects;
 
-import org.allurefw.report.Finalizer;
+import io.qameta.allure.Finalizer;
 
 import java.util.Comparator;
 import java.util.List;

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorPlugin.java
Patch:
@@ -1,8 +1,8 @@
-package org.allurefw.report.executor;
+package io.qameta.allure.executor;
 
 import com.google.inject.multibindings.Multibinder;
-import org.allurefw.report.AbstractPlugin;
-import org.allurefw.report.TestRunDetailsReader;
+import io.qameta.allure.AbstractPlugin;
+import io.qameta.allure.TestRunDetailsReader;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/io/qameta/allure/executor/ExecutorWidgetItem.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.executor;
+package io.qameta.allure.executor;
 
-import org.allurefw.report.entity.ExecutorInfo;
+import io.qameta.allure.entity.ExecutorInfo;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/io/qameta/allure/graph/GraphPlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.graph;
+package io.qameta.allure.graph;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-generator/src/main/java/io/qameta/allure/jackson/JacksonMapperModule.java
Patch:
@@ -1,7 +1,6 @@
-package org.allurefw.report.jackson;
+package io.qameta.allure.jackson;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;

File: allure-generator/src/main/java/io/qameta/allure/markdown/MarkdownPlugin.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report.markdown;
+package io.qameta.allure.markdown;
 
 import com.google.inject.Scopes;
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/io/qameta/allure/markdown/MarkdownSupport.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.markdown;
+package io.qameta.allure.markdown;
 
 import org.pegdown.Extensions;
 import org.pegdown.PegDownProcessor;

File: allure-generator/src/main/java/io/qameta/allure/plugins/EmptyPluginsLoader.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report.plugins;
+package io.qameta.allure.plugins;
 
-import org.allurefw.report.Plugin;
-import org.allurefw.report.PluginsLoader;
+import io.qameta.allure.Plugin;
+import io.qameta.allure.PluginsLoader;
 
 import java.util.Collections;
 import java.util.List;

File: allure-generator/src/main/java/io/qameta/allure/severity/SeverityPlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.severity;
+package io.qameta.allure.severity;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/io/qameta/allure/summary/SummaryPlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.summary;
+package io.qameta.allure.summary;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/io/qameta/allure/testrun/TestRunPlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.testrun;
+package io.qameta.allure.testrun;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/io/qameta/allure/timeline/TimelinePlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.timeline;
+package io.qameta.allure.timeline;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-generator/src/main/java/io/qameta/allure/utils/CopyVisitor.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.utils;
+package io.qameta.allure.utils;
 
 import java.io.IOException;
 import java.nio.file.FileVisitResult;

File: allure-generator/src/main/java/io/qameta/allure/utils/ListUtils.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.utils;
+package io.qameta.allure.utils;
 
 import java.util.List;
 import java.util.Objects;

File: allure-generator/src/main/java/io/qameta/allure/writer/DefaultWriter.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.writer;
+package io.qameta.allure.writer;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.inject.Inject;

File: allure-generator/src/main/java/io/qameta/allure/writer/Writer.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.writer;
+package io.qameta.allure.writer;
 
 import java.nio.file.Path;
 

File: allure-generator/src/main/java/io/qameta/allure/writer/WriterModule.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.writer;
+package io.qameta.allure.writer;
 
 import com.google.inject.AbstractModule;
 import com.google.inject.Scopes;

File: allure-generator/src/main/java/io/qameta/allure/xunit/XunitPlugin.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report.xunit;
+package io.qameta.allure.xunit;
 
-import org.allurefw.report.AbstractPlugin;
-import org.allurefw.report.tree.TreeWidgetFinalizer;
+import io.qameta.allure.AbstractPlugin;
+import io.qameta.allure.tree.TreeWidgetFinalizer;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-generator/src/test/java/io/qameta/allure/history/HistoryReaderTest.java
Patch:
@@ -1,8 +1,8 @@
-package org.allurefw.report.history;
+package io.qameta.allure.history;
 
 import com.google.inject.Guice;
-import org.allurefw.report.entity.TestRun;
-import org.allurefw.report.jackson.JacksonMapperModule;
+import io.qameta.allure.entity.TestRun;
+import io.qameta.allure.jackson.JacksonMapperModule;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;

File: allure-plugin-api/src/main/java/io/qameta/allure/AbstractPlugin.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 import com.google.inject.AbstractModule;
 import com.google.inject.multibindings.MapBinder;

File: allure-plugin-api/src/main/java/io/qameta/allure/AttachmentsStorage.java
Patch:
@@ -1,11 +1,10 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.Attachment;
+import io.qameta.allure.entity.Attachment;
 
 import java.nio.file.Path;
 import java.util.Map;
 import java.util.Optional;
-import java.util.Set;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-plugin-api/src/main/java/io/qameta/allure/Finalizer.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/ModelUtils.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.Label;
-import org.allurefw.report.entity.LabelName;
+import io.qameta.allure.entity.Label;
+import io.qameta.allure.entity.LabelName;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/Plugin.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 import com.google.inject.Module;
 

File: allure-plugin-api/src/main/java/io/qameta/allure/PluginsLoader.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 import java.util.List;
 import java.util.Set;

File: allure-plugin-api/src/main/java/io/qameta/allure/ReportApiUtils.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
 import org.apache.tika.metadata.Metadata;
 import org.slf4j.Logger;

File: allure-plugin-api/src/main/java/io/qameta/allure/ResultsReader.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.TestCaseResult;
+import io.qameta.allure.entity.TestCaseResult;
 
 import java.nio.file.Path;
 import java.util.List;

File: allure-plugin-api/src/main/java/io/qameta/allure/TestRunAggregator.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.TestRun;
+import io.qameta.allure.entity.TestRun;
 
 import java.util.function.Consumer;
 import java.util.function.Supplier;

File: allure-plugin-api/src/main/java/io/qameta/allure/TestRunDetailsReader.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.TestRun;
+import io.qameta.allure.entity.TestRun;
 
 import java.nio.file.Path;
 import java.util.function.Consumer;

File: allure-plugin-api/src/main/java/io/qameta/allure/TestRunReader.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report;
+package io.qameta.allure;
 
-import org.allurefw.report.entity.TestRun;
+import io.qameta.allure.entity.TestRun;
 
 import java.nio.file.Path;
 

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/ExtraElements.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import javax.xml.bind.annotation.XmlElement;
 import java.util.HashMap;

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/ExtraGroupTimeMethods.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import java.util.function.BiFunction;
 import java.util.function.Consumer;

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/ExtraStatisticMethods.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import javax.xml.bind.annotation.XmlElement;
 import java.util.Comparator;

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithDescription.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithFailure.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import java.util.Optional;
 

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithFileName.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import com.google.common.io.Files;
 

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithGroupTime.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithLinks.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithName.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithParametersNames.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithSource.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithStatistic.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithStatus.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithTestCaseInfo.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithTime.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/entity/WithUid.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.entity;
+package io.qameta.allure.entity;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeCollapseGroupsWithOneChildFinalizer.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.tree;
+package io.qameta.allure.tree;
 
-import org.allurefw.report.Finalizer;
+import io.qameta.allure.Finalizer;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeGroup.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report.tree;
+package io.qameta.allure.tree;
 
-import org.allurefw.report.entity.LabelName;
-import org.allurefw.report.entity.TestCaseResult;
+import io.qameta.allure.entity.LabelName;
+import io.qameta.allure.entity.TestCaseResult;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeNode.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.tree;
+package io.qameta.allure.tree;
 
 import javax.xml.bind.annotation.XmlElement;
 

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/TreeWidgetFinalizer.java
Patch:
@@ -1,12 +1,12 @@
-package org.allurefw.report.tree;
+package io.qameta.allure.tree;
 
-import org.allurefw.report.Finalizer;
+import io.qameta.allure.Finalizer;
 
 import java.util.Comparator;
 import java.util.List;
 import java.util.stream.Collectors;
 
-import static org.allurefw.report.entity.ExtraStatisticMethods.comparator;
+import static io.qameta.allure.entity.ExtraStatisticMethods.comparator;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-plugin-api/src/main/java/io/qameta/allure/tree/WithChildren.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.tree;
+package io.qameta.allure.tree;
 
 import java.util.List;
 

File: plugins/behaviors-plugin/src/main/java/io/qameta/allure/behaviors/BehaviorsPlugin.java
Patch:
@@ -1,6 +1,6 @@
-package org.allurefw.report.behaviors;
+package io.qameta.allure.behaviors;
 
-import org.allurefw.report.AbstractPlugin;
+import io.qameta.allure.AbstractPlugin;
 
 /**
  * @author Dmitry Baev baev@qameta.io

File: plugins/packages-plugin/src/main/java/io/qameta/allure/packages/PackagesPlugin.java
Patch:
@@ -1,7 +1,7 @@
-package org.allurefw.report.packages;
+package io.qameta.allure.packages;
 
-import org.allurefw.report.AbstractPlugin;
-import org.allurefw.report.tree.TreeCollapseGroupsWithOneChildFinalizer;
+import io.qameta.allure.AbstractPlugin;
+import io.qameta.allure.tree.TreeCollapseGroupsWithOneChildFinalizer;
 
 /**
  * @author charlie (Dmitry Baev).

File: allure-generator/src/main/java/org/allurefw/report/allure2/Allure2ResultsReader.java
Patch:
@@ -76,6 +76,7 @@ public List<TestCaseResult> readResults(Path source) {
                     dest.setUid(generateUid());
 
                     dest.setId(result.getId());
+                    dest.setFullName(result.getFullName());
                     dest.setName(result.getName());
                     dest.setTime(result.getStart(), result.getStop());
                     dest.setDescription(result.getDescription());

File: allure-generator/src/main/java/org/allurefw/report/plugins/DefaultPluginLoader.java
Patch:
@@ -99,7 +99,7 @@ private URL[] getClassPath(Path pluginDirectory) throws IOException {
 
     private Stream<Path> getChildren(Path directory) throws IOException {
         try (Stream<Path> children = Files.walk(directory, 1, FileVisitOption.FOLLOW_LINKS)) {
-            //we need to load lazy directory stream to memery and close it
+            //we need to load lazy directory stream to memory and close it
             return children.collect(Collectors.toList()).stream();
         }
     }

File: generator/src/test/java/org/allurefw/report/allure2/Allure2ResultsReaderTest.java
Patch:
@@ -59,7 +59,7 @@ public void shouldCreateReportInfo() throws Exception {
         ReportInfo report = main.createReport(getDataFolder("allure2data/"));
 
         Assert.assertThat(report, notNullValue());
-        Assert.assertThat(report.getResults(), hasSize(7));
+        Assert.assertThat(report.getResults(), hasSize(4));
     }
 
     @Test
@@ -110,7 +110,7 @@ public void shouldGenerateReport() throws Exception {
         assertThat(data, contains("test-cases"));
         Path testCases = data.resolve("test-cases");
         assertThat(testCases, isDirectory());
-        assertThat(testCases, hasFilesCount(7, "*.json"));
+        assertThat(testCases, hasFilesCount(4, "*.json"));
 
         assertThat(data, contains("defects.json"));
         assertThat(data, contains("graph.json"));

File: generator/src/test/java/org/allurefw/report/allure2/Allure2ResultsReaderTest.java
Patch:
@@ -59,7 +59,7 @@ public void shouldCreateReportInfo() throws Exception {
         ReportInfo report = main.createReport(getDataFolder("allure2data/"));
 
         Assert.assertThat(report, notNullValue());
-        Assert.assertThat(report.getResults(), hasSize(7));
+        Assert.assertThat(report.getResults(), hasSize(4));
     }
 
     @Test
@@ -110,7 +110,7 @@ public void shouldGenerateReport() throws Exception {
         assertThat(data, contains("test-cases"));
         Path testCases = data.resolve("test-cases");
         assertThat(testCases, isDirectory());
-        assertThat(testCases, hasFilesCount(7, "*.json"));
+        assertThat(testCases, hasFilesCount(4, "*.json"));
 
         assertThat(data, contains("defects.json"));
         assertThat(data, contains("graph.json"));

File: plugin-api/src/main/java/org/allurefw/report/entity/WithLabels.java
Patch:
@@ -54,7 +54,7 @@ default void addLabelIfNotExists(LabelName name, String value) {
     }
 
     default void addLabelIfNotExists(String name, String value) {
-        if (value == null) {
+        if (value == null || name == null) {
             return;
         }
         Optional<String> any = getLabels().stream()

File: plugins/junit-plugin/src/main/java/org/allurefw/report/junit/JunitResultsReader.java
Patch:
@@ -6,6 +6,7 @@
 import org.allurefw.report.entity.Attachment;
 import org.allurefw.report.entity.Failure;
 import org.allurefw.report.entity.LabelName;
+import org.allurefw.report.entity.StageResult;
 import org.allurefw.report.entity.Status;
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.Time;
@@ -62,7 +63,8 @@ public List<TestCaseResult> readResults(Path source) {
                     List<TestCaseResult> results = new ArrayList<>();
                     for (ReportTestCase testCase : testSuite.getTestCases()) {
                         TestCaseResult result = convert(testCase);
-                        log.ifPresent(result.getAttachments()::add);
+                        result.setTestStage(new StageResult());
+                        log.ifPresent(result.getTestStage().getAttachments()::add);
                         result.addLabelIfNotExists(LabelName.SUITE, testSuite.getFullClassName());
                         result.addLabelIfNotExists(LabelName.TEST_CLASS, testSuite.getFullClassName());
                         results.add(result);

File: plugins/junit-plugin/src/test/java/org/allurefw/report/junit/JunitTestResultsTest.java
Patch:
@@ -70,9 +70,9 @@ public void shouldAddLogAsAttachment() throws Exception {
         assertThat(attachment.getName(), is("System out"));
 
         TestCaseResult result = testCases.iterator().next();
-        assertThat(result.getAttachments(), hasSize(1));
+        assertThat(result.getTestStage().getAttachments(), hasSize(1));
 
-        Attachment resultAttachment = result.getAttachments().iterator().next();
+        Attachment resultAttachment = result.getTestStage().getAttachments().iterator().next();
         assertThat(resultAttachment, is(attachment));
     }
 

File: generator/src/main/java/org/allurefw/report/allure1/Allure1ResultsReader.java
Patch:
@@ -75,6 +75,7 @@ private TestCaseResult convert(TestSuiteResult testSuite,
         String testClass = testSuite.getName();
 
         TestCaseResult dest = new TestCaseResult();
+        dest.setFullName(String.format("%s#%s", testSuite.getName(), source.getName()));
         String name = source.getTitle() != null ? source.getTitle() : source.getName();
 
         dest.setId(String.format("%s#%s", testClass, name));

File: generator/src/main/java/org/allurefw/report/allure2/Allure2ResultsReader.java
Patch:
@@ -68,6 +68,7 @@ public List<TestCaseResult> readResults(Path source) {
 
                     dest.setId(result.getId());
                     dest.setName(result.getName());
+                    dest.setFullName(String.format("%s#%s", group.getName(), dest.getName()));
                     dest.setTime(result.getStart(), result.getStop());
                     dest.setDescription(result.getDescription());
                     dest.setDescriptionHtml(result.getDescriptionHtml());

File: generator/src/main/java/org/allurefw/report/history/HistoryProcessor.java
Patch:
@@ -23,6 +23,7 @@ public void process(TestRun testRun, TestCase testCase, TestCaseResult result) {
                 result.getId(),
                 id -> new HistoryData().withId(id).withName(result.getName())
         );
+        data.updateStatistic(result);
         result.addExtraBlock(HISTORY, copy(data));
     }
 }

File: generator/src/test/java/org/allurefw/report/history/HistoryProcessorTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.allurefw.report.history;
 
+import org.allurefw.report.entity.Statistic;
 import org.allurefw.report.entity.TestCase;
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.TestRun;

File: commandline/src/main/java/org/allurefw/report/command/ReportGenerate.java
Patch:
@@ -42,6 +42,6 @@ public void run(Context context) throws Exception {
 
         copyDirectory(context.getWebDirectory(), output);
         LOGGER.info("Report successfully generated to the directory <{}>. " +
-                "Use `allure report open` command to show the report.", reportDirectory);
+                "Use `allure open` command to show the report.", reportDirectory);
     }
 }

File: generator/src/test/java/org/allurefw/report/history/HistoryProcessorTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.TestRun;
 import org.junit.Test;
+import org.mockito.Mockito;
 
 import java.util.Map;
 
@@ -26,7 +27,7 @@ public void shouldAddTestCaseHistoryBlock() throws Exception {
         Map<String, HistoryData> history = mock(Map.class);
 
         String id = "some-id";
-        HistoryData data = new HistoryData();
+        HistoryData data = new HistoryData().withId(id);
 
         doReturn(data).when(history).computeIfAbsent(eq("some-id"), any());
 
@@ -43,6 +44,6 @@ public void shouldAddTestCaseHistoryBlock() throws Exception {
         HistoryProcessor processor = new HistoryProcessor();
         processor.process(testRun, testCase, result);
 
-        verify(result, times(1)).addExtraBlock(eq(HISTORY), eq(data));
+        verify(result, times(1)).addExtraBlock(eq(HISTORY), Mockito.any(HistoryData.class));
     }
 }
\ No newline at end of file

File: generator/src/main/java/org/allurefw/report/ParentModule.java
Patch:
@@ -8,12 +8,13 @@
 import com.google.inject.multibindings.OptionalBinder;
 import org.allurefw.report.allure1.Allure1ResultsReader;
 import org.allurefw.report.allure2.Allure2ResultsReader;
+import org.allurefw.report.core.DefaultAttachmentsStorage;
 import org.allurefw.report.defects.DefectsPlugin;
 import org.allurefw.report.executor.ExecutorPlugin;
 import org.allurefw.report.graph.GraphPlugin;
 import org.allurefw.report.history.HistoryPlugin;
 import org.allurefw.report.jackson.JacksonMapperModule;
-import org.allurefw.report.testrun.DefaultTestRunReader;
+import org.allurefw.report.core.DefaultTestRunReader;
 import org.allurefw.report.timeline.TimelinePlugin;
 import org.allurefw.report.total.TotalPlugin;
 import org.allurefw.report.writer.WriterModule;

File: generator/src/main/java/org/allurefw/report/core/DefaultAttachmentsStorage.java
Patch:
@@ -1,5 +1,7 @@
-package org.allurefw.report;
+package org.allurefw.report.core;
 
+import org.allurefw.report.AttachmentsStorage;
+import org.allurefw.report.ReportApiUtils;
 import org.allurefw.report.entity.Attachment;
 
 import java.nio.file.Path;

File: generator/src/main/java/org/allurefw/report/core/DefaultTestRunReader.java
Patch:
@@ -1,4 +1,4 @@
-package org.allurefw.report.testrun;
+package org.allurefw.report.core;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.allurefw.report.TestRunReader;
@@ -40,5 +40,4 @@ public TestRun readTestRun(Path source) {
         }
         return new TestRun().withName("Allure Report");
     }
-
 }

File: generator/src/test/java/org/allurefw/report/allure1/Allure1TestResultsTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.allurefw.report.allure1;
 
 import org.allurefw.report.AttachmentsStorage;
-import org.allurefw.report.DefaultAttachmentsStorage;
+import org.allurefw.report.core.DefaultAttachmentsStorage;
 import org.allurefw.report.entity.Label;
 import org.allurefw.report.entity.LabelName;
 import org.allurefw.report.entity.TestCaseResult;

File: generator/src/main/java/org/allurefw/report/ReportFactory.java
Patch:
@@ -17,14 +17,14 @@
  */
 public class ReportFactory {
 
-    private final Set<TestCaseResultsReader> testCaseReaders;
+    private final Set<ResultsReader> testCaseReaders;
 
     private final Set<Plugin> plugins;
 
     private final HashMap<String, TestCase> testCases;
 
     @Inject
-    public ReportFactory(Set<Plugin> plugins, Set<TestCaseResultsReader> testCaseReaders) {
+    public ReportFactory(Set<Plugin> plugins, Set<ResultsReader> testCaseReaders) {
         this.plugins = plugins;
         this.testCaseReaders = testCaseReaders;
         this.testCases = new HashMap<>();

File: generator/src/main/java/org/allurefw/report/allure1/Allure1ResultsReader.java
Patch:
@@ -5,7 +5,7 @@
 import com.google.inject.Inject;
 import org.allurefw.report.AttachmentsStorage;
 import org.allurefw.report.ReportApiUtils;
-import org.allurefw.report.TestCaseResultsReader;
+import org.allurefw.report.ResultsReader;
 import org.allurefw.report.entity.Attachment;
 import org.allurefw.report.entity.LabelName;
 import org.allurefw.report.entity.Parameter;
@@ -41,7 +41,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class Allure1ResultsReader implements TestCaseResultsReader {
+public class Allure1ResultsReader implements ResultsReader {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Allure1ResultsReader.class);
 

File: generator/src/main/java/org/allurefw/report/allure2/Allure2ResultsReader.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.qameta.allure.model.TestCaseResult;
-import org.allurefw.report.TestCaseResultsReader;
+import org.allurefw.report.ResultsReader;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -20,7 +20,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class Allure2ResultsReader implements TestCaseResultsReader {
+public class Allure2ResultsReader implements ResultsReader {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Allure2ResultsReader.class);
 

File: generator/src/main/java/org/allurefw/report/defects/DefectsPlugin.java
Patch:
@@ -10,7 +10,7 @@ public class DefectsPlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(DefectsAggregator.class)
+        aggregator(DefectsResultAggregator.class)
                 .toReportData("defects.json")
                 .toWidget("productDefects", ProductDefectsWidgetFinalizer.class)
                 .toWidget("testDefects", TestDefectsWidgetFinalizer.class);

File: generator/src/main/java/org/allurefw/report/defects/DefectsResultAggregator.java
Patch:
@@ -1,6 +1,6 @@
 package org.allurefw.report.defects;
 
-import org.allurefw.report.Aggregator;
+import org.allurefw.report.ResultAggregator;
 import org.allurefw.report.entity.Failure;
 import org.allurefw.report.entity.Status;
 import org.allurefw.report.entity.TestCase;
@@ -19,10 +19,10 @@
  * @author Dmitry Baev baev@qameta.io
  *         Date: 16.04.16
  */
-public class DefectsAggregator implements Aggregator<DefectsData> {
+public class DefectsResultAggregator implements ResultAggregator<DefectsData> {
 
     @Override
-    public Supplier<DefectsData> supplier(TestRun testRun) {
+    public Supplier<DefectsData> supplier(TestRun testRun, TestCase testCase) {
         return DefectsData::new;
     }
 

File: generator/src/main/java/org/allurefw/report/graph/GraphPlugin.java
Patch:
@@ -10,7 +10,7 @@ public class GraphPlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(GraphAggregator.class)
+        aggregator(GraphResultAggregator.class)
                 .toReportData("graph.json");
     }
 }

File: generator/src/main/java/org/allurefw/report/graph/GraphResultAggregator.java
Patch:
@@ -1,6 +1,6 @@
 package org.allurefw.report.graph;
 
-import org.allurefw.report.Aggregator;
+import org.allurefw.report.ResultAggregator;
 import org.allurefw.report.entity.TestCase;
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.TestRun;
@@ -12,10 +12,10 @@
  * @author Dmitry Baev baev@qameta.io
  *         Date: 16.04.16
  */
-public class GraphAggregator implements Aggregator<GraphData> {
+public class GraphResultAggregator implements ResultAggregator<GraphData> {
 
     @Override
-    public Supplier<GraphData> supplier(TestRun testRun) {
+    public Supplier<GraphData> supplier(TestRun testRun, TestCase testCase) {
         return GraphData::new;
     }
 

File: generator/src/main/java/org/allurefw/report/history/HistoryPlugin.java
Patch:
@@ -16,7 +16,7 @@ public class HistoryPlugin extends AbstractPlugin {
     @Override
     protected void configure() {
         processor(HistoryProcessor.class);
-        aggregator(HistoryAggregator.class).toReportData(HISTORY_JSON);
+        aggregator(HistoryResultAggregator.class).toReportData(HISTORY_JSON);
 
         Multibinder.newSetBinder(binder(), TestRunDetailsReader.class)
                 .addBinding().to(HistoryReader.class);

File: generator/src/main/java/org/allurefw/report/history/HistoryResultAggregator.java
Patch:
@@ -1,6 +1,6 @@
 package org.allurefw.report.history;
 
-import org.allurefw.report.Aggregator;
+import org.allurefw.report.ResultAggregator;
 import org.allurefw.report.entity.TestCase;
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.TestRun;
@@ -18,10 +18,10 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class HistoryAggregator implements Aggregator<Map<String, List<HistoryItem>>> {
+public class HistoryResultAggregator implements ResultAggregator<Map<String, List<HistoryItem>>> {
 
     @Override
-    public Supplier<Map<String, List<HistoryItem>>> supplier(TestRun testRun) {
+    public Supplier<Map<String, List<HistoryItem>>> supplier(TestRun testRun, TestCase testCase) {
         return () -> testRun.getExtraBlock(HISTORY, new HashMap<>());
     }
 

File: generator/src/main/java/org/allurefw/report/timeline/TimelinePlugin.java
Patch:
@@ -10,7 +10,7 @@ public class TimelinePlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(TimelineAggregator.class)
+        aggregator(TimelineResultAggregator.class)
                 .toReportData("timeline.json");
     }
 

File: generator/src/main/java/org/allurefw/report/timeline/TimelineResultAggregator.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.allurefw.report.entity.LabelName;
 import org.allurefw.report.entity.TestCaseResult;
-import org.allurefw.report.tree.TreeAggregator;
+import org.allurefw.report.tree.TreeResultAggregator;
 import org.allurefw.report.tree.TreeGroup;
 
 import java.util.Arrays;
@@ -12,7 +12,7 @@
  * @author Dmitry Baev baev@qameta.io
  *         Date: 17.04.16
  */
-public class TimelineAggregator extends TreeAggregator {
+public class TimelineResultAggregator extends TreeResultAggregator {
 
     @Override
     protected List<TreeGroup> getGroups(TestCaseResult result) {

File: generator/src/main/java/org/allurefw/report/total/TotalPlugin.java
Patch:
@@ -9,6 +9,6 @@ public class TotalPlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(TotalAggregator.class).toWidget("total");
+        aggregator(TotalResultAggregator.class).toWidget("total");
     }
 }

File: generator/src/main/java/org/allurefw/report/total/TotalResultAggregator.java
Patch:
@@ -1,6 +1,6 @@
 package org.allurefw.report.total;
 
-import org.allurefw.report.Aggregator;
+import org.allurefw.report.ResultAggregator;
 import org.allurefw.report.entity.TestCase;
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.TestRun;
@@ -11,10 +11,10 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class TotalAggregator implements Aggregator<TotalData> {
+public class TotalResultAggregator implements ResultAggregator<TotalData> {
 
     @Override
-    public Supplier<TotalData> supplier(TestRun testRun) {
+    public Supplier<TotalData> supplier(TestRun testRun, TestCase testCase) {
         return TotalData::new;
     }
 

File: generator/src/main/java/org/allurefw/report/xunit/XunitPlugin.java
Patch:
@@ -11,7 +11,7 @@ public class XunitPlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(XunitAggregator.class)
+        aggregator(XunitResultAggregator.class)
                 .toReportData("xunit.json")
                 .toWidget("xunit", TreeWidgetFinalizer.class);
     }

File: generator/src/main/java/org/allurefw/report/xunit/XunitResultAggregator.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.allurefw.report.entity.LabelName;
 import org.allurefw.report.entity.TestCaseResult;
-import org.allurefw.report.tree.TreeAggregator;
+import org.allurefw.report.tree.TreeResultAggregator;
 import org.allurefw.report.tree.TreeGroup;
 
 import java.util.Collections;
@@ -12,7 +12,7 @@
  * @author Dmitry Baev baev@qameta.io
  *         Date: 05.03.16
  */
-public class XunitAggregator extends TreeAggregator {
+public class XunitResultAggregator extends TreeResultAggregator {
 
     @Override
     protected List<TreeGroup> getGroups(TestCaseResult result) {

File: generator/src/test/java/org/allurefw/report/MainTest.java
Patch:
@@ -45,7 +45,7 @@ public void shouldCreateReportInfo() throws Exception {
     }
 
     @Test
-    public void shouldGenerateTheReport() throws Exception {
+    public void shouldGenerateReport() throws Exception {
         Path plugins = folder.newFolder().toPath();
         Main main = new Main(plugins, null);
         Path output = folder.newFolder().toPath();

File: plugin-api/src/main/java/org/allurefw/report/DataFileNames.java
Patch:
@@ -14,5 +14,5 @@
 @Target({ElementType.FIELD, ElementType.PARAMETER})
 @Retention(RetentionPolicy.RUNTIME)
 @BindingAnnotation
-public @interface WidgetsNamesMap {
+public @interface DataFileNames {
 }

File: plugin-api/src/main/java/org/allurefw/report/ResultAggregator.java
Patch:
@@ -11,9 +11,9 @@
  * @author Dmitry Baev baev@qameta.io
  *         Date: 04.03.16
  */
-public interface Aggregator<T> {
+public interface ResultAggregator<T> {
 
-    Supplier<T> supplier(TestRun testRun);
+    Supplier<T> supplier(TestRun testRun, TestCase testCase);
 
     Consumer<T> aggregate(TestRun testRun, TestCase testCase, TestCaseResult result);
 

File: plugin-api/src/main/java/org/allurefw/report/ResultsReader.java
Patch:
@@ -9,7 +9,7 @@
  * @author charlie (Dmitry Baev).
  */
 @FunctionalInterface
-public interface TestCaseResultsReader {
+public interface ResultsReader {
 
     List<TestCaseResult> readResults(Path source);
 }

File: plugin-api/src/main/java/org/allurefw/report/WidgetNames.java
Patch:
@@ -14,5 +14,5 @@
 @Target({ElementType.FIELD, ElementType.PARAMETER})
 @Retention(RetentionPolicy.RUNTIME)
 @BindingAnnotation
-public @interface DataNamesMap {
+public @interface WidgetNames {
 }

File: plugin-api/src/main/java/org/allurefw/report/tree/TreeResultAggregator.java
Patch:
@@ -1,6 +1,6 @@
 package org.allurefw.report.tree;
 
-import org.allurefw.report.Aggregator;
+import org.allurefw.report.ResultAggregator;
 import org.allurefw.report.entity.TestCase;
 import org.allurefw.report.entity.TestCaseResult;
 import org.allurefw.report.entity.TestRun;
@@ -17,10 +17,10 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public abstract class TreeAggregator implements Aggregator<TreeData> {
+public abstract class TreeResultAggregator implements ResultAggregator<TreeData> {
 
     @Override
-    public Supplier<TreeData> supplier(TestRun testRun) {
+    public Supplier<TreeData> supplier(TestRun testRun, TestCase testCase) {
         return TreeData::new;
     }
 

File: plugins/behaviors-plugin/src/main/java/org/allurefw/report/behaviors/BehaviorsPlugin.java
Patch:
@@ -10,7 +10,7 @@ public class BehaviorsPlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(BehaviorsAggregator.class)
+        aggregator(BehaviorsResultAggregator.class)
                 .toReportData("behaviors.json");
     }
 }

File: plugins/behaviors-plugin/src/main/java/org/allurefw/report/behaviors/BehaviorsResultAggregator.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.allurefw.report.entity.LabelName;
 import org.allurefw.report.entity.TestCaseResult;
-import org.allurefw.report.tree.TreeAggregator;
+import org.allurefw.report.tree.TreeResultAggregator;
 import org.allurefw.report.tree.TreeGroup;
 
 import java.util.Arrays;
@@ -12,7 +12,7 @@
  * @author Dmitry Baev baev@qameta.io
  *         Date: 16.04.16
  */
-public class BehaviorsAggregator extends TreeAggregator {
+public class BehaviorsResultAggregator extends TreeResultAggregator {
 
     @Override
     protected List<TreeGroup> getGroups(TestCaseResult result) {

File: plugins/packages-plugin/src/main/java/org/allurefw/report/packages/PackagesPlugin.java
Patch:
@@ -10,7 +10,7 @@ public class PackagesPlugin extends AbstractPlugin {
 
     @Override
     protected void configure() {
-        aggregator(PackagesAggregator.class)
+        aggregator(PackagesResultAggregator.class)
                 .toReportData("packages.json", TreeCollapseGroupsWithOneChildFinalizer.class);
     }
 }

File: plugins/packages-plugin/src/main/java/org/allurefw/report/packages/PackagesResultAggregator.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.allurefw.report.entity.LabelName;
 import org.allurefw.report.entity.TestCaseResult;
-import org.allurefw.report.tree.TreeAggregator;
+import org.allurefw.report.tree.TreeResultAggregator;
 import org.allurefw.report.tree.TreeGroup;
 
 import java.util.Arrays;
@@ -13,7 +13,7 @@
 /**
  * @author charlie (Dmitry Baev).
  */
-public class PackagesAggregator extends TreeAggregator {
+public class PackagesResultAggregator extends TreeResultAggregator {
 
     @Override
     protected List<TreeGroup> getGroups(TestCaseResult result) {

File: generator/src/main/java/org/allurefw/report/testrun/DefaultTestRunReader.java
Patch:
@@ -38,7 +38,7 @@ public TestRun readTestRun(Path source) {
                 LOGGER.error("Could not read test run from {}", file, e);
             }
         }
-        return new TestRun().withName(source.getFileName().toString());
+        return new TestRun().withName("Allure Report");
     }
 
 }

File: generator/src/main/java/org/allurefw/report/ProcessStage.java
Patch:
@@ -78,7 +78,7 @@ public void run(Path output, Path... sources) {
                 writer.write(testCasesDir, result.getSource(), result);
 
                 aggregators.forEach((uid, aggregator) -> {
-                    Object value = data.computeIfAbsent(uid, key -> aggregator.supplier().get());
+                    Object value = data.computeIfAbsent(uid, key -> aggregator.supplier(testRun).get());
                     //noinspection unchecked
                     aggregator.aggregate(testRun, testCase, result).accept(value);
                 });

File: generator/src/main/java/org/allurefw/report/defects/DefectsAggregator.java
Patch:
@@ -22,7 +22,7 @@
 public class DefectsAggregator implements Aggregator<DefectsData> {
 
     @Override
-    public Supplier<DefectsData> supplier() {
+    public Supplier<DefectsData> supplier(TestRun testRun) {
         return DefectsData::new;
     }
 

File: generator/src/main/java/org/allurefw/report/graph/GraphAggregator.java
Patch:
@@ -15,7 +15,7 @@
 public class GraphAggregator implements Aggregator<GraphData> {
 
     @Override
-    public Supplier<GraphData> supplier() {
+    public Supplier<GraphData> supplier(TestRun testRun) {
         return GraphData::new;
     }
 

File: generator/src/main/java/org/allurefw/report/total/TotalAggregator.java
Patch:
@@ -14,7 +14,7 @@
 public class TotalAggregator implements Aggregator<TotalData> {
 
     @Override
-    public Supplier<TotalData> supplier() {
+    public Supplier<TotalData> supplier(TestRun testRun) {
         return TotalData::new;
     }
 

File: plugin-api/src/main/java/org/allurefw/report/Aggregator.java
Patch:
@@ -13,7 +13,7 @@
  */
 public interface Aggregator<T> {
 
-    Supplier<T> supplier();
+    Supplier<T> supplier(TestRun testRun);
 
     Consumer<T> aggregate(TestRun testRun, TestCase testCase, TestCaseResult result);
 

File: plugin-api/src/main/java/org/allurefw/report/tree/TreeAggregator.java
Patch:
@@ -20,7 +20,7 @@
 public abstract class TreeAggregator implements Aggregator<TreeData> {
 
     @Override
-    public Supplier<TreeData> supplier() {
+    public Supplier<TreeData> supplier(TestRun testRun) {
         return TreeData::new;
     }
 

File: generator/src/main/java/org/allurefw/report/ParentModule.java
Patch:
@@ -14,6 +14,7 @@
 import org.allurefw.report.timeline.TimelinePlugin;
 import org.allurefw.report.total.TotalPlugin;
 import org.allurefw.report.writer.WriterModule;
+import org.allurefw.report.xunit.XunitPlugin;
 
 import java.util.List;
 
@@ -60,6 +61,7 @@ protected void configure() {
         install(new GraphPlugin());
         install(new TimelinePlugin());
         install(new DefectsPlugin());
+        install(new XunitPlugin());
 
 //        Plugins
         Multibinder.newSetBinder(binder(), Plugin.class);

File: commandline/src/main/java/org/allurefw/report/CommandLine.java
Patch:
@@ -60,7 +60,7 @@ public static void main(String[] args) throws InterruptedException {
             String toolVersion = CommandLine.class.getPackage().getImplementationVersion();
 
             Context context = new Context(workDirectory.getPath(), pluginsDirectory,
-                    webDirectory, toolVersion);
+                    webDirectory, toolVersion, null);
 
             new CommandLine().parse(args).run(context);
         } catch (AllureCommandException e) {

File: commandline/src/main/java/org/allurefw/report/CommandProperties.java
Patch:
@@ -4,6 +4,7 @@
 import ru.qatools.properties.Resource;
 
 import java.nio.file.Path;
+import java.util.Set;
 
 /**
  * @author Artem Eroshenko <eroshenkoam@qameta.io>
@@ -14,4 +15,6 @@ public interface CommandProperties {
     @Property("allure.home")
     Path getAllureHome();
 
+    @Property("allure.enabledPlugins")
+    Set<String> getEnabledPlugins();
 }

File: commandline/src/main/java/org/allurefw/report/command/ListPlugins.java
Patch:
@@ -19,7 +19,7 @@ public class ListPlugins implements AllureCommand {
     @Override
     public void run(Context context) throws Exception {
         verboseOptions.configureLogLevel();
-        createMain(context.getPluginsDirectory(), context.getWorkDirectory())
+        createMain(context)
                 .loadPlugins()
                 .forEach(this::printPluginInfo);
     }

File: commandline/src/main/java/org/allurefw/report/command/ReportServe.java
Patch:
@@ -9,6 +9,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 
+import static org.allurefw.report.utils.CommandUtils.copyDirectory;
 import static org.allurefw.report.utils.CommandUtils.createMain;
 import static org.allurefw.report.utils.CommandUtils.openBrowser;
 import static org.allurefw.report.utils.CommandUtils.setUpServer;
@@ -36,8 +37,9 @@ public void run(Context context) throws Exception {
 
         Path serve = Files.createTempDirectory(context.getWorkDirectory(), "serve");
         LOGGER.info("Generate report to temp directory...");
-        createMain(context.getPluginsDirectory(), context.getWorkDirectory())
+        createMain(context)
                 .generate(serve, resultsOptions.getResultsDirectories());
+        copyDirectory(context.getWebDirectory(), serve);
 
         LOGGER.info("Starting web server...");
         Server server = setUpServer(portOptions.getPort(), serve);

File: generator/src/main/java/org/allurefw/report/plugins/DefaultPluginsLoader.java
Patch:
@@ -119,9 +119,9 @@ private Optional<Module> loadPluginModule(PluginDescriptor descriptor, ZipFile z
             Files.copy(is, pluginJar, StandardCopyOption.REPLACE_EXISTING);
             URL[] classPath = new URL[]{pluginJar.toUri().toURL()};
             ClassLoader parent = getClass().getClassLoader();
-            try (URLClassLoader classLoader = new URLClassLoader(classPath, parent)) {
-                return Optional.of((Module) classLoader.loadClass(descriptor.getModuleClass()).newInstance());
-            }
+            //We should not close this classloader to load other plugin classes.
+            URLClassLoader classLoader = new URLClassLoader(classPath, parent);
+            return Optional.of((Module) classLoader.loadClass(descriptor.getModuleClass()).newInstance());
         } catch (Exception e) {
             LOGGER.error("Could not load module {} for plugin {} {}",
                     descriptor.getModuleClass(), descriptor.getName(), e);

