File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -146,7 +146,7 @@ private static void initFields() {
                     ART_ACCESS_FLAG_OFFSET.setOffset(12);
                     break;
                 case Build.VERSION_CODES.LOLLIPOP_MR1:
-                    ART_QUICK_CODE_OFFSET.setOffset(52);
+                    ART_QUICK_CODE_OFFSET.setOffset(56);
                     ART_JNI_ENTRY_OFFSET.setOffset(44);
                     ART_ACCESS_FLAG_OFFSET.setOffset(20);
                     break;

File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -146,7 +146,7 @@ private static void initFields() {
                     ART_ACCESS_FLAG_OFFSET.setOffset(12);
                     break;
                 case Build.VERSION_CODES.LOLLIPOP_MR1:
-                    ART_QUICK_CODE_OFFSET.setOffset(52);
+                    ART_QUICK_CODE_OFFSET.setOffset(56);
                     ART_JNI_ENTRY_OFFSET.setOffset(44);
                     ART_ACCESS_FLAG_OFFSET.setOffset(20);
                     break;

File: library/src/main/java/me/weishu/epic/art/entry/Entry.java
Patch:
@@ -380,7 +380,7 @@ private static Object wrapArgument(Class<?> type, int self, byte[] value) {
             } else if (type == double.class) {
                 return byteBuffer.getDouble();
             } else if (type == boolean.class) {
-                return byteBuffer.getInt() == 0;
+                return byteBuffer.getInt() != 0;
             } else {
                 throw new RuntimeException("unknown type:" + type);
             }

File: library/src/main/java/com/taobao/android/dexposed/DexposedBridge.java
Patch:
@@ -118,6 +118,8 @@ public static Unhook hookMethod(Member hookMethod, XC_MethodHook callback) {
 			}
 		}
 
+		Logger.w(TAG, "hook: " + hookMethod + ", newMethod ? " + newMethod);
+
 		callbacks.add(callback);
 		if (newMethod) {
 			if (Runtime.isArt()) {
@@ -176,7 +178,6 @@ public static Unhook findAndHookMethod(Class<?> clazz, String methodName, Object
 		
 		XC_MethodHook callback = (XC_MethodHook) parameterTypesAndCallback[parameterTypesAndCallback.length-1];
 		Method m = XposedHelpers.findMethodExact(clazz, methodName, parameterTypesAndCallback);
-		Logger.i(TAG, "findAndHookMethod: " + m.toGenericString());
 		Unhook unhook = hookMethod(m, callback);
 		if (!(callback instanceof XC_MethodKeepHook
 				|| callback instanceof XC_MethodKeepReplacement)) {

File: library/src/main/java/com/taobao/android/dexposed/DexposedBridge.java
Patch:
@@ -257,7 +257,7 @@ public static Object handleHookedArtMethod(Object artMethodObject, Object thisOb
 				Object result = method.invoke(thisObject, args);
 				param.setResult(result);
 			} catch (Exception e) {
-				log(e);
+				// log(e); origin throw exception is normal.
 				param.setThrowable(e);
 			}
 		}

File: library/src/main/java/com/taobao/android/dexposed/DexposedBridge.java
Patch:
@@ -289,12 +289,12 @@ public static Object handleHookedArtMethod(Object artMethodObject, Object thisOb
 				final Throwable cause = throwable.getCause();
 
 				// We can not change the exception flow of origin call, rethrow
-				Logger.e(TAG, "origin call throw exception (not a real crash, just record for debug):", cause);
+				// Logger.e(TAG, "origin call throw exception (not a real crash, just record for debug):", cause);
 				DexposedBridge.<RuntimeException>throwNoCheck(param.getThrowable().getCause(), null);
 				return null; //never reach.
 			} else {
 				// the exception cause by epic self, just log.
-				Logger.w(TAG, "epic cause exception in call bridge!!");
+				Logger.e(TAG, "epic cause exception in call bridge!!", throwable);
 			}
 			return null; // never reached.
 		} else {

File: library/src/main/java/com/taobao/android/dexposed/utility/Logger.java
Patch:
@@ -24,9 +24,7 @@ public static void d(String tagSuffix, String msg) {
     }
 
     public static void w(String tag, String msg) {
-        if (DEBUG) {
-            Log.w(preFix + tag, msg);
-        }
+        Log.w(preFix + tag, msg);
     }
 
     public static void e(String tag, String msg) {

File: library/src/main/java/me/weishu/epic/art/Epic.java
Patch:
@@ -112,7 +112,7 @@ private static boolean hookMethod(ArtMethod artOrigin) {
 
         long originEntry = artOrigin.getEntryPointFromQuickCompiledCode();
         if (originEntry == ArtMethod.getQuickToInterpreterBridge()) {
-            Logger.w(TAG, "this method is not compiled, compile it now. current entry: 0x" + Long.toHexString(originEntry));
+            Logger.i(TAG, "this method is not compiled, compile it now. current entry: 0x" + Long.toHexString(originEntry));
             boolean ret = artOrigin.compile();
             if (ret) {
                 originEntry = artOrigin.getEntryPointFromQuickCompiledCode();

File: library/src/main/java/me/weishu/epic/art/entry/Entry.java
Patch:
@@ -121,7 +121,7 @@ private static double doubleBridge(int r1, int self, int struct) {
     //endregion
 
     private static Object referenceBridge(int r1, int self, int struct) {
-        Logger.w(TAG, "enter bridge function.");
+        Logger.i(TAG, "enter bridge function.");
 
         // struct {
         //     void* sp;
@@ -161,7 +161,7 @@ private static Object referenceBridge(int r1, int self, int struct) {
         Class<?> returnType = originMethodInfo.returnType;
         Object artMethod = originMethodInfo.method;
 
-        Logger.w(TAG, "leave bridge function");
+        Logger.i(TAG, "leave bridge function");
 
         if (returnType == void.class) {
             onHookVoid(artMethod, receiver, arguments);

File: library/src/main/java/me/weishu/epic/art/entry/Entry64.java
Patch:
@@ -116,7 +116,7 @@ private static double doubleBridge(long r1, long self, long struct, long x4, lon
     //endregion
 
     private static Object referenceBridge(long x1, long self, long struct, long x4, long x5, long x6, long x7) {
-        Logger.w(TAG, "enter bridge function.");
+        Logger.i(TAG, "enter bridge function.");
 
         // struct {
         //     void* sp;

File: library/src/main/java/me/weishu/epic/art/entry/Entry64_2.java
Patch:
@@ -335,7 +335,7 @@ private static Object referenceBridge(long r1, long struct, long x3, long x4, lo
     //endregion
 
     private static Object referenceBridge(long x1, long struct, long x3, long x4, long x5, long x6, long x7) {
-        Logger.w(TAG, "enter bridge function.");
+        Logger.i(TAG, "enter bridge function.");
 
         // struct {
         //     void* sp;

File: library/src/main/java/me/weishu/epic/art/Epic.java
Patch:
@@ -28,8 +28,6 @@
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 

File: library/src/main/java/me/weishu/epic/art/EpicNative.java
Patch:
@@ -80,6 +80,9 @@ public final class EpicNative {
      */
     public static native void startJit(long cookie);
 
+    // FIXME: 17/12/29 reimplement it with pure native code.
+    static native boolean activateNative(long jumpToAddress, long pc, long sizeOfTargetJump, long sizeOfBridgeJump, byte[] code);
+
     /**
      * Disable the moving gc of runtime.
      * Warning: Just for experiment Do not call this now!!!

File: library/src/main/java/me/weishu/epic/art/entry/Entry.java
Patch:
@@ -147,7 +147,7 @@ private static Object referenceBridge(int r1, int self, int struct) {
         Logger.d(TAG, "r3:" + Debug.hexdump(r3, 0));
 
         final int sourceMethod = ByteBuffer.wrap(EpicNative.get(struct + 12, 4)).order(ByteOrder.LITTLE_ENDIAN).getInt();
-        Logger.i(TAG, "sourceMethod:" + Long.toHexString(sourceMethod));
+        Logger.i(TAG, "sourceMethod:" + Integer.toHexString(sourceMethod));
 
         Epic.MethodInfo originMethodInfo = Epic.getMethodInfo(sourceMethod);
         Logger.i(TAG, "originMethodInfo :" + originMethodInfo);

File: app/src/main/java/me/weishu/epic/samples/tests/custom/Case11_SuspendAll.java
Patch:
@@ -28,13 +28,15 @@ public void run() {
                     while (true) {
                         Log.i(TAG, "I am:" + Thread.currentThread().getName() + ", count:" + (j++));
                         SystemClock.sleep(1000);
+                        if (j > 3) {
+                            break;
+                        }
                     }
                 }
             });
         }
     }
 
-    boolean flag = true;
     @Override
     public boolean validate(Object... args) {
         if (Build.VERSION.SDK_INT < 24) {

File: app/src/main/java/me/weishu/epic/samples/tests/TestManager.java
Patch:
@@ -39,6 +39,7 @@
 import me.weishu.epic.samples.tests.custom.Case11_SuspendAll;
 import me.weishu.epic.samples.tests.custom.Case12_MultiCallback;
 import me.weishu.epic.samples.tests.custom.Case13_FastNative;
+import me.weishu.epic.samples.tests.custom.Case14_GC;
 import me.weishu.epic.samples.tests.custom.Case2;
 import me.weishu.epic.samples.tests.custom.Case3;
 import me.weishu.epic.samples.tests.custom.Case4;
@@ -165,6 +166,8 @@ private void initAllSuites() {
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             CaseManager.getInstance().getCase(Case11_SuspendAll.class);
+            CaseManager.getInstance().getCase(Case14_GC.class);
+            // CaseManager.getInstance().getCase(Case15_StopJit.class);
         }
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {

File: library/src/main/java/me/weishu/epic/art/Epic.java
Patch:
@@ -64,6 +64,7 @@ public final class Epic {
                     case Build.VERSION_CODES.N:
                     case Build.VERSION_CODES.N_MR1:
                     case Build.VERSION_CODES.O:
+                    case Build.VERSION_CODES.O_MR1:
                         ShellCode = new Arm64_2();
                         break;
                 }

File: library/src/main/java/me/weishu/epic/art/arch/Arm64_2.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.nio.ByteOrder;
 
-public class Arm64ForM extends ShellCode {
+public class Arm64_2 extends ShellCode {
 
     @Override
     public int sizeOfDirectJump() {

File: library/src/main/java/me/weishu/epic/art/entry/Entry64_2.java
Patch:
@@ -32,7 +32,7 @@
 import me.weishu.epic.art.EpicNative;
 
 @SuppressWarnings({"unused", "ConstantConditions"})
-public class Entry64ForM {
+public class Entry64_2 {
 
     private final static String TAG = "Entry64";
 
@@ -513,7 +513,7 @@ public static Method getBridgeMethod(Epic.MethodInfo methodInfo) {
 
             final String bridgeMethod = bridgeMethodMap.get(returnType.isPrimitive() ? returnType : Object.class);
             Logger.d(TAG, "bridge method:" + bridgeMethod + ", map:" + bridgeMethodMap);
-            Method method = Entry64ForM.class.getDeclaredMethod(bridgeMethod, bridgeParamTypes);
+            Method method = Entry64_2.class.getDeclaredMethod(bridgeMethod, bridgeParamTypes);
             method.setAccessible(true);
             return method;
         } catch (Throwable e) {

File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -112,14 +112,15 @@ private static void initFields() {
         ART_ACCESS_FLAG_OFFSET.setLength(Offset.BitWidth.DWORD);
 
         final int apiLevel = Build.VERSION.SDK_INT;
-        if (apiLevel > 26) {
+        if (apiLevel > 27) {
             throw new RuntimeException("API LEVEL: " + apiLevel + " is not supported now : (");
         }
 
         if (Runtime.is64Bit()) {
             ART_QUICK_CODE_OFFSET.setLength(Offset.BitWidth.QWORD);
             ART_JNI_ENTRY_OFFSET.setLength(BitWidth.QWORD);
             switch (apiLevel) {
+                case Build.VERSION_CODES.O_MR1:
                 case Build.VERSION_CODES.O:
                     ART_QUICK_CODE_OFFSET.setOffset(40);
                     ART_JNI_ENTRY_OFFSET.setOffset(32);
@@ -159,6 +160,7 @@ private static void initFields() {
             ART_QUICK_CODE_OFFSET.setLength(Offset.BitWidth.DWORD);
             ART_JNI_ENTRY_OFFSET.setLength(BitWidth.DWORD);
             switch (apiLevel) {
+                case Build.VERSION_CODES.O_MR1:
                 case Build.VERSION_CODES.O:
                     ART_QUICK_CODE_OFFSET.setOffset(28);
                     ART_JNI_ENTRY_OFFSET.setOffset(24);

File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -112,14 +112,15 @@ private static void initFields() {
         ART_ACCESS_FLAG_OFFSET.setLength(Offset.BitWidth.DWORD);
 
         final int apiLevel = Build.VERSION.SDK_INT;
-        if (apiLevel > 26) {
+        if (apiLevel > 27) {
             throw new RuntimeException("API LEVEL: " + apiLevel + " is not supported now : (");
         }
 
         if (Runtime.is64Bit()) {
             ART_QUICK_CODE_OFFSET.setLength(Offset.BitWidth.QWORD);
             ART_JNI_ENTRY_OFFSET.setLength(BitWidth.QWORD);
             switch (apiLevel) {
+                case Build.VERSION_CODES.O_MR1:
                 case Build.VERSION_CODES.O:
                     ART_QUICK_CODE_OFFSET.setOffset(40);
                     ART_JNI_ENTRY_OFFSET.setOffset(32);
@@ -159,6 +160,7 @@ private static void initFields() {
             ART_QUICK_CODE_OFFSET.setLength(Offset.BitWidth.DWORD);
             ART_JNI_ENTRY_OFFSET.setLength(BitWidth.DWORD);
             switch (apiLevel) {
+                case Build.VERSION_CODES.O_MR1:
                 case Build.VERSION_CODES.O:
                     ART_QUICK_CODE_OFFSET.setOffset(28);
                     ART_JNI_ENTRY_OFFSET.setOffset(24);

File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -95,8 +95,8 @@ public static void write(long base, Offset offset, long value) {
         if (offset.length == BitWidth.DWORD) {
             int intValue = (int) value;
             long highest4Bytes = value >>> 32;
-            if (intValue < 0 && highest4Bytes == 0xFFFFFFFF ||
-                    intValue >= 0 && highest4Bytes == 0x0) {
+            if (intValue < 0 && highest4Bytes == 0xFFFFFFFFL ||
+                    intValue >= 0 && highest4Bytes == 0x0L) {
                 bytes = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(intValue).array();
             } else {
                 throw new IllegalStateException("overflow may occur");

File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -94,7 +94,7 @@ public static void write(long base, Offset offset, long value) {
         byte[] bytes;
         if (offset.length == BitWidth.DWORD) {
             int intValue = (int) value;
-            long highest4Bytes = value >> 32;
+            long highest4Bytes = value >>> 32;
             if (intValue < 0 && highest4Bytes == 0xFFFFFFFF ||
                     intValue >= 0 && highest4Bytes == 0x0) {
                 bytes = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(intValue).array();

File: library/src/main/java/me/weishu/epic/art/Epic.java
Patch:
@@ -60,7 +60,7 @@ public final class Epic {
         if (isArm) {
             if (Runtime.is64Bit()) {
                 switch (apiLevel) {
-                    case Build.VERSION_CODES.LOLLIPOP_MR1:
+                    case Build.VERSION_CODES.M:
                         ShellCode = new Arm64ForM();
                         break;
                     case Build.VERSION_CODES.N:

File: library/src/main/java/me/weishu/epic/art/method/Offset.java
Patch:
@@ -93,7 +93,7 @@ public static void write(long base, Offset offset, long value) {
         long address = base + offset.offset;
         byte[] bytes;
         if (offset.length == BitWidth.DWORD) {
-            if (value > Integer.MAX_VALUE) {
+            if (value > 0xFFFFFFFF) {
                 throw new IllegalStateException("overflow may occured");
             } else {
                 bytes = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt((int) value).array();

File: library/src/main/java/me/weishu/epic/art/entry/Entry.java
Patch:
@@ -136,7 +136,7 @@ private static Object referenceBridge(int r1, int self, int struct) {
 
         final int sp = ByteBuffer.wrap(EpicNative.get(struct, 4)).order(ByteOrder.LITTLE_ENDIAN).getInt();
 
-        Logger.i(TAG, "stack:" + Debug.hexdump(EpicNative.get(sp, 96), 0));
+        // Logger.i(TAG, "stack:" + Debug.hexdump(EpicNative.get(sp, 96), 0));
 
         final byte[] rr1 = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(r1).array();
         final byte[] r2 = EpicNative.get(struct + 4, 4);

File: app/src/main/java/epic/weishu/me/epic/MainActivity.java
Patch:
@@ -57,5 +57,6 @@ public void helloWorld() {
 
     public void helloArt() {
         Toast.makeText(this, "hello art!", Toast.LENGTH_SHORT).show();
+        Hook.callOrigin(this, null);
     }
 }

File: epic/src/main/java/epic/weishu/me/epic/Hook.java
Patch:
@@ -166,12 +166,12 @@ static class Unsafe {
         static final String UNSAFE_CLASS = "sun.misc.Unsafe";
         static Object THE_UNSAFE;
 
-        private static boolean is64Bit;
+        private static boolean is64Bit = false;
 
         static {
             THE_UNSAFE = Reflection.get(null, UNSAFE_CLASS, "THE_ONE", null);
             Object runtime = Reflection.call(null, "dalvik.system.VMRuntime", "getRuntime", null, null, null);
-            is64Bit = (Boolean) Reflection.call(null, "dalvik.system.VMRuntime", "is64Bit", runtime, null, null);
+            // is64Bit = (Boolean) Reflection.call(null, "dalvik.system.VMRuntime", "is64Bit", runtime, null, null);
         }
 
         public static long getObjectAddress(Object o) {

