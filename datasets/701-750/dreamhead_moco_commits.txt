File: moco-core/src/main/java/com/github/dreamhead/moco/dumper/HttpDumpers.java
Patch:
@@ -35,7 +35,7 @@ private static String contentForDump(final HttpMessage message) {
     private static boolean isText(final String type) {
         try {
             MediaType mediaType = MediaType.parse(type);
-            return mediaType.is(MediaType.ANY_TEXT_TYPE)
+            return mediaType.type().equals("text")
                     || mediaType.subtype().endsWith("javascript")
                     || mediaType.subtype().endsWith("json")
                     || mediaType.subtype().endsWith("xml")

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/ActualCookieAttribute.java
Patch:
@@ -2,7 +2,8 @@
 
 import com.github.dreamhead.moco.CookieAttribute;
 import io.netty.handler.codec.http.cookie.Cookie;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 
 public abstract class ActualCookieAttribute extends CookieAttribute {
-    public abstract void visit(Cookie cookie);
+    public abstract void visit(DefaultCookie cookie);
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/DomainCookieAttribute.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.dreamhead.moco.cookie;
 
-import io.netty.handler.codec.http.cookie.Cookie;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 
 public final class DomainCookieAttribute extends ActualCookieAttribute {
     private final String domain;
@@ -11,7 +11,7 @@ public DomainCookieAttribute(final String actualDomain) {
 
 
     @Override
-    public void visit(final Cookie cookie) {
+    public void visit(final DefaultCookie cookie) {
         cookie.setDomain(this.domain);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/HttpOnlyAttribute.java
Patch:
@@ -1,10 +1,10 @@
 package com.github.dreamhead.moco.cookie;
 
-import io.netty.handler.codec.http.cookie.Cookie;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 
 public final class HttpOnlyAttribute extends ActualCookieAttribute {
     @Override
-    public void visit(final Cookie cookie) {
+    public void visit(final DefaultCookie cookie) {
         cookie.setHttpOnly(true);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/MaxAgeCookieAttribute.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.dreamhead.moco.cookie;
 
-import io.netty.handler.codec.http.cookie.Cookie;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 
 import java.util.concurrent.TimeUnit;
 
@@ -14,7 +14,7 @@ public MaxAgeCookieAttribute(final long actualMaxAge, final TimeUnit actualUnit)
     }
 
     @Override
-    public void visit(final Cookie cookie) {
+    public void visit(final DefaultCookie cookie) {
         cookie.setMaxAge(unit.toSeconds(maxAge));
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/PathCookieAttribute.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.dreamhead.moco.cookie;
 
-import io.netty.handler.codec.http.cookie.Cookie;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 
 public class PathCookieAttribute extends ActualCookieAttribute {
     private final String path;
@@ -10,7 +10,7 @@ public PathCookieAttribute(final String actualPath) {
     }
 
     @Override
-    public final void visit(final Cookie cookie) {
+    public final void visit(final DefaultCookie cookie) {
         cookie.setPath(path);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/SecureCookieAttribute.java
Patch:
@@ -1,10 +1,10 @@
 package com.github.dreamhead.moco.cookie;
 
-import io.netty.handler.codec.http.cookie.Cookie;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 
 public final class SecureCookieAttribute extends ActualCookieAttribute {
     @Override
-    public void visit(final Cookie cookie) {
+    public void visit(final DefaultCookie cookie) {
         cookie.setSecure(true);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/util/Cookies.java
Patch:
@@ -8,7 +8,7 @@
 
 public final class Cookies {
     public String encodeCookie(final String key, final String value, final CookieAttribute... options) {
-        Cookie cookie = new DefaultCookie(key, value);
+        DefaultCookie cookie = new DefaultCookie(key, value);
         for (CookieAttribute option : options) {
             ((ActualCookieAttribute) option).visit(cookie);
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/websocket/DefaultWebsocketRequest.java
Patch:
@@ -30,7 +30,7 @@ public final String toString() {
     }
 
     @Override
-    public String getClientAddress() {
+    public final String getClientAddress() {
         return this.clientAddress;
     }
 }

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoEventStandaloneTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 
 public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest {
-    private static final long IDLE = 1200;
+    private static final long IDLE = 1500;
 
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();

File: moco-core/src/main/java/com/github/dreamhead/moco/recorder/InMemoryRequestRecorder.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.model.MessageContent;
+import com.google.common.net.HttpHeaders;
 import com.google.common.net.MediaType;
-import org.apache.http.HttpHeaders;
 
 public class InMemoryRequestRecorder implements RequestRecorder {
     private HttpRequest httpRequest;

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpResponse.java
Patch:
@@ -15,7 +15,8 @@
 public final class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse {
     private final int status;
 
-    public DefaultHttpResponse(final HttpProtocolVersion version, final int status,
+    public DefaultHttpResponse(final HttpProtocolVersion version,
+                               final int status,
                                final ImmutableMap<String, String[]> headers,
                                final MessageContent content) {
         super(version, content, headers);

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -38,7 +38,7 @@ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http
 
     private final String uri;
     private final ImmutableMap<String, String[]> queries;
-    private String clientAddress;
+    private final String clientAddress;
 
     private DefaultHttpRequest(final HttpProtocolVersion version, final MessageContent content,
                                final HttpMethod method, final String uri,
@@ -124,7 +124,7 @@ private static MessageContent toMessageContent(final FullHttpRequest request) {
                 .build();
     }
 
-    public static HttpRequest newRequest(final FullHttpRequest request, final String clientIp) {
+    public static HttpRequest newRequest(final FullHttpRequest request, final String clientAddress) {
         QueryStringDecoder decoder = new QueryStringDecoder(request.uri());
         ImmutableMap<String, String[]> queries = toQueries(decoder);
 
@@ -135,7 +135,7 @@ public static HttpRequest newRequest(final FullHttpRequest request, final String
                 .withUri(decoder.path())
                 .withQueries(queries)
                 .withContent(toMessageContent(request))
-                .withClientAddress(clientIp)
+                .withClientAddress(clientAddress)
                 .build();
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/SessionSetting.java
Patch:
@@ -156,7 +156,7 @@ public ActualHttpServer newHttpServer(final int port,
             return server;
         }
 
-        ActualHttpServer server = ActualHttpServer.createHttpServer(port, quiet);
+        ActualHttpServer server = ActualHttpServer.createHttpServer(port, quiet, configs);
         bindTo(server);
         return server;
     }

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonStandaloneTest.java
Patch:
@@ -30,7 +30,7 @@ public void should_return_expected_json_response_based_on_specified_json_request
     }
     
     @Test
-    public void should_return_expected_reponse_based_on_json_path_request() throws IOException {
+    public void should_return_expected_response_based_on_json_path_request() throws IOException {
     	runWithConfiguration("jsonpath.json");
     	assertThat(helper.postContent(remoteUrl("/jsonpath"), "{\"book\":{\"price\":\"1\"}}"), is("response_for_json_path_request"));
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailoverExecutor.java
Patch:
@@ -76,7 +76,7 @@ public HttpResponse failover(final HttpRequest request) {
         ImmutableList<Session> sessions = restoreSessions(this.file);
         final Optional<Session> session = sessions.stream().filter(isForRequest(request)).findFirst();
         if (session.isPresent()) {
-            return session.get().getResponse();
+            return session.map(Session::getResponse).orElse(null);
         }
 
         logger.warn("No match request found: {}", request);

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/JsonResponseHandler.java
Patch:
@@ -8,6 +8,6 @@ public JsonResponseHandler(final ContentResource resource) {
     }
 
     public Object getPojo() {
-        return getResource().getJsonObject().get();
+        return getResource().getJsonObject().orElse(null);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/util/FileContentType.java
Patch:
@@ -48,7 +48,7 @@ public MediaType getContentType() {
         Optional<Charset> targetCharset = toCharset(optionalType.orElse(null));
 
         MediaType type = optionalType.orElse(DEFAULT_CONTENT_TYPE_WITH_CHARSET);
-        if (targetCharset.isPresent() && !type.charset().equals(targetCharset)) {
+        if (targetCharset.isPresent() && !type.charset().toJavaUtil().equals(targetCharset)) {
             return type.withCharset(targetCharset.get());
         }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -180,7 +180,7 @@ public Object exec(final List arguments) {
             return result;
         }
 
-        private Range getRange(final List arguments) {
+        private Range getRange(final List<?> arguments) {
             if (arguments.size() <= 0) {
                 return new Range(Optional.empty(), Optional.empty());
             }
@@ -192,7 +192,7 @@ private Range getRange(final List arguments) {
             return moreArgRange(arguments);
         }
 
-        private Range singleArgRange(final List arguments) {
+        private Range singleArgRange(final List<?> arguments) {
             final Object end = arguments.get(0);
             if (end instanceof SimpleNumber) {
                 return getSingleRange((SimpleNumber) end);
@@ -201,7 +201,7 @@ private Range singleArgRange(final List arguments) {
             return new Range(Optional.empty(), Optional.empty());
         }
 
-        private Range moreArgRange(final List arguments) {
+        private Range moreArgRange(final List<?> arguments) {
             final Object start = arguments.get(0);
             final Object end = arguments.get(1);
             if (start instanceof SimpleNumber && end instanceof SimpleNumber) {

File: moco-core/src/main/java/com/github/dreamhead/moco/websocket/DefaultWebsocketResponse.java
Patch:
@@ -7,17 +7,17 @@ public class DefaultWebsocketResponse implements MutableWebsocketResponse {
     private MessageContent content;
 
     @Override
-    public MessageContent getContent() {
+    public final MessageContent getContent() {
         return this.content;
     }
 
     @Override
-    public void setContent(final MessageContent content) {
+    public final void setContent(final MessageContent content) {
         this.content = content;
     }
 
     @Override
-    public String toString() {
+    public final String toString() {
         return MoreObjects.toStringHelper(this)
                 .add("content", content)
                 .toString();

File: moco-core/src/main/java/com/github/dreamhead/moco/matcher/ConditionalRequestMatcher.java
Patch:
@@ -14,12 +14,12 @@ public ConditionalRequestMatcher(final Predicate<Request> predicate) {
     }
 
     @Override
-    public final boolean match(final Request request) {
+    public boolean match(final Request request) {
         return predicate.test(request);
     }
 
     @Override
-    public final RequestMatcher apply(final MocoConfig config) {
+    public RequestMatcher apply(final MocoConfig config) {
         return this;
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/watcher/CompositeWatcher.java
Patch:
@@ -16,8 +16,8 @@ public void start() {
 
     @Override
     public void stop() {
-        for (Watcher monitor : watchers) {
-            monitor.stop();
+        for (Watcher watcher : watchers) {
+            watcher.stop();
         }
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/websocket/DefaultWebsocketRequest.java
Patch:
@@ -15,12 +15,12 @@ public DefaultWebsocketRequest(final WebSocketFrame frame) {
     }
 
     @Override
-    public MessageContent getContent() {
+    public final MessageContent getContent() {
         return this.content;
     }
 
     @Override
-    public String toString() {
+    public final String toString() {
         return MoreObjects.toStringHelper(this)
                 .add("content", content)
                 .toString();

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoWebsocketStandaloneTest.java
Patch:
@@ -92,9 +92,9 @@ public static class Endpoint {
 
         public Endpoint(final URI uri) {
             try {
+                clearMessage();
                 WebSocketContainer container = ContainerProvider.getWebSocketContainer();
                 container.connectToServer(this, uri);
-                clearMessage();
             } catch (Exception e) {
                 throw new RuntimeException(e);
             }

File: moco-core/src/test/java/com/github/dreamhead/moco/util/IterablesTest.java
Patch:
@@ -30,6 +30,7 @@ public void should_be_as_iterable() {
 
         assertThrows(NullPointerException.class, () -> Iterables.asIterable(null, 2, new Integer[0]));
         assertThrows(NullPointerException.class, () -> Iterables.asIterable(1, null, new Integer[0]));
+        assertThrows(NullPointerException.class, () -> Iterables.asIterable(1, 2, null));
     }
 
     @Test

File: moco-core/src/test/java/com/github/dreamhead/moco/util/IterablesTest.java
Patch:
@@ -29,6 +29,7 @@ public void should_be_as_iterable() {
         assertThat(second.size(), is(4));
 
         assertThrows(NullPointerException.class, () -> Iterables.asIterable(null, 2, new Integer[0]));
+        assertThrows(NullPointerException.class, () -> Iterables.asIterable(1, null, new Integer[0]));
     }
 
     @Test

File: moco-core/src/test/java/com/github/dreamhead/moco/util/IterablesTest.java
Patch:
@@ -27,6 +27,8 @@ public void should_be_as_iterable() {
         assertThat(second.get(2), is(3));
         assertThat(second.get(3), is(4));
         assertThat(second.size(), is(4));
+
+        assertThrows(NullPointerException.class, () -> Iterables.asIterable(null, 2, new Integer[0]));
     }
 
     @Test

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/WebsocketSetting.java
Patch:
@@ -11,6 +11,7 @@
 
 import static com.github.dreamhead.moco.Moco.by;
 import static com.github.dreamhead.moco.Moco.with;
+import static com.github.dreamhead.moco.parser.model.DynamicResponseHandlerFactory.asFileResource;
 import static com.github.dreamhead.moco.util.Iterables.head;
 import static com.github.dreamhead.moco.util.Iterables.isNullOrEmpty;
 import static com.github.dreamhead.moco.util.Iterables.tail;
@@ -82,7 +83,7 @@ public ResponseHandler asResponseHandler() {
             }
 
             if (file != null) {
-                handlers.add(with(this.file.asResource()));
+                handlers.add(with(asFileResource("file", this.file)));
             }
 
             if (broadcast != null) {

File: moco-core/src/test/java/com/github/dreamhead/moco/matcher/EqRequestMatcherTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.mockito.Mockito.when;
 
 public class EqRequestMatcherTest {
-    private EqRequestMatcher matcher;
+    private EqRequestMatcher<String[]> matcher;
     private RequestExtractor<String[]> extractor;
     private HttpRequest request;
     private Resource expected;
@@ -25,7 +25,7 @@ public void setUp() {
         extractor = (RequestExtractor<String[]>)mock(RequestExtractor.class);
         request = mock(HttpRequest.class);
         expected = mock(Resource.class);
-        matcher = new EqRequestMatcher(extractor, expected);
+        matcher = new EqRequestMatcher<>(extractor, expected);
     }
 
     @Test

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailoverExecutor.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
-import static com.github.dreamhead.moco.util.Jsons.writeToFile;
 import static com.google.common.collect.ImmutableList.of;
 
 public final class DefaultFailoverExecutor implements FailoverExecutor {

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoJsonTest.java
Patch:
@@ -135,7 +135,7 @@ public void should_return_json_for_POJO_with_CJK() throws Exception {
         pojo.message = "消息";
         server.response(Moco.json(pojo));
         running(server, () -> {
-            String content = helper.get(remoteUrl(root()));
+            String content = helper.get(root());
             JsonSupport.assertEquals(pojo, content);
         });
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailoverExecutor.java
Patch:
@@ -72,7 +72,7 @@ private ImmutableList<Session> restoreSessions(final File file) {
             InputStream inputStream = new FileInputStream(file);
             return Jsons.toObjects(inputStream, Session.class);
         } catch (MocoException me) {
-            logger.error("exception found", me);
+            logger.warn("exception found", me);
             return of();
         } catch (IOException e) {
             throw new MocoException(e);
@@ -87,7 +87,7 @@ public HttpResponse failover(final HttpRequest request) {
             return session.get().getResponse();
         }
 
-        logger.error("No match request found: {}", request);
+        logger.warn("No match request found: {}", request);
         throw new MocoException("no failover response found");
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -86,7 +86,7 @@ public final MessageContent readFor(final Request request) {
             targetTemplate.process(variables(request), writer);
             return content().withContent(stream.toByteArray()).build();
         } catch (ParseException e) {
-            logger.error("Fail to parse template: {}", content.toString());
+            logger.warn("Fail to parse template: {}", content.toString());
             throw new MocoException(e);
         } catch (IOException | TemplateException e) {
             throw new MocoException(e);

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/watcher/WatcherFactory.java
Patch:
@@ -38,8 +38,8 @@ private Function<File, Void> listener(final FileRunner fileRunner) {
             try {
                 fileRunner.restart();
             } catch (Exception e) {
-                logger.error("Fail to load configuration in {}.", file.getName());
-                logger.error(e.getMessage());
+                logger.warn("Fail to load configuration in {}.", file.getName());
+                logger.warn(e.getMessage());
             }
 
             return null;

File: moco-core/src/main/java/com/github/dreamhead/moco/MocoWebSockets.java
Patch:
@@ -9,11 +9,11 @@
 
 public final class MocoWebSockets {
     public static ResponseHandler broadcast(final String content) {
-        return broadcast(text(checkNotNullOrEmpty(content, "Content should not be null")));
+        return broadcast(text(checkNotNullOrEmpty(content, "Broadcast content should not be null")));
     }
 
     public static ResponseHandler broadcast(final Resource content) {
-        return new WebSocketBroadcastHandler(checkNotNull(content, "Content should not be null"));
+        return new WebSocketBroadcastHandler(checkNotNull(content, "Broadcast content should not be null"));
     }
 
     private MocoWebSockets() {

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/Responser.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.util.Optional;
 
-public class Responser<T extends ResponseSetting> {
+public class Responser<T extends ResponseSetting<T>> {
     private final SettingFetcher<T> fetcher;
 
     public Responser(final SettingFetcher<T> fetcher) {

File: moco-core/src/main/java/com/github/dreamhead/moco/MocoRecorders.java
Patch:
@@ -32,11 +32,11 @@ public static ResponseHandler replay(final RecorderConfig config, final Recorder
     }
 
     public static RecorderGroup group(final String name) {
-        return new RecorderGroup(checkNotNullOrEmpty(name, "Identifier should not be empty"));
+        return new RecorderGroup(checkNotNullOrEmpty(name, "group should not be empty"));
     }
 
     public static RecorderTape tape(final String path) {
-        return new RecorderTape(checkNotNullOrEmpty(path, "Identifier should not be empty"));
+        return new RecorderTape(checkNotNullOrEmpty(path, "tape should not be empty"));
     }
 
     public static RecorderIdentifier identifier(final String text) {

File: moco-core/src/main/java/com/github/dreamhead/moco/websocket/DefaultWebsocketRequest.java
Patch:
@@ -6,7 +6,7 @@
 import static com.github.dreamhead.moco.util.ByteBufs.toByteArray;
 
 public class DefaultWebsocketRequest implements WebsocketRequest {
-    private MessageContent content;
+    private final MessageContent content;
 
     public DefaultWebsocketRequest(final WebSocketFrame frame) {
         byte[] bytes = toByteArray(frame.content());

File: moco-core/src/main/java/com/github/dreamhead/moco/recorder/DynamicReplayHandler.java
Patch:
@@ -48,7 +48,7 @@ protected final ResponseHandler doApply(final MocoConfig config) {
         ReplayModifier appliedModifier = this.modifier.apply(config);
 
         if (appliedIdentifier != this.identifier || appliedModifier != this.modifier) {
-            RecorderConfigurations configurations = RecorderConfigurations.create(ImmutableList.<RecorderConfig>of(
+            RecorderConfigurations configurations = RecorderConfigurations.create(ImmutableList.of(
                     group(this.registry.getGroup()),
                     appliedIdentifier,
                     appliedModifier

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/BaseActualServer.java
Patch:
@@ -35,7 +35,7 @@ public BaseActualServer(final int port, final MocoMonitor monitor, final MocoCon
         this.port = port;
         this.monitor = monitor;
         this.configs = configs;
-        this.responser = new Responser<T>(this);
+        this.responser = new Responser<>(this);
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractContentResponseHandler.java
Patch:
@@ -21,9 +21,9 @@ public final void writeToResponse(final SessionContext context) {
         Request request = context.getRequest();
         Response response = context.getResponse();
 
-        if (request instanceof HttpRequest && MutableHttpResponse.class.isInstance(response)) {
+        if (request instanceof HttpRequest && response instanceof MutableHttpResponse) {
             HttpRequest httpRequest = (HttpRequest) request;
-            MutableHttpResponse httpResponse = MutableHttpResponse.class.cast(response);
+            MutableHttpResponse httpResponse = (MutableHttpResponse) response;
             doWriteToResponse(httpRequest, httpResponse);
             return;
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/recorder/RecorderConfigurations.java
Patch:
@@ -30,9 +30,9 @@ private static void addConfig(final RecorderConfigurations configurations,
             configurations.identifier = (RecorderIdentifier) config;
         } else if (config.isFor(RecorderConfig.MODIFIER)) {
             configurations.modifier = (ReplayModifier) config;
+        } else {
+            throw new IllegalArgumentException("Unknown recorder config:" + config);
         }
-
-        throw new IllegalArgumentException("Unknown recorder config:" + config);
     }
 
     public final RecorderRegistry getRecorderRegistry() {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/ResponseHandlers.java
Patch:
@@ -13,7 +13,7 @@
 import static java.lang.String.format;
 
 public final class ResponseHandlers {
-    private static final ImmutableMap<String, Class> HANDLERS = ImmutableMap.<String, Class>builder()
+    private static final ImmutableMap<String, Class<?>> HANDLERS = ImmutableMap.<String, Class<?>>builder()
             .put("file", ContentHandler.class)
             .put("text", ContentHandler.class)
             .put("pathresource", ContentHandler.class)
@@ -52,9 +52,9 @@ private static ResponseHandler responseHandler(final Resource resource) {
     }
 
     private static ResponseHandler createResponseHandler(final Resource resource) {
-        Class clazz = HANDLERS.get(resource.id());
+        Class<?> clazz = HANDLERS.get(resource.id());
         try {
-            Constructor[] constructors = clazz.getConstructors();
+            Constructor<?>[] constructors = clazz.getConstructors();
             return (ResponseHandler) constructors[0].newInstance(resource);
         } catch (Exception e) {
             throw new MocoException(e);

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/FormsRequestExtractor.java
Patch:
@@ -28,9 +28,9 @@ public final class FormsRequestExtractor extends HttpRequestExtractor<ImmutableM
     protected Optional<ImmutableMap<String, String>> doExtract(final HttpRequest request) {
         HttpPostRequestDecoder decoder = null;
         try {
-            HttpDataFactory factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);
             FullHttpRequest targetRequest = ((DefaultHttpRequest) request).toFullHttpRequest();
             Charset charset = HttpUtil.getCharset(targetRequest);
+            HttpDataFactory factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE, charset);
             decoder = new HttpPostRequestDecoder(factory, targetRequest, charset);
             return of(doExtractForms(decoder));
         } catch (HttpPostRequestDecoder.ErrorDataDecoderException idde) {

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/JsonResourceReader.java
Patch:
@@ -1,20 +1,20 @@
 package com.github.dreamhead.moco.resource.reader;
 
 import com.github.dreamhead.moco.HttpRequest;
-import com.github.dreamhead.moco.function.ObjectResponseFunction;
 import com.github.dreamhead.moco.Request;
 import com.github.dreamhead.moco.model.MessageContent;
 import com.google.common.net.MediaType;
 
 import java.nio.charset.Charset;
+import java.util.function.Function;
 
 import static com.github.dreamhead.moco.util.Functions.checkApply;
 import static com.github.dreamhead.moco.util.Jsons.toJson;
 
 public final class JsonResourceReader implements ContentResourceReader {
-    private ObjectResponseFunction function;
+    private Function<Request, Object> function;
 
-    public JsonResourceReader(final ObjectResponseFunction function) {
+    public JsonResourceReader(final Function<Request, Object> function) {
         this.function = function;
     }
 

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoTemplateStandaloneTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.github.dreamhead.moco;
 
-import com.google.common.base.Splitter;
-import com.google.common.collect.Iterables;
 import org.apache.http.Header;
 import org.apache.http.HttpVersion;
 import org.apache.http.ProtocolVersion;
@@ -124,7 +122,7 @@ public void should_return_random_with_range_and_format_from_template() throws IO
         assertThat(result, lessThan(100d));
         assertThat(result, greaterThan(0d));
 
-        String target = Iterables.get(Splitter.on('.').split(response), 1);
+        String target = response.split("\\.")[1];
         assertThat(target.length(), lessThanOrEqualTo(6));
     }
 

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoTemplateStandaloneTest.java
Patch:
@@ -141,7 +141,8 @@ public void should_return_random_with_range_from_template() throws IOException {
     public void should_return_random_with_format_from_template() throws IOException {
         runWithConfiguration("template_with_function.json");
         String response = helper.get(remoteUrl("/random_template_with_format"));
-        String target = Iterables.get(Splitter.on('.').split(response), 1);
+        String[] result = response.split("\\.");
+        String target = result[1];
         assertThat(target.length(), lessThanOrEqualTo(6));
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/HttpHeaderResponseHandler.java
Patch:
@@ -26,6 +26,6 @@ public final ResponseHandler apply(final MocoConfig config) {
             return new HttpHeaderResponseHandler(appliedHeader);
         }
 
-        return this;
+        return super.apply(config);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/AbstractResponseBase.java
Patch:
@@ -28,6 +28,6 @@ public final T response(final MocoProcedure procedure) {
 
     @Override
     public final T response(final HttpHeader header) {
-        return this.response(with(checkNotNull(header, "Procedure should not be null")));
+        return this.response(with(checkNotNull(header, "Http header should not be null")));
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/watcher/WatcherFactory.java
Patch:
@@ -35,7 +35,7 @@ public Watcher createSettingWatcher(final File settingsFile,
                                         final Iterable<File> configurationFiles,
                                         final FileRunner fileRunner) {
         ImmutableList<File> files = ImmutableList.<File>builder().add(settingsFile).addAll(configurationFiles).build();
-        return factory.createWatcher(listener(fileRunner), files.toArray(new File[files.size()]));
+        return factory.createWatcher(listener(fileRunner), files.toArray(new File[0]));
     }
 
     private Function<File, Void> listener(final FileRunner fileRunner) {

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/AbstractFileResourceReader.java
Patch:
@@ -42,7 +42,7 @@ private MessageContent asMessageContent(final byte[] content) {
     @Override
     public final MediaType getContentType(final HttpRequest request) {
         String targetFilename = this.filename(of(request));
-        return new FileContentType(targetFilename, charset).getContentType();
+        return new FileContentType(targetFilename, charset.orNull()).getContentType();
     }
 
     protected final String filename(final Optional<? extends Request> request) {

File: moco-core/src/test/java/com/github/dreamhead/moco/util/FileContentTypeTest.java
Patch:
@@ -25,7 +25,7 @@ public void should_get_default_type_from_unknown_name() {
 	@Test
 	public void should_have_charset_for_file() {
 		Charset gbk = Charset.forName("gbk");
-		FileContentType contentType = new FileContentType("result.response", of(gbk));
+		FileContentType contentType = new FileContentType("result.response", gbk);
 		assertThat(contentType.getContentType(), is(MediaType.create("text", "plain").withCharset(gbk)));
 	}
 

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpMessage.java
Patch:
@@ -58,9 +58,9 @@ public final MessageContent getContent() {
     protected MoreObjects.ToStringHelper toStringHelper() {
         return MoreObjects.toStringHelper(this)
                 .omitNullValues()
-                .add("version", this.getVersion())
-                .add("headers", this.getHeaders())
-                .add("content", this.getContent());
+                .add("version", this.version)
+                .add("headers", this.headers)
+                .add("content", this.content);
     }
 
     @Override

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/FileContainer.java
Patch:
@@ -138,6 +138,9 @@ public FileContainerBuilder withCharset(final String charset) {
         public FileContainer build() {
             FileContainer container = new FileContainer(name);
             container.charset = toCharset(charset).orNull();
+            if (charset == null) {
+                container.content = null;
+            }
             return container;
         }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/FailoverContainerDeserializer.java
Patch:
@@ -6,7 +6,6 @@
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.github.dreamhead.moco.parser.model.FailoverContainer;
-import com.github.dreamhead.moco.parser.model.ProxyContainer;
 
 import java.io.IOException;
 
@@ -23,7 +22,7 @@ public FailoverContainer deserialize(final JsonParser jp, final DeserializationC
             return container.toFailoverContainer();
         }
 
-        return (FailoverContainer) ctxt.handleUnexpectedToken(ProxyContainer.class, jp);
+        return (FailoverContainer) ctxt.handleUnexpectedToken(FailoverContainer.class, jp);
     }
 
     @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -568,13 +568,13 @@ public static RequestExtractor<Object> var(final Object text) {
 
     public static Failover failover(final String file, final int... statuses) {
         return new Failover(ApiUtils.failoverExecutor(
-                checkNotNullOrEmpty(file, "Filename should not be null")), FailoverStrategy.FAILOVER,
+                checkNotNullOrEmpty(file, "Failover filename should not be null")), FailoverStrategy.FAILOVER,
                 checkNotNull(statuses, "Proxy status should not be null"));
     }
 
     public static Failover playback(final String file, final int... statuses) {
         return new Failover(ApiUtils.failoverExecutor(
-                checkNotNullOrEmpty(file, "Filename should not be null")), FailoverStrategy.PLAYBACK,
+                checkNotNullOrEmpty(file, "Playback filename should not be null")), FailoverStrategy.PLAYBACK,
                 checkNotNull(statuses, "Proxy status should not be null"));
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/FailoverContainerDeserializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.github.dreamhead.moco.parser.deserializer;
 
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.JsonToken;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
@@ -12,7 +11,7 @@
 
 public class FailoverContainerDeserializer extends JsonDeserializer<FailoverContainer> {
     @Override
-    public FailoverContainer deserialize(final JsonParser jp, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
+    public FailoverContainer deserialize(final JsonParser jp, final DeserializationContext ctxt) throws IOException {
         JsonToken currentToken = jp.getCurrentToken();
         if (currentToken == JsonToken.VALUE_STRING) {
             return new FailoverContainer(jp.getText());

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractProxyResponseHandler.java
Patch:
@@ -102,8 +102,7 @@ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH
     private final Failover failover;
 
     protected AbstractProxyResponseHandler(final Failover failover) {
-        this.failover = failover;
-        this.proxyStatuses = ImmutableSet.of(HttpResponseStatus.BAD_REQUEST.code());
+        this(failover, HttpResponseStatus.BAD_REQUEST.code());
     }
 
     protected AbstractProxyResponseHandler(final Failover failover, final int... proxyStatuses) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpMessage.java
Patch:
@@ -99,7 +99,7 @@ protected abstract static class Builder<T extends Builder> {
         private Map<String, String[]> headers;
 
         @SuppressWarnings("unchecked")
-        public Builder() {
+        protected Builder() {
             this.clazz = (Class<T>) TypeToken.of(getClass()).getRawType();
         }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -149,7 +149,7 @@ private static ImmutableMap<String, String[]> toQueries(final QueryStringDecoder
         ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();
         for (Map.Entry<String, List<String>> entry : decoder.parameters().entrySet()) {
             List<String> value = entry.getValue();
-            builder.put(entry.getKey(), value.toArray(new String[value.size()]));
+            builder.put(entry.getKey(), value.toArray(new String[0]));
         }
         return builder.build();
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -110,13 +110,13 @@ public ImmutableMap<String, String> get() {
 
     @Override
     public String toString() {
-        return MoreObjects.toStringHelper("HTTP Request")
+        return MoreObjects.toStringHelper(this)
                 .omitNullValues()
-                .add("uri", this.uri)
                 .add("version", this.getVersion())
+                .add("headers", this.getHeaders())
+                .add("uri", this.uri)
                 .add("method", this.method)
                 .add("queries", this.queries)
-                .add("headers", this.getHeaders())
                 .add("content", this.getContent())
                 .toString();
     }

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoStandaloneTest.java
Patch:
@@ -183,7 +183,7 @@ public void should_run_as_proxy() throws IOException {
         runWithConfiguration("foo.json");
         HttpResponse response = helper.getResponse(remoteUrl("/proxy"));
         String value = response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue();
-        assertThat(value, startsWith("text/html"));
+        assertThat(value, startsWith("text/plain"));
     }
 
     @Test

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpMessage.java
Patch:
@@ -78,7 +78,7 @@ private static List<String> getValues(final Map<String, Iterable<String>> header
         return new ArrayList<>();
     }
 
-    protected static abstract class Builder<T extends Builder> {
+    protected abstract static class Builder<T extends Builder> {
         private final Class<T> clazz;
         private HttpProtocolVersion version;
         private MessageContent content;

File: moco-core/src/main/java/com/github/dreamhead/moco/util/Globs.java
Patch:
@@ -86,10 +86,10 @@ private static int getGlobIndex(final Path path) {
         return -1;
     }
 
-    private static final String globMetaChars = "\\*?[{";
+    private static final String GLOB_META_CHARS = "\\*?[{";
 
     private static boolean isGlobMeta(final char c) {
-        return globMetaChars.indexOf(c) != -1;
+        return GLOB_META_CHARS.indexOf(c) != -1;
     }
 
     private Globs() {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailoverExecutor.java
Patch:
@@ -24,7 +24,7 @@
 import static com.google.common.collect.ImmutableList.of;
 import static com.google.common.collect.Iterables.tryFind;
 
-public class DefaultFailoverExecutor implements FailoverExecutor {
+public final class DefaultFailoverExecutor implements FailoverExecutor {
     private static Logger logger = LoggerFactory.getLogger(DefaultFailoverExecutor.class);
 
     private final ObjectMapper mapper = new ObjectMapper();

File: moco-core/src/main/java/com/github/dreamhead/moco/MocoRest.java
Patch:
@@ -30,7 +30,8 @@ public static RestServer restServer(final int port, final MocoMonitor monitor, f
                 checkNotNull(monitor, "Monitor should not be null"), configs);
     }
 
-    public static RestServer restServer(final int port, final MocoMonitor monitor, final MocoMonitor monitor2, final MocoMonitor... monitors) {
+    public static RestServer restServer(final int port, final MocoMonitor monitor,
+                                        final MocoMonitor monitor2, final MocoMonitor... monitors) {
         checkArgument(port > 0, "Port must be greater than zero");
         return new ActualRestServer(of(port), Optional.<HttpsCertificate>absent(),
                 mergeMonitor(checkNotNull(monitor, "Monitor should not be null"),

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultMutableHttpResponse.java
Patch:
@@ -41,7 +41,7 @@ public void setContent(final MessageContent content) {
         this.content = content;
     }
 
-    private static String[] SINGLE_VALUE_HEADERS = new String[] {
+    private static final String[] SINGLE_VALUE_HEADERS = new String[] {
             HttpHeaders.CONTENT_TYPE
     };
 

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.github.dreamhead.moco.HttpMethod;
 import com.github.dreamhead.moco.HttpProtocolVersion;
 import com.github.dreamhead.moco.HttpRequest;
@@ -71,6 +72,7 @@ public ImmutableMap<String, String> getCookies() {
     }
 
     @Override
+    @JsonSerialize(as = Map.class)
     public ImmutableMap<String, String[]> getQueries() {
         return queries;
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpResponse.java
Patch:
@@ -11,7 +11,7 @@
 import static com.github.dreamhead.moco.model.MessageContent.content;
 
 @JsonDeserialize(builder = DefaultHttpResponse.Builder.class)
-public class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse {
+public final class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse {
     private final int status;
 
     public DefaultHttpResponse(final HttpProtocolVersion version, final int status,

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoTemplateTest.java
Patch:
@@ -43,6 +43,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.lessThan;
+import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
@@ -529,7 +530,7 @@ public void run() throws Exception {
                     assertThat(result, lessThan(100d));
                     assertThat(result, greaterThan(0d));
                     String target = Splitter.on('.').splitToList(response).get(1);
-                    assertThat(target.length(), is(6));
+                    assertThat(target.length(), lessThanOrEqualTo(6));
                 } catch (NumberFormatException e) {
                     fail();
                 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -59,7 +59,7 @@ public static String checkValidVariableName(final String name) {
             return name;
         }
 
-        throw new IllegalArgumentException("Template variable name should not be null");
+        throw new IllegalArgumentException("Template variable name should not be same with reserved name");
     }
 
     public TemplateResourceReader(final ContentResource template,
@@ -137,7 +137,6 @@ public MediaType getContentType(final HttpRequest request) {
     }
 
     private static class NowMethod implements TemplateMethodModelEx {
-
         @Override
         public Object exec(final List arguments) {
             Date date = new Date();

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractResponseHandler.java
Patch:
@@ -6,7 +6,7 @@
 public abstract class AbstractResponseHandler implements ResponseHandler {
     @Override
     @SuppressWarnings("unchecked")
-    public final ResponseHandler apply(final MocoConfig config) {
+    public ResponseHandler apply(final MocoConfig config) {
         if (config.isFor(MocoConfig.RESPONSE_ID)) {
             return (ResponseHandler) config.apply(this);
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/BaseResponseSettingConfiguration.java
Patch:
@@ -20,7 +20,7 @@ public abstract class BaseResponseSettingConfiguration<T extends ResponseSetting
 
     @SuppressWarnings("unchecked")
     protected BaseResponseSettingConfiguration() {
-        this.clazz = (Class<T>) new TypeToken<T>(getClass()) {}.getRawType();
+        this.clazz = (Class<T>) TypeToken.of(getClass()).getRawType();
     }
 
     private T self() {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -209,7 +209,7 @@ public Builder withQueries(final Map<String, String[]> queries) {
         }
 
         public DefaultHttpRequest build() {
-            return new DefaultHttpRequest(version, content, method, this.uri, this.headers, this.queries);
+            return new DefaultHttpRequest(this.getVersion(), this.getContent(), method, this.uri, this.getHeaders(), this.queries);
         }
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpResponse.java
Patch:
@@ -54,7 +54,7 @@ public Builder withStatus(final int code) {
         }
 
         public DefaultHttpResponse build() {
-            return new DefaultHttpResponse(version, status, headers, content);
+            return new DefaultHttpResponse(this.getVersion(), status, this.getHeaders(), this.getContent());
         }
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateRequest.java
Patch:
@@ -7,6 +7,8 @@
 import com.github.dreamhead.moco.model.MessageContent;
 import com.google.common.collect.ImmutableMap;
 
+import java.util.Map;
+
 import static com.github.dreamhead.moco.util.Maps.arrayValueToSimple;
 
 public class TemplateRequest {
@@ -28,7 +30,7 @@ public HttpProtocolVersion getVersion() {
         throw new IllegalArgumentException("Request is not HTTP request");
     }
 
-    public ImmutableMap<String, String> getHeaders() {
+    public Map<String, String> getHeaders() {
         if (this.request instanceof HttpRequest) {
             return arrayValueToSimple(((HttpRequest) this.request).getHeaders());
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/util/Maps.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Map;
 
 public class Maps {
-    public static ImmutableMap<String, String> arrayValueToSimple(final Map<String, String[]> map) {
+    public static Map<String, String> arrayValueToSimple(final Map<String, String[]> map) {
         ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
         for (Map.Entry<String, String[]> entry : map.entrySet()) {
             builder.put(entry.getKey(), entry.getValue()[0]);
@@ -15,7 +15,7 @@ public static ImmutableMap<String, String> arrayValueToSimple(final Map<String,
         return builder.build();
     }
 
-    public static ImmutableMap<String, String[]> simpleValueToArray(final Map<String, String> map) {
+    public static Map<String, String[]> simpleValueToArray(final Map<String, String> map) {
         ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();
         for (Map.Entry<String, String> entry : map.entrySet()) {
             builder.put(entry.getKey(), new String[]{entry.getValue()});
@@ -24,7 +24,7 @@ public static ImmutableMap<String, String[]> simpleValueToArray(final Map<String
         return builder.build();
     }
 
-    public static ImmutableMap<String, String[]> iterableValueToArray(final Map<String, Iterable<String>> map) {
+    public static Map<String, String[]> iterableValueToArray(final Map<String, Iterable<String>> map) {
         ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();
         for (Map.Entry<String, Iterable<String>> entry : map.entrySet()) {
             Iterable<String> value = entry.getValue();

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractProxyResponseHandler.java
Patch:
@@ -114,6 +114,7 @@ private HttpRequestBase prepareRemoteRequest(final FullHttpRequest request, fina
         return remoteRequest;
     }
 
+    @SuppressWarnings("deprecation")
     private RequestConfig createRequestConfig() {
         return RequestConfig.custom()
                 .setRedirectsEnabled(false)

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -269,6 +269,7 @@ public Builder withHeaders(final Map<String, ?> headers) {
             return this;
         }
 
+        @SuppressWarnings("unchecked")
         private ImmutableMap<String, String[]> asHeaders(final Map<String, ?> headers) {
             Object value = Iterables.getFirst(headers.entrySet(), null).getValue();
             if (value instanceof String) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpResponse.java
Patch:
@@ -81,14 +81,15 @@ public Builder withHeaders(final Map<String, ?> headers) {
             return this;
         }
 
+        @SuppressWarnings("unchecked")
         private ImmutableMap<String, String[]> asHeaders(final Map<String, ?> headers) {
             Object value = Iterables.getFirst(headers.entrySet(), null).getValue();
             if (value instanceof String) {
-                return simpleValueToArray((Map<String, String>)headers);
+                return simpleValueToArray((Map<String, String>) headers);
             }
 
             if (value instanceof String[]) {
-                return copyOf((Map<String, String[]>)headers);
+                return copyOf((Map<String, String[]>) headers);
             }
 
             if (value instanceof List) {

File: moco-core/src/main/java/com/github/dreamhead/moco/util/Jsons.java
Patch:
@@ -11,7 +11,6 @@
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.io.CharStreams;
-import com.sun.xml.internal.messaging.saaj.util.CharReader;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateRequest.java
Patch:
@@ -7,7 +7,7 @@
 import com.github.dreamhead.moco.model.MessageContent;
 import com.google.common.collect.ImmutableMap;
 
-import static com.github.dreamhead.moco.util.Maps.asSimple;
+import static com.github.dreamhead.moco.util.Maps.arrayValueToSimple;
 
 public class TemplateRequest {
     private Request request;
@@ -30,7 +30,7 @@ public HttpProtocolVersion getVersion() {
 
     public ImmutableMap<String, String> getHeaders() {
         if (this.request instanceof HttpRequest) {
-            return asSimple(((HttpRequest) this.request).getHeaders());
+            return arrayValueToSimple(((HttpRequest) this.request).getHeaders());
         }
 
         throw new IllegalArgumentException("Request is not HTTP request");

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoProxyTest.java
Patch:
@@ -421,7 +421,9 @@ public void should_proxy_with_playback_to_access_remote_only_once() throws Excep
             @Override
             public void run() throws Exception {
                 assertThat(helper.get(remoteUrl("/proxy_playback")), is("proxy"));
+                System.out.println("First request");
                 assertThat(helper.get(remoteUrl("/proxy_playback")), is("proxy"));
+                System.out.println("Second request");
             }
         });
 

File: moco-core/src/test/java/com/github/dreamhead/moco/dumper/HttpDumpersTest.java
Patch:
@@ -84,7 +84,7 @@ private void assertMessageContent(final String mediaType, final String expectedC
 
     private HttpMessage messageWithHeaders(final Map<String, String> headers) {
         return DefaultHttpResponse.builder()
-                .withHeaders(headers)
+                .forHeaders(headers)
                 .withContent(MessageContent.content(MESSAGE_BODY))
                 .build();
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -579,9 +579,11 @@ public static MocoEventTrigger complete(final MocoEventAction action) {
         return new MocoEventTrigger(MocoEvent.COMPLETE, checkNotNull(action, "Action should not be null"));
     }
 
+    private static final int DEFAULT_LATENCY = 1000;
+
     public static MocoEventAction async(final MocoEventAction action) {
         return async(checkNotNull(action, "Action should not be null"),
-                latency(LatencyProcedure.DEFAULT_LATENCY, TimeUnit.MILLISECONDS));
+                latency(DEFAULT_LATENCY, TimeUnit.MILLISECONDS));
     }
 
     public static MocoEventAction async(final MocoEventAction action, final LatencyProcedure procedure) {

File: moco-core/src/main/java/com/github/dreamhead/moco/procedure/LatencyProcedure.java
Patch:
@@ -6,8 +6,6 @@
 import java.util.concurrent.TimeUnit;
 
 public class LatencyProcedure implements MocoProcedure {
-    public static final int DEFAULT_LATENCY = 1000;
-
     private final long duration;
     private final TimeUnit unit;
 

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultSocketRequest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dreamhead.moco.SocketRequest;
 
-public class DefaultSocketRequest implements SocketRequest {
+public final class DefaultSocketRequest implements SocketRequest {
     private final MessageContent content;
 
     public DefaultSocketRequest(final MessageContent content) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultSocketResponse.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dreamhead.moco.MutableSocketResponse;
 
-public class DefaultSocketResponse implements MutableSocketResponse {
+public final class DefaultSocketResponse implements MutableSocketResponse {
     private MessageContent content;
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -378,19 +378,19 @@ public static ResponseHandler seq(final ResponseHandler handler, final ResponseH
 
     public static ResponseHandler cycle(final String content, final String... contents) {
         checkNotNull(content, "Cycle content should not be null");
-        checkArgument(contents.length > 0, "Sequence content should not be null");
+        checkArgument(contents.length > 0, "Cycle content should not be null");
         return newCycle(FluentIterable.from(asIterable(content, contents)).transform(textToResource()));
     }
 
     public static ResponseHandler cycle(final Resource content, final Resource... contents) {
         checkNotNull(content, "Cycle content should not be null");
-        checkArgument(contents.length > 0, "Sequence contents should not be null");
+        checkArgument(contents.length > 0, "Cycle contents should not be null");
         return newCycle(FluentIterable.from(asIterable(content, contents)).transform(resourceToResourceHandler()));
     }
 
     public static ResponseHandler cycle(final ResponseHandler handler, final ResponseHandler... handlers) {
         checkNotNull(handler, "Cycle handler should not be null");
-        checkArgument(handlers.length > 0, "Sequence handlers should not be null");
+        checkArgument(handlers.length > 0, "Cycle handlers should not be null");
         return newCycle(asIterable(handler, handlers));
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -377,19 +377,19 @@ public static ResponseHandler seq(final ResponseHandler handler, final ResponseH
     }
 
     public static ResponseHandler cycle(final String content, final String... contents) {
-        checkNotNull(content, "Sequence content should not be null");
+        checkNotNull(content, "Cycle content should not be null");
         checkArgument(contents.length > 0, "Sequence content should not be null");
         return newCycle(FluentIterable.from(asIterable(content, contents)).transform(textToResource()));
     }
 
     public static ResponseHandler cycle(final Resource content, final Resource... contents) {
-        checkNotNull(content, "Sequence content should not be null");
+        checkNotNull(content, "Cycle content should not be null");
         checkArgument(contents.length > 0, "Sequence contents should not be null");
         return newCycle(FluentIterable.from(asIterable(content, contents)).transform(resourceToResourceHandler()));
     }
 
     public static ResponseHandler cycle(final ResponseHandler handler, final ResponseHandler... handlers) {
-        checkNotNull(handler, "Sequence handler should not be null");
+        checkNotNull(handler, "Cycle handler should not be null");
         checkArgument(handlers.length > 0, "Sequence handlers should not be null");
         return newCycle(asIterable(handler, handlers));
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/CycleHandler.java
Patch:
@@ -11,7 +11,7 @@ private CycleHandler(final Iterable<ResponseHandler> handlers) {
     }
 
     public static ResponseHandler newCycle(final Iterable<ResponseHandler> handlers) {
-        checkArgument(Iterables.size(handlers) > 0, "Sequence contents should not be null");
+        checkArgument(!Iterables.isEmpty(handlers), "Cycle contents should not be null");
         return new CycleHandler(handlers);
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/SequenceHandler.java
Patch:
@@ -11,7 +11,7 @@ private SequenceHandler(final Iterable<ResponseHandler> handlers) {
     }
 
     public static ResponseHandler newSeq(final Iterable<ResponseHandler> handlers) {
-        checkArgument(Iterables.size(handlers) > 0, "Sequence contents should not be null");
+        checkArgument(!Iterables.isEmpty(handlers), "Sequence contents should not be null");
         return new SequenceHandler(handlers);
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/ResourceSetting.java
Patch:
@@ -20,7 +20,7 @@ public class ResourceSetting {
     protected List<RestDeleteSetting> delete;
     protected List<RestHeadSetting> head;
     protected List<RestPatchSetting> patch;
-    protected List<RestSubResourceSetting> resource;
+    protected List<RestSubResourceSetting> resources;
 
     public String getName() {
         return name;
@@ -37,15 +37,15 @@ public String toString() {
                 .add("delete", delete)
                 .add("head", head)
                 .add("patch", patch)
-                .add("sub resource", resource)
+                .add("sub resources", resources)
                 .toString();
     }
 
     @SuppressWarnings("unchecked")
     public RestSetting[] getSettings() {
         return toArray(concat(asRestSetting(get), asRestSetting(post),
                         asRestSetting(put), asRestSetting(delete),
-                        asRestSetting(head), asRestSetting(patch), asSubRestSetting(resource)),
+                        asRestSetting(head), asRestSetting(patch), asSubRestSetting(resources)),
                 RestSetting.class);
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/RestSubResourceSetting.java
Patch:
@@ -29,7 +29,7 @@ public String toString() {
                 .add("delete", delete)
                 .add("head", head)
                 .add("patch", patch)
-                .add("sub resource", resource)
+                .add("sub resources", resources)
                 .add("id", id)
                 .toString();
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/ContentHandler.java
Patch:
@@ -39,9 +39,9 @@ public ResponseHandler apply(final MocoConfig config) {
             return handler;
         }
 
-        Resource appliedReosurce = this.resource.apply(config);
-        if (appliedReosurce != this.resource) {
-            return new ContentHandler((ContentResource) appliedReosurce);
+        Resource appliedResource = this.resource.apply(config);
+        if (appliedResource != this.resource) {
+            return new ContentHandler((ContentResource) appliedResource);
         }
 
         return this;

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/RunnerFactory.java
Patch:
@@ -4,6 +4,7 @@
 import com.github.dreamhead.moco.runner.watcher.ShutdownMocoRunnerWatcher;
 import com.github.dreamhead.moco.runner.watcher.Watcher;
 import com.github.dreamhead.moco.runner.watcher.WatcherFactory;
+import com.google.common.collect.ImmutableList;
 
 import java.io.File;
 
@@ -46,7 +47,8 @@ private Runner createDynamicSettingRunner(final StartArgs startArgs) {
 
     private Runner createDynamicConfigurationRunner(final StartArgs startArgs) {
         String pathname = startArgs.getConfigurationFile().get();
-        Iterable<File> files = from(glob(pathname)).transform(filenameToFile());
+        ImmutableList<String> glob = glob(pathname);
+        Iterable<File> files = from(glob).transform(filenameToFile());
         final FileRunner fileRunner = createConfigurationFileRunner(files, startArgs);
         Watcher watcher = factory.createConfigurationWatcher(files, fileRunner);
         return new WatcherRunner(fileRunner, watcher);

File: moco-core/src/main/java/com/github/dreamhead/moco/util/Jsons.java
Patch:
@@ -64,9 +64,9 @@ public static <T> ImmutableList<T> toObjects(final InputStream stream, final Cla
             throw new RuntimeException(format("Unrecognized field [ %s ], please check!", e.getPropertyName()));
         } catch (JsonMappingException e) {
             logger.info("{} {}", e.getMessage(), e.getPathReference());
-            throw new RuntimeException(e);
+            throw new MocoException(e);
         } catch (IOException e) {
-            throw new RuntimeException(e);
+            throw new MocoException(e);
         } finally {
             closeQuietly(stream);
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/dumper/InternalMessageContent.java
Patch:
@@ -12,6 +12,9 @@ public class InternalMessageContent {
     private byte[] content;
     private Charset charset;
 
+    public InternalMessageContent() {
+    }
+
     public InternalMessageContent(byte[] content, Charset charset) {
         this.content = content;
         this.charset = charset;

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailoverExecutor.java
Patch:
@@ -73,7 +73,7 @@ private ImmutableList<Session> restoreSessions(final File file) {
         InputStream inputStream = null;
         try {
             inputStream = new FileInputStream(file);
-            List<Session> sessions = Jsons.toObject(inputStream, new TypeReference<List<Session>>() {});
+            List<Session> sessions = Jsons.toObjects(inputStream, Session.class);
             return copyOf(sessions);
         } catch (MocoException me) {
             logger.error("exception found", me);

File: moco-runner/src/test/java/com/github/dreamhead/moco/parser/GlobalSettingParserTest.java
Patch:
@@ -31,7 +31,7 @@ public void should_parse_settings_file() {
 
     @Test
     public void should_parse_settings_file_with_context() {
-        InputStream stream = getResourceAsStream("settings/context-settingss.json");
+        InputStream stream = getResourceAsStream("settings/context-settings.json");
         ImmutableList<GlobalSetting> globalSettings = parser.parse(stream);
 
         assertThat(globalSettings.get(0).getInclude(), is(join("src", "test", "resources", "settings", "foo.json")));

File: moco-runner/src/test/java/com/github/dreamhead/moco/runner/SettingRunnerTest.java
Patch:
@@ -45,7 +45,7 @@ public void should_run_with_setting() throws IOException {
 
     @Test
     public void should_run_with_setting_with_context() throws IOException {
-        stream = getResourceAsStream("settings/context-settingss.json");
+        stream = getResourceAsStream("settings/context-settings.json");
         runner = new SettingRunner(stream, createStartArgs(12306));
         runner.run();
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/watcher/Java7Watcher.java
Patch:
@@ -18,7 +18,7 @@ public Java7Watcher(final WatcherService service, final Function<File, Void> lis
     }
 
     @Override
-    public synchronized void start() {
+    public void start() {
         try {
             service.register(file, listener);
         } catch (IOException e) {

File: moco-core/src/main/java/com/github/dreamhead/moco/verification/BetweenVerification.java
Patch:
@@ -13,7 +13,7 @@ public BetweenVerification(final int min, final int max) {
 
     @Override
     protected boolean meet(final int size) {
-        return size >= min || size <= max;
+        return size >= min && size <= max;
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/Failover.java
Patch:
@@ -19,8 +19,8 @@ public HttpResponse failover(final HttpRequest request) {
         return executor.failover(request);
     }
 
-    public void onCompleteResponse(final HttpRequest request, final HttpResponse httpResponse) {
-        executor.onCompleteResponse(request, httpResponse);
+    public void onCompleteResponse(final HttpRequest request, final HttpResponse response) {
+        executor.onCompleteResponse(request, response);
     }
 
     public boolean isPlayback() {

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/DefaultRequestHit.java
Patch:
@@ -17,12 +17,12 @@ public class DefaultRequestHit extends AbstractMonitor implements RequestHit {
     private List<Request> requests = newArrayList();
 
     @Override
-    public void onMessageArrived(final Request request) {
+    public synchronized void onMessageArrived(final Request request) {
         this.requests.add(request);
     }
 
     @Override
-    public void onUnexpectedMessage(final Request request) {
+    public synchronized void onUnexpectedMessage(final Request request) {
         this.unexpectedRequests.add(request);
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/ActualSocketServer.java
Patch:
@@ -13,7 +13,8 @@
 import com.github.dreamhead.moco.setting.SocketSetting;
 import com.google.common.base.Optional;
 
-public final class ActualSocketServer extends BaseActualServer<SocketResponseSetting, ActualSocketServer> implements SocketServer {
+public final class ActualSocketServer extends BaseActualServer<SocketResponseSetting, ActualSocketServer>
+        implements SocketServer {
     private ActualSocketServer(final Optional<Integer> port, final MocoMonitor monitor) {
         super(port, monitor, new MocoConfig[0]);
     }

File: moco-core/src/test/java/com/github/dreamhead/moco/internal/ActualSocketServerTest.java
Patch:
@@ -12,7 +12,7 @@
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.local;
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.port;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 public class ActualSocketServerTest {
     private MocoSocketHelper helper;
@@ -83,7 +83,7 @@ public void should_merge_socket_servers_without_ports_for_both_server() throws E
         assertThat(newServer.getPort().isPresent(), is(false));
     }
 
-    private String line(String text) {
+    private String line(final String text) {
         return text + "\r\n";
     }
-}
\ No newline at end of file
+}

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoLogTest.java
Patch:
@@ -14,7 +14,9 @@
 import java.io.PrintStream;
 import java.nio.charset.Charset;
 
-import static com.github.dreamhead.moco.Moco.*;
+import static com.github.dreamhead.moco.Moco.by;
+import static com.github.dreamhead.moco.Moco.httpServer;
+import static com.github.dreamhead.moco.Moco.log;
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.port;
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.root;
 import static com.github.dreamhead.moco.Runner.running;

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoHttpMethodTest.java
Patch:
@@ -5,7 +5,8 @@
 
 import java.io.IOException;
 
-import static com.github.dreamhead.moco.Moco.*;
+import static com.github.dreamhead.moco.Moco.by;
+import static com.github.dreamhead.moco.Moco.uri;
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.remoteUrl;
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.root;
 import static com.github.dreamhead.moco.Runner.running;

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoMountTest.java
Patch:
@@ -10,7 +10,9 @@
 import java.io.InputStreamReader;
 
 import static com.github.dreamhead.moco.Moco.header;
-import static com.github.dreamhead.moco.MocoMount.*;
+import static com.github.dreamhead.moco.MocoMount.exclude;
+import static com.github.dreamhead.moco.MocoMount.include;
+import static com.github.dreamhead.moco.MocoMount.to;
 import static com.github.dreamhead.moco.Runner.running;
 import static com.github.dreamhead.moco.helper.RemoteTestUtils.remoteUrl;
 import static org.hamcrest.CoreMatchers.is;

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoRequestHitTest.java
Patch:
@@ -14,6 +14,8 @@
 import static com.github.dreamhead.moco.Moco.eq;
 import static com.github.dreamhead.moco.Moco.form;
 import static com.github.dreamhead.moco.Moco.httpServer;
+import static com.github.dreamhead.moco.Moco.httpsServer;
+import static com.github.dreamhead.moco.Moco.log;
 import static com.github.dreamhead.moco.Moco.pathResource;
 import static com.github.dreamhead.moco.Moco.uri;
 import static com.github.dreamhead.moco.MocoRequestHit.atLeast;

File: moco-core/src/test/java/com/github/dreamhead/moco/util/URLsTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 public class URLsTest {
     @Test

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/parser/HttpsArgsParser.java
Patch:
@@ -37,7 +37,6 @@ protected StartArgs parseArgs(final CommandLine cmd) {
         return httpsArgs().withPort(getPort(port)).withShutdownPort(getPort(shutdownPort)).withConfigurationFile(config).withSettings(globalSettings).withEnv(env).withHttpsArg(httpsArg(cmd)).build();
     }
 
-
     private HttpsArg httpsArg(final CommandLine cmd) {
         String https = cmd.getOptionValue("https");
         String keystore = cmd.getOptionValue("keystore");

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/ActualCookieAttribute.java
Patch:
@@ -4,5 +4,5 @@
 import io.netty.handler.codec.http.cookie.Cookie;
 
 public abstract class ActualCookieAttribute extends CookieAttribute {
-    public abstract void visit(final Cookie cookie);
+    public abstract void visit(Cookie cookie);
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/DomainCookieAttribute.java
Patch:
@@ -5,13 +5,13 @@
 public class DomainCookieAttribute extends ActualCookieAttribute {
     private final String domain;
 
-    public DomainCookieAttribute(final String domain) {
-        this.domain = domain;
+    public DomainCookieAttribute(final String actualDomain) {
+        this.domain = actualDomain;
     }
 
 
     @Override
-    public void visit(final Cookie cookie) {
+    public final void visit(final Cookie cookie) {
         cookie.setDomain(this.domain);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/HttpOnlyAttribute.java
Patch:
@@ -4,7 +4,7 @@
 
 public class HttpOnlyAttribute extends ActualCookieAttribute {
     @Override
-    public void visit(final Cookie cookie) {
+    public final void visit(final Cookie cookie) {
         cookie.setHttpOnly(true);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/PathCookieAttribute.java
Patch:
@@ -5,12 +5,12 @@
 public class PathCookieAttribute extends ActualCookieAttribute {
     private final String path;
 
-    public PathCookieAttribute(final String path) {
-        this.path = path;
+    public PathCookieAttribute(final String actualPath) {
+        this.path = actualPath;
     }
 
     @Override
-    public void visit(final Cookie cookie) {
+    public final void visit(final Cookie cookie) {
         cookie.setPath(path);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/cookie/SecureCookieAttribute.java
Patch:
@@ -4,7 +4,7 @@
 
 public class SecureCookieAttribute extends ActualCookieAttribute {
     @Override
-    public void visit(final Cookie cookie) {
+    public final void visit(final Cookie cookie) {
         cookie.setSecure(true);
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/BaseParser.java
Patch:
@@ -10,7 +10,7 @@
 
 public abstract class BaseParser<T extends Server> implements Parser<T> {
     protected abstract T createServer(final ImmutableList<SessionSetting> read,
-                                      final Optional<Integer> port, final MocoConfig[] configs);
+                                      final Optional<Integer> port, final MocoConfig... configs);
 
     private final CollectionReader reader;
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/SessionSetting.java
Patch:
@@ -37,7 +37,7 @@ private boolean isMount() {
     }
 
     private boolean isAnyResponse() {
-        return request == null && mount == null && proxy == null && redirectTo == null;
+        return request == null && mount == null && proxy == null && redirectTo == null && resource == null;
     }
 
     @Override

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/TextContainer.java
Patch:
@@ -18,7 +18,7 @@ public class TextContainer {
     private static final String TEMPLATE_NAME = "template";
     private String text;
     private String operation;
-    private Map<String, TextContainer> props;
+    private Map<String, TextContainer> props = ImmutableMap.of();
 
     protected TextContainer(final String text, final String operation,
                             final Map<String, TextContainer> props) {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/AbstractTextContainerDeserializer.java
Patch:
@@ -45,7 +45,7 @@ protected TextContainer textContainer(final JsonParser jp, final Deserialization
             }
         }
 
-        throw ctxt.mappingException(TextContainer.class, jp.getCurrentToken());
+        return (TextContainer)ctxt.handleUnexpectedToken(TextContainer.class, jp);
     }
 
     private TextContainer template(final JsonParser jp, final TextContainer.Builder builder) throws IOException {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/FileContainerDeserializer.java
Patch:
@@ -32,7 +32,7 @@ public FileContainer deserialize(final JsonParser jp, final DeserializationConte
             return asFileContainer(textContainer(jp, ctxt));
         }
 
-        throw ctxt.mappingException(TextContainer.class, currentToken);
+        return (FileContainer)ctxt.handleUnexpectedToken(FileContainer.class, jp);
     }
 
     private FileContainer toFileContainer(final JsonParser jp) throws IOException {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/LatencyContainerDeserializer.java
Patch:
@@ -26,7 +26,7 @@ public LatencyContainer deserialize(final JsonParser jp, final DeserializationCo
                     TimeUnit.valueOf(container.unit.toUpperCase() + 'S'));
         }
 
-        throw ctxt.mappingException(LatencyContainer.class, currentToken);
+        return (LatencyContainer)ctxt.handleUnexpectedToken(LatencyContainer.class, jp);
     }
 
     private static class InternalLatencyContainer {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/ProxyContainerDeserializer.java
Patch:
@@ -24,7 +24,7 @@ public ProxyContainer deserialize(final JsonParser jp, final DeserializationCont
             return container.toProxyContainer();
         }
 
-        throw ctxt.mappingException(ProxyContainer.class, currentToken);
+        return (ProxyContainer)ctxt.handleUnexpectedToken(ProxyContainer.class, jp);
     }
 
     private static class InternalProxyContainer {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/TextContainerDeserializer.java
Patch:
@@ -20,6 +20,6 @@ public TextContainer deserialize(final JsonParser jp, final DeserializationConte
             return textContainer(jp, ctxt);
         }
 
-        throw ctxt.mappingException(TextContainer.class, currentToken);
+        return (TextContainer)ctxt.handleUnexpectedToken(TextContainer.class, jp);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractResponseHandler.java
Patch:
@@ -6,7 +6,7 @@
 public abstract class AbstractResponseHandler implements ResponseHandler {
     @Override
     @SuppressWarnings("unchecked")
-    public final ResponseHandler apply(final MocoConfig config) {
+    public ResponseHandler apply(final MocoConfig config) {
         if (config.isFor(MocoConfig.RESPONSE_ID)) {
             return (ResponseHandler) config.apply(this);
         }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/HttpServerParser.java
Patch:
@@ -25,5 +25,4 @@ protected HttpServer createServer(final ImmutableList<SessionSetting> sessionSet
 
         return targetServer;
     }
-
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/ActualHttpServer.java
Patch:
@@ -30,7 +30,7 @@ public Optional<HttpsCertificate> getCertificate() {
         return certificate;
     }
 
-    public ActualHttpServer mergeHttpServer(final ActualHttpServer thatServer) {
+    public ActualHttpServer mergeServer(final ActualHttpServer thatServer) {
         ActualHttpServer newServer = newBaseServer(this.getPort().or(thatServer.getPort()),
                 this.certificate.or(thatServer.certificate));
         newServer.addSettings(this.getSettings());

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/ActualSocketServer.java
Patch:
@@ -30,7 +30,7 @@ protected SocketResponseSetting onRequestAttached(final RequestMatcher matcher)
         return baseSetting;
     }
 
-    public SocketServer mergeHttpServer(final ActualSocketServer thatServer) {
+    public SocketServer mergeServer(final ActualSocketServer thatServer) {
         ActualSocketServer newServer = newBaseServer(this.getPort().or(thatServer.getPort()));
         newServer.addSettings(this.getSettings());
         newServer.addSettings(thatServer.getSettings());

File: moco-runner/src/main/java/com/github/dreamhead/moco/MocoJsonRunner.java
Patch:
@@ -26,7 +26,7 @@ public static HttpsServer jsonHttpsServer(final Resource resource,
                                               final HttpsCertificate certificate) {
         checkNotNull(certificate, "Certificate should not be null");
         ActualHttpServer httpsServer = (ActualHttpServer)Moco.httpsServer(certificate);
-        return httpsServer.mergeHttpServer((ActualHttpServer)jsonHttpServer(
+        return httpsServer.mergeServer((ActualHttpServer)jsonHttpServer(
                 checkNotNull(resource, "resource should not be null")));
     }
 
@@ -35,7 +35,7 @@ public static HttpsServer jsonHttpsServer(final int port, final Resource resourc
         checkArgument(port > 0, "Port must be greater than zero");
         checkNotNull(certificate, "Certificate should not be null");
         ActualHttpServer httpsServer = (ActualHttpServer)Moco.httpsServer(port, certificate);
-        return httpsServer.mergeHttpServer((ActualHttpServer)jsonHttpServer(port,
+        return httpsServer.mergeServer((ActualHttpServer)jsonHttpServer(port,
                  checkNotNull(resource, "resource should not be null")));
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/HttpServerParser.java
Patch:
@@ -20,7 +20,7 @@ protected HttpServer createServer(final ImmutableList<SessionSetting> sessionSet
 
         for (SessionSetting session : sessionSettings) {
             logger.debug("Parse session: {}", session);
-            targetServer = targetServer.mergeHttpServer(session.newHttpServer(port, configs));
+            targetServer = targetServer.mergeServer(session.newHttpServer(port, configs));
         }
 
         return targetServer;

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/JsonRunner.java
Patch:
@@ -67,7 +67,7 @@ private SocketServer createSocketServer(final Iterable<? extends RunnerSetting>
 
     private SocketServer mergeServer(final SocketServer socketServer, final SocketServer parsedServer) {
         ActualSocketServer thisServer = (ActualSocketServer) socketServer;
-        return thisServer.mergeHttpServer((ActualSocketServer) parsedServer);
+        return thisServer.mergeServer((ActualSocketServer) parsedServer);
     }
 
     private HttpServer createHttpServer(final Iterable<? extends RunnerSetting> settings, final StartArgs startArgs) {
@@ -117,7 +117,7 @@ private void addConfig(final ImmutableList.Builder<MocoConfig> builder, final Op
 
     private HttpServer mergeServer(final HttpServer server, final HttpServer parsedServer) {
         ActualHttpServer thisServer = (ActualHttpServer) server;
-        return thisServer.mergeHttpServer((ActualHttpServer) parsedServer);
+        return thisServer.mergeServer((ActualHttpServer) parsedServer);
     }
 
     public static JsonRunner newJsonRunnerWithStreams(final Iterable<? extends InputStream> streams,

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpResponse.java
Patch:
@@ -35,8 +35,8 @@ public static DefaultHttpResponse newResponse(final FullHttpResponse response) {
         }
 
         return builder()
-                .withVersion(HttpProtocolVersion.versionOf(response.getProtocolVersion().text()))
-                .withStatus(response.getStatus().code())
+                .withVersion(HttpProtocolVersion.versionOf(response.protocolVersion().text()))
+                .withStatus(response.status().code())
                 .withHeaders(headerBuilder.build())
                 .withContent(content()
                         .withContent(new ByteBufInputStream(response.content()))

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -84,7 +84,7 @@ public static HttpServer httpServer(final int port, final MocoMonitor monitor, f
         checkArgument(port > 0, "Port must be greater than zero");
         return ActualHttpServer.createHttpServerWithMonitor(of(port),
                 ApiUtils.mergeMonitor(checkNotNull(monitor, "Monitor should not be null"),
-                        checkNotNull(monitor2, "Monitor should not be null"), monitors));
+                checkNotNull(monitor2, "Monitor should not be null"), monitors));
     }
 
     public static HttpServer httpServer(final MocoConfig... configs) {
@@ -142,9 +142,10 @@ public static SocketServer socketServer(final int port, final MocoMonitor monito
         checkArgument(port > 0, "Port must be greater than zero");
         return ActualSocketServer.createServerWithMonitor(of(port),
                 ApiUtils.mergeMonitor(checkNotNull(monitor, "Monitor should not be null"),
-                        checkNotNull(monitor2, "Monitor should not be null"), monitors));
+                checkNotNull(monitor2, "Monitor should not be null"), monitors));
     }
 
+
     public static MocoConfig context(final String context) {
         return new MocoContextConfig(checkNotNullOrEmpty(context, "Context should not be null"));
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/ApiUtils.java
Patch:
@@ -6,6 +6,7 @@
 import com.github.dreamhead.moco.RequestMatcher;
 import com.github.dreamhead.moco.ResponseHandler;
 import com.github.dreamhead.moco.handler.failover.DefaultFailoverExecutor;
+import com.github.dreamhead.moco.handler.failover.FailoverExecutor;
 import com.github.dreamhead.moco.matcher.ContainMatcher;
 import com.github.dreamhead.moco.matcher.EndsWithMatcher;
 import com.github.dreamhead.moco.matcher.MatchMatcher;
@@ -66,7 +67,7 @@ public ResponseHandler apply(final Resource content) {
         };
     }
 
-    public static DefaultFailoverExecutor failoverExecutor(final String file) {
+    public static FailoverExecutor failoverExecutor(final String file) {
         return new DefaultFailoverExecutor(new File(file));
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -138,7 +138,7 @@ public static HttpRequest newRequest(final FullHttpRequest request) {
         return builder()
                 .withVersion(HttpProtocolVersion.versionOf(request.getProtocolVersion().text()))
                 .withHeaders(collectHeaders(request.headers()))
-                .withMethod(request.getMethod().toString().toUpperCase())
+                .withMethod(HttpMethod.valueOf(request.getMethod().toString().toUpperCase()))
                 .withUri(decoder.path())
                 .withQueries(queries)
                 .withContent(toMessageContent(request))
@@ -218,8 +218,8 @@ public Builder withHeaders(final Map<String, String> headers) {
             return this;
         }
 
-        public Builder withMethod(final String method) {
-            this.method = HttpMethod.valueOf(method.toUpperCase());
+        public Builder withMethod(final HttpMethod method) {
+            this.method = method;
             return this;
         }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailoverExecutor.java
Patch:
@@ -1,14 +1,15 @@
 package com.github.dreamhead.moco.handler.failover;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectWriter;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.HttpResponse;
 import com.github.dreamhead.moco.MocoException;
 import com.github.dreamhead.moco.model.HttpRequestFailoverMatcher;
 import com.github.dreamhead.moco.model.Session;
+import com.github.dreamhead.moco.util.Jsons;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableList;
@@ -28,7 +29,6 @@
 public class DefaultFailoverExecutor implements FailoverExecutor {
     private static Logger logger = LoggerFactory.getLogger(DefaultFailoverExecutor.class);
 
-    private final TypeFactory factory = TypeFactory.defaultInstance();
     private final ObjectMapper mapper = new ObjectMapper();
     private final File file;
 
@@ -69,7 +69,7 @@ private Iterable<Session> toUniqueSessions(final Session targetSession, final Im
 
     private ImmutableList<Session> restoreSessions(final File file) {
         try {
-            List<Session> sessions = mapper.readValue(file, factory.constructCollectionType(List.class, Session.class));
+            List<Session> sessions = mapper.readValue(file, new TypeReference<List<Session>>() {});
             return copyOf(sessions);
         } catch (JsonMappingException jme) {
             logger.error("exception found", jme);

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -364,7 +364,7 @@ public static XPathRequestExtractor xpath(final String xpath) {
     }
 
     public static RequestMatcher xml(final String resource) {
-        return xml(text(checkNotNull(resource, "Resource should not be null")));
+        return xml(text(checkNotNullOrEmpty(resource, "Resource should not be null")));
     }
 
     public static RequestMatcher xml(final Resource resource) {
@@ -373,7 +373,7 @@ public static RequestMatcher xml(final Resource resource) {
     }
 
     public static RequestMatcher json(final String jsonText) {
-        return json(text(checkNotNull(jsonText, "Json should not be null")));
+        return json(text(checkNotNullOrEmpty(jsonText, "Json should not be null")));
     }
 
     public static RequestMatcher json(final Object pojo) {

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -312,7 +312,7 @@ public static ResponseHandler with(final MocoProcedure procedure) {
     }
 
     public static Resource uri(final String uri) {
-        return uriResource(checkNotNull(uri, "URI should not be null"));
+        return uriResource(checkNotNullOrEmpty(uri, "URI should not be null"));
     }
 
     public static Resource method(final String httpMethod) {

File: moco-core/src/test/java/com/github/dreamhead/moco/extractor/JsonPathRequestExtractorTest.java
Patch:
@@ -15,7 +15,7 @@
 public class JsonPathRequestExtractorTest {
 
     @Test
-    public void testDoExtractHttpRequest() {
+    public void should_extract_empty_content_as_absent() {
         JsonPathRequestExtractor unitUnderTest = new JsonPathRequestExtractor("$..account");
         HttpRequest request = new HttpRequest() {
 

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -6,6 +6,7 @@
 import com.github.dreamhead.moco.config.MocoFileRootConfig;
 import com.github.dreamhead.moco.config.MocoRequestConfig;
 import com.github.dreamhead.moco.config.MocoResponseConfig;
+import com.github.dreamhead.moco.extractor.ContentRequestExtractor;
 import com.github.dreamhead.moco.extractor.CookieRequestExtractor;
 import com.github.dreamhead.moco.extractor.FormRequestExtractor;
 import com.github.dreamhead.moco.extractor.HeaderRequestExtractor;
@@ -368,7 +369,7 @@ public static RequestMatcher xml(final String resource) {
 
     public static RequestMatcher xml(final Resource resource) {
         checkNotNull(resource, "Resource should not be null");
-        return new XmlRequestMatcher((RequestExtractor<byte[]>) extractor(resource.id()), resource);
+        return new XmlRequestMatcher((ContentRequestExtractor) extractor(resource.id()), resource);
     }
 
     public static RequestMatcher json(final String jsonText) {
@@ -381,7 +382,7 @@ public static RequestMatcher json(final Object pojo) {
 
     public static RequestMatcher json(final Resource resource) {
         checkNotNull(resource, "Json should not be null");
-        return new JsonRequestMatcher((RequestExtractor<byte[]>) extractor(resource.id()), resource);
+        return new JsonRequestMatcher((ContentRequestExtractor) extractor(resource.id()), resource);
     }
 
     public static ResponseHandler toJson(final Object pojo) {

File: moco-runner/src/main/java/com/github/dreamhead/moco/MocoJsonRunner.java
Patch:
@@ -47,5 +47,6 @@ private static InputStream toStream(final Resource resource) {
         return checkNotNull(resource, "resource should not be null").readFor(request).toInputStream();
     }
 
-    private MocoJsonRunner() {}
+    private MocoJsonRunner() {
+    }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/arg/HttpArgs.java
Patch:
@@ -3,7 +3,9 @@
 import com.github.dreamhead.moco.bootstrap.ServerType;
 
 public class HttpArgs extends StartArgs {
-    protected HttpArgs(final Integer port, final Integer shutdownPort, final String configurationFile, final String globalSettings, final String env) {
+    protected HttpArgs(final Integer port, final Integer shutdownPort,
+                       final String configurationFile, final String globalSettings,
+                       final String env) {
         super(ServerType.HTTP, port, shutdownPort, configurationFile, globalSettings, env, null);
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/mount/MountHandler.java
Patch:
@@ -44,7 +44,7 @@ private File targetFile(final HttpRequest request) {
 
     @Override
     protected MediaType getContentType(final HttpRequest request) {
-        return new FileContentType(targetFile(request).getName(), Optional.<Charset>absent()).getContentType();
+        return new FileContentType(targetFile(request).getName()).getContentType();
     }
 
     @Override

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/LatencyContainerDeserializer.java
Patch:
@@ -5,7 +5,6 @@
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.github.dreamhead.moco.parser.model.LatencyContainer;
-import com.github.dreamhead.moco.parser.model.TextContainer;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/ProxyContainerDeserializer.java
Patch:
@@ -5,7 +5,6 @@
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.github.dreamhead.moco.parser.model.ProxyContainer;
-import com.github.dreamhead.moco.parser.model.TextContainer;
 
 import java.io.IOException;
 
@@ -25,7 +24,7 @@ public ProxyContainer deserialize(final JsonParser jp, final DeserializationCont
             return container.toProxyContainer();
         }
 
-        throw ctxt.mappingException(TextContainer.class, currentToken);
+        throw ctxt.mappingException(ProxyContainer.class, currentToken);
     }
 
     private static class InternalProxyContainer {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/deserializer/LatencyContainerDeserializer.java
Patch:
@@ -26,7 +26,7 @@ public LatencyContainer deserialize(final JsonParser jp, final DeserializationCo
             return LatencyContainer.latencyWithUnit(container.duration, TimeUnit.valueOf(container.unit.toUpperCase() + 'S'));
         }
 
-        throw ctxt.mappingException(TextContainer.class, currentToken);
+        throw ctxt.mappingException(LatencyContainer.class, currentToken);
     }
 
     private static class InternalLatencyContainer {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/CompleteEventSetting.java
Patch:
@@ -20,7 +20,7 @@ public MocoEventAction createTrigger() {
         MocoEventAction action = doCreateAction();
 
         if (this.async) {
-            return Moco.async(action, Moco.latency(latency.getLatency(), latency.getUint()));
+            return Moco.async(action, Moco.latency(latency.getLatency(), latency.getUnit()));
         }
 
         return action;

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/DynamicResponseHandlerFactory.java
Patch:
@@ -93,7 +93,7 @@ private ResponseHandler createResponseHandler(String name, Object value) {
 
         if ("latency".equalsIgnoreCase(name)) {
             LatencyContainer container = LatencyContainer.class.cast(value);
-            return with(latency(container.getLatency(), container.getUint()));
+            return with(latency(container.getLatency(), container.getUnit()));
         }
 
         if (ProxyContainer.class.isInstance(value)) {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/SessionSetting.java
Patch:
@@ -123,7 +123,6 @@ private Resource redirectResource(TextContainer textContainer) {
             return template(textContainer.getText());
         }
 
-
         throw new IllegalArgumentException("Illegal resource" + textContainer);
     }
 

File: moco-core/src/test/java/com/github/dreamhead/moco/util/FileContentTypeTest.java
Patch:
@@ -34,6 +34,6 @@ public void should_have_charset_for_file() {
 	@Test
 	public void should_have_charset_for_css_file() {
 		FileContentType contentType = new FileContentType("result.css", Optional.<Charset>absent());
-		assertThat(contentType.getContentType(), is(MediaType.CSS_UTF_8));
+		assertThat(contentType.getContentType(), is(MediaType.create("text", "css")));
 	}
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/util/FileContentType.java
Patch:
@@ -13,7 +13,6 @@
 
 public final class FileContentType {
     public static final MediaType DEFAULT_CONTENT_TYPE_WITH_CHARSET = MediaType.PLAIN_TEXT_UTF_8;
-    private static final MediaType DEFAULT_CONTENT_TYPE = MediaType.create("text", "plain");
 
     private static final ImmutableMap<String, MediaType> contentTypeMap = ImmutableMap.<String, MediaType>builder()
             .put("png", MediaType.PNG)
@@ -43,7 +42,7 @@ public MediaType getContentType() {
         Optional<MediaType> optionalType = toContentType(Files.getFileExtension(filename));
         Optional<Charset> charset = toCharset(optionalType);
 
-        MediaType type = optionalType.or(DEFAULT_CONTENT_TYPE);
+        MediaType type = optionalType.or(DEFAULT_CONTENT_TYPE_WITH_CHARSET);
         if (charset.isPresent() && !type.charset().equals(charset)) {
             return type.withCharset(charset.get());
         }

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoTest.java
Patch:
@@ -650,7 +650,7 @@ public void should_return_default_content_type() throws Exception {
             @Override
             public void run() throws Exception {
                 Header header = Request.Get(root()).execute().returnResponse().getFirstHeader(HttpHeaders.CONTENT_TYPE);
-                assertThat(header.getValue(), is("text/plain; charset=UTF-8"));
+                assertThat(header.getValue(), is("text/plain; charset=utf-8"));
             }
         });
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractContentResponseHandler.java
Patch:
@@ -5,6 +5,7 @@
 import com.github.dreamhead.moco.model.MessageContent;
 import com.github.dreamhead.moco.util.FileContentType;
 import com.google.common.net.HttpHeaders;
+import com.google.common.net.MediaType;
 
 public abstract class AbstractContentResponseHandler extends AbstractResponseHandler {
     private final HeaderDetector detector = new HeaderDetector();
@@ -45,7 +46,7 @@ private MessageContent requireResponseContent(final Request request) {
         return content;
     }
 
-    protected String getContentType(final HttpRequest request) {
-        return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET.toString();
+    protected MediaType getContentType(final HttpRequest request) {
+        return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET;
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/ContentHandler.java
Patch:
@@ -7,6 +7,7 @@
 import com.github.dreamhead.moco.model.MessageContent;
 import com.github.dreamhead.moco.resource.ContentResource;
 import com.github.dreamhead.moco.resource.Resource;
+import com.google.common.net.MediaType;
 
 import static com.google.common.base.Optional.of;
 
@@ -23,7 +24,7 @@ protected MessageContent responseContent(final Request request) {
     }
 
     @Override
-    protected String getContentType(final HttpRequest request) {
+    protected MediaType getContentType(final HttpRequest request) {
         return resource.getContentType(request);
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/JsonResponseHandler.java
Patch:
@@ -20,7 +20,7 @@ protected MessageContent responseContent(final Request request) {
     }
 
     @Override
-    protected String getContentType(HttpRequest request) {
-        return MediaType.create("application", "json").withCharset(content.getCharset()).toString();
+    protected MediaType getContentType(HttpRequest request) {
+        return MediaType.create("application", "json").withCharset(content.getCharset());
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/mount/MountHandler.java
Patch:
@@ -7,6 +7,7 @@
 import com.github.dreamhead.moco.resource.reader.FileResourceReader;
 import com.github.dreamhead.moco.util.FileContentType;
 import com.google.common.base.Optional;
+import com.google.common.net.MediaType;
 
 import java.io.File;
 import java.nio.charset.Charset;
@@ -42,8 +43,8 @@ private File targetFile(final HttpRequest request) {
     }
 
     @Override
-    protected String getContentType(final HttpRequest request) {
-        return new FileContentType(targetFile(request).getName(), Optional.<Charset>absent()).getContentType().toString();
+    protected MediaType getContentType(final HttpRequest request) {
+        return new FileContentType(targetFile(request).getName(), Optional.<Charset>absent()).getContentType();
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/Content.java
Patch:
@@ -1,7 +1,8 @@
 package com.github.dreamhead.moco.resource;
 
 import com.github.dreamhead.moco.HttpRequest;
+import com.google.common.net.MediaType;
 
 public interface Content {
-    String getContentType(final HttpRequest request);
+    MediaType getContentType(final HttpRequest request);
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/ContentResource.java
Patch:
@@ -2,13 +2,14 @@
 
 import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.resource.reader.ContentResourceReader;
+import com.google.common.net.MediaType;
 
 public class ContentResource extends Resource implements Content {
     public ContentResource(final Identifiable identifiable, final ResourceConfigApplier configApplier, ContentResourceReader reader) {
         super(identifiable, configApplier, reader);
     }
 
-    public String getContentType(final HttpRequest request) {
+    public MediaType getContentType(final HttpRequest request) {
         return ((ContentResourceReader)reader).getContentType(request);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/ResourceFactory.java
Patch:
@@ -10,6 +10,7 @@
 import com.github.dreamhead.moco.util.FileContentType;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.net.MediaType;
 
 import java.nio.charset.Charset;
 
@@ -21,8 +22,8 @@ public class ResourceFactory {
     public static ContentResource textResource(final String text) {
         return contentResource(id("text"), DO_NOTHING_APPLIER, new ContentResourceReader() {
             @Override
-            public String getContentType(final HttpRequest request) {
-                return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET.toString();
+            public MediaType getContentType(final HttpRequest request) {
+                return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET;
             }
 
             @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/AbstractFileResourceReader.java
Patch:
@@ -6,6 +6,7 @@
 import com.github.dreamhead.moco.resource.Resource;
 import com.github.dreamhead.moco.util.FileContentType;
 import com.google.common.base.Optional;
+import com.google.common.net.MediaType;
 
 import java.nio.charset.Charset;
 
@@ -39,9 +40,9 @@ private MessageContent asMessageContent(final byte[] content) {
     }
 
     @Override
-    public String getContentType(final HttpRequest request) {
+    public MediaType getContentType(final HttpRequest request) {
         MessageContent messageContent = this.filename.readFor(of(request));
         String filename = messageContent.toString();
-        return new FileContentType(filename, charset).getContentType().toString();
+        return new FileContentType(filename, charset).getContentType();
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -7,6 +7,7 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
+import com.google.common.net.MediaType;
 import freemarker.cache.StringTemplateLoader;
 import freemarker.core.ParseException;
 import freemarker.template.*;
@@ -90,7 +91,7 @@ public Object transformEntry(String key, Variable value) {
     }
 
     @Override
-    public String getContentType(final HttpRequest request) {
+    public MediaType getContentType(final HttpRequest request) {
         return template.getContentType(request);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractContentResponseHandler.java
Patch:
@@ -46,6 +46,6 @@ private MessageContent requireResponseContent(final Request request) {
     }
 
     protected String getContentType(final HttpRequest request) {
-        return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET;
+        return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET.toString();
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/mount/MountHandler.java
Patch:
@@ -43,7 +43,7 @@ private File targetFile(final HttpRequest request) {
 
     @Override
     protected String getContentType(final HttpRequest request) {
-        return new FileContentType(targetFile(request).getName(), Optional.<Charset>absent()).getContentType();
+        return new FileContentType(targetFile(request).getName(), Optional.<Charset>absent()).getContentType().toString();
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/ResourceFactory.java
Patch:
@@ -22,7 +22,7 @@ public static ContentResource textResource(final String text) {
         return contentResource(id("text"), DO_NOTHING_APPLIER, new ContentResourceReader() {
             @Override
             public String getContentType(final HttpRequest request) {
-                return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET;
+                return FileContentType.DEFAULT_CONTENT_TYPE_WITH_CHARSET.toString();
             }
 
             @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/AbstractFileResourceReader.java
Patch:
@@ -42,6 +42,6 @@ private MessageContent asMessageContent(final byte[] content) {
     public String getContentType(final HttpRequest request) {
         MessageContent messageContent = this.filename.readFor(of(request));
         String filename = messageContent.toString();
-        return new FileContentType(filename, charset).getContentType();
+        return new FileContentType(filename, charset).getContentType().toString();
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -23,7 +23,7 @@
 import static com.google.common.collect.ImmutableMap.copyOf;
 
 public class TemplateResourceReader implements ContentResourceReader {
-    private static final Version CURRENT_VERSION = Configuration.VERSION_2_3_22;
+    private static final Version CURRENT_VERSION = Configuration.getVersion();
     private static final Logger logger = LoggerFactory.getLogger(TemplateResourceReader.class);
     private static final String TEMPLATE_NAME = "template";
 

File: moco-core/src/main/java/com/github/dreamhead/moco/dumper/HttpDumpers.java
Patch:
@@ -30,7 +30,8 @@ private static boolean isText(final String type) {
             return mediaType.is(MediaType.ANY_TEXT_TYPE)
                     || mediaType.subtype().endsWith("javascript")
                     || mediaType.subtype().endsWith("json")
-                    || mediaType.subtype().endsWith("xml");
+                    || mediaType.subtype().endsWith("xml")
+                    || mediaType.is(MediaType.FORM_DATA);
         } catch (Exception e) {
             return false;
         }

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoLogTest.java
Patch:
@@ -51,7 +51,7 @@ public void run() throws Exception {
         });
 
         String actual = Files.toString(file, Charset.defaultCharset());
-        assertThat(actual, containsString("0XCAFE"));
+        assertThat(actual, containsString("0XBABE"));
         assertThat(actual, containsString("0XCAFE"));
     }
 
@@ -69,7 +69,7 @@ public void run() throws Exception {
         });
 
         String actual = Files.toString(file, Charset.defaultCharset());
-        assertThat(actual, containsString("0XCAFE"));
+        assertThat(actual, containsString("0XBABE"));
         assertThat(actual, containsString("0XCAFE"));
     }
 
@@ -110,7 +110,7 @@ public void run() throws Exception {
         });
 
         String actual = Files.toString(file, Charset.defaultCharset());
-        assertThat(actual, containsString("0XCAFE"));
+        assertThat(actual, containsString("0XBABE"));
         assertThat(actual, containsString("0XCAFE"));
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -329,7 +329,7 @@ public static RequestMatcher json(final Resource resource) {
     }
 
     public static ResponseHandler toJson(Object pojo) {
-        return AndResponseHandler.and(new JsonResponseHandler(pojo), header(HttpHeaders.CONTENT_TYPE, "application/json"));
+        return new JsonResponseHandler(checkNotNull(pojo, "Json object should not be null"));
     }
 
     public static JsonPathRequestExtractor jsonPath(final String jsonPath) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -119,7 +119,7 @@ public static Builder builder() {
         return new Builder();
     }
 
-    private static MessageContent contentToString(FullHttpRequest request) {
+    private static MessageContent toMessageContent(FullHttpRequest request) {
         long contentLength = HttpHeaders.getContentLength(request, -1);
         if (contentLength <= 0) {
             return content().build();
@@ -138,7 +138,7 @@ public static HttpRequest newRequest(FullHttpRequest request) {
                 .withMethod(request.getMethod().toString().toUpperCase())
                 .withUri(decoder.path())
                 .withQueries(queries)
-                .withContent(contentToString(request))
+                .withContent(toMessageContent(request))
                 .build();
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/parser/HttpArgsParser.java
Patch:
@@ -30,7 +30,7 @@ protected StartArgs parseArgs(final CommandLine cmd) {
         }
 
         if (cmd.getArgs().length != 1) {
-            throw new ParseArgException("only one args allowed");
+            throw new ParseArgException("only one arg not allowed");
         }
 
         return httpArgs().withPort(getPort(port)).withShutdownPort(getPort(shutdownPort)).withConfigurationFile(config).withSettings(globalSettings).withEnv(env).build();

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/parser/HttpsArgsParser.java
Patch:
@@ -28,7 +28,7 @@ protected StartArgs parseArgs(final CommandLine cmd) {
         }
 
         if (cmd.getArgs().length != 1) {
-            throw new ParseArgException("only one args allowed");
+            throw new ParseArgException("only one arg not allowed");
         }
 
         return httpsArgs().withPort(getPort(port)).withShutdownPort(getPort(shutdownPort)).withConfigurationFile(config).withSettings(globalSettings).withEnv(env).withHttpsArg(httpsArg(cmd)).build();

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/parser/SocketArgsParser.java
Patch:
@@ -20,7 +20,7 @@ protected StartArgs parseArgs(final CommandLine cmd) {
         }
 
         if (cmd.getArgs().length != 1) {
-            throw new ParseArgException("only one args allowed");
+            throw new ParseArgException("only one arg not allowed");
         }
 
         return socketArgs().withPort(getPort(port)).withShutdownPort(getPort(shutdownPort)).withConfigurationFile(config).build();

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoGlobalResponseTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco;
 
+import com.google.common.net.HttpHeaders;
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.fluent.Request;
@@ -25,14 +26,14 @@ public class MocoGlobalResponseTest {
 
     @Test
     public void should_return_all_response_for_version_with_header() throws Exception {
-        server = httpServer(port(), response(header("Content-Type", "text/plain")));
+        server = httpServer(port(), response(header(HttpHeaders.CONTENT_TYPE, "text/plain")));
         server.response(version(VERSION_1_0));
 
         running(server, new Runnable() {
             @Override
             public void run() throws Exception {
                 HttpResponse response = Request.Get(root()).execute().returnResponse();
-                Header header = response.getFirstHeader("Content-Type");
+                Header header = response.getFirstHeader(HttpHeaders.CONTENT_TYPE);
                 assertThat(header.getValue(), is("text/plain"));
             }
         });

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoEndsWithTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco;
 
+import com.google.common.net.HttpHeaders;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -28,7 +29,7 @@ public void should_match_text() throws IOException {
     public void should_match_header() throws IOException {
         runWithConfiguration("ends_with.json");
 
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/json")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/json")), is("header_match"));
     }
 
     @Test

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoExistTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco;
 
+import com.google.common.net.HttpHeaders;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -27,8 +28,8 @@ public void should_not_exist_text() throws IOException {
     public void should_match_header() throws IOException {
         runWithConfiguration("exist.json");
 
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/json")), is("header_match"));
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/xml")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/json")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/xml")), is("header_match"));
     }
 
     @Test

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoMatchTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco;
 
+import com.google.common.net.HttpHeaders;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -35,8 +36,8 @@ public void should_match_method() throws IOException {
     public void should_match_header() throws IOException {
         runWithConfiguration("match.json");
 
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/json")), is("header_match"));
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/xml")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/json")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/xml")), is("header_match"));
     }
 
     @Test

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoStartsWithTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco;
 
+import com.google.common.net.HttpHeaders;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -28,8 +29,8 @@ public void should_match_text() throws IOException {
     public void should_match_header() throws IOException {
         runWithConfiguration("starts_with.json");
 
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/json")), is("header_match"));
-        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of("Content-type", "application/xml")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/json")), is("header_match"));
+        assertThat(helper.getWithHeader(remoteUrl("/header-match"), of(HttpHeaders.CONTENT_TYPE, "application/xml")), is("header_match"));
     }
 
     @Test

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/JsonRunner.java
Patch:
@@ -12,6 +12,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableList;
+import com.google.common.net.HttpHeaders;
 
 import java.io.InputStream;
 
@@ -64,7 +65,7 @@ private SocketServer mergeServer(SocketServer socketServer, SocketServer parsedS
 
     private HttpServer createHttpServer(Iterable<? extends RunnerSetting> settings, StartArgs startArgs) {
         HttpServer server = createBaseHttpServer(settings, startArgs);
-        server.request(by(uri("/favicon.ico"))).response(with(pathResource("favicon.png")), header("Content-Type", "image/png"));
+        server.request(by(uri("/favicon.ico"))).response(with(pathResource("favicon.png")), header(HttpHeaders.CONTENT_TYPE, "image/png"));
         return server;
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/SettingRunner.java
Patch:
@@ -52,7 +52,6 @@ public boolean apply(GlobalSetting globalSetting) {
         };
     }
 
-
     private Function<GlobalSetting, RunnerSetting> toRunnerSetting() {
         return new Function<GlobalSetting, RunnerSetting>() {
             @Override

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/StandaloneRunner.java
Patch:
@@ -31,7 +31,7 @@ private Runner createRunner(final Server server) {
             return Runner.runner((SocketServer) server);
         }
 
-        throw new IllegalArgumentException("Unknown Server");
+        throw new IllegalArgumentException("Unknown server type:" + server.getClass().getName());
     }
 
     public void stop() {

File: moco-core/src/main/java/com/github/dreamhead/moco/dumper/HttpDumpers.java
Patch:
@@ -24,7 +24,7 @@ private static String contentForDump(HttpMessage message) {
     }
 
     private static boolean isText(String type) {
-        return type == null || type.startsWith("text") || type.endsWith("javascript") || type.endsWith("json");
+        return type == null || type.startsWith("text") || type.endsWith("javascript") || type.endsWith("json") || type.endsWith("xml");
     }
 
     private static long getContentLength(HttpMessage response, long defaultValue) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/MessageContent.java
Patch:
@@ -22,8 +22,8 @@ public byte[] getContent() {
         return content;
     }
 
-    public Optional<Charset> getCharset() {
-        return charset;
+    public Charset getCharset() {
+        return charset.or(Charset.defaultCharset());
     }
 
     public boolean hasContent() {
@@ -32,7 +32,7 @@ public boolean hasContent() {
 
     @Override
     public String toString() {
-        return new String(content, charset.or(Charset.defaultCharset()));
+        return new String(content, getCharset());
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -45,7 +45,7 @@ public TemplateResourceReader(ContentResource template, ImmutableMap<String, ? e
     @Override
     public MessageContent readFor(final Optional<? extends Request> request) {
         if (!request.isPresent()) {
-            throw new IllegalArgumentException("Request is required to read template");
+            throw new IllegalArgumentException("Request is required to render template");
         }
 
         StringTemplateLoader templateLoader = new StringTemplateLoader();
@@ -71,10 +71,10 @@ public MessageContent readFor(final Optional<? extends Request> request) {
         }
     }
 
-    private Configuration createConfiguration(StringTemplateLoader templateLoader, Optional<Charset> charset) {
+    private Configuration createConfiguration(StringTemplateLoader templateLoader, Charset charset) {
         Configuration cfg = new Configuration(CURRENT_VERSION);
         cfg.setObjectWrapper(new DefaultObjectWrapperBuilder(CURRENT_VERSION).build());
-        cfg.setDefaultEncoding(charset.or(Charset.defaultCharset()).name());
+        cfg.setDefaultEncoding(charset.name());
         cfg.setTemplateLoader(templateLoader);
         return cfg;
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -349,19 +349,19 @@ public static ContentResource pathResource(final String filename) {
     }
 
     public static ContentResource pathResource(final String filename, Charset charset) {
-        return classpathFileResource(checkNotNullOrEmpty(filename, "Filename should not be null"), of(charset));
+        return classpathFileResource(checkNotNullOrEmpty(filename, "Filename should not be null"), of(checkNotNull(charset, "Charset should not be null")));
     }
 
     public static Resource version(final Resource resource) {
         return versionResource(checkNotNull(resource, "Version should not be null"));
     }
 
     public static Resource version(final String version) {
-        return version(HttpProtocolVersion.versionOf(checkNotNullOrEmpty(version, "Version should not be null")));
+        return versionResource(HttpProtocolVersion.versionOf(checkNotNullOrEmpty(version, "Version should not be null")));
     }
 
     public static Resource version(final HttpProtocolVersion version) {
-        return version(text((checkNotNull(version, "Version should not be null")).text()));
+        return versionResource(checkNotNull(version, "Version should not be null"));
     }
 
     public static ResponseHandler status(final int code) {

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/BaseActualServer.java
Patch:
@@ -8,6 +8,7 @@
 
 import java.util.List;
 
+import static com.github.dreamhead.moco.internal.InternalApis.context;
 import static com.github.dreamhead.moco.util.Configs.configItem;
 import static com.github.dreamhead.moco.util.Configs.configItems;
 import static com.google.common.base.Optional.of;
@@ -38,8 +39,8 @@ public boolean match(final Request request) {
             @Override
             @SuppressWarnings("unchecked")
             public RequestMatcher doApply(final MocoConfig config) {
-                if (config.isFor(MocoConfig.REQUEST_ID)) {
-                    return (RequestMatcher)config.apply(anyRequest());
+                if (config.isFor(MocoConfig.URI_ID)) {
+                    return context((String) config.apply(""));
                 }
 
                 return this;

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/Bootstrap.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco.bootstrap;
 
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.bootstrap.tasks.*;
 import com.google.common.collect.ImmutableMap;
 import org.slf4j.Logger;

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/tasks/StartTask.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.bootstrap.tasks;
 
 import com.github.dreamhead.moco.bootstrap.BootstrapTask;
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.bootstrap.parser.HttpArgsParser;
 import com.github.dreamhead.moco.bootstrap.parser.StartArgsParser;
 import com.github.dreamhead.moco.runner.Runner;

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/FileRunner.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.dreamhead.moco.runner;
 
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 
 import java.io.File;
 import java.io.FileInputStream;

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/JsonRunner.java
Patch:
@@ -4,7 +4,7 @@
 import com.github.dreamhead.moco.MocoConfig;
 import com.github.dreamhead.moco.Server;
 import com.github.dreamhead.moco.SocketServer;
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.internal.ActualHttpServer;
 import com.github.dreamhead.moco.internal.ActualSocketServer;
 import com.github.dreamhead.moco.parser.HttpServerParser;

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/RunnerFactory.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.dreamhead.moco.runner;
 
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.runner.watcher.MocoRunnerWatcher;
 import com.github.dreamhead.moco.runner.watcher.MonitorFactory;
 import com.google.common.base.Optional;

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/SettingRunner.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.dreamhead.moco.runner;
 
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.parser.GlobalSettingParser;
 import com.github.dreamhead.moco.parser.model.GlobalSetting;
 import com.google.common.base.Function;

File: moco-runner/src/test/java/com/github/dreamhead/moco/AbstractMocoStandaloneTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco;
 
 import com.github.dreamhead.moco.bootstrap.ServerType;
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.helper.MocoTestHelper;
 import com.github.dreamhead.moco.runner.JsonRunner;
 import com.google.common.collect.ImmutableList;

File: moco-runner/src/test/java/com/github/dreamhead/moco/bootstrap/StartArgsTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco.bootstrap;
 
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.bootstrap.parser.HttpsArgsParser;
 import com.github.dreamhead.moco.bootstrap.parser.SocketArgsParser;
 import com.github.dreamhead.moco.bootstrap.parser.StartArgsParser;

File: moco-runner/src/test/java/com/github/dreamhead/moco/runner/DynamicConfigurationRunnerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.runner;
 
 import com.github.dreamhead.moco.bootstrap.ServerType;
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;

File: moco-runner/src/test/java/com/github/dreamhead/moco/runner/DynamicSettingRunnerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.runner;
 
 import com.github.dreamhead.moco.bootstrap.ServerType;
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import org.apache.commons.io.FilenameUtils;
 import org.junit.Rule;
 import org.junit.Test;

File: moco-runner/src/test/java/com/github/dreamhead/moco/runner/SettingRunnerTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.After;
 import org.junit.Test;
 
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import com.github.dreamhead.moco.helper.MocoTestHelper;
 
 public class SettingRunnerTest {

File: moco-runner/src/test/java/com/github/dreamhead/moco/runner/ShutdownMonitorRunnerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dreamhead.moco.bootstrap.ServerType;
 import com.github.dreamhead.moco.bootstrap.tasks.ShutdownTask;
-import com.github.dreamhead.moco.bootstrap.StartArgs;
+import com.github.dreamhead.moco.bootstrap.arg.StartArgs;
 import org.apache.http.conn.HttpHostConnectException;
 import org.junit.Before;
 import org.junit.Test;

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/Bootstrap.java
Patch:
@@ -10,7 +10,7 @@ public class Bootstrap implements BootstrapTask {
     private static final String DEFAULT_SHUTDOWN_KEY = "_SHUTDOWN_MOCO_KEY";
 
     private final ImmutableMap<String, BootstrapTask> tasks = ImmutableMap.<String, BootstrapTask>builder()
-            .put("start", new StartTask(DEFAULT_SHUTDOWN_KEY, ServerType.HTTP))
+            .put("start", new StartTask(DEFAULT_SHUTDOWN_KEY))
             .put("shutdown", new ShutdownTask(DEFAULT_SHUTDOWN_KEY))
             .put("http", new HttpTask(DEFAULT_SHUTDOWN_KEY))
             .put("https", new HttpsTask(DEFAULT_SHUTDOWN_KEY))

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/tasks/HttpTask.java
Patch:
@@ -8,12 +8,12 @@
 
 public class HttpTask extends StartTask {
     public HttpTask(String shutdownKey) {
-        super(shutdownKey, ServerType.HTTP);
+        super(shutdownKey);
     }
 
     @Override
     protected Runner createRunner(String[] args) {
-        StartArgs startArgs = parse(type, args);
+        StartArgs startArgs = parse(ServerType.HTTP, args);
         return factory.createRunner(startArgs);
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/Bootstrap.java
Patch:
@@ -12,9 +12,9 @@ public class Bootstrap implements BootstrapTask {
     private final ImmutableMap<String, BootstrapTask> tasks = ImmutableMap.<String, BootstrapTask>builder()
             .put("start", new StartTask(DEFAULT_SHUTDOWN_KEY, ServerType.HTTP))
             .put("shutdown", new ShutdownTask(DEFAULT_SHUTDOWN_KEY))
-            .put("http", new HttpTask(DEFAULT_SHUTDOWN_KEY, ServerType.HTTP))
-            .put("https", new HttpsTask(DEFAULT_SHUTDOWN_KEY, ServerType.HTTPS))
-            .put("socket", new SocketTask(DEFAULT_SHUTDOWN_KEY, ServerType.SOCKET))
+            .put("http", new HttpTask(DEFAULT_SHUTDOWN_KEY))
+            .put("https", new HttpsTask(DEFAULT_SHUTDOWN_KEY))
+            .put("socket", new SocketTask(DEFAULT_SHUTDOWN_KEY))
             .put("version", new VersionTask())
             .build();
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/tasks/HttpTask.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.dreamhead.moco.bootstrap.ServerType;
 
 public class HttpTask extends StartTask {
-    public HttpTask(String shutdownKey, ServerType type) {
-        super(shutdownKey, type);
+    public HttpTask(String shutdownKey) {
+        super(shutdownKey, ServerType.HTTP);
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/tasks/HttpsTask.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.dreamhead.moco.bootstrap.ServerType;
 
 public class HttpsTask extends StartTask {
-    public HttpsTask(String shutdownKey, ServerType type) {
-        super(shutdownKey, type);
+    public HttpsTask(String shutdownKey) {
+        super(shutdownKey, ServerType.HTTPS);
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/tasks/SocketTask.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.dreamhead.moco.bootstrap.ServerType;
 
 public class SocketTask extends StartTask {
-    public SocketTask(String shutdownKey, ServerType type) {
-        super(shutdownKey, type);
+    public SocketTask(String shutdownKey) {
+        super(shutdownKey, ServerType.SOCKET);
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -53,7 +53,7 @@ public byte[] readFor(Optional<HttpRequest> request) {
             template.process(variables(request.get()), writer);
             return stream.toByteArray();
         } catch (ParseException e) {
-            logger.info("Template is {}", templateSource);
+            logger.error("Fail to parse template: {}", templateSource);
             throw new RuntimeException(e);
         } catch (IOException e) {
             throw new RuntimeException(e);

File: moco-core/src/main/java/com/github/dreamhead/moco/HttpProtocolVersion.java
Patch:
@@ -12,7 +12,7 @@ public enum HttpProtocolVersion {
     VERSION_1_0("HTTP/1.0"),
     VERSION_1_1("HTTP/1.1");
 
-    private String text;
+    private final String text;
 
     private HttpProtocolVersion(String text) {
         this.text = text;

File: moco-core/src/main/java/com/github/dreamhead/moco/VerificationData.java
Patch:
@@ -11,7 +11,7 @@ public class VerificationData {
     private final RequestMatcher matcher;
     private final String mismatchFormat;
 
-    public VerificationData(ImmutableList<HttpRequest> requests, RequestMatcher matcher, String mismatchFormat) {
+    public VerificationData(final ImmutableList<HttpRequest> requests, final RequestMatcher matcher, final String mismatchFormat) {
         this.requests = requests;
         this.matcher = matcher;
         this.mismatchFormat = mismatchFormat;

File: moco-core/src/main/java/com/github/dreamhead/moco/VerificationException.java
Patch:
@@ -1,9 +1,7 @@
 package com.github.dreamhead.moco;
 
 public class VerificationException extends RuntimeException {
-    public VerificationException() {
-        super();
-    }
+    public VerificationException() {}
 
     public VerificationException(final String message) {
         super(message);

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoEventTest.java
Patch:
@@ -127,7 +127,7 @@ public void run() throws Exception {
     }
 
     @Test
-    public void should_send_post_request_to_target_on_complete_asyc_after_awhile() throws Exception {
+    public void should_send_post_request_to_target_on_complete_async_after_awhile() throws Exception {
         final ResponseHandler handler = mock(ResponseHandler.class);
         server.request(by(uri("/target")), by("content")).response(handler);
         server.request(by(uri("/event"))).response("event").on(complete(async(post(remoteUrl("/target"), text("content")), latency(1000))));

File: moco-core/src/main/java/com/github/dreamhead/moco/matcher/AbstractOperatorMatcher.java
Patch:
@@ -8,7 +8,8 @@
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 
-import static com.google.common.collect.Iterables.any;
+import static com.google.common.base.Predicates.notNull;
+import static com.google.common.collect.FluentIterable.from;
 import static com.google.common.collect.Lists.newArrayList;
 
 public abstract class AbstractOperatorMatcher<T> implements RequestMatcher {
@@ -38,7 +39,7 @@ public boolean match(final HttpRequest request) {
 
         if (target instanceof String[]) {
             String[] contents = (String[])target;
-            return any(newArrayList(contents), predicate);
+            return from(newArrayList(contents)).filter(notNull()).anyMatch(predicate);
         }
 
         return false;

File: moco-core/src/main/java/com/github/dreamhead/moco/matcher/EqRequestMatcher.java
Patch:
@@ -14,7 +14,7 @@ public EqRequestMatcher(final RequestExtractor<T> extractor, final Resource expe
         super(extractor, expected, new Predicate<String>() {
             @Override
             public boolean apply(String input) {
-                return input != null && Arrays.equals(input.getBytes(), expected.readFor(Optional.<HttpRequest>absent()));
+                return Arrays.equals(input.getBytes(), expected.readFor(Optional.<HttpRequest>absent()));
             }
         });
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/HttpsCertificate.java
Patch:
@@ -36,7 +36,7 @@ public static HttpsCertificate fileCertificate(String fileName, String keyStoreP
         try {
             return new HttpsCertificate(new FileInputStream(fileName), keyStorePassword, certPassword);
         } catch (FileNotFoundException e) {
-            throw new Error("Cannot load certificate from file " + fileName);
+            throw new RuntimeException("Cannot load certificate from file " + fileName);
         }
     }
 }

File: moco-runner/src/test/java/com/github/dreamhead/moco/MocoTemplateStandaloneTest.java
Patch:
@@ -49,7 +49,9 @@ public void should_return_header_from_template() throws IOException {
     @Test
     public void should_return_cookie_from_template() throws IOException {
         runWithConfiguration("template.json");
-        Request.Get(remoteUrl("/cookie_template")).execute();
+        int status = helper.getForStatus(remoteUrl("/cookie_template"));
+        assertThat(status, is(302));
+
         String content = helper.get(remoteUrl("/cookie_template"));
         assertThat(content, is("GET"));
     }

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoTest.java
Patch:
@@ -394,8 +394,8 @@ public void should_ends_with_for_resource() throws Exception {
         running(server, new Runnable() {
             @Override
             public void run() throws Exception {
-                assertThat(helper.getWithHeader(root(), of("foo", "barA")), is("bar"));
-                assertThat(helper.getWithHeader(root(), of("foo", "barB")), is("bar"));
+                assertThat(helper.getWithHeader(root(), of("foo", "Abar")), is("bar"));
+                assertThat(helper.getWithHeader(root(), of("foo", "Bbar")), is("bar"));
             }
         });
     }

File: moco-core/src/test/java/com/github/dreamhead/moco/helper/MocoTestHelper.java
Patch:
@@ -7,7 +7,6 @@
 import org.apache.http.StatusLine;
 import org.apache.http.client.fluent.Content;
 import org.apache.http.client.fluent.Request;
-import org.apache.http.client.fluent.Response;
 
 import java.io.IOException;
 import java.io.InputStream;

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/FormsRequestExtractor.java
Patch:
@@ -18,7 +18,7 @@
 import static com.google.common.collect.ImmutableMap.copyOf;
 import static com.google.common.collect.Maps.newHashMap;
 
-public class FormsRequestExtractor implements RequestExtractor {
+public class FormsRequestExtractor implements RequestExtractor<ImmutableMap<String, String>> {
     public Optional<ImmutableMap<String, String>> extract(HttpRequest request) {
 
         HttpPostRequestDecoder decoder = null;

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DefaultHttpRequest.java
Patch:
@@ -108,6 +108,7 @@ public String toString() {
                 .add("uri", this.uri)
                 .add("version", this.version)
                 .add("method", this.method)
+                .add("queries", this.queries)
                 .add("headers", this.headers)
                 .add("content", this.content)
                 .toString();

File: moco-core/src/main/java/com/github/dreamhead/moco/matcher/EqRequestMatcher.java
Patch:
@@ -15,7 +15,7 @@ public EqRequestMatcher(final RequestExtractor<T> extractor, final Resource expe
         super(extractor, new Predicate<String>() {
             @Override
             public boolean apply(String input) {
-                return Arrays.equals(input.getBytes(), expected.readFor(null));
+                return input != null && Arrays.equals(input.getBytes(), expected.readFor(null));
             }
         });
         this.expected = expected;

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailover.java
Patch:
@@ -7,7 +7,6 @@
 import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.HttpResponse;
 import com.github.dreamhead.moco.model.HttpRequestFailoverMatcher;
-import com.github.dreamhead.moco.model.MessageFactory;
 import com.github.dreamhead.moco.model.Session;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
@@ -20,6 +19,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import static com.github.dreamhead.moco.model.DefaultHttpResponse.newResponse;
 import static com.github.dreamhead.moco.model.MessageFactory.writeResponse;
 import static com.google.common.base.Predicates.not;
 import static com.google.common.collect.FluentIterable.from;
@@ -40,7 +40,7 @@ public DefaultFailover(File file) {
     public void onCompleteResponse(HttpRequest request, FullHttpResponse response) {
         try {
             ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();
-            Session targetSession = Session.newSession(request, MessageFactory.createResponse(response));
+            Session targetSession = Session.newSession(request, newResponse(response));
             writer.writeValue(this.file, prepareTargetSessions(targetSession));
         } catch (IOException e) {
             throw new RuntimeException(e);

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/MocoHandler.java
Patch:
@@ -51,7 +51,7 @@ private FullHttpResponse doGetFullHttpResponse(FullHttpRequest request) {
         FullHttpResponse response = defaultResponse(request, HttpResponseStatus.OK);
         com.github.dreamhead.moco.HttpRequest httpRequest = DefaultHttpRequest.newRequest(request);
         monitor.onMessageArrived(httpRequest);
-        SessionContext context = new SessionContext(httpRequest, request, response);
+        SessionContext context = new SessionContext(httpRequest, response);
 
         for (BaseSetting setting : settings) {
             if (setting.match(httpRequest)) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/Session.java
Patch:
@@ -9,7 +9,7 @@
 public class Session {
     @JsonDeserialize(as = DefaultHttpRequest.class)
     private HttpRequest request;
-    @JsonDeserialize(as = DumpHttpResponse.class)
+    @JsonDeserialize(as = DefaultHttpResponse.class)
     private HttpResponse response;
 
     public HttpRequest getRequest() {

File: moco-core/src/main/java/com/github/dreamhead/moco/HttpRequest.java
Patch:
@@ -5,8 +5,6 @@
 public interface HttpRequest {
     String getUri();
 
-    ImmutableMap<String, String> getQueries();
-
     String getMethod();
 
     String getVersion();

File: moco-core/src/main/java/com/github/dreamhead/moco/MocoMonitor.java
Patch:
@@ -1,7 +1,6 @@
 package com.github.dreamhead.moco;
 
 import com.google.common.eventbus.Subscribe;
-import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 
 public interface MocoMonitor {
@@ -15,5 +14,5 @@ public interface MocoMonitor {
     void onMessageLeave(FullHttpResponse response);
 
     @Subscribe
-    void onUnexpectedMessage(FullHttpRequest request);
+    void onUnexpectedMessage(HttpRequest request);
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/MocoHandler.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.internal;
 
 import com.github.dreamhead.moco.MocoMonitor;
-import com.github.dreamhead.moco.model.LazyHttpRequest;
+import com.github.dreamhead.moco.model.DefaultHttpRequest;
 import com.github.dreamhead.moco.setting.BaseSetting;
 import com.google.common.collect.ImmutableList;
 import io.netty.channel.ChannelFuture;
@@ -49,7 +49,7 @@ private FullHttpResponse getHttpResponse(FullHttpRequest message) {
 
     private FullHttpResponse doGetFullHttpResponse(FullHttpRequest request) {
         FullHttpResponse response = defaultResponse(request, HttpResponseStatus.OK);
-        LazyHttpRequest httpRequest = new LazyHttpRequest(request);
+        com.github.dreamhead.moco.HttpRequest httpRequest = DefaultHttpRequest.newRequest(request);
         monitor.onMessageArrived(httpRequest);
         SessionContext context = new SessionContext(httpRequest, request, response);
 
@@ -65,7 +65,7 @@ private FullHttpResponse doGetFullHttpResponse(FullHttpRequest request) {
             return response;
         }
 
-        monitor.onUnexpectedMessage(request);
+        monitor.onUnexpectedMessage(httpRequest);
         return defaultResponse(request, HttpResponseStatus.BAD_REQUEST);
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/model/HttpRequestFailoverMatcher.java
Patch:
@@ -17,8 +17,7 @@ public boolean match(HttpRequest target) {
                 && doMatch(failover.getVersion(), target.getVersion())
                 && doMatch(failover.getContent(), target.getContent())
                 && doMatch(failover.getHeaders(), target.getHeaders())
-                && doMatch(failover.getMethod(), target.getMethod())
-                && doMatch(failover.getQueries(), target.getQueries());
+                && doMatch(failover.getMethod(), target.getMethod());
     }
 
     protected boolean doMatch(Map<String, String> thisField, Map<String, String> thatField) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/Session.java
Patch:
@@ -7,7 +7,7 @@
 import com.github.dreamhead.moco.HttpResponse;
 
 public class Session {
-    @JsonDeserialize(as = DumpHttpRequest.class)
+    @JsonDeserialize(as = DefaultHttpRequest.class)
     private HttpRequest request;
     @JsonDeserialize(as = DumpHttpResponse.class)
     private HttpResponse response;

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/AbstractMonitor.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.MocoMonitor;
-import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 
 public abstract class AbstractMonitor implements MocoMonitor {
@@ -19,6 +18,6 @@ public void onMessageLeave(FullHttpResponse response) {
     }
 
     @Override
-    public void onUnexpectedMessage(FullHttpRequest request) {
+    public void onUnexpectedMessage(HttpRequest request) {
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/LogMonitor.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.MocoMonitor;
-import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 
 public class LogMonitor implements MocoMonitor {
@@ -30,6 +29,6 @@ public void onMessageLeave(FullHttpResponse response) {
     }
 
     @Override
-    public void onUnexpectedMessage(FullHttpRequest request) {
+    public void onUnexpectedMessage(HttpRequest request) {
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/Slf4jMonitor.java
Patch:
@@ -5,7 +5,6 @@
 import com.github.dreamhead.moco.dumper.Dumper;
 import com.github.dreamhead.moco.dumper.HttpRequestDumper;
 import com.github.dreamhead.moco.dumper.HttpResponseDumper;
-import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,6 +30,6 @@ public void onMessageLeave(FullHttpResponse response) {
     }
 
     @Override
-    public void onUnexpectedMessage(FullHttpRequest request) {
+    public void onUnexpectedMessage(HttpRequest request) {
     }
 }

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoProxyTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpVersion;
 import org.apache.http.StatusLine;
-import org.apache.http.client.fluent.Content;
 import org.apache.http.client.fluent.Request;
 import org.apache.http.entity.ContentType;
 import org.hamcrest.Matcher;

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoTemplateTest.java
Patch:
@@ -11,9 +11,7 @@
 import java.io.IOException;
 
 import static com.github.dreamhead.moco.Moco.*;
-import static com.github.dreamhead.moco.RemoteTestUtils.port;
 import static com.github.dreamhead.moco.RemoteTestUtils.remoteUrl;
-import static com.github.dreamhead.moco.RemoteTestUtils.root;
 import static com.github.dreamhead.moco.Runner.running;
 import static com.google.common.collect.ImmutableMap.of;
 import static org.hamcrest.CoreMatchers.is;

File: moco-core/src/main/java/com/github/dreamhead/moco/MocoMonitor.java
Patch:
@@ -6,7 +6,7 @@
 
 public interface MocoMonitor {
     @Subscribe
-    void onMessageArrived(FullHttpRequest request);
+    void onMessageArrived(HttpRequest request);
 
     @Subscribe
     void onException(Exception e);

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/AbstractMonitor.java
Patch:
@@ -1,12 +1,13 @@
 package com.github.dreamhead.moco.monitor;
 
+import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.MocoMonitor;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 
 public abstract class AbstractMonitor implements MocoMonitor {
     @Override
-    public void onMessageArrived(FullHttpRequest request) {
+    public void onMessageArrived(HttpRequest request) {
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/DefaultLogFormatter.java
Patch:
@@ -1,20 +1,20 @@
 package com.github.dreamhead.moco.monitor;
 
+import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.dumper.Dumper;
 import com.github.dreamhead.moco.dumper.HttpRequestDumper;
 import com.github.dreamhead.moco.dumper.HttpResponseDumper;
-import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
 public class DefaultLogFormatter implements LogFormatter {
-    private final Dumper<FullHttpRequest> requestDumper = new HttpRequestDumper();
+    private final Dumper<HttpRequest> requestDumper = new HttpRequestDumper();
     private final Dumper<FullHttpResponse> responseDumper = new HttpResponseDumper();
 
     @Override
-    public String format(FullHttpRequest request) {
+    public String format(HttpRequest request) {
         return String.format("Request received:\n\n%s\n", requestDumper.dump(request));
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/DefaultRequestHit.java
Patch:
@@ -14,8 +14,8 @@ public class DefaultRequestHit extends AbstractMonitor implements RequestHit {
     private List<HttpRequest> requests = newArrayList();
 
     @Override
-    public void onMessageArrived(FullHttpRequest request) {
-        this.requests.add(new LazyHttpRequest(request));
+    public void onMessageArrived(HttpRequest request) {
+        this.requests.add(request);
     }
 
     @Override

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/LogFormatter.java
Patch:
@@ -1,10 +1,10 @@
 package com.github.dreamhead.moco.monitor;
 
-import io.netty.handler.codec.http.FullHttpRequest;
+import com.github.dreamhead.moco.HttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
 
 public interface LogFormatter {
-    String format(FullHttpRequest request);
+    String format(HttpRequest request);
     String format(FullHttpResponse response);
     String format(Exception e);
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/LogMonitor.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco.monitor;
 
+import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.MocoMonitor;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
@@ -14,7 +15,7 @@ public LogMonitor(LogFormatter formatter, LogWriter writer) {
     }
 
     @Override
-    public void onMessageArrived(FullHttpRequest request) {
+    public void onMessageArrived(HttpRequest request) {
         writer.write(formatter.format(request));
     }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/Slf4jMonitor.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dreamhead.moco.monitor;
 
+import com.github.dreamhead.moco.HttpRequest;
 import com.github.dreamhead.moco.MocoMonitor;
 import com.github.dreamhead.moco.dumper.Dumper;
 import com.github.dreamhead.moco.dumper.HttpRequestDumper;
@@ -11,11 +12,11 @@
 
 public class Slf4jMonitor implements MocoMonitor {
     private static Logger logger = LoggerFactory.getLogger(Slf4jMonitor.class);
-    private final Dumper<FullHttpRequest> requestDumper = new HttpRequestDumper();
+    private final Dumper<HttpRequest> requestDumper = new HttpRequestDumper();
     private final Dumper<FullHttpResponse> responseDumper = new HttpResponseDumper();
 
     @Override
-    public void onMessageArrived(FullHttpRequest request) {
+    public void onMessageArrived(HttpRequest request) {
         logger.info("Request received:\n\n{}\n", requestDumper.dump(request));
     }
 

File: moco-runner/src/test/java/com/github/dreamhead/moco/runner/DynamicSettingRunnerTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.dreamhead.moco.runner;
 
 import com.github.dreamhead.moco.bootstrap.StartArgs;
+import org.apache.commons.io.FilenameUtils;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
@@ -25,8 +26,9 @@ public void should_reload_configuration() throws IOException, InterruptedExcepti
                 "}}]");
 
         final File setting = tempFolder.newFile("settings.json");
+        String path = FilenameUtils.separatorsToUnix(config.getAbsolutePath());
         changeFileContent(setting, "[{" +
-                "\"include\" : \"" + config.getAbsolutePath() + "\"" +
+                "\"include\" : \"" + path + "\"" +
                 "}]");
 
         RunnerFactory factory = new RunnerFactory("SHUTDOWN");

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/GlobalSetting.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-import java.io.File;
+import static com.github.dreamhead.moco.util.Files.join;
 
 public class GlobalSetting {
     private String include;
@@ -12,7 +12,7 @@ public class GlobalSetting {
     private String env;
 
     public String getInclude() {
-        return fileRoot != null ? new File(fileRoot, include).getPath() : include;
+        return fileRoot != null ? join(fileRoot, include) : include;
     }
 
     public String getContext() {

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/DefaultRequestHit.java
Patch:
@@ -24,11 +24,11 @@ public void onUnexpectedMessage(FullHttpRequest request) {
 
     @Override
     public void verify(UnexpectedRequestMatcher matcher, VerificationMode mode) {
-        mode.verify(new VerificationData(copyOf(unexpectedRequests), matcher));
+        mode.verify(new VerificationData(copyOf(unexpectedRequests), matcher, "expect unexpected request hit %d times but %d times"));
     }
 
     @Override
     public void verify(RequestMatcher matcher, VerificationMode mode) {
-        mode.verify(new VerificationData(copyOf(requests), matcher));
+        mode.verify(new VerificationData(copyOf(requests), matcher, "expect request hit %d times but %d times"));
     }
 }

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoJsonTest.java
Patch:
@@ -24,7 +24,7 @@ public void run() throws IOException {
 	}
 	
     @Test
-    public void should_match_extact_json() throws Exception {
+    public void should_match_exact_json() throws Exception {
         final String jsonContent = "{\"foo\":\"bar\"}";
         server.request(json(text(jsonContent))).response("foo");
         running(server, new Runnable() {

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -30,8 +30,6 @@
 import static com.google.common.collect.ImmutableList.copyOf;
 
 public class Moco {
-    private static final int DEFAULT_LATENCY = 1000;
-
     public static HttpServer httpserver(final int port, final MocoConfig... configs) {
         checkArgument(port > 0, "Port must be greater than zero");
         return ActualHttpServer.createQuietServer(of(port), configs);
@@ -241,7 +239,7 @@ public static MocoEventTrigger complete(MocoEventAction action) {
     }
 
     public static MocoEventAction async(MocoEventAction action) {
-        return async(checkNotNull(action, "Action should not be null"), latency(DEFAULT_LATENCY));
+        return async(checkNotNull(action, "Action should not be null"), latency(LatencyProcedure.DEFAULT_LATENCY));
     }
 
     public static MocoEventAction async(MocoEventAction action, LatencyProcedure procedure) {

File: moco-core/src/main/java/com/github/dreamhead/moco/procedure/LatencyProcedure.java
Patch:
@@ -4,6 +4,8 @@
 import com.github.dreamhead.moco.util.Idles;
 
 public class LatencyProcedure implements MocoProcedure {
+    public static final int DEFAULT_LATENCY = 1000;
+
     private final long millis;
 
     public LatencyProcedure(long millis) {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailover.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectWriter;
 import com.fasterxml.jackson.databind.type.TypeFactory;
-import com.github.dreamhead.moco.model.DefaultHttpRequest;
+import com.github.dreamhead.moco.model.DumpHttpRequest;
 import com.github.dreamhead.moco.model.MessageFactory;
 import com.github.dreamhead.moco.model.Response;
 import com.github.dreamhead.moco.model.Session;
@@ -88,7 +88,7 @@ public void failover(FullHttpRequest request, FullHttpResponse response) {
     }
 
     private Response failoverResponse(FullHttpRequest request) {
-        final DefaultHttpRequest dumpedRequest = MessageFactory.createRequest(request);
+        final DumpHttpRequest dumpedRequest = MessageFactory.createRequest(request);
         ImmutableList<Session> sessions = restoreSessions(this.file);
         final Optional<Session> session = tryFind(sessions, isForRequest(dumpedRequest));
         if (session.isPresent()) {
@@ -99,7 +99,7 @@ private Response failoverResponse(FullHttpRequest request) {
         throw new RuntimeException("no failover response found");
     }
 
-    private Predicate<Session> isForRequest(final DefaultHttpRequest dumpedRequest) {
+    private Predicate<Session> isForRequest(final DumpHttpRequest dumpedRequest) {
         return new Predicate<Session>() {
             @Override
             public boolean apply(Session session) {

File: moco-core/src/main/java/com/github/dreamhead/moco/model/DumpHttpRequest.java
Patch:
@@ -9,7 +9,7 @@
 import static com.google.common.collect.Maps.newHashMap;
 
 @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
-public class DefaultHttpRequest extends Message implements HttpRequest {
+public class DumpHttpRequest extends Message implements HttpRequest {
     private Map<String, String> queries = newHashMap();
     private String method;
     private String uri;
@@ -39,7 +39,7 @@ public String getMethod() {
         return method;
     }
 
-    public boolean match(DefaultHttpRequest that) {
+    public boolean match(DumpHttpRequest that) {
         return super.match(that) && doMatch(method, that.method)
                 && doMatch(queries, that.queries);
     }
@@ -51,7 +51,7 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return Objects.toStringHelper(DefaultHttpRequest.class)
+        return Objects.toStringHelper(DumpHttpRequest.class)
                 .omitNullValues()
                 .add("uri", uri)
                 .add("version", version)

File: moco-core/src/main/java/com/github/dreamhead/moco/model/MessageFactory.java
Patch:
@@ -15,8 +15,8 @@ private static void setContent(FullHttpMessage message, Message dumpedMessage) {
         }
     }
 
-    public static DefaultHttpRequest createRequest(FullHttpRequest request) {
-        DefaultHttpRequest dumpedRequest = new DefaultHttpRequest();
+    public static DumpHttpRequest createRequest(FullHttpRequest request) {
+        DumpHttpRequest dumpedRequest = new DumpHttpRequest();
         dumpedRequest.setVersion(request.getProtocolVersion().text());
         dumpedRequest.setUri(request.getUri());
         setContent(request, dumpedRequest);

File: moco-core/src/main/java/com/github/dreamhead/moco/Moco.java
Patch:
@@ -28,11 +28,11 @@
 
 public class Moco {
     public static HttpServer httpserver(final int port, final MocoConfig... configs) {
-        return ActualHttpServer.createSilentServer(of(port), configs);
+        return ActualHttpServer.createQuietServer(of(port), configs);
     }
 
     public static HttpServer httpserver(final MocoConfig... configs) {
-        return ActualHttpServer.createSilentServer(Optional.<Integer>absent(), configs);
+        return ActualHttpServer.createQuietServer(Optional.<Integer>absent(), configs);
     }
 
     public static MocoConfig context(final String context) {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractResponseHandler.java
Patch:
@@ -4,7 +4,6 @@
 import com.github.dreamhead.moco.ResponseHandler;
 
 public abstract class AbstractResponseHandler implements ResponseHandler {
-
     @Override
     public ResponseHandler apply(MocoConfig config) {
         return this;

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/ProxyResponseHandler.java
Patch:
@@ -46,7 +46,6 @@ public void writeToResponse(FullHttpRequest request, FullHttpResponse response)
             remoteRequest.setConfig(config);
             remoteRequest.setProtocolVersion(createVersion(request));
 
-
             long contentLength = HttpHeaders.getContentLength(request, -1);
             if (contentLength > 0 && remoteRequest instanceof HttpEntityEnclosingRequest) {
                 HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) remoteRequest;

File: moco-core/src/main/java/com/github/dreamhead/moco/monitor/Slf4jMonitor.java
Patch:
@@ -8,8 +8,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class Slf4jMocoMonitor implements MocoMonitor {
-    private static Logger logger = LoggerFactory.getLogger(Slf4jMocoMonitor.class);
+public class Slf4jMonitor implements MocoMonitor {
+    private static Logger logger = LoggerFactory.getLogger(Slf4jMonitor.class);
     private final Dumper<FullHttpRequest> requestDumper = new HttpRequestDumper();
     private final Dumper<FullHttpResponse> responseDumper = new HttpResponseDumper();
 

File: moco-core/src/main/java/com/github/dreamhead/moco/HttpServer.java
Patch:
@@ -12,6 +12,7 @@
 import static com.google.common.collect.ImmutableList.copyOf;
 
 public abstract class HttpServer extends ResponseSetting {
+    public abstract int port();
     protected abstract Setting onRequestAttached(RequestMatcher matcher);
 
     public Setting request(RequestMatcher matcher) {

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/MocoHttpServer.java
Patch:
@@ -16,7 +16,7 @@ public MocoHttpServer(ActualHttpServer serverSetting) {
     }
 
     public void start() {
-        server.start(serverSetting.getPort(), new ChannelInitializer<SocketChannel>() {
+        int port = server.start(serverSetting.getPort(), new ChannelInitializer<SocketChannel>() {
             @Override
             protected void initChannel(SocketChannel ch) throws Exception {
                 ChannelPipeline pipeline = ch.pipeline();
@@ -26,6 +26,7 @@ protected void initChannel(SocketChannel ch) throws Exception {
                 pipeline.addLast("handler", new MocoHandler(serverSetting));
             }
         });
+        serverSetting.setPort(port);
     }
 
     public void stop() {

File: moco-core/src/main/java/com/github/dreamhead/moco/internal/MocoHandler.java
Patch:
@@ -1,19 +1,18 @@
 package com.github.dreamhead.moco.internal;
 
 import com.github.dreamhead.moco.setting.BaseSetting;
+import com.google.common.collect.ImmutableList;
 import com.google.common.eventbus.EventBus;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.http.*;
 
-import java.util.List;
-
 public class MocoHandler extends SimpleChannelInboundHandler<FullHttpRequest> {
     private final EventBus eventBus = new EventBus();
 
-    private final List<BaseSetting> settings;
+    private final ImmutableList<BaseSetting> settings;
     private final BaseSetting anySetting;
 
     public MocoHandler(ActualHttpServer server) {

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/ResponseSetting.java
Patch:
@@ -10,12 +10,12 @@
 import com.google.common.base.Function;
 import com.google.common.base.Objects;
 import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
-import java.util.List;
 import java.util.Map;
 
 import static com.github.dreamhead.moco.Moco.*;
@@ -62,7 +62,7 @@ public ResponseHandler getResponseHandler() {
         return getResponseHandler(handlers.toList());
     }
 
-    private ResponseHandler getResponseHandler(List<ResponseHandler> list) {
+    private ResponseHandler getResponseHandler(ImmutableList<ResponseHandler> list) {
         if (list.size() == 1) {
             return list.get(0);
         }
@@ -115,7 +115,7 @@ private ResponseHandler createResponseHandler(String name, Object value) {
     }
 
     private ResponseHandler createCompositeHandler(String name, Map<String, TextContainer> map) {
-        List<ResponseHandler> handlers = from(map.entrySet()).transform(toTargetHandler(name)).toList();
+        ImmutableList<ResponseHandler> handlers = from(map.entrySet()).transform(toTargetHandler(name)).toList();
         return getResponseHandler(handlers);
     }
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/bootstrap/ShutdownPortOption.java
Patch:
@@ -20,7 +20,7 @@ public int getShutdownPort(int defaultShutDownPort) {
 
     public static Option shutdownPortOption() {
         Option opt = new Option("s", true, "shutdown port");
-        opt.setType(Integer.class);
+        opt.setType(String.class);
         opt.setRequired(false);
         return opt;
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/ResourceFactory.java
Patch:
@@ -11,7 +11,7 @@
 
 import static com.github.dreamhead.moco.resource.ResourceConfigApplier.DO_NOTHING_APPLIER;
 import static com.github.dreamhead.moco.resource.ResourceConfigApplierFactory.*;
-import static com.github.dreamhead.moco.resource.TextId.id;
+import static com.github.dreamhead.moco.resource.IdFactory.id;
 
 public class ResourceFactory {
     public static ContentResource textResource(final String text) {
@@ -56,7 +56,7 @@ public byte[] readFor(HttpRequest request) {
     }
 
     public static Resource headerResource(final String key, final Resource resource) {
-        return resource(id("header"), headerConfigApplier(key), new ResourceReader() {
+        return resource(id(resource.id()), headerConfigApplier(key, resource), new ResourceReader() {
             @Override
             public byte[] readFor(HttpRequest request) {
                 return new Cookies().encodeCookie(key, new String(resource.readFor(request))).getBytes();
@@ -69,7 +69,7 @@ public static ContentResource templateResource(final ContentResource template) {
     }
 
     public static Resource uriResource(final String uri) {
-        return resource(id("uri"), uriConfigApplier(uri), new ResourceReader() {
+        return resource(id("uri"), uriConfigApplier("uri", uri), new ResourceReader() {
             @Override
             public byte[] readFor(HttpRequest request) {
                 return uri.getBytes();

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/RequestSetting.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.github.dreamhead.moco.RequestMatcher;
-import com.github.dreamhead.moco.parser.DynamicRequestMatcherFactory;
 import com.github.dreamhead.moco.parser.RequestMatcherFactory;
 import com.google.common.base.Objects;
 

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/ResponseSetting.java
Patch:
@@ -101,7 +101,6 @@ public ResponseHandler getResponseHandler() {
         }
 
         if (proxy != null) {
-
             handlers.add(createProxy(proxy));
         }
 

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/Content.java
Patch:
@@ -1,5 +1,5 @@
 package com.github.dreamhead.moco.resource;
 
-public interface ContentResourceReader extends ResourceReader {
+public interface Content {
     String getContentType();
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/ClasspathFileResourceReader.java
Patch:
@@ -1,4 +1,4 @@
-package com.github.dreamhead.moco.resource;
+package com.github.dreamhead.moco.resource.reader;
 
 import com.github.dreamhead.moco.util.FileContentType;
 import org.jboss.netty.handler.codec.http.HttpRequest;

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/FileResourceReader.java
Patch:
@@ -1,4 +1,4 @@
-package com.github.dreamhead.moco.resource;
+package com.github.dreamhead.moco.resource.reader;
 
 import com.github.dreamhead.moco.util.FileContentType;
 import org.jboss.netty.handler.codec.http.HttpRequest;

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java
Patch:
@@ -1,6 +1,7 @@
-package com.github.dreamhead.moco.resource;
+package com.github.dreamhead.moco.resource.reader;
 
 import com.github.dreamhead.moco.model.MessageFactory;
+import com.github.dreamhead.moco.resource.ContentResource;
 import freemarker.cache.StringTemplateLoader;
 import freemarker.template.*;
 import org.jboss.netty.handler.codec.http.HttpRequest;

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/DynamicRequestMatcherParser.java
Patch:
@@ -159,15 +159,15 @@ private RequestExtractor createRequestExtractor(Method method, String key) {
         }
     }
 
-    private RequestMatcher createRequestMatcher(RequestExtractor extractor, Object value) {
+    private <T> RequestMatcher createRequestMatcher(RequestExtractor<T> extractor, Object value) {
         if (TextContainer.class.isInstance(value)) {
             return getRequestMatcher(extractor, TextContainer.class.cast(value));
         }
 
         throw new IllegalArgumentException("unknown value type: " + value);
     }
 
-    private RequestMatcher getRequestMatcher(RequestExtractor extractor, TextContainer container) {
+    private <T> RequestMatcher getRequestMatcher(RequestExtractor<T> extractor, TextContainer container) {
         if (container.isRawText()) {
             return eq(extractor, container.getText());
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/RequestExtractor.java
Patch:
@@ -2,6 +2,6 @@
 
 import org.jboss.netty.handler.codec.http.HttpRequest;
 
-public interface RequestExtractor {
-    String extract(HttpRequest request);
+public interface RequestExtractor<T> {
+    T extract(HttpRequest request);
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/ContentRequestExtractor.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.nio.charset.Charset;
 
-public class ContentRequestExtractor implements RequestExtractor {
+public class ContentRequestExtractor implements RequestExtractor<String> {
     @Override
     public String extract(HttpRequest request) {
         return request.getContent().toString(Charset.defaultCharset());

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/CookieRequestExtractor.java
Patch:
@@ -4,7 +4,7 @@
 import com.github.dreamhead.moco.util.Cookies;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 
-public class CookieRequestExtractor implements RequestExtractor {
+public class CookieRequestExtractor implements RequestExtractor<String> {
     private final Cookies cookies = new Cookies();
 
     private final String key;

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/FormRequestExtractor.java
Patch:
@@ -7,7 +7,7 @@
 import org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder;
 import org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData;
 
-public class FormRequestExtractor implements RequestExtractor {
+public class FormRequestExtractor implements RequestExtractor<String> {
     private final String key;
 
     public FormRequestExtractor(String key) {

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/HeaderRequestExtractor.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.dreamhead.moco.RequestExtractor;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 
-public class HeaderRequestExtractor implements RequestExtractor {
+public class HeaderRequestExtractor implements RequestExtractor<String> {
     private final String name;
 
     public HeaderRequestExtractor(String name) {

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/HttpMethodExtractor.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.dreamhead.moco.RequestExtractor;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 
-public class HttpMethodExtractor implements RequestExtractor {
+public class HttpMethodExtractor implements RequestExtractor<String> {
     @Override
     public String extract(HttpRequest request) {
         return request.getMethod().getName().toUpperCase();

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/ParamRequestExtractor.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.List;
 import java.util.Map;
 
-public class ParamRequestExtractor implements RequestExtractor {
+public class ParamRequestExtractor implements RequestExtractor<String> {
     private final String param;
 
     public ParamRequestExtractor(String param) {

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/UriRequestExtractor.java
Patch:
@@ -4,7 +4,7 @@
 import org.jboss.netty.handler.codec.http.HttpRequest;
 import org.jboss.netty.handler.codec.http.QueryStringDecoder;
 
-public class UriRequestExtractor implements RequestExtractor {
+public class UriRequestExtractor implements RequestExtractor<String> {
     @Override
     public String extract(HttpRequest request) {
         return new QueryStringDecoder(request.getUri()).getPath();

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/VersionExtractor.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.dreamhead.moco.RequestExtractor;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 
-public class VersionExtractor implements RequestExtractor {
+public class VersionExtractor implements RequestExtractor<String> {
     @Override
     public String extract(HttpRequest request) {
         return request.getProtocolVersion().toString();

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/XmlExtractorHelper.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.StringReader;
 
 public class XmlExtractorHelper {
-    public InputSource extractAsInputSource(HttpRequest request, RequestExtractor extractor) {
+    public InputSource extractAsInputSource(HttpRequest request, RequestExtractor<String> extractor) {
         return new InputSource(new StringReader(extractor.extract(request)));
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/matcher/JsonRequestMatcher.java
Patch:
@@ -12,11 +12,11 @@
 import java.io.IOException;
 
 public class JsonRequestMatcher implements RequestMatcher {
-    private final RequestExtractor extractor;
+    private final RequestExtractor<String> extractor;
     private final Resource resource;
     private final ObjectMapper mapper;
 
-    public JsonRequestMatcher(RequestExtractor extractor, Resource resource) {
+    public JsonRequestMatcher(RequestExtractor<String> extractor, Resource resource) {
         this.extractor = extractor;
         this.resource = resource;
         this.mapper = new ObjectMapper();

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/ProxyResponseHandler.java
Patch:
@@ -74,12 +74,12 @@ private void setupResponse(HttpRequest request,
             return;
         }
 
-        setupNormalRequest(response, remoteResponse);
+        setupNormalResponse(response, remoteResponse);
 
         failover.onCompleteResponse(request, response);
     }
 
-    private void setupNormalRequest(HttpResponse response, org.apache.http.HttpResponse remoteResponse) throws IOException {
+    private void setupNormalResponse(HttpResponse response, org.apache.http.HttpResponse remoteResponse) throws IOException {
         response.setProtocolVersion(HttpVersion.valueOf(remoteResponse.getProtocolVersion().toString()));
         response.setStatus(HttpResponseStatus.valueOf(remoteResponse.getStatusLine().getStatusCode()));
 
@@ -94,7 +94,6 @@ private void setupNormalRequest(HttpResponse response, org.apache.http.HttpRespo
             buffer.writeBytes(entity.getContent(), (int)entity.getContentLength());
             response.setContent(buffer);
         }
-
     }
 
     private HttpRequestBase createRemoteRequest(HttpRequest request, URL url) {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/DefaultFailover.java
Patch:
@@ -81,7 +81,6 @@ public void failover(HttpRequest request, HttpResponse response) {
     private Response failoverResponse(HttpRequest request) {
         final Request dumpedRequest = createDumpedRequest(request);
         List<Session> sessions = restoreSessions(this.file);
-        logger.info("Restore session size: {}", sessions.size());
         final Optional<Session> session = tryFind(sessions, isForRequest(dumpedRequest));
         if (session.isPresent()) {
             return session.get().getResponse();
@@ -95,7 +94,6 @@ private Predicate<Session> isForRequest(final Request dumpedRequest) {
         return new Predicate<Session>() {
             @Override
             public boolean apply(Session session) {
-                logger.info("Failover request: {}", session.getRequest());
                 return session.getRequest().match(dumpedRequest);
             }
         };

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/failover/Failover.java
Patch:
@@ -5,15 +5,15 @@
 
 public interface Failover {
     void onCompleteResponse(HttpRequest request, HttpResponse response);
-    void failover(HttpResponse response);
+    void failover(HttpRequest request, HttpResponse response);
 
     Failover EMPTY_FAILOVER = new Failover() {
         @Override
         public void onCompleteResponse(HttpRequest request, HttpResponse response) {
         }
 
         @Override
-        public void failover(HttpResponse response) {
+        public void failover(HttpRequest request, HttpResponse response) {
         }
     };
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/HttpServer.java
Patch:
@@ -13,7 +13,7 @@
 import static com.google.common.collect.ImmutableList.copyOf;
 import static java.lang.String.format;
 
-public abstract  class HttpServer extends ResponseSetting {
+public abstract class HttpServer extends ResponseSetting {
     protected abstract void addSetting(BaseSetting setting);
 
     public Setting request(RequestMatcher matcher) {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/ResponseHandlers.java
Patch:
@@ -19,7 +19,7 @@ public class ResponseHandlers {
     public static ResponseHandler responseHandler(Resource resource) {
         Class clazz = handlers.get(resource.id());
         if (clazz == null) {
-            throw new RuntimeException(format("unknown extractor for [%s]", resource.id()));
+            throw new RuntimeException(format("unknown response handler for [%s]", resource.id()));
         }
 
         try {
@@ -32,5 +32,4 @@ public static ResponseHandler responseHandler(Resource resource) {
 
     private ResponseHandlers() {
     }
-
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/ResponseSetting.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dreamhead.moco.handler.AndResponseHandler;
 import com.github.dreamhead.moco.handler.VersionResponseHandler;
-import com.github.dreamhead.moco.resource.Resource;
+import com.github.dreamhead.moco.resource.ContentResource;
 import com.github.dreamhead.moco.resource.VersionResource;
 import org.jboss.netty.handler.codec.http.HttpResponseStatus;
 
@@ -20,7 +20,7 @@ public void response(VersionResource resource) {
         this.response(new VersionResponseHandler(resource));
     }
 
-    public void response(Resource resource) {
+    public void response(ContentResource resource) {
         this.response(content(resource));
     }
 

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoTest.java
Patch:
@@ -485,7 +485,7 @@ public void should_return_default_content_type() throws Exception {
             @Override
             public void run() throws Exception {
                 Header header = Request.Get(root()).execute().returnResponse().getFirstHeader("Content-Type");
-                assertThat(header.getValue(), is("text/html; charset=UTF-8"));
+                assertThat(header.getValue(), is("text/plain; charset=UTF-8"));
             }
         });
     }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/AbstractResource.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.parser.model;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.github.dreamhead.moco.resource.Resource;
+import com.github.dreamhead.moco.resource.ContentResource;
 
 import static com.github.dreamhead.moco.Moco.*;
 
@@ -28,7 +28,7 @@ public String getPathResource() {
         return pathResource;
     }
 
-    public Resource retrieveResource() {
+    public ContentResource retrieveResource() {
         if (text != null) {
             return text(text);
         }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/CacheSetting.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.parser.model;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
-import com.github.dreamhead.moco.resource.Resource;
+import com.github.dreamhead.moco.resource.ContentResource;
 import com.google.common.base.Objects;
 
 import static com.github.dreamhead.moco.MocoCache.cache;
@@ -22,8 +22,8 @@ public String toString() {
     }
 
     @Override
-    public Resource retrieveResource() {
-        Resource resource = super.retrieveResource();
+    public ContentResource retrieveResource() {
+        ContentResource resource = super.retrieveResource();
         if (resource == null) {
             throw new IllegalArgumentException("unknown response setting with " + this);
         }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractContentResponseHandler.java
Patch:
@@ -18,9 +18,7 @@ public void writeToResponse(HttpRequest request, HttpResponse response) {
         response.setContent(buffer);
         response.setHeader("Content-Length", response.getContent().writerIndex());
         if (!detector.hasContentType(response)) {
-            response.setHeader("Content-Type", "text/plain; charset=UTF-8");
+            response.setHeader("Content-Type", "text/html; charset=UTF-8");
         }
-
     }
-
 }

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoTest.java
Patch:
@@ -485,7 +485,7 @@ public void should_return_default_content_type() throws Exception {
             @Override
             public void run() throws Exception {
                 Header header = Request.Get(root()).execute().returnResponse().getFirstHeader("Content-Type");
-                assertThat(header.getValue(), is("text/plain; charset=UTF-8"));
+                assertThat(header.getValue(), is("text/html; charset=UTF-8"));
             }
         });
     }

File: moco-core/src/main/java/com/github/dreamhead/moco/ResponseSetting.java
Patch:
@@ -1,7 +1,6 @@
 package com.github.dreamhead.moco;
 
 import com.github.dreamhead.moco.handler.AndResponseHandler;
-import com.github.dreamhead.moco.handler.ContentHandler;
 import com.github.dreamhead.moco.handler.VersionResponseHandler;
 import com.github.dreamhead.moco.resource.Resource;
 import com.github.dreamhead.moco.resource.VersionResource;

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/ResponseSetting.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.github.dreamhead.moco.ResponseHandler;
 import com.github.dreamhead.moco.handler.AndResponseHandler;
-import com.github.dreamhead.moco.handler.ContentHandler;
 import com.github.dreamhead.moco.handler.HeaderResponseHandler;
 import com.github.dreamhead.moco.handler.VersionResponseHandler;
 import com.github.dreamhead.moco.resource.Resource;
@@ -66,7 +65,7 @@ public Resource retrieveResource() {
     public ResponseHandler getResponseHandler() {
         List<ResponseHandler> handlers = newArrayList();
         if (isResource()) {
-            handlers.add(new ContentHandler(retrieveResource()));
+            handlers.add(content(retrieveResource()));
         }
 
         if (version != null) {

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AbstractContentResponseHandler.java
Patch:
@@ -14,7 +14,6 @@ public void writeToResponse(HttpRequest request, HttpResponse response) {
         ChannelBuffer buffer = ChannelBuffers.dynamicBuffer();
         writeContentResponse(request, buffer);
         response.setContent(buffer);
-        response.setHeader("Content-Type", "text/html; charset=UTF-8");
         response.setHeader("Content-Length", response.getContent().writerIndex());
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/model/RequestSetting.java
Patch:
@@ -16,7 +16,7 @@ public class RequestSetting {
     private Map<String, TextContainer> queries;
     private Map<String, TextContainer> cookies;
 
-    public Object getUri() {
+    public TextContainer getUri() {
         return uri;
     }
 

File: moco-core/src/test/java/com/github/dreamhead/moco/MocoCacheTest.java
Patch:
@@ -128,5 +128,6 @@ public void run() throws IOException {
     private void changeFileContent(File response, String content) throws FileNotFoundException {
         PrintStream stream = new PrintStream(new FileOutputStream(response));
         stream.print(content);
+        stream.close();
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/parser/HttpServerParser.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.dreamhead.moco.parser;
 
 import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.Module;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 import com.fasterxml.jackson.databind.module.SimpleModule;
@@ -28,7 +29,7 @@ public class HttpServerParser {
     private final TypeFactory factory = TypeFactory.defaultInstance();
 
     public HttpServerParser() {
-        SimpleModule textContainerModule = new SimpleModule("TextContainerModule",
+        Module textContainerModule = new SimpleModule("TextContainerModule",
                 new Version(1, 0, 0, null, null, null))
                 .addDeserializer(TextContainer.class, new TextContainerDeserializer());
         mapper.registerModule(textContainerModule);

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/CookieRequestExtractor.java
Patch:
@@ -5,7 +5,7 @@
 import org.jboss.netty.handler.codec.http.HttpRequest;
 
 public class CookieRequestExtractor implements RequestExtractor {
-    private Cookies cookies = new Cookies();
+    private final Cookies cookies = new Cookies();
 
     private final String key;
 

File: moco-core/src/main/java/com/github/dreamhead/moco/extractor/UriRequestExtractor.java
Patch:
@@ -2,12 +2,11 @@
 
 import com.github.dreamhead.moco.RequestExtractor;
 import org.jboss.netty.handler.codec.http.HttpRequest;
+import org.jboss.netty.handler.codec.http.QueryStringDecoder;
 
 public class UriRequestExtractor implements RequestExtractor {
     @Override
     public String extract(HttpRequest request) {
-        String uri = request.getUri();
-        int index = uri.indexOf("?");
-        return index == -1 ? uri : uri.substring(0, index);
+        return new QueryStringDecoder(request.getUri()).getPath();
     }
 }

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/AndResponseHandler.java
Patch:
@@ -5,7 +5,7 @@
 import org.jboss.netty.handler.codec.http.HttpResponse;
 
 public class AndResponseHandler implements ResponseHandler {
-    private Iterable<ResponseHandler> handlers;
+    private final Iterable<ResponseHandler> handlers;
 
     public AndResponseHandler(Iterable<ResponseHandler> handlers) {
         this.handlers = handlers;

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/LatencyResponseHandler.java
Patch:
@@ -5,7 +5,7 @@
 import org.jboss.netty.handler.codec.http.HttpResponse;
 
 public class LatencyResponseHandler implements ResponseHandler {
-    private long millis;
+    private final long millis;
 
     public LatencyResponseHandler(long millis) {
         this.millis = millis;

File: moco-core/src/main/java/com/github/dreamhead/moco/handler/SequenceResponseHandler.java
Patch:
@@ -4,7 +4,7 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 
 public class SequenceResponseHandler extends AbstractResponseHandler {
-    private Resource[] resources;
+    private final Resource[] resources;
     private int index;
 
     public SequenceResponseHandler(final Resource[] resources) {

File: moco-core/src/main/java/com/github/dreamhead/moco/mount/MountHandler.java
Patch:
@@ -13,10 +13,10 @@
 import static com.google.common.io.Files.toByteArray;
 
 public class MountHandler implements ResponseHandler {
-    private UriRequestExtractor extractor = new UriRequestExtractor();
+    private final UriRequestExtractor extractor = new UriRequestExtractor();
 
-    private File dir;
-    private MountTo target;
+    private final File dir;
+    private final MountTo target;
 
     public MountHandler(File dir, MountTo target) {
         this.dir = dir;

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/MethodResource.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.resource;
 
 public class MethodResource implements Resource {
-    private String method;
+    private final String method;
 
     public MethodResource(String method) {
         this.method = method.toUpperCase();

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/UriResource.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.dreamhead.moco.resource;
 
 public class UriResource implements Resource {
-    private String uri;
+    private final String uri;
 
     public UriResource(String uri) {
         this.uri = uri;

File: moco-core/src/main/java/com/github/dreamhead/moco/resource/UrlResource.java
Patch:
@@ -6,7 +6,7 @@
 import static com.google.common.io.ByteStreams.toByteArray;
 
 public class UrlResource implements Resource {
-    private URL url;
+    private final URL url;
 
     public UrlResource(URL url) {
         this.url = url;

File: moco-core/src/test/java/com/github/dreamhead/moco/mount/MountToTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.Matchers.isEmptyOrNullString;
 import static org.junit.Assert.assertThat;
 
 public class MountToTest {
@@ -17,12 +17,12 @@ public void should_get_relative_path_from_uri() {
     @Test
     public void should_return_null_if_uri_does_not_match() {
         MountTo to = new MountTo("/dir");
-        assertThat(to.extract("/target/filename"), nullValue());
+        assertThat(to.extract("/target/filename"), isEmptyOrNullString());
     }
 
     @Test
     public void should_return_null_if_no_relative_path_found() {
         MountTo to = new MountTo("/dir");
-        assertThat(to.extract("/dir/"), nullValue());
+        assertThat(to.extract("/dir/"), isEmptyOrNullString());
     }
 }

File: moco-runner/src/main/java/com/github/dreamhead/moco/runner/JsonRunner.java
Patch:
@@ -32,7 +32,9 @@ public void run(final String fileName, final int port) throws IOException {
 
     private FileAlterationMonitor monitorConfigurationFile(String fileName, final int port) {
         final File configFile = new File(fileName);
-        FileAlterationObserver observer = new FileAlterationObserver(configFile.getParentFile(), sameFile(configFile));
+        File parentFile = configFile.getParentFile();
+        File directory = (parentFile == null) ? new File(".") : parentFile;
+        FileAlterationObserver observer = new FileAlterationObserver(directory, sameFile(configFile));
         observer.addListener(configurationChangeListener(port));
 
         return new FileAlterationMonitor(1000, observer);

