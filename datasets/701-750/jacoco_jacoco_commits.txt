File: org.jacoco.core.test.validation.java5/src/org/jacoco/core/test/validation/java5/EnumSwitchTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.jacoco.core.test.validation.java5.targets.EnumSwitchTarget;
 
 /**
- * Test of filtering of a synthetic class that is generated by javac for a enum
+ * Test of filtering of a synthetic class that is generated by javac for an enum
  * in switch statement.
  */
 public class EnumSwitchTest extends ValidationTestBase {

File: org.jacoco.core.test.validation.java5/src/org/jacoco/core/test/validation/java5/ExplicitInitialFrameTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.jacoco.core.test.validation.java5.targets.ExplicitInitialFrameTarget;
 
 /**
- * Test for a methods having a explicit initial frame.
+ * Test for a methods having an explicit initial frame.
  */
 public class ExplicitInitialFrameTest extends ValidationTestBase {
 

File: org.jacoco.core.test.validation.java5/src/org/jacoco/core/test/validation/java5/ImplicitFieldInitializationTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.jacoco.core.test.validation.java5.targets.ImplicitFieldInitializationTarget;
 
 /**
- * Test of a implicit field initialization.
+ * Test of an implicit field initialization.
  */
 public class ImplicitFieldInitializationTest extends ValidationTestBase {
 

File: org.jacoco.core.test.validation.java5/src/org/jacoco/core/test/validation/java5/targets/EnumSwitchTarget.java
Patch:
@@ -15,7 +15,7 @@
 import static org.jacoco.core.test.validation.targets.Stubs.nop;
 
 /**
- * This test target is a switch statement with a enum.
+ * This test target is a switch statement with an enum.
  */
 public class EnumSwitchTarget {
 

File: org.jacoco.core.test.validation.java5/src/org/jacoco/core/test/validation/java5/targets/ExceptionsTarget.java
Patch:
@@ -63,7 +63,7 @@ private static void implicitNullPointerException(int[] a) {
 	}
 
 	/**
-	 * For each line with method invocations a extra probe is inserted.
+	 * For each line with method invocations an extra probe is inserted.
 	 * Therefore the lines before the exception are marked as covered.
 	 */
 	private static void implicitException() {

File: org.jacoco.core.test/src/org/jacoco/core/test/perf/IPerfOutput.java
Patch:
@@ -21,7 +21,7 @@ public interface IPerfOutput {
 	long NO_REFERENCE = Long.MIN_VALUE;
 
 	/**
-	 * Reports the result of a time measurement with a optional reference time
+	 * Reports the result of a time measurement with an optional reference time
 	 * for comparison.
 	 *
 	 * @param description
@@ -34,7 +34,7 @@ public interface IPerfOutput {
 	void writeTimeResult(String description, long duration, long reference);
 
 	/**
-	 * Reports the result of a byte size measurement with a optional reference
+	 * Reports the result of a byte size measurement with an optional reference
 	 * size for comparison.
 	 *
 	 * @param description

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/targets/Stubs.java
Patch:
@@ -151,7 +151,7 @@ public static void noexec(Runnable task) {
 	private static List<String> events = new ArrayList<String>();
 
 	/**
-	 * Records a event with the given id for later verification.
+	 * Records an event with the given id for later verification.
 	 */
 	public static void logEvent(String id) {
 		events.add(id);

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataWriter.java
Patch:
@@ -115,7 +115,7 @@ public void visitClassExecution(final ExecutionData data) {
 	 * file. In any case every execution data file starts with the three bytes
 	 * <code>0x01 0xC0 0xC0</code>.
 	 *
-	 * @return first bytes of a execution data file
+	 * @return first bytes of an execution data file
 	 */
 	public static final byte[] getFileHeader() {
 		final ByteArrayOutputStream buffer = new ByteArrayOutputStream();

File: org.jacoco.core/src/org/jacoco/core/data/SessionInfo.java
Patch:
@@ -26,7 +26,7 @@ public class SessionInfo implements Comparable<SessionInfo> {
 	private final long dump;
 
 	/**
-	 * Create a immutable session info with the given data.
+	 * Create an immutable session info with the given data.
 	 *
 	 * @param id
 	 *            arbitrary session identifier, must not be <code>null</code>

File: org.jacoco.core/src/org/jacoco/core/data/SessionInfoStore.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 
 /**
- * Container to collect and merge session {@link SessionInfo} objects. A
+ * Container to collect and merge session {@link SessionInfo} objects. An
  * instance of this class is not thread safe.
  */
 public class SessionInfoStore implements ISessionInfoVisitor {

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/SourceNodeImpl.java
Patch:
@@ -138,7 +138,7 @@ public void increment(final ISourceNode child) {
 	}
 
 	/**
-	 * Increments instructions and branches by the given counter values. If a
+	 * Increments instructions and branches by the given counter values. If an
 	 * optional line number is specified the instructions and branches are added
 	 * to the given line. The line counter is incremented accordingly.
 	 *

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelInfo.java
Patch:
@@ -95,7 +95,7 @@ public static boolean isMultiTarget(final Label label) {
 
 	/**
 	 * Checks whether this label is the possible successor of the previous
-	 * instruction in the method. This is the case if the predecessor isn't a
+	 * instruction in the method. This is the case if the predecessor isn't an
 	 * unconditional jump or method exit instruction.
 	 *
 	 * @param label

File: org.jacoco.core/src/org/jacoco/core/internal/instr/InstrSupport.java
Patch:
@@ -220,7 +220,7 @@ public static boolean needsFrames(final int version) {
 	}
 
 	/**
-	 * Ensures that the given member does not correspond to a internal member
+	 * Ensures that the given member does not correspond to an internal member
 	 * created by the instrumentation process. This would mean that the class is
 	 * already instrumented.
 	 *

File: org.jacoco.core/src/org/jacoco/core/internal/instr/SignatureRemover.java
Patch:
@@ -58,7 +58,7 @@ public void setActive(final boolean active) {
 	}
 
 	/**
-	 * Checks whether a entry with the provided name should be ignored at all.
+	 * Checks whether an entry with the provided name should be ignored at all.
 	 *
 	 * @param name
 	 *            path name of the entry in question

File: org.jacoco.core/src/org/jacoco/core/runtime/IRemoteCommandVisitor.java
Patch:
@@ -20,7 +20,7 @@
 public interface IRemoteCommandVisitor {
 
 	/**
-	 * Requests a execution data dump with an optional reset.
+	 * Requests an execution data dump with an optional reset.
 	 *
 	 * @param dump
 	 *            <code>true</code> if the dump should be executed

File: org.jacoco.core/src/org/jacoco/core/runtime/RuntimeData.java
Patch:
@@ -45,7 +45,7 @@ public RuntimeData() {
 
 	/**
 	 * Sets a session identifier for this runtime. The identifier is used when
-	 * execution data is collected. If no identifier is explicitly set a
+	 * execution data is collected. If no identifier is explicitly set an
 	 * identifier is generated from the host name and a random number. This
 	 * method can be called at any time.
 	 *

File: org.jacoco.examples/src/org/jacoco/examples/ClassInfo.java
Patch:
@@ -47,7 +47,7 @@ public ClassInfo(final PrintStream out) {
 	 * @param args
 	 *            command line parameters
 	 * @throws IOException
-	 *             in case of error reading a input file
+	 *             in case of error reading an input file
 	 */
 	public void execute(final String[] args) throws IOException {
 		for (final String file : args) {

File: org.jacoco.examples/src/org/jacoco/examples/CoreTutorial.java
Patch:
@@ -63,7 +63,7 @@ public static class MemoryClassLoader extends ClassLoader {
 		private final Map<String, byte[]> definitions = new HashMap<String, byte[]>();
 
 		/**
-		 * Add a in-memory representation of a class.
+		 * Add an in-memory representation of a class.
 		 *
 		 * @param name
 		 *            name of the class

File: org.jacoco.examples/src/org/jacoco/examples/ExecDump.java
Patch:
@@ -47,7 +47,7 @@ public ExecDump(final PrintStream out) {
 	 * @param args
 	 *            command line parameters
 	 * @throws IOException
-	 *             in case of error reading a input file
+	 *             in case of error reading an input file
 	 */
 	public void execute(final String[] args) throws IOException {
 		for (final String file : args) {

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/ITableItem.java
Patch:
@@ -16,7 +16,7 @@
 import org.jacoco.report.internal.html.ILinkable;
 
 /**
- * Interface for a item (row) in a coverage data table.
+ * Interface for an item (row) in a coverage data table.
  */
 public interface ITableItem extends ILinkable {
 

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/SortIndex.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 
 /**
- * A index on a list of items sorted with a given {@link Comparator}. The index
+ * An index on a list of items sorted with a given {@link Comparator}. The index
  * does not change the list itself.
  *
  * @param <T>
@@ -87,7 +87,7 @@ public void init(final List<? extends T> items) {
 	 * items list provided to the init() method.
 	 *
 	 * @param idx
-	 *            index of a element of the list
+	 *            index of an element of the list
 	 * @return its position in a sorted list
 	 */
 	public int getPosition(final int idx) {

File: org.jacoco.core/src/org/jacoco/core/data/IncompatibleExecDataVersionException.java
Patch:
@@ -21,6 +21,9 @@ public class IncompatibleExecDataVersionException extends IOException {
 
 	private static final long serialVersionUID = 1L;
 
+	/**
+	 * Actual version found in the execution data.
+	 */
 	private final int actualVersion;
 
 	/**

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/Agent.java
Patch:
@@ -64,7 +64,7 @@ public void run() {
 	}
 
 	/**
-	 * Returns a global instance which is already started. If a agent has not
+	 * Returns a global instance which is already started. If an agent has not
 	 * been initialized before this method will fail.
 	 *
 	 * @return global instance

File: org.jacoco.core/src/org/jacoco/core/runtime/AgentOptions.java
Patch:
@@ -610,7 +610,7 @@ public String getQuotedVMArgument(final File agentJarFile) {
 
 	/**
 	 * Generate required quotes JVM argument based on current configuration and
-	 * prepends it to the given argument command line. If a agent with the same
+	 * prepends it to the given argument command line. If an agent with the same
 	 * JAR file is already specified this parameter is removed from the existing
 	 * command line.
 	 *

File: org.jacoco.examples/src/org/jacoco/examples/ReportGenerator.java
Patch:
@@ -25,7 +25,7 @@
 import org.jacoco.report.html.HTMLFormatter;
 
 /**
- * This example creates a HTML report for eclipse like projects based on a
+ * This example creates an HTML report for eclipse like projects based on a
  * single execution data store called jacoco.exec. The report contains no
  * grouping information.
  *

File: org.jacoco.report/src/org/jacoco/report/internal/html/IHTMLReportContext.java
Patch:
@@ -20,7 +20,7 @@
 import org.jacoco.report.internal.html.table.Table;
 
 /**
- * Context and configuration information during creation of a HTML report.
+ * Context and configuration information during creation of an HTML report.
  */
 public interface IHTMLReportContext {
 

File: org.jacoco.report/src/org/jacoco/report/internal/html/index/ElementIndex.java
Patch:
@@ -29,7 +29,7 @@ public class ElementIndex implements IIndexUpdate {
 	private final Map<Long, String> allClasses = new HashMap<Long, String>();
 
 	/**
-	 * Creates a new empty index for a HTML report.
+	 * Creates a new empty index for an HTML report.
 	 *
 	 * @param baseFolder
 	 *            base folder where all links are calculated relative to

File: org.jacoco.report/src/org/jacoco/report/internal/xml/ReportElement.java
Patch:
@@ -32,7 +32,7 @@ public class ReportElement extends XMLElement {
 	private static final String SYSTEM = "report.dtd";
 
 	/**
-	 * Creates a <code>report</code> root element for a XML report.
+	 * Creates a <code>report</code> root element for an XML report.
 	 *
 	 * @param name
 	 *            value for the name attribute

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/SourceNodeImpl.java
Patch:
@@ -42,6 +42,8 @@ public SourceNodeImpl(final ElementType elementType, final String name) {
 	}
 
 	/**
+	 * @param fragment
+	 *            fragment to apply
 	 * @return <code>true</code> if fragment contains lines of this node
 	 */
 	public boolean applyFragment(final SourceNodeImpl fragment) {

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataReader.java
Patch:
@@ -46,7 +46,7 @@ public ExecutionDataReader(final InputStream input) {
 	}
 
 	/**
-	 * Sets an listener for session information.
+	 * Sets a listener for session information.
 	 *
 	 * @param visitor
 	 *            visitor to retrieve session info events
@@ -56,7 +56,7 @@ public void setSessionInfoVisitor(final ISessionInfoVisitor visitor) {
 	}
 
 	/**
-	 * Sets an listener for execution data.
+	 * Sets a listener for execution data.
 	 *
 	 * @param visitor
 	 *            visitor to retrieve execution data events

File: org.jacoco.core/src/org/jacoco/core/runtime/RemoteControlReader.java
Patch:
@@ -50,7 +50,7 @@ protected boolean readBlock(final byte blockid) throws IOException {
 	}
 
 	/**
-	 * Sets an listener for agent commands.
+	 * Sets a listener for agent commands.
 	 *
 	 * @param visitor
 	 *            visitor to retrieve agent commands

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataStore.java
Patch:
@@ -24,7 +24,7 @@
  * {@link IExecutionDataVisitor} interface. If execution data is provided
  * multiple times for the same class the data is merged, i.e. a probe is marked
  * as executed if it is reported as executed at least once. This allows to merge
- * coverage date from multiple runs. A instance of this class is not thread
+ * coverage date from multiple runs. An instance of this class is not thread
  * safe.
  */
 public final class ExecutionDataStore implements IExecutionDataVisitor {

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodCoverageCalculator.java
Patch:
@@ -25,9 +25,9 @@
 import org.objectweb.asm.tree.AbstractInsnNode;
 
 /**
- * Calculates the filtered coverage of a single method. A instance of this class
- * can be first used as {@link IFilterOutput} before the coverage result is
- * calculated.
+ * Calculates the filtered coverage of a single method. An instance of this
+ * class can be first used as {@link IFilterOutput} before the coverage result
+ * is calculated.
  */
 class MethodCoverageCalculator implements IFilterOutput {
 

File: org.jacoco.report/src/org/jacoco/report/internal/xml/XMLElement.java
Patch:
@@ -246,7 +246,7 @@ public final void text(final String text) throws IOException {
 
 	/**
 	 * Creates a new child element for this element. Might be overridden in
-	 * subclasses to return a instance of the subclass.
+	 * subclasses to return an instance of the subclass.
 	 *
 	 * @param name
 	 *            name of the child element

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/SessionsPage.java
Patch:
@@ -54,7 +54,7 @@ public class SessionsPage extends ReportPage {
 	private final ElementIndex index;
 
 	/**
-	 * Creates a new page page to display session information.
+	 * Creates a new page to display session information.
 	 *
 	 * @param sessionInfos
 	 *            session info objects

File: org.jacoco.report/src/org/jacoco/report/internal/xml/XMLElement.java
Patch:
@@ -157,7 +157,7 @@ private void quote(final String text) throws IOException {
 	}
 
 	/**
-	 * Adds an attribute to this element. May only be called before an child
+	 * Adds an attribute to this element. May only be called before a child
 	 * element is added or this element has been closed. The attribute value
 	 * will be quoted. If the value is <code>null</code> the attribute will not
 	 * be added.
@@ -188,7 +188,7 @@ public final void attr(final String name, final String value)
 	}
 
 	/**
-	 * Adds an attribute to this element. May only be called before an child
+	 * Adds an attribute to this element. May only be called before a child
 	 * element is added or this element has been closed. The attribute value is
 	 * the decimal representation of the given int value.
 	 *
@@ -206,7 +206,7 @@ public final void attr(final String name, final int value)
 	}
 
 	/**
-	 * Adds an attribute to this element. May only be called before an child
+	 * Adds an attribute to this element. May only be called before a child
 	 * element is added or this element has been closed. The attribute value is
 	 * the decimal representation of the given long value.
 	 *

File: org.jacoco.core.test/src/org/jacoco/core/test/perf/ExecuteInstrumentedCodeScenario.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This scenario runs a given scenario twice and reports the execution time:
- * Once on its original version, once in a instrumented version.
+ * Once on its original version, once in an instrumented version.
  */
 public class ExecuteInstrumentedCodeScenario extends TimedScenario {
 

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ClassInstrumenter.java
Patch:
@@ -28,7 +28,7 @@ public class ClassInstrumenter extends ClassProbesVisitor {
 	private String className;
 
 	/**
-	 * Emits a instrumented version of this class to the given class visitor.
+	 * Emits an instrumented version of this class to the given class visitor.
 	 *
 	 * @param probeArrayStrategy
 	 *            this strategy will be used to access the probe array

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelInfo.java
Patch:
@@ -119,7 +119,7 @@ public static void setMethodInvocationLine(final Label label) {
 	}
 
 	/**
-	 * Checks whether the a given label has been marked as a line with method
+	 * Checks whether the given label has been marked as a line with method
 	 * invocations.
 	 *
 	 * @param label

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/LineImplTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 /**
- * Unit tests for {@link LineImplTest}.
+ * Unit tests for {@link LineImpl}.
  */
 public class LineImplTest {
 

File: org.jacoco.report/src/org/jacoco/report/internal/NormalizedFileNames.java
Patch:
@@ -31,7 +31,7 @@
  * <li>File names are case aware, i.e. the same file name but with different
  * upper/lower case characters is not possible.</li>
  * <li>If unique filenames can't directly created from the ids, additional
- * suffixes are appended.</li>
+ * prefixes are prepended.</li>
  * </ul>
  */
 class NormalizedFileNames {
@@ -81,7 +81,7 @@ private String ensureUniqueness(final String s) {
 		String lower = unique.toLowerCase(Locale.ENGLISH);
 		int idx = 1;
 		while (usedNames.contains(lower)) {
-			unique = s + '~' + idx++;
+			unique = (idx++) + "~" + s;
 			lower = unique.toLowerCase(Locale.ENGLISH);
 		}
 		usedNames.add(lower);

File: org.jacoco.report/src/org/jacoco/report/internal/ReportOutputFolder.java
Patch:
@@ -83,8 +83,8 @@ public ReportOutputFolder subFolder(final String name) {
 	 * Creates a new file in this folder with the given local name.
 	 *
 	 * @param name
-	 *            name of the sub-folder
-	 * @return handle for output into the sub-folder
+	 *            name of the file
+	 * @return stream for output into the file
 	 * @throws IOException
 	 *             if the file creation fails
 	 */

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/PackageSourcePage.java
Patch:
@@ -70,8 +70,7 @@ public void render() throws IOException {
 
 	/**
 	 * Returns the link to the source file page of the source file with the
-	 * given name. If no source file was located, <code>null</code> is
-	 * returned..
+	 * given name. If no source file was located, <code>null</code> is returned.
 	 */
 	ILinkable getSourceFilePage(final String name) {
 		return sourceFilePages.get(name);

File: org.jacoco.core/src/org/jacoco/core/analysis/ISourceNode.java
Patch:
@@ -18,7 +18,7 @@
  */
 public interface ISourceNode extends ICoverageNode {
 
-	/** Place holder for unknown lines (no debug information) */
+	/** Placeholder for unknown lines (no debug information) */
 	int UNKNOWN_LINE = -1;
 
 	/**

File: org.jacoco.core/src/org/jacoco/core/analysis/IClassCoverage.java
Patch:
@@ -31,7 +31,7 @@ public interface IClassCoverage extends ISourceNode {
 	long getId();
 
 	/**
-	 * Returns if the the analyzed class does match the execution data provided.
+	 * Returns if the analyzed class does match the execution data provided.
 	 * More precisely if execution data is available for a class with the same
 	 * qualified name but with a different class id.
 	 *

File: org.jacoco.core/src/org/jacoco/core/analysis/ICoverageNode.java
Patch:
@@ -124,7 +124,7 @@ enum CounterEntity {
 	ICounter getClassCounter();
 
 	/**
-	 * Generic access to the the counters.
+	 * Generic access to the counters.
 	 *
 	 * @param entity
 	 *            entity we're we want to have the counter for

File: org.jacoco.report/src/org/jacoco/report/IReportGroupVisitor.java
Patch:
@@ -37,7 +37,7 @@
 public interface IReportGroupVisitor {
 
 	/**
-	 * Called to add a bundle to the the report.
+	 * Called to add a bundle to the report.
 	 *
 	 * @param bundle
 	 *            a bundle to include in the report

File: org.jacoco.ant.test/src/org/jacoco/ant/TestTarget.java
Patch:
@@ -21,8 +21,7 @@
 
 /**
  * Simple test target for Java applications ant JUnit4 tests. To assert
- * execution it creates an empty file <code>target.txt</code> in the working
- * directory.
+ * execution it prints "Target executed".
  */
 public class TestTarget {
 

File: org.jacoco.core.test.validation.java20/src/org/jacoco/core/test/validation/java20/targets/RecordPatternsTarget.java
Patch:
@@ -31,8 +31,8 @@ private static void instanceofOperator(Object o) {
 
 	private static void switchStatement(Object p) {
 		switch (p) { // assertFullyCovered(0, 2)
-		case Point(int x, int y) -> nop(x + y); // assertFullyCovered()
-		default -> nop(); // assertPartlyCovered()
+		case Point(int x, int y) -> nop(x + y); // assertSwitchStatementCase()
+		default -> nop(); // assertSwitchStatementDefault()
 		} // assertEmpty()
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/StringSwitchJavacFilter.java
Patch:
@@ -87,6 +87,9 @@ boolean match(final AbstractInsnNode start,
 					break;
 				}
 				nextIs(Opcodes.GOTO);
+				if (cursor == null) {
+					return false;
+				}
 				if (((JumpInsnNode) cursor).label != secondSwitchLabel) {
 					return false;
 				}

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/KotlinDefaultArgumentsFilter.java
Patch:
@@ -82,7 +82,7 @@ public void filter(final MethodNode methodNode,
 	private static class Matcher extends AbstractMatcher {
 		public void match(final MethodNode methodNode,
 				final IFilterOutput output, final boolean constructor) {
-			cursor = methodNode.instructions.getFirst();
+			cursor = skipNonOpcodes(methodNode.instructions.getFirst());
 
 			nextIs(Opcodes.IFNULL);
 			nextIsType(Opcodes.NEW, "java/lang/UnsupportedOperationException");
@@ -102,7 +102,7 @@ public void match(final MethodNode methodNode,
 				output.ignore(methodNode.instructions.getFirst(), cursor);
 				next();
 			} else {
-				cursor = methodNode.instructions.getFirst();
+				cursor = skipNonOpcodes(methodNode.instructions.getFirst());
 			}
 
 			final Set<AbstractInsnNode> ignore = new HashSet<AbstractInsnNode>();

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/DumpTest.java
Patch:
@@ -87,7 +87,9 @@ public void should_log_connection_error_when_retry_is_specified()
 		} catch (IOException ignore) {
 		}
 
-		assertContains("[WARN] Connection refused", err);
+		// Locale independent parts of error message:
+		assertContains("[WARN]", err);
+		assertContains("Connection refused", err);
 	}
 
 	private int startMockServer() throws IOException {

File: org.jacoco.core.test.validation.java14/src/org/jacoco/core/test/validation/java14/targets/RecordsTarget.java
Patch:
@@ -17,15 +17,15 @@
  */
 public class RecordsTarget {
 
-	private record WithoutFields() { // assertFullyCovered()
+	record WithoutFields() { // assertFullyCovered()
 	}
 
-	private record WithFields( // assertPartlyCovered()
+	record WithFields( // assertPartlyCovered()
 			int x // assertEmpty()
 	) {
 	}
 
-	private record WithCustomMethods(int x) { // assertFullyCovered()
+	record WithCustomMethods(int x) { // assertFullyCovered()
 		public int x() {
 			return x; // assertNotCovered()
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/AbstractMatcher.java
Patch:
@@ -35,7 +35,7 @@ abstract class AbstractMatcher {
 	final void firstIsALoad0(final MethodNode methodNode) {
 		cursor = methodNode.instructions.getFirst();
 		skipNonOpcodes();
-		if (cursor.getOpcode() == Opcodes.ALOAD
+		if (cursor != null && cursor.getOpcode() == Opcodes.ALOAD
 				&& ((VarInsnNode) cursor).var == 0) {
 			return;
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/Filters.java
Patch:
@@ -46,7 +46,7 @@ public static IFilter all() {
 				new KotlinUnsafeCastOperatorFilter(),
 				new KotlinNotNullOperatorFilter(),
 				new KotlinDefaultArgumentsFilter(), new KotlinInlineFilter(),
-				new KotlinCoroutineFilter());
+				new KotlinCoroutineFilter(), new KotlinDefaultMethodsFilter());
 	}
 
 	private Filters(final IFilter... filters) {

File: org.jacoco.core.test.validation.java14/src/org/jacoco/core/test/validation/java14/targets/InstanceofTarget.java
Patch:
@@ -20,8 +20,7 @@
 public class InstanceofTarget {
 
 	private static void ifInstanceof(Object e) {
-		/* See https://bugs.openjdk.java.net/browse/JDK-8237528 */
-		if (e instanceof String s) { // assertFullyCovered(1, 3)
+		if (e instanceof String s) { // assertInstanceof()
 			nop(s);
 		}
 	}

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/InstructionsBuilderTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import java.util.Map;
 
-import org.jacoco.core.analysis.ISourceFileCoverage;
+import org.jacoco.core.analysis.ISourceNode;
 import org.jacoco.core.internal.flow.LabelInfo;
 import org.junit.Before;
 import org.junit.Test;
@@ -53,7 +53,7 @@ public void current_line_number_should_be_applied_to_instructions() {
 		builder.addInstruction(i4);
 
 		Map<AbstractInsnNode, Instruction> map = builder.getInstructions();
-		assertEquals(ISourceFileCoverage.UNKNOWN_LINE, map.get(i1).getLine());
+		assertEquals(ISourceNode.UNKNOWN_LINE, map.get(i1).getLine());
 		assertEquals(10, map.get(i2).getLine());
 		assertEquals(10, map.get(i3).getLine());
 		assertEquals(20, map.get(i4).getLine());

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodCoverageCalculator.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
-import org.jacoco.core.analysis.ISourceFileCoverage;
 import org.jacoco.core.analysis.ISourceNode;
 import org.jacoco.core.internal.analysis.filter.IFilterOutput;
 import org.objectweb.asm.tree.AbstractInsnNode;
@@ -122,8 +121,8 @@ private void applyReplacements() {
 
 	private void ensureCapacity(final MethodCoverageImpl coverage) {
 		// Determine line range:
-		int firstLine = ISourceFileCoverage.UNKNOWN_LINE;
-		int lastLine = ISourceFileCoverage.UNKNOWN_LINE;
+		int firstLine = ISourceNode.UNKNOWN_LINE;
+		int lastLine = ISourceNode.UNKNOWN_LINE;
 		for (final Entry<AbstractInsnNode, Instruction> entry : instructions
 				.entrySet()) {
 			if (!ignored.contains(entry.getKey())) {

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/KotlinWhenFilter.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;
-import org.objectweb.asm.tree.InsnNode;
 import org.objectweb.asm.tree.JumpInsnNode;
 import org.objectweb.asm.tree.LabelNode;
 import org.objectweb.asm.tree.LookupSwitchInsnNode;
@@ -45,7 +44,7 @@ public void filter(final MethodNode methodNode,
 
 	private static class Matcher extends AbstractMatcher {
 		void match(final AbstractInsnNode start, final IFilterOutput output) {
-			if (start.getType() != InsnNode.LABEL) {
+			if (start.getType() != AbstractInsnNode.LABEL) {
 				return;
 			}
 			cursor = start;

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/BarColumn.java
Patch:
@@ -13,7 +13,6 @@
 package org.jacoco.report.internal.html.table;
 
 import java.io.IOException;
-import java.text.DecimalFormat;
 import java.text.NumberFormat;
 import java.util.Comparator;
 import java.util.List;
@@ -55,7 +54,7 @@ public class BarColumn implements IColumnRenderer {
 	 */
 	public BarColumn(final CounterEntity entity, final Locale locale) {
 		this.entity = entity;
-		this.integerFormat = DecimalFormat.getIntegerInstance(locale);
+		this.integerFormat = NumberFormat.getIntegerInstance(locale);
 		this.comparator = new TableItemComparator(
 				CounterComparator.MISSEDITEMS.reverse().on(entity).second(
 						CounterComparator.TOTALITEMS.reverse().on(entity)));

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/CounterColumn.java
Patch:
@@ -13,7 +13,6 @@
 package org.jacoco.report.internal.html.table;
 
 import java.io.IOException;
-import java.text.DecimalFormat;
 import java.text.NumberFormat;
 import java.util.Comparator;
 import java.util.List;
@@ -114,7 +113,7 @@ protected int getValue(final ICounter counter) {
 	protected CounterColumn(final CounterEntity entity, final Locale locale,
 			final Comparator<ICoverageNode> comparator) {
 		this.entity = entity;
-		this.integerFormat = DecimalFormat.getIntegerInstance(locale);
+		this.integerFormat = NumberFormat.getIntegerInstance(locale);
 		this.comparator = new TableItemComparator(comparator);
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/Instruction.java
Patch:
@@ -23,7 +23,7 @@
  * case of a simple sequence of instructions (by convention branch 0). Instances
  * of this class are used in two steps:
  * 
- * <h3>Step 1: Building the CFG</h3>
+ * <h2>Step 1: Building the CFG</h2>
  * 
  * For each bytecode instruction of a method a {@link Instruction} instance is
  * created. In correspondence with the CFG these instances are linked with each
@@ -32,7 +32,7 @@
  * flow ({@link #addBranch(boolean, int)}) or indirectly propagated along the
  * CFG edges ({@link #addBranch(Instruction, int)}).
  * 
- * <h3>Step 2: Querying the Coverage Status</h3>
+ * <h2>Step 2: Querying the Coverage Status</h2>
  * 
  * After all instructions have been created and linked each instruction knows
  * its execution status and can be queried with:

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/KotlinCoroutineFilter.java
Patch:
@@ -120,6 +120,9 @@ private void match(final MethodNode methodNode,
 			nextIsType(Opcodes.NEW, "java/lang/IllegalStateException");
 			nextIs(Opcodes.DUP);
 			nextIs(Opcodes.LDC);
+			if (cursor == null) {
+				return;
+			}
 			if (!((LdcInsnNode) cursor).cst.equals(
 					"call to 'resume' before 'invoke' with coroutine")) {
 				return;

File: org.jacoco.core/src/org/jacoco/core/internal/instr/IProbeArrayStrategy.java
Patch:
@@ -39,7 +39,7 @@ public interface IProbeArrayStrategy {
 	 * called after all original members of the class has been processed.
 	 * 
 	 * @param cv
-	 *            visitor to create fields and classes
+	 *            visitor to create fields and methods
 	 * @param probeCount
 	 *            total number of probes required for this class
 	 */

File: org.jacoco.core/src/org/jacoco/core/runtime/ModifiedSystemClassRuntime.java
Patch:
@@ -114,7 +114,7 @@ public static IRuntime createFor(final Instrumentation inst,
 	 * @return new runtime instance
 	 * 
 	 * @throws ClassNotFoundException
-	 *             id the given class can not be found
+	 *             if the given class can not be found
 	 */
 	public static IRuntime createFor(final Instrumentation inst,
 			final String className, final String accessFieldName)

File: org.jacoco.core/src/org/jacoco/core/analysis/CoverageBuilder.java
Patch:
@@ -95,7 +95,7 @@ public Collection<IClassCoverage> getNoMatchClasses() {
 		return result;
 	}
 
-	// === IStructureVisitor ===
+	// === ICoverageVisitor ===
 
 	public void visitCoverage(final IClassCoverage coverage) {
 		// Only consider classes that actually contain code:

File: org.jacoco.report.test/src/org/jacoco/report/internal/html/page/PackagePageTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.w3c.dom.Document;
 
 /**
- * Unit tests for {@link PackageSourcePage}.
+ * Unit tests for {@link PackagePage}.
  */
 public class PackagePageTest extends PageTestBase {
 

File: org.jacoco.core.test.validation.kotlin/src/org/jacoco/core/test/validation/kotlin/KotlinInlineTest.java
Patch:
@@ -12,15 +12,15 @@
 package org.jacoco.core.test.validation.kotlin;
 
 import org.jacoco.core.test.validation.ValidationTestBase;
-import org.jacoco.core.test.validation.kotlin.targets.KotlinInlineTarget;
+import org.jacoco.core.test.validation.kotlin.targets.KotlinInlineTargetKt;
 
 /**
  * Test of <code>inline</code> functions.
  */
 public class KotlinInlineTest extends ValidationTestBase {
 
 	public KotlinInlineTest() {
-		super(KotlinInlineTarget.class);
+		super(KotlinInlineTargetKt.class);
 	}
 
 }

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/filter/Filters.java
Patch:
@@ -35,7 +35,8 @@ public final class Filters implements IFilter {
 			new EnumEmptyConstructorFilter(), new AnnotationGeneratedFilter(),
 			new KotlinGeneratedFilter(), new KotlinLateinitFilter(),
 			new KotlinWhenFilter(), new KotlinWhenStringFilter(),
-			new KotlinUnsafeCastOperatorFilter());
+			new KotlinUnsafeCastOperatorFilter(),
+			new KotlinDefaultArgumentsFilter());
 
 	private final IFilter[] filters;
 

File: org.jacoco.core.test.validation.java5/src/org/jacoco/core/test/validation/java5/targets/SyntheticTarget.java
Patch:
@@ -19,7 +19,7 @@ public class SyntheticTarget { // $line-classdef$
 	private static int counter; // $line-field$
 
 	/**
-	 * {@link org.jacoco.core.test.validation.java5.targets.ImplicitDefaultConstructorTarget
+	 * {@link org.jacoco.core.test.validation.java5.targets.ConstructorsTarget
 	 * Default constructor will refer to a line of class definition}, so that we
 	 * define constructor explicitly in order to verify that we filter all other
 	 * constructions here that might refer to line of class definition.

File: org.jacoco.core.test.validation.java7/src/org/jacoco/core/test/validation/java7/StringSwitchTest.java
Patch:
@@ -27,7 +27,7 @@ public StringSwitchTest() {
 	}
 
 	/**
-	 * {@link StringSwitchTarget#covered(String)}
+	 * {@link StringSwitchTarget#covered(Object)}
 	 */
 	@Test
 	public void covered() {
@@ -43,7 +43,7 @@ public void covered() {
 	}
 
 	/**
-	 * {@link StringSwitchTarget#notCovered(String)}
+	 * {@link StringSwitchTarget#notCovered(Object)}
 	 */
 	@Test
 	public void notCovered() {

File: org.jacoco.core/src/org/jacoco/core/internal/instr/InstrSupport.java
Patch:
@@ -185,8 +185,9 @@ public static boolean needsFrames(final int version) {
 	public static void assertNotInstrumented(final String member,
 			final String owner) throws IllegalStateException {
 		if (member.equals(DATAFIELD_NAME) || member.equals(INITMETHOD_NAME)) {
-			throw new IllegalStateException(
-					format("Class %s is already instrumented.", owner));
+			throw new IllegalStateException(format(
+					"Cannot process instrumented class %s. Please supply original non-instrumented classes.",
+					owner));
 		}
 	}
 

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/MainTest.java
Patch:
@@ -24,7 +24,7 @@ public void should_print_usage_when_no_arguments_given() throws Exception {
 
 		assertFailure();
 		assertNoOutput(out);
-		assertContains("Argument \"<command>\" is required", err);
+		assertContains("\"<command>\"", err);
 		assertContains("Usage: java -jar jacococli.jar --help | <command>",
 				err);
 		assertContains("Command line interface for JaCoCo.", err);

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/ClassInfoTest.java
Patch:
@@ -25,7 +25,7 @@ public void should_print_usage_when_invalid_option_is_given()
 		execute("classinfo", "--invalid");
 
 		assertFailure();
-		assertContains("\"--invalid\" is not a valid option", err);
+		assertContains("\"--invalid\"", err);
 		assertContains(
 				"java -jar jacococli.jar classinfo [<classlocations> ...]",
 				err);

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/DumpTest.java
Patch:
@@ -51,7 +51,7 @@ public void should_print_usage_when_no_argument_is_given()
 			throws Exception {
 		execute("dump");
 		assertFailure();
-		assertContains("Option \"--destfile\" is required", err);
+		assertContains("\"--destfile\"", err);
 		assertContains("java -jar jacococli.jar dump [--address <address>]",
 				err);
 	}

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/ExecInfoTest.java
Patch:
@@ -37,7 +37,7 @@ public void should_print_usage_when_invalid_argument_is_given()
 		execute("execinfo", "--invalid");
 
 		assertFailure();
-		assertContains("\"--invalid\" is not a valid option", err);
+		assertContains("\"--invalid\"", err);
 		assertContains("java -jar jacococli.jar execinfo [<execfiles> ...]",
 				err);
 	}

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/InstrumentTest.java
Patch:
@@ -47,7 +47,7 @@ public void should_print_usage_when_no_options_are_given()
 			throws Exception {
 		execute("instrument");
 		assertFailure();
-		assertContains("Option \"--dest\" is required", err);
+		assertContains("\"--dest\"", err);
 		assertContains(
 				"Usage: java -jar jacococli.jar instrument [<sourcefiles> ...]",
 				err);

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/MergeTest.java
Patch:
@@ -43,7 +43,7 @@ public void should_print_usage_when_no_options_are_given()
 		execute("merge");
 
 		assertFailure();
-		assertContains("Option \"--destfile\" is required", err);
+		assertContains("\"--destfile\"", err);
 		assertContains("java -jar jacococli.jar merge [<execfiles> ...]", err);
 	}
 

File: org.jacoco.cli.test/src/org/jacoco/cli/internal/commands/ReportTest.java
Patch:
@@ -37,7 +37,7 @@ public void should_print_usage_when_no_options_are_given()
 		execute("report");
 
 		assertFailure();
-		assertContains("Option \"--classfiles\" is required", err);
+		assertContains("\"--classfiles\"", err);
 		assertContains(
 				"Usage: java -jar jacococli.jar report [<execfiles> ...]", err);
 	}

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionData.java
Patch:
@@ -141,7 +141,7 @@ public void merge(final ExecutionData other) {
 	 * A or B
 	 * </pre>
 	 * 
-	 * For <code>flag==true</code> this can be considered as a subtraction
+	 * For <code>flag==false</code> this can be considered as a subtraction
 	 * 
 	 * <pre>
 	 * A and not B

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/MethodAnalyzerTest.java
Patch:
@@ -695,7 +695,7 @@ public void try_catch_should_create_3_probes() {
 	}
 
 	@Test
-	public void try_catch_should_should_show_missed_when_no_probes_are_executed() {
+	public void try_catch_should_show_missed_when_no_probes_are_executed() {
 		createTryCatchBlock();
 		runMethodAnalzer();
 
@@ -705,7 +705,7 @@ public void try_catch_should_should_show_missed_when_no_probes_are_executed() {
 	}
 
 	@Test
-	public void try_catch_should_should_show_exception_handler_missed_when_probe_is_not_executed() {
+	public void try_catch_should_show_exception_handler_missed_when_probe_is_not_executed() {
 		createTryCatchBlock();
 		probes[0] = true;
 		probes[1] = true;
@@ -718,7 +718,7 @@ public void try_catch_should_should_show_exception_handler_missed_when_probe_is_
 	}
 
 	@Test
-	public void try_catch_should_should_show_all_covered_when_all_probes_are_executed() {
+	public void try_catch_should_show_all_covered_when_all_probes_are_executed() {
 		createTryCatchBlock();
 		probes[0] = true;
 		probes[1] = true;

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ResizeInstructionsTest.java
Patch:
@@ -69,6 +69,7 @@ public void visitEnd() {
 						null);
 				mv.visitCode();
 				addCauseOfResizeInstructions(mv);
+				mv.visitInsn(Opcodes.NOP);
 				mv.visitMaxs(2, 1);
 				mv.visitEnd();
 				super.visitEnd();

File: org.jacoco.core.test/src-java8/org/jacoco/core/test/validation/BootstrapMethodReferenceTest.java
Patch:
@@ -34,9 +34,9 @@
 import org.objectweb.asm.Opcodes;
 
 /**
- * Test of ASM bug <a href=
- * "http://forge.ow2.org/tracker/?func=detail&aid=317748&group_id=23&atid=100023">#317748</a>
- * that caused
+ * Test of ASM bug
+ * <a href="https://gitlab.ow2.org/asm/asm/issues/317748">#317748</a> that
+ * caused
  * {@code java.lang.ClassFormatError: Short length on BootstrapMethods in class file}
  * during instrumentation.
  */

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ResizeInstructionsTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.objectweb.asm.Opcodes;
 
 /**
- * Test of ASM bug <a href=
- * "http://forge.ow2.org/tracker/?func=detail&aid=317630&group_id=23&atid=100023">#317630</a>
- * that caused {@code java.lang.ClassNotFoundException}.
+ * Test of ASM bug
+ * <a href= "https://gitlab.ow2.org/asm/asm/issues/317630">#317630</a> that
+ * caused {@code java.lang.ClassNotFoundException}.
  */
 public class ResizeInstructionsTest {
 

File: org.jacoco.core.test/src-java7/org/jacoco/core/test/filter/TryWithResourcesTest.java
Patch:
@@ -164,7 +164,7 @@ public void empty() {
 		// empty when EJC:
 		if (isJDKCompiler) {
 			final String jdkVersion = System.getProperty("java.version");
-			if (jdkVersion.startsWith("9-")) {
+			if (jdkVersion.startsWith("9")) {
 				assertLine("empty.close", ICounter.FULLY_COVERED, 0, 0);
 			} else {
 				// branches with javac 7 and 8

File: org.jacoco.core/src/org/jacoco/core/internal/Java9Support.java
Patch:
@@ -41,9 +41,6 @@ private Java9Support() {
 	 */
 	public static byte[] readFully(final InputStream is)
 			throws IOException {
-		if (is == null) {
-			throw new IllegalArgumentException();
-		}
 		final byte[] buf = new byte[1024];
 		final ByteArrayOutputStream out = new ByteArrayOutputStream();
 		while (true) {

File: org.jacoco.examples/src/org/jacoco/examples/ExecutionDataClient.java
Patch:
@@ -55,7 +55,9 @@ public static void main(final String[] args) throws IOException {
 
 		// Send a dump command and read the response:
 		writer.visitDumpCommand(true, false);
-		reader.read();
+		if (!reader.read()) {
+			throw new IOException("Socket closed unexpectedly.");
+		}
 
 		socket.close();
 		localFile.close();

File: org.jacoco.core/src/org/jacoco/core/instr/Instrumenter.java
Patch:
@@ -100,7 +100,7 @@ protected String getCommonSuperClass(final String type1,
 	 *            a name used for exception messages
 	 * @return instrumented definition
 	 * @throws IOException
-	 *             if the class can't be analyzed
+	 *             if the class can't be instrumented
 	 */
 	public byte[] instrument(final byte[] buffer, final String name)
 			throws IOException {

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/ClassAnalyzerTest.java
Patch:
@@ -12,8 +12,6 @@
 package org.jacoco.core.internal.analysis;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
 
 import org.jacoco.core.internal.flow.MethodProbesVisitor;
 import org.jacoco.core.internal.instr.InstrSupport;

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/filter/LombokGeneratedFilterTest.java
Patch:
@@ -14,13 +14,10 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-import java.util.Arrays;
-
 import org.jacoco.core.internal.instr.InstrSupport;
 import org.junit.Test;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;
-import org.objectweb.asm.tree.AnnotationNode;
 import org.objectweb.asm.tree.MethodNode;
 
 public class LombokGeneratedFilterTest implements IFilterOutput {

File: org.jacoco.core.test/src/org/jacoco/core/internal/instr/ProbeArrayStrategyFactoryTest.java
Patch:
@@ -337,7 +337,8 @@ public void visitMethodInsn(int opcode, String owner,
 						assertFalse(itf);
 						return;
 					}
-					assertEquals(itf, isInterface);
+					assertEquals(Boolean.valueOf(itf),
+							Boolean.valueOf(isInterface));
 
 					assertEquals(Opcodes.INVOKESTATIC, opcode);
 					assertEquals("Foo", owner);

File: org.jacoco.core.test/src/org/jacoco/core/test/filter/targets/Synthetic.java
Patch:
@@ -21,7 +21,8 @@ public class Synthetic { // $line-classdef$
 	private Synthetic() {
 	}
 
-	private static class Inner extends Synthetic { // $line-inner.classdef$
+	static class Inner extends Synthetic { // $line-inner.classdef$
+
 		Inner() {
 		}
 

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/FramesTest.java
Patch:
@@ -17,7 +17,6 @@
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
-import org.jacoco.core.JaCoCo;
 import org.jacoco.core.instr.Instrumenter;
 import org.jacoco.core.internal.Java9Support;
 import org.jacoco.core.internal.instr.InstrSupport;
@@ -109,8 +108,9 @@ public void visit(int version, int access, String name,
 	private String dump(byte[] bytes) {
 		final StringWriter buffer = new StringWriter();
 		final PrintWriter writer = new PrintWriter(buffer);
-		new ClassReader(bytes).accept(new MaxStackEliminator(
-				new TraceClassVisitor(writer)), ClassReader.EXPAND_FRAMES);
+		new ClassReader(bytes).accept(
+				new MaxStackEliminator(new TraceClassVisitor(writer)),
+				ClassReader.EXPAND_FRAMES);
 		return buffer.toString();
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/SourceNodeImpl.java
Patch:
@@ -43,7 +43,7 @@ public SourceNodeImpl(final ElementType elementType, final String name) {
 	/**
 	 * Make sure that the internal buffer can keep lines from first to last.
 	 * While the buffer is also incremented automatically, this method allows
-	 * optimization in case the total range in known in advance.
+	 * optimization in case the total range is known in advance.
 	 * 
 	 * @param first
 	 *            first line number or {@link ISourceNode#UNKNOWN_LINE}

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportSupport.java
Patch:
@@ -51,7 +51,7 @@
  * <ol>
  * <li>Create an instance</li>
  * <li>Load one or multiple exec files with <code>loadExecutionData()</code></li>
- * <li>Add one ore multiple formatters with <code>addXXX()</code> methods</li>
+ * <li>Add one or multiple formatters with <code>addXXX()</code> methods</li>
  * <li>Create the root visitor with <code>initRootVisitor()</code></li>
  * <li>Process one or multiple projects with <code>processProject()</code></li>
  * </ol>

File: jacoco-maven-plugin/src/org/jacoco/maven/AgentMojo.java
Patch:
@@ -36,7 +36,7 @@
  * </p>
  *
  * <p>
- * One of the ways to do this in case of maven-surefore-plugin - is to use
+ * One of the ways to do this in case of maven-surefire-plugin - is to use
  * syntax for <a href="http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation">late property evaluation</a>:
  * </p>
  * 

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/targets/BadCycleClass.java
Patch:
@@ -24,15 +24,15 @@ public static class Base {
 	public static class Child extends Base {
 
 		static {
-			Stubs.nop("child clinit"); // $line-childclinit$
+			Stubs.logEvent("childclinit"); // $line-childclinit$
 		}
 
 		public Child() {
-			Stubs.nop("child init"); // $line-childinit$
+			Stubs.logEvent("childinit"); // $line-childinit$
 		}
 
 		void someMethod() {
-			Stubs.nop("child someMethod"); // $line-childsomeMethod$
+			Stubs.logEvent("childsomeMethod"); // $line-childsomeMethod$
 		}
 
 	}

File: org.jacoco.core.test/src-java8/org/jacoco/core/test/validation/InterfaceDefaultMethodsTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 
 /**
- * Tests of static initializer in interfaces.
+ * Tests of static initializer and default methods in interfaces.
  */
 public class InterfaceDefaultMethodsTest extends ValidationTestBase {
 

File: org.jacoco.core.test/src-java8/org/jacoco/core/test/validation/targets/InterfaceDefaultMethodsTarget.java
Patch:
@@ -14,7 +14,7 @@
 import static org.jacoco.core.test.validation.targets.Stubs.i1;
 
 /**
- * This test target is an interface with a class initializer.
+ * This test target is an interface with a class initializer and default methods.
  */
 public interface InterfaceDefaultMethodsTarget {
 

File: org.jacoco.core.test/src/org/jacoco/core/internal/instr/ClassInstrumenterTest.java
Patch:
@@ -62,7 +62,7 @@ public MethodVisitor visitMethod(int access, String name,
 
 	// === IProbeArrayStrategy ===
 
-	public int storeInstance(MethodVisitor mv, int variable) {
+	public int storeInstance(MethodVisitor mv, boolean clinit, int variable) {
 		return 0;
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ClassInstrumenter.java
Patch:
@@ -70,7 +70,7 @@ public MethodProbesVisitor visitMethod(final int access, final String name,
 		}
 		final MethodVisitor frameEliminator = new DuplicateFrameEliminator(mv);
 		final ProbeInserter probeVariableInserter = new ProbeInserter(access,
-				desc, frameEliminator, probeArrayStrategy);
+				name, desc, frameEliminator, probeArrayStrategy);
 		return new MethodInstrumenter(probeVariableInserter,
 				probeVariableInserter);
 	}

File: org.jacoco.core/src/org/jacoco/core/internal/instr/IProbeArrayStrategy.java
Patch:
@@ -26,11 +26,13 @@ public interface IProbeArrayStrategy {
 	 * 
 	 * @param mv
 	 *            visitor to create code
+	 * @param clinit
+	 *            true in case of {@code <clinit>} method
 	 * @param variable
 	 *            variable index to store probe array to
 	 * @return maximum stack size required by the generated code
 	 */
-	int storeInstance(MethodVisitor mv, int variable);
+	int storeInstance(MethodVisitor mv, boolean clinit, int variable);
 
 	/**
 	 * Adds additional class members required by this strategy. This method is

File: org.jacoco.core/src/org/jacoco/core/internal/instr/LocalProbeArrayStrategy.java
Patch:
@@ -38,7 +38,8 @@ class LocalProbeArrayStrategy implements IProbeArrayStrategy {
 		this.accessorGenerator = accessorGenerator;
 	}
 
-	public int storeInstance(final MethodVisitor mv, final int variable) {
+	public int storeInstance(final MethodVisitor mv, final boolean clinit,
+			final int variable) {
 		final int maxStack = accessorGenerator.generateDataAccessor(classId,
 				className, probeCount, mv);
 		mv.visitVarInsn(Opcodes.ASTORE, variable);

File: org.jacoco.core/src/org/jacoco/core/internal/instr/NoneProbeArrayStrategy.java
Patch:
@@ -20,7 +20,8 @@
  */
 class NoneProbeArrayStrategy implements IProbeArrayStrategy {
 
-	public int storeInstance(final MethodVisitor mv, final int variable) {
+	public int storeInstance(final MethodVisitor mv, final boolean clinit,
+			final int variable) {
 		throw new UnsupportedOperationException();
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ProbeCounter.java
Patch:
@@ -30,7 +30,7 @@ class ProbeCounter extends ClassProbesVisitor {
 	@Override
 	public MethodProbesVisitor visitMethod(final int access, final String name,
 			final String desc, final String signature, final String[] exceptions) {
-		if (!"<clinit>".equals(name)) {
+		if (!InstrSupport.CLINIT_NAME.equals(name)) {
 			methods = true;
 		}
 		return null;

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/FramesTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.jacoco.core.JaCoCo;
 import org.jacoco.core.instr.Instrumenter;
+import org.jacoco.core.internal.Java9Support;
 import org.jacoco.core.runtime.IRuntime;
 import org.jacoco.core.runtime.SystemPropertiesRuntime;
 import org.jacoco.core.test.TargetLoader;
@@ -87,7 +88,8 @@ private void testFrames(byte[] source) throws IOException {
 	}
 
 	private byte[] calculateFrames(byte[] source) {
-		ClassReader rc = new ClassReader(source);
+		ClassReader rc = new ClassReader(
+				Java9Support.downgradeIfRequired(source));
 		ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
 
 		// Adjust Version to 1.6 to enable frames:

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/StructuredLockingTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Set;
 
 import org.jacoco.core.instr.Instrumenter;
+import org.jacoco.core.internal.Java9Support;
 import org.jacoco.core.runtime.IRuntime;
 import org.jacoco.core.runtime.SystemPropertiesRuntime;
 import org.jacoco.core.test.TargetLoader;
@@ -63,7 +64,8 @@ private void assertStructuredLocking(byte[] source) throws Exception {
 		byte[] instrumented = instrumenter.instrument(source, "TestTarget");
 
 		ClassNode cn = new ClassNode();
-		new ClassReader(instrumented).accept(cn, 0);
+		new ClassReader(Java9Support.downgradeIfRequired(instrumented))
+				.accept(cn, 0);
 		for (MethodNode mn : cn.methods) {
 			assertStructuredLocking(cn.name, mn);
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ProbeArrayStrategyFactory.java
Patch:
@@ -51,15 +51,15 @@ public static IProbeArrayStrategy createFor(final ClassReader reader,
 			}
 			if (version >= Opcodes.V1_8 && counter.hasMethods()) {
 				return new FieldProbeArrayStrategy(className, classId,
-						withFrames, InstrSupport.DATAFIELD_INTF_ACC,
+						withFrames, true, InstrSupport.DATAFIELD_INTF_ACC,
 						accessorGenerator);
 			} else {
 				return new LocalProbeArrayStrategy(className, classId,
 						counter.getCount(), accessorGenerator);
 			}
 		} else {
 			return new FieldProbeArrayStrategy(className, classId, withFrames,
-					InstrSupport.DATAFIELD_ACC, accessorGenerator);
+					false, InstrSupport.DATAFIELD_ACC, accessorGenerator);
 		}
 	}
 

File: jacoco-maven-plugin/src/org/jacoco/maven/FileFilter.java
Patch:
@@ -53,7 +53,6 @@ public FileFilter(final List<String> includes, final List<String> excludes) {
 	 * @throws IOException
 	 *             if file system access fails
 	 */
-	@SuppressWarnings("unchecked")
 	public List<String> getFileNames(final File directory) throws IOException {
 		return FileUtils.getFileNames(directory, getIncludes(), getExcludes(),
 				false);
@@ -68,7 +67,6 @@ public List<String> getFileNames(final File directory) throws IOException {
 	 * @throws IOException
 	 *             if file system access fails
 	 */
-	@SuppressWarnings("unchecked")
 	public List<File> getFiles(final File directory) throws IOException {
 		return FileUtils.getFiles(directory, getIncludes(), getExcludes());
 	}

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/CoverageTransformerTest.java
Patch:
@@ -200,7 +200,7 @@ public void testTransformFiltered1() throws IllegalClassFormatException {
 	@Test
 	public void testTransformFiltered2() throws IllegalClassFormatException {
 		CoverageTransformer t = createTransformer();
-		assertNull(t.transform(null, "org.jacoco.Sample", null,
+		assertNull(t.transform((ClassLoader) null, "org.jacoco.Sample", null,
 				protectionDomain, new byte[0]));
 	}
 

File: org.jacoco.core/src/org/jacoco/core/runtime/AgentOptions.java
Patch:
@@ -114,7 +114,8 @@ public final class AgentOptions {
 	 */
 	public static final String OUTPUT = "output";
 
-	private static final Pattern OPTION_SPLIT = Pattern.compile(",(?=[a-z]+=)");
+	private static final Pattern OPTION_SPLIT = Pattern
+			.compile(",(?=[a-zA-Z0-9_\\-]+=)");
 
 	/**
 	 * Possible values for {@link AgentOptions#OUTPUT}.

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataStore.java
Patch:
@@ -11,6 +11,7 @@
  *******************************************************************************/
 package org.jacoco.core.data;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -154,7 +155,7 @@ public void reset() {
 	 * @return current contents
 	 */
 	public Collection<ExecutionData> getContents() {
-		return entries.values();
+		return new ArrayList<ExecutionData>(entries.values());
 	}
 
 	/**
@@ -164,7 +165,7 @@ public Collection<ExecutionData> getContents() {
 	 *            interface to write content to
 	 */
 	public void accept(final IExecutionDataVisitor visitor) {
-		for (final ExecutionData data : entries.values()) {
+		for (final ExecutionData data : getContents()) {
 			visitor.visitClassExecution(data);
 		}
 	}

File: org.jacoco.core.test/src/org/jacoco/core/runtime/AgentOptionsTest.java
Patch:
@@ -438,8 +438,6 @@ public void testPrependVMArgumentsReplace() {
 	
 	@Test // issue #358
 	public void testDestFileWithComma() {
-		AgentOptions options = new AgentOptions();
-
 		AgentOptions options = new AgentOptions("destfile=build/jacoco/foo, bar.exec");
 		assertEquals("build/jacoco/foo, bar.exec", options.getDestfile());
 	}

File: org.jacoco.core.test/src/org/jacoco/core/data/ExecutionDataReaderWriterTest.java
Patch:
@@ -135,8 +135,8 @@ public void testInvalidMagicNumber() throws IOException {
 		createReader().read();
 	}
 
-	@Test(expected = IOException.class)
-	public void testInvalidHeaderVersion() throws IOException {
+	@Test(expected = IncompatibleExecDataVersionException.class)
+	public void testInvalidVersion() throws IOException {
 		buffer = new ByteArrayOutputStream();
 		buffer.write(ExecutionDataWriter.BLOCK_HEADER);
 		buffer.write(0xC0);

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/java8/LambdaExpressionsTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 
 /**
- * Tests of basic Java control structures.
+ * Tests for different lambda expressions.
  */
 public class LambdaExpressionsTest extends ValidationTestBase {
 

File: org.jacoco.core.test/src/org/jacoco/core/data/ExecutionDataReaderWriterTest.java
Patch:
@@ -135,8 +135,8 @@ public void testInvalidMagicNumber() throws IOException {
 		createReader().read();
 	}
 
-	@Test(expected = IOException.class)
-	public void testInvalidHeaderVersion() throws IOException {
+	@Test(expected = IncompatibleExecDataVersionException.class)
+	public void testInvalidVersion() throws IOException {
 		buffer = new ByteArrayOutputStream();
 		buffer.write(ExecutionDataWriter.BLOCK_HEADER);
 		buffer.write(0xC0);

File: org.jacoco.core.test/src/org/jacoco/core/data/ExecutionDataReaderWriterTest.java
Patch:
@@ -135,8 +135,8 @@ public void testInvalidMagicNumber() throws IOException {
 		createReader().read();
 	}
 
-	@Test(expected = IOException.class)
-	public void testInvalidHeaderVersion() throws IOException {
+	@Test(expected = IncompatibleExecDataVersionException.class)
+	public void testInvalidVersion() throws IOException {
 		buffer = new ByteArrayOutputStream();
 		buffer.write(ExecutionDataWriter.BLOCK_HEADER);
 		buffer.write(0xC0);

File: org.jacoco.core.test/src/org/jacoco/core/analysis/AnalyzerTest.java
Patch:
@@ -93,7 +93,7 @@ public void testAnalyzeClassIdMatch() throws IOException {
 		final byte[] bytes = TargetLoader
 				.getClassDataAsBytes(AnalyzerTest.class);
 		executionData.get(Long.valueOf(CRC64.checksum(bytes)),
-				"org/jacoco/core/analysis/AnalyzerTest", 100);
+				"org/jacoco/core/analysis/AnalyzerTest", 200);
 		analyzer.analyzeClass(bytes, "Test");
 		assertFalse(classes.get("org/jacoco/core/analysis/AnalyzerTest")
 				.isNoMatch());
@@ -102,7 +102,7 @@ public void testAnalyzeClassIdMatch() throws IOException {
 	@Test
 	public void testAnalyzeClassNoIdMatch() throws IOException {
 		executionData.get(Long.valueOf(0),
-				"org/jacoco/core/analysis/AnalyzerTest", 100);
+				"org/jacoco/core/analysis/AnalyzerTest", 200);
 		analyzer.analyzeClass(
 				TargetLoader.getClassDataAsBytes(AnalyzerTest.class), "Test");
 		assertTrue(classes.get("org/jacoco/core/analysis/AnalyzerTest")

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ExceptionsTest.java
Patch:
@@ -36,7 +36,7 @@ public void testCoverageResult() {
 		// 1. Implicit Exception
 		// Currently no coverage at all, as we don't see when a block aborts
 		// somewhere in the middle.
-		assertLine("implicitException.before", ICounter.NOT_COVERED);
+		assertLine("implicitException.before", ICounter.FULLY_COVERED);
 		assertLine("implicitException.exception", ICounter.NOT_COVERED);
 		assertLine("implicitException.after", ICounter.NOT_COVERED);
 
@@ -55,7 +55,7 @@ public void testCoverageResult() {
 		// somewhere in the middle.
 		assertLine("implicitExceptionTryCatch.beforeBlock",
 				ICounter.FULLY_COVERED);
-		assertLine("implicitExceptionTryCatch.before", ICounter.NOT_COVERED);
+		assertLine("implicitExceptionTryCatch.before", ICounter.FULLY_COVERED);
 		assertLine("implicitExceptionTryCatch.exception", ICounter.NOT_COVERED);
 		assertLine("implicitExceptionTryCatch.after", ICounter.NOT_COVERED);
 		assertLine("implicitExceptionTryCatch.catchBlock",
@@ -89,7 +89,7 @@ public void testCoverageResult() {
 		// Finally block is yellow as the non-exception path is missing.
 		assertLine("implicitExceptionFinally.beforeBlock",
 				ICounter.FULLY_COVERED);
-		assertLine("implicitExceptionFinally.before", ICounter.NOT_COVERED);
+		assertLine("implicitExceptionFinally.before", ICounter.FULLY_COVERED);
 		assertLine("implicitExceptionFinally.exception", ICounter.NOT_COVERED);
 		assertLine("implicitExceptionFinally.after", ICounter.NOT_COVERED);
 		assertLine("implicitExceptionFinally.finallyBlock",

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataWriter.java
Patch:
@@ -24,7 +24,7 @@ public class ExecutionDataWriter implements ISessionInfoVisitor,
 		IExecutionDataVisitor {
 
 	/** File format version, will be incremented for each incompatible change. */
-	public static final char FORMAT_VERSION = 0x1006;
+	public static final char FORMAT_VERSION = 0x1007;
 
 	/** Magic number in header for file format identification. */
 	public static final char MAGIC_NUMBER = 0xC0C0;

File: org.jacoco.core/src/org/jacoco/core/internal/flow/MethodProbesAdapter.java
Patch:
@@ -68,8 +68,7 @@ public void visitTryCatchBlock(Label start, final Label end,
 		// a different label for the try-catch block.
 		if (tryCatchProbeLabels.containsKey(start)) {
 			start = tryCatchProbeLabels.get(start);
-		} else if (LabelInfo.isMultiTarget(start)
-				&& LabelInfo.isSuccessor(start)) {
+		} else if (LabelInfo.needsProbe(start)) {
 			final Label probeLabel = new Label();
 			LabelInfo.setSuccessor(probeLabel);
 			tryCatchProbeLabels.put(start, probeLabel);
@@ -80,7 +79,7 @@ public void visitTryCatchBlock(Label start, final Label end,
 
 	@Override
 	public void visitLabel(final Label label) {
-		if (LabelInfo.isMultiTarget(label) && LabelInfo.isSuccessor(label)) {
+		if (LabelInfo.needsProbe(label)) {
 			if (tryCatchProbeLabels.containsKey(label)) {
 				probesVisitor.visitLabel(tryCatchProbeLabels.get(label));
 			}

File: org.jacoco.core.test/src/org/jacoco/core/runtime/AgentOptionsTest.java
Patch:
@@ -37,7 +37,7 @@ public static void beforeClass() {
 	@Test
 	public void testDefaults() {
 		AgentOptions options = new AgentOptions();
-		assertEquals("jacoco.exec", options.getDestfile());
+		assertEquals(AgentOptions.DEFAULT_DESTFILE, options.getDestfile());
 		assertTrue(options.getAppend());
 		assertEquals("*", options.getIncludes());
 		assertEquals("", options.getExcludes());
@@ -47,8 +47,8 @@ public void testDefaults() {
 		assertNull(options.getSessionId());
 		assertTrue(options.getDumpOnExit());
 		assertEquals(AgentOptions.OutputMode.file, options.getOutput());
-		assertNull(options.getAddress());
-		assertEquals(6300, options.getPort());
+		assertEquals(AgentOptions.DEFAULT_ADDRESS, options.getAddress());
+		assertEquals(AgentOptions.DEFAULT_PORT, options.getPort());
 		assertNull(options.getClassDumpDir());
 		assertFalse(options.getJmx());
 

File: org.jacoco.core.test/src/org/jacoco/core/runtime/AgentOptionsTest.java
Patch:
@@ -37,7 +37,7 @@ public static void beforeClass() {
 	@Test
 	public void testDefaults() {
 		AgentOptions options = new AgentOptions();
-		assertEquals("jacoco.exec", options.getDestfile());
+		assertEquals(AgentOptions.DEFAULT_DESTFILE, options.getDestfile());
 		assertTrue(options.getAppend());
 		assertEquals("*", options.getIncludes());
 		assertEquals("", options.getExcludes());
@@ -47,8 +47,8 @@ public void testDefaults() {
 		assertNull(options.getSessionId());
 		assertTrue(options.getDumpOnExit());
 		assertEquals(AgentOptions.OutputMode.file, options.getOutput());
-		assertNull(options.getAddress());
-		assertEquals(6300, options.getPort());
+		assertEquals(AgentOptions.DEFAULT_ADDRESS, options.getAddress());
+		assertEquals(AgentOptions.DEFAULT_PORT, options.getPort());
 		assertNull(options.getClassDumpDir());
 		assertFalse(options.getJmx());
 

File: org.jacoco.core.test/src/org/jacoco/core/internal/flow/MethodProbesAdapterTest.java
Patch:
@@ -330,6 +330,7 @@ public void testVisitTryCatchBlockNoProbe() {
 	public void testVisitTryCatchBlockWithProbe() {
 		Label target = new Label();
 		LabelInfo.setSuccessor(target);
+		LabelInfo.setTarget(target);
 		Label end = new Label();
 		Label handler = new Label();
 		Label start = new Label();
@@ -348,6 +349,7 @@ public void testVisitTryCatchBlockWithProbe() {
 	public void testVisitMultipleTryCatchBlocksWithProbe() {
 		Label target = new Label();
 		LabelInfo.setSuccessor(target);
+		LabelInfo.setTarget(target);
 		Label end = new Label();
 		Label handler1 = new Label();
 		Label handler2 = new Label();

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/ClassAnalyzer.java
Patch:
@@ -25,7 +25,7 @@ public class ClassAnalyzer extends ClassProbesVisitor {
 
 	private final long classid;
 	private final boolean noMatch;
-	private final boolean probes[];
+	private final boolean[] probes;
 	private final StringPool stringPool;
 
 	private ClassCoverageImpl coverage;

File: org.jacoco.core/src/org/jacoco/core/internal/flow/Instruction.java
Patch:
@@ -63,7 +63,8 @@ public void setPredecessor(final Instruction predecessor) {
 	 * branch.
 	 */
 	public void setCovered() {
-		for (Instruction i = this; i != null && i.coveredBranches++ == 0;) {
+		Instruction i = this;
+		while (i != null && i.coveredBranches++ == 0) {
 			i = i.predecessor;
 		}
 	}

File: org.jacoco.core/src/org/jacoco/core/internal/instr/FieldProbeArrayStrategy.java
Patch:
@@ -27,12 +27,12 @@ class FieldProbeArrayStrategy implements IProbeArrayStrategy {
 	/**
 	 * Frame stack with a single boolean array.
 	 */
-	public static final Object[] FRAME_STACK_ARRZ = new Object[] { InstrSupport.DATAFIELD_DESC };
+	private static final Object[] FRAME_STACK_ARRZ = new Object[] { InstrSupport.DATAFIELD_DESC };
 
 	/**
 	 * Empty frame locals.
 	 */
-	public static final Object[] FRAME_LOCALS_EMPTY = new Object[0];
+	private static final Object[] FRAME_LOCALS_EMPTY = new Object[0];
 
 	private final String className;
 	private final long classId;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ConfigLoaderTest.java
Patch:
@@ -48,9 +48,10 @@ public void testSystemProperties() {
 		system.setProperty("output", "tcpserver"); // no prefix
 		system.setProperty("jacoco-agent.sessionid", "testid");
 		Properties config = ConfigLoader.load(
-				"/org/jacoco/agent/rt/agent-test.properties", system);
+				"/org/jacoco/agent/rt/internal/agent-test.properties", system);
 
 		assertEquals("mbean", config.get("output"));
+		assertEquals("3333", config.get("port"));
 		assertEquals("testid", config.get("sessionid"));
 	}
 

File: org.jacoco.core/src/org/jacoco/core/analysis/IMethodCoverage.java
Patch:
@@ -18,9 +18,9 @@
 public interface IMethodCoverage extends ISourceNode {
 
 	/**
-	 * Returns the parameter description of the method.
+	 * Returns the descriptor of the method.
 	 * 
-	 * @return parameter description
+	 * @return descriptor
 	 */
 	public String getDesc();
 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodAnalyzer.java
Patch:
@@ -61,7 +61,7 @@ public class MethodAnalyzer extends MethodProbesVisitor {
 	 * @param name
 	 *            method name
 	 * @param desc
-	 *            description of the method
+	 *            method descriptor
 	 * @param signature
 	 *            optional parameterized signature
 	 * 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodCoverageImpl.java
Patch:
@@ -30,7 +30,7 @@ public class MethodCoverageImpl extends SourceNodeImpl implements
 	 * @param name
 	 *            name of the method
 	 * @param desc
-	 *            parameter description
+	 *            method descriptor
 	 * @param signature
 	 *            generic signature or <code>null</code>
 	 */

File: org.jacoco.report/src/org/jacoco/report/ILanguageNames.java
Patch:
@@ -59,7 +59,7 @@ public String getClassName(String vmname, String vmsignature,
 	 * @param vmmethodname
 	 *            vm name of the method
 	 * @param vmdesc
-	 *            vm parameter description of the method
+	 *            vm method descriptor
 	 * @param vmsignature
 	 *            vm signature of the method (may be <code>null</code>)
 	 * @return language specific notation for the method
@@ -75,7 +75,7 @@ public String getMethodName(String vmclassname, String vmmethodname,
 	 * @param vmmethodname
 	 *            vm name of the method
 	 * @param vmdesc
-	 *            vm parameter description of the method
+	 *            vm method descriptor
 	 * @param vmsignature
 	 *            vm signature of the method (may be <code>null</code>)
 	 * @return language specific notation for the method

File: org.jacoco.core/src/org/jacoco/core/analysis/IMethodCoverage.java
Patch:
@@ -18,9 +18,9 @@
 public interface IMethodCoverage extends ISourceNode {
 
 	/**
-	 * Returns the parameter description of the method.
+	 * Returns the descriptor of the method.
 	 * 
-	 * @return parameter description
+	 * @return descriptor
 	 */
 	public String getDesc();
 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodAnalyzer.java
Patch:
@@ -61,7 +61,7 @@ public class MethodAnalyzer extends MethodProbesVisitor {
 	 * @param name
 	 *            method name
 	 * @param desc
-	 *            description of the method
+	 *            method descriptor
 	 * @param signature
 	 *            optional parameterized signature
 	 * 

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodCoverageImpl.java
Patch:
@@ -30,7 +30,7 @@ public class MethodCoverageImpl extends SourceNodeImpl implements
 	 * @param name
 	 *            name of the method
 	 * @param desc
-	 *            parameter description
+	 *            method descriptor
 	 * @param signature
 	 *            generic signature or <code>null</code>
 	 */

File: org.jacoco.report/src/org/jacoco/report/ILanguageNames.java
Patch:
@@ -59,7 +59,7 @@ public String getClassName(String vmname, String vmsignature,
 	 * @param vmmethodname
 	 *            vm name of the method
 	 * @param vmdesc
-	 *            vm parameter description of the method
+	 *            vm method descriptor
 	 * @param vmsignature
 	 *            vm signature of the method (may be <code>null</code>)
 	 * @return language specific notation for the method
@@ -75,7 +75,7 @@ public String getMethodName(String vmclassname, String vmmethodname,
 	 * @param vmmethodname
 	 *            vm name of the method
 	 * @param vmdesc
-	 *            vm parameter description of the method
+	 *            vm method descriptor
 	 * @param vmsignature
 	 *            vm signature of the method (may be <code>null</code>)
 	 * @return language specific notation for the method

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ExceptionsTest.java
Patch:
@@ -50,7 +50,7 @@ public void testCoverageResult() {
 		assertLine("noExceptionTryCatch.tryBlock", ICounter.FULLY_COVERED);
 		assertLine("noExceptionTryCatch.catchBlock", ICounter.NOT_COVERED);
 
-		// 4. Try/Catch Block Without a Implicit Exception Thrown
+		// 4. Try/Catch Block With Exception Thrown Implicitly
 		// As always with implicit exceptions we don't see when a block aborts
 		// somewhere in the middle.
 		assertLine("implicitExceptionTryCatch.beforeBlock",

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelInfo.java
Patch:
@@ -76,7 +76,7 @@ public static void setSuccessor(final Label label) {
 	/**
 	 * Checks whether multiple control paths lead to a label. Control flow path
 	 * to a certain label are: jump targets, exception handlers and normal
-	 * control flow from its predecessor instruction (unless this a
+	 * control flow from its predecessor instruction (unless this is an
 	 * unconditional jump or method exit).
 	 * 
 	 * @param label

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelFlowAnalyzer.java
Patch:
@@ -69,7 +69,7 @@ public void visitTryCatchBlock(final Label start, final Label end,
 		// also is the start of the method, no probe will be added.
 		LabelInfo.setTarget(start);
 
-		// Enforce probe at the end of the block:
+		// Mark exception handler as possible target of the block
 		LabelInfo.setTarget(handler);
 	}
 

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ClassFileDumperTest.java
Patch:
@@ -19,7 +19,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.jacoco.agent.rt.internal.ClassFileDumper;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -45,15 +44,16 @@ public void testDumpClassWithPackage() throws IOException {
 		final File location = new File(folder.getRoot(), "classes");
 		final ClassFileDumper dumper = new ClassFileDumper(location.toString());
 		dumper.dump("org/jacoco/examples/Foo$Inner", contents);
-		assertContents(location, "org/jacoco/examples/Foo$Inner.class");
+		assertContents(location,
+				"org/jacoco/examples/Foo$Inner.aff06045a340cd62.class");
 	}
 
 	@Test
 	public void testDumpClassInDefaultPackage() throws IOException {
 		final File location = new File(folder.getRoot(), "classes");
 		final ClassFileDumper dumper = new ClassFileDumper(location.toString());
 		dumper.dump("Main", contents);
-		assertContents(location, "Main.class");
+		assertContents(location, "Main.aff06045a340cd62.class");
 	}
 
 	@Test

File: org.jacoco.core.test/src/org/jacoco/core/internal/instr/ProbeInserterTest.java
Patch:
@@ -45,7 +45,7 @@ public int storeInstance(MethodVisitor mv, int variable) {
 				return 5;
 			}
 
-			public void addMembers(ClassVisitor delegate) {
+			public void addMembers(ClassVisitor delegate, int probeCount) {
 			}
 		};
 	}

File: org.jacoco.report/src/org/jacoco/report/check/BundleChecker.java
Patch:
@@ -34,7 +34,7 @@ class BundleChecker {
 	private final Collection<Rule> bundleRules;
 	private final Collection<Rule> packageRules;
 	private final Collection<Rule> classRules;
-	private final ArrayList<Rule> sourceFileRules;
+	private final Collection<Rule> sourceFileRules;
 	private final Collection<Rule> methodRules;
 
 	private final boolean traversePackages;

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/Table.java
Patch:
@@ -131,8 +131,7 @@ private void body(final HTMLElement table,
 	private List<? extends ITableItem> sort(
 			final List<? extends ITableItem> items) {
 		if (defaultComparator != null) {
-			final ArrayList<ITableItem> result = new ArrayList<ITableItem>(
-					items);
+			final List<ITableItem> result = new ArrayList<ITableItem>(items);
 			Collections.sort(result, defaultComparator);
 			return result;
 		}

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/MethodAnalyzerTest.java
Patch:
@@ -257,7 +257,8 @@ private void createJumpToFirst() {
 		method.visitLabel(l1);
 		method.visitLineNumber(1001, l1);
 		method.visitVarInsn(Opcodes.ALOAD, 0);
-		method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "Foo", "test", "()Z");
+		method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "Foo", "test", "()Z",
+				false);
 		method.visitJumpInsn(Opcodes.IFEQ, l1);
 		final Label l2 = new Label();
 		method.visitLabel(l2);
@@ -512,7 +513,7 @@ private void createTryCatchBlock() {
 		method.visitLineNumber(1001, l1);
 		method.visitVarInsn(Opcodes.ALOAD, 0);
 		method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable",
-				"printStackTrace", "()V");
+				"printStackTrace", "()V", false);
 		method.visitLabel(l2);
 		method.visitJumpInsn(Opcodes.GOTO, l4);
 		method.visitLabel(l3);

File: org.jacoco.core.test/src/org/jacoco/core/internal/flow/LabelFlowAnalyzerTest.java
Patch:
@@ -295,7 +295,7 @@ public void testFieldInsn() {
 
 	@Test
 	public void testMethodInsn() {
-		analyzer.visitMethodInsn(INVOKEVIRTUAL, "Foo", "doit", "()V");
+		analyzer.visitMethodInsn(INVOKEVIRTUAL, "Foo", "doit", "()V", false);
 		assertTrue(analyzer.successor);
 		assertFalse(analyzer.first);
 	}

File: org.jacoco.core.test/src/org/jacoco/core/internal/instr/DuplicateFrameEliminatorTest.java
Patch:
@@ -95,7 +95,7 @@ public void testFieldInsn() {
 	@Test
 	public void testMethodInsn() {
 		testInstructionBetweenFrames(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,
-				"Foo", "run", "()V"));
+				"Foo", "run", "()V", false));
 	}
 
 	@Test

File: org.jacoco.core.test/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGeneratorTest.java
Patch:
@@ -72,7 +72,7 @@ public void testRuntimeClassName() throws Exception {
 		expected.getVisitor().visitIntInsn(Opcodes.BIPUSH, 17);
 		String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline";
 		expected.getVisitor().visitMethodInsn(Opcodes.INVOKESTATIC, rtname,
-				"getProbes", "(JLjava/lang/String;I)[Z");
+				"getProbes", "(JLjava/lang/String;I)[Z", false);
 
 		assertEquals(expected, actual);
 	}

File: org.jacoco.core.test/src/org/jacoco/core/runtime/RuntimeDataTest.java
Patch:
@@ -122,7 +122,7 @@ public void testGenerateArgumentArray() throws Exception {
 		mv.visitCode();
 		mv.visitVarInsn(Opcodes.ALOAD, 0);
 		mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>",
-				"()V");
+				"()V", false);
 		mv.visitInsn(Opcodes.RETURN);
 		mv.visitMaxs(1, 1);
 		mv.visitEnd();
@@ -163,7 +163,7 @@ public void testGenerateAccessCall() throws Exception {
 		mv.visitCode();
 		mv.visitVarInsn(Opcodes.ALOAD, 0);
 		mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>",
-				"()V");
+				"()V", false);
 		mv.visitVarInsn(Opcodes.ALOAD, 0);
 		mv.visitVarInsn(Opcodes.ALOAD, 1);
 		mv.visitFieldInsn(Opcodes.PUTFIELD, "Sample", "access",

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ClassFileVersionsTest.java
Patch:
@@ -121,7 +121,8 @@ private byte[] createClass(int version) {
 		mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
 		mv.visitCode();
 		mv.visitVarInsn(ALOAD, 0);
-		mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
+		mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V",
+				false);
 		mv.visitInsn(RETURN);
 		mv.visitMaxs(1, 1);
 		mv.visitEnd();

File: org.jacoco.core/src/org/jacoco/core/JaCoCo.java
Patch:
@@ -30,7 +30,7 @@ public final class JaCoCo {
 	public static final String RUNTIMEPACKAGE;
 
 	/** ASM API version */
-	public static final int ASM_API_VERSION = Opcodes.ASM4;
+	public static final int ASM_API_VERSION = Opcodes.ASM5;
 
 	static {
 		final ResourceBundle bundle = ResourceBundle

File: org.jacoco.core/src/org/jacoco/core/internal/ContentTypeDetector.java
Patch:
@@ -81,6 +81,7 @@ private static int determineType(final InputStream in) throws IOException {
 			case Opcodes.V1_5:
 			case Opcodes.V1_6:
 			case Opcodes.V1_7:
+			case Opcodes.V1_8:
 				return CLASSFILE;
 			}
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodAnalyzer.java
Patch:
@@ -149,7 +149,7 @@ public void visitFieldInsn(final int opcode, final String owner,
 
 	@Override
 	public void visitMethodInsn(final int opcode, final String owner,
-			final String name, final String desc) {
+			final String name, final String desc, final boolean itf) {
 		visitInsn();
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/flow/FrameSnapshot.java
Patch:
@@ -48,9 +48,9 @@ static IFrame create(final AnalyzerAdapter analyzer, final int popCount) {
 		if (analyzer == null || analyzer.locals == null) {
 			return NOP;
 		}
-		@SuppressWarnings("unchecked")
-		final List<Object> locals = analyzer.locals, stack = analyzer.stack;
-		return new FrameSnapshot(reduce(locals, 0), reduce(stack, popCount));
+		final Object[] locals = reduce(analyzer.locals, 0);
+		final Object[] stack = reduce(analyzer.stack, popCount);
+		return new FrameSnapshot(locals, stack);
 	}
 
 	/**

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelFlowAnalyzer.java
Patch:
@@ -17,7 +17,6 @@
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.MethodNode;
-import org.objectweb.asm.tree.TryCatchBlockNode;
 
 /**
  * Method visitor to collect flow related information about the {@link Label}s
@@ -37,7 +36,7 @@ public static void markLabels(final MethodNode method) {
 		// call to accept()
 		final MethodVisitor lfa = new LabelFlowAnalyzer();
 		for (int i = method.tryCatchBlocks.size(); --i >= 0;) {
-			((TryCatchBlockNode) method.tryCatchBlocks.get(i)).accept(lfa);
+			method.tryCatchBlocks.get(i).accept(lfa);
 		}
 		method.instructions.accept(lfa);
 	}
@@ -167,7 +166,7 @@ public void visitFieldInsn(final int opcode, final String owner,
 
 	@Override
 	public void visitMethodInsn(final int opcode, final String owner,
-			final String name, final String desc) {
+			final String name, final String desc, final boolean itf) {
 		successor = true;
 		first = false;
 	}

File: org.jacoco.core/src/org/jacoco/core/internal/flow/MethodSanitizer.java
Patch:
@@ -11,6 +11,7 @@
  *******************************************************************************/
 package org.jacoco.core.internal.flow;
 
+import org.jacoco.core.JaCoCo;
 import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.commons.JSRInlinerAdapter;
@@ -32,7 +33,8 @@ class MethodSanitizer extends JSRInlinerAdapter {
 	MethodSanitizer(final MethodVisitor mv, final int access,
 			final String name, final String desc, final String signature,
 			final String[] exceptions) {
-		super(mv, access, name, desc, signature, exceptions);
+		super(JaCoCo.ASM_API_VERSION, mv, access, name, desc, signature,
+				exceptions);
 	}
 
 	@Override

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ClassInstrumenter.java
Patch:
@@ -116,7 +116,8 @@ private class ClassTypeStrategy implements IProbeArrayStrategy {
 
 		public int storeInstance(final MethodVisitor mv, final int variable) {
 			mv.visitMethodInsn(Opcodes.INVOKESTATIC, className,
-					InstrSupport.INITMETHOD_NAME, InstrSupport.INITMETHOD_DESC);
+					InstrSupport.INITMETHOD_NAME, InstrSupport.INITMETHOD_DESC,
+					false);
 			mv.visitVarInsn(Opcodes.ASTORE, variable);
 			return 1;
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/instr/DuplicateFrameEliminator.java
Patch:
@@ -73,9 +73,9 @@ public void visitFieldInsn(final int opcode, final String owner,
 
 	@Override
 	public void visitMethodInsn(final int opcode, final String owner,
-			final String name, final String desc) {
+			final String name, final String desc, final boolean itf) {
 		instruction = true;
-		mv.visitMethodInsn(opcode, owner, name, desc);
+		mv.visitMethodInsn(opcode, owner, name, desc, itf);
 	}
 
 	@Override

File: org.jacoco.core/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGenerator.java
Patch:
@@ -51,7 +51,7 @@ public int generateDataAccessor(final long classid, final String classname,
 		mv.visitLdcInsn(classname);
 		InstrSupport.push(mv, probecount);
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, runtimeClassName, "getProbes",
-				"(JLjava/lang/String;I)[Z");
+				"(JLjava/lang/String;I)[Z", false);
 		return 4;
 	}
 

File: org.jacoco.core/src/org/jacoco/core/runtime/RuntimeData.java
Patch:
@@ -188,7 +188,7 @@ public static void generateArgumentArray(final long classid,
 		mv.visitInsn(Opcodes.ICONST_0);
 		mv.visitLdcInsn(Long.valueOf(classid));
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Long", "valueOf",
-				"(J)Ljava/lang/Long;");
+				"(J)Ljava/lang/Long;", false);
 		mv.visitInsn(Opcodes.AASTORE);
 
 		// Class Name:
@@ -202,7 +202,7 @@ public static void generateArgumentArray(final long classid,
 		mv.visitInsn(Opcodes.ICONST_2);
 		InstrSupport.push(mv, probecount);
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Integer",
-				"valueOf", "(I)Ljava/lang/Integer;");
+				"valueOf", "(I)Ljava/lang/Integer;", false);
 		mv.visitInsn(Opcodes.AASTORE);
 	}
 
@@ -238,7 +238,7 @@ public static void generateAccessCall(final long classid,
 		// stack[0]: [Ljava/lang/Object;
 
 		mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Object", "equals",
-				"(Ljava/lang/Object;)Z");
+				"(Ljava/lang/Object;)Z", false);
 		mv.visitInsn(Opcodes.POP);
 
 		// stack[0]: [Ljava/lang/Object;

File: org.jacoco.core/src/org/jacoco/core/runtime/SystemPropertiesRuntime.java
Patch:
@@ -41,7 +41,7 @@ public SystemPropertiesRuntime() {
 	public int generateDataAccessor(final long classid, final String classname,
 			final int probecount, final MethodVisitor mv) {
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System",
-				"getProperties", "()Ljava/util/Properties;");
+				"getProperties", "()Ljava/util/Properties;", false);
 
 		// Stack[0]: Ljava/util/Properties;
 
@@ -51,7 +51,7 @@ public int generateDataAccessor(final long classid, final String classname,
 		// Stack[0]: Ljava/util/Properties;
 
 		mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/util/Properties",
-				"get", "(Ljava/lang/Object;)Ljava/lang/Object;");
+				"get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
 
 		// Stack[0]: Ljava/lang/Object;
 

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/MethodAnalyzerTest.java
Patch:
@@ -257,7 +257,8 @@ private void createJumpToFirst() {
 		method.visitLabel(l1);
 		method.visitLineNumber(1001, l1);
 		method.visitVarInsn(Opcodes.ALOAD, 0);
-		method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "Foo", "test", "()Z");
+		method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "Foo", "test", "()Z",
+				false);
 		method.visitJumpInsn(Opcodes.IFEQ, l1);
 		final Label l2 = new Label();
 		method.visitLabel(l2);
@@ -512,7 +513,7 @@ private void createTryCatchBlock() {
 		method.visitLineNumber(1001, l1);
 		method.visitVarInsn(Opcodes.ALOAD, 0);
 		method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable",
-				"printStackTrace", "()V");
+				"printStackTrace", "()V", false);
 		method.visitLabel(l2);
 		method.visitJumpInsn(Opcodes.GOTO, l4);
 		method.visitLabel(l3);

File: org.jacoco.core.test/src/org/jacoco/core/internal/flow/LabelFlowAnalyzerTest.java
Patch:
@@ -295,7 +295,7 @@ public void testFieldInsn() {
 
 	@Test
 	public void testMethodInsn() {
-		analyzer.visitMethodInsn(INVOKEVIRTUAL, "Foo", "doit", "()V");
+		analyzer.visitMethodInsn(INVOKEVIRTUAL, "Foo", "doit", "()V", false);
 		assertTrue(analyzer.successor);
 		assertFalse(analyzer.first);
 	}

File: org.jacoco.core.test/src/org/jacoco/core/internal/instr/DuplicateFrameEliminatorTest.java
Patch:
@@ -95,7 +95,7 @@ public void testFieldInsn() {
 	@Test
 	public void testMethodInsn() {
 		testInstructionBetweenFrames(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,
-				"Foo", "run", "()V"));
+				"Foo", "run", "()V", false));
 	}
 
 	@Test

File: org.jacoco.core.test/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGeneratorTest.java
Patch:
@@ -72,7 +72,7 @@ public void testRuntimeClassName() throws Exception {
 		expected.getVisitor().visitIntInsn(Opcodes.BIPUSH, 17);
 		String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline";
 		expected.getVisitor().visitMethodInsn(Opcodes.INVOKESTATIC, rtname,
-				"getProbes", "(JLjava/lang/String;I)[Z");
+				"getProbes", "(JLjava/lang/String;I)[Z", false);
 
 		assertEquals(expected, actual);
 	}

File: org.jacoco.core.test/src/org/jacoco/core/runtime/RuntimeDataTest.java
Patch:
@@ -122,7 +122,7 @@ public void testGenerateArgumentArray() throws Exception {
 		mv.visitCode();
 		mv.visitVarInsn(Opcodes.ALOAD, 0);
 		mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>",
-				"()V");
+				"()V", false);
 		mv.visitInsn(Opcodes.RETURN);
 		mv.visitMaxs(1, 1);
 		mv.visitEnd();
@@ -163,7 +163,7 @@ public void testGenerateAccessCall() throws Exception {
 		mv.visitCode();
 		mv.visitVarInsn(Opcodes.ALOAD, 0);
 		mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>",
-				"()V");
+				"()V", false);
 		mv.visitVarInsn(Opcodes.ALOAD, 0);
 		mv.visitVarInsn(Opcodes.ALOAD, 1);
 		mv.visitFieldInsn(Opcodes.PUTFIELD, "Sample", "access",

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ClassFileVersionsTest.java
Patch:
@@ -121,7 +121,8 @@ private byte[] createClass(int version) {
 		mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
 		mv.visitCode();
 		mv.visitVarInsn(ALOAD, 0);
-		mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
+		mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V",
+				false);
 		mv.visitInsn(RETURN);
 		mv.visitMaxs(1, 1);
 		mv.visitEnd();

File: org.jacoco.core/src/org/jacoco/core/JaCoCo.java
Patch:
@@ -30,7 +30,7 @@ public final class JaCoCo {
 	public static final String RUNTIMEPACKAGE;
 
 	/** ASM API version */
-	public static final int ASM_API_VERSION = Opcodes.ASM4;
+	public static final int ASM_API_VERSION = Opcodes.ASM5;
 
 	static {
 		final ResourceBundle bundle = ResourceBundle

File: org.jacoco.core/src/org/jacoco/core/internal/ContentTypeDetector.java
Patch:
@@ -81,6 +81,7 @@ private static int determineType(final InputStream in) throws IOException {
 			case Opcodes.V1_5:
 			case Opcodes.V1_6:
 			case Opcodes.V1_7:
+			case Opcodes.V1_8:
 				return CLASSFILE;
 			}
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodAnalyzer.java
Patch:
@@ -149,7 +149,7 @@ public void visitFieldInsn(final int opcode, final String owner,
 
 	@Override
 	public void visitMethodInsn(final int opcode, final String owner,
-			final String name, final String desc) {
+			final String name, final String desc, final boolean itf) {
 		visitInsn();
 	}
 

File: org.jacoco.core/src/org/jacoco/core/internal/flow/FrameSnapshot.java
Patch:
@@ -48,9 +48,9 @@ static IFrame create(final AnalyzerAdapter analyzer, final int popCount) {
 		if (analyzer == null || analyzer.locals == null) {
 			return NOP;
 		}
-		@SuppressWarnings("unchecked")
-		final List<Object> locals = analyzer.locals, stack = analyzer.stack;
-		return new FrameSnapshot(reduce(locals, 0), reduce(stack, popCount));
+		final Object[] locals = reduce(analyzer.locals, 0);
+		final Object[] stack = reduce(analyzer.stack, popCount);
+		return new FrameSnapshot(locals, stack);
 	}
 
 	/**

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelFlowAnalyzer.java
Patch:
@@ -17,7 +17,6 @@
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.MethodNode;
-import org.objectweb.asm.tree.TryCatchBlockNode;
 
 /**
  * Method visitor to collect flow related information about the {@link Label}s
@@ -37,7 +36,7 @@ public static void markLabels(final MethodNode method) {
 		// call to accept()
 		final MethodVisitor lfa = new LabelFlowAnalyzer();
 		for (int i = method.tryCatchBlocks.size(); --i >= 0;) {
-			((TryCatchBlockNode) method.tryCatchBlocks.get(i)).accept(lfa);
+			method.tryCatchBlocks.get(i).accept(lfa);
 		}
 		method.instructions.accept(lfa);
 	}
@@ -167,7 +166,7 @@ public void visitFieldInsn(final int opcode, final String owner,
 
 	@Override
 	public void visitMethodInsn(final int opcode, final String owner,
-			final String name, final String desc) {
+			final String name, final String desc, final boolean itf) {
 		successor = true;
 		first = false;
 	}

File: org.jacoco.core/src/org/jacoco/core/internal/flow/MethodSanitizer.java
Patch:
@@ -11,6 +11,7 @@
  *******************************************************************************/
 package org.jacoco.core.internal.flow;
 
+import org.jacoco.core.JaCoCo;
 import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.commons.JSRInlinerAdapter;
@@ -32,7 +33,8 @@ class MethodSanitizer extends JSRInlinerAdapter {
 	MethodSanitizer(final MethodVisitor mv, final int access,
 			final String name, final String desc, final String signature,
 			final String[] exceptions) {
-		super(mv, access, name, desc, signature, exceptions);
+		super(JaCoCo.ASM_API_VERSION, mv, access, name, desc, signature,
+				exceptions);
 	}
 
 	@Override

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ClassInstrumenter.java
Patch:
@@ -116,7 +116,8 @@ private class ClassTypeStrategy implements IProbeArrayStrategy {
 
 		public int storeInstance(final MethodVisitor mv, final int variable) {
 			mv.visitMethodInsn(Opcodes.INVOKESTATIC, className,
-					InstrSupport.INITMETHOD_NAME, InstrSupport.INITMETHOD_DESC);
+					InstrSupport.INITMETHOD_NAME, InstrSupport.INITMETHOD_DESC,
+					false);
 			mv.visitVarInsn(Opcodes.ASTORE, variable);
 			return 1;
 		}

File: org.jacoco.core/src/org/jacoco/core/internal/instr/DuplicateFrameEliminator.java
Patch:
@@ -73,9 +73,9 @@ public void visitFieldInsn(final int opcode, final String owner,
 
 	@Override
 	public void visitMethodInsn(final int opcode, final String owner,
-			final String name, final String desc) {
+			final String name, final String desc, final boolean itf) {
 		instruction = true;
-		mv.visitMethodInsn(opcode, owner, name, desc);
+		mv.visitMethodInsn(opcode, owner, name, desc, itf);
 	}
 
 	@Override

File: org.jacoco.core/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGenerator.java
Patch:
@@ -51,7 +51,7 @@ public int generateDataAccessor(final long classid, final String classname,
 		mv.visitLdcInsn(classname);
 		InstrSupport.push(mv, probecount);
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, runtimeClassName, "getProbes",
-				"(JLjava/lang/String;I)[Z");
+				"(JLjava/lang/String;I)[Z", false);
 		return 4;
 	}
 

File: org.jacoco.core/src/org/jacoco/core/runtime/RuntimeData.java
Patch:
@@ -188,7 +188,7 @@ public static void generateArgumentArray(final long classid,
 		mv.visitInsn(Opcodes.ICONST_0);
 		mv.visitLdcInsn(Long.valueOf(classid));
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Long", "valueOf",
-				"(J)Ljava/lang/Long;");
+				"(J)Ljava/lang/Long;", false);
 		mv.visitInsn(Opcodes.AASTORE);
 
 		// Class Name:
@@ -202,7 +202,7 @@ public static void generateArgumentArray(final long classid,
 		mv.visitInsn(Opcodes.ICONST_2);
 		InstrSupport.push(mv, probecount);
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Integer",
-				"valueOf", "(I)Ljava/lang/Integer;");
+				"valueOf", "(I)Ljava/lang/Integer;", false);
 		mv.visitInsn(Opcodes.AASTORE);
 	}
 
@@ -238,7 +238,7 @@ public static void generateAccessCall(final long classid,
 		// stack[0]: [Ljava/lang/Object;
 
 		mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Object", "equals",
-				"(Ljava/lang/Object;)Z");
+				"(Ljava/lang/Object;)Z", false);
 		mv.visitInsn(Opcodes.POP);
 
 		// stack[0]: [Ljava/lang/Object;

File: org.jacoco.core/src/org/jacoco/core/runtime/SystemPropertiesRuntime.java
Patch:
@@ -41,7 +41,7 @@ public SystemPropertiesRuntime() {
 	public int generateDataAccessor(final long classid, final String classname,
 			final int probecount, final MethodVisitor mv) {
 		mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System",
-				"getProperties", "()Ljava/util/Properties;");
+				"getProperties", "()Ljava/util/Properties;", false);
 
 		// Stack[0]: Ljava/util/Properties;
 
@@ -51,7 +51,7 @@ public int generateDataAccessor(final long classid, final String classname,
 		// Stack[0]: Ljava/util/Properties;
 
 		mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/util/Properties",
-				"get", "(Ljava/lang/Object;)Ljava/lang/Object;");
+				"get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
 
 		// Stack[0]: Ljava/lang/Object;
 

File: jacoco-maven-plugin/src/org/jacoco/maven/AbstractReportMojo.java
Patch:
@@ -215,7 +215,7 @@ void createReport(final IReportGroupVisitor visitor) throws IOException {
 		final FileFilter fileFilter = new FileFilter(this.getIncludes(),
 				this.getExcludes());
 		final BundleCreator creator = new BundleCreator(this.getProject(),
-				fileFilter);
+				fileFilter, getLog());
 		final IBundleCoverage bundle = creator.createBundle(executionDataStore);
 		final SourceFileCollection locator = new SourceFileCollection(
 				getCompileSourceRoots(), sourceEncoding);

File: org.jacoco.core.test/src/org/jacoco/core/data/ExecutionDataStoreTest.java
Patch:
@@ -46,6 +46,7 @@ public void setup() {
 	@Test
 	public void testEmpty() {
 		assertNull(store.get(123));
+		assertFalse(store.contains("org/jacoco/example/Foo"));
 		store.accept(this);
 		assertEquals(Collections.emptyMap(), dataOutput);
 	}
@@ -56,6 +57,7 @@ public void testPut() {
 		store.put(new ExecutionData(1000, "Sample", probes));
 		final ExecutionData data = store.get(1000);
 		assertSame(probes, data.getProbes());
+		assertTrue(store.contains("Sample"));
 		store.accept(this);
 		assertEquals(Collections.singletonMap(Long.valueOf(1000), data),
 				dataOutput);
@@ -96,6 +98,7 @@ public void testGetWithCreate() {
 		assertFalse(data.getProbes()[1]);
 		assertFalse(data.getProbes()[2]);
 		assertSame(data, store.get(id, "Sample", 3));
+		assertTrue(store.contains("Sample"));
 	}
 
 	@Test(expected = IllegalStateException.class)

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/BundleCoverageImplTest.java
Patch:
@@ -80,10 +80,10 @@ public void testCounters() {
 
 	@Test
 	public void testGroupByPackage() {
-		ClassCoverageImpl ca = new ClassCoverageImpl("p1/A", 1, null,
+		ClassCoverageImpl ca = new ClassCoverageImpl("p1/A", 1, false, null,
 				"java/lang/Object", new String[0]);
 		ca.setSourceFileName("A.java");
-		ClassCoverageImpl cb = new ClassCoverageImpl("p2/B", 2, null,
+		ClassCoverageImpl cb = new ClassCoverageImpl("p2/B", 2, false, null,
 				"java/lang/Object", new String[0]);
 		cb.setSourceFileName("B.java");
 		ISourceFileCoverage sb = new SourceFileCoverageImpl("B.java", "p2");

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/ClassAnalyzerTest.java
Patch:
@@ -25,7 +25,7 @@ public class ClassAnalyzerTest {
 
 	@Before
 	public void setup() {
-		analyzer = new ClassAnalyzer(0x0000, null, new StringPool());
+		analyzer = new ClassAnalyzer(0x0000, false, null, new StringPool());
 		analyzer.visit(Opcodes.V1_5, Opcodes.ACC_PUBLIC, "Foo", null,
 				"java/lang/Object", null);
 	}

File: org.jacoco.report.test/src/org/jacoco/report/ReportStructureTestDriver.java
Patch:
@@ -74,8 +74,8 @@ public ReportStructureTestDriver() {
 		methodCoverage = m;
 
 		final ClassCoverageImpl classCoverageImpl = new ClassCoverageImpl(
-				"org/jacoco/example/FooClass", 1001, null, "java/lang/Object",
-				new String[0]);
+				"org/jacoco/example/FooClass", 1001, false, null,
+				"java/lang/Object", new String[0]);
 		classCoverageImpl.setSourceFileName("FooClass.java");
 		classCoverageImpl.addMethod(methodCoverage);
 		classCoverage = classCoverageImpl;

File: org.jacoco.report.test/src/org/jacoco/report/check/BundleCheckerTest.java
Patch:
@@ -134,8 +134,8 @@ private IBundleCoverage createBundle() {
 		m.incrementMethodCounter();
 
 		final ClassCoverageImpl c = new ClassCoverageImpl(
-				"org/jacoco/example/FooClass", 1001, null, "java/lang/Object",
-				new String[0]);
+				"org/jacoco/example/FooClass", 1001, false, null,
+				"java/lang/Object", new String[0]);
 		c.setSourceFileName("FooClass.java");
 		c.addMethod(m);
 

File: org.jacoco.report.test/src/org/jacoco/report/csv/ClassRowWriterTest.java
Patch:
@@ -74,7 +74,7 @@ public void TestHeader() throws Exception {
 	@Test
 	public void TestRow() throws Exception {
 		IClassCoverage node = new ClassCoverageImpl("test/package/Foo", 123,
-				null, "java/lang/Object", null) {
+				false, null, "java/lang/Object", null) {
 			{
 				instructionCounter = CounterImpl.getInstance(1, 11);
 				branchCounter = CounterImpl.getInstance(2, 22);

File: jacoco-maven-plugin/src/org/jacoco/maven/AgentITMojo.java
Patch:
@@ -47,7 +47,7 @@ public class AgentITMojo extends AbstractAgentMojo {
 	 * @return the destFile
 	 */
 	@Override
-	protected File getDestFile() {
+	File getDestFile() {
 		return destFile;
 	}
 

File: jacoco-maven-plugin/src/org/jacoco/maven/AgentMojo.java
Patch:
@@ -61,7 +61,7 @@ public class AgentMojo extends AbstractAgentMojo {
 	 * @return the destFile
 	 */
 	@Override
-	protected File getDestFile() {
+	File getDestFile() {
 		return destFile;
 	}
 

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportITMojo.java
Patch:
@@ -62,12 +62,12 @@ public void setReportOutputDirectory(final File reportOutputDirectory) {
 	}
 
 	@Override
-	protected File getDataFile() {
+	File getDataFile() {
 		return dataFile;
 	}
 
 	@Override
-	protected File getOutputDirectoryFile() {
+	File getOutputDirectoryFile() {
 		return outputDirectory;
 	}
 

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportMojo.java
Patch:
@@ -60,12 +60,12 @@ public void setReportOutputDirectory(final File reportOutputDirectory) {
 	}
 
 	@Override
-	protected File getDataFile() {
+	File getDataFile() {
 		return dataFile;
 	}
 
 	@Override
-	protected File getOutputDirectoryFile() {
+	File getOutputDirectoryFile() {
 		return outputDirectory;
 	}
 

File: org.jacoco.examples.test/src/org/jacoco/examples/ConsoleOutput.java
Patch:
@@ -47,7 +47,7 @@ protected void after() {
 	}
 
 	public static Matcher<String> containsLine(String line) {
-		return containsString(String.format("%s\n", line));
+		return containsString(String.format("%s%n", line));
 	}
 
 	public static Matcher<String> isEmpty() {

File: org.jacoco.examples.test/src/org/jacoco/examples/ConsoleOutput.java
Patch:
@@ -47,7 +47,7 @@ protected void after() {
 	}
 
 	public static Matcher<String> containsLine(String line) {
-		return containsString(String.format("%s\n", line));
+		return containsString(String.format("%s%n", line));
 	}
 
 	public static Matcher<String> isEmpty() {

File: jacoco-maven-plugin/src/org/jacoco/maven/RuleConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public RuleConfiguration() {
 	/**
 	 * @param element
 	 *            element type this rule applies to
-	 * @todo: use ElementType directly once Maven 3 is required.
+	 * TODO: use ElementType directly once Maven 3 is required.
 	 */
 	public void setElement(final String element) {
 		rule.setElement(ElementType.valueOf(element));

File: org.jacoco.report/src/org/jacoco/report/check/Limit.java
Patch:
@@ -79,10 +79,10 @@ public CounterEntity getEntity() {
 
 	/**
 	 * Sets the counter entity to check.
-	 * @todo: use ElementType directly once Maven 3 is required.
 	 *
 	 * @param entity
 	 *            counter entity to check
+	 * TODO: use CounterEntity directly once Maven 3 is required.
 	 */
 	public void setCounter(final String entity) {
 		this.entity = CounterEntity.valueOf(entity);
@@ -97,10 +97,10 @@ public CounterValue getValue() {
 
 	/**
 	 * Sets the value to check.
-	 * @todo: use ElementType directly once Maven 3 is required.
 	 *
 	 * @param value
 	 *            value to check
+	 * TODO: use CounterValue directly once Maven 3 is required.
 	 */
 	public void setValue(final String value) {
 		this.value = CounterValue.valueOf(value);

File: jacoco-maven-plugin/src/org/jacoco/maven/RuleConfiguration.java
Patch:
@@ -38,9 +38,10 @@ public RuleConfiguration() {
 	/**
 	 * @param element
 	 *            element type this rule applies to
+	 * @todo: use ElementType directly once Maven 3 is required.
 	 */
-	public void setElement(final ElementType element) {
-		rule.setElement(element);
+	public void setElement(final String element) {
+		rule.setElement(ElementType.valueOf(element));
 	}
 
 	/**

File: org.jacoco.report.test/src/org/jacoco/report/check/RulesCheckerTest.java
Patch:
@@ -46,7 +46,7 @@ public void setup() {
 	public void testSetRules() throws IOException {
 		Rule rule = new Rule();
 		Limit limit = rule.createLimit();
-		limit.setValue(CounterValue.MISSEDCOUNT);
+		limit.setValue(CounterValue.MISSEDCOUNT.name());
 		limit.setMaximum("5");
 		checker.setRules(Arrays.asList(rule));
 		driver.sendGroup(checker.createVisitor(this));
@@ -60,7 +60,7 @@ public void testSetLanguageNames() throws IOException {
 		Rule rule = new Rule();
 		rule.setElement(ElementType.CLASS);
 		Limit limit = rule.createLimit();
-		limit.setValue(CounterValue.MISSEDCOUNT);
+		limit.setValue(CounterValue.MISSEDCOUNT.name());
 		limit.setMaximum("5");
 		checker.setRules(Arrays.asList(rule));
 

File: jacoco-maven-plugin/src/org/jacoco/maven/MergeMojo.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.List;
+import java.util.ArrayList;
 
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugin.MojoFailureException;
@@ -48,7 +48,7 @@ public class MergeMojo extends AbstractJacocoMojo {
 	 * @parameter expression="${jacoco.fileSets}"
 	 * @required
 	 */
-	private List<FileSet> fileSets;
+	private ArrayList<FileSet> fileSets;
 
 	@Override
 	protected void executeMojo() throws MojoExecutionException,

File: jacoco-maven-plugin/src/org/jacoco/maven/RuleConfiguration.java
Patch:
@@ -38,9 +38,10 @@ public RuleConfiguration() {
 	/**
 	 * @param element
 	 *            element type this rule applies to
+	 * @todo: use ElementType directly once Maven 3 is required.
 	 */
-	public void setElement(final ElementType element) {
-		rule.setElement(element);
+	public void setElement(final String element) {
+		rule.setElement(ElementType.valueOf(element));
 	}
 
 	/**

File: org.jacoco.report.test/src/org/jacoco/report/check/RulesCheckerTest.java
Patch:
@@ -46,7 +46,7 @@ public void setup() {
 	public void testSetRules() throws IOException {
 		Rule rule = new Rule();
 		Limit limit = rule.createLimit();
-		limit.setValue(CounterValue.MISSEDCOUNT);
+		limit.setValue(CounterValue.MISSEDCOUNT.name());
 		limit.setMaximum("5");
 		checker.setRules(Arrays.asList(rule));
 		driver.sendGroup(checker.createVisitor(this));
@@ -60,7 +60,7 @@ public void testSetLanguageNames() throws IOException {
 		Rule rule = new Rule();
 		rule.setElement(ElementType.CLASS);
 		Limit limit = rule.createLimit();
-		limit.setValue(CounterValue.MISSEDCOUNT);
+		limit.setValue(CounterValue.MISSEDCOUNT.name());
 		limit.setMaximum("5");
 		checker.setRules(Arrays.asList(rule));
 

File: org.jacoco.core/src/org/jacoco/core/runtime/CommandLineSupport.java
Patch:
@@ -115,6 +115,7 @@ static List<String> split(final String commandline) {
 					current.append(c);
 				}
 				mode = M_PARSEARGUMENT;
+				break;
 			}
 		}
 		addArgument(args, current);

File: org.jacoco.core/src/org/jacoco/core/runtime/WildcardMatcher.java
Patch:
@@ -54,6 +54,7 @@ private static CharSequence toRegex(final String expression) {
 				break;
 			default:
 				regex.append(Pattern.quote(String.valueOf(c)));
+				break;
 			}
 		}
 		return regex;

File: org.jacoco.report/src/org/jacoco/report/internal/xml/XMLElement.java
Patch:
@@ -124,6 +124,7 @@ private void quote(final String text) throws IOException {
 				break;
 			default:
 				writer.write(c);
+				break;
 			}
 		}
 	}

File: jacoco-maven-plugin/src/org/jacoco/maven/CheckMojo.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.maven.plugin.MojoExecutionException;
 import org.jacoco.core.analysis.IBundleCoverage;
 import org.jacoco.core.analysis.ICoverageNode;
-import org.jacoco.core.data.ExecFileLoader;
 import org.jacoco.core.data.ExecutionDataStore;
+import org.jacoco.core.tools.ExecFileLoader;
 import org.jacoco.report.IReportVisitor;
 import org.jacoco.report.check.IViolationsOutput;
 import org.jacoco.report.check.Limit;

File: jacoco-maven-plugin/src/org/jacoco/maven/MergeMojo.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.shared.model.fileset.FileSet;
 import org.apache.maven.shared.model.fileset.util.FileSetManager;
-import org.jacoco.core.data.ExecFileLoader;
+import org.jacoco.core.tools.ExecFileLoader;
 
 /**
  * Mojo for merging a set of execution data files (*.exec) into a single file

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportMojo.java
Patch:
@@ -29,9 +29,9 @@
 import org.apache.maven.reporting.MavenReportException;
 import org.jacoco.core.analysis.IBundleCoverage;
 import org.jacoco.core.analysis.ICoverageNode;
-import org.jacoco.core.data.ExecFileLoader;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.SessionInfoStore;
+import org.jacoco.core.tools.ExecFileLoader;
 import org.jacoco.report.FileMultiReportOutput;
 import org.jacoco.report.IReportGroupVisitor;
 import org.jacoco.report.IReportVisitor;

File: org.jacoco.ant/src/org/jacoco/ant/MergeTask.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.tools.ant.types.ResourceCollection;
 import org.apache.tools.ant.types.resources.Union;
 import org.apache.tools.ant.util.FileUtils;
-import org.jacoco.core.data.ExecFileLoader;
+import org.jacoco.core.tools.ExecFileLoader;
 
 /**
  * Task for merging a set of execution data files (*.exec) into a single file

File: org.jacoco.ant/src/org/jacoco/ant/ReportTask.java
Patch:
@@ -33,9 +33,9 @@
 import org.jacoco.core.analysis.CoverageBuilder;
 import org.jacoco.core.analysis.IBundleCoverage;
 import org.jacoco.core.analysis.ICoverageNode;
-import org.jacoco.core.data.ExecFileLoader;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.SessionInfoStore;
+import org.jacoco.core.tools.ExecFileLoader;
 import org.jacoco.report.FileMultiReportOutput;
 import org.jacoco.report.IMultiReportOutput;
 import org.jacoco.report.IReportGroupVisitor;

File: org.jacoco.examples/src/org/jacoco/examples/ReportGenerator.java
Patch:
@@ -17,7 +17,7 @@
 import org.jacoco.core.analysis.Analyzer;
 import org.jacoco.core.analysis.CoverageBuilder;
 import org.jacoco.core.analysis.IBundleCoverage;
-import org.jacoco.core.data.ExecFileLoader;
+import org.jacoco.core.tools.ExecFileLoader;
 import org.jacoco.report.DirectorySourceFileLocator;
 import org.jacoco.report.FileMultiReportOutput;
 import org.jacoco.report.IReportVisitor;

File: org.jacoco.report/src/org/jacoco/report/internal/html/resources/Styles.java
Patch:
@@ -19,6 +19,9 @@ public final class Styles {
 	/** Breadcrumb bar */
 	public static final String BREADCRUMB = "breadcrumb";
 
+	/** Info links within the Breadcrumb bar */
+	public static final String INFO = "info";
+
 	/** Footer */
 	public static final String FOOTER = "footer";
 

File: org.jacoco.core/src/org/jacoco/core/analysis/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * Coverage calculation and analysis. The coverage information is calculated
  * with an {@link org.jacoco.core.analysis.Analyzer} instance from class files
  * (target) and
- * {@linkplain org.jacoco.core.data.IExecutionDataVisitor execution data}</a>
+ * {@linkplain org.jacoco.core.data.IExecutionDataVisitor execution data}
  * (actual).
  * </p>
  *

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/CoverageTransformerTest.java
Patch:
@@ -139,7 +139,7 @@ public void testTransformFailure() {
 		}
 		recorder.assertException(IllegalClassFormatException.class,
 				"Error while instrumenting class org.jacoco.Sample.",
-				NullPointerException.class);
+				IOException.class);
 		recorder.clear();
 	}
 

File: org.jacoco.ant/src/org/jacoco/ant/InstrumentTask.java
Patch:
@@ -88,7 +88,8 @@ private int instrument(final Instrumenter instrumenter,
 			try {
 				input = resource.getInputStream();
 				output = new FileOutputStream(file);
-				return instrumenter.instrumentAll(input, output);
+				return instrumenter.instrumentAll(input, output,
+						resource.getName());
 			} finally {
 				FileUtils.close(input);
 				FileUtils.close(output);

File: org.jacoco.ant/src/org/jacoco/ant/ReportTask.java
Patch:
@@ -568,7 +568,7 @@ private IBundleCoverage createBundle(final GroupElement group)
 				analyzer.analyzeAll(((FileResource) resource).getFile());
 			} else {
 				final InputStream in = resource.getInputStream();
-				analyzer.analyzeAll(in);
+				analyzer.analyzeAll(in, resource.getName());
 				in.close();
 			}
 		}

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/FramesTest.java
Patch:
@@ -76,7 +76,7 @@ private void testFrames(byte[] source) throws IOException {
 		IRuntime runtime = new SystemPropertiesRuntime();
 		Instrumenter instrumenter = new Instrumenter(runtime);
 		source = calculateFrames(source);
-		byte[] actual = instrumenter.instrument(source);
+		byte[] actual = instrumenter.instrument(source, "TestTarget");
 		byte[] expected = calculateFrames(actual);
 
 		assertEquals(dump(expected), dump(actual));

File: org.jacoco.examples/src/org/jacoco/examples/CoreTutorial.java
Patch:
@@ -119,8 +119,8 @@ private void runTutorial() throws Exception {
 		// The Instrumenter creates a modified version of our test target class
 		// that contains additional probes for execution data recording:
 		final Instrumenter instr = new Instrumenter(runtime);
-		final byte[] instrumented = instr
-				.instrument(getTargetClass(targetName));
+		final byte[] instrumented = instr.instrument(
+				getTargetClass(targetName), targetName);
 
 		// Now we're ready to run our instrumented class and need to startup the
 		// runtime first:
@@ -148,7 +148,7 @@ private void runTutorial() throws Exception {
 		// information:
 		final CoverageBuilder coverageBuilder = new CoverageBuilder();
 		final Analyzer analyzer = new Analyzer(executionData, coverageBuilder);
-		analyzer.analyzeClass(getTargetClass(targetName));
+		analyzer.analyzeClass(getTargetClass(targetName), targetName);
 
 		// Let's dump some metrics and line coverage information:
 		for (final IClassCoverage cc : coverageBuilder.getClasses()) {

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/CoverageTransformerTest.java
Patch:
@@ -139,7 +139,7 @@ public void testTransformFailure() {
 		}
 		recorder.assertException(IllegalClassFormatException.class,
 				"Error while instrumenting class org.jacoco.Sample.",
-				NullPointerException.class);
+				IOException.class);
 		recorder.clear();
 	}
 

File: org.jacoco.ant/src/org/jacoco/ant/InstrumentTask.java
Patch:
@@ -88,7 +88,8 @@ private int instrument(final Instrumenter instrumenter,
 			try {
 				input = resource.getInputStream();
 				output = new FileOutputStream(file);
-				return instrumenter.instrumentAll(input, output);
+				return instrumenter.instrumentAll(input, output,
+						resource.getName());
 			} finally {
 				FileUtils.close(input);
 				FileUtils.close(output);

File: org.jacoco.ant/src/org/jacoco/ant/ReportTask.java
Patch:
@@ -568,7 +568,7 @@ private IBundleCoverage createBundle(final GroupElement group)
 				analyzer.analyzeAll(((FileResource) resource).getFile());
 			} else {
 				final InputStream in = resource.getInputStream();
-				analyzer.analyzeAll(in);
+				analyzer.analyzeAll(in, resource.getName());
 				in.close();
 			}
 		}

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/FramesTest.java
Patch:
@@ -76,7 +76,7 @@ private void testFrames(byte[] source) throws IOException {
 		IRuntime runtime = new SystemPropertiesRuntime();
 		Instrumenter instrumenter = new Instrumenter(runtime);
 		source = calculateFrames(source);
-		byte[] actual = instrumenter.instrument(source);
+		byte[] actual = instrumenter.instrument(source, "TestTarget");
 		byte[] expected = calculateFrames(actual);
 
 		assertEquals(dump(expected), dump(actual));

File: org.jacoco.examples/src/org/jacoco/examples/CoreTutorial.java
Patch:
@@ -119,8 +119,8 @@ private void runTutorial() throws Exception {
 		// The Instrumenter creates a modified version of our test target class
 		// that contains additional probes for execution data recording:
 		final Instrumenter instr = new Instrumenter(runtime);
-		final byte[] instrumented = instr
-				.instrument(getTargetClass(targetName));
+		final byte[] instrumented = instr.instrument(
+				getTargetClass(targetName), targetName);
 
 		// Now we're ready to run our instrumented class and need to startup the
 		// runtime first:
@@ -148,7 +148,7 @@ private void runTutorial() throws Exception {
 		// information:
 		final CoverageBuilder coverageBuilder = new CoverageBuilder();
 		final Analyzer analyzer = new Analyzer(executionData, coverageBuilder);
-		analyzer.analyzeClass(getTargetClass(targetName));
+		analyzer.analyzeClass(getTargetClass(targetName), targetName);
 
 		// Let's dump some metrics and line coverage information:
 		for (final IClassCoverage cc : coverageBuilder.getClasses()) {

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/Agent.java
Patch:
@@ -96,7 +96,7 @@ public static synchronized Agent getInstance() throws IllegalStateException {
 	 * @param logger
 	 *            logger used by this agent
 	 */
-	public Agent(final AgentOptions options, final IExceptionLogger logger) {
+	Agent(final AgentOptions options, final IExceptionLogger logger) {
 		this.options = options;
 		this.logger = logger;
 		this.data = new RuntimeData();

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/PreMain.java
Patch:
@@ -21,7 +21,7 @@
  * The agent which is referred as the <code>Premain-Class</code>. The agent
  * configuration is provided with the agent parameters in the command line.
  */
-public class PreMain {
+public final class PreMain {
 
 	private PreMain() {
 		// no instances

File: jacoco-maven-plugin/src/org/jacoco/maven/BundleCreator.java
Patch:
@@ -51,6 +51,7 @@ public BundleCreator(final MavenProject project, final FileFilter fileFilter) {
 	 *            the execution data.
 	 * @return the coverage data.
 	 * @throws IOException
+	 *             if class files can't be read
 	 */
 	public IBundleCoverage createBundle(
 			final ExecutionDataStore executionDataStore) throws IOException {

File: org.jacoco.ant/src/org/jacoco/ant/AbstractCoverageTask.java
Patch:
@@ -166,6 +166,7 @@ public void setAddress(final String address) {
 	 * to when the output method is tcp client. Default is <code>6300</code>
 	 * 
 	 * @param port
+	 *            port to bind to or connect to
 	 */
 	public void setPort(final int port) {
 		agentOptions.setPort(port);

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataReader.java
Patch:
@@ -49,6 +49,7 @@ public ExecutionDataReader(final InputStream input) {
 	 * Sets an listener for session information.
 	 * 
 	 * @param visitor
+	 *            visitor to retrieve session info events
 	 */
 	public void setSessionInfoVisitor(final ISessionInfoVisitor visitor) {
 		this.sessionInfoVisitor = visitor;
@@ -58,6 +59,7 @@ public void setSessionInfoVisitor(final ISessionInfoVisitor visitor) {
 	 * Sets an listener for execution data.
 	 * 
 	 * @param visitor
+	 *            visitor to retrieve execution data events
 	 */
 	public void setExecutionDataVisitor(final IExecutionDataVisitor visitor) {
 		this.executionDataVisitor = visitor;

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataWriter.java
Patch:
@@ -60,6 +60,7 @@ public ExecutionDataWriter(final OutputStream output) throws IOException {
 	 * Writes an file header to identify the stream and its protocol version.
 	 * 
 	 * @throws IOException
+	 *             if the header can't be written
 	 */
 	private void writeHeader() throws IOException {
 		out.writeByte(BLOCK_HEADER);
@@ -71,6 +72,7 @@ private void writeHeader() throws IOException {
 	 * Flushes the underlying stream.
 	 * 
 	 * @throws IOException
+	 *             if the underlying stream can't be flushed
 	 */
 	public void flush() throws IOException {
 		out.flush();

File: org.jacoco.core/src/org/jacoco/core/internal/ContentTypeDetector.java
Patch:
@@ -45,6 +45,7 @@ public class ContentTypeDetector {
 	 * @param in
 	 *            input to read the header from
 	 * @throws IOException
+	 *             if the stream can't be read
 	 */
 	public ContentTypeDetector(final InputStream in) throws IOException {
 		if (in.markSupported()) {

File: org.jacoco.core/src/org/jacoco/core/internal/data/CompactDataInput.java
Patch:
@@ -38,7 +38,7 @@ public CompactDataInput(final InputStream in) {
 	 * 
 	 * @return read value
 	 * @throws IOException
-	 *             might be thrown by the underlying stream
+	 *             if thrown by the underlying stream
 	 */
 	public int readVarInt() throws IOException {
 		final int value = 0xFF & readByte();
@@ -53,6 +53,7 @@ public int readVarInt() throws IOException {
 	 * 
 	 * @return boolean array
 	 * @throws IOException
+	 *             if thrown by the underlying stream
 	 */
 	public boolean[] readBooleanArray() throws IOException {
 		final boolean[] value = new boolean[readVarInt()];

File: org.jacoco.core/src/org/jacoco/core/internal/data/CompactDataOutput.java
Patch:
@@ -41,6 +41,7 @@ public CompactDataOutput(final OutputStream out) {
 	 * @param value
 	 *            value to write
 	 * @throws IOException
+	 *             if thrown by the underlying stream
 	 */
 	public void writeVarInt(final int value) throws IOException {
 		if ((value & 0xFFFFFF80) == 0) {
@@ -58,6 +59,7 @@ public void writeVarInt(final int value) throws IOException {
 	 * @param value
 	 *            boolean array
 	 * @throws IOException
+	 *             if thrown by the underlying stream
 	 */
 	public void writeBooleanArray(final boolean[] value) throws IOException {
 		writeVarInt(value.length);

File: org.jacoco.core/src/org/jacoco/core/runtime/RemoteControlReader.java
Patch:
@@ -52,6 +52,7 @@ protected boolean readBlock(final byte blockid) throws IOException {
 	 * Sets an listener for agent commands.
 	 * 
 	 * @param visitor
+	 *            visitor to retrieve agent commands
 	 */
 	public void setRemoteCommandVisitor(final IRemoteCommandVisitor visitor) {
 		this.remoteCommandVisitor = visitor;

File: org.jacoco.report/src/org/jacoco/report/FileMultiReportOutput.java
Patch:
@@ -31,6 +31,7 @@ public class FileMultiReportOutput implements IMultiReportOutput {
 	 * Creates a new instance for document output in the given base directory.
 	 * 
 	 * @param basedir
+	 *            base directory
 	 */
 	public FileMultiReportOutput(final File basedir) {
 		this.basedir = basedir;

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/NodePage.java
Patch:
@@ -37,7 +37,7 @@ public abstract class NodePage<NodeType extends ICoverageNode> extends
 	 * @param parent
 	 *            optional hierarchical parent
 	 * @param folder
-	 *            base folder to create this report in
+	 *            base folder to create this page in
 	 * @param context
 	 *            settings context
 	 */

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/ReportPage.java
Patch:
@@ -68,6 +68,7 @@ protected final boolean isRootPage() {
 	 * must be called at most once.
 	 * 
 	 * @throws IOException
+	 *             if the page can't be written
 	 */
 	public void render() throws IOException {
 		final HTMLDocument doc = new HTMLDocument(

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/TablePage.java
Patch:
@@ -55,6 +55,7 @@ protected TablePage(final NodeType node, final ReportPage parent,
 	 * is rendered.
 	 * 
 	 * @param item
+	 *            table item to add
 	 */
 	public void addItem(final ITableItem item) {
 		items.add(item);

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportMojo.java
Patch:
@@ -7,7 +7,7 @@
  *
  * Contributors:
  *    Evgeny Mandrikov - initial API and implementation
- *	  Kyle Lieber - implementation of CheckMojo
+ *    Kyle Lieber - implementation of CheckMojo
  *
  *******************************************************************************/
 package org.jacoco.maven;
@@ -45,7 +45,7 @@
  * Creates a code coverage report for a single project in multiple formats
  * (HTML, XML, and CSV).
  * 
- * @phase prepare-package
+ * @phase verify
  * @goal report
  * @requiresProject true
  * @threadSafe

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportMojo.java
Patch:
@@ -45,6 +45,7 @@
  * Creates a code coverage report for a single project in multiple formats
  * (HTML, XML, and CSV).
  * 
+ * @phase prepare-package
  * @goal report
  * @requiresProject true
  * @threadSafe

File: jacoco-maven-plugin/src/org/jacoco/maven/InstrumentMojo.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 
 /**
- * Performs Offline Instrumentation. Note that after execution of test you must
+ * Performs offline instrumentation. Note that after execution of test you must
  * restore original classes with help of "restore-instrumented-classes" goal.
  * 
  * @phase process-classes

File: jacoco-maven-plugin/src/org/jacoco/maven/RestoreMojo.java
Patch:
@@ -19,7 +19,7 @@
 import java.io.IOException;
 
 /**
- * Restores original classes as they were before Offline Instrumentation.
+ * Restores original classes as they were before offline instrumentation.
  * 
  * @phase prepare-package
  * @goal restore-instrumented-classes

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ClassFileDumperTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertArrayEquals;
 
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import org.jacoco.agent.rt.internal.ClassFileDumper;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ConfigLoaderTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -27,7 +27,7 @@ public class ConfigLoaderTest {
 	public void testResource() {
 		Properties system = new Properties();
 		Properties config = ConfigLoader.load(
-				"/org/jacoco/agent/rt/agent-test.properties", system);
+				"/org/jacoco/agent/rt/internal/agent-test.properties", system);
 
 		assertEquals("tcpclient", config.get("output"));
 	}

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/CoverageTransformerTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -60,7 +60,7 @@ public void teardown() {
 	public void testFilterAgentClass() {
 		CoverageTransformer t = createTransformer();
 		assertFalse(t.filter(classLoader,
-				"org/jacoco/agent/rt/somepkg/SomeClass"));
+				"org/jacoco/agent/rt/internal/somepkg/SomeClass"));
 	}
 
 	@Test
@@ -78,7 +78,7 @@ public void testFilterClassLoaderPositive() {
 
 	@Test
 	public void testFilterClassLoaderNegative() {
-		options.setExclClassloader("org.jacoco.agent.rt.CoverageTransformerTest$*");
+		options.setExclClassloader("org.jacoco.agent.rt.internal.CoverageTransformerTest$*");
 		CoverageTransformer t = createTransformer();
 		ClassLoader myClassLoader = new ClassLoader(null) {
 		};

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ExceptionRecorder.java
Patch:
@@ -9,11 +9,13 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
+import org.jacoco.agent.rt.internal.IExceptionLogger;
+
 /**
  * {@link IExceptionLogger} implementation for testing purposes.
  */

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/ExecutorTestBase.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.fail;
 

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockServerSocket.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockServerSocketTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockSocketConnection.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import java.io.IOException;
 import java.io.InputStream;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockSocketConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/TcpClientControllerTest.java
Patch:
@@ -11,7 +11,7 @@
  *    Marc R. Hoffmann - migration to mock socket
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -20,7 +20,7 @@
 import java.net.Socket;
 import java.util.List;
 
-import org.jacoco.agent.rt.ExceptionRecorder;
+import org.jacoco.agent.rt.internal.ExceptionRecorder;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.SessionInfo;
 import org.jacoco.core.data.SessionInfoStore;
@@ -94,7 +94,7 @@ public void testWriteExecutionData() throws Exception {
 		data.getExecutionData(Long.valueOf(0x12345678), "Foo", 42);
 		data.setSessionId("stubid");
 
-		controller.writeExecutionData();
+		controller.writeExecutionData(false);
 
 		final ExecutionDataStore execStore = new ExecutionDataStore();
 		remoteReader.setExecutionDataVisitor(execStore);

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/TcpConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -195,7 +195,7 @@ public Void call() throws Exception {
 
 		assertBlocks(f);
 
-		con.writeExecutionData();
+		con.writeExecutionData(false);
 		readAndAssertData();
 
 		con.close();
@@ -207,7 +207,7 @@ public void testLocalDumpWithoutInit() throws Exception {
 		final TcpConnection con = new TcpConnection(
 				mockConnection.getSocketA(), data);
 		// Must not write any data as we're not initialized:
-		con.writeExecutionData();
+		con.writeExecutionData(false);
 
 		assertEquals(0, mockConnection.getSocketB().getInputStream()
 				.available());

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/TcpServerControllerTest.java
Patch:
@@ -10,7 +10,7 @@
  *    Marc R. Hoffmann - migration to mock socket
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -24,7 +24,7 @@
 import java.net.UnknownHostException;
 import java.util.List;
 
-import org.jacoco.agent.rt.ExceptionRecorder;
+import org.jacoco.agent.rt.internal.ExceptionRecorder;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.ExecutionDataWriter;
 import org.jacoco.core.data.SessionInfo;
@@ -98,7 +98,7 @@ public void testWriteExecutionData() throws Exception {
 		remoteReader.read();
 
 		// Now the actual test starts:
-		controller.writeExecutionData();
+		controller.writeExecutionData(false);
 
 		final ExecutionDataStore execStore = new ExecutionDataStore();
 		remoteReader.setExecutionDataVisitor(execStore);

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/ClassFileDumper.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import java.io.File;
 import java.io.FileOutputStream;

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/ConfigLoader.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -30,7 +30,7 @@ static Properties load(final String resource, final Properties system) {
 		final Properties result = new Properties();
 
 		// 1. Try to load resource
-		final InputStream file = RT.class.getResourceAsStream(resource);
+		final InputStream file = Offline.class.getResourceAsStream(resource);
 		if (file != null) {
 			try {
 				result.load(file);

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/CoverageTransformer.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static java.lang.String.format;
 

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/IExceptionLogger.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 /**
  * At several places exception might occur that should be reported. For

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/PreMain.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import java.lang.instrument.Instrumentation;
 

File: org.jacoco.core.test/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGeneratorTest.java
Patch:
@@ -70,7 +70,7 @@ public void testRuntimeClassName() throws Exception {
 		expected.getVisitor().visitLdcInsn(Long.valueOf(987654321));
 		expected.getVisitor().visitLdcInsn("foo/Bar");
 		expected.getVisitor().visitIntInsn(Opcodes.BIPUSH, 17);
-		String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/RT";
+		String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline";
 		expected.getVisitor().visitMethodInsn(Opcodes.INVOKESTATIC, rtname,
 				"getProbes", "(JLjava/lang/String;I)[Z");
 

File: org.jacoco.core/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGenerator.java
Patch:
@@ -31,7 +31,7 @@ public class OfflineInstrumentationAccessGenerator implements
 	 * Creates a new instance for offline instrumentation.
 	 */
 	public OfflineInstrumentationAccessGenerator() {
-		this(JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/RT");
+		this(JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline");
 	}
 
 	/**

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/output/ExecutorTestBase.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import static org.junit.Assert.fail;
 

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/output/MockServerSocket.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/output/MockServerSocketTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/output/MockSocketConnection.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -25,8 +25,8 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 /**
- * Simulates the two connected {@link Socket} objects. No physical connection is
- * established for this. The the behavior including the (inconsistent) exception
+ * Simulates two connected {@link Socket} objects. No physical connection is
+ * established for this. The behavior includes the (inconsistent) exception
  * messages have been derived from Sun JDK 1.5.0_18-b02.
  */
 public class MockSocketConnection {

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/output/MockSocketConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/output/TcpConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -21,6 +21,7 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 
+import org.jacoco.agent.rt.internal.output.TcpConnection;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.ExecutionDataWriter;
 import org.jacoco.core.data.SessionInfo;

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/output/IAgentOutput.java
Patch:
@@ -9,18 +9,18 @@
  *    Brock Janiczak - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import java.io.IOException;
 
 import org.jacoco.core.runtime.AgentOptions;
 import org.jacoco.core.runtime.RuntimeData;
 
 /**
- * Common interface for different implementations that control execution data
+ * Common interface for different implementations that outputs execution data
  * dumps.
  */
-public interface IAgentController {
+public interface IAgentOutput {
 
 	/**
 	 * Configure the agent controller with the supplied options and connect it

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/output/NoneOutput.java
Patch:
@@ -9,15 +9,15 @@
  *    Mandrikov Evgeny - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import org.jacoco.core.runtime.AgentOptions;
 import org.jacoco.core.runtime.RuntimeData;
 
 /**
- * Controller that does nothing.
+ * Output that does nothing.
  */
-public class NoneController implements IAgentController {
+public class NoneOutput implements IAgentOutput {
 
 	public final void startup(final AgentOptions options, final RuntimeData data) {
 		// Nothing to do

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/output/TcpConnection.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt.internal.controller;
+package org.jacoco.agent.rt.internal.output;
 
 import java.io.IOException;
 import java.net.Socket;

File: jacoco-maven-plugin/src/org/jacoco/maven/AgentMojo.java
Patch:
@@ -126,6 +126,7 @@ public class AgentMojo extends AbstractJacocoMojo {
 	 * <li>tcpclient: At startup the agent connects to the TCP port specified by
 	 * the {@link #address} and {@link #port}. Execution data is written to this
 	 * TCP connection.</li>
+	 * <li>none: Do not produce any output.</li>
 	 * </ul>
 	 * 
 	 * @parameter expression="${jacoco.output}"

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/Agent.java
Patch:
@@ -23,6 +23,7 @@
 import org.jacoco.agent.rt.IAgent;
 import org.jacoco.agent.rt.internal.controller.IAgentController;
 import org.jacoco.agent.rt.internal.controller.LocalController;
+import org.jacoco.agent.rt.internal.controller.NoneController;
 import org.jacoco.agent.rt.internal.controller.TcpClientController;
 import org.jacoco.agent.rt.internal.controller.TcpServerController;
 import org.jacoco.core.JaCoCo;
@@ -165,6 +166,8 @@ IAgentController createAgentController() {
 			return new TcpServerController(logger);
 		case tcpclient:
 			return new TcpClientController(logger);
+		case none:
+			return new NoneController();
 		default:
 			throw new AssertionError(controllerType);
 		}

File: org.jacoco.ant/src/org/jacoco/ant/AbstractCoverageTask.java
Patch:
@@ -183,7 +183,7 @@ public void setClassdumpdir(final File dir) {
 	}
 
 	/**
-	 * Sets whether the agent should exposes functionality via JMX.
+	 * Sets whether the agent should expose functionality via JMX.
 	 * 
 	 * @param jmx
 	 *            <code>true</code> if JMX should be enabled

File: org.jacoco.core/src/org/jacoco/core/runtime/AgentOptions.java
Patch:
@@ -469,7 +469,7 @@ public boolean getJmx() {
 	}
 
 	/**
-	 * Sets whether the agent should exposes functionality via JMX.
+	 * Sets whether the agent should expose functionality via JMX.
 	 * 
 	 * @param jmx
 	 *            <code>true</code> if JMX should be enabled

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ClassFileDumperTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertArrayEquals;
 
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import org.jacoco.agent.rt.internal.ClassFileDumper;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ConfigLoaderTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -27,7 +27,7 @@ public class ConfigLoaderTest {
 	public void testResource() {
 		Properties system = new Properties();
 		Properties config = ConfigLoader.load(
-				"/org/jacoco/agent/rt/agent-test.properties", system);
+				"/org/jacoco/agent/rt/internal/agent-test.properties", system);
 
 		assertEquals("tcpclient", config.get("output"));
 	}

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/CoverageTransformerTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -60,7 +60,7 @@ public void teardown() {
 	public void testFilterAgentClass() {
 		CoverageTransformer t = createTransformer();
 		assertFalse(t.filter(classLoader,
-				"org/jacoco/agent/rt/somepkg/SomeClass"));
+				"org/jacoco/agent/rt/internal/somepkg/SomeClass"));
 	}
 
 	@Test
@@ -78,7 +78,7 @@ public void testFilterClassLoaderPositive() {
 
 	@Test
 	public void testFilterClassLoaderNegative() {
-		options.setExclClassloader("org.jacoco.agent.rt.CoverageTransformerTest$*");
+		options.setExclClassloader("org.jacoco.agent.rt.internal.CoverageTransformerTest$*");
 		CoverageTransformer t = createTransformer();
 		ClassLoader myClassLoader = new ClassLoader(null) {
 		};

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/ExceptionRecorder.java
Patch:
@@ -9,11 +9,13 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
+import org.jacoco.agent.rt.internal.IExceptionLogger;
+
 /**
  * {@link IExceptionLogger} implementation for testing purposes.
  */

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/ExecutorTestBase.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.fail;
 

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MBeanControllerTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Evgeny Mandrikov - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -25,6 +25,7 @@
 import javax.management.MBeanOperationInfo;
 import javax.management.ObjectName;
 
+import org.jacoco.agent.rt.internal.controller.MBeanController;
 import org.jacoco.core.JaCoCo;
 import org.jacoco.core.data.ExecutionDataReader;
 import org.jacoco.core.data.ExecutionDataStore;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockServerSocket.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockServerSocketTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockSocketConnection.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import java.io.IOException;
 import java.io.InputStream;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/MockSocketConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/TcpClientControllerTest.java
Patch:
@@ -11,7 +11,7 @@
  *    Marc R. Hoffmann - migration to mock socket
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -20,7 +20,7 @@
 import java.net.Socket;
 import java.util.List;
 
-import org.jacoco.agent.rt.ExceptionRecorder;
+import org.jacoco.agent.rt.internal.ExceptionRecorder;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.SessionInfo;
 import org.jacoco.core.data.SessionInfoStore;
@@ -94,7 +94,7 @@ public void testWriteExecutionData() throws Exception {
 		data.getExecutionData(Long.valueOf(0x12345678), "Foo", 42);
 		data.setSessionId("stubid");
 
-		controller.writeExecutionData();
+		controller.writeExecutionData(false);
 
 		final ExecutionDataStore execStore = new ExecutionDataStore();
 		remoteReader.setExecutionDataVisitor(execStore);

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/TcpConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -195,7 +195,7 @@ public Void call() throws Exception {
 
 		assertBlocks(f);
 
-		con.writeExecutionData();
+		con.writeExecutionData(false);
 		readAndAssertData();
 
 		con.close();
@@ -207,7 +207,7 @@ public void testLocalDumpWithoutInit() throws Exception {
 		final TcpConnection con = new TcpConnection(
 				mockConnection.getSocketA(), data);
 		// Must not write any data as we're not initialized:
-		con.writeExecutionData();
+		con.writeExecutionData(false);
 
 		assertEquals(0, mockConnection.getSocketB().getInputStream()
 				.available());

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/internal/controller/TcpServerControllerTest.java
Patch:
@@ -10,7 +10,7 @@
  *    Marc R. Hoffmann - migration to mock socket
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -24,7 +24,7 @@
 import java.net.UnknownHostException;
 import java.util.List;
 
-import org.jacoco.agent.rt.ExceptionRecorder;
+import org.jacoco.agent.rt.internal.ExceptionRecorder;
 import org.jacoco.core.data.ExecutionDataStore;
 import org.jacoco.core.data.ExecutionDataWriter;
 import org.jacoco.core.data.SessionInfo;
@@ -98,7 +98,7 @@ public void testWriteExecutionData() throws Exception {
 		remoteReader.read();
 
 		// Now the actual test starts:
-		controller.writeExecutionData();
+		controller.writeExecutionData(false);
 
 		final ExecutionDataStore execStore = new ExecutionDataStore();
 		remoteReader.setExecutionDataVisitor(execStore);

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/ClassFileDumper.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import java.io.File;
 import java.io.FileOutputStream;

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/ConfigLoader.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -30,7 +30,7 @@ static Properties load(final String resource, final Properties system) {
 		final Properties result = new Properties();
 
 		// 1. Try to load resource
-		final InputStream file = RT.class.getResourceAsStream(resource);
+		final InputStream file = Offline.class.getResourceAsStream(resource);
 		if (file != null) {
 			try {
 				result.load(file);

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/CoverageTransformer.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import static java.lang.String.format;
 

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/IExceptionLogger.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 /**
  * At several places exception might occur that should be reported. For

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/PreMain.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.agent.rt;
+package org.jacoco.agent.rt.internal;
 
 import java.lang.instrument.Instrumentation;
 

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/controller/IRuntimeMBean.java
Patch:
@@ -9,7 +9,7 @@
  *    Evgeny Mandrikov - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import java.io.IOException;
 

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/internal/controller/MBeanController.java
Patch:
@@ -9,7 +9,7 @@
  *    Evgeny Mandrikov - initial API and implementation
  *
  *******************************************************************************/
-package org.jacoco.agent.rt.controller;
+package org.jacoco.agent.rt.internal.controller;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -45,7 +45,7 @@ public void shutdown() throws Exception {
 				new ObjectName(OBJECT_NAME));
 	}
 
-	public void writeExecutionData() throws Exception {
+	public void writeExecutionData(final boolean reset) {
 		// nothing to do
 	}
 

File: org.jacoco.core.test/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGeneratorTest.java
Patch:
@@ -70,7 +70,7 @@ public void testRuntimeClassName() throws Exception {
 		expected.getVisitor().visitLdcInsn(Long.valueOf(987654321));
 		expected.getVisitor().visitLdcInsn("foo/Bar");
 		expected.getVisitor().visitIntInsn(Opcodes.BIPUSH, 17);
-		String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/RT";
+		String rtname = JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline";
 		expected.getVisitor().visitMethodInsn(Opcodes.INVOKESTATIC, rtname,
 				"getProbes", "(JLjava/lang/String;I)[Z");
 

File: org.jacoco.core/src/org/jacoco/core/runtime/OfflineInstrumentationAccessGenerator.java
Patch:
@@ -31,7 +31,7 @@ public class OfflineInstrumentationAccessGenerator implements
 	 * Creates a new instance for offline instrumentation.
 	 */
 	public OfflineInstrumentationAccessGenerator() {
-		this(JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/RT");
+		this(JaCoCo.RUNTIMEPACKAGE.replace('.', '/') + "/Offline");
 	}
 
 	/**

File: org.jacoco.core/src/org/jacoco/core/instr/Instrumenter.java
Patch:
@@ -135,10 +135,11 @@ public int instrumentArchive(final InputStream input,
 		ZipEntry entry;
 		int count = 0;
 		while ((entry = zipin.getNextEntry()) != null) {
-			zipout.putNextEntry(entry);
+			zipout.putNextEntry(new ZipEntry(entry.getName()));
 			count += instrumentAll(zipin, zipout);
+			zipout.closeEntry();
 		}
-		zipout.closeEntry();
+		zipout.finish();
 		return count;
 	}
 

File: org.jacoco.core.test/src/org/jacoco/core/internal/ContentTypeDetectorTest.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.core.internal.analysis;
+package org.jacoco.core.internal;
 
 import static org.junit.Assert.assertEquals;
 
@@ -20,6 +20,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
+import org.jacoco.core.internal.ContentTypeDetector;
 import org.jacoco.core.test.TargetLoader;
 import org.junit.Test;
 

File: org.jacoco.core/src/org/jacoco/core/analysis/Analyzer.java
Patch:
@@ -21,8 +21,8 @@
 
 import org.jacoco.core.data.ExecutionData;
 import org.jacoco.core.data.ExecutionDataStore;
+import org.jacoco.core.internal.ContentTypeDetector;
 import org.jacoco.core.internal.analysis.ClassAnalyzer;
-import org.jacoco.core.internal.analysis.ContentTypeDetector;
 import org.jacoco.core.internal.analysis.StringPool;
 import org.jacoco.core.internal.data.CRC64;
 import org.jacoco.core.internal.flow.ClassProbesAdapter;

File: org.jacoco.core/src/org/jacoco/core/internal/ContentTypeDetector.java
Patch:
@@ -9,7 +9,7 @@
  *    Marc R. Hoffmann - initial API and implementation
  *    
  *******************************************************************************/
-package org.jacoco.core.internal.analysis;
+package org.jacoco.core.internal;
 
 import java.io.BufferedInputStream;
 import java.io.IOException;

File: jacoco-maven-plugin/src/org/jacoco/maven/CheckConfiguration.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class CheckConfiguration {
 
-	private final double DEFAULT_RATIO = 0;
+	private static final double DEFAULT_RATIO = 0;
 
 	private final Map<CounterEntity, Double> configuration;
 

File: jacoco-maven-plugin/src/org/jacoco/maven/CheckConfiguration.java
Patch:
@@ -41,7 +41,6 @@ public CheckConfiguration() {
 	 *            percent of instructions covered
 	 */
 	public void setInstructionRatio(final Double ratio) {
-		System.out.println("setting ratio to " + ratio);
 		this.configuration.put(CounterEntity.INSTRUCTION, ratio);
 	}
 

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportMojo.java
Patch:
@@ -49,7 +49,6 @@
  * (HTML, XML, and CSV).
  * 
  * @goal report
- * @phase prepare-package
  * @requiresProject true
  * @threadSafe
  */

File: jacoco-maven-plugin/src/org/jacoco/maven/ReportMojo.java
Patch:
@@ -49,6 +49,7 @@
  * (HTML, XML, and CSV).
  * 
  * @goal report
+ * @phase prepare-package
  * @requiresProject true
  * @threadSafe
  */
@@ -203,7 +204,7 @@ public boolean canGenerateReport() {
 		}
 		if (!dataFile.exists()) {
 			getLog().info(
-				"Skipping JaCoCo execution due to missing execution data file");
+					"Skipping JaCoCo execution due to missing execution data file");
 			return false;
 		}
 		return true;

File: org.jacoco.core/src/org/jacoco/core/internal/flow/LabelFlowAnalyzer.java
Patch:
@@ -16,6 +16,7 @@
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.MethodNode;
+import org.objectweb.asm.tree.TryCatchBlockNode;
 
 /**
  * Method visitor to collect flow related information about the {@link Label}s
@@ -36,7 +37,7 @@ public static void markLabels(final MethodNode method) {
 		final MethodVisitor lfa = new LabelFlowAnalyzer();
 		if (method.tryCatchBlocks != null) {
 			for (int i = method.tryCatchBlocks.size(); --i >= 0;) {
-				method.tryCatchBlocks.get(i).accept(lfa);
+				((TryCatchBlockNode) method.tryCatchBlocks.get(i)).accept(lfa);
 			}
 		}
 		method.instructions.accept(lfa);

File: org.jacoco.report.test/src/org/jacoco/report/FileMultiReportOutputTest.java
Patch:
@@ -48,6 +48,7 @@ public void testCreateFileWithDirectories() throws IOException {
 		assertEquals(2, actual.read());
 		assertEquals(3, actual.read());
 		assertEquals(-1, actual.read());
+		actual.close();
 	}
 
 	@Test(expected = IOException.class)

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/CoverageTransformerTest.java
Patch:
@@ -135,7 +135,9 @@ public void testTransformFailure() {
 			assertEquals("Error while instrumenting class org.jacoco.Sample.",
 					e.getMessage());
 		}
-		recorder.assertException(NullPointerException.class, null);
+		recorder.assertException(IllegalClassFormatException.class,
+				"Error while instrumenting class org.jacoco.Sample.",
+				NullPointerException.class);
 		recorder.clear();
 	}
 

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/CoverageTransformer.java
Patch:
@@ -91,10 +91,10 @@ public byte[] transform(final ClassLoader loader, final String classname,
 			}
 			return instrumenter.instrument(classfileBuffer);
 		} catch (final Exception ex) {
-			// Report this, as the exception is ignored by the JVM:
-			logger.logExeption(ex);
 			final IllegalClassFormatException wrapper = new IllegalClassFormatException(
 					format("Error while instrumenting class %s.", classname));
+			// Report this, as the exception is ignored by the JVM:
+			logger.logExeption(wrapper);
 			throw (IllegalClassFormatException) wrapper.initCause(ex);
 		}
 	}

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ProbesBeforeSuperConstructorTest.java
Patch:
@@ -32,7 +32,7 @@ protected void run(final Class<?> targetClass) throws Exception {
 	@Test
 	public void testCoverageResult() {
 
-		assertLine("super", ICounter.PARTLY_COVERED, 1, 1);
+		assertLine("super", ICounter.PARTLY_COVERED, 3, 1);
 
 	}
 

File: org.jacoco.report.test/src/org/jacoco/report/internal/html/page/ReportPageTest.java
Patch:
@@ -94,6 +94,9 @@ public void testPageContent() throws Exception {
 		final HTMLSupport support = new HTMLSupport();
 		final Document doc = support.parse(output.getFile("Test.html"));
 
+		// language
+		assertEquals("en", support.findStr(doc, "/html/@lang"));
+
 		// style sheet
 		assertEquals(".resources/report.css", support.findStr(doc,
 				"/html/head/link[@rel='stylesheet']/@href"));

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/ReportPage.java
Patch:
@@ -72,6 +72,7 @@ protected final boolean isRootPage() {
 	public void render() throws IOException {
 		final HTMLDocument doc = new HTMLDocument(
 				folder.createFile(getFileName()), context.getOutputEncoding());
+		doc.attr("lang", context.getLocale().getLanguage());
 		head(doc.head());
 		body(doc.body());
 		doc.close();

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/SourceFilePage.java
Patch:
@@ -59,8 +59,8 @@ protected void content(final HTMLElement body) throws IOException {
 	}
 
 	@Override
-	protected void headExtra(final HTMLElement head) throws IOException {
-		super.headExtra(head);
+	protected void head(final HTMLElement head) throws IOException {
+		super.head(head);
 		head.link(
 				"stylesheet",
 				context.getResources().getLink(folder,

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/TablePage.java
Patch:
@@ -61,8 +61,8 @@ public void addItem(final ITableItem item) {
 	}
 
 	@Override
-	protected void headExtra(final HTMLElement head) throws IOException {
-		super.headExtra(head);
+	protected void head(final HTMLElement head) throws IOException {
+		super.head(head);
 		head.script("text/javascript",
 				context.getResources().getLink(folder, Resources.SORT_SCRIPT));
 	}

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/SortIndex.java
Patch:
@@ -83,7 +83,7 @@ public void init(final List<? extends T> items) {
 
 	/**
 	 * Returns the sorted position of the element with the given index in the
-	 * items list provided to the {@link #init(List)} method.
+	 * items list provided to the init() method.
 	 * 
 	 * @param idx
 	 *            index of a element of the list

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/BooleanExpressionsTest.java
Patch:
@@ -78,7 +78,7 @@ public void testCoverageResult() {
 		assertLine("notF", ICounter.PARTLY_COVERED, 1, 1);
 
 		// 10. Not (both cases)
-		assertLine("notTF", ICounter.FULLY_COVERED);
+		assertLine("notTF", ICounter.FULLY_COVERED, 0, 2);
 
 	}
 

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/targets/Target02.java
Patch:
@@ -112,7 +112,7 @@ public void run() {
 
 		// 10. Not (both cases)
 		for (boolean b : new boolean[] { true, false }) {
-			nop(b); // $line-notTF$
+			nop(!b); // $line-notTF$
 		}
 
 	}

File: org.jacoco.core/src/org/jacoco/core/internal/flow/ClassProbesAdapter.java
Patch:
@@ -16,7 +16,6 @@
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.commons.EmptyVisitor;
-import org.objectweb.asm.commons.JSRInlinerAdapter;
 
 /**
  * A {@link org.objectweb.asm.ClassVisitor} that calculates probes for every
@@ -102,8 +101,9 @@ public final MethodVisitor visitMethod(final int access, final String name,
 		} else {
 			methodProbes = mv;
 		}
-		return new JSRInlinerAdapter(null, access, name, desc, signature,
+		return new MethodSanitizer(null, access, name, desc, signature,
 				exceptions) {
+
 			@Override
 			public void visitEnd() {
 				super.visitEnd();

File: org.jacoco.core.test/src/org/jacoco/core/analysis/CoverageBuilderTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.jacoco.core.internal.analysis.BundleCoverageImpl;
 import org.jacoco.core.internal.analysis.ClassCoverageImpl;
 import org.jacoco.core.internal.analysis.CounterImpl;
 import org.jacoco.core.internal.analysis.MethodCoverageImpl;
@@ -182,7 +181,7 @@ public void testGetBundle() {
 		method3.increment(CounterImpl.COUNTER_1_0, CounterImpl.COUNTER_0_0, 1);
 		addClass(3, "Sample3", null, method3);
 
-		BundleCoverageImpl bundle = coverageBuilder.getBundle("testbundle");
+		IBundleCoverage bundle = coverageBuilder.getBundle("testbundle");
 		assertEquals("testbundle", bundle.getName());
 
 		final Collection<IPackageCoverage> packages = bundle.getPackages();

File: org.jacoco.core/src/org/jacoco/core/analysis/CoverageBuilder.java
Patch:
@@ -73,7 +73,7 @@ public Collection<ISourceFileCoverage> getSourceFiles() {
 	 *            Name of the bundle
 	 * @return bundle containing all classes and source files
 	 */
-	public BundleCoverageImpl getBundle(final String name) {
+	public IBundleCoverage getBundle(final String name) {
 		return new BundleCoverageImpl(name, classes.values(),
 				sourcefiles.values());
 	}

File: org.jacoco.ant/src/org/jacoco/ant/AbstractCoverageTask.java
Patch:
@@ -32,6 +32,7 @@ public class AbstractCoverageTask extends Task {
 	 * Create default agent options
 	 */
 	protected AbstractCoverageTask() {
+		super();
 		agentOptions = new AgentOptions();
 		enabled = true;
 	}

File: org.jacoco.ant/src/org/jacoco/ant/CoverageTask.java
Patch:
@@ -37,6 +37,7 @@ public class CoverageTask extends AbstractCoverageTask implements TaskContainer
 	 * Creates a new default coverage task
 	 */
 	public CoverageTask() {
+		super();
 		taskEnhancers.add(new JavaLikeTaskEnhancer("java"));
 		taskEnhancers.add(new JavaLikeTaskEnhancer("junit"));
 		taskEnhancers.add(new TestNGTaskEnhancer("testng"));

File: org.jacoco.ant/src/org/jacoco/ant/DumpTask.java
Patch:
@@ -152,6 +152,7 @@ public void execute() throws BuildException {
 	private static class Nul extends OutputStream {
 		@Override
 		public void write(final int b) throws IOException {
+			// nothing to do
 		}
 	}
 

File: org.jacoco.core/src/org/jacoco/core/analysis/Analyzer.java
Patch:
@@ -155,8 +155,9 @@ public int analyzeAll(final InputStream input) throws IOException {
 			return 1;
 		case ContentTypeDetector.ZIPFILE:
 			return analyzeArchive(detector.getInputStream());
+		default:
+			return 0;
 		}
-		return 0;
 	}
 
 	/**

File: org.jacoco.core/src/org/jacoco/core/runtime/LoggerRuntime.java
Patch:
@@ -45,6 +45,7 @@ public class LoggerRuntime extends AbstractRuntime {
 	 * Creates a new runtime.
 	 */
 	public LoggerRuntime() {
+		super();
 		this.key = Integer.toHexString(hashCode());
 		this.logger = configureLogger();
 		this.handler = new RuntimeHandler();

File: org.jacoco.core/src/org/jacoco/core/runtime/ModifiedSystemClassRuntime.java
Patch:
@@ -53,6 +53,7 @@ public class ModifiedSystemClassRuntime extends AbstractRuntime {
 	 */
 	public ModifiedSystemClassRuntime(final Class<?> systemClass,
 			final String accessFieldName) {
+		super();
 		this.systemClass = systemClass;
 		this.systemClassName = systemClass.getName().replace('.', '/');
 		this.accessFieldName = accessFieldName;

File: org.jacoco.core/src/org/jacoco/core/runtime/SystemPropertiesRuntime.java
Patch:
@@ -34,6 +34,7 @@ public class SystemPropertiesRuntime extends AbstractRuntime {
 	 * Creates a new runtime.
 	 */
 	public SystemPropertiesRuntime() {
+		super();
 		this.key = KEYPREFIX + Integer.toHexString(hashCode());
 	}
 

File: org.jacoco.core/src/org/jacoco/core/runtime/URLStreamHandlerRuntime.java
Patch:
@@ -39,6 +39,7 @@ public class URLStreamHandlerRuntime extends AbstractRuntime {
 	 * Creates a new runtime.
 	 */
 	public URLStreamHandlerRuntime() {
+		super();
 		protocol = PROTOCOLPREFIX + Integer.toHexString(hashCode());
 	}
 

File: org.jacoco.report/src/org/jacoco/report/internal/html/page/ReportPage.java
Patch:
@@ -109,6 +109,7 @@ private void body(final HTMLElement body) throws IOException {
 	 *             in case of IO problems with the report writer
 	 */
 	protected void headExtra(final HTMLElement head) throws IOException {
+		// nothing to do
 	}
 
 	/**

File: org.jacoco.core.test/src/org/jacoco/core/data/SessionInfoTest.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class SessionInfoTest {
 
-	@Test(expected = NullPointerException.class)
+	@Test(expected = IllegalArgumentException.class)
 	public void testNullId() {
 		new SessionInfo(null, 1, 2);
 	}

File: org.jacoco.core/src/org/jacoco/core/data/SessionInfo.java
Patch:
@@ -37,7 +37,7 @@ public class SessionInfo implements Comparable<SessionInfo> {
 	 */
 	public SessionInfo(final String id, final long start, final long dump) {
 		if (id == null) {
-			throw new NullPointerException();
+			throw new IllegalArgumentException();
 		}
 		this.id = id;
 		this.start = start;

File: org.jacoco.core/src/org/jacoco/core/internal/instr/ClassInstrumenter.java
Patch:
@@ -221,6 +221,7 @@ public int pushInstance(final MethodVisitor mv) {
 		}
 
 		public void addMembers(final ClassVisitor delegate) {
+			// nothing to do
 		}
 
 	}

File: org.jacoco.core/src/org/jacoco/core/runtime/LoggerRuntime.java
Patch:
@@ -169,6 +169,7 @@ public void publish(final LogRecord record) {
 
 		@Override
 		public void flush() {
+			// nothing to do
 		}
 
 		@Override

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/JacocoAgent.java
Patch:
@@ -81,7 +81,7 @@ public void init(final Instrumentation inst) throws Exception {
 		controller.startup(options, runtime);
 	}
 
-	private IAgentController createAgentController() {
+	IAgentController createAgentController() {
 		final OutputMode controllerType = options.getOutput();
 		switch (controllerType) {
 		case file:

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/controller/MBeanController.java
Patch:
@@ -46,6 +46,7 @@ public void shutdown() throws Exception {
 	}
 
 	public void writeExecutionData() throws Exception {
+		// nothing to do
 	}
 
 	// === IRuntimeMBean ===

File: org.jacoco.examples/src/org/jacoco/examples/ClassInfo.java
Patch:
@@ -23,7 +23,7 @@
  * This example reads given Java class files, directories or JARs and dumps
  * information about the classes.
  */
-public class ClassInfo implements ICoverageVisitor {
+public final class ClassInfo implements ICoverageVisitor {
 
 	private final Analyzer analyzer;
 

File: org.jacoco.examples/src/org/jacoco/examples/ExecDump.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * This example reads given execution data files and dumps their content.
  */
-public class ExecDump {
+public final class ExecDump {
 
 	/**
 	 * Reads all execution data files specified as the arguments and dumps the
@@ -76,4 +76,6 @@ private static int getHitCount(final boolean[] data) {
 		return count;
 	}
 
+	private ExecDump() {
+	}
 }

File: org.jacoco.examples/src/org/jacoco/examples/ExecutionDataClient.java
Patch:
@@ -24,7 +24,7 @@
  * <code>tcpserver</code> and requests execution data. The collected data is
  * dumped to a local file.
  */
-public class ExecutionDataClient {
+public final class ExecutionDataClient {
 
 	private static final String DESTFILE = "jacoco-client.exec";
 
@@ -60,4 +60,6 @@ public static void main(final String[] args) throws IOException {
 		localFile.close();
 	}
 
+	private ExecutionDataClient() {
+	}
 }

File: org.jacoco.examples/src/org/jacoco/examples/ExecutionDataServer.java
Patch:
@@ -29,7 +29,7 @@
  * in output mode <code>tcpclient</code>. The collected data is dumped to a
  * local file.
  */
-public class ExecutionDataServer {
+public final class ExecutionDataServer {
 
 	private static final String DESTFILE = "jacoco-server.exec";
 
@@ -102,6 +102,8 @@ public void visitClassExecution(final ExecutionData data) {
 				fileWriter.visitClassExecution(data);
 			}
 		}
+	}
 
+	private ExecutionDataServer() {
 	}
 }

File: org.jacoco.examples/src/org/jacoco/examples/MBeanClient.java
Patch:
@@ -25,7 +25,7 @@
  * <code>mbean</code> and requests execution data. The collected data is dumped
  * to a local file.
  */
-public class MBeanClient {
+public final class MBeanClient {
 
 	private static final String DESTFILE = "jacoco-client.exec";
 
@@ -73,4 +73,6 @@ private interface IProxy {
 		void reset();
 	}
 
+	private MBeanClient() {
+	}
 }

File: org.jacoco.core/src/org/jacoco/core/runtime/AgentOptions.java
Patch:
@@ -27,7 +27,7 @@
  *   key1=value1,key2=value2,key3=value3
  * </pre>
  */
-public class AgentOptions {
+public final class AgentOptions {
 
 	/**
 	 * Specifies the output file for execution data. Default is

File: org.jacoco.core/src/org/jacoco/core/runtime/ModifiedSystemClassRuntime.java
Patch:
@@ -136,7 +136,7 @@ public byte[] transform(final ClassLoader loader,
 			clazz.getField(accessFieldName);
 		} catch (final NoSuchFieldException e) {
 			throw new RuntimeException(format(
-					"Class %s could not be instrumented.", className));
+					"Class %s could not be instrumented.", className), e);
 		}
 		return new ModifiedSystemClassRuntime(clazz, accessFieldName);
 	}

File: org.jacoco.report/src/org/jacoco/report/csv/CSVGroupHandler.java
Patch:
@@ -39,11 +39,11 @@ private CSVGroupHandler(final ClassRowWriter writer, final String groupName) {
 
 	public void visitBundle(final IBundleCoverage bundle,
 			final ISourceFileLocator locator) throws IOException {
-		final String groupName = appendName(bundle.getName());
+		final String name = appendName(bundle.getName());
 		for (final IPackageCoverage p : bundle.getPackages()) {
 			final String packageName = p.getName();
 			for (final IClassCoverage c : p.getClasses()) {
-				writer.writeRow(groupName, packageName, c);
+				writer.writeRow(name, packageName, c);
 			}
 		}
 	}

File: jacoco-maven-plugin/src/main/java/org/jacoco/maven/ReportMojo.java
Patch:
@@ -210,8 +210,7 @@ private File resolvePath(String path) {
 
 	private List<File> getCompileSourceRoots() {
 		List<File> result = new ArrayList<File>();
-		for (Object path : project.getExecutionProject()
-				.getCompileSourceRoots()) {
+		for (Object path : project.getCompileSourceRoots()) {
 			result.add(resolvePath((String) path));
 		}
 		return result;

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/CoverageTransformer.java
Patch:
@@ -68,10 +68,9 @@ public byte[] transform(ClassLoader loader, String classname,
 			final String msg = "Error while instrumenting class %s.";
 			final IllegalClassFormatException ex = new IllegalClassFormatException(
 					format(msg, classname));
-			ex.initCause(t);
 			// Report this, as the exception is ignored by the JVM:
 			logger.logExeption(ex);
-			throw ex;
+			throw (IllegalClassFormatException) ex.initCause(t);
 		}
 	}
 

File: org.jacoco.core/src/org/jacoco/core/analysis/NodeComparator.java
Patch:
@@ -51,6 +51,9 @@ public class NodeComparator implements Comparator<ICoverageNode>, Serializable {
 	public NodeComparator second(final Comparator<ICoverageNode> second) {
 		final Comparator<ICoverageNode> first = this;
 		return new NodeComparator(null, null) {
+
+			private static final long serialVersionUID = -5515272752138802838L;
+
 			@Override
 			public int compare(final ICoverageNode o1, final ICoverageNode o2) {
 				final int result = first.compare(o1, o2);

File: org.jacoco.core/src/org/jacoco/core/internal/flow/ClassProbesAdapter.java
Patch:
@@ -104,10 +104,10 @@ public void visitEnd() {
 				super.visitEnd();
 				this.accept(new LabelFlowAnalyzer());
 				if (interfaceType) {
-					final ProbeCounter counter = new ProbeCounter();
+					final ProbeCounter probeCounter = new ProbeCounter();
 					this.accept(new MethodProbesAdapter(
-							EMPTY_METHOD_PROBES_VISITOR, counter));
-					cv.visitTotalProbeCount(counter.count);
+							EMPTY_METHOD_PROBES_VISITOR, probeCounter));
+					cv.visitTotalProbeCount(probeCounter.count);
 				}
 				this.accept(new MethodProbesAdapter(methodProbes,
 						ClassProbesAdapter.this));

File: org.jacoco.core/src/org/jacoco/core/runtime/URLStreamHandlerRuntime.java
Patch:
@@ -53,9 +53,9 @@ private Map<String, URLStreamHandler> getHandlersReference()
 		final Field field = URL.class.getDeclaredField("handlers");
 		field.setAccessible(true);
 		@SuppressWarnings("unchecked")
-		final Map<String, URLStreamHandler> handlers = (Map<String, URLStreamHandler>) field
+		final Map<String, URLStreamHandler> map = (Map<String, URLStreamHandler>) field
 				.get(null);
-		return handlers;
+		return map;
 	}
 
 	public void shutdown() {

File: org.jacoco.core/src/org/jacoco/core/internal/flow/ClassProbesAdapter.java
Patch:
@@ -12,15 +12,15 @@
 package org.jacoco.core.internal.flow;
 
 import org.objectweb.asm.ClassAdapter;
-import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.commons.EmptyVisitor;
 import org.objectweb.asm.commons.JSRInlinerAdapter;
 
 /**
- * A {@link ClassVisitor} that calculates probes for every method.
+ * A {@link org.objectweb.asm.ClassVisitor} that calculates probes for every
+ * method.
  */
 public class ClassProbesAdapter extends ClassAdapter implements
 		IProbeIdGenerator {

File: org.jacoco.core/src/org/jacoco/core/internal/instr/InstrSupport.java
Patch:
@@ -13,7 +13,6 @@
 
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.commons.GeneratorAdapter;
 
 /**
  * Constants and utilities for byte code instrumentation.
@@ -66,7 +65,8 @@ private InstrSupport() {
 
 	/**
 	 * Generates the instruction to push the given int value on the stack.
-	 * Implementation taken from {@link GeneratorAdapter#push(int)}.
+	 * Implementation taken from
+	 * {@link org.objectweb.asm.commons.GeneratorAdapter#push(int)}.
 	 * 
 	 * @param mv
 	 *            visitor to emit the instruction

File: org.jacoco.report/src/org/jacoco/report/JavaNames.java
Patch:
@@ -77,11 +77,11 @@ public String getQualifiedClassName(final String vmname) {
 	public String getMethodName(final String vmclassname,
 			final String vmmethodname, final String vmdesc,
 			final String vmsignature) {
-		if (vmmethodname.equals("<clinit>")) {
+		if ("<clinit>".equals(vmmethodname)) {
 			return "static {...}";
 		}
 		final StringBuilder result = new StringBuilder();
-		if (vmmethodname.equals("<init>")) {
+		if ("<init>".equals(vmmethodname)) {
 			if (isAnonymous(vmclassname)) {
 				return "{...}";
 			} else {

File: org.jacoco.report/src/org/jacoco/report/internal/xml/XMLCoverageWriter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Serializes coverage data as XML fragments.
  */
-public class XMLCoverageWriter {
+public final class XMLCoverageWriter {
 
 	/**
 	 * Creates a child element with a name attribute.

File: org.jacoco.report/src/org/jacoco/report/internal/xml/XMLGroupVisitor.java
Patch:
@@ -15,13 +15,12 @@
 import java.io.IOException;
 
 import org.jacoco.core.analysis.IBundleCoverage;
-import org.jacoco.report.IReportGroupVisitor;
 import org.jacoco.report.ISourceFileLocator;
 import org.jacoco.report.internal.AbstractGroupVisitor;
 
 /**
- * {@link IReportGroupVisitor} that transforms the report structure into XML
- * elements.
+ * A {@link org.jacoco.report.IReportGroupVisitor} that transforms the report
+ * structure into XML elements.
  */
 public class XMLGroupVisitor extends AbstractGroupVisitor {
 

File: org.jacoco.core.test/src/org/jacoco/core/internal/analysis/MethodAnalyzerTest.java
Patch:
@@ -14,6 +14,7 @@
 import static org.junit.Assert.assertEquals;
 
 import org.jacoco.core.analysis.ILine;
+import org.jacoco.core.analysis.IMethodCoverage;
 import org.jacoco.core.internal.flow.IProbeIdGenerator;
 import org.jacoco.core.internal.flow.LabelFlowAnalyzer;
 import org.jacoco.core.internal.flow.MethodProbesAdapter;
@@ -34,7 +35,7 @@ public class MethodAnalyzerTest implements IProbeIdGenerator {
 
 	private MethodNode method;
 
-	private MethodCoverageImpl result;
+	private IMethodCoverage result;
 
 	@Before
 	public void setup() {

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/ClassAnalyzer.java
Patch:
@@ -11,6 +11,7 @@
  *******************************************************************************/
 package org.jacoco.core.internal.analysis;
 
+import org.jacoco.core.analysis.IMethodCoverage;
 import org.jacoco.core.internal.flow.IClassProbesVisitor;
 import org.jacoco.core.internal.flow.IMethodProbesVisitor;
 import org.objectweb.asm.AnnotationVisitor;
@@ -82,7 +83,7 @@ public IMethodProbesVisitor visitMethod(final int access,
 			@Override
 			public void visitEnd() {
 				super.visitEnd();
-				final MethodCoverageImpl methodCoverage = getCoverage();
+				final IMethodCoverage methodCoverage = getCoverage();
 				if (methodCoverage.getInstructionCounter().getTotalCount() > 0) {
 					// Only consider methods that actually contain code
 					coverage.addMethod(methodCoverage);

File: org.jacoco.core/src/org/jacoco/core/internal/analysis/MethodAnalyzer.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.List;
 
 import org.jacoco.core.analysis.ICounter;
+import org.jacoco.core.analysis.IMethodCoverage;
 import org.jacoco.core.analysis.ISourceNode;
 import org.jacoco.core.internal.flow.IMethodProbesVisitor;
 import org.jacoco.core.internal.flow.Instruction;
@@ -80,7 +81,7 @@ public MethodAnalyzer(final String name, final String desc,
 	 * 
 	 * @return coverage data for this method
 	 */
-	public MethodCoverageImpl getCoverage() {
+	public IMethodCoverage getCoverage() {
 		return coverage;
 	}
 

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ProbesBeforeSuperConstructorTest.java
Patch:
@@ -32,7 +32,7 @@ protected void run(final Class<?> targetClass) throws Exception {
 	@Test
 	public void testCoverageResult() {
 
-		assertLine("super", ICounter.PARTLY_COVERED, 1, 1);
+		assertLine("super", ICounter.PARTLY_COVERED, 3, 1);
 
 	}
 

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/targets/Target10.java
Patch:
@@ -23,7 +23,7 @@
 public class Target10 extends SuperClass {
 
 	public Target10() {
-		super(t() ? t() : f()); // $line-super$
+		super(t() || f()); // $line-super$
 	}
 
 	public static void main(String[] args) {

File: org.jacoco.ant/src/org/jacoco/ant/CoverageTask.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.tools.ant.UnknownElement;
 
 /**
- * Container task to run Java/Junit tasks with the JaCoCo agent jar. Coverage
+ * Container task to run Java/JUnit tasks with the JaCoCo agent jar. Coverage
  * will only be applied if all of the following are true:
  * <ul>
  * <li>Exactly one sub task may be present</li>
@@ -155,7 +155,7 @@ private interface TaskEnhancer {
 		/**
 		 * @param taskname
 		 *            Task type to enhance
-		 * @return <code>true</code> iff this enhancer is capable of enhacing
+		 * @return <code>true</code> if this enhancer is capable of enhancing
 		 *         the requested task type
 		 */
 		public boolean supportsTask(String taskname);

File: org.jacoco.report.test/src/org/jacoco/report/internal/html/SourceFilePageTest.java
Patch:
@@ -97,8 +97,8 @@ public void teardown() {
 		output.assertAllClosed();
 	}
 
-	@Test(expected = IllegalStateException.class)
-	public void testVisitChild() {
+	@Test(expected = AssertionError.class)
+	public void testVisitChildNegative() {
 		final SourceFileCoverageImpl node = new SourceFileCoverageImpl(
 				"SourceFilePageTest.java", "org/jacoco/report/html");
 		final SourceFilePage page = new SourceFilePage(node, null, root,

File: org.jacoco.report/src/org/jacoco/report/csv/CSVGroupHandler.java
Patch:
@@ -44,8 +44,7 @@ public IReportVisitor visitChild(final ICoverageNode node)
 		case BUNDLE:
 			return new CSVGroupHandler(writer, groupName + "/" + node.getName());
 		}
-		throw new IllegalStateException(format("Unexpected child node %s.",
-				type));
+		throw new AssertionError(format("Unexpected child node %s.", type));
 	}
 
 	public void visitEnd(final ISourceFileLocator sourceFileLocator)

File: org.jacoco.report/src/org/jacoco/report/csv/CSVPackageHandler.java
Patch:
@@ -50,8 +50,7 @@ public IReportVisitor visitChild(final ICoverageNode node)
 		case SOURCEFILE:
 			return IReportVisitor.NOP;
 		}
-		throw new IllegalStateException(format("Unexpected child node %s.",
-				type));
+		throw new AssertionError(format("Unexpected child node %s.", type));
 	}
 
 	public void visitEnd(final ISourceFileLocator sourceFileLocator) {

File: org.jacoco.report/src/org/jacoco/report/internal/html/PackagePage.java
Patch:
@@ -63,7 +63,7 @@ public IReportVisitor visitChild(final ICoverageNode node) {
 			classes.add(classPage);
 			return classPage;
 		}
-		throw new IllegalStateException("Unexpected element type " + type);
+		throw new AssertionError("Unexpected element type " + type);
 	}
 
 	@Override

File: org.jacoco.report/src/org/jacoco/report/internal/html/SourceFilePage.java
Patch:
@@ -51,7 +51,7 @@ public SourceFilePage(final ISourceFileCoverage sourceFileNode,
 	}
 
 	public IReportVisitor visitChild(final ICoverageNode node) {
-		throw new IllegalStateException("Source don't have child nodes.");
+		throw new AssertionError("Source don't have child nodes.");
 	}
 
 	@Override

File: org.jacoco.report/src/org/jacoco/report/internal/html/table/LabelColumn.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class LabelColumn implements IColumnRenderer {
 
-	private static final Comparator<ITableItem> comparator = new Comparator<ITableItem>() {
+	private static final Comparator<ITableItem> COMPARATOR = new Comparator<ITableItem>() {
 		public int compare(final ITableItem i1, final ITableItem i2) {
 			return i1.getLinkLabel().toLowerCase()
 					.compareTo(i2.getLinkLabel().toLowerCase());
@@ -54,7 +54,7 @@ public void item(final HTMLElement td, final ITableItem item,
 	}
 
 	public Comparator<ITableItem> getComparator() {
-		return comparator;
+		return COMPARATOR;
 	}
 
 }

File: org.jacoco.agent/src/org/jacoco/agent/AgentJar.java
Patch:
@@ -25,7 +25,7 @@
  * @author Marc R. Hoffmann
  * @version $qualified.bundle.version$
  */
-public class AgentJar {
+public final class AgentJar {
 
 	/**
 	 * Name of the agent JAR file resource within this bundle.

File: org.jacoco.ant/src/org/jacoco/ant/DumpTask.java
Patch:
@@ -49,7 +49,7 @@ public class DumpTask extends Task {
 	 * @param destfile
 	 *            Location to write execution data to
 	 */
-	public void setDestFile(final File destfile) {
+	public void setDestfile(final File destfile) {
 		this.destfile = destfile;
 	}
 

File: org.jacoco.core/src/org/jacoco/core/JaCoCo.java
Patch:
@@ -21,7 +21,7 @@
  * @author Marc R. Hoffmann
  * @version $qualified.bundle.version$
  */
-public class JaCoCo {
+public final class JaCoCo {
 
 	/** Qualified build version of the JaCoCo core library. */
 	public static final String VERSION;

File: org.jacoco.core/src/org/jacoco/core/instr/InstrSupport.java
Patch:
@@ -84,7 +84,7 @@ public static void push(final MethodVisitor mv, final int value) {
 		} else if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {
 			mv.visitIntInsn(Opcodes.SIPUSH, value);
 		} else {
-			mv.visitLdcInsn(new Integer(value));
+			mv.visitLdcInsn(Integer.valueOf(value));
 		}
 	}
 

File: org.jacoco.report/src/org/jacoco/report/csv/ClassRowWriter.java
Patch:
@@ -27,7 +27,7 @@
  */
 class ClassRowWriter {
 
-	private static CounterEntity[] COUNTERS = { CounterEntity.METHOD,
+	private static final CounterEntity[] COUNTERS = { CounterEntity.METHOD,
 			CounterEntity.LINE, CounterEntity.INSTRUCTION, CounterEntity.BRANCH };
 
 	private final DelimitedWriter writer;

File: org.jacoco.report/src/org/jacoco/report/internal/html/resources/Styles.java
Patch:
@@ -17,7 +17,7 @@
  * @author Marc R. Hoffmann
  * @version $qualified.bundle.version$
  */
-public class Styles {
+public final class Styles {
 
 	/** Breadcrumb bar */
 	public static final String BREADCRUMB = "breadcrumb";

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/JacocoAgent.java
Patch:
@@ -21,9 +21,9 @@
 import org.jacoco.agent.rt.controller.TcpClientController;
 import org.jacoco.agent.rt.controller.TcpServerController;
 import org.jacoco.core.runtime.AgentOptions;
+import org.jacoco.core.runtime.AgentOptions.OutputMode;
 import org.jacoco.core.runtime.IRuntime;
 import org.jacoco.core.runtime.ModifiedSystemClassRuntime;
-import org.jacoco.core.runtime.AgentOptions.OutputMode;
 
 /**
  * The agent which is referred as the <code>Premain-Class</code>.
@@ -120,7 +120,7 @@ private String createSessionId() {
 	 */
 	protected IRuntime createRuntime(final Instrumentation inst)
 			throws Exception {
-		return ModifiedSystemClassRuntime.createFor(inst, "java/sql/Types");
+		return ModifiedSystemClassRuntime.createFor(inst, "java/util/UUID");
 	}
 
 	/**

File: org.jacoco.core/src/org/jacoco/core/internal/flow/MethodProbesAdapter.java
Patch:
@@ -37,7 +37,7 @@ public MethodProbesAdapter(final IMethodProbesVisitor probesVisitor,
 
 	@Override
 	public void visitLabel(final Label label) {
-		if (LabelsInfo.isMultiTarget(label) && LabelsInfo.isSuccessor(label)) {
+		if (LabelInfo.isMultiTarget(label) && LabelInfo.isSuccessor(label)) {
 			probesVisitor.visitProbe(idGenerator.nextId());
 		}
 		probesVisitor.visitLabel(label);
@@ -63,7 +63,7 @@ public void visitInsn(final int opcode) {
 
 	@Override
 	public void visitJumpInsn(final int opcode, final Label label) {
-		if (LabelsInfo.isMultiTarget(label)) {
+		if (LabelInfo.isMultiTarget(label)) {
 			probesVisitor.visitJumpInsnWithProbe(opcode, label,
 					idGenerator.nextId());
 		} else {

File: org.jacoco.examples/ant/src/org/jacoco/examples/parser/ExpressionParser.java
Patch:
@@ -10,7 +10,7 @@
  *    
  * $Id: $
  *******************************************************************************/
-package org.jacoco.example.parser;
+package org.jacoco.examples.parser;
 
 import static java.io.StreamTokenizer.TT_EOF;
 import static java.io.StreamTokenizer.TT_NUMBER;

File: org.jacoco.examples/ant/src/org/jacoco/examples/parser/ExpressionParserTest.java
Patch:
@@ -10,7 +10,7 @@
  *    
  * $Id: $
  *******************************************************************************/
-package org.jacoco.example.parser;
+package org.jacoco.examples.parser;
 
 import java.io.IOException;
 

File: org.jacoco.agent.rt.test/src/org/jacoco/agent/rt/controller/TcpClientControllerTest.java
Patch:
@@ -87,6 +87,8 @@ public void testRemoteClose() throws Exception {
 	@Test
 	public void testInvalidCommand() throws Exception {
 		remoteWriter.visitSessionInfo(new SessionInfo("info", 1, 2));
+		while (remoteReader.read()) {
+		}
 		logger.assertException(IOException.class, "No session info visitor.");
 	}
 

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/controller/TcpClientController.java
Patch:
@@ -37,6 +37,7 @@ public void startup(final AgentOptions options, final IRuntime runtime)
 			throws IOException {
 		final Socket socket = createSocket(options);
 		connection = new TcpConnection(socket, runtime);
+		connection.init();
 		final Thread worker = new Thread(new Runnable() {
 			public void run() {
 				try {

File: org.jacoco.core/src/org/jacoco/core/analysis/CoverageNodeImpl.java
Patch:
@@ -12,8 +12,6 @@
  *******************************************************************************/
 package org.jacoco.core.analysis;
 
-import static java.lang.String.format;
-
 import java.util.Collection;
 
 /**
@@ -143,7 +141,7 @@ public ICounter getCounter(final CounterEntity entity) {
 		case CLASS:
 			return getClassCounter();
 		}
-		throw new IllegalArgumentException(format("Unknown entity %s.", entity));
+		throw new AssertionError(entity);
 	}
 
 	public ILines getLines() {

File: org.jacoco.core/src/org/jacoco/core/analysis/ICoverageNode.java
Patch:
@@ -44,9 +44,6 @@ public enum ElementType {
 		/** Logical Group of Bundles */
 		GROUP,
 
-		/** Coverage Session */
-		SESSION
-
 	}
 
 	/**

File: org.jacoco.report.test/src/org/jacoco/report/html/resources/ResourcesTest.java
Patch:
@@ -57,14 +57,14 @@ public void testCopyResources() throws IOException {
 		output.assertFile(".resources/report.css");
 		output.assertFile(".resources/prettify.css");
 		output.assertFile(".resources/prettify.js");
-		output.assertFile(".resources/session.gif");
+		output.assertFile(".resources/report.gif");
 		output.assertFile(".resources/group.gif");
 		output.assertFile(".resources/bundle.gif");
 		output.assertFile(".resources/package.gif");
 		output.assertFile(".resources/source.gif");
 		output.assertFile(".resources/class.gif");
 		output.assertFile(".resources/method.gif");
-		output.assertFile(".resources/sessions.gif");
+		output.assertFile(".resources/report.gif");
 		output.assertFile(".resources/greenbar.gif");
 		output.assertFile(".resources/redbar.gif");
 	}

File: org.jacoco.report.test/src/org/jacoco/report/xml/XMLFormatterTest.java
Patch:
@@ -61,8 +61,8 @@ public void testSessionInfo() throws Exception {
 		infos.add(new SessionInfo("session-1", 12345, 67890));
 		infos.add(new SessionInfo("session-2", 1, 2));
 		infos.add(new SessionInfo("session-3", 1, 2));
-		ICoverageNode node = new CoverageNodeImpl(ElementType.SESSION,
-				"Session", false);
+		ICoverageNode node = new CoverageNodeImpl(ElementType.GROUP, "Sample",
+				false);
 		formatter.createReportVisitor(node, infos).visitEnd(null);
 		assertPathMatches("session-1", "/report/sessioninfo[1]/@id");
 		assertPathMatches("12345", "/report/sessioninfo[1]/@start");

File: org.jacoco.report/src/org/jacoco/report/IReportFormatter.java
Patch:
@@ -29,16 +29,16 @@ public interface IReportFormatter {
 	/**
 	 * Creates a visitor for root of a coverage data tree.
 	 * 
-	 * @param session
-	 *            session root node
+	 * @param root
+	 *            report root node
 	 * @param sessionInfos
 	 *            list of chronological ordered {@link SessionInfo} objects
 	 *            where execution data has been collected for this report.
 	 * 
 	 * @return visitor for the root node
 	 * @throws IOException
 	 */
-	public IReportVisitor createReportVisitor(ICoverageNode session,
+	public IReportVisitor createReportVisitor(ICoverageNode root,
 			List<SessionInfo> sessionInfos) throws IOException;
 
 }

File: org.jacoco.report/src/org/jacoco/report/MultiFormatter.java
Patch:
@@ -41,11 +41,11 @@ public void add(final IReportFormatter formatter) {
 		formatters.add(formatter);
 	}
 
-	public IReportVisitor createReportVisitor(final ICoverageNode session,
+	public IReportVisitor createReportVisitor(final ICoverageNode root,
 			final List<SessionInfo> sessionInfos) throws IOException {
 		final List<IReportVisitor> visitors = new ArrayList<IReportVisitor>();
 		for (final IReportFormatter f : formatters) {
-			visitors.add(f.createReportVisitor(session, sessionInfos));
+			visitors.add(f.createReportVisitor(root, sessionInfos));
 		}
 		return new MultiVisitor(visitors);
 	}

File: org.jacoco.report/src/org/jacoco/report/csv/CsvFormatter.java
Patch:
@@ -40,7 +40,7 @@ public class CsvFormatter implements IReportFormatter {
 
 	private String outputEncoding = "UTF-8";
 
-	public IReportVisitor createReportVisitor(final ICoverageNode session,
+	public IReportVisitor createReportVisitor(final ICoverageNode root,
 			final List<SessionInfo> sessionInfos) throws IOException {
 
 		if (output == null) {
@@ -50,7 +50,7 @@ public IReportVisitor createReportVisitor(final ICoverageNode session,
 				new OutputStreamWriter(output.createFile(), outputEncoding));
 		final ClassRowWriter rowWriter = new ClassRowWriter(writer,
 				languageNames);
-		return new CsvGroupHandler(rowWriter, session.getName()) {
+		return new CsvGroupHandler(rowWriter, root.getName()) {
 			@Override
 			public void visitEnd(final ISourceFileLocator sourceFileLocator)
 					throws IOException {

File: org.jacoco.report/src/org/jacoco/report/html/ReportPage.java
Patch:
@@ -92,7 +92,7 @@ protected void head(final HTMLElement head) throws IOException {
 		head.link("stylesheet", context.getResources().getLink(folder,
 				Resources.STYLESHEET), "text/css");
 		head.link("shortcut icon", context.getResources().getLink(folder,
-				"session.gif"), "image/gif");
+				"report.gif"), "image/gif");
 		head.title().text(getLabel());
 	}
 

File: org.jacoco.report/src/org/jacoco/report/html/resources/Resources.java
Patch:
@@ -77,8 +77,6 @@ public String getLink(final ReportOutputFolder base, final String name) {
 	 */
 	public static String getElementStyle(final ElementType type) {
 		switch (type) {
-		case SESSION:
-			return "el_session";
 		case GROUP:
 			return "el_group";
 		case BUNDLE:
@@ -103,7 +101,7 @@ public static String getElementStyle(final ElementType type) {
 	 */
 	public void copyResources() throws IOException {
 		copyResource(STYLESHEET);
-		copyResource("session.gif");
+		copyResource("report.gif");
 		copyResource("group.gif");
 		copyResource("bundle.gif");
 		copyResource("package.gif");

File: org.jacoco.report/src/org/jacoco/report/xml/XMLFormatter.java
Patch:
@@ -37,11 +37,11 @@ public class XMLFormatter implements IReportFormatter {
 
 	private String outputEncoding = "UTF-8";
 
-	public IReportVisitor createReportVisitor(final ICoverageNode session,
+	public IReportVisitor createReportVisitor(final ICoverageNode rootNode,
 			final List<SessionInfo> sessionInfos) throws IOException {
 		final XMLElement root = new XMLDocument("report", PUBID, SYSTEM,
 				outputEncoding, true, output.createFile());
-		return new XMLReportNodeHandler(root, session) {
+		return new XMLReportNodeHandler(root, rootNode) {
 			@Override
 			protected void insertElementsBefore(final XMLElement element)
 					throws IOException {

File: org.jacoco.ant/src/org/jacoco/ant/AgentTask.java
Patch:
@@ -18,7 +18,6 @@
  * Ant task that will unpack the coverage agent jar and generate the JVM options
  * required to use it
  * 
- * @ant.task category="java"
  * @author Brock Janiczak
  * @version $Revision: $
  */
@@ -29,7 +28,6 @@ public class AgentTask extends AbstractCoverageTask {
 	/**
 	 * Sets the name of the property to hold the agent JVM options
 	 * 
-	 * @ant.required
 	 * @param property
 	 *            Name of the property to be populated
 	 */

File: org.jacoco.ant/src/org/jacoco/ant/CoverageTask.java
Patch:
@@ -33,7 +33,6 @@
  * <li>Task must be using a forked VM (so vm args can be passed)</li>
  * </ul>
  * 
- * @ant.task category="java"
  * @author Brock Janiczak
  * @version $Revision: $
  */

File: org.jacoco.report/src/org/jacoco/report/xml/XMLReportNodeHandler.java
Patch:
@@ -32,7 +32,7 @@
  */
 class XMLReportNodeHandler implements IReportVisitor {
 
-	private final XMLElement element;
+	protected final XMLElement element;
 
 	private final ICoverageNode node;
 
@@ -74,7 +74,7 @@ public IReportVisitor visitChild(final ICoverageNode node)
 				@Override
 				public void visitEnd(final ISourceFileLocator sourceFileLocator)
 						throws IOException {
-					writeLines(node.getLines(), element);
+					writeLines(node.getLines(), this.element);
 					super.visitEnd(sourceFileLocator);
 				}
 
@@ -103,7 +103,7 @@ private void createCounterElement(final CounterEntity counterEntity)
 		}
 	}
 
-	private void writeLines(final ILines lines, final XMLElement parent)
+	private static void writeLines(final ILines lines, final XMLElement parent)
 			throws IOException {
 		final int last = lines.getLastLine();
 		for (int nr = lines.getFirstLine(); nr <= last; nr++) {

File: org.jacoco.core/src/org/jacoco/core/data/ExecutionDataStore.java
Patch:
@@ -100,8 +100,8 @@ public boolean[] getData(final long classid) {
 	}
 
 	/**
-	 * Returns the coverage date for the class with the given identifier. If
-	 * there is not data available under the given id a new entry is created.
+	 * Returns the coverage data for the class with the given identifier. If
+	 * there is no data available under the given id a new entry is created.
 	 * 
 	 * @param classid
 	 *            class identifier

File: org.jacoco.build/src/org/jacoco/build/tools/ant/DeepClassFileSet.java
Patch:
@@ -173,7 +173,7 @@ public String map(final String typeName) {
 			final ClassReader reader = new ClassReader(stream);
 			stream.close();
 			reader.accept(new RemappingClassAdapter(new EmptyVisitor(),
-					remapper), 0);
+					remapper), ClassReader.EXPAND_FRAMES);
 		} catch (final IOException e) {
 			throw new BuildException(e);
 		}

File: org.jacoco.build/src/org/jacoco/build/tools/ant/RenamedClassFileSet.java
Patch:
@@ -166,7 +166,8 @@ public String map(final String typeName) {
 		final ClassReader reader = new ClassReader(stream);
 		stream.close();
 		final ClassWriter writer = new ClassWriter(reader, 0);
-		reader.accept(new RemappingClassAdapter(writer, remapper), 0);
+		reader.accept(new RemappingClassAdapter(writer, remapper),
+				ClassReader.EXPAND_FRAMES);
 		return new ByteArrayInputStream(writer.toByteArray());
 	}
 

File: org.jacoco.core.test/src/org/jacoco/core/instr/ContentTypeDetectorTest.java
Patch:
@@ -58,7 +58,6 @@ public void testZipFile() throws IOException {
 		zip.write("Hello Zip!".getBytes());
 		zip.close();
 		initData(buffer.toByteArray());
-		System.out.println(Integer.toHexString(detector.getHeader()));
 		assertEquals(ContentTypeDetector.ZIPFILE, detector.getHeader());
 		assertContent();
 	}

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ValidationTestBase.java
Patch:
@@ -89,7 +89,7 @@ private void analyze(final ClassReader reader,
 			final ExecutionDataStore store) {
 		final CoverageBuilder builder = new CoverageBuilder(store);
 		final Analyzer analyzer = new Analyzer(builder);
-		analyzer.analyze(reader);
+		analyzer.analyzeClass(reader);
 		final Collection<ClassCoverage> classes = builder.getClasses();
 		assertEquals(1, classes.size(), 0.0);
 		classCoverage = classes.iterator().next();

File: org.jacoco.examples/src/org/jacoco/examples/CoreTutorial.java
Patch:
@@ -151,7 +151,7 @@ private void runTutorial() throws Exception {
 		final CoverageBuilder coverageBuilder = new CoverageBuilder(
 				executionData);
 		final Analyzer analyzer = new Analyzer(coverageBuilder);
-		analyzer.analyze(getTargetClass(targetName));
+		analyzer.analyzeClass(getTargetClass(targetName));
 
 		// Let's dump some metrics and line coverage information:
 		for (final ClassCoverage cc : coverageBuilder.getClasses()) {

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/CoverageTransformer.java
Patch:
@@ -64,6 +64,8 @@ public byte[] transform(ClassLoader loader, String classname,
 			final IllegalClassFormatException ex = new IllegalClassFormatException(
 					format(msg, classname, id));
 			ex.initCause(t);
+			// Force some output, as the exception is ignored by the JVM:
+			ex.printStackTrace();
 			throw ex;
 		}
 	}

File: org.jacoco.report/src/org/jacoco/report/JavaNames.java
Patch:
@@ -52,7 +52,7 @@ public String getClassName(final String vmname, final String vmsignature,
 			} else {
 				vmsupertype = null;
 			}
-			// Append Eclipse style label, e.g. "Foo.1: new Bar() {...}"
+			// Append Eclipse style label, e.g. "Foo.new Bar() {...}"
 			if (vmsupertype != null) {
 				final StringBuilder builder = new StringBuilder();
 				final String vmenclosing = vmname.substring(0, vmname

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/JacocoAgent.java
Patch:
@@ -81,7 +81,7 @@ public void init(final Instrumentation inst) throws Exception {
 	 */
 	protected IRuntime createRuntime(final Instrumentation inst)
 			throws Exception {
-		return ModifiedSystemClassRuntime.createFor(inst, "java/lang/Void");
+		return ModifiedSystemClassRuntime.createFor(inst, "java/sql/Types");
 	}
 
 	/**

File: org.jacoco.core.test/src/org/jacoco/core/runtime/RuntimeTestBase.java
Patch:
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2009 Mountainminds GmbH & Co. KG and others
+ * Copyright (c) 2009, 2010 Mountainminds GmbH & Co. KG and others
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -47,7 +47,7 @@ public abstract class RuntimeTestBase {
 	abstract IRuntime createRuntime();
 
 	@Before
-	public void setup() {
+	public void setup() throws Exception {
 		runtime = createRuntime();
 		runtime.startup();
 		storage = new TestStorage();

File: org.jacoco.core.test/src/org/jacoco/core/test/InstrumentationScenariosTest.java
Patch:
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2009 Mountainminds GmbH & Co. KG and others
+ * Copyright (c) 2009, 2010 Mountainminds GmbH & Co. KG and others
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -44,7 +44,7 @@ public class InstrumentationScenariosTest {
 	private IRuntime runtime;
 
 	@Before
-	public void setup() {
+	public void setup() throws Exception {
 		runtime = new LoggerRuntime();
 		runtime.startup();
 	}

File: org.jacoco.core.test/src/org/jacoco/core/test/validation/ValidationTestBase.java
Patch:
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2009 Mountainminds GmbH & Co. KG and others
+ * Copyright (c) 2009, 2010 Mountainminds GmbH & Co. KG and others
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -71,7 +71,7 @@ public void setup() throws Exception {
 	}
 
 	private ExecutionDataStore execute(final ClassReader reader)
-			throws InstantiationException, IllegalAccessException {
+			throws Exception {
 		IRuntime runtime = new SystemPropertiesRuntime();
 		runtime.startup();
 		final byte[] bytes = new Instrumenter(runtime).instrument(reader);

File: org.jacoco.ant/src/org/jacoco/ant/AgentTask.java
Patch:
@@ -57,6 +57,8 @@ public void execute() throws BuildException {
 		if (property == null || property.length() == 0) {
 			throw new BuildException("Property is mandatory");
 		}
-		getProject().setNewProperty(property, getLaunchingArgument());
+		final String jvmArg = isEnabled() ? getLaunchingArgument() : "";
+
+		getProject().setNewProperty(property, jvmArg);
 	}
 }

File: org.jacoco.agent.rt/src/org/jacoco/agent/rt/JacocoAgent.java
Patch:
@@ -92,13 +92,13 @@ public void shutdown() {
 	 */
 	protected void writeExecutionData() {
 		try {
-			File execFile = new File(options.getFile()).getAbsoluteFile();
+			File execFile = new File(options.getDestfile()).getAbsoluteFile();
 			File folder = execFile.getParentFile();
 			if (folder != null) {
 				folder.mkdirs();
 			}
 			OutputStream output = new BufferedOutputStream(
-					new FileOutputStream(execFile, options.getMerge()));
+					new FileOutputStream(execFile, options.getAppend()));
 			ExecutionDataWriter writer = new ExecutionDataWriter(output);
 			writer.writeHeader();
 			runtime.collect(writer, false);

File: org.jacoco.report.test/src/org/jacoco/report/JavaNamesTest.java
Patch:
@@ -96,7 +96,7 @@ public void testGetMethodName6() {
 	@Test
 	public void testGetMethodName7() {
 		assertEquals("static {...}", names.getMethodName(
-				"com/example/SomeClass", "<cinit>", "()V"));
+				"com/example/SomeClass", "<clinit>", "()V"));
 	}
 
 	@Test

File: org.jacoco.report/src/org/jacoco/report/JavaNames.java
Patch:
@@ -37,7 +37,7 @@ public String getClassName(final String vmname) {
 
 	public String getMethodName(final String vmclassname,
 			final String vmmethodname, final String vmdesc) {
-		if (vmmethodname.equals("<cinit>")) {
+		if (vmmethodname.equals("<clinit>")) {
 			return "static {...}";
 		}
 		final Type[] arguments = Type.getArgumentTypes(vmdesc);

File: org.jacoco.report/src/org/jacoco/report/csv/ClassColumn.java
Patch:
@@ -53,7 +53,7 @@ public class ClassColumn implements IReportVisitor, ICsvColumn {
 	 * @param parent
 	 *            parent element
 	 * @param node
-	 *            {@link ElementType#Class} coverage node
+	 *            {@link ElementType#CLASS} coverage node
 	 */
 	public ClassColumn(final CsvReportFile reportFile, final ICsvColumn parent,
 			final ICoverageNode node) {

File: org.jacoco.report/src/org/jacoco/report/csv/GroupColumn.java
Patch:
@@ -35,10 +35,8 @@ public class GroupColumn implements IReportVisitor, ICsvColumn {
 	 * 
 	 * @param reportFile
 	 *            CSV Report context
-	 * @param parent
-	 *            parent element
 	 * @param node
-	 *            {@link ElementType#Group} coverage node
+	 *            {@link ElementType#GROUP} coverage node
 	 */
 	public GroupColumn(final CsvReportFile reportFile, final ICoverageNode node) {
 		this.reportFile = reportFile;

File: org.jacoco.core/src/org/jacoco/core/runtime/WildcardMatcher.java
Patch:
@@ -47,7 +47,7 @@ public WildcardMatcher(final String expression) {
 		pattern = Pattern.compile(regex.toString());
 	}
 
-	private static StringBuilder toRegex(final String expression) {
+	private static CharSequence toRegex(final String expression) {
 		final StringBuilder regex = new StringBuilder(expression.length() * 2);
 		final StringTokenizer st = new StringTokenizer(expression, "?*", true);
 		while (st.hasMoreTokens()) {

File: org.jacoco.ant/src/org/jacoco/ant/AgentTask.java
Patch:
@@ -18,6 +18,7 @@
  * Ant task that will unpack the coverage agent jar and generate the JVM options
  * required to use it
  * 
+ * @ant.task category="java"
  * @author Brock Janiczak
  * @version $Revision: $
  */
@@ -28,6 +29,7 @@ public class AgentTask extends AbstractCoverageTask {
 	/**
 	 * Sets the name of the property to hold the agent JVM options
 	 * 
+	 * @ant.required
 	 * @param property
 	 *            Name of the property to be populated
 	 */

File: org.jacoco.report.test/src/org/jacoco/report/JavaNamesTest.java
Patch:
@@ -77,7 +77,7 @@ public void testGetMethodName3() {
 
 	@Test
 	public void testGetMethodName4() {
-		assertEquals("add(int,Object)", names.getMethodName("java/util/List",
+		assertEquals("add(int, Object)", names.getMethodName("java/util/List",
 				"add", "(ILjava/lang/Object;)V"));
 	}
 

File: org.jacoco.report/src/org/jacoco/report/JavaNames.java
Patch:
@@ -51,7 +51,7 @@ public String getMethodName(final String vmclassname,
 		boolean colon = false;
 		for (final Type arg : arguments) {
 			if (colon) {
-				result.append(',');
+				result.append(", ");
 			}
 			result.append(getShortTypeName(arg));
 			colon = true;

File: org.jacoco.report.test/src/org/jacoco/report/MemoryReportOutput.java
Patch:
@@ -41,7 +41,7 @@ public OutputStream createFile(String path) throws IOException {
 	}
 
 	public void assertFile(String path) {
-		assertNotNull(files.get(path));
+		assertNotNull("Missing " + path, files.get(path));
 	}
 
 	public void assertSingleFile(String path) {

File: org.jacoco.report.test/src/org/jacoco/report/html/resources/ResourcesTest.java
Patch:
@@ -55,6 +55,8 @@ public void testGetLink() {
 	public void testCopyResources() throws IOException {
 		resources.copyResources();
 		output.assertFile(".resources/report.css");
+		output.assertFile(".resources/session.gif");
+		output.assertFile(".resources/group.gif");
 		output.assertFile(".resources/bundle.gif");
 		output.assertFile(".resources/package.gif");
 		output.assertFile(".resources/source.gif");

File: org.jacoco.core/src/org/jacoco/core/analysis/ClassCoverage.java
Patch:
@@ -60,7 +60,7 @@ public String getPackageName() {
 	/**
 	 * Returns the optional name of the corresponding source file.
 	 * 
-	 * @return
+	 * @return name of the corresponding source file
 	 */
 	public String getSourceFileName() {
 		return sourceFileName;

File: org.jacoco.core.test/src/org/jacoco/core/analysis/MethodCoverageDataTest.java
Patch:
@@ -39,7 +39,7 @@ public void testProperties() {
 
 	@Test
 	public void testEmptyMethod() {
-		ICoverageDataSummary data = new MethodNode("sample", "()V", null);
+		ICoverageDataNode data = new MethodNode("sample", "()V", null);
 		assertEquals(0, data.getInstructionCounter().getTotalCount(), 0.0);
 		assertEquals(0, data.getInstructionCounter().getCoveredCount(), 0.0);
 		assertEquals(0, data.getBlockCounter().getTotalCount(), 0.0);

File: org.jacoco.core.test/src/org/jacoco/core/analysis/SourceFileCoverageDataTest.java
Patch:
@@ -12,6 +12,7 @@
  *******************************************************************************/
 package org.jacoco.core.analysis;
 
+import static org.jacoco.core.analysis.ICoverageDataNode.ElementType.SOURCEFILE;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
@@ -28,8 +29,7 @@ public class SourceFileCoverageDataTest {
 	public void testProperties() {
 		SourceFileNode data = new SourceFileNode("Sample.java",
 				"org/jacoco/examples");
-		assertEquals(ICoverageDataNode.ElementType.SOURCEFILE, data
-				.getElementType());
+		assertEquals(SOURCEFILE, data.getElementType());
 		assertEquals("org/jacoco/examples", data.getPackageName());
 	}
 

