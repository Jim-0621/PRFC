File: solutions/java/src/parkinglot/ParkingLot.java
Patch:
@@ -27,9 +27,11 @@ public void addLevel(Level level) {
     public boolean parkVehicle(Vehicle vehicle) {
         for (Level level : levels) {
             if (level.parkVehicle(vehicle)) {
+                System.out.println("Vehicle parked successfully.");
                 return true;
             }
         }
+        System.out.println("Could not park vehicle.");
         return false;
     }
 

File: solutions/java/src/parkinglot/ParkingSpot.java
Patch:
@@ -8,9 +8,9 @@ public class ParkingSpot {
     private final VehicleType vehicleType;
     private Vehicle parkedVehicle;
 
-    public ParkingSpot(int spotNumber) {
+    public ParkingSpot(int spotNumber, VehicleType vehicleType) {
         this.spotNumber = spotNumber;
-        this.vehicleType = VehicleType.CAR; // Default vehicle type is CAR
+        this.vehicleType = vehicleType;
     }
 
     public synchronized boolean isAvailable() {

File: solutions/java/src/parkinglot/ParkingLot.java
Patch:
@@ -27,9 +27,11 @@ public void addLevel(Level level) {
     public boolean parkVehicle(Vehicle vehicle) {
         for (Level level : levels) {
             if (level.parkVehicle(vehicle)) {
+                System.out.println("Vehicle parked successfully.");
                 return true;
             }
         }
+        System.out.println("Could not park vehicle.");
         return false;
     }
 

File: solutions/java/src/parkinglot/ParkingSpot.java
Patch:
@@ -8,9 +8,9 @@ public class ParkingSpot {
     private final VehicleType vehicleType;
     private Vehicle parkedVehicle;
 
-    public ParkingSpot(int spotNumber) {
+    public ParkingSpot(int spotNumber, VehicleType vehicleType) {
         this.spotNumber = spotNumber;
-        this.vehicleType = VehicleType.CAR; // Default vehicle type is CAR
+        this.vehicleType = vehicleType;
     }
 
     public synchronized boolean isAvailable() {

File: solutions/java/src/carrentalsystem/CarRentalSystemDemo.java
Patch:
@@ -14,14 +14,13 @@ public static void run() {
 
         // Create customers
         Customer customer1 = new Customer("John Doe", "john@example.com", "DL1234");
-        Customer customer2 = new Customer("Jane Smith", "jane@example.com", "DL5678");
 
         // Make reservations
         LocalDate startDate = LocalDate.now();
         LocalDate endDate = startDate.plusDays(3);
         List<Car> availableCars = rentalSystem.searchCars("Toyota", "Camry", startDate, endDate);
         if (!availableCars.isEmpty()) {
-            Car selectedCar = availableCars.get(0);
+            Car selectedCar = availableCars.getFirst();
             Reservation reservation = rentalSystem.makeReservation(customer1, selectedCar, startDate, endDate);
             if (reservation != null) {
                 boolean paymentSuccess = rentalSystem.processPayment(reservation);

File: solutions/java/src/chessgame/ChessGameDemo.java
Patch:
@@ -2,7 +2,7 @@
 
 public class ChessGameDemo {
     public static void run() {
-        Game game = new Game();
-        game.start();
+        ChessGame chessGame = new ChessGame();
+        chessGame.start();
     }
 }

File: solutions/java/src/chessgame/Player.java
Patch:
@@ -26,7 +26,7 @@ public void makeMove(Board board, Move move) {
             piece.setRow(destRow);
             piece.setCol(destCol);
         } else {
-            throw new IllegalArgumentException("Invalid move!");
+            throw new InvalidMoveException("Invalid move!");
         }
     }
 }

File: solutions/java/src/concertbookingsystem/Booking.java
Patch:
@@ -35,6 +35,7 @@ public void cancelBooking() {
         if (status == BookingStatus.CONFIRMED) {
             status = BookingStatus.CANCELLED;
             seats.forEach(Seat::release);
+            System.out.printf("Booking %s cancelled\n", id);
             // Send booking cancellation notification to the user
             // ...
         }

File: solutions/java/src/concertbookingsystem/ConcertTicketBookingSystem.java
Patch:
@@ -62,6 +62,8 @@ public Booking bookTickets(User user, Concert concert, List<Seat> seats) {
             // Confirm booking
             booking.confirmBooking();
 
+            System.out.println("Booking " + booking.getId() + " - " + booking.getSeats().size() + " seats booked");
+
             return booking;
         }
     }

File: solutions/java/src/fooddeliveryservice/FoodDeliveryService.java
Patch:
@@ -65,6 +65,7 @@ public Order placeOrder(String customerId, String restaurantId, List<OrderItem>
             }
             orders.put(order.getId(), order);
             notifyRestaurant(order);
+            System.out.println("Order placed: " + order.getId());
             return order;
         }
         return null;
@@ -87,6 +88,7 @@ public void cancelOrder(String orderId) {
             order.setStatus(OrderStatus.CANCELLED);
             notifyCustomer(order);
             notifyRestaurant(order);
+            System.out.println("Order cancelled: " + order.getId());
         }
     }
 

File: solutions/java/src/fooddeliveryservice/FoodDeliveryServiceDemo.java
Patch:
@@ -41,16 +41,13 @@ public static void run() {
         orderItems.add(new OrderItem(restaurant1Menu.get(0), 2));
         orderItems.add(new OrderItem(restaurant1Menu.get(1), 1));
         Order order = deliveryService.placeOrder(customer1.getId(), restaurant1.getId(), orderItems);
-        System.out.println("Order placed: " + order.getId());
 
         // Update order status
         deliveryService.updateOrderStatus(order.getId(), OrderStatus.CONFIRMED);
         System.out.println("Order status updated: " + order.getStatus());
 
         // Cancel an order
         Order order2 = deliveryService.placeOrder(customer2.getId(), restaurant2.getId(), List.of(new OrderItem(restaurant2Menu.get(0), 1)));
-        System.out.println("Order placed: " + order2.getId());
         deliveryService.cancelOrder(order2.getId());
-        System.out.println("Order cancelled: " + order2.getId());
     }
 }

File: solutions/java/src/linkedin/LinkedInService.java
Patch:
@@ -65,7 +65,7 @@ public void acceptConnectionRequest(User user, User connectionUser) {
     public List<User> searchUsers(String keyword) {
         List<User> results = new ArrayList<>();
         for (User user : users.values()) {
-            if (user.getName().contains(keyword) || user.getProfile().getHeadline().contains(keyword)) {
+            if (user.getName().contains(keyword)) {
                 results.add(user);
             }
         }

File: solutions/java/src/movieticketbookingsystem/MovieTicketBookingDemo.java
Patch:
@@ -42,7 +42,8 @@ public static void run() {
         }
 
         // Cancel booking
-        // bookingSystem.cancelBooking(booking.getId());
+        bookingSystem.cancelBooking(booking.getId());
+        System.out.println("Booking canceled. Booking ID: " + booking.getId());
     }
 
     private static Map<String, Seat> createSeats(int rows, int columns) {

File: solutions/java/src/onlinestockbrokeragesystem/StockBroker.java
Patch:
@@ -64,6 +64,6 @@ private void processOrders() {
 
     private String generateAccountId() {
         int accountId = accountIdCounter.getAndIncrement();
-        return "A" + String.format("%09d", accountId);
+        return "A" + String.format("%03d", accountId);
     }
 }

