File: demo/src/main/java/com/lzy/demo/okdownload/DesActivity.java
Patch:
@@ -87,7 +87,7 @@ protected void onCreate(Bundle savedInstanceState) {
 //        Progress progress = DownloadManager.getInstance().get(apk.getUrl());
 //        if (progress != null) {
 //            task = OkDownload.restore(progress)//
-//                    .register(new DesListener("DesActivity1"))//
+//                    .register(new DesListener("DesListener"))//
 //                    .register(new LogDownloadListener());
 //        }
 

File: demo/src/main/java/com/lzy/demo/okgo/TestActivity.java
Patch:
@@ -99,7 +99,7 @@ public void run() {
 
     @OnClick(R.id.btn3)
     public void btn3(View view) {
-        OkGo.<String>get(Urls.URL_METHOD)//
+        OkGo.<String>get("asdfasf")//
                 .tag(this)//
                 .headers(HttpHeaders.HEAD_KEY_USER_AGENT, "abcd")//
                 .execute(new StringCallback() {

File: okgo/src/main/java/com/lzy/okgo/cache/policy/DefaultCachePolicy.java
Patch:
@@ -116,7 +116,8 @@ public void run() {
                 try {
                     prepareRawCall();
                 } catch (Throwable throwable) {
-                    Response.error(false, rawCall, null, throwable);
+                    Response<T> error = Response.error(false, rawCall, null, throwable);
+                    mCallback.onError(error);
                     return;
                 }
                 requestNetworkAsync();

File: okgo/src/main/java/com/lzy/okgo/cache/policy/FirstCacheRequestPolicy.java
Patch:
@@ -86,7 +86,8 @@ public void run() {
                 try {
                     prepareRawCall();
                 } catch (Throwable throwable) {
-                    Response.error(false, rawCall, null, throwable);
+                    Response<T> error = Response.error(false, rawCall, null, throwable);
+                    mCallback.onError(error);
                     return;
                 }
                 if (cacheEntity != null) {

File: okgo/src/main/java/com/lzy/okgo/cache/policy/NoCachePolicy.java
Patch:
@@ -78,7 +78,8 @@ public void run() {
                 try {
                     prepareRawCall();
                 } catch (Throwable throwable) {
-                    Response.error(false, rawCall, null, throwable);
+                    Response<T> error = Response.error(false, rawCall, null, throwable);
+                    mCallback.onError(error);
                     return;
                 }
                 requestNetworkAsync();

File: okgo/src/main/java/com/lzy/okgo/cache/policy/NoneCacheRequestPolicy.java
Patch:
@@ -85,7 +85,8 @@ public void run() {
                 try {
                     prepareRawCall();
                 } catch (Throwable throwable) {
-                    Response.error(false, rawCall, null, throwable);
+                    Response<T> error = Response.error(false, rawCall, null, throwable);
+                    mCallback.onError(error);
                     return;
                 }
                 if (cacheEntity != null) {

File: okgo/src/main/java/com/lzy/okgo/cache/policy/RequestFailedCachePolicy.java
Patch:
@@ -94,7 +94,8 @@ public void run() {
                 try {
                     prepareRawCall();
                 } catch (Throwable throwable) {
-                    Response.error(false, rawCall, null, throwable);
+                    Response<T> error = Response.error(false, rawCall, null, throwable);
+                    mCallback.onError(error);
                     return;
                 }
                 requestNetworkAsync();

File: okgo/src/main/java/com/lzy/okgo/request/base/Request.java
Patch:
@@ -324,7 +324,7 @@ public void setCallback(Callback<T> callback) {
     public Converter<T> getConverter() {
         // converter 优先级高于 callback
         if (converter == null) converter = callback;
-        HttpUtils.checkNotNull(converter, "converter == null, do you forget call Request#converter(Converter<T>) ?");
+        HttpUtils.checkNotNull(converter, "converter == null, do you forget to call Request#converter(Converter<T>) ?");
         return converter;
     }
 

File: demo/src/main/java/com/lzy/demo/base/BaseDetailActivity.java
Patch:
@@ -196,6 +196,7 @@ protected <T> void handleError() {
 
     protected <T> void handleError(Response<T> response) {
         if (response == null) return;
+        if (response.getException() != null) response.getException().printStackTrace();
         StringBuilder sb;
         Call call = response.getRawCall();
         if (call != null) {

File: okgo/src/main/java/com/lzy/okgo/db/BaseDao.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.locks.ReentrantLock;
+import java.util.concurrent.locks.Lock;
 
 /**
  * ================================================
@@ -39,13 +39,13 @@
 public abstract class BaseDao<T> {
 
     protected static String TAG;
-    protected ReentrantLock lock;
+    protected Lock lock;
     protected SQLiteOpenHelper helper;
     protected SQLiteDatabase database;
 
     public BaseDao(SQLiteOpenHelper helper) {
         TAG = getClass().getSimpleName();
-        lock = new ReentrantLock();
+        lock = DBHelper.lock;
         this.helper = helper;
         this.database = openWriter();
     }

File: okgo/src/main/java/com/lzy/okgo/convert/FileConvert.java
Patch:
@@ -43,9 +43,9 @@ public class FileConvert implements Converter<File> {
 
     public static final String DM_TARGET_FOLDER = File.separator + "download" + File.separator; //下载目标文件夹
 
-    private String folder;                 //目标文件存储的文件夹路径
+    private String folder;                  //目标文件存储的文件夹路径
     private String fileName;                //目标文件存储的文件名
-    private Callback<File> callback;            //下载回调
+    private Callback<File> callback;        //下载回调
 
     public FileConvert() {
         this(null);

File: demo/src/main/java/com/lzy/demo/okdownload/DownloadListActivity.java
Patch:
@@ -84,7 +84,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         initData();
         OkDownload.getInstance().setFolder(Environment.getExternalStorageDirectory().getAbsolutePath() + "/aaa/");
-        OkDownload.getInstance().getThreadPool().setCorePoolSize(1);
+        OkDownload.getInstance().getThreadPool().setCorePoolSize(3);
 
         folder.setText(String.format("下载路径: %s", OkDownload.getInstance().getFolder()));
         recyclerView.setLayoutManager(new LinearLayoutManager(this));

File: okserver/src/main/java/com/lzy/okserver/download/DownloadTask.java
Patch:
@@ -288,7 +288,7 @@ public void run() {
             randomAccessFile.seek(startPosition);
             progress.currentSize = startPosition;
         } catch (Exception e) {
-            postOnError(progress, OkGoException.BREAKPOINT_NOT_EXIST());
+            postOnError(progress, e);
             return;
         }
         try {

File: demo/src/main/java/com/lzy/demo/okgo/CacheActivity.java
Patch:
@@ -136,7 +136,7 @@ public void first_cache_then_request(View view) {
         OkGo.<LzyResponse<ServerModel>>get(Urls.URL_CACHE)//
                 .tag(this)//
                 .cacheMode(CacheMode.FIRST_CACHE_THEN_REQUEST)//
-                .cacheKey("only_read_cache")//
+                .cacheKey("first_cache_then_request")//
                 .cacheTime(5000)            // 单位毫秒.5秒后过期
                 .headers("header1", "headerValue1")//
                 .params("param1", "paramValue1")//

File: okgo/src/main/java/com/lzy/okgo/cache/policy/BaseCachePolicy.java
Patch:
@@ -89,7 +89,7 @@ public CacheEntity<T> prepareCache() {
     }
 
     @Override
-    public synchronized okhttp3.Call prepareRawCall() {
+    public synchronized okhttp3.Call prepareRawCall() throws Throwable {
         if (executed) throw HttpException.COMMON("Already executed!");
         executed = true;
         rawCall = request.getRawCall();
@@ -99,7 +99,6 @@ public synchronized okhttp3.Call prepareRawCall() {
 
     protected Response<T> requestNetworkSync() {
         try {
-            prepareRawCall();
             okhttp3.Response response = rawCall.execute();
             int responseCode = response.code();
 
@@ -127,7 +126,6 @@ protected Response<T> requestNetworkSync() {
     }
 
     protected void requestNetworkAsync() {
-        prepareRawCall();
         rawCall.enqueue(new okhttp3.Callback() {
             @Override
             public void onFailure(okhttp3.Call call, IOException e) {

File: okgo/src/main/java/com/lzy/okgo/cache/policy/CachePolicy.java
Patch:
@@ -65,7 +65,7 @@ public interface CachePolicy<T> {
      *
      * @return 准备请求的对象
      */
-    okhttp3.Call prepareRawCall();
+    okhttp3.Call prepareRawCall() throws Throwable;
 
     /**
      * 同步请求获取数据

File: okserver/src/main/java/com/lzy/okserver/upload/UploadTask.java
Patch:
@@ -155,17 +155,17 @@ public UploadTask<T> remove() {
 
     @Override
     public void run() {
+        progress.status = Progress.LOADING;
         postLoading(progress);
         final Response<T> response;
         try {
             //noinspection unchecked
-            final Request<T, ? extends Request> request = (Request<T, ? extends Request>) progress.request;
+            Request<T, ? extends Request> request = (Request<T, ? extends Request>) progress.request;
+            final Call rawCall = request.getRawCall();
             request.uploadInterceptor(new ProgressRequestBody.UploadInterceptor() {
                 @Override
                 public void uploadProgress(Progress innerProgress) {
-                    Call rawCall = request.getRawCall();
                     if (rawCall.isCanceled()) return;
-
                     if (progress.status != Progress.LOADING) {
                         rawCall.cancel();
                         return;

File: okgo/src/main/java/com/lzy/okgo/cache/policy/BaseCachePolicy.java
Patch:
@@ -99,6 +99,7 @@ public synchronized okhttp3.Call prepareRawCall() {
 
     protected Response<T> requestNetworkSync() {
         try {
+            prepareRawCall();
             okhttp3.Response response = rawCall.execute();
             int responseCode = response.code();
 
@@ -126,6 +127,7 @@ protected Response<T> requestNetworkSync() {
     }
 
     protected void requestNetworkAsync() {
+        prepareRawCall();
         rawCall.enqueue(new okhttp3.Callback() {
             @Override
             public void onFailure(okhttp3.Call call, IOException e) {

File: okgo/src/main/java/com/lzy/okgo/request/HasBody.java
Patch:
@@ -41,7 +41,7 @@ public interface HasBody<R> {
 
     R isSpliceUrl(boolean isSpliceUrl);
 
-    R requestBody(RequestBody requestBody);
+    R upRequestBody(RequestBody requestBody);
 
     R params(String key, File file);
 

File: okgo/src/main/java/com/lzy/okgo/OkGo.java
Patch:
@@ -50,19 +50,20 @@ public class OkGo {
     public static final long DEFAULT_MILLISECONDS = 60000;      //默认的超时时间
     public static long REFRESH_TIME = 300;                      //回调刷新时间（单位ms）
 
+    private Application context;            //全局上下文
     private Handler mDelivery;              //用于在主线程执行的调度器
     private OkHttpClient okHttpClient;      //ok请求的客户端
     private HttpParams mCommonParams;       //全局公共请求参数
     private HttpHeaders mCommonHeaders;     //全局公共请求头
-    private CacheMode mCacheMode;           //全局缓存模式
     private int mRetryCount;                //全局超时重试次数
+    private CacheMode mCacheMode;           //全局缓存模式
     private long mCacheTime;                //全局缓存过期时间,默认永不过期
-    private Application context;            //全局上下文
 
     private OkGo() {
         mDelivery = new Handler(Looper.getMainLooper());
         mRetryCount = 3;
         mCacheTime = CacheEntity.CACHE_NEVER_EXPIRE;
+        mCacheMode = CacheMode.NO_CACHE;
     }
 
     public static OkGo getInstance() {

File: okgo/src/main/java/com/lzy/okgo/request/Request.java
Patch:
@@ -60,9 +60,9 @@ public abstract class Request<T, R extends Request> implements Serializable {
     protected int retryCount;
     protected CacheMode cacheMode;
     protected String cacheKey;
-    protected long cacheTime = CacheEntity.CACHE_NEVER_EXPIRE;      //默认缓存的超时时间
-    protected HttpParams params = new HttpParams();                 //添加的param
-    protected HttpHeaders headers = new HttpHeaders();              //添加的header
+    protected long cacheTime;                           //默认缓存的超时时间
+    protected HttpParams params = new HttpParams();     //添加的param
+    protected HttpHeaders headers = new HttpHeaders();  //添加的header
 
     protected transient okhttp3.Request mRequest;
     protected transient Call<T> call;

File: okgo/src/main/java/com/lzy/okgo/utils/IOUtils.java
Patch:
@@ -531,6 +531,7 @@ public static boolean createNewFile(File targetFile) {
      * @see #delFileOrFolder(File)
      */
     public static boolean delFileOrFolder(String path) {
+        if (TextUtils.isEmpty(path)) return false;
         return delFileOrFolder(new File(path));
     }
 

File: okgo/src/main/java/com/lzy/okgo/OkGo.java
Patch:
@@ -50,19 +50,20 @@ public class OkGo {
     public static final long DEFAULT_MILLISECONDS = 60000;      //默认的超时时间
     public static long REFRESH_TIME = 300;                      //回调刷新时间（单位ms）
 
+    private Application context;            //全局上下文
     private Handler mDelivery;              //用于在主线程执行的调度器
     private OkHttpClient okHttpClient;      //ok请求的客户端
     private HttpParams mCommonParams;       //全局公共请求参数
     private HttpHeaders mCommonHeaders;     //全局公共请求头
-    private CacheMode mCacheMode;           //全局缓存模式
     private int mRetryCount;                //全局超时重试次数
+    private CacheMode mCacheMode;           //全局缓存模式
     private long mCacheTime;                //全局缓存过期时间,默认永不过期
-    private Application context;            //全局上下文
 
     private OkGo() {
         mDelivery = new Handler(Looper.getMainLooper());
         mRetryCount = 3;
         mCacheTime = CacheEntity.CACHE_NEVER_EXPIRE;
+        mCacheMode = CacheMode.NO_CACHE;
     }
 
     public static OkGo getInstance() {

File: okgo/src/main/java/com/lzy/okgo/request/Request.java
Patch:
@@ -60,9 +60,9 @@ public abstract class Request<T, R extends Request> implements Serializable {
     protected int retryCount;
     protected CacheMode cacheMode;
     protected String cacheKey;
-    protected long cacheTime = CacheEntity.CACHE_NEVER_EXPIRE;      //默认缓存的超时时间
-    protected HttpParams params = new HttpParams();                 //添加的param
-    protected HttpHeaders headers = new HttpHeaders();              //添加的header
+    protected long cacheTime;                           //默认缓存的超时时间
+    protected HttpParams params = new HttpParams();     //添加的param
+    protected HttpHeaders headers = new HttpHeaders();  //添加的header
 
     protected transient okhttp3.Request mRequest;
     protected transient Call<T> call;

File: okgo/src/main/java/com/lzy/okgo/utils/IOUtils.java
Patch:
@@ -531,6 +531,7 @@ public static boolean createNewFile(File targetFile) {
      * @see #delFileOrFolder(File)
      */
     public static boolean delFileOrFolder(String path) {
+        if (TextUtils.isEmpty(path)) return false;
         return delFileOrFolder(new File(path));
     }
 

File: demo/src/main/java/com/lzy/demo/base/MainFragment.java
Patch:
@@ -74,7 +74,6 @@ public void onRefresh() {
 
     @Override
     public void onLoadMoreRequested() {
-        adapter.loadComplete();
     }
 
     @Override

File: okgo/src/main/java/com/lzy/okgo/interceptor/HttpLoggingInterceptor.java
Patch:
@@ -155,7 +155,8 @@ private Response logForResponse(Response response, long tookMs) {
      * Returns true if the body in question probably contains human readable text. Uses a small sample
      * of code points to detect unicode control characters commonly used in binary file signatures.
      */
-    static boolean isPlaintext(MediaType mediaType) {
+    private static boolean isPlaintext(MediaType mediaType) {
+        if (mediaType == null) return false;
         if (mediaType.type() != null && mediaType.type().equals("text")) {
             return true;
         }

File: app/src/main/java/com/lzy/okhttpdemo/okhttpserver/DesActivity.java
Patch:
@@ -87,7 +87,7 @@ public void onClick(View v) {
         downloadInfo = downloadManager.getDownloadInfo(apk.getUrl());
         if (v.getId() == download.getId()) {
             if (downloadInfo == null) {
-                GetRequest request = OkHttpUtils.get(downloadInfo.getUrl())//
+                GetRequest request = OkHttpUtils.get(apk.getUrl())//
                         .headers("headerKey1", "headerValue1")//
                         .headers("headerKey2", "headerValue2")//
                         .params("paramKey1", "paramValue1")//

File: okhttputils/src/main/java/com/lzy/okhttputils/request/PostRequest.java
Patch:
@@ -47,6 +47,7 @@ public PostRequest postJson(String json) {
     /** 注意使用该方法上传字符串会清空实体中其他所有的参数，头信息不清除 */
     public PostRequest postBytes(byte[] bs) {
         this.bs = bs;
+        this.mediaType = MEDIA_TYPE_STREAM;
         return this;
     }
 

File: okhttputils/src/main/java/com/lzy/okhttputils/request/PostRequest.java
Patch:
@@ -47,6 +47,7 @@ public PostRequest postJson(String json) {
     /** 注意使用该方法上传字符串会清空实体中其他所有的参数，头信息不清除 */
     public PostRequest postBytes(byte[] bs) {
         this.bs = bs;
+        this.mediaType = MEDIA_TYPE_STREAM;
         return this;
     }
 

File: okhttpserver/src/main/java/com/lzy/okhttpserver/download/DatabaseHelper.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class DatabaseHelper extends OrmLiteSqliteOpenHelper {
 
-    private static final String TABLE_NAME = "OkHttpUtils.db";
+    private static final String TABLE_NAME = "okhttputils_server.db";
     private Map<String, Dao> daos = new HashMap<>();
 
     private DatabaseHelper(Context context) {

File: okhttpserver/src/main/java/com/lzy/okhttpserver/upload/UploadTask.java
Patch:
@@ -130,7 +130,7 @@ public void upProgress(long currentSize, long totalSize, float progress, long ne
         }
 
         @Override
-        public T parseNetworkResponse(Response response) {
+        public T parseNetworkResponse(Response response) throws Exception {
             return null;
         }
 

File: okhttputils/src/main/java/com/lzy/okhttputils/callback/AbsCallback.java
Patch:
@@ -24,7 +24,7 @@ public void onBefore(BaseRequest request) {
     }
 
     /** 拿到响应后，将数据转换成需要的格式，子线程中执行，可以是耗时操作 */
-    public abstract T parseNetworkResponse(Response response);
+    public abstract T parseNetworkResponse(Response response) throws Exception;
 
     /** 对返回数据进行操作的回调， UI线程 */
     public abstract void onResponse(boolean isFromCache, T t, Request request, @Nullable Response response);
@@ -63,7 +63,7 @@ public void downloadProgress(long currentSize, long totalSize, float progress, l
     public static final AbsCallback CALLBACK_DEFAULT = new AbsCallback() {
 
         @Override
-        public Response parseNetworkResponse(Response response) {
+        public Response parseNetworkResponse(Response response) throws Exception {
             return response;
         }
 

File: okhttputils/src/main/java/com/lzy/okhttputils/callback/BitmapCallback.java
Patch:
@@ -17,7 +17,7 @@
 public abstract class BitmapCallback extends AbsCallback<Bitmap> {
 
     @Override
-    public Bitmap parseNetworkResponse(Response response) {
+    public Bitmap parseNetworkResponse(Response response) throws Exception {
         return BitmapFactory.decodeStream(response.body().byteStream());
     }
 }

File: okhttputils/src/main/java/com/lzy/okhttputils/callback/FileCallback.java
Patch:
@@ -44,7 +44,7 @@ public FileCallback(@NonNull String destFileDir, @NonNull String destFileName) {
     }
 
     @Override
-    public File parseNetworkResponse(Response response) {
+    public File parseNetworkResponse(Response response) throws Exception {
         try {
             return saveFile(response);
         } catch (IOException e) {

File: app/src/main/java/com/lzy/okhttpdemo/activity/BaseActivity.java
Patch:
@@ -159,6 +159,7 @@ protected <T> void handleResponse(boolean isFromCache, T data, Request request,
             Headers responseHeadersString = response.headers();
             Set<String> names = responseHeadersString.names();
             sb = new StringBuilder();
+            sb.append("url ： ").append(response.request().url()).append("\n\n");
             sb.append("stateCode ： ").append(response.code()).append("\n");
             for (String name : names) {
                 sb.append(name).append(" ： ").append(responseHeadersString.get(name)).append("\n");

File: app/src/main/java/com/lzy/okhttpdemo/activity/CacheActivity.java
Patch:
@@ -113,9 +113,6 @@ public CacheCallBack(Activity activity) {
         @Override
         public void onResponse(boolean isFromCache, RequestInfo requestInfo, Request request, Response response) {
             handleResponse(isFromCache, requestInfo, request, response);
-//            if (!isFromCache && response == null) {
-//                responseData.setText("这是请求网络返回的新数据！，当前时间：" + System.currentTimeMillis());
-//            }
         }
 
         @Override

File: app/src/main/java/com/lzy/okhttpdemo/activity/HttpsActivity.java
Patch:
@@ -15,7 +15,6 @@
 import okhttp3.Call;
 import okhttp3.Request;
 import okhttp3.Response;
-import okio.Buffer;
 
 public class HttpsActivity extends BaseActivity {
 
@@ -62,10 +61,11 @@ public void btn_https_request(View view) {
         try {
             OkHttpUtils.get("https://kyfw.12306.cn/otn")//
                     .tag(this)//
+                    .headers("Connection", "close")           //如果对于部分自签名的https访问不成功，需要加上该控制头
                     .headers("header1", "headerValue1")//
                     .params("param1", "paramValue1")//
-                    .setCertificates(new Buffer().writeUtf8(CER_12306).inputStream())  //方法一：设置自签名网站的证书（选一种即可）
-//                    .setCertificates(getAssets().open("srca.cer"))                     //方法二：也可以设置https证书（选一种即可）
+//                    .setCertificates(new Buffer().writeUtf8(CER_12306).inputStream())  //方法一：设置自签名网站的证书（选一种即可）
+                    .setCertificates(getAssets().open("srca.cer"))                     //方法二：也可以设置https证书（选一种即可）
 //                    .setCertificates()                                                 //方法三：信任所有证书（选一种即可）
                     .execute(new HttpsCallBack(this));
         } catch (Exception e) {

File: app/src/main/java/com/lzy/okhttpdemo/utils/Constant.java
Patch:
@@ -30,6 +30,8 @@ public static List<String[]> getData() {
             data.add(new String[]{"文件下载", "可以做大文件或小文件下载，同时支持监听下载进度"});
             data.add(new String[]{"网络缓存", "默认提供了四种缓存模式，根据需要选择使用"});
             data.add(new String[]{"https请求", "允许访问拥有可信证书的网站，也支持自签名证书的网站"});
+            data.add(new String[]{"同步请求", "允许直接返回Response对象，会阻塞主线程，需要自行开启子线程"});
+            data.add(new String[]{"301重定向", "支持301重定向请求"});
         }
         return data;
     }

File: app/src/main/java/com/lzy/okhttpdemo/utils/Urls.java
Patch:
@@ -11,6 +11,7 @@
  */
 public class Urls {
     public static final String SERVER = "http://server.jeasonlzy.com/OkHttpUtils/";
+    //    public static final String SERVER = "http://192.168.1.101:8080/OkHttpUtils/";
     public static final String URL_METHOD = SERVER + "method";
     public static final String URL_CACHE = SERVER + "cache";
     public static final String URL_IMAGE = SERVER + "image";
@@ -19,4 +20,5 @@ public class Urls {
     public static final String URL_FORM_UPLOAD = SERVER + "upload";
     public static final String URL_TEXT_UPLOAD = SERVER + "uploadString";
     public static final String URL_DOWNLOAD = SERVER + "download";
+    public static final String URL_REDIRECT = SERVER + "redirect";
 }

File: okhttputils/src/main/java/com/lzy/okhttputils/OkHttpUtils.java
Patch:
@@ -52,6 +52,7 @@ private OkHttpUtils() {
         okHttpClientBuilder = new OkHttpClient.Builder();
         //允许cookie的自动化管理
         okHttpClientBuilder.cookieJar(new CookieJarImpl(new MemoryCookieStore()));
+        okHttpClientBuilder.hostnameVerifier(new DefaultHostnameVerifier());
         mDelivery = new Handler(Looper.getMainLooper());
     }
 

