File: paper-server/src/main/java/io/papermc/paper/entity/activation/ActivationType.java
Patch:
@@ -4,6 +4,7 @@
 import net.minecraft.world.entity.FlyingMob;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ambient.AmbientCreature;
+import net.minecraft.world.entity.animal.AgeableWaterCreature;
 import net.minecraft.world.entity.animal.WaterAnimal;
 import net.minecraft.world.entity.monster.Enemy;
 import net.minecraft.world.entity.npc.Villager;
@@ -28,7 +29,7 @@ public enum ActivationType {
      * @return activation type
      */
     public static ActivationType activationTypeFor(final Entity entity) {
-        if (entity instanceof WaterAnimal) {
+        if (entity instanceof WaterAnimal || entity instanceof AgeableWaterCreature) {
             return ActivationType.WATER;
         } else if (entity instanceof Villager) {
             return ActivationType.VILLAGER;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -209,8 +209,8 @@ public void setVoidDamageMinBuildHeightOffset(double minBuildHeightOffset) {
     @Override
     public int getEntityCount() {
         int ret = 0;
-        for (net.minecraft.world.entity.Entity entity : world.getEntities().getAll()) {
-            if (entity.isChunkLoaded()) {
+        for (net.minecraft.world.entity.Entity entity : this.world.getEntities().getAll()) {
+            if (entity.getBukkitEntity().isValid()) {
                 ++ret;
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -414,7 +414,7 @@ public boolean isDead() {
 
     @Override
     public boolean isValid() {
-        return this.entity.isAlive() && this.entity.valid && this.entity.isChunkLoaded() && this.isInWorld();
+        return this.entity.isAlive() && this.entity.valid;
     }
 
     @Override

File: paper-server/src/main/java/org/spigotmc/WatchdogThread.java
Patch:
@@ -11,7 +11,7 @@
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 
-public class WatchdogThread extends Thread {
+public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThread { // Paper - rewrite chunk system
 
     public static final boolean DISABLE_WATCHDOG = Boolean.getBoolean("disable.watchdog"); // Paper - Improved watchdog support
     private static WatchdogThread instance;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
Patch:
@@ -58,13 +58,13 @@ public void setLineWidth(int width) {
     public Color getBackgroundColor() {
         int color = this.getHandle().getBackgroundColor();
 
-        return (color == -1) ? null : Color.fromARGB(color);
+        return color == Display.TextDisplay.INITIAL_BACKGROUND ? null : Color.fromARGB(color);
     }
 
     @Override
     public void setBackgroundColor(Color color) {
         if (color == null) {
-            this.getHandle().getEntityData().set(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, -1);
+            this.getHandle().getEntityData().set(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, Display.TextDisplay.INITIAL_BACKGROUND);
         } else {
             this.getHandle().getEntityData().set(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, color.asARGB());
         }

File: paper-api/src/main/java/io/papermc/paper/datacomponent/item/DamageResistant.java
Patch:
@@ -21,9 +21,9 @@ static DamageResistant damageResistant(final TagKey<DamageType> types) {
     }
 
     /**
-     * The types that this damage type is invincible tp.
+     * The types that this damage type is invincible to.
      *
-     * @return item
+     * @return the key of the tag holding the respective damage types.
      */
     @Contract(value = "-> new", pure = true)
     TagKey<DamageType> types();

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
@@ -243,7 +244,7 @@ public boolean teleport(Location location, TeleportCause cause, io.papermc.paper
         Preconditions.checkArgument(location != null, "location cannot be null");
         location.checkFinite();
         // Paper start - Teleport passenger API
-        Set<io.papermc.paper.entity.TeleportFlag> flagSet = Set.of(flags);
+        Set<io.papermc.paper.entity.TeleportFlag> flagSet = new HashSet<>(List.of(flags)); // Wrap into list while multiple old flags link to the same new one
         boolean dismount = !flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_VEHICLE);
         boolean retainPassengers = flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS);
         // Don't allow teleporting between worlds while keeping passengers

File: paper-api/src/main/java/org/bukkit/block/Block.java
Patch:
@@ -509,9 +509,6 @@ public static int getBlockKeyZ(long packed) {
 
     /**
      * Gets the temperature of this block.
-     * <p>
-     * If the raw biome temperature without adjusting for height effects is
-     * required then please use {@link World#getTemperature(int, int, int)}.
      *
      * @return Temperature of this block
      */

File: paper-api/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
Patch:
@@ -11,7 +11,7 @@
 import org.jspecify.annotations.Nullable;
 
 /**
- * Represents an event that is called when a player right-clicks an unknown entity.
+ * Represents an event that is called when a player clicks an unknown entity.
  * Useful for plugins dealing with virtual entities (entities that aren't actually spawned on the server).
  * <br>
  * This event may be called multiple times per interaction with different interaction hands

File: paper-server/src/main/java/io/papermc/paper/registry/PaperRegistryAccess.java
Patch:
@@ -107,7 +107,7 @@ public <M> void registerRegistry(final ResourceKey<? extends net.minecraft.core.
 
     public <M> void lockReferenceHolders(final ResourceKey<? extends net.minecraft.core.Registry<M>> resourceKey) {
         final RegistryEntry<M, Keyed> entry = PaperRegistries.getEntry(resourceKey);
-        if (entry == null || !(entry.meta() instanceof final RegistryEntryMeta.ServerSide<M, Keyed> serverSide) || !serverSide.registryTypeMapper().supportsDirectHolders()) {
+        if (entry == null || !(entry.meta() instanceof final RegistryEntryMeta.ServerSide<M, Keyed> serverSide) || !serverSide.registryTypeMapper().constructorUsesHolder()) {
             return;
         }
         final CraftRegistry<?, M> registry = (CraftRegistry<?, M>) this.getRegistry(entry.apiKey());

File: paper-server/src/main/java/io/papermc/paper/registry/data/InlinedRegistryBuilderProviderImpl.java
Patch:
@@ -24,7 +24,7 @@ private static <M, A extends Keyed, B extends PaperRegistryBuilder<M, A>> A crea
         Preconditions.checkArgument(buildableMeta.registryTypeMapper().supportsDirectHolders(), "Registry type mapper must support direct holders");
         final PaperRegistryBuilderFactory<M, A, B> builderFactory = new PaperRegistryBuilderFactory<>(Conversions.global(), buildableMeta.builderFiller(), CraftRegistry.getMinecraftRegistry(buildableMeta.mcKey())::getValue);
         value.accept(builderFactory);
-        return buildableMeta.registryTypeMapper().convertDirectHolder(Holder.direct(builderFactory.requireBuilder().build()));
+        return buildableMeta.registryTypeMapper().createBukkit(Holder.direct(builderFactory.requireBuilder().build()));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftMusicInstrument.java
Patch:
@@ -32,7 +32,7 @@ public static Holder<Instrument> bukkitToMinecraftHolder(MusicInstrument bukkit)
     public static Object bukkitToString(MusicInstrument bukkit) { // Paper - switch to Holder
         Preconditions.checkArgument(bukkit != null);
 
-        return ((CraftMusicInstrument) bukkit).toBukkitSerializationObject(Instrument.CODEC); // Paper - switch to Holder
+        return ((CraftMusicInstrument) bukkit).toBukkitSerializationObject(Instrument.DIRECT_CODEC); // Paper - switch to Holder
     }
 
     public static MusicInstrument stringToBukkit(Object string) { // Paper - switch to Holder

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java
Patch:
@@ -36,7 +36,7 @@ public static Holder<net.minecraft.world.item.equipment.trim.TrimMaterial> bukki
     public static Object bukkitToObject(TrimMaterial bukkit) {
         Preconditions.checkArgument(bukkit != null);
 
-        return ((CraftTrimMaterial) bukkit).toBukkitSerializationObject(net.minecraft.world.item.equipment.trim.TrimMaterial.CODEC); // Paper - switch to Holder
+        return ((CraftTrimMaterial) bukkit).toBukkitSerializationObject(net.minecraft.world.item.equipment.trim.TrimMaterial.DIRECT_CODEC); // Paper - switch to Holder
     }
 
     public static TrimMaterial objectToBukkit(Object object) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java
Patch:
@@ -36,7 +36,7 @@ public static Holder<net.minecraft.world.item.equipment.trim.TrimPattern> bukkit
     public static Object bukkitToObject(TrimPattern bukkit) {
         Preconditions.checkArgument(bukkit != null);
 
-        return ((CraftTrimPattern) bukkit).toBukkitSerializationObject(net.minecraft.world.item.equipment.trim.TrimPattern.CODEC); // Paper - switch to Holder
+        return ((CraftTrimPattern) bukkit).toBukkitSerializationObject(net.minecraft.world.item.equipment.trim.TrimPattern.DIRECT_CODEC); // Paper - switch to Holder
     }
 
     public static TrimPattern objectToBukkit(Object object) {

File: paper-server/src/test/java/org/bukkit/registry/RegistryConversionTest.java
Patch:
@@ -263,7 +263,7 @@ public void testBukkitToMinecraft(io.papermc.paper.registry.RegistryKey<? extend
                 Joiner.on('\n').withKeyValueSeparator(" got: ").join(notMatching)));
     }
 
-    static final Set<RegistryKey<?>> IGNORE_FOR_DIRECT_HOLDER = Set.of(RegistryKey.TRIM_MATERIAL, RegistryKey.TRIM_PATTERN, RegistryKey.INSTRUMENT, RegistryKey.PAINTING_VARIANT, RegistryKey.BANNER_PATTERN, RegistryKey.SOUND_EVENT, RegistryKey.ENCHANTMENT); // Paper
+    static final Set<RegistryKey<?>> IGNORE_FOR_DIRECT_HOLDER = Set.of(RegistryKey.TRIM_MATERIAL, RegistryKey.TRIM_PATTERN, RegistryKey.INSTRUMENT, RegistryKey.PAINTING_VARIANT, RegistryKey.BANNER_PATTERN, RegistryKey.SOUND_EVENT); // Paper
 
     /**
      * Minecraft registry can return a default key / value

File: paper-server/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
Patch:
@@ -194,7 +194,6 @@ public enum CompressionFormat {
 
     public class Commands extends ConfigurationPart {
         public boolean suggestPlayerNamesWhenNullTabCompletions = true;
-        public boolean fixTargetSelectorTagCompletion = true;
         public boolean timeCommandAffectsAllWorlds = false;
     }
 

File: paper-server/src/main/java/io/papermc/paper/configuration/RemovedConfigurations.java
Patch:
@@ -79,7 +79,8 @@ interface RemovedConfigurations {
         path("warnWhenSettingExcessiveVelocity"),
         path("logging", "use-rgb-for-named-text-colors"),
         path("unsupported-settings", "allow-grindstone-overstacking"),
-        path("unsupported-settings", "allow-tripwire-disarming-exploits")
+        path("unsupported-settings", "allow-tripwire-disarming-exploits"),
+        path("commands", "fix-target-selector-tag-completion"),
     };
 
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -1430,6 +1430,7 @@ public static AbstractContainerMenu callInventoryOpenEvent(ServerPlayer player,
     }
     public static com.mojang.datafixers.util.Pair<net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component, @org.jetbrains.annotations.Nullable AbstractContainerMenu> callInventoryOpenEventWithTitle(ServerPlayer player, AbstractContainerMenu container, boolean cancelled) {
         // Paper end - Add titleOverride to InventoryOpenEvent
+        container.startOpen(); // delegate start open logic to before InventoryOpenEvent is fired
         if (player.containerMenu != player.inventoryMenu) { // fire INVENTORY_CLOSE if one already open
             player.connection.handleContainerClose(new ServerboundContainerClosePacket(player.containerMenu.containerId), InventoryCloseEvent.Reason.OPEN_NEW); // Paper - Inventory close reason
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
Patch:
@@ -132,7 +132,7 @@ public static net.minecraft.world.inventory.MenuType getNotchInventoryType(Inven
                 if (menu == null) {
                     return net.minecraft.world.inventory.MenuType.GENERIC_9x3;
                 } else {
-                    return ((CraftMenuType<?>) menu).getHandle();
+                    return ((CraftMenuType<?, ?>) menu).getHandle();
                 }
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -854,7 +854,7 @@ public void setFullTime(long time) {
             CraftPlayer cp = (CraftPlayer) p;
             if (cp.getHandle().connection == null) continue;
 
-            cp.getHandle().connection.send(new ClientboundSetTimePacket(cp.getHandle().level().getGameTime(), cp.getHandle().getPlayerTime(), cp.getHandle().serverLevel().getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
+            cp.getHandle().connection.send(new ClientboundSetTimePacket(cp.getHandle().level().getGameTime(), cp.getHandle().getPlayerTime(), cp.getHandle().relativeTime && cp.getHandle().serverLevel().getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
         }
     }
 

File: paper-server/src/main/java/io/papermc/paper/datapack/PaperDiscoveredDatapack.java
Patch:
@@ -64,6 +64,6 @@ public Set<FeatureFlag> getRequiredFeatures() {
 
     @Override
     public DatapackSource getSource() {
-        return PACK_SOURCES.computeIfAbsent(this.pack.location().source(), source -> new DatapackSourceImpl(source.toString()));
+        return PACK_SOURCES.get(this.pack.location().source());
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -883,7 +883,7 @@ public boolean isResourcePackRequired() {
 
     @Override
     public boolean hasWhitelist() {
-        return this.getProperties().whiteList.get();
+        return this.playerList.isUsingWhitelist();
     }
 
     // NOTE: Temporary calls through to server.properies until its replaced

File: paper-api/src/main/java/org/bukkit/attribute/Attribute.java
Patch:
@@ -89,7 +89,7 @@ public interface Attribute extends OldEnum<Attribute>, Keyed, Translatable, net.
      */
     Attribute JUMP_STRENGTH = getAttribute("jump_strength");
     /**
-     * How long an entity remains burning after ingition.
+     * How long an entity remains burning after ignition.
      */
     Attribute BURNING_TIME = getAttribute("burning_time");
     /**

File: paper-api/src/main/java/io/papermc/paper/registry/event/RegistryEvents.java
Patch:
@@ -2,12 +2,14 @@
 
 import io.papermc.paper.registry.RegistryKey;
 import io.papermc.paper.registry.data.BannerPatternRegistryEntry;
+import io.papermc.paper.registry.data.DamageTypeRegistryEntry;
 import io.papermc.paper.registry.data.EnchantmentRegistryEntry;
 import io.papermc.paper.registry.data.GameEventRegistryEntry;
 import io.papermc.paper.registry.data.PaintingVariantRegistryEntry;
 import org.bukkit.Art;
 import org.bukkit.GameEvent;
 import org.bukkit.block.banner.PatternType;
+import org.bukkit.damage.DamageType;
 import org.bukkit.enchantments.Enchantment;
 import org.jetbrains.annotations.ApiStatus;
 import org.jspecify.annotations.NullMarked;
@@ -26,6 +28,7 @@ public final class RegistryEvents {
     public static final RegistryEventProvider<Enchantment, EnchantmentRegistryEntry.Builder> ENCHANTMENT = create(RegistryKey.ENCHANTMENT);
     public static final RegistryEventProvider<Art, PaintingVariantRegistryEntry.Builder> PAINTING_VARIANT = create(RegistryKey.PAINTING_VARIANT);
     public static final RegistryEventProvider<PatternType, BannerPatternRegistryEntry.Builder> BANNER_PATTERN = create(RegistryKey.BANNER_PATTERN);
+    public static final RegistryEventProvider<DamageType, DamageTypeRegistryEntry.Builder> DAMAGE_TYPE = create(RegistryKey.DAMAGE_TYPE);
 
     private RegistryEvents() {
     }

File: paper-api/src/main/java/org/bukkit/damage/DamageEffect.java
Patch:
@@ -1,7 +1,7 @@
 package org.bukkit.damage;
 
 import com.google.common.base.Preconditions;
-import org.bukkit.Bukkit;
+import io.papermc.paper.InternalAPIBridge;
 import org.bukkit.Sound;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
@@ -40,7 +40,7 @@ public interface DamageEffect {
 
     @NotNull
     private static DamageEffect getDamageEffect(@NotNull String key) {
-        return Preconditions.checkNotNull(Bukkit.getUnsafe().getDamageEffect(key), "No DamageEffect found for %s. This is a bug.", key);
+        return Preconditions.checkNotNull(InternalAPIBridge.get().getDamageEffect(key), "No DamageEffect found for %s. This is a bug.", key);
     }
 
     /**

File: paper-server/src/main/java/io/papermc/paper/plugin/entrypoint/LaunchEntryPointHandler.java
Patch:
@@ -6,10 +6,9 @@
 import io.papermc.paper.plugin.storage.ServerPluginProviderStorage;
 import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
-import org.jetbrains.annotations.ApiStatus;
-
 import java.util.HashMap;
 import java.util.Map;
+import org.jetbrains.annotations.ApiStatus;
 
 /**
  * Used by the server to register/load plugin bootstrappers and plugins.

File: paper-server/src/main/java/io/papermc/paper/registry/PaperRegistries.java
Patch:
@@ -5,6 +5,7 @@
 import io.papermc.paper.datacomponent.DataComponentTypes;
 import io.papermc.paper.datacomponent.PaperDataComponentType;
 import io.papermc.paper.registry.data.PaperBannerPatternRegistryEntry;
+import io.papermc.paper.registry.data.PaperDamageTypeRegistryEntry;
 import io.papermc.paper.registry.data.PaperEnchantmentRegistryEntry;
 import io.papermc.paper.registry.data.PaperGameEventRegistryEntry;
 import io.papermc.paper.registry.data.PaperPaintingVariantRegistryEntry;
@@ -103,7 +104,7 @@ public final class PaperRegistries {
             start(Registries.STRUCTURE, RegistryKey.STRUCTURE).craft(Structure.class, CraftStructure::new).build().delayed(),
             start(Registries.TRIM_MATERIAL, RegistryKey.TRIM_MATERIAL).craft(TrimMaterial.class, CraftTrimMaterial::new).build().delayed(),
             start(Registries.TRIM_PATTERN, RegistryKey.TRIM_PATTERN).craft(TrimPattern.class, CraftTrimPattern::new).build().delayed(),
-            start(Registries.DAMAGE_TYPE, RegistryKey.DAMAGE_TYPE).craft(DamageType.class, CraftDamageType::new).build().delayed(),
+            start(Registries.DAMAGE_TYPE, RegistryKey.DAMAGE_TYPE).craft(DamageType.class, CraftDamageType::new).writable(PaperDamageTypeRegistryEntry.PaperBuilder::new).delayed(),
             start(Registries.WOLF_VARIANT, RegistryKey.WOLF_VARIANT).craft(Wolf.Variant.class, CraftWolf.CraftVariant::new).build().delayed(),
             start(Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT).craft(Enchantment.class, CraftEnchantment::new).serializationUpdater(FieldRename.ENCHANTMENT_RENAME).writable(PaperEnchantmentRegistryEntry.PaperBuilder::new).delayed(),
             start(Registries.JUKEBOX_SONG, RegistryKey.JUKEBOX_SONG).craft(JukeboxSong.class, CraftJukeboxSong::new).build().delayed(),

File: paper-api/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
Patch:
@@ -304,8 +304,7 @@ public Iterator<Player> iterator() {
         return new PlayerIterator();
     }
 
-    @NotNull
-    protected Object[] getOnlinePlayers() {
+    protected @NotNull Object @NotNull [] getOnlinePlayers() {
         return Bukkit.getOnlinePlayers().toArray();
     }
 

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -66,7 +66,7 @@ protected Command(@NotNull String name, @NotNull String description, @NotNull St
      * @param args All arguments passed to the command, split via ' '
      * @return true if the command was successful, otherwise false
      */
-    public abstract boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args);
+    public abstract boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String @NotNull [] args);
 
     /**
      * Executed on tab completion for this command, returning a list of
@@ -80,7 +80,7 @@ protected Command(@NotNull String name, @NotNull String description, @NotNull St
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) throws IllegalArgumentException {
         return tabComplete0(sender, alias, args, null);
     }
 
@@ -97,7 +97,7 @@ public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String a
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
         return tabComplete(sender, alias, args);
     }
 

File: paper-api/src/main/java/org/bukkit/command/CommandExecutor.java
Patch:
@@ -19,5 +19,5 @@ public interface CommandExecutor {
      * @param args Passed command arguments
      * @return true if a valid command, otherwise false
      */
-    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args);
+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String @NotNull [] args);
 }

File: paper-api/src/main/java/org/bukkit/command/MessageCommandSender.java
Patch:
@@ -22,7 +22,7 @@
 public interface MessageCommandSender extends CommandSender {
 
     @Override
-    default void sendMessage(@NotNull String[] messages) {
+    default void sendMessage(@NotNull String @NotNull [] messages) {
         for (String message : messages) {
             sendMessage(message);
         }
@@ -34,7 +34,7 @@ default void sendMessage(@Nullable UUID sender, @NotNull String message) {
     }
 
     @Override
-    default void sendMessage(@Nullable UUID sender, @NotNull String[] messages) {
+    default void sendMessage(@Nullable UUID sender, @NotNull String @NotNull [] messages) {
         for (String message : messages) {
             sendMessage(message);
         }

File: paper-api/src/main/java/org/bukkit/command/MultipleCommandAlias.java
Patch:
@@ -18,8 +18,7 @@ public MultipleCommandAlias(@NotNull String name, @NotNull Command[] commands) {
      *
      * @return commands associated with alias
      */
-    @NotNull
-    public Command[] getCommands() {
+    public @NotNull Command @NotNull [] getCommands() {
         return commands;
     }
 

File: paper-api/src/main/java/org/bukkit/command/TabCompleter.java
Patch:
@@ -23,5 +23,5 @@ public interface TabCompleter {
      *     to default to the command executor
      */
     @Nullable
-    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args);
+    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String @NotNull [] args);
 }

File: paper-api/src/main/java/org/bukkit/event/HandlerList.java
Patch:
@@ -203,8 +203,7 @@ public synchronized void bake() {
      *
      * @return the array of registered listeners
      */
-    @NotNull
-    public RegisteredListener[] getRegisteredListeners() {
+    public @NotNull RegisteredListener @NotNull [] getRegisteredListeners() {
         RegisteredListener[] handlers;
         while ((handlers = this.handlers) == null) bake(); // This prevents fringe cases of returning null
         return handlers;

File: paper-api/src/main/java/org/bukkit/inventory/EntityEquipment.java
Patch:
@@ -329,7 +329,7 @@ public interface EntityEquipment {
      *
      * @param items The items to set the armor as. Individual items may be null.
      */
-    void setArmorContents(@NotNull ItemStack[] items);
+    void setArmorContents(@NotNull ItemStack @NotNull [] items);
 
     /**
      * Clears the entity of all armor and held items

File: paper-api/src/main/java/org/bukkit/inventory/ItemCraftResult.java
Patch:
@@ -24,8 +24,7 @@ public interface ItemCraftResult {
      *
      * @return resulting matrix
      */
-    @NotNull
-    public ItemStack[] getResultingMatrix();
+    public @NotNull ItemStack @NotNull [] getResultingMatrix();
 
     /**
      * Gets the overflowed items for items that don't fit back into the crafting

File: paper-api/src/main/java/org/bukkit/inventory/PlayerInventory.java
Patch:
@@ -118,7 +118,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param items The ItemStacks to use as armour
      */
-    public void setArmorContents(@Nullable ItemStack[] items);
+    public void setArmorContents(@Nullable ItemStack @NotNull [] items);
 
     /**
      * Put the given ItemStacks into the extra slots
@@ -127,7 +127,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param items The ItemStacks to use as extra
      */
-    public void setExtraContents(@Nullable ItemStack[] items);
+    public void setExtraContents(@Nullable ItemStack @NotNull [] items);
 
     /**
      * Put the given ItemStack into the helmet slot. This does not check if

File: paper-api/src/main/java/org/bukkit/inventory/ShapedRecipe.java
Patch:
@@ -234,8 +234,7 @@ public Map<Character, RecipeChoice> getChoiceMap() {
      * @return The recipe's shape.
      * @throws NullPointerException when not set yet
      */
-    @NotNull
-    public String[] getShape() {
+    public @NotNull String @NotNull [] getShape() {
         return rows.clone();
     }
 }

File: paper-api/src/main/java/org/bukkit/inventory/view/EnchantmentView.java
Patch:
@@ -4,6 +4,7 @@
 import org.bukkit.inventory.EnchantingInventory;
 import org.bukkit.inventory.InventoryView;
 import org.jetbrains.annotations.NotNull;
+import org.jspecify.annotations.Nullable;
 
 /**
  * An instance of {@link InventoryView} which provides extra methods related to
@@ -36,14 +37,13 @@ public interface EnchantmentView extends InventoryView {
      *
      * @return The enchantment offers that are provided
      */
-    @NotNull
-    EnchantmentOffer[] getOffers();
+    @Nullable EnchantmentOffer @NotNull [] getOffers();
 
     /**
      * Sets the offers to provide to the player.
      *
      * @param offers The offers to provide
      * @throws IllegalArgumentException if the array length isn't 3
      */
-    void setOffers(@NotNull EnchantmentOffer[] offers) throws IllegalArgumentException;
+    void setOffers(@Nullable EnchantmentOffer @NotNull [] offers) throws IllegalArgumentException;
 }

File: paper-api/src/main/java/org/bukkit/map/MapFont.java
Patch:
@@ -112,7 +112,7 @@ public static class CharacterSprite {
         private final int height;
         private final boolean[] data;
 
-        public CharacterSprite(int width, int height, @NotNull boolean[] data) {
+        public CharacterSprite(int width, int height, boolean @NotNull [] data) {
             this.width = width;
             this.height = height;
             this.data = data;

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -319,7 +319,7 @@ public final void init(@NotNull Server server, @NotNull PluginDescriptionFile de
      * {@inheritDoc}
      */
     @Override
-    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String @NotNull [] args) {
         return false;
     }
 
@@ -328,7 +328,7 @@ public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command
      */
     @Override
     @Nullable
-    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {
+    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String @NotNull [] args) {
         return null;
     }
 

File: paper-api/src/main/java/org/bukkit/plugin/messaging/Messenger.java
Patch:
@@ -229,5 +229,5 @@ public interface Messenger {
      * @param channel Channel that the message was sent by.
      * @param message Raw payload of the message.
      */
-    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message);
+    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, byte @NotNull [] message);
 }

File: paper-api/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
Patch:
@@ -17,5 +17,5 @@ public interface PluginMessageListener {
      * @param player Source of the message.
      * @param message The raw message that was sent.
      */
-    public void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, @NotNull byte[] message);
+    public void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, byte @NotNull [] message);
 }

File: paper-api/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
Patch:
@@ -27,7 +27,7 @@ public interface PluginMessageRecipient {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, @NotNull byte[] message);
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte @NotNull [] message);
 
     /**
      * Gets a set containing all the Plugin Channels that this client is

File: paper-api/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
Patch:
@@ -439,7 +439,7 @@ public boolean isOutgoingChannelRegistered(@NotNull Plugin plugin, @NotNull Stri
     }
 
     @Override
-    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message) {
+    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, byte @NotNull [] message) {
         if (source == null) {
             throw new IllegalArgumentException("Player source cannot be null");
         }
@@ -534,7 +534,7 @@ private static String shortened(String channel) {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, @NotNull byte[] message) {
+    public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, byte @NotNull [] message) {
         if (messenger == null) {
             throw new IllegalArgumentException("Messenger cannot be null");
         }

File: paper-api/src/main/java/org/bukkit/util/ChatPaginator.java
Patch:
@@ -150,7 +150,7 @@ public static class ChatPage {
         private int pageNumber;
         private int totalPages;
 
-        public ChatPage(@NotNull String[] lines, int pageNumber, int totalPages) {
+        public ChatPage(@NotNull String @NotNull [] lines, int pageNumber, int totalPages) {
             this.lines = lines;
             this.pageNumber = pageNumber;
             this.totalPages = totalPages;
@@ -165,7 +165,7 @@ public int getTotalPages() {
         }
 
         @NotNull
-        public String[] getLines() {
+        public String @NotNull [] getLines() {
             return lines;
         }
     }

File: paper-api/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
Patch:
@@ -12,7 +12,7 @@ public abstract class OctaveGenerator {
     protected double yScale = 1;
     protected double zScale = 1;
 
-    protected OctaveGenerator(@NotNull NoiseGenerator[] octaves) {
+    protected OctaveGenerator(@NotNull NoiseGenerator @NotNull [] octaves) {
         this.octaves = octaves;
     }
 
@@ -90,7 +90,7 @@ public void setZScale(double scale) {
      * @return Clone of the individual octaves
      */
     @NotNull
-    public NoiseGenerator[] getOctaves() {
+    public NoiseGenerator @NotNull [] getOctaves() {
         return octaves.clone();
     }
 

File: paper-api/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
Patch:
@@ -78,15 +78,15 @@ public SimplexNoiseGenerator(@NotNull Random rand) {
         offsetW = rand.nextDouble() * 256;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y) {
+    protected static double dot(int @NotNull [] g, double x, double y) {
         return g[0] * x + g[1] * y;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y, double z) {
+    protected static double dot(int @NotNull [] g, double x, double y, double z) {
         return g[0] * x + g[1] * y + g[2] * z;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y, double z, double w) {
+    protected static double dot(int @NotNull [] g, double x, double y, double z, double w) {
         return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
Patch:
@@ -613,8 +613,8 @@ public BlockHitResult isBlockInLine(ClipBlockStateContext context) {
     }
 
     @Override
-    public BlockHitResult clip(ClipContext context, BlockPos traversePos) {
-        return this.handle.clip(context, traversePos);
+    public BlockHitResult clip(ClipContext traverseContext, BlockPos traversePos) {
+        return this.handle.clip(traverseContext, traversePos);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -291,13 +291,13 @@ public WeightedRandomList<MobSpawnSettings.SpawnerData> getMobsAt(Holder<net.min
     }
 
     @Override
-    public void applyBiomeDecoration(WorldGenLevel world, ChunkAccess chunk, StructureManager structureAccessor) {
+    public void applyBiomeDecoration(WorldGenLevel level, ChunkAccess chunk, StructureManager structureManager) {
         WorldgenRandom random = CustomChunkGenerator.getSeededRandom();
         int x = chunk.getPos().x;
         int z = chunk.getPos().z;
 
-        random.setSeed(Mth.getSeed(x, "should-decoration".hashCode(), z) ^ world.getSeed());
-        super.applyBiomeDecoration(world, chunk, structureAccessor, this.generator.shouldGenerateDecorations(this.world.getWorld(), new RandomSourceWrapper.RandomWrapper(random), x, z));
+        random.setSeed(Mth.getSeed(x, "should-decoration".hashCode(), z) ^ level.getSeed());
+        super.applyBiomeDecoration(level, chunk, structureManager, this.generator.shouldGenerateDecorations(this.world.getWorld(), new RandomSourceWrapper.RandomWrapper(random), x, z));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
Patch:
@@ -613,8 +613,8 @@ public BlockHitResult isBlockInLine(ClipBlockStateContext context) {
     }
 
     @Override
-    public BlockHitResult clip(ClipContext raytrace1, BlockPos blockposition) {
-        return this.handle.clip(raytrace1, blockposition);
+    public BlockHitResult clip(ClipContext context, BlockPos traversePos) {
+        return this.handle.clip(context, traversePos);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlockInventoryHolder.java
Patch:
@@ -13,9 +13,9 @@ public class CraftBlockInventoryHolder implements BlockInventoryHolder {
     private final Block block;
     private final Inventory inventory;
 
-    public CraftBlockInventoryHolder(LevelAccessor world, BlockPos pos, Container inv) {
-        this.block = CraftBlock.at(world, pos);
-        this.inventory = new CraftInventory(inv);
+    public CraftBlockInventoryHolder(LevelAccessor levelAccessor, BlockPos pos, Container container) {
+        this.block = CraftBlock.at(levelAccessor, pos);
+        this.inventory = new CraftInventory(container);
     }
     // Paper start - Add missing InventoryHolders
     public CraftBlockInventoryHolder(net.minecraft.world.inventory.ContainerLevelAccess levelAccess, Inventory inventory) {

File: paper-server/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
Patch:
@@ -48,7 +48,7 @@ public List<String> tabComplete(final CommandSender sender, final String subComm
         if (args.length == 1) {
             return CommandUtil.getListMatchingLast(sender, args, "help", "list");
         } else if (args.length == 2) {
-            return CommandUtil.getListMatchingLast(sender, args, BuiltInRegistries.ENTITY_TYPE.keySet().stream().map(ResourceLocation::toString).sorted().toArray(String[]::new));
+            return CommandUtil.getListMatchingLast(sender, args, BuiltInRegistries.ENTITY_TYPE.keySet());
         }
         return Collections.emptyList();
     }

File: paper-api/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
Patch:
@@ -241,6 +241,9 @@ public EquipmentSlot getHand() {
     @Nullable
     @Deprecated // Paper
     public Vector getClickedPosition() {
+        if (this.clickedPosistion == null) {
+            return null;
+        }
         return clickedPosistion.clone();
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java
Patch:
@@ -282,6 +282,7 @@ public static PotionType valueOf_PotionType(String name) {
             .change("PONDER", "PONDER_GOAT_HORN")
             .change("SING", "SING_GOAT_HORN")
             .change("SEEK", "SEEK_GOAT_HORN")
+            .change("FEEL", "FEEL_GOAT_HORN")
             .change("ADMIRE", "ADMIRE_GOAT_HORN")
             .change("CALL", "CALL_GOAT_HORN")
             .change("YEARN", "YEARN_GOAT_HORN")

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftEnchantmentView.java
Patch:
@@ -47,7 +47,7 @@ public EnchantmentOffer[] getOffers() {
 
     @Override
     public void setOffers(@NotNull final EnchantmentOffer[] offers) {
-        Preconditions.checkArgument(offers.length != 3, "There must be 3 offers given");
+        Preconditions.checkArgument(offers.length == 3, "There must be 3 offers given");
         IdMap<Holder<Enchantment>> registry = CraftRegistry.getMinecraftRegistry().lookupOrThrow(Registries.ENCHANTMENT).asHolderIdMap();
         for (int i = 0; i < offers.length; i++) {
             final EnchantmentOffer offer = offers[i];

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
Patch:
@@ -16,10 +16,10 @@ public class CraftInventoryDoubleChest extends CraftInventory implements DoubleC
     private final CraftInventory right;
 
     public CraftInventoryDoubleChest(ChestBlock.DoubleInventory block) {
-        super(block.inventorylargechest);
+        super(block.container);
         this.tile = block;
-        this.left = new CraftInventory(block.inventorylargechest.container1);
-        this.right = new CraftInventory(block.inventorylargechest.container2);
+        this.left = new CraftInventory(block.container.container1);
+        this.right = new CraftInventory(block.container.container2);
     }
 
     public CraftInventoryDoubleChest(CompoundContainer largeChest) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -1896,7 +1896,7 @@ public int applyMending(int amount) {
                 handle.serverLevel(), itemstack, amount
             );
             int i = Math.min(possibleDurabilityFromXp, itemstack.getDamageValue());
-            final int consumedExperience = i * amount / possibleDurabilityFromXp; // Paper - taken from ExperienceOrb#repairPlayerItems
+            final int consumedExperience = i > 0 ? i * amount / possibleDurabilityFromXp : possibleDurabilityFromXp; // Paper - taken from ExperienceOrb#repairPlayerItems + prevent division by 0
             org.bukkit.event.player.PlayerItemMendEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemMendEvent(handle, orb, itemstack, stackEntry.get().inSlot(), i, consumedExperience);
             i = event.getRepairAmount();
             orb.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DESPAWN);

File: paper-server/src/main/java/io/papermc/paper/registry/PaperRegistries.java
Patch:
@@ -104,7 +104,7 @@ public final class PaperRegistries {
             start(Registries.TRIM_PATTERN, RegistryKey.TRIM_PATTERN).craft(TrimPattern.class, CraftTrimPattern::new).build().delayed(),
             start(Registries.DAMAGE_TYPE, RegistryKey.DAMAGE_TYPE).craft(DamageType.class, CraftDamageType::new).build().delayed(),
             start(Registries.WOLF_VARIANT, RegistryKey.WOLF_VARIANT).craft(Wolf.Variant.class, CraftWolf.CraftVariant::new).build().delayed(),
-            start(Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT).craft(Enchantment.class, CraftEnchantment::new).writable(PaperEnchantmentRegistryEntry.PaperBuilder::new).withSerializationUpdater(FieldRename.ENCHANTMENT_RENAME).delayed(),
+            start(Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT).craft(Enchantment.class, CraftEnchantment::new).serializationUpdater(FieldRename.ENCHANTMENT_RENAME).writable(PaperEnchantmentRegistryEntry.PaperBuilder::new).delayed(),
             start(Registries.JUKEBOX_SONG, RegistryKey.JUKEBOX_SONG).craft(JukeboxSong.class, CraftJukeboxSong::new).build().delayed(),
             start(Registries.BANNER_PATTERN, RegistryKey.BANNER_PATTERN).craft(PatternType.class, CraftPatternType::new).build().delayed(),
             start(Registries.PAINTING_VARIANT, RegistryKey.PAINTING_VARIANT).craft(Art.class, CraftArt::new).writable(PaperPaintingVariantRegistryEntry.PaperBuilder::new).delayed(),

File: paper-api/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
Patch:
@@ -55,7 +55,7 @@ public BlockData getEffectBlock() {
      * @param effectBlock block effect
      */
     public void setEffectBlock(final BlockData effectBlock) {
-        this.effectBlock = effectBlock;
+        this.effectBlock = effectBlock.clone();
     }
 
     /**

File: paper-api/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
Patch:
@@ -79,7 +79,7 @@ public Location getFrom() {
     public void setFrom(final Location from) {
         Preconditions.checkArgument(from != null, "Cannot use null from location!");
         Preconditions.checkArgument(from.getWorld() != null, "Cannot use from location with null world!");
-        this.from = from;
+        this.from = from.clone();
     }
 
     /**

File: paper-api/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
Patch:
@@ -66,7 +66,7 @@ public Cause getCause() {
      * @param location the spawn location, or {@code null} to remove the spawn location
      */
     public void setLocation(final @Nullable Location location) {
-        this.location = location;
+        this.location = location != null ? location.clone() : null;
     }
 
     /**

File: paper-api/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
Patch:
@@ -53,7 +53,7 @@ public Location getFrom() {
      */
     public void setFrom(final Location from) {
         this.validateLocation(from);
-        this.from = from;
+        this.from = from.clone();
     }
 
     /**
@@ -72,7 +72,7 @@ public Location getTo() {
      */
     public void setTo(final Location to) {
         this.validateLocation(to);
-        this.to = to;
+        this.to = to.clone();
     }
 
     /**

File: paper-api/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
Patch:
@@ -52,7 +52,7 @@ public Location getNewCenter() {
      * @param newCenter the new center
      */
     public void setNewCenter(final Location newCenter) {
-        this.newCenter = newCenter;
+        this.newCenter = newCenter.clone();
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/Vibration.java
Patch:
@@ -79,7 +79,7 @@ public static class BlockDestination implements Destination {
             private final Location block;
 
             public BlockDestination(@NotNull Location block) {
-                this.block = block;
+                this.block = block.clone();
             }
 
             public BlockDestination(@NotNull Block block) {
@@ -88,7 +88,7 @@ public BlockDestination(@NotNull Block block) {
 
             @NotNull
             public Location getLocation() {
-                return block;
+                return block.clone();
             }
 
             @NotNull

File: paper-api/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
Patch:
@@ -65,7 +65,7 @@ public Vector getVelocity() {
      * @param vel the velocity of the item being dispensed
      */
     public void setVelocity(@NotNull Vector vel) {
-        velocity = vel;
+        velocity = vel.clone();
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
Patch:
@@ -43,7 +43,7 @@ public void setNewData(@NotNull BlockData newData) {
         Preconditions.checkArgument(newData != null, "newData null");
         Preconditions.checkArgument(this.newData.getMaterial().equals(newData.getMaterial()), "Cannot change fluid type");
 
-        this.newData = newData;
+        this.newData = newData.clone();
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/event/entity/EntityKnockbackEvent.java
Patch:
@@ -99,7 +99,7 @@ public Vector getFinalKnockback() {
     public void setFinalKnockback(@NotNull Vector knockback) {
         Preconditions.checkArgument(knockback != null, "Knockback cannot be null");
 
-        this.knockback = knockback;
+        this.knockback = knockback.clone();
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
Patch:
@@ -52,7 +52,7 @@ public Location getFrom() {
      * @param from New location this entity moved from
      */
     public void setFrom(@NotNull Location from) {
-        this.from = from;
+        this.from = from.clone();
     }
 
     /**
@@ -71,7 +71,7 @@ public Location getTo() {
      * @param to New Location this entity moved to
      */
     public void setTo(@Nullable Location to) {
-        this.to = to;
+        this.to = to != null ? to.clone() : null;
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
Patch:
@@ -241,7 +241,7 @@ public EquipmentSlot getHand() {
     @Nullable
     @Deprecated // Paper
     public Vector getClickedPosition() {
-        return clickedPosistion;
+        return clickedPosistion.clone();
     }
 
     // Paper start

File: paper-api/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
Patch:
@@ -70,7 +70,7 @@ public Location getFrom() {
      */
     public void setFrom(@NotNull Location from) {
         validateLocation(from);
-        this.from = from;
+        this.from = from.clone();
     }
 
     /**
@@ -90,7 +90,7 @@ public Location getTo() {
      */
     public void setTo(@NotNull Location to) {
         validateLocation(to);
-        this.to = to;
+        this.to = to.clone();
     }
 
     // Paper start - PlayerMoveEvent improvements

File: paper-api/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
Patch:
@@ -69,7 +69,7 @@ public void setRespawnLocation(@NotNull Location respawnLocation) {
         Preconditions.checkArgument(respawnLocation != null, "Respawn location can not be null");
         Preconditions.checkArgument(respawnLocation.getWorld() != null, "Respawn world can not be null");
 
-        this.respawnLocation = respawnLocation;
+        this.respawnLocation = respawnLocation.clone();
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
Patch:
@@ -45,7 +45,7 @@ public Vector getVelocity() {
      * @param velocity The velocity vector that will be sent to the player
      */
     public void setVelocity(@NotNull Vector velocity) {
-        this.velocity = velocity;
+        this.velocity = velocity.clone();
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/event/world/AsyncStructureSpawnEvent.java
Patch:
@@ -45,7 +45,7 @@ public Structure getStructure() {
      */
     @NotNull
     public BoundingBox getBoundingBox() {
-        return boundingBox;
+        return boundingBox.clone();
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/loot/LootContext.java
Patch:
@@ -24,7 +24,7 @@ public final class LootContext {
     private LootContext(@NotNull Location location, float luck, int lootingModifier, @Nullable Entity lootedEntity, @Nullable HumanEntity killer) {
         Preconditions.checkArgument(location != null, "LootContext location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "LootContext World cannot be null");
-        this.location = location;
+        this.location = location.clone();
         this.luck = luck;
         this.lootingModifier = lootingModifier;
         this.lootedEntity = lootedEntity;
@@ -38,7 +38,7 @@ private LootContext(@NotNull Location location, float luck, int lootingModifier,
      */
     @NotNull
     public Location getLocation() {
-        return location;
+        return location.clone();
     }
 
     /**
@@ -110,7 +110,7 @@ public static class Builder {
          * @param location the location the LootContext should use
          */
         public Builder(@NotNull Location location) {
-            this.location = location;
+            this.location = location.clone();
         }
 
         /**

File: paper-api/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
Patch:
@@ -37,7 +37,7 @@ public Location getSpawnLocation() {
      * @param location the spawn location
      */
     public void setSpawnLocation(@NotNull Location location) {
-        this.spawnLocation = location;
+        this.spawnLocation = location.clone();
     }
 
     @NotNull

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftMusicInstrument.java
Patch:
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit;
 
 import com.google.common.base.Preconditions;
+import io.papermc.paper.util.Holderable;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.item.Instrument;
@@ -75,8 +76,7 @@ public Holder<Instrument> getHolder() { // Paper - switch to Holder
     @NotNull
     @Override
     public NamespacedKey getKey() {
-        if (true) return java.util.Objects.requireNonNull(org.bukkit.Registry.INSTRUMENT.getKey(this), () -> this + " doesn't have a key"); // Paper
-        return this.key;
+        return Holderable.super.getKey();
     }
 
     // Paper start - add translationKey methods

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java
Patch:
@@ -42,7 +42,6 @@ public StructureType getStructureType() {
 
     @Override
     public NamespacedKey getKey() {
-        if (true) return java.util.Objects.requireNonNull(org.bukkit.Registry.STRUCTURE.getKey(this), () -> this + " doesn't have a key"); // Paper
         return this.key;
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java
Patch:
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.inventory.trim;
 
 import com.google.common.base.Preconditions;
+import io.papermc.paper.util.Holderable;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.network.chat.contents.TranslatableContents;
@@ -77,8 +78,7 @@ public Holder<net.minecraft.world.item.equipment.trim.TrimMaterial> getHolder()
     @Override
     @NotNull
     public NamespacedKey getKey() {
-        if (true) return java.util.Objects.requireNonNull(org.bukkit.Registry.TRIM_MATERIAL.getKey(this), () -> this + " doesn't have a key"); // Paper
-        return this.key;
+        return Holderable.super.getKey();
     }
 
     @NotNull

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java
Patch:
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.inventory.trim;
 
 import com.google.common.base.Preconditions;
+import io.papermc.paper.util.Holderable;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.network.chat.contents.TranslatableContents;
@@ -77,8 +78,7 @@ public Holder<net.minecraft.world.item.equipment.trim.TrimPattern> getHolder() {
     @Override
     @NotNull
     public NamespacedKey getKey() {
-        if (true) return java.util.Objects.requireNonNull(org.bukkit.Registry.TRIM_PATTERN.getKey(this), () -> this + " doesn't have a key"); // Paper
-        return this.key;
+        return Holderable.super.getKey();
     }
 
     @NotNull

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
Patch:
@@ -45,7 +45,7 @@ public void setCurrentBoostTicks(int ticks) {
         }
 
         int max = this.getHandle().steering.boostTimeTotal();
-        Preconditions.checkArgument(ticks >= 0 && ticks <= max, "boost ticks must not exceed 0 or %d (inclusive)", max);
+        Preconditions.checkArgument(ticks >= 0 && ticks <= max, "boost ticks must not exceed 0 or %s (inclusive)", max);
 
         this.getHandle().steering.boostTime = ticks;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
Patch:
@@ -55,7 +55,7 @@ public void setCurrentBoostTicks(int ticks) {
         }
 
         int max = this.getHandle().steering.boostTimeTotal();
-        Preconditions.checkArgument(ticks >= 0 && ticks <= max, "boost ticks must not exceed 0 or %d (inclusive)", max);
+        Preconditions.checkArgument(ticks >= 0 && ticks <= max, "boost ticks must not exceed 0 or %s (inclusive)", max);
 
         this.getHandle().steering.boostTime = ticks;
     }

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Thrown whenever a LivingEntity dies
  */
-public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Cancellable {  // Paper - make cancellable
+public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Cancellable { // Paper - make cancellable
     private static final HandlerList handlers = new HandlerList();
     private final DamageSource damageSource;
     private final List<ItemStack> drops;

File: paper-api/src/main/java/org/bukkit/inventory/EquipmentSlotGroup.java
Patch:
@@ -25,7 +25,7 @@ public final class EquipmentSlotGroup implements Predicate<EquipmentSlot> {
     public static final EquipmentSlotGroup LEGS = get("legs", EquipmentSlot.LEGS);
     public static final EquipmentSlotGroup CHEST = get("chest", EquipmentSlot.CHEST);
     public static final EquipmentSlotGroup HEAD = get("head", EquipmentSlot.HEAD);
-    public static final EquipmentSlotGroup ARMOR = get("armor", (test) -> test == EquipmentSlot.FEET || test == EquipmentSlot.LEGS || test == EquipmentSlot.CHEST || test == EquipmentSlot.HEAD || test == EquipmentSlot.BODY, EquipmentSlot.CHEST);  // Paper - add missing slot type
+    public static final EquipmentSlotGroup ARMOR = get("armor", (test) -> test == EquipmentSlot.FEET || test == EquipmentSlot.LEGS || test == EquipmentSlot.CHEST || test == EquipmentSlot.HEAD || test == EquipmentSlot.BODY, EquipmentSlot.CHEST); // Paper - add missing slot type
     public static final EquipmentSlotGroup BODY = get("body", EquipmentSlot.BODY); // Paper - add missing slot group
     //
     private final String key;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -1252,12 +1252,12 @@ public float getYaw() {
 
     // Paper start - missing entity api
     @Override
-    public boolean isInvisible() {  // Paper - moved up from LivingEntity
+    public boolean isInvisible() { // Paper - moved up from LivingEntity
         return this.getHandle().isInvisible();
     }
 
     @Override
-    public void setInvisible(boolean invisible) {  // Paper - moved up from LivingEntity
+    public void setInvisible(boolean invisible) { // Paper - moved up from LivingEntity
         this.getHandle().persistentInvisibility = invisible;
         this.getHandle().setSharedFlag(Entity.FLAG_INVISIBLE, invisible);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
Patch:
@@ -28,7 +28,7 @@ public void run() {
         // Paper start - name threads according to running plugin
         final String nameBefore = thread.getName();
         thread.setName(nameBefore + " - " + this.getOwner().getName());
-        try { synchronized (this.workers) {  // Paper end - name threads according to running plugin
+        try { synchronized (this.workers) { // Paper end - name threads according to running plugin
             if (this.getPeriod() == CraftTask.CANCEL) {
                 // Never continue running after cancelled.
                 // Checking this with the lock is important!

File: paper-server/src/test/java/org/bukkit/event/EntityRemoveEventTest.java
Patch:
@@ -103,6 +103,9 @@ private boolean check(String owner, String name, String desc) throws ClassNotFou
         }
 
         Class<?> ownerClass = Class.forName(owner.replace('/', '.'), false, this.getClass().getClassLoader());
+        if (ownerClass == EntityAccess.class) {
+            return false;
+        }
 
         // Found missing discard, remove or setRemoved method call
         return EntityAccess.class.isAssignableFrom(ownerClass);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -857,7 +857,7 @@ public int getPortalCooldown() {
 
     @Override
     public void setPortalCooldown(int cooldown) {
-        this.getHandle().setPortalCooldown(cooldown);;
+        this.getHandle().setPortalCooldown(cooldown);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
Patch:
@@ -40,7 +40,7 @@ public void setHasBeenShot(boolean beenShot) {
 
     @Override
     public boolean canHitEntity(org.bukkit.entity.Entity entity) {
-        return this.getHandle().canHitEntity(((CraftEntity) entity).getHandle());
+        return this.getHandle().canHitEntityPublic(((CraftEntity) entity).getHandle());
     }
 
     @Override

File: paper-api-generator/src/main/java/io/papermc/generator/types/GeneratedKeyType.java
Patch:
@@ -54,7 +54,7 @@ public class GeneratedKeyType<T, A> extends SimpleGenerator {
     private static final Map<ResourceKey<? extends Registry<?>>, RegistrySetBuilder.RegistryBootstrap<?>> VANILLA_REGISTRY_ENTRIES = VanillaRegistries.BUILDER.entries.stream()
             .collect(Collectors.toMap(RegistrySetBuilder.RegistryStub::key, RegistrySetBuilder.RegistryStub::bootstrap));
 
-    private static final Map<ResourceKey<? extends Registry<?>>, RegistrySetBuilder.RegistryBootstrap<?>> EXPERIMENTAL_REGISTRY_ENTRIES = Map.of();
+    private static final Map<ResourceKey<? extends Registry<?>>, RegistrySetBuilder.RegistryBootstrap<?>> EXPERIMENTAL_REGISTRY_ENTRIES = Map.of(); // Update for Experimental API
     private static final Map<RegistryKey<?>, String> REGISTRY_KEY_FIELD_NAMES;
     static {
         final Map<RegistryKey<?>, String> map = new HashMap<>();
@@ -148,7 +148,7 @@ protected TypeSpec getTypeSpec() {
                 .initializer("$N(key($S))", createMethod.build(), keyPath)
                 .addJavadoc(Javadocs.getVersionDependentField("{@code $L}"), key.location().toString());
             if (experimental.contains(key)) {
-                //fieldBuilder.addAnnotations(experimentalAnnotations(MinecraftExperimental.Requires.WINTER_DROP)); // Update for Experimental API
+                fieldBuilder.addAnnotations(experimentalAnnotations(null)); // Update for Experimental API
             } else {
                 allExperimental = false;
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMusicInstrument.java
Patch:
@@ -37,7 +37,7 @@ public class CraftMetaMusicInstrument extends CraftMetaItem implements MusicInst
     CraftMetaMusicInstrument(Map<String, Object> map) {
         super(map);
 
-        String instrumentString = SerializableMeta.getString(map, CraftMetaMusicInstrument.GOAT_HORN_INSTRUMENT.BUKKIT, true);
+        Object instrumentString = SerializableMeta.getObject(Object.class, map, CraftMetaMusicInstrument.GOAT_HORN_INSTRUMENT.BUKKIT, true); // Paper - switch to Holder
         if (instrumentString != null) {
             this.instrument = CraftMusicInstrument.stringToBukkit(instrumentString);
         }

File: paper-server/src/test/java/org/bukkit/registry/RegistryConversionTest.java
Patch:
@@ -269,6 +269,7 @@ public void testMinecraftToBukkitNoValidMinecraft(io.papermc.paper.registry.Regi
                                                       Class<? extends Keyed> craftClazz, Class<?> minecraftClazz) throws IllegalAccessException {
         this.checkValidMinecraftToBukkit(clazz);
 
+        if (type == io.papermc.paper.registry.RegistryKey.TRIM_MATERIAL || type == io.papermc.paper.registry.RegistryKey.TRIM_PATTERN || type == io.papermc.paper.registry.RegistryKey.INSTRUMENT) return; // Paper - manually skip for now
         try {
 
             Object minecraft = mock(minecraftClazz);

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
Patch:
@@ -247,6 +247,7 @@ public enum DamageModifier {
          * raw {@link EntityDamageEvent#getDamage()}.
          */
         BASE,
+        INVULNERABILITY_REDUCTION, // Paper - fix invulnerability reduction in EntityDamageEvent - needs to be right under BASE as its the first reduction all others are based on
         /**
          * This represents the damage increased by freezing status.
          */

File: paper-api-generator/generated/com/destroystokyo/paper/entity/ai/VanillaGoal.java
Patch:
@@ -51,7 +51,7 @@
 import org.bukkit.entity.Wither;
 import org.bukkit.entity.Wolf;
 import org.bukkit.entity.Zombie;
-import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for Mob Goals.
@@ -67,6 +67,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 public interface VanillaGoal<T extends Mob> extends Goal<T> {
     GoalKey<AbstractHorse> RANDOM_STAND = create("random_stand", AbstractHorse.class);
 
@@ -440,8 +441,7 @@ public interface VanillaGoal<T extends Mob> extends Goal<T> {
 
     GoalKey<Zombie> ZOMBIE_ATTACK_TURTLE_EGG = create("zombie_attack_turtle_egg", Zombie.class);
 
-    private static <T extends Mob> @NonNull GoalKey<T> create(final @NonNull String key,
-            final @NonNull Class<T> type) {
+    private static <T extends Mob> GoalKey<T> create(final String key, final Class<T> type) {
         return GoalKey.of(type, NamespacedKey.minecraft(key));
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/AttributeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.attribute.Attribute;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#ATTRIBUTE}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class AttributeKeys {
     /**
@@ -253,7 +254,7 @@ public final class AttributeKeys {
     private AttributeKeys() {
     }
 
-    private static @NonNull TypedKey<Attribute> create(final @NonNull Key key) {
+    private static TypedKey<Attribute> create(final Key key) {
         return TypedKey.create(RegistryKey.ATTRIBUTE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/BannerPatternKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.block.banner.PatternType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#BANNER_PATTERN}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class BannerPatternKeys {
     /**
@@ -337,7 +338,7 @@ private BannerPatternKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<PatternType> create(final @NonNull Key key) {
+    public static TypedKey<PatternType> create(final Key key) {
         return TypedKey.create(RegistryKey.BANNER_PATTERN, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/BiomeKeys.java
Patch:
@@ -8,8 +8,8 @@
 import net.kyori.adventure.key.Key;
 import org.bukkit.MinecraftExperimental;
 import org.bukkit.block.Biome;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#BIOME}.
@@ -25,6 +25,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class BiomeKeys {
     /**
@@ -494,7 +495,7 @@ private BiomeKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<Biome> create(final @NonNull Key key) {
+    public static TypedKey<Biome> create(final Key key) {
         return TypedKey.create(RegistryKey.BIOME, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/BlockTypeKeys.java
Patch:
@@ -8,8 +8,8 @@
 import net.kyori.adventure.key.Key;
 import org.bukkit.MinecraftExperimental;
 import org.bukkit.block.BlockType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#BLOCK}.
@@ -25,6 +25,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class BlockTypeKeys {
     /**
@@ -7666,7 +7667,7 @@ public final class BlockTypeKeys {
     private BlockTypeKeys() {
     }
 
-    private static @NonNull TypedKey<BlockType> create(final @NonNull Key key) {
+    private static TypedKey<BlockType> create(final Key key) {
         return TypedKey.create(RegistryKey.BLOCK, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/CatVariantKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.entity.Cat;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#CAT_VARIANT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class CatVariantKeys {
     /**
@@ -106,7 +107,7 @@ public final class CatVariantKeys {
     private CatVariantKeys() {
     }
 
-    private static @NonNull TypedKey<Cat.Type> create(final @NonNull Key key) {
+    private static TypedKey<Cat.Type> create(final Key key) {
         return TypedKey.create(RegistryKey.CAT_VARIANT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/DamageTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.damage.DamageType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#DAMAGE_TYPE}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class DamageTypeKeys {
     /**
@@ -379,7 +380,7 @@ private DamageTypeKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<DamageType> create(final @NonNull Key key) {
+    public static TypedKey<DamageType> create(final Key key) {
         return TypedKey.create(RegistryKey.DAMAGE_TYPE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/FluidKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.Fluid;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#FLUID}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class FluidKeys {
     /**
@@ -64,7 +65,7 @@ public final class FluidKeys {
     private FluidKeys() {
     }
 
-    private static @NonNull TypedKey<Fluid> create(final @NonNull Key key) {
+    private static TypedKey<Fluid> create(final Key key) {
         return TypedKey.create(RegistryKey.FLUID, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/FrogVariantKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.entity.Frog;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#FROG_VARIANT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class FrogVariantKeys {
     /**
@@ -50,7 +51,7 @@ public final class FrogVariantKeys {
     private FrogVariantKeys() {
     }
 
-    private static @NonNull TypedKey<Frog.Variant> create(final @NonNull Key key) {
+    private static TypedKey<Frog.Variant> create(final Key key) {
         return TypedKey.create(RegistryKey.FROG_VARIANT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/GameEventKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.GameEvent;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#GAME_EVENT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class GameEventKeys {
     /**
@@ -456,7 +457,7 @@ private GameEventKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<GameEvent> create(final @NonNull Key key) {
+    public static TypedKey<GameEvent> create(final Key key) {
         return TypedKey.create(RegistryKey.GAME_EVENT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/ItemTypeKeys.java
Patch:
@@ -8,8 +8,8 @@
 import net.kyori.adventure.key.Key;
 import org.bukkit.MinecraftExperimental;
 import org.bukkit.inventory.ItemType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#ITEM}.
@@ -25,6 +25,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class ItemTypeKeys {
     /**
@@ -9703,7 +9704,7 @@ public final class ItemTypeKeys {
     private ItemTypeKeys() {
     }
 
-    private static @NonNull TypedKey<ItemType> create(final @NonNull Key key) {
+    private static TypedKey<ItemType> create(final Key key) {
         return TypedKey.create(RegistryKey.ITEM, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/JukeboxSongKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.JukeboxSong;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#JUKEBOX_SONG}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class JukeboxSongKeys {
     /**
@@ -169,7 +170,7 @@ private JukeboxSongKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<JukeboxSong> create(final @NonNull Key key) {
+    public static TypedKey<JukeboxSong> create(final Key key) {
         return TypedKey.create(RegistryKey.JUKEBOX_SONG, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/MapDecorationTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.map.MapCursor;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#MAP_DECORATION_TYPE}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class MapDecorationTypeKeys {
     /**
@@ -274,7 +275,7 @@ public final class MapDecorationTypeKeys {
     private MapDecorationTypeKeys() {
     }
 
-    private static @NonNull TypedKey<MapCursor.Type> create(final @NonNull Key key) {
+    private static TypedKey<MapCursor.Type> create(final Key key) {
         return TypedKey.create(RegistryKey.MAP_DECORATION_TYPE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/MenuTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.inventory.MenuType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#MENU}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class MenuTypeKeys {
     /**
@@ -204,7 +205,7 @@ public final class MenuTypeKeys {
     private MenuTypeKeys() {
     }
 
-    private static @NonNull TypedKey<MenuType> create(final @NonNull Key key) {
+    private static TypedKey<MenuType> create(final Key key) {
         return TypedKey.create(RegistryKey.MENU, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/MobEffectKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.potion.PotionEffectType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#MOB_EFFECT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class MobEffectKeys {
     /**
@@ -302,7 +303,7 @@ public final class MobEffectKeys {
     private MobEffectKeys() {
     }
 
-    private static @NonNull TypedKey<PotionEffectType> create(final @NonNull Key key) {
+    private static TypedKey<PotionEffectType> create(final Key key) {
         return TypedKey.create(RegistryKey.MOB_EFFECT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/PaintingVariantKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.Art;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#PAINTING_VARIANT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class PaintingVariantKeys {
     /**
@@ -386,7 +387,7 @@ private PaintingVariantKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<Art> create(final @NonNull Key key) {
+    public static TypedKey<Art> create(final Key key) {
         return TypedKey.create(RegistryKey.PAINTING_VARIANT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/SoundEventKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.Sound;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#SOUND_EVENT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class SoundEventKeys {
     /**
@@ -11481,7 +11482,7 @@ public final class SoundEventKeys {
     private SoundEventKeys() {
     }
 
-    private static @NonNull TypedKey<Sound> create(final @NonNull Key key) {
+    private static TypedKey<Sound> create(final Key key) {
         return TypedKey.create(RegistryKey.SOUND_EVENT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/StructureKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.generator.structure.Structure;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#STRUCTURE}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class StructureKeys {
     /**
@@ -274,7 +275,7 @@ private StructureKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<Structure> create(final @NonNull Key key) {
+    public static TypedKey<Structure> create(final Key key) {
         return TypedKey.create(RegistryKey.STRUCTURE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/StructureTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.generator.structure.StructureType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#STRUCTURE_TYPE}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class StructureTypeKeys {
     /**
@@ -141,7 +142,7 @@ public final class StructureTypeKeys {
     private StructureTypeKeys() {
     }
 
-    private static @NonNull TypedKey<StructureType> create(final @NonNull Key key) {
+    private static TypedKey<StructureType> create(final Key key) {
         return TypedKey.create(RegistryKey.STRUCTURE_TYPE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/TrimMaterialKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.inventory.meta.trim.TrimMaterial;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#TRIM_MATERIAL}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class TrimMaterialKeys {
     /**
@@ -106,7 +107,7 @@ private TrimMaterialKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<TrimMaterial> create(final @NonNull Key key) {
+    public static TypedKey<TrimMaterial> create(final Key key) {
         return TypedKey.create(RegistryKey.TRIM_MATERIAL, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/TrimPatternKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.inventory.meta.trim.TrimPattern;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#TRIM_PATTERN}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class TrimPatternKeys {
     /**
@@ -162,7 +163,7 @@ private TrimPatternKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<TrimPattern> create(final @NonNull Key key) {
+    public static TypedKey<TrimPattern> create(final Key key) {
         return TypedKey.create(RegistryKey.TRIM_PATTERN, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/VillagerProfessionKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.entity.Villager;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#VILLAGER_PROFESSION}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class VillagerProfessionKeys {
     /**
@@ -134,7 +135,7 @@ public final class VillagerProfessionKeys {
     private VillagerProfessionKeys() {
     }
 
-    private static @NonNull TypedKey<Villager.Profession> create(final @NonNull Key key) {
+    private static TypedKey<Villager.Profession> create(final Key key) {
         return TypedKey.create(RegistryKey.VILLAGER_PROFESSION, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/VillagerTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.entity.Villager;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#VILLAGER_TYPE}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class VillagerTypeKeys {
     /**
@@ -78,7 +79,7 @@ public final class VillagerTypeKeys {
     private VillagerTypeKeys() {
     }
 
-    private static @NonNull TypedKey<Villager.Type> create(final @NonNull Key key) {
+    private static TypedKey<Villager.Type> create(final Key key) {
         return TypedKey.create(RegistryKey.VILLAGER_TYPE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/WolfVariantKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.entity.Wolf;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#WOLF_VARIANT}.
@@ -24,6 +24,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class WolfVariantKeys {
     /**
@@ -99,7 +100,7 @@ private WolfVariantKeys() {
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NonNull TypedKey<Wolf.Variant> create(final @NonNull Key key) {
+    public static TypedKey<Wolf.Variant> create(final Key key) {
         return TypedKey.create(RegistryKey.WOLF_VARIANT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/tags/EnchantmentTagKeys.java
Patch:
@@ -8,8 +8,8 @@
 import net.kyori.adventure.key.Key;
 import org.bukkit.MinecraftExperimental;
 import org.bukkit.enchantments.Enchantment;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#ENCHANTMENT}.
@@ -25,6 +25,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class EnchantmentTagKeys {
     /**
@@ -317,7 +318,7 @@ private EnchantmentTagKeys() {
      * @return a new tag key
      */
     @ApiStatus.Experimental
-    public static @NonNull TagKey<Enchantment> create(final @NonNull Key key) {
+    public static TagKey<Enchantment> create(final Key key) {
         return TagKey.create(RegistryKey.ENCHANTMENT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/tags/ItemTypeTagKeys.java
Patch:
@@ -8,8 +8,8 @@
 import net.kyori.adventure.key.Key;
 import org.bukkit.MinecraftExperimental;
 import org.bukkit.inventory.ItemType;
-import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Vanilla keys for {@link RegistryKey#ITEM}.
@@ -25,6 +25,7 @@
         "SpellCheckingInspection"
 })
 @GeneratedFrom("1.21.3")
+@NullMarked
 @ApiStatus.Experimental
 public final class ItemTypeTagKeys {
     /**
@@ -1236,7 +1237,7 @@ private ItemTypeTagKeys() {
      * @return a new tag key
      */
     @ApiStatus.Experimental
-    public static @NonNull TagKey<ItemType> create(final @NonNull Key key) {
+    public static TagKey<ItemType> create(final Key key) {
         return TagKey.create(RegistryKey.ITEM, key);
     }
 }

File: paper-api-generator/src/main/java/io/papermc/generator/Generators.java
Patch:
@@ -39,7 +39,6 @@ public interface Generators {
         // built-ins
         simpleKey("GameEventKeys", GameEvent.class, Registries.GAME_EVENT, RegistryKey.GAME_EVENT, true),
         simpleKey("StructureTypeKeys", StructureType.class, Registries.STRUCTURE_TYPE, RegistryKey.STRUCTURE_TYPE, false),
-        simpleKey("InstrumentKeys", MusicInstrument.class, Registries.INSTRUMENT, RegistryKey.INSTRUMENT, false),
         simpleKey("MobEffectKeys", PotionEffectType.class, Registries.MOB_EFFECT, RegistryKey.MOB_EFFECT, false),
         simpleKey("BlockTypeKeys", BlockType.class, Registries.BLOCK, RegistryKey.BLOCK, false),
         simpleKey("ItemTypeKeys", ItemType.class, Registries.ITEM, RegistryKey.ITEM, false),
@@ -60,10 +59,11 @@ public interface Generators {
         simpleKey("TrimPatternKeys", TrimPattern.class, Registries.TRIM_PATTERN, RegistryKey.TRIM_PATTERN, true),
         simpleKey("DamageTypeKeys", DamageType.class, Registries.DAMAGE_TYPE, RegistryKey.DAMAGE_TYPE, true),
         simpleKey("WolfVariantKeys", Wolf.Variant.class, Registries.WOLF_VARIANT, RegistryKey.WOLF_VARIANT, true),
-        simpleKey("EnchantmentKeys", Enchantment.class, Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT, false),
+        simpleKey("EnchantmentKeys", Enchantment.class, Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT, true),
         simpleKey("JukeboxSongKeys", JukeboxSong.class, Registries.JUKEBOX_SONG, RegistryKey.JUKEBOX_SONG, true),
         simpleKey("BannerPatternKeys", PatternType.class, Registries.BANNER_PATTERN, RegistryKey.BANNER_PATTERN, true),
         simpleKey("PaintingVariantKeys", Art.class, Registries.PAINTING_VARIANT, RegistryKey.PAINTING_VARIANT, true),
+        simpleKey("InstrumentKeys", MusicInstrument.class, Registries.INSTRUMENT, RegistryKey.INSTRUMENT, true),
 
         // tags
         simpleTagKey("EnchantmentTagKeys", Enchantment.class, Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT),

File: paper-api-generator/src/main/java/io/papermc/generator/types/GeneratedKeyType.java
Patch:
@@ -42,7 +42,6 @@
 
 import static com.squareup.javapoet.TypeSpec.classBuilder;
 import static io.papermc.generator.utils.Annotations.EXPERIMENTAL_API_ANNOTATION;
-import static io.papermc.generator.utils.Annotations.NOT_NULL;
 import static io.papermc.generator.utils.Annotations.experimentalAnnotations;
 import static java.util.Objects.requireNonNull;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -96,14 +95,14 @@ public GeneratedKeyType(final String keysClassName, final Class<A> apiType, fina
     }
 
     private MethodSpec.Builder createMethod(final TypeName returnType) {
-        final TypeName keyType = TypeName.get(Key.class).annotated(NOT_NULL);
+        final TypeName keyType = TypeName.get(Key.class);
 
         final ParameterSpec keyParam = ParameterSpec.builder(keyType, "key", FINAL).build();
         final MethodSpec.Builder create = MethodSpec.methodBuilder("create")
             .addModifiers(this.publicCreateKeyMethod ? PUBLIC : PRIVATE, STATIC)
             .addParameter(keyParam)
             .addCode("return $T.create($T.$L, $N);", TypedKey.class, RegistryKey.class, requireNonNull(REGISTRY_KEY_FIELD_NAMES.get(this.apiRegistryKey), "Missing field for " + this.apiRegistryKey), keyParam)
-            .returns(returnType.annotated(NOT_NULL));
+            .returns(returnType);
         if (this.publicCreateKeyMethod) {
             create.addAnnotation(EXPERIMENTAL_API_ANNOTATION); // TODO remove once not experimental
             create.addJavadoc(CREATE_JAVADOC, this.apiType, this.registryKey.location().toString());

File: paper-api-generator/src/main/java/io/papermc/generator/types/GeneratedTagKeyType.java
Patch:
@@ -26,7 +26,6 @@
 
 import static com.squareup.javapoet.TypeSpec.classBuilder;
 import static io.papermc.generator.utils.Annotations.EXPERIMENTAL_API_ANNOTATION;
-import static io.papermc.generator.utils.Annotations.NOT_NULL;
 import static io.papermc.generator.utils.Annotations.experimentalAnnotations;
 import static java.util.Objects.requireNonNull;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -73,14 +72,14 @@ public GeneratedTagKeyType(final String keysClassName, final Class<A> apiType, f
     }
 
     private MethodSpec.Builder createMethod(final TypeName returnType) {
-        final TypeName keyType = TypeName.get(Key.class).annotated(NOT_NULL);
+        final TypeName keyType = TypeName.get(Key.class);
 
         final ParameterSpec keyParam = ParameterSpec.builder(keyType, "key", FINAL).build();
         final MethodSpec.Builder create = MethodSpec.methodBuilder("create")
             .addModifiers(this.publicCreateKeyMethod ? PUBLIC : PRIVATE, STATIC)
             .addParameter(keyParam)
             .addCode("return $T.create($T.$L, $N);", TagKey.class, RegistryKey.class, requireNonNull(REGISTRY_KEY_FIELD_NAMES.get(this.apiRegistryKey), "Missing field for " + this.apiRegistryKey), keyParam)
-            .returns(returnType.annotated(NOT_NULL));
+            .returns(returnType);
         if (this.publicCreateKeyMethod) {
             create.addAnnotation(EXPERIMENTAL_API_ANNOTATION); // TODO remove once not experimental
             create.addJavadoc(CREATE_JAVADOC, this.apiType, this.registryKey.location().toString());

File: paper-api-generator/generated/com/destroystokyo/paper/entity/ai/VanillaGoal.java
Patch:
@@ -51,7 +51,7 @@
 import org.bukkit.entity.Wither;
 import org.bukkit.entity.Wolf;
 import org.bukkit.entity.Zombie;
-import org.jetbrains.annotations.NotNull;
+import org.checkerframework.checker.nullness.qual.NonNull;
 
 /**
  * Vanilla keys for Mob Goals.
@@ -436,8 +436,8 @@ public interface VanillaGoal<T extends Mob> extends Goal<T> {
 
     GoalKey<Zombie> ZOMBIE_ATTACK_TURTLE_EGG = create("zombie_attack_turtle_egg", Zombie.class);
 
-    private static <T extends Mob> @NotNull GoalKey<T> create(final @NotNull String key,
-            final @NotNull Class<T> type) {
+    private static <T extends Mob> @NonNull GoalKey<T> create(final @NonNull String key,
+            final @NonNull Class<T> type) {
         return GoalKey.of(type, NamespacedKey.minecraft(key));
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/BiomeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.block.Biome;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#BIOME}.
@@ -478,13 +478,13 @@ private BiomeKeys() {
     }
 
     /**
-     * Creates a key for {@link Biome} in a registry.
+     * Creates a key for {@link Biome} in the registry {@code minecraft:worldgen/biome}.
      *
      * @param key the value's key in the registry
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NotNull TypedKey<Biome> create(final @NotNull Key key) {
+    public static @NonNull TypedKey<Biome> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.BIOME, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/DamageTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.damage.DamageType;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#DAMAGE_TYPE}.
@@ -359,13 +359,13 @@ private DamageTypeKeys() {
     }
 
     /**
-     * Creates a key for {@link DamageType} in a registry.
+     * Creates a key for {@link DamageType} in the registry {@code minecraft:damage_type}.
      *
      * @param key the value's key in the registry
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NotNull TypedKey<DamageType> create(final @NotNull Key key) {
+    public static @NonNull TypedKey<DamageType> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.DAMAGE_TYPE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/EnchantmentKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.enchantments.Enchantment;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#ENCHANTMENT}.
@@ -323,7 +323,7 @@ public final class EnchantmentKeys {
     private EnchantmentKeys() {
     }
 
-    private static @NotNull TypedKey<Enchantment> create(final @NotNull Key key) {
+    private static @NonNull TypedKey<Enchantment> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.ENCHANTMENT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/GameEventKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.GameEvent;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#GAME_EVENT}.
@@ -449,7 +449,7 @@ public final class GameEventKeys {
     private GameEventKeys() {
     }
 
-    private static @NotNull TypedKey<GameEvent> create(final @NotNull Key key) {
+    private static @NonNull TypedKey<GameEvent> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.GAME_EVENT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/InstrumentKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.MusicInstrument;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#INSTRUMENT}.
@@ -85,7 +85,7 @@ public final class InstrumentKeys {
     private InstrumentKeys() {
     }
 
-    private static @NotNull TypedKey<MusicInstrument> create(final @NotNull Key key) {
+    private static @NonNull TypedKey<MusicInstrument> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.INSTRUMENT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/ItemTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.inventory.ItemType;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#ITEM}.
@@ -9360,7 +9360,7 @@ public final class ItemTypeKeys {
     private ItemTypeKeys() {
     }
 
-    private static @NotNull TypedKey<ItemType> create(final @NotNull Key key) {
+    private static @NonNull TypedKey<ItemType> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.ITEM, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/MobEffectKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.potion.PotionEffectType;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#MOB_EFFECT}.
@@ -302,7 +302,7 @@ public final class MobEffectKeys {
     private MobEffectKeys() {
     }
 
-    private static @NotNull TypedKey<PotionEffectType> create(final @NotNull Key key) {
+    private static @NonNull TypedKey<PotionEffectType> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.MOB_EFFECT, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/StructureKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.generator.structure.Structure;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#STRUCTURE}.
@@ -268,13 +268,13 @@ private StructureKeys() {
     }
 
     /**
-     * Creates a key for {@link Structure} in a registry.
+     * Creates a key for {@link Structure} in the registry {@code minecraft:worldgen/structure}.
      *
      * @param key the value's key in the registry
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NotNull TypedKey<Structure> create(final @NotNull Key key) {
+    public static @NonNull TypedKey<Structure> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.STRUCTURE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/StructureTypeKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.generator.structure.StructureType;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#STRUCTURE_TYPE}.
@@ -141,7 +141,7 @@ public final class StructureTypeKeys {
     private StructureTypeKeys() {
     }
 
-    private static @NotNull TypedKey<StructureType> create(final @NotNull Key key) {
+    private static @NonNull TypedKey<StructureType> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.STRUCTURE_TYPE, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/TrimMaterialKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.inventory.meta.trim.TrimMaterial;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#TRIM_MATERIAL}.
@@ -100,13 +100,13 @@ private TrimMaterialKeys() {
     }
 
     /**
-     * Creates a key for {@link TrimMaterial} in a registry.
+     * Creates a key for {@link TrimMaterial} in the registry {@code minecraft:trim_material}.
      *
      * @param key the value's key in the registry
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NotNull TypedKey<TrimMaterial> create(final @NotNull Key key) {
+    public static @NonNull TypedKey<TrimMaterial> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.TRIM_MATERIAL, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/TrimPatternKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.inventory.meta.trim.TrimPattern;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#TRIM_PATTERN}.
@@ -156,13 +156,13 @@ private TrimPatternKeys() {
     }
 
     /**
-     * Creates a key for {@link TrimPattern} in a registry.
+     * Creates a key for {@link TrimPattern} in the registry {@code minecraft:trim_pattern}.
      *
      * @param key the value's key in the registry
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NotNull TypedKey<TrimPattern> create(final @NotNull Key key) {
+    public static @NonNull TypedKey<TrimPattern> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.TRIM_PATTERN, key);
     }
 }

File: paper-api-generator/generated/io/papermc/paper/registry/keys/WolfVariantKeys.java
Patch:
@@ -7,8 +7,8 @@
 import io.papermc.paper.registry.TypedKey;
 import net.kyori.adventure.key.Key;
 import org.bukkit.entity.Wolf;
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.jetbrains.annotations.ApiStatus;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Vanilla keys for {@link RegistryKey#WOLF_VARIANT}.
@@ -93,13 +93,13 @@ private WolfVariantKeys() {
     }
 
     /**
-     * Creates a key for {@link Wolf.Variant} in a registry.
+     * Creates a key for {@link Wolf.Variant} in the registry {@code minecraft:wolf_variant}.
      *
      * @param key the value's key in the registry
      * @return a new typed key
      */
     @ApiStatus.Experimental
-    public static @NotNull TypedKey<Wolf.Variant> create(final @NotNull Key key) {
+    public static @NonNull TypedKey<Wolf.Variant> create(final @NonNull Key key) {
         return TypedKey.create(RegistryKey.WOLF_VARIANT, key);
     }
 }

File: paper-api-generator/src/main/java/io/papermc/generator/types/goal/MobGoalGenerator.java
Patch:
@@ -132,8 +132,7 @@ protected TypeSpec getTypeSpec() {
 
     @Override
     protected JavaFile.Builder file(JavaFile.Builder builder) {
-        return builder
-            .skipJavaLangImports(true);
+        return builder;
     }
 
     record DeprecatedEntry(Class<?> entity, String entryName, @Nullable String removalVersion,

File: paper-api-generator/src/main/java/io/papermc/generator/utils/CollectingContext.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.mojang.serialization.Lifecycle;
 import io.papermc.generator.Main;
-import java.util.List;
 import java.util.Set;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderGetter;

File: paper-api-generator/generated/io/papermc/paper/registry/keys/DamageTypeKeys.java
Patch:
@@ -333,8 +333,6 @@ public final class DamageTypeKeys {
      *
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
-    @ApiStatus.Experimental
-    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<DamageType> WIND_CHARGE = create(key("wind_charge"));
 
     /**

File: paper-api-generator/generated/io/papermc/paper/registry/keys/StructureKeys.java
Patch:
@@ -228,8 +228,6 @@ public final class StructureKeys {
      *
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
-    @ApiStatus.Experimental
-    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<Structure> TRIAL_CHAMBERS = create(key("trial_chambers"));
 
     /**

File: paper-api-generator/generated/io/papermc/paper/registry/keys/TrimPatternKeys.java
Patch:
@@ -33,7 +33,6 @@ public final class TrimPatternKeys {
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
     @ApiStatus.Experimental
-    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<TrimPattern> BOLT = create(key("bolt"));
 
     /**
@@ -62,8 +61,6 @@ public final class TrimPatternKeys {
      *
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
-    @ApiStatus.Experimental
-    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<TrimPattern> FLOW = create(key("flow"));
 
     /**

File: paper-api-generator/src/main/java/io/papermc/generator/types/goal/MobGoalNames.java
Patch:
@@ -120,6 +120,7 @@
 import java.lang.reflect.Constructor;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -282,8 +283,8 @@ public static String getUsableName(String name) {
         name = sb.toString();
         name = name.replaceFirst("_", "");
 
-        if (flag && !deobfuscationMap.containsKey(name.toLowerCase()) && !ignored.contains(name)) {
-            System.out.println("need to map " + original + " (" + name.toLowerCase() + ")");
+        if (flag && !deobfuscationMap.containsKey(name.toLowerCase(Locale.ROOT)) && !ignored.contains(name)) {
+            System.out.println("need to map " + original + " (" + name.toLowerCase(Locale.ROOT) + ")");
         }
 
         // did we rename this key?

File: paper-api-generator/src/main/java/io/papermc/generator/utils/Formatting.java
Patch:
@@ -12,7 +12,7 @@ public final class Formatting {
     private static final Pattern ILLEGAL_FIELD_CHARACTERS = Pattern.compile("[.-/]");
 
     public static String formatKeyAsField(String path) {
-        return ILLEGAL_FIELD_CHARACTERS.matcher(path.toUpperCase(Locale.ENGLISH)).replaceAll("_");
+        return ILLEGAL_FIELD_CHARACTERS.matcher(path.toUpperCase(Locale.ROOT)).replaceAll("_");
     }
 
     public static Comparator<String> ALPHABETIC_KEY_ORDER = alphabeticKeyOrder(path -> path);

File: paper-api/src/main/java/org/bukkit/Registry.java
Patch:
@@ -376,6 +376,7 @@ public Stream<MemoryKey> stream() {
      */
     Registry<org.bukkit.potion.PotionEffectType> POTION_EFFECT_TYPE = EFFECT;
     // Paper end - potion effect type registry
+    Registry<io.papermc.paper.datacomponent.DataComponentType> DATA_COMPONENT_TYPE = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(io.papermc.paper.registry.RegistryKey.DATA_COMPONENT_TYPE); // Paper
     /**
      * Get the object by its key.
      *

File: paper-api/src/main/java/org/bukkit/block/BlockType.java
Patch:
@@ -128,7 +128,7 @@
  * official replacement for the aforementioned enum. Entirely incompatible
  * changes may occur. Do not use this API in plugins.
  */
-@ApiStatus.Internal
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper - data component API - already required for data component API
 public interface BlockType extends Keyed, Translatable, net.kyori.adventure.translation.Translatable, io.papermc.paper.world.flag.FeatureDependant { // Paper - add translatable & feature flag API
 
     /**

File: paper-api-generator/generated/io/papermc/paper/registry/keys/BiomeKeys.java
Patch:
@@ -250,7 +250,7 @@ public final class BiomeKeys {
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
     @ApiStatus.Experimental
-    @MinecraftExperimental("update 1.21")
+    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<Biome> MANGROVE_SWAMP = create(key("mangrove_swamp"));
 
     /**
@@ -406,7 +406,7 @@ public final class BiomeKeys {
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
     @ApiStatus.Experimental
-    @MinecraftExperimental("update 1.21")
+    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<Biome> SWAMP = create(key("swamp"));
 
     /**

File: paper-api-generator/generated/io/papermc/paper/registry/keys/StructureKeys.java
Patch:
@@ -229,7 +229,7 @@ public final class StructureKeys {
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
     @ApiStatus.Experimental
-    @MinecraftExperimental("update 1.21")
+    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<Structure> TRIAL_CHAMBERS = create(key("trial_chambers"));
 
     /**

File: paper-api-generator/generated/io/papermc/paper/registry/keys/TrimPatternKeys.java
Patch:
@@ -33,7 +33,7 @@ public final class TrimPatternKeys {
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
     @ApiStatus.Experimental
-    @MinecraftExperimental("update 1.21")
+    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<TrimPattern> BOLT = create(key("bolt"));
 
     /**
@@ -63,7 +63,7 @@ public final class TrimPatternKeys {
      * @apiNote This field is version-dependant and may be removed in future Minecraft versions
      */
     @ApiStatus.Experimental
-    @MinecraftExperimental("update 1.21")
+    @MinecraftExperimental(MinecraftExperimental.Requires.UPDATE_1_21)
     public static final TypedKey<TrimPattern> FLOW = create(key("flow"));
 
     /**

File: paper-api-generator/src/main/java/io/papermc/generator/types/GeneratedKeyType.java
Patch:
@@ -130,15 +130,15 @@ protected TypeSpec getTypeSpec() {
                 .initializer("$N(key($S))", createMethod.build(), keyPath)
                 .addJavadoc(Javadocs.getVersionDependentField("{@code $L}"), key.location().toString());
             if (experimental.contains(key)) {
-                fieldBuilder.addAnnotations(experimentalAnnotations("update 1.21"));
+                fieldBuilder.addAnnotations(experimentalAnnotations("MinecraftExperimental.Requires.UPDATE_1_21"));
             } else {
                 allExperimental = false;
             }
             typeBuilder.addField(fieldBuilder.build());
         }
         if (allExperimental) {
-            typeBuilder.addAnnotations(experimentalAnnotations("update 1.21"));
-            createMethod.addAnnotations(experimentalAnnotations("update 1.21"));
+            typeBuilder.addAnnotations(experimentalAnnotations("MinecraftExperimental.Requires.UPDATE_1_21"));
+            createMethod.addAnnotations(experimentalAnnotations("MinecraftExperimental.Requires.UPDATE_1_21"));
         }
         return typeBuilder.addMethod(createMethod.build()).build();
     }

File: paper-api-generator/src/main/java/io/papermc/generator/utils/Annotations.java
Patch:
@@ -16,7 +16,7 @@ public static List<AnnotationSpec> experimentalAnnotations(final String version)
         return List.of(
             AnnotationSpec.builder(ApiStatus.Experimental.class).build(),
             AnnotationSpec.builder(MinecraftExperimental.class)
-                .addMember("value", "$S", version)
+                .addMember("value", "$L", version)
                 .build()
         );
     }

File: paper-server/src/main/java/io/papermc/paper/registry/PaperRegistries.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.google.common.base.Preconditions;
 import io.papermc.paper.adventure.PaperAdventure;
+import io.papermc.paper.datacomponent.DataComponentTypes;
+import io.papermc.paper.datacomponent.PaperDataComponentType;
 import io.papermc.paper.registry.data.PaperEnchantmentRegistryEntry;
 import io.papermc.paper.registry.data.PaperGameEventRegistryEntry;
 import io.papermc.paper.registry.data.PaperPaintingVariantRegistryEntry;
@@ -93,6 +95,7 @@ public final class PaperRegistries {
             start(Registries.ATTRIBUTE, RegistryKey.ATTRIBUTE).craft(Attribute.class, CraftAttribute::new).build(),
             start(Registries.FLUID, RegistryKey.FLUID).craft(Fluid.class, CraftFluid::new).build(),
             start(Registries.SOUND_EVENT, RegistryKey.SOUND_EVENT).craft(Sound.class, CraftSound::new).build(),
+            start(Registries.DATA_COMPONENT_TYPE, RegistryKey.DATA_COMPONENT_TYPE).craft(DataComponentTypes.class, PaperDataComponentType::of).build(),
 
             // data-drivens
             start(Registries.BIOME, RegistryKey.BIOME).craft(Biome.class, CraftBiome::new).build().delayed(),

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -91,7 +91,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         this.safelyAddEffects(effects, false); // Paper - limit firework effects
     }
 
-    static FireworkEffect getEffect(FireworkExplosion explosion) {
+    public static FireworkEffect getEffect(FireworkExplosion explosion) { // Paper
         FireworkEffect.Builder effect = FireworkEffect.builder()
                 .flicker(explosion.hasTwinkle())
                 .trail(explosion.hasTrail())
@@ -111,7 +111,7 @@ static FireworkEffect getEffect(FireworkExplosion explosion) {
         return effect.build();
     }
 
-    static FireworkExplosion getExplosion(FireworkEffect effect) {
+    public static FireworkExplosion getExplosion(FireworkEffect effect) { // Paper
         IntList colors = CraftMetaFirework.addColors(effect.getColors());
         IntList fadeColors = CraftMetaFirework.addColors(effect.getFadeColors());
 

File: paper-server/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
Patch:
@@ -100,6 +100,7 @@ public class RegistriesArgumentProvider implements ArgumentsProvider {
         register(RegistryKey.MAP_DECORATION_TYPE, MapCursor.Type.class, Registries.MAP_DECORATION_TYPE, CraftMapCursor.CraftType.class, MapDecorationType.class);
         register(RegistryKey.BANNER_PATTERN, PatternType.class, Registries.BANNER_PATTERN, CraftPatternType.class, BannerPattern.class);
         register(RegistryKey.MENU, MenuType.class, Registries.MENU, CraftMenuType.class, net.minecraft.world.inventory.MenuType.class);
+        register(RegistryKey.DATA_COMPONENT_TYPE, io.papermc.paper.datacomponent.DataComponentType.class, Registries.DATA_COMPONENT_TYPE, io.papermc.paper.datacomponent.PaperDataComponentType.class, net.minecraft.core.component.DataComponentType.class);
     }
 
     private static void register(RegistryKey registryKey, Class bukkit, ResourceKey registry, Class craft, Class minecraft) { // Paper

File: Paper-MojangAPI/src/main/java/com/destroystokyo/paper/event/brigadier/AsyncPlayerSendCommandsEvent.java
Patch:
@@ -27,6 +27,7 @@
  * If your logic is not safe to run asynchronously, only react to the synchronous version.
  * @deprecated Draft API - Subject to change until confirmed solves desired use cases
  */
+@Deprecated
 public class AsyncPlayerSendCommandsEvent <S extends BukkitBrigadierCommandSource> extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();

File: Paper-MojangAPI/src/main/java/com/destroystokyo/paper/event/brigadier/CommandRegisteredEvent.java
Patch:
@@ -21,6 +21,7 @@
  *
  * @deprecated Draft API - Subject to change until confirmed solves desired use cases
  */
+@Deprecated
 public class CommandRegisteredEvent <S extends BukkitBrigadierCommandSource> extends ServerEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/command/defaults/HelpCommand.java
Patch:
@@ -143,6 +143,7 @@ protected HelpTopic findPossibleMatches(@NotNull String searchString) {
             searchString = searchString.substring(1);
         }
 
+        if (searchString.isEmpty()) return null; // Paper - prevent index out of bounds - nothing matches an empty search string, should have been special cased to defaultTopic earlier, just return null.
         for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
             String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
 

File: paper-api/src/main/java/org/bukkit/FireworkEffect.java
Patch:
@@ -322,9 +322,7 @@ public FireworkEffect build() {
     private String string = null;
 
     FireworkEffect(boolean flicker, boolean trail, @NotNull ImmutableList<Color> colors, @NotNull ImmutableList<Color> fadeColors, @NotNull Type type) {
-        if (colors.isEmpty()) {
-            throw new IllegalStateException("Cannot make FireworkEffect without any color");
-        }
+        // Paper - can have empty colors
         this.flicker = flicker;
         this.trail = trail;
         this.colors = colors;

File: paper-api/src/main/java/org/bukkit/attribute/AttributeModifier.java
Patch:
@@ -130,6 +130,7 @@ public Operation getOperation() {
      */
     @Nullable
     @Deprecated(since = "1.20.5")
+    @io.papermc.paper.annotation.DoNotUse // Paper
     public EquipmentSlot getSlot() {
         return slot == EquipmentSlotGroup.ANY ? null : slot.getExample();
     }

File: paper-api/src/main/java/org/bukkit/inventory/EquipmentSlot.java
Patch:
@@ -15,7 +15,7 @@ public enum EquipmentSlot {
     /**
      * Only for certain entities such as horses and wolves.
      */
-    BODY(() -> EquipmentSlotGroup.ARMOR);
+    BODY(() -> EquipmentSlotGroup.BODY); // Paper - add missing slot type
 
     private final Supplier<EquipmentSlotGroup> group; // Supplier because of class loading order, since EquipmentSlot and EquipmentSlotGroup reference each other on class init
 

File: paper-api/src/main/java/org/bukkit/inventory/EquipmentSlotGroup.java
Patch:
@@ -25,7 +25,8 @@ public final class EquipmentSlotGroup implements Predicate<EquipmentSlot> {
     public static final EquipmentSlotGroup LEGS = get("legs", EquipmentSlot.LEGS);
     public static final EquipmentSlotGroup CHEST = get("chest", EquipmentSlot.CHEST);
     public static final EquipmentSlotGroup HEAD = get("head", EquipmentSlot.HEAD);
-    public static final EquipmentSlotGroup ARMOR = get("armor", (test) -> test == EquipmentSlot.FEET || test == EquipmentSlot.LEGS || test == EquipmentSlot.CHEST || test == EquipmentSlot.HEAD, EquipmentSlot.CHEST);
+    public static final EquipmentSlotGroup ARMOR = get("armor", (test) -> test == EquipmentSlot.FEET || test == EquipmentSlot.LEGS || test == EquipmentSlot.CHEST || test == EquipmentSlot.HEAD || test == EquipmentSlot.BODY, EquipmentSlot.CHEST);  // Paper - add missing slot type
+    public static final EquipmentSlotGroup BODY = get("body", EquipmentSlot.BODY); // Paper - add missing slot group
     //
     private final String key;
     private final Predicate<EquipmentSlot> predicate;

File: paper-api/src/main/java/org/bukkit/inventory/CookingRecipe.java
Patch:
@@ -44,10 +44,10 @@ public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @Not
      * @param cookingTime The cooking time (in ticks)
      */
     public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
-        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
+        Preconditions.checkArgument(!result.isEmpty(), "Recipe cannot have an empty result."); // Paper
         this.key = key;
         this.output = new ItemStack(result);
-        this.ingredient = input;
+        this.ingredient = input.validate(false).clone(); // Paper
         this.experience = experience;
         this.cookingTime = cookingTime;
     }
@@ -84,7 +84,7 @@ public ItemStack getInput() {
      */
     @NotNull
     public T setInputChoice(@NotNull RecipeChoice input) {
-        this.ingredient = input;
+        this.ingredient = input.validate(false).clone(); // Paper
         return (T) this;
     }
 

File: paper-api/src/main/java/org/bukkit/inventory/CraftingRecipe.java
Patch:
@@ -99,7 +99,7 @@ public void setCategory(@NotNull CraftingBookCategory category) {
     @ApiStatus.Internal
     @NotNull
     protected static ItemStack checkResult(@NotNull ItemStack result) {
-        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
+        Preconditions.checkArgument(!result.isEmpty(), "Recipe cannot have an empty result."); // Paper
         return result;
     }
 }

File: paper-api/src/main/java/org/bukkit/inventory/ShapedRecipe.java
Patch:
@@ -178,14 +178,15 @@ public ShapedRecipe setIngredient(char key, @NotNull RecipeChoice ingredient) {
         Preconditions.checkArgument(key != ' ', "Space in recipe shape must represent no ingredient");
         Preconditions.checkArgument(ingredients.containsKey(key), "Symbol does not appear in the shape:", key);
 
-        ingredients.put(key, ingredient);
+        ingredients.put(key, ingredient.validate(false).clone()); // Paper
         return this;
     }
 
     // Paper start
     @NotNull
     public ShapedRecipe setIngredient(char key, @NotNull ItemStack item) {
-        return setIngredient(key, new RecipeChoice.ExactChoice(item));
+        Preconditions.checkArgument(!item.getType().isAir(), "Item cannot be air"); // Paper
+        return setIngredient(key, new RecipeChoice.ExactChoice(item.clone())); // Paper
     }
     // Paper end
 

File: paper-api/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
Patch:
@@ -132,7 +132,7 @@ public ShapelessRecipe addIngredient(int count, @NotNull Material ingredient, in
     public ShapelessRecipe addIngredient(@NotNull RecipeChoice ingredient) {
         Preconditions.checkArgument(ingredients.size() + 1 <= 9, "Shapeless recipes cannot have more than 9 ingredients");
 
-        ingredients.add(ingredient);
+        ingredients.add(ingredient.validate(false).clone()); // Paper
         return this;
     }
 
@@ -145,6 +145,8 @@ public ShapelessRecipe addIngredient(@NotNull ItemStack item) {
     @NotNull
     public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item) {
         Preconditions.checkArgument(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
+        Preconditions.checkArgument(!item.getType().isAir(), "Item cannot be air"); // Paper
+        item = item.clone(); // Paper
         while (count-- > 0) {
             ingredients.add(new RecipeChoice.ExactChoice(item));
         }

File: paper-api/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
Patch:
@@ -35,10 +35,10 @@ public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result,
      * @param input The input choices.
      */
     public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input) {
-        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
+        Preconditions.checkArgument(!result.isEmpty(), "Recipe cannot have an empty result."); // Paper
         this.key = key;
         this.output = new ItemStack(result);
-        this.ingredient = input;
+        this.ingredient = input.validate(false).clone(); // Paper
     }
 
     /**
@@ -73,7 +73,7 @@ public ItemStack getInput() {
      */
     @NotNull
     public StonecuttingRecipe setInputChoice(@NotNull RecipeChoice input) {
-        this.ingredient = input;
+        this.ingredient = input.validate(false).clone(); // Paper
         return (StonecuttingRecipe) this;
     }
 

File: paper-api/src/main/java/org/bukkit/inventory/TransmuteRecipe.java
Patch:
@@ -26,8 +26,8 @@ public class TransmuteRecipe extends CraftingRecipe implements ComplexRecipe {
      */
     public TransmuteRecipe(@NotNull NamespacedKey key, @NotNull Material result, @NotNull RecipeChoice input, @NotNull RecipeChoice material) {
         super(key, checkResult(new ItemStack(result)));
-        this.input = input;
-        this.material = material;
+        this.input = input.validate(false).clone(); // Paper
+        this.material = material.validate(false).clone(); // Paper
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java
Patch:
@@ -17,7 +17,7 @@
 public class InventoryBlockStartEvent extends BlockEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack source;
+    protected ItemStack source; // Paper
 
     public InventoryBlockStartEvent(@NotNull final Block block, @NotNull ItemStack source) {
         super(block);

File: paper-api/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
Patch:
@@ -102,7 +102,7 @@ public Material getMaterial() {
      */
     @NotNull
     public BlockData getBlockData() {
-        return blockData;
+        return blockData.clone(); // Paper - clone because mutation isn't used
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
Patch:
@@ -61,7 +61,7 @@ public Material getTo() {
      */
     @NotNull
     public BlockData getBlockData() {
-        return to;
+        return to.clone(); // Paper - clone because mutation isn't used
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
Patch:
@@ -72,7 +72,7 @@ public List<Block> blockList() {
      */
     @NotNull
     public Location getLocation() {
-        return location;
+        return location.clone(); // Paper - clone to avoid changes
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
Patch:
@@ -35,7 +35,7 @@ public EntityPortalEnterEvent(@NotNull final Entity entity, @NotNull final Locat
      */
     @NotNull
     public Location getLocation() {
-        return location;
+        return location.clone(); // Paper - clone to avoid changes
     }
 
     // Paper start

File: paper-api/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
Patch:
@@ -46,7 +46,7 @@ public Item getEntity() {
      */
     @NotNull
     public Location getLocation() {
-        return location;
+        return location.clone(); // Paper - clone to avoid changes
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
Patch:
@@ -31,7 +31,7 @@ public VehicleBlockCollisionEvent(@NotNull final Vehicle vehicle, @NotNull final
      */
     @NotNull
     public org.bukkit.util.Vector getVelocity() {
-        return velocity;
+        return velocity.clone();
     }
     // Paper end
 

File: paper-api/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
Patch:
@@ -27,7 +27,7 @@ public VehicleMoveEvent(@NotNull final Vehicle vehicle, @NotNull final Location
      */
     @NotNull
     public Location getFrom() {
-        return from;
+        return from.clone(); // Paper - clone to avoid changes
     }
 
     /**
@@ -37,7 +37,7 @@ public Location getFrom() {
      */
     @NotNull
     public Location getTo() {
-        return to;
+        return to.clone(); // Paper - clone to avoid changes
     }
 
 

File: paper-api/src/main/java/org/bukkit/event/world/GenericGameEvent.java
Patch:
@@ -49,7 +49,7 @@ public GameEvent getEvent() {
      */
     @NotNull
     public Location getLocation() {
-        return location;
+        return location.clone(); // Paper - clone to avoid changes
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
Patch:
@@ -25,7 +25,7 @@ public SpawnChangeEvent(@NotNull final World world, @NotNull final Location prev
      */
     @NotNull
     public Location getPreviousLocation() {
-        return previousLocation;
+        return previousLocation.clone(); // Paper - clone to avoid changes
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
Patch:
@@ -39,7 +39,7 @@ public StructureGrowEvent(@NotNull final Location location, @NotNull final TreeT
      */
     @NotNull
     public Location getLocation() {
-        return location;
+        return location.clone(); // Paper - clone to avoid changes
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/BanList.java
Patch:
@@ -16,7 +16,9 @@ public interface BanList<T> {
 
     /**
      * Represents a ban-type that a {@link BanList} may track.
+     * @deprecated use {@link io.papermc.paper.ban.BanListType} to enforce the correct return value at compile time.
      */
+    @Deprecated(since = "1.20.4") // Paper - BanList Type Improvements
     public enum Type {
         /**
          * Banned player names

File: paper-api/src/main/java/org/bukkit/entity/Boat.java
Patch:
@@ -175,6 +175,7 @@ public Material getMaterial() {
      */
     public enum Status {
 
+        NOT_IN_WORLD, // Paper
         IN_WATER,
         UNDER_WATER,
         UNDER_FLOWING_WATER,

File: paper-api/src/main/java/org/bukkit/UnsafeValues.java
Patch:
@@ -256,4 +256,6 @@ default org.bukkit.entity.Entity deserializeEntity(byte[] data, World world) {
     @Deprecated(since = "1.21.3", forRemoval = true)
     void setBiomeKey(RegionAccessor accessor, int x, int y, int z, NamespacedKey biomeKey);
     // Paper end - namespaced key biome methods
+
+    String getStatisticCriteriaKey(@NotNull org.bukkit.Statistic statistic); // Paper - fix custom stats criteria creation
 }

File: paper-api/src/main/java/org/bukkit/scoreboard/Criteria.java
Patch:
@@ -335,7 +335,7 @@ public static Criteria statistic(@NotNull Statistic statistic, @NotNull EntityTy
     @NotNull
     public static Criteria statistic(@NotNull Statistic statistic) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
-        return Bukkit.getScoreboardCriteria("minecraft.custom:minecraft." + statistic.getKey().getKey());
+        return Bukkit.getScoreboardCriteria(org.bukkit.Bukkit.getUnsafe().getStatisticCriteriaKey(statistic)); // Paper
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/BanList.java
Patch:
@@ -48,7 +48,7 @@ public enum Type {
      */
     @Deprecated(since = "1.20.1")
     @Nullable
-    public BanEntry<T> getBanEntry(@NotNull String target);
+    public <E extends BanEntry<? super T>> E getBanEntry(@NotNull String target); // Paper
 
     /**
      * Gets a {@link BanEntry} by target.
@@ -77,7 +77,7 @@ public enum Type {
      */
     @Deprecated(since = "1.20.1")
     @Nullable
-    public BanEntry<T> addBan(@NotNull String target, @Nullable String reason, @Nullable Date expires, @Nullable String source);
+    public <E extends BanEntry<? super T>> E addBan(@NotNull String target, @Nullable String reason, @Nullable Date expires, @Nullable String source); // Paper
 
     /**
      * Adds a ban to this list. If a previous ban exists, this will
@@ -140,7 +140,7 @@ public enum Type {
      * @return an immutable set containing every entry tracked by this list
      */
     @NotNull
-    public Set<BanEntry<T>> getEntries();
+    public <E extends BanEntry<? super T>> Set<E> getEntries(); // Paper
 
     /**
      * Gets if a {@link BanEntry} exists for the target, indicating an active

File: paper-api/src/main/java/org/bukkit/OfflinePlayer.java
Patch:
@@ -147,7 +147,7 @@ public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.D
      *     (updated) previous ban
      */
     @Nullable
-    public BanEntry<PlayerProfile> ban(@Nullable String reason, @Nullable Date expires, @Nullable String source);
+    public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Date expires, @Nullable String source); // Paper - fix ban list API
 
     /**
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
@@ -161,7 +161,7 @@ public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.D
      *     (updated) previous ban
      */
     @Nullable
-    public BanEntry<PlayerProfile> ban(@Nullable String reason, @Nullable Instant expires, @Nullable String source);
+    public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Instant expires, @Nullable String source); // Paper - fix ban list API
 
     /**
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
@@ -175,7 +175,7 @@ public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.D
      *     (updated) previous ban
      */
     @Nullable
-    public BanEntry<PlayerProfile> ban(@Nullable String reason, @Nullable Duration duration, @Nullable String source);
+    public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Duration duration, @Nullable String source); // Paper - fix ban list API
 
     /**
      * Checks if this player is whitelisted or not

File: paper-api/src/main/java/org/bukkit/entity/Player.java
Patch:
@@ -359,7 +359,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     (updated) previous ban
      */
     @Nullable
-    public BanEntry<PlayerProfile> ban(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer);
+    public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer); // Paper - fix ban list API
 
     /**
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
@@ -375,7 +375,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     (updated) previous ban
      */
     @Nullable
-    public BanEntry<PlayerProfile> ban(@Nullable String reason, @Nullable Instant expires, @Nullable String source, boolean kickPlayer);
+    public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Instant expires, @Nullable String source, boolean kickPlayer); // Paper - fix ban list API
 
     /**
      * Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
@@ -391,7 +391,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     (updated) previous ban
      */
     @Nullable
-    public BanEntry<PlayerProfile> ban(@Nullable String reason, @Nullable Duration duration, @Nullable String source, boolean kickPlayer);
+    public <E extends BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E ban(@Nullable String reason, @Nullable Duration duration, @Nullable String source, boolean kickPlayer); // Paper - fix ban list API
 
     /**
      * Adds this user's current IP address to the {@link IpBanList}. If a previous ban exists, this will

File: paper-api/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
Patch:
@@ -98,6 +98,7 @@ public String saveToString() {
     public void loadFromString(@NotNull String contents) throws InvalidConfigurationException {
         Preconditions.checkArgument(contents != null, "Contents cannot be null");
         yamlLoaderOptions.setProcessComments(options().parseComments());
+        yamlLoaderOptions.setCodePointLimit(options().codePointLimit()); // Paper
 
         MappingNode node;
         try (Reader reader = new UnicodeReader(new ByteArrayInputStream(contents.getBytes(StandardCharsets.UTF_8)))) {

File: paper-api/src/main/java/org/bukkit/event/entity/EntityBreakDoorEvent.java
Patch:
@@ -12,8 +12,8 @@
  * Cancelling the event will cause the event to be delayed
  */
 public class EntityBreakDoorEvent extends EntityChangeBlockEvent {
-    public EntityBreakDoorEvent(@NotNull final LivingEntity entity, @NotNull final Block targetBlock) {
-        super(entity, targetBlock, Material.AIR.createBlockData());
+    public EntityBreakDoorEvent(@NotNull final LivingEntity entity, @NotNull final Block targetBlock, @NotNull final org.bukkit.block.data.BlockData to) { // Paper
+        super(entity, targetBlock, to); // Paper
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -131,7 +131,7 @@ private synchronized boolean register(@NotNull String label, @NotNull Command co
      */
     @Override
     public boolean dispatch(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
-        String[] args = commandLine.split(" ");
+        String[] args = org.apache.commons.lang3.StringUtils.split(commandLine, ' '); // Paper - fix adjacent spaces (from console/plugins) causing empty array elements
 
         if (args.length == 0) {
             return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
Patch:
@@ -112,7 +112,7 @@ public void setEatingHaystack(boolean eatingHaystack) {
 
     @Override
     public AbstractHorseInventory getInventory() {
-        return new CraftSaddledInventory(getHandle().inventory);
+        return new CraftSaddledInventory(getHandle().inventory, this.getHandle().getBodyArmorAccess()); // Paper - use both inventories
     }
 
     // Paper start - Horse API

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftAbstractInventoryView.java
Patch:
@@ -164,7 +164,6 @@ public InventoryType.SlotType getSlotType(final int slot) {
                     type = InventoryType.SlotType.CRAFTING;
                     break;
                 case ANVIL:
-                case SMITHING:
                 case CARTOGRAPHY:
                 case GRINDSTONE:
                 case MERCHANT:
@@ -182,6 +181,7 @@ public InventoryType.SlotType getSlotType(final int slot) {
                     }
                     break;
                 case LOOM:
+                case SMITHING: // Paper - properly remove experimental smithing inventory
                 case SMITHING_NEW:
                     if (slot == 3) {
                         type = InventoryType.SlotType.RESULT;

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
Patch:
@@ -20,6 +20,7 @@
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftServer;
 
+@Deprecated(forRemoval = true) // Paper - Don't use
 public class BukkitCommandWrapper implements com.mojang.brigadier.Command<CommandSourceStack>, Predicate<CommandSourceStack>, SuggestionProvider<CommandSourceStack>, com.destroystokyo.paper.brigadier.BukkitBrigadierCommand<CommandSourceStack> { // Paper
 
     private final CraftServer server;

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
Patch:
@@ -8,7 +8,7 @@
 public class CraftCommandMap extends SimpleCommandMap {
 
     public CraftCommandMap(Server server) {
-        super(server);
+        super(server, io.papermc.paper.command.brigadier.bukkit.BukkitBrigForwardingMap.INSTANCE);
     }
 
     public Map<String, Command> getKnownCommands() {

File: paper-server/src/test/java/org/bukkit/support/DummyServerHelper.java
Patch:
@@ -87,7 +87,7 @@ public static Server setup() {
         // Paper start - testing additions
         final Thread currentThread = Thread.currentThread();
         when(instance.isPrimaryThread()).thenAnswer(ignored -> Thread.currentThread().equals(currentThread));
-        final org.bukkit.plugin.PluginManager pluginManager = new  io.papermc.paper.plugin.manager.PaperPluginManagerImpl(instance, new org.bukkit.command.SimpleCommandMap(instance), null);
+        final org.bukkit.plugin.PluginManager pluginManager = new  io.papermc.paper.plugin.manager.PaperPluginManagerImpl(instance, new org.bukkit.command.SimpleCommandMap(instance, new java.util.HashMap<>()), null);
         when(instance.getPluginManager()).thenReturn(pluginManager);
         // Paper end - testing additions
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
Patch:
@@ -118,14 +118,13 @@ boolean isBucketEmpty() {
 
     @Override
     public Axolotl.Variant getVariant() {
+        com.google.common.base.Preconditions.checkState(this.hasVariant(), "Variant is absent, check hasVariant first!"); // Paper - fix NPE
         return Axolotl.Variant.values()[this.variant];
     }
 
     @Override
     public void setVariant(Axolotl.Variant variant) {
-        if (variant == null) {
-            variant = Axolotl.Variant.LUCY;
-        }
+        com.google.common.base.Preconditions.checkArgument(variant != null, "Variant cannot be null!"); // Paper
         this.variant = variant.ordinal();
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
Patch:
@@ -69,6 +69,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     void applyToItem(CraftMetaItem.Applicator tag) {
         super.applyToItem(tag);
 
+        if (this.patterns.isEmpty()) return; // Paper - don't write empty patterns
         List<BannerPatternLayers.Layer> newPatterns = new ArrayList<>();
 
         for (Pattern p : this.patterns) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
Patch:
@@ -34,7 +34,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta, WritableBo
     @ItemMetaKey.Specific(ItemMetaKey.Specific.To.NBT)
     static final ItemMetaKeyType<WritableBookContent> BOOK_CONTENT = new ItemMetaKeyType<>(DataComponents.WRITABLE_BOOK_CONTENT);
     static final ItemMetaKey BOOK_PAGES = new ItemMetaKey("pages");
-    static final int MAX_PAGES = Integer.MAX_VALUE; // SPIGOT-6911: Use Minecraft limits
+    static final int MAX_PAGES = WritableBookContent.MAX_PAGES; // SPIGOT-6911: Use Minecraft limits // Paper
     static final int MAX_PAGE_LENGTH = WritableBookContent.PAGE_EDIT_LENGTH; // SPIGOT-6911: Use Minecraft limits
 
     // We store the pages in their raw original text representation. See SPIGOT-5063, SPIGOT-5350, SPIGOT-3206

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
Patch:
@@ -124,13 +124,13 @@ public class CraftMetaBookSigned extends CraftMetaItem implements BookMeta {
     void applyToItem(CraftMetaItem.Applicator itemData) {
         super.applyToItem(itemData);
 
+        List<Filterable<Component>> list = new ArrayList<>(); // Paper - General ItemMeta Fixes
         if (this.pages != null) {
-            List<Filterable<Component>> list = new ArrayList<>();
             for (Component page : this.pages) {
                 list.add(Filterable.passThrough(page));
             }
-            itemData.put(CraftMetaBookSigned.BOOK_CONTENT, new WrittenBookContent(Filterable.from(FilteredText.passThrough(this.title)), this.author, this.generation, list, this.resolved));
         }
+        itemData.put(CraftMetaBookSigned.BOOK_CONTENT, new WrittenBookContent(Filterable.from(this.title == null ? FilteredText.EMPTY : FilteredText.passThrough(this.title)), this.author == null ? "" : this.author, this.generation, list, this.resolved)); // Paper - General ItemMeta Fixes
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBundle.java
Patch:
@@ -41,7 +41,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
             bundle.items().forEach((item) -> {
                 ItemStack itemStack = CraftItemStack.asCraftMirror(item);
 
-                if (!itemStack.getType().isAir()) { // SPIGOT-7174 - Avoid adding air
+                if (!itemStack.isEmpty()) { // SPIGOT-7174 - Avoid adding air // Paper
                     this.addItem(itemStack);
                 }
             });
@@ -54,7 +54,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
         Iterable<?> items = SerializableMeta.getObject(Iterable.class, map, CraftMetaBundle.ITEMS.BUKKIT, true);
         if (items != null) {
             for (Object stack : items) {
-                if (stack instanceof ItemStack itemStack && !itemStack.getType().isAir()) { // SPIGOT-7174 - Avoid adding air
+                if (stack instanceof ItemStack itemStack && !itemStack.isEmpty()) { // SPIGOT-7174 - Avoid adding air // Paper
                     this.addItem(itemStack);
                 }
             }
@@ -110,7 +110,7 @@ public void setItems(List<ItemStack> items) {
 
     @Override
     public void addItem(ItemStack item) {
-        Preconditions.checkArgument(item != null && !item.getType().isAir(), "item is null or air");
+        Preconditions.checkArgument(item != null && !item.isEmpty(), "item is null or empty"); // Paper
 
         if (this.items == null) {
             this.items = new ArrayList<>();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
Patch:
@@ -117,7 +117,7 @@ public void setChargedProjectiles(List<ItemStack> projectiles) {
     @Override
     public void addChargedProjectile(ItemStack item) {
         Preconditions.checkArgument(item != null, "item");
-        Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftItemType.bukkitToMinecraft(item.getType()) instanceof ArrowItem, "Item %s is not an arrow or firework rocket", item);
+        Preconditions.checkArgument(!item.isEmpty(), "Item cannot be empty"); // Paper
 
         if (this.chargedProjectiles == null) {
             this.chargedProjectiles = new ArrayList<>();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java
Patch:
@@ -98,7 +98,7 @@ boolean equalsCommon(CraftMetaItem meta) {
         if (meta instanceof CraftMetaEntityTag) {
             CraftMetaEntityTag that = (CraftMetaEntityTag) meta;
 
-            return this.entityTag != null ? that.entityTag != null && this.entityTag.equals(that.entityTag) : this.entityTag == null;
+            return this.entityTag != null ? that.entityTag != null && this.entityTag.equals(that.entityTag) : that.entityTag == null; // Paper
         }
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaOminousBottle.java
Patch:
@@ -70,6 +70,7 @@ public boolean hasAmplifier() {
 
     @Override
     public int getAmplifier() {
+        Preconditions.checkState(this.hasAmplifier(), "'ominous_bottle_amplifier' data component is absent. Check hasAmplifier first!"); // Paper - fix NPE
         return this.ominousBottleAmplifier;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -112,10 +112,10 @@ void applyToItem(CraftMetaItem.Applicator tag) {
             // Fill in textures
             PlayerProfile ownerProfile = new CraftPlayerProfile(this.profile); // getOwnerProfile may return null
             if (ownerProfile.getTextures().isEmpty()) {
-                ownerProfile.update().thenAccept((filledProfile) -> {
+                ownerProfile.update().thenAcceptAsync((filledProfile) -> { // Paper - run on main thread
                     this.setOwnerProfile(filledProfile);
-                    tag.put(CraftMetaSkull.SKULL_PROFILE, this.profile);
-                });
+                    tag.skullCallback(this.profile); // Paper - actually set profile on itemstack
+                }, ((org.bukkit.craftbukkit.CraftServer) org.bukkit.Bukkit.getServer()).getServer()); // Paper - run on main thread
             }
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
Patch:
@@ -121,6 +121,7 @@ public void setCustomSpawnedType(final EntityType type) {
 
     @Override
     public EntitySnapshot getSpawnedEntity() {
+        if (this.entityTag == null) return null; // Paper - fix NPE
         return CraftEntitySnapshot.create(this.entityTag);
     }
 
@@ -138,7 +139,7 @@ boolean equalsCommon(CraftMetaItem meta) {
         if (meta instanceof CraftMetaSpawnEgg) {
             CraftMetaSpawnEgg that = (CraftMetaSpawnEgg) meta;
 
-            return this.entityTag != null ? that.entityTag != null && this.entityTag.equals(that.entityTag) : this.entityTag == null;
+            return this.entityTag != null ? that.entityTag != null && this.entityTag.equals(that.entityTag) : that.entityTag == null; // Paper
         }
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
Patch:
@@ -120,6 +120,7 @@ boolean isBucketEmpty() {
 
     @Override
     public DyeColor getPatternColor() {
+        com.google.common.base.Preconditions.checkState(this.hasVariant(), "This bucket doesn't have variant, check hasVariant first!"); // Paper - fix NPE
         return CraftTropicalFish.getPatternColor(this.variant);
     }
 
@@ -133,6 +134,7 @@ public void setPatternColor(DyeColor color) {
 
     @Override
     public DyeColor getBodyColor() {
+        com.google.common.base.Preconditions.checkState(this.hasVariant(), "This bucket doesn't have variant, check hasVariant first!"); // Paper - fix NPE
         return CraftTropicalFish.getBodyColor(this.variant);
     }
 
@@ -146,6 +148,7 @@ public void setBodyColor(DyeColor color) {
 
     @Override
     public TropicalFish.Pattern getPattern() {
+        com.google.common.base.Preconditions.checkState(this.hasVariant(), "This bucket doesn't have variant, check hasVariant first!"); // Paper - fix NPE
         return CraftTropicalFish.getPattern(this.variant);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftCustomModelDataComponent.java
Patch:
@@ -67,7 +67,7 @@ public List<Boolean> getFlags() {
 
     @Override
     public void setFlags(List<Boolean> flags) {
-        this.handle = new CustomModelData(this.handle.floats(), new ArrayList<>(this.handle.flags()), this.handle.strings(), this.handle.colors());
+        this.handle = new CustomModelData(this.handle.floats(), List.copyOf(flags), this.handle.strings(), this.handle.colors()); // Paper
     }
 
     @Override
@@ -77,7 +77,7 @@ public List<String> getStrings() {
 
     @Override
     public void setStrings(List<String> strings) {
-        this.handle = new CustomModelData(this.handle.floats(), this.handle.flags(), new ArrayList<>(this.handle.strings()), this.handle.colors());
+        this.handle = new CustomModelData(this.handle.floats(), this.handle.flags(), List.copyOf(strings), this.handle.colors()); // Paper
     }
 
     @Override
@@ -87,7 +87,7 @@ public List<Color> getColors() {
 
     @Override
     public void setColors(List<Color> colors) {
-        this.handle = new CustomModelData(this.handle.floats(), this.handle.flags(), this.handle.strings(), new ArrayList<>(this.handle.colors()));
+        this.handle = new CustomModelData(this.handle.floats(), this.handle.flags(), this.handle.strings(), colors.stream().map(Color::asRGB).toList()); // Paper
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftEquippableComponent.java
Patch:
@@ -172,7 +172,7 @@ public void setAllowedEntities(Collection<EntityType> entities) {
 
     @Override
     public void setAllowedEntities(Tag<EntityType> tag) {
-        Preconditions.checkArgument(tag instanceof CraftEntityTag, "tag must be an entity tag");
+        Preconditions.checkArgument(tag == null || tag instanceof CraftEntityTag, "tag must be an entity tag"); // Paper
 
         this.handle = new Equippable(this.handle.slot(), this.handle.equipSound(), this.handle.assetId(), this.handle.cameraOverlay(),
                 (tag != null) ? Optional.of(((CraftEntityTag) tag).getHandle()) : Optional.empty(),

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
Patch:
@@ -94,7 +94,7 @@ private NamespacedKey requestKey(String keyName) {
     public void testNBTTagStoring() {
         CraftMetaItem itemMeta = this.createComplexItemMeta();
 
-        CraftMetaItem.Applicator compound = new CraftMetaItem.Applicator();
+        CraftMetaItem.Applicator compound = new CraftMetaItem.Applicator() {}; // Paper
         itemMeta.applyToItem(compound);
 
         assertEquals(itemMeta, new CraftMetaItem(compound.build(), null)); // Paper

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
Patch:
@@ -128,7 +128,7 @@ public void testCopyToReplace() {
     public void testNBTTagStoring() {
         CraftMetaItem itemMeta = this.createComplexItemMeta();
 
-        CraftMetaItem.Applicator compound = new CraftMetaItem.Applicator();
+        CraftMetaItem.Applicator compound = new CraftMetaItem.Applicator() {}; // Paper
         itemMeta.applyToItem(compound);
 
         assertEquals(itemMeta, new CraftMetaItem(compound.build(), null)); // Paper
@@ -474,7 +474,7 @@ public void testEmptyListApplicationToAnyType() throws IOException {
         assertEquals(List.of(), container.get(PersistentDataContainerTest.requestKey("list"), PersistentDataType.LIST.strings()));
 
         // Write and read the entire container to NBT
-        final CraftMetaItem.Applicator storage = new CraftMetaItem.Applicator();
+        final CraftMetaItem.Applicator storage = new CraftMetaItem.Applicator() {}; // Paper
         craftItem.applyToItem(storage);
 
         final CraftMetaItem readItem = new CraftMetaItem(storage.build(), null); // Paper

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -1222,11 +1222,11 @@ public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, Da
         Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<>(DamageModifier.class);
         modifiers.put(DamageModifier.BASE, rawDamage);
         modifierFunctions.put(DamageModifier.BASE, CraftEventFactory.ZERO);
-        if (source.is(DamageTypes.FREEZE)) {
+        if (source.is(DamageTypeTags.IS_FREEZING)) { // Paper
             modifiers.put(DamageModifier.FREEZING, freezingModifier);
             modifierFunctions.put(DamageModifier.FREEZING, freezing);
         }
-        if (source.is(DamageTypes.FALLING_BLOCK) || source.is(DamageTypes.FALLING_ANVIL)) {
+        if (source.is(DamageTypeTags.DAMAGES_HELMET)) { // Paper
             modifiers.put(DamageModifier.HARD_HAT, hardHatModifier);
             modifierFunctions.put(DamageModifier.HARD_HAT, hardHat);
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
Patch:
@@ -38,7 +38,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         getOrEmpty(tag, CraftMetaEnchantedBook.STORED_ENCHANTMENTS).ifPresent((itemEnchantments) -> {
             this.enchantments = buildEnchantments(itemEnchantments);
             if (!itemEnchantments.showInTooltip) {
-                this.addItemFlags(ItemFlag.HIDE_ADDITIONAL_TOOLTIP);
+                this.addItemFlags(ItemFlag.HIDE_STORED_ENCHANTS); // Paper - new ItemFlag
             }
         });
     }
@@ -53,7 +53,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     void applyToItem(CraftMetaItem.Applicator itemTag) {
         super.applyToItem(itemTag);
 
-        this.applyEnchantments(this.enchantments, itemTag, CraftMetaEnchantedBook.STORED_ENCHANTMENTS, ItemFlag.HIDE_ADDITIONAL_TOOLTIP);
+        this.applyEnchantments(this.enchantments, itemTag, CraftMetaEnchantedBook.STORED_ENCHANTMENTS, ItemFlag.HIDE_STORED_ENCHANTS);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -2232,7 +2232,7 @@ public static ItemStack handleBlockDispenseEvent(net.minecraft.core.dispenser.Bl
         if (!event.getItem().equals(craftItem)) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            net.minecraft.core.dispenser.DispenseItemBehavior itemBehavior = net.minecraft.world.level.block.DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            net.minecraft.core.dispenser.DispenseItemBehavior itemBehavior = net.minecraft.world.level.block.DispenserBlock.getDispenseBehavior(pointer, eventStack); // Paper - Fix NPE with equippable and items without behavior
             if (itemBehavior != net.minecraft.core.dispenser.DispenseItemBehavior.NOOP && itemBehavior != instance) {
                 itemBehavior.dispense(pointer, eventStack);
                 return itemStack;

File: paper-server/src/main/java/org/bukkit/craftbukkit/damage/CraftDamageSource.java
Patch:
@@ -41,13 +41,13 @@ public DamageType getDamageType() {
 
     @Override
     public org.bukkit.entity.Entity getCausingEntity() {
-        net.minecraft.world.entity.Entity entity = this.getHandle().getCausingDamager();
+        net.minecraft.world.entity.Entity entity = this.getHandle().getEntity(); // Paper - fix DamageSource API - revert to vanilla
         return (entity != null) ? entity.getBukkitEntity() : null;
     }
 
     @Override
     public org.bukkit.entity.Entity getDirectEntity() {
-        net.minecraft.world.entity.Entity entity = this.getHandle().getDamager();
+        net.minecraft.world.entity.Entity entity = this.getHandle().getDirectEntity(); // Paper - fix DamageSource API
         return (entity != null) ? entity.getBukkitEntity() : null;
     }
 
@@ -65,7 +65,7 @@ public Location getSourceLocation() {
 
     @Override
     public boolean isIndirect() {
-        return this.getHandle().getCausingDamager() != this.getHandle().getDamager();
+        return !this.getHandle().isDirect(); // Paper - fix DamageSource API
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -1092,7 +1092,7 @@ private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSo
 
     private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         CraftDamageSource bukkitDamageSource = new CraftDamageSource(source);
-        Entity damager = (source.getDamager() != null) ? source.getDamager() : source.getEntity();
+        final Entity damager = source.getCustomEventDamager(); // Paper - fix DamageSource API
         if (source.is(DamageTypeTags.IS_EXPLOSION)) {
             if (damager == null) {
                 return CraftEventFactory.callEntityDamageEvent(source.getDirectBlock(), source.getDirectBlockState(), entity, DamageCause.BLOCK_EXPLOSION, bukkitDamageSource, modifiers, modifierFunctions, cancelled);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
Patch:
@@ -38,7 +38,7 @@ public static org.bukkit.loot.LootTable minecraftToBukkit(ResourceLocation minec
     }
 
     public static org.bukkit.loot.LootTable minecraftToBukkit(ResourceKey<LootTable> minecraft) {
-        return (minecraft == null) ? null : Bukkit.getLootTable(CraftLootTable.minecraftToBukkitKey(minecraft));
+        return (minecraft == null || minecraft.location().getPath().isEmpty()) ? null : Bukkit.getLootTable(CraftLootTable.minecraftToBukkitKey(minecraft)); // Paper - fix some NamespacedKey parsing
     }
 
     public static NamespacedKey minecraftToBukkitKey(ResourceKey<LootTable> minecraft) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
Patch:
@@ -33,6 +33,7 @@ public static Attribute stringToBukkit(String string) {
         string = FieldRename.convertAttributeName(ApiVersion.CURRENT, string);
         string = string.toLowerCase(Locale.ROOT);
         NamespacedKey key = NamespacedKey.fromString(string);
+        if (key == null) return null; // Paper - Fixup NamespacedKey handling
 
         // Now also convert from when keys where saved
         return CraftRegistry.get(Registry.ATTRIBUTE, key, ApiVersion.CURRENT);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
Patch:
@@ -16,7 +16,7 @@ public CraftPainting(CraftServer server, net.minecraft.world.entity.decoration.P
 
     @Override
     public Art getArt() {
-        return CraftArt.minecraftHolderToBukkit(this.getHandle().getVariant());
+        return org.bukkit.craftbukkit.CraftRegistry.unwrapAndConvertHolder(org.bukkit.Registry.ART, this.getHandle().getVariant()).orElseThrow(() -> new IllegalStateException("Inlined painting variants are not supported yet in the API!")); // Paper
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
Patch:
@@ -42,7 +42,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
             for (int i = 0; i < Math.min(patterns.size(), 20); i++) {
                 BannerPatternLayers.Layer p = patterns.get(i);
                 DyeColor color = DyeColor.getByWoolData((byte) p.color().getId());
-                PatternType pattern = CraftPatternType.minecraftHolderToBukkit(p.pattern());
+                PatternType pattern = org.bukkit.craftbukkit.CraftRegistry.unwrapAndConvertHolder(org.bukkit.Registry.BANNER_PATTERN, p.pattern()).orElse(null); // Paper - fix upstream not handling inlined banner pattern
 
                 if (color != null && pattern != null) {
                     this.patterns.add(new Pattern(color, pattern));

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaShield.java
Patch:
@@ -17,6 +17,7 @@
 import org.bukkit.block.banner.Pattern;
 import org.bukkit.block.banner.PatternType;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.block.CraftBlockStates;
 import org.bukkit.craftbukkit.block.banner.CraftPatternType;
 import org.bukkit.inventory.meta.BlockStateMeta;
@@ -53,7 +54,7 @@ public class CraftMetaShield extends CraftMetaItem implements ShieldMeta, BlockS
             for (int i = 0; i < Math.min(patterns.size(), 20); i++) {
                 BannerPatternLayers.Layer p = patterns.get(i);
                 DyeColor color = DyeColor.getByWoolData((byte) p.color().getId());
-                PatternType pattern = CraftPatternType.minecraftHolderToBukkit(p.pattern());
+                PatternType pattern = CraftRegistry.unwrapAndConvertHolder(io.papermc.paper.registry.RegistryKey.BANNER_PATTERN, p.pattern()).orElse(null); // Paper - fix upstream not being correct
 
                 if (color != null && pattern != null) {
                     this.addPattern(new Pattern(color, pattern));

File: paper-server/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionType.java
Patch:
@@ -69,6 +69,7 @@ public static PotionType stringToBukkit(String string) {
         string = FieldRename.convertPotionTypeName(ApiVersion.CURRENT, string);
         string = string.toLowerCase(Locale.ROOT);
         NamespacedKey key = NamespacedKey.fromString(string);
+        if (key == null) return null; // Paper - Fixup NamespacedKey handling
 
         // Now also convert from when keys where saved
         return CraftRegistry.get(Registry.POTION, key, ApiVersion.CURRENT);

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
Patch:
@@ -13,7 +13,7 @@ public static NamespacedKey fromStringOrNull(String string) {
             return null;
         }
         ResourceLocation minecraft = ResourceLocation.tryParse(string);
-        return (minecraft == null) ? null : CraftNamespacedKey.fromMinecraft(minecraft);
+        return (minecraft == null || minecraft.getPath().isEmpty()) ? null : CraftNamespacedKey.fromMinecraft(minecraft); // Paper - Bukkit's parser does not match Vanilla for empty paths
     }
 
     public static NamespacedKey fromString(String string) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -509,7 +509,7 @@ public boolean breakNaturally(ItemStack item, boolean triggerEffect, boolean dro
 
         // Modelled off EntityHuman#hasBlock
         if (block != Blocks.AIR && (item == null || !iblockdata.requiresCorrectToolForDrops() || nmsItem.isCorrectToolForDrops(iblockdata))) {
-            net.minecraft.world.level.block.Block.dropResources(iblockdata, this.world.getMinecraftWorld(), this.position, this.world.getBlockEntity(this.position), null, nmsItem);
+            net.minecraft.world.level.block.Block.dropResources(iblockdata, this.world.getMinecraftWorld(), this.position, this.world.getBlockEntity(this.position), null, nmsItem, false); // Paper - Properly handle xp dropping
             // Paper start - improve Block#breanNaturally
             if (triggerEffect) {
                 if (iblockdata.getBlock() instanceof net.minecraft.world.level.block.BaseFireBlock) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -1685,7 +1685,7 @@ public boolean addAttributeModifier(@Nonnull Attribute attribute, @Nonnull Attri
         Preconditions.checkNotNull(modifier, "AttributeModifier cannot be null");
         this.checkAttributeList();
         for (Map.Entry<Attribute, AttributeModifier> entry : this.attributeModifiers.entries()) {
-            Preconditions.checkArgument(!entry.getValue().getKey().equals(modifier.getKey()), "Cannot register AttributeModifier. Modifier is already applied! %s", modifier);
+            Preconditions.checkArgument(!(entry.getValue().getKey().equals(modifier.getKey()) && entry.getKey() == attribute), "Cannot register AttributeModifier. Modifier is already applied! %s", modifier); // Paper - attribute modifiers with same namespaced key but on different attributes are fine
         }
         return this.attributeModifiers.put(attribute, modifier);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -723,7 +723,7 @@ private LightningStrike strikeLightning0(Location loc, boolean isVisual) {
 
         LightningBolt lightning = EntityType.LIGHTNING_BOLT.create(this.world, EntitySpawnReason.COMMAND);
         lightning.moveTo(loc.getX(), loc.getY(), loc.getZ());
-        lightning.setVisualOnly(isVisual);
+        lightning.isEffect = isVisual; // Paper - Properly handle lightning effects api
         this.world.strikeLightning(lightning, LightningStrikeEvent.Cause.CUSTOM);
         return (LightningStrike) lightning.getBukkitEntity();
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
Patch:
@@ -13,7 +13,7 @@ public CraftLightningStrike(final CraftServer server, final LightningBolt entity
 
     @Override
     public boolean isEffect() {
-        return this.getHandle().visualOnly;
+        return this.getHandle().isEffect; // Paper - Properly handle lightning effects api
     }
 
     public int getFlashes() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
Patch:
@@ -87,8 +87,8 @@ public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard
 
         // Old objective tracking
         HashSet<Objective> removed = new HashSet<>();
-        for (int i = 0; i < 3; ++i) {
-            Objective scoreboardobjective = oldboard.getDisplayObjective(net.minecraft.world.scores.DisplaySlot.BY_ID.apply(i));
+        for (net.minecraft.world.scores.DisplaySlot slot : net.minecraft.world.scores.DisplaySlot.values()) { // Paper - clear all display slots
+            Objective scoreboardobjective = oldboard.getDisplayObjective(slot); // Paper - clear all display slots
             if (scoreboardobjective != null && !removed.contains(scoreboardobjective)) {
                 entityplayer.connection.send(new ClientboundSetObjectivePacket(scoreboardobjective, 1));
                 removed.add(scoreboardobjective);

File: paper-server/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
Patch:
@@ -44,7 +44,7 @@ public boolean revokeCriteria(String criteria) {
     @Override
     public Date getDateAwarded(String criteria) {
         CriterionProgress criterion = this.handle.getCriterion(criteria);
-        return (criterion == null) ? null : Date.from(criterion.getObtained());
+        return (criterion == null) ? null : criterion.getObtained() == null ? null : Date.from(criterion.getObtained()); // Paper - fix NPE if criterion isn't obtained
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1363,7 +1363,7 @@ public <T> void playEffect(Location loc, Effect effect, T data) {
     public <T> void playEffect(Location loc, Effect effect, T data, int radius) {
         if (data != null) {
             Preconditions.checkArgument(effect.getData() != null, "Effect.%s does not have a valid Data", effect);
-            Preconditions.checkArgument(effect.getData().isAssignableFrom(data.getClass()), "%s data cannot be used for the %s effect", data.getClass().getName(), effect);
+            Preconditions.checkArgument(effect.isApplicable(data), "%s data cannot be used for the %s effect", data.getClass().getName(), effect); // Paper
         } else {
             // Special case: the axis is optional for ELECTRIC_SPARK
             Preconditions.checkArgument(effect.getData() == null || effect == Effect.ELECTRIC_SPARK, "Wrong kind of data for the %s effect", effect);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -924,7 +924,7 @@ public <T> void playEffect(Location loc, Effect effect, T data) {
         Preconditions.checkArgument(effect != null, "Effect cannot be null");
         if (data != null) {
             Preconditions.checkArgument(effect.getData() != null, "Effect.%s does not have a valid Data", effect);
-            Preconditions.checkArgument(effect.getData().isAssignableFrom(data.getClass()), "%s data cannot be used for the %s effect", data.getClass().getName(), effect);
+            Preconditions.checkArgument(effect.isApplicable(data), "%s data cannot be used for the %s effect", data.getClass().getName(), effect); // Paper
         } else {
             // Special case: the axis is optional for ELECTRIC_SPARK
             Preconditions.checkArgument(effect.getData() == null || effect == Effect.ELECTRIC_SPARK, "Wrong kind of data for the %s effect", effect);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
Patch:
@@ -115,17 +115,17 @@ public boolean isBanned() {
     }
 
     @Override
-    public BanEntry<PlayerProfile> ban(String reason, Date expires, String source) {
+    public BanEntry<com.destroystokyo.paper.profile.PlayerProfile> ban(String reason, Date expires, String source) { // Paper - fix ban list API
         return ((ProfileBanList) this.server.getBanList(BanList.Type.PROFILE)).addBan(this.getPlayerProfile(), reason, expires, source);
     }
 
     @Override
-    public BanEntry<PlayerProfile> ban(String reason, Instant expires, String source) {
+    public BanEntry<com.destroystokyo.paper.profile.PlayerProfile> ban(String reason, Instant expires, String source) { // Paper - fix ban list API
         return ((ProfileBanList) this.server.getBanList(BanList.Type.PROFILE)).addBan(this.getPlayerProfile(), reason, expires, source);
     }
 
     @Override
-    public BanEntry<PlayerProfile> ban(String reason, Duration duration, String source) {
+    public BanEntry<com.destroystokyo.paper.profile.PlayerProfile> ban(String reason, Duration duration, String source) { // Paper - fix ban list API
         return ((ProfileBanList) this.server.getBanList(BanList.Type.PROFILE)).addBan(this.getPlayerProfile(), reason, duration, source);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanEntry.java
Patch:
@@ -9,7 +9,7 @@
 import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.profile.PlayerProfile;
 
-public final class CraftProfileBanEntry implements BanEntry<PlayerProfile> {
+public final class CraftProfileBanEntry implements BanEntry<com.destroystokyo.paper.profile.PlayerProfile> { // Paper
     private static final Date minorDate = Date.from(Instant.parse("1899-12-31T04:00:00Z"));
     private final UserBanList list;
     private final GameProfile profile;
@@ -33,8 +33,8 @@ public String getTarget() {
     }
 
     @Override
-    public PlayerProfile getBanTarget() {
-        return new CraftPlayerProfile(this.profile);
+    public com.destroystokyo.paper.profile.PlayerProfile getBanTarget() { // Paper
+        return new com.destroystokyo.paper.profile.CraftPlayerProfile(this.profile); // Paper
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
Patch:
@@ -265,7 +265,7 @@ public static <I extends ItemMeta> ItemMetaData<I> getItemMetaData(CraftItemType
         if (itemType == ItemType.SUSPICIOUS_STEW) {
             return CraftItemMetas.asType(CraftItemMetas.SUSPICIOUS_STEW_META_DATA);
         }
-        if (itemType == ItemType.COD_BUCKET || itemType == ItemType.PUFFERFISH_BUCKET
+        if (itemType == ItemType.COD_BUCKET || itemType == ItemType.PUFFERFISH_BUCKET || itemType == ItemType.TADPOLE_BUCKET // Paper
                 || itemType == ItemType.SALMON_BUCKET || itemType == ItemType.ITEM_FRAME
                 || itemType == ItemType.GLOW_ITEM_FRAME || itemType == ItemType.PAINTING) {
             return CraftItemMetas.asType(CraftItemMetas.ENTITY_TAG_META_DATA);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java
Patch:
@@ -19,6 +19,7 @@ public class CraftMetaEntityTag extends CraftMetaItem {
             Material.COD_BUCKET,
             Material.PUFFERFISH_BUCKET,
             Material.SALMON_BUCKET,
+            Material.TADPOLE_BUCKET, // Paper
             Material.ITEM_FRAME,
             Material.GLOW_ITEM_FRAME,
             Material.PAINTING

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
Patch:
@@ -60,6 +60,7 @@ public net.minecraft.world.entity.projectile.Projectile getHandle() {
 
     @Override
     public final org.bukkit.projectiles.ProjectileSource getShooter() {
+        this.getHandle().refreshProjectileSource(true); // Paper - Refresh ProjectileSource for projectiles
         return this.getHandle().projectileSource;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
Patch:
@@ -164,7 +164,7 @@ public void setBiteChance(double chance) {
 
     @Override
     public boolean isInOpenWater() {
-        return this.getHandle().isOpenWaterFishing();
+        return this.getHandle().outOfWaterTime < 10 && this.getHandle().calculateOpenWater(this.getHandle().blockPosition()); // Paper - isOpenWaterFishing is only calculated when a "fish" is approaching the hook
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
Patch:
@@ -78,7 +78,7 @@ public void startDancing() {
     public void stopDancing() {
         this.getHandle().forceDancing = false;
         this.getHandle().jukeboxPos = null;
-        this.getHandle().setJukeboxPlaying(null, false);
+        this.getHandle().setDancing(false); // Paper - Directly modify set dancing to avoid NPE
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
Patch:
@@ -44,6 +44,7 @@
  */
 @Deprecated
 public final class CraftLegacy {
+    private static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger(); // Paper - Improve logging and errors
 
     private static final Map<Byte, Material> SPAWN_EGGS = new HashMap<>();
     private static final Set<String> whitelistedStates = new HashSet<>(Arrays.asList("explode", "check_decay", "decayable", "facing"));
@@ -264,7 +265,7 @@ public static void init() {
     }
 
     static {
-        System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!");
+        LOGGER.warn("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!"); // Paper - Improve logging and errors; doesn't need to be an error
         if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDebugging()) {
             new Exception().printStackTrace();
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
Patch:
@@ -261,10 +261,10 @@ public boolean generateTree(WorldGenLevel access, ChunkGenerator chunkGenerator,
                 ((ChorusFlowerBlock) Blocks.CHORUS_FLOWER).generatePlant(access, pos, random, 8);
                 return true;
             case CRIMSON_FUNGUS:
-                gen = TreeFeatures.CRIMSON_FUNGUS_PLANTED;
+                gen = this.isNormalWorld() ? TreeFeatures.CRIMSON_FUNGUS_PLANTED : TreeFeatures.CRIMSON_FUNGUS; // Paper - Fix async entity add due to fungus trees; if world gen, don't use planted version
                 break;
             case WARPED_FUNGUS:
-                gen = TreeFeatures.WARPED_FUNGUS_PLANTED;
+                gen = this.isNormalWorld() ? TreeFeatures.WARPED_FUNGUS_PLANTED : TreeFeatures.WARPED_FUNGUS; // Paper - Fix async entity add due to fungus trees; if world gen, don't use planted version
                 break;
             case AZALEA:
                 gen = TreeFeatures.AZALEA_TREE;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
Patch:
@@ -14,7 +14,7 @@
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 
-public class CraftThrownPotion extends CraftThrowableProjectile implements ThrownPotion {
+public class CraftThrownPotion extends CraftThrowableProjectile implements ThrownPotion, org.bukkit.entity.SplashPotion, org.bukkit.entity.LingeringPotion { // Paper - implement other classes to avoid violating spawn method generic contracts
     public CraftThrownPotion(CraftServer server, net.minecraft.world.entity.projectile.ThrownPotion entity) {
         super(server, entity);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1928,7 +1928,7 @@ public int broadcast(net.kyori.adventure.text.Component message, String permissi
         // Paper end
         Set<CommandSender> recipients = new HashSet<>();
         for (Permissible permissible : this.getPluginManager().getPermissionSubscriptions(permission)) {
-            if (permissible instanceof CommandSender && permissible.hasPermission(permission)) {
+            if (permissible instanceof CommandSender && !(permissible instanceof org.bukkit.command.BlockCommandSender) && permissible.hasPermission(permission)) { // Paper - Don't broadcast messages to command blocks
                 recipients.add((CommandSender) permissible);
             }
         }

File: paper-server/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
Patch:
@@ -109,7 +109,7 @@ private void listEntities(final CommandSender sender, final String[] args) {
                 ChunkPos chunk = e.chunkPosition();
                 info.left++;
                 info.right.put(chunk, info.right.getOrDefault(chunk, 0) + 1);
-                if (!world.isPositionEntityTicking(e.blockPosition())) {
+                if (!world.isPositionEntityTicking(e.blockPosition()) || (e instanceof net.minecraft.world.entity.Marker && !world.paperConfig().entities.markers.tick)) { // Paper - Configurable marker ticking
                     nonEntityTicking.merge(key, 1, Integer::sum);
                 }
             });

File: paper-server/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
Patch:
@@ -121,7 +121,7 @@ private boolean isInstance(final PersistentDataType<P, ?> persistentDataType, fi
         }
     }
 
-    private final Map<Class, TagAdapter> adapters = new HashMap<>();
+    private final Map<Class, TagAdapter> adapters = new java.util.concurrent.ConcurrentHashMap<>(); // Paper - Replace HashMap with ConcurrentHashMap to avoid CME
 
     /**
      * Creates a suitable adapter instance for the primitive class type.

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -1378,11 +1378,11 @@ public static EntityTargetLivingEntityEvent callEntityTargetLivingEvent(Entity e
         return event;
     }
 
-    public static EntityBreakDoorEvent callEntityBreakDoorEvent(Entity entity, BlockPos pos) {
+    public static EntityBreakDoorEvent callEntityBreakDoorEvent(Entity entity, BlockPos pos, net.minecraft.world.level.block.state.BlockState newState) { // Paper
         org.bukkit.entity.Entity entity1 = entity.getBukkitEntity();
         Block block = CraftBlock.at(entity.level(), pos);
 
-        EntityBreakDoorEvent event = new EntityBreakDoorEvent((LivingEntity) entity1, block);
+        EntityBreakDoorEvent event = new EntityBreakDoorEvent((LivingEntity) entity1, block, newState.createCraftBlockData()); // Paper
         entity1.getServer().getPluginManager().callEvent(event);
 
         return event;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1385,7 +1385,7 @@ public boolean unloadWorld(World world, boolean save) {
 
         try {
             if (save) {
-                handle.save(null, true, true);
+                handle.save(null, true, false); // Paper - Fix saving in unloadWorld
             }
 
             handle.getChunkSource().close(save);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
Patch:
@@ -125,7 +125,7 @@ public <T> void setParticle(Particle particle, T data) {
 
     @Override
     public Color getColor() {
-        return Color.fromRGB(this.getHandle().potionContents.getColor());
+        return Color.fromRGB(this.getHandle().potionContents.getColor() & 0x00FFFFFF); // Paper - skip alpha channel
     }
 
     @Override
@@ -143,15 +143,15 @@ public boolean addCustomEffect(PotionEffect effect, boolean override) {
             this.removeCustomEffect(effect.getType());
         }
         this.getHandle().addEffect(CraftPotionUtil.fromBukkit(effect));
-        this.getHandle().updateColor();
+        // this.getHandle().updateColor(); // Paper - already done above
         return true;
     }
 
     @Override
     public void clearCustomEffects() {
         PotionContents old = this.getHandle().potionContents;
         this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), List.of(), old.customName()));
-        this.getHandle().updateColor();
+        // this.getHandle().updateColor(); // Paper - already done above
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
Patch:
@@ -440,7 +440,7 @@ Level minecraftWorld() {
             BlockPos pos = BlockPos.containing(spawnData.x(), spawnData.y(), spawnData.z());
             return new FallingBlockEntity(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), spawnData.world().getBlockState(pos)); // Paper - create falling block entities correctly
         }));
-        register(new EntityTypeData<>(EntityType.FIREWORK_ROCKET, Firework.class, CraftFirework::new, spawnData -> new FireworkRocketEntity(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), net.minecraft.world.item.ItemStack.EMPTY)));
+        register(new EntityTypeData<>(EntityType.FIREWORK_ROCKET, Firework.class, CraftFirework::new, spawnData -> new FireworkRocketEntity(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), FireworkRocketEntity.getDefaultItem()))); // Paper - pass correct default to rocket for data storage
         register(new EntityTypeData<>(EntityType.EVOKER_FANGS, EvokerFangs.class, CraftEvokerFangs::new, spawnData -> new net.minecraft.world.entity.projectile.EvokerFangs(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), (float) Math.toRadians(spawnData.yaw()), 0, null)));
         register(new EntityTypeData<>(EntityType.COMMAND_BLOCK_MINECART, CommandMinecart.class, CraftMinecartCommand::new, createMinecart(net.minecraft.world.entity.EntityType.COMMAND_BLOCK_MINECART)));
         register(new EntityTypeData<>(EntityType.MINECART, RideableMinecart.class, CraftMinecartRideable::new, createMinecart(net.minecraft.world.entity.EntityType.MINECART)));

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
Patch:
@@ -438,7 +438,7 @@ Level minecraftWorld() {
         register(new EntityTypeData<>(EntityType.TNT, TNTPrimed.class, CraftTNTPrimed::new, spawnData -> new PrimedTnt(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), null)));
         register(new EntityTypeData<>(EntityType.FALLING_BLOCK, FallingBlock.class, CraftFallingBlock::new, spawnData -> {
             BlockPos pos = BlockPos.containing(spawnData.x(), spawnData.y(), spawnData.z());
-            return FallingBlockEntity.fall(spawnData.minecraftWorld(), pos, spawnData.world().getBlockState(pos));
+            return new FallingBlockEntity(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), spawnData.world().getBlockState(pos)); // Paper - create falling block entities correctly
         }));
         register(new EntityTypeData<>(EntityType.FIREWORK_ROCKET, Firework.class, CraftFirework::new, spawnData -> new FireworkRocketEntity(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), net.minecraft.world.item.ItemStack.EMPTY)));
         register(new EntityTypeData<>(EntityType.EVOKER_FANGS, EvokerFangs.class, CraftEvokerFangs::new, spawnData -> new net.minecraft.world.entity.projectile.EvokerFangs(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), (float) Math.toRadians(spawnData.yaw()), 0, null)));

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
Patch:
@@ -54,7 +54,7 @@ public RenderType getDefaultRenderType() {
     }
 
     static CraftCriteria getFromNMS(Objective objective) {
-        return CraftCriteria.DEFAULTS.get(objective.getCriteria().getName());
+        return java.util.Objects.requireNonNullElseGet(CraftCriteria.DEFAULTS.get(objective.getCriteria().getName()), () -> new CraftCriteria(objective.getCriteria())); // Paper
     }
 
     public static CraftCriteria getFromBukkit(String name) {

File: paper-server/src/main/java/org/spigotmc/SpigotConfig.java
Patch:
@@ -381,7 +381,7 @@ private static void debug()
             Bukkit.getLogger().info( "Debug logging is enabled" );
         } else
         {
-            Bukkit.getLogger().info( "Debug logging is disabled" );
+            // Bukkit.getLogger().info( "Debug logging is disabled" ); // Paper - Don't log if debug logging isn't enabled.
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
Patch:
@@ -128,7 +128,7 @@ public void setPatternColor(DyeColor color) {
         if (this.variant == null) {
             this.variant = 0;
         }
-        this.variant = CraftTropicalFish.getData(color, this.getPatternColor(), this.getPattern());
+        this.variant = CraftTropicalFish.getData(color, this.getBodyColor(), this.getPattern()); // Paper - properly set tropical fish pattern color without mutating body color
     }
 
     @Override

File: paper-server/src/main/java/io/papermc/paper/command/PaperCommand.java
Patch:
@@ -40,6 +40,7 @@ public final class PaperCommand extends Command {
         commands.put(Set.of("dumpplugins"), new DumpPluginsCommand());
         commands.put(Set.of("syncloadinfo"), new SyncLoadInfoCommand());
         commands.put(Set.of("dumpitem"), new DumpItemCommand());
+        commands.put(Set.of("mobcaps", "playermobcaps"), new MobcapsCommand());
 
         return commands.entrySet().stream()
             .flatMap(entry -> entry.getKey().stream().map(s -> Map.entry(s, entry.getValue())))

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
Patch:
@@ -61,7 +61,7 @@ public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxE
         CommandSender sender = context.getSource().getBukkitSender();
 
         try {
-            return this.server.dispatchCommand(sender, context.getInput()) ? 1 : 0;
+            return this.server.dispatchCommand(sender, context.getRange().get(context.getInput())) ? 1 : 0; // Paper - Fix commands from signs not firing command events; actually use the StringRange from context
         } catch (CommandException ex) {
             sender.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
             this.server.getLogger().log(Level.SEVERE, null, ex);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -558,7 +558,7 @@ public boolean applyBoneMeal(BlockFace face) {
             }
         }
 
-        return result == InteractionResult.SUCCESS && (event == null || !event.isCancelled());
+        return result == InteractionResult.CONSUME && (event == null || !event.isCancelled()); // Paper - CONSUME is returned on success server-side (see BoneMealItem.applyBoneMeal and InteractionResult.sidedSuccess(boolean))
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
Patch:
@@ -75,7 +75,7 @@ public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes
         return new AttributeModifier(CraftNamespacedKey.fromMinecraft(nms.id()), nms.amount(), AttributeModifier.Operation.values()[nms.operation().ordinal()], org.bukkit.inventory.EquipmentSlotGroup.ANY);
     }
 
-    public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes.AttributeModifier nms, EquipmentSlot slot) {
-        return new AttributeModifier(CraftNamespacedKey.fromMinecraft(nms.id()), nms.amount(), AttributeModifier.Operation.values()[nms.operation().ordinal()], slot.getGroup());
+    public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes.AttributeModifier nms, net.minecraft.world.entity.EquipmentSlotGroup slot) { // Paper
+        return new AttributeModifier(CraftNamespacedKey.fromMinecraft(nms.id()), nms.amount(), AttributeModifier.Operation.values()[nms.operation().ordinal()], org.bukkit.craftbukkit.CraftEquipmentSlot.getSlot(slot)); // Paper
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
Patch:
@@ -16,7 +16,7 @@ public int getSize() {
 
     @Override
     public void setSize(int size) {
-        this.getHandle().setSize(size, true);
+        this.getHandle().setSize(size, /* true */ getHandle().isAlive()); // Paper - fix dead slime setSize invincibility
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -2709,7 +2709,7 @@ public <T> void spawnParticle(Particle particle, Location location, int count, d
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
-        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), false, force, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
+        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), false, force, x, y, z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count); // Paper - fix x/y/z precision loss
         this.getHandle().connection.send(packetplayoutworldparticles);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
Patch:
@@ -100,7 +100,7 @@ public boolean contains(Biome biome) {
     public Material getBlockType(int x, int y, int z) {
         this.validateChunkCoordinates(x, y, z);
 
-        return CraftBlockType.minecraftToBukkit(this.blockids[this.getSectionIndex(y)].get(x, y & 0xF, z).getBlock());
+        return this.blockids[this.getSectionIndex(y)].get(x, y & 0xF, z).getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -220,7 +220,7 @@ public static boolean setTypeAndData(LevelAccessor world, BlockPos position, net
 
     @Override
     public Material getType() {
-        return CraftBlockType.minecraftToBukkit(this.world.getBlockState(this.position).getBlock());
+        return this.world.getBlockState(this.position).getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
Patch:
@@ -175,7 +175,7 @@ public void setType(final Material type) {
 
     @Override
     public Material getType() {
-        return CraftBlockType.minecraftToBukkit(this.data.getBlock());
+        return this.data.getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     public void setFlag(int flag) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
Patch:
@@ -63,7 +63,7 @@ protected CraftBlockData(net.minecraft.world.level.block.state.BlockState state)
 
     @Override
     public Material getMaterial() {
-        return CraftBlockType.minecraftToBukkit(this.state.getBlock());
+        return this.state.getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     public net.minecraft.world.level.block.state.BlockState getState() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
Patch:
@@ -96,7 +96,7 @@ public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftBlockType.minecraftToBukkit(this.getTypeId(x, y, z).getBlock());
+        return this.getTypeId(x, y, z).getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -241,7 +241,7 @@ public boolean teleport(Location location, TeleportCause cause) {
         }
 
         // entity.setLocation() throws no event, and so cannot be cancelled
-        this.entity.absMoveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        entity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
         // SPIGOT-619: Force sync head rotation also
         this.entity.setYHeadRot(location.getYaw());
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -603,6 +603,7 @@ public <T extends Projectile> T launchProjectile(Class<? extends T> projectile,
             }
 
             ((AbstractHurtingProjectile) launch).projectileSource = this;
+            launch.preserveMotion = true; // Paper - Fix Entity Teleportation and cancel velocity if teleported
             launch.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = this.getEyeLocation();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -123,7 +123,7 @@ static FireworkExplosion getExplosion(FireworkEffect effect) {
         return new FireworkExplosion(CraftMetaFirework.getNBT(effect.getType()), colors, fadeColors, effect.hasTrail(), effect.hasFlicker());
     }
 
-    static FireworkExplosion.Shape getNBT(Type type) {
+    public static FireworkExplosion.Shape getNBT(Type type) { // Paper - package-private -> public
         switch (type) {
             case BALL:
                 return FireworkExplosion.Shape.SMALL_BALL;

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftNBTTagConfigSerializer.java
Patch:
@@ -18,7 +18,7 @@
 public class CraftNBTTagConfigSerializer {
 
     private static final Pattern ARRAY = Pattern.compile("^\\[.*]");
-    private static final Pattern INTEGER = Pattern.compile("[-+]?(?:0|[1-9][0-9]*)?i", Pattern.CASE_INSENSITIVE);
+    private static final Pattern INTEGER = Pattern.compile("[-+]?(?:0|[1-9][0-9]*)i", Pattern.CASE_INSENSITIVE); // Paper - fix regex
     private static final Pattern DOUBLE = Pattern.compile("[-+]?(?:[0-9]+[.]?|[0-9]*[.][0-9]+)(?:e[-+]?[0-9]+)?d", Pattern.CASE_INSENSITIVE);
     private static final TagParser MOJANGSON_PARSER = new TagParser(new StringReader(""));
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1000,8 +1000,8 @@ public void reload() {
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         for (ServerLevel world : this.console.getAllLevels()) {
-            world.serverLevelData.setDifficulty(config.difficulty);
-            world.setSpawnSettings(config.spawnMonsters);
+            // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
+            world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
 
             for (SpawnCategory spawnCategory : SpawnCategory.values()) {
                 if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1170,7 +1170,7 @@ public void setAutoSave(boolean value) {
 
     @Override
     public void setDifficulty(Difficulty difficulty) {
-        this.getHandle().serverLevelData.setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
+        this.getHandle().getServer().setDifficulty(this.getHandle(), net.minecraft.world.Difficulty.byId(difficulty.getValue()), true); // Paper - per level difficulty; don't skip other difficulty-changing logic
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
Patch:
@@ -196,7 +196,7 @@ public void runTaskLaterAsynchronously(Plugin plugin, Consumer<? super BukkitTas
 
     @Override
     public void runTaskTimerAsynchronously(Plugin plugin, Consumer<? super BukkitTask> task, long delay, long period) throws IllegalArgumentException {
-        this.runTaskTimerAsynchronously(plugin, (Object) task, delay, CraftTask.NO_REPEATING);
+        this.runTaskTimerAsynchronously(plugin, (Object) task, delay, period); // Paper
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -494,7 +494,7 @@ public boolean addPotionEffect(PotionEffect effect) {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
-        this.getHandle().addEffect(new MobEffectInstance(CraftPotionEffectType.bukkitToMinecraftHolder(effect.getType()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles()), EntityPotionEffectEvent.Cause.PLUGIN);
+        this.getHandle().addEffect(org.bukkit.craftbukkit.potion.CraftPotionUtil.fromBukkit(effect), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
         return true;
     }
 
@@ -515,7 +515,7 @@ public boolean hasPotionEffect(PotionEffectType type) {
     @Override
     public PotionEffect getPotionEffect(PotionEffectType type) {
         MobEffectInstance handle = this.getHandle().getEffect(CraftPotionEffectType.bukkitToMinecraftHolder(type));
-        return (handle == null) ? null : new PotionEffect(CraftPotionEffectType.minecraftHolderToBukkit(handle.getEffect()), handle.getDuration(), handle.getAmplifier(), handle.isAmbient(), handle.isVisible());
+        return (handle == null) ? null : org.bukkit.craftbukkit.potion.CraftPotionUtil.toBukkit(handle); // Paper
     }
 
     @Override
@@ -527,7 +527,7 @@ public void removePotionEffect(PotionEffectType type) {
     public Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
         for (MobEffectInstance handle : this.getHandle().activeEffects.values()) {
-            effects.add(new PotionEffect(CraftPotionEffectType.minecraftHolderToBukkit(handle.getEffect()), handle.getDuration(), handle.getAmplifier(), handle.isAmbient(), handle.isVisible()));
+            effects.add(org.bukkit.craftbukkit.potion.CraftPotionUtil.toBukkit(handle)); // Paper
         }
         return effects;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
Patch:
@@ -78,7 +78,7 @@ public static PotionData toBukkit(PotionType type) {
 
     public static MobEffectInstance fromBukkit(PotionEffect effect) {
         Holder<MobEffect> type = CraftPotionEffectType.bukkitToMinecraftHolder(effect.getType());
-        return new MobEffectInstance(type, effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles());
+        return new MobEffectInstance(type, effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()); // Paper
     }
 
     public static PotionEffect toBukkit(MobEffectInstance effect) {
@@ -87,7 +87,7 @@ public static PotionEffect toBukkit(MobEffectInstance effect) {
         int duration = effect.getDuration();
         boolean ambient = effect.isAmbient();
         boolean particles = effect.isVisible();
-        return new PotionEffect(type, duration, amp, ambient, particles);
+        return new PotionEffect(type, duration, amp, ambient, particles, effect.showIcon()); // Paper
     }
 
     public static boolean equals(Holder<MobEffect> mobEffect, PotionEffectType type) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1051,6 +1051,7 @@ public void reload() {
                 plugin.getDescription().getFullName(),
                 "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
             ));
+            if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper - Debugging
         }
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
         this.loadPlugins();

File: paper-server/src/main/java/org/bukkit/craftbukkit/Main.java
Patch:
@@ -27,6 +27,7 @@ public static void main(String[] args) {
         }
         // Paper end
         // Todo: Installation script
+        if (System.getProperty("jdk.nio.maxCachedBufferSize") == null) System.setProperty("jdk.nio.maxCachedBufferSize", "262144"); // Paper - cap per-thread NIO cache size; https://www.evanjones.ca/java-bytebuffer-leak.html
         OptionParser parser = new OptionParser() {
             {
                 this.acceptsAll(Main.asList("?", "help"), "Show the help");

File: paper-server/src/main/java/io/papermc/paper/command/PaperCommand.java
Patch:
@@ -38,6 +38,7 @@ public final class PaperCommand extends Command {
         commands.put(Set.of("reload"), new ReloadCommand());
         commands.put(Set.of("version"), new VersionCommand());
         commands.put(Set.of("dumpplugins"), new DumpPluginsCommand());
+        commands.put(Set.of("syncloadinfo"), new SyncLoadInfoCommand());
 
         return commands.entrySet().stream()
             .flatMap(entry -> entry.getKey().stream().map(s -> Map.entry(s, entry.getValue())))

File: paper-server/src/main/java/io/papermc/paper/command/PaperCommand.java
Patch:
@@ -73,7 +73,7 @@ private static boolean testPermission(final CommandSender sender, final String p
         if (sender.hasPermission(BASE_PERM + permission) || sender.hasPermission("bukkit.command.paper")) {
             return true;
         }
-        sender.sendMessage(text("I'm sorry, but you do not have permission to perform this command. Please contact the server administrators if you believe that this is in error.", RED));
+        sender.sendMessage(Bukkit.permissionMessage());
         return false;
     }
 

File: paper-server/src/main/java/org/spigotmc/SpigotWorldConfig.java
Patch:
@@ -190,7 +190,7 @@ private void simulationDistance()
     public byte mobSpawnRange;
     private void mobSpawnRange()
     {
-        this.mobSpawnRange = (byte) this.getInt( "mob-spawn-range", 6 );
+        this.mobSpawnRange = (byte) getInt( "mob-spawn-range", 8 ); // Paper - Vanilla
         this.log( "Mob Spawn Range: " + this.mobSpawnRange );
     }
 

File: paper-api/src/main/java/org/bukkit/plugin/messaging/Messenger.java
Patch:
@@ -24,7 +24,7 @@ public interface Messenger {
     /**
      * Represents the largest size that a Plugin Channel may be.
      */
-    public static final int MAX_CHANNEL_SIZE = 64;
+    public static final int MAX_CHANNEL_SIZE = Integer.getInteger("paper.maxCustomChannelName", java.lang.Short.MAX_VALUE); // Paper - set true max channel size
 
     /**
      * Checks if the specified channel is a reserved name.

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -214,6 +214,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private CraftWorldBorder clientWorldBorder = null;
     private BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
     public org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus; // Paper - more resource pack API
+    private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
@@ -2296,7 +2297,7 @@ private void handlePushResourcePack(ClientboundResourcePackPushPacket resourcePa
     }
 
     public void addChannel(String channel) {
-        Preconditions.checkState(this.channels.size() < 128, "Cannot register channel '%s'. Too many channels registered!", channel);
+        Preconditions.checkState(DISABLE_CHANNEL_LIMIT || this.channels.size() < 128, "Cannot register channel. Too many channels registered!"); // Paper - flag to disable channel limit
         channel = StandardMessenger.validateAndCorrectChannel(channel);
         if (this.channels.add(channel)) {
             this.server.getPluginManager().callEvent(new PlayerRegisterChannelEvent(this, channel));

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
+import com.destroystokyo.paper.inventory.meta.ArmorStandMeta;
 import java.util.function.BiFunction;
 import java.util.function.Function;
 import net.minecraft.world.item.BannerItem;
@@ -103,7 +104,7 @@ public record ItemMetaData<I extends ItemMeta>(Class<I> metaClass, Function<Item
             item -> new CraftMetaSpawnEgg(item.getComponentsPatch()),
             (type, meta) -> meta instanceof CraftMetaSpawnEgg spawnEgg ? spawnEgg : new CraftMetaSpawnEgg(meta));
 
-    private static final ItemMetaData<ItemMeta> ARMOR_STAND_META_DATA = new ItemMetaData<>(ItemMeta.class,
+    private static final ItemMetaData<ArmorStandMeta> ARMOR_STAND_META_DATA = new ItemMetaData<>(ArmorStandMeta.class, // paper
             item -> new CraftMetaArmorStand(item.getComponentsPatch()),
             (type, meta) -> meta instanceof CraftMetaArmorStand armorStand ? armorStand : new CraftMetaArmorStand(meta));
 

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
Patch:
@@ -365,6 +365,7 @@ public void testEachExtraData() {
                     final CraftMetaArmorStand meta = (CraftMetaArmorStand) cleanStack.getItemMeta();
                     meta.entityTag = new CompoundTag();
                     meta.entityTag.putBoolean("Small", true);
+                    meta.setInvisible(true); // Paper
                     cleanStack.setItemMeta(meta);
                     return cleanStack;
                 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -490,6 +490,7 @@ public void enablePlugins(PluginLoadOrder type) {
         if (type == PluginLoadOrder.STARTUP) {
             this.helpMap.clear();
             this.helpMap.initializeGeneralTopics();
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) loadCustomPermissions(); // Paper
         }
 
         Plugin[] plugins = this.pluginManager.getPlugins();
@@ -509,7 +510,7 @@ public void enablePlugins(PluginLoadOrder type) {
             this.commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
-            this.loadCustomPermissions();
+            if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) this.loadCustomPermissions(); // Paper
             this.helpMap.initializeCommands();
             this.syncCommands();
         }

File: paper-api/src/main/java/org/bukkit/CoalType.java
Patch:
@@ -7,6 +7,7 @@
 /**
  * Represents the two types of coal
  */
+@Deprecated(forRemoval = true, since = "1.13")
 public enum CoalType {
     COAL(0x0),
     CHARCOAL(0x1);

File: paper-api/src/main/java/org/bukkit/CropState.java
Patch:
@@ -7,6 +7,7 @@
 /**
  * Represents the different growth states of crops
  */
+@Deprecated(forRemoval = true, since = "1.13")
 public enum CropState {
 
     /**

File: paper-api/src/main/java/org/bukkit/EntityEffect.java
Patch:
@@ -345,9 +345,9 @@ public enum EntityEffect {
      * Gets the data value of this EntityEffect, may not be unique.
      *
      * @return The data value
-     * @deprecated Magic value
+     * @apiNote Internal Use Only
      */
-    @Deprecated(since = "1.6.2")
+    @org.jetbrains.annotations.ApiStatus.Internal // Paper
     public byte getData() {
         return data;
     }

File: paper-api/src/main/java/org/bukkit/GrassSpecies.java
Patch:
@@ -6,7 +6,9 @@
 
 /**
  * Represents the different types of grass.
+ * @deprecated use {@link org.bukkit.block.data.BlockData}
  */
+@Deprecated(forRemoval = true, since = "1.13")
 public enum GrassSpecies {
 
     /**

File: paper-api/src/main/java/org/bukkit/Location.java
Patch:
@@ -46,7 +46,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param y The y-coordinate of this new location
      * @param z The z-coordinate of this new location
      */
-    public Location(@Nullable final World world, final double x, final double y, final double z) {
+    public Location(@UndefinedNullability final World world, final double x, final double y, final double z) { // Paper
         this(world, x, y, z, 0, 0);
     }
 
@@ -60,7 +60,7 @@ public Location(@Nullable final World world, final double x, final double y, fin
      * @param yaw The absolute rotation on the x-plane, in degrees
      * @param pitch The absolute rotation on the y-plane, in degrees
      */
-    public Location(@Nullable final World world, final double x, final double y, final double z, final float yaw, final float pitch) {
+    public Location(@UndefinedNullability final World world, final double x, final double y, final double z, final float yaw, final float pitch) { // Paper
         if (world != null) {
             this.world = new WeakReference<>(world);
         }
@@ -102,7 +102,7 @@ public boolean isWorldLoaded() {
      * @throws IllegalArgumentException when world is unloaded
      * @see #isWorldLoaded()
      */
-    @Nullable
+    @UndefinedNullability // Paper
     public World getWorld() {
         if (this.world == null) {
             return null;

File: paper-api/src/main/java/org/bukkit/Registry.java
Patch:
@@ -248,14 +248,12 @@ public Iterator<KeyedBossBar> iterator() {
      *
      * @see TrimMaterial
      */
-    @ApiStatus.Experimental
     Registry<TrimMaterial> TRIM_MATERIAL = Objects.requireNonNull(Bukkit.getRegistry(TrimMaterial.class), "No registry present for TrimMaterial. This is a bug.");
     /**
      * Trim patterns.
      *
      * @see TrimPattern
      */
-    @ApiStatus.Experimental
     Registry<TrimPattern> TRIM_PATTERN = Objects.requireNonNull(Bukkit.getRegistry(TrimPattern.class), "No registry present for TrimPattern. This is a bug.");
     /**
      * Damage types.
@@ -385,8 +383,11 @@ public Stream<MemoryKey> stream() {
      *
      * @param input non-null input
      * @return registered object or null if does not exist
+     * @deprecated this method's behavior is broken and not useful. If you want to get an object
+     * based on its vanilla name, or a key, wrap it in a {@link NamespacedKey} object and use {@link #get(NamespacedKey)}
      */
     @Nullable
+    @Deprecated(forRemoval = true) // Paper
     default T match(@NotNull String input) {
         Preconditions.checkArgument(input != null, "input must not be null");
 

File: paper-api/src/main/java/org/bukkit/SandstoneType.java
Patch:
@@ -6,7 +6,9 @@
 
 /**
  * Represents the three different types of Sandstone
+ * @deprecated use {@link org.bukkit.block.data.BlockData}
  */
+@Deprecated(forRemoval = true, since = "1.13")
 public enum SandstoneType {
     CRACKED(0x0),
     GLYPHED(0x1),

File: paper-api/src/main/java/org/bukkit/SkullType.java
Patch:
@@ -4,7 +4,7 @@
  * Represents the different types of skulls.
  * @deprecated check {@link Material} instead
  */
-@Deprecated(since = "1.13")
+@Deprecated(since = "1.13", forRemoval = true)
 public enum SkullType {
     SKELETON,
     WITHER,

File: paper-api/src/main/java/org/bukkit/TreeSpecies.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @deprecated Deprecated, see usage methods for replacement(s)
  */
-@Deprecated(since = "1.19")
+@Deprecated(since = "1.19", forRemoval = true)
 public enum TreeSpecies {
 
     /**

File: paper-api/src/main/java/org/bukkit/UndefinedNullability.java
Patch:
@@ -14,6 +14,7 @@
  * suggests a bad API design.
  */
 @Retention(RetentionPolicy.CLASS)
+@java.lang.annotation.Documented // Paper
 @ApiStatus.Internal
 @Deprecated(since = "1.13.2")
 public @interface UndefinedNullability {

File: paper-api/src/main/java/org/bukkit/block/Block.java
Patch:
@@ -526,7 +526,7 @@ public static int getBlockKeyZ(long packed) {
      * @return a list of dropped items for this type of block
      */
     @NotNull
-    Collection<ItemStack> getDrops(@NotNull ItemStack tool, @Nullable Entity entity);
+    Collection<ItemStack> getDrops(@Nullable ItemStack tool, @Nullable Entity entity); // Paper
 
     /**
      * Returns if the given item is a preferred choice to break this Block.

File: paper-api/src/main/java/org/bukkit/block/BrushableBlock.java
Patch:
@@ -15,7 +15,7 @@ public interface BrushableBlock extends Lootable, TileState {
      *
      * @return the item
      */
-    @Nullable
+    @org.jetbrains.annotations.NotNull // Paper
     public ItemStack getItem();
 
     /**

File: paper-api/src/main/java/org/bukkit/block/SuspiciousSand.java
Patch:
@@ -5,6 +5,6 @@
  *
  * @see BrushableBlock
  */
-@Deprecated(since = "1.20")
+@Deprecated(since = "1.20", forRemoval = true)
 public interface SuspiciousSand extends BrushableBlock {
 }

File: paper-api/src/main/java/org/bukkit/enchantments/Enchantment.java
Patch:
@@ -263,7 +263,7 @@ private static Enchantment getEnchantment(@NotNull String key) {
      * @deprecated enchantment groupings are now managed by tags, not categories
      */
     @NotNull
-    @Deprecated(since = "1.20.5")
+    @Deprecated(since = "1.20.5", forRemoval = true) @org.jetbrains.annotations.Contract("-> fail") // Paper
     public abstract EnchantmentTarget getItemTarget();
 
     /**

File: paper-api/src/main/java/org/bukkit/entity/AbstractArrow.java
Patch:
@@ -157,7 +157,7 @@ public interface AbstractArrow extends Projectile {
      *
      * @return The firing ItemStack
      */
-    @NotNull
+    @Nullable // Paper
     @ApiStatus.Experimental
     public ItemStack getWeapon();
 

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -417,9 +417,9 @@ public short getTypeId() {
      *
      * @param name the entity type's name
      * @return the matching entity type or null
-     * @deprecated Magic value
+     * @apiNote Internal Use Only
      */
-    @Deprecated(since = "1.6.2")
+    @org.jetbrains.annotations.ApiStatus.Internal // Paper
     @Contract("null -> null")
     @Nullable
     public static EntityType fromName(@Nullable String name) {

File: paper-api/src/main/java/org/bukkit/entity/ItemDisplay.java
Patch:
@@ -14,7 +14,7 @@ public interface ItemDisplay extends Display {
      *
      * @return the displayed item stack
      */
-    @Nullable
+    @NotNull // Paper
     ItemStack getItemStack();
 
     /**

File: paper-api/src/main/java/org/bukkit/entity/LingeringPotion.java
Patch:
@@ -3,7 +3,8 @@
 /**
  * Represents a thrown lingering potion bottle
  *
- * @deprecated lingering status depends on only on the potion item.
+ * @deprecated should not be used for anything, use {@link ThrownPotion} and
+ * set the potion via the methods there.
  */
-@Deprecated(since = "1.20.5")
+@Deprecated(since = "1.20.5", forRemoval = true) // Paper
 public interface LingeringPotion extends ThrownPotion { }

File: paper-api/src/main/java/org/bukkit/entity/LivingEntity.java
Patch:
@@ -716,7 +716,9 @@ default void setArrowsInBody(final int count) {
      * This may have unexpected results if the entity is not in water.
      *
      * @param swimming True if the entity is swimming.
+     * @deprecated This does nothing and is immediately reverted by the server, in the next tick <!-- Paper - future note: should wait a mojang input client/server side -->
      */
+    @Deprecated // Paper
     public void setSwimming(boolean swimming);
 
     /**
@@ -981,7 +983,7 @@ default void setArrowsInBody(final int count) {
      * @deprecated entity groupings are now managed by tags, not categories
      */
     @NotNull
-    @Deprecated(since = "1.20.5")
+    @Deprecated(since = "1.20.5", forRemoval = true) @org.jetbrains.annotations.Contract("-> fail") // Paper
     public EntityCategory getCategory();
 
     /**

File: paper-api/src/main/java/org/bukkit/entity/OminousItemSpawner.java
Patch:
@@ -15,7 +15,7 @@ public interface OminousItemSpawner extends Entity {
      *
      * @return the item
      */
-    @Nullable
+    @org.jetbrains.annotations.NotNull // Paper
     ItemStack getItem();
 
     /**

File: paper-api/src/main/java/org/bukkit/entity/Projectile.java
Patch:
@@ -29,7 +29,7 @@ public interface Projectile extends Entity {
      * @return true if it should bounce.
      * @deprecated does not do anything
      */
-    @Deprecated(since = "1.20.2")
+    @Deprecated(since = "1.20.2", forRemoval = true)
     public boolean doesBounce();
 
     /**
@@ -39,6 +39,6 @@ public interface Projectile extends Entity {
      * @param doesBounce whether or not it should bounce.
      * @deprecated does not do anything
      */
-    @Deprecated(since = "1.20.2")
+    @Deprecated(since = "1.20.2", forRemoval = true)
     public void setBounce(boolean doesBounce);
 }

File: paper-api/src/main/java/org/bukkit/entity/SplashPotion.java
Patch:
@@ -3,7 +3,8 @@
 /**
  * Represents a thrown splash potion bottle
  *
- * @deprecated splash status depends on only on the potion item.
+ * @deprecated should not be used for anything, use {@link ThrownPotion} and
+ * set the potion via the methods there.
  */
-@Deprecated(since = "1.14")
+@Deprecated(since = "1.14", forRemoval = true) // Paper
 public interface SplashPotion extends ThrownPotion { }

File: paper-api/src/main/java/org/bukkit/entity/ZombieVillager.java
Patch:
@@ -13,15 +13,15 @@ public interface ZombieVillager extends Zombie {
      * Sets the villager profession of this zombie.
      */
     @Override
-    void setVillagerProfession(@Nullable Villager.Profession profession);
+    void setVillagerProfession(@NotNull Villager.Profession profession); // Paper
 
     /**
      * Returns the villager profession of this zombie.
      *
-     * @return the profession or null
+     * @return the profession
      */
     @Override
-    @Nullable
+    @NotNull // Paper
     Villager.Profession getVillagerProfession();
 
     /**

File: paper-api/src/main/java/org/bukkit/event/block/BrewingStartEvent.java
Patch:
@@ -8,6 +8,7 @@
 /**
  * Called when a brewing stand starts to brew.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public class BrewingStartEvent extends InventoryBlockStartEvent {
 
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/block/CampfireStartEvent.java
Patch:
@@ -9,6 +9,7 @@
 /**
  * Called when a Campfire starts to cook.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public class CampfireStartEvent extends InventoryBlockStartEvent {
 
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/block/CrafterCraftEvent.java
Patch:
@@ -17,6 +17,7 @@ public class CrafterCraftEvent extends BlockEvent implements Cancellable {
     private ItemStack result;
     private boolean cancelled;
 
+    @org.jetbrains.annotations.ApiStatus.Internal // Paper - fix upstream annotation mistakes
     public CrafterCraftEvent(@NotNull Block theBlock, @NotNull CraftingRecipe recipe, @NotNull ItemStack result) {
         super(theBlock);
         this.result = result;

File: paper-api/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
Patch:
@@ -23,7 +23,7 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
     private boolean cancelled;
     private final Player enchanter;
 
-    public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull EnchantmentView view, @NotNull final Block table, @NotNull final ItemStack item, @NotNull final EnchantmentOffer[] offers, final int bonus) {
+    public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull EnchantmentView view, @NotNull final Block table, @NotNull final ItemStack item, @org.jetbrains.annotations.Nullable final EnchantmentOffer @NotNull [] offers, final int bonus) { // Paper - offers can contain null values
         super(view);
         this.enchanter = enchanter;
         this.table = table;
@@ -86,8 +86,7 @@ public int[] getExpLevelCostsOffered() {
      *
      * @return list of available enchantment offers
      */
-    @NotNull
-    public EnchantmentOffer[] getOffers() {
+    public @org.jetbrains.annotations.Nullable EnchantmentOffer @NotNull [] getOffers() { // Paper offers can contain null values
         return offers;
     }
 

File: paper-api/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
Patch:
@@ -218,7 +218,10 @@ public enum Cause {
         MILK,
         /**
          * When a player gets bad omen after killing a patrol captain.
+         *
+         * @deprecated no longer used, player now gets an ominous bottle instead
          */
+        @Deprecated(since = "1.21") // Paper
         PATROL_CAPTAIN,
         /**
          * When a potion effect is modified through the plugin methods.

File: paper-api/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
Patch:
@@ -10,7 +10,7 @@
  * LivingEntity's.
  */
 public class EntityTargetLivingEntityEvent extends EntityTargetEvent {
-    public EntityTargetLivingEntityEvent(@NotNull final Entity entity, @Nullable final LivingEntity target, @Nullable final TargetReason reason) {
+    public EntityTargetLivingEntityEvent(@NotNull final Entity entity, @Nullable final LivingEntity target, @NotNull final TargetReason reason) { // Paper
         super(entity, target, reason);
     }
 

File: paper-api/src/main/java/org/bukkit/event/inventory/HopperInventorySearchEvent.java
Patch:
@@ -34,7 +34,7 @@ public enum ContainerType {
         DESTINATION;
     }
 
-    public HopperInventorySearchEvent(@NotNull Inventory inventory, @NotNull ContainerType containerType, @NotNull Block hopper, @NotNull Block searchBlock) {
+    public HopperInventorySearchEvent(@Nullable Inventory inventory, @NotNull ContainerType containerType, @NotNull Block hopper, @NotNull Block searchBlock) { // Paper
         super(hopper);
         this.inventory = inventory;
         this.containerType = containerType;

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
Patch:
@@ -88,7 +88,7 @@ public SlotType getSlotType() {
      *
      * @return the cursor ItemStack
      */
-    @Nullable
+    @NotNull // Paper - fix nullability
     public ItemStack getCursor() {
         return getView().getCursor();
     }

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryType.java
Patch:
@@ -155,7 +155,7 @@ public enum InventoryType {
      *
      * @deprecated use {@link #SMITHING}
      */
-    @Deprecated(since = "1.20.1")
+    @Deprecated(since = "1.20.1", forRemoval = true) // Paper
     SMITHING_NEW(4, "Upgrade Gear", MenuType.SMITHING),
     ;
 

File: paper-api/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
Patch:
@@ -78,7 +78,7 @@ public void setFrom(@NotNull Location from) {
      *
      * @return Location the player moved to
      */
-    @Nullable
+    @NotNull // Paper
     public Location getTo() {
         return to;
     }

File: paper-api/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
Patch:
@@ -19,7 +19,7 @@ public class RaidSpawnWaveEvent extends RaidEvent {
     private final List<Raider> raiders;
     private final Raider leader;
 
-    public RaidSpawnWaveEvent(@NotNull Raid raid, @NotNull World world, @Nullable Raider leader, @NotNull List<Raider> raiders) {
+    public RaidSpawnWaveEvent(@NotNull Raid raid, @NotNull World world, @NotNull Raider leader, @NotNull List<Raider> raiders) { // Paper
         super(raid, world);
         this.raiders = raiders;
         this.leader = leader;
@@ -30,7 +30,7 @@ public RaidSpawnWaveEvent(@NotNull Raid raid, @NotNull World world, @Nullable Ra
      *
      * @return {@link Raider}
      */
-    @Nullable
+    @NotNull // Paper
     public Raider getPatrolLeader() {
         return leader;
     }

File: paper-api/src/main/java/org/bukkit/inventory/CookingRecipe.java
Patch:
@@ -68,7 +68,9 @@ public CookingRecipe setInput(@NotNull Material input) {
      * Get the input material.
      *
      * @return The input material.
+     * @deprecated Use {@link #getInputChoice()} instead for more complete data.
      */
+    @Deprecated // Paper
     @NotNull
     public ItemStack getInput() {
         return this.ingredient.getItemStack();

File: paper-api/src/main/java/org/bukkit/inventory/CraftingInventory.java
Patch:
@@ -21,8 +21,7 @@ public interface CraftingInventory extends Inventory {
      *
      * @return The contents. Individual entries may be null.
      */
-    @NotNull
-    ItemStack[] getMatrix();
+    @Nullable ItemStack @NotNull [] getMatrix(); // Paper - make array elements nullable instead array
 
     /**
      * Set the item in the result slot of the crafting inventory.
@@ -38,7 +37,7 @@ public interface CraftingInventory extends Inventory {
      * @throws IllegalArgumentException if the length of contents is greater
      *     than the size of the crafting matrix.
      */
-    void setMatrix(@NotNull ItemStack[] contents);
+    void setMatrix(@Nullable ItemStack @NotNull [] contents); // Paper - make array elements nullable instead array
 
     /**
      * Get the current recipe formed on the crafting inventory, if any.

File: paper-api/src/main/java/org/bukkit/inventory/EntityEquipment.java
Patch:
@@ -525,6 +525,6 @@ public interface EntityEquipment {
      *
      * @return the entity this EntityEquipment belongs to
      */
-    @Nullable
+    @NotNull // Paper
     Entity getHolder();
 }

File: paper-api/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
Patch:
@@ -67,8 +67,10 @@ public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @Not
      *
      * @param input The input material.
      * @return The changed recipe, so you can chain calls.
+     * @deprecated use {@link #setInputChoice(RecipeChoice)}
      */
     @NotNull
+    @Deprecated
     public FurnaceRecipe setInput(@NotNull MaterialData input) {
         return setInput(input.getItemType(), input.getData());
     }

File: paper-api/src/main/java/org/bukkit/inventory/ItemFactory.java
Patch:
@@ -29,7 +29,7 @@ public interface ItemFactory {
      * @return a new ItemMeta that could be applied to an item stack of the
      *     specified material
      */
-    @Nullable
+    @org.bukkit.UndefinedNullability // Paper
     ItemMeta getItemMeta(@NotNull final Material material);
 
     /**

File: paper-api/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
Patch:
@@ -57,7 +57,9 @@ public StonecuttingRecipe setInput(@NotNull Material input) {
      * Get the input material.
      *
      * @return The input material.
+     * @deprecated Use {@link #getInputChoice()} instead for more complete data.
      */
+    @Deprecated // Paper
     @NotNull
     public ItemStack getInput() {
         return this.ingredient.getItemStack();

File: paper-api/src/main/java/org/bukkit/inventory/meta/components/EquippableComponent.java
Patch:
@@ -37,7 +37,7 @@ public interface EquippableComponent extends ConfigurationSerializable {
      *
      * @return the sound
      */
-    @Nullable
+    @NotNull // Paper
     Sound getEquipSound();
 
     /**

File: paper-api/src/main/java/org/bukkit/material/Banner.java
Patch:
@@ -7,7 +7,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(forRemoval = true, since = "1.13")
 public class Banner extends MaterialData implements Attachable {
 
     public Banner() {

File: paper-api/src/main/java/org/bukkit/material/Bed.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(forRemoval = true, since = "1.13")
 public class Bed extends MaterialData implements Directional {
 
     /**

File: paper-api/src/main/java/org/bukkit/material/Button.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(forRemoval = true, since = "1.13")
 public class Button extends SimpleAttachableMaterialData implements Redstone {
     public Button() {
         super(Material.LEGACY_STONE_BUTTON);

File: paper-api/src/main/java/org/bukkit/material/Cake.java
Patch:
@@ -6,7 +6,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Cake extends MaterialData {
     public Cake() {
         super(Material.LEGACY_CAKE_BLOCK);

File: paper-api/src/main/java/org/bukkit/material/Cauldron.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Cauldron extends MaterialData {
     private static final int CAULDRON_FULL = 3;
     private static final int CAULDRON_EMPTY = 0;

File: paper-api/src/main/java/org/bukkit/material/Chest.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Chest extends DirectionalContainer {
 
     public Chest() {

File: paper-api/src/main/java/org/bukkit/material/Coal.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Coal extends MaterialData {
     public Coal() {
         super(Material.LEGACY_COAL);

File: paper-api/src/main/java/org/bukkit/material/CocoaPlant.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class CocoaPlant extends MaterialData implements Directional, Attachable {
 
     public enum CocoaPlantSize {

File: paper-api/src/main/java/org/bukkit/material/Command.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Command extends MaterialData implements Redstone {
     public Command() {
         super(Material.LEGACY_COMMAND);

File: paper-api/src/main/java/org/bukkit/material/Comparator.java
Patch:
@@ -12,7 +12,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Comparator extends MaterialData implements Directional, Redstone {
     protected static final BlockFace DEFAULT_DIRECTION = BlockFace.NORTH;
     protected static final boolean DEFAULT_SUBTRACTION_MODE = false;

File: paper-api/src/main/java/org/bukkit/material/Crops.java
Patch:
@@ -15,7 +15,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Crops extends MaterialData {
     protected static final Material DEFAULT_TYPE = Material.LEGACY_CROPS;
     protected static final CropState DEFAULT_STATE = CropState.SEEDED;

File: paper-api/src/main/java/org/bukkit/material/DetectorRail.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class DetectorRail extends ExtendedRails implements PressureSensor {
     public DetectorRail() {
         super(Material.LEGACY_DETECTOR_RAIL);

File: paper-api/src/main/java/org/bukkit/material/Diode.java
Patch:
@@ -13,7 +13,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Diode extends MaterialData implements Directional, Redstone {
 
     protected static final BlockFace DEFAULT_DIRECTION = BlockFace.NORTH;

File: paper-api/src/main/java/org/bukkit/material/DirectionalContainer.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class DirectionalContainer extends MaterialData implements Directional {
 
     public DirectionalContainer(final Material type) {

File: paper-api/src/main/java/org/bukkit/material/Dispenser.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Dispenser extends FurnaceAndDispenser {
 
     public Dispenser() {

File: paper-api/src/main/java/org/bukkit/material/Door.java
Patch:
@@ -22,7 +22,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Door extends MaterialData implements Directional, Openable {
 
     // This class breaks API contracts on Directional and Openable because

File: paper-api/src/main/java/org/bukkit/material/Dye.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Dye extends MaterialData implements Colorable {
     public Dye() {
         super(Material.LEGACY_INK_SACK);

File: paper-api/src/main/java/org/bukkit/material/EnderChest.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class EnderChest extends DirectionalContainer {
 
     public EnderChest() {

File: paper-api/src/main/java/org/bukkit/material/ExtendedRails.java
Patch:
@@ -10,7 +10,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class ExtendedRails extends Rails {
 
     public ExtendedRails(final Material type) {

File: paper-api/src/main/java/org/bukkit/material/FlowerPot.java
Patch:
@@ -10,7 +10,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.9.4")
+@Deprecated(since = "1.13", forRemoval = true)
 public class FlowerPot extends MaterialData {
 
     /**

File: paper-api/src/main/java/org/bukkit/material/Furnace.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Furnace extends FurnaceAndDispenser {
 
     public Furnace() {

File: paper-api/src/main/java/org/bukkit/material/FurnaceAndDispenser.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class FurnaceAndDispenser extends DirectionalContainer {
 
     public FurnaceAndDispenser(final Material type) {

File: paper-api/src/main/java/org/bukkit/material/Gate.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Gate extends MaterialData implements Directional, Openable {
     private static final byte OPEN_BIT = 0x4;
     private static final byte DIR_BIT = 0x3;

File: paper-api/src/main/java/org/bukkit/material/Hopper.java
Patch:
@@ -12,7 +12,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Hopper extends MaterialData implements Directional, Redstone {
 
     protected static final BlockFace DEFAULT_DIRECTION = BlockFace.DOWN;

File: paper-api/src/main/java/org/bukkit/material/Ladder.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Ladder extends SimpleAttachableMaterialData {
     public Ladder() {
         super(Material.LEGACY_LADDER);

File: paper-api/src/main/java/org/bukkit/material/Leaves.java
Patch:
@@ -13,7 +13,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Leaves extends Wood {
     protected static final Material DEFAULT_TYPE = Material.LEGACY_LEAVES;
     protected static final boolean DEFAULT_DECAYABLE = true;

File: paper-api/src/main/java/org/bukkit/material/Lever.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Lever extends SimpleAttachableMaterialData implements Redstone {
     public Lever() {
         super(Material.LEGACY_LEVER);

File: paper-api/src/main/java/org/bukkit/material/LongGrass.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class LongGrass extends MaterialData {
     public LongGrass() {
         super(Material.LEGACY_LONG_GRASS);

File: paper-api/src/main/java/org/bukkit/material/MaterialData.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.13")
+@Deprecated(since = "1.13", forRemoval = true)
 public class MaterialData implements Cloneable {
     private final Material type;
     private byte data = 0;

File: paper-api/src/main/java/org/bukkit/material/MonsterEggs.java
Patch:
@@ -10,7 +10,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class MonsterEggs extends TexturedMaterial {
 
     private static final List<Material> textures = new ArrayList<Material>();

File: paper-api/src/main/java/org/bukkit/material/Mushroom.java
Patch:
@@ -17,7 +17,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Mushroom extends MaterialData {
     private static final byte NORTH_LIMIT = 4;
     private static final byte SOUTH_LIMIT = 6;

File: paper-api/src/main/java/org/bukkit/material/NetherWarts.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class NetherWarts extends MaterialData {
     public NetherWarts() {
         super(Material.LEGACY_NETHER_WARTS);

File: paper-api/src/main/java/org/bukkit/material/Observer.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Observer extends MaterialData implements Directional, Redstone {
 
     public Observer() {

File: paper-api/src/main/java/org/bukkit/material/Openable.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.material;
 
+@Deprecated(forRemoval = true, since = "1.13")
 public interface Openable {
 
     /**

File: paper-api/src/main/java/org/bukkit/material/PistonBaseMaterial.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class PistonBaseMaterial extends MaterialData implements Directional, Redstone {
 
     public PistonBaseMaterial(final Material type) {

File: paper-api/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class PistonExtensionMaterial extends MaterialData implements Attachable {
 
     public PistonExtensionMaterial(final Material type) {

File: paper-api/src/main/java/org/bukkit/material/PoweredRail.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class PoweredRail extends ExtendedRails implements Redstone {
     public PoweredRail() {
         super(Material.LEGACY_POWERED_RAIL);

File: paper-api/src/main/java/org/bukkit/material/PressurePlate.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class PressurePlate extends MaterialData implements PressureSensor {
     public PressurePlate() {
         super(Material.LEGACY_WOOD_PLATE);

File: paper-api/src/main/java/org/bukkit/material/Pumpkin.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Pumpkin extends MaterialData implements Directional {
 
     public Pumpkin() {

File: paper-api/src/main/java/org/bukkit/material/Rails.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Rails extends MaterialData {
 
     public Rails() {

File: paper-api/src/main/java/org/bukkit/material/Redstone.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Indicated a Material that may carry or create a Redstone current
  */
+@Deprecated(forRemoval = true, since = "1.13")
 public interface Redstone {
 
     /**

File: paper-api/src/main/java/org/bukkit/material/RedstoneTorch.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class RedstoneTorch extends Torch implements Redstone {
     public RedstoneTorch() {
         super(Material.LEGACY_REDSTONE_TORCH_ON);

File: paper-api/src/main/java/org/bukkit/material/RedstoneWire.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class RedstoneWire extends MaterialData implements Redstone {
     public RedstoneWire() {
         super(Material.LEGACY_REDSTONE_WIRE);

File: paper-api/src/main/java/org/bukkit/material/Sandstone.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Sandstone extends MaterialData {
     public Sandstone() {
         super(Material.LEGACY_SANDSTONE);

File: paper-api/src/main/java/org/bukkit/material/Sapling.java
Patch:
@@ -11,7 +11,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Sapling extends Wood {
 
     /**

File: paper-api/src/main/java/org/bukkit/material/Sign.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Sign extends MaterialData implements Attachable {
     public Sign() {
         super(Material.LEGACY_SIGN_POST);

File: paper-api/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public abstract class SimpleAttachableMaterialData extends MaterialData implements Attachable {
 
     public SimpleAttachableMaterialData(Material type, BlockFace direction) {

File: paper-api/src/main/java/org/bukkit/material/Skull.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Skull extends MaterialData implements Directional {
     public Skull() {
         super(Material.LEGACY_SKULL);

File: paper-api/src/main/java/org/bukkit/material/SmoothBrick.java
Patch:
@@ -10,7 +10,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class SmoothBrick extends TexturedMaterial {
 
     private static final List<Material> textures = new ArrayList<Material>();

File: paper-api/src/main/java/org/bukkit/material/SpawnEgg.java
Patch:
@@ -8,7 +8,7 @@
  * Represents a spawn egg that can be used to spawn mobs
  * @deprecated use {@link SpawnEggMeta}
  */
-@Deprecated(since = "1.11")
+@Deprecated(since = "1.13", forRemoval = true)
 public class SpawnEgg extends MaterialData {
 
     public SpawnEgg() {

File: paper-api/src/main/java/org/bukkit/material/Stairs.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Stairs extends MaterialData implements Directional {
 
     public Stairs(final Material type) {

File: paper-api/src/main/java/org/bukkit/material/Step.java
Patch:
@@ -10,7 +10,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Step extends TexturedMaterial {
     private static final List<Material> textures = new ArrayList<Material>();
     static {

File: paper-api/src/main/java/org/bukkit/material/TexturedMaterial.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public abstract class TexturedMaterial extends MaterialData {
 
     public TexturedMaterial(Material m) {

File: paper-api/src/main/java/org/bukkit/material/Torch.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Torch extends SimpleAttachableMaterialData {
     public Torch() {
         super(Material.LEGACY_TORCH);

File: paper-api/src/main/java/org/bukkit/material/TrapDoor.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     public TrapDoor() {
         super(Material.LEGACY_TRAP_DOOR);

File: paper-api/src/main/java/org/bukkit/material/Tree.java
Patch:
@@ -13,7 +13,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Tree extends Wood {
     protected static final Material DEFAULT_TYPE = Material.LEGACY_LOG;
     protected static final BlockFace DEFAULT_DIRECTION = BlockFace.UP;

File: paper-api/src/main/java/org/bukkit/material/Tripwire.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Tripwire extends MaterialData {
 
     public Tripwire() {

File: paper-api/src/main/java/org/bukkit/material/TripwireHook.java
Patch:
@@ -9,7 +9,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class TripwireHook extends SimpleAttachableMaterialData implements Redstone {
 
     public TripwireHook() {

File: paper-api/src/main/java/org/bukkit/material/Vine.java
Patch:
@@ -11,7 +11,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Vine extends MaterialData {
     private static final int VINE_NORTH = 0x4;
     private static final int VINE_EAST = 0x8;

File: paper-api/src/main/java/org/bukkit/material/Wood.java
Patch:
@@ -13,7 +13,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Wood extends MaterialData {
     protected static final Material DEFAULT_TYPE = Material.LEGACY_WOOD;
     protected static final TreeSpecies DEFAULT_SPECIES = TreeSpecies.GENERIC;

File: paper-api/src/main/java/org/bukkit/material/WoodenStep.java
Patch:
@@ -11,7 +11,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class WoodenStep extends Wood {
     protected static final Material DEFAULT_TYPE = Material.LEGACY_WOOD_STEP;
     protected static final boolean DEFAULT_INVERTED = false;

File: paper-api/src/main/java/org/bukkit/material/Wool.java
Patch:
@@ -8,7 +8,7 @@
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
  * Use {@link org.bukkit.block.data.BlockData}.
  */
-@Deprecated(since = "1.14.1")
+@Deprecated(since = "1.13", forRemoval = true)
 public class Wool extends MaterialData implements Colorable {
     public Wool() {
         super(Material.LEGACY_WOOL);

File: paper-api/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
Patch:
@@ -7,7 +7,9 @@
 
 /**
  * Represents the different textured blocks of mushroom.
+ * @deprecated use BlockData
  */
+@Deprecated // Paper
 public enum MushroomBlockTexture {
 
     /**

File: paper-api/src/test/java/org/bukkit/materials/MaterialDataTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.bukkit.material.types.MushroomBlockTexture;
 import org.junit.jupiter.api.Test;
 
+@Deprecated // Paper
 public class MaterialDataTest {
 
     @Test

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -192,10 +192,9 @@ public boolean testPermission(@NotNull CommandSender target) {
             return true;
         }
 
-        if (permissionMessage == null) {
-            target.sendMessage(ChatColor.RED + "I'm sorry, but you do not have permission to perform this command. Please contact the server administrators if you believe that this is a mistake.");
             // Paper start - use components for permissionMessage
-        } else if (!permissionMessage.equals(net.kyori.adventure.text.Component.empty())) {
+        net.kyori.adventure.text.Component permissionMessage = this.permissionMessage != null ? this.permissionMessage : Bukkit.permissionMessage();
+        if (!permissionMessage.equals(net.kyori.adventure.text.Component.empty())) {
             target.sendMessage(permissionMessage.replaceText(net.kyori.adventure.text.TextReplacementConfig.builder().matchLiteral("<permission>").replacement(permission).build()));
             // Paper end
         }

File: paper-api/src/main/java/org/bukkit/inventory/ItemType.java
Patch:
@@ -1903,7 +1903,7 @@ interface Typed<M extends ItemMeta> extends ItemType {
     ItemType.Typed<ItemMeta> RABBIT_STEW = getItemType("rabbit_stew");
     ItemType.Typed<ItemMeta> RABBIT_FOOT = getItemType("rabbit_foot");
     ItemType.Typed<ItemMeta> RABBIT_HIDE = getItemType("rabbit_hide");
-    ItemType.Typed<ItemMeta> ARMOR_STAND = getItemType("armor_stand");
+    ItemType.Typed<com.destroystokyo.paper.inventory.meta.ArmorStandMeta> ARMOR_STAND = getItemType("armor_stand");
     ItemType.Typed<ItemMeta> IRON_HORSE_ARMOR = getItemType("iron_horse_armor");
     ItemType.Typed<ItemMeta> GOLDEN_HORSE_ARMOR = getItemType("golden_horse_armor");
     ItemType.Typed<ItemMeta> DIAMOND_HORSE_ARMOR = getItemType("diamond_horse_armor");

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -47,7 +47,7 @@ public abstract class JavaPlugin extends PluginBase {
     private boolean naggable = true;
     private FileConfiguration newConfig = null;
     private File configFile = null;
-    private PluginLogger logger = null;
+    private Logger logger = null; // Paper - PluginLogger -> Logger
 
     public JavaPlugin() {
         // Paper start
@@ -304,8 +304,8 @@ public final void init(@NotNull Server server, @NotNull PluginDescriptionFile de
         this.dataFolder = dataFolder;
         this.classLoader = classLoader;
         this.configFile = new File(dataFolder, "config.yml");
-        this.logger = new PluginLogger(this);
         this.pluginMeta = configuration; // Paper
+        this.logger = Logger.getLogger(description.getPrefix() != null ? description.getPrefix() : description.getName()); // Paper - Handle plugin prefix in implementation
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/Bukkit.java
Patch:
@@ -1538,6 +1538,8 @@ public static File getWorldContainer() {
 
     /**
      * Gets every player that has ever played on this server.
+     * <p>
+     * <b>This method can be expensive as it loads all the player data files from the disk.</b>
      *
      * @return an array containing all previous players
      */
@@ -2059,7 +2061,7 @@ public static int getPauseWhenEmptyTime() {
      * server will pause most functions after this time if there are no players
      * online.
      * <p>
-     * A value of less than 0 will disable the setting
+     * A value of less than 1 will disable the setting
      *
      * @param seconds the pause threshold in seconds
      */

File: paper-api/src/main/java/org/bukkit/ChunkSnapshot.java
Patch:
@@ -136,7 +136,7 @@ public interface ChunkSnapshot {
      * Get raw biome temperature at given coordinates
      *
      * @param x X-coordinate (0-15)
-     * @param y Y-coordinate (0-15)
+     * @param y Y-coordinate (world minHeight (inclusive) - world maxHeight (exclusive))
      * @param z Z-coordinate (0-15)
      * @return temperature at given coordinate
      */

File: paper-api/src/main/java/org/bukkit/HeightMap.java
Patch:
@@ -12,8 +12,7 @@ public enum HeightMap {
      */
     MOTION_BLOCKING,
     /**
-     * The highest block that blocks motion or contains a fluid or is in the
-     * {@link Tag#LEAVES}.
+     * The highest block that blocks motion or contains a fluid, excluding leaves.
      */
     MOTION_BLOCKING_NO_LEAVES,
     /**

File: paper-api/src/main/java/org/bukkit/Particle.java
Patch:
@@ -207,7 +207,7 @@ public NamespacedKey getKey() {
     }
 
     /**
-     * Options which can be applied to redstone dust particles - a particle
+     * Options which can be applied to dust particles - a particle
      * color and size.
      */
     public static class DustOptions {

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -2766,7 +2766,7 @@ default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
     /**
      * Find the closest nearby structure of a given {@link StructureType}.
      * Finding unexplored structures can, and will, block if the world is
-     * looking in chunks that gave not generated yet. This can lead to the world
+     * looking in chunks that have not generated yet. This can lead to the world
      * temporarily freezing while locating an unexplored structure.
      * <p>
      * The {@code radius} is not a rigid square radius. Each structure may alter
@@ -2800,7 +2800,7 @@ default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
     /**
      * Find the closest nearby structure of a given {@link StructureType}.
      * Finding unexplored structures can, and will, block if the world is
-     * looking in chunks that gave not generated yet. This can lead to the world
+     * looking in chunks that have not generated yet. This can lead to the world
      * temporarily freezing while locating an unexplored structure.
      * <p>
      * The {@code radius} is not a rigid square radius. Each structure may alter
@@ -2833,7 +2833,7 @@ default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
     /**
      * Find the closest nearby structure of a given {@link Structure}. Finding
      * unexplored structures can, and will, block if the world is looking in
-     * chunks that gave not generated yet. This can lead to the world
+     * chunks that have not generated yet. This can lead to the world
      * temporarily freezing while locating an unexplored structure.
      * <p>
      * The {@code radius} is not a rigid square radius. Each structure may alter

File: paper-api/src/main/java/org/bukkit/attribute/AttributeModifier.java
Patch:
@@ -129,8 +129,7 @@ public EquipmentSlot getSlot() {
     }
 
     /**
-     * Get the {@link EquipmentSlot} this AttributeModifier is active on,
-     * or null if this modifier is applicable for any slot.
+     * Get the {@link EquipmentSlotGroup} this AttributeModifier is active on.
      *
      * @return the slot
      */

File: paper-api/src/main/java/org/bukkit/block/data/BlockData.java
Patch:
@@ -224,7 +224,7 @@ public interface BlockData extends Cloneable {
      * {@link Material#REDSTONE_WIRE} -> {@link Material#REDSTONE}
      * {@link Material#CARROTS} -> {@link Material#CARROT}
      * </pre>
-     * @return placement material
+     * @return placement material or {@link Material#AIR} if it doesn't have one
      */
     @NotNull
     Material getPlacementMaterial();

File: paper-api/src/main/java/org/bukkit/block/data/FaceAttachable.java
Patch:
@@ -38,7 +38,7 @@ public enum AttachedFace {
          */
         WALL,
         /**
-         * The switch is mounted to the ceiling and pointing dowanrds.
+         * The switch is mounted to the ceiling and pointing downwards.
          */
         CEILING;
     }

File: paper-api/src/main/java/org/bukkit/block/data/type/CommandBlock.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * 'conditional' denotes whether this command block is conditional or not, i.e.
- * will only execute if the preceeding command block also executed successfully.
+ * will only execute if the preceding command block also executed successfully.
  */
 public interface CommandBlock extends Directional {
 

File: paper-api/src/main/java/org/bukkit/block/data/type/Gate.java
Patch:
@@ -5,7 +5,7 @@
 import org.bukkit.block.data.Powerable;
 
 /**
- * 'in_wall" indicates if the fence gate is attached to a wall, and if true the
+ * 'in_wall' indicates if the fence gate is attached to a wall, and if true the
  * texture is lowered by a small amount to blend in better.
  */
 public interface Gate extends Directional, Openable, Powerable {

File: paper-api/src/main/java/org/bukkit/block/data/type/Switch.java
Patch:
@@ -21,7 +21,7 @@ public interface Switch extends Directional, FaceAttachable, Powerable {
      * Sets the value of the 'face' property.
      *
      * @param face the new 'face' value
-     * @deprecated use {@link #getAttachedFace()}
+     * @deprecated use {@link #setAttachedFace(AttachedFace)}
      */
     @Deprecated(since = "1.15.2")
     void setFace(@NotNull Face face);
@@ -42,7 +42,7 @@ public enum Face {
          */
         WALL,
         /**
-         * The switch is mounted to the ceiling and pointing dowanrds.
+         * The switch is mounted to the ceiling and pointing downwards.
          */
         CEILING;
     }

File: paper-api/src/main/java/org/bukkit/entity/ArmorStand.java
Patch:
@@ -360,5 +360,8 @@ public enum LockType {
      * @param move {@code true} if this armour stand can move, {@code false} otherwise
      */
     void setCanMove(boolean move);
+
+    @Override
+    org.bukkit.inventory.@NotNull EntityEquipment getEquipment();
     // Paper end
 }

File: paper-api/src/main/java/org/bukkit/entity/Arrow.java
Patch:
@@ -93,7 +93,7 @@ public interface Arrow extends AbstractArrow {
      * Removes a custom potion effect from this arrow.
      *
      * @param type the potion effect type to remove
-     * @return true if the an effect was removed as a result of this call
+     * @return true if the effect was removed as a result of this call
      * @throws IllegalArgumentException if this operation would leave the Arrow
      * in a state with no Custom Effects and PotionType.UNCRAFTABLE
      */

File: paper-api/src/main/java/org/bukkit/entity/EnderDragon.java
Patch:
@@ -30,7 +30,7 @@ enum Phase {
          */
         FLY_TO_PORTAL,
         /**
-         * The dragon will land on on the portal. If the dragon is not near
+         * The dragon will land on the portal. If the dragon is not near
          * the portal, it will fly to it before mounting.
          */
         LAND_ON_PORTAL,

File: paper-api/src/main/java/org/bukkit/entity/ItemFrame.java
Patch:
@@ -75,7 +75,7 @@ public interface ItemFrame extends Hanging {
     public void setRotation(@NotNull Rotation rotation) throws IllegalArgumentException;
 
     /**
-     * Returns whether the item frame is be visible or not.
+     * Returns whether the item frame is visible or not.
      *
      * @return whether the item frame is visible or not
      */

File: paper-api/src/main/java/org/bukkit/entity/LivingEntity.java
Patch:
@@ -502,7 +502,7 @@ default void setArrowsInBody(final int count) {
     /**
      * Sets the leash on this entity to be held by the supplied entity.
      * <p>
-     * This method has no effect on EnderDragons, Withers, Players, or Bats.
+     * This method has no effect on players.
      * Non-living entities excluding leashes will not persist as leash
      * holders.
      *

File: paper-api/src/main/java/org/bukkit/entity/PigZombie.java
Patch:
@@ -44,8 +44,6 @@ public interface PigZombie extends Zombie {
 
     /**
      * <b>Not applicable to this entity</b>
-     *
-     * @return UnsuppotedOperationException
      */
     @Override
     public int getConversionTime();

File: paper-api/src/main/java/org/bukkit/entity/Villager.java
Patch:
@@ -224,7 +224,7 @@ interface Profession extends OldEnum<Profession>, Keyed {
          */
         Profession NITWIT = getProfession("nitwit");
         /**
-         * Sheperd profession. Wears a brown robe. Shepherds primarily trade for
+         * Shepherd profession. Wears a brown robe. Shepherds primarily trade for
          * wool items, and shears.
          */
         Profession SHEPHERD = getProfession("shepherd");

File: paper-api/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
Patch:
@@ -14,6 +14,9 @@
  * Note that due to the nature of explosions, {@link #getBlock()} will always be
  * an air block. {@link #getExplodedBlockState()} should be used to get
  * information about the block state that exploded.
+ * <p>
+ * The event isn't called if the {@link org.bukkit.GameRule#MOB_GRIEFING}
+ * is disabled as no block interaction will occur.
  */
 public class BlockExplodeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
Patch:
@@ -34,7 +34,7 @@ public Location getRetractLocation() {
 
     /**
      * Get an immutable list of the blocks which will be moved by the
-     * extending.
+     * retracting.
      *
      * @return Immutable list of the moved blocks.
      */

File: paper-api/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
Patch:
@@ -114,7 +114,7 @@ public EquipmentSlot getHand() {
 
     /**
      * Gets the value whether the player would be allowed to build here.
-     * Defaults to spawn if the server was going to stop them (such as, the
+     * Defaults to false if the server was going to stop them (such as, the
      * player is in Spawn). Note that this is an entirely different check
      * than BLOCK_CANBUILD, as this refers to a player, not universe-physics
      * rule like cactus on dirt.

File: paper-api/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
Patch:
@@ -81,7 +81,7 @@ public int[] getExpLevelCostsOffered() {
     /**
      * Get a list of available {@link EnchantmentOffer} for the player. You can
      * modify the values to change the available offers for the player. An offer
-     * may be null, if there isn't a enchantment offer at a specific slot. There
+     * may be null, if there isn't an enchantment offer at a specific slot. There
      * are 3 slots in the enchantment table available to modify.
      *
      * @return list of available enchantment offers

File: paper-api/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
Patch:
@@ -8,7 +8,7 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Called when a lingering potion applies it's effects. Happens
+ * Called when a lingering potion applies its effects. Happens
  * once every 5 ticks
  */
 public class AreaEffectCloudApplyEvent extends EntityEvent implements Cancellable {

File: paper-api/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
Patch:
@@ -158,11 +158,12 @@ public enum SpawnReason {
          */
         DROWNED,
         /**
-         * When an cow is spawned by shearing a mushroom cow
+         * When a cow is spawned by shearing a mushroom cow
          */
         SHEARED,
         /**
-         * When eg an effect cloud is spawned as a result of a creeper exploding
+         * When an entity is spawned as a result of an explosion. Like an area effect cloud from
+         * a creeper or a dragon fireball.
          */
         EXPLOSION,
         /**

File: paper-api/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
Patch:
@@ -10,7 +10,9 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Called when an entity explodes
+ * Called when an entity explodes interacting with blocks. The
+ * event isn't called if the {@link org.bukkit.GameRule#MOB_GRIEFING}
+ * is disabled as no block interaction will occur.
  */
 public class EntityExplodeEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
Patch:
@@ -7,7 +7,7 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Thrown when a entity picks an item up from the ground
+ * Thrown when an entity picks an item up from the ground
  */
 public class EntityPickupItemEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
Patch:
@@ -11,7 +11,7 @@
 import org.jetbrains.annotations.Nullable;
 
 /**
- * Triggered when a entity is created in the world by a player "placing" an item
+ * Triggered when an entity is created in the world by a player "placing" an item
  * on a block.
  * <br>
  * Note that this event is currently only fired for four specific placements:

File: paper-api/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
Patch:
@@ -133,7 +133,7 @@ public static HandlerList getHandlerList() {
     public enum Action {
 
         /**
-         * When the potion effect is added because the entity didn't have it's
+         * When the potion effect is added because the entity didn't have its
          * type.
          */
         ADDED,
@@ -237,7 +237,7 @@ public enum Cause {
          */
         SPIDER_SPAWN,
         /**
-         * When the entity gets effects from a totem item saving it's life.
+         * When the entity gets effects from a totem item saving its life.
          */
         TOTEM,
         /**

File: paper-api/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
Patch:
@@ -105,7 +105,7 @@ public enum RegainReason {
          */
         SATIATED,
         /**
-         * When a player regains health from eating consumables
+         * When an animal regains health from eating consumables
          */
         EATING,
         /**

File: paper-api/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
Patch:
@@ -156,7 +156,7 @@ public enum TargetReason {
         FOLLOW_LEADER,
         /**
          * When another entity tempts this entity by having a desired item such
-         * as wheat in it's hand.
+         * as wheat in its hand.
          */
         TEMPT,
         /**

File: paper-api/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
Patch:
@@ -10,8 +10,7 @@
 /**
  * Stores all data related to the bartering interaction with a piglin.
  *
- * This event can be triggered by a piglin picking up an item that's on its
- * bartering list.
+ * Called when a piglin completes a barter.
  */
 public class PiglinBarterEvent extends EntityEvent implements Cancellable {
 

File: paper-api/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
Patch:
@@ -8,7 +8,9 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Called when an ItemStack is successfully burned as fuel in a furnace.
+ * Called when an ItemStack is successfully burned as fuel in a furnace-like block such as a
+ * {@link org.bukkit.block.Furnace}, {@link org.bukkit.block.Smoker}, or
+ * {@link org.bukkit.block.BlastFurnace}.
  */
 public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
Patch:
@@ -9,7 +9,9 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * This event is called when a player takes items out of the furnace
+ * This event is called when a player takes items out of a furnace-like block such as a
+ * {@link org.bukkit.block.Furnace}, {@link org.bukkit.block.Smoker}, or
+ * {@link org.bukkit.block.BlastFurnace}.
  */
 public class FurnaceExtractEvent extends BlockExpEvent {
     private final Player player;

File: paper-api/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
Patch:
@@ -6,7 +6,9 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Called when an ItemStack is successfully smelted in a furnace.
+ * Called when an ItemStack is successfully smelted in a furnace-like block
+ * such as a {@link org.bukkit.block.Furnace}, {@link org.bukkit.block.Smoker},
+ * or {@link org.bukkit.block.BlastFurnace}.
  */
 public class FurnaceSmeltEvent extends BlockCookEvent {
 

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
Patch:
@@ -7,7 +7,7 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Represents a player related inventory event
+ * Called when a player opens an inventory
  */
 public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();

File: paper-api/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
Patch:
@@ -6,8 +6,9 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Called when a player takes action on a resource pack request sent via
- * {@link Player#setResourcePack(java.lang.String)}.
+ * Called when a player takes action on a resource pack request.
+ * @see Player#setResourcePack(String, String)
+ * @see Player#setResourcePack(String, String, boolean)
  */
 public class PlayerResourcePackStatusEvent extends PlayerEvent {
 

File: paper-api/src/main/java/org/bukkit/generator/ChunkGenerator.java
Patch:
@@ -627,7 +627,7 @@ public static interface ChunkData {
          * Get the biome at x, y, z within chunk being generated
          *
          * @param x the x location in the chunk from 0-15 inclusive
-         * @param y the y location in the chunk from minimum (inclusive) -
+         * @param y the y location in the chunk from minHeight (inclusive) -
          * maxHeight (exclusive)
          * @param z the z location in the chunk from 0-15 inclusive
          * @return Biome value

File: paper-api/src/main/java/org/bukkit/inventory/ItemFlag.java
Patch:
@@ -35,7 +35,7 @@ public enum ItemFlag {
      */
     HIDE_DYE,
     /**
-     * Setting to show/hide armor trim from leather armor.
+     * Setting to show/hide armor trim from armor.
      */
     HIDE_ARMOR_TRIM;
 }

File: paper-api/src/main/java/org/bukkit/inventory/PlayerInventory.java
Patch:
@@ -160,7 +160,7 @@ public interface PlayerInventory extends Inventory {
     public void setBoots(@Nullable ItemStack boots);
 
     /**
-     * Gets a copy of the item the player is currently holding
+     * Gets the item the player is currently holding
      * in their main hand.
      *
      * @return the currently held item
@@ -176,7 +176,7 @@ public interface PlayerInventory extends Inventory {
     void setItemInMainHand(@Nullable ItemStack item);
 
     /**
-     * Gets a copy of the item the player is currently holding
+     * Gets the item the player is currently holding
      * in their off hand.
      *
      * @return the currently held item
@@ -192,7 +192,7 @@ public interface PlayerInventory extends Inventory {
     void setItemInOffHand(@Nullable ItemStack item);
 
     /**
-     * Gets a copy of the item the player is currently holding
+     * Gets the item the player is currently holding
      *
      * @return the currently held item
      * @see #getItemInMainHand()

File: paper-api/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
Patch:
@@ -28,7 +28,7 @@ public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result,
     }
 
     /**
-     * Create a cooking recipe to craft the specified ItemStack.
+     * Create a Stonecutting recipe to craft the specified ItemStack.
      *
      * @param key The unique recipe key
      * @param result The item you want the recipe to create.
@@ -42,7 +42,7 @@ public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result,
     }
 
     /**
-     * Sets the input of this cooking recipe.
+     * Sets the input of this Stonecutting recipe.
      *
      * @param input The input material.
      * @return The changed recipe, so you can chain calls.
@@ -64,7 +64,7 @@ public ItemStack getInput() {
     }
 
     /**
-     * Sets the input of this cooking recipe.
+     * Sets the input of this Stonecutting recipe.
      *
      * @param input The input choice.
      * @return The changed recipe, so you can chain calls.

File: paper-api/src/main/java/org/bukkit/inventory/meta/OminousBottleMeta.java
Patch:
@@ -3,7 +3,7 @@
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Represents a map that can be scalable.
+ * Represents an ominous bottle with an amplifier of the bad omen effect.
  */
 public interface OminousBottleMeta extends ItemMeta {
 

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 public interface Plugin extends TabExecutor {
     /**
-     * Returns the folder that the plugin data's files are located in. The
+     * Returns the folder that the plugin data files are located in. The
      * folder may not yet exist.
      *
      * @return The folder
@@ -27,9 +27,9 @@ public interface Plugin extends TabExecutor {
     public File getDataFolder();
 
     /**
-     * Returns the plugin.yaml file containing the details for this plugin
+     * Returns the plugin.yml file containing the details for this plugin
      *
-     * @return Contents of the plugin.yaml file
+     * @return Contents of the plugin.yml file
      * @deprecated May be inaccurate due to different plugin implementations.
      * @see Plugin#getPluginMeta()
      */

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -69,7 +69,7 @@ protected JavaPlugin(@NotNull final JavaPluginLoader loader, @NotNull final Plug
     }
 
     /**
-     * Returns the folder that the plugin data's files are located in. The
+     * Returns the folder that the plugin data files are located in. The
      * folder may not yet exist.
      *
      * @return The folder.
@@ -127,9 +127,9 @@ protected File getFile() {
     }
 
     /**
-     * Returns the plugin.yaml file containing the details for this plugin
+     * Returns the plugin.yml file containing the details for this plugin
      *
-     * @return Contents of the plugin.yaml file
+     * @return Contents of the plugin.yml file
      * @deprecated No longer applicable to all types of plugins
      */
     @NotNull

File: paper-api/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
Patch:
@@ -31,7 +31,8 @@ public interface PluginMessageRecipient {
 
     /**
      * Gets a set containing all the Plugin Channels that this client is
-     * listening on.
+     * listening on. Does not contain the BungeeCord channel due to its
+     * special status.
      *
      * @return Set containing all the channels that this client may accept.
      */

File: paper-api/src/main/java/org/bukkit/scoreboard/Objective.java
Patch:
@@ -86,7 +86,7 @@ public interface Objective {
      *
      * @return true if scores are modifiable
      * @throws IllegalStateException if this objective has been unregistered
-     * @see Criterias#HEALTH
+     * @see Criteria#HEALTH
      */
     boolean isModifiable();
 

File: paper-api/src/main/java/org/bukkit/scoreboard/Team.java
Patch:
@@ -265,7 +265,7 @@ public interface Team extends net.kyori.adventure.audience.ForwardingAudience {
      * Gets the Set of entries on the team
      *
      * @return entries on the team
-     * @throws IllegalStateException if this entries has been unregistered
+     * @throws IllegalStateException if this team has been unregistered
      */
     @NotNull
     Set<String> getEntries();

File: paper-api/src/main/java/org/bukkit/util/BoundingBox.java
Patch:
@@ -358,7 +358,7 @@ public BoundingBox copy(@NotNull BoundingBox other) {
      * <p>
      * Negative values will shrink the bounding box in the corresponding
      * direction. Shrinking will be limited to the point where the affected
-     * opposite faces would meet if the they shrank at uniform speeds.
+     * opposite faces would meet if they shrank at uniform speeds.
      *
      * @param negativeX the amount of expansion in the negative x direction
      * @param negativeY the amount of expansion in the negative y direction

File: paper-api/src/main/java/org/bukkit/util/CachedServerIcon.java
Patch:
@@ -5,7 +5,7 @@
 import org.jetbrains.annotations.Nullable;
 
 /**
- * This is a cached version of a server-icon. It's internal representation
+ * This is a cached version of a server-icon. Its internal representation
  * and implementation is undefined.
  *
  * @see Server#getServerIcon()

File: paper-api/src/main/java/org/bukkit/event/server/ServerEvent.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.event.server;
 
+import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 
 /**
@@ -8,7 +9,7 @@
 public abstract class ServerEvent extends Event {
 
     public ServerEvent() {
-        super();
+        super(!Bukkit.isPrimaryThread()); // Paper
     }
 
     public ServerEvent(boolean isAsync) {

File: paper-api/src/test/java/org/bukkit/BukkitMirrorTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
 
+@org.junit.jupiter.api.Disabled // Paper
 public class BukkitMirrorTest {
 
     public static Stream<Arguments> data() {

File: paper-api/src/main/java/org/bukkit/block/Skull.java
Patch:
@@ -42,7 +42,7 @@ public interface Skull extends TileState {
      * @return true if the owner was successfully set
      * @deprecated see {@link #setOwningPlayer(org.bukkit.OfflinePlayer)}.
      */
-    @Deprecated(since = "1.94")
+    @Deprecated(since = "1.9.4")
     @Contract("null -> false")
     public boolean setOwner(@Nullable String name);
 

File: paper-api/src/test/java/org/bukkit/InstrumentTest.java
Patch:
@@ -2,9 +2,10 @@
 
 import static org.bukkit.support.MatcherAssert.*;
 import static org.hamcrest.CoreMatchers.*;
+import org.bukkit.support.AbstractTestingBase;
 import org.junit.jupiter.api.Test;
 
-public class InstrumentTest {
+public class InstrumentTest extends AbstractTestingBase {
     @Test
     public void getByType() {
         for (Instrument instrument : Instrument.values()) {

File: paper-api/src/main/java/org/bukkit/event/entity/EntityKnockbackEvent.java
Patch:
@@ -50,7 +50,7 @@ public KnockbackCause getCause() {
      * Gets the raw force of the knockback. <br>
      * This value is based on factors such as the {@link Enchantment#KNOCKBACK}
      * level of an attacker and the
-     * {@link Attribute#GENERIC_KNOCKBACK_RESISTANCE} of the entity.
+     * {@link Attribute#KNOCKBACK_RESISTANCE} of the entity.
      *
      * @return the knockback force
      */

File: paper-api/src/main/java/org/bukkit/Location.java
Patch:
@@ -82,7 +82,7 @@ public boolean isWorldLoaded() {
         }
 
         World world = this.world.get();
-        return world != null && Bukkit.getWorld(world.getUID()) != null;
+        return world != null && world.equals(Bukkit.getWorld(world.getUID()));
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/attribute/AttributeModifier.java
Patch:
@@ -1,6 +1,7 @@
 package org.bukkit.attribute;
 
 import com.google.common.base.Preconditions;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -65,7 +66,7 @@ public AttributeModifier(@NotNull NamespacedKey key, double amount, @NotNull Ope
     @NotNull
     @Deprecated
     public UUID getUniqueId() {
-        return UUID.fromString(getKey().toString());
+        return UUID.nameUUIDFromBytes(getKey().toString().getBytes(StandardCharsets.UTF_8));
     }
 
     @NotNull

File: paper-api/src/main/java/org/bukkit/inventory/ShapedRecipe.java
Patch:
@@ -32,7 +32,7 @@ public class ShapedRecipe extends CraftingRecipe {
      */
     @Deprecated
     public ShapedRecipe(@NotNull ItemStack result) {
-        super(NamespacedKey.randomKey(), result);
+        this(NamespacedKey.randomKey(), result);
     }
 
     /**
@@ -42,14 +42,15 @@ public ShapedRecipe(@NotNull ItemStack result) {
      *
      * @param key the unique recipe key
      * @param result The item you want the recipe to create.
+     * @exception IllegalArgumentException if the {@code result} is an empty item (AIR)
      * @see ShapedRecipe#shape(String...)
      * @see ShapedRecipe#setIngredient(char, Material)
      * @see ShapedRecipe#setIngredient(char, Material, int)
      * @see ShapedRecipe#setIngredient(char, MaterialData)
      * @see ShapedRecipe#setIngredient(char, RecipeChoice)
      */
     public ShapedRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
-        super(key, result);
+        super(key, checkResult(result));
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
Patch:
@@ -19,7 +19,7 @@ public class ShapelessRecipe extends CraftingRecipe {
 
     @Deprecated
     public ShapelessRecipe(@NotNull ItemStack result) {
-        super(NamespacedKey.randomKey(), result);
+        this(NamespacedKey.randomKey(), result);
     }
 
     /**
@@ -29,6 +29,7 @@ public ShapelessRecipe(@NotNull ItemStack result) {
      *
      * @param key the unique recipe key
      * @param result The item you want the recipe to create.
+     * @exception IllegalArgumentException if the {@code result} is an empty item (AIR)
      * @see ShapelessRecipe#addIngredient(Material)
      * @see ShapelessRecipe#addIngredient(MaterialData)
      * @see ShapelessRecipe#addIngredient(Material,int)
@@ -37,7 +38,7 @@ public ShapelessRecipe(@NotNull ItemStack result) {
      * @see ShapelessRecipe#addIngredient(int,Material,int)
      */
     public ShapelessRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
-        super(key, result);
+        super(key, checkResult(result));
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/inventory/AnvilInventory.java
Patch:
@@ -23,7 +23,7 @@ public interface AnvilInventory extends Inventory {
      * Get the item cost (in amount) to complete the current repair.
      *
      * @return the amount
-     * @deprecated use {@link AnvilView#getRepairItemCost()}.
+     * @deprecated use {@link AnvilView#getRepairCost()}.
      */
     @Deprecated(forRemoval = true, since = "1.21")
     int getRepairCostAmount();
@@ -32,7 +32,7 @@ public interface AnvilInventory extends Inventory {
      * Set the item cost (in amount) to complete the current repair.
      *
      * @param amount the amount
-     * @deprecated use {@link AnvilView#setRepairItemCost(int)}.
+     * @deprecated use {@link AnvilView#setRepairCost(int)}.
      */
     @Deprecated(forRemoval = true, since = "1.21")
     void setRepairCostAmount(int amount);

File: paper-api/src/main/java/org/bukkit/UnsafeValues.java
Patch:
@@ -82,6 +82,7 @@ public interface UnsafeValues {
      */
     boolean removeAdvancement(NamespacedKey key);
 
+    @Deprecated(since = "1.21", forRemoval = true)
     Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(Material material, EquipmentSlot slot);
 
     CreativeCategory getCreativeCategory(Material material);

File: paper-api/src/main/java/org/bukkit/map/MapCursor.java
Patch:
@@ -187,8 +187,8 @@ public void setType(@NotNull Type type) {
      */
     @Deprecated
     public void setRawType(byte type) {
-        if (type < 0 || type > 26) {
-            throw new IllegalArgumentException("Type must be in the range 0-26");
+        if (type < 0 || type > 34) {
+            throw new IllegalArgumentException("Type must be in the range 0-34");
         }
         this.type = type;
     }

File: paper-api/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
Patch:
@@ -60,7 +60,7 @@ public Block getHitBlock() {
 
     /**
      * Gets the block face that was hit, if it was a block that was hit and the
-     * face was provided in the vent.
+     * face was provided in the event.
      *
      * @return hit face or else null
      */

File: paper-api/src/main/java/org/bukkit/block/BlockType.java
Patch:
@@ -3448,7 +3448,7 @@ private static <B extends BlockData> BlockType.Typed<B> getBlockType(@NotNull St
      *
      * @return the corresponding ItemType
      * @see #hasItemType()
-     * @see BlockData#getPlacementType()
+     * @see BlockData#getPlacementMaterial()
      */
     @NotNull
     ItemType getItemType();

File: paper-api/src/main/java/org/bukkit/attribute/AttributeModifier.java
Patch:
@@ -28,7 +28,7 @@ public AttributeModifier(@NotNull String name, double amount, @NotNull Operation
     }
 
     public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount, @NotNull Operation operation) {
-        this(uuid, name, amount, operation, (EquipmentSlotGroup) null);
+        this(uuid, name, amount, operation, (EquipmentSlot) null);
     }
 
     public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount, @NotNull Operation operation, @Nullable EquipmentSlot slot) {
@@ -39,6 +39,7 @@ public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount
         Preconditions.checkArgument(uuid != null, "UUID cannot be null");
         Preconditions.checkArgument(name != null, "Name cannot be null");
         Preconditions.checkArgument(operation != null, "Operation cannot be null");
+        Preconditions.checkArgument(slot != null, "EquipmentSlotGroup cannot be null");
         this.uuid = uuid;
         this.name = name;
         this.amount = amount;
@@ -95,7 +96,7 @@ public Operation getOperation() {
     @Nullable
     @Deprecated
     public EquipmentSlot getSlot() {
-        return slot.getExample();
+        return slot == EquipmentSlotGroup.ANY ? null : slot.getExample();
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/StructureType.java
Patch:
@@ -78,7 +78,7 @@ public final class StructureType implements Keyed {
      * They come in my different variations. The cold variants consist primarily
      * of stone brick, and the warm variants consist of sandstone.
      */
-    public static final StructureType OCEAN_RUIN = register(new StructureType("ocean_ruin", MapCursor.Type.TEMPLE));
+    public static final StructureType OCEAN_RUIN = register(new StructureType("ocean_ruin", MapCursor.Type.MONUMENT));
 
     /**
      * Desert pyramids (also known as desert temples) are found in deserts.
@@ -107,7 +107,7 @@ public final class StructureType implements Keyed {
      * lanterns. They are the only place guardians and elder guardians spawn
      * naturally.
      */
-    public static final StructureType OCEAN_MONUMENT = register(new StructureType("monument", MapCursor.Type.TEMPLE));
+    public static final StructureType OCEAN_MONUMENT = register(new StructureType("monument", MapCursor.Type.MONUMENT));
 
     /**
      * End Cities are tall castle-like structures that generate in the outer

File: paper-api/src/main/java/org/bukkit/inventory/ItemFlag.java
Patch:
@@ -29,7 +29,7 @@ public enum ItemFlag {
      * Setting to show/hide potion effects, book and firework information, map
      * tooltips, patterns of banners, and enchantments of enchanted books.
      */
-    HIDE_POTION_EFFECTS,
+    HIDE_ADDITIONAL_TOOLTIP,
     /**
      * Setting to show/hide dyes from colored leather armor.
      */

File: paper-api/src/main/java/org/bukkit/Sound.java
Patch:
@@ -1055,8 +1055,6 @@ public enum Sound implements Keyed {
     ENTITY_GENERIC_SMALL_FALL("entity.generic.small_fall"),
     ENTITY_GENERIC_SPLASH("entity.generic.splash"),
     ENTITY_GENERIC_SWIM("entity.generic.swim"),
-    @MinecraftExperimental(Requires.UPDATE_1_21)
-    ENTITY_GENERIC_WIND_BURST("entity.generic.wind_burst"),
     ENTITY_GHAST_AMBIENT("entity.ghast.ambient"),
     ENTITY_GHAST_DEATH("entity.ghast.death"),
     ENTITY_GHAST_HURT("entity.ghast.hurt"),

File: paper-api/src/main/java/org/bukkit/enchantments/Enchantment.java
Patch:
@@ -4,10 +4,10 @@
 import com.google.common.collect.Lists;
 import org.bukkit.Keyed;
 import org.bukkit.MinecraftExperimental;
+import org.bukkit.MinecraftExperimental.Requires;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.Translatable;
-import org.bukkit.MinecraftExperimental.Requires;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -7,10 +7,10 @@
 import org.bukkit.Keyed;
 import org.bukkit.Location;
 import org.bukkit.MinecraftExperimental;
+import org.bukkit.MinecraftExperimental.Requires;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Translatable;
 import org.bukkit.World;
-import org.bukkit.MinecraftExperimental.Requires;
 import org.bukkit.entity.minecart.CommandMinecart;
 import org.bukkit.entity.minecart.ExplosiveMinecart;
 import org.bukkit.entity.minecart.HopperMinecart;

File: paper-api/src/main/java/org/bukkit/generator/structure/Structure.java
Patch:
@@ -2,9 +2,9 @@
 
 import org.bukkit.Keyed;
 import org.bukkit.MinecraftExperimental;
+import org.bukkit.MinecraftExperimental.Requires;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
-import org.bukkit.MinecraftExperimental.Requires;
 import org.jetbrains.annotations.NotNull;
 
 /**

File: paper-api/src/main/java/org/bukkit/loot/LootTables.java
Patch:
@@ -3,8 +3,8 @@
 import org.bukkit.Bukkit;
 import org.bukkit.Keyed;
 import org.bukkit.MinecraftExperimental;
-import org.bukkit.NamespacedKey;
 import org.bukkit.MinecraftExperimental.Requires;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**

File: paper-api/src/main/java/org/bukkit/potion/PotionType.java
Patch:
@@ -6,8 +6,8 @@
 import org.bukkit.Bukkit;
 import org.bukkit.Keyed;
 import org.bukkit.MinecraftExperimental;
-import org.bukkit.NamespacedKey;
 import org.bukkit.MinecraftExperimental.Requires;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;

File: paper-api/src/main/java/org/bukkit/entity/EntityCategory.java
Patch:
@@ -23,16 +23,16 @@ public enum EntityCategory {
      *   <li>Are subject to burning in daylight (though not all).
      *   <li>Sink in water (except {@link Drowned}, {@link Phantom Phantoms}
      *   and {@link Wither Withers}).
-     *   <li>Take additional damage from {@link Enchantment#DAMAGE_UNDEAD}.
+     *   <li>Take additional damage from {@link Enchantment#SMITE}.
      *   <li>Are ignored by {@link Wither Withers}.
      * </ul>
      */
     UNDEAD,
     /**
      * Entities of the arthropod family. These creatures:
      * <ul>
-     *   <li>Take additional damage and receive {@link PotionEffectType#SLOW}
-     *   from {@link Enchantment#DAMAGE_ARTHROPODS}.
+     *   <li>Take additional damage and receive {@link PotionEffectType#SLOWNESS}
+     *   from {@link Enchantment#BANE_OF_ARTHROPODS}.
      *   <li>Are immune to {@link PotionEffectType#POISON} if they are spiders.
      * </ul>
      */

File: paper-api/src/main/java/org/bukkit/inventory/ItemFactory.java
Patch:
@@ -139,7 +139,7 @@ public interface ItemFactory {
      * The input should match the same input as expected by Minecraft's {@code /give}
      * command. For example, "minecraft:diamond_sword{Enchantments:[{id:"minecraft:sharpness", lvl:3}]}"
      * would yield an ItemStack of {@link Material#DIAMOND_SWORD} with an {@link ItemMeta}
-     * containing a level 3 {@link Enchantment#DAMAGE_ALL}
+     * containing a level 3 {@link Enchantment#SHARPNESS}
      * enchantment.
      *
      * @param input the item input string

File: paper-api/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
Patch:
@@ -87,7 +87,7 @@ public interface PotionMeta extends ItemMeta {
      *
      * @param type the potion effect type to move
      * @return true if the potion meta changed as a result of this call
-     * @deprecated use {@link #setBasePotionData(org.bukkit.potion.PotionData)}
+     * @deprecated use {@link #setBasePotionType(org.bukkit.potion.PotionType)}
      */
     @Deprecated
     boolean setMainEffect(@NotNull PotionEffectType type);

File: paper-api/src/main/java/org/bukkit/loot/LootContext.java
Patch:
@@ -54,7 +54,7 @@ public float getLuck() {
 
     /**
      * Represents the
-     * {@link org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS} the
+     * {@link org.bukkit.enchantments.Enchantment#LOOTING} the
      * {@link #getKiller()} entity has on their equipped item.
      *
      * This value is only set via
@@ -124,7 +124,7 @@ public Builder luck(float luck) {
         }
 
         /**
-         * Set the {@link org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS}
+         * Set the {@link org.bukkit.enchantments.Enchantment#LOOTING}
          * level equivalent to use when generating loot. Values less than or
          * equal to 0 will force the {@link LootTable} to only return a single
          * {@link org.bukkit.inventory.ItemStack} per pool.

File: paper-api/src/main/java/org/bukkit/loot/LootTables.java
Patch:
@@ -179,8 +179,10 @@ public enum LootTables implements Keyed {
     SNIFFER_DIGGING("gameplay/sniffer_digging"),
     PIGLIN_BARTERING("gameplay/piglin_bartering"),
     // Spawners
+    @MinecraftExperimental
     TRIAL_CHAMBER_KEY("spawners/trial_chamber/key"),
-    RIAL_CHAMBER_CONSUMABLES("spawners/trial_chamber/consumables"),
+    @MinecraftExperimental
+    TRIAL_CHAMBER_CONSUMABLES("spawners/trial_chamber/consumables"),
     // Archaeology
     DESERT_WELL_ARCHAEOLOGY("archaeology/desert_well"),
     DESERT_PYRAMID_ARCHAEOLOGY("archaeology/desert_pyramid"),

File: paper-api/src/main/java/org/bukkit/inventory/RecipeChoice.java
Patch:
@@ -144,8 +144,8 @@ public String toString() {
     }
 
     /**
-     * Represents a choice that will be valid only one of the stacks is exactly
-     * matched (aside from stack size).
+     * Represents a choice that will be valid only if one of the stacks is
+     * exactly matched (aside from stack size).
      * <br>
      * <b>Only valid for shaped recipes</b>
      */

File: paper-api/src/main/java/org/bukkit/block/data/type/Crafter.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.bukkit.MinecraftExperimental;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.block.data.Powerable;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 

File: paper-api/src/main/java/org/bukkit/potion/PotionBrewer.java
Patch:
@@ -40,7 +40,9 @@ public interface PotionBrewer {
      * @param upgraded Whether the potion is upgraded
      * @param extended Whether the potion is extended
      * @return The list of effects
+     * @deprecated Upgraded / extended potions are now their own {@link PotionType} use {@link PotionType#getPotionEffects()} instead
      */
     @NotNull
+    @Deprecated
     public Collection<PotionEffect> getEffects(@NotNull PotionType type, boolean upgraded, boolean extended);
 }

File: paper-api/src/main/java/org/bukkit/event/block/SculkBloomEvent.java
Patch:
@@ -38,7 +38,7 @@ public SculkBloomEvent(@NotNull Block theBlock, int charge) {
     }
 
     /**
-     * Returns the charge of the cursor, <1000 by default.
+     * Returns the charge of the cursor, &lt; 1000 by default.
      *
      * @return the charge of the cursor
      */

File: paper-api/src/main/java/org/bukkit/Registry.java
Patch:
@@ -253,7 +253,7 @@ public GameEvent get(@NotNull NamespacedKey key) {
     default T match(@NotNull String input) {
         Preconditions.checkArgument(input != null, "input must not be null");
 
-        String filtered = input.toLowerCase().replaceAll("\\s+", "_").replaceAll("\\W", "");
+        String filtered = input.toLowerCase().replaceAll("\\s+", "_");
         NamespacedKey namespacedKey = NamespacedKey.fromString(filtered);
         return (namespacedKey != null) ? get(namespacedKey) : null;
     }

File: paper-api/src/main/java/org/bukkit/persistence/PersistentDataType.java
Patch:
@@ -176,13 +176,13 @@ class BooleanPersistentDataType implements PersistentDataType<Byte, Boolean> {
         @NotNull
         @Override
         public Class<Byte> getPrimitiveType() {
-            return byte.class;
+            return Byte.class;
         }
 
         @NotNull
         @Override
         public Class<Boolean> getComplexType() {
-            return boolean.class;
+            return Boolean.class;
         }
 
         @NotNull

File: paper-api/src/main/java/org/bukkit/persistence/PersistentDataType.java
Patch:
@@ -61,7 +61,7 @@ public interface PersistentDataType<T, Z> {
     /**
      * A convenience implementation to convert between Byte and Boolean as there is
      * no native implementation for booleans. <br>
-     * Any byte value > 0 is considered to be true.
+     * Any byte value not equal to 0 is considered to be true.
      */
     PersistentDataType<Byte, Boolean> BOOLEAN = new BooleanPersistentDataType();
 
@@ -169,7 +169,7 @@ public T fromPrimitive(@NotNull T primitive, @NotNull PersistentDataAdapterConte
     /**
      * A convenience implementation to convert between Byte and Boolean as there is
      * no native implementation for booleans. <br>
-     * Any byte value > 0 is considered to be true.
+     * Any byte value not equal to 0 is considered to be true.
      */
     class BooleanPersistentDataType implements PersistentDataType<Byte, Boolean> {
 

File: paper-api/src/main/java/org/bukkit/entity/TextDisplay.java
Patch:
@@ -119,19 +119,19 @@ public interface TextDisplay extends Display {
      * @return text alignment
      */
     @NotNull
-    TextAligment getAlignment();
+    TextAlignment getAlignment();
 
     /**
      * Sets the text alignment for this display.
      *
      * @param alignment new alignment
      */
-    void setAlignment(@NotNull TextAligment alignment);
+    void setAlignment(@NotNull TextAlignment alignment);
 
     /**
      * Represents possible text alignments for this display.
      */
-    public enum TextAligment {
+    public enum TextAlignment {
 
         /**
          * Center aligned text (default).

File: paper-api/src/main/java/org/bukkit/event/inventory/ClickType.java
Patch:
@@ -114,6 +114,6 @@ public boolean isLeftClick() {
      * @return true if the action uses Shift.
      */
     public boolean isShiftClick() {
-        return (this == ClickType.SHIFT_LEFT) || (this == ClickType.SHIFT_RIGHT) || (this == ClickType.CONTROL_DROP);
+        return (this == ClickType.SHIFT_LEFT) || (this == ClickType.SHIFT_RIGHT);
     }
 }

File: paper-api/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
Patch:
@@ -25,7 +25,7 @@ public enum AdvancementDisplayType {
     GOAL(ChatColor.GREEN);
     private final ChatColor color;
 
-    private AdvancementDisplayType(@NotNull ChatColor color) {
+    private AdvancementDisplayType(ChatColor color) {
         this.color = color;
     }
 

File: paper-api/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
Patch:
@@ -64,6 +64,7 @@ public YamlConfiguration() {
         yamlDumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
         yamlLoaderOptions = new LoaderOptions();
         yamlLoaderOptions.setMaxAliasesForCollections(Integer.MAX_VALUE); // SPIGOT-5881: Not ideal, but was default pre SnakeYAML 1.26
+        yamlLoaderOptions.setCodePointLimit(Integer.MAX_VALUE); // SPIGOT-7161: Not ideal, but was default pre SnakeYAML 1.32
 
         yaml = new BukkitYaml(constructor, representer, yamlDumperOptions, yamlLoaderOptions);
     }

File: paper-api/src/main/java/org/bukkit/entity/Entity.java
Patch:
@@ -491,7 +491,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     public boolean leaveVehicle();
 
     /**
-     * Get the vehicle that this player is inside. If there is no vehicle,
+     * Get the vehicle that this entity is inside. If there is no vehicle,
      * null will be returned.
      *
      * @return The current vehicle.

File: paper-api/src/main/java/org/bukkit/Chunk.java
Patch:
@@ -212,7 +212,8 @@ public interface Chunk extends PersistentDataHolder {
     /**
      * Gets the amount of time in ticks that this chunk has been inhabited.
      *
-     * Note that the time is incremented once per tick per player in the chunk.
+     * Note that the time is incremented once per tick per player within mob
+     * spawning distance of this chunk.
      *
      * @return inhabited time
      */

File: paper-api/src/main/java/org/bukkit/Tag.java
Patch:
@@ -465,7 +465,7 @@ public interface Tag<T extends Keyed> extends Keyed {
      */
     Tag<Material> CAULDRONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cauldrons"), Material.class);
     /**
-     * Vanilla block tag representing all blocks that make cryustal sounds.
+     * Vanilla block tag representing all blocks that make crystal sounds.
      */
     Tag<Material> CRYSTAL_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crystal_sound_blocks"), Material.class);
     /**

File: paper-api/src/main/java/org/bukkit/Vibration.java
Patch:
@@ -13,7 +13,7 @@ public class Vibration {
     private final Destination destination;
     private final int arrivalTime;
 
-    public Vibration(@NotNull Location origin, @NotNull Destination destination, @NotNull int arrivalTime) {
+    public Vibration(@NotNull Location origin, @NotNull Destination destination, int arrivalTime) {
         this.origin = origin;
         this.destination = destination;
         this.arrivalTime = arrivalTime;

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -1809,7 +1809,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn water ambient mobs in
      *     this world on every tick.
-     * <li>A value of 400 will mean the server will attempt to spawn weater ambient mobs
+     * <li>A value of 400 will mean the server will attempt to spawn water ambient mobs
      *     in this world every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>

File: paper-api/src/main/java/org/bukkit/entity/Mob.java
Patch:
@@ -50,7 +50,7 @@ public interface Mob extends LivingEntity, Lootable {
     public boolean isAware();
 
     /**
-     * Get the {@link Sound} this makes while ambiently existing. This sound
+     * Get the {@link Sound} this mob makes while ambiently existing. This sound
      * may change depending on the current state of the entity, and may also
      * return null under specific conditions. This sound is not constant.
      * For instance, villagers will make different passive noises depending

File: paper-api/src/main/java/org/bukkit/util/StructureSearchResult.java
Patch:
@@ -20,7 +20,7 @@ public interface StructureSearchResult {
      * @return the found structure.
      */
     @NotNull
-     Structure getStructure();
+    Structure getStructure();
 
     /**
      * Return the location of the structure.

File: paper-api/src/main/java/org/bukkit/inventory/ItemFlag.java
Patch:
@@ -27,7 +27,7 @@ public enum ItemFlag {
     HIDE_PLACED_ON,
     /**
      * Setting to show/hide potion effects, book and firework information, map
-     * tooltips, and enchantments of enchanted books.
+     * tooltips, patterns of banners, and enchantments of enchanted books.
      */
     HIDE_POTION_EFFECTS,
     /**

File: paper-api/src/main/java/org/bukkit/TreeSpecies.java
Patch:
@@ -6,7 +6,10 @@
 
 /**
  * Represents the different species of trees regardless of size.
+ *
+ * @deprecated Deprecated, see usage methods for replacement(s)
  */
+@Deprecated
 public enum TreeSpecies {
 
     /**

File: paper-api/src/main/java/org/bukkit/event/player/PlayerAnimationType.java
Patch:
@@ -4,5 +4,6 @@
  * Different types of player animations
  */
 public enum PlayerAnimationType {
-    ARM_SWING
+    ARM_SWING,
+    OFF_ARM_SWING
 }

File: paper-api/src/main/java/org/bukkit/permissions/Permission.java
Patch:
@@ -64,8 +64,6 @@ public Permission(@NotNull String name, @Nullable String description, @Nullable
         if (children != null) {
             this.children.putAll(children);
         }
-
-        recalculatePermissibles();
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
Patch:
@@ -119,7 +119,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * Plugins should check that hasCustomModelData() returns <code>true</code>
      * before calling this method.
      *
-     * @return the localized name that is set
+     * @return the custom model data that is set
      */
     int getCustomModelData();
 

File: paper-api/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * Called when a {@link Strider}'s temperature has changed as a result of
- * entering or existing blocks it considers warm.
+ * entering or exiting blocks it considers warm.
  */
 public class StriderTemperatureChangeEvent extends EntityEvent implements Cancellable {
 

File: paper-api/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
Patch:
@@ -132,10 +132,10 @@ Class<?> loadClass0(@NotNull String name, boolean resolve, boolean checkGlobal,
 
                         seenIllegalAccess.add(provider.getName());
                         if (plugin != null) {
-                            plugin.getLogger().log(Level.WARNING, "Loaded class {0} from {1} which is not a depend, softdepend or loadbefore of this plugin.", new Object[]{name, provider.getFullName()});
+                            plugin.getLogger().log(Level.WARNING, "Loaded class {0} from {1} which is not a depend or softdepend of this plugin.", new Object[]{name, provider.getFullName()});
                         } else {
                             // In case the bad access occurs on construction
-                            loader.server.getLogger().log(Level.WARNING, "[{0}] Loaded class {1} from {2} which is not a depend, softdepend or loadbefore of this plugin.", new Object[]{description.getName(), name, provider.getFullName()});
+                            loader.server.getLogger().log(Level.WARNING, "[{0}] Loaded class {1} from {2} which is not a depend or softdepend of this plugin.", new Object[]{description.getName(), name, provider.getFullName()});
                         }
                     }
                 }

File: paper-api/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
Patch:
@@ -86,8 +86,8 @@ public interface FireworkMeta extends ItemMeta {
      * Sets the approximate power of the firework. Each level of power is half
      * a second of flight time.
      *
-     * @param power the power of the firework, from 0-128
-     * @throws IllegalArgumentException if {@literal height<0 or height>128}
+     * @param power the power of the firework, from 0-127
+     * @throws IllegalArgumentException if {@literal height<0 or height>127}
      */
     void setPower(int power) throws IllegalArgumentException;
 

File: paper-api/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
Patch:
@@ -174,7 +174,7 @@ public enum SpawnReason {
          */
         BEEHIVE,
         /**
-         * When a piglin is converted to a zombified piglib.
+         * When a piglin is converted to a zombified piglin.
          */
         PIGLIN_ZOMBIFIED,
         /**

File: paper-api/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
Patch:
@@ -141,6 +141,7 @@ private void adjustNodeComments(final MappingNode node) {
     }
 
     private void fromNodeTree(@NotNull MappingNode input, @NotNull ConfigurationSection section) {
+        constructor.flattenMapping(input);
         for (NodeTuple nodeTuple : input.getValue()) {
             ScalarNode key = (ScalarNode) nodeTuple.getKeyNode();
             String keyString = key.getValue();

File: paper-api/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
Patch:
@@ -373,7 +373,7 @@ public void testLoadWithCommentsInline() throws Exception {
         config.options().parseComments(true);
         config.loadFromString("key1: value1\nkey2: value2 # Test inline\nkey3: value3");
 
-        assertEquals(Arrays.asList(" Test inline"), config.getInlineComments("key2"));
+        assertEquals(Arrays.asList("Test inline"), config.getInlineComments("key2"));
     }
 
     @Test
@@ -384,7 +384,7 @@ public void testSaveWithCommentsInline() {
         config.set("key1", "value1");
         config.set("key2", "value2");
         config.set("key3", "value3");
-        config.setInlineComments("key2", Arrays.asList(" Test inline"));
+        config.setInlineComments("key2", Arrays.asList("Test inline"));
 
         String result = config.saveToString();
         String expected = "key1: value1\nkey2: value2 # Test inline\nkey3: value3\n";

File: paper-api/src/main/java/org/bukkit/configuration/MemorySection.java
Patch:
@@ -251,10 +251,10 @@ public Object get(@NotNull String path, @Nullable Object def) {
         int i1 = -1, i2;
         ConfigurationSection section = this;
         while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
-            section = section.getConfigurationSection(path.substring(i2, i1));
-            if (section == null) {
+            if (section == null || !section.contains(path.substring(i2, i1), true)) {
                 return def;
             }
+            section = section.getConfigurationSection(path.substring(i2, i1));
         }
 
         String key = path.substring(i2);

File: paper-api/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
Patch:
@@ -1,11 +1,12 @@
 package org.bukkit.potion;
 
 import org.bukkit.Color;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 public class PotionEffectTypeWrapper extends PotionEffectType {
-    protected PotionEffectTypeWrapper(int id) {
-        super(id);
+    protected PotionEffectTypeWrapper(int id, @NotNull String name) {
+        super(id, NamespacedKey.minecraft(name));
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/entity/ItemFrame.java
Patch:
@@ -106,7 +106,7 @@ public interface ItemFrame extends Hanging {
      * damage, interaction, pistons, or missing supporting blocks), rotate the
      * item or place/remove items.
      *
-     * @param visible whether the item frame is fixed or not
+     * @param fixed whether the item frame is fixed or not
      */
-    void setFixed(boolean visible);
+    void setFixed(boolean fixed);
 }

File: paper-api/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java
Patch:
@@ -14,7 +14,7 @@ public interface ScoreboardManager {
      * This Scoreboard is saved by the server, is affected by the /scoreboard
      * command, and is the scoreboard shown by default to players.
      *
-     * @return the default sever scoreboard
+     * @return the default server scoreboard
      */
     @NotNull
     Scoreboard getMainScoreboard();

File: paper-api/src/main/java/org/bukkit/event/world/GenericGameEvent.java
Patch:
@@ -29,6 +29,7 @@ public GenericGameEvent(@NotNull GameEvent event, @NotNull Location location, @N
         this.event = event;
         this.location = location;
         this.entity = entity;
+        this.radius = radius;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/entity/Stray.java
Patch:
@@ -1,6 +1,6 @@
 package org.bukkit.entity;
 
 /**
- * Represents a Stray - variant of {@link Skeleton}.
+ * Represents a Stray - variant of {@link AbstractSkeleton}.
  */
-public interface Stray extends Skeleton { }
+public interface Stray extends AbstractSkeleton { }

File: paper-api/src/main/java/org/bukkit/entity/WitherSkeleton.java
Patch:
@@ -1,6 +1,6 @@
 package org.bukkit.entity;
 
 /**
- * Represents a WitherSkeleton - variant of {@link Skeleton}.
+ * Represents a WitherSkeleton - variant of {@link AbstractSkeleton}.
  */
-public interface WitherSkeleton extends Skeleton { }
+public interface WitherSkeleton extends AbstractSkeleton { }

File: paper-api/src/main/java/org/bukkit/entity/Entity.java
Patch:
@@ -205,14 +205,14 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     public void setFireTicks(int ticks);
 
     /**
-     * Gets if the entity has visual fire (it will always appear to be on fire).
+     * Sets if the entity has visual fire (it will always appear to be on fire).
      *
      * @param fire whether visual fire is enabled
      */
     void setVisualFire(boolean fire);
 
     /**
-     * Sets if the entity has visual fire (it will always appear to be on fire).
+     * Gets if the entity has visual fire (it will always appear to be on fire).
      *
      * @return whether visual fire is enabled
      */

File: paper-api/src/main/java/org/bukkit/block/ShulkerBox.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.bukkit.DyeColor;
 import org.bukkit.loot.Lootable;
-import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a captured state of a ShulkerBox.
@@ -12,8 +12,8 @@ public interface ShulkerBox extends Container, Lootable, Lidded {
     /**
      * Get the {@link DyeColor} corresponding to this ShulkerBox
      *
-     * @return the {@link DyeColor} of this ShulkerBox
+     * @return the {@link DyeColor} of this ShulkerBox, or null if default
      */
-    @NotNull
+    @Nullable
     public DyeColor getColor();
 }

File: paper-api/src/main/java/org/bukkit/block/data/type/BubbleColumn.java
Patch:
@@ -11,7 +11,7 @@ public interface BubbleColumn extends BlockData {
     /**
      * Gets the value of the 'drag' property.
      *
-     * @return the 'part' value
+     * @return the 'drag' value
      */
     boolean isDrag();
 

File: paper-api/src/main/java/org/bukkit/event/player/PlayerBucketFishEvent.java
Patch:
@@ -39,13 +39,13 @@ public Fish getEntity() {
     /**
      * Gets the bucket used.
      *
-     * This refers to the bucket clicked with, ie {@link Material#WATER}.
+     * This refers to the bucket clicked with, ie {@link Material#WATER_BUCKET}.
      *
      * @return The used bucket
      */
     @NotNull
     public ItemStack getWaterBucket() {
-        return fishBucket;
+        return waterBucket;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -557,7 +557,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      *
      * @param loc The location to spawn the entity
      * @param type The entity to spawn
-     * @return Resulting Entity of this method, or null if it was unsuccessful
+     * @return Resulting Entity of this method
      */
     @NotNull
     public Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type);

File: paper-api/src/main/java/org/bukkit/entity/ArmorStand.java
Patch:
@@ -306,7 +306,7 @@ public interface ArmorStand extends LivingEntity {
      * Remove a {@link LockType locking mechanism}.
      *
      * @param slot the equipment slot to change
-     * @param lockType the lockType to remove
+     * @param lockType the LockType to remove
      */
     void removeEquipmentLock(@NotNull EquipmentSlot slot, @NotNull LockType lockType);
 
@@ -316,7 +316,7 @@ public interface ArmorStand extends LivingEntity {
      *
      * @param slot the EquipmentSlot to test
      * @param lockType the LockType to test
-     * @return if the ArmnorStand has been locked with the parameters specified
+     * @return if the ArmorStand has been locked with the parameters specified
      */
     boolean hasEquipmentLock(@NotNull EquipmentSlot slot, @NotNull LockType lockType);
 

File: paper-api/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
Patch:
@@ -134,7 +134,7 @@ public boolean getKeepLevel() {
      * <p>
      * This overrides all other EXP settings
      * <p>
-     * <b>This doesn't prevent prevent the EXP from dropping.
+     * <b>This doesn't prevent the EXP from dropping.
      * {@link #setDroppedExp(int)} should be used stop the
      * EXP from dropping.</b>
      *
@@ -147,7 +147,7 @@ public void setKeepLevel(boolean keepLevel) {
     /**
      * Sets if the Player keeps inventory on death.
      * <p>
-     * <b>This doesn't prevent prevent the items from dropping.
+     * <b>This doesn't prevent the items from dropping.
      * {@code getDrops().clear()} should be used stop the
      * items from dropping.</b>
      *

File: paper-api/src/main/java/org/bukkit/plugin/ServicesManager.java
Patch:
@@ -49,7 +49,7 @@ public interface ServicesManager {
     public void unregister(@NotNull Object provider);
 
     /**
-     * Queries for a provider. This may return if no provider has been
+     * Queries for a provider. This may return null if no provider has been
      * registered for a service. The highest priority provider is returned.
      *
      * @param <T> The service interface
@@ -60,7 +60,7 @@ public interface ServicesManager {
     public <T> T load(@NotNull Class<T> service);
 
     /**
-     * Queries for a provider registration. This may return if no provider
+     * Queries for a provider registration. This may return null if no provider
      * has been registered for a service.
      *
      * @param <T> The service interface

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -1031,7 +1031,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Set the clear weather duration.
      *
      * The clear weather ticks determine whether or not the world will be
-     * allowed to rain or storm. If clear weather ticks are > 0, the world will
+     * allowed to rain or storm. If clear weather ticks are &gt; 0, the world will
      * not naturally do either until the duration has elapsed.
      *
      * This method is equivalent to calling {@code /weather clear} with a set

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryType.java
Patch:
@@ -84,7 +84,7 @@ public enum InventoryType {
     /**
      * A smithing inventory, with 2 CRAFTING slots and 1 RESULT slot
      */
-    SMITHING(3, "Smithing"),
+    SMITHING(3, "Upgrade Gear"),
     /**
      * A beacon inventory, with 1 CRAFTING slot
      */

File: paper-api/src/main/java/org/bukkit/util/BoundingBox.java
Patch:
@@ -844,12 +844,14 @@ public RayTraceResult rayTrace(@NotNull Vector start, @NotNull Vector direction,
         double startZ = start.getZ();
 
         // ray direction:
-        Vector dir = direction.clone().normalize();
+        Vector dir = direction.clone().normalizeZeros().normalize();
         double dirX = dir.getX();
         double dirY = dir.getY();
         double dirZ = dir.getZ();
 
         // saving a few divisions below:
+        // Note: If one of the direction vector components is 0.0, these
+        // divisions result in infinity. But this is not a problem.
         double divX = 1.0D / dirX;
         double divY = 1.0D / dirY;
         double divZ = 1.0D / dirZ;

File: paper-api/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
Patch:
@@ -21,7 +21,7 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable {
     private final Block ignitingBlock;
     private boolean cancel;
 
-    public BlockIgniteEvent(@NotNull final Block theBlock, @NotNull final IgniteCause cause, @NotNull final Entity ignitingEntity) {
+    public BlockIgniteEvent(@NotNull final Block theBlock, @NotNull final IgniteCause cause, @Nullable final Entity ignitingEntity) {
         this(theBlock, cause, ignitingEntity, null);
     }
 

File: paper-api/src/main/java/org/bukkit/block/data/MultipleFacing.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * This class encompasses the 'north', 'east', 'south', 'west', 'up', 'down'
@@ -29,7 +28,7 @@ public interface MultipleFacing extends BlockData {
      * @param face to set
      * @param has the face
      */
-    void setFace(@Nullable BlockFace face, boolean has);
+    void setFace(@NotNull BlockFace face, boolean has);
 
     /**
      * Get all of the faces which are enabled on this block.

File: paper-api/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
Patch:
@@ -106,7 +106,8 @@ Class<?> findClass(@NotNull String name, boolean checkGlobal) throws ClassNotFou
                 if (result != null) {
                     JavaPlugin provider = ((PluginClassLoader) result.getClassLoader()).plugin;
 
-                    if (!description.getDepend().contains(provider.getName())
+                    if (provider != plugin
+                            && !description.getDepend().contains(provider.getName())
                             && !description.getSoftDepend().contains(provider.getName())
                             && !provider.getDescription().getLoadBefore().contains(description.getName())) {
 

File: paper-api/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
Patch:
@@ -149,9 +149,9 @@ Class<?> findClass(@NotNull String name, boolean checkGlobal) throws ClassNotFou
                 if (result != null) {
                     loader.setClass(name, result);
                 }
-            }
 
-            classes.put(name, result);
+                classes.put(name, result);
+            }
         }
 
         return result;

File: paper-api/src/main/java/org/bukkit/material/FlowerPot.java
Patch:
@@ -7,8 +7,8 @@
 /**
  * Represents a flower pot.
  *
- * @deprecated Flower pots are now tile entities, use
- * {@link org.bukkit.block.FlowerPot}.
+ * @deprecated all usage of MaterialData is deprecated and subject to removal.
+ * Use {@link org.bukkit.block.data.BlockData}.
  */
 @Deprecated
 public class FlowerPot extends MaterialData {

File: paper-api/src/main/java/org/bukkit/entity/Firework.java
Patch:
@@ -40,7 +40,7 @@ public interface Firework extends Entity {
      *
      * A firework which was not shot at an angle will fly straight upwards.
      *
-     * @param shotAtAngle
+     * @param shotAtAngle the new shotAtAngle
      */
     void setShotAtAngle(boolean shotAtAngle);
 }

File: paper-api/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
Patch:
@@ -70,8 +70,8 @@ public int getCost() {
     }
 
     /**
-     * Sets the the cost (minimum level) which is displayed as a number on the
-     * right hand side of the enchantment offer.
+     * Sets the cost (minimum level) which is displayed as a number on the right
+     * hand side of the enchantment offer.
      *
      * @param cost cost for this enchantment
      */

File: paper-api/src/main/java/org/bukkit/entity/Damageable.java
Patch:
@@ -41,7 +41,7 @@ public interface Damageable extends Entity {
     void setHealth(double health);
 
     /**
-     * Sets the entity's absorption amount.
+     * Gets the entity's absorption amount.
      *
      * @return absorption amount from 0
      */

File: paper-api/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
Patch:
@@ -79,8 +79,8 @@ public int getExpLevelCost() {
     }
 
     /**
-     * Sets the the cost (minimum level) which is displayed as a number on the
-     * right hand side of the enchantment offer.
+     * Sets the cost (minimum level) which is displayed as a number on the right
+     * hand side of the enchantment offer.
      *
      * @param level - cost in levels
      */

File: paper-api/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
Patch:
@@ -109,9 +109,6 @@ public enum TargetReason {
         PIG_ZOMBIE_TARGET,
         /**
          * When the target is forgotten for whatever reason.
-         * <p>
-         * Currently only occurs in with spiders when there is a high
-         * brightness.
          */
         FORGOT_TARGET,
         /**

File: paper-api/src/main/java/org/bukkit/Chunk.java
Patch:
@@ -143,7 +143,7 @@ public interface Chunk {
      * <p>
      * A force loaded chunk will not be unloaded due to lack of player activity.
      *
-     * @param forced
+     * @param forced force load status
      * @see World#setChunkForceLoaded(int, int, boolean)
      */
     void setForceLoaded(boolean forced);

File: paper-api/src/main/java/org/bukkit/NamespacedKey.java
Patch:
@@ -39,8 +39,8 @@ public final class NamespacedKey {
     /**
      * Create a key in a specific namespace.
      *
-     * @param namespace
-     * @param key
+     * @param namespace namespace
+     * @param key key
      * @deprecated should never be used by plugins, for internal use only!!
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/AbstractHorse.java
Patch:
@@ -25,7 +25,7 @@ public interface AbstractHorse extends Animals, Vehicle, InventoryHolder, Tameab
     public Horse.Variant getVariant();
 
     /**
-     * @param variant
+     * @param variant variant
      * @deprecated you are required to spawn a different entity
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/AreaEffectCloud.java
Patch:
@@ -138,6 +138,7 @@ public interface AreaEffectCloud extends Entity {
     /**
      * Sets the particle which this cloud will be composed of
      *
+     * @param <T> type of particle data (see {@link Particle#getDataType()}
      * @param particle the new particle type
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}

File: paper-api/src/main/java/org/bukkit/entity/Guardian.java
Patch:
@@ -12,7 +12,7 @@ public interface Guardian extends Monster {
     public boolean isElder();
 
     /**
-     * @param shouldBeElder
+     * @param shouldBeElder shouldBeElder
      * @deprecated Must spawn a new {@link ElderGuardian}.
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/Horse.java
Patch:
@@ -154,7 +154,7 @@ public enum Style {
     public boolean isCarryingChest();
 
     /**
-     * @param chest
+     * @param chest chest
      * @deprecated see {@link ChestedHorse}
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/Skeleton.java
Patch:
@@ -19,6 +19,7 @@ public interface Skeleton extends Monster {
     public SkeletonType getSkeletonType();
 
     /**
+     * @param type type
      * @deprecated Must spawn a new subtype variant
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/Zombie.java
Patch:
@@ -32,15 +32,15 @@ public interface Zombie extends Monster {
     public boolean isVillager();
 
     /**
-     * @param flag
+     * @param flag flag
      * @deprecated must spawn {@link ZombieVillager}.
      */
     @Deprecated
     @Contract("_ -> fail")
     public void setVillager(boolean flag);
 
     /**
-     * @param profession
+     * @param profession profession
      * @see ZombieVillager#getVillagerProfession()
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/inventory/ItemFactory.java
Patch:
@@ -132,10 +132,10 @@ public interface ItemFactory {
      * Apply a material change for an item meta. Do not use under any
      * circumstances.
      *
-     * @param meta
-     * @param material
+     * @param meta meta
+     * @param material material
      * @return updated material
-     * @throws IllegalArgumentException
+     * @throws IllegalArgumentException if bad material or data
      * @deprecated for internal use only
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/inventory/Merchant.java
Patch:
@@ -34,7 +34,7 @@ public interface Merchant {
      *
      * @param i the index
      * @return the recipe
-     * @throws IndexOutOfBoundsException
+     * @throws IndexOutOfBoundsException if recipe index out of bounds
      */
     @NotNull
     MerchantRecipe getRecipe(int i) throws IndexOutOfBoundsException;
@@ -44,7 +44,7 @@ public interface Merchant {
      *
      * @param i the index
      * @param recipe the recipe
-     * @throws IndexOutOfBoundsException
+     * @throws IndexOutOfBoundsException if recipe index out of bounds
      */
     void setRecipe(int i, @NotNull MerchantRecipe recipe) throws IndexOutOfBoundsException;
 

File: paper-api/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
Patch:
@@ -27,7 +27,7 @@ public interface CrossbowMeta extends ItemMeta {
      *
      * Removes all projectiles when given null.
      *
-     * @param projectiles
+     * @param projectiles the projectiles to set
      * @throws IllegalArgumentException if one of the projectiles is not an
      * arrow or firework rocket
      */

File: paper-api/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
Patch:
@@ -379,7 +379,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
     /**
      * Internal use only! Do not use under any circumstances!
      *
-     * @param version
+     * @param version version
      * @deprecated
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
Patch:
@@ -11,7 +11,7 @@
  * different complex types. This may be useful for the likes of a
  * UUIDItemTagType:
  * <pre>
- * <code>{@code
+ * {@code
  * public class UUIDItemTagType implements ItemTagType<byte[], UUID> {
  *
  *         {@literal @Override}
@@ -39,7 +39,7 @@
  *             long secondLong = bb.getLong();
  *             return new UUID(firstLong, secondLong);
  *         }
- *     }}</code></pre>
+ *     }}</pre>
  *
  * @param <T> the primary object type that is stored in the given tag
  * @param <Z> the retrieved object type when applying this item tag type

File: paper-api/src/main/java/org/bukkit/persistence/PersistentDataType.java
Patch:
@@ -10,7 +10,7 @@
  * {@link PersistentDataType} with different complex types. This may be useful
  * for the likes of a UUIDTagType:
  * <pre>
- * <code>{@code
+ * {@code
  * public class UUIDTagType implements PersistentDataType<byte[], UUID> {
  *
  *         {@literal @Override}
@@ -38,7 +38,7 @@
  *             long secondLong = bb.getLong();
  *             return new UUID(firstLong, secondLong);
  *         }
- *     }}</code></pre>
+ *     }}</pre>
  *
  * @param <T> the primary object type that is stored in the given tag
  * @param <Z> the retrieved object type when applying this tag type

File: paper-api/src/main/java/org/bukkit/potion/PotionBrewer.java
Patch:
@@ -37,6 +37,8 @@ public interface PotionBrewer {
      * a potion with the given type.
      *
      * @param type The type of the potion
+     * @param upgraded Whether the potion is upgraded
+     * @param extended Whether the potion is extended
      * @return The list of effects
      */
     @NotNull

File: paper-api/src/main/java/org/bukkit/NamespacedKey.java
Patch:
@@ -72,7 +72,7 @@ public NamespacedKey(@NotNull Plugin plugin, @NotNull String key) {
         Preconditions.checkArgument(key != null, "Key cannot be null");
 
         this.namespace = plugin.getName().toLowerCase(Locale.ROOT);
-        this.key = key.toLowerCase().toLowerCase(Locale.ROOT);
+        this.key = key.toLowerCase(Locale.ROOT);
 
         // Check validity after normalization
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", this.namespace);

File: paper-api/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
Patch:
@@ -29,7 +29,7 @@ public interface CrossbowMeta extends ItemMeta {
      *
      * @param projectiles
      * @throws IllegalArgumentException if one of the projectiles is not an
-     * arrow
+     * arrow or firework rocket
      */
     void setChargedProjectiles(@Nullable List<ItemStack> projectiles);
 

File: paper-api/src/main/java/org/bukkit/entity/Villager.java
Patch:
@@ -86,7 +86,7 @@ public enum Type implements Keyed {
         JUNGLE,
         PLAINS,
         SAVANNA,
-        SNOWY,
+        SNOW,
         SWAMP,
         TAIGA;
         private final NamespacedKey key;

File: paper-api/src/main/java/org/bukkit/entity/Villager.java
Patch:
@@ -43,7 +43,7 @@ public interface Villager extends AbstractVillager {
     /**
      * Gets the level of this villager.
      *
-     * A villager with a level <= 1 and no experience is liable to lose its
+     * A villager with a level &lt;= 1 and no experience is liable to lose its
      * profession.
      *
      * @return this villager's level
@@ -53,7 +53,7 @@ public interface Villager extends AbstractVillager {
     /**
      * Sets the level of this villager.
      *
-     * A villager with a level <= 1 and no experience is liable to lose its
+     * A villager with a level &lt;= 1 and no experience is liable to lose its
      * profession.
      *
      * @param level the new level
@@ -72,7 +72,7 @@ public interface Villager extends AbstractVillager {
      * Sets the trading experience of this villager.
      *
      * @param experience new experience
-     * @throws IllegalArgumentException if experience < 0
+     * @throws IllegalArgumentException if experience &lt; 0
      */
     public void setVillagerExperience(int experience);
 

File: paper-api/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
Patch:
@@ -74,7 +74,7 @@ public enum CreateReason {
          */
         FIRE,
         /**
-         * When a nether portal frame and portal is created at the exist of an
+         * When a nether portal frame and portal is created at the exit of an
          * entered nether portal.
          */
         NETHER_PAIR,

File: paper-api/src/main/java/org/bukkit/inventory/CookingRecipe.java
Patch:
@@ -42,6 +42,7 @@ public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @Not
      * @param cookingTime The cooking time (in ticks)
      */
     public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
         this.ingredient = input;

File: paper-api/src/main/java/org/bukkit/inventory/ShapedRecipe.java
Patch:
@@ -23,6 +23,7 @@ public class ShapedRecipe implements Recipe, Keyed {
 
     @Deprecated
     public ShapedRecipe(@NotNull ItemStack result) {
+        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = NamespacedKey.randomKey();
         this.output = new ItemStack(result);
     }
@@ -41,6 +42,7 @@ public ShapedRecipe(@NotNull ItemStack result) {
      */
     public ShapedRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
         Preconditions.checkArgument(key != null, "key");
+        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
 
         this.key = key;
         this.output = new ItemStack(result);

File: paper-api/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
Patch:
@@ -24,6 +24,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
 
     @Deprecated
     public ShapelessRecipe(@NotNull ItemStack result) {
+        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = NamespacedKey.randomKey();
         this.output = new ItemStack(result);
     }
@@ -43,6 +44,7 @@ public ShapelessRecipe(@NotNull ItemStack result) {
      * @see ShapelessRecipe#addIngredient(int,Material,int)
      */
     public ShapelessRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
+        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
     }

File: paper-api/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
Patch:
@@ -35,6 +35,7 @@ public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result,
      * @param input The input choices.
      */
     public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input) {
+        Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
         this.ingredient = input;

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -353,7 +353,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @return Arrow entity spawned as a result of this method
      */
     @NotNull
-    public AbstractArrow spawnArrow(@NotNull Location location, @NotNull Vector direction, float speed, float spread);
+    public Arrow spawnArrow(@NotNull Location location, @NotNull Vector direction, float speed, float spread);
 
     /**
      * Creates an arrow entity of the given class at the given {@link Location}

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -370,7 +370,7 @@ public Command setAliases(@NotNull List<String> aliases) {
      */
     @NotNull
     public Command setDescription(@NotNull String description) {
-        this.description = description == null ? "" : "";
+        this.description = (description == null) ? "" : description;
         return this;
     }
 

File: paper-api/src/test/java/org/bukkit/event/SyntheticEventTest.java
Patch:
@@ -34,7 +34,6 @@ public static abstract class Base<E extends Event> implements Listener {
         int callCount = 0;
 
         public void accept(E evt) {
-            System.out.println("Invk " + evt);
             callCount++;
         }
     }

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -54,8 +55,8 @@ public SimplePluginManager(Server instance, SimpleCommandMap commandMap) {
         server = instance;
         this.commandMap = commandMap;
 
-        defaultPerms.put(true, new HashSet<Permission>());
-        defaultPerms.put(false, new HashSet<Permission>());
+        defaultPerms.put(true, new LinkedHashSet<Permission>());
+        defaultPerms.put(false, new LinkedHashSet<Permission>());
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/potion/PotionEffectType.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.potion;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -303,11 +304,11 @@ public static void stopAcceptingRegistrations() {
 
     /**
      * Returns an array of all the registered {@link PotionEffectType}s.
-     * This array is not necessarily in any particular order and may contain null.
+     * This array is not necessarily in any particular order.
      *
      * @return Array of types.
      */
     public static PotionEffectType[] values() {
-        return byId.clone();
+        return Arrays.copyOfRange(byId, 1, byId.length);
     }
 }

File: paper-api/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
Patch:
@@ -64,7 +64,7 @@ public interface BukkitScheduler {
     public int scheduleSyncRepeatingTask(Plugin plugin, Runnable task, long delay, long period);
 
     /**
-     * @deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}     *
+     * @deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}
      * @param plugin Plugin that owns the task
      * @param task Task to be executed
      * @param delay Delay in server ticks before executing first repeat

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -257,7 +257,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @param safe Controls whether to queue the chunk when players are nearby
      * @return Whether the chunk was actually queued
+     * @deprecated it is never safe to remove a chunk in use
      */
+    @Deprecated
     public boolean unloadChunkRequest(int x, int z, boolean safe);
 
     /**

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -178,7 +178,7 @@ public boolean testPermission(CommandSender target) {
         }
 
         if (permissionMessage == null) {
-            target.sendMessage(ChatColor.RED + "I'm sorry, but you do not have permission to perform this command. Please contact the server administrators if you believe that this is in error.");
+            target.sendMessage(ChatColor.RED + "I'm sorry, but you do not have permission to perform this command. Please contact the server administrators if you believe that this is a mistake.");
         } else if (permissionMessage.length() != 0) {
             for (String line : permissionMessage.replace("<permission>", permission).split("\n")) {
                 target.sendMessage(line);

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -3266,8 +3266,8 @@ public boolean isBlock() {
             case DARK_PRISMARINE_SLAB:
             case DARK_PRISMARINE_STAIRS:
             case DAYLIGHT_DETECTOR:
-            case DEAD_BRAIN_CORAL_BLOCK:
             case DEAD_BRAIN_CORAL:
+            case DEAD_BRAIN_CORAL_BLOCK:
             case DEAD_BRAIN_CORAL_FAN:
             case DEAD_BRAIN_CORAL_WALL_FAN:
             case DEAD_BUBBLE_CORAL:
@@ -3730,7 +3730,6 @@ public boolean isEdible() {
             case CARROT:
             case CHICKEN:
             case CHORUS_FRUIT:
-            case TROPICAL_FISH:
             case COD:
             case COOKED_BEEF:
             case COOKED_CHICKEN:
@@ -3757,6 +3756,7 @@ public boolean isEdible() {
             case ROTTEN_FLESH:
             case SALMON:
             case SPIDER_EYE:
+            case TROPICAL_FISH:
             // ----- Legacy Separator -----
             case LEGACY_BREAD:
             case LEGACY_CARROT_ITEM:

File: paper-api/src/main/java/org/bukkit/block/data/type/TechnicalPiston.java
Patch:
@@ -11,14 +11,14 @@ public interface TechnicalPiston extends Directional {
     /**
      * Gets the value of the 'type' property.
      *
-     * @return the 'stage' value
+     * @return the 'type' value
      */
     Type getType();
 
     /**
      * Sets the value of the 'type' property.
      *
-     * @param type the new ''type value
+     * @param type the new 'type' value
      */
     void setType(Type type);
 

File: paper-api/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
Patch:
@@ -23,9 +23,6 @@
  * AIR in most cases. Use #getBlockData() for more Information about the broken
  * block.
  *
- * <b>Note this event may not currently fire for some drops associated with tile
- * entities</b>
- *
  * @deprecated draft API
  */
 @Deprecated

File: paper-api/src/main/java/org/bukkit/StructureType.java
Patch:
@@ -149,7 +149,7 @@ public class StructureType {
      * <i>mapIcon</i>.
      *
      * @param name the name of the structure, case-sensitive
-     * @param mapIcon the {@link MapCursor.Type} this structure type should use
+     * @param mapIcon the {@link org.bukkit.map.MapCursor.Type} this structure type should use
      * when creating explorer maps. Use null to indicate this structure should
      * not be compatible with explorer maps.
      */
@@ -170,10 +170,10 @@ public String getName() {
     }
 
     /**
-     * Get the {@link MapCursor.Type} that this structure can use on maps. If
+     * Get the {@link org.bukkit.map.MapCursor.Type} that this structure can use on maps. If
      * this is null, this structure will not appear on explorer maps.
      *
-     * @return the {@link MapCursor.Type} or null.
+     * @return the {@link org.bukkit.map.MapCursor.Type} or null.
      */
     public MapCursor.Type getMapIcon() {
         return mapCursor;

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
Patch:
@@ -29,14 +29,14 @@ public HumanEntity getWhoClicked() {
      * event is considered cancelled.
      *
      * @see #isCancelled()
-     * @param newResult the new {@link Result} for this event
+     * @param newResult the new {@link org.bukkit.event.Event.Result} for this event
      */
     public void setResult(Result newResult) {
         result = newResult;
     }
 
     /**
-     * Gets the {@link Result} of this event. The Result describes the
+     * Gets the {@link org.bukkit.event.Event.Result} of this event. The Result describes the
      * behavior that will be applied to the inventory in relation to this
      * event.
      *

File: paper-api/src/main/java/org/bukkit/block/Banner.java
Patch:
@@ -18,7 +18,9 @@ public interface Banner extends BlockState {
     DyeColor getBaseColor();
 
     /**
-     * Sets the base color for this banner
+     * Sets the base color for this banner.
+     * <b>Only valid for shield pseudo banners, otherwise base depends on block
+     * type</b>
      *
      * @param color the base color
      */

File: paper-api/src/main/java/org/bukkit/enchantments/Enchantment.java
Patch:
@@ -171,7 +171,7 @@ public abstract class Enchantment implements Keyed {
      * Strikes lightning when a mob is hit with a trident if conditions are
      * stormy
      */
-    public static final Enchantment CHANNELING = new EnchantmentWrapper("chanelling");
+    public static final Enchantment CHANNELING = new EnchantmentWrapper("channeling");
 
     /**
      * Allows mending the item using experience orbs

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryType.java
Patch:
@@ -70,7 +70,7 @@ public enum InventoryType {
     /**
      * The merchant inventory, with 2 TRADE-IN slots, and 1 RESULT slot.
      */
-    MERCHANT(3,"Villager"),
+    MERCHANT(3,"Villager", false),
     /**
      * The ender chest inventory, with 27 slots.
      */

File: paper-api/src/main/java/org/bukkit/UnsafeValues.java
Patch:
@@ -31,7 +31,7 @@ public interface UnsafeValues {
 
     void checkSupported(PluginDescriptionFile pdf);
 
-    byte[] processClass(PluginDescriptionFile pdf, byte[] clazz);
+    byte[] processClass(PluginDescriptionFile pdf, String path, byte[] clazz);
 
     /**
      * Load an advancement represented by the specified string into the server.

File: paper-api/src/main/java/org/bukkit/potion/PotionEffectType.java
Patch:
@@ -160,7 +160,7 @@ public abstract class PotionEffectType {
     /**
      * Squee'ek uh'k kk'kkkk squeek eee'eek.
      */
-    public static final PotionEffectType DOLPHINS_GRACE = new PotionEffectTypeWrapper(29);
+    public static final PotionEffectType DOLPHINS_GRACE = new PotionEffectTypeWrapper(30);
 
     private final int id;
 

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -254,7 +254,8 @@ public boolean isSimilar(ItemStack stack) {
         if (stack == this) {
             return true;
         }
-        return getType()== stack.getType()&& getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()) : true);
+        Material comparisonType = Bukkit.getUnsafe().fromLegacy(this.getType()); // This may be called from legacy item stacks, try to get the right material
+        return comparisonType == stack.getType() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()) : true);
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/NamespacedKey.java
Patch:
@@ -68,8 +68,8 @@ public NamespacedKey(Plugin plugin, String key) {
         this.key = key.toLowerCase().toLowerCase(Locale.ROOT);
 
         // Check validity after normalization
-        Preconditions.checkArgument(VALID_NAMESPACE.matcher(namespace).matches(), "namespace");
-        Preconditions.checkArgument(VALID_KEY.matcher(key).matches(), "key");
+        Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), "namespace");
+        Preconditions.checkArgument(VALID_KEY.matcher(this.key).matches(), "key");
 
         String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedKey must be less than 256 characters (%s)", string);

File: paper-api/src/main/java/org/bukkit/block/CreatureSpawner.java
Patch:
@@ -81,7 +81,7 @@ public interface CreatureSpawner extends BlockState {
     public void setMinSpawnDelay(int delay);
 
     /**
-     * This maximum spawn delay amount (in ticks).
+     * The maximum spawn delay amount (in ticks).
      * <br>
      * This value is used when the spawner resets its delay (for any reason).
      * It will choose a random number between {@link #getMinSpawnDelay()}

File: paper-api/src/main/java/org/bukkit/advancement/AdvancementProgress.java
Patch:
@@ -41,7 +41,7 @@ public interface AdvancementProgress {
     boolean revokeCriteria(String criteria);
 
     /**
-     * Get the date the specified critera was awarded.
+     * Get the date the specified criteria was awarded.
      *
      * @param criteria the criteria to check
      * @return date awarded or null if unawarded or criteria does not exist

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -261,7 +261,7 @@ public boolean register(CommandMap commandMap) {
      * outstanding changes
      *
      * @param commandMap the CommandMap to unregister
-     * @return true if the unregistration was successfull (the current
+     * @return true if the unregistration was successful (the current
      *     registered CommandMap was the passed CommandMap or null) false
      *     otherwise
      */

File: paper-api/src/main/java/org/bukkit/entity/EnderDragon.java
Patch:
@@ -15,7 +15,7 @@ enum Phase {
          */
         CIRCLING,
         /**
-         * The dragon will fly towards a targetted player and shoot a
+         * The dragon will fly towards a targeted player and shoot a
          * fireball when within 64 blocks.
          */
         STRAFING,

File: paper-api/src/main/java/org/bukkit/entity/Enderman.java
Patch:
@@ -15,7 +15,7 @@ public interface Enderman extends Monster {
     public MaterialData getCarriedMaterial();
 
     /**
-     * Set the id and data of the block that the Enderman is carring.
+     * Set the id and data of the block that the Enderman is carrying.
      *
      * @param material data to set the carried block to
      */

File: paper-api/src/main/java/org/bukkit/entity/Entity.java
Patch:
@@ -49,7 +49,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable {
     /**
      * Gets this entity's current velocity
      *
-     * @return Current travelling velocity of this entity
+     * @return Current traveling velocity of this entity
      */
     public Vector getVelocity();
 

File: paper-api/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
Patch:
@@ -55,7 +55,7 @@ public void setItemStack(ItemStack itemStack) {
     /**
      * Return the block clicked
      *
-     * @return the blicked block
+     * @return the clicked block
      */
     public Block getBlockClicked() {
         return blockClicked;

File: paper-api/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
Patch:
@@ -57,7 +57,7 @@ public enum TeleportCause {
         END_PORTAL,
         /**
          * Indicates the teleportation was caused by a player teleporting to a
-         * Entity/Player via the specatator menu
+         * Entity/Player via the spectator menu
          */
         SPECTATE,
         /**

File: paper-api/src/main/java/org/bukkit/event/server/RemoteServerCommandEvent.java
Patch:
@@ -4,7 +4,7 @@
 import org.bukkit.event.HandlerList;
 
 /**
- * This event is called when a command is recieved over RCON. See the javadocs
+ * This event is called when a command is received over RCON. See the javadocs
  * of {@link ServerCommandEvent} for more information.
  */
 public class RemoteServerCommandEvent extends ServerCommandEvent {

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -84,7 +84,7 @@ public ItemStack(final int type, final int amount, final short damage) {
     }
 
     /**
-     * An item stack with the specified damage / durabiltiy
+     * An item stack with the specified damage / durability
      *
      * @param type item material
      * @param amount stack size

File: paper-api/src/main/java/org/bukkit/material/TexturedMaterial.java
Patch:
@@ -97,7 +97,7 @@ protected int getTextureIndex() {
      */
     @Deprecated
     protected void setTextureIndex(int idx) {
-        setData((byte) idx); // Defult to using all bits - override for other mappings
+        setData((byte) idx); // Default to using all bits - override for other mappings
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -113,7 +113,7 @@ public interface Plugin extends TabExecutor {
     /**
      * Called after a plugin is loaded but before it has been enabled.
      * <p>
-     * When mulitple plugins are loaded, the onLoad() for all plugins is
+     * When multiple plugins are loaded, the onLoad() for all plugins is
      * called before any onEnable() is called.
      */
     public void onLoad();

File: paper-api/src/main/java/org/bukkit/scoreboard/Team.java
Patch:
@@ -136,7 +136,7 @@ public interface Team {
     /**
      * Gets the team's ability to see name tags
      *
-     * @return the current name tag visibilty for the team
+     * @return the current name tag visibility for the team
      * @throws IllegalArgumentException if this team has been unregistered
      * @deprecated see {@link #getOption(org.bukkit.scoreboard.Team.Option)}
      */

File: paper-api/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Generates noise using the "classic" perlin generator
  *
- * @see SimplexNoiseGenerator "Improved" and faster version with slighly
+ * @see SimplexNoiseGenerator "Improved" and faster version with slightly
  *     different results
  */
 public class PerlinNoiseGenerator extends NoiseGenerator {

File: paper-api/src/main/java/org/bukkit/NamespacedKey.java
Patch:
@@ -17,7 +17,7 @@ public final class NamespacedKey {
     public static final String MINECRAFT = "minecraft";
     /**
      * The namespace representing all keys generated by Bukkit for backwards
-     * compatability measures.
+     * compatibility measures.
      */
     public static final String BUKKIT = "bukkit";
     //

File: paper-api/src/main/java/org/bukkit/command/PluginCommand.java
Patch:
@@ -33,7 +33,7 @@ public boolean execute(CommandSender sender, String commandLabel, String[] args)
         boolean success = false;
 
         if (!owningPlugin.isEnabled()) {
-            return false;
+            throw new CommandException("Cannot execute command '" + commandLabel + "' in plugin " + owningPlugin.getDescription().getFullName() + " - plugin is disabled.");
         }
 
         if (!testPermission(sender)) {

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -261,7 +261,7 @@ public enum EntityType {
      * Like {@link #ARROW} but tipped with a specific potion which is applied on
      * contact.
      */
-    TIPPED_ARROW("TippedArrow", TippedArrow.class, -1),
+    TIPPED_ARROW(null, TippedArrow.class, -1),
     /**
      * An unknown entity without an Entity Class
      */

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -188,7 +188,7 @@ public enum EntityType {
     /**
      * @see PoweredMinecart
      */
-    MINECART_FURNACE("chest_minecart", PoweredMinecart.class, 44),
+    MINECART_FURNACE("furnace_minecart", PoweredMinecart.class, 44),
     /**
      * @see ExplosiveMinecart
      */

File: paper-api/src/main/java/org/bukkit/Effect.java
Patch:
@@ -204,7 +204,7 @@ public enum Effect {
     private static final Map<Integer, Effect> BY_ID = Maps.newHashMap();
 
     Effect(int id, Type type) {
-        this(id,type,null);
+        this(id, type, null);
     }
 
     Effect(int id, Type type, Class<?> data) {

File: paper-api/src/main/java/org/bukkit/FireworkEffect.java
Patch:
@@ -145,7 +145,7 @@ public Builder withColor(Color color) throws IllegalArgumentException {
          * @throws IllegalArgumentException If any color is null (may be
          *     thrown after changes have occurred)
          */
-        public Builder withColor(Color...colors) throws IllegalArgumentException {
+        public Builder withColor(Color... colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -214,7 +214,7 @@ public Builder withFade(Color color) throws IllegalArgumentException {
          * @throws IllegalArgumentException If any color is null (may be
          *     thrown after changes have occurred)
          */
-        public Builder withFade(Color...colors) throws IllegalArgumentException {
+        public Builder withFade(Color... colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;

File: paper-api/src/main/java/org/bukkit/Rotation.java
Patch:
@@ -41,7 +41,7 @@ public enum Rotation {
     COUNTER_CLOCKWISE_45
     ;
 
-    private static final Rotation [] rotations = values();
+    private static final Rotation[] rotations = values();
 
     /**
      * Rotate clockwise by 90 degrees.

File: paper-api/src/main/java/org/bukkit/Server.java
Patch:
@@ -918,7 +918,7 @@ public interface Server extends PluginMessageRecipient {
      * @param flags an optional list of flags to set on the boss bar
      * @return the created boss bar
      */
-    BossBar createBossBar(String title, BarColor color, BarStyle style, BarFlag ...flags);
+    BossBar createBossBar(String title, BarColor color, BarStyle style, BarFlag... flags);
 
     /**
      * Gets an entity on the server by its UUID

File: paper-api/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
Patch:
@@ -46,7 +46,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             for (HandlerList handlerList : HandlerList.getHandlerLists()) {
                 for (RegisteredListener listener : handlerList.getRegisteredListeners()) {
                     if (listener instanceof TimedRegisteredListener) {
-                        ((TimedRegisteredListener)listener).reset();
+                        ((TimedRegisteredListener) listener).reset();
                     }
                 }
             }

File: paper-api/src/main/java/org/bukkit/configuration/MemorySection.java
Patch:
@@ -181,7 +181,7 @@ public void set(String path, Object value) {
             ConfigurationSection subSection = section.getConfigurationSection(node);
             if (subSection == null) {
                 if (value == null) {
-                	// no need to create missing sub-sections if we want to remove the value:
+                    // no need to create missing sub-sections if we want to remove the value:
                     return;
                 }
                 section = section.createSection(node);

File: paper-api/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.Reader;
 import java.util.Map;
 import java.util.logging.Level;
@@ -181,7 +180,7 @@ public static YamlConfiguration loadConfiguration(File file) {
         } catch (IOException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
         } catch (InvalidConfigurationException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file , ex);
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
         }
 
         return config;

File: paper-api/src/main/java/org/bukkit/conversations/BooleanPrompt.java
Patch:
@@ -7,7 +7,7 @@
  * BooleanPrompt is the base class for any prompt that requires a boolean
  * response from the user.
  */
-public abstract class BooleanPrompt extends ValidatingPrompt{
+public abstract class BooleanPrompt extends ValidatingPrompt {
 
     public BooleanPrompt() {
         super();

File: paper-api/src/main/java/org/bukkit/conversations/Conversation.java
Patch:
@@ -217,7 +217,7 @@ public void acceptInput(String input) {
             }
 
             // Test for conversation abandonment based on input
-            for(ConversationCanceller canceller : cancellers) {
+            for (ConversationCanceller canceller : cancellers) {
                 if (canceller.cancelBasedOnInput(context, input)) {
                     abandon(new ConversationAbandonedEvent(this, canceller));
                     return;

File: paper-api/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.conversations;
 
-import org.bukkit.Server;
 import org.bukkit.plugin.Plugin;
 
 /**
@@ -48,7 +47,7 @@ private void startTimer() {
             public void run() {
                 if (conversation.getState() == Conversation.ConversationState.UNSTARTED) {
                     startTimer();
-                } else if (conversation.getState() ==  Conversation.ConversationState.STARTED) {
+                } else if (conversation.getState() == Conversation.ConversationState.STARTED) {
                     cancelling(conversation);
                     conversation.abandon(new ConversationAbandonedEvent(conversation, InactivityConversationCanceller.this));
                 }

File: paper-api/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
Patch:
@@ -5,7 +5,7 @@
  * ConversationAbandonedEvent} to indicate that the conversation was manually
  * abandoned by programmatically calling the abandon() method on it.
  */
-public class ManuallyAbandonedConversationCanceller implements ConversationCanceller{
+public class ManuallyAbandonedConversationCanceller implements ConversationCanceller {
     public void setConversation(Conversation conversation) {
         throw new UnsupportedOperationException();
     }

File: paper-api/src/main/java/org/bukkit/conversations/MessagePrompt.java
Patch:
@@ -4,7 +4,7 @@
  * MessagePrompt is the base class for any prompt that only displays a message
  * to the user and requires no input.
  */
-public abstract class MessagePrompt implements Prompt{
+public abstract class MessagePrompt implements Prompt {
 
     public MessagePrompt() {
         super();

File: paper-api/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
Patch:
@@ -1,12 +1,10 @@
 package org.bukkit.conversations;
 
-import org.bukkit.command.CommandSender;
-
 /**
  * NullConversationPrefix is a {@link ConversationPrefix} implementation that
  * displays nothing in front of conversation output.
  */
-public class NullConversationPrefix implements ConversationPrefix{
+public class NullConversationPrefix implements ConversationPrefix {
 
     /**
      * Prepends each conversation message with an empty string.

File: paper-api/src/main/java/org/bukkit/conversations/NumericPrompt.java
Patch:
@@ -6,7 +6,7 @@
  * NumericPrompt is the base class for any prompt that requires a {@link
  * Number} response from the user.
  */
-public abstract class NumericPrompt extends ValidatingPrompt{
+public abstract class NumericPrompt extends ValidatingPrompt {
     public NumericPrompt() {
         super();
     }
@@ -30,8 +30,7 @@ protected boolean isNumberValid(ConversationContext context, Number input) {
 
     @Override
     protected Prompt acceptValidatedInput(ConversationContext context, String input) {
-        try
-        {
+        try {
             return acceptValidatedInput(context, NumberUtils.createNumber(input));
         } catch (NumberFormatException e) {
             return acceptValidatedInput(context, NumberUtils.INTEGER_ZERO);

File: paper-api/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
Patch:
@@ -7,7 +7,7 @@
  * PlayerNamePrompt is the base class for any prompt that requires the player
  * to enter another player's name.
  */
-public abstract class PlayerNamePrompt extends ValidatingPrompt{
+public abstract class PlayerNamePrompt extends ValidatingPrompt {
     private Plugin plugin;
 
     public PlayerNamePrompt(Plugin plugin) {
@@ -18,7 +18,6 @@ public PlayerNamePrompt(Plugin plugin) {
     @Override
     protected boolean isInputValid(ConversationContext context, String input) {
         return plugin.getServer().getPlayer(input) != null;
-        
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/conversations/StringPrompt.java
Patch:
@@ -4,7 +4,7 @@
  * StringPrompt is the base class for any prompt that accepts an arbitrary
  * string from the user.
  */
-public abstract class StringPrompt implements Prompt{
+public abstract class StringPrompt implements Prompt {
 
     /**
      * Ensures that the prompt waits for the user to provide input.

File: paper-api/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
Patch:
@@ -122,7 +122,7 @@ public Set<Player> getRecipients() {
     }
 
     public boolean isCancelled() {
-        return cancel ;
+        return cancel;
     }
 
     public void setCancelled(boolean cancel) {

File: paper-api/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
Patch:
@@ -77,4 +77,4 @@ public boolean isCancelled() {
     public void setCancelled(boolean cancel) {
         this.cancelled = cancel;
     }
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
Patch:
@@ -23,7 +23,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     public PlayerEditBookEvent(Player who, int slot, BookMeta previousBookMeta, BookMeta newBookMeta, boolean isSigning) {
         super(who);
 
-        Validate.isTrue(slot >= 0 && slot <=8, "Slot must be in range 0-8 inclusive");
+        Validate.isTrue(slot >= 0 && slot <= 8, "Slot must be in range 0-8 inclusive");
         Validate.notNull(previousBookMeta, "Previous book meta must not be null");
         Validate.notNull(newBookMeta, "New book meta must not be null");
 

File: paper-api/src/main/java/org/bukkit/event/player/PlayerLevelChangeEvent.java
Patch:
@@ -12,9 +12,9 @@ public class PlayerLevelChangeEvent extends PlayerEvent {
     private final int newLevel;
 
     public PlayerLevelChangeEvent(final Player player, final int oldLevel, final int newLevel) {
-         super(player);
-         this.oldLevel = oldLevel;
-         this.newLevel = newLevel;
+        super(player);
+        this.oldLevel = oldLevel;
+        this.newLevel = newLevel;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
Patch:
@@ -84,4 +84,4 @@ public HandlerList getHandlers() {
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
Patch:
@@ -24,7 +24,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     private final Material material;
 
     public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int initialValue, int newValue) {
-        super (player);
+        super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;
@@ -33,7 +33,7 @@ public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int ini
     }
 
     public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int initialValue, int newValue, EntityType entityType) {
-        super (player);
+        super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;
@@ -42,7 +42,7 @@ public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int ini
     }
 
     public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int initialValue, int newValue, Material material) {
-        super (player);
+        super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;

File: paper-api/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
Patch:
@@ -42,4 +42,4 @@ public HandlerList getHandlers() {
     public static HandlerList getHandlerList() {
         return handlers;
     }
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/inventory/CraftingInventory.java
Patch:
@@ -42,4 +42,4 @@ public interface CraftingInventory extends Inventory {
      *     recipe.
      */
     Recipe getRecipe();
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/inventory/InventoryView.java
Patch:
@@ -159,9 +159,9 @@ public int getId() {
     public void setItem(int slot, ItemStack item) {
         if (slot != OUTSIDE) {
             if (slot < getTopInventory().getSize()) {
-                getTopInventory().setItem(convertSlot(slot),item);
+                getTopInventory().setItem(convertSlot(slot), item);
             } else {
-                getBottomInventory().setItem(convertSlot(slot),item);
+                getBottomInventory().setItem(convertSlot(slot), item);
             }
         } else {
             getPlayer().getWorld().dropItemNaturally(getPlayer().getLocation(), item);

File: paper-api/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
Patch:
@@ -26,7 +26,7 @@ public interface FireworkMeta extends ItemMeta {
      * @throws IllegalArgumentException If any effect is null (may be thrown
      *     after changes have occurred)
      */
-    void addEffects(FireworkEffect...effects) throws IllegalArgumentException;
+    void addEffects(FireworkEffect... effects) throws IllegalArgumentException;
 
     /**
      * Add several firework effects to this firework.

File: paper-api/src/main/java/org/bukkit/map/MapFont.java
Patch:
@@ -53,7 +53,7 @@ public int getWidth(String text) {
             throw new IllegalArgumentException("text contains invalid characters");
         }
 
-        if (text.length() == 0){
+        if (text.length() == 0) {
             return 0;
         }
 

File: paper-api/src/main/java/org/bukkit/material/Cauldron.java
Patch:
@@ -20,7 +20,7 @@ public Cauldron() {
      * @deprecated Magic value
      */
     @Deprecated
-    public Cauldron(int type, byte data){
+    public Cauldron(int type, byte data) {
         super(type, data);
     }
 

File: paper-api/src/main/java/org/bukkit/material/Comparator.java
Patch:
@@ -41,7 +41,7 @@ public Comparator(BlockFace facingDirection) {
      * @see BlockFace
      */
     public Comparator(BlockFace facingDirection, boolean isSubtraction) {
-    	this(facingDirection, isSubtraction, DEFAULT_STATE);
+        this(facingDirection, isSubtraction, DEFAULT_STATE);
     }
 
     /**
@@ -98,7 +98,7 @@ public Comparator(Material type, byte data) {
      * @param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation
      */
     public void setSubtractionMode(boolean isSubtraction) {
-        setData((byte)(getData() & 0xB | (isSubtraction ? 0x4 : 0x0)));
+        setData((byte) (getData() & 0xB | (isSubtraction ? 0x4 : 0x0)));
     }
 
     /**
@@ -139,7 +139,7 @@ public void setFacingDirection(BlockFace face) {
             data |= 0x0;
         }
 
-        setData((byte)data);
+        setData((byte) data);
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/material/Gate.java
Patch:
@@ -18,7 +18,7 @@ public Gate() {
         super(Material.FENCE_GATE);
     }
 
-    public Gate(int type, byte data){
+    public Gate(int type, byte data) {
         super(type, data);
     }
 
@@ -27,7 +27,7 @@ public Gate(byte data) {
     }
 
     public void setFacingDirection(BlockFace face) {
-        byte data = (byte) (getData() &~ DIR_BIT);
+        byte data = (byte) (getData() & ~DIR_BIT);
 
         switch (face) {
             default:
@@ -88,4 +88,4 @@ public String toString() {
     public Gate clone() {
         return (Gate) super.clone();
     }
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/material/Mushroom.java
Patch:
@@ -88,7 +88,7 @@ public Mushroom(Material shroom, byte data) {
      * @deprecated Magic value
      */
     @Deprecated
-    public Mushroom(int type, byte data){
+    public Mushroom(int type, byte data) {
         super(type, data);
         Validate.isTrue(type == Material.HUGE_MUSHROOM_1.getId() || type == Material.HUGE_MUSHROOM_2.getId(), "Not a mushroom!");
     }
@@ -237,8 +237,7 @@ public void setFacePainted(BlockFace face, boolean painted) {
             case DOWN:
                 if (painted) {
                     data = MushroomBlockTexture.ALL_CAP.getData();
-                }
-                else {
+                } else {
                     data = MushroomBlockTexture.ALL_PORES.getData();
                 }
                 break;

File: paper-api/src/main/java/org/bukkit/material/NetherWarts.java
Patch:
@@ -26,7 +26,7 @@ public NetherWarts(final int type) {
     }
 
     public NetherWarts(final Material type) {
-        super (type);
+        super(type);
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/material/SpawnEgg.java
Patch:
@@ -21,7 +21,7 @@ public SpawnEgg() {
      * @deprecated Magic value
      */
     @Deprecated
-    public SpawnEgg(int type, byte data){
+    public SpawnEgg(int type, byte data) {
         super(type, data);
     }
 

File: paper-api/src/main/java/org/bukkit/material/Stairs.java
Patch:
@@ -130,7 +130,7 @@ public void setInverted(boolean inv) {
 
     @Override
     public String toString() {
-        return super.toString() + " facing " + getFacing() + (isInverted()?" inverted":"");
+        return super.toString() + " facing " + getFacing() + (isInverted() ? " inverted" : "");
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/material/Step.java
Patch:
@@ -116,6 +116,6 @@ public Step clone() {
 
     @Override
     public String toString() {
-        return super.toString() + (isInverted()?"inverted":"");
+        return super.toString() + (isInverted() ? "inverted" : "");
     }
 }

File: paper-api/src/main/java/org/bukkit/material/TripwireHook.java
Patch:
@@ -124,6 +124,6 @@ public TripwireHook clone() {
 
     @Override
     public String toString() {
-        return super.toString() + " facing " + getFacing() + (isActivated()?" Activated":"") + (isConnected()?" Connected":"");
+        return super.toString() + " facing " + getFacing() + (isActivated() ? " Activated" : "") + (isConnected() ? " Connected" : "");
     }
 }

File: paper-api/src/main/java/org/bukkit/material/Vine.java
Patch:
@@ -26,7 +26,7 @@ public Vine() {
      * @deprecated Magic value
      */
     @Deprecated
-    public Vine(int type, byte data){
+    public Vine(int type, byte data) {
         super(type, data);
     }
 
@@ -107,7 +107,7 @@ public boolean isOnFace(BlockFace face) {
      * @param face The face to attach.
      */
     public void putOnFace(BlockFace face) {
-        switch(face) {
+        switch (face) {
             case WEST:
                 setData((byte) (getData() | VINE_WEST));
                 break;
@@ -149,7 +149,7 @@ public void putOnFace(BlockFace face) {
      * @param face The face to detach.
      */
     public void removeFromFace(BlockFace face) {
-        switch(face) {
+        switch (face) {
             case WEST:
                 setData((byte) (getData() & ~VINE_WEST));
                 break;

File: paper-api/src/main/java/org/bukkit/permissions/Permission.java
Patch:
@@ -305,7 +305,7 @@ public static Permission loadPermission(String name, Map<?, ?> data, PermissionD
                     }
                 }
             } else if (childrenNode instanceof Map) {
-                children = extractChildren((Map<?,?>) childrenNode, name, def, output);
+                children = extractChildren((Map<?, ?>) childrenNode, name, def, output);
             } else {
                 throw new IllegalArgumentException("'children' key is of wrong type");
             }

File: paper-api/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
Patch:
@@ -1060,9 +1060,9 @@ private Map<String, Object> saveMap() {
         return map;
     }
 
-    private Map<?,?> asMap(Object object) throws InvalidDescriptionException {
+    private Map<?, ?> asMap(Object object) throws InvalidDescriptionException {
         if (object instanceof Map) {
-            return (Map<?,?>) object;
+            return (Map<?, ?>) object;
         }
         throw new InvalidDescriptionException(object + " is not properly structured.");
     }

File: paper-api/src/main/java/org/bukkit/plugin/RegisteredListener.java
Patch:
@@ -54,15 +54,15 @@ public EventPriority getPriority() {
      * @throws EventException If an event handler throws an exception.
      */
     public void callEvent(final Event event) throws EventException {
-        if (event instanceof Cancellable){
-            if (((Cancellable) event).isCancelled() && isIgnoringCancelled()){
+        if (event instanceof Cancellable) {
+            if (((Cancellable) event).isCancelled() && isIgnoringCancelled()) {
                 return;
             }
         }
         executor.execute(listener, event);
     }
 
-     /**
+    /**
      * Whether this listener accepts cancelled events
      *
      * @return True when ignoring cancelled events

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -152,7 +152,7 @@ public Plugin[] loadPlugins(File directory) {
                     file.getPath(),
                     replacedFile.getPath(),
                     directory.getPath()
-                    ));
+                ));
             }
 
             Collection<String> softDependencySet = description.getSoftDepend();
@@ -443,7 +443,7 @@ public void disablePlugin(final Plugin plugin) {
             try {
                 server.getMessenger().unregisterIncomingPluginChannel(plugin);
                 server.getMessenger().unregisterOutgoingPluginChannel(plugin);
-            } catch(Throwable ex) {
+            } catch (Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering plugin channels for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
         }

File: paper-api/src/main/java/org/bukkit/map/MapPalette.java
Patch:
@@ -246,7 +246,7 @@ public static byte matchColor(Color color) {
      */
     @Deprecated
     public static Color getColor(byte index) {
-        if ((index > -113 && index < 0) || index > 127) {
+        if ((index > -49 && index < 0) || index > 127) {
             throw new IndexOutOfBoundsException();
         } else {
             // Minecraft has 143 colors, some of which have negative byte representations

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryType.java
Patch:
@@ -73,7 +73,7 @@ public enum InventoryType {
     /**
      * A shulker box inventory, with 27 slots of type CONTAINER.
      */
-    SHULKER_BOX(27, "container.shulkerBox"),
+    SHULKER_BOX(27, "Shulker Box"),
     ;
 
     private final int size;

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -58,9 +58,9 @@ public interface Plugin extends TabExecutor {
 
     /**
      * Saves the raw contents of the default config.yml file to the location
-     * retrievable by {@link #getConfig()}. If there is no default config.yml
-     * embedded in the plugin, an empty config.yml file is saved. This should
-     * fail silently if the config.yml already exists.
+     * retrievable by {@link #getConfig()}.
+     * <p>
+     * This should fail silently if the config.yml already exists.
      */
     public void saveDefaultConfig();
 

File: paper-api/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
Patch:
@@ -16,7 +16,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
     private final ItemStack fuel;
     private int fuelPower;
     private boolean cancelled;
-    private boolean consuming;
+    private boolean consuming = true;
 
     public BrewingStandFuelEvent(Block brewingStand, ItemStack fuel, int fuelPower) {
         super(brewingStand);

File: paper-api/src/main/java/org/bukkit/entity/Llama.java
Patch:
@@ -53,7 +53,7 @@ public enum Color {
     int getStrength();
 
     /**
-     * Gets the llama's strength. A higher strength llama will have more
+     * Sets the llama's strength. A higher strength llama will have more
      * inventory slots and be more threatening to entities. Inventory slots are
      * equal to strength * 3.
      *

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -38,7 +38,7 @@ public enum EntityType {
      */
     ELDER_GUARDIAN("elder_guardian", ElderGuardian.class, 4),
     /**
-     * @see WitherSkull
+     * @see WitherSkeleton
      */
     WITHER_SKELETON("wither_skeleton", WitherSkeleton.class, 5),
     /**

File: paper-api/src/main/java/org/bukkit/entity/AbstractHorse.java
Patch:
@@ -14,7 +14,7 @@ public interface AbstractHorse extends Animals, Vehicle, InventoryHolder, Tameab
      * Whether a horse is a regular horse, donkey, mule, or other kind of horse
      * is determined using the variant.
      *
-     * @return a {@link Variant} representing the horse's variant
+     * @return a {@link Horse.Variant} representing the horse's variant
      * @deprecated different variants are different classes
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -42,7 +42,7 @@ public enum EntityType {
      */
     WITHER_SKELETON("wither_skeleton", WitherSkeleton.class, 5),
     /**
-     * @See Stray
+     * @see Stray
      */
     STRAY("stray", Stray.class, 6),
     /**

File: paper-api/src/main/java/org/bukkit/entity/Horse.java
Patch:
@@ -144,7 +144,7 @@ public enum Style {
     public void setStyle(Style style);
 
     /**
-     * @return
+     * @return carrying chest status
      * @deprecated see {@link ChestedHorse}
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/entity/Zombie.java
Patch:
@@ -43,7 +43,7 @@ public interface Zombie extends Monster {
     public void setVillagerProfession(Villager.Profession profession);
 
     /**
-     * @return 
+     * @return profession
      * @see ZombieVillager#getVillagerProfession()
      */
     @Deprecated

File: paper-api/src/main/java/org/bukkit/block/Beacon.java
Patch:
@@ -50,7 +50,7 @@ public interface Beacon extends BlockState, InventoryHolder {
 
     /**
      * Set the secondary effect on this beacon, or null to clear. Note that tier
-     * must be >= 4 for this effect to be active.
+     * must be &gt;= 4 for this effect to be active.
      *
      * @param effect desired secondary effect
      */

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -205,7 +205,7 @@ public void setTypeId(int type) {
     /**
      * Gets the amount of items in this stack
      *
-     * @return Amount of items in this stick
+     * @return Amount of items in this stack
      */
     public int getAmount() {
         return amount;

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -279,8 +279,8 @@ public enum Material {
     BEETROOT_BLOCK(207, Crops.class),
     GRASS_PATH(208),
     END_GATEWAY(209),
-    COMMAND_REPEATING(210),
-    COMMAND_CHAIN(211),
+    COMMAND_REPEATING(210, Command.class),
+    COMMAND_CHAIN(211, Command.class),
     FROSTED_ICE(212),
     STRUCTURE_BLOCK(255),
     // ----- Item Separator -----

File: paper-api/src/main/java/org/bukkit/potion/PotionType.java
Patch:
@@ -43,7 +43,7 @@ public PotionEffectType getEffectType() {
     public boolean isInstant() {
         return effect != null && effect.isInstant();
     }
-    
+
     /**
      * Checks if the potion type has an upgraded state.
      * This refers to whether or not the potion type can be Tier 2,
@@ -64,13 +64,13 @@ public boolean isUpgradeable() {
     public boolean isExtendable() {
         return extendable;
     }
-    
+
     /**
      * @deprecated Non-functional
      */
     @Deprecated
     public int getDamageValue() {
-        return 0;
+        return this.ordinal();
     }
 
     public int getMaxLevel() {

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -208,8 +208,8 @@ public enum Material {
     BEACON(138),
     COBBLE_WALL(139),
     FLOWER_POT(140, FlowerPot.class),
-    CARROT(141),
-    POTATO(142),
+    CARROT(141, Crops.class),
+    POTATO(142, Crops.class),
     WOOD_BUTTON(143, Button.class),
     SKULL(144, Skull.class),
     ANVIL(145),

File: paper-api/src/main/java/org/bukkit/entity/Villager.java
Patch:
@@ -72,7 +72,7 @@ public interface Villager extends Ageable, NPC, InventoryHolder {
      * Note that this inventory is not the Merchant inventory, rather, it is the
      * items that a villager might have collected (from harvesting crops, etc.)
      *
-     * @inheritDoc
+     * {@inheritDoc}
      */
     @Override
     Inventory getInventory();

File: paper-api/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
Patch:
@@ -77,7 +77,7 @@ public interface PotionMeta extends ItemMeta {
      *
      * @param type the potion effect type to move
      * @return true if the potion meta changed as a result of this call
-     * @deprecated use {@link #setType(PotionType)}
+     * @deprecated use {@link org.bukkit.potion.PotionType#PotionType}
      */
     @Deprecated
     boolean setMainEffect(PotionEffectType type);

File: paper-api/src/main/java/org/bukkit/potion/Potion.java
Patch:
@@ -105,7 +105,7 @@ public Potion(PotionType type, int level, boolean splash, boolean extended) {
     }
 
     /**
-     * @Deprecated
+     * @deprecated
      */
     @Deprecated
     public Potion(int name) {

File: paper-api/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
Patch:
@@ -27,7 +27,7 @@ public AreaEffectCloudApplyEvent(final AreaEffectCloud entity, final List<Living
 
     @Override
     public AreaEffectCloud getEntity() {
-        return (AreaEffectCloud) getEntity();
+        return (AreaEffectCloud) entity;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/potion/Potion.java
Patch:
@@ -143,7 +143,7 @@ public void apply(ItemStack to) {
         Validate.isTrue(to.hasItemMeta(), "given itemstack is not a potion");
         Validate.isTrue(to.getItemMeta() instanceof PotionMeta, "given itemstack is not a potion");
         PotionMeta meta = (PotionMeta) to.getItemMeta();
-        meta.setBasePotionData(new PotionData(type, level == 2, extended));
+        meta.setBasePotionData(new PotionData(type, extended, level == 2));
         to.setItemMeta(meta);
     }
 

File: paper-api/src/main/java/org/bukkit/attribute/AttributeInstance.java
Patch:
@@ -32,7 +32,7 @@ public interface AttributeInstance {
     /**
      * Get all modifiers present on this instance.
      *
-     * @return
+     * @return a copied collection of all modifiers
      */
     Collection<AttributeModifier> getModifiers();
 

File: paper-api/src/main/java/org/bukkit/material/Leaves.java
Patch:
@@ -7,8 +7,8 @@
  * Represents the different types of leaf block that may be permanent or can
  * decay when too far from a log.
  *
- * @see Material.LEAVES
- * @see Material.LEAVES_2
+ * @see Material#LEAVES
+ * @see Material#LEAVES_2
  */
 public class Leaves extends Wood {
     protected static final Material DEFAULT_TYPE = Material.LEAVES;

File: paper-api/src/main/java/org/bukkit/material/Sapling.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Represents the different types of Tree block that face a direction.
  *
- * @see Material.SAPLING
+ * @see Material#SAPLING
  */
 public class Sapling extends Wood {
 

File: paper-api/src/main/java/org/bukkit/material/Tree.java
Patch:
@@ -7,8 +7,8 @@
 /**
  * Represents the different types of Tree block that face a direction.
  *
- * @see Material.LOG
- * @see Material.LOG_2
+ * @see Material#LOG
+ * @see Material#LOG_2
  */
 public class Tree extends Wood {
     protected static final Material DEFAULT_TYPE = Material.LOG;

File: paper-api/src/main/java/org/bukkit/material/Wood.java
Patch:
@@ -6,9 +6,9 @@
 /**
  * Represents wood blocks of different species.
  *
- * @see Material.WOOD
- * @see Material.SAPLING
- * @see Material.WOOD_DOUBLE_STEP
+ * @see Material#WOOD
+ * @see Material#SAPLING
+ * @see Material#WOOD_DOUBLE_STEP
  */
 public class Wood extends MaterialData {
     protected static final Material DEFAULT_TYPE = Material.WOOD;

File: paper-api/src/main/java/org/bukkit/material/WoodenStep.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Represents the different types of wooden steps.
  *
- * @see Material.WOOD_STEP
+ * @see Material#WOOD_STEP
  */
 public class WoodenStep extends Wood {
     protected static final Material DEFAULT_TYPE = Material.WOOD_STEP;

File: paper-api/src/main/java/org/bukkit/scoreboard/Team.java
Patch:
@@ -115,7 +115,7 @@ public interface Team {
      *
      * @return the current name tag visibilty for the team
      * @throws IllegalArgumentException if this team has been unregistered
-     * @deprecated see {@link #getOption()}
+     * @deprecated see {@link #getOption(org.bukkit.scoreboard.Team.Option)}
      */
     @Deprecated
     NameTagVisibility getNameTagVisibility() throws IllegalArgumentException;

File: paper-api/src/main/java/org/bukkit/event/inventory/InventoryType.java
Patch:
@@ -37,7 +37,7 @@ public enum InventoryType {
     /**
      * A brewing stand inventory, with one FUEL slot and three CRAFTING slots.
      */
-    BREWING(4,"Brewing"),
+    BREWING(5,"Brewing"),
     /**
      * A player's inventory, with 9 QUICKBAR slots, 27 CONTAINER slots, and 4
      * ARMOR slots. The ARMOUR slots may not be visible to the player, though.

File: paper-api/src/main/java/org/bukkit/Effect.java
Patch:
@@ -50,15 +50,15 @@ public enum Effect {
     /**
      * Sound of zombies chewing on wooden doors.
      */
-    ZOMBIE_CHEW_WOODEN_DOOR(1010, Type.SOUND),
+    ZOMBIE_CHEW_WOODEN_DOOR(1012, Type.SOUND),
     /**
      * Sound of zombies chewing on iron doors.
      */
     ZOMBIE_CHEW_IRON_DOOR(1011, Type.SOUND),
     /**
      * Sound of zombies destroying a door.
      */
-    ZOMBIE_DESTROY_DOOR(1012, Type.SOUND),
+    ZOMBIE_DESTROY_DOOR(1021, Type.SOUND),
     /**
      * A visual smoke effect. Needs direction as additional info.
      */

File: paper-api/src/main/java/org/bukkit/Effect.java
Patch:
@@ -34,7 +34,7 @@ public enum Effect {
     /**
      * A song from a record. Needs the record item ID as additional info
      */
-    RECORD_PLAY(1005, Type.SOUND, Material.class),
+    RECORD_PLAY(1010, Type.SOUND, Material.class),
     /**
      * Sound of ghast shrieking.
      */

File: paper-api/src/main/java/org/bukkit/SkullType.java
Patch:
@@ -8,5 +8,6 @@ public enum SkullType {
     WITHER,
     ZOMBIE,
     PLAYER,
-    CREEPER;
+    CREEPER,
+    DRAGON;
 }

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -904,6 +904,7 @@ public boolean isSolid() {
             case STRUCTURE_BLOCK:
             case COMMAND_REPEATING:
             case COMMAND_CHAIN:
+            case FROSTED_ICE:
                 return true;
             default:
                 return false;

File: paper-api/src/main/java/org/bukkit/potion/PotionEffectType.java
Patch:
@@ -280,6 +280,7 @@ public static void stopAcceptingRegistrations() {
 
     /**
      * Returns an array of all the registered {@link PotionEffectType}s.
+     * This array is not necessarily in any particular order and may contain null.
      *
      * @return Array of types.
      */

File: paper-api/src/main/java/org/bukkit/inventory/EquipmentSlot.java
Patch:
@@ -3,6 +3,7 @@
 public enum EquipmentSlot {
 
     HAND,
+    OFF_HAND,
     FEET,
     LEGS,
     CHEST,

File: paper-api/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
Patch:
@@ -33,7 +33,6 @@ public class YamlConfiguration extends FileConfiguration {
     public String saveToString() {
         yamlOptions.setIndent(options().indent());
         yamlOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
-        yamlOptions.setAllowUnicode(SYSTEM_UTF);
         yamlRepresenter.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
 
         String header = buildHeader();

File: paper-api/src/main/java/org/bukkit/plugin/PluginAwareness.java
Patch:
@@ -2,8 +2,6 @@
 
 import java.util.Set;
 
-import org.bukkit.plugin.java.JavaPlugin;
-
 /**
  * Represents a concept that a plugin is aware of.
  * <p>
@@ -21,8 +19,9 @@ public enum Flags implements PluginAwareness {
          * This specifies that all (text) resources stored in a plugin's jar
          * use UTF-8 encoding.
          *
-         * @see JavaPlugin#getTextResource(String)
+         * @deprecated all plugins are now assumed to be UTF-8 aware.
          */
+        @Deprecated
         UTF8,
         ;
     }

File: paper-api/src/main/java/org/bukkit/potion/Potion.java
Patch:
@@ -448,4 +448,4 @@ public static void setPotionBrewer(PotionBrewer other) {
     public int getNameId() {
         return name;
     }
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/potion/Potion.java
Patch:
@@ -405,7 +405,7 @@ public static Potion fromDamage(int damage) {
         if ((damage & SPLASH_BIT) > 0) {
             potion = potion.splash();
         }
-        if ((!type.equals(PotionType.INSTANT_DAMAGE) || type.equals(PotionType.FIRE_RESISTANCE)) && (damage & EXTENDED_BIT) > 0) {
+        if ((type == null || !type.isInstant()) && (damage & EXTENDED_BIT) > 0) {
             potion = potion.extend();
         }
         return potion;

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -255,7 +255,7 @@ public enum Material {
     BIRCH_FENCE(189),
     JUNGLE_FENCE(190),
     DARK_OAK_FENCE(191),
-    ACACIA_FENCE(192, Door.class),
+    ACACIA_FENCE(192),
     SPRUCE_DOOR(193, Door.class),
     BIRCH_DOOR(194, Door.class),
     JUNGLE_DOOR(195, Door.class),

File: paper-api/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
Patch:
@@ -64,7 +64,7 @@ public Location getFrom() {
      * @param from New location to mark as the players previous location
      */
     public void setFrom(Location from) {
-        validateLocation(to);
+        validateLocation(from);
         this.from = from;
     }
 
@@ -88,7 +88,8 @@ public void setTo(Location to) {
     }
 
     private void validateLocation(Location loc) {
-        Preconditions.checkArgument(loc != null, "Cannot use location with null world!");
+        Preconditions.checkArgument(loc != null, "Cannot use null location!");
+        Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/entity/Player.java
Patch:
@@ -236,9 +236,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param sound the internal sound name to play
      * @param volume the volume of the sound
      * @param pitch the pitch of the sound
-     * @deprecated Magic value
      */
-    @Deprecated
     public void playSound(Location location, String sound, float volume, float pitch);
 
     /**

File: paper-api/src/main/java/org/bukkit/inventory/PlayerInventory.java
Patch:
@@ -57,7 +57,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param index The index where to put the ItemStack
      * @param item The ItemStack to set
-     * @throws ArrayIndexOutOfBoundsException when index < 0 || index > 39
+     * @throws ArrayIndexOutOfBoundsException when index &lt; 0 || index &gt; 39
      * @see #setBoots(ItemStack)
      * @see #setChestplate(ItemStack)
      * @see #setHelmet(ItemStack)

File: paper-api/src/main/java/org/bukkit/potion/Potion.java
Patch:
@@ -405,7 +405,7 @@ public static Potion fromDamage(int damage) {
         if ((damage & SPLASH_BIT) > 0) {
             potion = potion.splash();
         }
-        if ((damage & EXTENDED_BIT) > 0) {
+        if ((!type.equals(PotionType.INSTANT_DAMAGE) || type.equals(PotionType.FIRE_RESISTANCE)) && (damage & EXTENDED_BIT) > 0) {
             potion = potion.extend();
         }
         return potion;

File: paper-api/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
Patch:
@@ -20,6 +20,8 @@ public ReloadCommand(String name) {
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
 
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues when using some plugins.");
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
         Bukkit.reload();
         Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
 

File: paper-api/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
Patch:
@@ -15,6 +15,8 @@ public class BlockPistonRetractEvent extends BlockPistonEvent {
     
     public BlockPistonRetractEvent(final Block block, final List<Block> blocks, final BlockFace direction) {
         super(block, direction);
+        
+        this.blocks = blocks;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/potion/PotionType.java
Patch:
@@ -11,10 +11,10 @@ public enum PotionType {
     WEAKNESS(8, PotionEffectType.WEAKNESS, 1),
     STRENGTH(9, PotionEffectType.INCREASE_DAMAGE, 2),
     SLOWNESS(10, PotionEffectType.SLOW, 1),
+    JUMP(11, PotionEffectType.JUMP, 2),
     INSTANT_DAMAGE(12, PotionEffectType.HARM, 2),
     WATER_BREATHING(13, PotionEffectType.WATER_BREATHING, 1),
     INVISIBILITY(14, PotionEffectType.INVISIBILITY, 1),
-    JUMP(15, PotionEffectType.JUMP, 2)
     ;
 
     private final int damageValue, maxLevel;

File: paper-api/src/main/java/org/bukkit/WorldType.java
Patch:
@@ -12,8 +12,7 @@ public enum WorldType {
     VERSION_1_1("DEFAULT_1_1"),
     LARGE_BIOMES("LARGEBIOMES"),
     AMPLIFIED("AMPLIFIED"),
-    CUSTOMIZED("CUSTOMIZED"),
-    DEBUG_ALL_BLOCK_STATES("DEBUG_ALL_BLOCK_STATES");
+    CUSTOMIZED("CUSTOMIZED");
 
     private final static Map<String, WorldType> BY_NAME = Maps.newHashMap();
     private final String name;

File: paper-api/src/main/java/org/bukkit/command/defaults/VersionCommand.java
Patch:
@@ -187,7 +187,7 @@ private void obtainVersion() {
         if (version == null) version = "Custom";
         if (version.startsWith("git-Spigot-")) {
             String[] parts = version.substring("git-Spigot-".length()).split("-");
-            int cbVersions = getDistance("craftbukkit", parts[1]);
+            int cbVersions = getDistance("craftbukkit", parts[1].substring(0, parts[1].indexOf(' ')));
             int spigotVersions = getDistance("spigot", parts[0]);
             if (cbVersions == -1 || spigotVersions == -1) {
                 setVersionMessage("Error obtaining version information");
@@ -200,7 +200,8 @@ private void obtainVersion() {
             }
 
         } else if (version.startsWith("git-Bukkit-")) {
-            int cbVersions = getDistance("craftbukkit", version.substring("git-Bukkit-".length()));
+            version = version.substring("git-Bukkit-".length());
+            int cbVersions = getDistance("craftbukkit", version.substring(0, version.indexOf(' ')));
             if (cbVersions == -1) {
                 setVersionMessage("Error obtaining version information");
             } else {

File: paper-api/src/main/java/org/bukkit/potion/Potion.java
Patch:
@@ -395,7 +395,7 @@ public static Tier getByDamageBit(int damageBit) {
     public static Potion fromDamage(int damage) {
         PotionType type = PotionType.getByDamageValue(damage & POTION_BIT);
         Potion potion;
-        if (type == null || (type == PotionType.WATER && damage != 0)) {
+        if (type == null || type == PotionType.WATER) {
             potion = new Potion(damage & NAME_BIT);
         } else {
             int level = (damage & TIER_BIT) >> TIER_SHIFT;

File: paper-api/src/main/java/org/bukkit/entity/Guardian.java
Patch:
@@ -4,12 +4,14 @@ public interface Guardian extends Monster {
 
     /**
      * Check if the Guardian is an elder Guardian
+     * 
      * @return true if the Guardian is an Elder Guardian, false if not
      */
     public boolean isElder();
 
     /**
      * Set the Guardian to an elder Guardian or not
+     *
      * @param shouldBeElder True if this Guardian should be a elder Guardian, false if not
      */
     public void setElder(boolean shouldBeElder);

File: paper-api/src/main/java/org/bukkit/entity/Minecart.java
Patch:
@@ -130,12 +130,14 @@ public interface Minecart extends Vehicle {
 
     /**
      * Sets the offset of the display block.
-     * @return the current block offset for this minecart.
+     *
+     * @param offset the block offset to set for this minecart.
      */
     public void setDisplayBlockOffset(int offset);
 
     /**
      * Gets the offset of the display block.
+     * 
      * @return the current block offset for this minecart.
      */
     public int getDisplayBlockOffset();

File: paper-api/src/main/java/org/bukkit/command/defaults/DeopCommand.java
Patch:
@@ -49,9 +49,9 @@ public List<String> tabComplete(CommandSender sender, String alias, String[] arg
 
         if (args.length == 1) {
             List<String> completions = new ArrayList<String>();
-            for (OfflinePlayer player : Bukkit.getOfflinePlayers()) {
+            for (OfflinePlayer player : Bukkit.getOperators()) {
                 String playerName = player.getName();
-                if (player.isOp() && StringUtil.startsWithIgnoreCase(playerName, args[0])) {
+                if (StringUtil.startsWithIgnoreCase(playerName, args[0])) {
                     completions.add(playerName);
                 }
             }

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Map;
 
+import com.google.common.base.Function;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 
@@ -22,8 +23,8 @@ public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final
         this.damager = damager;
     }
 
-    public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {
-        super(damagee, cause, modifiers);
+    public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
+        super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
     }
 

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Map;
 
+import com.google.common.base.Function;
 import org.bukkit.entity.Entity;
 
 /**
@@ -21,8 +22,8 @@ public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, fin
         this.damager = damager;
     }
 
-    public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {
-        super(damagee, cause, modifiers);
+    public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
+        super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
     }
 

File: paper-api/src/main/java/org/bukkit/command/defaults/TeleportCommand.java
Patch:
@@ -71,7 +71,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             playerLocation.setY(y);
             playerLocation.setZ(z);
 
-            player.teleport(playerLocation);
+            player.teleport(playerLocation, TeleportCause.COMMAND);
             Command.broadcastCommandMessage(sender, String.format("Teleported %s to %.2f, %.2f, %.2f", player.getDisplayName(), x, y, z));
         }
         return true;

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -131,8 +131,9 @@ public boolean register(String label, String fallbackPrefix, Command command) {
      * @return true if command was registered, false otherwise.
      */
     private synchronized boolean register(String label, Command command, boolean isAlias) {
-        if (isAlias && knownCommands.containsKey(label)) {
-            // Request is for an alias and it conflicts with a existing command or previous alias ignore it
+        if ((command instanceof VanillaCommand || isAlias) && knownCommands.containsKey(label)) {
+            // Request is for an alias/fallback command and it conflicts with
+            // a existing command or previous alias ignore it
             // Note: This will mean it gets removed from the commands list of active aliases
             return false;
         }

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -144,7 +144,7 @@ public Plugin[] loadPlugins(File directory) {
             plugins.put(description.getName(), file);
 
             Collection<String> softDependencySet = description.getSoftDepend();
-            if (softDependencySet != null) {
+            if (softDependencySet != null && !softDependencySet.isEmpty()) {
                 if (softDependencies.containsKey(description.getName())) {
                     // Duplicates do not matter, they will be removed together if applicable
                     softDependencies.get(description.getName()).addAll(softDependencySet);
@@ -154,12 +154,12 @@ public Plugin[] loadPlugins(File directory) {
             }
 
             Collection<String> dependencySet = description.getDepend();
-            if (dependencySet != null) {
+            if (dependencySet != null && !dependencySet.isEmpty()) {
                 dependencies.put(description.getName(), new LinkedList<String>(dependencySet));
             }
 
             Collection<String> loadBeforeSet = description.getLoadBefore();
-            if (loadBeforeSet != null) {
+            if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {
                 for (String loadBeforeTarget : loadBeforeSet) {
                     if (softDependencies.containsKey(loadBeforeTarget)) {
                         softDependencies.get(loadBeforeTarget).add(description.getName());

File: paper-api/src/main/java/org/bukkit/command/FormattedCommandAlias.java
Patch:
@@ -48,7 +48,6 @@ public boolean execute(CommandSender sender, String commandLabel, String[] args)
                 } else {
                     sender.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
                 }
-                Bukkit.getLogger().log(Level.WARNING, "Failed to parse command alias " + commandLabel + ": " + formatString, throwable);
                 return false;
             }
         }

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -3,7 +3,6 @@
 import static org.bukkit.util.Java15Compat.Arrays_copyOfRange;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -101,7 +100,8 @@ public boolean register(String fallbackPrefix, Command command) {
      * {@inheritDoc}
      */
     public boolean register(String label, String fallbackPrefix, Command command) {
-        label = label.toLowerCase();
+        label = label.toLowerCase().trim();
+        fallbackPrefix = fallbackPrefix.toLowerCase().trim();
         boolean registered = register(label, command, false);
         knownCommands.put(fallbackPrefix + ":" + label, command);
 

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -351,11 +351,11 @@ public PluginCommand getCommand(String name) {
         String alias = name.toLowerCase();
         PluginCommand command = getServer().getPluginCommand(alias);
 
-        if ((command != null) && (command.getPlugin() != this)) {
+        if (command == null || command.getPlugin() != this) {
             command = getServer().getPluginCommand(description.getName().toLowerCase() + ":" + alias);
         }
 
-        if ((command != null) && (command.getPlugin() == this)) {
+        if (command != null && command.getPlugin() == this) {
             return command;
         } else {
             return null;

File: paper-api/src/main/java/org/bukkit/OfflinePlayer.java
Patch:
@@ -32,7 +32,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * Bans or unbans this player
      *
      * @param banned true if banned
+     * @deprecated Use {@link org.bukkit.BanList#addBan(String, String, java.util.Date, String)} or {@link org.bukkit.BanList#unban(String)} to enhance functionality
      */
+    @Deprecated
     public void setBanned(boolean banned);
 
     /**

File: paper-api/src/main/java/org/bukkit/command/defaults/PardonCommand.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.List;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
@@ -29,7 +30,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             return false;
         }
 
-        Bukkit.getOfflinePlayer(args[0]).setBanned(false);
+        Bukkit.getBanList(BanList.Type.NAME).pardon(args[0]);
         Command.broadcastCommandMessage(sender, "Pardoned " + args[0]);
         return true;
     }

File: paper-api/src/main/java/org/bukkit/command/defaults/SayCommand.java
Patch:
@@ -14,7 +14,7 @@
 public class SayCommand extends VanillaCommand {
     public SayCommand() {
         super("say");
-        this.description = "Broadcasts the given message as the console";
+        this.description = "Broadcasts the given message as the sender";
         this.usageMessage = "/say <message ...>";
         this.setPermission("bukkit.command.say");
     }

File: paper-api/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
Patch:
@@ -95,7 +95,7 @@ synchronized void initialize(JavaPlugin javaPlugin) {
         Validate.notNull(javaPlugin, "Initializing plugin cannot be null");
         Validate.isTrue(javaPlugin.getClass().getClassLoader() == this, "Cannot initialize plugin outside of this class loader");
         if (this.plugin != null || this.pluginInit != null) {
-            throw new IllegalArgumentException("Plugin already intialized!", pluginState);
+            throw new IllegalArgumentException("Plugin already initialized!", pluginState);
         }
 
         pluginState = new IllegalStateException("Initial initialization");

File: paper-api/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
Patch:
@@ -10,6 +10,6 @@ public ChannelNotRegisteredException() {
     }
 
     public ChannelNotRegisteredException(String channel) {
-        super("Attempted to send a plugin message through an unregistered channel ('" + channel + "'.");
+        super("Attempted to send a plugin message through the unregistered channel `" + channel + "'.");
     }
 }

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -227,8 +227,8 @@ public enum Material {
     STAINED_GLASS_PANE(160),
     LEAVES_2(161),
     LOG_2(162),
-    ACACIA_STAIRS(163),
-    DARK_OAK_STAIRS(164),
+    ACACIA_STAIRS(163, Stairs.class),
+    DARK_OAK_STAIRS(164, Stairs.class),
     HAY_BLOCK(170),
     CARPET(171),
     HARD_CLAY(172),

File: paper-api/src/main/java/org/bukkit/Sound.java
Patch:
@@ -16,7 +16,6 @@ public enum Sound {
     ANVIL_LAND,
     ANVIL_USE,
     ARROW_HIT,
-    BREATH,
     BURP,
     CHEST_CLOSE,
     CHEST_OPEN,
@@ -33,7 +32,6 @@ public enum Sound {
     FIZZ,
     FUSE,
     GLASS,
-    HURT,
     HURT_FLESH,
     ITEM_BREAK,
     ITEM_PICKUP,
@@ -158,6 +156,7 @@ public enum Sound {
     ZOMBIE_INFECT,
     ZOMBIE_UNFECT,
     ZOMBIE_REMEDY,
+    ZOMBIE_WALK,
     ZOMBIE_PIG_IDLE,
     ZOMBIE_PIG_ANGRY,
     ZOMBIE_PIG_DEATH,
@@ -183,6 +182,7 @@ public enum Sound {
     HORSE_ANGRY,
     HORSE_ARMOR,
     HORSE_BREATHE,
+    HORSE_DEATH,
     HORSE_GALLOP,
     HORSE_HIT,
     HORSE_IDLE,
@@ -196,6 +196,7 @@ public enum Sound {
     DONKEY_HIT,
     DONKEY_IDLE,
     HORSE_SKELETON_DEATH,
+    HORSE_SKELETON_HIT,
     HORSE_SKELETON_IDLE,
     HORSE_ZOMBIE_DEATH,
     HORSE_ZOMBIE_HIT,

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -345,7 +345,7 @@ public static void broadcastCommandMessage(CommandSender source, String message,
         }
 
         Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
-        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + "]";
+        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
 
         if (sendToSource && !(source instanceof ConsoleCommandSender)) {
             source.sendMessage(message);

File: paper-api/src/main/java/org/bukkit/Location.java
Patch:
@@ -334,7 +334,7 @@ public Location subtract(double x, double y, double z) {
      * @return the magnitude
      */
     public double length() {
-        return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
+        return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));
     }
 
     /**
@@ -345,7 +345,7 @@ public double length() {
      * @return the magnitude
      */
     public double lengthSquared() {
-        return Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2);
+        return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);
     }
 
     /**
@@ -381,7 +381,7 @@ public double distanceSquared(Location o) {
             throw new IllegalArgumentException("Cannot measure distance between " + getWorld().getName() + " and " + o.getWorld().getName());
         }
 
-        return Math.pow(x - o.x, 2) + Math.pow(y - o.y, 2) + Math.pow(z - o.z, 2);
+        return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/command/defaults/EffectCommand.java
Patch:
@@ -100,7 +100,7 @@ public boolean execute(CommandSender sender, String commandLabel, String[] args)
             final PotionEffect applyEffect = new PotionEffect(effect, duration, amplification);
 
             player.addPotionEffect(applyEffect, true);
-            broadcastCommandMessage(sender, String.format("Given %s (ID %d) * %d to %s for %d seconds", effect.getName(), effect.getId(), amplification, args[0], duration / 20D));
+            broadcastCommandMessage(sender, String.format("Given %s (ID %d) * %d to %s for %d seconds", effect.getName(), effect.getId(), amplification, args[0], duration_temp));
         }
 
         return true;

File: paper-api/src/main/java/org/bukkit/command/defaults/EffectCommand.java
Patch:
@@ -100,7 +100,7 @@ public boolean execute(CommandSender sender, String commandLabel, String[] args)
             final PotionEffect applyEffect = new PotionEffect(effect, duration, amplification);
 
             player.addPotionEffect(applyEffect, true);
-            broadcastCommandMessage(sender, String.format("Given %s (ID %d) * %d to %s for %d seconds", effect.getName(), effect.getId(), amplification, args[0], duration));
+            broadcastCommandMessage(sender, String.format("Given %s (ID %d) * %d to %s for %d seconds", effect.getName(), effect.getId(), amplification, args[0], duration / 20D));
         }
 
         return true;

File: paper-api/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
Patch:
@@ -81,6 +81,7 @@ public static double getDouble(CommandSender sender, String input) {
     public static double getDouble(CommandSender sender, String input, double min, double max) {
         double result = getDouble(sender, input);
 
+        // TODO: This should throw an exception instead.
         if (result < min) {
             result = min;
         } else if (result > max) {

File: paper-api/src/main/java/org/bukkit/command/defaults/GameRuleCommand.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.ChatColor;
+import org.bukkit.command.BlockCommandSender;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
@@ -61,6 +62,8 @@ private World getGameWorld(CommandSender sender) {
             if (world != null) {
                 return world;
             }
+        } else if (sender instanceof BlockCommandSender) {
+            return ((BlockCommandSender) sender).getBlock().getWorld();
         }
 
         return Bukkit.getWorlds().get(0);

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -411,7 +411,7 @@ public void addEnchantments(Map<Enchantment, Integer> enchantments) {
     public void addEnchantment(Enchantment ench, int level) {
         Validate.notNull(ench, "Enchantment cannot be null");
         if ((level < ench.getStartLevel()) || (level > ench.getMaxLevel())) {
-            throw new IllegalArgumentException("Enchantment level is either too low or too high (given " + level + ", bounds are " + ench.getStartLevel() + " to " + ench.getMaxLevel());
+            throw new IllegalArgumentException("Enchantment level is either too low or too high (given " + level + ", bounds are " + ench.getStartLevel() + " to " + ench.getMaxLevel() + ")");
         } else if (!ench.canEnchantItem(this)) {
             throw new IllegalArgumentException("Specified enchantment cannot be applied to this itemstack");
         }

File: paper-api/src/main/java/org/bukkit/material/Step.java
Patch:
@@ -17,6 +17,8 @@ public class Step extends TexturedMaterial {
         textures.add(Material.COBBLESTONE);
         textures.add(Material.BRICK);
         textures.add(Material.SMOOTH_BRICK);
+        textures.add(Material.NETHER_BRICK);
+        textures.add(Material.QUARTZ_BLOCK);
     }
 
     public Step() {

File: paper-api/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
Patch:
@@ -25,8 +25,8 @@ public abstract class MetadataStoreBase<T> {
      * @throws IllegalArgumentException If value is null, or the owning plugin is null
      */
     public synchronized void setMetadata(T subject, String metadataKey, MetadataValue newMetadataValue) {
-        Plugin owningPlugin = newMetadataValue.getOwningPlugin();
         Validate.notNull(newMetadataValue, "Value cannot be null");
+        Plugin owningPlugin = newMetadataValue.getOwningPlugin();
         Validate.notNull(owningPlugin, "Plugin cannot be null");
         String key = disambiguate(subject, metadataKey);
         Map<Plugin, MetadataValue> entry = metadataMap.get(key);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -936,7 +936,7 @@ public boolean dispatchServerCommand(CommandSender sender, ConsoleInput serverCo
     public boolean dispatchCommand(CommandSender sender, String commandLine) {
         Preconditions.checkArgument(sender != null, "sender cannot be null");
         Preconditions.checkArgument(commandLine != null, "commandLine cannot be null");
-        org.spigotmc.AsyncCatcher.catchOp("command dispatch"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("Command Dispatched Async: " + commandLine); // Spigot // Paper - Include command in error message
 
         if (this.commandMap.dispatch(sender, commandLine)) {
             return true;

File: paper-server/src/main/java/org/spigotmc/SpigotConfig.java
Patch:
@@ -284,7 +284,7 @@ private static void tpsCommand()
     private static void playerSample()
     {
         SpigotConfig.playerSample = SpigotConfig.getInt( "settings.sample-count", 12 );
-        System.out.println( "Server Ping Player Sample Count: " + SpigotConfig.playerSample );
+        Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", playerSample ); // Paper - Use logger
     }
 
     public static int playerShuffle;

File: paper-server/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
Patch:
@@ -31,6 +31,7 @@
 import net.kyori.adventure.text.format.Style;
 import net.kyori.adventure.text.format.TextColor;
 import net.kyori.adventure.text.serializer.ComponentSerializer;
+import net.kyori.adventure.text.serializer.ansi.ANSIComponentSerializer;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
 import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
@@ -129,6 +130,7 @@ public final class PaperAdventure {
     public static final AttributeKey<Locale> LOCALE_ATTRIBUTE = AttributeKey.valueOf("adventure:locale"); // init after FLATTENER because classloading triggered here might create a logger
     @Deprecated
     public static final PlainComponentSerializer PLAIN = PlainComponentSerializer.builder().flattener(FLATTENER).build();
+    public static final ANSIComponentSerializer ANSI_SERIALIZER = ANSIComponentSerializer.builder().flattener(FLATTENER).build();
     public static final Codec<Tag, String, CommandSyntaxException, RuntimeException> NBT_CODEC = new Codec<>() {
         @Override
         public @NotNull Tag decode(final @NotNull String encoded) throws CommandSyntaxException {

File: paper-server/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
Patch:
@@ -1,9 +1,11 @@
 package io.papermc.paper.adventure.providers;
 
 import io.papermc.paper.adventure.PaperAdventure;
+import java.util.Locale;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.logger.slf4j.ComponentLogger;
 import net.kyori.adventure.text.logger.slf4j.ComponentLoggerProvider;
+import net.kyori.adventure.translation.GlobalTranslator;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.LoggerFactory;
 
@@ -15,6 +17,6 @@ public class ComponentLoggerProviderImpl implements ComponentLoggerProvider {
     }
 
     private String serialize(final Component message) {
-        return PaperAdventure.asPlain(message, null);
+        return PaperAdventure.ANSI_SERIALIZER.serialize(GlobalTranslator.render(message, Locale.getDefault()));
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
Patch:
@@ -16,7 +16,7 @@ public void run() {
             this.server.close();
         } finally {
             try {
-                this.server.reader.getTerminal().restore();
+                net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
             } catch (Exception e) {
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/TerminalCompletionHandler.java
Patch:
@@ -4,14 +4,12 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import jline.console.ConsoleReader;
-import jline.console.completer.CompletionHandler;
 
 /**
  * SPIGOT-6705: Make sure we print the display line again on tab completion, so that the user does not get stuck on it
  * e.g. The user needs to press y / n to continue
  */
-public class TerminalCompletionHandler implements CompletionHandler {
+public class TerminalCompletionHandler /* implements CompletionHandler */ { /* Paper - comment out whole class
 
     private final TerminalConsoleWriterThread writerThread;
     private final CompletionHandler delegate;
@@ -50,4 +48,5 @@ public boolean complete(ConsoleReader reader, List<CharSequence> candidates, int
 
         return result;
     }
+*/ // Paper end - comment out whole class
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -424,7 +424,7 @@ public static ChunkSnapshot getEmptyChunkSnapshot(int x, int z, CraftWorld world
             }
         }
 
-        return new CraftChunkSnapshot(x, z, world.getMinHeight(), world.getMaxHeight(), world.getSeaLevel(), world.getName(), world.getFullTime(), blockIDs, skyLight, emitLight, empty, new Heightmap(actual, Heightmap.Types.MOTION_BLOCKING), iregistry, biome);
+        return new CraftChunkSnapshot(x, z, world.getMinHeight(), world.getMaxY(), world.getSeaLevel(), world.getName(), world.getFullTime(), blockIDs, skyLight, emitLight, empty, new Heightmap(actual, Heightmap.Types.MOTION_BLOCKING), iregistry, biome);
     }
 
     static void validateChunkCoordinates(int minY, int maxY, int x, int y, int z) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/Main.java
Patch:
@@ -123,6 +123,7 @@ public static void main(String[] args) {
                 this.acceptsAll(Main.asList("forceUpgrade"), "Whether to force a world upgrade");
                 this.acceptsAll(Main.asList("eraseCache"), "Whether to force cache erase during world upgrade");
                 this.acceptsAll(Main.asList("recreateRegionFiles"), "Whether to recreate region files during world upgrade");
+                this.accepts("safeMode", "Loads level with vanilla datapack only"); // Paper
                 this.acceptsAll(Main.asList("nogui"), "Disables the graphical console");
 
                 this.acceptsAll(Main.asList("nojline"), "Disables jline and emulates the vanilla console");

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
Patch:
@@ -26,6 +26,7 @@
 
 /**
  * The fundamental concepts for this implementation:
+ * <ul>
  * <li>Main thread owns {@link #head} and {@link #currentTick}, but it may be read from any thread</li>
  * <li>Main thread exclusively controls {@link #temp} and {@link #pending}.
  *     They are never to be accessed outside of the main thread; alternatives exist to prevent locking.</li>
@@ -41,6 +42,7 @@
  * <li>Sync tasks are only to be removed from runners on the main thread when coupled with a removal from pending and temp.</li>
  * <li>Most of the design in this scheduler relies on queuing special tasks to perform any data changes on the main thread.
  *     When executed from inside a synchronous method, the scheduler will be updated before next execution by virtue of the frequent {@link #parsePending()} calls.</li>
+ * </ul>
  */
 public class CraftScheduler implements BukkitScheduler {
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
Patch:
@@ -247,7 +247,7 @@ public ItemStack modifyItemStack(ItemStack stack, String arguments) {
         try {
             nmsStack.applyComponents(new ItemParser(Commands.createValidationContext(MinecraftServer.getDefaultRegistryAccess())).parse(new StringReader(arguments)).components());
         } catch (CommandSyntaxException ex) {
-            Logger.getLogger(CraftMagicNumbers.class.getName()).log(Level.SEVERE, null, ex);
+            com.mojang.logging.LogUtils.getClassLogger().error("Exception modifying ItemStack", new Throwable(ex)); // Paper - show stack trace
         }
 
         stack.setItemMeta(CraftItemStack.getItemMeta(nmsStack));

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
Patch:
@@ -15,7 +15,7 @@ public static void registerCorePermissions() {
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".nbt.place", "Gives the user the ability to place restricted blocks with NBT in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".nbt.copy", "Gives the user the ability to copy NBT in creative", org.bukkit.permissions.PermissionDefault.TRUE, parent);
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick", "Gives the user the ability to use the debug stick in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
-        DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE, parent);
+        DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE/* , parent */); // Paper - should not have this parent, as it's not a "vanilla" utility
         // Spigot end
         parent.recalculatePermissibles();
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
Patch:
@@ -133,7 +133,7 @@ public static Boat.Type boatTypeFromNms(EntityType<?> boatType) {
         throw new EnumConstantNotPresentException(Type.class, boatType.toString());
     }
 
-    public static Status boatStatusFromNms(net.minecraft.world.entity.vehicle.Boat.EnumStatus enumStatus) {
+    public static Status boatStatusFromNms(net.minecraft.world.entity.vehicle.AbstractBoat.Status enumStatus) { // Paper - remap fixes
         return switch (enumStatus) {
             default -> throw new EnumConstantNotPresentException(Status.class, enumStatus.name());
             case IN_AIR -> Status.IN_AIR;

File: paper-server/src/test/java/org/bukkit/DyeColorsTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.bukkit.support.MatcherAssert.*;
 import static org.hamcrest.Matchers.*;
 
-import net.minecraft.world.item.DyeColor;
 import org.bukkit.support.environment.Normal;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
@@ -15,7 +14,7 @@ public class DyeColorsTest {
     @EnumSource(DyeColor.class)
     public void checkColor(DyeColor dye) {
         Color color = dye.getColor();
-        int nmsColorArray = DyeColor.byId(dye.getWoolData()).getTextureDiffuseColor();
+        int nmsColorArray = net.minecraft.world.item.DyeColor.byId(dye.getWoolData()).getTextureDiffuseColor(); // Paper - remap fix
         Color nmsColor = Color.fromARGB(nmsColorArray);
         assertThat(color, is(nmsColor));
     }
@@ -24,7 +23,7 @@ public void checkColor(DyeColor dye) {
     @EnumSource(org.bukkit.DyeColor.class)
     public void checkFireworkColor(org.bukkit.DyeColor dye) {
         Color color = dye.getFireworkColor();
-        int nmsColor = DyeColor.byId(dye.getWoolData()).getFireworkColor();
+        int nmsColor = net.minecraft.world.item.DyeColor.byId(dye.getWoolData()).getFireworkColor(); // Paper - remap fix
         assertThat(color, is(Color.fromRGB(nmsColor)));
     }
 }

File: paper-server/src/test/java/org/bukkit/ParticleTest.java
Patch:
@@ -279,7 +279,7 @@ private <D extends ParticleOptions, T extends ParticleOptions> D createAndTest(P
                 Check in CraftParticle if the conversion is still correct.
                 """, bukkit.getKey()));
 
-        DataResult<Tag> encoded = assertDoesNotThrow(() -> minecraft.codec().codec().encodeStart(DynamicOpsNBT.INSTANCE, particleParam),
+        DataResult<Tag> encoded = assertDoesNotThrow(() -> minecraft.codec().codec().encodeStart(NbtOps.INSTANCE, particleParam), // Paper - remap fix
                 String.format("""
                         Could not encoded particle param for particle %s.
                         This can indicated, that the wrong particle param is created in CraftParticle.

File: paper-server/src/test/java/org/bukkit/entity/EntityTypesTest.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.stream.Collectors;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.entity.EntityType;
 import org.bukkit.support.environment.AllFeatures;
 import org.junit.jupiter.api.Test;
 
@@ -17,8 +16,8 @@ public class EntityTypesTest {
     public void testMaps() {
         Set<EntityType> allBukkit = Arrays.stream(EntityType.values()).filter((b) -> b.getName() != null).collect(Collectors.toSet());
 
-        for (EntityType<?> nms : BuiltInRegistries.ENTITY_TYPE) {
-            ResourceLocation key = EntityType.getKey(nms);
+        for (net.minecraft.world.entity.EntityType<?> nms : BuiltInRegistries.ENTITY_TYPE) { // Paper - remap fix
+            ResourceLocation key = net.minecraft.world.entity.EntityType.getKey(nms); // Paper - remap fix
 
             org.bukkit.entity.EntityType bukkit = org.bukkit.entity.EntityType.fromName(key.getPath());
             assertNotNull(bukkit, "Missing nms->bukkit " + key);

File: paper-server/src/test/java/org/bukkit/registry/RegistryConstantsTest.java
Patch:
@@ -31,17 +31,17 @@ public void testDamageType() {
 
     @Test
     public void testTrimMaterial() {
-        this.testExcessConstants(TrimMaterial.class, Registry.TRIM_MATERIAL);
+        this.testExcessConstants(TrimMaterial.class, org.bukkit.Registry.TRIM_MATERIAL); // Paper - remap fix
         this.testMissingConstants(TrimMaterial.class, Registries.TRIM_MATERIAL);
     }
 
     @Test
     public void testTrimPattern() {
-        this.testExcessConstants(TrimPattern.class, Registry.TRIM_PATTERN);
+        this.testExcessConstants(TrimPattern.class, org.bukkit.Registry.TRIM_PATTERN); // Paper - remap fix
         this.testMissingConstants(TrimPattern.class, Registries.TRIM_PATTERN);
     }
 
-    private <T extends Keyed> void testExcessConstants(Class<T> clazz, Registry<T> registry) {
+    private <T extends Keyed> void testExcessConstants(Class<T> clazz, org.bukkit.Registry<T> registry) { // Paper - remap fix
         List<NamespacedKey> excessKeys = new ArrayList<>();
 
         for (Field field : clazz.getFields()) {

File: paper-server/src/test/java/org/bukkit/registry/RegistryLoadOrderTest.java
Patch:
@@ -25,7 +25,7 @@ public class RegistryLoadOrderTest {
 
     private static boolean initInterface = false;
     private static boolean initAbstract = false;
-    private static Registry<Keyed> registry;
+    private static org.bukkit.Registry<Keyed> registry; // Paper - remap fix
 
     public static Stream<Arguments> data() {
         return Stream.of(

File: paper-server/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
Patch:
@@ -39,6 +39,9 @@ public class SpigotTimings {
 
     public static final CustomTimingsHandler playerCommandTimer = new CustomTimingsHandler("** playerCommand");
 
+    public static final CustomTimingsHandler entityActivationCheckTimer = new CustomTimingsHandler("entityActivationCheck");
+    public static final CustomTimingsHandler checkIfActiveTimer = new CustomTimingsHandler("** checkIfActive");
+
     public static final HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
     public static final HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1296,7 +1296,7 @@ public int getMinHeight() {
 
     @Override
     public int getMaxHeight() {
-        return world.getMaxY();
+        return world.getMaxY() + 1;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -569,8 +569,8 @@ public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item, Co
         Preconditions.checkArgument(loc != null, "Location cannot be null");
         Preconditions.checkArgument(item != null, "ItemStack cannot be null");
 
-        double xs = 0.5D + MathHelper.nextDouble(world.random, -0.25D, 0.25D);
-        double ys = 0.5D + MathHelper.nextDouble(world.random, -0.25D, 0.25D) - ((double) EntityTypes.ITEM.getHeight() / 2.0D);
+        double xs = MathHelper.nextDouble(world.random, -0.25D, 0.25D);
+        double ys = MathHelper.nextDouble(world.random, -0.25D, 0.25D) - ((double) EntityTypes.ITEM.getHeight() / 2.0D);
         double zs = MathHelper.nextDouble(world.random, -0.25D, 0.25D);
         loc = loc.clone().add(xs, ys, zs);
         return dropItem(loc, item, function);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -1538,7 +1538,7 @@ public EquippableComponent getEquippable() {
 
     @Override
     public void setEquippable(EquippableComponent equippable) {
-        this.equippable = (equippable == null) ? null : new CraftEquippableComponent((CraftEquippableComponent) this.equippable);
+        this.equippable = (equippable == null) ? null : new CraftEquippableComponent((CraftEquippableComponent) equippable);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -2488,7 +2488,7 @@ public <T extends Keyed> Iterable<org.bukkit.Tag<T>> getTags(String registry, Cl
                 return itemTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, pair.key())).collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_FLUIDS -> {
-                Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Fluid namespace (%s) must have fluid type", clazz.getName());
+                Preconditions.checkArgument(clazz == org.bukkit.Fluid.class, "Fluid namespace (%s) must have fluid type", clazz.getName());
                 IRegistry<FluidType> fluidTags = BuiltInRegistries.FLUID;
                 return fluidTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftFluidTag(fluidTags, pair.key())).collect(ImmutableList.toImmutableList());
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
Patch:
@@ -136,7 +136,7 @@ public void setItem(EquipmentSlot slot, ItemStack item) {
                 this.setHelmet(item);
                 break;
             default:
-                throw new IllegalArgumentException("Not implemented. This is a bug");
+                throw new IllegalArgumentException("Could not set slot " + slot + " - not a valid slot for PlayerInventory");
         }
     }
 
@@ -163,7 +163,7 @@ public ItemStack getItem(EquipmentSlot slot) {
             case HEAD:
                 return getHelmet();
             default:
-                throw new IllegalArgumentException("Not implemented. This is a bug");
+                throw new IllegalArgumentException("Could not get slot " + slot + " - not a valid slot for PlayerInventory");
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1343,7 +1343,7 @@ public int getSeaLevel() {
 
     @Override
     public boolean getKeepSpawnInMemory() {
-        return getGameRuleValue(GameRule.SPAWN_RADIUS) > 0;
+        return getGameRuleValue(GameRule.SPAWN_CHUNK_RADIUS) > 0;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBeaconView.java
Patch:
@@ -35,11 +35,11 @@ public PotionEffectType getSecondaryEffect() {
 
     @Override
     public void setPrimaryEffect(@Nullable final PotionEffectType effectType) {
-        container.setData(TileEntityBeacon.DATA_PRIMARY, ContainerBeacon.encodeEffect(CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
+        container.setData(TileEntityBeacon.DATA_PRIMARY, ContainerBeacon.encodeEffect((effectType == null) ? null : CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
     }
 
     @Override
     public void setSecondaryEffect(@Nullable final PotionEffectType effectType) {
-        container.setData(TileEntityBeacon.DATA_SECONDARY, ContainerBeacon.encodeEffect(CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
+        container.setData(TileEntityBeacon.DATA_SECONDARY, ContainerBeacon.encodeEffect((effectType == null) ? null : CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
     }
 }

File: paper-server/src/test/java/org/bukkit/PerMaterialTest.java
Patch:
@@ -62,7 +62,7 @@ public void isSolid(Material material) {
     }
 
     @ParameterizedTest
-    @EnumSource(value = Material.class, names = ".LEGACY_.*", mode = EnumSource.Mode.MATCH_NONE)
+    @EnumSource(value = Material.class, names = "LEGACY_.*", mode = EnumSource.Mode.MATCH_NONE)
     public void isEdible(Material material) {
         if (material.isBlock()) {
             assertFalse(material.isEdible());

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -958,7 +958,7 @@ boolean applicableTo(Material type) {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasItemName() || hasLocalizedName() || hasEnchants() || (lore != null) || hasCustomModelData() || hasBlockData() || hasRepairCost() || !unhandledTags.build().isEmpty() || !removedTags.isEmpty() || !persistentDataContainer.isEmpty() || hideFlag != 0 || isHideTooltip() || isUnbreakable() || hasEnchantmentGlintOverride() || isFireResistant() || hasMaxStackSize() || hasRarity() || hasFood() || hasTool() || hasDamage() || hasMaxDamage() || hasAttributeModifiers() || customTag != null);
+        return !(hasDisplayName() || hasItemName() || hasLocalizedName() || hasEnchants() || (lore != null) || hasCustomModelData() || hasBlockData() || hasRepairCost() || !unhandledTags.build().isEmpty() || !removedTags.isEmpty() || !persistentDataContainer.isEmpty() || hideFlag != 0 || isHideTooltip() || isUnbreakable() || hasEnchantmentGlintOverride() || isFireResistant() || hasMaxStackSize() || hasRarity() || hasFood() || hasTool() || hasJukeboxPlayable() || hasDamage() || hasMaxDamage() || hasAttributeModifiers() || customTag != null);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftToolComponent.java
Patch:
@@ -195,8 +195,8 @@ public CraftToolRule(ToolRule bukkit) {
         }
 
         public CraftToolRule(Map<String, Object> map) {
-            Float speed = SerializableMeta.getObject(Float.class, map, "speed", false);
-            Boolean correct = SerializableMeta.getObject(Boolean.class, map, "correct-for-drops", false);
+            Float speed = SerializableMeta.getObject(Float.class, map, "speed", true);
+            Boolean correct = SerializableMeta.getObject(Boolean.class, map, "correct-for-drops", true);
 
             HolderSet<Block> blocks = null;
             Object blocksObject = SerializableMeta.getObject(Object.class, map, "blocks", false);

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
Patch:
@@ -66,7 +66,7 @@
 
 public class ItemMetaTest extends AbstractTestingBase {
 
-    static final int MAX_FIREWORK_POWER = 127; // Please update ItemStackFireworkTest if/when this gets changed.
+    static final int MAX_FIREWORK_POWER = 255; // Please update ItemStackFireworkTest if/when this gets changed.
 
     @Test
     public void testPowerLimitExact() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftCrafterView.java
Patch:
@@ -27,6 +27,6 @@ public boolean isPowered() {
     public void setSlotDisabled(final int slot, final boolean disabled) {
         Preconditions.checkArgument(slot >= 0 && slot < 9, "Invalid slot index %s for Crafter", slot);
 
-        container.setSlotState(slot, disabled);
+        container.setSlotState(slot, !disabled);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
Patch:
@@ -258,7 +258,7 @@ public static <I extends ItemMeta> ItemMetaData<I> getItemMetaData(ItemType item
         if (itemType == ItemType.FURNACE || itemType == ItemType.CHEST
                 || itemType == ItemType.TRAPPED_CHEST || itemType == ItemType.JUKEBOX
                 || itemType == ItemType.DISPENSER || itemType == ItemType.DROPPER
-                || (itemType.hasBlockType() && Tag.SIGNS.isTagged(itemType.getBlockType().asMaterial())) || itemType == ItemType.SPAWNER
+                || (itemType.hasBlockType() && Tag.ALL_SIGNS.isTagged(itemType.getBlockType().asMaterial())) || itemType == ItemType.SPAWNER
                 || itemType == ItemType.BREWING_STAND || itemType == ItemType.ENCHANTING_TABLE
                 || itemType == ItemType.COMMAND_BLOCK || itemType == ItemType.REPEATING_COMMAND_BLOCK
                 || itemType == ItemType.CHAIN_COMMAND_BLOCK || itemType == ItemType.BEACON

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -1923,6 +1923,7 @@ public static Set<DataComponentType> getHandledTags() {
                         CraftMetaMap.MAP_COLOR.TYPE,
                         CraftMetaMap.MAP_ID.TYPE,
                         CraftMetaPotion.POTION_CONTENTS.TYPE,
+                        CraftMetaShield.BASE_COLOR.TYPE,
                         CraftMetaSkull.SKULL_PROFILE.TYPE,
                         CraftMetaSkull.NOTE_BLOCK_SOUND.TYPE,
                         CraftMetaSpawnEgg.ENTITY_TAG.TYPE,

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftJukeboxComponent.java
Patch:
@@ -35,7 +35,7 @@ public CraftJukeboxComponent(CraftJukeboxComponent jukebox) {
 
     public CraftJukeboxComponent(Map<String, Object> map) {
         String song = SerializableMeta.getObject(String.class, map, "song", false);
-        Boolean showTooltip = SerializableMeta.getObject(boolean.class, map, "show-in-tooltip", true);
+        Boolean showTooltip = SerializableMeta.getObject(Boolean.class, map, "show-in-tooltip", true);
 
         this.handle = new JukeboxPlayable(new EitherHolder<>(ResourceKey.create(Registries.JUKEBOX_SONG, MinecraftKey.parse(song))), (showTooltip != null) ? showTooltip : true);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/damage/CraftDamageSource.java
Patch:
@@ -65,7 +65,7 @@ public Location getSourceLocation() {
 
     @Override
     public boolean isIndirect() {
-        return this.getHandle().getEntity() != this.getHandle().getDamager();
+        return this.getHandle().getCausingDamager() != this.getHandle().getDamager();
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -320,7 +320,7 @@ DataComponentPatch build() {
         }
         this.damage = meta.damage;
         this.maxDamage = meta.maxDamage;
-        this.unhandledTags = meta.unhandledTags;
+        this.unhandledTags.copy(meta.unhandledTags.build());
         this.removedTags.addAll(meta.removedTags);
         this.persistentDataContainer.putAll(meta.persistentDataContainer.getRaw());
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/damage/CraftDamageSource.java
Patch:
@@ -41,7 +41,7 @@ public DamageType getDamageType() {
 
     @Override
     public org.bukkit.entity.Entity getCausingEntity() {
-        net.minecraft.world.entity.Entity entity = this.getHandle().getEntity();
+        net.minecraft.world.entity.Entity entity = this.getHandle().getCausingDamager();
         return (entity != null) ? entity.getBukkitEntity() : null;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
Patch:
@@ -244,6 +244,9 @@ public boolean generateTree(GeneratorAccessSeed access, ChunkGenerator chunkGene
                 gen = TreeFeatures.DARK_OAK;
                 break;
             case MEGA_REDWOOD:
+                gen = TreeFeatures.MEGA_SPRUCE;
+                break;
+            case MEGA_PINE:
                 gen = TreeFeatures.MEGA_PINE;
                 break;
             case TALL_BIRCH:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -591,7 +591,7 @@ static Multimap<Attribute, AttributeModifier> buildModifiers(ItemAttributeModifi
 
         String unhandled = SerializableMeta.getString(map, "unhandled", true);
         if (unhandled != null) {
-            ByteArrayInputStream buf = new ByteArrayInputStream(Base64.getDecoder().decode(internal));
+            ByteArrayInputStream buf = new ByteArrayInputStream(Base64.getDecoder().decode(unhandled));
             try {
                 NBTTagCompound unhandledTag = NBTCompressedStreamTools.readCompressed(buf, NBTReadLimiter.unlimitedHeap());
                 unhandledTags.copy(DataComponentPatch.CODEC.parse(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(DynamicOpsNBT.INSTANCE), unhandledTag).result().get());
@@ -1817,6 +1817,7 @@ public static Set<DataComponentType> getHandledTags() {
                         CraftMetaMap.MAP_ID.TYPE,
                         CraftMetaPotion.POTION_CONTENTS.TYPE,
                         CraftMetaSkull.SKULL_PROFILE.TYPE,
+                        CraftMetaSkull.NOTE_BLOCK_SOUND.TYPE,
                         CraftMetaSpawnEgg.ENTITY_TAG.TYPE,
                         CraftMetaBlockState.BLOCK_ENTITY_TAG.TYPE,
                         CraftMetaBook.BOOK_CONTENT.TYPE,

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -31,7 +31,7 @@ public static net.minecraft.world.item.ItemStack asNMSCopy(ItemStack original) {
             return net.minecraft.world.item.ItemStack.EMPTY;
         }
 
-        Item item = CraftMagicNumbers.getItem(original.getType(), original.getDurability());
+        Item item = CraftItemType.bukkitToMinecraft(original.getType());
 
         if (item == null) {
             return net.minecraft.world.item.ItemStack.EMPTY;

File: paper-server/src/test/java/org/bukkit/craftbukkit/legacy/RerouteValidationTest.java
Patch:
@@ -93,6 +93,7 @@ private Class<?> toClass(Type type) throws ClassNotFoundException {
             return Class.forName(type.getDescriptor().replace('/', '.'), false, getClass().getClassLoader());
         } else {
             return switch (type.getSort()) {
+                case Type.VOID -> void.class;
                 case Type.BOOLEAN -> boolean.class;
                 case Type.CHAR -> char.class;
                 case Type.BYTE -> byte.class;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -317,6 +317,7 @@ public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeB
 
             data.put("block_states", ChunkRegionLoader.BLOCK_STATE_CODEC.encodeStart(DynamicOpsNBT.INSTANCE, cs[i].getStates()).getOrThrow());
             sectionBlockIDs[i] = ChunkRegionLoader.BLOCK_STATE_CODEC.parse(DynamicOpsNBT.INSTANCE, data.getCompound("block_states")).getOrThrow(ChunkRegionLoader.a::new);
+            sectionEmpty[i] = cs[i].hasOnlyAir();
 
             LevelLightEngine lightengine = worldServer.getLightEngine();
             NibbleArray skyLightArray = lightengine.getLayerListener(EnumSkyBlock.SKY).getDataLayerData(SectionPosition.of(x, chunk.getSectionYFromSectionIndex(i), z)); // SPIGOT-7498: Convert section index

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java
Patch:
@@ -25,6 +25,8 @@
 
 public class FieldRename {
 
+    public static final BiFunction<NamespacedKey, ApiVersion, NamespacedKey> NONE = (namespacedKey, apiVersion) -> namespacedKey;
+
     @DoNotReroute
     public static String rename(ApiVersion apiVersion, String owner, String from) {
         if (owner == null) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
Patch:
@@ -59,7 +59,7 @@ public void setCarryingChest(boolean chest) {
 
     @Override
     public HorseInventory getInventory() {
-        return new CraftInventoryHorse(getHandle().inventory);
+        return new CraftInventoryHorse(getHandle().inventory, getHandle().getBodyArmorAccess());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
Patch:
@@ -34,7 +34,7 @@ public void setColor(Color color) {
 
     @Override
     public LlamaInventory getInventory() {
-        return new CraftInventoryLlama(getHandle().inventory);
+        return new CraftInventoryLlama(getHandle().inventory, getHandle().getBodyArmorAccess());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
Patch:
@@ -23,7 +23,7 @@ public CraftThrownPotion(CraftServer server, EntityPotion entity) {
     @Override
     public Collection<PotionEffect> getEffects() {
         ImmutableList.Builder<PotionEffect> builder = ImmutableList.builder();
-        for (MobEffect effect : getHandle().getItem().getOrDefault(DataComponents.POTION_CONTENTS, PotionContents.EMPTY).customEffects()) {
+        for (MobEffect effect : getHandle().getItem().getOrDefault(DataComponents.POTION_CONTENTS, PotionContents.EMPTY).getAllEffects()) {
             builder.add(CraftPotionUtil.toBukkit(effect));
         }
         return builder.build();

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -121,6 +121,7 @@
 import org.bukkit.GameMode;
 import org.bukkit.Keyed;
 import org.bukkit.Location;
+import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Registry;
@@ -2364,14 +2365,14 @@ public BlockData createBlockData(org.bukkit.Material material, Consumer<? super
     public BlockData createBlockData(String data) throws IllegalArgumentException {
         Preconditions.checkArgument(data != null, "data cannot be null");
 
-        return createBlockData(null, data);
+        return createBlockData((Material) null, data);
     }
 
     @Override
     public BlockData createBlockData(org.bukkit.Material material, String data) {
         Preconditions.checkArgument(material != null || data != null, "Must provide one of material or data");
 
-        return CraftBlockData.newData(material, data);
+        return CraftBlockData.newData((material != null) ? material.asBlockType() : null, data);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
Patch:
@@ -192,7 +192,7 @@ public static Material fromLegacy(MaterialData materialData, boolean itemPriorit
             }
         }
 
-        if (mappedData == null && material.isBlock()) {
+        if (mappedData == null) {
             // Try exact match first
             IBlockData iblock = materialToData.get(materialData);
             if (iblock != null) {

File: paper-server/src/test/java/org/bukkit/support/DummyServer.java
Patch:
@@ -40,7 +40,7 @@ public final class DummyServer {
 
             when(instance.getUnsafe()).then(mock -> CraftMagicNumbers.INSTANCE);
 
-            when(instance.createBlockData(any(Material.class))).then(mock -> CraftBlockData.newData(mock.getArgument(0), null));
+            when(instance.createBlockData(any(Material.class))).then(mock -> CraftBlockData.newData(((Material) mock.getArgument(0)).asBlockType(), null));
 
             when(instance.getLootTable(any())).then(mock -> new CraftLootTable(mock.getArgument(0),
                     AbstractTestingBase.DATA_PACK.fullRegistries().getLootTable(ResourceKey.create(Registries.LOOT_TABLE, CraftNamespacedKey.toMinecraft(mock.getArgument(0))))));

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -1275,7 +1275,9 @@ public boolean removeAttributeModifier(@Nonnull Attribute attribute, @Nonnull At
     public String getAsString() {
         CraftMetaItem.Applicator tag = new CraftMetaItem.Applicator();
         applyToItem(tag);
-        return tag.build().toString();
+        DataComponentPatch patch = tag.build();
+        NBTBase nbt = DataComponentPatch.CODEC.encodeStart(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(DynamicOpsNBT.INSTANCE), patch).getOrThrow();
+        return nbt.toString();
     }
 
     @Override

File: paper-server/src/test/java/org/bukkit/support/condition/EnableIfMojangServerAvailableCondition.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.mojang.authlib.yggdrasil.YggdrasilEnvironment;
 import java.net.InetAddress;
+import java.net.URI;
 import java.util.concurrent.TimeUnit;
 import org.junit.jupiter.api.extension.ConditionEvaluationResult;
 import org.junit.jupiter.api.extension.ExecutionCondition;
@@ -12,7 +13,8 @@ public class EnableIfMojangServerAvailableCondition implements ExecutionConditio
     @Override
     public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext extensionContext) {
         try {
-            InetAddress address = InetAddress.getByName(YggdrasilEnvironment.PROD.getEnvironment().servicesHost());
+            URI url = new URI(YggdrasilEnvironment.PROD.getEnvironment().servicesHost());
+            InetAddress address = InetAddress.getByName(url.getHost());
 
             if (!address.isReachable((int) TimeUnit.SECONDS.toMillis(1))) {
                 return ConditionEvaluationResult.disabled("Mojang server is not available");

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 import net.minecraft.core.Holder;
-import net.minecraft.core.component.DataComponentMap;
+import net.minecraft.core.component.DataComponentPatch;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.enchantment.EnchantmentManager;
@@ -616,7 +616,7 @@ public static boolean setItemMeta(net.minecraft.world.item.ItemStack item, ItemM
             return false;
         }
         if (CraftItemFactory.instance().equals(itemMeta, null)) {
-            item.applyComponents(DataComponentMap.EMPTY);
+            item.restorePatch(DataComponentPatch.EMPTY);
             return true;
         }
         if (!CraftItemFactory.instance().isApplicable(itemMeta, getType(item))) {
@@ -636,7 +636,7 @@ public static boolean setItemMeta(net.minecraft.world.item.ItemStack item, ItemM
             CraftMetaItem.Applicator tag = new CraftMetaItem.Applicator();
 
             ((CraftMetaItem) itemMeta).applyToItem(tag);
-            item.applyComponents(tag.build());
+            item.restorePatch(tag.build());
         }
         // SpigotCraft#463 this is required now by the Vanilla client, so mimic ItemStack constructor in ensuring it
         if (item.getItem() != null && item.getMaxDamage() > 0) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaColorableArmor.java
Patch:
@@ -18,7 +18,8 @@ public class CraftMetaColorableArmor extends CraftMetaArmor implements Colorable
             Material.LEATHER_HELMET,
             Material.LEATHER_CHESTPLATE,
             Material.LEATHER_LEGGINGS,
-            Material.LEATHER_BOOTS
+            Material.LEATHER_BOOTS,
+            Material.WOLF_ARMOR
     );
 
     private Color color = DEFAULT_LEATHER_COLOR;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftVault.java
Patch:
@@ -3,9 +3,9 @@
 import net.minecraft.world.level.block.entity.vault.VaultBlockEntity;
 import org.bukkit.Location;
 import org.bukkit.World;
-import org.bukkit.block.TrialSpawner;
+import org.bukkit.block.Vault;
 
-public class CraftVault extends CraftBlockEntityState<VaultBlockEntity> implements TrialSpawner {
+public class CraftVault extends CraftBlockEntityState<VaultBlockEntity> implements Vault {
 
     public CraftVault(World world, VaultBlockEntity tileEntity) {
         super(world, tileEntity);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
Patch:
@@ -39,7 +39,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         getOrEmpty(tag, STORED_ENCHANTMENTS).ifPresent((itemEnchantments) -> {
             enchantments = buildEnchantments(itemEnchantments);
             if (!itemEnchantments.showInTooltip) {
-                addItemFlags(ItemFlag.HIDE_POTION_EFFECTS);
+                addItemFlags(ItemFlag.HIDE_ADDITIONAL_TOOLTIP);
             }
         });
     }
@@ -54,7 +54,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     void applyToItem(CraftMetaItem.Applicator itemTag) {
         super.applyToItem(itemTag);
 
-        applyEnchantments(enchantments, itemTag, STORED_ENCHANTMENTS, ItemFlag.HIDE_POTION_EFFECTS);
+        applyEnchantments(enchantments, itemTag, STORED_ENCHANTMENTS, ItemFlag.HIDE_ADDITIONAL_TOOLTIP);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -332,7 +332,7 @@ DataComponentPatch build() {
         });
 
         getOrEmpty(tag, HIDE_ADDITIONAL_TOOLTIP).ifPresent((h) -> {
-            addItemFlags(ItemFlag.HIDE_POTION_EFFECTS);
+            addItemFlags(ItemFlag.HIDE_ADDITIONAL_TOOLTIP);
         });
         getOrEmpty(tag, HIDE_TOOLTIP).ifPresent((u) -> {
             hideTooltip = true;
@@ -724,7 +724,7 @@ void applyToItem(CraftMetaItem.Applicator itemTag) {
         }
 
         if (hideFlag != 0) {
-            if (hasItemFlag(ItemFlag.HIDE_POTION_EFFECTS)) {
+            if (hasItemFlag(ItemFlag.HIDE_ADDITIONAL_TOOLTIP)) {
                 itemTag.put(HIDE_ADDITIONAL_TOOLTIP, Unit.INSTANCE);
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java
Patch:
@@ -110,6 +110,8 @@ public static RerouteMethodData buildFromMethod(Method method) {
 
         Type targetType = Type.getType(method);
 
-        return new RerouteMethodData(methodKey, sourceDesc, sourceOwner, methodName, rerouteStatic != null, targetType, Type.getInternalName(method.getDeclaringClass()), method.getName(), arguments, rerouteReturn);
+        boolean inBukkit = !method.isAnnotationPresent(NotInBukkit.class);
+
+        return new RerouteMethodData(methodKey, sourceDesc, sourceOwner, methodName, rerouteStatic != null, targetType, Type.getInternalName(method.getDeclaringClass()), method.getName(), arguments, rerouteReturn, inBukkit);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java
Patch:
@@ -5,5 +5,5 @@
 
 public record RerouteMethodData(String source, Type sourceDesc, Type sourceOwner, String sourceName,
                                 boolean staticReroute, Type targetType, String targetOwner, String targetName,
-                                List<RerouteArgument> arguments, RerouteReturn rerouteReturn) {
+                                List<RerouteArgument> arguments, RerouteReturn rerouteReturn, boolean isInBukkit) {
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -62,6 +62,7 @@ private T createSnapshot(T tileEntity) {
 
     public void applyComponents(DataComponentMap datacomponentmap, DataComponentPatch datacomponentpatch) {
         snapshot.applyComponents(datacomponentmap, datacomponentpatch);
+        load(snapshot);
     }
 
     public DataComponentMap collectComponents() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -449,7 +449,7 @@ static Multimap<Attribute, AttributeModifier> buildModifiers(ItemAttributeModifi
     }
 
     CraftMetaItem(Map<String, Object> map) {
-        displayName = CraftChatMessage.fromJSONOrString(SerializableMeta.getString(map, NAME.BUKKIT, true));
+        displayName = CraftChatMessage.fromJSONOrString(SerializableMeta.getString(map, NAME.BUKKIT, true), true, false);
         itemName = CraftChatMessage.fromJSONOrNull(SerializableMeta.getString(map, ITEM_NAME.BUKKIT, true));
 
         Iterable<?> lore = SerializableMeta.getObject(Iterable.class, map, LORE.BUKKIT, true);

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
Patch:
@@ -221,7 +221,7 @@ public static IChatBaseComponent fromJSONOrString(String message, boolean keepNe
         return fromJSONOrString(message, false, keepNewlines);
     }
 
-    private static IChatBaseComponent fromJSONOrString(String message, boolean nullable, boolean keepNewlines) {
+    public static IChatBaseComponent fromJSONOrString(String message, boolean nullable, boolean keepNewlines) {
         if (message == null) message = "";
         if (nullable && message.isEmpty()) return null;
         IChatBaseComponent component = fromJSONOrNull(message);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -800,6 +800,7 @@ public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor, bool
 
         IChatBaseComponent[] components = CraftSign.sanitizeLines(lines);
         TileEntitySign sign = new TileEntitySign(CraftLocation.toBlockPosition(loc), Blocks.OAK_SIGN.defaultBlockState());
+        sign.setLevel(getHandle().level());
         SignText text = sign.getFrontText();
         text = text.setColor(EnumColor.byId(dyeColor.getWoolData()));
         text = text.setHasGlowingText(hasGlowingText);

File: paper-server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
Patch:
@@ -61,7 +61,7 @@ public int getStartLevel() {
 
     @Override
     public EnchantmentTarget getItemTarget() {
-        throw new UnsupportedOperationException("Method longer applicable. Use Tags instead.");
+        throw new UnsupportedOperationException("Method no longer applicable. Use Tags instead.");
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -794,7 +794,7 @@ public boolean canBreatheUnderwater() {
 
     @Override
     public EntityCategory getCategory() {
-        throw new UnsupportedOperationException("Method longer applicable. Use Tags instead.");
+        throw new UnsupportedOperationException("Method no longer applicable. Use Tags instead.");
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -32,7 +32,7 @@ protected CraftBlockEntityState(CraftBlockEntityState<T> state) {
         super(state);
         this.tileEntity = createSnapshot(state.snapshot);
         this.snapshot = tileEntity;
-        load(snapshot);
+        loadData(state.getSnapshotNBT());
     }
 
     public void refreshSnapshot() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
Patch:
@@ -5,6 +5,7 @@
 import net.minecraft.nbt.NBTTagCompound;
 import org.bukkit.NamespacedKey;
 import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * A child class of the persistent data container that recalls if it has been
@@ -31,13 +32,13 @@ public void dirty(final boolean dirty) {
     }
 
     @Override
-    public <T, Z> void set(NamespacedKey key, PersistentDataType<T, Z> type, Z value) {
+    public <T, Z> void set(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z value) {
         super.set(key, type, value);
         this.dirty(true);
     }
 
     @Override
-    public void remove(NamespacedKey key) {
+    public void remove(@NotNull NamespacedKey key) {
         super.remove(key);
         this.dirty(true);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
Patch:
@@ -16,6 +16,7 @@
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.block.CraftBiome;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
@@ -99,7 +100,7 @@ public boolean contains(Biome biome) {
     public Material getBlockType(int x, int y, int z) {
         validateChunkCoordinates(x, y, z);
 
-        return CraftMagicNumbers.getMaterial(blockids[getSectionIndex(y)].get(x, y & 0xF, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(blockids[getSectionIndex(y)].get(x, y & 0xF, z).getBlock());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
Patch:
@@ -33,13 +33,13 @@
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.block.CraftBiome;
 import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftEntityTypes;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.BlockStateListPopulator;
 import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.RandomSourceWrapper;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.AbstractHorse;
@@ -120,7 +120,7 @@ public Material getType(Location location) {
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftMagicNumbers.getMaterial(getData(x, y, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(getData(x, y, z).getBlock());
     }
 
     private IBlockData getData(int x, int y, int z) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -95,6 +95,7 @@
 import org.bukkit.craftbukkit.block.CraftBiome;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.boss.CraftDragonBattle;
 import org.bukkit.craftbukkit.entity.CraftEntity;
@@ -106,7 +107,6 @@
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.craftbukkit.util.CraftBiomeSearchResult;
 import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.CraftRayTraceResult;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
@@ -1180,7 +1180,7 @@ public FallingBlock spawnFallingBlock(Location location, org.bukkit.Material mat
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isBlock(), "Material.%s must be a block", material);
 
-        EntityFallingBlock entity = EntityFallingBlock.fall(world, BlockPosition.containing(location.getX(), location.getY(), location.getZ()), CraftMagicNumbers.getBlock(material).defaultBlockState(), SpawnReason.CUSTOM);
+        EntityFallingBlock entity = EntityFallingBlock.fall(world, BlockPosition.containing(location.getX(), location.getY(), location.getZ()), CraftBlockType.bukkitToMinecraft(material).defaultBlockState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -221,7 +221,7 @@ public static boolean setTypeAndData(GeneratorAccess world, BlockPosition positi
 
     @Override
     public Material getType() {
-        return CraftMagicNumbers.getMaterial(world.getBlockState(position).getBlock());
+        return CraftBlockType.minecraftToBukkit(world.getBlockState(position).getBlock());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
Patch:
@@ -165,13 +165,13 @@ public void setType(final Material type) {
         Preconditions.checkArgument(type.isBlock(), "Material must be a block!");
 
         if (this.getType() != type) {
-            this.data = CraftMagicNumbers.getBlock(type).defaultBlockState();
+            this.data = CraftBlockType.bukkitToMinecraft(type).defaultBlockState();
         }
     }
 
     @Override
     public Material getType() {
-        return CraftMagicNumbers.getMaterial(data.getBlock());
+        return CraftBlockType.minecraftToBukkit(data.getBlock());
     }
 
     public void setFlag(int flag) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
Patch:
@@ -11,7 +11,7 @@
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.inventory.CraftInventoryJukebox;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
 import org.bukkit.inventory.JukeboxInventory;
 
 public class CraftJukebox extends CraftBlockEntityState<TileEntityJukeBox> implements Jukebox {
@@ -68,7 +68,7 @@ public Material getPlaying() {
 
     @Override
     public void setPlaying(Material record) {
-        if (record == null || CraftMagicNumbers.getItem(record) == null) {
+        if (record == null || CraftItemType.bukkitToMinecraft(record) == null) {
             record = Material.AIR;
         }
 
@@ -122,7 +122,7 @@ public boolean startPlaying() {
 
         jukebox.isPlaying = true;
         jukebox.recordStartedTick = jukebox.tickCount;
-        getWorld().playEffect(getLocation(), Effect.RECORD_PLAY, CraftMagicNumbers.getMaterial(record.getItem()));
+        getWorld().playEffect(getLocation(), Effect.RECORD_PLAY, CraftItemType.minecraftToBukkit(record.getItem()));
         return true;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
Patch:
@@ -9,7 +9,6 @@
 import org.bukkit.World;
 import org.bukkit.block.ShulkerBox;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.Inventory;
 
 public class CraftShulkerBox extends CraftLootable<TileEntityShulkerBox> implements ShulkerBox {
@@ -38,7 +37,7 @@ public Inventory getInventory() {
 
     @Override
     public DyeColor getColor() {
-        EnumColor color = ((BlockShulkerBox) CraftMagicNumbers.getBlock(this.getType())).color;
+        EnumColor color = ((BlockShulkerBox) CraftBlockType.bukkitToMinecraft(this.getType())).color;
 
         return (color == null) ? null : DyeColor.getByWoolData((byte) color.getId());
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -102,9 +102,9 @@
 import org.bukkit.craftbukkit.entity.CraftSpellcaster;
 import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.AbstractHorse;
@@ -492,7 +492,7 @@ public static PlayerBucketFillEvent callPlayerBucketFillEvent(WorldServer world,
     private static PlayerEvent getPlayerBucketEvent(boolean isFilling, WorldServer world, EntityHuman who, BlockPosition changed, BlockPosition clicked, EnumDirection clickedFace, ItemStack itemstack, net.minecraft.world.item.Item item, EnumHand enumhand) {
         Player player = (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asNewCraftStack(item);
-        Material bucket = CraftMagicNumbers.getMaterial(itemstack.getItem());
+        Material bucket = CraftItemType.minecraftToBukkit(itemstack.getItem());
 
         CraftServer craftServer = (CraftServer) player.getServer();
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
Patch:
@@ -13,6 +13,7 @@
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.block.CraftBiome;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
@@ -95,7 +96,7 @@ public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftMagicNumbers.getMaterial(getTypeId(x, y, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(getTypeId(x, y, z).getBlock());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/OldCraftChunkData.java
Patch:
@@ -11,6 +11,7 @@
 import org.bukkit.Material;
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
@@ -82,7 +83,7 @@ public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax
 
     @Override
     public Material getType(int x, int y, int z) {
-        return CraftMagicNumbers.getMaterial(getTypeId(x, y, z).getBlock());
+        return CraftBlockType.minecraftToBukkit(getTypeId(x, y, z).getBlock());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
Patch:
@@ -19,7 +19,6 @@
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftEntityType;
 import org.bukkit.craftbukkit.util.CraftLegacy;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.ItemFactory;
@@ -465,7 +464,7 @@ public Material getSpawnEgg(EntityType type) {
             return null;
         }
 
-        return CraftMagicNumbers.getMaterial(nmsItem);
+        return CraftItemType.minecraftToBukkit(nmsItem);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
Patch:
@@ -136,7 +136,7 @@ public void setChargedProjectiles(List<ItemStack> projectiles) {
     @Override
     public void addChargedProjectile(ItemStack item) {
         Preconditions.checkArgument(item != null, "item");
-        Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftMagicNumbers.getItem(item.getType()) instanceof ItemArrow, "Item %s is not an arrow or firework rocket", item);
+        Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftItemType.bukkitToMinecraft(item.getType()) instanceof ItemArrow, "Item %s is not an arrow or firework rocket", item);
 
         if (chargedProjectiles == null) {
             chargedProjectiles = new ArrayList<>();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -59,6 +59,7 @@
 import org.bukkit.craftbukkit.Overridden;
 import org.bukkit.craftbukkit.attribute.CraftAttribute;
 import org.bukkit.craftbukkit.attribute.CraftAttributeInstance;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.ItemMetaKey.Specific;
 import org.bukkit.craftbukkit.inventory.tags.DeprecatedCustomTagContainer;
@@ -922,7 +923,7 @@ public boolean hasBlockData() {
 
     @Override
     public BlockData getBlockData(Material material) {
-        IBlockData defaultData = CraftMagicNumbers.getBlock(material).defaultBlockState();
+        IBlockData defaultData = CraftBlockType.bukkitToMinecraft(material).defaultBlockState();
         return CraftBlockData.fromData((hasBlockData()) ? ItemBlock.getBlockState(defaultData, blockData) : defaultData);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.world.item.crafting.RecipeItemStack;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.RecipeChoice;
@@ -55,7 +54,7 @@ public static RecipeChoice toBukkit(RecipeItemStack list) {
 
             List<org.bukkit.Material> choices = new ArrayList<>(list.itemStacks.length);
             for (net.minecraft.world.item.ItemStack i : list.itemStacks) {
-                choices.add(CraftMagicNumbers.getMaterial(i.getItem()));
+                choices.add(CraftItemType.minecraftToBukkit(i.getItem()));
             }
 
             return new RecipeChoice.MaterialChoice(choices);

File: paper-server/src/main/java/org/bukkit/craftbukkit/tag/CraftBlockTag.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.level.block.Block;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.block.CraftBlockType;
 
 public class CraftBlockTag extends CraftTag<Block, Material> {
 
@@ -16,7 +16,7 @@ public CraftBlockTag(IRegistry<Block> registry, TagKey<Block> tag) {
 
     @Override
     public boolean isTagged(Material item) {
-        Block block = CraftMagicNumbers.getBlock(item);
+        Block block = CraftBlockType.bukkitToMinecraft(item);
 
         // SPIGOT-6952: A Material is not necessary a block, in this case return false
         if (block == null) {
@@ -28,6 +28,6 @@ public boolean isTagged(Material item) {
 
     @Override
     public Set<Material> getValues() {
-        return getHandle().stream().map((block) -> CraftMagicNumbers.getMaterial(block.value())).collect(Collectors.toUnmodifiableSet());
+        return getHandle().stream().map((block) -> CraftBlockType.minecraftToBukkit(block.value())).collect(Collectors.toUnmodifiableSet());
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/tag/CraftItemTag.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.item.Item;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
 
 public class CraftItemTag extends CraftTag<Item, Material> {
 
@@ -16,7 +16,7 @@ public CraftItemTag(IRegistry<Item> registry, TagKey<Item> tag) {
 
     @Override
     public boolean isTagged(Material item) {
-        Item minecraft = CraftMagicNumbers.getItem(item);
+        Item minecraft = CraftItemType.bukkitToMinecraft(item);
 
         // SPIGOT-6952: A Material is not necessary an item, in this case return false
         if (minecraft == null) {
@@ -28,6 +28,6 @@ public boolean isTagged(Material item) {
 
     @Override
     public Set<Material> getValues() {
-        return getHandle().stream().map((item) -> CraftMagicNumbers.getMaterial(item.value())).collect(Collectors.toUnmodifiableSet());
+        return getHandle().stream().map((item) -> CraftItemType.minecraftToBukkit(item.value())).collect(Collectors.toUnmodifiableSet());
     }
 }

File: paper-server/src/test/java/org/bukkit/craftbukkit/block/BlockStateTest.java
Patch:
@@ -7,7 +7,6 @@
 import net.minecraft.world.level.block.ITileEntity;
 import net.minecraft.world.level.block.entity.TileEntity;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.support.AbstractTestingBase;
 import org.junit.jupiter.api.Test;
 
@@ -16,7 +15,7 @@ public class BlockStateTest extends AbstractTestingBase {
     @Test
     public void testTileEntityBlockStates() {
         for (Block block : BuiltInRegistries.BLOCK) {
-            Material material = CraftMagicNumbers.getMaterial(block);
+            Material material = CraftBlockType.minecraftToBukkit(block);
             Class<?> blockStateType = CraftBlockStates.getBlockStateType(material);
             boolean isCraftBlockEntityState = CraftBlockEntityState.class.isAssignableFrom(blockStateType);
 

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.bukkit.craftbukkit.inventory.ItemStackTest.CraftWrapper;
 import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.craftbukkit.inventory.ItemStackTest.StackWrapper;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.entity.Axolotl;
 import org.bukkit.entity.TropicalFish;
@@ -197,7 +196,7 @@ public void testBlockStateMeta() {
     public void testSpawnEggsHasMeta() {
         for (Item item : BuiltInRegistries.ITEM) {
             if (item instanceof net.minecraft.world.item.ItemMonsterEgg) {
-                Material material = CraftMagicNumbers.getMaterial(item);
+                Material material = CraftItemType.minecraftToBukkit(item);
                 CraftMetaItem baseMeta = (CraftMetaItem) Bukkit.getItemFactory().getItemMeta(material);
                 ItemMeta baseMetaItem = CraftItemStack.getItemMeta(item.getDefaultInstance());
 

File: paper-server/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
Patch:
@@ -5,7 +5,7 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.enchantment.EnchantmentSlotType;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
 import org.bukkit.support.AbstractTestingBase;
 import org.junit.jupiter.api.Test;
 
@@ -30,7 +30,7 @@ public void test() {
             assertNotNull(bukkitTarget, "No bukkit target for slot " + nmsSlot);
 
             for (Item item : BuiltInRegistries.ITEM) {
-                Material material = CraftMagicNumbers.getMaterial(item);
+                Material material = CraftItemType.minecraftToBukkit(item);
 
                 boolean nms = nmsSlot.canEnchant(item);
                 boolean bukkit = bukkitTarget.includes(material);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -876,8 +876,8 @@ public boolean hasItemFlag(ItemFlag flag) {
         return (this.hideFlag & bitModifier) == bitModifier;
     }
 
-    private byte getBitModifier(ItemFlag hideFlag) {
-        return (byte) (1 << hideFlag.ordinal());
+    private int getBitModifier(ItemFlag hideFlag) {
+        return 1 << hideFlag.ordinal();
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -137,7 +137,6 @@
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
 import org.bukkit.util.BiomeSearchResult;
 import org.bukkit.util.BoundingBox;
@@ -532,7 +531,7 @@ public <T extends AbstractArrow> T spawnArrow(Location loc, Vector velocity, flo
         EntityArrow arrow;
         if (TippedArrow.class.isAssignableFrom(clazz)) {
             arrow = EntityTypes.ARROW.create(world);
-            ((Arrow) arrow.getBukkitEntity()).setBasePotionData(new PotionData(PotionType.WATER, false, false));
+            ((Arrow) arrow.getBukkitEntity()).setBasePotionType(PotionType.WATER);
         } else if (SpectralArrow.class.isAssignableFrom(clazz)) {
             arrow = EntityTypes.SPECTRAL_ARROW.create(world);
         } else if (Trident.class.isAssignableFrom(clazz)) {
@@ -1925,7 +1924,7 @@ public StructureSearchResult locateNearestStructure(Location origin, List<Struct
             return null;
         }
 
-        return new CraftStructureSearchResult(CraftStructure.minecraftToBukkit(found.getSecond().value(), getHandle().registryAccess()), CraftLocation.toBukkit(found.getFirst(), this));
+        return new CraftStructureSearchResult(CraftStructure.minecraftToBukkit(found.getSecond().value()), CraftLocation.toBukkit(found.getFirst(), this));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -87,7 +87,6 @@
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
@@ -436,7 +435,7 @@ public <T extends Projectile> T launchProjectile(Class<? extends T> projectile,
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
                 launch = new EntityTippedArrow(world, getHandle(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW));
-                ((Arrow) launch.getBukkitEntity()).setBasePotionData(new PotionData(PotionType.WATER, false, false));
+                ((Arrow) launch.getBukkitEntity()).setBasePotionType(PotionType.WATER);
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
                 launch = new EntitySpectralArrow(world, getHandle(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.SPECTRAL_ARROW));
             } else if (Trident.class.isAssignableFrom(projectile)) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Preconditions;
 import net.minecraft.core.IRegistry;
-import net.minecraft.core.IRegistryCustom;
 import net.minecraft.core.registries.Registries;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
@@ -13,7 +12,7 @@
 
 public class CraftStructure extends Structure {
 
-    public static Structure minecraftToBukkit(net.minecraft.world.level.levelgen.structure.Structure minecraft, IRegistryCustom registryHolder) {
+    public static Structure minecraftToBukkit(net.minecraft.world.level.levelgen.structure.Structure minecraft) {
         Preconditions.checkArgument(minecraft != null);
 
         IRegistry<net.minecraft.world.level.levelgen.structure.Structure> registry = CraftRegistry.getMinecraftRegistry(Registries.STRUCTURE);

File: paper-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
Patch:
@@ -39,7 +39,6 @@
 import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
 import org.bukkit.projectiles.BlockProjectileSource;
 import org.bukkit.util.Vector;
@@ -92,7 +91,7 @@ public <T extends Projectile> T launchProjectile(Class<? extends T> projectile,
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
                 launch = new EntityTippedArrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW));
-                ((Arrow) launch.getBukkitEntity()).setBasePotionData(new PotionData(PotionType.WATER, false, false));
+                ((Arrow) launch.getBukkitEntity()).setBasePotionType(PotionType.WATER);
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
                 launch = new EntitySpectralArrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.SPECTRAL_ARROW));
             } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java
Patch:
@@ -63,7 +63,7 @@ private void destroyCopies() {
     private EntityTransformer[] entityTransformers;
 
     public CraftStructureTransformer(Cause cause, GeneratorAccessSeed generatoraccessseed, StructureManager structuremanager, Structure structure, StructureBoundingBox structureboundingbox, ChunkCoordIntPair chunkcoordintpair) {
-        AsyncStructureGenerateEvent event = new AsyncStructureGenerateEvent(structuremanager.level.getMinecraftWorld().getWorld(), !Bukkit.isPrimaryThread(), cause, CraftStructure.minecraftToBukkit(structure, structuremanager.registryAccess()), new org.bukkit.util.BoundingBox(structureboundingbox.minX(), structureboundingbox.minY(), structureboundingbox.minZ(), structureboundingbox.maxX(), structureboundingbox.maxY(), structureboundingbox.maxZ()), chunkcoordintpair.x, chunkcoordintpair.z);
+        AsyncStructureGenerateEvent event = new AsyncStructureGenerateEvent(structuremanager.level.getMinecraftWorld().getWorld(), !Bukkit.isPrimaryThread(), cause, CraftStructure.minecraftToBukkit(structure), new org.bukkit.util.BoundingBox(structureboundingbox.minX(), structureboundingbox.minY(), structureboundingbox.minZ(), structureboundingbox.maxX(), structureboundingbox.maxY(), structureboundingbox.maxZ()), chunkcoordintpair.x, chunkcoordintpair.z);
         Bukkit.getPluginManager().callEvent(event);
         this.blockTransformers = event.getBlockTransformers().values().toArray(BlockTransformer[]::new);
         this.entityTransformers = event.getEntityTransformers().values().toArray(EntityTransformer[]::new);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -93,7 +93,7 @@ public static <T extends Entity> CraftEntity getEntity(CraftServer server, T ent
         CraftEntityTypes.EntityTypeData<?, T> entityTypeData = CraftEntityTypes.getEntityTypeData(CraftEntityType.minecraftToBukkit(entity.getType()));
 
         if (entityTypeData != null) {
-            return entityTypeData.convertFunction().apply(server, entity);
+            return (CraftEntity) entityTypeData.convertFunction().apply(server, entity);
         }
 
         throw new AssertionError("Unknown entity " + (entity == null ? null : entity.getClass()));

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
Patch:
@@ -184,7 +184,7 @@ public final class CraftEntityTypes {
 
     public record EntityTypeData<E extends Entity, M extends net.minecraft.world.entity.Entity>(EntityType entityType,
                                                                                                 Class<E> entityClass,
-                                                                                                BiFunction<CraftServer, M, CraftEntity> convertFunction,
+                                                                                                BiFunction<CraftServer, M, E> convertFunction,
                                                                                                 Function<SpawnData, M> spawnFunction) {
     }
 
@@ -340,7 +340,7 @@ World minecraftWorld() {
         register(new EntityTypeData<>(EntityType.GLOW_ITEM_FRAME, GlowItemFrame.class, CraftGlowItemFrame::new, createHanging(GlowItemFrame.class, (spawnData, hangingData) -> new net.minecraft.world.entity.decoration.GlowItemFrame(spawnData.minecraftWorld(), hangingData.position(), hangingData.direction()))));
 
         // Move no rotation
-        register(new EntityTypeData<>(EntityType.ARROW, Arrow.class, CraftArrow::new, createAndMoveEmptyRot(EntityTypes.ARROW)));
+        register(new EntityTypeData<>(EntityType.ARROW, Arrow.class, CraftTippedArrow::new, createAndMoveEmptyRot(EntityTypes.ARROW)));
         register(new EntityTypeData<>(EntityType.ENDER_PEARL, EnderPearl.class, CraftEnderPearl::new, createAndMoveEmptyRot(EntityTypes.ENDER_PEARL)));
         register(new EntityTypeData<>(EntityType.THROWN_EXP_BOTTLE, ThrownExpBottle.class, CraftThrownExpBottle::new, createAndMoveEmptyRot(EntityTypes.EXPERIENCE_BOTTLE)));
         register(new EntityTypeData<>(EntityType.SPECTRAL_ARROW, SpectralArrow.class, CraftSpectralArrow::new, createAndMoveEmptyRot(EntityTypes.SPECTRAL_ARROW)));

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServerTickManager.java
Patch:
@@ -41,7 +41,7 @@ public float getTickRate() {
 
     @Override
     public void setTickRate(final float tickRate) {
-        Preconditions.checkArgument(tickRate > 1 && tickRate < 10_000, "The given tick rate must not be less than one");
+        Preconditions.checkArgument(tickRate >= 1.0F && tickRate <= 10_000.0F, "The given tick rate must not be less than 1.0 or greater than 10,000.0");
         manager.setTickRate(tickRate);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
Patch:
@@ -366,13 +366,13 @@ World minecraftWorld() {
             // We use stone instead of empty, to give the plugin developer a visual clue, that the spawn method is working,
             // and that the item stack should probably be changed.
             net.minecraft.world.item.ItemStack itemStack = new net.minecraft.world.item.ItemStack(Items.STONE);
-            EntityItem item = new EntityItem(spawnData.minecraftWorld(), spawnData.x(), spawnData.z(), spawnData.z(), itemStack);
+            EntityItem item = new EntityItem(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), itemStack);
             item.setPickUpDelay(10);
 
             return item;
         }));
         register(new EntityTypeData<>(EntityType.EXPERIENCE_ORB, ExperienceOrb.class, CraftExperienceOrb::new,
-                spawnData -> new EntityExperienceOrb(spawnData.minecraftWorld(), spawnData.x(), spawnData.z(), spawnData.z(), 0)
+                spawnData -> new EntityExperienceOrb(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), 0)
         ));
         register(new EntityTypeData<>(EntityType.AREA_EFFECT_CLOUD, AreaEffectCloud.class, CraftAreaEffectCloud::new, spawnData -> new EntityAreaEffectCloud(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
         register(new EntityTypeData<>(EntityType.EGG, Egg.class, CraftEgg::new, spawnData -> new EntityEgg(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -225,7 +225,7 @@ public int getEnchantmentLevel(Enchantment ench) {
         if (handle == null) {
             return 0;
         }
-        return EnchantmentManager.getItemEnchantmentLevel(CraftEnchantment.getRaw(ench), handle);
+        return EnchantmentManager.getItemEnchantmentLevel(CraftEnchantment.bukkitToMinecraft(ench), handle);
     }
 
     @Override

File: paper-server/src/test/java/org/bukkit/support/AbstractTestingBase.java
Patch:
@@ -62,7 +62,6 @@ public abstract class AbstractTestingBase {
         BIOMES = REGISTRY_CUSTOM.registryOrThrow(Registries.BIOME);
 
         DummyServer.setup();
-        DummyEnchantments.setup();
 
         CraftRegistry.setMinecraftRegistry(REGISTRY_CUSTOM);
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -142,7 +142,7 @@ void applyToItem(NBTTagCompound tag) {
             // SPIGOT-6558: Set initial textures
             tag.put(SKULL_OWNER.NBT, serializedProfile);
             // Fill in textures
-            PlayerProfile ownerProfile = getOwnerProfile();
+            PlayerProfile ownerProfile = new CraftPlayerProfile(profile); // getOwnerProfile may return null
             if (ownerProfile.getTextures().isEmpty()) {
                 ownerProfile.update().thenAccept((filledProfile) -> {
                     setOwnerProfile(filledProfile);

File: paper-server/src/test/java/org/bukkit/potion/PotionTest.java
Patch:
@@ -29,7 +29,7 @@ public void testEffectCompleteness() throws Throwable {
             effects.put(enumType, enumType.name());
         }
 
-        assertEquals(effects.entrySet().size(), PotionType.values().length - /* PotionTypes with no/shared Effects */ 6);
+        assertEquals(effects.entrySet().size(), PotionType.values().length - /* PotionTypes with no/shared Effects */ (6 + 22 /* There are 22 new strong / long potion types */));
     }
 
     @Test

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -534,7 +534,7 @@ static Multimap<Attribute, AttributeModifier> buildModifiers(NBTTagCompound tag,
             }
         }
 
-        Map nbtMap = SerializableMeta.getObject(Map.class, map, BUKKIT_CUSTOM_TAG.BUKKIT, true);
+        Object nbtMap = SerializableMeta.getObject(Object.class, map, BUKKIT_CUSTOM_TAG.BUKKIT, true); // We read both legacy maps and potential modern snbt strings here
         if (nbtMap != null) {
             this.persistentDataContainer.putAll((NBTTagCompound) CraftNBTTagConfigSerializer.deserialize(nbtMap));
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
Patch:
@@ -153,7 +153,7 @@ public int hashCode() {
         return hashCode;
     }
 
-    public Map<String, Object> serialize() {
-        return (Map<String, Object>) CraftNBTTagConfigSerializer.serialize(toTagCompound());
+    public String serialize() {
+        return CraftNBTTagConfigSerializer.serialize(toTagCompound());
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
Patch:
@@ -32,7 +32,7 @@ public EntityType getSpawnedType() {
     public void setSpawnedType(EntityType entityType) {
         if (entityType == null) {
             this.getSnapshot().getSpawner().spawnPotentials = SimpleWeightedRandomList.empty(); // need clear the spawnPotentials to avoid nextSpawnData being replaced later
-            this.getSnapshot().getSpawner().nextSpawnData = null;
+            this.getSnapshot().getSpawner().nextSpawnData = new MobSpawnerData();
             return;
         }
         Preconditions.checkArgument(entityType != EntityType.UNKNOWN, "Can't spawn EntityType %s from mob spawners!", entityType);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
Patch:
@@ -154,6 +154,7 @@ public static Containers getNotchInventoryType(Inventory inventory) {
                 return Containers.GRINDSTONE;
             case STONECUTTER:
                 return Containers.STONECUTTER;
+            case SMITHING:
             case SMITHING_NEW:
                 return Containers.SMITHING;
             case CREATIVE:

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
Patch:
@@ -40,7 +40,7 @@ public Objective getObjective() {
     }
 
     @Override
-    public int getScore() throws IllegalStateException {
+    public int getScore() {
         Scoreboard board = objective.checkState().board;
 
         if (board.getTrackedPlayers().contains(entry)) { // Lazy
@@ -55,12 +55,12 @@ public int getScore() throws IllegalStateException {
     }
 
     @Override
-    public void setScore(int score) throws IllegalStateException {
+    public void setScore(int score) {
         objective.checkState().board.getOrCreatePlayerScore(entry, objective.getHandle()).setScore(score);
     }
 
     @Override
-    public boolean isScoreSet() throws IllegalStateException {
+    public boolean isScoreSet() {
         Scoreboard board = objective.checkState().board;
 
         return board.getTrackedPlayers().contains(entry) && board.getPlayerScores(entry).containsKey(objective.getHandle());

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
Patch:
@@ -7,11 +7,11 @@ abstract class CraftScoreboardComponent {
         this.scoreboard = scoreboard;
     }
 
-    abstract CraftScoreboard checkState() throws IllegalStateException;
+    abstract CraftScoreboard checkState();
 
     public CraftScoreboard getScoreboard() {
         return scoreboard;
     }
 
-    abstract void unregister() throws IllegalStateException;
+    abstract void unregister();
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
Patch:
@@ -53,7 +53,7 @@ public CraftScoreboard getPlayerBoard(CraftPlayer player) {
     }
 
     // CraftBukkit method
-    public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) throws IllegalArgumentException {
+    public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) {
         Preconditions.checkArgument(bukkitScoreboard instanceof CraftScoreboard, "Cannot set player scoreboard to an unregistered Scoreboard");
 
         CraftScoreboard scoreboard = (CraftScoreboard) bukkitScoreboard;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
Patch:
@@ -46,7 +46,7 @@ public int getLineWidth() {
 
     @Override
     public void setLineWidth(int width) {
-        getHandle().setLineWidth(width);
+        getHandle().getEntityData().set(Display.TextDisplay.DATA_LINE_WIDTH_ID, width);
     }
 
     @Override
@@ -59,9 +59,9 @@ public Color getBackgroundColor() {
     @Override
     public void setBackgroundColor(Color color) {
         if (color == null) {
-            getHandle().setBackgroundColor(-1);
+            getHandle().getEntityData().set(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, -1);
         } else {
-            getHandle().setBackgroundColor(color.asARGB());
+            getHandle().getEntityData().set(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, color.asARGB());
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
Patch:
@@ -90,7 +90,7 @@ public boolean isCelebrating() {
 
     @Override
     public void setCelebrating(boolean celebrating) {
-        getHandle().setCelebrating(true);
+        getHandle().setCelebrating(celebrating);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -1820,7 +1820,7 @@ public CraftScoreboard getScoreboard() {
     public void setScoreboard(Scoreboard scoreboard) {
         Preconditions.checkArgument(scoreboard != null, "Scoreboard cannot be null");
         Preconditions.checkState(getHandle().connection != null, "Cannot set scoreboard yet (invalid player connection)");
-        Preconditions.checkState(getHandle().connection.isDisconnected(), "Cannot set scoreboard for invalid CraftPlayer (player is disconnected)");
+        Preconditions.checkState(!getHandle().connection.isDisconnected(), "Cannot set scoreboard for invalid CraftPlayer (player is disconnected)");
 
         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -695,7 +695,7 @@ public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor, bool
         if (lines == null) {
             lines = new String[4];
         }
-        Preconditions.checkArgument(lines.length < 4, "lines (%s) must be lower than 4", lines.length);
+        Preconditions.checkArgument(lines.length >= 4, "Must have at least 4 lines (%s)", lines.length);
 
         if (getHandle().connection == null) return;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -747,7 +747,7 @@ public int getTicksLived() {
 
     @Override
     public void setTicksLived(int value) {
-        Preconditions.checkArgument(value > 0, "Age value (%s) must be positive", value);
+        Preconditions.checkArgument(value > 0, "Age value (%s) must be greater than 0", value);
         getHandle().tickCount = value;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -84,7 +84,7 @@ public ItemStack[] getContents() {
 
     @Override
     public void setContents(ItemStack[] items) {
-        Preconditions.checkArgument(getSize() < items.length, "Invalid inventory size (%s); expected %s or less", items.length, getSize());
+        Preconditions.checkArgument(items.length <= getSize(), "Invalid inventory size (%s); expected %s or less", items.length, getSize());
 
         for (int i = 0; i < getSize(); i++) {
             if (i >= items.length) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -32,7 +32,7 @@ public int getSize() {
 
     @Override
     public void setContents(ItemStack[] items) {
-        Preconditions.checkArgument(getSize() <= items.length, "Invalid inventory size (%s); expected %s or less", items.length, getSize());
+        Preconditions.checkArgument(items.length <= getSize(), "Invalid inventory size (%s); expected %s or less", items.length, getSize());
         setContents(items[0], Arrays.copyOfRange(items, 1, items.length));
     }
 
@@ -96,7 +96,7 @@ public ItemStack getResult() {
 
     @Override
     public void setMatrix(ItemStack[] contents) {
-        Preconditions.checkArgument(getMatrixInventory().getContainerSize() <= contents.length, "Invalid inventory size (%s); expected %s or less", contents.length, getMatrixInventory().getContainerSize());
+        Preconditions.checkArgument(contents.length <= getMatrixInventory().getContainerSize(), "Invalid inventory size (%s); expected %s or less", contents.length, getMatrixInventory().getContainerSize());
 
         for (int i = 0; i < getMatrixInventory().getContainerSize(); i++) {
             if (i < contents.length) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
Patch:
@@ -48,7 +48,7 @@ public Inventory getRightSide() {
 
     @Override
     public void setContents(ItemStack[] items) {
-        Preconditions.checkArgument(getInventory().getContainerSize() >= items.length, "Invalid inventory size (%s); expected %s or less", items.length, getInventory().getContainerSize());
+        Preconditions.checkArgument(items.length <= getInventory().getContainerSize(), "Invalid inventory size (%s); expected %s or less", items.length, getInventory().getContainerSize());
         ItemStack[] leftItems = new ItemStack[left.getSize()], rightItems = new ItemStack[right.getSize()];
         System.arraycopy(items, 0, leftItems, 0, Math.min(left.getSize(), items.length));
         left.setContents(leftItems);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -2222,7 +2222,7 @@ public BlockData createBlockData(String data) throws IllegalArgumentException {
 
     @Override
     public BlockData createBlockData(org.bukkit.Material material, String data) {
-        Preconditions.checkArgument(material != null, "Material cannot be null");
+        Preconditions.checkArgument(material != null || data != null, "Must provide one of material or data");
 
         return CraftBlockData.newData(material, data);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -1611,8 +1611,7 @@ public static EntityPotionEffectEvent callEntityPotionEffectChangeEvent(EntityLi
         PotionEffect bukkitOldEffect = (oldEffect == null) ? null : CraftPotionUtil.toBukkit(oldEffect);
         PotionEffect bukkitNewEffect = (newEffect == null) ? null : CraftPotionUtil.toBukkit(newEffect);
 
-        Preconditions.checkState(bukkitOldEffect != null, "Old and new potion is null");
-        Preconditions.checkState(bukkitNewEffect != null, "New potion effect is null");
+        Preconditions.checkState(bukkitOldEffect != null || bukkitNewEffect != null, "Old and new potion effect are both null");
 
         EntityPotionEffectEvent event = new EntityPotionEffectEvent((LivingEntity) entity.getBukkitEntity(), bukkitOldEffect, bukkitNewEffect, cause, action, willOverride);
         Bukkit.getPluginManager().callEvent(event);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1202,7 +1202,6 @@ public DedicatedServer getServer() {
     @Override
     public World getWorld(String name) {
         Preconditions.checkArgument(name != null, "name cannot be null");
-        Preconditions.checkArgument(!name.isBlank(), "name cannot be empty");
 
         return worlds.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
Patch:
@@ -224,7 +224,7 @@ private boolean commandInIgnoredPlugin(Command command, Set<String> ignoredPlugi
 
     @Override
     public void registerHelpTopicFactory(Class commandClass, HelpTopicFactory factory) {
-        Preconditions.checkArgument(Command.class.isAssignableFrom(commandClass) && CommandExecutor.class.isAssignableFrom(commandClass), "commandClass (%s) must implement either Command or CommandExecutor", commandClass.getName());
+        Preconditions.checkArgument(Command.class.isAssignableFrom(commandClass) || CommandExecutor.class.isAssignableFrom(commandClass), "commandClass (%s) must implement either Command or CommandExecutor", commandClass.getName());
         topicFactoryMap.put(commandClass, factory);
     }
 

File: paper-server/src/main/java/com/mojang/brigadier/CommandDispatcher.java
Patch:
@@ -232,7 +232,6 @@ public int execute(final ParseResults<S> parse) throws CommandSyntaxException {
                 if (child != null) {
                     forked |= context.isForked();
                     if (child.hasNodes()) {
-                        foundCommand = true;
                         final RedirectModifier<S> modifier = context.getRedirectModifier();
                         if (modifier == null) {
                             if (next == null) {
@@ -249,6 +248,8 @@ public int execute(final ParseResults<S> parse) throws CommandSyntaxException {
                                     for (final S source : results) {
                                         next.add(child.copyFor(source));
                                     }
+                                } else {
+                                    foundCommand = true;
                                 }
                             } catch (final CommandSyntaxException ex) {
                                 consumer.onCommandComplete(context, false, 0);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
Patch:
@@ -109,7 +109,7 @@ public static IChatBaseComponent[] sanitizeLines(String[] lines) {
 
         for (int i = 0; i < 4; i++) {
             if (i < lines.length && lines[i] != null) {
-                components[i] = CraftChatMessage.fromString(lines[i])[0];
+                components[i] = IChatBaseComponent.literal("").append(CraftChatMessage.fromString(lines[i])[0]); // SPIGOT-7372: Vanilla wants a literal first
             } else {
                 components[i] = IChatBaseComponent.empty();
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
Patch:
@@ -87,8 +87,8 @@ public void setColor(DyeColor color) {
 
     @Override
     public void applyTo(T sign) {
-        front.applyLegacyStringToSignSide();
-        back.applyLegacyStringToSignSide();
+        getSnapshot().setText(front.applyLegacyStringToSignSide(), true);
+        getSnapshot().setText(back.applyLegacyStringToSignSide(), false);
 
         super.applyTo(sign);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
Patch:
@@ -106,13 +106,13 @@ public void setDefaultBackground(boolean defaultBackground) {
     }
 
     @Override
-    public TextAligment getAlignment() {
+    public TextAlignment getAlignment() {
         Display.TextDisplay.Align nms = Display.TextDisplay.getAlign(getHandle().getFlags());
-        return TextAligment.valueOf(nms.name());
+        return TextAlignment.valueOf(nms.name());
     }
 
     @Override
-    public void setAlignment(TextAligment alignment) {
+    public void setAlignment(TextAlignment alignment) {
         Preconditions.checkArgument(alignment != null, "Alignment cannot be null");
 
         switch (alignment) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -17,6 +17,7 @@
 import net.minecraft.world.level.block.entity.TileEntityDispenser;
 import net.minecraft.world.level.block.entity.TileEntityDropper;
 import net.minecraft.world.level.block.entity.TileEntityFurnace;
+import net.minecraft.world.level.block.entity.TileEntityJukeBox;
 import net.minecraft.world.level.block.entity.TileEntityLectern;
 import net.minecraft.world.level.block.entity.TileEntityShulkerBox;
 import net.minecraft.world.level.block.entity.TileEntitySmoker;
@@ -502,6 +503,8 @@ public InventoryType getType() {
             return InventoryType.STONECUTTER;
         } else if (inventory instanceof BlockComposter.ContainerEmpty || inventory instanceof BlockComposter.ContainerInput || inventory instanceof BlockComposter.ContainerOutput) {
             return InventoryType.COMPOSTER;
+        } else if (inventory instanceof TileEntityJukeBox) {
+            return InventoryType.JUKEBOX;
         } else if (this instanceof CraftInventorySmithingNew) {
             return InventoryType.SMITHING_NEW;
         } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -1484,7 +1484,7 @@ public static PrepareGrindstoneEvent callPrepareGrindstoneEvent(InventoryView vi
     public static PrepareSmithingEvent callPrepareSmithingEvent(InventoryView view, ItemStack item) {
         PrepareSmithingEvent event = new PrepareSmithingEvent(view, CraftItemStack.asCraftMirror(item).clone());
         event.getView().getPlayer().getServer().getPluginManager().callEvent(event);
-        event.getInventory().setItem(2, event.getResult());
+        event.getInventory().setResult(event.getResult());
         return event;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
Patch:
@@ -38,7 +38,6 @@
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.phys.AxisAlignedBB;
 import net.minecraft.world.phys.Vec3D;
-import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTickAccess;
 import net.minecraft.world.ticks.TickListEmpty;
 
@@ -121,7 +120,7 @@ public void levelEvent(EntityHuman entityhuman, int i, BlockPosition blockpositi
 
     @Override
     public void gameEvent(GameEvent gameevent, Vec3D vec3d, GameEvent.a gameevent_a) {
-        throw new UnsupportedOperationException("Not supported yet.");
+        // Used by BlockComposter
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
Patch:
@@ -377,7 +377,8 @@ public String getItemTranslationKey(Material material) {
 
     @Override
     public String getTranslationKey(EntityType entityType) {
-        return EntityTypes.byString(entityType.name()).map(EntityTypes::getDescriptionId).orElseThrow();
+        Preconditions.checkArgument(entityType.getName() != null, "Invalid name of EntityType %s for translation key", entityType);
+        return EntityTypes.byString(entityType.getName()).map(EntityTypes::getDescriptionId).orElseThrow();
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -90,8 +90,8 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
                 int amp = effect.getByte(AMPLIFIER.NBT);
                 int duration = effect.getInt(DURATION.NBT);
                 boolean ambient = effect.getBoolean(AMBIENT.NBT);
-                boolean particles = tag.contains(SHOW_PARTICLES.NBT, CraftMagicNumbers.NBT.TAG_BYTE) ? effect.getBoolean(SHOW_PARTICLES.NBT) : true;
-                boolean icon = tag.contains(SHOW_ICON.NBT, CraftMagicNumbers.NBT.TAG_BYTE) ? effect.getBoolean(SHOW_ICON.NBT) : particles;
+                boolean particles = effect.contains(SHOW_PARTICLES.NBT, CraftMagicNumbers.NBT.TAG_BYTE) ? effect.getBoolean(SHOW_PARTICLES.NBT) : true;
+                boolean icon = effect.contains(SHOW_ICON.NBT, CraftMagicNumbers.NBT.TAG_BYTE) ? effect.getBoolean(SHOW_ICON.NBT) : particles;
                 customEffects.add(new PotionEffect(type, duration, amp, ambient, particles, icon));
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/tag/CraftFluidTag.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.tag;
 
-import java.util.Collections;
 import java.util.Set;
 import java.util.stream.Collectors;
 import net.minecraft.core.IRegistry;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
Patch:
@@ -3,7 +3,7 @@
 import org.bukkit.block.data.type.Leaves;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 
-public class CraftLeaves extends CraftBlockData implements Leaves {
+public abstract class CraftLeaves extends CraftBlockData implements Leaves {
 
     private static final net.minecraft.world.level.block.state.properties.BlockStateInteger DISTANCE = getInteger("distance");
     private static final net.minecraft.world.level.block.state.properties.BlockStateBoolean PERSISTENT = getBoolean("persistent");

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCreativeCategory.java
Patch:
@@ -12,8 +12,7 @@ public final class CraftCreativeCategory {
             .put(CreativeModeTab.TAB_DECORATIONS, CreativeCategory.DECORATIONS)
             .put(CreativeModeTab.TAB_REDSTONE, CreativeCategory.REDSTONE)
             .put(CreativeModeTab.TAB_TRANSPORTATION, CreativeCategory.TRANSPORTATION)
-            .put(CreativeModeTab.TAB_MISC, CreativeCategory.MISC) // Interchangeable in NMS
-            .put(CreativeModeTab.TAB_MATERIALS, CreativeCategory.MISC) // Interchangeable in NMS
+            .put(CreativeModeTab.TAB_MISC, CreativeCategory.MISC) // Interchangeable with TAB_MATERIALS, same instance
             .put(CreativeModeTab.TAB_FOOD, CreativeCategory.FOOD)
             .put(CreativeModeTab.TAB_TOOLS, CreativeCategory.TOOLS)
             .put(CreativeModeTab.TAB_COMBAT, CreativeCategory.COMBAT)

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
Patch:
@@ -218,7 +218,7 @@ public BlockState getBlockState() {
         if (blockEntityTag != null) {
             switch (material) {
                 case SHIELD:
-                    blockEntityTag.putString("id", "banner");
+                    blockEntityTag.putString("id", "minecraft:banner");
                     break;
                 case SHULKER_BOX:
                 case WHITE_SHULKER_BOX:
@@ -237,11 +237,11 @@ public BlockState getBlockState() {
                 case GREEN_SHULKER_BOX:
                 case RED_SHULKER_BOX:
                 case BLACK_SHULKER_BOX:
-                    blockEntityTag.putString("id", "shulker_box");
+                    blockEntityTag.putString("id", "minecraft:shulker_box");
                     break;
                 case BEE_NEST:
                 case BEEHIVE:
-                    blockEntityTag.putString("id", "beehive");
+                    blockEntityTag.putString("id", "minecraft:beehive");
                     break;
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1034,7 +1034,7 @@ public World createWorld(WorldCreator creator) {
         WorldSettings worldSettings;
         // See MinecraftServer.a(String, String, long, WorldType, JsonElement)
         if (worlddata == null) {
-            DedicatedServerProperties.a properties = new DedicatedServerProperties.a(Objects.toString(creator.seed()), ChatDeserializer.parse(creator.generatorSettings()), creator.generateStructures(), creator.type().name().toLowerCase(Locale.ROOT));
+            DedicatedServerProperties.a properties = new DedicatedServerProperties.a(Objects.toString(creator.seed()), ChatDeserializer.parse((creator.generatorSettings().isEmpty()) ? "{}" : creator.generatorSettings()), creator.generateStructures(), creator.type().name().toLowerCase(Locale.ROOT));
 
             GeneratorSettings generatorsettings = GeneratorSettings.create(console.registryAccess(), properties);
             worldSettings = new WorldSettings(name, EnumGamemode.byId(getDefaultGameMode().getValue()), hardcore, EnumDifficulty.EASY, false, new GameRules(), console.datapackconfiguration);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
Patch:
@@ -122,7 +122,7 @@ public final int getHighestBlockYAt(int x, int z) {
         Preconditions.checkState(hmap != null, "ChunkSnapshot created without height map. Please call getSnapshot with includeMaxblocky=true");
         validateChunkCoordinates(x, 0, z);
 
-        return hmap.getFirstAvailable(x, z);
+        return hmap.getHighestTaken(x, z);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1501,7 +1501,7 @@ public int getSpawnLimit(SpawnCategory spawnCategory) {
         Validate.notNull(spawnCategory, "SpawnCategory cannot be null");
         Validate.isTrue(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory." + spawnCategory + " are not supported.");
 
-        int limit = spawnCategoryLimit.getInt(spawnCategory);
+        int limit = spawnCategoryLimit.getOrDefault(spawnCategory, -1);
         if (limit < 0) {
             limit = server.getSpawnLimit(spawnCategory);
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -1384,6 +1384,7 @@ public static Set<String> getHandledTags() {
                         ATTRIBUTES_UUID_LOW.NBT,
                         ATTRIBUTES_SLOT.NBT,
                         CraftMetaMap.MAP_SCALING.NBT,
+                        CraftMetaMap.MAP_COLOR.NBT,
                         CraftMetaMap.MAP_ID.NBT,
                         CraftMetaPotion.POTION_EFFECTS.NBT,
                         CraftMetaPotion.DEFAULT_POTION.NBT,

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
Patch:
@@ -47,7 +47,7 @@ public int getStrength() {
     public void setStrength(int strength) {
         Preconditions.checkArgument(1 <= strength && strength <= 5, "strength must be [1,5]");
         if (strength == getStrength()) return;
-        getHandle().setStrength(strength);
+        getHandle().setStrengthPublic(strength);
         getHandle().createInventory();
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
Patch:
@@ -34,7 +34,9 @@ private void run(String[] argv) {
 
             String repoDir = System.getProperty("bundlerRepoDir", "bundler");
             Path outputDir = Paths.get(repoDir).toAbsolutePath();
-            Files.createDirectories(outputDir);
+            if (!Files.isDirectory(outputDir)) {
+                Files.createDirectories(outputDir);
+            }
 
             System.out.println("Unbundling libraries to " + outputDir);
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1033,8 +1033,7 @@ public World createWorld(WorldCreator creator) {
 
         boolean hardcore = creator.hardcore();
 
-        RegistryReadOps<NBTBase> registryreadops = RegistryReadOps.createAndLoad(DynamicOpsNBT.INSTANCE, console.resources.getResourceManager(), console.registryHolder);
-        WorldDataServer worlddata = (WorldDataServer) worldSession.getDataTag(registryreadops, console.datapackconfiguration);
+        WorldDataServer worlddata = (WorldDataServer) worldSession.getDataTag(console.registryreadops, console.datapackconfiguration);
 
         WorldSettings worldSettings;
         // See MinecraftServer.a(String, String, long, WorldType, JsonElement)

File: paper-server/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
Patch:
@@ -8,7 +8,7 @@ public class CraftPotionEffectType extends PotionEffectType {
     private final MobEffectList handle;
 
     public CraftPotionEffectType(MobEffectList handle) {
-        super(MobEffectList.getId(handle));
+        super(MobEffectList.getId(handle), org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(net.minecraft.core.IRegistry.MOB_EFFECT.getKey(handle)));
         this.handle = handle;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -734,7 +734,7 @@ public Biome getBiome(int x, int z) {
 
     @Override
     public void setBiome(int x, int z, Biome bio) {
-        for (int y = 0; y < getMaxHeight(); y++) {
+        for (int y = getMinHeight(); y < getMaxHeight(); y++) {
             setBiome(x, y, z, bio);
         }
     }
@@ -746,7 +746,7 @@ public void setBiome(int x, int y, int z, BiomeBase bb) {
             net.minecraft.world.level.chunk.Chunk chunk = this.world.getChunkAt(pos);
 
             if (chunk != null) {
-                chunk.setBiome(x, y, z, bb);
+                chunk.setBiome(x >> 2, y >> 2, z >> 2, bb);
 
                 chunk.setUnsaved(true); // SPIGOT-2890
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -66,7 +66,7 @@ public Biome getBiome(int x, int z) {
 
         @Override
         public void setBiome(int x, int z, Biome bio) {
-            for (int y = 0; y < world.getWorld().getMaxHeight(); y += 4) {
+            for (int y = world.getWorld().getMinHeight(); y < world.getWorld().getMaxHeight(); y += 4) {
                 setBiome(x, y, z, bio);
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
Patch:
@@ -214,7 +214,7 @@ public Biome getBiome(Location location) {
 
     @Override
     public Biome getBiome(int x, int y, int z) {
-        return CraftBlock.biomeBaseToBiome(getHandle().registryAccess().registryOrThrow(IRegistry.BIOME_REGISTRY), getHandle().getNoiseBiome(x, y, z));
+        return CraftBlock.biomeBaseToBiome(getHandle().registryAccess().registryOrThrow(IRegistry.BIOME_REGISTRY), getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -306,6 +306,6 @@ public Climate.Sampler climateSampler() {
 
     @Override
     protected Codec<? extends net.minecraft.world.level.chunk.ChunkGenerator> codec() {
-        throw new UnsupportedOperationException("Cannot serialize CustomChunkGenerator");
+        return Codec.unit(null);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -280,7 +280,7 @@ static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean null
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
 
     private NBTTagCompound internalTag;
-    private final Map<String, NBTBase> unhandledTags = new HashMap<String, NBTBase>();
+    final Map<String, NBTBase> unhandledTags = new HashMap<String, NBTBase>(); // Visible for testing only
     private CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
 
     private int version = CraftMagicNumbers.INSTANCE.getDataVersion(); // Internal use only
@@ -1259,7 +1259,7 @@ ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Obje
             try {
                 ByteArrayOutputStream buf = new ByteArrayOutputStream();
                 NBTCompressedStreamTools.writeCompressed(internal, buf);
-                builder.put("internal", Base64.getEncoder().encode(buf.toByteArray()));
+                builder.put("internal", Base64.getEncoder().encodeToString(buf.toByteArray()));
             } catch (IOException ex) {
                 Logger.getLogger(CraftMetaItem.class.getName()).log(Level.SEVERE, null, ex);
             }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Map;
 import java.util.UUID;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.nbt.NBTTagString;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -148,6 +149,7 @@ public void testCorrectType() {
 
     private CraftMetaItem createComplexItemMeta() {
         CraftMetaItem itemMeta = (CraftMetaItem) createNewItemMeta();
+        itemMeta.unhandledTags.put("unhandled-test", NBTTagString.valueOf("test"));
         itemMeta.setDisplayName("Item Display Name");
 
         itemMeta.getCustomTagContainer().setCustomTag(requestKey("custom-long"), ItemTagType.LONG, 4L); //Add random primitive values

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -82,7 +82,7 @@ protected void applyTo(T tileEntity) {
     }
 
     protected boolean isApplicable(TileEntity tileEntity) {
-        return this.tileEntity.getClass() == tileEntity.getClass();
+        return tileEntity != null && this.tileEntity.getClass() == tileEntity.getClass();
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
Patch:
@@ -23,7 +23,7 @@ public CraftBeacon(World world, TileEntityBeacon tileEntity) {
 
     @Override
     public Collection<LivingEntity> getEntitiesInRange() {
-        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't get entities during world generation");
+        ensureNoWorldGeneration();
 
         TileEntity tileEntity = this.getTileEntityFromWorld();
         if (tileEntity instanceof TileEntityBeacon) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
Patch:
@@ -60,7 +60,7 @@ public void setMaxEntities(int max) {
 
     @Override
     public List<Bee> releaseEntities() {
-        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't release entities during world generation");
+        ensureNoWorldGeneration();
 
         List<Bee> bees = new ArrayList<>();
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
Patch:
@@ -37,10 +37,8 @@ public Inventory getBlockInventory() {
 
     @Override
     public Inventory getInventory() {
-        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't get inventory during world generation, use getBlockInventory() instead");
-
         CraftInventory inventory = (CraftInventory) this.getBlockInventory();
-        if (!isPlaced()) {
+        if (!isPlaced() || isWorldGeneration()) {
             return inventory;
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
Patch:
@@ -47,10 +47,8 @@ public BlockProjectileSource getBlockProjectileSource() {
 
     @Override
     public boolean dispense() {
-        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't dispense during world generation");
-
+        ensureNoWorldGeneration();
         Block block = getBlock();
-
         if (block.getType() == Material.DISPENSER) {
             CraftWorld world = (CraftWorld) this.getWorld();
             BlockDispenser dispense = (BlockDispenser) Blocks.DISPENSER;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
Patch:
@@ -34,10 +34,8 @@ public Inventory getInventory() {
 
     @Override
     public void drop() {
-        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't drop during world generation");
-
+        ensureNoWorldGeneration();
         Block block = getBlock();
-
         if (block.getType() == Material.DROPPER) {
             CraftWorld world = (CraftWorld) this.getWorld();
             BlockDropper drop = (BlockDropper) Blocks.DROPPER;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
Patch:
@@ -81,9 +81,8 @@ public void stopPlaying() {
 
     @Override
     public boolean eject() {
-        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't eject during world generation");
+        ensureNoWorldGeneration();
 
-        requirePlaced();
         TileEntity tileEntity = this.getTileEntityFromWorld();
         if (!(tileEntity instanceof TileEntityJukeBox)) return false;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftLectern.java
Patch:
@@ -42,7 +42,7 @@ public Inventory getInventory() {
     public boolean update(boolean force, boolean applyPhysics) {
         boolean result = super.update(force, applyPhysics);
 
-        if (result && this.isPlaced() && this.getType() == Material.LECTERN && getWorldHandle() instanceof net.minecraft.world.level.World) {
+        if (result && this.getType() == Material.LECTERN && getWorldHandle() instanceof net.minecraft.world.level.World) {
             BlockLectern.a(this.world.getHandle(), this.getPosition(), this.getHandle());
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftStructureBlock.java
Patch:
@@ -180,7 +180,7 @@ protected void applyTo(TileEntityStructure tileEntity) {
         // Ensure block type is correct
         if (access instanceof net.minecraft.world.level.World) {
             tileEntity.setUsageMode(tileEntity.getUsageMode());
-        } else {
+        } else if (access != null) {
             // Custom handle during world generation
             // From TileEntityStructure#setUsageMode(BlockPropertyStructureMode)
             net.minecraft.world.level.block.state.IBlockData data = access.getType(this.getPosition());

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -6,7 +6,7 @@
 import org.bukkit.block.TileState;
 import org.bukkit.persistence.PersistentDataContainer;
 
-public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState implements TileState {
+public abstract class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState implements TileState {
 
     private final T tileEntity;
     private final T snapshot;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
Patch:
@@ -29,7 +29,6 @@ public boolean setFacingDirection(BlockFace face, boolean force) {
         EnumDirection dir = hanging.getDirection();
         switch (face) {
             case SOUTH:
-            default:
                 getHandle().setDirection(EnumDirection.SOUTH);
                 break;
             case WEST:
@@ -41,6 +40,8 @@ public boolean setFacingDirection(BlockFace face, boolean force) {
             case EAST:
                 getHandle().setDirection(EnumDirection.EAST);
                 break;
+            default:
+                throw new IllegalArgumentException(String.format("%s is not a valid facing direction", face));
         }
         if (!force && !getHandle().generation && !hanging.survives()) {
             // Revert since it doesn't fit

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
Patch:
@@ -26,6 +26,8 @@ public boolean setFacingDirection(BlockFace face, boolean force) {
         EnumDirection oldDir = hanging.getDirection();
         EnumDirection newDir = CraftBlock.blockFaceToNotch(face);
 
+        Preconditions.checkArgument(newDir != null, "%s is not a valid facing direction", face);
+
         getHandle().setDirection(newDir);
         if (!force && !getHandle().generation && !hanging.survives()) {
             hanging.setDirection(oldDir);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -9,6 +9,7 @@
 import net.minecraft.world.item.enchantment.EnchantmentManager;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
 import org.bukkit.craftbukkit.util.CraftLegacy;
@@ -190,7 +191,7 @@ public void addUnsafeEnchantment(Enchantment ench, int level) {
         for (int i = 0; i < size; i++) {
             NBTTagCompound tag = (NBTTagCompound) list.get(i);
             String id = tag.getString(ENCHANTMENTS_ID.NBT);
-            if (id.equals(ench.getKey().toString())) {
+            if (ench.getKey().equals(NamespacedKey.fromString(id))) {
                 tag.setShort(ENCHANTMENTS_LVL.NBT, (short) level);
                 return;
             }
@@ -242,7 +243,7 @@ public int removeEnchantment(Enchantment ench) {
         for (int i = 0; i < size; i++) {
             NBTTagCompound enchantment = (NBTTagCompound) list.get(i);
             String id = enchantment.getString(ENCHANTMENTS_ID.NBT);
-            if (id.equals(ench.getKey().toString())) {
+            if (ench.getKey().equals(NamespacedKey.fromString(id))) {
                 index = i;
                 level = 0xffff & enchantment.getShort(ENCHANTMENTS_LVL.NBT);
                 break;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
Patch:
@@ -271,7 +271,7 @@ public void setBlockData(Location location, BlockData blockData) {
 
     @Override
     public void setBlockData(int x, int y, int z, BlockData blockData) {
-        getHandle().setTypeAndData(new BlockPosition(x, y, z), ((CraftBlockData) blockData).getState(), 3);
+        CraftBlock.at(getHandle(), new BlockPosition(x, y, z)).setTypeAndData(((CraftBlockData) blockData).getState(), true);
     }
 
     @Override
@@ -295,6 +295,7 @@ public boolean generateTree(Location location, Random random, TreeType treeType,
         BlockPosition pos = new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ());
         BlockStateListPopulator populator = new BlockStateListPopulator(getHandle());
         boolean result = generateTree(populator, getHandle().getMinecraftWorld().getChunkProvider().generator, pos, random, treeType);
+        populator.refreshTiles();
 
         for (BlockState blockState : populator.getList()) {
             if (consumer != null) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
Patch:
@@ -94,7 +94,7 @@ public void saveEntities() {
         for (net.minecraft.world.entity.Entity entity : entities) {
             if (entity.isAlive()) {
                 // check if entity is still in region or if it got teleported outside it
-                Preconditions.checkState(isInRegion((int) entity.locX(), (int) entity.locY(), (int) entity.locZ()), "Entity %s is not in the region", entity);
+                Preconditions.checkState(region.contains(entity.locX(), entity.locY(), entity.locZ()), "Entity %s is not in the region", entity);
                 access.addEntity(entity);
             }
         }
@@ -111,7 +111,7 @@ public int getBuffer() {
 
     @Override
     public boolean isInRegion(Location location) {
-        return isInRegion(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+        return region.contains(location.getX(), location.getY(), location.getZ());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftHeightMap.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.bukkit.HeightMap;
 
-final class CraftHeightMap {
+public final class CraftHeightMap {
 
     private CraftHeightMap() {
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
+import com.google.common.base.Preconditions;
 import java.util.ArrayList;
 import java.util.Collection;
 import net.minecraft.world.ChestLock;
@@ -27,6 +28,8 @@ public CraftBeacon(final Material material, final TileEntityBeacon te) {
 
     @Override
     public Collection<LivingEntity> getEntitiesInRange() {
+        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't get entities during world generation");
+
         TileEntity tileEntity = this.getTileEntityFromWorld();
         if (tileEntity instanceof TileEntityBeacon) {
             TileEntityBeacon beacon = (TileEntityBeacon) tileEntity;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
Patch:
@@ -65,6 +65,8 @@ public void setMaxEntities(int max) {
 
     @Override
     public List<Bee> releaseEntities() {
+        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't release entities during world generation");
+
         List<Bee> bees = new ArrayList<>();
 
         if (isPlaced()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -22,8 +22,7 @@ public CraftBlockEntityState(Block block, Class<T> tileEntityClass) {
         this.tileEntityClass = tileEntityClass;
 
         // get tile entity from block:
-        CraftWorld world = (CraftWorld) this.getWorld();
-        this.tileEntity = tileEntityClass.cast(world.getHandle().getTileEntity(this.getPosition()));
+        this.tileEntity = tileEntityClass.cast(getWorldHandle().getTileEntity(this.getPosition()));
         Preconditions.checkState(this.tileEntity != null, "Tile is null, asynchronous access? %s", block);
 
         // copy tile entity data:
@@ -74,7 +73,7 @@ protected T getSnapshot() {
     protected TileEntity getTileEntityFromWorld() {
         requirePlaced();
 
-        return ((CraftWorld) this.getWorld()).getHandle().getTileEntity(this.getPosition());
+        return getWorldHandle().getTileEntity(this.getPosition());
     }
 
     // gets the NBT data of the TileEntity represented by this block state

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.world.level.block.BlockDispenser;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.TileEntityDispenser;
@@ -49,6 +50,8 @@ public BlockProjectileSource getBlockProjectileSource() {
 
     @Override
     public boolean dispense() {
+        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't dispense during world generation");
+
         Block block = getBlock();
 
         if (block.getType() == Material.DISPENSER) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.world.level.block.BlockDropper;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.TileEntityDropper;
@@ -36,6 +37,8 @@ public Inventory getInventory() {
 
     @Override
     public void drop() {
+        Preconditions.checkState(getWorldHandle() instanceof net.minecraft.world.level.World, "Can't drop during world generation");
+
         Block block = getBlock();
 
         if (block.getType() == Material.DROPPER) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftLectern.java
Patch:
@@ -46,7 +46,7 @@ public Inventory getInventory() {
     public boolean update(boolean force, boolean applyPhysics) {
         boolean result = super.update(force, applyPhysics);
 
-        if (result && this.isPlaced() && this.getType() == Material.LECTERN) {
+        if (result && this.isPlaced() && this.getType() == Material.LECTERN && getWorldHandle() instanceof net.minecraft.world.level.World) {
             BlockLectern.a(this.world.getHandle(), this.getPosition(), this.getHandle());
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
Patch:
@@ -48,7 +48,7 @@ public DyeColor getColor() {
     @Override
     public void open() {
         requirePlaced();
-        if (!getTileEntity().opened) {
+        if (!getTileEntity().opened && getWorldHandle() instanceof net.minecraft.world.level.World) {
             World world = getTileEntity().getWorld();
             world.playBlockAction(getPosition(), getTileEntity().getBlock().getBlock(), 1, 1);
             world.playSound(null, getPosition(), SoundEffects.SHULKER_BOX_OPEN, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
@@ -59,7 +59,7 @@ public void open() {
     @Override
     public void close() {
         requirePlaced();
-        if (getTileEntity().opened) {
+        if (getTileEntity().opened && getWorldHandle() instanceof net.minecraft.world.level.World) {
             World world = getTileEntity().getWorld();
             world.playBlockAction(getPosition(), getTileEntity().getBlock().getBlock(), 1, 0);
             world.playSound(null, getPosition(), SoundEffects.SHULKER_BOX_OPEN, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
Patch:
@@ -42,7 +42,7 @@ public boolean setFacingDirection(BlockFace face, boolean force) {
                 getHandle().setDirection(EnumDirection.EAST);
                 break;
         }
-        if (!force && !hanging.survives()) {
+        if (!force && !getHandle().generation && !hanging.survives()) {
             // Revert since it doesn't fit
             hanging.setDirection(dir);
             return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.world.entity.EntityInsentient;
 import org.bukkit.Bukkit;
 import org.bukkit.NamespacedKey;
@@ -16,6 +17,8 @@ public CraftMob(CraftServer server, EntityInsentient entity) {
 
     @Override
     public void setTarget(LivingEntity target) {
+        Preconditions.checkState(!getHandle().generation, "Cannot set target during world generation");
+
         EntityInsentient entity = getHandle();
         if (target == null) {
             entity.setGoalTarget(null, null, false);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
Patch:
@@ -32,7 +32,7 @@ public boolean setArt(Art art, boolean force) {
         Paintings oldArt = painting.motive;
         painting.motive = CraftArt.BukkitToNotch(art);
         painting.setDirection(painting.getDirection());
-        if (!force && !painting.survives()) {
+        if (!force && !getHandle().generation && !painting.survives()) {
             // Revert painting since it doesn't fit
             painting.motive = oldArt;
             painting.setDirection(painting.getDirection());

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.world.entity.projectile.EntityShulkerBullet;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Entity;
@@ -35,6 +36,8 @@ public org.bukkit.entity.Entity getTarget() {
 
     @Override
     public void setTarget(org.bukkit.entity.Entity target) {
+        Preconditions.checkState(!getHandle().generation, "Cannot set target during world generation");
+
         getHandle().setTarget(target == null ? null : ((CraftEntity) target).getHandle());
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
Patch:
@@ -89,6 +89,7 @@ public boolean sleep(Location location) {
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
         Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
+        Preconditions.checkState(!getHandle().generation, "Cannot sleep during world generation");
 
         BlockPosition position = new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ());
         IBlockData iblockdata = getHandle().level.getType(position);
@@ -103,6 +104,7 @@ public boolean sleep(Location location) {
     @Override
     public void wakeup() {
         Preconditions.checkState(isSleeping(), "Cannot wakeup if not sleeping");
+        Preconditions.checkState(!getHandle().generation, "Cannot wakeup during world generation");
 
         getHandle().entityWakeup();
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -183,8 +183,9 @@ public void setBlockData(BlockData data, boolean applyPhysics) {
     }
 
     public boolean setTypeAndData(final IBlockData blockData, final boolean applyPhysics) {
+        IBlockData old = getNMS();
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
-        if (getNMS().isTileEntity()) { // SPIGOT-3725 always remove old tile entity
+        if (old.isTileEntity() && blockData.getBlock() != old.getBlock()) { // SPIGOT-3725 remove old tile entity if block changes
             // SPIGOT-4612: faster - just clear tile
             if (world instanceof net.minecraft.world.level.World) {
                 ((net.minecraft.world.level.World) world).removeTileEntity(position);
@@ -196,7 +197,6 @@ public boolean setTypeAndData(final IBlockData blockData, final boolean applyPhy
         if (applyPhysics) {
             return world.setTypeAndData(position, blockData, 3);
         } else {
-            IBlockData old = world.getType(position);
             boolean success = world.setTypeAndData(position, blockData, 2 | 16 | 1024); // NOTIFY | NO_OBSERVER | NO_PLACE (custom)
             if (success) {
                 world.getMinecraftWorld().notify(

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
Patch:
@@ -57,7 +57,7 @@ public void sendMessage(String message) {
     }
 
     @Override
-    public void sendMessage(String[] messages) {
+    public void sendMessage(String... messages) {
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -222,7 +222,7 @@ public void sendMessage(String message) {
     }
 
     @Override
-    public void sendMessage(String[] messages) {
+    public void sendMessage(String... messages) {
         for (String message : messages) {
             sendMessage(message);
         }
@@ -236,7 +236,7 @@ public void sendMessage(UUID sender, String message) {
     }
 
     @Override
-    public void sendMessage(UUID sender, String[] messages) {
+    public void sendMessage(UUID sender, String... messages) {
         for (String message : messages) {
             sendMessage(sender, message);
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
Patch:
@@ -74,7 +74,7 @@ public void close() {
         if (getTileEntity().openersCounter.opened) {
             IBlockData block = getTileEntity().getBlock();
             getTileEntity().getWorld().playBlockAction(getPosition(), block.getBlock(), 1, 0);
-            TileEntityChest.playOpenSound(getTileEntity().getWorld(), getPosition(), block, SoundEffects.CHEST_OPEN);
+            TileEntityChest.playOpenSound(getTileEntity().getWorld(), getPosition(), block, SoundEffects.CHEST_CLOSE);
         }
         getTileEntity().openersCounter.opened = false;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
Patch:
@@ -22,6 +22,6 @@ public EntityType getType() {
 
     @Override
     public String toString() {
-        return "CraftGlowItemFrame";
+        return "CraftGlowItemFrame{item=" + getItem() + ", rotation=" + getRotation() + "}";
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
Patch:
@@ -264,6 +264,7 @@ private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         case PUFFERFISH_BUCKET:
         case SALMON_BUCKET:
         case ITEM_FRAME:
+        case GLOW_ITEM_FRAME:
         case PAINTING:
             return meta instanceof CraftMetaEntityTag ? meta : new CraftMetaEntityTag(meta);
         case COMPASS:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -533,6 +533,7 @@ public static ItemMeta getItemMeta(net.minecraft.world.item.ItemStack item) {
             case PUFFERFISH_BUCKET:
             case SALMON_BUCKET:
             case ITEM_FRAME:
+            case GLOW_ITEM_FRAME:
             case PAINTING:
                 return new CraftMetaEntityTag(item.getTag());
             case COMPASS:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java
Patch:
@@ -69,6 +69,7 @@ boolean applicableTo(Material type) {
             case PUFFERFISH_BUCKET:
             case SALMON_BUCKET:
             case ITEM_FRAME:
+            case GLOW_ITEM_FRAME:
             case PAINTING:
                 return true;
             default:

File: paper-server/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
Patch:
@@ -114,7 +114,7 @@ public BarColor getColor() {
     @Override
     public void setColor(BarColor color) {
         handle.color = convertColor(color);
-        handle.sendUpdate(PacketPlayOutBoss::createUpdatePropertiesPacket);
+        handle.sendUpdate(PacketPlayOutBoss::createUpdateStylePacket);
     }
 
     @Override
@@ -125,7 +125,7 @@ public BarStyle getStyle() {
     @Override
     public void setStyle(BarStyle style) {
         handle.overlay = convertStyle(style);
-        handle.sendUpdate(PacketPlayOutBoss::createUpdatePropertiesPacket);
+        handle.sendUpdate(PacketPlayOutBoss::createUpdateStylePacket);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -8,6 +8,7 @@
 import net.minecraft.world.inventory.InventoryCrafting;
 import net.minecraft.world.inventory.InventoryEnderChest;
 import net.minecraft.world.inventory.InventoryMerchant;
+import net.minecraft.world.level.block.BlockComposter;
 import net.minecraft.world.level.block.entity.IHopper;
 import net.minecraft.world.level.block.entity.TileEntityBarrel;
 import net.minecraft.world.level.block.entity.TileEntityBlastFurnace;
@@ -496,6 +497,8 @@ public InventoryType getType() {
             return InventoryType.GRINDSTONE;
         } else if (this instanceof CraftInventoryStonecutter) {
             return InventoryType.STONECUTTER;
+        } else if (inventory instanceof BlockComposter.ContainerEmpty || inventory instanceof BlockComposter.ContainerInput || inventory instanceof BlockComposter.ContainerOutput) {
+            return InventoryType.COMPOSTER;
         } else {
             return InventoryType.CHEST;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -824,7 +824,6 @@ public void reload() {
 
         pluginManager.clearPlugins();
         commandMap.clearCommands();
-        resetRecipes();
         reloadData();
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -129,6 +129,7 @@
 import org.bukkit.craftbukkit.util.CraftRayTraceResult;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.AbstractHorse;
+import org.bukkit.entity.AbstractSkeleton;
 import org.bukkit.entity.AbstractVillager;
 import org.bukkit.entity.Ambient;
 import org.bukkit.entity.AreaEffectCloud;
@@ -1590,12 +1591,12 @@ public net.minecraft.world.entity.Entity createEntity(Location location, Class<?
                 } else {
                     entity = EntityTypes.HORSE.a(world);
                 }
-            } else if (Skeleton.class.isAssignableFrom(clazz)) {
+            } else if (AbstractSkeleton.class.isAssignableFrom(clazz)) {
                 if (Stray.class.isAssignableFrom(clazz)) {
                     entity = EntityTypes.STRAY.a(world);
                 } else if (WitherSkeleton.class.isAssignableFrom(clazz)) {
                     entity = EntityTypes.WITHER_SKELETON.a(world);
-                } else {
+                } else if (Skeleton.class.isAssignableFrom(clazz)) {
                     entity = EntityTypes.SKELETON.a(world);
                 }
             } else if (Slime.class.isAssignableFrom(clazz)) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -98,6 +98,7 @@
 import net.minecraft.world.entity.monster.EntityRavager;
 import net.minecraft.world.entity.monster.EntityShulker;
 import net.minecraft.world.entity.monster.EntitySilverfish;
+import net.minecraft.world.entity.monster.EntitySkeleton;
 import net.minecraft.world.entity.monster.EntitySkeletonAbstract;
 import net.minecraft.world.entity.monster.EntitySkeletonStray;
 import net.minecraft.world.entity.monster.EntitySkeletonWither;
@@ -272,7 +273,7 @@ else if (entity instanceof EntityMonster) {
                     else if (entity instanceof EntitySkeletonAbstract) {
                         if (entity instanceof EntitySkeletonStray) { return new CraftStray(server, (EntitySkeletonStray) entity); }
                         else if (entity instanceof EntitySkeletonWither) { return new CraftWitherSkeleton(server, (EntitySkeletonWither) entity); }
-                        else { return new CraftSkeleton(server, (EntitySkeletonAbstract) entity); }
+                        else if (entity instanceof EntitySkeleton){ return new CraftSkeleton(server, (EntitySkeleton) entity); }
                     }
                     else if (entity instanceof EntityBlaze) { return new CraftBlaze(server, (EntityBlaze) entity); }
                     else if (entity instanceof EntityWitch) { return new CraftWitch(server, (EntityWitch) entity); }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftStray.java
Patch:
@@ -6,7 +6,7 @@
 import org.bukkit.entity.Skeleton.SkeletonType;
 import org.bukkit.entity.Stray;
 
-public class CraftStray extends CraftSkeleton implements Stray {
+public class CraftStray extends CraftAbstractSkeleton implements Stray {
 
     public CraftStray(CraftServer server, EntitySkeletonStray entity) {
         super(server, entity);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkeleton.java
Patch:
@@ -6,7 +6,7 @@
 import org.bukkit.entity.Skeleton.SkeletonType;
 import org.bukkit.entity.WitherSkeleton;
 
-public class CraftWitherSkeleton extends CraftSkeleton implements WitherSkeleton {
+public class CraftWitherSkeleton extends CraftAbstractSkeleton implements WitherSkeleton {
 
     public CraftWitherSkeleton(CraftServer server, EntitySkeletonWither entity) {
         super(server, entity);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBundle.java
Patch:
@@ -116,7 +116,7 @@ public List<ItemStack> getItems() {
 
     @Override
     public void setItems(List<ItemStack> items) {
-        items = null;
+        this.items = null;
 
         if (items == null) {
             return;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -928,7 +928,7 @@ public void setOp(boolean value) {
 
     @Override
     public void setGlowing(boolean flag) {
-        getHandle().setGlowingTag(true);
+        getHandle().setGlowingTag(flag);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
Patch:
@@ -164,8 +164,8 @@ public RenderData render(CraftPlayer player) {
             byte[] buf = canvas.getBuffer();
             for (int i = 0; i < buf.length; ++i) {
                 byte color = buf[i];
-                // There are 208 valid color id's, 0 -> 127 and -128 -> -49
-                if (color >= 0 || color <= -21) render.buffer[i] = color;
+                // There are 248 valid color id's, 0 -> 127 and -128 -> -9
+                if (color >= 0 || color <= -9) render.buffer[i] = color;
             }
 
             for (int i = 0; i < canvas.getCursors().size(); ++i) {

File: paper-server/src/test/java/org/bukkit/map/MapTest.java
Patch:
@@ -34,7 +34,7 @@ public void testColors() {
                     int mr = (r * modi) / 255;
                     int mg = (g * modi) / 255;
                     int mb = (b * modi) / 255;
-                    logger.log(Level.WARNING, "Missing color: c({0}, {1}, {2})", new Object[]{mr, mg, mb});
+                    logger.log(Level.WARNING, "Missing color (check CraftMapView#render): c({0}, {1}, {2})", new Object[]{mr, mg, mb});
                 }
                 fail = true;
             } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
Patch:
@@ -223,6 +223,7 @@ private void setupSlots(IInventory top, PlayerInventory bottom, EntityHuman enti
         if (delegate != null) {
             this.lastSlots = delegate.lastSlots;
             this.slots = delegate.slots;
+            this.remoteSlots = delegate.remoteSlots;
         }
 
         // SPIGOT-4598 - we should still delegate the shift click handler

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
+import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Set;
@@ -526,7 +527,7 @@ public boolean teleport(org.bukkit.entity.Entity destination, TeleportCause caus
 
     @Override
     public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
-        List<Entity> notchEntityList = entity.level.getEntities(entity, entity.getBoundingBox().grow(x, y, z), null);
+        List<Entity> notchEntityList = entity.level.getEntities(entity, entity.getBoundingBox().grow(x, y, z), Predicates.alwaysTrue());
         List<org.bukkit.entity.Entity> bukkitEntityList = new java.util.ArrayList<org.bukkit.entity.Entity>(notchEntityList.size());
 
         for (Entity e : notchEntityList) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit;
 
 import com.google.common.base.Preconditions;
+import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
@@ -1102,7 +1103,7 @@ public Collection<Entity> getNearbyEntities(BoundingBox boundingBox, Predicate<E
         Validate.notNull(boundingBox, "Bounding box is null!");
 
         AxisAlignedBB bb = new AxisAlignedBB(boundingBox.getMinX(), boundingBox.getMinY(), boundingBox.getMinZ(), boundingBox.getMaxX(), boundingBox.getMaxY(), boundingBox.getMaxZ());
-        List<net.minecraft.world.entity.Entity> entityList = getHandle().getEntities((net.minecraft.world.entity.Entity) null, bb, null);
+        List<net.minecraft.world.entity.Entity> entityList = getHandle().getEntities((net.minecraft.world.entity.Entity) null, bb, Predicates.alwaysTrue());
         List<Entity> bukkitEntityList = new ArrayList<org.bukkit.entity.Entity>(entityList.size());
 
         for (net.minecraft.world.entity.Entity entity : entityList) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.minecraft.sounds.SoundCategory;
 import net.minecraft.sounds.SoundEffects;
+import net.minecraft.world.item.EnumColor;
 import net.minecraft.world.level.World;
 import net.minecraft.world.level.block.BlockShulkerBox;
 import net.minecraft.world.level.block.entity.TileEntityShulkerBox;
@@ -39,9 +40,9 @@ public Inventory getInventory() {
 
     @Override
     public DyeColor getColor() {
-        net.minecraft.world.level.block.Block block = CraftMagicNumbers.getBlock(this.getType());
+        EnumColor color = ((BlockShulkerBox) CraftMagicNumbers.getBlock(this.getType())).color;
 
-        return DyeColor.getByWoolData((byte) ((BlockShulkerBox) block).color.getColorIndex());
+        return (color == null) ? null : DyeColor.getByWoolData((byte) color.getColorIndex());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
Patch:
@@ -40,7 +40,9 @@ public Fluid getFluid(BlockPosition bp) {
     public boolean setTypeAndData(BlockPosition position, IBlockData data, int flag) {
         CraftBlockState state = CraftBlockState.getBlockState(world, position, flag);
         state.setData(data);
-        list.put(position, state);
+        // remove first to keep insertion order
+        list.remove(position);
+        list.put(position.immutableCopy(), state);
         return true;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -734,10 +734,10 @@ public boolean generateTree(Location loc, TreeType type) {
             ((BlockChorusFlower) Blocks.CHORUS_FLOWER).a(world, pos, rand, 8);
             return true;
         case CRIMSON_FUNGUS:
-            gen = BiomeDecoratorGroups.CRIMSON_FUNGI;
+            gen = BiomeDecoratorGroups.CRIMSON_FUNGI_PLANTED;
             break;
         case WARPED_FUNGUS:
-            gen = BiomeDecoratorGroups.WARPED_FUNGI;
+            gen = BiomeDecoratorGroups.WARPED_FUNGI_PLANTED;
             break;
         case TREE:
         default:

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -195,7 +195,7 @@ public void sendRawMessage(String message) {
         if (getHandle().playerConnection == null) return;
 
         for (IChatBaseComponent component : CraftChatMessage.fromString(message)) {
-            getHandle().playerConnection.sendPacket(new PacketPlayOutChat(component, ChatMessageType.CHAT, SystemUtils.b));
+            getHandle().playerConnection.sendPacket(new PacketPlayOutChat(component, ChatMessageType.SYSTEM, SystemUtils.b));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
Patch:
@@ -50,8 +50,8 @@ public int getMaxWaitTime() {
     @Override
     public void setMaxWaitTime(int maxWaitTime) {
         EntityFishingHook hook = getHandle();
-        Validate.isTrue(maxWaitTime >= 0 && maxWaitTime >= this.getMinWaitTime(), "The maximum wait time should higher than 0 and the minimum wait time.");
-        hook.minWaitTime = maxWaitTime;
+        Validate.isTrue(maxWaitTime >= 0 && maxWaitTime >= this.getMinWaitTime(), "The maximum wait time should be higher than or equal to 0 and the minimum wait time.");
+        hook.maxWaitTime = maxWaitTime;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -720,14 +720,14 @@ public boolean isSleepingIgnored() {
 
     @Override
     public Location getBedSpawnLocation() {
-        World world = getHandle().server.getWorldServer(getHandle().getSpawnDimension()).getWorld();
+        WorldServer world = getHandle().server.getWorldServer(getHandle().getSpawnDimension());
         BlockPosition bed = getHandle().getSpawn();
 
         if (world != null && bed != null) {
-            Optional<Vec3D> spawnLoc = EntityHuman.getBed(((CraftWorld) world).getHandle(), bed, getHandle().getSpawnAngle(), getHandle().isSpawnForced(), true);
+            Optional<Vec3D> spawnLoc = EntityHuman.getBed(world, bed, getHandle().getSpawnAngle(), getHandle().isSpawnForced(), true);
             if (spawnLoc.isPresent()) {
                 Vec3D vec = spawnLoc.get();
-                return new Location(world, vec.x, vec.y, vec.z);
+                return new Location(world.getWorld(), vec.x, vec.y, vec.z);
             }
         }
         return null;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
Patch:
@@ -75,6 +75,7 @@ private LootTableInfo convertContext(LootContext context) {
         WorldServer handle = ((CraftWorld) loc.getWorld()).getHandle();
 
         LootTableInfo.Builder builder = new LootTableInfo.Builder(handle);
+        builder.set(LootContextParameters.ORIGIN, new Vec3D(loc.getX(), loc.getY(), loc.getZ()));
         if (getHandle() != LootTable.EMPTY) {
             // builder.luck(context.getLuck());
 

File: paper-server/src/main/java/com/mojang/brigadier/tree/CommandNode.java
Patch:
@@ -71,8 +71,8 @@ public RedirectModifier<S> getRedirectModifier() {
         return modifier;
     }
 
-    public boolean canUse(final S source) {
-        // CraftBukkit start
+    // CraftBukkit start
+    public synchronized boolean canUse(final S source) {
         if (source instanceof CommandListenerWrapper) {
             try {
                 ((CommandListenerWrapper) source).currentCommand = this;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
Patch:
@@ -3,11 +3,13 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import java.util.function.Predicate;
+import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BiomeStorage;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.DataPaletteBlock;
 import net.minecraft.server.HeightMap;
 import net.minecraft.server.IBlockData;
+import net.minecraft.server.IRegistry;
 import org.bukkit.ChunkSnapshot;
 import org.bukkit.Material;
 import org.bukkit.block.Biome;
@@ -128,7 +130,7 @@ public final Biome getBiome(int x, int y, int z) {
         Preconditions.checkState(biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
         CraftChunk.validateChunkCoordinates(x, y, z);
 
-        return CraftBlock.biomeBaseToBiome(biome.getBiome(x >> 2, y >> 2, z >> 2));
+        return CraftBlock.biomeBaseToBiome((IRegistry<BiomeBase>) biome.g, biome.getBiome(x >> 2, y >> 2, z >> 2));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -67,12 +67,12 @@ public void setBiome(int x, int z, Biome bio) {
 
         @Override
         public Biome getBiome(int x, int y, int z) {
-            return CraftBlock.biomeBaseToBiome(biome.getBiome(x >> 2, y >> 2, z >> 2));
+            return CraftBlock.biomeBaseToBiome((IRegistry<BiomeBase>) biome.g, biome.getBiome(x >> 2, y >> 2, z >> 2));
         }
 
         @Override
         public void setBiome(int x, int y, int z, Biome bio) {
-            biome.setBiome(x >> 2, y >> 2, z >> 2, CraftBlock.biomeToBiomeBase(bio));
+            biome.setBiome(x >> 2, y >> 2, z >> 2, CraftBlock.biomeToBiomeBase((IRegistry<BiomeBase>) biome.g, bio));
         }
     }
 

File: paper-server/src/test/java/org/bukkit/BiomeTest.java
Patch:
@@ -13,14 +13,14 @@ public class BiomeTest extends AbstractTestingBase {
     @Test
     public void testBukkitToMinecraft() {
         for (Biome biome : Biome.values()) {
-            Assert.assertNotNull("No NMS mapping for " + biome, CraftBlock.biomeToBiomeBase(biome));
+            Assert.assertNotNull("No NMS mapping for " + biome, CraftBlock.biomeToBiomeBase(RegistryGeneration.WORLDGEN_BIOME, biome));
         }
     }
 
     @Test
     public void testMinecraftToBukkit() {
         for (Object biome : RegistryGeneration.WORLDGEN_BIOME) {
-            Assert.assertNotNull("No Bukkit mapping for " + biome, CraftBlock.biomeBaseToBiome((BiomeBase) biome));
+            Assert.assertNotNull("No Bukkit mapping for " + biome, CraftBlock.biomeBaseToBiome(RegistryGeneration.WORLDGEN_BIOME, (BiomeBase) biome));
         }
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlastFurnace.java
Patch:
@@ -5,7 +5,7 @@
 import org.bukkit.block.BlastFurnace;
 import org.bukkit.block.Block;
 
-public class CraftBlastFurnace extends CraftFurnace implements BlastFurnace {
+public class CraftBlastFurnace extends CraftFurnace<TileEntityBlastFurnace> implements BlastFurnace {
 
     public CraftBlastFurnace(Block block) {
         super(block, TileEntityBlastFurnace.class);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
Patch:
@@ -8,7 +8,7 @@
 import org.bukkit.craftbukkit.inventory.CraftInventoryFurnace;
 import org.bukkit.inventory.FurnaceInventory;
 
-public class CraftFurnace<T extends TileEntityFurnace> extends CraftContainer<T> implements Furnace {
+public abstract class CraftFurnace<T extends TileEntityFurnace> extends CraftContainer<T> implements Furnace {
 
     public CraftFurnace(Block block, Class<T> tileEntityClass) {
         super(block, tileEntityClass);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnaceFurnace.java
Patch:
@@ -4,7 +4,7 @@
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 
-public class CraftFurnaceFurnace extends CraftFurnace {
+public class CraftFurnaceFurnace extends CraftFurnace<TileEntityFurnaceFurnace> {
 
     public CraftFurnaceFurnace(Block block) {
         super(block, TileEntityFurnaceFurnace.class);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSmoker.java
Patch:
@@ -5,7 +5,7 @@
 import org.bukkit.block.Block;
 import org.bukkit.block.Smoker;
 
-public class CraftSmoker extends CraftFurnace implements Smoker {
+public class CraftSmoker extends CraftFurnace<TileEntitySmoker> implements Smoker {
 
     public CraftSmoker(Block block) {
         super(block, TileEntitySmoker.class);

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.List;
 import java.util.Random;
-import java.util.concurrent.ThreadLocalRandom;
 import java.util.function.Predicate;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BiomeBase;
@@ -71,7 +70,7 @@ public IChunkProvider getChunkProvider() {
 
     @Override
     public Random getRandom() {
-        return ThreadLocalRandom.current();
+        throw new UnsupportedOperationException("Not supported yet.");
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -135,7 +135,6 @@
 import net.minecraft.server.EntityZombie;
 import net.minecraft.server.EntityZombieHusk;
 import net.minecraft.server.EntityZombieVillager;
-import net.minecraft.server.EnumChatFormat;
 import net.minecraft.server.IChatBaseComponent;
 import net.minecraft.server.NBTTagCompound;
 import org.bukkit.EntityEffect;
@@ -782,7 +781,7 @@ public void sendMessage(String[] messages) {
 
     @Override
     public String getName() {
-        return CraftChatMessage.fromComponent(getHandle().getDisplayName(), EnumChatFormat.WHITE);
+        return CraftChatMessage.fromComponent(getHandle().getDisplayName());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -35,7 +35,6 @@
 import net.minecraft.server.Entity;
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityPlayer;
-import net.minecraft.server.EnumChatFormat;
 import net.minecraft.server.EnumColor;
 import net.minecraft.server.EnumGamemode;
 import net.minecraft.server.IChatBaseComponent;
@@ -220,7 +219,7 @@ public void setDisplayName(final String name) {
 
     @Override
     public String getPlayerListName() {
-        return getHandle().listName == null ? getName() : CraftChatMessage.fromComponent(getHandle().listName, EnumChatFormat.WHITE);
+        return getHandle().listName == null ? getName() : CraftChatMessage.fromComponent(getHandle().listName);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
Patch:
@@ -127,7 +127,7 @@ void applyToItem(NBTTagCompound itemData, boolean handlePages) {
             if (hasPages()) {
                 NBTTagList list = new NBTTagList();
                 for (IChatBaseComponent page : pages) {
-                    list.add(NBTTagString.a(page == null ? "" : page.getLegacyString()));
+                    list.add(NBTTagString.a(page == null ? "" : CraftChatMessage.fromComponent(page)));
                 }
                 itemData.set(BOOK_PAGES.NBT, list);
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.ref.WeakReference;
 import java.util.Arrays;
 import java.util.Collection;
-import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BiomeStorage;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
@@ -286,7 +285,7 @@ public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeB
 
         BiomeStorage biome = null;
 
-        if (includeBiome|| includeBiomeTempRain) {
+        if (includeBiome || includeBiomeTempRain) {
             biome = chunk.getBiomeIndex().b();
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
Patch:
@@ -12,7 +12,7 @@
 public class CraftEffect {
     public static <T> int getDataValue(Effect effect, T data) {
         int datavalue;
-        switch(effect) {
+        switch (effect) {
         case VILLAGER_PLANT_GROW:
             datavalue = (Integer) data;
             break;
@@ -24,7 +24,7 @@ public static <T> int getDataValue(Effect effect, T data) {
             datavalue = Item.getId(CraftMagicNumbers.getItem((Material) data));
             break;
         case SMOKE:
-            switch((BlockFace) data) { // TODO: Verify (Where did these values come from...?)
+            switch ((BlockFace) data) { // TODO: Verify (Where did these values come from...?)
             case SOUTH_EAST:
                 datavalue = 0;
                 break;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftFluidCollisionMode.java
Patch:
@@ -3,7 +3,7 @@
 import net.minecraft.server.RayTrace.FluidCollisionOption;
 import org.bukkit.FluidCollisionMode;
 
-public class CraftFluidCollisionMode {
+public final class CraftFluidCollisionMode {
 
     private CraftFluidCollisionMode() {}
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
Patch:
@@ -18,7 +18,7 @@
 public class CraftProfileBanList implements org.bukkit.BanList {
     private final GameProfileBanList list;
 
-    public CraftProfileBanList(GameProfileBanList list){
+    public CraftProfileBanList(GameProfileBanList list) {
         this.list = list;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
Patch:
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit;
 
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
 import java.util.function.Function;
-import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableList;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.EntityRaider;
 import net.minecraft.server.World;

File: paper-server/src/main/java/org/bukkit/craftbukkit/Main.java
Patch:
@@ -156,8 +156,8 @@ public static void main(String[] args) {
 
             try {
                 // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
-                String jline_UnsupportedTerminal = new String(new char[] {'j','l','i','n','e','.','U','n','s','u','p','p','o','r','t','e','d','T','e','r','m','i','n','a','l'});
-                String jline_terminal = new String(new char[] {'j','l','i','n','e','.','t','e','r','m','i','n','a','l'});
+                String jline_UnsupportedTerminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+                String jline_terminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
 
                 useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
 
@@ -173,7 +173,6 @@ public static void main(String[] args) {
                     System.setProperty(jline.TerminalFactory.JLINE_TERMINAL, jline.UnsupportedTerminal.class.getName());
                 }
 
-
                 if (options.has("noconsole")) {
                     useConsole = false;
                 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
Patch:
@@ -37,7 +37,7 @@ public void load(TileEntitySkull skull) {
     }
 
     static int getSkullType(SkullType type) {
-        switch(type) {
+        switch (type) {
             default:
             case SKELETON:
                 return 0;

File: paper-server/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
Patch:
@@ -215,7 +215,7 @@ public void removeAll() {
         }
     }
 
-    private class FlagContainer {
+    private final class FlagContainer {
 
         private Supplier<Boolean> get;
         private Consumer<Boolean> set;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
Patch:
@@ -9,7 +9,6 @@
 import org.bukkit.boss.BossBar;
 import org.bukkit.boss.DragonBattle;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.boss.CraftBossBar;
 import org.bukkit.craftbukkit.boss.CraftDragonBattle;
 import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -180,9 +180,10 @@ public CraftEntity(final CraftServer server, final Entity entity) {
     }
 
     public static CraftEntity getEntity(CraftServer server, Entity entity) {
-        /**
+        /*
          * Order is *EXTREMELY* important -- keep it right! =D
          */
+        // CHECKSTYLE:OFF
         if (entity instanceof EntityLiving) {
             // Players
             if (entity instanceof EntityHuman) {
@@ -368,6 +369,7 @@ else if (entity instanceof EntityMinecartAbstract) {
         else if (entity instanceof EntityAreaEffectCloud) { return new CraftAreaEffectCloud(server, (EntityAreaEffectCloud) entity); }
         else if (entity instanceof EntityEvokerFangs) { return new CraftEvokerFangs(server, (EntityEvokerFangs) entity); }
         else if (entity instanceof EntityLlamaSpit) { return new CraftLlamaSpit(server, (EntityLlamaSpit) entity); }
+        // CHECKSTYLE:ON
 
         throw new AssertionError("Unknown entity " + (entity == null ? null : entity.getClass()));
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
Patch:
@@ -54,9 +54,9 @@ public double getBiteChance() {
 
         if (this.biteChance == -1) {
             if (hook.world.isRainingAt(new BlockPosition(MathHelper.floor(hook.locX()), MathHelper.floor(hook.locY()) + 1, MathHelper.floor(hook.locZ())))) {
-                return 1/300.0;
+                return 1 / 300.0;
             }
-            return 1/500.0;
+            return 1 / 500.0;
         }
         return this.biteChance;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
Patch:
@@ -48,7 +48,7 @@ private void update() {
 
         old.die();
 
-        EntityItemFrame frame = new EntityItemFrame(world,position,direction);
+        EntityItemFrame frame = new EntityItemFrame(world, position, direction);
         frame.setItem(item);
         world.addEntity(frame);
         this.entity = frame;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -45,11 +45,11 @@
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
+import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
-import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
-import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.Egg;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
Patch:
@@ -75,7 +75,7 @@ public EntityMinecartAbstract getHandle() {
 
     @Override
     public void setDisplayBlock(MaterialData material) {
-        if(material != null) {
+        if (material != null) {
             IBlockData block = CraftMagicNumbers.getBlock(material);
             this.getHandle().setDisplayBlock(block);
         } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -229,7 +229,7 @@ public void setPlayerListName(String name) {
             name = getName();
         }
         getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromStringOrNull(name);
-        for (EntityPlayer player : (List<EntityPlayer>)server.getHandle().players) {
+        for (EntityPlayer player : (List<EntityPlayer>) server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()));
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
Patch:
@@ -14,7 +14,7 @@ public CraftTameableAnimal(CraftServer server, EntityTameableAnimal entity) {
 
     @Override
     public EntityTameableAnimal getHandle() {
-        return (EntityTameableAnimal)super.getHandle();
+        return (EntityTameableAnimal) super.getHandle();
     }
 
     public UUID getOwnerUUID() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Preconditions;
 import java.util.Locale;
+import net.minecraft.server.BlockBed;
+import net.minecraft.server.BlockPosition;
 import net.minecraft.server.EntityVillager;
+import net.minecraft.server.IBlockData;
 import net.minecraft.server.IRegistry;
 import net.minecraft.server.VillagerProfession;
-import net.minecraft.server.IBlockData;
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.BlockBed;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;

File: paper-server/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
Patch:
@@ -136,7 +136,7 @@ public synchronized void initializeCommands() {
                     if (t != null) addTopic(t);
                     continue outer;
                 }
-                if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand)command).getExecutor().getClass())) {
+                if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand) command).getExecutor().getClass())) {
                     HelpTopic t = topicFactoryMap.get(c).createTopic(command);
                     if (t != null) addTopic(t);
                     continue outer;
@@ -206,7 +206,7 @@ private String getCommandPluginName(Command command) {
             return "Bukkit";
         }
         if (command instanceof PluginIdentifiableCommand) {
-            return ((PluginIdentifiableCommand)command).getPlugin().getName();
+            return ((PluginIdentifiableCommand) command).getPlugin().getName();
         }
         return null;
     }
@@ -215,7 +215,7 @@ private boolean commandInIgnoredPlugin(Command command, Set<String> ignoredPlugi
         if ((command instanceof BukkitCommand) && ignoredPlugins.contains("Bukkit")) {
             return true;
         }
-        if (command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand)command).getPlugin().getName())) {
+        if (command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand) command).getPlugin().getName())) {
             return true;
         }
         return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
Patch:
@@ -126,7 +126,7 @@ public static Containers getNotchInventoryType(Inventory inventory) {
             case CHEST:
             case ENDER_CHEST:
             case BARREL:
-                switch(inventory.getSize()) {
+                switch (inventory.getSize()) {
                     case 9:
                         return Containers.GENERIC_9X1;
                     case 18:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -43,7 +43,7 @@ public ItemStack[] getContents() {
         List<net.minecraft.server.ItemStack> mcResultItems = getResultInventory().getContents();
 
         int i = 0;
-        for (i = 0; i < mcResultItems.size(); i++ ) {
+        for (i = 0; i < mcResultItems.size(); i++) {
             items[i] = CraftItemStack.asCraftMirror(mcResultItems.get(i));
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryEnchanting.java
Patch:
@@ -11,7 +11,7 @@ public CraftInventoryEnchanting(IInventory inventory) {
 
     @Override
     public void setItem(ItemStack item) {
-        setItem(0,item);
+        setItem(0, item);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
Patch:
@@ -27,17 +27,17 @@ public ItemStack getSmelting() {
 
     @Override
     public void setFuel(ItemStack stack) {
-        setItem(1,stack);
+        setItem(1, stack);
     }
 
     @Override
     public void setResult(ItemStack stack) {
-        setItem(2,stack);
+        setItem(2, stack);
     }
 
     @Override
     public void setSmelting(ItemStack stack) {
-        setItem(0,stack);
+        setItem(0, stack);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
Patch:
@@ -154,11 +154,11 @@ public int numberOfPatterns() {
     ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
         super.serialize(builder);
 
-        if(base != null){
+        if (base != null) {
             builder.put(BASE.BUKKIT, base.toString());
         }
 
-        if(!patterns.isEmpty()){
+        if (!patterns.isEmpty()) {
             builder.put(PATTERNS.BUKKIT, ImmutableList.copyOf(patterns));
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap.Builder;
 import java.util.ArrayList;
@@ -97,7 +96,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         setTitle(SerializableMeta.getString(map, BOOK_TITLE.BUKKIT, true));
 
         Iterable<?> pages = SerializableMeta.getObject(Iterable.class, map, BOOK_PAGES.BUKKIT, true);
-        if(pages != null) {
+        if (pages != null) {
             for (Object page : pages) {
                 if (page instanceof String) {
                     addPage((String) page);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -254,7 +254,7 @@ static void addColors(NBTTagCompound compound, ItemMetaKey key, List<Color> colo
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case FIREWORK_ROCKET:
                 return true;
             default:
@@ -268,7 +268,7 @@ boolean isEmpty() {
     }
 
     boolean isFireworkEmpty() {
-        return  !(hasEffects() || hasPower());
+        return !(hasEffects() || hasPower());
     }
 
     boolean hasPower() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
Patch:
@@ -66,7 +66,7 @@ boolean isLeatherArmorEmpty() {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case LEATHER_HELMET:
             case LEATHER_HORSE_ARMOR:
             case LEATHER_CHESTPLATE:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
Patch:
@@ -100,7 +100,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
     void applyToItem(NBTTagCompound tag) {
         super.applyToItem(tag);
 
-        if (hasMapId()){
+        if (hasMapId()) {
             tag.setInt(MAP_ID.NBT, getMapId());
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -147,7 +147,7 @@ boolean isPotionEmpty() {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case POTION:
             case SPLASH_POTION:
             case LINGERING_POTION:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSuspiciousStew.java
Patch:
@@ -1,11 +1,11 @@
 package org.bukkit.craftbukkit.inventory;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap.Builder;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
 import org.apache.commons.lang.Validate;

File: paper-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
Patch:
@@ -98,8 +98,8 @@ public void drawText(int x, int y, MapFont font, String text) {
                         color = Byte.parseByte(text.substring(i + 1, j));
                         i = j;
                         continue;
+                    } catch (NumberFormatException ex) {
                     }
-                    catch (NumberFormatException ex) {}
                 }
                 throw new IllegalArgumentException("Text contains unterminated color string");
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
Patch:
@@ -35,8 +35,7 @@ public int getId() {
         if (text.startsWith("map_")) {
             try {
                 return Integer.parseInt(text.substring("map_".length()));
-            }
-            catch (NumberFormatException ex) {
+            } catch (NumberFormatException ex) {
                 throw new IllegalStateException("Map has non-numeric ID");
             }
         } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
Patch:
@@ -1,11 +1,11 @@
 package org.bukkit.craftbukkit.persistence;
 
+import com.google.common.primitives.Primitives;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
 import java.util.function.Function;
-import com.google.common.primitives.Primitives;
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagByte;
 import net.minecraft.server.NBTTagByteArray;

File: paper-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
Patch:
@@ -26,7 +26,6 @@
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
 import org.bukkit.entity.AbstractArrow;
-import org.bukkit.entity.Arrow;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.Fireball;

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
Patch:
@@ -2,14 +2,13 @@
 
 import org.bukkit.plugin.Plugin;
 
-
 class CraftAsyncDebugger {
     private CraftAsyncDebugger next = null;
     private final int expiry;
     private final Plugin plugin;
     private final Class<?> clazz;
 
-    CraftAsyncDebugger(final int expiry, final  Plugin plugin, final Class<?> clazz) {
+    CraftAsyncDebugger(final int expiry, final Plugin plugin, final Class<?> clazz) {
         this.expiry = expiry;
         this.plugin = plugin;
         this.clazz = clazz;

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
Patch:
@@ -25,7 +25,7 @@ public boolean isSync() {
     @Override
     public void run() {
         final Thread thread = Thread.currentThread();
-        synchronized(workers) {
+        synchronized (workers) {
             if (getPeriod() == CraftTask.CANCEL) {
                 // Never continue running after cancelled.
                 // Checking this with the lock is important!
@@ -63,7 +63,7 @@ public Plugin getOwner() {
                     thrown);
         } finally {
             // Cleanup is important for any async task, otherwise ghost tasks are everywhere
-            synchronized(workers) {
+            synchronized (workers) {
                 try {
                     final Iterator<BukkitWorker> workers = this.workers.iterator();
                     boolean removed = false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
Patch:
@@ -12,7 +12,7 @@ final class CraftCriteria {
     static {
         ImmutableMap.Builder<String, CraftCriteria> defaults = ImmutableMap.builder();
 
-        for (Map.Entry<?, ?> entry : ((Map<?,?> ) IScoreboardCriteria.criteria).entrySet()) {
+        for (Map.Entry<?, ?> entry : ((Map<?, ?>) IScoreboardCriteria.criteria).entrySet()) {
             String name = entry.getKey().toString();
             IScoreboardCriteria criteria = (IScoreboardCriteria) entry.getValue();
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
Patch:
@@ -6,7 +6,7 @@
 import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.RenderType;
 
-class CraftScoreboardTranslations {
+final class CraftScoreboardTranslations {
     static final int MAX_DISPLAY_SLOT = 3;
     static ImmutableBiMap<DisplaySlot, String> SLOTS = ImmutableBiMap.of(
             DisplaySlot.BELOW_NAME, "belowName",

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
Patch:
@@ -149,7 +149,7 @@ public Set<String> getEntries() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
 
         ImmutableSet.Builder<String> entries = ImmutableSet.builder();
-        for (String playerName: team.getPlayerNameSet()){
+        for (String playerName : team.getPlayerNameSet()) {
             entries.add(playerName);
         }
         return entries.build();

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
Patch:
@@ -29,6 +29,7 @@
  *
  * @author md_5
  */
+// CHECKSTYLE:OFF
 public class Commodore
 {
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftRayTraceResult.java
Patch:
@@ -14,7 +14,7 @@
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
 
-public class CraftRayTraceResult {
+public final class CraftRayTraceResult {
 
     private CraftRayTraceResult() {}
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
Patch:
@@ -73,7 +73,7 @@ public void clear() {
     }
 
     public Set<E> getReference() {
-        Set<E> reference = this.reference ;
+        Set<E> reference = this.reference;
         if (reference != null) {
             return reference;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
Patch:
@@ -39,7 +39,7 @@ public void clear() {
 
     @Override
     public boolean contains(Object object) {
-        if (object  == null) {
+        if (object == null) {
             return false;
         }
         for (T compare : this) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
Patch:
@@ -4,7 +4,7 @@
 import org.bukkit.util.permissions.DefaultPermissions;
 
 public final class CraftDefaultPermissions {
-    private static final String ROOT= "minecraft";
+    private static final String ROOT = "minecraft";
 
     private CraftDefaultPermissions() {}
 

File: paper-server/src/test/java/org/bukkit/DyeColorsTest.java
Patch:
@@ -15,7 +15,7 @@
 @RunWith(Parameterized.class)
 public class DyeColorsTest extends AbstractTestingBase {
 
-    @Parameters(name= "{index}: {0}")
+    @Parameters(name = "{index}: {0}")
     public static List<Object[]> data() {
         List<Object[]> list = new ArrayList<Object[]>();
         for (DyeColor dye : DyeColor.values()) {

File: paper-server/src/test/java/org/bukkit/PerMaterialTest.java
Patch:
@@ -40,7 +40,7 @@ public static void getFireValues() {
         fireValues = Util.getInternalState(BlockFire.class, Blocks.FIRE, "flameChances");
     }
 
-    @Parameters(name= "{index}: {0}")
+    @Parameters(name = "{index}: {0}")
     public static List<Object[]> data() {
         List<Object[]> list = Lists.newArrayList();
         for (Material material : Material.values()) {
@@ -91,7 +91,7 @@ public void maxDurability() {
 
         if (material == Material.AIR) {
             assertThat((int) material.getMaxDurability(), is(0));
-        } else if (material.isBlock()){
+        } else if (material.isBlock()) {
             Item item = CraftMagicNumbers.getItem(material);
             assertThat((int) material.getMaxDurability(), is(item.getMaxDurability()));
         }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
Patch:
@@ -41,7 +41,7 @@ static String name(Enum<?> from, Enum<?> to) {
         return buffer.delete(0, Integer.MAX_VALUE).append(from.getClass().getName()).append('(').append(from.name()).append(") to ").append(to.getClass().getName()).append('(').append(to.name()).append(')').toString();
     }
 
-    @Parameters(name="Material[{index}]:{0}")
+    @Parameters(name = "Material[{index}]:{0}")
     public static List<Object[]> data() {
         List<Object[]> list = new ArrayList<Object[]>();
         for (Material material : materials) {

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
Patch:
@@ -19,7 +19,7 @@
 public class ItemMetaImplementationOverrideTest {
     static final Class<CraftMetaItem> parent = CraftMetaItem.class;
 
-    @Parameters(name="[{index}]:{1}")
+    @Parameters(name = "[{index}]:{1}")
     public static List<Object[]> data() {
         final List<Object[]> testData = new ArrayList<Object[]>();
         List<Class<? extends CraftMetaItem>> classes = new ArrayList<Class<? extends CraftMetaItem>>();

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
Patch:
@@ -13,7 +13,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackBookTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.WRITTEN_BOOK, Material.WRITABLE_BOOK);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
Patch:
@@ -14,7 +14,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackEnchantStorageTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.ENCHANTED_BOOK);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
Patch:
@@ -16,7 +16,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackFireworkChargeTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_STAR);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
Patch:
@@ -16,7 +16,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackFireworkTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_ROCKET);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
Patch:
@@ -14,7 +14,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackLeatherTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.LEATHER_BOOTS, Material.LEATHER_CHESTPLATE, Material.LEATHER_HELMET, Material.LEATHER_LEGGINGS);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
Patch:
@@ -14,7 +14,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackLoreEnchantmentTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, ItemStackTest.COMPOUND_MATERIALS);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
Patch:
@@ -13,7 +13,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackMapTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.FILLED_MAP);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
Patch:
@@ -14,7 +14,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackPotionsTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.POTION);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
Patch:
@@ -13,7 +13,7 @@
 @RunWith(Parameterized.class)
 public class ItemStackSkullTest extends ItemStackTest {
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return StackProvider.compound(operators(), "%s %s", NAME_PARAMETER, Material.PLAYER_HEAD);
     }

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
Patch:
@@ -305,7 +305,7 @@ public String toString() {
         }
     }
 
-    @Parameters(name="[{index}]:{" + NAME_PARAMETER + "}")
+    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
     public static List<Object[]> data() {
         return ImmutableList.of(); // TODO, test basic durability issues
     }

File: paper-server/src/test/java/org/bukkit/entity/EntityTypesTest.java
Patch:
@@ -16,7 +16,7 @@ public class EntityTypesTest extends AbstractTestingBase {
     public void testMaps() {
         Set<EntityType> allBukkit = Arrays.stream(EntityType.values()).filter((b) -> b.getName() != null).collect(Collectors.toSet());
 
-        for (EntityTypes<?>  nms : IRegistry.ENTITY_TYPE) {
+        for (EntityTypes<?> nms : IRegistry.ENTITY_TYPE) {
             MinecraftKey key = EntityTypes.getName(nms);
 
             EntityType bukkit = EntityType.fromName(key.getKey());

File: paper-server/src/test/java/org/bukkit/potion/PotionTest.java
Patch:
@@ -17,7 +17,7 @@ public class PotionTest extends AbstractTestingBase {
     public void testEffectCompleteness() throws Throwable {
         Map<PotionType, String> effects = new EnumMap(PotionType.class);
         for (Object reg : IRegistry.POTION) {
-            List<MobEffect> eff = ((PotionRegistry)reg).a();
+            List<MobEffect> eff = ((PotionRegistry) reg).a();
             if (eff.size() != 1) continue;
             int id = MobEffectList.getId(eff.get(0).getMobEffect());
             PotionEffectType type = PotionEffectType.getById(id);

File: paper-server/src/test/java/org/bukkit/support/AbstractTestingBase.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  *  If you are getting: java.lang.ExceptionInInitializerError
- *    at net.minecraft.server.StatisticList.<clinit>(SourceFile:58)
- *    at net.minecraft.server.Item.<clinit>(SourceFile:252)
- *    at net.minecraft.server.Block.<clinit>(Block.java:577)
+ *    at net.minecraft.server.StatisticList.&lt;clinit&gt;(SourceFile:58)
+ *    at net.minecraft.server.Item.&lt;clinit&gt;(SourceFile:252)
+ *    at net.minecraft.server.Block.&lt;clinit&gt;(Block.java:577)
  *
  *  extend this class to solve it.
  */

File: paper-server/src/test/java/org/bukkit/support/DummyServer.java
Patch:
@@ -16,7 +16,7 @@
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.Versioning;
 
-public class DummyServer implements InvocationHandler {
+public final class DummyServer implements InvocationHandler {
     private static interface MethodHandler {
         Object handle(DummyServer server, Object[] args);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
Patch:
@@ -9,8 +9,8 @@
 import net.minecraft.server.TileEntityBeehive.ReleaseStatus;
 import org.bukkit.Location;
 import org.bukkit.Material;
-import org.bukkit.block.Block;
 import org.bukkit.block.Beehive;
+import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.entity.CraftBee;
 import org.bukkit.entity.Bee;
 
@@ -43,7 +43,7 @@ public boolean isFull() {
 
     @Override
     public boolean isSedated() {
-        return isPlaced() && getSnapshot().k(); // PAIL rename isSedated
+        return isPlaced() && getTileEntity().k(); // PAIL rename isSedated
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -279,7 +279,7 @@ static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean null
 
     private NBTTagCompound internalTag;
     private final Map<String, NBTBase> unhandledTags = new HashMap<String, NBTBase>();
-    private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+    private CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
 
     private int version = CraftMagicNumbers.INSTANCE.getDataVersion(); // Internal use only
 
@@ -1197,6 +1197,7 @@ public CraftMetaItem clone() {
             if (this.hasAttributeModifiers()) {
                 clone.attributeModifiers = LinkedHashMultimap.create(this.attributeModifiers);
             }
+            clone.persistentDataContainer = new CraftPersistentDataContainer(this.persistentDataContainer.getRaw(), DATA_TYPE_REGISTRY);
             clone.hideFlag = this.hideFlag;
             clone.unbreakable = this.unbreakable;
             clone.damage = this.damage;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -581,7 +581,7 @@ public void setAI(boolean ai) {
 
     @Override
     public boolean hasAI() {
-        return (this.getHandle() instanceof EntityInsentient) ? !((EntityInsentient) this.getHandle()).isNoAI(): false;
+        return (this.getHandle() instanceof EntityInsentient) ? !((EntityInsentient) this.getHandle()).isNoAI() : false;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
Patch:
@@ -157,7 +157,7 @@ private void setBlock(int x, int y, int z, IBlockData type) {
     private ChunkSection getChunkSection(int y, boolean create) {
         ChunkSection section = sections[y >> 4];
         if (create && section == null) {
-            sections[y >> 4] = section = new ChunkSection(y);
+            sections[y >> 4] = section = new ChunkSection(y >> 4 << 4);
         }
         return section;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
Patch:
@@ -113,7 +113,7 @@ public static IBlockData fromLegacyData(Material material, byte data) {
     }
 
     public static Item fromLegacyData(Material material, short data) {
-        Preconditions.checkArgument(material.isLegacy(), "fromLegacyData on modern Material. Did you forget to define api-version: 1.13 in your plugin.yml?");
+        Preconditions.checkArgument(material.isLegacy(), "fromLegacyData on modern Material. Did you forget to define a modern (1.13+) api-version in your plugin.yml?");
 
         MaterialData materialData = new MaterialData(material, (byte) data);
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
Patch:
@@ -173,7 +173,7 @@ public void visitFieldInsn(int opcode, String owner, String name, String desc)
                                 Material.valueOf( "LEGACY_" + name );
                             } catch ( IllegalArgumentException ex )
                             {
-                                throw new AuthorNagException( "No legacy enum constant for " + name + ". Did you forget to define api-version: 1.13 in your plugin.yml?" );
+                                throw new AuthorNagException( "No legacy enum constant for " + name + ". Did you forget to define a modern (1.13+) api-version in your plugin.yml?" );
                             }
 
                             super.visitFieldInsn( opcode, owner, "LEGACY_" + name, desc );

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
Patch:
@@ -91,6 +91,6 @@ public static String getPermission(CommandNode<CommandListenerWrapper> vanillaCo
     }
 
     private String toDispatcher(String[] args, String name) {
-        return "/" + name + ((args.length > 0) ? " " + Joiner.on(' ').join(args) : "");
+        return name + ((args.length > 0) ? " " + Joiner.on(' ').join(args) : "");
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
Patch:
@@ -126,7 +126,7 @@ public final Biome getBiome(int x, int y, int z) {
         Preconditions.checkState(biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
         CraftChunk.validateChunkCoordinates(x, y, z);
 
-        return CraftBlock.biomeBaseToBiome(biome.getBiome(x, y, z));
+        return CraftBlock.biomeBaseToBiome(biome.getBiome(x >> 2, y >> 2, z >> 2));
     }
 
     @Override
@@ -139,7 +139,7 @@ public final double getRawBiomeTemperature(int x, int y, int z) {
         Preconditions.checkState(biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
         CraftChunk.validateChunkCoordinates(x, y, z);
 
-        return biome.getBiome(x, y, z).getAdjustedTemperature(new BlockPosition((this.x << 4) | x, y, (this.z << 4) | z));
+        return biome.getBiome(x >> 2, y >> 2, z >> 2).getAdjustedTemperature(new BlockPosition((this.x << 4) | x, y, (this.z << 4) | z));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
Patch:
@@ -28,7 +28,7 @@ public void run() {
 
         // Using name from log4j config in vanilla jar
         while (true) {
-            message = QueueLogAppender.getNextLogEvent("ServerGuiConsole");
+            message = QueueLogAppender.getNextLogEvent("TerminalConsole");
             if (message == null) {
                 continue;
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -67,12 +67,12 @@ public void setBiome(int x, int z, Biome bio) {
 
         @Override
         public Biome getBiome(int x, int y, int z) {
-            return CraftBlock.biomeBaseToBiome(biome.getBiome(x, 0, z));
+            return CraftBlock.biomeBaseToBiome(biome.getBiome(x, y, z));
         }
 
         @Override
         public void setBiome(int x, int y, int z, Biome bio) {
-            biome.setBiome(x, 0, z, CraftBlock.biomeToBiomeBase(bio));
+            biome.setBiome(x, y, z, CraftBlock.biomeToBiomeBase(bio));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -660,7 +660,7 @@ public RayTraceResult rayTrace(Location start, Vector direction, double maxDista
         Vec3D startPos = new Vec3D(start.getX(), start.getY(), start.getZ());
         Vec3D endPos = new Vec3D(start.getX() + dir.getX(), start.getY() + dir.getY(), start.getZ() + dir.getZ());
 
-        MovingObjectPosition nmsHitResult = world.rayTrace(new RayTrace(startPos, endPos, RayTrace.BlockCollisionOption.OUTLINE, CraftFluidCollisionMode.toNMS(fluidCollisionMode), null));
+        MovingObjectPosition nmsHitResult = world.rayTraceBlock(new RayTrace(startPos, endPos, RayTrace.BlockCollisionOption.OUTLINE, CraftFluidCollisionMode.toNMS(fluidCollisionMode), null), position);
         return CraftRayTraceResult.fromNMS(this.getWorld(), nmsHitResult);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -675,7 +675,7 @@ NBTTagList createStringList(List<IChatBaseComponent> list) {
         NBTTagList tagList = new NBTTagList();
         for (IChatBaseComponent value : list) {
             // SPIGOT-5342 - horrible hack as 0 version does not go through the Mojang updater
-            tagList.add(new NBTTagString(0 <= version || version >= 1803 ? CraftChatMessage.toJSON(value) : CraftChatMessage.fromComponent(value, EnumChatFormat.DARK_PURPLE))); // SPIGOT-4935
+            tagList.add(new NBTTagString(version <= 0 || version >= 1803 ? CraftChatMessage.toJSON(value) : CraftChatMessage.fromComponent(value, EnumChatFormat.DARK_PURPLE))); // SPIGOT-4935
         }
 
         return tagList;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
Patch:
@@ -26,7 +26,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     static final ItemMetaKey BOOK_PAGES = new ItemMetaKey("pages");
     static final ItemMetaKey RESOLVED = new ItemMetaKey("resolved");
     static final ItemMetaKey GENERATION = new ItemMetaKey("generation");
-    static final int MAX_PAGES = 50;
+    static final int MAX_PAGES = 100;
     static final int MAX_PAGE_LENGTH = 320; // 256 limit + 64 characters to allow for psuedo colour codes
     static final int MAX_TITLE_LENGTH = 32;
 
@@ -128,7 +128,7 @@ void applyToItem(NBTTagCompound itemData, boolean handlePages) {
             if (hasPages()) {
                 NBTTagList list = new NBTTagList();
                 for (IChatBaseComponent page : pages) {
-                    list.add(new NBTTagString(page == null ? "" : page.getString()));
+                    list.add(new NBTTagString(page == null ? "" : page.e())); // PAIL getLegacyString
                 }
                 itemData.set(BOOK_PAGES.NBT, list);
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -10,7 +10,6 @@
 import net.minecraft.server.InventoryMerchant;
 import net.minecraft.server.PlayerInventory;
 import net.minecraft.server.TileEntityBarrel;
-import net.minecraft.server.TileEntityBeacon;
 import net.minecraft.server.TileEntityBlastFurnace;
 import net.minecraft.server.TileEntityBrewingStand;
 import net.minecraft.server.TileEntityDispenser;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryStonecutter.java
Patch:
@@ -3,9 +3,9 @@
 import net.minecraft.server.IInventory;
 import org.bukkit.inventory.StonecutterInventory;
 
-public class CraftInventoryStonecutter extends CraftInventory implements StonecutterInventory {
+public class CraftInventoryStonecutter extends CraftResultInventory implements StonecutterInventory {
 
-    public CraftInventoryStonecutter(IInventory inventory) {
-        super(inventory);
+    public CraftInventoryStonecutter(IInventory inventory, IInventory resultInventory) {
+        super(inventory, resultInventory);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1506,13 +1506,13 @@ public Inventory createInventory(InventoryHolder owner, InventoryType type, Stri
 
     @Override
     public Inventory createInventory(InventoryHolder owner, int size) throws IllegalArgumentException {
-        Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots");
+        Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots (got " + size + ")");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size);
     }
 
     @Override
     public Inventory createInventory(InventoryHolder owner, int size, String title) throws IllegalArgumentException {
-        Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots");
+        Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots (got " + size + ")");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size, title);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
Patch:
@@ -186,7 +186,7 @@ public Material getMaterial(String material, int version) {
      * @return string
      */
     public String getMappingsVersion() {
-        return "28fc84e92753a1f24483290e13e0ee4c";
+        return "c31c513e1fa6657aacbd4facd394c5b0";
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -330,7 +330,7 @@ public Chunk getChunkAt(Block block) {
     @Override
     public boolean isChunkLoaded(int x, int z) {
         net.minecraft.server.Chunk chunk = world.getChunkProvider().getChunkAt(x, z, false);
-        return chunk != null && chunk.loaded;
+        return chunk != null;
     }
 
     @Override
@@ -345,8 +345,7 @@ public boolean isChunkGenerated(int x, int z) {
     @Override
     public Chunk[] getLoadedChunks() {
         Long2ObjectLinkedOpenHashMap<PlayerChunk> chunks = world.getChunkProvider().playerChunkMap.visibleChunks;
-
-        return chunks.values().stream().map(PlayerChunk::getChunk).filter(Objects::nonNull).filter((chunk) -> chunk.loaded).map(net.minecraft.server.Chunk::getBukkitChunk).toArray(Chunk[]::new);
+        return chunks.values().stream().map(PlayerChunk::getFullChunk).filter(Objects::nonNull).map(net.minecraft.server.Chunk::getBukkitChunk).toArray(Chunk[]::new);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -530,7 +530,7 @@ public boolean isDead() {
 
     @Override
     public boolean isValid() {
-        return entity.isAlive() && entity.valid;
+        return entity.isAlive() && entity.valid && entity.isChunkLoaded();
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
Patch:
@@ -20,7 +20,7 @@ public static <T> int getDataValue(Effect effect, T data) {
             datavalue = ((Potion) data).toDamageValue() & 0x3F;
             break;
         case RECORD_PLAY:
-            Validate.isTrue(((Material) data).isRecord(), "Invalid record type!");
+            Validate.isTrue(data == Material.AIR || ((Material) data).isRecord(), "Invalid record type!");
             datavalue = Item.getId(CraftMagicNumbers.getItem((Material) data));
             break;
         case SMOKE:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -664,14 +664,14 @@ void applyToItem(NBTTagCompound itemTag) {
         }
     }
 
-    static NBTTagList createStringList(List<IChatBaseComponent> list) {
+    NBTTagList createStringList(List<IChatBaseComponent> list) {
         if (list == null || list.isEmpty()) {
             return null;
         }
 
         NBTTagList tagList = new NBTTagList();
         for (IChatBaseComponent value : list) {
-            tagList.add(new NBTTagString(CraftChatMessage.toJSON(value)));
+            tagList.add(new NBTTagString(version >= 1803 ? CraftChatMessage.toJSON(value) : CraftChatMessage.fromComponent(value, EnumChatFormat.DARK_PURPLE))); // SPIGOT-4935
         }
 
         return tagList;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -469,7 +469,7 @@ public InventoryType getType() {
             return InventoryType.ENDER_CHEST;
         } else if (inventory instanceof InventoryMerchant) {
             return InventoryType.MERCHANT;
-        } else if (inventory instanceof TileEntityBeacon) {
+        } else if (this instanceof CraftInventoryBeacon) {
             return InventoryType.BEACON;
         } else if (this instanceof CraftInventoryAnvil) {
            return InventoryType.ANVIL;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -16,7 +16,6 @@
 import net.minecraft.server.TileEntityDispenser;
 import net.minecraft.server.TileEntityDropper;
 import net.minecraft.server.TileEntityFurnace;
-import net.minecraft.server.TileEntityLectern;
 import net.minecraft.server.TileEntityShulkerBox;
 import net.minecraft.server.TileEntitySmoker;
 import org.apache.commons.lang.Validate;
@@ -480,7 +479,7 @@ public InventoryType getType() {
             return InventoryType.SHULKER_BOX;
         } else if (inventory instanceof TileEntityBarrel) {
             return InventoryType.BARREL;
-        } else if (inventory instanceof TileEntityLectern) {
+        } else if (this instanceof CraftInventoryLectern) {
             return InventoryType.LECTERN;
         } else if (this instanceof CraftInventoryLoom) {
             return InventoryType.LOOM;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -446,8 +446,6 @@ public BlockState getState() {
             return new CraftBed(this);
         case CONDUIT:
             return new CraftConduit(this);
-        case BARRIER:
-            return new CraftBarrel(this);
         case BARREL:
             return new CraftBarrel(this);
         case BELL:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -521,7 +521,7 @@ public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item) {
     }
 
     @Override
-    public AbstractArrow spawnArrow(Location loc, Vector velocity, float speed, float spread) {
+    public Arrow spawnArrow(Location loc, Vector velocity, float speed, float spread) {
         return spawnArrow(loc, velocity, speed, spread, Arrow.class);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.TileEntity;
@@ -24,6 +25,7 @@ public CraftBlockEntityState(Block block, Class<T> tileEntityClass) {
         // get tile entity from block:
         CraftWorld world = (CraftWorld) this.getWorld();
         this.tileEntity = tileEntityClass.cast(world.getHandle().getTileEntity(this.getPosition()));
+        Preconditions.checkState(this.tileEntity != null, "Tile is null, asynchronous access? " + block);
 
         // copy tile entity data:
         this.snapshot = this.createSnapshot(tileEntity, world.getHandle());

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -324,6 +324,7 @@ public InventoryView openInventory(Inventory inventory) {
                         customSize = Containers.GENERIC_9X3;
                         break;
                     case 36:
+                    case 41: // PLAYER
                         customSize = Containers.GENERIC_9X4;
                         break;
                     case 45:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1503,13 +1503,13 @@ public Inventory createInventory(InventoryHolder owner, InventoryType type, Stri
 
     @Override
     public Inventory createInventory(InventoryHolder owner, int size) throws IllegalArgumentException {
-        Validate.isTrue(size % 9 == 0, "Chests must have a size that is a multiple of 9!");
+        Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size);
     }
 
     @Override
     public Inventory createInventory(InventoryHolder owner, int size, String title) throws IllegalArgumentException {
-        Validate.isTrue(size % 9 == 0, "Chests must have a size that is a multiple of 9!");
+        Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size, title);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -333,7 +333,7 @@ public InventoryView openInventory(Inventory inventory) {
                         customSize = Containers.GENERIC_9X6;
                         break;
                     default:
-                        throw new IllegalArgumentException("Unsupported custom size " + inventory.getSize());
+                        throw new IllegalArgumentException("Unsupported custom inventory size " + inventory.getSize());
                 }
                 openCustomInventory(inventory, player, customSize);
                 break;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
Patch:
@@ -55,7 +55,6 @@ public MinecraftInventory(InventoryHolder owner, int size) {
 
         public MinecraftInventory(InventoryHolder owner, int size, String title) {
             Validate.notNull(title, "Title cannot be null");
-            Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots");
             this.items = NonNullList.a(size, ItemStack.a);
             this.title = title;
             this.viewers = new ArrayList<HumanEntity>();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
Patch:
@@ -167,6 +167,7 @@ private void setupSlots(IInventory top, PlayerInventory bottom, EntityHuman enti
                 break; // TODO: This should be an error?
             case PLAYER:
             case CHEST:
+            case ENDER_CHEST:
             case BARREL:
                 delegate = new ContainerChest(Containers.GENERIC_9X3, windowId, bottom, top, top.getSize() / 9);
                 break;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
Patch:
@@ -168,7 +168,7 @@ private void setupSlots(IInventory top, PlayerInventory bottom, EntityHuman enti
             case PLAYER:
             case CHEST:
             case BARREL:
-                delegate = new ContainerChest(Containers.GENERIC_9X3, windowId, bottom, top, 3);
+                delegate = new ContainerChest(Containers.GENERIC_9X3, windowId, bottom, top, top.getSize() / 9);
                 break;
             case DISPENSER:
             case DROPPER:

File: paper-server/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import static junit.framework.TestCase.*;
 import net.minecraft.server.DragonControllerPhase;
 import org.bukkit.craftbukkit.entity.CraftEnderDragon;
 import org.junit.Assert;
@@ -12,8 +11,8 @@ public class EnderDragonPhaseTest {
     public void testNotNull() {
         for (EnderDragon.Phase phase : EnderDragon.Phase.values()) {
             DragonControllerPhase dragonControllerPhase = CraftEnderDragon.getMinecraftPhase(phase);
-            assertNotNull(phase.name(), dragonControllerPhase);
-            assertNotNull(phase.name(), CraftEnderDragon.getBukkitPhase(dragonControllerPhase));
+            Assert.assertNotNull(phase.name(), dragonControllerPhase);
+            Assert.assertNotNull(phase.name(), CraftEnderDragon.getBukkitPhase(dragonControllerPhase));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -49,6 +49,7 @@
 import net.minecraft.server.BossBattleCustom;
 import net.minecraft.server.CommandDispatcher;
 import net.minecraft.server.CommandListenerWrapper;
+import net.minecraft.server.CraftingManager;
 import net.minecraft.server.DedicatedPlayerList;
 import net.minecraft.server.DedicatedServer;
 import net.minecraft.server.DedicatedServerProperties;
@@ -1096,7 +1097,7 @@ public Iterator<Recipe> recipeIterator() {
 
     @Override
     public void clearRecipes() {
-        console.getCraftingManager().recipes.clear();
+        CraftingManager.a(console.getCraftingManager().recipes);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
Patch:
@@ -128,7 +128,7 @@ public List<ItemStack> getContents() {
         List<ItemStack> items = new ArrayList<ItemStack>(size);
 
         for (int i = 0; i < size; i++) {
-            items.set(i, getItem(i));
+            items.add(getItem(i));
         }
 
         return items;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
Patch:
@@ -26,6 +26,7 @@ public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean expe
                 maxUses,
                 this
         );
+        this.setExperienceReward(experienceReward);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -40,7 +40,7 @@ public class CraftBlock implements Block {
 
     public CraftBlock(GeneratorAccess world, BlockPosition position) {
         this.world = world;
-        this.position = position;
+        this.position = position.h();
     }
 
     public static CraftBlock at(GeneratorAccess world, BlockPosition position) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
Patch:
@@ -17,7 +17,8 @@ public int getSelectedRecipeIndex() {
 
     @Override
     public MerchantRecipe getSelectedRecipe() {
-        return getInventory().getRecipe().asBukkit();
+        net.minecraft.server.MerchantRecipe nmsRecipe = getInventory().getRecipe();
+        return (nmsRecipe == null) ? null : nmsRecipe.asBukkit();
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -354,9 +354,9 @@ public void enablePlugins(PluginLoadOrder type) {
             commandMap.setFallbackCommands();
             setVanillaCommands();
             commandMap.registerServerAliases();
-            loadCustomPermissions();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            loadCustomPermissions();
             helpMap.initializeCommands();
             syncCommands();
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
Patch:
@@ -207,10 +207,10 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
                             return;
                         }
                         // SPIGOT-4608
-                        if ( (owner.equals( "org/bukkit/Bukkit" ) || owner.equals( "org/bukkit/Server" ) ) && name.equals( "getMap" ) && desc.equals( "(Lorg/bukkit/map/MapView;)S" ) )
+                        if ( (owner.equals( "org/bukkit/Bukkit" ) || owner.equals( "org/bukkit/Server" ) ) && name.equals( "getMap" ) && desc.equals( "(S)Lorg/bukkit/map/MapView;" ) )
                         {
                             // Should be same size on stack so just call other method
-                            super.visitMethodInsn( opcode, owner, name, "(Lorg/bukkit/map/MapView;)I", itf );
+                            super.visitMethodInsn( opcode, owner, name, "(I)Lorg/bukkit/map/MapView;", itf );
                             return;
                         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
Patch:
@@ -111,6 +111,8 @@ void applyToItem(NBTTagCompound tag) {
 
     @Override
     void deserializeInternal(NBTTagCompound tag, Object context) {
+        super.deserializeInternal(tag, context);
+
         if (tag.hasKeyOfType(BLOCK_ENTITY_TAG.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
             blockEntityTag = tag.getCompound(BLOCK_ENTITY_TAG.NBT);
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -58,6 +58,8 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
 
     @Override
     void deserializeInternal(NBTTagCompound tag, Object context) {
+        super.deserializeInternal(tag, context);
+
         if (tag.hasKeyOfType(SKULL_PROFILE.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
             profile = GameProfileSerializer.deserialize(tag.getCompound(SKULL_PROFILE.NBT));
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
Patch:
@@ -116,7 +116,7 @@ public List<NamespacedKey> getRecipes() {
     @Override
     public void setRecipes(List<NamespacedKey> recipes) {
         this.recipes.clear();
-        for (NamespacedKey recipe : this.recipes) {
+        for (NamespacedKey recipe : recipes) {
             addRecipe(recipe);
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
Patch:
@@ -16,6 +16,7 @@ public static Permission registerPermissions(Permission parent) {
         DefaultPermissions.registerPermission(PREFIX + "kill", "Allows the user to commit suicide", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "me", "Allows the user to perform a chat action", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "msg", "Allows the user to privately message another player", PermissionDefault.TRUE, commands);
+        DefaultPermissions.registerPermission(PREFIX + "help", "Allows the user to access Vanilla command help", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "say", "Allows the user to talk as the console", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "give", "Allows the user to give items to players", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "teleport", "Allows the user to teleport players", PermissionDefault.OP, commands);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
Patch:
@@ -199,7 +199,6 @@ private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         case DROPPER:
         case SIGN:
         case SPAWNER:
-        case NOTE_BLOCK:
         case BREWING_STAND:
         case ENCHANTING_TABLE:
         case COMMAND_BLOCK:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -461,7 +461,6 @@ public static ItemMeta getItemMeta(net.minecraft.server.ItemStack item) {
             case DROPPER:
             case SIGN:
             case SPAWNER:
-            case NOTE_BLOCK:
             case BREWING_STAND:
             case ENCHANTING_TABLE:
             case COMMAND_BLOCK:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
Patch:
@@ -3,7 +3,6 @@
 import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
-import net.minecraft.server.BlockJukeBox;
 import net.minecraft.server.EnumColor;
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagCompound;
@@ -175,7 +174,6 @@ boolean applicableTo(Material type) {
             case DROPPER:
             case SIGN:
             case SPAWNER:
-            case NOTE_BLOCK:
             case BREWING_STAND:
             case ENCHANTING_TABLE:
             case COMMAND_BLOCK:

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
Patch:
@@ -67,7 +67,7 @@ public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax
 
     @Override
     public Material getType(int x, int y, int z) {
-        return getTypeAndData(x, y, z).getItemType();
+        return CraftMagicNumbers.getMaterial(getTypeId(x, y, z).getBlock());
     }
 
     @Override

File: paper-server/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
Patch:
@@ -13,7 +13,7 @@ public class ChunkDataTest extends AbstractTestingBase {
 
     private boolean testSetBlock(CraftChunkData data, int x, int y, int z, BlockData type, BlockData expected) {
         data.setBlock(x, y, z, type);
-        return expected.equals(data.getBlockData(x, y, z));
+        return expected.equals(data.getBlockData(x, y, z)) && expected.getMaterial().equals(data.getType(x, y, z));
     }
 
     private void testSetRegion(CraftChunkData data, int minx, int miny, int minz, int maxx, int maxy, int maxz, BlockData type) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
Patch:
@@ -124,6 +124,8 @@ public MaterialData getData() {
 
     public void setType(final Material type) {
         Preconditions.checkArgument(type != null, "Material cannot be null");
+        Preconditions.checkArgument(type.isBlock(), "Material must be a block!");
+
         if (this.getType() != type) {
             this.data = CraftMagicNumbers.getBlock(type).getBlockData();
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
Patch:
@@ -61,7 +61,7 @@ public MinecraftInventory(InventoryHolder owner, int size) {
         public MinecraftInventory(InventoryHolder owner, int size, String title) {
             Validate.notNull(title, "Title cannot be null");
             this.items = NonNullList.a(size, ItemStack.a);
-            this.title = CraftChatMessage.fromStringOrNull(title);
+            this.title = CraftChatMessage.fromString(title)[0];
             this.viewers = new ArrayList<HumanEntity>();
             this.owner = owner;
             this.type = InventoryType.CHEST;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -50,6 +50,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.server.ChatComponentText;
+import net.minecraft.server.EnumChatFormat;
 import net.minecraft.server.NBTCompressedStreamTools;
 import org.apache.commons.codec.binary.Base64;
 
@@ -562,7 +563,7 @@ boolean isEmpty() {
     }
 
     public String getDisplayName() {
-        return CraftChatMessage.fromComponent(displayName);
+        return CraftChatMessage.fromComponent(displayName, EnumChatFormat.WHITE);
     }
 
     public final void setDisplayName(String name) {
@@ -575,7 +576,7 @@ public boolean hasDisplayName() {
 
     @Override
     public String getLocalizedName() {
-        return CraftChatMessage.fromComponent(locName);
+        return CraftChatMessage.fromComponent(locName, EnumChatFormat.WHITE);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
Patch:
@@ -61,7 +61,7 @@ public void setPrefix(String prefix) throws IllegalStateException, IllegalArgume
     public String getSuffix() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
 
-        return CraftChatMessage.fromComponent(team.getPrefix());
+        return CraftChatMessage.fromComponent(team.getSuffix());
     }
 
     public void setSuffix(String suffix) throws IllegalStateException, IllegalArgumentException {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
Patch:
@@ -39,7 +39,7 @@ public void applyTo(T lootable) {
         if (!this.getSnapshot().hasCustomName()) {
             lootable.setCustomName(null);
         }
-        if (this.getSnapshot().getLootTable()== null) {
+        if (this.getSnapshot().getLootTable() == null) {
             lootable.setLootTable((MinecraftKey) null, 0L);
         }
     }

File: paper-server/src/test/java/org/bukkit/SoundTest.java
Patch:
@@ -7,9 +7,10 @@
 import static org.hamcrest.Matchers.*;
 
 import org.bukkit.craftbukkit.CraftSound;
+import org.bukkit.support.AbstractTestingBase;
 import org.junit.Test;
 
-public class SoundTest {
+public class SoundTest extends AbstractTestingBase {
 
     @Test
     public void testGetSound() {

File: paper-server/src/test/java/org/bukkit/entity/EntityTypesTest.java
Patch:
@@ -6,10 +6,11 @@
 import net.minecraft.server.EntityTypes;
 import net.minecraft.server.IRegistry;
 import net.minecraft.server.MinecraftKey;
+import org.bukkit.support.AbstractTestingBase;
 import org.junit.Assert;
 import org.junit.Test;
 
-public class EntityTypesTest {
+public class EntityTypesTest extends AbstractTestingBase {
 
     @Test
     public void testMaps() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
Patch:
@@ -9,6 +9,9 @@ public CraftNamespacedKey() {
     }
 
     public static NamespacedKey fromStringOrNull(String string) {
+        if (string == null || string.isEmpty()) {
+            return null;
+        }
         MinecraftKey minecraft = MinecraftKey.a(string);
         return (minecraft == null) ? null : fromMinecraft(minecraft);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -944,8 +944,10 @@ public static Set<String> getHandledTags() {
                         UNBREAKABLE.NBT,
                         DAMAGE.NBT,
                         CraftMetaMap.MAP_SCALING.NBT,
+                        CraftMetaMap.MAP_ID.NBT,
                         CraftMetaPotion.POTION_EFFECTS.NBT,
                         CraftMetaPotion.DEFAULT_POTION.NBT,
+                        CraftMetaPotion.POTION_COLOR.NBT,
                         CraftMetaSkull.SKULL_OWNER.NBT,
                         CraftMetaSkull.SKULL_PROFILE.NBT,
                         CraftMetaSpawnEgg.ENTITY_TAG.NBT,

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -45,7 +45,7 @@ private net.minecraft.server.Block getNMSBlock() {
         return getNMS().getBlock();
     }
 
-    protected net.minecraft.server.IBlockData getNMS() {
+    public net.minecraft.server.IBlockData getNMS() {
         return world.getType(position);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
Patch:
@@ -228,7 +228,8 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
 
                         if ( EVIL.contains( owner + " " + desc + " " + name )
                                 || ( owner.startsWith( "org/bukkit/block/" ) && ( desc + " " + name ).equals( "()I getTypeId" ) )
-                                || ( owner.startsWith( "org/bukkit/block/" ) && ( desc + " " + name ).equals( "(I)Z setTypeId" ) ) )
+                                || ( owner.startsWith( "org/bukkit/block/" ) && ( desc + " " + name ).equals( "(I)Z setTypeId" ) )
+                                || ( owner.startsWith( "org/bukkit/block/" ) && ( desc + " " + name ).equals( "()Lorg/bukkit/Material; getType" ) ) )
                         {
                             Type[] args = Type.getArgumentTypes( desc );
                             Type[] newArgs = new Type[ args.length + 1 ];

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -80,7 +80,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
                 int amp = effect.getByte(AMPLIFIER.NBT);
                 int duration = effect.getInt(DURATION.NBT);
                 boolean ambient = effect.getBoolean(AMBIENT.NBT);
-                boolean particles = effect.getBoolean(SHOW_PARTICLES.NBT);
+                boolean particles = tag.hasKeyOfType(SHOW_PARTICLES.NBT, CraftMagicNumbers.NBT.TAG_BYTE) ? effect.getBoolean(SHOW_PARTICLES.NBT) : true;
                 boolean icon = tag.hasKeyOfType(SHOW_ICON.NBT, CraftMagicNumbers.NBT.TAG_BYTE) ? effect.getBoolean(SHOW_ICON.NBT) : particles;
                 customEffects.add(new PotionEffect(type, duration, amp, ambient, particles, icon));
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
Patch:
@@ -37,7 +37,7 @@ public int getMaxHeight() {
 
     @Override
     public void setBlock(int x, int y, int z, Material material) {
-        setBlock(x, y, z, CraftMagicNumbers.getBlock(material, (byte) 0));
+        setBlock(x, y, z, material.createBlockData());
     }
 
     @Override
@@ -52,7 +52,7 @@ public void setBlock(int x, int y, int z, BlockData blockData) {
 
     @Override
     public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, Material material) {
-        setRegion(xMin, yMin, zMin, xMax, yMax, zMax, CraftMagicNumbers.getBlock(material, (byte) 0));
+        setRegion(xMin, yMin, zMin, xMax, yMax, zMax, material.createBlockData());
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -270,6 +270,7 @@ public InventoryView openInventory(Inventory inventory) {
                 break;
             case CREATIVE:
             case CRAFTING:
+            case MERCHANT:
                 throw new IllegalArgumentException("Can't open a " + type + " inventory!");
         }
         if (getHandle().activeContainer == formerContainer) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
Patch:
@@ -210,11 +210,11 @@ public static boolean isLegacy(PluginDescriptionFile pdf) {
     }
 
     @Override
-    public byte[] processClass(PluginDescriptionFile pdf, byte[] clazz) {
+    public byte[] processClass(PluginDescriptionFile pdf, String path, byte[] clazz) {
         try {
             clazz = Commodore.convert(clazz, !isLegacy(pdf));
         } catch (Exception ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Fatal error trying to convert " + pdf.getFullName(), ex);
+            Bukkit.getLogger().log(Level.SEVERE, "Fatal error trying to convert " + pdf.getFullName() + ":" + path, ex);
         }
 
         return clazz;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -322,7 +322,7 @@ public <T extends Projectile> T launchProjectile(Class<? extends T> projectile,
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
                 launch = new EntitySpectralArrow(world, getHandle());
             } else if (Trident.class.isAssignableFrom(projectile)) {
-                launch = new EntityThrownTrident(world, getHandle(), net.minecraft.server.ItemStack.a);
+                launch = new EntityThrownTrident(world, getHandle(), new net.minecraft.server.ItemStack(net.minecraft.server.Items.TRIDENT));
             } else {
                 launch = new EntityTippedArrow(world, getHandle());
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
Patch:
@@ -83,6 +83,8 @@ public String getName() {
             return "SLOW_FALLING";
         case 29:
             return "CONDUIT_POWER";
+        case 30:
+            return "DOLPHINS_GRACE";
         default:
             return "UNKNOWN_EFFECT_TYPE_" + getId();
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
Patch:
@@ -138,7 +138,7 @@ private static <B extends Enum<B>> B toBukkit(Enum<?> nms, Class<B> bukkit) {
     @SuppressWarnings("unchecked")
     private static <N extends Enum<N> & INamable> N toNMS(Enum<?> bukkit, Class<N> nms) {
         Enum<?> converted;
-        BiMap<Enum<?>, Enum<?>> nmsToBukkit = classMappings.get(nms.getClass());
+        BiMap<Enum<?>, Enum<?>> nmsToBukkit = classMappings.get(nms);
 
         if (nmsToBukkit != null) {
             converted = nmsToBukkit.inverse().get(bukkit);
@@ -157,7 +157,7 @@ private static <N extends Enum<N> & INamable> N toNMS(Enum<?> bukkit, Class<N> n
 
         if (nmsToBukkit == null) {
             nmsToBukkit = HashBiMap.create();
-            classMappings.put(nms.getClass(), nmsToBukkit);
+            classMappings.put(nms, nmsToBukkit);
         }
 
         nmsToBukkit.put(converted, bukkit);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -566,7 +566,7 @@ public String getDisplayName() {
     }
 
     public final void setDisplayName(String name) {
-        this.displayName = new ChatComponentText(name);
+        this.displayName = (name == null) ? null : new ChatComponentText(name);
     }
 
     public boolean hasDisplayName() {
@@ -580,7 +580,7 @@ public String getLocalizedName() {
 
     @Override
     public void setLocalizedName(String name) {
-        this.locName = new ChatComponentText(name);
+        this.locName = (name == null) ? null : new ChatComponentText(name);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.google.common.collect.ImmutableMap;
 import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+import org.bukkit.craftbukkit.util.CraftLegacy;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 
 @DelegateDeserialization(ItemStack.class)
@@ -545,7 +546,8 @@ public boolean isSimilar(ItemStack stack) {
         if (handle == null || that.handle == null) {
             return false;
         }
-        if (!(that.getType() == getType() && getDurability() == that.getDurability())) {
+        Material comparisonType = CraftLegacy.fromLegacy(that.getType()); // This may be called from legacy item stacks, try to get the right material
+        if (!(comparisonType == getType() && getDurability() == that.getDurability())) {
             return false;
         }
         return hasItemMeta() ? that.hasItemMeta() && handle.getTag().equals(that.handle.getTag()) : !that.hasItemMeta();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -292,7 +292,6 @@ public BlockState getState() {
         case CREEPER_WALL_HEAD:
         case DRAGON_HEAD:
         case DRAGON_WALL_HEAD:
-        case PISTON_HEAD:
         case PLAYER_HEAD:
         case PLAYER_WALL_HEAD:
         case SKELETON_SKULL:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
Patch:
@@ -77,7 +77,6 @@ private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         case CREEPER_WALL_HEAD:
         case DRAGON_HEAD:
         case DRAGON_WALL_HEAD:
-        case PISTON_HEAD:
         case PLAYER_HEAD:
         case PLAYER_WALL_HEAD:
         case SKELETON_SKULL:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -335,7 +335,6 @@ public static ItemMeta getItemMeta(net.minecraft.server.ItemStack item) {
             case CREEPER_WALL_HEAD:
             case DRAGON_HEAD:
             case DRAGON_WALL_HEAD:
-            case PISTON_HEAD:
             case PLAYER_HEAD:
             case PLAYER_WALL_HEAD:
             case SKELETON_SKULL:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
Patch:
@@ -310,7 +310,6 @@ public BlockState getBlockState() {
         case CREEPER_WALL_HEAD:
         case DRAGON_HEAD:
         case DRAGON_WALL_HEAD:
-        case PISTON_HEAD:
         case PLAYER_HEAD:
         case PLAYER_WALL_HEAD:
         case SKELETON_SKULL:
@@ -465,7 +464,6 @@ public void setBlockState(BlockState blockState) {
         case CREEPER_WALL_HEAD:
         case DRAGON_HEAD:
         case DRAGON_WALL_HEAD:
-        case PISTON_HEAD:
         case PLAYER_HEAD:
         case PLAYER_WALL_HEAD:
         case SKELETON_SKULL:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -101,7 +101,6 @@ boolean applicableTo(Material type) {
             case CREEPER_WALL_HEAD:
             case DRAGON_HEAD:
             case DRAGON_WALL_HEAD:
-            case PISTON_HEAD:
             case PLAYER_HEAD:
             case PLAYER_WALL_HEAD:
             case SKELETON_SKULL:

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -319,7 +319,7 @@ public void playNote(Location loc, byte instrument, byte note) {
         }
 
         float f = (float) Math.pow(2.0D, (note - 12.0D) / 12.0D);
-        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect("block.note." + instrumentName), net.minecraft.server.SoundCategory.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect("block.note_block." + instrumentName), net.minecraft.server.SoundCategory.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
     }
 
     @Override
@@ -360,7 +360,7 @@ public void playNote(Location loc, Instrument instrument, Note note) {
                 break;
         }
         float f = (float) Math.pow(2.0D, (note.getId() - 12.0D) / 12.0D);
-        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect("block.note." + instrumentName), net.minecraft.server.SoundCategory.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect("block.note_block." + instrumentName), net.minecraft.server.SoundCategory.RECORDS, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
Patch:
@@ -178,7 +178,7 @@ public boolean update(boolean force, boolean applyPhysics) {
         );
 
         // Update levers etc
-        if (applyPhysics && getData() instanceof Attachable) {
+        if (false && applyPhysics && getData() instanceof Attachable) { // Call does not map to new API
             world.getHandle().applyPhysics(pos.shift(CraftBlock.blockFaceToNotch(((Attachable) getData()).getAttachedFace())), newBlock.getBlock());
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -466,10 +466,10 @@ static Map<Enchantment, Integer> buildEnchantments(Map<String, Object> map, Item
     @Overridden
     void applyToItem(NBTTagCompound itemTag) {
         if (hasDisplayName()) {
-            setDisplayTag(itemTag, NAME.NBT, new NBTTagString(CraftChatMessage.toJSON(displayName)));
+            setDisplayTag(itemTag, NAME.NBT, new NBTTagString(CraftChatMessage.fromComponent(displayName))); // SPIGOT-4041: Should be JSON, but we're still aggressively converting stacks & old+new are both valid
         }
         if (hasLocalizedName()){
-            setDisplayTag(itemTag, LOCNAME.NBT, new NBTTagString(CraftChatMessage.toJSON(locName)));
+            setDisplayTag(itemTag, LOCNAME.NBT, new NBTTagString(CraftChatMessage.fromComponent(locName))); // SPIGOT-4041: Should be JSON, but we're still aggressively converting stacks & old+new are both valid
         }
 
         if (hasLore()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
Patch:
@@ -136,7 +136,7 @@ public static <T> ParticleParam toNMS(Particle particle, T obj) {
         if (particle.getDataType() == Particle.DustOptions.class) {
             Particle.DustOptions data = (Particle.DustOptions) obj;
             Color color = data.getColor();
-            return new ParticleParamRedstone(color.getRed(), color.getGreen(), color.getBlue(), data.getSize());
+            return new ParticleParamRedstone(color.getRed() / 255.0f, color.getGreen() / 255.0f, color.getBlue() / 255.0f, data.getSize());
         }
         throw new IllegalArgumentException(particle.getDataType().toString());
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -185,6 +185,7 @@ public final class CraftServer implements Server {
     private boolean printSaveWarning;
     private CraftIconCache icon;
     private boolean overrideAllCommandBlockCommands = false;
+    public boolean ignoreVanillaPermissions = false;
     private final List<CraftPlayer> playerView;
     public int reloadCount;
 
@@ -261,6 +262,7 @@ public CraftPlayer apply(EntityPlayer player) {
 
         saveCommandsConfig();
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
+        ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
         pluginManager.useTimings(configuration.getBoolean("settings.plugin-profiling"));
         monsterSpawn = configuration.getInt("spawn-limits.monsters");
         animalSpawn = configuration.getInt("spawn-limits.animals");
@@ -741,6 +743,7 @@ public void reload() {
         resetRecipes();
         reloadData();
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
+        ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
         int pollCount = 0;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
Patch:
@@ -196,6 +196,9 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
                                     case "values":
                                         super.visitMethodInsn( opcode, "org/bukkit/craftbukkit/util/CraftLegacy", "modern_" + name, desc, itf );
                                         return;
+                                    case "ordinal":
+                                        super.visitMethodInsn( Opcodes.INVOKESTATIC, "org/bukkit/craftbukkit/util/CraftLegacy", "modern_" + name, "(Lorg/bukkit/Material;)I", false );
+                                        return;
                                 }
                             }
 

File: paper-server/src/test/java/org/bukkit/PerMaterialTest.java
Patch:
@@ -173,7 +173,7 @@ public void testBlock() {
     }
 
     @Test
-    public void testAir() {
+    public void testItem() {
         if (material == Material.AIR) {
             assertTrue(material.isItem());
         } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftStructureBlock.java
Patch:
@@ -79,7 +79,7 @@ public void setStructureSize(BlockVector vector) {
         Validate.isTrue(isBetween(vector.getBlockX(), 0, MAX_SIZE), "Structure Size (X) must be between 0 and " + MAX_SIZE);
         Validate.isTrue(isBetween(vector.getBlockY(), 0, MAX_SIZE), "Structure Size (Y) must be between 0 and " + MAX_SIZE);
         Validate.isTrue(isBetween(vector.getBlockZ(), 0, MAX_SIZE), "Structure Size (Z) must be between 0 and " + MAX_SIZE);
-        getSnapshot().c(new BlockPosition(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ())); // PAIL: setStructureSize
+        getSnapshot().i = new BlockPosition(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ()); // PAIL: rename size
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -442,7 +442,7 @@ public boolean isLiquid() {
     }
 
     public PistonMoveReaction getPistonMoveReaction() {
-        return PistonMoveReaction.getById(getNMSBlock().getBlockData().getMaterial().getPushReaction().ordinal());
+        return PistonMoveReaction.getById(getNMSBlock().h(getNMSBlock().fromLegacyData(getData())).ordinal());
     }
 
     private boolean itemCausesDrops(ItemStack item) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -253,7 +253,7 @@ public InventoryView openInventory(Inventory inventory) {
                 break;
             case SHULKER_BOX:
                 if (iinventory instanceof TileEntityShulkerBox) {
-                    getHandle().openTileEntity((TileEntityShulkerBox) iinventory);
+                    getHandle().openContainer((TileEntityShulkerBox) iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:shulker_box");
                 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
Patch:
@@ -176,6 +176,9 @@ public CraftMetaSpawnEgg clone() {
         CraftMetaSpawnEgg clone = (CraftMetaSpawnEgg) super.clone();
 
         clone.spawnedType = spawnedType;
+        if (entityTag != null) {
+            clone.entityTag = entityTag.g();
+        }
 
         return clone;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -154,7 +154,7 @@ static int getNBT(Type type) {
             case BURST:
                 return 4;
             default:
-                throw new AssertionError(type);
+                throw new IllegalArgumentException("Unknown effect type " + type);
         }
     }
 
@@ -171,7 +171,7 @@ static Type getEffectType(int nbt) {
             case 4:
                 return Type.BURST;
             default:
-                throw new AssertionError(nbt);
+                throw new IllegalArgumentException("Unknown effect type " + nbt);
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -217,7 +217,7 @@ else if (entity instanceof EntityMinecartAbstract) {
     }
 
     public Location getLocation() {
-        return new Location(getWorld(), entity.locX, entity.locY, entity.locZ, entity instanceof EntityLiving ? entity.getHeadRotation() : entity.yaw, entity.pitch);
+        return new Location(getWorld(), entity.locX, entity.locY, entity.locZ, entity.getBukkitYaw(), entity.pitch);
     }
 
     public Location getLocation(Location loc) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -84,7 +84,7 @@ private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
 
         BlockPosition chunkcoordinates = worldServer.getSpawn();
 
-        int distanceFromSpawn = Math.max(Math.abs(x - chunkcoordinates.getX()), Math.abs(z - chunkcoordinates.getY()));
+        int distanceFromSpawn = Math.max(Math.abs(x - chunkcoordinates.getX()), Math.abs(z - chunkcoordinates.getZ()));
         return distanceFromSpawn > spawnSize;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
Patch:
@@ -29,11 +29,11 @@ public EntityType getType() {
 
     @Override
     public Villager.Profession getVillagerProfession() {
-        return Villager.Profession.values()[getHandle().getProfession()];
+        return Villager.Profession.values()[getHandle().getProfession() + Villager.Profession.FARMER.ordinal()];
     }
 
     @Override
     public void setVillagerProfession(Villager.Profession profession) {
-        getHandle().setProfession(profession == null ? 0 : profession.ordinal());
+        getHandle().setProfession(profession == null ? 0 : profession.ordinal() - Villager.Profession.FARMER.ordinal());
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
Patch:
@@ -226,7 +226,7 @@ void check(final Iterable<CraftTask> collection) {
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
-                return;
+                break;
             }
             if (taskPending.getTaskId() != -1 && taskPending.getOwner().equals(plugin)) {
                 taskPending.cancel0();

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
Patch:
@@ -114,6 +114,7 @@ public final int dispatchVanillaCommand(CommandSender bSender, ICommandListener
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 icommandlistener.sendMessage(chatmessage);
             }
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.SUCCESS_COUNT, j);
         } catch (ExceptionUsage exceptionusage) {
             ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new Object[] { new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()) });
             chatmessage1.getChatModifier().setColor(EnumChatFormat.RED);
@@ -135,7 +136,6 @@ public final int dispatchVanillaCommand(CommandSender bSender, ICommandListener
         } finally {
             MinecraftServer.getServer().worldServer = prev;
         }
-        icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.SUCCESS_COUNT, j);
         return j;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
Patch:
@@ -16,7 +16,7 @@
 public class CraftBanner extends CraftBlockEntityState<TileEntityBanner> implements Banner {
 
     private DyeColor base;
-    private List<Pattern> patterns = new ArrayList<Pattern>();
+    private List<Pattern> patterns;
 
     public CraftBanner(final Block block) {
         super(block, TileEntityBanner.class);
@@ -31,6 +31,7 @@ public void load(TileEntityBanner banner) {
         super.load(banner);
 
         base = DyeColor.getByDyeData((byte) banner.color.getInvColorIndex());
+        patterns = new ArrayList<Pattern>();
 
         if (banner.patterns != null) {
             for (int i = 0; i < banner.patterns.size(); i++) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
Patch:
@@ -84,7 +84,7 @@ public NBTTagCompound getSnapshotNBT() {
         return snapshot.save(new NBTTagCompound());
     }
 
-    // copies the data of the given tile entity data to this block state
+    // copies the data of the given tile entity to this block state
     protected void load(T tileEntity) {
         if (tileEntity != null && tileEntity != snapshot) {
             copyData(tileEntity, snapshot);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
Patch:
@@ -133,7 +133,7 @@ public static SlotType getSlotType(InventoryView inventory, int slot) {
                 } else if (slot > 35) {
                     type = SlotType.QUICKBAR;
                 }
-            } else if (slot >= (inventory.countSlots() - 9)) {
+            } else if (slot >= (inventory.countSlots() - (9 + 4 + 1))) { // Quickbar, Armor, Offhand
                 type = SlotType.QUICKBAR;
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
Patch:
@@ -52,7 +52,7 @@ public String getPrefix() throws IllegalStateException {
 
     public void setPrefix(String prefix) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(prefix, "Prefix cannot be null");
-        Validate.isTrue(prefix.length() <= 32, "Prefix '" + prefix + "' is longer than the limit of 32 characters");
+        Validate.isTrue(prefix.length() <= 16, "Prefix '" + prefix + "' is longer than the limit of 16 characters");
         CraftScoreboard scoreboard = checkState();
 
         team.setPrefix(prefix);
@@ -66,7 +66,7 @@ public String getSuffix() throws IllegalStateException {
 
     public void setSuffix(String suffix) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(suffix, "Suffix cannot be null");
-        Validate.isTrue(suffix.length() <= 32, "Suffix '" + suffix + "' is longer than the limit of 32 characters");
+        Validate.isTrue(suffix.length() <= 16, "Suffix '" + suffix + "' is longer than the limit of 16 characters");
         CraftScoreboard scoreboard = checkState();
 
         team.setSuffix(suffix);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -391,7 +391,7 @@ public boolean eject() {
             return false;
         }
 
-        getHandle().leaveVehicle();
+        getHandle().aF(); // PAIL: rename
         return true;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
Patch:
@@ -127,7 +127,7 @@ public static SlotType getSlotType(InventoryView inventory, int slot) {
         } else {
             if (slot == -999 || slot == -1) {
                 type = SlotType.OUTSIDE;
-            } else if (inventory.getType() == InventoryType.CRAFTING) {
+            } else if (inventory.getType() == InventoryType.CRAFTING) { // Also includes creative inventory
                 if (slot < 9) {
                     type = SlotType.ARMOR;
                 } else if (slot > 35) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -280,7 +280,7 @@ public boolean teleport(Location location, TeleportCause cause) {
         // entity.setLocation() throws no event, and so cannot be cancelled
         entity.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         // SPIGOT-619: Force sync head rotation also
-        entity.h(location.getYaw()); // PAIL: setHeadRotation
+        entity.setHeadRotation(location.getYaw());
 
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
Patch:
@@ -21,7 +21,7 @@ public CraftShapedRecipe(NamespacedKey key, ItemStack result) {
     }
 
     public CraftShapedRecipe(ItemStack result, ShapedRecipes recipe) {
-        this(CraftNamespacedKey.fromMinecraft(CraftingManager.recipes.b(recipe)), result);
+        this(CraftNamespacedKey.fromMinecraft(recipe.key), result);
         this.recipe = recipe;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
Patch:
@@ -21,7 +21,7 @@ public CraftShapelessRecipe(NamespacedKey key, ItemStack result) {
     }
 
     public CraftShapelessRecipe(ItemStack result, ShapelessRecipes recipe) {
-        this(CraftNamespacedKey.fromMinecraft(recipe.key != null ? recipe.key : CraftingManager.recipes.b(recipe)), result);
+        this(CraftNamespacedKey.fromMinecraft(recipe.key), result);
         this.recipe = recipe;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -911,8 +911,8 @@ public void hidePlayer(Player player) {
             entry.clear(getHandle());
         }
 
-        // Remove the hidden player from this player user list
-        if (!other.joining) {
+        // Remove the hidden player from this player user list, if they're on it
+        if (other.sentListPacket) {
             getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, other));
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
Patch:
@@ -55,6 +55,7 @@
 import org.bukkit.craftbukkit.block.CraftSign;
 import org.bukkit.craftbukkit.block.CraftSkull;
 import org.bukkit.craftbukkit.block.CraftStructureBlock;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BlockStateMeta;
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
@@ -84,7 +85,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
         super(tag);
         this.material = material;
 
-        if (tag.hasKeyOfType(BLOCK_ENTITY_TAG.NBT, 10)) {
+        if (tag.hasKeyOfType(BLOCK_ENTITY_TAG.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
             blockEntityTag = tag.getCompound(BLOCK_ENTITY_TAG.NBT);
         } else {
             blockEntityTag = null;
@@ -113,7 +114,7 @@ void applyToItem(NBTTagCompound tag) {
 
     @Override
     void deserializeInternal(NBTTagCompound tag) {
-        if (tag.hasKeyOfType(BLOCK_ENTITY_TAG.NBT, 10)) {
+        if (tag.hasKeyOfType(BLOCK_ENTITY_TAG.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
             blockEntityTag = tag.getCompound(BLOCK_ENTITY_TAG.NBT);
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
Patch:
@@ -11,6 +11,7 @@
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BookMeta;
 
 import com.google.common.base.Strings;
@@ -75,7 +76,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         if (tag.hasKey(BOOK_PAGES.NBT) && handlePages) {
-            NBTTagList pages = tag.getList(BOOK_PAGES.NBT, 8);
+            NBTTagList pages = tag.getList(BOOK_PAGES.NBT, CraftMagicNumbers.NBT.TAG_STRING);
 
             for (int i = 0; i < pages.size(); i++) {
                 String page = pages.getString(i);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
Patch:
@@ -10,6 +10,7 @@
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BookMeta;
 
 import com.google.common.collect.ImmutableMap.Builder;
@@ -34,7 +35,7 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
         }
 
         if (tag.hasKey(BOOK_PAGES.NBT)) {
-            NBTTagList pages = tag.getList(BOOK_PAGES.NBT, 8);
+            NBTTagList pages = tag.getList(BOOK_PAGES.NBT, CraftMagicNumbers.NBT.TAG_STRING);
 
             for (int i = 0; i < pages.size(); i++) {
                 String page = pages.getString(i);
@@ -79,7 +80,7 @@ void applyToItem(NBTTagCompound itemData) {
                 ));
             }
             itemData.set(BOOK_PAGES.NBT, list);
-        }        
+        }
         itemData.setBoolean(RESOLVED.NBT, true);
 
         if (generation != null) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -17,6 +17,7 @@
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.ItemMetaKey.Specific;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.ItemMetaKey.Specific.To;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.FireworkMeta;
 
 import com.google.common.collect.ImmutableList;
@@ -88,7 +89,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
             return;
         }
 
-        NBTTagList fireworkEffects = fireworks.getList(EXPLOSIONS.NBT, 10);
+        NBTTagList fireworkEffects = fireworks.getList(EXPLOSIONS.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
         List<FireworkEffect> effects = this.effects = new ArrayList<FireworkEffect>(fireworkEffects.size());
 
         for (int i = 0; i < fireworkEffects.size(); i++) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -13,6 +13,7 @@
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
@@ -63,7 +64,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
             color = Color.fromRGB(tag.getInt(POTION_COLOR.NBT));
         }
         if (tag.hasKey(POTION_EFFECTS.NBT)) {
-            NBTTagList list = tag.getList(POTION_EFFECTS.NBT, 10);
+            NBTTagList list = tag.getList(POTION_EFFECTS.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
             int length = list.size();
             customEffects = new ArrayList<PotionEffect>(length);
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
Patch:
@@ -97,7 +97,7 @@ public int numberOfPatterns() {
 
     @Override
     public boolean update(boolean force, boolean applyPhysics) {
-        boolean result = (isPlaced()) ? super.update(force, applyPhysics) : true;
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             banner.color = EnumColor.fromInvColorIndex(base.getDyeData());

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
Patch:
@@ -151,7 +151,9 @@ public boolean update(boolean force) {
     }
 
     public boolean update(boolean force, boolean applyPhysics) {
-        requirePlaced();
+        if (!isPlaced()) {
+            return true;
+        }
         Block block = getBlock();
 
         if (block.getType() != getType()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
Patch:
@@ -44,7 +44,7 @@ public void setName(String name) {
     }
 
     public boolean update(boolean force, boolean applyPhysics) {
-        boolean result = (isPlaced()) ? super.update(force, applyPhysics) : true;
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             commandBlock.getCommandBlock().setCommand(command);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftComparator.java
Patch:
@@ -4,10 +4,9 @@
 import net.minecraft.server.TileEntityComparator;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
-import org.bukkit.block.EnderChest;
 import org.bukkit.craftbukkit.CraftWorld;
 
-public class CraftComparator extends CraftBlockState implements EnderChest {
+public class CraftComparator extends CraftBlockState {
 
     private final CraftWorld world;
     private final TileEntityComparator comparator;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDaylightDetector.java
Patch:
@@ -4,10 +4,9 @@
 import net.minecraft.server.TileEntityLightDetector;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
-import org.bukkit.block.EnderChest;
 import org.bukkit.craftbukkit.CraftWorld;
 
-public class CraftDaylightDetector extends CraftBlockState implements EnderChest {
+public class CraftDaylightDetector extends CraftBlockState {
 
     private final CraftWorld world;
     private final TileEntityLightDetector detector;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -170,10 +170,10 @@ public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeB
                 // Copy base IDs
                 for (int j = 0; j < 4096; j++) {
                     blockids[j] = (short) (rawIds[j] & 0xFF);
-                }               
+                }
 
                 sectionBlockIDs[i] = blockids;
-                
+
                 if (cs[i].getSkyLightArray() == null) {
                     sectionSkyLights[i] = emptyData;
                 } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -15,6 +15,7 @@
 import net.minecraft.server.TileEntityDispenser;
 import net.minecraft.server.TileEntityDropper;
 import net.minecraft.server.TileEntityFurnace;
+import net.minecraft.server.TileEntityShulkerBox;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
@@ -462,6 +463,8 @@ public InventoryType getType() {
            return InventoryType.ANVIL;
         } else if (inventory instanceof IHopper) {
             return InventoryType.HOPPER;
+        } else if (inventory instanceof TileEntityShulkerBox) {
+            return InventoryType.SHULKER_BOX;
         } else {
             return InventoryType.CHEST;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
Patch:
@@ -26,7 +26,7 @@ public CraftBanner(final Block block) {
         CraftWorld world = (CraftWorld) block.getWorld();
         banner = (TileEntityBanner) world.getTileEntityAt(getX(), getY(), getZ());
 
-        base = DyeColor.getByDyeData((byte) banner.color.getColorIndex());
+        base = DyeColor.getByDyeData((byte) banner.color.getInvColorIndex());
 
         if (banner.patterns != null) {
             for (int i = 0; i < banner.patterns.size(); i++) {
@@ -40,7 +40,7 @@ public CraftBanner(final Material material, final TileEntityBanner te) {
         super(material);
         banner = te;
 
-        base = DyeColor.getByDyeData((byte) banner.color.getColorIndex());
+        base = DyeColor.getByDyeData((byte) banner.color.getInvColorIndex());
 
         if (banner.patterns != null) {
             for (int i = 0; i < banner.patterns.size(); i++) {
@@ -100,7 +100,7 @@ public boolean update(boolean force, boolean applyPhysics) {
         boolean result = (isPlaced()) ? super.update(force, applyPhysics) : true;
 
         if (result) {
-            banner.color = EnumColor.fromColorIndex(base.getDyeData());
+            banner.color = EnumColor.fromInvColorIndex(base.getDyeData());
 
             NBTTagList newPatterns = new NBTTagList();
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1484,7 +1484,7 @@ public Inventory createInventory(InventoryHolder owner, int size, String title)
 
     @Override
     public Merchant createMerchant(String title) {
-        return new CraftMerchantCustom(title);
+        return new CraftMerchantCustom(title == null ? InventoryType.MERCHANT.getDefaultTitle() : title);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
Patch:
@@ -22,6 +22,8 @@ public boolean isCarryingChest() {
 
     @Override
     public void setCarryingChest(boolean chest) {
+        if (chest == isCarryingChest()) return;
         getHandle().setCarryingChest(chest);
+        getHandle().dx();
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
Patch:
@@ -132,7 +132,7 @@ public static net.minecraft.server.Statistic getMaterialStatistic(org.bukkit.Sta
     }
 
     public static net.minecraft.server.Statistic getEntityStatistic(org.bukkit.Statistic stat, EntityType entity) {
-        MonsterEggInfo monsteregginfo = (MonsterEggInfo) EntityTypes.eggInfo.get(entity.getName());
+        MonsterEggInfo monsteregginfo = (MonsterEggInfo) EntityTypes.eggInfo.get(new MinecraftKey(entity.getName()));
 
         if (monsteregginfo != null) {
             if (stat == org.bukkit.Statistic.KILL_ENTITY) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -996,7 +996,7 @@ public static FireworkExplodeEvent callFireworkExplodeEvent(EntityFireworks fire
     }
 
     public static PrepareAnvilEvent callPrepareAnvilEvent(InventoryView view, ItemStack item) {
-        PrepareAnvilEvent event = new PrepareAnvilEvent(view, CraftItemStack.asCraftMirror(item).clone());
+        PrepareAnvilEvent event = new PrepareAnvilEvent(view, CraftItemStack.asCraftMirror(item));
         event.getView().getPlayer().getServer().getPluginManager().callEvent(event);
         event.getInventory().setItem(2, event.getResult());
         return event;
@@ -1016,7 +1016,7 @@ public static AreaEffectCloudApplyEvent callAreaEffectCloudApplyEvent(EntityArea
 
     public static EntityBreedEvent callEntityBreedEvent(EntityLiving child, EntityLiving mother, EntityLiving father, EntityLiving breeder, ItemStack bredWith, int experience) {
         org.bukkit.entity.LivingEntity breederEntity = (LivingEntity)(breeder == null ? null : breeder.getBukkitEntity());
-        CraftItemStack bredWithStack = (bredWith.isEmpty()) ? null : CraftItemStack.asCraftMirror(bredWith).clone();
+        CraftItemStack bredWithStack = CraftItemStack.asCraftMirror(bredWith);
 
         EntityBreedEvent event = new EntityBreedEvent((LivingEntity) child.getBukkitEntity(), (LivingEntity) mother.getBukkitEntity(), (LivingEntity) father.getBukkitEntity(), breederEntity, bredWithStack, experience);
         child.world.getServer().getPluginManager().callEvent(event);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -117,7 +117,7 @@ public void setMaxHealth(double amount) {
     }
 
     public void resetMaxHealth() {
-        setMaxHealth(getHandle().getMaxHealth());
+        setMaxHealth(getHandle().getAttributeInstance(GenericAttributes.maxHealth).getAttribute().b()); // PAIL: getDefault
     }
 
     public double getEyeHeight() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
Patch:
@@ -3,12 +3,11 @@
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Map;
+import java.util.logging.Level;
 
-import org.apache.commons.lang.UnhandledException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitWorker;
 
-
 class CraftAsyncTask extends CraftTask {
 
     private final LinkedList<BukkitWorker> workers = new LinkedList<BukkitWorker>();
@@ -53,7 +52,8 @@ public Plugin getOwner() {
             super.run();
         } catch (final Throwable t) {
             thrown = t;
-            throw new UnhandledException(
+            getOwner().getLogger().log(
+                    Level.WARNING,
                     String.format(
                         "Plugin %s generated an exception while executing task %s",
                         getOwner().getDescription().getFullName(),

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1085,6 +1085,9 @@ public net.minecraft.server.Entity createEntity(Location location, Class<? exten
                 entity = new EntityLeash(world, new BlockPosition((int) x, (int) y, (int) z));
                 entity.attachedToPlayer = true;
             } else {
+                // No valid face found
+                Preconditions.checkArgument(face != BlockFace.SELF, "Cannot spawn hanging entity for %s at %s (no free face)", clazz.getName(), location);
+
                 EnumDirection dir = CraftBlock.blockFaceToNotch(face).opposite();
                 if (Painting.class.isAssignableFrom(clazz)) {
                     entity = new EntityPainting(world, new BlockPosition((int) x, (int) y, (int) z), dir);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -137,7 +137,7 @@ public boolean setTypeIdAndData(final int type, final byte data, final boolean a
         BlockPosition position = new BlockPosition(x, y, z);
 
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
-        if (type != 0) {
+        if (type != 0 && type != getTypeId()) {
             chunk.getHandle().getWorld().setTypeAndData(position, Blocks.AIR.getBlockData(), 0);
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -137,7 +137,9 @@ public boolean setTypeIdAndData(final int type, final byte data, final boolean a
         BlockPosition position = new BlockPosition(x, y, z);
 
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
-        chunk.getHandle().getWorld().setTypeAndData(position, Blocks.AIR.getBlockData(), 0);
+        if (type != 0) {
+            chunk.getHandle().getWorld().setTypeAndData(position, Blocks.AIR.getBlockData(), 0);
+        }
 
         if (applyPhysics) {
             return chunk.getHandle().getWorld().setTypeAndData(position, blockData, 3);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -287,6 +287,8 @@ public BlockState getState() {
         case SKULL:
             return new CraftSkull(this);
         case COMMAND:
+        case COMMAND_CHAIN:
+        case COMMAND_REPEATING:
             return new CraftCommandBlock(this);
         case BEACON:
             return new CraftBeacon(this);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -863,7 +863,7 @@ public <T> void playEffect(Location loc, Effect effect, T data) {
 
     public <T> void playEffect(Location loc, Effect effect, T data, int radius) {
         if (data != null) {
-            Validate.isTrue(data.getClass().isAssignableFrom(effect.getData()), "Wrong kind of data for this effect!");
+            Validate.isTrue(effect.getData() != null && effect.getData().isAssignableFrom(data.getClass()), "Wrong kind of data for this effect!");
         } else {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -322,7 +322,7 @@ public void playEffect(Location loc, Effect effect, int data) {
     @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
         if (data != null) {
-            Validate.isTrue(data.getClass().isAssignableFrom(effect.getData()), "Wrong kind of data for this effect!");
+            Validate.isTrue(effect.getData() != null && effect.getData().isAssignableFrom(data.getClass()), "Wrong kind of data for this effect!");
         } else {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -280,7 +280,7 @@ boolean notUncommon(CraftMetaItem meta) {
     Builder<String, Object> serialize(Builder<String, Object> builder) {
         super.serialize(builder);
         if (type.getType() != PotionType.UNCRAFTABLE) {
-        	builder.put(DEFAULT_POTION.BUKKIT, type);
+            builder.put(DEFAULT_POTION.BUKKIT, CraftPotionUtil.fromBukkit(type));
         }
 
         if (hasCustomEffects()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
Patch:
@@ -29,6 +29,7 @@ public static Permission registerPermissions(Permission parent) {
         DefaultPermissions.registerPermission(PREFIX + "seed", "Allows the user to view the seed of the world", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "effect", "Allows the user to add/remove effects on players", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "selector", "Allows the use of selectors", PermissionDefault.OP, commands);
+        DefaultPermissions.registerPermission(PREFIX + "trigger", "Allows the use of the trigger command", PermissionDefault.TRUE, commands);
 
         commands.recalculatePermissibles();
         return commands;

File: paper-server/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
Patch:
@@ -82,7 +82,7 @@ public static PotionData toBukkit(String type) {
         }
         potionType = regular.inverse().get(type);
         if (potionType != null) {
-            return new PotionData(potionType, false, true);
+            return new PotionData(potionType, false, false);
         }
         return new PotionData(PotionType.UNCRAFTABLE, false, false);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -205,7 +205,7 @@ public boolean removeCustomEffect(PotionEffectType type) {
         Iterator<PotionEffect> iterator = customEffects.iterator();
         while (iterator.hasNext()) {
             PotionEffect effect = iterator.next();
-            if (effect.getType() == type) {
+            if (type.equals(effect.getType())) {
                 iterator.remove();
                 changed = true;
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
Patch:
@@ -119,6 +119,9 @@ public static net.minecraft.server.Statistic getMaterialStatistic(org.bukkit.Sta
             if (stat == Statistic.BREAK_ITEM) {
                 return StatisticList.c(CraftMagicNumbers.getItem(material)); // PAIL: getBreakItemStatistic
             }
+            if (stat == Statistic.DROP) {
+                return StatisticList.e(CraftMagicNumbers.getItem(material)); // PAIL: getDropItemStatistic
+            }
         } catch (ArrayIndexOutOfBoundsException e) {
             return null;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
Patch:
@@ -19,9 +19,9 @@ public CraftMerchantRecipe(net.minecraft.server.MerchantRecipe merchantRecipe) {
     public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward) {
         super(result, uses, maxUses, experienceReward);
         this.handle = new net.minecraft.server.MerchantRecipe(
-                CraftItemStack.asNMSCopy(result),
                 null,
                 null,
+                CraftItemStack.asNMSCopy(result),
                 uses,
                 maxUses,
                 this

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -345,12 +345,12 @@ public <T extends Projectile> T launchProjectile(Class<? extends T> projectile,
             ((EntityProjectile) launch).a(getHandle(), getHandle().pitch, getHandle().yaw, 0.0F, 1.5F, 1.0F); // ItemEnderPearl
         } else if (Arrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
-                launch = new EntityTippedArrow(world);
+                launch = new EntityTippedArrow(world, getHandle());
                 ((EntityTippedArrow) launch).setType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
-                launch = new EntitySpectralArrow(world);
+                launch = new EntitySpectralArrow(world, getHandle());
             } else {
-                launch = new EntityTippedArrow(world);
+                launch = new EntityTippedArrow(world, getHandle());
             }
             ((EntityArrow) launch).a(getHandle(), getHandle().pitch, getHandle().yaw, 0.0F, 3.0F, 1.0F); // ItemBow
         } else if (ThrownPotion.class.isAssignableFrom(projectile)) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
Patch:
@@ -96,7 +96,7 @@ public int numberOfPatterns() {
 
     @Override
     public boolean update(boolean force, boolean applyPhysics) {
-        boolean result = super.update(force, applyPhysics);
+        boolean result = (isPlaced()) ? super.update(force, applyPhysics) : true;
 
         if (result) {
             banner.color = base.getDyeData();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
Patch:
@@ -187,6 +187,9 @@ public boolean hasBlockState() {
 
     @Override
     public BlockState getBlockState() {
+        if (blockEntityTag != null && material == Material.SHIELD) {
+            blockEntityTag.setString("id", "Banner"); // Hack
+        }
         TileEntity te = blockEntityTag == null ? null : TileEntity.a(MinecraftServer.getServer(), blockEntityTag);
 
         switch (material) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -229,7 +229,7 @@ public BlockPosition findNearestMapFeature(World world, String type, BlockPositi
     public void recreateStructures(int i, int j) {}
 
     @Override
-    public void recreateStructures(Chunk chunk, int i, int i1) {
-
+    public void recreateStructures(Chunk chunk, int i, int j) {
+        strongholdGen.a(this.world, i, j, (ChunkSnapshot) null);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
Patch:
@@ -103,6 +103,8 @@ private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         case BREWING_STAND_ITEM:
         case ENCHANTMENT_TABLE:
         case COMMAND:
+        case COMMAND_REPEATING:
+        case COMMAND_CHAIN:
         case BEACON:
         case DAYLIGHT_DETECTOR:
         case DAYLIGHT_DETECTOR_INVERTED:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -365,6 +365,8 @@ public static ItemMeta getItemMeta(net.minecraft.server.ItemStack item) {
             case BREWING_STAND_ITEM:
             case ENCHANTMENT_TABLE:
             case COMMAND:
+            case COMMAND_REPEATING:
+            case COMMAND_CHAIN:
             case BEACON:
             case DAYLIGHT_DETECTOR:
             case DAYLIGHT_DETECTOR_INVERTED:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
Patch:
@@ -34,8 +34,7 @@ public static int[] toData(Particle particle, Object obj) {
                 return new int[]{0};
             }
             MaterialData data = (MaterialData) obj;
-            IBlockData nms = CraftMagicNumbers.getBlock(data.getItemType()).fromLegacyData(data.getData());
-            return new int[]{Block.REGISTRY_ID.getId(nms)};
+            return new int[]{data.getItemTypeId() + ((int)(data.getData()) << 12)};
         }
         throw new IllegalArgumentException(particle.getDataType().toString());
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
Patch:
@@ -145,7 +145,7 @@ public ItemStack[] getArmorContents() {
     }
 
     public void setArmorContents(ItemStack[] items) {
-        int cnt = getSize();
+        int cnt = getInventory().items.length;
 
         if (items == null) {
             items = new ItemStack[4];

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -465,7 +465,7 @@ private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSo
             DamageCause cause = null;
             Block damager = blockDamage;
             blockDamage = null;
-            if (source == DamageSource.CACTUS || source == DamageSource.j) { // PAIL: rename
+            if (source == DamageSource.CACTUS) {
                 cause = DamageCause.CONTACT;
             } else {
                 throw new AssertionError(String.format("Unhandled damage of %s by %s from %s", entity, damager, source.translationIndex));
@@ -518,6 +518,8 @@ private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSo
             cause = DamageCause.MAGIC;
         } else if (source == DamageSource.FALL) {
             cause = DamageCause.FALL;
+        } else if (source == DamageSource.j) { // PAIL: rename
+            cause = DamageCause.FLY_INTO_WALL;
         } else if (source == DamageSource.GENERIC) {
             return new EntityDamageEvent(entity.getBukkitEntity(), null, modifiers, modifierFunctions);
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Optional;
 import net.minecraft.server.EntityFireworks;
 import net.minecraft.server.ItemStack;
 import net.minecraft.server.Items;
@@ -14,7 +15,6 @@
 import java.util.Random;
 
 public class CraftFirework extends CraftEntity implements Firework {
-    private static final int FIREWORK_ITEM_INDEX = 8;
 
     private final Random random = new Random();
     private final CraftItemStack item;
@@ -26,7 +26,7 @@ public CraftFirework(CraftServer server, EntityFireworks entity) {
 
         if (item == null) {
             item = new ItemStack(Items.FIREWORKS);
-            getHandle().getDataWatcher().register(EntityFireworks.FIREWORK_ITEM, item);
+            getHandle().getDataWatcher().set(EntityFireworks.FIREWORK_ITEM, Optional.of(item));
         }
 
         this.item = CraftItemStack.asCraftMirror(item);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -84,7 +84,7 @@ boolean isEmpty() {
     }
 
     boolean isSkullEmpty() {
-        return !(hasOwner());
+        return profile == null;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -71,7 +71,7 @@ void serializeInternal(final Map<String, NBTBase> internalTags) {
     void applyToItem(NBTTagCompound tag) {
         super.applyToItem(tag);
 
-        if (hasOwner()) {
+        if (profile != null) {
             NBTTagCompound owner = new NBTTagCompound();
             GameProfileSerializer.serialize(owner, profile);
             tag.set(SKULL_OWNER.NBT, owner);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -826,7 +826,7 @@ public <T> void playEffect(Location loc, Effect effect, T data) {
 
     public <T> void playEffect(Location loc, Effect effect, T data, int radius) {
         if (data != null) {
-            Validate.isTrue(data.getClass().equals(effect.getData()), "Wrong kind of data for this effect!");
+            Validate.isTrue(data.getClass().isAssignableFrom(effect.getData()), "Wrong kind of data for this effect!");
         } else {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -325,7 +325,7 @@ public void playEffect(Location loc, Effect effect, int data) {
     @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
         if (data != null) {
-            Validate.isTrue(data.getClass().equals(effect.getData()), "Wrong kind of data for this effect!");
+            Validate.isTrue(data.getClass().isAssignableFrom(effect.getData()), "Wrong kind of data for this effect!");
         } else {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -397,7 +397,7 @@ public Player getPlayer(final String name) {
         int delta = Integer.MAX_VALUE;
         for (Player player : getOnlinePlayers()) {
             if (player.getName().toLowerCase().startsWith(lowerName)) {
-                int curDelta = player.getName().length() - lowerName.length();
+                int curDelta = Math.abs(player.getName().length() - lowerName.length());
                 if (curDelta < delta) {
                     found = player;
                     delta = curDelta;

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
Patch:
@@ -24,7 +24,7 @@ private Logger getLogger(String name) {
 
     @Override
     public void publish(LogRecord record) {
-        Logger logger = getLogger(record.getLoggerName());
+        Logger logger = getLogger(String.valueOf(record.getLoggerName())); // See SPIGOT-1230
         Throwable exception = record.getThrown();
         Level level = record.getLevel();
         String message = getFormatter().formatMessage(record);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -197,6 +197,7 @@ public InventoryView openInventory(Inventory inventory) {
                 } else {
                     openCustomInventory(inventory, player, "minecraft:dropper");
                 }
+                break;
             case FURNACE:
                 if (iinventory instanceof TileEntityFurnace) {
                     getHandle().openContainer((TileEntityFurnace) iinventory);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -799,6 +799,7 @@ public static Set<String> getHandledTags() {
                         DISPLAY.NBT,
                         REPAIR.NBT,
                         ENCHANTMENTS.NBT,
+                        HIDEFLAGS.NBT,
                         CraftMetaMap.MAP_SCALING.NBT,
                         CraftMetaPotion.POTION_EFFECTS.NBT,
                         CraftMetaSkull.SKULL_OWNER.NBT,

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
Patch:
@@ -38,6 +38,7 @@ public void setItemInHand(ItemStack stack) {
     public void setItem(int index, ItemStack item) {
         super.setItem(index, item);
         EntityPlayer player = ((CraftPlayer) this.getHolder()).getHandle();
+        if (player.playerConnection == null) return;
         // PacketPlayOutSetSlot places the items differently than setItem()
         //
         // Between, and including, index 9 (the first index outside of the hotbar) and index 35 (the last index before

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
Patch:
@@ -49,7 +49,9 @@ public boolean setFacingDirection(BlockFace face, boolean force) {
     }
 
     public BlockFace getFacing() {
-        switch (this.getHandle().direction) {
+        EnumDirection direction = this.getHandle().direction;
+        if (direction == null) return BlockFace.SELF;
+        switch (direction) {
             case SOUTH:
             default:
                 return BlockFace.SOUTH;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -326,7 +326,7 @@ public Collection<PotionEffect> getActivePotionEffects() {
             if (!(raw instanceof MobEffect))
                 continue;
             MobEffect handle = (MobEffect) raw;
-            effects.add(new PotionEffect(PotionEffectType.getById(handle.getEffectId()), handle.getDuration(), handle.getAmplifier(), handle.isAmbient()));
+            effects.add(new PotionEffect(PotionEffectType.getById(handle.getEffectId()), handle.getDuration(), handle.getAmplifier(), handle.isAmbient(), handle.isShowParticles()));
         }
         return effects;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -205,7 +205,7 @@ static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean null
     @Specific(Specific.To.NBT)
     static final ItemMetaKey ATTRIBUTES_UUID_LOW = new ItemMetaKey("UUIDLeast");
     @Specific(Specific.To.NBT)
-    static final ItemMetaKey HIDEFLAGS = new ItemMetaKey("ItemFlags", "hideFlags");
+    static final ItemMetaKey HIDEFLAGS = new ItemMetaKey("HideFlags", "ItemFlags");
 
     private String displayName;
     private List<String> lore;

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
Patch:
@@ -105,13 +105,14 @@ public void resetScores(String entry) throws IllegalArgumentException {
     public Team getPlayerTeam(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
 
-        return getTeam(player.getName());
+        ScoreboardTeam team = board.getPlayerTeam(player.getName());
+        return team == null ? null : new CraftTeam(this, team);
     }
 
     public Team getTeam(String teamName) throws IllegalArgumentException {
         Validate.notNull(teamName, "Team name cannot be null");
 
-        ScoreboardTeam team = board.getPlayerTeam(teamName);
+        ScoreboardTeam team = board.getTeam(teamName);
         return team == null ? null : new CraftTeam(this, team);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.Map;
 
 import net.minecraft.server.Scoreboard;
+import net.minecraft.server.ScoreboardObjective;
 import net.minecraft.server.ScoreboardScore;
 
 import org.bukkit.Bukkit;
@@ -41,7 +42,7 @@ public int getScore() throws IllegalStateException {
         Scoreboard board = objective.checkState().board;
 
         if (board.getPlayers().contains(entry)) { // Lazy
-            Map<String, ScoreboardScore> scores = board.getPlayerObjectives(entry);
+            Map<ScoreboardObjective, ScoreboardScore> scores = board.getPlayerObjectives(entry);
             ScoreboardScore score = scores.get(objective.getHandle());
             if (score != null) { // Lazy
                 return score.getScore();

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
Patch:
@@ -31,7 +31,7 @@ public EntityType getType() {
 
     @Override
     public Type getRabbitType() {
-        int type = getHandle().cl();
+        int type = getHandle().cl(); // PAIL: Rename
         return CraftMagicMapping.fromMagic(type);
     }
 
@@ -72,7 +72,7 @@ private static void set(Type type, int value) {
         }
 
         public static Type fromMagic(int magic) {
-            if (magic > 0 && magic < reverse.length) {
+            if (magic >= 0 && magic < reverse.length) {
                 return reverse[magic];
             } else if (magic == 99) {
                 return Type.THE_KILLER_BUNNY;

File: paper-server/src/test/java/org/bukkit/WorldTypeTest.java
Patch:
@@ -11,6 +11,7 @@ public class WorldTypeTest {
     public void testTypes() {
         for (WorldType type : WorldType.types) {
             if (type == null) continue;
+            if (type == WorldType.DEBUG_ALL_BLOCK_STATES) continue; // Doesn't work anyway
 
             assertThat(type.name() + " has no Bukkit world", org.bukkit.WorldType.getByName(type.name()), is(not(nullValue())));
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTileEntity.java
Patch:
@@ -20,7 +20,7 @@ public class CraftMetaTileEntity extends CraftMetaItem {
         super(meta);
         this.material = material;
 
-        if (!(meta instanceof CraftMetaTileEntity)) {
+        if (!(meta instanceof CraftMetaTileEntity) || ((CraftMetaTileEntity) meta).material != material) {
             blockEntityTag = null;
             return;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.List;
 
 import net.minecraft.server.DamageSource;
+import net.minecraft.server.EntityArmorStand;
 import net.minecraft.server.EntityArrow;
 import net.minecraft.server.EntityEgg;
 import net.minecraft.server.EntityEnderDragon;
@@ -67,7 +68,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     public CraftLivingEntity(final CraftServer server, final EntityLiving entity) {
         super(server, entity);
 
-        if (entity instanceof EntityInsentient) {
+        if (entity instanceof EntityInsentient || entity instanceof EntityArmorStand) {
             equipment = new CraftEntityEquipment(this);
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -848,7 +848,9 @@ public World createWorld(WorldCreator creator) {
         IDataManager sdm = new ServerNBTManager(getWorldContainer(), name, true);
         WorldData worlddata = sdm.getWorldData();
         if (worlddata == null) {
-            worlddata = new WorldData(new WorldSettings(creator.seed(), EnumGamemode.getById(getDefaultGameMode().getValue()), generateStructures, hardcore, type), name);
+            WorldSettings worldSettings = new WorldSettings(creator.seed(), EnumGamemode.getById(getDefaultGameMode().getValue()), generateStructures, hardcore, type);
+            worldSettings.setGeneratorSettings(creator.generatorSettings());
+            worlddata = new WorldData(worldSettings, name);
         }
         worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
         WorldServer internal = (WorldServer) new WorldServer(console, sdm, worlddata, dimension, console.methodProfiler, creator.environment(), generator).b();

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -67,6 +67,7 @@
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.DatFileFilter;
 import org.bukkit.craftbukkit.util.Versioning;
+import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
@@ -318,6 +319,7 @@ public void enablePlugins(PluginLoadOrder type) {
             commandMap.registerServerAliases();
             loadCustomPermissions();
             DefaultPermissions.registerCorePermissions();
+            CraftDefaultPermissions.registerCorePermissions();
             helpMap.initializeCommands();
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -826,10 +826,10 @@ public static void handleEditBookEvent(EntityPlayer player, ItemStack newBookIte
         // If they've got the same item in their hand, it'll need to be updated.
         if (itemInHand != null && itemInHand.getItem() == Items.WRITABLE_BOOK) {
             if (!editBookEvent.isCancelled()) {
-                CraftItemStack.setItemMeta(itemInHand, editBookEvent.getNewBookMeta());
                 if (editBookEvent.isSigning()) {
                     itemInHand.setItem(Items.WRITTEN_BOOK);
                 }
+                CraftItemStack.setItemMeta(itemInHand, editBookEvent.getNewBookMeta());
             }
 
             // Client will have updated its idea of the book item; we need to overwrite that

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
Patch:
@@ -62,8 +62,9 @@ private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         case AIR:
             return null;
         case WRITTEN_BOOK:
+            return meta instanceof CraftMetaBookSigned ? meta : new CraftMetaBookSigned(meta);
         case BOOK_AND_QUILL:
-            return meta instanceof CraftMetaBook ? meta : new CraftMetaBook(meta);
+            return meta != null && meta.getClass().equals(CraftMetaBook.class) ? meta : new CraftMetaBook(meta);
         case SKULL_ITEM:
             return meta instanceof CraftMetaSkull ? meta : new CraftMetaSkull(meta);
         case LEATHER_HELMET:

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -99,6 +99,7 @@ public static class SerializableMeta implements ConfigurationSerializable {
                     .put(CraftMetaBanner.class, "BANNER")
                     .put(CraftMetaTileEntity.class, "TILE_ENTITY")
                     .put(CraftMetaBook.class, "BOOK")
+                    .put(CraftMetaBookSigned.class, "BOOK_SIGNED")
                     .put(CraftMetaSkull.class, "SKULL")
                     .put(CraftMetaLeatherArmor.class, "LEATHER_ARMOR")
                     .put(CraftMetaMap.class, "MAP")

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
Patch:
@@ -27,7 +27,6 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     CraftMetaBanner(CraftMetaItem meta) {
         super(meta);
-        blockEntityTag = null; 
 
         if (!(meta instanceof CraftMetaBanner)) {
             return;
@@ -40,7 +39,6 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     CraftMetaBanner(NBTTagCompound tag) {
         super(tag);
-        blockEntityTag = null; 
         
         if (!tag.hasKey("BlockEntityTag")) {
             return;
@@ -61,7 +59,6 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     CraftMetaBanner(Map<String, Object> map) {
         super(map);
-        blockEntityTag = null; 
         
         String baseStr = SerializableMeta.getString(map, BASE.BUKKIT, true);
         if (baseStr != null) {

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
Patch:
@@ -207,11 +207,11 @@ public void testEachExtraData() {
             }
         );
 
-        assertThat("Forgotten test?", providers, hasSize(ItemStackTest.COMPOUND_MATERIALS.length - 2 /* Normal item meta and skulls */));
+        assertThat("Forgotten test?", providers, hasSize(ItemStackTest.COMPOUND_MATERIALS.length - 3/* Normal item meta, skulls and tile entities */));
 
         for (final StackProvider provider : providers) {
-            // downCastTest(new BukkitWrapper(provider));
-            // downCastTest(new CraftWrapper(provider));
+            downCastTest(new BukkitWrapper(provider));
+            downCastTest(new CraftWrapper(provider));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
Patch:
@@ -27,6 +27,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     CraftMetaBanner(CraftMetaItem meta) {
         super(meta);
+        blockEntityTag = null; 
 
         if (!(meta instanceof CraftMetaBanner)) {
             return;
@@ -39,6 +40,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     CraftMetaBanner(NBTTagCompound tag) {
         super(tag);
+        blockEntityTag = null; 
         
         if (!tag.hasKey("BlockEntityTag")) {
             return;
@@ -59,6 +61,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     CraftMetaBanner(Map<String, Object> map) {
         super(map);
+        blockEntityTag = null; 
         
         String baseStr = SerializableMeta.getString(map, BASE.BUKKIT, true);
         if (baseStr != null) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -204,7 +204,7 @@ static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean null
     private Map<Enchantment, Integer> enchantments;
     private int repairCost;
     private final NBTTagList attributes;
-    private final NBTTagCompound blockEntityTag;
+    protected NBTTagCompound blockEntityTag;
 
     CraftMetaItem(CraftMetaItem meta) {
         if (meta == null) {
@@ -556,7 +556,7 @@ boolean equalsCommon(CraftMetaItem that) {
                 && (this.hasLore() ? that.hasLore() && this.lore.equals(that.lore) : !that.hasLore())
                 && (this.hasAttributes() ? that.hasAttributes() && this.attributes.equals(that.attributes) : !that.hasAttributes())
                 && (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost())
-                && (this.blockEntityTag != null ? that.blockEntityTag != null && this.blockEntityTag.equals(this.blockEntityTag) : that.blockEntityTag == null);
+                && (this.blockEntityTag != null ? that.blockEntityTag != null && this.blockEntityTag.equals(that.blockEntityTag) : that.blockEntityTag == null);
     }
 
     /**

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -225,7 +225,7 @@ static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean null
 
         this.repairCost = meta.repairCost;
         this.attributes = meta.attributes;
-        blockEntityTag = meta.blockEntityTag;
+        this.blockEntityTag = meta.blockEntityTag;
     }
 
     CraftMetaItem(NBTTagCompound tag) {

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
Patch:
@@ -210,8 +210,8 @@ public void testEachExtraData() {
         assertThat("Forgotten test?", providers, hasSize(ItemStackTest.COMPOUND_MATERIALS.length - 2 /* Normal item meta and skulls */));
 
         for (final StackProvider provider : providers) {
-            downCastTest(new BukkitWrapper(provider));
-            downCastTest(new CraftWrapper(provider));
+            // downCastTest(new BukkitWrapper(provider));
+            // downCastTest(new CraftWrapper(provider));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -438,7 +438,7 @@ boolean applicableTo(Material type) {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes() || hasRepairCost());
+        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes() || hasRepairCost() || blockEntityTag != null);
     }
 
     public String getDisplayName() {
@@ -582,6 +582,7 @@ int applyHash() {
         hash = 61 * hash + (hasEnchants() ? this.enchantments.hashCode() : 0);
         hash = 61 * hash + (hasAttributes() ? this.attributes.hashCode() : 0);
         hash = 61 * hash + (hasRepairCost() ? this.repairCost : 0);
+        hash = 61 * hash + (blockEntityTag != null ? this.blockEntityTag.hashCode() : 0);
         return hash;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -935,8 +935,6 @@ public boolean unloadWorld(World world, boolean save) {
             try {
                 handle.save(true, null);
                 handle.saveLevel();
-                WorldSaveEvent event = new WorldSaveEvent(handle.getWorld());
-                getPluginManager().callEvent(event);
             } catch (ExceptionWorldConflict ex) {
                 getLogger().log(Level.SEVERE, null, ex);
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
Patch:
@@ -34,7 +34,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
 
         if (tag.hasKeyOfType(SKULL_OWNER.NBT, 10)) {
             profile = GameProfileSerializer.deserialize(tag.getCompound(SKULL_OWNER.NBT));
-        } else if (tag.hasKeyOfType(SKULL_OWNER.NBT, 8)) {
+        } else if (tag.hasKeyOfType(SKULL_OWNER.NBT, 8) && !tag.getString(SKULL_OWNER.NBT).isEmpty()) {
             profile = new GameProfile(null, tag.getString(SKULL_OWNER.NBT));
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
Patch:
@@ -45,7 +45,7 @@ public void callStage2(QueuedChunk queuedChunk, Chunk chunk) throws RuntimeExcep
 
         Server server = queuedChunk.provider.world.getServer();
         if (server != null) {
-           server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(chunk.bukkitChunk, false));
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(chunk.bukkitChunk, false));
         }
 
         // Update neighbor counts

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -96,6 +96,7 @@ public static class SerializableMeta implements ConfigurationSerializable {
 
         static {
             classMap = ImmutableMap.<Class<? extends CraftMetaItem>, String>builder()
+                    .put(CraftMetaBanner.class, "BANNER")
                     .put(CraftMetaBook.class, "BOOK")
                     .put(CraftMetaSkull.class, "SKULL")
                     .put(CraftMetaLeatherArmor.class, "LEATHER_ARMOR")

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -96,6 +96,7 @@ public static class SerializableMeta implements ConfigurationSerializable {
 
         static {
             classMap = ImmutableMap.<Class<? extends CraftMetaItem>, String>builder()
+                    .put(CraftMetaBanner.class, "BANNER")
                     .put(CraftMetaBook.class, "BOOK")
                     .put(CraftMetaSkull.class, "SKULL")
                     .put(CraftMetaLeatherArmor.class, "LEATHER_ARMOR")

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -121,7 +121,8 @@ public boolean setTypeId(final int type) {
     }
 
     public boolean setTypeId(final int type, final boolean applyPhysics) {
-        return setTypeIdAndData(type, getData(), applyPhysics);
+        net.minecraft.server.Block block = getNMSBlock(type);
+        return setTypeIdAndData(type, (byte) block.toLegacyData(block.getBlockData()), applyPhysics);
     }
 
     public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -899,12 +899,13 @@ public void showPlayer(Player player) {
 
         EntityTracker tracker = ((WorldServer) entity.world).tracker;
         EntityPlayer other = ((CraftPlayer) player).getHandle();
+
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.ADD_PLAYER, other));
+
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
             entry.updatePlayer(getHandle());
         }
-
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.ADD_PLAYER, other));
     }
 
     public void removeDisconnectingPlayer(Player player) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -899,12 +899,13 @@ public void showPlayer(Player player) {
 
         EntityTracker tracker = ((WorldServer) entity.world).tracker;
         EntityPlayer other = ((CraftPlayer) player).getHandle();
+
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.ADD_PLAYER, other));
+
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
             entry.updatePlayer(getHandle());
         }
-
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.ADD_PLAYER, other));
     }
 
     public void removeDisconnectingPlayer(Player player) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -111,7 +111,7 @@ public BlockState[] getTileEntities() {
             }
 
             BlockPosition position = (BlockPosition) obj;
-            entities[index++] = worldServer.getWorld().getBlockAt(position.getX() + (chunk.locX << 4), position.getY(), position.getZ() + (chunk.locZ << 4)).getState();
+            entities[index++] = worldServer.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()).getState();
         }
         return entities;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -849,6 +849,7 @@ public World createWorld(WorldCreator creator) {
         if (worlddata == null) {
             worlddata = new WorldData(new WorldSettings(creator.seed(), EnumGamemode.getById(getDefaultGameMode().getValue()), generateStructures, hardcore, type), name);
         }
+        worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
         WorldServer internal = (WorldServer) new WorldServer(console, sdm, worlddata, dimension, console.methodProfiler, creator.environment(), generator).b();
 
         if (!(worlds.containsKey(name.toLowerCase()))) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -849,6 +849,7 @@ public World createWorld(WorldCreator creator) {
         if (worlddata == null) {
             worlddata = new WorldData(new WorldSettings(creator.seed(), EnumGamemode.getById(getDefaultGameMode().getValue()), generateStructures, hardcore, type), name);
         }
+        worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
         WorldServer internal = (WorldServer) new WorldServer(console, sdm, worlddata, dimension, console.methodProfiler, creator.environment(), generator).b();
 
         if (!(worlds.containsKey(name.toLowerCase()))) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -168,7 +168,8 @@ public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeB
 
                 // Copy base IDs
                 for (int j = 0; j < 4096; j++) {
-                    IBlockData blockData = net.minecraft.server.Block.getByCombinedId(baseids[j]);
+                    if (baseids[j] == 0) continue;
+                    IBlockData blockData = (IBlockData) net.minecraft.server.Block.d.a(baseids[j]);
                     blockids[j] = (short) net.minecraft.server.Block.getId(blockData.getBlock());
                     int data = blockData.getBlock().toLegacyData(blockData);
                     int jj = j >> 1;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -168,7 +168,8 @@ public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeB
 
                 // Copy base IDs
                 for (int j = 0; j < 4096; j++) {
-                    IBlockData blockData = net.minecraft.server.Block.getByCombinedId(baseids[j]);
+                    if (baseids[j] == 0) continue;
+                    IBlockData blockData = (IBlockData) net.minecraft.server.Block.d.a(baseids[j]);
                     blockids[j] = (short) net.minecraft.server.Block.getId(blockData.getBlock());
                     int data = blockData.getBlock().toLegacyData(blockData);
                     int jj = j >> 1;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
Patch:
@@ -15,7 +15,7 @@ public int getAge() {
     }
 
     public void setAge(int age) {
-        getHandle().setAge(age);
+        getHandle().setAgeRaw(age);
     }
 
     public void setAgeLock(boolean lock) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -276,6 +276,7 @@ public BlockState getState() {
             return new CraftBeacon(this);
         case BANNER:
         case WALL_BANNER:
+        case STANDING_BANNER:
             return new CraftBanner(this);
         default:
             return new CraftBlockState(this);

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -511,6 +511,8 @@ private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSo
             cause = DamageCause.MAGIC;
         } else if (source == DamageSource.FALL) {
             cause = DamageCause.FALL;
+        } else if (source == DamageSource.GENERIC) {
+            return new EntityDamageEvent(entity.getBukkitEntity(), null, modifiers);
         }
 
         if (cause != null) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
Patch:
@@ -26,11 +26,11 @@ public EntityType getType() {
 
     @Override
     public boolean isAwake() {
-        return getHandle().isStartled();
+        return !getHandle().isStartled();
     }
 
     @Override
     public void setAwake(boolean state) {
-        getHandle().setStartled(state);
+        getHandle().setStartled(!state);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -393,7 +393,7 @@ public boolean generateTree(Location loc, TreeType type) {
             gen = new WorldGenForestTree(true);
             break;
         case MEGA_REDWOOD:
-            gen = new WorldGenMegaTree(true, rand.nextBoolean());
+            gen = new WorldGenMegaTree(false, rand.nextBoolean());
             break;
         case TALL_BIRCH:
             gen = new WorldGenForest(true, true);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
Patch:
@@ -15,9 +15,11 @@ public void setTarget(LivingEntity target) {
         EntityCreature entity = getHandle();
         if (target == null) {
             entity.target = null;
+            entity.setGoalTarget(null);
         } else if (target instanceof CraftLivingEntity) {
             entity.target = ((CraftLivingEntity) target).getHandle();
             entity.pathEntity = entity.world.findPath(entity, entity.target, 16.0F, true, false, false, true);
+            entity.setGoalTarget(((CraftLivingEntity) target).getHandle());
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -709,7 +709,7 @@ public static void handleEditBookEvent(EntityPlayer player, ItemStack newBookIte
         ItemStack itemInHand = player.inventory.getItem(itemInHandIndex);
 
         // If they've got the same item in their hand, it'll need to be updated.
-        if (itemInHand.getItem() == Items.BOOK_AND_QUILL) {
+        if (itemInHand != null && itemInHand.getItem() == Items.BOOK_AND_QUILL) {
             if (!editBookEvent.isCancelled()) {
                 CraftItemStack.setItemMeta(itemInHand, editBookEvent.getNewBookMeta());
                 if (editBookEvent.isSigning()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -169,7 +169,7 @@ public String getDisplayName() {
 
     @Override
     public void setDisplayName(final String name) {
-        getHandle().displayName = name;
+        getHandle().displayName = name == null ? getName() : name;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
Patch:
@@ -82,6 +82,8 @@ public static SlotType getSlotType(InventoryView inventory, int slot) {
                     type = SlotType.RESULT;
                 } else if(slot == 1) {
                     type = SlotType.FUEL;
+                } else {
+                    type = SlotType.CRAFTING;
                 }
                 break;
             case BREWING:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
Patch:
@@ -163,7 +163,7 @@ public boolean equals(Object obj) {
     @Override
     public int hashCode() {
         int hash = 5;
-        hash = 97 * hash + (this.getUniqueId() != null ? this.getUniqueId().toString().hashCode() : 0);
+        hash = 97 * hash + (this.getUniqueId() != null ? this.getUniqueId().hashCode() : 0);
         return hash;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -280,7 +280,7 @@ public boolean hasPotionEffect(PotionEffectType type) {
     }
 
     public void removePotionEffect(PotionEffectType type) {
-        getHandle().m(type.getId()); // Should be removeEffect.
+        getHandle().removeEffect(type.getId());
     }
 
     public Collection<PotionEffect> getActivePotionEffects() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
Patch:
@@ -101,7 +101,7 @@ public final int dispatchVanillaCommandBlock(CommandBlockListenerAbstract icomma
                     String s2 = as[i];
                     EntityPlayer aentityplayer1[] = aentityplayer;
                     int k = aentityplayer1.length;
-                    for (int l = 0; l < k;) {
+                    for (int l = 0; l < k;l++) {
                         EntityPlayer entityplayer = aentityplayer1[l];
                         as[i] = entityplayer.getName();
                         try {
@@ -112,7 +112,6 @@ public final int dispatchVanillaCommandBlock(CommandBlockListenerAbstract icomma
                             ChatMessage chatmessage4 = new ChatMessage(commandexception1.getMessage(), commandexception1.a());
                             chatmessage4.getChatModifier().setColor(EnumChatFormat.RED);
                             icommandlistener.sendMessage(chatmessage4);
-                            l++;
                         }
                     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -317,7 +317,7 @@ public Arrow spawnArrow(Location loc, Vector velocity, float speed, float spread
         Validate.notNull(velocity, "Can not spawn arrow with a null velocity");
 
         EntityArrow arrow = new EntityArrow(world);
-        arrow.setPositionRotation(loc.getX(), loc.getY(), loc.getZ(), loc.getPitch(), loc.getYaw());
+        arrow.setPositionRotation(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
         arrow.shoot(velocity.getX(), velocity.getY(), velocity.getZ(), speed, spread);
         world.addEntity(arrow);
         return (Arrow) arrow.getBukkitEntity();

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -148,6 +148,7 @@ public final class CraftServer implements Server {
     private final String serverName = "CraftBukkit";
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
+    private final Logger logger = Logger.getLogger("Minecraft");
     private final ServicesManager servicesManager = new SimpleServicesManager();
     private final CraftScheduler scheduler = new CraftScheduler();
     private final SimpleCommandMap commandMap = new SimpleCommandMap(this);
@@ -176,7 +177,6 @@ public final class CraftServer implements Server {
     public CraftScoreboardManager scoreboardManager;
     public boolean playerCommandState;
     private boolean printSaveWarning;
-    private Logger logger;
     private CraftIconCache icon;
 
     private final class BooleanWrapper {
@@ -189,7 +189,6 @@ private final class BooleanWrapper {
     }
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
-        this.logger = Logger.getLogger("Minecraft");
         this.console = console;
         this.playerList = (DedicatedPlayerList) playerList;
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -360,7 +360,7 @@ public static boolean setItemMeta(net.minecraft.server.ItemStack item, ItemMeta
         if (item == null) {
             return false;
         }
-        if (itemMeta == null) {
+        if (CraftItemFactory.instance().equals(itemMeta, null)) {
             item.tag = null;
             return true;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -455,8 +455,10 @@ public static boolean handleNonLivingEntityDamageEvent(Entity entity, DamageSour
         if (!(source instanceof EntityDamageSource)) {
             return false;
         }
-        // We don't need to check for null, since EntityDamageSource will always return an event
         EntityDamageEvent event = handleEntityDamageEvent(entity, source, damage);
+        if (event == null) {
+            return false;
+        }
         return event.isCancelled() || event.getDamage() == 0;
     }
 

File: paper-server/src/test/java/org/bukkit/ArtTest.java
Patch:
@@ -30,7 +30,7 @@ public void verifyMapping() {
 
             Art subject = Art.getById(id);
 
-            String message = String.format("org.bukkit.Art is missing id: %d named: '%s'", id - Achievement.STATISTIC_OFFSET, name);
+            String message = String.format("org.bukkit.Art is missing id: %d named: '%s'", id, name);
             assertNotNull(message, subject);
 
             assertThat(Art.getByName(name), is(subject));

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
Patch:
@@ -421,7 +421,7 @@ boolean applicableTo(Material type) {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes());
+        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes() || hasRepairCost());
     }
 
     public String getDisplayName() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -961,11 +961,13 @@ public Iterator<Recipe> recipeIterator() {
     public void clearRecipes() {
         CraftingManager.getInstance().recipes.clear();
         RecipesFurnace.getInstance().recipes.clear();
+        RecipesFurnace.getInstance().customRecipes.clear();
     }
 
     public void resetRecipes() {
         CraftingManager.getInstance().recipes = new CraftingManager().recipes;
         RecipesFurnace.getInstance().recipes = new RecipesFurnace().recipes;
+        RecipesFurnace.getInstance().customRecipes.clear();
     }
 
     public Map<String, String[]> getCommandAliases() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
Patch:
@@ -22,6 +22,6 @@ public static CraftFurnaceRecipe fromBukkitRecipe(FurnaceRecipe recipe) {
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
         ItemStack input = this.getInput();
-        RecipesFurnace.getInstance().a(CraftMagicNumbers.getItem(input.getTypeId()), CraftItemStack.asNMSCopy(result), 0.1f);
+        RecipesFurnace.getInstance().registerRecipe(CraftItemStack.asNMSCopy(input), CraftItemStack.asNMSCopy(result));
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -370,7 +370,7 @@ public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate del
             gen = new WorldGenTaiga1();
             break;
         case JUNGLE:
-            gen = new WorldGenMegaTree(true, rand.nextBoolean());
+            gen = new WorldGenJungleTree(true, 10, 20, 3, 3); // Magic values as in BlockSapling
             break;
         case SMALL_JUNGLE:
             gen = new WorldGenTrees(true, 4 + rand.nextInt(7), 3, 3, false);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -628,6 +628,7 @@ public void setGameMode(GameMode mode) {
             }
 
             getHandle().playerInteractManager.setGameMode(EnumGamemode.a(mode.getValue()));
+            getHandle().fallDistance = 0;
             getHandle().playerConnection.sendPacket(new PacketPlayOutGameStateChange(3, mode.getValue()));
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
Patch:
@@ -18,9 +18,10 @@ public static CraftFurnaceRecipe fromBukkitRecipe(FurnaceRecipe recipe) {
         return new CraftFurnaceRecipe(recipe.getResult(), recipe.getInput());
     }
 
+    @Override
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
         ItemStack input = this.getInput();
-        RecipesFurnace.getInstance().registerRecipe(CraftMagicNumbers.getBlock(input.getTypeId()), CraftItemStack.asNMSCopy(result), 0.1f);
+        RecipesFurnace.getInstance().a(CraftMagicNumbers.getItem(input.getTypeId()), CraftItemStack.asNMSCopy(result), 0.1f);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
Patch:
@@ -147,7 +147,9 @@ public RenderData render(CraftPlayer player) {
 
             byte[] buf = canvas.getBuffer();
             for (int i = 0; i < buf.length; ++i) {
-                if (buf[i] >= 0) render.buffer[i] = buf[i];
+                byte color = buf[i];
+                // There are 143 valid color id's, 0 -> 127 and -128 -> -113
+                if (color >= 0 || color <= -113) render.buffer[i] = color;
             }
 
             for (int i = 0; i < canvas.getCursors().size(); ++i) {

File: paper-server/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -130,7 +130,7 @@ private static OutputStream getOutputStream(final boolean follow, final Target t
             LOGGER.debug("Jansi is not installed, cannot find {}", JANSI_CLASS);
         } catch (final NoSuchMethodException nsme) {
             LOGGER.warn("{} is missing the proper constructor", JANSI_CLASS);
-        } catch (final Exception ex) {
+        } catch (final Throwable ex) { // CraftBukkit - Exception -> Throwable
             LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
         }
         return printStream;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -94,7 +94,6 @@
 import org.bukkit.craftbukkit.updater.BukkitDLUpdaterService;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.craftbukkit.util.DatFileFilter;
-import org.bukkit.craftbukkit.util.Log4jConverter;
 import org.bukkit.craftbukkit.util.Versioning;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryType;
@@ -188,7 +187,7 @@ private final class BooleanWrapper {
     }
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
-        this.logger = Log4jConverter.createLogger();
+        this.logger = Logger.getLogger("Minecraft");
         this.console = console;
         this.playerList = (DedicatedPlayerList) playerList;
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
Patch:
@@ -22,7 +22,7 @@ public void run() {
 
         // Using name from log4j config in vanilla jar
         while (true) {
-            message = QueueLogAppender.getNextLogEvent("ServerGuiConsole");
+            message = QueueLogAppender.getNextLogEvent("TerminalConsole");
             if (message == null) {
                 continue;
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -730,7 +730,6 @@ public World createWorld(WorldCreator creator) {
             return null;
         }
 
-        internal.worldMaps = console.worlds.get(0).worldMaps;
         internal.scoreboard = getScoreboardManager().getMainScoreboard().getHandle();
 
         internal.tracker = new EntityTracker(internal);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -999,7 +999,7 @@ public <T extends Entity> T spawn(Location location, Class<T> clazz, SpawnReason
             }
 
             if (entity != null && !((EntityHanging) entity).survives()) {
-                entity = null;
+                throw new IllegalArgumentException("Cannot spawn hanging entity for " + clazz.getName() + " at " + location);
             }
         } else if (TNTPrimed.class.isAssignableFrom(clazz)) {
             entity = new EntityTNTPrimed(world, x, y, z, null);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftSound.java
Patch:
@@ -132,7 +132,7 @@ public class CraftSound {
         set(SPIDER_IDLE, "mob.spider.say");
         set(SPIDER_DEATH, "mob.spider.death");
         set(SPIDER_WALK, "mob.spider.step");
-        set(VILLAGER_DEATH, "mob.villager.");
+        set(VILLAGER_DEATH, "mob.villager.death");
         set(VILLAGER_HAGGLE, "mob.villager.haggle");
         set(VILLAGER_HIT, "mob.villager.hit");
         set(VILLAGER_IDLE, "mob.villager.idle");

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -224,6 +224,8 @@ public InventoryView openInventory(Inventory inventory) {
                 getHandle().openHopper((TileEntityHopper) craftinv.getInventory());
             } else if (craftinv.getInventory() instanceof EntityMinecartHopper) {
                 getHandle().openMinecartHopper((EntityMinecartHopper) craftinv.getInventory());
+            } else {
+                openCustomInventory(inventory, player, 9);
             }
             break;
         case CREATIVE:

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -329,7 +329,7 @@ public EntityType getType() {
     }
 
     public boolean hasLineOfSight(Entity other) {
-        return getHandle() instanceof EntityInsentient && ((EntityInsentient) getHandle()).getEntitySenses().canSee(((CraftEntity) other).getHandle());
+        return getHandle().o(((CraftEntity) other).getHandle());
     }
 
     public boolean getRemoveWhenFarAway() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
Patch:
@@ -5,7 +5,7 @@
 import org.bukkit.block.Block;
 import org.bukkit.block.Beacon;
 import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryBeacon;
 import org.bukkit.inventory.Inventory;
 
 public class CraftBeacon extends CraftBlockState implements Beacon {
@@ -20,7 +20,7 @@ public CraftBeacon(final Block block) {
     }
 
     public Inventory getInventory() {
-        return new CraftInventory(beacon);
+        return new CraftInventoryBeacon(beacon);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
@@ -43,6 +44,8 @@ public MinecraftInventory(InventoryHolder owner, int size) {
         }
 
         public MinecraftInventory(InventoryHolder owner, int size, String title) {
+            Validate.notNull(title, "Title cannot be null");
+            Validate.isTrue(title.length() <= 32, "Title cannot be longer than 32 characters");
             this.items = new ItemStack[size];
             this.title = title;
             this.viewers = new ArrayList<HumanEntity>();

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -86,7 +86,7 @@ private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
         ChunkCoordinates chunkcoordinates = worldServer.getSpawn();
 
         int distanceFromSpawn = Math.max(Math.abs(x - chunkcoordinates.x), Math.abs(z - chunkcoordinates.z));
-        return distanceFromSpawn >= spawnSize;
+        return distanceFromSpawn > spawnSize;
     }
 
     public static <T extends Event> T callEvent(T event) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
Patch:
@@ -21,7 +21,7 @@ public String toString() {
     }
 
     public boolean isPlayerCreated() {
-        return getHandle().bS();
+        return getHandle().bW();
     }
 
     public void setPlayerCreated(boolean playerCreated) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -259,6 +259,9 @@ public void playNote(Location loc, Instrument instrument, Note note) {
     }
 
     public void playSound(Location loc, Sound sound, float volume, float pitch) {
+        if (sound == null) {
+            return;
+        }
         playSound(loc, CraftSound.getSound(sound), volume, pitch);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -258,7 +258,7 @@ public boolean addPotionEffect(PotionEffect effect, boolean force) {
             }
             removePotionEffect(effect.getType());
         }
-        getHandle().addEffect(new MobEffect(effect.getType().getId(), effect.getDuration(), effect.getAmplifier()));
+        getHandle().addEffect(new MobEffect(effect.getType().getId(), effect.getDuration(), effect.getAmplifier(), effect.isAmbient()));
         return true;
     }
 
@@ -284,7 +284,7 @@ public Collection<PotionEffect> getActivePotionEffects() {
             if (!(raw instanceof MobEffect))
                 continue;
             MobEffect handle = (MobEffect) raw;
-            effects.add(new PotionEffect(PotionEffectType.getById(handle.getEffectId()), handle.getDuration(), handle.getAmplifier()));
+            effects.add(new PotionEffect(PotionEffectType.getById(handle.getEffectId()), handle.getDuration(), handle.getAmplifier(), handle.isAmbient()));
         }
         return effects;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -184,6 +184,9 @@ public void setVelocity(Vector vel) {
     }
 
     public boolean isOnGround() {
+        if (entity instanceof EntityArrow) {
+            return ((EntityArrow) entity).isInGround();
+        }
         return entity.onGround;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -906,6 +906,8 @@ public <T extends Entity> T spawn(Location location, Class<T> clazz, SpawnReason
                 // need a net server handler for this one
             } else if (Sheep.class.isAssignableFrom(clazz)) {
                 entity = new EntitySheep(world);
+            } else if (Horse.class.isAssignableFrom(clazz)) {
+                entity = new EntityHorse(world);
             } else if (Skeleton.class.isAssignableFrom(clazz)) {
                 entity = new EntitySkeleton(world);
             } else if (Slime.class.isAssignableFrom(clazz)) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -51,6 +51,7 @@ else if (entity instanceof EntityTameableAnimal) {
                         else if (entity instanceof EntityOcelot) { return new CraftOcelot(server, (EntityOcelot) entity); }
                     }
                     else if (entity instanceof EntitySheep) { return new CraftSheep(server, (EntitySheep) entity); }
+                    else if (entity instanceof EntityHorse) { return new CraftHorse(server, (EntityHorse) entity); }
                     else  { return new CraftAnimals(server, (EntityAnimal) entity); }
                 }
                 // Monsters

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -19,6 +19,7 @@
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.EntityPotion;
 import net.minecraft.server.EntityWitherSkull;
+import net.minecraft.server.GenericAttributes;
 import net.minecraft.server.MobEffect;
 import net.minecraft.server.MobEffectList;
 import net.minecraft.server.Packet42RemoveMobEffect;
@@ -83,13 +84,13 @@ public void setHealth(double health) {
     }
 
     public double getMaxHealth() {
-        return getHandle().maxHealth;
+        return getHandle().getMaxHealth();
     }
 
     public void setMaxHealth(double amount) {
         Validate.isTrue(amount > 0, "Max health must be greater than 0");
 
-        getHandle().maxHealth = (float) amount;
+        getHandle().a(GenericAttributes.a).a(amount);
 
         if (getHealth() > amount) {
             setHealth(amount);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftSound.java
Patch:
@@ -75,7 +75,7 @@ public class CraftSound {
         sounds[BAT_IDLE.ordinal()] = "mob.bat.idle";
         sounds[BAT_LOOP.ordinal()] = "mob.bat.loop";
         sounds[BAT_TAKEOFF.ordinal()] = "mob.bat.takeoff";
-        sounds[BLAZE_BREATH.ordinal()] = "mob.blaze.breath";
+        sounds[BLAZE_BREATH.ordinal()] = "mob.blaze.breathe";
         sounds[BLAZE_DEATH.ordinal()] = "mob.blaze.death";
         sounds[BLAZE_HIT.ordinal()] = "mob.blaze.hit";
         sounds[CAT_HISS.ordinal()] = "mob.cat.hiss";

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -92,7 +92,7 @@ public void setData(final byte data, boolean applyPhysics) {
         if (applyPhysics) {
             chunk.getHandle().world.setData(x, y, z, data, 3);
         } else {
-            chunk.getHandle().world.setData(x, y, z, data, 4);
+            chunk.getHandle().world.setData(x, y, z, data, 2);
         }
     }
 
@@ -112,15 +112,15 @@ public boolean setTypeId(final int type, final boolean applyPhysics) {
         if (applyPhysics) {
             return setTypeId(type);
         } else {
-            return chunk.getHandle().world.setTypeIdAndData(x, y, z, type, getData(), 4);
+            return chunk.getHandle().world.setTypeIdAndData(x, y, z, type, getData(), 2);
         }
     }
 
     public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics) {
         if (applyPhysics) {
             return chunk.getHandle().world.setTypeIdAndData(x, y, z, type, data, 3);
         } else {
-            boolean success = chunk.getHandle().world.setTypeIdAndData(x, y, z, type, data, 4);
+            boolean success = chunk.getHandle().world.setTypeIdAndData(x, y, z, type, data, 2);
             if (success) {
                 chunk.getHandle().world.notify(x, y, z);
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
Patch:
@@ -93,7 +93,7 @@ public void resetScores(OfflinePlayer player) throws IllegalArgumentException {
     public Team getPlayerTeam(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
 
-        ScoreboardTeam team = board.getTeam(player.getName());
+        ScoreboardTeam team = board.getPlayerTeam(player.getName());
         return team == null ? null : teams.get(team.getName());
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -721,8 +721,9 @@ public World createWorld(WorldCreator creator) {
         }
 
         internal.worldMaps = console.worlds.get(0).worldMaps;
+        internal.scoreboard = getScoreboardManager().getMainScoreboard().getHandle();
 
-        internal.tracker = new EntityTracker(internal); // CraftBukkit
+        internal.tracker = new EntityTracker(internal);
         internal.addIWorldAccess(new WorldManager(console, internal));
         internal.difficulty = 1;
         internal.setSpawnFlags(true, true);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -54,7 +54,8 @@ public ItemStack[] getContents() {
         ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] mcItems = getInventory().getContents();
 
-        for (int i = 0; i < mcItems.length; i++) {
+        int size = Math.min(items.length, mcItems.length);
+        for (int i = 0; i < size; i++) {
             items[i] = mcItems[i] == null ? null : CraftItemStack.asCraftMirror(mcItems[i]);
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
Patch:
@@ -24,8 +24,8 @@ public Inventory getInventory() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             beacon.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
Patch:
@@ -21,8 +21,8 @@ public BrewerInventory getInventory() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             brewingStand.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
Patch:
@@ -61,8 +61,8 @@ public Inventory getInventory() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             chest.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
Patch:
@@ -35,8 +35,8 @@ public void setName(String name) {
         this.name = name != null ? name : "@";
     }
 
-    public boolean update(boolean forced) {
-        boolean result = super.update(forced);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             commandBlock.b(command);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
Patch:
@@ -39,8 +39,8 @@ public boolean dispense() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             dispenser.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
Patch:
@@ -36,8 +36,8 @@ public void drop() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             dropper.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
Patch:
@@ -21,8 +21,8 @@ public FurnaceInventory getInventory() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             furnace.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
Patch:
@@ -21,8 +21,8 @@ public Inventory getInventory() {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             hopper.update();

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
Patch:
@@ -31,8 +31,8 @@ public void setLine(int index, String line) throws IndexOutOfBoundsException {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             for(int i = 0; i < 4; i++) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
Patch:
@@ -181,8 +181,8 @@ public void setSkullType(SkullType skullType) {
     }
 
     @Override
-    public boolean update(boolean force) {
-        boolean result = super.update(force);
+    public boolean update(boolean force, boolean applyPhysics) {
+        boolean result = super.update(force, applyPhysics);
 
         if (result) {
             skull.setSkullType(getSkullType(skullType), player);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
Patch:
@@ -85,7 +85,7 @@ public static SlotType getSlotType(InventoryView inventory, int slot) {
                 }
                 break;
             case BREWING:
-                if (slot == 0) {
+                if (slot == 3) {
                     type = SlotType.FUEL;
                 } else {
                     type = SlotType.CRAFTING;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -265,6 +265,8 @@ public BlockState getState() {
             return new CraftSkull(this);
         case COMMAND:
             return new CraftCommandBlock(this);
+        case BEACON:
+            return new CraftBeacon(this);
         default:
             return new CraftBlockState(this);
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
Patch:
@@ -106,8 +106,8 @@ int applyHash() {
     public CraftMetaEnchantedBook clone() {
         CraftMetaEnchantedBook meta = (CraftMetaEnchantedBook) super.clone();
 
-        if (hasStoredEnchants()) {
-            meta.enchantments = new HashMap<Enchantment, Integer>(enchantments);
+        if (this.enchantments != null) {
+            meta.enchantments = new HashMap<Enchantment, Integer>(this.enchantments);
         }
 
         return meta;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -117,8 +117,8 @@ boolean applicableTo(Material type) {
     @Override
     public CraftMetaPotion clone() {
         CraftMetaPotion clone = (CraftMetaPotion) super.clone();
-        if (hasCustomEffects()) {
-            clone.customEffects = new ArrayList<PotionEffect>(customEffects);
+        if (this.customEffects != null) {
+            clone.customEffects = new ArrayList<PotionEffect>(this.customEffects);
         }
         return clone;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -389,6 +389,8 @@ public static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSou
             } else if (damager.getBukkitEntity() instanceof Projectile) {
                 cause = DamageCause.PROJECTILE;
             }
+        } else if ("thorns".equals(source.translationIndex)) {
+            cause = DamageCause.THORNS;
         }
 
         return callEntityDamageEvent(damager, entity, cause, damage);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
Patch:
@@ -75,7 +75,7 @@ public Container getHandle() {
 
     public static SlotType getSlotType(InventoryView inventory, int slot) {
         SlotType type = SlotType.CONTAINER;
-        if (slot < inventory.getTopInventory().getSize()) {
+        if (slot >= 0 && slot < inventory.getTopInventory().getSize()) {
             switch(inventory.getType()) {
             case FURNACE:
                 if (slot == 2) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
Patch:
@@ -29,7 +29,7 @@ public void sendMessage(String[] messages) {
     }
 
     public String getName() {
-        return "@";
+        return commandBlock.getName();
     }
 
     public boolean isOp() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -242,6 +242,7 @@ public BlockState getState() {
         case WALL_SIGN:
             return new CraftSign(this);
         case CHEST:
+        case TRAPPED_CHEST:
             return new CraftChest(this);
         case BURNING_FURNACE:
         case FURNACE:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
Patch:
@@ -18,7 +18,7 @@ public class CraftTravelAgent extends PortalTravelAgent implements TravelAgent {
     public CraftTravelAgent(WorldServer worldserver) {
         super(worldserver);
         if (DEFAULT == null && worldserver.dimension == 0) {
-            DEFAULT = (TravelAgent) worldserver.s();
+            DEFAULT = this;
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
Patch:
@@ -9,14 +9,15 @@
  */
 public class EntityMetadataStore extends MetadataStoreBase<Entity> implements MetadataStore<Entity> {
     /**
-     * Generates a unique metadata key for an {@link Entity} entity ID.
+     * Generates a unique metadata key for an {@link Entity} UUID.
+     *
      * @see MetadataStoreBase#disambiguate(Object, String)
      * @param entity the entity
      * @param metadataKey The name identifying the metadata value
      * @return a unique metadata key
      */
     @Override
     protected String disambiguate(Entity entity, String metadataKey) {
-        return Integer.toString(entity.getEntityId()) + ":" + metadataKey;
+        return entity.getUniqueId().toString() + ":" + metadataKey;
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -389,7 +389,7 @@ public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cau
             if (getHandle().activeContainer != getHandle().defaultContainer){
                 getHandle().closeInventory();
             }
-            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to);
+            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to, true);
         }
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -610,7 +610,7 @@ public Location getBedSpawnLocation() {
         World world = getServer().getWorld(getHandle().spawnWorld);
         ChunkCoordinates bed = getHandle().getBed();
 
-        if (world != null) {
+        if (world != null && bed != null) {
             bed = EntityHuman.getBed(((CraftWorld) world).getHandle(), bed, getHandle().isRespawnForced());
             if (bed != null) {
                 return new Location(world, bed.x, bed.y, bed.z);

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
Patch:
@@ -211,7 +211,6 @@ void check(final Iterable<CraftTask> collection) {
                                 if (task.isSync()) {
                                     runners.remove(task.getTaskId());
                                 }
-                                break;
                             }
                         }
                     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -694,7 +694,7 @@ public World createWorld(WorldCreator creator) {
             converter.convert(name, new ConvertProgressUpdater(console));
         }
 
-        int dimension = 10 + console.worlds.size();
+        int dimension = CraftWorld.CUSTOM_DIMENSION_OFFSET + console.worlds.size();
         boolean used = false;
         do {
             for (WorldServer server : console.worlds) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -49,6 +49,8 @@
 import org.bukkit.craftbukkit.util.LongHash;
 
 public class CraftWorld implements World {
+    public static final int CUSTOM_DIMENSION_OFFSET = 10;
+
     private final WorldServer world;
     private Environment environment;
     private final CraftServer server = (CraftServer) Bukkit.getServer();

File: paper-server/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
Patch:
@@ -129,7 +129,7 @@ public ItemStack operate(ItemStack cleanStack) {
                     new Operator() {
                         public ItemStack operate(ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.setPower(150);
+                            meta.setPower(127);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
                         }
@@ -148,7 +148,7 @@ public ItemStack operate(ItemStack cleanStack) {
                     new Operator() {
                         public ItemStack operate(ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
-                            meta.setPower(200);
+                            meta.setPower(42);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
                         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
Patch:
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
@@ -74,7 +73,7 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
         setTitle(SerializableMeta.getString(map, BOOK_TITLE.BUKKIT, true));
 
-        Collection<?> pages = SerializableMeta.getObject(Collection.class, map, BOOK_PAGES.BUKKIT, true);
+        Iterable<?> pages = SerializableMeta.getObject(Iterable.class, map, BOOK_PAGES.BUKKIT, true);
         CraftMetaItem.safelyAdd(pages, this.pages, MAX_PAGE_LENGTH);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
Patch:
@@ -30,7 +30,7 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
     CraftMetaCharge(Map<String, Object> map) {
         super(map);
 
-        effect = SerializableMeta.getObject(FireworkEffect.class, map, EXPLOSION.BUKKIT, true);
+        setEffect(SerializableMeta.getObject(FireworkEffect.class, map, EXPLOSION.BUKKIT, true));
     }
 
     CraftMetaCharge(NBTTagCompound tag) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -172,7 +172,7 @@ static Type getEffectType(int nbt) {
 
         Integer power = SerializableMeta.getObject(Integer.class, map, FLIGHT.BUKKIT, true);
         if (power != null) {
-            this.power = power;
+            setPower(power);
         }
 
         Iterable<?> effects = SerializableMeta.getObject(Iterable.class, map, EXPLOSIONS.BUKKIT, true);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -64,7 +64,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     CraftMetaPotion(Map<String, Object> map) {
         super(map);
 
-        List<?> rawEffectList = SerializableMeta.getObject(List.class, map, POTION_EFFECTS.BUKKIT, true);
+        Iterable<?> rawEffectList = SerializableMeta.getObject(Iterable.class, map, POTION_EFFECTS.BUKKIT, true);
         if (rawEffectList == null) {
             return;
         }

File: paper-server/src/test/java/org/bukkit/DyeColorsTest.java
Patch:
@@ -41,7 +41,7 @@ public void checkColor() {
     @Test
     public void checkFireworkColor() {
         Color color = dye.getFireworkColor();
-        int nmsColor = ItemDye.b[dye.getWoolData()];
+        int nmsColor = ItemDye.b[dye.getDyeData()];
         assertThat(color, is(Color.fromRGB(nmsColor)));
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
Patch:
@@ -62,8 +62,7 @@ public boolean isSitting() {
     }
 
     public void setSitting(boolean sitting) {
-        getHandle().setSitting(sitting);
-        getHandle().setPathEntity(null);
+        getHandle().q().a(sitting);
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -236,6 +236,8 @@ public static EntityTameEvent callEntityTameEvent(EntityLiving entity, EntityHum
         org.bukkit.entity.AnimalTamer bukkitTamer = (tamer != null ? (AnimalTamer) tamer.getBukkitEntity() : null);
         CraftServer craftServer = (CraftServer) bukkitEntity.getServer();
 
+        entity.persistent = true;
+
         EntityTameEvent event = new EntityTameEvent((LivingEntity) bukkitEntity, bukkitTamer);
         craftServer.getPluginManager().callEvent(event);
         return event;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -233,11 +233,12 @@ public int removeEnchantment(Enchantment ench) {
         if (index == Integer.MIN_VALUE) {
             return 0;
         }
-        if (index == 0 && size == 0) {
+        if (index == 0 && size == 1) {
             handle.tag.o(ENCHANTMENTS.NBT);
             if (handle.tag.d()) {
                 handle.tag = null;
             }
+            return ((NBTTagCompound) list.get(0)).getShort(ENCHANTMENTS_ID.NBT);
         }
 
         listCopy = new NBTTagList(ENCHANTMENTS.NBT);

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
Patch:
@@ -148,7 +148,7 @@ public String getOwner() {
     }
 
     public boolean setOwner(String name) {
-        if (name != null && name.length() > MAX_OWNER_LENGTH) {
+        if (name == null || name.length() > MAX_OWNER_LENGTH) {
             return false;
         }
         player = name;
@@ -176,7 +176,7 @@ public void setSkullType(SkullType skullType) {
         this.skullType = skullType;
 
         if (skullType != SkullType.PLAYER) {
-            player = null;
+            player = "";
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
Patch:
@@ -16,6 +16,7 @@
 public class CraftFirework extends CraftEntity implements Firework {
     private static final int FIREWORK_ITEM_INDEX = 8;
 
+    private final Random random = new Random();
     private final CraftItemStack item;
 
     public CraftFirework(CraftServer server, EntityFireworks entity) {
@@ -58,8 +59,7 @@ public void setFireworkMeta(FireworkMeta meta) {
         item.setItemMeta(meta);
 
         // Copied from EntityFireworks constructor, update firework lifetime/power
-        Random random = new Random();
-        getHandle().b = 10 * meta.getPower() + random.nextInt(6) + random.nextInt(7);
+        getHandle().b = 10 * (1 + meta.getPower()) + random.nextInt(6) + random.nextInt(7);
 
         getHandle().getDataWatcher().h(FIREWORK_ITEM_INDEX); // Update
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
Patch:
@@ -25,7 +25,7 @@ public CraftFirework(CraftServer server, EntityFireworks entity) {
 
         if (item == null) {
             item = new ItemStack(Item.FIREWORKS);
-            getHandle().getDataWatcher().watch(FIREWORK_ITEM_INDEX, item);
+            getHandle().getDataWatcher().a(FIREWORK_ITEM_INDEX, item); // register
         }
 
         this.item = CraftItemStack.asCraftMirror(item);
@@ -60,5 +60,7 @@ public void setFireworkMeta(FireworkMeta meta) {
         // Copied from EntityFireworks constructor, update firework lifetime/power
         Random random = new Random();
         getHandle().b = 10 * meta.getPower() + random.nextInt(6) + random.nextInt(7);
+
+        getHandle().getDataWatcher().h(FIREWORK_ITEM_INDEX); // Update
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -59,7 +59,7 @@ public CraftLivingEntity(final CraftServer server, final EntityLiving entity) {
     }
 
     public int getHealth() {
-        return getHandle().getHealth();
+        return Math.min(Math.max(0, getHandle().getHealth()), getMaxHealth());
     }
 
     public void setHealth(int health) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
Patch:
@@ -100,6 +100,9 @@ boolean cancel0() {
         synchronized (workers) {
             // Synchronizing here prevents race condition for a completing task
             setPeriod(-2l);
+            if (workers.isEmpty()) {
+                runners.remove(getTaskId());
+            }
         }
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
Patch:
@@ -385,7 +385,7 @@ public int getPower() {
     }
 
     public void setPower(int power) {
-        Validate.isTrue(power > 0, "Power cannot be less than zero: ", power);
+        Validate.isTrue(power >= 0, "Power cannot be less than zero: ", power);
         Validate.isTrue(power < 0x80, "Power cannot be more than 127: ", power);
         this.power = power;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
Patch:
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.enchantments;
 
-import net.minecraft.server.Item;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.enchantments.EnchantmentTarget;
 import org.bukkit.enchantments.EnchantmentWrapper;
@@ -52,7 +52,7 @@ public EnchantmentTarget getItemTarget() {
 
     @Override
     public boolean canEnchantItem(ItemStack item) {
-        return target.slot.canEnchant(Item.byId[item.getTypeId()]);
+        return target.canEnchant(CraftItemStack.asNMSCopy(item));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -290,6 +290,7 @@ public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
                         // More than a single stack!
                         if (item.getAmount() > getMaxItemStack()) {
                             CraftItemStack stack = CraftItemStack.asCraftCopy(item);
+                            stack.setAmount(getMaxItemStack());
                             setItem(firstFree, stack);
                             item.setAmount(item.getAmount() - getMaxItemStack());
                         } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
Patch:
@@ -25,7 +25,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     static final ItemMetaKey AMBIENT = new ItemMetaKey("Ambient", "ambient");
     static final ItemMetaKey DURATION = new ItemMetaKey("Duration", "duration");
     static final ItemMetaKey POTION_EFFECTS = new ItemMetaKey("CustomPotionEffects", "custom-effects");
-    static final ItemMetaKey ID = new ItemMetaKey("ID", "potion-id");
+    static final ItemMetaKey ID = new ItemMetaKey("Id", "potion-id");
 
     private List<PotionEffect> customEffects;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -242,6 +242,9 @@ public static net.minecraft.server.ItemStack createNMSItemStack(ItemStack origin
      * Copies the NMS stack to return as a strictly-Bukkit stack
      */
     public static ItemStack asBukkitStack(net.minecraft.server.ItemStack original) {
+        if (original == null) {
+            return new ItemStack(Material.AIR);
+        }
         ItemStack stack = new ItemStack(original.id, original.count, (short) original.getData());
         stack.addUnsafeEnchantments(getEnchantments(original));
         return stack;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -81,7 +81,7 @@ public Snowball throwSnowball() {
     }
 
     public double getEyeHeight() {
-        return 1.0D;
+        return getHandle().getHeadHeight();
     }
 
     public double getEyeHeight(boolean ignoreSneaking) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
Patch:
@@ -198,6 +198,8 @@ public boolean hasPlayedBefore() {
 
     public Location getBedSpawnLocation() {
         NBTTagCompound data = getData();
+        if (data == null) return null;
+
         if (data.hasKey("SpawnX") && data.hasKey("SpawnY") && data.hasKey("SpawnZ")) {
             String spawnWorld = data.getString("SpawnWorld");
             if (spawnWorld.equals("")) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -68,6 +68,7 @@ private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
 
         if (world.getHandle().dimension != 0) return true;
         if (spawnSize <= 0) return true;
+        if (((CraftServer) Bukkit.getServer()).getHandle().getOPs().isEmpty()) return true;
         if (player.isOp()) return true;
 
         ChunkCoordinates chunkcoordinates = worldServer.getSpawn();

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
Patch:
@@ -18,7 +18,7 @@ public static <T> int getDataValue(Effect effect, T data) {
             datavalue = ((Material) data).getId();
             break;
         case SMOKE:
-            switch((BlockFace)data) {
+            switch((BlockFace) data) { // TODO: Verify (Where did these values come from...?)
             case SOUTH_EAST:
                 datavalue = 0;
                 break;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -345,7 +345,8 @@ public void sendMap(MapView map) {
 
     @Override
     public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
-        if (getHandle().netServerHandler == null) return false;
+        EntityPlayer entity = getHandle();
+        if (entity.netServerHandler == null || entity.netServerHandler.disconnected) return false;
 
         // From = Players current Location
         Location from = this.getLocation();
@@ -365,8 +366,6 @@ public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cau
         // Grab the To and From World Handles.
         WorldServer fromWorld = ((CraftWorld) from.getWorld()).getHandle();
         WorldServer toWorld = ((CraftWorld) to.getWorld()).getHandle();
-        // Grab the EntityPlayer
-        EntityPlayer entity = getHandle();
 
         // Check if the fromWorld and toWorld are the same.
         if (fromWorld == toWorld) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1178,7 +1178,7 @@ public OfflinePlayer[] getOfflinePlayers() {
         Set<OfflinePlayer> players = new HashSet<OfflinePlayer>();
 
         for (String file : files) {
-            players.add(getOfflinePlayer(file.substring(0, file.length() - 4)));
+            players.add(getOfflinePlayer(file.substring(0, file.length() - 4), false));
         }
         players.addAll(Arrays.asList(getOnlinePlayers()));
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -419,7 +419,7 @@ public void setTime(long time) {
     }
 
     public long getFullTime() {
-        return world.getTime();
+        return world.F();
     }
 
     public void setFullTime(long time) {
@@ -430,7 +430,7 @@ public void setFullTime(long time) {
             CraftPlayer cp = (CraftPlayer) p;
             if (cp.getHandle().netServerHandler == null) continue;
 
-            cp.getHandle().netServerHandler.sendPacket(new Packet4UpdateTime(cp.getHandle().getPlayerTime(), cp.getHandle().world.F()));
+            cp.getHandle().netServerHandler.sendPacket(new Packet4UpdateTime(cp.getHandle().world.getTime(), cp.getHandle().getPlayerTime()));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -216,6 +216,8 @@ public ChunkPosition findNearestMapFeature(World world, String type, int x, int
         return "Stronghold".equals(type) && this.strongholdGen != null ? this.strongholdGen.getNearestGeneratedFeature(world, x, y, z) : null;
     }
 
+    public void recreateStructures(int i, int j) {}
+
     public int getLoadedChunks() {
         return 0;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
Patch:
@@ -3,6 +3,6 @@
 import net.minecraft.server.IChunkProvider;
 import org.bukkit.generator.ChunkGenerator;
 
+// Do not implement functions to this class, add to NormalChunkGenerator
 public abstract class InternalChunkGenerator extends ChunkGenerator implements IChunkProvider {
-    public void recreateStructures(int i, int j) {}
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
Patch:
@@ -27,7 +27,7 @@ public void setItem(org.bukkit.inventory.ItemStack item) {
 
     public org.bukkit.inventory.ItemStack getItem() {
         ItemStack i = getHandle().i();
-        return i == null ? new org.bukkit.inventory.ItemStack(Material.AIR) : new CraftItemStack(i);
+        return i == null ? new org.bukkit.inventory.ItemStack(Material.AIR) : CraftItemStack.asBukkitStack(i);
     }
 
     public Rotation getRotation() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
Patch:
@@ -21,6 +21,6 @@ public String toString() {
     }
 
     public EntityType getType() {
-        return EntityType.LARGE_FIREBALL;
+        return EntityType.FIREBALL;
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -631,7 +631,6 @@ public void showPlayer(Player player) {
         EntityTracker tracker = ((WorldServer) entity.world).tracker;
         EntityPlayer other = ((CraftPlayer) player).getHandle();
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.id);
-        getHandle().g.remove(Integer.valueOf(other.id)); // Should be called destroyQueue
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
             entry.updatePlayer(getHandle());
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -631,6 +631,7 @@ public void showPlayer(Player player) {
         EntityTracker tracker = ((WorldServer) entity.world).tracker;
         EntityPlayer other = ((CraftPlayer) player).getHandle();
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.id);
+        getHandle().g.remove(Integer.valueOf(other.id)); // Should be called destroyQueue
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
             entry.updatePlayer(getHandle());
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
Patch:
@@ -30,7 +30,7 @@ final CraftAsyncDebugger setNext(final CraftAsyncDebugger next) {
 
     StringBuilder debugTo(final StringBuilder string) {
         for (CraftAsyncDebugger next = this; next != null; next = next.next) {
-            string.append(plugin.getDescription().getName()).append(':').append(clazz.getName()).append('@').append(expiry).append(',');
+            string.append(next.plugin.getDescription().getName()).append(':').append(next.clazz.getName()).append('@').append(next.expiry).append(',');
         }
         return string;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -186,6 +186,7 @@ public CraftServer(MinecraftServer console, ServerConfigurationManagerAbstract s
         monsterSpawn = configuration.getInt("spawn-limits.monsters");
         animalSpawn = configuration.getInt("spawn-limits.animals");
         waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
+        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
         warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
 
         updater = new AutoUpdater(new BukkitDLUpdaterService(configuration.getString("auto-updater.host")), getLogger(), configuration.getString("auto-updater.preferred-channel"));
@@ -522,6 +523,7 @@ public void reload() {
         animalSpawn = configuration.getInt("spawn-limits.animals");
         waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
         warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
+        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
 
         for (WorldServer world : console.worlds) {
             world.difficulty = difficulty;

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
Patch:
@@ -46,7 +46,7 @@ public String format(LogRecord record) {
         builder.append(" [");
         builder.append(record.getLevel().getLocalizedName().toUpperCase());
         builder.append("] ");
-        builder.append(record.getMessage());
+        builder.append(formatMessage(record));
         builder.append('\n');
 
         if (ex != null) {

File: paper-api/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
Patch:
@@ -84,9 +84,9 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                             if (count == 0) continue;
                             long avg = time / count;
                             totalTime += time;
-                            Event event = trl.getEvent();
-                            if (count > 0 && event != null) {
-                                fileTimings.println("    " + event.getClass().getSimpleName() + (trl.hasMultiple() ? " (and others)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg);
+                            Class<? extends Event> eventClass = trl.getEventClass();
+                            if (count > 0 && eventClass != null) {
+                                fileTimings.println("    " + eventClass.getSimpleName() + (trl.hasMultiple() ? " (and sub-classes)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg);
                             }
                         }
                     }

File: paper-api/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java
Patch:
@@ -74,10 +74,10 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;
 
             if (delta > 0.0D) {
-                soundLocation.add(deltaX / delta, deltaY / delta, deltaZ / delta);
+                location.add(deltaX / delta, deltaY / delta, deltaZ / delta);
             }
 
-            player.playSound(soundLocation, soundArg, (float) minimumVolume, (float) pitch);
+            player.playSound(location, soundArg, (float) minimumVolume, (float) pitch);
         } else {
             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);
         }

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -59,6 +59,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new EffectCommand());
         fallbackCommands.add(new ScoreboardCommand());
         fallbackCommands.add(new PlaySoundCommand());
+        fallbackCommands.add(new SpreadPlayersCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -58,6 +58,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new TestForCommand());
         fallbackCommands.add(new EffectCommand());
         fallbackCommands.add(new ScoreboardCommand());
+        fallbackCommands.add(new PlaySoundCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
Patch:
@@ -309,7 +309,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                 } else {
                     String displayName = null;
                     if (args.length > 3) {
-                        displayName = StringUtils.join(ArrayUtils.subarray(args, 4, args.length), ' ');
+                        displayName = StringUtils.join(ArrayUtils.subarray(args, 3, args.length), ' ');
                         if (displayName.length() > 32) {
                             sender.sendMessage(ChatColor.RED + "The display name '" + displayName + "' is too long for a team, it can be at most 32 characters long");
                             return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -333,7 +333,7 @@ public LivingEntity spawnCreature(Location loc, CreatureType creatureType) {
 
     @Deprecated
     public LivingEntity spawnCreature(Location loc, EntityType creatureType) {
-        Validate.isTrue(!creatureType.isAlive(), "EntityType not instance of LivingEntity");
+        Validate.isTrue(creatureType.isAlive(), "EntityType not instance of LivingEntity");
         return (LivingEntity) spawnEntity(loc, creatureType);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
Patch:
@@ -52,6 +52,9 @@ public void setOwnerName(String ownerName) {
 
     public void setTamed(boolean tame) {
         getHandle().setTamed(tame);
+        if (!tame) {
+            setOwnerName("");
+        }
     }
 
     public boolean isSitting() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
Patch:
@@ -125,7 +125,7 @@ public boolean equals(Object obj) {
     @Override
     public int hashCode() {
         int hash = 5;
-        hash = 97 * hash + (this.getName() != null ? this.getName().hashCode() : 0);
+        hash = 97 * hash + (this.getName() != null ? this.getName().toLowerCase().hashCode() : 0);
         return hash;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -221,6 +221,7 @@ public InventoryView openInventory(Inventory inventory) {
     }
 
     private void openCustomInventory(Inventory inventory, EntityPlayer player, int windowType) {
+        if (player.netServerHandler == null) return;
         Container container = new CraftContainer(inventory, this, player.nextContainerCounter());
 
         container = CraftEventFactory.callInventoryOpenEvent(player, container);
@@ -270,6 +271,7 @@ public InventoryView openEnchanting(Location location, boolean force) {
 
     public void openInventory(InventoryView inventory) {
         if (!(getHandle() instanceof EntityPlayer)) return; // TODO: NPC support?
+        if (((EntityPlayer) getHandle()).netServerHandler == null) return;
         if (getHandle().activeContainer != getHandle().defaultContainer) {
             // fire INVENTORY_CLOSE if one already open
             ((EntityPlayer)getHandle()).netServerHandler.handleContainerClose(new Packet101CloseWindow(getHandle().activeContainer.windowId));

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
Patch:
@@ -240,7 +240,8 @@ public void removePotionEffect(PotionEffectType type) {
         getHandle().effects.remove(type.getId());
         getHandle().e = true; // Should be called updateEffects
         if (getHandle() instanceof EntityPlayer) {
-            ((EntityPlayer)getHandle()).netServerHandler.sendPacket(new Packet42RemoveMobEffect(getHandle().id, new MobEffect(type.getId(), 0, 0)));
+            if (((EntityPlayer) getHandle()).netServerHandler == null) return;
+            ((EntityPlayer) getHandle()).netServerHandler.sendPacket(new Packet42RemoveMobEffect(getHandle().id, new MobEffect(type.getId(), 0, 0)));
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -73,7 +73,7 @@ private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
         ChunkCoordinates chunkcoordinates = worldServer.getSpawn();
 
         int distanceFromSpawn = (int) Math.max(Math.abs(x - chunkcoordinates.x), Math.abs(z - chunkcoordinates.z));
-        return distanceFromSpawn > spawnSize;
+        return distanceFromSpawn >= spawnSize;
     }
 
     public static <T extends Event> T callEvent(T event) {

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -334,7 +334,6 @@ public void onDisable() {}
     public void onEnable() {}
 
     public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
-        getServer().getLogger().severe("Plugin " + description.getFullName() + " does not contain any generators that may be used in the default world!");
         return null;
     }
 

File: paper-api/src/main/java/org/bukkit/DyeColor.java
Patch:
@@ -164,7 +164,7 @@ public static DyeColor getByData(final byte data) {
      */
     public static DyeColor getByWoolData(final byte data) {
         int i = 0xff & data;
-        if (i > BY_WOOL_DATA.length) {
+        if (i >= BY_WOOL_DATA.length) {
             return null;
         }
         return BY_WOOL_DATA[i];
@@ -179,7 +179,7 @@ public static DyeColor getByWoolData(final byte data) {
      */
     public static DyeColor getByDyeData(final byte data) {
         int i = 0xff & data;
-        if (i > BY_DYE_DATA.length) {
+        if (i >= BY_DYE_DATA.length) {
             return null;
         }
         return BY_DYE_DATA[i];

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -220,8 +220,8 @@ public enum Material {
     HOPPER(154),
     QUARTZ_BLOCK(155),
     QUARTZ_STAIRS(156, Stairs.class),
-    ACTIVATOR_RAIL(157),
-    DROPPER(158, DirectionalContainer.class),
+    ACTIVATOR_RAIL(157, PoweredRail.class),
+    DROPPER(158, Dispenser.class),
     // ----- Item Separator -----
     IRON_SPADE(256, 1, 250),
     IRON_PICKAXE(257, 1, 250),

File: paper-api/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
Patch:
@@ -400,7 +400,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                         noTeam.add(sender.getName());
                     }
                 } else {
-                    for (int i = 3; i < args.length; i++) {
+                    for (int i = 2; i < args.length; i++) {
                         String playerName = args[i];
                         OfflinePlayer offlinePlayer;
                         Player player = Bukkit.getPlayerExact(playerName);

File: paper-api/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
Patch:
@@ -385,13 +385,13 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                     sender.sendMessage("Added " + addedPlayers.size() + " player(s) to team " + team.getName() + ": " + stringCollectionToString(addedPlayers));
                 }
             } else if (args[1].equalsIgnoreCase("leave")) {
-                if ((sender instanceof Player) ? args.length < 2 : args.length < 3) {
+                if (!(sender instanceof Player) && args.length < 3) {
                     sender.sendMessage(ChatColor.RED + "/scoreboard teams leave [player...]");
                     return false;
                 }
                 Set<String> left = new HashSet<String>();
                 Set<String> noTeam = new HashSet<String>();
-                if ((sender instanceof Player) && args.length == 3) {
+                if ((sender instanceof Player) && args.length == 2) {
                     Team team = mainScoreboard.getPlayerTeam((Player) sender);
                     if (team != null) {
                         team.removePlayer((Player) sender);

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -55,6 +55,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new ClearCommand());
         fallbackCommands.add(new GameRuleCommand());
         fallbackCommands.add(new EnchantCommand());
+        fallbackCommands.add(new TestForCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -380,8 +380,8 @@ public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredList
         for (final Method method : methods) {
             final EventHandler eh = method.getAnnotation(EventHandler.class);
             if (eh == null) continue;
-            final Class<?> checkClass = method.getParameterTypes()[0];
-            if (!Event.class.isAssignableFrom(checkClass) || method.getParameterTypes().length != 1) {
+            final Class<?> checkClass;
+            if (method.getParameterTypes().length != 1 || !Event.class.isAssignableFrom(checkClass = method.getParameterTypes()[0])) {
                 plugin.getLogger().severe(plugin.getDescription().getFullName() + " attempted to register an invalid EventHandler method signature \"" + method.toGenericString() + "\" in " + listener.getClass());
                 continue;
             }

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -378,7 +378,7 @@ public enum Material {
     REDSTONE_COMPARATOR(404),
     NETHER_BRICK_ITEM(405),
     QUARTZ(406),
-    TNT_MINECART(407, 1),
+    EXPLOSIVE_MINECART(407, 1),
     HOPPER_MINECART(408, 1),
     GOLD_RECORD(2256, 1),
     GREEN_RECORD(2257, 1),

File: paper-api/src/main/java/org/bukkit/permissions/PermissionAttachment.java
Patch:
@@ -90,7 +90,6 @@ public void setPermission(String name, boolean value) {
      */
     public void setPermission(Permission perm, boolean value) {
         setPermission(perm.getName(), value);
-        permissible.recalculatePermissions();
     }
 
     /**
@@ -114,7 +113,6 @@ public void unsetPermission(String name) {
      */
     public void unsetPermission(Permission perm) {
         unsetPermission(perm.getName());
-        permissible.recalculatePermissions();
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -581,11 +581,11 @@ public Set<Permission> getDefaultPermissions(boolean op) {
     }
 
     public void removePermission(Permission perm) {
-        removePermission(perm.getName().toLowerCase());
+        removePermission(perm.getName());
     }
 
     public void removePermission(String name) {
-        permissions.remove(name);
+        permissions.remove(name.toLowerCase());
     }
 
     public void recalculatePermissionDefaults(Permission perm) {

File: paper-api/src/main/java/org/bukkit/command/defaults/ClearCommand.java
Patch:
@@ -62,6 +62,8 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             int count = player.getInventory().clear(id, data);
 
             Command.broadcastCommandMessage(sender, "Cleared the inventory of " + player.getDisplayName() + ", removing " + count + " items");
+        } else if (args.length == 0) {
+            sender.sendMessage(ChatColor.RED + "Please provide a player!");
         } else {
             sender.sendMessage(ChatColor.RED + "Can't find player " + args[0]);
         }

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -528,7 +528,7 @@ public boolean isEdible() {
      * @return Material if found, or null
      */
     public static Material getMaterial(final int id) {
-        if (byId.length > id) {
+        if (byId.length > id && id >= 0) {
             return byId[id];
         } else {
             return null;

File: paper-api/src/test/java/org/bukkit/MaterialTest.java
Patch:
@@ -33,6 +33,7 @@ public void isBlock() {
     @Test
     public void getByOutOfRangeId() {
         assertThat(Material.getMaterial(Integer.MAX_VALUE), is(nullValue()));
+        assertThat(Material.getMaterial(Integer.MIN_VALUE), is(nullValue()));
     }
 
     @Test

File: paper-api/src/main/java/org/bukkit/material/Dye.java
Patch:
@@ -33,7 +33,7 @@ public Dye(final Material type, final byte data) {
      * @return DyeColor of this dye
      */
     public DyeColor getColor() {
-        return DyeColor.getByData((byte) (15 - getData()));
+        return DyeColor.getByDyeData(getData());
     }
 
     /**
@@ -42,7 +42,7 @@ public DyeColor getColor() {
      * @param color New color of this dye
      */
     public void setColor(DyeColor color) {
-        setData((byte) (15 - color.getData()));
+        setData(color.getDyeData());
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/material/Wool.java
Patch:
@@ -38,7 +38,7 @@ public Wool(final Material type, final byte data) {
      * @return DyeColor of this dye
      */
     public DyeColor getColor() {
-        return DyeColor.getByData(getData());
+        return DyeColor.getByWoolData(getData());
     }
 
     /**
@@ -47,7 +47,7 @@ public DyeColor getColor() {
      * @param color New color of this dye
      */
     public void setColor(DyeColor color) {
-        setData(color.getData());
+        setData(color.getWoolData());
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -281,7 +281,7 @@ public Pattern[] getPluginFileFilters() {
     @Deprecated
     public Class<?> getClassByName(final String name) {
         if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"public Plugin loadPlugin(File, boolean)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
+            server.getLogger().log(Level.WARNING, "Method \"public Class<?> getClassByName(String)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
             warn = false;
         }
         return getClassByName0(name);
@@ -313,7 +313,7 @@ Class<?> getClassByName0(final String name) {
     @Deprecated
     public void setClass(final String name, final Class<?> clazz) {
         if (warn) {
-            server.getLogger().log(Level.WARNING, "Method \"public Plugin loadPlugin(File, boolean)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
+            server.getLogger().log(Level.WARNING, "Method \"public void setClass(String, Class<?>)\" is Deprecated, and may be removed in a future version of Bukkit", new AuthorNagException(""));
             warn = false;
         }
         setClass0(name, clazz);

File: paper-api/src/main/java/org/bukkit/material/Command.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.material;
 
-import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
 
 /**

File: paper-api/src/main/java/org/bukkit/material/Torch.java
Patch:
@@ -49,10 +49,9 @@ public BlockFace getAttachedFace() {
             return BlockFace.SOUTH;
 
         case 0x5:
+        default:
             return BlockFace.DOWN;
         }
-
-        return null;
     }
 
     public void setFacingDirection(BlockFace face) {

File: paper-api/src/main/java/org/bukkit/command/PluginCommand.java
Patch:
@@ -61,7 +61,7 @@ public boolean execute(CommandSender sender, String commandLabel, String[] args)
      * @param executor New executor to run
      */
     public void setExecutor(CommandExecutor executor) {
-        this.executor = executor;
+        this.executor = executor == null ? owningPlugin : executor;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/material/ExtendedRails.java
Patch:
@@ -37,7 +37,7 @@ protected byte getConvertedData() {
     public void setDirection(BlockFace face, boolean isOnSlope) {
         boolean extraBitSet = (getData() & 0x8) == 0x8;
 
-        if (face != BlockFace.NORTH && face != BlockFace.SOUTH && face != BlockFace.EAST && face != BlockFace.WEST) {
+        if (face != BlockFace.WEST && face != BlockFace.EAST && face != BlockFace.NORTH && face != BlockFace.SOUTH) {
             throw new IllegalArgumentException("Detector rails and powered rails cannot be set on a curve!");
         }
 

File: paper-api/src/main/java/org/bukkit/util/BlockIterator.java
Patch:
@@ -179,15 +179,15 @@ private boolean blockEquals(Block a, Block b) {
     }
 
     private BlockFace getXFace(Vector direction) {
-        return ((direction.getX() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
+        return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
     }
 
     private BlockFace getYFace(Vector direction) {
         return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
     }
 
     private BlockFace getZFace(Vector direction) {
-        return ((direction.getZ() > 0) ? BlockFace.WEST : BlockFace.EAST);
+        return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
     }
 
     private double getXLength(Vector direction) {

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -536,6 +536,6 @@ public static Material matchMaterial(final String name) {
      * @return True if this material represents a playable music disk.
      */
     public boolean isRecord() {
-        return id >= GOLD_RECORD.id && id <= RECORD_11.id;
+        return id >= GOLD_RECORD.id && id <= RECORD_12.id;
     }
 }

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -54,6 +54,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new SpawnpointCommand());
         fallbackCommands.add(new ClearCommand());
         fallbackCommands.add(new GameRuleCommand());
+        fallbackCommands.add(new EnchantCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/enchantments/Enchantment.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import org.bukkit.command.defaults.EnchantCommand;
 import org.bukkit.inventory.ItemStack;
 
 /**
@@ -233,6 +234,7 @@ public static boolean isAcceptingRegistrations() {
      */
     public static void stopAcceptingRegistrations() {
         acceptingNew = false;
+        EnchantCommand.buildEnchantments();
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/command/defaults/KillCommand.java
Patch:
@@ -30,7 +30,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             if (ede.isCancelled()) return true;
 
             ede.getEntity().setLastDamageCause(ede);
-            player.damage(ede.getDamage());
+            player.setHealth(0);
             sender.sendMessage("Ouch. That look like it hurt.");
         } else {
             sender.sendMessage("You can only perform this command as a player");

File: paper-api/src/main/java/org/bukkit/command/defaults/ClearCommand.java
Patch:
@@ -60,9 +60,10 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
             int data = args.length >= 3 ? getInteger(sender, args[2], 0) : -1;
             int count = player.getInventory().clear(id, data);
+
             Command.broadcastCommandMessage(sender, "Cleared the inventory of " + player.getDisplayName() + ", removing " + count + " items");
         } else {
-            sender.sendMessage(ChatColor.RED + "Can't find user " + args[0]);
+            sender.sendMessage(ChatColor.RED + "Can't find player " + args[0]);
         }
 
         return true;

File: paper-api/src/main/java/org/bukkit/command/defaults/DeopCommand.java
Patch:
@@ -7,6 +7,7 @@
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
+import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
@@ -36,7 +37,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             ((Player) player).sendMessage(ChatColor.YELLOW + "You are no longer op!");
         }
 
-        sender.sendMessage("De-opped " + args[0]);
+        Command.broadcastCommandMessage(sender, "De-opped " + args[0]);
         return true;
     }
 

File: paper-api/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
Patch:
@@ -67,16 +67,16 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                     sender.sendMessage("Game mode change for " + player.getName() + " failed!");
                 } else {
                     if (player == sender) {
-                        Command.broadcastCommandMessage(sender, "Set own game mode to " + mode.toString() + " mode", false);
+                        Command.broadcastCommandMessage(sender, "Set own game mode to " + mode.toString() + " mode");
                     } else {
-                        Command.broadcastCommandMessage(sender, "Set " + player.getName() + "'s game mode to " + mode.toString() + " mode", false);
+                        Command.broadcastCommandMessage(sender, "Set " + player.getName() + "'s game mode to " + mode.toString() + " mode");
                     }
                 }
             } else {
                 sender.sendMessage(player.getName() + " already has game mode " + mode.getValue());
             }
         } else {
-            sender.sendMessage("Can't find user " + playerArg);
+            sender.sendMessage("Can't find player " + playerArg);
         }
 
         return true;

File: paper-api/src/main/java/org/bukkit/command/defaults/GameRuleCommand.java
Patch:
@@ -37,7 +37,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                     String value = args[1];
 
                     world.setGameRuleValue(rule, value);
-                    Command.broadcastCommandMessage(sender, "Game rule has been updated");
+                    Command.broadcastCommandMessage(sender, "Game rule " + rule + " has been set to: " + value);
                 } else {
                     String value = world.getGameRuleValue(rule);
                     sender.sendMessage(rule + " = " + value);

File: paper-api/src/main/java/org/bukkit/command/defaults/GiveCommand.java
Patch:
@@ -68,7 +68,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                 sender.sendMessage("There's no item called " + args[1]);
             }
         } else {
-            sender.sendMessage("Can't find user " + args[0]);
+            sender.sendMessage("Can't find player " + args[0]);
         }
 
         return true;

File: paper-api/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
 public class ReloadCommand extends BukkitCommand {
@@ -20,7 +21,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
         if (!testPermission(sender)) return true;
 
         Bukkit.reload();
-        sender.sendMessage(ChatColor.GREEN + "Reload complete.");
+        Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
 
         return true;
     }

File: paper-api/src/main/java/org/bukkit/command/defaults/TeleportCommand.java
Patch:
@@ -51,7 +51,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
         if (args.length < 3) {
             Player target = Bukkit.getPlayerExact(args[args.length - 1]);
             if (target == null) {
-                sender.sendMessage("Can't find user " + args[args.length - 1] + ". No tp.");
+                sender.sendMessage("Can't find player " + args[args.length - 1] + ". No tp.");
                 return true;
             }
             player.teleport(target, TeleportCause.COMMAND);

File: paper-api/src/main/java/org/bukkit/command/defaults/TellCommand.java
Patch:
@@ -41,6 +41,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                 Bukkit.getLogger().info("[" + sender.getName() + "->" + player.getName() + "] " + message);
             }
 
+            sender.sendMessage("[" + sender.getName() + "->" + player.getName() + "] " + message);
             player.sendMessage(result);
         }
 

File: paper-api/src/main/java/org/bukkit/potion/PotionType.java
Patch:
@@ -12,7 +12,7 @@ public enum PotionType {
     STRENGTH(9, PotionEffectType.INCREASE_DAMAGE, 2),
     SLOWNESS(10, PotionEffectType.SLOW, 1),
     INSTANT_DAMAGE(12, PotionEffectType.HARM, 2),
-    INVISIBILTY(14, PotionEffectType.INVISIBILITY, 1),
+    INVISIBILITY(14, PotionEffectType.INVISIBILITY, 1),
     ;
 
     private final int damageValue, maxLevel;

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -57,6 +57,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new WeatherCommand());
         fallbackCommands.add(new SpawnpointCommand());
         fallbackCommands.add(new ClearCommand());
+        fallbackCommands.add(new GameRuleCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -56,6 +56,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new DifficultyCommand());
         fallbackCommands.add(new WeatherCommand());
         fallbackCommands.add(new SpawnpointCommand());
+        fallbackCommands.add(new ClearCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -55,6 +55,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new SeedCommand());
         fallbackCommands.add(new DifficultyCommand());
         fallbackCommands.add(new WeatherCommand());
+        fallbackCommands.add(new SpawnpointCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -54,6 +54,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new DefaultGameModeCommand());
         fallbackCommands.add(new SeedCommand());
         fallbackCommands.add(new DifficultyCommand());
+        fallbackCommands.add(new WeatherCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/defaults/DefaultGameModeCommand.java
Patch:
@@ -68,9 +68,8 @@ public List<String> tabComplete(CommandSender sender, String alias, String[] arg
 
         if (args.length == 1) {
             return StringUtil.copyPartialMatches(args[0], GAMEMODE_NAMES, new ArrayList<String>(GAMEMODE_NAMES.size()));
-        } else if (args.length == 2) {
-            return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -53,6 +53,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new BanListCommand());
         fallbackCommands.add(new DefaultGameModeCommand());
         fallbackCommands.add(new SeedCommand());
+        fallbackCommands.add(new DifficultyCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/command/MultipleCommandAlias.java
Patch:
@@ -10,7 +10,7 @@ public MultipleCommandAlias(String name, Command[] commands) {
         super(name);
         this.commands = commands;
     }
-    
+
     public Command[] getCommands() {
         return commands;
     }

File: paper-api/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
Patch:
@@ -1,10 +1,10 @@
 package org.bukkit.command.defaults;
 
-import org.bukkit.command.Command;
-
 import java.util.List;
 
-public abstract class BukkitCommand extends Command{
+import org.bukkit.command.Command;
+
+public abstract class BukkitCommand extends Command {
     protected BukkitCommand(String name) {
         super(name);
     }

File: paper-api/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
Patch:
@@ -1,8 +1,9 @@
 package org.bukkit.command.defaults;
 
 import java.util.Arrays;
-import org.bukkit.ChatColor;
+
 import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
 

File: paper-api/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
Patch:
@@ -1,8 +1,9 @@
 package org.bukkit.command.defaults;
 
 import java.util.Arrays;
-import org.bukkit.ChatColor;
+
 import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 
 public class ReloadCommand extends BukkitCommand {

File: paper-api/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
Patch:
@@ -1,13 +1,11 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
 import java.util.List;
+
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
 public abstract class VanillaCommand extends Command {
-    static final List<String> EMPTY_LIST = new ArrayList(0);
-
     protected VanillaCommand(String name) {
         super(name);
     }

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.logging.Logger;
 
 import org.bukkit.Server;
-import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.TabExecutor;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.ChunkGenerator;
 
@@ -16,7 +16,7 @@
  * <p />
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends CommandExecutor {
+public interface Plugin extends TabExecutor {
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.

File: paper-api/src/main/java/org/bukkit/metadata/MetadataStore.java
Patch:
@@ -11,6 +11,7 @@ public interface MetadataStore<T> {
      * @param subject The object receiving the metadata.
      * @param metadataKey A unique key to identify this metadata.
      * @param newMetadataValue The metadata value to apply.
+     * @throws IllegalArgumentException If value is null, or the owning plugin is null
      */
     public void setMetadata(T subject, String metadataKey, MetadataValue newMetadataValue);
 
@@ -39,6 +40,7 @@ public interface MetadataStore<T> {
      * @param subject the object to remove the metadata from.
      * @param metadataKey the unique metadata key identifying the metadata to remove.
      * @param owningPlugin the plugin attempting to remove a metadata item.
+     * @throws IllegalArgumentException If plugin is null
      */
     public void removeMetadata(T subject, String metadataKey, Plugin owningPlugin);
 
@@ -47,6 +49,7 @@ public interface MetadataStore<T> {
      * each invalidated metadata item to be recalculated the next time it is accessed.
      *
      * @param owningPlugin the plugin requesting the invalidation.
+     * @throws IllegalArgumentException If plugin is null
      */
     public void invalidateAll(Plugin owningPlugin);
 }

File: paper-api/src/main/java/org/bukkit/metadata/MetadataValue.java
Patch:
@@ -62,7 +62,7 @@ public interface MetadataValue {
     /**
      * Returns the {@link Plugin} that created this metadata item.
      *
-     * @return the plugin that owns this metadata value.
+     * @return the plugin that owns this metadata value. This should never be null.
      */
     public Plugin getOwningPlugin();
 

File: paper-api/src/main/java/org/bukkit/metadata/Metadatable.java
Patch:
@@ -13,6 +13,7 @@ public interface Metadatable {
      *
      * @param metadataKey A unique key to identify this metadata.
      * @param newMetadataValue The metadata value to apply.
+     * @throws IllegalArgumentException If value is null, or the owning plugin is null
      */
     public void setMetadata(String metadataKey, MetadataValue newMetadataValue);
 
@@ -37,6 +38,7 @@ public interface Metadatable {
      *
      * @param metadataKey the unique metadata key identifying the metadata to remove.
      * @param owningPlugin This plugin's metadata value will be removed. All other values will be left untouched.
+     * @throws IllegalArgumentException If plugin is null
      */
     public void removeMetadata(String metadataKey, Plugin owningPlugin);
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
Patch:
@@ -58,9 +58,9 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
                     sender.sendMessage("Game mode change for " + player.getName() + " failed!");
                 } else {
                     if (player == sender) {
-                        Command.broadcastCommandMessage(sender, "Set own game mode to" + mode.toString() + " mode", false);
+                        Command.broadcastCommandMessage(sender, "Set own game mode to " + mode.toString() + " mode", false);
                     } else {
-                        Command.broadcastCommandMessage(sender, "Set " + player.getName() + "'s game mode to" + mode.toString() + " mode", false);
+                        Command.broadcastCommandMessage(sender, "Set " + player.getName() + "'s game mode to " + mode.toString() + " mode", false);
                     }
                 }
             } else {

File: paper-api/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
Patch:
@@ -26,11 +26,11 @@ protected int getInteger(CommandSender sender, String value, int min) {
 
     protected int getInteger(CommandSender sender, String value, int min, int max) {
         int i = min;
+
         try {
             i = Integer.valueOf(value);
-        } catch (NumberFormatException ex) {
-            sender.sendMessage("Invalid exp count: " + value);
-        }
+        } catch (NumberFormatException ex) {}
+
         if (i < min) {
             i = min;
         } else if (i > max) {

File: paper-api/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
Patch:
@@ -105,8 +105,9 @@ public static Permission registerPermissions(Permission parent) {
         DefaultPermissions.registerPermission(PREFIX + "version", "Allows the user to view the version of the server", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "gamemode", "Allows the user to change the gamemode of another player", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "xp", "Allows the user to give themselves or others arbitrary values of experience", PermissionDefault.OP, commands);
-        DefaultPermissions.registerPermission(PREFIX + "defaultgamemode", "Allows the user to toggle rain on/off for a given world", PermissionDefault.OP, commands);
-        DefaultPermissions.registerPermission(PREFIX + "seed", "Allows the user to toggle rain on/off for a given world", PermissionDefault.OP, commands);
+        DefaultPermissions.registerPermission(PREFIX + "toggledownfall", "Allows the user to toggle rain on/off for a given world", PermissionDefault.OP, commands);
+        DefaultPermissions.registerPermission(PREFIX + "defaultgamemode", "Allows the user to change the default gamemode of the server", PermissionDefault.OP, commands);
+        DefaultPermissions.registerPermission(PREFIX + "seed", "Allows the user to view the seed of the world", PermissionDefault.OP, commands);
 
 
         commands.recalculatePermissibles();

File: paper-api/src/main/java/org/bukkit/WorldType.java
Patch:
@@ -9,7 +9,8 @@
 public enum WorldType {
     NORMAL("DEFAULT"),
     FLAT("FLAT"),
-    VERSION_1_1("DEFAULT_1_1");
+    VERSION_1_1("DEFAULT_1_1"),
+    LARGE_BIOMES("LARGEBIOMES");
 
     private final static Map<String, WorldType> BY_NAME = Maps.newHashMap();
     private final String name;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -120,7 +120,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.MapMaker;
 
-import jline.ConsoleReader;
+import jline.console.ConsoleReader;
 
 public final class CraftServer implements Server {
     private final String serverName = "CraftBukkit";

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -316,7 +316,6 @@ public static PlayerDeathEvent callPlayerDeathEvent(EntityPlayer victim, List<or
         org.bukkit.World world = entity.getWorld();
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        // TODO: Possibly a way to persist this incase of disconnect
         victim.keepLevel = event.getKeepLevel();
         victim.newLevel = event.getNewLevel();
         victim.newTotalExp = event.getNewTotalExp();
@@ -329,8 +328,7 @@ public static PlayerDeathEvent callPlayerDeathEvent(EntityPlayer victim, List<or
             if (stack instanceof CraftItemStack) {
                 // Use the internal item to preserve possible data.
                 victim.a(((CraftItemStack) stack).getHandle(), 0.0f);
-            }
-            else {
+            } else {
                 world.dropItemNaturally(entity.getLocation(), stack);
             }
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -65,6 +65,7 @@ private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
         WorldServer worldServer = world.getHandle();
         int spawnSize = Bukkit.getServer().getSpawnRadius();
 
+        if (world.getHandle().dimension != 0) return true;
         if (spawnSize <= 0) return true;
         if (player.isOp()) return true;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -142,7 +142,7 @@ public static PlayerInteractEvent callPlayerInteractEvent(EntityHuman who, Actio
         if (action != Action.LEFT_CLICK_AIR && action != Action.RIGHT_CLICK_AIR) {
             throw new IllegalArgumentException();
         }
-        return callPlayerInteractEvent(who, action, 0, 255, 0, 0, itemstack);
+        return callPlayerInteractEvent(who, action, 0, 256, 0, 0, itemstack);
     }
 
     public static PlayerInteractEvent callPlayerInteractEvent(EntityHuman who, Action action, int clickedX, int clickedY, int clickedZ, int clickedFace, ItemStack itemstack) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -155,7 +155,7 @@ public static PlayerInteractEvent callPlayerInteractEvent(EntityHuman who, Actio
         Block blockClicked = craftWorld.getBlockAt(clickedX, clickedY, clickedZ);
         BlockFace blockFace = CraftBlock.notchToBlockFace(clickedFace);
 
-        if (clickedY == 255) {
+        if (clickedY > 255) {
             blockClicked = null;
             switch (action) {
             case LEFT_CLICK_BLOCK:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1056,7 +1056,6 @@ public void explodeBlock(Block block, float yield) {
         int blockZ = block.getZ();
         // following code is lifted from Explosion.a(boolean), and modified
         net.minecraft.server.Block.byId[blockId].dropNaturally(this.world, blockX, blockY, blockZ, block.getData(), yield, 0);
-        net.minecraft.server.Block.byId[blockId].doActualDrop(this.world, blockX, blockY, blockZ);
         block.setType(org.bukkit.Material.AIR);
         // not sure what this does, seems to have something to do with the 'base' material of a block.
         // For example, WOODEN_STAIRS does something with WOOD in this method

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -18,7 +18,6 @@
 import org.bukkit.block.BlockState;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftChunk;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
@@ -348,7 +347,7 @@ public boolean breakNaturally() {
 
         setTypeId(Material.AIR.getId());
         if (block != null) {
-            block.b(chunk.getHandle().world, x, y, z, data, 0);
+            block.dropNaturally(chunk.getHandle().world, x, y, z, data, 1.0F, 0);
             return true;
         }
         return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -539,6 +539,7 @@ public static boolean callBlockBreakEvent(World world, int x, int y, int z, int
         world.getServer().getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
+            blockType.setDrops(new ArrayList<ItemStack>());
             // Let the client know the block still exists
             ((EntityPlayer) player).netServerHandler.sendPacket(new Packet53BlockChange(x, y, z, world));
             return true;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -825,7 +825,7 @@ public boolean getAllowFlight() {
 
     public void setAllowFlight(boolean value) {
         if (isFlying() && !value) {
-            getHandle().abilities.canFly = false;
+            getHandle().abilities.isFlying = false;
         }
 
         getHandle().abilities.canFly = value;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1056,6 +1056,7 @@ public void explodeBlock(Block block, float yield) {
         int blockZ = block.getZ();
         // following code is lifted from Explosion.a(boolean), and modified
         net.minecraft.server.Block.byId[blockId].dropNaturally(this.world, blockX, blockY, blockZ, block.getData(), yield, 0);
+        net.minecraft.server.Block.byId[blockId].doActualDrop(this.world, blockX, blockY, blockZ);
         block.setType(org.bukkit.Material.AIR);
         // not sure what this does, seems to have something to do with the 'base' material of a block.
         // For example, WOODEN_STAIRS does something with WOOD in this method

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -18,6 +18,7 @@
 import org.bukkit.block.BlockState;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
@@ -349,7 +350,7 @@ public boolean breakNaturally() {
         if (block != null) {
             block.dropNaturally(chunk.getHandle().world, x, y, z, data, 1.0F, 0);
             for (ItemStack item : getDrops()) {
-                breakNaturally(item);
+                block.finishDrop(chunk.getHandle().world, x, y, z, CraftItemStack.createNMSItemStack(item));
             }
             return true;
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -348,6 +348,9 @@ public boolean breakNaturally() {
         setTypeId(Material.AIR.getId());
         if (block != null) {
             block.dropNaturally(chunk.getHandle().world, x, y, z, data, 1.0F, 0);
+            for (ItemStack item : getDrops()) {
+                breakNaturally(item);
+            }
             return true;
         }
         return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
Patch:
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.help;
 
+import org.apache.commons.lang.Validate;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.help.HelpMap;
@@ -14,6 +15,7 @@ public CommandAliasHelpTopic(String alias, String aliasFor, HelpMap helpMap) {
         this.aliasFor = aliasFor.startsWith("/") ? aliasFor : "/" + aliasFor;
         this.helpMap = helpMap;
         this.name = alias.startsWith("/") ? alias : "/" + alias;
+        Validate.isTrue(!this.name.equals(this.aliasFor), "Command " + this.name + " cannot be alias for itself");
         this.shortText = ChatColor.YELLOW + "Alias for " + ChatColor.WHITE + this.aliasFor;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -68,8 +68,8 @@ public ItemStack getItemOnCursor() {
     }
 
     public void setItemOnCursor(ItemStack item) {
-        CraftItemStack stack = new CraftItemStack(item);
-        getHandle().inventory.setCarried(stack.getHandle());
+        net.minecraft.server.ItemStack stack = CraftItemStack.createNMSItemStack(item);
+        getHandle().inventory.setCarried(stack);
         if (this instanceof CraftPlayer) {
             ((EntityPlayer) getHandle()).broadcastCarriedItem(); // Send set slot for cursor
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -41,8 +41,8 @@ public void setContents(ItemStack[] items) {
     }
 
     @Override
-    public CraftItemStack[] getContents() {
-        CraftItemStack[] items = new CraftItemStack[getSize()];
+    public ItemStack[] getContents() {
+        ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] mcResultItems = getResultInventory().getContents();
 
         int i = 0;
@@ -85,7 +85,7 @@ public void setItem(int index, ItemStack item) {
     }
 
     public ItemStack[] getMatrix() {
-        CraftItemStack[] items = new CraftItemStack[getSize()];
+        ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] matrix = getMatrixInventory().getContents();
 
         for (int i = 0; i < matrix.length; i++ ) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
Patch:
@@ -64,9 +64,9 @@ public void setBoots(ItemStack boots) {
         setItem(getSize() + 0, boots);
     }
 
-    public CraftItemStack[] getArmorContents() {
+    public ItemStack[] getArmorContents() {
         net.minecraft.server.ItemStack[] mcItems = getInventory().getArmorContents();
-        CraftItemStack[] ret = new CraftItemStack[mcItems.length];
+        ItemStack[] ret = new ItemStack[mcItems.length];
 
         for (int i = 0; i < mcItems.length; i++) {
             ret[i] = new CraftItemStack(mcItems[i]);

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -266,7 +266,7 @@ public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
                     } else {
                         // More than a single stack!
                         if (item.getAmount() > getMaxItemStack()) {
-                            CraftItemStack stack = new CraftItemStack(item);
+                            CraftItemStack stack = new CraftItemStack(item.getTypeId(), getMaxItemStack(), item.getDurability());
                             stack.addUnsafeEnchantments(item.getEnchantments());
                             setItem(firstFree, stack);
                             item.setAmount(item.getAmount() - getMaxItemStack());

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -30,11 +30,11 @@ public CraftItemStack(ItemStack item) {
 
     /* 'Overwritten' constructors from ItemStack, yay for Java sucking */
     public CraftItemStack(final int type) {
-        this(type, 0);
+        this(type, 1);
     }
 
     public CraftItemStack(final Material type) {
-        this(type, 0);
+        this(type, 1);
     }
 
     public CraftItemStack(final int type, final int amount) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -68,8 +68,8 @@ public ItemStack getItemOnCursor() {
     }
 
     public void setItemOnCursor(ItemStack item) {
-        CraftItemStack stack = new CraftItemStack(item.getType(), item.getAmount(), item.getDurability());
-        getHandle().inventory.setCarried(stack.getType() == Material.AIR ? null : stack.getHandle());
+        CraftItemStack stack = new CraftItemStack(item);
+        getHandle().inventory.setCarried(stack.getHandle());
         if (this instanceof CraftPlayer) {
             ((EntityPlayer) getHandle()).broadcastCarriedItem(); // Send set slot for cursor
         }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -266,7 +266,7 @@ public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
                     } else {
                         // More than a single stack!
                         if (item.getAmount() > getMaxItemStack()) {
-                            CraftItemStack stack = new CraftItemStack(item.getTypeId(), getMaxItemStack(), item.getDurability());
+                            CraftItemStack stack = new CraftItemStack(item);
                             stack.addUnsafeEnchantments(item.getEnchantments());
                             setItem(firstFree, stack);
                             item.setAmount(item.getAmount() - getMaxItemStack());

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -114,7 +114,7 @@ public void setMatrix(ItemStack[] contents) {
                 if (item == null || item.getTypeId() <= 0) {
                     mcItems[i] = null;
                 } else {
-                    mcItems[i] = new net.minecraft.server.ItemStack( item.getTypeId(), item.getAmount(), item.getDurability());
+                    mcItems[i] = CraftItemStack.createNMSItemStack(item);
                 }
             } else {
                 mcItems[i] = null;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
Patch:
@@ -66,7 +66,7 @@ public ItemStack splitStack(int i, int j) {
                 this.setItem(i, null);
                 result = stack;
             } else {
-                result = new ItemStack(stack.id, j, stack.getData());
+                result = new ItemStack(stack.id, j, stack.getData(), stack.getEnchantments());
                 stack.count -= j;
             }
             this.update();
@@ -81,7 +81,7 @@ public ItemStack splitWithoutUpdate(int i) {
                 this.setItem(i, null);
                 result = stack;
             } else {
-                result = new ItemStack(stack.id, 1, stack.getData());
+                result = new ItemStack(stack.id, 1, stack.getData(), stack.getEnchantments());
                 stack.count -= 1;
             }
             return result;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
Patch:
@@ -27,7 +27,7 @@ public CraftInventoryCustom(InventoryHolder owner, int size, String title) {
 
     static class MinecraftInventory implements IInventory {
         private ItemStack[] items;
-        private int maxStack;
+        private int maxStack = 64;
         private List<HumanEntity> viewers;
         private String title;
         private InventoryType type;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -84,13 +84,13 @@ public Entity[] getEntities() {
         int count = 0, index = 0;
         net.minecraft.server.Chunk chunk = getHandle();
 
-        for (int i = 0; i < 8; i++) {
+        for (int i = 0; i < 16; i++) {
             count += chunk.entitySlices[i].size();
         }
 
         Entity[] entities = new Entity[count];
 
-        for (int i = 0; i < 8; i++) {
+        for (int i = 0; i < 16; i++) {
             for (Object obj : chunk.entitySlices[i].toArray()) {
                 if (!(obj instanceof net.minecraft.server.Entity)) {
                     continue;

File: paper-server/src/main/java/org/bukkit/craftbukkit/PortalTravelAgent.java
Patch:
@@ -87,7 +87,7 @@ public Location findPortal(Location location) {
             for (int k1 = i1 - this.searchRadius; k1 <= i1 + this.searchRadius; ++k1) {
                 double d3 = (double) k1 + 0.5D - location.getZ();
 
-                for (int l1 = 255; l1 >= 0; --l1) {
+                for (int l1 = 127; l1 >= 0; --l1) {
                     if (world.getTypeId(j1, l1, k1) == Block.PORTAL.id) {
                         while (world.getTypeId(j1, l1 - 1, k1) == Block.PORTAL.id) {
                             --l1;
@@ -194,7 +194,7 @@ public boolean createPortal(Location location) {
                 d2 = (double) j2 + 0.5D - location.getZ();
 
                 label271:
-                for (l2 = 255; l2 >= 0; --l2) {
+                for (l2 = 127; l2 >= 0; --l2) {
                     if (world.isEmpty(i2, l2, j2)) {
                         while (l2 > 0 && world.isEmpty(i2, l2 - 1, j2)) {
                             --l2;
@@ -245,7 +245,7 @@ public boolean createPortal(Location location) {
                     d2 = (double) j2 + 0.5D - location.getZ();
 
                     label219:
-                    for (l2 = 255; l2 >= 0; --l2) {
+                    for (l2 = 127; l2 >= 0; --l2) {
                         if (world.isEmpty(i2, l2, j2)) {
                             while (l2 > 0 && world.isEmpty(i2, l2 - 1, j2)) {
                                 --l2;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
Patch:
@@ -46,7 +46,7 @@ public void setContents(ItemStack[] items) {
         System.arraycopy(items, 0, leftItems, 0, Math.min(left.getSize(),items.length));
         left.setContents(leftItems);
         if (items.length >= left.getSize()) {
-            System.arraycopy(items, 0, rightItems, left.getSize(), Math.min(right.getSize(), items.length - left.getSize()));
+            System.arraycopy(items, left.getSize(), rightItems, 0, Math.min(right.getSize(), items.length - left.getSize()));
             right.setContents(rightItems);
         }
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -623,7 +623,7 @@ public World createWorld(WorldCreator creator) {
             generator = getGenerator(name);
         }
 
-        Convertable converter = new WorldLoaderServer(folder);
+        Convertable converter = new WorldLoaderServer(getWorldContainer());
         if (converter.isConvertable(name)) {
             getLogger().info("Converting world '" + name + "'");
             converter.convert(name, new ConvertProgressUpdater(console));

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -127,7 +127,7 @@ public void setResult(ItemStack item) {
         if (item == null || item.getTypeId() <= 0) {
             contents[0] = null;
         } else {
-            contents[0] = new net.minecraft.server.ItemStack( item.getTypeId(), item.getAmount(), item.getDurability());
+            contents[0] = CraftItemStack.createNMSItemStack(item);
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/updater/AutoUpdater.java
Patch:
@@ -74,7 +74,7 @@ public void check(final String currentSlug) {
         new Thread() {
             @Override
             public void run() {
-                current = service.getArtifact(currentSlug, "current artifact information; perhaps you are running a custom version?");
+                current = service.getArtifact(currentSlug, "information about this CraftBukkit version; perhaps you are running a custom one?");
                 latest = service.getArtifact("latest-" + channel, "latest artifact information");
 
                 if (isUpdateAvailable()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/ChunkCompressionThread.java
Patch:
@@ -18,7 +18,7 @@ public final class ChunkCompressionThread implements Runnable {
     private final HashMap<EntityPlayer, Integer> queueSizePerPlayer = new HashMap<EntityPlayer, Integer>();
     private final BlockingQueue<QueuedPacket> packetQueue = new LinkedBlockingQueue<QueuedPacket>(QUEUE_CAPACITY);
 
-    private final int CHUNK_SIZE = 16 * 128 * 16 * 5 / 2;
+    private final int CHUNK_SIZE = 16 * 256 * 16 * 5 / 2;
     private final int REDUCED_DEFLATE_THRESHOLD = CHUNK_SIZE / 4;
     private final int DEFLATE_LEVEL_CHUNKS = 6;
     private final int DEFLATE_LEVEL_PARTS = 1;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -69,7 +69,7 @@ public String toString() {
     }
 
     public Block getBlock(int x, int y, int z) {
-        return new CraftBlock(this, (getX() << 4) | (x & 0xF), y & 0x7F, (getZ() << 4) | (z & 0xF));
+        return new CraftBlock(this, (getX() << 4) | (x & 0xF), y & 0xFF, (getZ() << 4) | (z & 0xF));
     }
 
     public Entity[] getEntities() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -78,7 +78,7 @@ public Chunk popPreservedChunk(int x, int z) {
     }
 
     public Block getBlockAt(int x, int y, int z) {
-        return getChunkAt(x >> 4, z >> 4).getBlock(x & 0xF, y & 0x7F, z & 0xF);
+        return getChunkAt(x >> 4, z >> 4).getBlock(x & 0xF, y & 0xFF, z & 0xF);
     }
 
     public int getBlockTypeIdAt(int x, int y, int z) {
@@ -224,7 +224,7 @@ public boolean refreshChunk(int x, int z) {
         for (int xx = px; xx < (px + 16); xx++) {
             world.notify(xx, 0, pz);
         }
-        world.notify(px, 127, pz + 15);
+        world.notify(px, 255, pz + 15);
 
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/PortalTravelAgent.java
Patch:
@@ -87,7 +87,7 @@ public Location findPortal(Location location) {
             for (int k1 = i1 - this.searchRadius; k1 <= i1 + this.searchRadius; ++k1) {
                 double d3 = (double) k1 + 0.5D - location.getZ();
 
-                for (int l1 = 127; l1 >= 0; --l1) {
+                for (int l1 = 255; l1 >= 0; --l1) {
                     if (world.getTypeId(j1, l1, k1) == Block.PORTAL.id) {
                         while (world.getTypeId(j1, l1 - 1, k1) == Block.PORTAL.id) {
                             --l1;
@@ -194,7 +194,7 @@ public boolean createPortal(Location location) {
                 d2 = (double) j2 + 0.5D - location.getZ();
 
                 label271:
-                for (l2 = 127; l2 >= 0; --l2) {
+                for (l2 = 255; l2 >= 0; --l2) {
                     if (world.isEmpty(i2, l2, j2)) {
                         while (l2 > 0 && world.isEmpty(i2, l2 - 1, j2)) {
                             --l2;
@@ -245,7 +245,7 @@ public boolean createPortal(Location location) {
                     d2 = (double) j2 + 0.5D - location.getZ();
 
                     label219:
-                    for (l2 = 127; l2 >= 0; --l2) {
+                    for (l2 = 255; l2 >= 0; --l2) {
                         if (world.isEmpty(i2, l2, j2)) {
                             while (l2 > 0 && world.isEmpty(i2, l2 - 1, j2)) {
                                 --l2;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
Patch:
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySnowman;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Snowman;
 
-public class CraftSnowman extends CraftCreature implements Snowman {
+public class CraftSnowman extends CraftGolem implements Snowman {
     public CraftSnowman(CraftServer server, EntitySnowman entity) {
         super(server, entity);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -18,11 +18,11 @@ public CraftInventoryCrafting(InventoryCrafting inventory, IInventory resultInve
     }
 
     public IInventory getResultInventory() {
-        return inventory;
+        return resultInventory;
     }
 
     public IInventory getMatrixInventory() {
-        return resultInventory;
+        return inventory;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
Patch:
@@ -1,14 +1,13 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Arrays;
-
 import net.minecraft.server.CraftingRecipe;
 import net.minecraft.server.IInventory;
 import net.minecraft.server.InventoryCrafting;
 
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
+import org.bukkit.util.Java15Compat;
 
 public class CraftInventoryCrafting extends CraftInventory implements CraftingInventory {
     private IInventory resultInventory;
@@ -38,7 +37,7 @@ public void setContents(ItemStack[] items) {
         if (len > items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + len + " or less");
         }
-        setContents(items[0], Arrays.copyOfRange(items, 1, items.length));
+        setContents(items[0], Java15Compat.Arrays_copyOfRange(items, 1, items.length));
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
Patch:
@@ -15,7 +15,7 @@ public class CraftShapelessRecipe extends ShapelessRecipe implements CraftRecipe
     public CraftShapelessRecipe(ItemStack result) {
         super(result);
     }
-    
+
     public CraftShapelessRecipe(ItemStack result, ShapelessRecipes recipe) {
         this(result);
         this.recipe = recipe;

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -134,7 +134,7 @@ public Plugin loadPlugin(File file) throws InvalidPluginException {
                 loader = loaders.get(description.getClassLoaderOf());
                 loader.addURL(urls[0]);
             } else {
-                loader = new PluginClassLoader(this, urls, getClass().getClassLoader(), server, description, dataFolder, file);
+                loader = new PluginClassLoader(this, urls, getClass().getClassLoader());
             }
 
             Class<?> jarClass = Class.forName(description.getMain(), true, loader);
@@ -143,6 +143,8 @@ public Plugin loadPlugin(File file) throws InvalidPluginException {
             Constructor<? extends JavaPlugin> constructor = plugin.getConstructor();
 
             result = constructor.newInstance();
+
+            result.initialize(this, server, description, dataFolder, file, loader);
         } catch (InvocationTargetException ex) {
             throw new InvalidPluginException(ex.getCause());
         } catch (Throwable ex) {

File: paper-api/src/main/java/org/bukkit/Effect.java
Patch:
@@ -64,7 +64,7 @@ public enum Effect {
      */
     SMOKE(2000, Type.VISUAL, BlockFace.class),
     /**
-     * Visual effect of a block breaking. Needs block ID as additional info.
+     * Sound of a block breaking. Needs block ID as additional info.
      */
     STEP_SOUND(2001, Type.SOUND, Material.class),
     /**

File: paper-api/src/main/java/org/bukkit/OfflinePlayer.java
Patch:
@@ -50,7 +50,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
 
     /**
      * Gets a {@link Player} object that this represents, if there is one
-     * <p>
+     * <p />
      * If the player is online, this will return that player. Otherwise,
      * it will return null.
      *
@@ -60,7 +60,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
 
     /**
      * Gets the first date and time that this player was witnessed on this server.
-     * <p>
+     * <p />
      * If the player has never played before, this will return 0. Otherwise, it will be
      * the amount of milliseconds since midnight, January 1, 1970 UTC.
      *
@@ -70,7 +70,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
 
     /**
      * Gets the last date and time that this player was witnessed on this server.
-     * <p>
+     * <p />
      * If the player has never played before, this will return 0. Otherwise, it will be
      * the amount of milliseconds since midnight, January 1, 1970 UTC.
      *

File: paper-api/src/main/java/org/bukkit/Server.java
Patch:
@@ -304,7 +304,7 @@ public interface Server extends PluginMessageRecipient {
 
     /**
      * Creates or loads a world with the given name using the specified options.
-     * <p>
+     * <p />
      * If the world is already loaded, it will just return the equivalent of
      * getWorld(creator.name()).
      *

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -430,7 +430,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Sets the relative in-game time on the server.
      * <p />
      * The relative time is analogous to hours * 1000
-     * <br /><br />
+     * <p />
      * Note that setting the relative time below the current relative time will
      * actually move the clock forward a day. If you require to rewind time, please
      * see setFullTime
@@ -450,7 +450,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
 
     /**
      * Sets the in-game time on the server
-     * <br /><br />
+     * <p />
      * Note that this sets the full time of the world, which may cause adverse
      * effects such as breaking redstone clocks and any scheduled events
      *

File: paper-api/src/main/java/org/bukkit/block/Dispenser.java
Patch:
@@ -6,8 +6,8 @@
 public interface Dispenser extends BlockState, ContainerBlock {
 
     /**
-     * Attempts to dispense the contents of this block<br />
-     * <br />
+     * Attempts to dispense the contents of this block
+     * <p />
      * If the block is no longer a dispenser, this will return false
      *
      * @return true if successful, otherwise false

File: paper-api/src/main/java/org/bukkit/block/NoteBlock.java
Patch:
@@ -37,8 +37,8 @@ public interface NoteBlock extends BlockState {
     public void setRawNote(byte note);
 
     /**
-     * Attempts to play the note at block<br />
-     * <br />
+     * Attempts to play the note at block
+     * <p />
      * If the block is no longer a note block, this will return false
      *
      * @return true if successful, otherwise false

File: paper-api/src/main/java/org/bukkit/configuration/MemorySection.java
Patch:
@@ -24,7 +24,7 @@ public class MemorySection implements ConfigurationSection {
 
     /**
      * Creates an empty MemorySection for use as a root {@link Configuration} section.
-     * <p>
+     * <p />
      * Note that calling this without being yourself a {@link Configuration} will throw an
      * exception!
      *
@@ -728,7 +728,7 @@ protected void mapChildrenValues(Map<String, Object> output, ConfigurationSectio
 
     /**
      * Creates a full path to the given {@link ConfigurationSection} from its root {@link Configuration}.
-     * <p>
+     * <p />
      * You may use this method for any given {@link ConfigurationSection}, not only {@link MemorySection}.
      *
      * @param section Section to create a path for.
@@ -741,7 +741,7 @@ public static String createPath(ConfigurationSection section, String key) {
 
     /**
      * Creates a relative path to the given {@link ConfigurationSection} from the given relative section.
-     * <p>
+     * <p />
      * You may use this method for any given {@link ConfigurationSection}, not only {@link MemorySection}.
      *
      * @param section Section to create a path for.

File: paper-api/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
Patch:
@@ -43,7 +43,7 @@ public YamlConfigurationOptions copyHeader(boolean value) {
 
     /**
      * Gets how much spaces should be used to indent each line.
-     * <p>
+     * <p />
      * The minimum value this may be is 2, and the maximum is 9.
      *
      * @return How much to indent by
@@ -54,7 +54,7 @@ public int indent() {
 
     /**
      * Sets how much spaces should be used to indent each line.
-     * <p>
+     * <p />
      * The minimum value this may be is 2, and the maximum is 9.
      *
      * @param value New indent

File: paper-api/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * Represents an object that may be serialized.
- * <p>
+ * <p />
  * These objects MUST implement one of the following, in addition to the methods
  * as defined by this interface:
  * <ul>
@@ -22,7 +22,7 @@
 public interface ConfigurationSerializable {
     /**
      * Creates a Map representation of this class.
-     * <p>
+     * <p />
      * This class must provide a method to restore this class, as defined in the
      * {@link ConfigurationSerializable} interface javadocs.
      *

File: paper-api/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
Patch:
@@ -9,10 +9,10 @@
  * Represents an "alias" that a {@link ConfigurationSerializable} may be stored as.
  * If this is not present on a {@link ConfigurationSerializable} class, it will use the
  * fully qualified name of the class.
- * <p>
+ * <p />
  * This value will be stored in the configuration so that the configuration deserialization
  * can determine what type it is.
- * <p>
+ * <p />
  * Using this annotation on any other class than a {@link ConfigurationSerializable} will
  * have no effect.
  * @see ConfigurationSerialization#registerClass(Class, String)
@@ -22,7 +22,7 @@
 public @interface SerializableAs {
     /**
      * This is the name your class will be stored and retrieved as.
-     * <p>
+     * <p />
      * This name MUST be unique. We recommend using names such as "MyPluginThing" instead of
      * "Thing".
      *

File: paper-api/src/main/java/org/bukkit/conversations/ConversationContext.java
Patch:
@@ -15,6 +15,7 @@ public class ConversationContext {
     private Plugin plugin;
 
     /**
+     * @param plugin The owning plugin.
      * @param forWhom The subject of the conversation.
      * @param initialSessionData Any initial values to put in the sessionData map.
      */

File: paper-api/src/main/java/org/bukkit/conversations/ConversationFactory.java
Patch:
@@ -29,6 +29,7 @@ public class ConversationFactory {
 
     /**
      * Constructs a ConversationFactory.
+     * @param plugin The plugin that owns the factory.
      */
     public ConversationFactory(Plugin plugin)
     {
@@ -178,7 +179,7 @@ public Conversation buildConversation(Conversable forWhom) {
         for (ConversationCanceller canceller : cancellers) {
             conversation.addConversationCanceller(canceller.clone());
         }
-        
+
         //Add the ConversationAbandonedListeners
         for (ConversationAbandonedListener listener : abandonedListeners) {
             conversation.addConversationAbandonedListener(listener);

File: paper-api/src/main/java/org/bukkit/conversations/MessagePrompt.java
Patch:
@@ -12,7 +12,7 @@ public MessagePrompt() {
     /**
      * Message prompts never wait for user input before continuing.
      * @param context Context information about the conversation.
-     * @return
+     * @return Always false.
      */
     public boolean blocksForInput(ConversationContext context) {
         return false;

File: paper-api/src/main/java/org/bukkit/enchantments/Enchantment.java
Patch:
@@ -203,7 +203,7 @@ public String toString() {
 
     /**
      * Registers an enchantment with the given ID and object.
-     * <p>
+     * <p />
      * Generally not to be used from within a plugin.
      *
      * @param enchantment Enchantment to register

File: paper-api/src/main/java/org/bukkit/entity/Entity.java
Patch:
@@ -203,7 +203,7 @@ public interface Entity extends Metadatable {
 
     /**
      * Gets the amount of ticks this entity has lived for.
-     * <p>
+     * <p />
      * This is the equivalent to "age" in entities.
      *
      * @return Age of entity
@@ -212,7 +212,7 @@ public interface Entity extends Metadatable {
 
     /**
      * Sets the amount of ticks this entity has lived for.
-     * <p>
+     * <p />
      * This is the equivalent to "age" in entities. May not be less than one tick.
      *
      * @param value Age of entity
@@ -221,7 +221,7 @@ public interface Entity extends Metadatable {
 
     /**
      * Performs the specified {@link EntityEffect} for this entity.
-     * <p>
+     * <p />
      * This will be viewable to all players near the entity.
      *
      * @param type Effect to play.

File: paper-api/src/main/java/org/bukkit/entity/LivingEntity.java
Patch:
@@ -213,7 +213,7 @@ public interface LivingEntity extends Entity {
 
     /**
      * Gets the player identified as the killer of this entity.
-     * <p>
+     * <p />
      * May be null.
      *
      * @return Killer player, or null if none found.

File: paper-api/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
Patch:
@@ -54,7 +54,7 @@ public Location getLocation() {
      * Gets the type of creature being spawned.
      *
      * @return A CreatureType value detailing the type of creature being spawned
-     * @deprecated In favour of {@link #getSpawnedType()}.
+     * @deprecated In favour of {@link #getEntityType()}.
      */
     @Deprecated
     public CreatureType getCreatureType() {

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
Patch:
@@ -30,7 +30,7 @@ public LivingEntity getEntity() {
 
     /**
      * Gets how much EXP should be dropped from this death.
-     * <p>
+     * <p />
      * This does not indicate how much EXP should be taken from the entity in question,
      * merely how much should be created after its death.
      *
@@ -42,7 +42,7 @@ public int getDroppedExp() {
 
     /**
      * Sets how much EXP should be dropped from this death.
-     * <p>
+     * <p />
      * This does not indicate how much EXP should be taken from the entity in question,
      * merely how much should be created after its death.
      *

File: paper-api/src/main/java/org/bukkit/inventory/Inventory.java
Patch:
@@ -27,7 +27,7 @@ public interface Inventory extends Iterable<ItemStack> {
 
     /**
      * This method allows you to change the maximum stack size for an inventory.
-     * <p><b>Caveats:</b>
+     * <p /><b>Caveats:</b>
      * <ul>
      * <li>Not all inventories respect this value.
      * <li>Stacks larger than 127 may be clipped when the world is saved.
@@ -205,7 +205,7 @@ public interface Inventory extends Iterable<ItemStack> {
     /**
      * Find the first empty Slot.
      *
-     * @return The first empty Slot found.
+     * @return The first empty Slot found, or -1 if no empty slots.
      */
     public int firstEmpty();
 

File: paper-api/src/main/java/org/bukkit/inventory/InventoryView.java
Patch:
@@ -88,7 +88,7 @@ public int getId() {
 
     /**
      * Sets one item in this inventory view by its raw slot ID.
-     * <p>
+     * <p />
      * Note: If slot ID -999 is chosen, it may be expected that the item is
      * dropped on the ground. This is not required behaviour, however.
      * @param slot The ID as returned by InventoryClickEvent.getRawSlot()

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -34,7 +34,7 @@ public interface Plugin extends CommandExecutor {
 
     /**
      * Gets a {@link FileConfiguration} for this plugin, read through "config.yml"
-     * <p>
+     * <p />
      * If there is a default config.yml embedded in this plugin, it will be provided
      * as a default for this Configuration.
      *

File: paper-api/src/main/java/org/bukkit/plugin/messaging/Messenger.java
Patch:
@@ -161,7 +161,7 @@ public interface Messenger {
 
     /**
      * Checks if the specified plugin message listener registration is valid.
-     * <p>
+     * <p />
      * A registration is considered valid if it has not be unregistered and that the plugin
      * is still enabled.
      *

File: paper-api/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
Patch:
@@ -8,7 +8,7 @@
  */
 public interface PluginMessageListener {
     /**
-     * A method that will be thrown when a {@link PluginMessageSource} sends a plugin
+     * A method that will be thrown when a PluginMessageSource sends a plugin
      * message on a registered channel.
      *
      * @param channel Channel that the message was sent through.

File: paper-api/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
Patch:
@@ -9,7 +9,7 @@
 public interface PluginMessageRecipient {
     /**
      * Sends this recipient a Plugin Message on the specified outgoing channel.
-     * <p>
+     * <p />
      * The message may not be larger than {@link Messenger#MAX_MESSAGE_SIZE} bytes, and the plugin must be registered to send
      * messages on the specified channel.
      *

File: paper-api/src/main/java/org/bukkit/potion/PotionEffectType.java
Patch:
@@ -202,7 +202,7 @@ public static PotionEffectType getByName(String name) {
 
     /**
      * Registers an effect type with the given object.
-     * <p>
+     * <p />
      * Generally not to be used from within a plugin.
      *
      * @param type PotionType to register

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -10,6 +10,7 @@
 import java.net.URL;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -49,7 +50,7 @@ public class JavaPluginLoader implements PluginLoader {
     private final Server server;
     protected final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
     protected final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
-    protected final Map<String, PluginClassLoader> loaders = new HashMap<String, PluginClassLoader>();
+    protected final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
 
     public JavaPluginLoader(Server instance) {
         server = instance;

File: paper-api/src/main/java/org/bukkit/configuration/MemorySection.java
Patch:
@@ -243,7 +243,7 @@ public ConfigurationSection createSection(String path) {
         for (int i = 0; i < split.length - 1; i++) {
             ConfigurationSection last = section;
 
-            section = getConfigurationSection(split[i]);
+            section = last.getConfigurationSection(split[i]);
 
             if (section == null) {
                 section = last.createSection(split[i]);

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -23,7 +23,7 @@ public enum Material {
     GRASS(2),
     DIRT(3),
     COBBLESTONE(4),
-    WOOD(5),
+    WOOD(5, Tree.class),
     SAPLING(6, Tree.class),
     BEDROCK(7),
     WATER(8, MaterialData.class),
@@ -42,7 +42,7 @@ public enum Material {
     LAPIS_ORE(21),
     LAPIS_BLOCK(22),
     DISPENSER(23, Dispenser.class),
-    SANDSTONE(24),
+    SANDSTONE(24, Sandstone.class),
     NOTE_BLOCK(25),
     BED_BLOCK(26, Bed.class),
     POWERED_RAIL(27, PoweredRail.class),

File: paper-api/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
Patch:
@@ -35,7 +35,8 @@ public SimpleAttachableMaterialData(Material type, byte data) {
     }
 
     public BlockFace getFacing() {
-        return getAttachedFace().getOppositeFace();
+        BlockFace attachedFace = getAttachedFace();
+        return attachedFace == null ? null : attachedFace.getOppositeFace();
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
Patch:
@@ -53,8 +53,7 @@ public void setDroppedExp(int exp) {
     }
 
     /**
-     * Gets all the items which will drop when the entity dies. Modifying this list will
-     * modify what's actually dropped.
+     * Gets all the items which will drop when the entity dies
      *
      * @return Items to drop when the entity dies
      */

File: paper-api/src/main/java/org/bukkit/ChatColor.java
Patch:
@@ -222,7 +222,7 @@ public static String getLastColors(String input) {
         int length = input.length();
 
         while ((lastIndex = input.indexOf(COLOR_CHAR, lastIndex + 1)) != -1) {
-            if (lastIndex != length) {
+            if (lastIndex < length - 1) {
                 char c = input.charAt(lastIndex + 1);
                 ChatColor col = getByChar(c);
 

File: paper-api/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
Patch:
@@ -127,7 +127,7 @@ public List<String> getSoftDepend() {
      * @return immutable list of plugins that should consider this plugin a soft-dependency
      */
     public List<String> getLoadBefore() {
-        return softDepend;
+        return loadBefore;
     }
 
     public PluginLoadOrder getLoad() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -97,7 +97,7 @@ public double getEyeHeight(boolean ignoreSneaking) {
             return 1.62D;
         } else {
             if (isSneaking()) {
-                return 1.42D;
+                return 1.54D;
             } else {
                 return 1.62D;
             }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
Patch:
@@ -167,7 +167,7 @@ public long getFirstPlayed() {
 
     public long getLastPlayed() {
         Player player = getPlayer();
-        if (player != null) return player.getFirstPlayed();
+        if (player != null) return player.getLastPlayed();
 
         NBTTagCompound data = getBukkitData();
 

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
Patch:
@@ -53,7 +53,8 @@ public void setDroppedExp(int exp) {
     }
 
     /**
-     * Gets all the items which will drop when the entity dies
+     * Gets all the items which will drop when the entity dies. Modifying this list will
+     * modify what's actually dropped.
      *
      * @return Items to drop when the entity dies
      */

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -20,11 +20,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     private Map<Enchantment, Integer> enchantments = new HashMap<Enchantment, Integer>();
 
     public ItemStack(final int type) {
-        this(type, 0);
+        this(type, 1);
     }
 
     public ItemStack(final Material type) {
-        this(type, 0);
+        this(type, 1);
     }
 
     public ItemStack(final int type, final int amount) {

File: paper-api/src/main/java/org/bukkit/help/HelpMap.java
Patch:
@@ -42,5 +42,5 @@ public interface HelpMap {
      * @param factory The {@link HelpTopicFactory} implementation to associate with the {@code commandClass}.
      * @throws IllegalArgumentException Thrown if {@code commandClass} does not derive from a legal base class.
      */
-    public void registerHelpTopicFactory(Class commandClass, HelpTopicFactory factory);
+    public void registerHelpTopicFactory(Class<?> commandClass, HelpTopicFactory<?> factory);
 }

File: paper-api/src/main/java/org/bukkit/material/LongGrass.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class LongGrass extends MaterialData {
     public LongGrass() {
-        super(Material.LOG);
+        super(Material.LONG_GRASS);
     }
 
     public LongGrass(GrassSpecies species) {

File: paper-api/src/main/java/org/bukkit/material/MonsterEggs.java
Patch:
@@ -18,7 +18,7 @@ public class MonsterEggs extends TexturedMaterial {
     }
 
     public MonsterEggs() {
-        super(Material.SMOOTH_BRICK);
+        super(Material.MONSTER_EGGS);
     }
 
     public MonsterEggs(final int type) {

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -45,7 +45,7 @@ public enum EntityType {
     MUSHROOM_COW("MushroomCow", MushroomCow.class, 96),
     SNOWMAN("SnowMan", Snowman.class, 97),
     OCELOT("Ozelot", Ocelot.class, 98),
-    IRON_GOLEM("VillagerGolem", IronGolem.class, 98),
+    IRON_GOLEM("VillagerGolem", IronGolem.class, 99),
     VILLAGER("Villager", Villager.class, 120),
     ENDER_CRYSTAL("EnderCrystal", EnderCrystal.class, 200),
     // These don't have an entity ID in nms.EntityTypes.

File: paper-api/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
Patch:
@@ -82,6 +82,7 @@ public synchronized boolean hasMetadata(T subject, String metadataKey) {
     public synchronized void removeMetadata(T subject, String metadataKey, Plugin owningPlugin) {
         String key = cachedDisambiguate(subject, metadataKey);
         List<MetadataValue> metadataList = metadataMap.get(key);
+        if (metadataList == null) return;
         for (int i = 0; i < metadataList.size(); i++) {
             if (metadataList.get(i).getOwningPlugin().equals(owningPlugin)) {
                 metadataList.remove(i);

File: paper-api/src/main/java/org/bukkit/command/defaults/HelpCommand.java
Patch:
@@ -46,7 +46,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             pageWidth = ChatPaginator.UNBOUNDED_PAGE_WIDTH;
         } else {
             pageHeight = ChatPaginator.CLOSED_CHAT_PAGE_HEIGHT - 1;
-            pageWidth = ChatPaginator.AVERAGE_CHAT_PAGE_WIDTH;
+            pageWidth = ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH;
         }
         
         HelpMap helpMap = Bukkit.getServer().getHelpMap();

File: paper-api/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
Patch:
@@ -48,7 +48,7 @@ public void run() {
                     startTimer();
                 } else if (conversation.getState() ==  Conversation.ConversationState.STARTED) {
                     cancelling(conversation);
-                    conversation.abandon();
+                    conversation.abandon(new ConversationAbandonedEvent(conversation, InactivityConversationCanceller.this));
                 }
             }
         }, timeoutSeconds * 20);

File: paper-api/src/main/java/org/bukkit/Effect.java
Patch:
@@ -52,7 +52,7 @@ public enum Effect {
      */
     ZOMBIE_CHEW_WOODEN_DOOR(1010, Type.SOUND),
     /**
-     * Sound of zombies chewing on wooden doors.
+     * Sound of zombies chewing on iron doors.
      */
     ZOMBIE_CHEW_IRON_DOOR(1011, Type.SOUND),
     /**

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -64,7 +64,7 @@ public ItemStack(final ItemStack stack) {
         if (stack.data != null) {
             this.data = stack.data.clone();
         }
-        enchantments.putAll(stack.enchantments);
+        this.addUnsafeEnchantments(stack.getEnchantments());
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/WorldType.java
Patch:
@@ -1,15 +1,15 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
+import java.util.Map;
 
 /**
  * Represents various types of worlds that may exist
  */
 public enum WorldType {
     NORMAL("DEFAULT"),
-    FLAT("FLAT");
+    FLAT("FLAT"),
+    VERSION_1_1("DEFAULT_1_1");
 
     private final static Map<String, WorldType> BY_NAME = Maps.newHashMap();
     private final String name;

File: paper-api/src/main/java/org/bukkit/Server.java
Patch:
@@ -286,7 +286,7 @@ public interface Server extends PluginMessageRecipient {
      * If the world is already loaded, it will just return the equivalent of
      * getWorld(creator.name()).
      *
-     * @param options Options to use when creating the world
+     * @param creator The options to use when creating the world.
      * @return Newly created or loaded world
      */
     public World createWorld(WorldCreator creator);

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -356,6 +356,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
     /**
      * Get a collection of all entities in this World matching the given class/interface
      *
+     * @param classes The classes representing the types of entity to match
      * @return A List of all Entities currently residing in this world that match the given class/interface
      */
     @Deprecated
@@ -364,13 +365,15 @@ public interface World extends PluginMessageRecipient, Metadatable {
     /**
      * Get a collection of all entities in this World matching the given class/interface
      *
+     * @param cls The class representing the type of entity to match
      * @return A List of all Entities currently residing in this world that match the given class/interface
      */
     public <T extends Entity> Collection<T> getEntitiesByClass(Class<T> cls);
 
     /**
      * Get a collection of all entities in this World matching any of the given classes/interfaces
      *
+     * @param classes The classes representing the types of entity to match
      * @return A List of all Entities currently residing in this world that match one or more of the given classes/interfaces
      */
     public Collection<Entity> getEntitiesByClasses(Class<?>... classes);

File: paper-api/src/main/java/org/bukkit/WorldCreator.java
Patch:
@@ -156,7 +156,7 @@ public ChunkGenerator generator() {
      * This may be null, in which case the "natural" generator for this environment
      * will be used.
      *
-     * @param env Chunk generator
+     * @param generator Chunk generator
      * @return This object, for chaining
      */
     public WorldCreator generator(ChunkGenerator generator) {
@@ -205,6 +205,7 @@ public WorldCreator generator(String generator, CommandSender output) {
     /**
      * Sets whether or not worlds created or loaded with this creator will have structures.
      *
+     * @param generate Whether to generate structures
      * @return This object, for chaining
      */
     public WorldCreator generateStructures(boolean generate) {

File: paper-api/src/main/java/org/bukkit/block/CreatureSpawner.java
Patch:
@@ -35,7 +35,7 @@ public interface CreatureSpawner extends BlockState {
      * Set the spawner creature type.
      *
      * @param creatureType The creature type.
-     * @deprecated In favour of {@link #setSpawnedType(EntityType}.
+     * @deprecated In favour of {@link #setSpawnedType(EntityType)}.
      */
     @Deprecated
     public void setCreatureType(CreatureType creatureType);

File: paper-api/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import org.bukkit.configuration.Configuration;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.BlockVector;
 import org.bukkit.util.Vector;

File: paper-api/src/main/java/org/bukkit/enchantments/Enchantment.java
Patch:
@@ -197,7 +197,6 @@ public String toString() {
      * <p>
      * Generally not to be used from within a plugin.
      *
-     * @param id ID of the enchantment
      * @param enchantment Enchantment to register
      */
     public static void registerEnchantment(Enchantment enchantment) {

File: paper-api/src/main/java/org/bukkit/entity/Boat.java
Patch:
@@ -23,7 +23,7 @@ public interface Boat extends Vehicle {
      * Gets the deceleration rate (newSpeed = curSpeed * rate) of occupied
      * boats. The default is 0.2.
      *
-     * @return
+     * @return The rate of deceleration
      */
     public double getOccupiedDeceleration();
 
@@ -32,7 +32,7 @@ public interface Boat extends Vehicle {
      * boats. Setting this to a higher value allows for quicker acceleration.
      * The default is 0.2.
      *
-     * @param speed deceleration rate
+     * @param rate deceleration rate
      */
     public void setOccupiedDeceleration(double rate);
 
@@ -41,7 +41,7 @@ public interface Boat extends Vehicle {
      * boats. The default is -1. Values below 0 indicate that no additional
      * deceleration is imposed.
      *
-     * @return
+     * @return The rate of deceleration
      */
     public double getUnoccupiedDeceleration();
 

File: paper-api/src/main/java/org/bukkit/entity/Entity.java
Patch:
@@ -57,7 +57,7 @@ public interface Entity extends Metadatable {
      * Teleports this entity to the given location
      *
      * @param location New location to teleport this entity to
-     * @praram cause The cause of this teleportation
+     * @param cause The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
     public boolean teleport(Location location, TeleportCause cause);
@@ -74,7 +74,7 @@ public interface Entity extends Metadatable {
      * Teleports this entity to the target Entity
      *
      * @param destination Entity to teleport this entity to
-     * @praram cause The cause of this teleportation
+     * @param cause The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
     public boolean teleport(Entity destination, TeleportCause cause);

File: paper-api/src/main/java/org/bukkit/entity/EntityType.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.bukkit.Location;
 import org.bukkit.World;
 
 public enum EntityType {
@@ -120,7 +121,8 @@ public static EntityType fromId(int id) {
     }
 
     /**
-     * Some entities cannot be spawned using {@link World#spawn(org.bukkit.Location, EntityType)}, usually
+     * Some entities cannot be spawned using {@link World#spawnCreature(Location, EntityType)}
+     * or {@link World#spawn(Location, Class)}, usually
      * because they require additional information in order to spawn.
      * @return False if the entity type cannot be spawned
      */

File: paper-api/src/main/java/org/bukkit/entity/LivingEntity.java
Patch:
@@ -252,6 +252,7 @@ public interface LivingEntity extends Entity {
      * effect of the given {@link PotionEffectType} applied to it.
      *
      * @param type The potion type to check
+     * @return Whether the player has this potion effect active on them.
      */
     public boolean hasPotionEffect(PotionEffectType type);
 

File: paper-api/src/main/java/org/bukkit/entity/ThrownPotion.java
Patch:
@@ -10,6 +10,7 @@
 public interface ThrownPotion extends Projectile {
     /**
      * Returns the effects that are applied by this potion.
+     * @return The potion effects
      */
     public Collection<PotionEffect> getEffects();
 }

File: paper-api/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
Patch:
@@ -39,7 +39,7 @@ public EnchantItemEvent(final Player enchanter, final InventoryView view, final
     /**
      * Gets the player enchanting the item
      *
-     * @returns enchanting player
+     * @return enchanting player
      */
     public Player getEnchanter() {
         return enchanter;

File: paper-api/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
Patch:
@@ -33,7 +33,7 @@ public PrepareItemEnchantEvent(final Player enchanter, InventoryView view, final
     /**
      * Gets the player enchanting the item
      *
-     * @returns enchanting player
+     * @return enchanting player
      */
     public Player getEnchanter() {
         return enchanter;

File: paper-api/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
Patch:
@@ -72,7 +72,7 @@ public int getNewExp() {
      * This does not indicate how much EXP should be dropped, please see
      * {@link #setDroppedExp(int)} for that.
      *
-     * @get exp New EXP of the respawned player
+     * @param exp New EXP of the respawned player
      */
     public void setNewExp(int exp) {
         newExp = exp;
@@ -90,7 +90,7 @@ public int getNewLevel() {
     /**
      * Sets the Level the Player should have at respawn.
      *
-     * @get level New Level of the respawned player
+     * @param level New Level of the respawned player
      */
     public void setNewLevel(int level) {
         newLevel = level;
@@ -108,7 +108,7 @@ public int getNewTotalExp() {
     /**
      * Sets the Total EXP the Player should have at respawn.
      *
-     * @get totalExp New Total EXP of the respawned player
+     * @param totalExp New Total EXP of the respawned player
      */
     public void setNewTotalExp(int totalExp) {
         newTotalExp = totalExp;

File: paper-api/src/main/java/org/bukkit/permissions/Permission.java
Patch:
@@ -203,6 +203,7 @@ public void addParent(Permission perm, boolean value) {
      * description: Short string containing a very small description of this description. If not specified, empty string.
      *
      * @param data Map of permissions
+     * @param error An error message to show if a permission is invalid.
      * @param def Default permission value to use if missing
      * @return Permission object
      */

File: paper-api/src/main/java/org/bukkit/plugin/InvalidPluginException.java
Patch:
@@ -35,7 +35,7 @@ public InvalidPluginException(final String message, final Throwable cause) {
     /**
      * Constructs a new InvalidPluginException with the specified detail message
      *
-     * @param the detail message. The detail message is saved for later retrieval by the getMessage() method.
+     * @param message TThe detail message is saved for later retrieval by the getMessage() method.
      */
     public InvalidPluginException(final String message) {
         super(message);

File: paper-api/src/main/java/org/bukkit/plugin/PluginManager.java
Patch:
@@ -92,7 +92,6 @@ public interface PluginManager {
      * Calls an event with the given details
      *
      * @param event Event details
-     * @return Called event
      */
     public void callEvent(Event event);
 

File: paper-api/src/main/java/org/bukkit/plugin/RegisteredListener.java
Patch:
@@ -51,6 +51,7 @@ public EventPriority getPriority() {
      * Calls the event executor
      *
      * @param event The event
+     * @throws EventException If an event handler throws an exception.
      */
     public void callEvent(final Event event) throws EventException {
         if (event instanceof Cancellable){

File: paper-api/src/main/java/org/bukkit/plugin/messaging/Messenger.java
Patch:
@@ -64,7 +64,7 @@ public interface Messenger {
      * @param plugin Plugin that wishes to register to this channel.
      * @param channel Channel to register.
      * @param listener Listener to receive messages on.
-     * @returns The resulting registration that was made as a result of this method.
+     * @return The resulting registration that was made as a result of this method.
      * @throws IllegalArgumentException Thrown if plugin, channel or listener is null, or the listener is already registered for this channel.
      */
     public PluginMessageListenerRegistration registerIncomingPluginChannel(Plugin plugin, String channel, PluginMessageListener listener);

File: paper-api/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
Patch:
@@ -17,6 +17,7 @@ public String getName() {
 
     /**
      * Get the potion type bound to this wrapper.
+     * @return The potion effect type
      */
     public PotionEffectType getType() {
         return PotionEffectType.getById(getId());

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -19,7 +19,7 @@
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.generator.ChunkGenerator;
-import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.PluginLogger;
@@ -34,7 +34,7 @@
 /**
  * Represents a Java plugin
  */
-public abstract class JavaPlugin extends Plugin {
+public abstract class JavaPlugin extends PluginBase {
     private boolean isEnabled = false;
     private boolean initialized = false;
     private PluginLoader loader = null;

File: paper-api/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.messaging.TestPlugin;
+import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 public class FixedMetadataValueTest {

File: paper-api/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.bukkit.metadata;
 
-import org.bukkit.plugin.messaging.TestPlugin;
+import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 import java.util.concurrent.Callable;

File: paper-api/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
Patch:
@@ -16,7 +16,7 @@
 package org.bukkit.metadata;
 
 import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.messaging.TestPlugin;
+import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: paper-api/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.Callable;
 
 import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.messaging.TestPlugin;
+import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 public class MetadataStoreTest {

File: paper-api/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.bukkit.plugin.messaging;
 
-import org.bukkit.plugin.messaging.ReservedChannelException;
+import org.bukkit.plugin.TestPlugin;
 import java.util.Collection;
 import org.junit.Test;
 import static org.junit.Assert.*;

File: paper-api/src/main/java/org/bukkit/plugin/PluginLogger.java
Patch:
@@ -11,7 +11,6 @@
  * The API for PluginLogger is exactly the same as {@link java.util.logging.Logger}.
  */
 public class PluginLogger extends Logger {
-
     private String pluginName;
 
     /**
@@ -20,7 +19,8 @@ public class PluginLogger extends Logger {
      */
     public PluginLogger(Plugin context) {
         super(context.getClass().getCanonicalName(), null);
-        pluginName = "[" + context.getDescription().getName() + "] ";
+        String prefix = context.getDescription().getPrefix();
+        pluginName = prefix != null ? new StringBuilder().append("[").append(prefix).append("] ").toString() : "[" + context.getDescription().getName() + "] ";
         setParent(context.getServer().getLogger());
         setLevel(Level.ALL);
     }

File: paper-api/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
Patch:
@@ -17,9 +17,9 @@ public PlayerPortalEvent(final Player player, final Location from, final Locatio
         super(player, from, to);
         this.travelAgent = pta;
     }
-    
+
     public PlayerPortalEvent(Player player, Location from, Location to, TravelAgent pta, TeleportCause cause) {
-        super(Type.PLAYER_PORTAL, player, from, to, cause);
+        super(player, from, to, cause);
         this.travelAgent = pta;
     }
 

File: paper-api/src/main/java/org/bukkit/World.java
Patch:
@@ -13,13 +13,14 @@
 import org.bukkit.entity.*;
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.metadata.Metadatable;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
 import org.bukkit.util.Vector;
 
 /**
  * Represents a world, which may contain entities, chunks and blocks
  */
-public interface World extends PluginMessageRecipient {
+public interface World extends PluginMessageRecipient, Metadatable {
 
     /**
      * Gets the {@link Block} at the given coordinates

File: paper-api/src/main/java/org/bukkit/block/Block.java
Patch:
@@ -7,14 +7,15 @@
 import org.bukkit.World;
 import org.bukkit.Location;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.metadata.Metadatable;
 
 /**
  * Represents a block. This is a live object, and only one Block may exist for
  * any given location in a world. The state of the block may change concurrently
  * to your own handling of it; use block.getState() to get a snapshot state of a
  * block which will not be modified.
  */
-public interface Block {
+public interface Block extends Metadatable {
 
     /**
      * Gets the metadata for this block

File: paper-api/src/main/java/org/bukkit/block/BlockState.java
Patch:
@@ -5,6 +5,7 @@
 import org.bukkit.Material;
 import org.bukkit.World;
 import org.bukkit.material.MaterialData;
+import org.bukkit.metadata.Metadatable;
 
 /**
  * Represents a captured state of a block, which will not change automatically.
@@ -14,7 +15,7 @@
  * the state of the block and you will not know, or they may change the block to
  * another type entirely, causing your BlockState to become invalid.
  */
-public interface BlockState {
+public interface BlockState extends Metadatable {
 
     /**
      * Gets the block represented by this BlockState

File: paper-api/src/main/java/org/bukkit/entity/Entity.java
Patch:
@@ -5,6 +5,7 @@
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.metadata.Metadatable;
 import org.bukkit.util.Vector;
 
 import java.util.List;
@@ -14,7 +15,7 @@
 /**
  * Represents a base entity in the world
  */
-public interface Entity {
+public interface Entity extends Metadatable {
 
     /**
      * Gets the entity's current position

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Represents a Java plugin
  */
-public abstract class JavaPlugin implements Plugin {
+public abstract class JavaPlugin extends Plugin {
     private boolean isEnabled = false;
     private boolean initialized = false;
     private PluginLoader loader = null;

File: paper-api/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
Patch:
@@ -11,8 +11,9 @@ public StandardMessenger getMessenger() {
         return new StandardMessenger();
     }
 
+    private int count = 0;
     public TestPlugin getPlugin() {
-        return new TestPlugin();
+        return new TestPlugin("" + count++);
     }
 
     @Test

File: paper-api/src/main/java/org/bukkit/map/MapPalette.java
Patch:
@@ -97,7 +97,7 @@ public static byte[] imageToBytes(Image image) {
 
         byte[] result = new byte[temp.getWidth() * temp.getHeight()];
         for (int i = 0; i < pixels.length; i++) {
-            result[i] = matchColor(new Color(pixels[i]));
+            result[i] = matchColor(new Color(pixels[i], true));
         }
         return result;
     }

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -398,7 +398,7 @@ public static ItemStack deserialize(Map<String, Object> args) {
                     Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
 
                     if ((enchantment != null) && (entry.getValue() instanceof Integer)) {
-                        result.addEnchantment(enchantment, (Integer) entry.getValue());
+                        result.addUnsafeEnchantment(enchantment, (Integer) entry.getValue());
                     }
                 }
             }

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -360,7 +360,7 @@ public static ItemStack deserialize(Map<String, Object> args) {
         int amount = 1;
 
         if (args.containsKey("damage")) {
-            damage = (Short) args.get("damage");
+            damage = ((Number) args.get("damage")).shortValue();
         }
 
         if (args.containsKey("amount")) {

File: paper-api/src/main/java/org/bukkit/event/Event.java
Patch:
@@ -16,7 +16,7 @@ protected Event() {
     }
 
     protected Event(final String name) {
-        Validate.notNull(name, "name is cannot be null");
+        Validate.notNull(name, "name cannot be null");
         this.name = name;
     }
 

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -211,7 +211,7 @@ public boolean equals(Object obj) {
     @Override
     public ItemStack clone() {
         ItemStack result = new ItemStack(type, amount, durability);
-        result.addEnchantments(getEnchantments());
+        result.addUnsafeEnchantments(getEnchantments());
 
         return result;
     }

File: paper-api/src/main/java/org/bukkit/entity/Player.java
Patch:
@@ -1,6 +1,7 @@
 package org.bukkit.entity;
 
 import java.net.InetSocketAddress;
+
 import org.bukkit.Achievement;
 import org.bukkit.ChatColor;
 import org.bukkit.Effect;

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -356,18 +356,18 @@ public Map<String, Object> serialize() {
 
     public static ItemStack deserialize(Map<String, Object> args) {
         Material type = Material.getMaterial((String) args.get("type"));
-        int damage = 0;
+        short damage = 0;
         int amount = 1;
 
         if (args.containsKey("damage")) {
-            damage = (Integer) args.get("damage");
+            damage = (Short) args.get("damage");
         }
 
         if (args.containsKey("amount")) {
             amount = (Integer) args.get("amount");
         }
 
-        ItemStack result = new ItemStack(type, amount, (short) damage);
+        ItemStack result = new ItemStack(type, amount, damage);
 
         if (args.containsKey("enchantments")) {
             Object raw = args.get("enchantments");

File: paper-api/src/main/java/org/bukkit/Server.java
Patch:
@@ -442,7 +442,7 @@ public interface Server extends PluginMessageRecipient {
     public boolean getAllowFlight();
 
     /**
-     * Gets whether to use vanilla (false) or exact behaviour (false).
+     * Gets whether to use vanilla (false) or exact behaviour (true).
      *
      * Vanilla behaviour: check for collisions and move the player if needed.
      * Exact behaviour: spawn players exactly where they should be.

File: paper-api/src/main/java/org/bukkit/event/CustomEventListener.java
Patch:
@@ -1,7 +1,5 @@
 package org.bukkit.event;
 
-import org.bukkit.event.Listener;
-
 /**
  * Handles all custom events
  */

File: paper-api/src/main/java/org/bukkit/plugin/PluginLoader.java
Patch:
@@ -52,6 +52,7 @@ public interface PluginLoader {
      * @param type Type of the event executor to create
      * @param listener the object that will handle the eventual call back
      * @return The new executor
+     * @deprecated see PluginLoader#createRegisteredListeners
      */
     @Deprecated
     public EventExecutor createExecutor(Event.Type type, Listener listener);

File: paper-api/src/main/java/org/bukkit/plugin/PluginManager.java
Patch:
@@ -103,6 +103,7 @@ public interface PluginManager {
      * @param listener Listener to register
      * @param priority Priority of this event
      * @param plugin Plugin to register
+     * @deprecated see PluginManager#registerEvents
      */
     @Deprecated
     public void registerEvent(Event.Type type, Listener listener, Priority priority, Plugin plugin);
@@ -115,6 +116,7 @@ public interface PluginManager {
      * @param executor EventExecutor to register
      * @param priority Priority of this event
      * @param plugin Plugin to register
+     * @deprecated see PluginManager#registerEvent(Class, Listener, EventPriority, EventExecutor, Plugin)
      */
     @Deprecated
     public void registerEvent(Event.Type type, Listener listener, EventExecutor executor, Priority priority, Plugin plugin);

File: paper-api/src/main/java/org/bukkit/event/EventHandler.java
Patch:
@@ -11,5 +11,5 @@
 
     Class<? extends Event> event();
 
-    EventPriority priority();
+    EventPriority priority() default EventPriority.NORMAL;
 }

File: paper-api/src/main/java/org/bukkit/event/HandlerList.java
Patch:
@@ -50,7 +50,9 @@ public static void bakeAll() {
 
     public static void unregisterAll() {
         for (HandlerList h : alllists) {
-            h.handlerslots.clear();
+            for (List<RegisteredListener> list : h.handlerslots.values()) {
+                list.clear();
+            }
             h.baked = false;
         }
     }

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -471,7 +471,7 @@ private Class<? extends Event> getRegistrationClass(Class<? extends Event> clazz
         } catch (NoSuchMethodException e) {
             if (clazz.getSuperclass() != null
                     && !clazz.getSuperclass().equals(Event.class)
-                    && clazz.getSuperclass().isAssignableFrom(Event.class)) {
+                    && Event.class.isAssignableFrom(clazz.getSuperclass())) {
                 return getRegistrationClass(clazz.getSuperclass().asSubclass(Event.class));
             } else {
                 throw new IllegalPluginAccessException("Unable to find handler list for event " + clazz.getName());

File: paper-api/src/main/java/org/bukkit/ChatColor.java
Patch:
@@ -11,7 +11,7 @@ public enum ChatColor {
     /**
      * Represents black
      */
-    BLACK('0', 0x01),
+    BLACK('0', 0x00),
     /**
      * Represents dark blue
      */

File: paper-api/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.BlockVector;
 import org.bukkit.util.Vector;
 
@@ -21,6 +22,7 @@ public class ConfigurationSerialization {
     static {
         registerClass(Vector.class);
         registerClass(BlockVector.class);
+        registerClass(ItemStack.class);
     }
 
     protected ConfigurationSerialization(Class<? extends ConfigurationSerializable> clazz) {
@@ -250,4 +252,4 @@ public static String getAlias(Class<? extends ConfigurationSerializable> clazz)
 
         return clazz.getName();
     }
-}
\ No newline at end of file
+}

File: paper-api/src/main/java/org/bukkit/event/Event.java
Patch:
@@ -597,7 +597,7 @@ public enum Type {
         /**
          * Called when an organic structure attempts to grow (Sapling -> Tree), (Mushroom -> Huge Mushroom), naturally or using bonemeal.
          *
-         * @see org.bukkit.event.world.TreeGrowEvent
+         * @see org.bukkit.event.world.StructureGrowEvent
          */
         STRUCTURE_GROW(Category.WORLD),
         /**

File: paper-api/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.junit.Test;
 import static org.junit.Assert.*;
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.matchers.JUnitMatchers.*;
 
 public class StandardMessengerTest {
     public StandardMessenger getMessenger() {

File: paper-api/src/main/java/org/bukkit/material/Leaves.java
Patch:
@@ -38,7 +38,7 @@ public Leaves(final Material type, final byte data) {
      * @return TreeSpecies of this leave
      */
     public TreeSpecies getSpecies() {
-        return TreeSpecies.getByData(getData());
+        return TreeSpecies.getByData((byte) (getData() & 3));
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -383,7 +383,7 @@ public void registerEvent(Event.Type type, Listener listener, Priority priority,
             throw new IllegalArgumentException("Priority cannot be null");
         }
         if (plugin == null) {
-            throw new IllegalArgumentException("Priority cannot be null");
+            throw new IllegalArgumentException("Plugin cannot be null");
         }
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + type + " while not enabled");
@@ -412,7 +412,7 @@ public void registerEvent(Event.Type type, Listener listener, EventExecutor exec
             throw new IllegalArgumentException("Priority cannot be null");
         }
         if (plugin == null) {
-            throw new IllegalArgumentException("Priority cannot be null");
+            throw new IllegalArgumentException("Plugin cannot be null");
         }
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + type + " while not enabled");

File: paper-api/src/main/java/org/bukkit/WorldType.java
Patch:
@@ -7,8 +7,8 @@
  * Represents various types of worlds that may exist
  */
 public enum WorldType {
-    NORMAL("normal"),
-    FLAT("flat");
+    NORMAL("DEFAULT"),
+    FLAT("FLAT");
 
     private final static Map<String, WorldType> lookup = new HashMap<String, WorldType>();
     private final String name;

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -263,6 +263,7 @@ public enum Material {
     CAULDRON_ITEM(380),
     EYE_OF_ENDER(381),
     SPECKLED_MELON(382),
+    MONSTER_EGG(383, 1),
     GOLD_RECORD(2256, 1),
     GREEN_RECORD(2257, 1),
     RECORD_3(2258, 1),

File: paper-api/src/main/java/org/bukkit/Location.java
Patch:
@@ -373,8 +373,10 @@ public double distance(Location o) {
      */
     public double distanceSquared(Location o) {
         if (o == null) {
+            throw new IllegalArgumentException("Cannot measure distance to a null location");
+        } else if (o.getWorld() == null || getWorld() == null) {
             throw new IllegalArgumentException("Cannot measure distance to a null world");
-        } else if (o == null || o.getWorld() != getWorld()) {
+        } else if (o.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot measure distance between " + getWorld().getName() + " and " + o.getWorld().getName());
         }
 

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -122,8 +122,9 @@ public void setAmount(int amount) {
      * @return MaterialData for this item
      */
     public MaterialData getData() {
-        if (Material.getMaterial(getTypeId()).getData() != null) {
-            data = Material.getMaterial(getTypeId()).getNewData((byte) this.durability);
+        Material mat = Material.getMaterial(getTypeId());
+        if (mat != null && mat.getData() != null) {
+            data = mat.getNewData((byte) this.durability);
         }
 
         return data;

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -42,6 +42,7 @@ public class SimpleCommandMap implements CommandMap {
         fallbackCommands.add(new HelpCommand());
         fallbackCommands.add(new ExpCommand());
         fallbackCommands.add(new ToggleDownfallCommand());
+        fallbackCommands.add(new BanListCommand());
     }
 
     public SimpleCommandMap(final Server server) {

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -139,7 +139,7 @@ public void reloadConfig() {
 
     public void saveConfig() {
         try {
-            newConfig.save(configFile);
+            getConfig().save(configFile);
         } catch (IOException ex) {
             Logger.getLogger(JavaPlugin.class.getName()).log(Level.SEVERE, "Could not save config to " + configFile, ex);
         }

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -253,7 +253,7 @@ public enum Material {
     GHAST_TEAR(370),
     GOLD_NUGGET(371),
     NETHER_STALK(372),
-    POTION(373),
+    POTION(373, 1),
     GLASS_BOTTLE(374),
     SPIDER_EYE(375),
     FERMENTED_SPIDER_EYE(376),

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -248,7 +248,7 @@ public enum Material {
     RAW_CHICKEN(365),
     COOKED_CHICKEN(366),
     ROTTEN_FLESH(367),
-    ENDER_PEARL(368),
+    ENDER_PEARL(368, 16),
     BLAZE_ROD(369),
     GHAST_TEAR(370),
     GOLD_NUGGET(371),

File: paper-api/src/main/java/org/bukkit/entity/CreatureType.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Map;
 
 public enum CreatureType {
+    // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
     CHICKEN("Chicken", Chicken.class),
     COW("Cow", Cow.class),
     CREEPER("Creeper", Creeper.class),
@@ -27,8 +28,8 @@ public enum CreatureType {
     VILLAGER("Villager", Villager.class),
     BLAZE("Blaze", Blaze.class),
     MUSHROOM_COW("MushroomCow", MushroomCow.class),
-    MAGMA_CUBE("MagmaCube", MagmaCube.class),
-    SNOWMAN("Snowman", Snowman.class);
+    MAGMA_CUBE("LavaSlime", MagmaCube.class),
+    SNOWMAN("SnowMan", Snowman.class);
 
     private String name;
     private Class<? extends Entity> clazz;

File: paper-api/src/main/java/org/bukkit/configuration/MemorySection.java
Patch:
@@ -289,7 +289,7 @@ public String getString(String path) {
         }
 
         Object def = getDefault(path);
-        return getString(path, (def instanceof String) ? (String)def : null);
+        return getString(path, def != null ? def.toString() : null);
     }
 
     public String getString(String path, String def) {
@@ -298,7 +298,7 @@ public String getString(String path, String def) {
         }
 
         Object val = get(path, def);
-        return (val instanceof String) ? (String)val : def;
+        return (val != null) ? val.toString() : def;
     }
 
     public boolean isString(String path) {

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -132,7 +132,7 @@ public enum Material {
     BREWING_STAND(117),
     CAULDRON(118),
     ENDER_PORTAL(119),
-    ENTER_PORTAL_FRAME(120),
+    ENDER_PORTAL_FRAME(120),
     ENDER_STONE(121),
     DRAGON_EGG(122),
     // ----- Item Separator -----

File: paper-api/src/main/java/org/bukkit/entity/CreatureType.java
Patch:
@@ -27,6 +27,7 @@ public enum CreatureType {
     VILLAGER("Villager", Villager.class),
     BLAZE("Blaze", Blaze.class),
     MUSHROOM_COW("MushroomCow", MushroomCow.class),
+    MAGMA_CUBE("MagmaCube", MagmaCube.class),
     SNOWMAN("Snowman", Snowman.class);
 
     private String name;

File: paper-api/src/main/java/org/bukkit/entity/CreatureType.java
Patch:
@@ -26,7 +26,8 @@ public enum CreatureType {
     ENDER_DRAGON("EnderDragon", EnderDragon.class),
     VILLAGER("Villager", Villager.class),
     BLAZE("Blaze", Blaze.class),
-    MUSHROOM_COW("MushroomCow", MushroomCow.class);
+    MUSHROOM_COW("MushroomCow", MushroomCow.class),
+    SNOWMAN("Snowman", Snowman.class);
 
     private String name;
     private Class<? extends Entity> clazz;

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -141,7 +141,7 @@ public enum Material {
     IRON_AXE(258, 1, 250),
     FLINT_AND_STEEL(259, 1, 64),
     APPLE(260),
-    BOW(261, 1),
+    BOW(261, 1, 384),
     ARROW(262),
     COAL(263, Coal.class),
     DIAMOND(264),

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -258,7 +258,7 @@ public Map<Enchantment, Integer> getEnchantments() {
      * @param enchantments Enchantments to add
      */
     public void addEnchantments(Map<Enchantment, Integer> enchantments) {
-        for (Map.Entry<Enchantment, Integer> entry : getEnchantments().entrySet()) {
+        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
             addEnchantment(entry.getKey(), entry.getValue());
         }
     }
@@ -290,7 +290,7 @@ public void addEnchantment(Enchantment ench, int level) {
      * @param enchantments Enchantments to add
      */
     public void addUnsafeEnchantments(Map<Enchantment, Integer> enchantments) {
-        for (Map.Entry<Enchantment, Integer> entry : getEnchantments().entrySet()) {
+        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
             addUnsafeEnchantment(entry.getKey(), entry.getValue());
         }
     }

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -127,7 +127,7 @@ public enum Material {
     NETHER_BRICK(112),
     NETHER_FENCE(113),
     NETHER_BRICK_STAIRS(114),
-    NETHER_WATER(115),
+    NETHER_WARTS(115),
     ENCHANTMENT_TABLE(116),
     BREWING_STAND(117),
     CAULDRON(118),

File: paper-api/src/main/java/org/bukkit/permissions/PermissibleBase.java
Patch:
@@ -76,7 +76,7 @@ public boolean hasPermission(String inName) {
             if (perm != null) {
                 return perm.getDefault().getValue(isOp());
             } else {
-                return false;
+                return Permission.DEFAULT_PERMISSION.getValue(isOp());
             }
         }
     }

File: paper-api/src/main/java/org/bukkit/permissions/PermissionAttachment.java
Patch:
@@ -1,16 +1,16 @@
 
 package org.bukkit.permissions;
 
+import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.TreeMap;
 import org.bukkit.plugin.Plugin;
 
 /**
  * Holds information about a permission attachment on a {@link Permissible} object
  */
 public class PermissionAttachment {
     private PermissionRemovedExecutor removed;
-    private final TreeMap<String, Boolean> permissions = new TreeMap<String, Boolean>();
+    private final Map<String, Boolean> permissions = new LinkedHashMap<String, Boolean>();
     private final Permissible permissible;
     private final Plugin plugin;
 
@@ -69,7 +69,7 @@ public Permissible getPermissible() {
      * @return Copy of all permissions and values expressed by this attachment
      */
     public Map<String, Boolean> getPermissions() {
-        return (Map<String, Boolean>)permissions.clone();
+        return new LinkedHashMap<String, Boolean>(permissions);
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/command/defaults/MeCommand.java
Patch:
@@ -23,8 +23,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
         StringBuilder message = new StringBuilder();
         message.append(sender.getName());
         if (args.length > 0) {
-	        message.append(args[0]);
-	        for (int i = 1; i < args.length; i++) {
+	        for (int i = 0; i < args.length; i++) {
 	            message.append(" ");
 	            message.append(args[i]);
 	        }

File: paper-api/src/main/java/org/bukkit/ChatColor.java
Patch:
@@ -115,7 +115,7 @@ public static String stripColor(final String input) {
             return null;
         }
 
-        return input.replaceAll("(?i)\u00A7[0-F]", "");
+        return input.replaceAll("(?i)\u00A7[0-9A-F]", "");
     }
 
     static {

File: paper-api/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.bukkit.configuration;
 
 import org.bukkit.Material;
-import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -22,9 +21,10 @@ public void testGetKeys() {
         section.set("subsection.subkey2", true);
         section.set("subsection.subsubsection.key", true);
         section.set("key2", true);
+        section.set("42", true);
 
-        assertArrayEquals(new String[] {"key", "subsection", "key2"}, section.getKeys(false).toArray());
-        assertArrayEquals(new String[] {"key", "subsection", "subsection.subkey", "subsection.subkey2", "subsection.subsubsection", "subsection.subsubsection.key", "key2"}, section.getKeys(true).toArray());
+        assertArrayEquals(new String[] {"key", "subsection", "key2", "42"}, section.getKeys(false).toArray());
+        assertArrayEquals(new String[] {"key", "subsection", "subsection.subkey", "subsection.subkey2", "subsection.subsubsection", "subsection.subsubsection.key", "key2", "42"}, section.getKeys(true).toArray());
         assertArrayEquals(new String[] {"subkey", "subkey2", "subsubsection", "subsubsection.key"}, section.getConfigurationSection("subsection").getKeys(true).toArray());
     }
 

File: paper-api/src/test/java/org/bukkit/configuration/ConfigurationTest.java
Patch:
@@ -22,6 +22,7 @@ public Map<String, Object> getTestValues() {
         result.put("false-boolean", false);
         result.put("vector", new Vector(12345.67, 64, -12345.6789));
         result.put("list", Arrays.asList(1, 2, 3, 4, 5));
+        result.put("42", "The Answer");
 
         return result;
     }

File: paper-api/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
Patch:
@@ -36,7 +36,8 @@ public String getTestValuesString() {
             "- 2\n" + 
             "- 3\n" + 
             "- 4\n" + 
-            "- 5\n";
+            "- 5\n" +
+            "'42': The Answer\n";
     }
 
     @Test

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -242,7 +242,7 @@ public void setClass(final String name, final Class<?> clazz) {
     public void removeClass(String name) {
         Class<?> clazz = classes.remove(name);
         
-        if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
+        if ((clazz != null) && (ConfigurationSerializable.class.isAssignableFrom(clazz))) {
             Class<? extends ConfigurationSerializable> serializable = (Class<? extends ConfigurationSerializable>)clazz;
             ConfigurationSerialization.unregisterClass(serializable);
         }

File: paper-api/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
Patch:
@@ -5,13 +5,14 @@
 import java.util.List;
 
 import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
 
 public class BlockPistonExtendEvent extends BlockPistonEvent {
     private int length;
     private List<Block> blocks;
 
-    public BlockPistonExtendEvent(Block block, int length) {
-        super(Type.BLOCK_PISTON_EXTEND, block);
+    public BlockPistonExtendEvent(Block block, int length, BlockFace direction) {
+        super(Type.BLOCK_PISTON_EXTEND, block, direction);
 
         this.length = length;
     }

File: paper-api/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
Patch:
@@ -2,10 +2,11 @@
 
 import org.bukkit.Location;
 import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
 
 public class BlockPistonRetractEvent extends BlockPistonEvent {
-    public BlockPistonRetractEvent(Block block) {
-        super(Type.BLOCK_PISTON_RETRACT, block);
+    public BlockPistonRetractEvent(Block block, BlockFace direction) {
+        super(Type.BLOCK_PISTON_RETRACT, block, direction);
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -306,7 +306,7 @@ public short getMaxDurability() {
      * @return MaterialData associated with this Material
      */
     public Class<? extends MaterialData> getData() {
-        return data;
+        return (data == null) ? MaterialData.class : data;
     }
 
     /**
@@ -318,7 +318,7 @@ public Class<? extends MaterialData> getData() {
      */
     public MaterialData getNewData(final byte raw) {
         if (data == null) {
-            return null;
+            return new MaterialData(id, raw);
         }
 
         try {

File: paper-api/src/main/java/org/bukkit/ChatColor.java
Patch:
@@ -98,7 +98,7 @@ public String toString() {
      * Gets the color represented by the specified color code
      *
      * @param code Code to check
-     * @return Associative {@link Color} with the given code, or null if it doesn't exist
+     * @return Associative {@link org.bukkit.ChatColor} with the given code, or null if it doesn't exist
      */
     public static ChatColor getByCode(final int code) {
         return colors.get(code);

File: paper-api/src/main/java/org/bukkit/block/BlockState.java
Patch:
@@ -103,6 +103,7 @@ public interface BlockState {
      * Sets the type-id of this block
      *
      * @param type Type-Id to change this block to
+     * @return Whether it worked?
      */
     boolean setTypeId(int type);
 
@@ -116,7 +117,7 @@ public interface BlockState {
      * eventuality.
      *
      * @return true if the update was successful, otherwise false
-     * @see BlockState.update(boolean force)
+     * @see #update(boolean)
      */
     boolean update();
 

File: paper-api/src/main/java/org/bukkit/block/ContainerBlock.java
Patch:
@@ -12,7 +12,7 @@ public interface ContainerBlock {
     /**
      * Get the block's inventory.
      *
-     * @return
+     * @return The inventory.
      */
     public Inventory getInventory();
 }

File: paper-api/src/main/java/org/bukkit/block/Sign.java
Patch:
@@ -31,7 +31,7 @@ public interface Sign extends BlockState {
      *
      * @param index Line number to set the text at, starting from 0
      * @param line New text to set at the specified index
-     * @throws IndexOutOfBoundsException
+     * @throws IndexOutOfBoundsException If the index is out of the range 0..3
      */
     public void setLine(int index, String line) throws IndexOutOfBoundsException;
 }

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -104,6 +104,7 @@ public String getLabel() {
      * If the command is currently registered the label change will only take effect after
      * its been reregistered e.g. after a /reload
      *
+     * @param name The command's name
      * @return returns true if the name change happened instantly or false if it was scheduled for reregistration
      */
     public boolean setLabel(String name) {

File: paper-api/src/main/java/org/bukkit/command/CommandMap.java
Patch:
@@ -43,8 +43,9 @@ public interface CommandMap {
     /**
      * Looks for the requested command and executes it if found.
      *
+     * @param sender The command's sender
      * @param cmdLine command + arguments. Example: "/test abc 123"
-     * @return targetFound returns false if no target is found, true otherwise.
+     * @return returns false if no target is found, true otherwise.
      * @throws CommandException Thrown when the executor for the given command fails with an unhandled exception
      */
     public boolean dispatch(CommandSender sender, String cmdLine) throws CommandException;

File: paper-api/src/main/java/org/bukkit/command/PluginCommand.java
Patch:
@@ -24,6 +24,7 @@ protected PluginCommand(String name, Plugin owner) {
      * @param args All arguments passed to the command, split via ' '
      * @return true if the command was successful, otherwise false
      */
+    @Override
     public boolean execute(CommandSender sender, String commandLabel, String[] args) {
         boolean success = false;
 

File: paper-api/src/main/java/org/bukkit/entity/Boat.java
Patch:
@@ -10,14 +10,14 @@ public interface Boat extends Vehicle {
     /**
      * Gets the maximum speed of a boat. The speed is unrelated to the velocity.
      *
-     * @param speed
+     * @return The max speed.
      */
     public double getMaxSpeed();
 
     /**
      * Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.
      *
-     * @param speed
+     * @param speed The max speed.
      */
     public void setMaxSpeed(double speed);
 }

File: paper-api/src/main/java/org/bukkit/entity/Explosive.java
Patch:
@@ -6,7 +6,7 @@
 public interface Explosive extends Entity {
     /**
      * Set the radius affected by this explosive's explosion
-     * @param yield
+     * @param yield The explosive yield
      */
     public void setYield(float yield);
 
@@ -18,7 +18,7 @@ public interface Explosive extends Entity {
 
     /**
      * Set whether or not this explosive's explosion causes fire
-     * @param isIncendiary
+     * @param isIncendiary Whether it should cause fire
      */
     public void setIsIncendiary(boolean isIncendiary);
 

File: paper-api/src/main/java/org/bukkit/entity/HumanEntity.java
Patch:
@@ -36,7 +36,6 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible {
      * user was holding.
      *
      * @param item The ItemStack which will end up in the hand
-     * @return
      */
     public void setItemInHand(ItemStack item);
 

File: paper-api/src/main/java/org/bukkit/entity/Item.java
Patch:
@@ -13,14 +13,14 @@ public interface Item extends Entity {
     /**
      * Gets the item stack associated with this item drop.
      *
-     * @return
+     * @return An item stack.
      */
     public ItemStack getItemStack();
 
     /**
      * Sets the item stack associated with this item drop.
      *
-     * @param stack
+     * @param stack An item stack.
      */
     public void setItemStack(ItemStack stack);
 }

File: paper-api/src/main/java/org/bukkit/entity/Projectile.java
Patch:
@@ -1,5 +1,7 @@
 package org.bukkit.entity;
 
+import org.bukkit.block.Dispenser;
+
 /**
  * Represents a shootable entity
  */

File: paper-api/src/main/java/org/bukkit/entity/TNTPrimed.java
Patch:
@@ -6,7 +6,7 @@
 public interface TNTPrimed extends Explosive {
     /**
      * Set the number of ticks until the TNT blows up after being primed.
-     * @param fuseTicks
+     * @param fuseTicks The fuse ticks
      */
     public void setFuseTicks(int fuseTicks);
 

File: paper-api/src/main/java/org/bukkit/event/EventException.java
Patch:
@@ -22,6 +22,8 @@ public EventException() {
 
     /**
      * Constructs a new EventException with the given message
+     * @param cause The exception that caused this
+     * @param message The message
      */
     public EventException(Throwable cause, String message) {
         super(message);
@@ -30,6 +32,7 @@ public EventException(Throwable cause, String message) {
 
     /**
      * Constructs a new EventException with the given message
+     * @param message The message
      */
     public EventException(String message) {
         super(message);

File: paper-api/src/main/java/org/bukkit/event/block/BlockFormEvent.java
Patch:
@@ -11,7 +11,7 @@
  * Examples:
  *<ul>
  *     <li>Snow forming due to a snow storm.</li>
- *     <li>Ice forming in a snowy Biome like Tiga or Tundra.</li>
+ *     <li>Ice forming in a snowy Biome like Taiga or Tundra.</li>
  * </ul>
  *<p />
  * If a Block Form event is cancelled, the block will not be formed.

File: paper-api/src/main/java/org/bukkit/event/block/BlockListener.java
Patch:
@@ -1,7 +1,6 @@
 package org.bukkit.event.block;
 
 import org.bukkit.event.Listener;
-import org.bukkit.plugin.AuthorNagException;
 
 /**
  * Handles all events thrown in relation to Blocks

File: paper-api/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
Patch:
@@ -11,20 +11,17 @@
 public class CreeperPowerEvent extends EntityEvent implements Cancellable {
 
     private boolean canceled;
-    private Entity creeper;
     private PowerCause cause;
     private Entity bolt;
 
     public CreeperPowerEvent(Entity creeper, Entity bolt, PowerCause cause) {
         super(Type.CREEPER_POWER, creeper);
-        this.creeper = creeper;
         this.bolt = bolt;
         this.cause = cause;
     }
 
     public CreeperPowerEvent(Entity creeper, PowerCause cause) {
         super(Type.CREEPER_POWER, creeper);
-        this.creeper = creeper;
         this.cause = cause;
         this.bolt = null;
     }

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
Patch:
@@ -2,12 +2,11 @@
 
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
-import org.bukkit.event.Cancellable;
 
 /**
  * Called when an entity is damaged by a block
  */
-public class EntityDamageByBlockEvent extends EntityDamageEvent implements Cancellable {
+public class EntityDamageByBlockEvent extends EntityDamageEvent {
 
     private Block damager;
 

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
Patch:
@@ -1,12 +1,11 @@
 package org.bukkit.event.entity;
 
 import org.bukkit.entity.Entity;
-import org.bukkit.event.Cancellable;
 
 /**
  * Called when an entity is damaged by an entity
  */
-public class EntityDamageByEntityEvent extends EntityDamageEvent implements Cancellable {
+public class EntityDamageByEntityEvent extends EntityDamageEvent {
 
     private Entity damager;
 

File: paper-api/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
Patch:
@@ -3,7 +3,6 @@
 
 import org.bukkit.entity.Entity;
 import org.bukkit.Location;
-import org.bukkit.event.Cancellable;
 
 /**
  * Stores data for entities standing inside a portal block

File: paper-api/src/main/java/org/bukkit/event/entity/PigZapEvent.java
Patch:
@@ -9,13 +9,11 @@
 public class PigZapEvent extends EntityEvent implements Cancellable {
 
     private boolean canceled;
-    private Entity pig;
     private Entity pigzombie;
     private Entity bolt;
 
     public PigZapEvent(Entity pig, Entity bolt, Entity pigzombie) {
         super(Type.PIG_ZAP, pig);
-        this.pig = pig;
         this.bolt = bolt;
         this.pigzombie = pigzombie;
     }

File: paper-api/src/main/java/org/bukkit/event/painting/PaintingBreakEvent.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.event.painting;
 
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.Painting;
 import org.bukkit.event.Cancellable;
 

File: paper-api/src/main/java/org/bukkit/event/painting/PaintingPlaceEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.Painting;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;

File: paper-api/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
Patch:
@@ -87,7 +87,7 @@ public String getName() {
     /**
      * Gets the player IP address.
      *
-     * @return
+     * @return The IP address
      */
     public InetAddress getAddress() {
         return ipAddress;

File: paper-api/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
Patch:
@@ -35,6 +35,7 @@ public void setCommand(String message) {
 
     /**
      * Get the command sender.
+     * @return The sender
      */
     public CommandSender getSender() {
         return sender;

File: paper-api/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
Patch:
@@ -39,7 +39,7 @@ public int getDamage() {
     /**
      * Sets the damage done to the vehicle
      *
-     * @param damage
+     * @param damage The damage
      */
     public void setDamage(int damage) {
         this.damage = damage;

File: paper-api/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
Patch:
@@ -19,7 +19,7 @@ public VehicleExitEvent(Vehicle vehicle, LivingEntity exited) {
     /**
      * Get the living entity that exited the vehicle.
      *
-     * @return
+     * @return The entity.
      */
     public LivingEntity getExited() {
         return exited;

File: paper-api/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
Patch:
@@ -22,7 +22,7 @@ public VehicleMoveEvent(Vehicle vehicle, Location from, Location to) {
     /**
      * Get the previous position.
      *
-     * @return
+     * @return Old position.
      */
     public Location getFrom() {
         return from;
@@ -31,7 +31,7 @@ public Location getFrom() {
     /**
      * Get the next position.
      *
-     * @return
+     * @return New position.
      */
     public Location getTo() {
         return to;

File: paper-api/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
Patch:
@@ -1,7 +1,6 @@
 package org.bukkit.event.weather;
 
 import org.bukkit.World;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.event.Cancellable;
 
@@ -12,12 +11,10 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
 
     private boolean canceled;
     private LightningStrike bolt;
-    private World world;
 
     public LightningStrikeEvent(World world, LightningStrike bolt) {
         super(Type.LIGHTNING_STRIKE, world);
         this.bolt = bolt;
-        this.world = world;
     }
 
     public boolean isCancelled() {

File: paper-api/src/main/java/org/bukkit/event/world/WorldListener.java
Patch:
@@ -17,7 +17,7 @@ public void onChunkLoad(ChunkLoadEvent event) {}
     /**
      * Called when a newly created chunk has been populated.
      *
-     * If your intent is to populate the chunk using this event, please see {@link BlockPopulator}
+     * If your intent is to populate the chunk using this event, please see {@link org.bukkit.generator.BlockPopulator}
      *
      * @param event Relevant event details
      */

File: paper-api/src/main/java/org/bukkit/generator/BlockPopulator.java
Patch:
@@ -20,7 +20,7 @@ public abstract class BlockPopulator {
      *
      * @param world The world to generate in
      * @param random The random generator to use
-     * @param chunk The chunk to generate for
+     * @param source The chunk to generate for
      */
     public abstract void populate(World world, Random random, Chunk source);
 }

File: paper-api/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
Patch:
@@ -60,7 +60,7 @@ public FurnaceRecipe setInput(Material input) {
      * @return The input material.
      */
     public MaterialData getInput() {
-        return (MaterialData) ingredient;
+        return ingredient;
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/inventory/ItemStack.java
Patch:
@@ -125,7 +125,7 @@ public MaterialData getData() {
     /**
      * Sets the MaterialData for this stack of items
      *
-     * @param amount New MaterialData for this item
+     * @param data New MaterialData for this item
      */
     public void setData(MaterialData data) {
         Material mat = getType();

File: paper-api/src/main/java/org/bukkit/map/MapCanvas.java
Patch:
@@ -65,9 +65,9 @@ public interface MapCanvas {
      * will move down one line and return to the original column, and the text
      * color can be changed using sequences such as "§12;", replacing 12 with
      * the palette index of the color (see {@link MapPalette}).
-     * @param map The MapInfo to render to.
      * @param x The column to start rendering on.
      * @param y The row to start rendering on.
+     * @param font The font to use.
      * @param text The formatted text to render.
      */
     public void drawText(int x, int y, MapFont font, String text);

File: paper-api/src/main/java/org/bukkit/map/MapRenderer.java
Patch:
@@ -10,15 +10,15 @@ public abstract class MapRenderer {
     private boolean contextual;
     
     /**
-     * Initialize the map renderer base to be non-contextual. See {@link isContextual}.
+     * Initialize the map renderer base to be non-contextual. See {@link #isContextual()}.
      */
     public MapRenderer() {
         this(false);
     }
     
     /**
      * Initialize the map renderer base with the given contextual status.
-     * @param contextual Whether the renderer is contextual. See {@link isContextual}.
+     * @param contextual Whether the renderer is contextual. See {@link #isContextual()}.
      */
     public MapRenderer(boolean contextual) {
         this.contextual = contextual;

File: paper-api/src/main/java/org/bukkit/map/MapView.java
Patch:
@@ -26,6 +26,8 @@ private Scale(int value) {
         
         /**
          * Get the scale given the raw value.
+         * @param value The raw scale
+         * @return The enum scale, or null for an invalid input
          */
         public static Scale valueOf(byte value) {
             switch(value) {
@@ -40,6 +42,7 @@ public static Scale valueOf(byte value) {
         
         /**
          * Get the raw value of this scale level.
+         * @return The scale value
          */
         public byte getValue() {
             return value;

File: paper-api/src/main/java/org/bukkit/material/Bed.java
Patch:
@@ -51,7 +51,7 @@ public boolean isHeadOfBed() {
 
     /**
      * Configure this to be either the head or the foot of the bed
-     * @param isHeadOfBed
+     * @param isHeadOfBed True to make it the head.
      */
     public void setHeadOfBed(boolean isHeadOfBed) {
         setData((byte) (isHeadOfBed ? (getData() | 0x8) : (getData() & ~0x8)));

File: paper-api/src/main/java/org/bukkit/material/Directional.java
Patch:
@@ -6,6 +6,7 @@ public interface Directional {
 
     /**
      * Sets the direction that this block is facing in
+     * @param face The facing direction
      */
     public void setFacingDirection(BlockFace face);
 

File: paper-api/src/main/java/org/bukkit/material/Door.java
Patch:
@@ -37,7 +37,7 @@ public boolean isOpen() {
 
     /**
      * Configure this door to be either open or closed;
-     * @param isOpen
+     * @param isOpen True to open the door.
      */
     public void setOpen(boolean isOpen) {
         setData((byte) (isOpen ? (getData() | 0x4) : (getData() & ~0x4)));
@@ -52,7 +52,7 @@ public boolean isTopHalf() {
 
     /**
      * Configure this part of the door to be either the top or the bottom half;
-     * @param isTopHalf
+     * @param isTopHalf True to make it the top half.
      */
     public void setTopHalf(boolean isTopHalf) {
         setData((byte) (isTopHalf ? (getData() | 0x8) : (getData() & ~0x8)));

File: paper-api/src/main/java/org/bukkit/material/MaterialData.java
Patch:
@@ -75,6 +75,7 @@ public ItemStack toItemStack() {
     /**
      * Creates a new ItemStack based on this MaterialData
      *
+     * @param amount The stack size of the new stak
      * @return New ItemStack containing a copy of this MaterialData
      */
     public ItemStack toItemStack(int amount) {

File: paper-api/src/main/java/org/bukkit/permissions/Permission.java
Patch:
@@ -52,7 +52,7 @@ public Permission(String name, PermissionDefault defaultValue, Map<String, Boole
     public Permission(String name, String description, PermissionDefault defaultValue, Map<String, Boolean> children) {
         this.name = name;
         this.description = (description == null) ? "" : description;
-        this.defaultValue = (defaultValue == null) ? defaultValue.FALSE : defaultValue;
+        this.defaultValue = (defaultValue == null) ? PermissionDefault.FALSE : defaultValue;
         
         if (children != null) {
             this.children.putAll(children);

File: paper-api/src/main/java/org/bukkit/plugin/AuthorNagException.java
Patch:
@@ -4,10 +4,9 @@ public class AuthorNagException extends RuntimeException {
     private final String message;
 
     /**
-     * Constructs a new UnknownDependencyException based on the given Exception
+     * Constructs a new AuthorNagException based on the given Exception
      *
      * @param message Brief message explaining the cause of the exception
-     * @param throwable Exception that triggered this Exception
      */
     public AuthorNagException(final String message) {
         this.message = message;

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -16,7 +16,7 @@ public interface Plugin extends CommandExecutor {
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
      *
-     * @return
+     * @return The folder
      */
     public File getDataFolder();
 
@@ -30,7 +30,7 @@ public interface Plugin extends CommandExecutor {
     /**
      * Returns the main configuration file. It should be loaded.
      *
-     * @return
+     * @return The configuration
      */
     public Configuration getConfiguration();
 

File: paper-api/src/main/java/org/bukkit/plugin/PluginManager.java
Patch:
@@ -66,6 +66,7 @@ public interface PluginManager {
      * @return The Plugin loaded, or null if it was invalid
      * @throws InvalidPluginException Thrown when the specified file is not a valid plugin
      * @throws InvalidDescriptionException Thrown when the specified file contains an invalid description
+     * @throws UnknownDependencyException If a required dependency could not be resolved
      */
     public Plugin loadPlugin(File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException;
 
@@ -88,9 +89,8 @@ public interface PluginManager {
     public void clearPlugins();
 
     /**
-     * Calls a player related event with the given details
+     * Calls an event with the given details
      *
-     * @param type Type of player related event to call
      * @param event Event details
      */
     public void callEvent(Event event);
@@ -179,6 +179,7 @@ public interface PluginManager {
      * Gets the default permissions for the given op status
      *
      * @param op Which set of default permissions to get
+     * @return The default permissions
      */
     public Set<Permission> getDefaultPermissions(boolean op);
 

File: paper-api/src/main/java/org/bukkit/plugin/RegisteredListener.java
Patch:
@@ -52,7 +52,7 @@ public Event.Priority getPriority() {
 
     /**
      * Calls the event executor
-     * @return Registered Priority
+     * @param event The event
      */
     public void callEvent(Event event) {
         executor.execute(listener, event);

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -175,6 +175,7 @@ public Plugin[] loadPlugins(File directory) {
      * @return The Plugin loaded, or null if it was invalid
      * @throws InvalidPluginException Thrown when the specified file is not a valid plugin
      * @throws InvalidDescriptionException Thrown when the specified file contains an invalid description
+     * @throws UnknownDependencyException If a required dependency could not be found
      */
     public synchronized Plugin loadPlugin(File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException {
         return loadPlugin(file, true);
@@ -190,6 +191,7 @@ public synchronized Plugin loadPlugin(File file) throws InvalidPluginException,
      * @return The Plugin loaded, or null if it was invalid
      * @throws InvalidPluginException Thrown when the specified file is not a valid plugin
      * @throws InvalidDescriptionException Thrown when the specified file contains an invalid description
+     * @throws UnknownDependencyException If a required dependency could not be found
      */
     public synchronized Plugin loadPlugin(File file, boolean ignoreSoftDependencies) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException {
         File updateFile = null;
@@ -324,9 +326,8 @@ public void clearPlugins() {
     }
 
     /**
-     * Calls a player related event with the given details
+     * Calls an event with the given details
      *
-     * @param type Type of player related event to call
      * @param event Event details
      */
     public synchronized void callEvent(Event event) {

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -41,7 +41,7 @@ public JavaPlugin() {}
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
      *
-     * @return
+     * @return The folder.
      */
     public File getDataFolder() {
         return dataFolder;
@@ -98,7 +98,7 @@ public PluginDescriptionFile getDescription() {
      * does not exist and it cannot be loaded, no error will be emitted and
      * the configuration file will have no values.
      *
-     * @return
+     * @return The configuration.
      */
     public Configuration getConfiguration() {
         return config;

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -177,9 +177,9 @@ public Plugin loadPlugin(File file, boolean ignoreSoftDependencies) throws Inval
             throw new InvalidPluginException(ex);
         }
 
-        loaders.put(description.getName(), (PluginClassLoader) loader);
+        loaders.put(description.getName(), loader);
 
-        return (Plugin) result;
+        return result;
     }
 
     protected File getDataFolder(File file) {

File: paper-api/src/main/java/org/bukkit/util/config/Configuration.java
Patch:
@@ -127,7 +127,7 @@ public void setHeader(String header) {
     /**
      * Return the set header.
      *
-     * @return
+     * @return The header comment.
      */
     public String getHeader() {
         return header;
@@ -136,7 +136,6 @@ public String getHeader() {
     /**
      * Saves the configuration to disk. All errors are clobbered.
      *
-     * @param header header to prepend
      * @return true if it was successful
      */
     public boolean save() {
@@ -184,7 +183,7 @@ private void read(Object input) throws ConfigurationException {
     /**
      * This method returns an empty ConfigurationNode for using as a
      * default in methods that select a node from a node list.
-     * @return
+     * @return The empty node.
      */
     public static ConfigurationNode getEmptyNode() {
         return new ConfigurationNode(new HashMap<String, Object>());

File: paper-api/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
Patch:
@@ -70,7 +70,7 @@ public void setWScale(double scale) {
      * @param x X-coordinate
      * @param y Y-coordinate
      * @param z Z-coordinate
-     * @para, w W-coordinate
+     * @param w W-coordinate
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -85,7 +85,7 @@ public double noise(double x, double y, double z, double w, double frequency, do
      * @param x X-coordinate
      * @param y Y-coordinate
      * @param z Z-coordinate
-     * @para, w W-coordinate
+     * @param w W-coordinate
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]

File: paper-api/src/main/java/org/bukkit/command/defaults/OpCommand.java
Patch:
@@ -23,7 +23,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             return false;
         }
 
-        Command.broadcastCommandMessage(sender, "Oping " + args[0]);
+        Command.broadcastCommandMessage(sender, "Opping " + args[0]);
 
         OfflinePlayer player = Bukkit.getOfflinePlayer(args[0]);
         player.setOp(true);

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
Patch:
@@ -41,7 +41,7 @@ public int getDroppedExp() {
      *
      * @param exp Amount of EXP to drop.
      */
-    public void setDropedExp(int exp) {
+    public void setDroppedExp(int exp) {
         this.dropExp = exp;
     }
 

File: paper-api/src/main/java/org/bukkit/permissions/Permission.java
Patch:
@@ -15,7 +15,7 @@
  * Represents a unique permission that may be attached to a {@link Permissible}
  */
 public class Permission {
-    public static final PermissionDefault DEFAULT_PERMISSION = PermissionDefault.FALSE;
+    public static final PermissionDefault DEFAULT_PERMISSION = PermissionDefault.OP;
 
     private final String name;
     private final Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
@@ -316,8 +316,6 @@ private static Map<String, Boolean> extractChildren(Map<String, Object> data, St
                 children.put(entry.getKey(), (Boolean)entry.getValue());
             } else if ((entry.getValue() instanceof Map)) {
                 try {
-                    System.out.println("Going to make new child " + (String)entry.getKey() + " perm for " + name);
-
                     try
                     {
                         Permission perm = loadPermission((String)entry.getKey(), (Map<String, Object>)entry.getValue(), def, output);

File: paper-api/src/main/java/org/bukkit/Location.java
Patch:
@@ -420,7 +420,7 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "Location{" + "world=" + world + "x=" + x + "y=" + y + "z=" + z + "pitch=" + pitch + "yaw=" + yaw + '}';
+        return "Location{" + "world=" + world + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw + '}';
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -86,7 +86,7 @@ public boolean testPermission(CommandSender target) {
             return true;
         }
 
-        target.sendMessage(ChatColor.RED + "I'm sorry, Dave. I'm afraid I can't do that.");
+        target.sendMessage(ChatColor.RED + "Bukkit sad. Bukkit want you to access command, but Bukkit cannot let you. Bukkit will leak tears :'(");
         return false;
     }
 

File: paper-api/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
Patch:
@@ -103,7 +103,7 @@ public static Permission registerPermissions(Permission parent) {
         DefaultPermissions.registerPermission(PREFIX + "plugins", "Allows the user to view the list of plugins running on this server", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "reload", "Allows the user to reload the server settings", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "version", "Allows the user to view the version of the server", PermissionDefault.TRUE, commands);
-        DefaultPermissions.registerPermission(PREFIX + "gamemode", "Allows the user to change the gamemode of another player", PermissionDefault.TRUE, commands);
+        DefaultPermissions.registerPermission(PREFIX + "gamemode", "Allows the user to change the gamemode of another player", PermissionDefault.OP, commands);
 
         commands.recalculatePermissibles();
 

File: paper-api/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
Patch:
@@ -40,7 +40,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
                     player.setGameMode(mode);
                 } else {
-                    sender.sendMessage(player.getName() + " already has game mode" + mode.getValue());
+                    sender.sendMessage(player.getName() + " already has game mode " + mode.getValue());
                 }
             } else {
                 sender.sendMessage("There is no game mode with id " + args[1]);

File: paper-api/src/main/java/org/bukkit/command/defaults/GiveCommand.java
Patch:
@@ -30,7 +30,7 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
             Material material = Material.matchMaterial(args[1]);
 
             if (material != null) {
-                Command.broadcastCommandMessage(sender, "Giving " + player.getName() + " some " + material.getId() + "(" + material + ")");
+                Command.broadcastCommandMessage(sender, "Giving " + player.getName() + " some " + material.getId() + " (" + material + ")");
 
                 int amount = 1;
 

File: paper-api/src/main/java/org/bukkit/command/defaults/BanCommand.java
Patch:
@@ -29,6 +29,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("ban ");
+        return input.startsWith("ban ") || input.equalsIgnoreCase("ban");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
Patch:
@@ -29,6 +29,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("ban-ip ");
+        return input.startsWith("ban-ip ") || input.equalsIgnoreCase("ban-ip");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/DeopCommand.java
Patch:
@@ -37,6 +37,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("deop ");
+        return input.startsWith("deop ") || input.equalsIgnoreCase("deop");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
Patch:
@@ -54,6 +54,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("gamemode ");
+        return input.startsWith("gamemode ") || input.equalsIgnoreCase("gamemode");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/GiveCommand.java
Patch:
@@ -56,6 +56,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("give ");
+        return input.startsWith("give ") || input.equalsIgnoreCase("give");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/KickCommand.java
Patch:
@@ -36,6 +36,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("kick ");
+        return input.startsWith("kick ") || input.equalsIgnoreCase("kick");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/MeCommand.java
Patch:
@@ -34,6 +34,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("me ");
+        return input.startsWith("me ") || input.equalsIgnoreCase("me");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/OpCommand.java
Patch:
@@ -37,6 +37,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("op ");
+        return input.startsWith("op ") || input.equalsIgnoreCase("op");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/PardonCommand.java
Patch:
@@ -29,6 +29,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("pardon ");
+        return input.startsWith("pardon ") || input.equalsIgnoreCase("pardon");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/PardonIpCommand.java
Patch:
@@ -29,6 +29,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("pardon-ip ");
+        return input.startsWith("pardon-ip ") || input.equalsIgnoreCase("pardon-ip");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/SayCommand.java
Patch:
@@ -39,6 +39,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("say ");
+        return input.startsWith("say ") || input.equalsIgnoreCase("say");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/TeleportCommand.java
Patch:
@@ -39,6 +39,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("tp ");
+        return input.startsWith("tp ") || input.equalsIgnoreCase("tp");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/TellCommand.java
Patch:
@@ -49,6 +49,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("tell ");
+        return input.startsWith("tell ") || input.equalsIgnoreCase("tell");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/TimeCommand.java
Patch:
@@ -59,6 +59,6 @@ public boolean execute(CommandSender sender, String currentAlias, String[] args)
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("time ");
+        return input.startsWith("time ") || input.equalsIgnoreCase("time");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
Patch:
@@ -85,6 +85,6 @@ private boolean badPerm(CommandSender sender, String perm) {
 
     @Override
     public boolean matches(String input) {
-        return input.startsWith("whitelist ");
+        return input.startsWith("whitelist ") || input.equalsIgnoreCase("whitelist");
     }
 }

File: paper-api/src/main/java/org/bukkit/command/defaults/SayCommand.java
Patch:
@@ -16,7 +16,7 @@ public SayCommand() {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length != 1)  {
+        if (args.length == 0)  {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }

File: paper-api/src/main/java/org/bukkit/entity/Player.java
Patch:
@@ -9,13 +9,14 @@
 import org.bukkit.Note;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Statistic;
+import org.bukkit.command.CommandSender;
 import org.bukkit.map.MapView;
 
 /**
  * Represents a player, connected or not
  *
  */
-public interface Player extends HumanEntity, OfflinePlayer {
+public interface Player extends HumanEntity, CommandSender, OfflinePlayer {
     /**
      * Gets the "friendly" name to display of this player. This may include color.
      *

File: paper-api/src/main/java/org/bukkit/permissions/PermissibleBase.java
Patch:
@@ -159,7 +159,7 @@ public void recalculatePermissions() {
         dirtyPermissions = true;
     }
 
-    private synchronized void calculatePermissions() {
+    public synchronized void calculatePermissions() {
         if (dirtyPermissions) {
             clearPermissions();
             Set<Permission> defaults = Bukkit.getServer().getPluginManager().getDefaultPermissions(isOp());

File: paper-api/src/main/java/org/bukkit/command/Command.java
Patch:
@@ -79,7 +79,7 @@ public void setPermission(String permission) {
      * @return true if they can use it, otherwise false
      */
     public boolean testPermission(CommandSender target) {
-        if ((permission == null) || (permission.isEmpty()) || (target.hasPermission(permission))) {
+        if ((permission == null) || (permission.length() == 0) || (target.hasPermission(permission))) {
             return true;
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -422,7 +422,7 @@ public static PlayerExpChangeEvent callPlayerExpChangeEvent(EntityHuman entity,
     }
 
     public static boolean handleProjectileEvent(Projectile projectile, Entity target, DamageSource damagesource, int damage) {
-        if (target instanceof EntityLiving || target instanceof EntityComplexPart) {
+        if (target instanceof EntityLiving || target instanceof EntityComplexPart || target instanceof EntityEnderCrystal) {
             org.bukkit.entity.Entity damagee = target.getBukkitEntity();
             
             EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(projectile, damagee, EntityDamageEvent.DamageCause.PROJECTILE, damage);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -1024,7 +1024,7 @@ public Set<String> getListeningPluginChannels() {
     }
 
     public void onPlayerJoin(Player player) {
-        if ((updater.isEnabled()) && (player.hasPermission(Server.BROADCAST_CHANNEL_ADMINISTRATIVE))) {
+        if ((updater.isEnabled()) && (updater.getCurrent() != null) && (player.hasPermission(Server.BROADCAST_CHANNEL_ADMINISTRATIVE))) {
             if ((updater.getCurrent().isBroken()) && (updater.getOnBroken().contains(updater.WARN_OPERATORS))) {
                 player.sendMessage(ChatColor.DARK_RED + "The version of CraftBukkit that this server is running is known to be broken. Please consider updating to the latest version at dl.bukkit.org.");
             } else if ((updater.isUpdateAvailable()) && (updater.getOnUpdate().contains(updater.WARN_OPERATORS))) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/updater/AutoUpdater.java
Patch:
@@ -65,8 +65,8 @@ public void check(final String currentSlug) {
         new Thread() {
             @Override
             public void run() {
-                current = service.getArtifact(currentSlug);
-                latest = service.getArtifact("latest-" + channel);
+                current = service.getArtifact(currentSlug, "current artifact information; perhaps you are running a custom version?");
+                latest = service.getArtifact("latest-" + channel, "latest artifact information");
 
                 if (isUpdateAvailable()) {
                     if ((current.isBroken()) && (onBroken.contains(WARN_CONSOLE))) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/updater/BukkitDLUpdaterService.java
Patch:
@@ -29,9 +29,9 @@ public ArtifactDetails getArtifact(String slug) {
         try {
             return fetchArtifact(slug);
         } catch (UnsupportedEncodingException ex) {
-            Logger.getLogger(BukkitDLUpdaterService.class.getName()).log(Level.WARNING, "Could not get Artifact details for the auto-updater", ex);
+            Logger.getLogger(BukkitDLUpdaterService.class.getName()).log(Level.WARNING, "Could not get Artifact details for the auto-updater: " + ex.getClass().getSimpleName());
         } catch (IOException ex) {
-            Logger.getLogger(BukkitDLUpdaterService.class.getName()).log(Level.WARNING, "Could not get Artifact details for the auto-updater", ex);
+            Logger.getLogger(BukkitDLUpdaterService.class.getName()).log(Level.WARNING, "Could not get Artifact details for the auto-updater: " + ex.getClass().getSimpleName());
         }
 
         return null;

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -277,9 +277,6 @@ public static CreatureSpawnEvent callCreatureSpawnEvent(EntityLiving entitylivin
             type = CreatureType.BLAZE;
         } else if (entityliving instanceof EntitySilverfish) {
             type = CreatureType.SILVERFISH;
-            // Supertype of many, last!
-        } else if (entityliving instanceof EntityMonster) {
-            type = CreatureType.MONSTER;
         }
 
         CreatureSpawnEvent event = new CreatureSpawnEvent(entity, type, entity.getLocation(), spawnReason);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -521,6 +521,7 @@ public World createWorld(WorldCreator creator) {
         File folder = new File(getWorldContainer(), name);
         World world = getWorld(name);
         WorldType type = WorldType.a(creator.type().getName());
+        boolean generateStructures = creator.generateStructures();
 
         if (world != null) {
             return world;
@@ -552,7 +553,8 @@ public World createWorld(WorldCreator creator) {
             }
         } while(used);
         boolean hardcore = false;
-        WorldServer internal = new WorldServer(console, new ServerNBTManager(getWorldContainer(), name, true), name, dimension, new WorldSettings(creator.seed(), getDefaultGameMode().getValue(), true, hardcore, type), creator.environment(), generator);
+
+        WorldServer internal = new WorldServer(console, new ServerNBTManager(getWorldContainer(), name, true), name, dimension, new WorldSettings(creator.seed(), getDefaultGameMode().getValue(), generateStructures, hardcore, type), creator.environment(), generator);
 
         if (!(worlds.containsKey(name.toLowerCase()))) {
             return null;

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -377,6 +377,8 @@ public static PlayerDeathEvent callPlayerDeathEvent(EntityPlayer victim, List<or
         victim.newExp = event.getNewExp();
 
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
+            if (stack == null || stack.getType() == Material.AIR) continue;
+
             world.dropItemNaturally(entity.getLocation(), stack);
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -27,7 +27,7 @@ public String getName() {
     }
 
     public ItemStack getItem(int index) {
-        return new CraftItemStack(getInventory().getItem(index));
+        return getInventory().getItem(index).id == 0 ? null : new CraftItemStack(getInventory().getItem(index));
     }
 
     public ItemStack[] getContents() {
@@ -59,7 +59,7 @@ public void setContents(ItemStack[] items) {
     }
 
     public void setItem(int index, ItemStack item) {
-        getInventory().setItem(index, (item == null ? null : CraftItemStack.createNMSItemStack(item)));
+        getInventory().setItem(index, ((item == null || item.getTypeId() == 0) ? null : CraftItemStack.createNMSItemStack(item)));
     }
 
     public boolean contains(int materialId) {
@@ -170,7 +170,7 @@ public int first(ItemStack item, boolean withAmount) {
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
             if (inventory[i] == null) continue;
-            
+
             boolean equals = false;
 
             if (withAmount) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -148,8 +148,8 @@ public void setPlayerListName(String name) {
             return;
         }
 
-        if (ChatColor.stripColor(name).length() > 16) {
-            throw new IllegalArgumentException("Player list names can only be a maximum of 16 characters long without colour codes");
+        if (name.length() > 16) {
+            throw new IllegalArgumentException("Player list names can only be a maximum of 16 characters long");
         }
 
         // Collisions will make for invisible people

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/LongHashset.java
Patch:
@@ -131,7 +131,7 @@ public long popFirst() {
 
     public long[] popAll() {
         int index = 0;
-        rl.lock();
+        wl.lock();
         try {
             long[] ret = new long[this.count];
             for (long[][] outer : this.values) {
@@ -150,7 +150,7 @@ public long[] popAll() {
             count = 0;
             return ret;
         } finally {
-            rl.unlock();
+            wl.unlock();
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -813,7 +813,7 @@ public int broadcast(String message, String permission) {
         Set<Permissible> permissibles = getPluginManager().getPermissionSubscriptions(permission);
 
         for (Permissible permissible : permissibles) {
-            if (permissible instanceof CommandSender) {
+            if (permissible instanceof CommandSender && permissible.hasPermission(permission)) {
                 CommandSender user = (CommandSender) permissible;
                 user.sendMessage(message);
                 count++;

File: paper-server/src/main/java/org/bukkit/craftbukkit/LoggerOutputStream.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.craftbukkit;
 
 import java.io.ByteArrayOutputStream;

File: paper-server/src/main/java/org/bukkit/craftbukkit/Main.java
Patch:
@@ -94,7 +94,7 @@ public static void main(String[] args) {
                         .describedAs("Yml file");
 
                 acceptsAll(asList("nojline"), "Disables jline and emulates the vanilla console");
-                
+
                 acceptsAll(asList("noconsole"), "Disables the console");
 
                 acceptsAll(asList("v", "version"), "Show the CraftBukkit Version");
@@ -126,7 +126,7 @@ public static void main(String[] args) {
                     System.setProperty("user.language", "en");
                     useJline = false;
                 }
-                
+
                 if (options.has("noconsole")) {
                     useConsole = false;
                 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/TrigMath.java
Patch:
@@ -1,8 +1,8 @@
 package org.bukkit.craftbukkit;
+
 /**
  * Credits for this class goes to user aioobe on stackoverflow.com
  * Source: http://stackoverflow.com/questions/4454630/j2me-calculate-the-the-distance-between-2-latitude-and-longitude
- *
  */
 public class TrigMath {
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
Patch:
@@ -44,7 +44,7 @@ public boolean isPlaying() {
 
     public boolean eject() {
         boolean result = isPlaying();
-        ((BlockJukeBox)net.minecraft.server.Block.JUKEBOX).dropRecord(world.getHandle(), getX(), getY(), getZ());
+        ((BlockJukeBox) net.minecraft.server.Block.JUKEBOX).dropRecord(world.getHandle(), getX(), getY(), getZ());
         return result;
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/ServerCommandListener.java
Patch:
@@ -13,7 +13,7 @@ public class ServerCommandListener implements ICommandListener {
     public ServerCommandListener(CommandSender commandSender) {
         this.commandSender = commandSender;
         String[] parts = commandSender.getClass().getName().split("\\.");
-        this.prefix = parts[parts.length-1];
+        this.prefix = parts[parts.length - 1];
     }
 
     public void sendMessage(String msg) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
Patch:
@@ -30,7 +30,7 @@ public void setShooter(LivingEntity shooter) {
     }
 
     @Override
-    public EntityArrow getHandle(){
+    public EntityArrow getHandle() {
         return (EntityArrow) entity;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -177,7 +177,7 @@ public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, doub
         List<Entity> notchEntityList = entity.world.getEntities(entity, entity.boundingBox.grow(x, y, z));
         List<org.bukkit.entity.Entity> bukkitEntityList = new java.util.ArrayList<org.bukkit.entity.Entity>(notchEntityList.size());
 
-        for (Entity e: notchEntityList) {
+        for (Entity e : notchEntityList) {
             bukkitEntityList.add(e.getBukkitEntity());
         }
         return bukkitEntityList;
@@ -269,7 +269,7 @@ private static CraftPlayer getPlayer(EntityPlayer entity) {
         CraftPlayer result = players.get(entity.name);
 
         if (result == null) {
-            result = new CraftPlayer((CraftServer)Bukkit.getServer(), entity);
+            result = new CraftPlayer((CraftServer) Bukkit.getServer(), entity);
             players.put(entity.name, result);
         } else {
             result.setHandle(entity);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityExperienceOrb;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.craftbukkit.entity;
 
 import java.util.Set;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
Patch:
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.entity;
 
-
 import net.minecraft.server.EntityMagmaCube;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.MagmaCube;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
Patch:
@@ -102,7 +102,7 @@ public BlockFace getFacing() {
     }
 
     private void update() {
-        WorldServer world = ((CraftWorld)getWorld()).getHandle();
+        WorldServer world = ((CraftWorld) getWorld()).getHandle();
         EntityPainting painting = new EntityPainting(world);
         painting.x = getHandle().x;
         painting.y = getHandle().y;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
Patch:
@@ -13,15 +13,15 @@ public CraftProjectile(CraftServer server, net.minecraft.server.Entity entity) {
 
     public LivingEntity getShooter() {
         if (getHandle().shooter instanceof EntityLiving) {
-            return (LivingEntity)getHandle().shooter.getBukkitEntity();
+            return (LivingEntity) getHandle().shooter.getBukkitEntity();
         }
 
         return null;
     }
 
     public void setShooter(LivingEntity shooter) {
         if (shooter instanceof CraftLivingEntity) {
-            getHandle().shooter = (EntityLiving)((CraftLivingEntity)shooter).entity;
+            getHandle().shooter = (EntityLiving) ((CraftLivingEntity) shooter).entity;
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWeather.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityWeather;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
Patch:
@@ -74,6 +74,7 @@ public void setOwner(AnimalTamer tamer) {
     /**
      * The owner's name is how MC knows and persists the Wolf's owner. Since we choose to instead use an AnimalTamer, this functionality
      * is used only as a backup. If the animal tamer is a player, we will store their name, otherwise we store an empty string.
+     *
      * @return the owner's name, if they are a player; otherwise, the empty string or null.
      */
     String getOwnerName() {
@@ -87,6 +88,7 @@ void setOwnerName(String ownerName) {
     /**
      * Only used internally at the moment, and there to set the path to null (that is stop the thing from running around)
      * TODO use this later to extend the API, when we have Path classes in Bukkit
+     *
      * @param pathentity currently the MC defined PathEntity class. Should be replaced with an API interface at some point.
      */
     private void setPath(PathEntity pathentity) {
@@ -99,12 +101,10 @@ private void setPath(PathEntity pathentity) {
     private void playTamingAnimation(boolean successful){
         getHandle().a(successful);
     }
-    */
+     */
 
     @Override
     public EntityWolf getHandle() {
-        // It's somewhat easier to override this here, as many internal methods rely on EntityWolf specific methods.
-        // Doing this has no impact on anything outside this class.
         return (EntityWolf) entity;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.craftbukkit.generator;
 
 import net.minecraft.server.IChunkProvider;

File: paper-server/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
Patch:
@@ -4,13 +4,13 @@
 import org.bukkit.map.MapCursor;
 
 public class RenderData {
-    
+
     public final byte[] buffer;
     public final ArrayList<MapCursor> cursors;
-    
+
     public RenderData() {
         this.buffer = new byte[128 * 128];
         this.cursors = new ArrayList<MapCursor>();
     }
-    
+
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/EntryBase.java
Patch:
@@ -1,7 +1,8 @@
 package org.bukkit.craftbukkit.util;
 
-public  class EntryBase {
+public class EntryBase {
     protected long key;
+
     public EntryBase(long key) {
         this.key = key;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/LongHashtable.java
Patch:
@@ -28,14 +28,15 @@ public synchronized ArrayList<V> values() {
 
         ArrayList<EntryBase> entries = entries();
 
-        for(EntryBase entry : entries) {
+        for (EntryBase entry : entries) {
             ret.add(((Entry) entry).value);
         }
         return ret;
     }
 
     private class Entry extends EntryBase {
         V value;
+
         Entry(long k, V v) {
             super(k);
             this.value = v;

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.craftbukkit.util;
 
 import net.minecraft.server.MinecraftServer;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -514,7 +514,7 @@ public World createWorld(WorldCreator creator) {
 
         String name = creator.name();
         ChunkGenerator generator = creator.generator();
-        File folder = new File(name);
+        File folder = new File(getWorldContainer(), name);
         World world = getWorld(name);
         WorldType type = WorldType.a(creator.type().getName());
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
Patch:
@@ -24,7 +24,7 @@ public void setTarget(LivingEntity target) {
 
     public CraftLivingEntity getTarget() {
         if (getHandle().target == null) return null;
-        if (!(getHandle().target instanceof CraftLivingEntity)) return null;
+        if (!(getHandle().target instanceof EntityLiving)) return null;
 
         return (CraftLivingEntity) getHandle().target.getBukkitEntity();
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
Patch:
@@ -24,6 +24,7 @@ public void setTarget(LivingEntity target) {
 
     public CraftLivingEntity getTarget() {
         if (getHandle().target == null) return null;
+        if (!(getHandle().target instanceof CraftLivingEntity)) return null;
 
         return (CraftLivingEntity) getHandle().target.getBukkitEntity();
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -513,7 +513,7 @@ public World createWorld(WorldCreator creator) {
         ChunkGenerator generator = creator.generator();
         File folder = new File(name);
         World world = getWorld(name);
-        WorldType type = WorldType.a(creator.type().getName());
+        WorldType type = WorldType.a(creator.type().name());
 
         if (world != null) {
             return world;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -938,6 +938,6 @@ public OfflinePlayer[] getOfflinePlayers() {
         }
         players.addAll(Arrays.asList(getOnlinePlayers()));
 
-        return (OfflinePlayer[]) players.toArray();
+        return players.toArray(new OfflinePlayer[players.size()]);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
Patch:
@@ -212,7 +212,7 @@ public net.minecraft.server.ItemStack getHandle() {
 
     @Override
     public CraftItemStack clone() {
-        return new CraftItemStack(this.item.cloneItemStack());
+        return new CraftItemStack(this.item == null ? this.item : this.item.cloneItemStack());
     }
 
     public static net.minecraft.server.ItemStack createNMSItemStack(ItemStack original) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
Patch:
@@ -9,7 +9,7 @@ public CraftRemoteConsoleCommandSender() {
     }
 
     public void sendMessage(String message) {
-        RemoteControlCommandListener.a.sendMessage(message);
+        RemoteControlCommandListener.a.sendMessage(message + "\n"); // Send a newline after each message, to preserve formatting.
     }
 
     public String getName() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -497,6 +497,7 @@ public int getLevel() {
 
     public void setLevel(int level) {
         getHandle().expLevel = level;
+        getHandle().cf = -1;
     }
 
     public int getTotalExperience() {
@@ -505,6 +506,7 @@ public int getTotalExperience() {
 
     public void setTotalExperience(int exp) {
         getHandle().expTotal = exp;
+        getHandle().cf = -1;
 
         if (getTotalExperience() > getExperience()) {
             getHandle().expTotal = getTotalExperience();

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
Patch:
@@ -19,7 +19,7 @@ public ItemStack getItemStack() {
     }
 
     public void setItemStack(ItemStack stack) {
-        item.itemStack = new net.minecraft.server.ItemStack(stack.getTypeId(), stack.getAmount(), stack.getDurability());
+        item.itemStack = CraftItemStack.createNMSItemStack(stack);
     }
 
     public int getPickupDelay() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -750,6 +750,8 @@ public <T extends Entity> T spawn(Location location, Class<T> clazz, SpawnReason
                 entity = new EntityPigZombie(world);
             } else if (Zombie.class.isAssignableFrom(clazz)) {
                 entity = new EntityZombie(world);
+            } else if (Giant.class.isAssignableFrom(clazz)) {
+                entity = new EntityGiantZombie(world);
             } else if (Silverfish.class.isAssignableFrom(clazz)) {
                 entity = new EntitySilverfish(world);
             } else if (Enderman.class.isAssignableFrom(clazz)) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -898,7 +898,7 @@ public File getWorldFolder() {
 
     public void explodeBlock(Block block, float yield) {
         // First of all, don't explode fire
-        if (block.getType().equals(Material.FIRE)) {
+        if (block.getType().equals(org.bukkit.Material.AIR) || block.getType().equals(org.bukkit.Material.FIRE)) {
             return;
         }
         int blockId = block.getTypeId();

File: paper-server/src/main/java/org/bukkit/craftbukkit/util/LongBaseHashtable.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.bukkit.craftbukkit.util.Java15Compat.Arrays_copyOf;
 
-public abstract class LongAbstractHashtable extends LongHash {
+public class LongBaseHashtable extends LongHash {
 
     EntryBase[][][] values = new EntryBase[256][][];
     EntryBase cache = null;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -169,6 +169,8 @@ public int first(ItemStack item, boolean withAmount) {
         }
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
+            if (inventory[i] == null) continue;
+            
             boolean equals = false;
 
             if (withAmount) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -153,7 +153,7 @@ public World getWorld() {
     }
 
     public boolean teleport(Location location) {
-        return teleport(this, TeleportCause.PLUGIN);
+        return teleport(location, TeleportCause.PLUGIN);
     }
 
     public boolean teleport(Location location, TeleportCause cause) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -146,7 +146,7 @@ public BlockFace getFace(final Block block) {
 
     @Override
     public String toString() {
-        return "CraftBlock{" + "chunk=" + chunk + "x=" + x + "y=" + y + "z=" + z + '}';
+        return "CraftBlock{" + "chunk=" + chunk + ",x=" + x + ",y=" + y + ",z=" + z + ",type=" + getType() + ",data=" + getData() + '}';
     }
 
     /**

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -568,7 +568,7 @@ public World createWorld(WorldCreator creator) {
                     ChunkCoordinates chunkcoordinates = internal.getSpawn();
                     internal.chunkProviderServer.getChunkAt(chunkcoordinates.x + j >> 4, chunkcoordinates.z + k >> 4);
 
-                    while (internal.v()) {
+                    while (internal.x()) {
                         ;
                     }
                 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
Patch:
@@ -2,9 +2,9 @@
 
 import net.minecraft.server.EntityEnderCrystal;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.entity.EnderSignal;
+import org.bukkit.entity.EnderCrystal;
 
-public class CraftEnderCrystal extends CraftEntity implements EnderSignal {
+public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
     public CraftEnderCrystal(CraftServer server, EntityEnderCrystal entity) {
         super(server, entity);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
Patch:
@@ -11,7 +11,7 @@ public CraftCaveSpider(CraftServer server, EntityCaveSpider entity) {
 
     @Override
     public EntityCaveSpider getHandle() {
-        return (EntityCaveSpider) super.getHandle();
+        return (EntityCaveSpider) entity;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
Patch:
@@ -18,7 +18,7 @@ public void setSaddle(boolean saddled) {
     }
 
     public EntityPig getHandle() {
-        return (EntityPig) super.getHandle();
+        return (EntityPig) entity;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPoweredMinecart.java
Patch:
@@ -14,5 +14,4 @@ public CraftPoweredMinecart(CraftServer server, EntityMinecart entity) {
     public String toString() {
         return "CraftPoweredMinecart";
     }
-
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
Patch:
@@ -11,7 +11,7 @@ public CraftSilverfish(CraftServer server, EntitySilverfish entity) {
 
     @Override
     public EntitySilverfish getHandle() {
-        return (EntitySilverfish) super.getHandle();
+        return (EntitySilverfish) entity;
     }
 
     @Override

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
Patch:
@@ -110,6 +110,6 @@ public EntityWolf getHandle() {
 
     @Override
     public String toString() {
-        return "CraftWolf[anger=" + isAngry() + ",owner=" + getOwner() + ",tame=" + isTamed() + ",sitting=" + isSitting() + "]";
+        return "CraftWolf{anger=" + isAngry() + ",owner=" + getOwner() + ",tame=" + isTamed() + ",sitting=" + isSitting() + "}";
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
Patch:
@@ -6,7 +6,7 @@
 import org.bukkit.entity.Villager;
 
 public class CraftVillager extends CraftCreature implements Villager {
-    public CraftVillager(CraftServer server, EntityCreature entity) {
+    public CraftVillager(CraftServer server, EntityVillager entity) {
         super(server, entity);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -81,7 +81,7 @@ else if (entity instanceof EntityWaterAnimal) {
             }
             // Slimes are a special (and broken) case
             else if (entity instanceof EntitySlime) {
-                if (entity instanceof MagmaCube) { return new CraftMagmaCube(server, (EntityLavaSlime) entity); }
+                if (entity instanceof EntityLavaSlime) { return new CraftMagmaCube(server, (EntityLavaSlime) entity); }
                 else { return new CraftSlime(server, (EntitySlime) entity); }
             }
             // Flying

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -53,13 +53,13 @@ public void setContents(ItemStack[] items) {
             if (item == null || item.getTypeId() <= 0) {
                 mcItems[i] = null;
             } else {
-                mcItems[i] = new net.minecraft.server.ItemStack(item.getTypeId(), item.getAmount(), item.getDurability());
+                mcItems[i] = CraftItemStack.createNMSItemStack(item);
             }
         }
     }
 
     public void setItem(int index, ItemStack item) {
-        getInventory().setItem(index, (item == null ? null : new net.minecraft.server.ItemStack(item.getTypeId(), item.getAmount(), item.getDurability())));
+        getInventory().setItem(index, (item == null ? null : CraftItemStack.createNMSItemStack(item)));
     }
 
     public boolean contains(int materialId) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -534,7 +534,7 @@ public void setFoodLevel(int value) {
 
     public Location getBedSpawnLocation() {
         World world = getServer().getWorld(getHandle().spawnWorld);
-        if (world != null) {
+        if ((world != null) && (getHandle().getBed() != null)) {
             return new Location(world, getHandle().getBed().x, getHandle().getBed().y, getHandle().getBed().z);
         } else {
             return null;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -596,7 +596,7 @@ public boolean unloadWorld(World world, boolean save) {
         }
 
         WorldUnloadEvent e = new WorldUnloadEvent(handle.getWorld());
-        pluginManager.callEvent(new WorldUnloadEvent(handle.getWorld()));
+        pluginManager.callEvent(e);
 
         if (e.isCancelled()) {
             return false;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -324,7 +324,7 @@ public boolean teleport(Location location) {
         if (fromWorld == toWorld) {
             entity.netServerHandler.teleport(to);
         } else {
-            server.getHandle().moveToWorld(entity, toWorld.dimension, to);
+            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to);
         }
         return true;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
Patch:
@@ -9,6 +9,7 @@
 import org.bukkit.Art;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.CraftArt;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.entity.Painting;
@@ -31,8 +32,7 @@ public String toString() {
 
     public Art getArt() {
         EnumArt art = getHandle().e;
-        // Since both EnumArt and Art have exactly the same enum constants, this works
-        return Art.getByName(art.toString());
+        return CraftArt.NotchToBukkit(art);
     }
 
     public boolean setArt(Art art) {
@@ -42,7 +42,7 @@ public boolean setArt(Art art) {
     public boolean setArt(Art art, boolean force) {
         EntityPainting painting = getHandle();
         EnumArt oldArt = painting.e;
-        EnumArt newArt = EnumArt.valueOf(art.toString());
+        EnumArt newArt = CraftArt.BukkitToNotch(art);
         painting.e = newArt;
         painting.b(painting.a);
         if(!force && !painting.i()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -372,14 +372,15 @@ public void reload() {
 
         boolean animals = config.getBoolean("spawn-animals", console.spawnAnimals);
         boolean monsters = config.getBoolean("spawn-monsters", console.worlds.get(0).difficulty > 0);
+        int difficulty = config.getInt("difficulty", console.worlds.get(0).difficulty);
 
         console.onlineMode = config.getBoolean("online-mode", console.onlineMode);
         console.spawnAnimals = config.getBoolean("spawn-animals", console.spawnAnimals);
         console.pvpMode = config.getBoolean("pvp", console.pvpMode);
         console.allowFlight = config.getBoolean("allow-flight", console.allowFlight);
 
         for (WorldServer world : console.worlds) {
-            world.difficulty = monsters ? 1 : 0;
+            world.difficulty = difficulty;
             world.setSpawnFlags(monsters, animals);
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
Patch:
@@ -111,7 +111,6 @@ public void recalculatePermissions() {
     public void setOp(boolean value) {
         this.op = value;
         perm.recalculatePermissions();
-        perm.calculatePermissions();
     }
 
     public Set<PermissionAttachmentInfo> getEffectivePermissions() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -49,7 +49,6 @@ public void setOp(boolean value) {
         }
 
         perm.recalculatePermissions();
-        perm.calculatePermissions();
     }
 
     public boolean isPlayer() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -153,7 +153,7 @@ public boolean unloadChunk(int x, int z, boolean save, boolean safe) {
 
         net.minecraft.server.Chunk chunk = world.chunkProviderServer.getOrCreateChunk(x, z);
 
-        if (save) {
+        if (save && !chunk.isEmpty()) {
             chunk.removeEntities();
             world.chunkProviderServer.saveChunk(chunk);
             world.chunkProviderServer.saveChunkNOP(chunk);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -70,7 +70,7 @@
 import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
-import org.bukkit.craftbukkit.util.DefaultPermissions;
+import org.bukkit.craftbukkit.util.permissions.DefaultPermissions;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.world.WorldInitEvent;
 import org.bukkit.permissions.Permission;
@@ -165,7 +165,7 @@ public void enablePlugins(PluginLoadOrder type) {
         if (type == PluginLoadOrder.POSTWORLD) {
             commandMap.registerServerAliases();
             loadCustomPermissions();
-            DefaultPermissions.registerCorePermissions(pluginManager);
+            DefaultPermissions.registerCorePermissions();
         }
     }
 

File: paper-api/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
Patch:
@@ -17,7 +17,7 @@ public abstract class NoiseGenerator {
      * @return Floored value
      */
     public static int floor(double x) {
-        return (int)Math.floor(x);
+        return x >= 0 ? (int) x : (int) x - 1;
     }
 
     protected static double fade(double x) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
Patch:
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit;
 
+import com.google.common.collect.MapMaker;
 import java.lang.ref.WeakReference;
+import java.util.concurrent.ConcurrentMap;
 import net.minecraft.server.ChunkPosition;
 
 import net.minecraft.server.WorldServer;
@@ -11,14 +13,13 @@
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.entity.Entity;
-import org.bukkit.craftbukkit.util.ConcurrentSoftMap;
 import org.bukkit.ChunkSnapshot;
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.WorldChunkManager;
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.server.Chunk> weakChunk;
-    private final ConcurrentSoftMap<Integer, Block> cache = new ConcurrentSoftMap<Integer, Block>();
+    private final ConcurrentMap<Integer, Block> cache = new MapMaker().softKeys().softValues().makeMap();
     private WorldServer worldServer;
     private int x;
     private int z;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -1,11 +1,12 @@
 package org.bukkit.craftbukkit;
 
+import com.google.common.collect.MapMaker;
 import org.bukkit.craftbukkit.entity.*;
 import org.bukkit.entity.*;
 import org.bukkit.entity.Entity;
 
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.concurrent.ConcurrentMap;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
@@ -37,7 +38,7 @@ public class CraftWorld implements World {
     private final WorldServer world;
     private Environment environment;
     private final CraftServer server = (CraftServer)Bukkit.getServer();
-    private HashMap<Integer, CraftChunk> unloadedChunks = new HashMap<Integer, CraftChunk>();
+    private ConcurrentMap<Integer, CraftChunk> unloadedChunks = new MapMaker().weakKeys().weakValues().makeMap();
     private final ChunkGenerator generator;
     private final List<BlockPopulator> populators = new ArrayList<BlockPopulator>();
 

File: paper-api/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
Patch:
@@ -189,7 +189,7 @@ public static double getNoise(double x, int octaves, double frequency, double am
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double getNoise(double x, double y, int octaves, double frequency, double amplitude) {
+    public static double getNoise(double x, double y, int octaves, double frequency, double amplitude) {
         return instance.noise(x, y, octaves, frequency, amplitude);
     }
 
@@ -204,7 +204,7 @@ public double getNoise(double x, double y, int octaves, double frequency, double
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {
+    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {
         return instance.noise(x, y, z, octaves, frequency, amplitude);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -103,7 +103,9 @@ private void loadConfigDefaults() {
         configuration.getInt("settings.spawn-radius", 16);
 
         if (configuration.getNode("aliases") == null) {
-            configuration.setProperty("aliases.icanhasbukkit", "version");
+            List<String> icanhasbukkit = new ArrayList<String>();
+            icanhasbukkit.add("version");
+            configuration.setProperty("aliases.icanhasbukkit", icanhasbukkit);
         }
     }
 

File: paper-api/src/main/java/org/bukkit/Server.java
Patch:
@@ -270,7 +270,7 @@ public interface Server {
      *
      * @return Map of aliases to command names
      */
-    public Map<String, String> getCommandAliases();
+    public Map<String, String[]> getCommandAliases();
 
     /**
      * Gets the radius, in blocks, around each worlds spawn point to protect

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -694,9 +694,9 @@ public <T extends Entity> T spawn(Location location, Class<T> clazz) throws Ille
             entity = new EntitySnowball(world, x, y, z);
         } else if (Minecart.class.isAssignableFrom(clazz)) {
 
-            if (clazz.isAssignableFrom(PoweredMinecart.class)) {
+            if (PoweredMinecart.class.isAssignableFrom(clazz)) {
                 entity = new EntityMinecart(world, x, y, z, CraftMinecart.Type.PoweredMinecart.getId());
-            } else if (clazz.isAssignableFrom(StorageMinecart.class)) {
+            } else if (StorageMinecart.class.isAssignableFrom(clazz)) {
                 entity = new EntityMinecart(world, x, y, z, CraftMinecart.Type.StorageMinecart.getId());
             } else {
                 entity = new EntityMinecart(world, x, y, z, CraftMinecart.Type.Minecart.getId());

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -87,11 +87,12 @@ private synchronized boolean register(String label, String fallbackPrefix, Comma
             return false;
         }
 
+        String lowerPrefix = fallbackPrefix.trim().toLowerCase();
         boolean registerdPassedLabel = true;
 
         // If the command exists but is an alias we overwrite it, otherwise we rename it based on the fallbackPrefix
         while (knownCommands.containsKey(lowerLabel) && !aliases.contains(lowerLabel)) {
-            lowerLabel = fallbackPrefix + ":" + lowerLabel;
+            lowerLabel = lowerPrefix + ":" + lowerLabel;
             registerdPassedLabel = false;
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -475,7 +475,7 @@ public World getWorld(String name) {
         return worlds.get(name.toLowerCase());
     }
 
-    protected void addWorld(World world) {
+    public void addWorld(World world) {
         worlds.put(world.getName().toLowerCase(), world);
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -238,7 +238,7 @@ public static CreatureSpawnEvent callCreatureSpawnEvent(EntityLiving entitylivin
      */
     public static EntityTameEvent callEntityTameEvent(EntityLiving entity, EntityHuman tamer) {
         org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
-        org.bukkit.entity.AnimalTamer bukkitTamer = (AnimalTamer) tamer.getBukkitEntity();
+        org.bukkit.entity.AnimalTamer bukkitTamer = (tamer != null ? (AnimalTamer) tamer.getBukkitEntity() : null);
         CraftServer craftServer = (CraftServer) bukkitEntity.getServer();
 
         EntityTameEvent event = new EntityTameEvent(bukkitEntity, bukkitTamer);

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
Patch:
@@ -10,7 +10,7 @@
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.generator.ChunkGenerator;
 
-public class CustomChunkGenerator implements InternalChunkGenerator {
+public class CustomChunkGenerator extends InternalChunkGenerator {
     private final ChunkGenerator generator;
     private final WorldServer world;
     private final long seed;

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
Patch:
@@ -4,6 +4,6 @@
 import net.minecraft.server.IChunkProvider;
 import org.bukkit.generator.ChunkGenerator;
 
-public interface InternalChunkGenerator extends ChunkGenerator, IChunkProvider {
+public abstract class InternalChunkGenerator extends ChunkGenerator implements IChunkProvider {
 
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -170,11 +170,12 @@ public boolean teleport(Location location) {
         WorldServer newWorld = ((CraftWorld)location.getWorld()).getHandle();
         ServerConfigurationManager manager = server.getHandle();
         EntityPlayer entity = getHandle();
+        boolean successfulTeleport = entity.netServerHandler.teleport(location);
 
-        if (oldWorld != newWorld) {
+        if (oldWorld != newWorld && successfulTeleport) {
             this.entity = manager.a(entity, newWorld.dimension, false);
         }
-        return entity.netServerHandler.teleport(location);
+        return successfulTeleport;
     }
 
     public void setSneaking(boolean sneak) {

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -117,7 +117,7 @@ public enum Material {
     DIAMOND(264),
     IRON_INGOT(265),
     GOLD_INGOT(266),
-    IRON_SWORD(267, 1, 59),
+    IRON_SWORD(267, 1, 250),
     WOOD_SWORD(268, 1, 59),
     WOOD_SPADE(269, 1, 59),
     WOOD_PICKAXE(270, 1, 59),
@@ -196,7 +196,7 @@ public enum Material {
     POWERED_MINECART(343, 1),
     EGG(344, 16),
     COMPASS(345),
-    FISHING_ROD(346, 1, 64),
+    FISHING_ROD(346, 1, 32),
     WATCH(347),
     GLOWSTONE_DUST(348),
     RAW_FISH(349),

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -42,7 +42,7 @@ public enum Material {
     POWERED_RAIL(27, PoweredRail.class),
     DETECTOR_RAIL(28, DetectorRail.class),
     WEB(30),
-    LONG_GRASS(31),
+    LONG_GRASS(31, LongGrass.class),
     DEAD_BUSH(32),
     WOOL(35, Wool.class),
     YELLOW_FLOWER(37),

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -173,10 +173,8 @@ public boolean teleport(Location location) {
 
         if (oldWorld != newWorld) {
             this.entity = manager.a(entity, newWorld.dimension, false);
-            return true;
-        } else {
-            return entity.netServerHandler.teleport(location);
         }
+        return entity.netServerHandler.teleport(location);
     }
 
     public void setSneaking(boolean sneak) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -172,8 +172,7 @@ public boolean teleport(Location location) {
         EntityPlayer entity = getHandle();
 
         if (oldWorld != newWorld) {
-            this.sendMessage("Multiworld teleporting disabled in this build. Nether works");
-//            this.entity = manager.a(entity, newWorld.dimension, false);
+            this.entity = manager.a(entity, newWorld.dimension, false);
             return true;
         } else {
             return entity.netServerHandler.teleport(location);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -173,11 +173,13 @@ public boolean teleport(Location location) {
 
         if (oldWorld != newWorld) {
             entity.dimension = newWorld.dimension;
-            entity.netServerHandler.sendPacket(new Packet9Respawn((byte) entity.dimension));
+            entity.netServerHandler.sendPacket(new Packet9Respawn((byte) location.getWorld().getEnvironment().getId()));
             oldWorld.removeEntity(entity);
             entity.dead = false;
 
+            entity.setPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
             if (entity.Q()) {
+                oldWorld.entityJoinedWorld(entity, false);
                 newWorld.addEntity(entity);
                 entity.setPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
                 newWorld.entityJoinedWorld(entity, false);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -59,7 +59,7 @@
 public final class CraftServer implements Server {
     private final String serverName = "Craftbukkit";
     private final String serverVersion;
-    private final String protocolVersion = "1.6.3";
+    private final String protocolVersion = "1.6.4";
     private final PluginManager pluginManager = new SimplePluginManager(this);
     private final ServicesManager servicesManager = new SimpleServicesManager();
     private final BukkitScheduler scheduler =  new CraftScheduler(this);

File: paper-api/src/main/java/org/bukkit/command/CommandMap.java
Patch:
@@ -44,7 +44,7 @@ public interface CommandMap {
      * Looks for the requested command and executes it if found.
      *
      * @param cmdLine command + arguments. Example: "/test abc 123"
-     * @return targetFound returns false if no target is found.
+     * @return targetFound returns false if no target is found, true otherwise.
      * @throws CommandException Thrown when the executor for the given command fails with an unhandled exception
      */
     public boolean dispatch(CommandSender sender, String cmdLine) throws CommandException;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -293,7 +293,7 @@ public void reload() {
 
         console.propertyManager = config;
 
-        boolean animals = config.getBoolean("spawn-monsters", console.spawnAnimals);
+        boolean animals = config.getBoolean("spawn-animals", console.spawnAnimals);
         boolean monsters = config.getBoolean("spawn-monsters", console.worlds.get(0).spawnMonsters > 0);
 
         console.onlineMode = config.getBoolean("online-mode", console.onlineMode);

File: paper-server/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
Patch:
@@ -4,18 +4,17 @@
 import java.util.List;
 import java.util.Random;
 import net.minecraft.server.Chunk;
-import net.minecraft.server.ChunkProviderGenerate;
 import net.minecraft.server.IChunkProvider;
 import net.minecraft.server.IProgressUpdate;
 import net.minecraft.server.World;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.generator.BlockPopulator;
 
 public class NormalChunkGenerator extends InternalChunkGenerator {
-    private final ChunkProviderGenerate provider;
+    private final IChunkProvider provider;
 
     public NormalChunkGenerator(World world, long seed) {
-        provider = new ChunkProviderGenerate(world, seed);
+        provider = world.worldProvider.b();
     }
 
     public byte[] generate(org.bukkit.World world, Random random, int x, int z) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/Main.java
Patch:
@@ -12,7 +12,7 @@
 import net.minecraft.server.MinecraftServer;
 
 public class Main {
-    public static String jlineTerminalSetting = System.getProperty("jline.terminal");
+    public static String jlineTerminalSetting;
 
     public static void main(String[] args) {
         // Todo: Installation script
@@ -92,6 +92,7 @@ public static void main(String[] args) {
                     System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
                     System.setProperty("user.language", "en");
                 }
+                jlineTerminalSetting = System.getProperty("jline.terminal");
                 MinecraftServer.main(options);
             } catch (Throwable t) {
                 t.printStackTrace();

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
Patch:
@@ -21,9 +21,9 @@ public boolean isPowered() {
 
     public void setPowered(boolean powered) {
         if (powered) {
-            getHandle().W().b(17, 1);
+            getHandle().W().b(17, (byte)1);
         } else {
-            getHandle().W().b(17, 0);
+            getHandle().W().b(17, (byte)0);
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
Patch:
@@ -21,9 +21,9 @@ public boolean isPowered() {
 
     public void setPowered(boolean powered) {
         if (powered) {
-            getHandle().W().a(17, 1);
+            getHandle().W().b(17, 1);
         } else {
-            getHandle().W().a(17, 0);
+            getHandle().W().b(17, 0);
         }
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -124,7 +124,7 @@ public void setType(final Material type) {
      * @return whether the block was changed
      */
     public boolean setTypeId(final int type) {
-        return chunk.getHandle().world.setRawTypeId(x, y, z, type);
+        return chunk.getHandle().world.setTypeId(x, y, z, type);
     }
 
     public boolean setTypeId(final int type, final boolean applyPhysics) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -339,7 +339,7 @@ public World createWorld(String name, World.Environment environment, long seed)
                 }
 
                 ChunkCoordinates chunkcoordinates = internal.m();
-                internal.u.d(chunkcoordinates.a + j >> 4, chunkcoordinates.c + k >> 4);
+                internal.u.c(chunkcoordinates.a + j >> 4, chunkcoordinates.c + k >> 4);
 
                 while (internal.f()) {
                     ;

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -166,7 +166,7 @@ public boolean teleport(Location location) {
             newEntity.locZ = location.getZ();
             newEntity.displayName = entity.displayName;
             newEntity.compassTarget = entity.compassTarget;
-            newWorld.u.d((int) location.getBlockX() >> 4, (int) location.getBlockZ() >> 4);
+            newWorld.u.c((int) location.getBlockX() >> 4, (int) location.getBlockZ() >> 4);
 
             teleportSuccess = newEntity.a.teleport(location);
 

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -27,7 +27,6 @@
 import org.bukkit.event.world.*;
 import org.bukkit.event.weather.*;
 import org.bukkit.plugin.*;
-import org.bukkit.plugin.java.annotations.DontExport;
 import org.yaml.snakeyaml.error.YAMLException;
 
 /**
@@ -218,7 +217,7 @@ public Class<?> getClassByName(final String name) {
     }
 
     public void setClass(final String name, final Class<?> clazz) {
-        if ((!classes.containsKey(name)) && (clazz.getAnnotation(DontExport.class) != null)) {
+        if (!classes.containsKey(name)) {
             classes.put(name, clazz);
         }
     }

File: paper-api/src/main/java/org/bukkit/event/player/PlayerInventoryEvent.java
Patch:
@@ -11,7 +11,7 @@ public class PlayerInventoryEvent extends PlayerEvent {
     protected Inventory inventory;
 
     public PlayerInventoryEvent(final Player player, final Inventory inventory) {
-        super(Type.PLAYER_INTERACT, player);
+        super(Type.PLAYER_INVENTORY, player);
         this.inventory = inventory;
     }
 

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -107,16 +107,16 @@ public Plugin[] loadPlugins(File directory) {
                     itr.remove();
                 } catch (UnknownDependencyException ex) {
                     if(finalPass) {
-                        server.getLogger().log(Level.SEVERE, "Could not load " + file.getPath() + " in " + directory.getPath() + ": " + ex.getMessage(), ex);
+                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': " + ex.getMessage(), ex);
                         itr.remove();
                     } else {
                         plugin = null;
                     }
                 } catch (InvalidPluginException ex) {
-                    server.getLogger().log(Level.SEVERE, "Could not load " + file.getPath() + " in " + directory.getPath() + ": " + ex.getMessage(), ex);
+                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': ", ex.getCause());
                     itr.remove();
                 } catch (InvalidDescriptionException ex) {
-                    server.getLogger().log(Level.SEVERE, "Could not load " + file.getPath() + " in " + directory.getPath() + ": " + ex.getMessage(), ex);
+                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': " + ex.getMessage(), ex);
                     itr.remove();
                 }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -67,7 +67,7 @@ public CraftServer(MinecraftServer console, ServerConfigurationManager server) {
     }
 
     private void loadConfigDefaults() {
-        configuration.getString("database.url", "jdbc:sqlite:{DIR}database.db");
+        configuration.getString("database.url", "jdbc:sqlite:{DIR}{NAME}.db");
         configuration.getString("database.username", "bukkit");
         configuration.getString("database.password", "walrus");
         configuration.getString("database.driver", "org.sqlite.JDBC");

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -101,7 +101,7 @@ public void setVelocity(Vector vel) {
         entity.motX = vel.getX();
         entity.motY = vel.getY();
         entity.motZ = vel.getZ();
-        entity.aY = true;
+        entity.aZ = true;
     }
 
     public World getWorld() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -406,7 +406,7 @@ public void setTime(long time) {
     }
 
     public long getFullTime() {
-        return world.k();
+        return world.l();
     }
 
     public void setFullTime(long time) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -64,8 +64,8 @@ public void loadPlugins() {
                 for (Plugin plugin : plugins) {
                     try {
                         plugin.onLoad();
-                    } catch (AbstractMethodError ame) {
-                        Logger.getLogger("Minecraft").warning("Plugin: " + plugin.getDescription().getName() + " does not support the onLoad() method");
+                    } catch (Throwable ex) {
+                        Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, ex.getMessage() + " initializing " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
                     }
                 }
                 for (Plugin plugin : plugins) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
Patch:
@@ -200,8 +200,6 @@ public static CreatureSpawnEvent callCreatureSpawnEvent(EntityLiving entitylivin
             type = CreatureType.GHAST;
         } else if (entityliving instanceof EntityGiantZombie) {
             type = CreatureType.GIANT;
-        } else if (entityliving instanceof EntityMonster) {
-            type = CreatureType.MONSTER;
         } else if (entityliving instanceof EntityPig) {
             type = CreatureType.PIG;
         } else if (entityliving instanceof EntityPigZombie) {
@@ -218,6 +216,9 @@ public static CreatureSpawnEvent callCreatureSpawnEvent(EntityLiving entitylivin
             type = CreatureType.SQUID;
         } else if (entityliving instanceof EntityZombie) {
             type = CreatureType.ZOMBIE;
+        // Supertype of many, last!
+        } else if (entityliving instanceof EntityMonster) {
+            type = CreatureType.MONSTER;
         }
 
         CreatureSpawnEvent event = new CreatureSpawnEvent(entity, type, entity.getLocation());

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -347,7 +347,7 @@ public LivingEntity spawnCreature(Location loc, CreatureType creatureType) {
         try {
             EntityLiving entityCreature = (EntityLiving) EntityTypes.a(creatureType.getName(), world);
             entityCreature.a(loc.getX(), loc.getY(), loc.getZ());
-            creature = (Creature) CraftEntity.getEntity(server, entityCreature);
+            creature = (LivingEntity) CraftEntity.getEntity(server, entityCreature);
             world.a(entityCreature);
         } catch (Exception e) {
             // if we fail, for any reason, return null.

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -258,7 +258,7 @@ public void callEvent(Event event) {
                     if (plugin.isNaggable()) {
                         plugin.setNaggable(false);
                         server.getLogger().log(Level.SEVERE, String.format(
-                            "Nag author: %s of %s about the following:",
+                            "Nag author: '%s' of '%s' about the following: %s",
                             plugin.getDescription().getAuthors().get(0),
                             plugin.getDescription().getName(),
                             ex.getMessage()

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -236,6 +236,7 @@ public void clearPlugins() {
             plugins.clear();
             lookupNames.clear();
             listeners.clear();
+            fileAssociations.clear();
         }
     }
 

File: paper-api/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
Patch:
@@ -3,7 +3,7 @@
 import org.bukkit.entity.Player;
 
 public class PlayerCommandPreprocessEvent extends PlayerChatEvent {
-    public PlayerCommandPreprocessEvent(Player player, String message) {
-        super(player, message);
+    public PlayerCommandPreprocessEvent(final Player player, final String message) {
+        super(Type.PLAYER_COMMAND_PREPROCESS, player, message);
     }
 }

File: paper-api/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
Patch:
@@ -15,7 +15,7 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
     private boolean cancelled;
     
     public VehicleDamageEvent(Vehicle vehicle, Entity attacker, int damage) {
-        super(Type.ENTITY_DAMAGE, vehicle);
+        super(Type.VEHICLE_DAMAGE, vehicle);
         this.attacker = attacker;
         this.damage = damage;
     }

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -509,7 +509,7 @@ public void enablePlugin(final Plugin plugin) {
             }
 
             jPlugin.setEnabled(true);
-            server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_ENABLE, plugin));
+            server.getPluginManager().callEvent(new PluginEnableEvent(plugin));
         }
     }
 
@@ -524,7 +524,7 @@ public void disablePlugin(Plugin plugin) {
 
             jPlugin.setEnabled(false);
 
-            server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_DISABLE, plugin));
+            server.getPluginManager().callEvent(new PluginDisableEvent(plugin));
 
             loaders.remove(jPlugin.getDescription().getName());
 

File: paper-api/src/main/java/org/bukkit/material/Step.java
Patch:
@@ -51,10 +51,13 @@ public void setMaterial(Material material) {
         switch (material) {
         case SANDSTONE:
             setData((byte) 0x1);
+            break;
         case WOOD:
             setData((byte) 0x2);
+            break;
         case COBBLESTONE:
             setData((byte) 0x3);
+            break;
         case STONE:
         default:
             setData((byte) 0x0);

File: paper-api/src/main/java/org/bukkit/entity/CreatureType.java
Patch:
@@ -9,6 +9,7 @@ public enum CreatureType {
     COW("Cow"),
     CREEPER("Creeper"),
     GHAST("Ghast"),
+    GIANT("Giant"),
     PIG("Pig"),
     PIG_ZOMBIE("PigZombie"),
     SHEEP("Sheep"),

File: paper-api/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
Patch:
@@ -30,7 +30,7 @@ public PlayerInteractEvent(Player who, Action action, ItemStack item, Block clic
         this.blockClicked = clickedBlock;
         this.blockFace = clickedFace;
 
-        useItemInHand = item == null ? Result.DENY : Result.DEFAULT;
+        useItemInHand = Result.DEFAULT;
         useClickedBlock = clickedBlock == null ? Result.DENY : Result.ALLOW;
     }
 
@@ -65,6 +65,7 @@ public boolean isCancelled() {
      */
     public void setCancelled(boolean cancel) {
         setUseInteractedBlock(cancel ? Result.DENY : useInteractedBlock() == Result.DENY ? Result.DEFAULT : useInteractedBlock());
+        setUseItemInHand(cancel ? Result.DENY : useItemInHand() == Result.DENY ? Result.DEFAULT : useItemInHand());
     }
 
     /**

File: paper-api/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
Patch:
@@ -30,7 +30,7 @@ public PlayerInteractEvent(Player who, Action action, ItemStack item, Block clic
         this.blockClicked = clickedBlock;
         this.blockFace = clickedFace;
 
-        useItemInHand = item == null ? Result.DENY : Result.ALLOW;
+        useItemInHand = item == null ? Result.DENY : Result.DEFAULT;
         useClickedBlock = clickedBlock == null ? Result.DENY : Result.ALLOW;
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -49,11 +49,12 @@ public CraftServer(MinecraftServer console, ServerConfigurationManager server) {
         this.server = server;
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
 
-        pluginManager.registerInterface(JavaPluginLoader.class);
         Logger.getLogger("Minecraft").log(Level.INFO, "This server is running " + getName() + " version " + getVersion());
     }
 
     public void loadPlugins() {
+        pluginManager.registerInterface(JavaPluginLoader.class);
+
         File pluginFolder = (File)console.options.valueOf("plugins");
 
         if (pluginFolder.exists()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.bukkit.command.*;
 import org.bukkit.entity.Player;
+import org.bukkit.event.world.WorldLoadEvent;
+
 import java.io.File;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
@@ -30,8 +32,6 @@
 import org.bukkit.plugin.java.JavaPluginLoader;
 import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
-import org.bukkit.event.Event.Type;
-import org.bukkit.event.world.WorldEvent;
 
 public final class CraftServer implements Server {
     private final String serverName = "Craftbukkit";
@@ -334,7 +334,7 @@ public World getWorld(String name) {
     protected void addWorld(World world) {
         worlds.put(world.getName().toLowerCase(), world);
 
-        pluginManager.callEvent(new WorldEvent(Type.WORLD_LOAD, world));
+        pluginManager.callEvent(new WorldLoadEvent(world));
     }
 
     public Logger getLogger() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -67,7 +67,7 @@ public int getHighestBlockYAt(int x, int z) {
 
     public Location getSpawnLocation() {
         ChunkCoordinates spawn = world.l();
-        return new Location(this, spawn.a, world.e(spawn.a, spawn.c), spawn.c);
+        return new Location(this, spawn.a, spawn.b, spawn.c);
     }
     
     public boolean setSpawnLocation(int x, int y, int z) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -332,7 +332,7 @@ public World getWorld(String name) {
     protected void addWorld(World world) {
         worlds.put(world.getName().toLowerCase(), world);
 
-        pluginManager.callEvent(new WorldEvent(Type.WORLD_LOADED, world));
+        pluginManager.callEvent(new WorldEvent(Type.WORLD_LOAD, world));
     }
 
     public Logger getLogger() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -45,6 +45,7 @@ public CraftWorld(WorldServer world) {
     }
 
     public void preserveChunk( CraftChunk chunk ) {
+        chunk.breakLink();
         unloadedChunks.put( (chunk.getX() << 16) + chunk.getZ(), chunk );
     }
 
@@ -141,6 +142,7 @@ public boolean unloadChunk(int x, int z, boolean save, boolean safe) {
             provider.a(chunk);
         }
 
+        preserveChunk((CraftChunk)chunk.bukkitChunk);
         provider.a.remove(x, z);
         provider.e.remove(x, z);
         provider.f.remove(chunk);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -118,7 +118,7 @@ public Player getPlayer(final String name) {
                     found = player;
                     delta = curDelta;
                 }
-                if(curDelta == 0) break;
+                if (curDelta == 0) break;
             }
         }
         return found;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -155,7 +155,7 @@ public boolean regenerateChunk(int x, int z) {
 
         net.minecraft.server.Chunk chunk = null;
 
-        if(provider.c == null) {
+        if (provider.c == null) {
             chunk = provider.b;
         } else {
             chunk = provider.c.b(x, z);
@@ -169,7 +169,7 @@ public boolean regenerateChunk(int x, int z) {
     }
 
     public boolean refreshChunk(int x, int z) {
-        if(!isChunkLoaded(x, z)) {
+        if (!isChunkLoaded(x, z)) {
             return false;
         }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -61,7 +61,7 @@ public double getEyeHeight() {
     }
 
     public double getEyeHeight(boolean ignoreSneaking) {
-        if(ignoreSneaking) {
+        if (ignoreSneaking) {
             return 1.62D;
         } else {
             if (isSneaking()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVehicle.java
Patch:
@@ -19,7 +19,7 @@ public Entity getPassenger() {
     }
 
     public boolean setPassenger(Entity passenger) {
-        if(passenger instanceof CraftEntity){
+        if (passenger instanceof CraftEntity){
             ((CraftEntity)passenger).getHandle().setPassengerOf(getHandle());
             return true;
         } else {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -162,10 +162,10 @@ public boolean isChunkInUse(int x, int z) {
             // This is larger than the distance of loaded chunks that actually surround a player
             // The player is the center of a 21x21 chunk grid, so the edge is 10 chunks (160 blocks) away from the player
             if (Math.abs(loc.getBlockX() - (x << 4)) <= 256 && Math.abs(loc.getBlockZ() - (z << 4)) <= 256) {
-                return false;
+                return true;
             }
         }
-        return true;
+        return false;
     }
 
     public boolean loadChunk(int x, int z, boolean generate) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -22,6 +22,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
+        name = getName();
     }
 
     public boolean isOp() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -170,9 +170,7 @@ public void teleportTo(Location location) {
             entity.a.e = newEntity;
             entity = newEntity;
         } else {
-            oldWorld.manager.b(entity);
             entity.a.a(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
-            newWorld.manager.a(entity);
         }
     }
 
@@ -181,7 +179,7 @@ public void setSneaking(boolean sneak) {
     }
 
     public boolean isSneaking() {
-        return entity.J();
+        return entity.U();
     }
     
     public void updateInventory() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
Patch:
@@ -11,6 +11,7 @@ public class CraftItem extends CraftEntity implements Item {
 
     public CraftItem(CraftServer server, EntityItem entity) {
         super(server, entity);
+        this.item = entity;
     }
 
     public ItemStack getItemStack() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -30,7 +30,7 @@
 public final class CraftServer implements Server {
     private final String serverName = "Craftbukkit";
     private final String serverVersion;
-    private final String protocolVersion = "1.2_01";
+    private final String protocolVersion = "1.3";
     private final PluginManager pluginManager = new SimplePluginManager(this);
     private final BukkitScheduler scheduler =  new CraftScheduler(this);
     private final CommandMap commandMap = new SimpleCommandMap(this);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -28,7 +28,7 @@ public CraftPlayer(CraftServer server, EntityPlayer entity) {
     }
 
     public boolean isOp() {
-        return server.getHandle().g(getName());
+        return server.getHandle().h(getName());
     }
 
     public boolean isPlayer() {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -278,7 +278,7 @@ public BlockState getState() {
             case DISPENSER:
                 return new CraftDispenser(this);
             case MOB_SPAWNER:
-                return new CraftMobSpawner(this);
+                return new CraftCreatureSpawner(this);
             case NOTE_BLOCK:
                 return new CraftNoteBlock(this);
             default:

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -123,6 +123,7 @@ public boolean unloadChunk(int x, int z, boolean save, boolean safe) {
             provider.a(chunk);
         }
 
+        provider.a.remove(x, z);
         provider.a.remove(x, z);
         provider.e.remove(x, z);
         provider.f.remove(chunk);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -4,7 +4,7 @@
 import org.bukkit.entity.Player;
 import java.io.File;
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
@@ -34,7 +34,7 @@ public final class CraftServer implements Server {
     private final CommandMap commandMap = new SimpleCommandMap(this);
     protected final MinecraftServer console;
     protected final ServerConfigurationManager server;
-    private final Map<String, World> worlds = new HashMap<String, World>();
+    private final Map<String, World> worlds = new LinkedHashMap<String, World>();
 
     public CraftServer(MinecraftServer console, ServerConfigurationManager server) {
         this.console = console;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -73,11 +73,12 @@ public boolean isChunkLoaded(int x, int z) {
     }
 
     public Chunk[] getLoadedChunks() {
-        net.minecraft.server.Chunk[] chunks = (net.minecraft.server.Chunk[])provider.e.values().toArray();
+        Object[] chunks = provider.e.values().toArray();
         org.bukkit.Chunk[] craftChunks = new CraftChunk[chunks.length];
 
         for (int i = 0; i < chunks.length; i++) {
-            craftChunks[i] = chunks[i].bukkitChunk;
+            net.minecraft.server.Chunk chunk = (net.minecraft.server.Chunk)chunks[i];
+            craftChunks[i] = chunk.bukkitChunk;
         }
 
         return craftChunks;

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -227,7 +227,7 @@ private Material(final int id, final Class<? extends MaterialData> data) {
     }
 
     private Material(final int id, final int stack, final Class<? extends MaterialData> data) {
-        this(id, -1, stack, data);
+        this(id, stack, -1, data);
     }
 
     private Material(final int id, final int stack, final int durability, final Class<? extends MaterialData> data) {

File: paper-api/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
Patch:
@@ -1,7 +1,6 @@
 
 package org.bukkit.event.player;
 
-import java.util.IllegalFormatException;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -199,7 +199,7 @@ public enum Material {
     SUGAR(353),
     CAKE(354, 1),
     BED(355),
-    DIODE(100),
+    DIODE(356),
     GOLD_RECORD(2256, 1),
     GREEN_RECORD(2257, 1);
 

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -198,7 +198,7 @@ public enum Material {
     BONE(352),
     SUGAR(353),
     CAKE(354, 1),
-    BED(99),
+    BED(355),
     DIODE(100),
     GOLD_RECORD(2256, 1),
     GREEN_RECORD(2257, 1);

File: paper-api/src/main/java/org/bukkit/entity/CreatureType.java
Patch:
@@ -15,7 +15,8 @@ public enum CreatureType {
     SKELETON("Skeleton"),
     SPIDER("Spider"),
     ZOMBIE("Zombie"),
-    SQUID("Squid");
+    SQUID("Squid"),
+    SLIME("Slime");
 
     private String name;
 

File: paper-api/src/main/java/org/bukkit/entity/MobType.java
Patch:
@@ -18,7 +18,8 @@ public enum MobType {
     SKELETON("Skeleton"),
     SPIDER("Spider"),
     ZOMBIE("Zombie"),
-    SQUID("Squid");
+    SQUID("Squid"),
+    SLIME("Slime");
 
     private String name;
 

File: paper-api/src/main/java/org/bukkit/plugin/RegisteredListener.java
Patch:
@@ -3,7 +3,6 @@
 
 import org.bukkit.event.Event;
 import org.bukkit.event.Listener;
-import org.bukkit.plugin.EventExecutor;
 
 /**
  * Stores relevant information for plugin listeners

File: paper-api/src/main/java/org/bukkit/block/MobSpawner.java
Patch:
@@ -6,6 +6,8 @@
  * Represents a mob spawner.
  * 
  * @author sk89q
+ * 
+ * @deprecated
  */
 public interface MobSpawner extends BlockState {
     /**

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -123,7 +123,7 @@ public void teleportTo(Location location) {
         if (oldWorld != newWorld) {
             manager.c.k.a(entity);
             manager.c.k.b(entity);
-            manager.d.b(entity);
+            oldWorld.manager.b(entity);
             manager.b.remove(entity);
             oldWorld.e(entity);
 
@@ -136,7 +136,7 @@ public void teleportTo(Location location) {
             newWorld.A.d((int) location.getBlockX() >> 4, (int) location.getBlockZ() >> 4);
 
             newEntity.a.a(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
-            manager.d.a(newEntity);
+            newWorld.manager.a(newEntity);
             newWorld.a(newEntity);
             manager.b.add(newEntity);
             newEntity.l();

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -120,6 +120,7 @@ public void teleportTo(Location location) {
             server.getServer().f.d.b(entity);
 
             entity.c = new ItemInWorldManager(((CraftWorld)location.getWorld()).getHandle());
+            entity.c.a = entity;
         }
         entity.world = ((CraftWorld)location.getWorld()).getHandle();
         entity.b(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -118,13 +118,14 @@ public void teleportTo(Location location) {
         if (worldChange) {
             // Unload player from current chunks
             server.getServer().f.d.b(entity);
+
+            entity.c = new ItemInWorldManager(((CraftWorld)location.getWorld()).getHandle());
         }
         entity.world = ((CraftWorld)location.getWorld()).getHandle();
         entity.b(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         if (worldChange) {
             // Forceload the chunks around player
             server.getServer().f.d.a(entity);
-            entity.c = new ItemInWorldManager(((CraftWorld)location.getWorld()).getHandle());
         }
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -4,6 +4,7 @@
 import java.net.SocketAddress;
 import net.minecraft.server.EntityHuman;
 import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.ItemInWorldManager;
 import net.minecraft.server.Packet;
 import net.minecraft.server.Packet3Chat;
 import net.minecraft.server.Packet6SpawnPosition;
@@ -123,6 +124,7 @@ public void teleportTo(Location location) {
         if (worldChange) {
             // Forceload the chunks around player
             server.getServer().f.d.a(entity);
+            entity.c = new ItemInWorldManager(((CraftWorld)location.getWorld()).getHandle());
         }
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -5,6 +5,7 @@
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.util.Vector;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
@@ -105,6 +106,7 @@ public World getWorld() {
     }
 
     public void teleportTo(Location location) {
+        entity.world = ((CraftWorld)location.getWorld()).getHandle();
         entity.b(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
     }
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -209,7 +209,7 @@ public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
                     } else {
                         // More than a single stack!
                         if (item.getAmount() > getMaxItemStack()) {
-                            setItem( firstFree, new CraftItemStack(item.getTypeId(), getMaxItemStack(), item.getDamage()));
+                            setItem( firstFree, new CraftItemStack(item.getTypeId(), getMaxItemStack(), item.getDurability()));
                             item.setAmount(item.getAmount() - getMaxItemStack());
                         } else {
                             // Just store it

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -209,7 +209,7 @@ public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
                     } else {
                         // More than a single stack!
                         if (item.getAmount() > getMaxItemStack()) {
-                            setItem( firstFree, new CraftItemStack(item.getTypeId(), getMaxItemStack()));
+                            setItem( firstFree, new CraftItemStack(item.getTypeId(), getMaxItemStack(), item.getDamage()));
                             item.setAmount(item.getAmount() - getMaxItemStack());
                         } else {
                             // Just store it

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
Patch:
@@ -103,7 +103,7 @@ public int hashCode() {
     }
 
     public void kickPlayer(String message) {
-        entity.a.a(message);
+        entity.a.a(message == null ? "" : message);
     }
 
     public void setCompassTarget(Location loc) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -19,7 +19,7 @@
 
 public final class CraftServer implements Server {
     private final String serverName = "Craftbukkit";
-	private final String serverVersion;
+    private final String serverVersion;
     private final String protocolVersion = "1.2_01";
     private final PluginManager pluginManager = new SimplePluginManager(this);
     private final CommandMap commandMap = new SimpleCommandMap(this);
@@ -29,7 +29,7 @@ public final class CraftServer implements Server {
     public CraftServer(MinecraftServer console, ServerConfigurationManager server) {
         this.console = console;
         this.server = server;
-		this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
+        this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
 
         pluginManager.RegisterInterface(JavaPluginLoader.class);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
Patch:
@@ -184,7 +184,7 @@ public boolean update(boolean force) {
 
     private void createData(final byte data) {
         Material mat = Material.getMaterial(type);
-        if (mat == null) {
+        if (mat == null || mat.getData() == null) {
             this.data = new MaterialData(type, data);
         } else {
             this.data = mat.getNewData(data);

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -7,7 +7,7 @@
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.util.Vector;
 
-public class CraftEntity implements org.bukkit.entity.Entity {
+public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected final CraftServer server;
     private Entity entity;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
Patch:
@@ -7,7 +7,7 @@
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.util.Vector;
 
-public abstract class CraftEntity implements org.bukkit.entity.Entity {
+public class CraftEntity implements org.bukkit.entity.Entity {
     protected final CraftServer server;
     private Entity entity;
 

File: paper-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVehicle.java
Patch:
@@ -16,7 +16,7 @@ public CraftVehicle(CraftServer server, net.minecraft.server.Entity entity) {
     }
 
     public Entity getPassenger() {
-        return (getHandle().j.getBukkitEntity());
+        return isEmpty()?null:(getHandle().j.getBukkitEntity());
     }
     
     public boolean setPassenger(Entity passenger) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -64,7 +64,7 @@ public Chunk getChunkAt(int x, int z) {
     }
 
     public Chunk getChunkAt(Block block) {
-        return getChunkAt(block.getX() << 4, block.getZ() << 4);
+        return getChunkAt(block.getX() >> 4, block.getZ() >> 4);
     }
 
     public boolean isChunkLoaded(Chunk chunk) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -30,7 +30,7 @@ public CraftBlock(final CraftWorld world, final int x, final int y, final int z,
         this.type = type;
         this.data = data;
         this.light = (byte)world.getHandle().j(x, y, z);
-        this.chunk = (CraftChunk)world.getChunkAt(x << 4, z << 4);
+        this.chunk = (CraftChunk)world.getChunkAt(x >> 4, z >> 4);
     }
 
     protected CraftBlock(final CraftWorld world, final int x, final int y,
@@ -42,7 +42,7 @@ protected CraftBlock(final CraftWorld world, final int x, final int y,
         this.type = type;
         this.data = data;
         this.light = light;
-        this.chunk = (CraftChunk)world.getChunkAt(x << 4, z << 4);
+        this.chunk = (CraftChunk)world.getChunkAt(x >> 4, z >> 4);
     }
 
     /**

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -83,11 +83,11 @@ public Player getPlayer(final String name) {
         for (Player player : players) {
             if (player.getName().toLowerCase().startsWith(lowerName)) {
                 int curDelta = player.getName().length() - lowerName.length();
-                if(curDelta == 0) break;
                 if (curDelta < delta) {
                     found = player;
                     delta = curDelta;
                 }
+                if(curDelta == 0) break;
             }
         }
         return found;

File: paper-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
Patch:
@@ -50,7 +50,7 @@ public void setContents(ItemStack[] items) {
 
         for (int i = 0; i < items.length; i++ ) {
             ItemStack item = items[i];
-            if (item == null) {
+            if (item == null || item.getTypeId() <= 0) {
                 mcItems[i] = null;
             } else {
                 mcItems[i] = new net.minecraft.server.ItemStack( item.getTypeId(), item.getAmount(), item.getDamage());

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -35,6 +35,8 @@ public Block getBlockAt(int x, int y, int z) {
         if (block == null) {
             block = new CraftBlock(this, x, y, z, world.a(x, y, z), (byte)world.b(x, y, z));
             blockCache.put(loc, block);
+        } else {
+            block.update();
         }
 
         return block;

File: paper-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
Patch:
@@ -319,5 +319,6 @@ public Biome getBiome() {
     public void update() {
         type = world.getHandle().a(x, y, z);
         data = (byte)world.getHandle().b(x, y, z);
+        light = (byte)world.getHandle().j(x, y, z);
     }
 }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -148,8 +148,8 @@ public ItemDrop dropItemNaturally(Location loc, ItemStack item) {
         double zs = world.l.nextFloat() * 0.7F + (1.0F - 0.7F) * 0.5D;
         loc = loc.clone();
         loc.setX(loc.getX() + xs);
-        loc.setX(loc.getY() + ys);
-        loc.setX(loc.getZ() + zs);
+        loc.setY(loc.getY() + ys);
+        loc.setZ(loc.getZ() + zs);
         return dropItem(loc, item);
     }
 

File: paper-api/src/main/java/org/bukkit/material/Button.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.material;
 
 import org.bukkit.block.BlockFace;
@@ -40,7 +39,7 @@ public boolean isPowered() {
      * @return BlockFace attached to
      */
     public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() ^ 0x7);
+        byte data = (byte) (getData() & 0x7);
 
         switch (data) {
             case 0x1:

File: paper-api/src/main/java/org/bukkit/material/Lever.java
Patch:
@@ -1,4 +1,3 @@
-
 package org.bukkit.material;
 
 import org.bukkit.block.BlockFace;
@@ -40,7 +39,7 @@ public boolean isPowered() {
      * @return BlockFace attached to
      */
     public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() ^ 0x7);
+        byte data = (byte) (getData() & 0x7);
 
         switch (data) {
             case 0x1:

File: paper-api/src/main/java/org/bukkit/Material.java
Patch:
@@ -225,7 +225,7 @@ private Material(final int id, final int stack, final Class<? extends MaterialDa
         this(id, -1, stack, data);
     }
 
-    private Material(final int id, final int durability, final int stack, final Class<? extends MaterialData> data) {
+    private Material(final int id, final int stack, final int durability, final Class<? extends MaterialData> data) {
         this.id = id;
         this.durability = (short)durability;
         this.maxStack = stack;

File: paper-api/src/main/java/org/bukkit/event/Event.java
Patch:
@@ -363,7 +363,7 @@ public enum Type {
         PLUGIN_DISABLE (Category.SERVER),
 
         /**
-         * Called when a plugin is disabled
+         * Called when a server command is called
          *
          * @see org.bukkit.event.server.PluginEvent
          */

File: paper-api/src/main/java/org/bukkit/event/server/ServerListener.java
Patch:
@@ -28,6 +28,6 @@ public void onPluginDisabled(PluginEvent event) {
      *
      * @param event Relevant event details
      */
-    public void onServerCommand(PluginEvent event) {
+    public void onServerCommand(ServerCommandEvent event) {
     }
 }

File: paper-api/src/main/java/org/bukkit/plugin/PluginLoader.java
Patch:
@@ -33,7 +33,7 @@ public interface PluginLoader {
      * @param type Type of the event executor to create
      * @param listener the object that will handle the eventual call back
      */
-    public IExecutor createExecutor(Event.Type type, Listener listener);
+    public EventExecutor createExecutor(Event.Type type, Listener listener);
 
     /**
      * Enables the specified plugin

File: paper-api/src/main/java/org/bukkit/plugin/PluginManager.java
Patch:
@@ -108,11 +108,11 @@ public interface PluginManager {
      *
      * @param type EventType to register
      * @param listener Listener to register
-     * @param executor IExecutor to register
+     * @param executor EventExecutor to register
      * @param priority Priority of this event
      * @param plugin Plugin to register
      */
-    public void registerEvent(Event.Type type, Listener listener, IExecutor executor, Priority priority, Plugin plugin);
+    public void registerEvent(Event.Type type, Listener listener, EventExecutor executor, Priority priority, Plugin plugin);
 
     /**
      * Enables the specified plugin

File: paper-api/src/main/java/org/bukkit/plugin/RegisteredListener.java
Patch:
@@ -3,7 +3,7 @@
 
 import org.bukkit.event.Event;
 import org.bukkit.event.Listener;
-import org.bukkit.plugin.IExecutor;
+import org.bukkit.plugin.EventExecutor;
 
 /**
  * Stores relevant information for plugin listeners
@@ -12,9 +12,9 @@ public class RegisteredListener {
     private final Listener listener;
     private final Event.Priority priority;
     private final Plugin plugin;
-    private final IExecutor executor;
+    private final EventExecutor executor;
 
-    public RegisteredListener(final Listener pluginListener, final IExecutor eventExecutor, final Event.Priority eventPriority, final Plugin registeredPlugin ) {
+    public RegisteredListener(final Listener pluginListener, final EventExecutor eventExecutor, final Event.Priority eventPriority, final Plugin registeredPlugin ) {
         listener = pluginListener;
         priority = eventPriority;
         plugin = registeredPlugin;

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -231,14 +231,15 @@ public void registerEvent(Event.Type type, Listener listener, Priority priority,
     }
 
     /**
-     * Registers the given event to the specified listener
+     * Registers the given event to the specified listener using a directly passed EventExecutor
      *
      * @param type EventType to register
      * @param listener PlayerListener to register
+     * @param executor EventExecutor to register
      * @param priority Priority of this event
      * @param plugin Plugin to register
      */
-    public void registerEvent(Event.Type type, Listener listener, IExecutor executor, Priority priority, Plugin plugin) {
+    public void registerEvent(Event.Type type, Listener listener, EventExecutor executor, Priority priority, Plugin plugin) {
         getEventListeners( type ).offer(new RegisteredListener(listener, executor, priority, plugin));
     }
 

File: paper-api/src/main/java/org/bukkit/command/PluginCommand.java
Patch:
@@ -13,15 +13,15 @@ public PluginCommand(String name, Plugin owner) {
         this.usageMessage = "";
     }
 
-    public boolean execute(Player player, String commandLabel, String[] args) {
-        boolean cmdSuccess = owningPlugin.onCommand(player, this, commandLabel, args);
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        boolean cmdSuccess = owningPlugin.onCommand(sender, this, commandLabel, args);
         if (!cmdSuccess && !usageMessage.isEmpty()) {
             String tmpMsg = usageMessage.replace("<command>", commandLabel);
             String[] usageLines = tmpMsg.split("\\n");
             for(String line: usageLines) {
                 while (line.length() > 0) {
                     int stripChars = (line.length() > 53 ? 53:line.length());
-                    player.sendMessage(ChatColor.RED + line.substring(0, stripChars));
+                    sender.sendMessage(ChatColor.RED + line.substring(0, stripChars));
                     line = line.substring(stripChars);
                 }
             }

File: paper-api/src/main/java/org/bukkit/entity/MobType.java
Patch:
@@ -14,7 +14,8 @@ public enum MobType {
     SHEEP("Sheep"),
     SKELETON("Skeleton"),
     SPIDER("Spider"),
-    ZOMBIE("Zombie");
+    ZOMBIE("Zombie"),
+    SQUID("Squid");
 
     private String name;
     

File: paper-api/src/main/java/org/bukkit/event/entity/EntityDamageByProjectileEvent.java
Patch:
@@ -3,14 +3,15 @@
 import java.util.Random;
 
 import org.bukkit.entity.Entity;
+import org.bukkit.event.Event;
 
 public class EntityDamageByProjectileEvent extends EntityDamageByEntityEvent {
 
     private Entity projectile;
     private boolean bounce;
 
     public EntityDamageByProjectileEvent(Entity damager, Entity damagee, Entity projectile, DamageCause cause, int damage) {
-        super(damager, damagee, cause, damage);
+        super(Event.Type.ENTITY_DAMAGEDBY_PROJECTILE, damager, damagee, cause, damage);
         this.projectile = projectile;
         Random random = new Random();
         this.bounce = random.nextBoolean();

File: paper-api/src/main/java/org/bukkit/command/PluginCommand.java
Patch:
@@ -1,7 +1,5 @@
 package org.bukkit.command;
 
-import java.awt.Color;
-
 import org.bukkit.ChatColor;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
@@ -17,7 +15,7 @@ public PluginCommand(String name, Plugin owner) {
 
     public boolean execute(Player player, String commandLabel, String[] args) {
         boolean cmdSuccess = owningPlugin.onCommand(player, this, commandLabel, args);
-        if (!cmdSuccess && usageMessage != "") {
+        if (!cmdSuccess && !usageMessage.isEmpty()) {
             String tmpMsg = usageMessage.replace("<command>", commandLabel);
             String[] usageLines = tmpMsg.split("\\n");
             for(String line: usageLines) {

File: paper-api/src/main/java/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -217,7 +217,6 @@ public void callEvent(Event event) {
      */
     public void registerEvent(Event.Type type, Listener listener, Priority priority, Plugin plugin) {
         PriorityQueue<RegisteredListener> eventListeners = listeners.get(type);
-        int position = 0;
 
         if (eventListeners == null) {
             eventListeners = new PriorityQueue<RegisteredListener>(11,

File: paper-api/src/main/java/org/bukkit/material/Button.java
Patch:
@@ -40,7 +40,7 @@ public boolean isPowered() {
      * @return BlockFace attached to
      */
     public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() ^ 0x8);
+        byte data = (byte) (getData() ^ 0x7);
 
         switch (data) {
             case 0x1:

File: paper-api/src/main/java/org/bukkit/material/Lever.java
Patch:
@@ -40,7 +40,7 @@ public boolean isPowered() {
      * @return BlockFace attached to
      */
     public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() ^ 0x8);
+        byte data = (byte) (getData() ^ 0x7);
 
         switch (data) {
             case 0x1:

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -152,6 +152,9 @@ public void callEvent(RegisteredListener registration, Event event) {
                 case PLAYER_EGG_THROW:
                     trueListener.onPlayerEggThrow((PlayerEggThrowEvent)event);
                     break;
+                case PLAYER_ANIMATION:
+                    trueListener.onPlayerAnimation((PlayerAnimationEvent)event);
+                    break;                    
             }
         } else if (listener instanceof BlockListener) {
             BlockListener trueListener = (BlockListener)listener;

File: paper-api/src/main/java/org/bukkit/command/SimpleCommandMap.java
Patch:
@@ -33,13 +33,11 @@ public void registerAll(String fallbackPrefix, List<Command> commands) {
      * {@inheritDoc}
      */
     public boolean register(String name, String fallbackPrefix, Command command) {
-        boolean nameInUse = (knownCommands.get(command.getName()) != null);
+        boolean nameInUse = (knownCommands.get(name) != null);
         if (nameInUse)
             name = fallbackPrefix + ":" + name;
         
         knownCommands.put(name, command);
-        System.out.println("Adding cmd: " + name + " for plugin " + fallbackPrefix);
-        
         return !nameInUse;
     }
 

File: paper-api/src/main/java/org/bukkit/inventory/Inventory.java
Patch:
@@ -104,15 +104,15 @@ public interface Inventory {
      * @param materialId The materialId to look for
      * @return The Slots found.
      */
-    public HashMap<Integer,ItemStack> all(int materialId); 
+    public HashMap<Integer, ? extends ItemStack> all(int materialId); 
 
     /**
      * Find all slots in the inventory containing any ItemStacks with the given material
      * 
      * @param materialId The material to look for
      * @return The Slots found.
      */
-    public HashMap<Integer,ItemStack> all(Material material); 
+    public HashMap<Integer, ? extends ItemStack> all(Material material); 
 
     /**
      * Find all slots in the inventory containing any ItemStacks with the given ItemStack
@@ -121,7 +121,7 @@ public interface Inventory {
      * @param item The ItemStack to match against
      * @return The Slots found.
      */
-    public HashMap<Integer,ItemStack> all(ItemStack item);
+    public HashMap<Integer, ? extends ItemStack> all(ItemStack item);
 
     /**
      * Find the first slot in the inventory containing an ItemStack with the given materialId

File: paper-api/src/main/java/org/bukkit/inventory/PlayerInventory.java
Patch:
@@ -74,7 +74,7 @@ public interface PlayerInventory extends Inventory {
     /**
      * Returns the ItemStack currently hold
      * 
-     * @return The currently holded ItemStack
+     * @return The currently held ItemStack
      */
     public ItemStack getItemInHand();
 

File: paper-api/src/main/java/org/bukkit/event/Event.java
Patch:
@@ -257,7 +257,7 @@ public enum Type {
         /**
          * Called when a player is attempting to place a block
          *
-         * @see org.bukkit.event.block.BlockRightClickeEvent
+         * @see org.bukkit.event.block.BlockRightClickEvent
          */
         BLOCK_RIGHTCLICKED (Category.BLOCK),
 
@@ -366,14 +366,14 @@ public enum Type {
          * If a new chunk is being generated for loading, it will call
          * Type.CHUNK_GENERATION and then Type.CHUNK_LOADED upon completion
          *
-         * @see org.bukkit.event.world.ChunkLoadeEvent
+         * @see org.bukkit.event.world.ChunkLoadEvent
          */
         CHUNK_LOADED (Category.WORLD),
 
         /**
          * Called when a chunk is unloaded
          *
-         * @see org.bukkit.event.world.ChunkUnloadeEvent
+         * @see org.bukkit.event.world.ChunkUnloadEvent
          */
         CHUNK_UNLOADED (Category.WORLD),
 

File: paper-api/src/main/java/org/bukkit/plugin/Plugin.java
Patch:
@@ -10,7 +10,8 @@
  */
 public interface Plugin {
     /**
-     * Returns the folder that the plugin data's files are located in.
+     * Returns the folder that the plugin data's files are located in. The
+     * folder may not yet exist.
      * 
      * @return
      */

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -42,7 +42,8 @@ public JavaPlugin(PluginLoader pluginLoader, Server instance,
     }
 
     /**
-     * Returns the folder that the plugin data's files are located in.
+     * Returns the folder that the plugin data's files are located in. The
+     * folder may not yet exist.
      * 
      * @return
      */

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -100,7 +100,7 @@ private File getDataFolder(File file) {
             dataFolder = new File(file.getParentFile(), filename + "_");
         }
         
-        dataFolder.mkdirs();
+        //dataFolder.mkdirs();
         
         return dataFolder;
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -139,7 +139,7 @@ public ItemDrop dropItemNaturally(Location loc, ItemStack item) {
     public Arrow spawnArrow(Location loc, Vector velocity, float speed,
             float spread) {
         EntityArrow arrow = new EntityArrow(world);
-        arrow.c(loc.getX(), loc.getY(), loc.getZ());
+        arrow.c(loc.getX(), loc.getY(), loc.getZ(), 0, 0);
         world.a(arrow);
         arrow.a(velocity.getX(), velocity.getY(), velocity.getZ(), speed, spread);
         return new CraftArrow(world.getServer(), arrow);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftItemStack.java
Patch:
@@ -48,7 +48,7 @@ public void setTypeID(int type) {
     @Override
     public int getAmount() {
         super.setAmount(item != null ? item.a : 0); // sync, needed?
-        return item.a;
+        return (item != null ? item.a : 0);
     }
 
     @Override

File: paper-api/src/main/java/org/bukkit/PlayerInventory.java
Patch:
@@ -1,7 +1,5 @@
 package org.bukkit;
 
-import java.util.ArrayList;
-
 /**
  * Includes interface to the 4 armor slots
  */
@@ -11,7 +9,7 @@ public interface PlayerInventory extends Inventory {
      * 
      * @return All the ItemStacks from the armor slots
      */
-    public ArrayList<ItemStack> getArmorContents();
+    public ItemStack[] getArmorContents();
 
     /**
      * Return the ItemStack from the helmet slot

File: paper-api/src/main/java/org/bukkit/Block.java
Patch:
@@ -128,8 +128,9 @@ public interface Block {
      * Sets the type-ID of this block
      *
      * @param type Type-ID to change this block to
+     * @return whether the block was changed
      */
-    void setTypeID(int type);
+    boolean setTypeID(int type);
 
     /**
      * Gets the face relation of this block compared to the given block<br />

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftBlock.java
Patch:
@@ -117,10 +117,11 @@ public void setType(final Material type) {
      * Sets the type-ID of this block
      *
      * @param type Type-ID to change this block to
+     * @return whether the block was changed
      */
-    public void setTypeID(final int type) {
+    public boolean setTypeID(final int type) {
         this.type = type;
-        world.getHandle().d(x, y, z, type);
+        return world.getHandle().d(x, y, z, type);
     }
 
     /**

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -26,7 +26,9 @@ public CraftServer(MinecraftServer console, ServerConfigurationManager server) {
         this.server = server;
 
         pluginManager.RegisterInterface(JavaPluginLoader.class);
-
+    }
+    
+    public void loadPlugins() {
         File pluginFolder = (File)console.options.valueOf("plugins");
 
         if (pluginFolder.exists()) {

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftLivingEntity.java
Patch:
@@ -45,15 +45,13 @@ public String toString() {
         return "CraftLivingEntity{" + "id=" + getEntityID() + '}';
     }
 
-    @Override
     public Egg throwEgg() {
         net.minecraft.server.World world = ((CraftWorld)getWorld()).getHandle();
         EntityEgg egg = new EntityEgg(world, entity);
         world.a(egg);
         return new CraftEgg(server, egg);
     }
 
-    @Override
     public Snowball throwSnowball() {
         net.minecraft.server.World world = ((CraftWorld)getWorld()).getHandle();
         EntitySnowball snowball = new EntitySnowball(world, entity);

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftMinecart.java
Patch:
@@ -38,7 +38,6 @@ public CraftMinecart(CraftServer server, EntityMinecart entity) {
         minecart = entity;
     }
 
-    @Override
     public Vector getVelocity() {
         return new Vector(minecart.s, minecart.t, minecart.u);
     }

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -9,6 +9,7 @@
 import net.minecraft.server.WorldGenBigTree;
 import net.minecraft.server.WorldServer;
 import net.minecraft.server.EntityArrow;
+import net.minecraft.server.WorldGenTrees;
 import org.bukkit.Arrow;
 import org.bukkit.Block;
 import org.bukkit.Chunk;

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftBlock.java
Patch:
@@ -152,7 +152,7 @@ public String toString() {
     
     /**
      * Notch uses a 0-5 to mean Down, Up, East, West, North, South
-     * in that order all over. This method is convience to convert for us.
+     * in that order all over. This method is convenience to convert for us.
      * 
      * @return BlockFace the BlockFace represented by this number
      */

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
Patch:
@@ -54,8 +54,8 @@ public Chunk getChunkAt(Block block) {
         return getChunkAt(block.getX() << 4, block.getZ() << 4);
     }
 
-    public boolean isChunkLoaded() {
-        throw new UnsupportedOperationException("Not supported yet.");
+    public boolean isChunkLoaded(Chunk chunk) {
+        return world.A.a(chunk.getX(), chunk.getZ());
     }
 
     public Block updateBlock(int x, int y, int z) {

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -144,7 +144,7 @@ public void enablePlugin(final Plugin plugin) {
             throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");
         }
 
-        if (plugin.isEnabled()) {
+        if (!plugin.isEnabled()) {
             JavaPlugin jPlugin = (JavaPlugin)plugin;
 
             server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_ENABLE, plugin));
@@ -158,7 +158,7 @@ public void disablePlugin(Plugin plugin) {
             throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");
         }
 
-        if (!plugin.isEnabled()) {
+        if (plugin.isEnabled()) {
             JavaPlugin jPlugin = (JavaPlugin)plugin;
 
             server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_DISABLE, plugin));

File: paper-api/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -11,7 +11,7 @@
  * Represents a Java plugin
  */
 public abstract class JavaPlugin implements Plugin {
-    private boolean isEnabled = true;
+    private boolean isEnabled = false;
     private final PluginLoader loader;
     private final Server server;
     private final File file;

File: paper-api/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
Patch:
@@ -17,6 +17,7 @@ public final class PluginDescriptionFile {
     private String name = null;
     private String main = null;
 
+    @SuppressWarnings("unchecked")
     public PluginDescriptionFile(final InputStream stream) throws InvalidDescriptionException {
         try {
             loadMap((Map<String, Object>)yaml.load(stream));
@@ -29,10 +30,11 @@ public PluginDescriptionFile(final InputStream stream) throws InvalidDescription
      * Loads a PluginDescriptionFile from the specified reader
      * @param reader
      */
+    @SuppressWarnings("unchecked")
     public PluginDescriptionFile(final Reader reader) {
         loadMap((Map<String, Object>)yaml.load(reader));
     }
-
+ 
     /**
      * Creates a new PluginDescriptionFile with the given detailed
      *

File: paper-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -49,7 +49,7 @@ public String getVersion() {
     }
 
     public Player[] getOnlinePlayers() {
-        List<EntityPlayerMP> online = server.b;
+		List<EntityPlayerMP> online = server.b;
         Player[] players = new Player[online.size()];
 
         for (int i = 0; i < players.length; i++) {

File: paper-api/sample/src/com/dinnerbone/bukkit/sample/SamplePlugin.java
Patch:
@@ -41,6 +41,7 @@ private void registerEvents() {
         getServer().getPluginManager().registerEvent(Event.Type.PLAYER_COMMAND, playerListener, Priority.Normal, this);
         getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE, playerListener, Priority.Normal, this);
         getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS, blockListener, Priority.Normal, this);
+        getServer().getPluginManager().registerEvent(Event.Type.BLOCK_CANBUILD, blockListener, Priority.Normal, this);
     }
 
     public boolean isDebugging(final Player player) {

File: paper-api/src/org/bukkit/event/block/BlockPhysicsEvent.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.bukkit.Block;
 import org.bukkit.ItemStack;
+import org.bukkit.Material;
 import org.bukkit.event.Event;
 
 /**
@@ -33,7 +34,7 @@ public int getChangedTypeID() {
      * @return Changed block's type
      */
     public Material getChangedType() {
-        return Material.getType(changed); // TODO: Move type to its own file
+        return Material.getMaterial(changed);
     }
 
     /**

File: paper-api/src/org/bukkit/event/block/BlockPhysicsEvent.java
Patch:
@@ -32,8 +32,8 @@ public int getChangedTypeID() {
      *
      * @return Changed block's type
      */
-    public ItemStack.Type getChangedType() {
-        return ItemStack.Type.getType(changed); // TODO: Move type to its own file
+    public Material getChangedType() {
+        return Material.getType(changed); // TODO: Move type to its own file
     }
 
     /**

File: paper-api/src/org/bukkit/event/Event.java
Patch:
@@ -76,7 +76,8 @@ public enum Type {
         /** 
     	 * Block Events
     	 */
-        BLOCK_DAMAGED (Category.BLOCK),
+        BLOCK_BROKEN (Category.BLOCK),
+        BLOCK_CANBUILD (Category.BLOCK),
         BLOCK_FLOW (Category.BLOCK),
         BLOCK_IGNITE (Category.BLOCK),
         BLOCK_PHYSICS (Category.BLOCK),

File: paper-api/src/org/bukkit/event/block/BlockFlowEvent.java
Patch:
@@ -74,7 +74,7 @@ public boolean equals(Object o) {
     	}
     	
     	public boolean equals(BlockFlow flow) {
-    		return flow.flowDirection.equals(flow);
+    		return flowDirection.equals(flow.flowDirection);
     	}
     	
     	@Override

File: paper-api/src/org/bukkit/event/block/BlockRightClickedEvent.java
Patch:
@@ -6,8 +6,7 @@
 import org.bukkit.Block;
 
 /**
- * @author jmartin
- *
+ * Not implemented yet
  */
 public class BlockRightClickedEvent extends BlockEvent {
 

File: paper-server/src/org/bukkit/craftbukkit/CraftPlayer.java
Patch:
@@ -26,7 +26,7 @@ public boolean isOnline() {
     }
 
     public Location getLocation() {
-        return new Location(getWorld(), player.p, player.q, player.r);
+        return new Location(getWorld(), player.p, player.q, player.r, player.v, player.w);
     }
 
     public World getWorld() {

File: paper-api/src/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -194,7 +194,7 @@ public void registerEvent(Event.Type type, Listener listener, Priority priority,
         List<RegisteredListener> eventListeners = listeners.get(type);
         int position = 0;
 
-        if (listeners != null) {
+        if (eventListeners != null) {
             for (RegisteredListener registration : eventListeners) {
                 if (registration.getPriority().compareTo(priority) < 0) {
                     break;

File: paper-api/src/org/bukkit/plugin/SimplePluginManager.java
Patch:
@@ -170,7 +170,7 @@ public boolean isPluginEnabled(Plugin plugin) {
     public void callEvent(Event event) {
         List<RegisteredListener> eventListeners = listeners.get(event.getType());
 
-        if (listeners != null) {
+        if (eventListeners != null) {
             for (RegisteredListener registration : eventListeners) {
                 Plugin plugin = registration.getPlugin();
                 PluginLoader loader = plugin.getPluginLoader();

File: paper-api/sample/src/com/dinnerbone/bukkit/sample/SamplePlugin.java
Patch:
@@ -34,7 +34,7 @@ public void onEnable() {
     }
 
     private void registerEvents() {
-        getServer().getPluginManager().registerEvent(Event.Type.JOIN, playerListener, Priority.Normal, this);
-        getServer().getPluginManager().registerEvent(Event.Type.QUIT, playerListener, Priority.Normal, this);
+        getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN, playerListener, Priority.Normal, this);
+        getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT, playerListener, Priority.Normal, this);
     }
 }

File: paper-api/src/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -82,10 +82,10 @@ public void callEvent(RegisteredListener registration, Event event) {
             PlayerListener trueListener = (PlayerListener)listener;
 
             switch (event.getType()) {
-                case JOIN:
+                case PLAYER_JOIN:
                     trueListener.onPlayerJoin((PlayerEvent)event);
                     break;
-                case QUIT:
+                case PLAYER_QUIT:
                     trueListener.onPlayerQuit((PlayerEvent)event);
                     break;
             }

File: paper-api/src/org/bukkit/plugin/PluginManager.java
Patch:
@@ -81,7 +81,7 @@ public Plugin[] loadPlugins(File directory) {
             }
         }
 
-        return (Plugin[])result.toArray();
+        return result.toArray(new Plugin[result.size()]);
     }
 
     /**

File: paper-server/src/org/bukkit/craftbukkit/CraftServer.java
Patch:
@@ -30,7 +30,7 @@ public CraftServer(MinecraftServer instance, String ver) {
         pluginManager.RegisterInterface(JavaPluginLoader.class);
         
         try {
-            pluginManager.loadPlugin(new File("sample.jar"));
+            pluginManager.loadPlugin(new File("SamplePlugin.jar"));
         } catch (InvalidPluginException ex) {
             Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, null, ex);
         } catch (Throwable ex) {

File: paper-api/src/org/bukkit/plugin/PluginManager.java
Patch:
@@ -110,7 +110,6 @@ public Plugin loadPlugin(File file) throws InvalidPluginException {
         if (result != null) {
             plugins.add(result);
             lookupNames.put(result.getDescription().getName(), result);
-            result.onInitialize();
         }
 
         return result;

File: paper-api/src/org/bukkit/plugin/java/JavaPlugin.java
Patch:
@@ -27,7 +27,7 @@ public abstract class JavaPlugin implements Plugin {
      * @param plugin File containing this plugin
      * @param cLoader ClassLoader which holds this plugin
      */
-    protected JavaPlugin(PluginLoader pluginLoader, Server instance, PluginDescriptionFile desc, File plugin, ClassLoader cLoader) {
+    public JavaPlugin(PluginLoader pluginLoader, Server instance, PluginDescriptionFile desc, File plugin, ClassLoader cLoader) {
         loader = pluginLoader;
         server = instance;
         file = plugin;

File: paper-api/src/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -28,15 +28,15 @@ public JavaPluginLoader(Server instance) {
     
     public Plugin loadPlugin(File file) throws InvalidPluginException {
         JavaPlugin result = null;
-        PluginDescriptionFile description = new PluginDescriptionFile("Sample Plugin", "org.bukkit.plugin.sample.main");
+        PluginDescriptionFile description = new PluginDescriptionFile("Sample Plugin", "com.dinnerbone.bukkit.sample.SamplePlugin");
 
         if (!file.exists()) {
             throw new InvalidPluginException(new FileNotFoundException(String.format("%s does not exist", file.getPath())));
         }
 
         try {
             ClassLoader loader = URLClassLoader.newInstance(new URL[]{file.toURI().toURL()}, getClass().getClassLoader());
-            Class<?> jarClass = Class.forName(description.getMain());
+            Class<?> jarClass = Class.forName(description.getMain(), true, loader);
             Class<? extends JavaPlugin> plugin = jarClass.asSubclass(JavaPlugin.class);
             Constructor<? extends JavaPlugin> constructor = plugin.getConstructor(PluginLoader.class, Server.class, PluginDescriptionFile.class, File.class, ClassLoader.class);
 

File: paper-api/src/org/bukkit/plugin/java/JavaPluginLoader.java
Patch:
@@ -41,7 +41,7 @@ public Plugin loadPlugin(File file) throws InvalidPluginException {
             Constructor<? extends JavaPlugin> constructor = plugin.getConstructor(PluginLoader.class, Server.class, PluginDescriptionFile.class, File.class, ClassLoader.class);
 
             result = constructor.newInstance(this, server, description, file, loader);
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             throw new InvalidPluginException(ex);
         }
 

