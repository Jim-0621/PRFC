File: spider-flow-web/src/main/java/org/spiderflow/controller/SpiderFlowController.java
Patch:
@@ -3,6 +3,7 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.spiderflow.Grammerable;
@@ -164,7 +165,7 @@ public String xml(String id){
 
 	@RequestMapping("/log/download")
 	public ResponseEntity<FileSystemResource> download(String id, String taskId)  {
-		if (StringUtils.isBlank(taskId)) {
+		if (StringUtils.isBlank(taskId) || NumberUtils.toInt(taskId,0) == 0) {
 			Integer maxId = spiderFlowService.getFlowMaxTaskId(id);
 			taskId = maxId == null ? "" : maxId.toString();
 		}

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -192,7 +192,7 @@ public void executeNode(SpiderNode fromNode, SpiderNode node, SpiderContext cont
 			return;
 		}
 		//判断箭头上的条件，如果不成立则不执行
-		if (!executeCondition(fromNode, node, variables)) {
+		if (!executeCondition(fromNode, node, variables, context)) {
 			return;
 		}
 		logger.debug("执行节点[{}:{}]", node.getNodeName(), node.getNodeId());
@@ -270,7 +270,7 @@ public void executeNode(SpiderNode fromNode, SpiderNode node, SpiderContext cont
 	/**
 	 *	判断箭头上的表达式是否成立
 	 */
-	private boolean executeCondition(SpiderNode fromNode, SpiderNode node, Map<String, Object> variables) {
+	private boolean executeCondition(SpiderNode fromNode, SpiderNode node, Map<String, Object> variables, SpiderContext context) {
 		if (fromNode != null) {
 			boolean hasException = variables.get("ex") != null;
 			String exceptionFlow = node.getExceptionFlow(fromNode.getNodeId());

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/ExecuteSQLExecutor.java
Patch:
@@ -73,6 +73,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String, Object>
 					return;
 				}
 				sql = sqlObject.toString();
+				context.pause(node.getNodeId(),"common",SQL,sql);
 			} catch (Exception e) {
 				logger.error("获取sql出错,异常信息:{}", e.getMessage(), e);
 				ExceptionUtils.wrapAndThrow(e);
@@ -93,7 +94,6 @@ public void execute(SpiderNode node, SpiderContext context, Map<String, Object>
 						parameterSize = Math.max(parameterSize, Array.getLength(parameter));
 					}
 				}
-
 				params[i] = parameter;
 			}
 			String statementType = node.getStringJsonValue(STATEMENT_TYPE);

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/OutputExecutor.java
Patch:
@@ -75,6 +75,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 			String outputName = item.get(OUTPUT_NAME);
 			try {
 				value = ExpressionUtils.execute(outputValue, variables);
+				context.pause(node.getNodeId(),"common",outputName,value);
 				logger.debug("输出{}={}", outputName,value);
 			} catch (Exception e) {
 				logger.error("输出{}出错，异常信息：{}", outputName,e);

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/VariableExecutor.java
Patch:
@@ -36,6 +36,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 			try {
 				value = ExpressionUtils.execute(variableValue, variables);
 				logger.debug("设置变量{}={}",variableName,value);
+				context.pause(node.getNodeId(),"common",variableName,value);
 			} catch (Exception e) {
 				logger.error("设置变量{}出错，异常信息：{}",variableName,e);
 				ExceptionUtils.wrapAndThrow(e);

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -217,6 +217,8 @@ public void executeNode(SpiderNode fromNode, SpiderNode node, SpiderContext cont
 								}
 								//执行节点具体逻辑
 								executor.execute(node, context, nVariables);
+								//当未发生异常时，移除ex变量
+								nVariables.remove("ex");
 							} catch (Throwable t) {
 								nVariables.put("ex", t);
 								logger.error("执行节点[{}:{}]出错,异常信息：{}", node.getNodeName(), node.getNodeId(), t);

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -206,7 +206,7 @@ public void executeNode(SpiderNode fromNode, SpiderNode node, SpiderContext cont
 					if (!StringUtils.isBlank(loopVariableName)) {
 						nVariables.put(loopVariableName, i);
 					}
-					tasks.add(new SpiderTask(() -> {
+					tasks.add(new SpiderTask(TtlRunnable.get(() -> {
 						if (context.isRunning()) {
 							try {
 								//死循环检测，当执行节点次数大于阈值时，结束本次测试
@@ -222,7 +222,7 @@ public void executeNode(SpiderNode fromNode, SpiderNode node, SpiderContext cont
 								logger.error("执行节点[{}:{}]出错,异常信息：{}", node.getNodeName(), node.getNodeId(), t);
 							}
 						}
-					}, node, nVariables, executor));
+					}), node, nVariables, executor));
 				}
 			}
 			LinkedBlockingQueue<Future<?>> futureQueue = context.getFutureQueue();

File: spider-flow-web/src/main/java/org/spiderflow/logback/SpiderFlowWebSocketAppender.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 public class SpiderFlowWebSocketAppender extends UnsynchronizedAppenderBase<ILoggingEvent> {
@@ -19,7 +20,8 @@ protected void append(ILoggingEvent event) {
 		SpiderContext context = SpiderContextHolder.get();
 		if(context instanceof SpiderWebSocketContext){
 			SpiderWebSocketContext socketContext = (SpiderWebSocketContext) context;
-			List<Object> arguments = new ArrayList<>(Arrays.asList(event.getArgumentArray()));
+			Object[] argumentArray = event.getArgumentArray();
+			List<Object> arguments = argumentArray == null ? Collections.emptyList()  : new ArrayList<>(Arrays.asList(argumentArray));
 			ThrowableProxy throwableProxy = (ThrowableProxy) event.getThrowableProxy();
 			if(throwableProxy != null){
 				arguments.add(throwableProxy.getThrowable());

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/OutputExecutor.java
Patch:
@@ -41,7 +41,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 		SpiderOutput output = new SpiderOutput();
 		output.setNodeName(node.getNodeName());
 		output.setNodeId(node.getNodeId());
-		boolean outputAll = !"0".equals(node.getStringJsonValue(OUTPUT_ALL));
+		boolean outputAll = "1".equals(node.getStringJsonValue(OUTPUT_ALL));
 		if (outputAll) {
 			outputAll(output, variables);
 		}

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -168,7 +168,7 @@ public void executeNode(SubThreadPoolExecutor pool, SpiderNode fromNode, SpiderN
 			if(executor instanceof LoopExecutor){
 				variables.put(LoopExecutor.LOOP_NODE_KEY + node.getNodeId(), treeNode);
 				variables.put(LoopExecutor.LOOP_NODE_KEY, treeNode);
-				variables.put(LoopExecutor.BEFORE_LOOP_VARIABLE, variables);
+				variables.put(LoopExecutor.BEFORE_LOOP_VARIABLE + node.getNodeId(), variables);
 				variables.put(LoopJoinExecutor.VARIABLE_CONTEXT + node.getNodeId(), new LinkedBlockingQueue<>());
 			}
 			List<Runnable> runnables = new ArrayList<>();

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/LoopExecutor.java
Patch:
@@ -17,7 +17,7 @@ public class LoopExecutor implements ShapeExecutor{
 	
 	public static final String LOOP_NODE_KEY = "__loop_node_";
 	
-	public static final String BEFORE_LOOP_VARIABLE = "__loop_before_variable";
+	public static final String BEFORE_LOOP_VARIABLE = "__loop_before_variable_";
 	
 	@Override
 	public void execute(SpiderNode node, SpiderContext context, Map<String,Object> variables) {

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/LoopJoinExecutor.java
Patch:
@@ -42,7 +42,7 @@ public boolean allowExecuteNext(SpiderNode node, SpiderContext context, Map<Stri
 		if(treeNode != null){
  			boolean isDone = treeNode.isDone();
 			if(isDone){
-				Map<String, Object> beforeLoopVariable = (Map<String, Object>) variables.get(LoopExecutor.BEFORE_LOOP_VARIABLE);
+				Map<String, Object> beforeLoopVariable = (Map<String, Object>) variables.get(LoopExecutor.BEFORE_LOOP_VARIABLE + joinNodeId);
 				variableCollection.stream()
 						.flatMap(map -> map.entrySet().stream())
 						.collect(Collectors.groupingBy(Map.Entry::getKey, Collectors.mapping(Map.Entry::getValue, Collectors.toList())))

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -167,7 +167,7 @@ public void executeNode(SubThreadPoolExecutor pool, SpiderNode fromNode, SpiderN
 			if(executor instanceof LoopExecutor){
 				variables.put(LoopExecutor.BEFORE_LOOP_VARIABLE, variables);
 				variables.put(LoopExecutor.LOOP_NODE_KEY + node.getNodeId(), new CountDownLatch(loopCount));
-				variables.put(LoopJoinExecutor.VARIABLE_CONTEXT + node.getNodeId(), new LinkedBlockingQueue<>(loopCount));
+				variables.put(LoopJoinExecutor.VARIABLE_CONTEXT + node.getNodeId(), new LinkedBlockingQueue<>());
 			}
 			for (int i = 0; i < loopCount; i++) {
 				if (context.isRunning()) {

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -165,6 +165,7 @@ public void executeNode(SubThreadPoolExecutor pool, SpiderNode fromNode, SpiderN
 			
 			String loopVariableName = node.getStringJsonValue(ShapeExecutor.LOOP_VARIABLE_NAME);
 			if(executor instanceof LoopExecutor){
+				variables.put(LoopExecutor.BEFORE_LOOP_VARIABLE, variables);
 				variables.put(LoopExecutor.LOOP_NODE_KEY + node.getNodeId(), new CountDownLatch(loopCount));
 				variables.put(LoopJoinExecutor.VARIABLE_CONTEXT + node.getNodeId(), new LinkedBlockingQueue<>(loopCount));
 			}

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/LoopExecutor.java
Patch:
@@ -17,6 +17,8 @@ public class LoopExecutor implements ShapeExecutor{
 	
 	public static final String LOOP_NODE_KEY = "__loop_node_";
 	
+	public static final String BEFORE_LOOP_VARIABLE = "__loop_before_variable";
+	
 	@Override
 	public void execute(SpiderNode node, SpiderContext context, Map<String,Object> variables) {
 	}

File: spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/CharacterStream.java
Patch:
@@ -48,6 +48,9 @@ public char consume () {
 	 * match and consume is true, the stream is advanced by the needle's length. */
 	public boolean match (String needle, boolean consume) {
 		int needleLength = needle.length();
+		if(needleLength + index >end){
+			return false;
+		}
 		for (int i = 0, j = index; i < needleLength; i++, j++) {
 			if (index >= end) return false;
 			if (needle.charAt(i) != source.charAt(j)) return false;

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/RequestExecutor.java
Patch:
@@ -119,7 +119,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 		
 		//是否验证TLS证书,默认是验证
 		if("0".equals(node.getStringJsonValue(TLS_VALIDATE))){
-			request.followRedirect(false);
+			request.validateTLSCertificates(false);
 			context.debug("设置TLS证书验证：{}", false);
 		}
 		

File: spider-flow-proxypool/src/main/java/org/spiderflow/proxypool/executor/function/ProxyPoolFunctionExecutor.java
Patch:
@@ -39,6 +39,9 @@ public static String https(){
 	}
 	
 	private static String convertToString(Proxy proxy){
+		if(proxy == null){
+			return null;
+		}
 		return String.format("%s:%s", proxy.getIp(),proxy.getPort());
 	}
 	

File: spider-flow-core/src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -8,6 +8,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
 import org.spiderflow.ExpressionEngine;
+import org.spiderflow.ExpressionHolder;
 import org.spiderflow.context.SpiderContext;
 import org.spiderflow.core.model.SpiderFlow;
 import org.spiderflow.core.utils.SpiderFlowUtils;
@@ -80,6 +81,7 @@ private void executeRoot(SpiderNode root,SpiderContext context,Map<String,Object
 			if(listeners != null){
 				listeners.forEach(listener->listener.afterEnd(context));
 			}
+			ExpressionHolder.remove();
 		}
 	}
 	
@@ -133,6 +135,7 @@ public void executeNode(ThreadPool pool,SpiderNode fromNode,SpiderNode node,Spid
 							Runnable runnable = ()->{
 								if(context.isRunning()){
 									try {
+										ExpressionHolder.setVariables(nVariables);
 										executor.execute(node, context,nVariables);
 									} catch (Exception e) {
 										context.error("执行节点[{}:{}]出错,异常信息：{}",node.getNodeName(),node.getNodeId(),e);

File: spider-flow-core/src/main/java/org/spiderflow/core/freemarker/FreeMarkerEngine.java
Patch:
@@ -8,6 +8,7 @@
 
 import javax.annotation.PostConstruct;
 
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.spiderflow.ExpressionEngine;
@@ -129,7 +130,7 @@ public Object execute(String expression,Map<String,Object> variables){
 			template.process(variables, out);
 			FreemarkerObject object = threadLocal.get();
 			String value = out.toString();
-			if(object != null && object.getValue() != variables){
+			if(StringUtils.isBlank(value) &&object != null && object.getValue() != variables){
 				return object.getValue();
 			}
 			if(ExtractUtils.isNumber(value)){

File: spider-flow-proxypool/src/main/java/org/spiderflow/proxypool/ProxyPoolManager.java
Patch:
@@ -1,6 +1,5 @@
 package org.spiderflow.proxypool;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/OutputExecutor.java
Patch:
@@ -40,7 +40,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 				value = engine.execute(outputValue, variables);
 				context.debug("输出{}={}", outputName,value);
 			} catch (Exception e) {
-				context.debug("输出{}出错，异常信息：", outputName,e);
+				context.debug("输出{}出错，异常信息：{}", outputName,e);
 			}
 			output.addOutput(outputName, value);
 		}

File: spider-flow-core/src/main/java/org/spiderflow/core/freemarker/functions/FreemarkerTemplateMethodModel.java
Patch:
@@ -5,12 +5,10 @@
 import org.spiderflow.core.freemarker.FreeMarkerEngine;
 import org.spiderflow.core.freemarker.FreemarkerObject;
 
-import freemarker.template.SimpleHash;
 import freemarker.template.SimpleScalar;
 import freemarker.template.TemplateMethodModelEx;
 import freemarker.template.TemplateModelException;
 import freemarker.template.TemplateScalarModel;
-import freemarker.template.WrappingTemplateModel;
 /**
  * 选择器模版方法模型抽象类
  * @author jmxd

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/RequestExecutor.java
Patch:
@@ -228,7 +228,7 @@ private List<InputStream> setRequestFormParameter(HttpRequest request,List<Map<S
 							}
 						}
 					}else{
-						request.data(parameterName, parameterValue);
+						request.data(parameterName, value);
 						context.log(String.format("设置请求参数:%s=%s", parameterName,value));
 						if(logger.isDebugEnabled()){
 							logger.debug("设置请求参数：{}={}",parameterName,value);

File: spider-flow-core/src/main/java/org/spiderflow/core/freemarker/FreeMarkerEngine.java
Patch:
@@ -62,6 +62,7 @@ private void init() throws TemplateModelException{
 		configuration.setDefaultEncoding("UTF-8");
 		//设置兼容性 经典兼容性
 		configuration.setClassicCompatible(true);
+		configuration.setNumberFormat("0.###############");
 		//如果自定义方法不为空 就将自定义方法列表中的方法循环添加到模板模型
 		if(customMethods != null){
 			for (FreemarkerTemplateMethodModel method : customMethods) {

File: spider-flow-web/src/main/java/org/spiderflow/SpiderApplication.java
Patch:
@@ -8,8 +8,10 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.ServletContextInitializer;
+import org.springframework.scheduling.annotation.EnableScheduling;
 
 @SpringBootApplication
+@EnableScheduling
 public class SpiderApplication implements ServletContextInitializer{
 	
 	public static void main(String[] args) throws IOException {

File: spider-flow-core/src/main/java/org/spiderflow/core/executor/shape/ExecuteSQLExecutor.java
Patch:
@@ -46,12 +46,12 @@ public class ExecuteSQLExecutor implements ShapeExecutor{
 
 	@Override
 	public void execute(SpiderNode node, SpiderContext context, Map<String,Object> variables) {
-		if(StringUtils.isNotBlank(node.getStringJsonValue(DATASOURCE_ID))){
+		if(!StringUtils.isNotBlank(node.getStringJsonValue(DATASOURCE_ID))){
 			context.log("数据源ID为空！");
 			if(logger.isDebugEnabled()){
 				logger.debug("数据库ID为空！");	
 			}
-		}else if(StringUtils.isNotBlank(node.getStringJsonValue(SQL))){
+		}else if(!StringUtils.isNotBlank(node.getStringJsonValue(SQL))){
 			context.log("sql为空！");
 			if(logger.isDebugEnabled()){
 				logger.debug("sql为空！");	

File: src/main/java/org/spiderflow/core/Spider.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
@@ -138,13 +139,14 @@ private boolean executeCondition(SpiderNode fromNode,SpiderNode node,SpiderConte
 			if(StringUtils.isNotBlank(condition)){	//判断是否有条件
 				Object result = engine.execute(condition, variables);
 				if(result != null){
-					boolean isContinue = "true".equals(result);
+					boolean isContinue = "true".equals(result) || Objects.equals(result, true);
 					if(logger.isDebugEnabled()){
 						logger.debug("判断{}={}",condition,isContinue);
 					}
 					context.log(String.format("判断%s=%s",condition,isContinue));
 					return isContinue;
 				}
+				return false;
 			}
 		}
 		return true;

File: src/main/java/org/spiderflow/core/freemarker/FreeMarkerEngine.java
Patch:
@@ -76,6 +76,9 @@ private void loadStaticFunctions() throws TemplateModelException{
 		ObjectWrapper wrapper = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_28).build();
 		builder.setOuterIdentity((obj)->{
 			threadLocal.set(new FreemarkerObject(obj));
+			if(obj instanceof List){
+				return null;
+			}
 			return wrapper.wrap(obj);
 		});
 		BeansWrapper beansWrapper = builder.build();

File: src/main/java/org/spiderflow/core/freemarker/functions/RegxFunction.java
Patch:
@@ -22,6 +22,7 @@ public Object process(List<?> args) throws TemplateModelException {
 			if (args.get(0) != null && args.get(1) != null) {
 		        String content = getStringValue(args.get(0));
 		        String pattern = getStringValue(args.get(1));
+		        System.out.println(content);
 		        return ExtractUtils.getFirstMatcher(content, pattern, true);
 	        }
 		}

File: src/main/java/org/spiderflow/core/executor/RequestExecutor.java
Patch:
@@ -71,7 +71,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 			ExceptionUtils.wrapAndThrow(e);
 		}
 		if(logger.isDebugEnabled()){
-			logger.debug("设置请求url:{}" + url);
+			logger.debug("设置请求url:{}" , url);
 		}
 		context.log(String.format("设置请求url:%s", url));
 		request.url(url);

File: src/main/java/org/spiderflow/core/freemarker/FreeMarkerEngine.java
Patch:
@@ -12,6 +12,7 @@
 import org.spiderflow.core.freemarker.functions.utils.Base64FunctionUtils;
 import org.spiderflow.core.freemarker.functions.utils.DateFunctionUtils;
 import org.spiderflow.core.freemarker.functions.utils.FileFunctionUtils;
+import org.spiderflow.core.freemarker.functions.utils.JsonFunctionUtils;
 import org.spiderflow.core.freemarker.functions.utils.ListFunctionUtils;
 import org.spiderflow.core.freemarker.functions.utils.RandomFunctionUtils;
 import org.spiderflow.core.freemarker.functions.utils.StringFunctionUtils;
@@ -88,6 +89,7 @@ private void loadStaticFunctions() throws TemplateModelException{
 		configuration.setSharedVariable("math", model.get(Math.class.getName()));
 		configuration.setSharedVariable("url", model.get(UrlFunctionUtils.class.getName()));
 		configuration.setSharedVariable("file", model.get(FileFunctionUtils.class.getName()));
+		configuration.setSharedVariable("json", model.get(JsonFunctionUtils.class.getName()));
 	}
 	
 	public Object execute(String expression,Map<String,Object> variables){

File: src/main/java/org/spiderflow/core/io/HttpRequest.java
Patch:
@@ -70,7 +70,7 @@ public HttpRequest data(String key,String value){
 	
 	public HttpRequest data(String key,Object value){
 		if(value != null){
-			return data(key,data.toString());
+			return data(key,value.toString());
 		}
 		return this;
 	}
@@ -114,6 +114,4 @@ public HttpResponse execute() throws IOException{
 		Response response = connection.execute();
 		return new HttpResponse(response);
 	}
-	
-
 }

File: src/main/java/com/mxd/spider/web/controller/SpiderFlowController.java
Patch:
@@ -25,8 +25,9 @@ public Page<SpiderFlow> list(@RequestParam(name = "page",defaultValue = "1")Inte
 	}
 	
 	@RequestMapping("/save")
-	public void save(SpiderFlow spiderFlow){
+	public String save(SpiderFlow spiderFlow){
 		spiderFlowService.save(spiderFlow);
+		return spiderFlow.getId();
 	}
 	
 	@RequestMapping("/get")

File: src/main/java/com/mxd/spider/core/executor/ExecuteSQLExecutor.java
Patch:
@@ -61,7 +61,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 						context.log(String.format("执行sql出错,异常信息:%s", ExceptionUtils.getStackTrace(e)));
 						logger.error("执行sql出错,异常信息:{}",e);
 					}
-					context.put("rs", rs);
+					variables.put("rs", rs);
 				}else if("update".equals(statementType) || "insert".equals(statementType) || "delete".equals(statementType)){
 					int rs = -1;
 					try{
@@ -70,7 +70,7 @@ public void execute(SpiderNode node, SpiderContext context, Map<String,Object> v
 						context.log(String.format("执行sql出错,异常信息:%s", ExceptionUtils.getStackTrace(e)));
 						logger.error("执行sql出错,异常信息:{}",e);
 					}
-					context.put("rs", rs);
+					variables.put("rs", rs);
 				}
 			}
 		}

