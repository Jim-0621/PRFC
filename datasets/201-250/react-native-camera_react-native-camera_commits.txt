File: android/src/main/java/com/google/android/cameraview/Camera1.java
Patch:
@@ -80,7 +80,7 @@ class Camera1 extends CameraViewImpl implements MediaRecorder.OnInfoListener,
     private Handler mHandler = new Handler();
 
     private int mCameraId;
-    private String _mCameraId;
+    private String _mCameraId = "";
 
     private final AtomicBoolean isPictureCaptureInProgress = new AtomicBoolean(false);
 

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -208,7 +208,7 @@ public void onImageAvailable(ImageReader reader) {
 
 
     private String mCameraId;
-    private String _mCameraId;
+    private String _mCameraId = "";
 
     private CameraCharacteristics mCameraCharacteristics;
 

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -195,7 +195,7 @@ public void onImageAvailable(ImageReader reader) {
                     buffer.get(data);
                     if (image.getFormat() == ImageFormat.JPEG) {
                         // @TODO: implement deviceOrientation
-                        mCallback.onPictureTaken(data, 0);
+                        mCallback.onPictureTaken(data, 0, 0);
                     } else {
                         mCallback.onFramePreview(data, image.getWidth(), image.getHeight(), mDisplayOrientation);
                     }

File: android/src/main/java/com/google/android/cameraview/CameraView.java
Patch:
@@ -705,9 +705,9 @@ public void onCameraClosed() {
         }
 
         @Override
-        public void onPictureTaken(byte[] data, int deviceOrientation) {
+        public void onPictureTaken(byte[] data, int deviceOrientation, int softwareRotation) {
             for (Callback callback : mCallbacks) {
-                callback.onPictureTaken(CameraView.this, data, deviceOrientation);
+                callback.onPictureTaken(CameraView.this, data, deviceOrientation, softwareRotation);
             }
         }
 
@@ -864,7 +864,7 @@ public void onCameraClosed(CameraView cameraView) {}
          * @param cameraView The associated {@link CameraView}.
          * @param data       JPEG data.
          */
-        public void onPictureTaken(CameraView cameraView, byte[] data, int deviceOrientation) {}
+        public void onPictureTaken(CameraView cameraView, byte[] data, int deviceOrientation, int softwareRotation) {}
 
         /**
          * Called when a video recording starts

File: android/src/main/java/com/google/android/cameraview/CameraViewImpl.java
Patch:
@@ -157,7 +157,7 @@ interface Callback {
 
         void onCameraClosed();
 
-        void onPictureTaken(byte[] data, int deviceOrientation);
+        void onPictureTaken(byte[] data, int deviceOrientation, int softwareRotation);
 
         void onVideoRecorded(String path, int videoOrientation, int deviceOrientation);
 

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -109,18 +109,18 @@ public void onMountError(CameraView cameraView) {
       }
 
       @Override
-      public void onPictureTaken(CameraView cameraView, final byte[] data, int deviceOrientation) {
+      public void onPictureTaken(CameraView cameraView, final byte[] data, int deviceOrientation, int softwareRotation) {
         Promise promise = mPictureTakenPromises.poll();
         ReadableMap options = mPictureTakenOptions.remove(promise);
         if (options.hasKey("fastMode") && options.getBoolean("fastMode")) {
             promise.resolve(null);
         }
         final File cacheDirectory = mPictureTakenDirectories.remove(promise);
         if(Build.VERSION.SDK_INT >= 11/*HONEYCOMB*/) {
-          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, RNCameraView.this)
+          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, softwareRotation, RNCameraView.this)
                   .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
         } else {
-          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, RNCameraView.this)
+          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, softwareRotation, RNCameraView.this)
                   .execute();
         }
         RNCameraViewHelper.emitPictureTakenEvent(cameraView);

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -195,7 +195,7 @@ public void onImageAvailable(ImageReader reader) {
                     buffer.get(data);
                     if (image.getFormat() == ImageFormat.JPEG) {
                         // @TODO: implement deviceOrientation
-                        mCallback.onPictureTaken(data, 0);
+                        mCallback.onPictureTaken(data, 0, 0);
                     } else {
                         mCallback.onFramePreview(data, image.getWidth(), image.getHeight(), mDisplayOrientation);
                     }

File: android/src/main/java/com/google/android/cameraview/CameraView.java
Patch:
@@ -705,9 +705,9 @@ public void onCameraClosed() {
         }
 
         @Override
-        public void onPictureTaken(byte[] data, int deviceOrientation) {
+        public void onPictureTaken(byte[] data, int deviceOrientation, int softwareRotation) {
             for (Callback callback : mCallbacks) {
-                callback.onPictureTaken(CameraView.this, data, deviceOrientation);
+                callback.onPictureTaken(CameraView.this, data, deviceOrientation, softwareRotation);
             }
         }
 
@@ -864,7 +864,7 @@ public void onCameraClosed(CameraView cameraView) {}
          * @param cameraView The associated {@link CameraView}.
          * @param data       JPEG data.
          */
-        public void onPictureTaken(CameraView cameraView, byte[] data, int deviceOrientation) {}
+        public void onPictureTaken(CameraView cameraView, byte[] data, int deviceOrientation, int softwareRotation) {}
 
         /**
          * Called when a video recording starts

File: android/src/main/java/com/google/android/cameraview/CameraViewImpl.java
Patch:
@@ -157,7 +157,7 @@ interface Callback {
 
         void onCameraClosed();
 
-        void onPictureTaken(byte[] data, int deviceOrientation);
+        void onPictureTaken(byte[] data, int deviceOrientation, int softwareRotation);
 
         void onVideoRecorded(String path, int videoOrientation, int deviceOrientation);
 

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -109,18 +109,18 @@ public void onMountError(CameraView cameraView) {
       }
 
       @Override
-      public void onPictureTaken(CameraView cameraView, final byte[] data, int deviceOrientation) {
+      public void onPictureTaken(CameraView cameraView, final byte[] data, int deviceOrientation, int softwareRotation) {
         Promise promise = mPictureTakenPromises.poll();
         ReadableMap options = mPictureTakenOptions.remove(promise);
         if (options.hasKey("fastMode") && options.getBoolean("fastMode")) {
             promise.resolve(null);
         }
         final File cacheDirectory = mPictureTakenDirectories.remove(promise);
         if(Build.VERSION.SDK_INT >= 11/*HONEYCOMB*/) {
-          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, RNCameraView.this)
+          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, softwareRotation, RNCameraView.this)
                   .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
         } else {
-          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, RNCameraView.this)
+          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, deviceOrientation, softwareRotation, RNCameraView.this)
                   .execute();
         }
         RNCameraViewHelper.emitPictureTakenEvent(cameraView);

File: android/src/main/java/org/reactnative/camera/CameraModule.java
Patch:
@@ -483,8 +483,8 @@ public void execute(NativeViewHierarchyManager nativeViewHierarchyManager) {
                   ArrayList<int[]> ranges = cameraView.getSupportedPreviewFpsRange();
                   for (int[] range : ranges) {
                       WritableMap m = new WritableNativeMap();
-                      m.putInt("MAXIMUM_FPS", range[0]);
-                      m.putInt("MINIMUM_FPS", range[1]);
+                      m.putInt("MINIMUM_FPS", range[0]);
+                      m.putInt("MAXIMUM_FPS", range[1]);
                       result.pushMap(m);
                   }
                   promise.resolve(result);

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -290,9 +290,9 @@ public ImageMutationFailedException(String detailMessage) {
 
     private static class GPS {
         public static void writeExifData(double latitude, double longitude, ExifInterface exif) throws IOException {
-            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSecods(latitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSeconds(latitude));
             exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, latitudeRef(latitude));
-            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSecods(longitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSeconds(longitude));
             exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, longitudeRef(longitude));
         }
 
@@ -304,7 +304,7 @@ private static String longitudeRef(double longitude) {
             return longitude < 0.0d ? "W" : "E";
         }
 
-        private static String toDegreeMinuteSecods(double latitude) {
+        private static String toDegreeMinuteSeconds(double latitude) {
             latitude = Math.abs(latitude);
             int degree = (int) latitude;
             latitude *= 60;

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -290,9 +290,9 @@ public ImageMutationFailedException(String detailMessage) {
 
     private static class GPS {
         public static void writeExifData(double latitude, double longitude, ExifInterface exif) throws IOException {
-            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSecods(latitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSeconds(latitude));
             exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, latitudeRef(latitude));
-            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSecods(longitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSeconds(longitude));
             exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, longitudeRef(longitude));
         }
 
@@ -304,7 +304,7 @@ private static String longitudeRef(double longitude) {
             return longitude < 0.0d ? "W" : "E";
         }
 
-        private static String toDegreeMinuteSecods(double latitude) {
+        private static String toDegreeMinuteSeconds(double latitude) {
             latitude = Math.abs(latitude);
             int degree = (int) latitude;
             latitude *= 60;

File: android/src/main/java/org/reactnative/camera/CameraModule.java
Patch:
@@ -533,7 +533,7 @@ protected void doInBackgroundGuarded(Void... params) {
         finally{
           // this many fail or may not be available in API < 29
           try{
-            retriever.close();
+            retriever.release();
           }
           catch(Throwable e){}
         }

File: android/src/main/java/com/google/android/cameraview/Camera1.java
Patch:
@@ -982,7 +982,7 @@ public Size getPreviewSize() {
      * This rewrites {@link #mCameraId} and {@link #mCameraInfo}.
      */
     private void chooseCamera() {
-        if(_mCameraId == null){
+        if(_mCameraId == null || _mCameraId.isEmpty()){
 
             try{
                 int count = Camera.getNumberOfCameras();

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -798,7 +798,7 @@ public static boolean isLegacy(Context context){
      * {@link #mFacing}.</p>
      */
     private boolean chooseCameraIdByFacing() {
-        if(_mCameraId == null){
+        if(_mCameraId == null || _mCameraId.isEmpty()){
             try {
                 int internalFacing = INTERNAL_FACINGS.get(mFacing);
                 final String[] ids = mCameraManager.getCameraIdList();

File: android/src/main/java/org/reactnative/camera/tasks/ResolveTakenPictureAsyncTask.java
Patch:
@@ -155,7 +155,9 @@ protected WritableMap doInBackground(Void... voids) {
 
                 // Write Exif data to the response if requested
                 if (writeExifToResponse) {
-                    response.putMap("exif", exifData);
+                    final WritableMap exifDataCopy = Arguments.createMap();
+                    exifDataCopy.merge(exifData);
+                    response.putMap("exif", exifDataCopy);
                 }
             }
 

File: android/src/main/java/org/reactnative/camera/tasks/BarCodeScannerAsyncTask.java
Patch:
@@ -63,7 +63,7 @@ protected Result doInBackground(Void... ignored) {
     /**
      * mCameraViewWidth and mCameraViewHeight are obtained from portait orientation
      * mWidth and mHeight are measured with landscape orientation with Home button to the right
-     * adjustedCamViewWidth is the adjusted width fromt the Aspect ratio setting 
+     * adjustedCamViewWidth is the adjusted width from the Aspect ratio setting
      */
     int adjustedCamViewWidth = (int) (mCameraViewHeight / mRatio);
     float adjustedScanY = (((adjustedCamViewWidth - mCameraViewWidth) / 2) + (mScanAreaY * mCameraViewWidth)) / adjustedCamViewWidth;
@@ -148,7 +148,7 @@ private byte[] rotateImage(byte[]imageData,int width, int height) {
   protected void onPostExecute(Result result) {
     super.onPostExecute(result);
     if (result != null) {
-      mDelegate.onBarCodeRead(result, mWidth, mHeight);
+      mDelegate.onBarCodeRead(result, mWidth, mHeight, mImageData);
     }
     mDelegate.onBarCodeScanningTaskCompleted();
   }

File: android/src/main/java/org/reactnative/camera/tasks/BarCodeScannerAsyncTaskDelegate.java
Patch:
@@ -3,6 +3,6 @@
 import com.google.zxing.Result;
 
 public interface BarCodeScannerAsyncTaskDelegate {
-  void onBarCodeRead(Result barCode, int width, int height);
+  void onBarCodeRead(Result barCode, int width, int height, byte[] imageData);
   void onBarCodeScanningTaskCompleted();
 }

File: android/src/main/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTaskDelegate.java
Patch:
@@ -5,7 +5,7 @@
 
 public interface BarcodeDetectorAsyncTaskDelegate {
 
-    void onBarcodesDetected(WritableArray barcodes);
+    void onBarcodesDetected(WritableArray barcodes, int width, int height, byte[] imageData);
 
     void onBarcodeDetectionError(RNBarcodeDetector barcodeDetector);
 

File: android/src/mlkit/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTask.java
Patch:
@@ -82,7 +82,7 @@ protected Void doInBackground(Void... ignored) {
               @Override
               public void onSuccess(List<FirebaseVisionBarcode> barcodes) {
                 WritableArray serializedBarcodes = serializeEventData(barcodes);
-                mDelegate.onBarcodesDetected(serializedBarcodes);
+                mDelegate.onBarcodesDetected(serializedBarcodes, mWidth, mHeight, mImageData);
                 mDelegate.onBarcodeDetectingTaskCompleted();
               }
             })

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -290,6 +290,7 @@ public void run() {
           String path = options.hasKey("path") ? options.getString("path") : RNFileUtils.getOutputFilePath(cacheDirectory, ".mp4");
           int maxDuration = options.hasKey("maxDuration") ? options.getInt("maxDuration") : -1;
           int maxFileSize = options.hasKey("maxFileSize") ? options.getInt("maxFileSize") : -1;
+          int fps = options.hasKey("fps") ? options.getInt("fps") : -1;
 
           CamcorderProfile profile = CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH);
           if (options.hasKey("quality")) {
@@ -309,7 +310,7 @@ public void run() {
             orientation = options.getInt("orientation");
           }
 
-          if (RNCameraView.super.record(path, maxDuration * 1000, maxFileSize, recordAudio, profile, orientation)) {
+          if (RNCameraView.super.record(path, maxDuration * 1000, maxFileSize, recordAudio, profile, orientation, fps)) {
             mIsRecording = true;
             mVideoRecordedPromise = promise;
           } else {

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -247,11 +247,9 @@ public void takePicture(final ReadableMap options, final Promise promise, final
     mBgHandler.post(new Runnable() {
       @Override
       public void run() {
-        final File path = options.hasKey("path") ?  new File(options.getString("path"))  : cacheDirectory;
-        
         mPictureTakenPromises.add(promise);
         mPictureTakenOptions.put(promise, options);
-        mPictureTakenDirectories.put(promise, path);
+        mPictureTakenDirectories.put(promise, cacheDirectory);
 
         try {
           RNCameraView.super.takePicture(options);

File: android/src/main/java/org/reactnative/camera/tasks/BarCodeScannerAsyncTask.java
Patch:
@@ -48,8 +48,8 @@ public BarCodeScannerAsyncTask(
     mScanAreaY = scanAreaY;
     mScanAreaWidth = scanAreaWidth;
     mScanAreaHeight = scanAreaHeight;
-    mCameraWidth = cameraViewWidth;
-    mCameraHeight = cameraViewHeight;
+    mCameraViewWidth = cameraViewWidth;
+    mCameraViewHeight = cameraViewHeight;
     mRatio = ratio;
   }
 

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -25,7 +25,9 @@ public enum Events {
     EVENT_ON_BARCODE_DETECTION_ERROR("onGoogleVisionBarcodeDetectionError"),
     EVENT_ON_TEXT_RECOGNIZED("onTextRecognized"),
     EVENT_ON_PICTURE_TAKEN("onPictureTaken"),
-    EVENT_ON_PICTURE_SAVED("onPictureSaved");
+    EVENT_ON_PICTURE_SAVED("onPictureSaved"),
+    EVENT_ON_RECORDING_START("onRecordingStart"),
+    EVENT_ON_RECORDING_END("onRecordingEnd");
 
     private final String mName;
 

File: android/src/mlkit/java/org/reactnative/barcodedetector/BarcodeFormatUtils.java
Patch:
@@ -37,7 +37,6 @@ public class BarcodeFormatUtils {
     map.put(FirebaseVisionBarcode.FORMAT_AZTEC, "AZTEC");
     map.put(FirebaseVisionBarcode.FORMAT_ALL_FORMATS, "ALL");
     map.put(FirebaseVisionBarcode.FORMAT_UPC_A, "UPC_A");
-    map.put(FirebaseVisionBarcode.FORMAT_ALL_FORMATS, "ALL");
     map.put(-1, "None");
     FORMATS = map;
 

File: android/src/mlkit/java/org/reactnative/barcodedetector/RNBarcodeDetector.java
Patch:
@@ -61,7 +61,7 @@ public void release() {
     private void createBarcodeDetector() {
         FirebaseVisionBarcodeDetectorOptions options = mBuilder.build();
         mBarcodeDetector = FirebaseVision.getInstance()
-                .getVisionBarcodeDetector();
+                .getVisionBarcodeDetector(options);
 
     }
 }

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -263,8 +263,8 @@ public void onImageAvailable(ImageReader reader) {
 
     private Rect mInitialCropRegion;
 
-    Camera2(Callback callback, PreviewImpl preview, Context context) {
-        super(callback, preview);
+    Camera2(Callback callback, PreviewImpl preview, Context context, Handler bgHandler) {
+        super(callback, preview, bgHandler);
         mCameraManager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
         mCameraManager.registerAvailabilityCallback(new CameraManager.AvailabilityCallback() {
             @Override

File: android/src/main/java/com/google/android/cameraview/Camera2Api23.java
Patch:
@@ -20,13 +20,14 @@
 import android.content.Context;
 import android.graphics.ImageFormat;
 import android.hardware.camera2.params.StreamConfigurationMap;
+import android.os.Handler;
 
 
 @TargetApi(23)
 class Camera2Api23 extends Camera2 {
 
-    Camera2Api23(Callback callback, PreviewImpl preview, Context context) {
-        super(callback, preview, context);
+    Camera2Api23(Callback callback, PreviewImpl preview, Context context, Handler bgHandler) {
+        super(callback, preview, context, bgHandler);
     }
 
     @Override

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -43,7 +43,7 @@ public String toString() {
 
   @Override
   public void onDropViewInstance(RNCameraView view) {
-    view.stop();
+    view.onHostDestroy();
     super.onDropViewInstance(view);
   }
 

File: android/src/main/java/com/google/android/cameraview/Camera1.java
Patch:
@@ -336,7 +336,7 @@ boolean setAspectRatio(AspectRatio ratio) {
         } else if (!mAspectRatio.equals(ratio)) {
             final Set<Size> sizes = mPreviewSizes.sizes(ratio);
             if (sizes == null) {
-                throw new UnsupportedOperationException(ratio + " is not supported");
+                // do nothing, ratio remains unchanged. Consistent with Camera2 and initial mount behaviour
             } else {
                 mAspectRatio = ratio;
                 adjustCameraParameters();

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -238,7 +238,7 @@ public void onImageAvailable(ImageReader reader) {
 
     private int mFlash;
 
-    private int mExposure;
+    private float mExposure;
 
     private int mCameraOrientation;
 
@@ -477,12 +477,12 @@ int getFlash() {
     }
 
     @Override
-    int getExposureCompensation() {
+    float getExposureCompensation() {
         return mExposure;
     }
 
     @Override
-    void setExposureCompensation(int exposure) {
+    void setExposureCompensation(float exposure) {
         Log.e("CAMERA_2:: ", "Adjusting exposure is not currently supported for Camera2");
     }
 

File: android/src/main/java/com/google/android/cameraview/CameraViewImpl.java
Patch:
@@ -76,9 +76,9 @@ View getView() {
 
     abstract int getFlash();
 
-    abstract void setExposureCompensation(int exposure);
+    abstract void setExposureCompensation(float exposure);
 
-    abstract int getExposureCompensation();
+    abstract float getExposureCompensation();
 
     abstract void takePicture(ReadableMap options);
 

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -84,7 +84,7 @@ public void setFlashMode(RNCameraView view, int torchMode) {
   }
 
   @ReactProp(name = "exposure")
-  public void setExposureCompensation(RNCameraView view, int exposure){
+  public void setExposureCompensation(RNCameraView view, float exposure){
     view.setExposureCompensation(exposure);
   }
 

File: android/src/main/java/com/google/android/cameraview/Camera1.java
Patch:
@@ -979,8 +979,8 @@ private boolean setFlashInternal(int flash) {
 
     private boolean setExposureInternal(int exposure) {
         Log.e("CAMERA_1::", ""+isCameraOpened()+"; Exposure: "+exposure);
+        mExposure = exposure;
         if (isCameraOpened()){
-            mExposure = exposure;
             int minExposure = mCameraParameters.getMinExposureCompensation();
             int maxExposure = mCameraParameters.getMaxExposureCompensation();
             Log.e("CAMERA_1::", ""+minExposure);

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -1050,6 +1050,9 @@ private void lockFocus() {
 
     // Much credit - https://gist.github.com/royshil/8c760c2485257c85a11cafd958548482
     void setFocusArea(float x, float y) {
+        if (mCaptureSession == null) {
+            return;
+        }
         CameraCaptureSession.CaptureCallback captureCallbackHandler = new CameraCaptureSession.CaptureCallback() {
             @Override
             public void onCaptureCompleted(CameraCaptureSession session, CaptureRequest request, TotalCaptureResult result) {
@@ -1074,7 +1077,6 @@ public void onCaptureFailed(CameraCaptureSession session, CaptureRequest request
 
         try {
             mCaptureSession.stopRepeating();
-
         } catch (CameraAccessException e) {
             Log.e(TAG, "Failed to manual focus.", e);
         }

File: android/src/general/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/main/java/com/google/android/cameraview/AspectRatio.java
Patch:
@@ -18,8 +18,8 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.NonNull;
-import android.support.v4.util.SparseArrayCompat;
+import androidx.annotation.NonNull;
+import androidx.collection.SparseArrayCompat;
 
 /**
  * Immutable class for describing proportional relationship between width and height.

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -37,7 +37,7 @@
 import android.media.Image;
 import android.media.ImageReader;
 import android.media.MediaRecorder;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import android.util.Log;
 import android.util.SparseIntArray;
 import android.view.Surface;

File: android/src/main/java/com/google/android/cameraview/Size.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Immutable class for describing width and height dimensions in pixels.

File: android/src/main/java/com/google/android/cameraview/SizeMap.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.android.cameraview;
 
-import android.support.v4.util.ArrayMap;
+import androidx.collection.ArrayMap;
 
 import java.util.Set;
 import java.util.SortedSet;

File: android/src/main/java/com/google/android/cameraview/SurfaceViewPreview.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.android.cameraview;
 
 import android.content.Context;
-import android.support.v4.view.ViewCompat;
+import androidx.core.view.ViewCompat;
 import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.util.Base64;
 import android.util.Log;
 

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewManager.java
Patch:
@@ -1,6 +1,6 @@
 package com.lwansbrough.RCTCamera;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.common.MapBuilder;

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.common.MapBuilder;

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -7,7 +7,7 @@
 import android.media.CamcorderProfile;
 import android.media.MediaActionSound;
 import android.os.Build;
-import android.support.v4.content.ContextCompat;
+import androidx.core.content.ContextCompat;
 import android.view.View;
 import android.os.AsyncTask;
 import com.facebook.react.bridge.*;

File: android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Paint;
 import android.media.CamcorderProfile;
 import android.os.Build;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.view.ViewGroup;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.ReactContext;

File: android/src/main/java/org/reactnative/camera/events/BarCodeReadEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
@@ -11,7 +11,6 @@
 import com.google.zxing.Result;
 import com.google.zxing.ResultPoint;
 
-import java.util.Date;
 import java.util.Formatter;
 
 public class BarCodeReadEvent extends Event<BarCodeReadEvent> {

File: android/src/main/java/org/reactnative/camera/events/BarcodeDetectionErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/BarcodesDetectedEvent.java
Patch:
@@ -1,6 +1,7 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
+import android.util.SparseArray;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableArray;
 import com.facebook.react.bridge.WritableMap;

File: android/src/main/java/org/reactnative/camera/events/CameraMountErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/CameraReadyEvent.java
Patch:
@@ -1,15 +1,13 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
-import java.util.Date;
-
 public class CameraReadyEvent extends Event<CameraReadyEvent> {
   private static final Pools.SynchronizedPool<CameraReadyEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
   private CameraReadyEvent() {}

File: android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/FacesDetectedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;

File: android/src/main/java/org/reactnative/camera/events/PictureSavedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/PictureTakenEvent.java
Patch:
@@ -1,15 +1,13 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
-import java.util.Date;
-
 public class PictureTakenEvent extends Event<PictureTakenEvent> {
   private static final Pools.SynchronizedPool<PictureTakenEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
   private PictureTakenEvent() {}

File: android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableArray;

File: android/src/main/java/org/reactnative/camera/tasks/ResolveTakenPictureAsyncTask.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Matrix;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.util.Base64;
 
 import org.reactnative.camera.RNCameraViewHelper;

File: android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -1,7 +1,7 @@
 package org.reactnative.facedetector.tasks;
 
 import android.content.Context;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/general/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import androidx.exifinterface.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/main/java/com/google/android/cameraview/AspectRatio.java
Patch:
@@ -18,8 +18,8 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import androidx.annotation.NonNull;
-import androidx.collection.SparseArrayCompat;
+import android.support.annotation.NonNull;
+import android.support.v4.util.SparseArrayCompat;
 
 /**
  * Immutable class for describing proportional relationship between width and height.

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -37,7 +37,7 @@
 import android.media.Image;
 import android.media.ImageReader;
 import android.media.MediaRecorder;
-import androidx.annotation.NonNull;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import android.util.SparseIntArray;
 import android.view.Surface;

File: android/src/main/java/com/google/android/cameraview/Size.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import androidx.annotation.NonNull;
+import android.support.annotation.NonNull;
 
 /**
  * Immutable class for describing width and height dimensions in pixels.

File: android/src/main/java/com/google/android/cameraview/SizeMap.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.android.cameraview;
 
-import androidx.collection.ArrayMap;
+import android.support.v4.util.ArrayMap;
 
 import java.util.Set;
 import java.util.SortedSet;

File: android/src/main/java/com/google/android/cameraview/SurfaceViewPreview.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.android.cameraview;
 
 import android.content.Context;
-import androidx.core.view.ViewCompat;
+import android.support.v4.view.ViewCompat;
 import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-import androidx.exifinterface.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.util.Base64;
 import android.util.Log;
 

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewManager.java
Patch:
@@ -1,6 +1,6 @@
 package com.lwansbrough.RCTCamera;
 
-import androidx.annotation.Nullable;
+import android.support.annotation.Nullable;
 
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.common.MapBuilder;

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera;
 
-import androidx.annotation.Nullable;
+import android.support.annotation.Nullable;
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.common.MapBuilder;

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -7,7 +7,7 @@
 import android.media.CamcorderProfile;
 import android.media.MediaActionSound;
 import android.os.Build;
-import androidx.core.content.ContextCompat;
+import android.support.v4.content.ContextCompat;
 import android.view.View;
 import android.os.AsyncTask;
 import com.facebook.react.bridge.*;

File: android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Paint;
 import android.media.CamcorderProfile;
 import android.os.Build;
-import androidx.exifinterface.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.view.ViewGroup;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.ReactContext;

File: android/src/main/java/org/reactnative/camera/events/BarCodeReadEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
@@ -11,6 +11,7 @@
 import com.google.zxing.Result;
 import com.google.zxing.ResultPoint;
 
+import java.util.Date;
 import java.util.Formatter;
 
 public class BarCodeReadEvent extends Event<BarCodeReadEvent> {

File: android/src/main/java/org/reactnative/camera/events/BarcodeDetectionErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/BarcodesDetectedEvent.java
Patch:
@@ -1,7 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
-import android.util.SparseArray;
+import android.support.v4.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableArray;
 import com.facebook.react.bridge.WritableMap;

File: android/src/main/java/org/reactnative/camera/events/CameraMountErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/CameraReadyEvent.java
Patch:
@@ -1,13 +1,15 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
+import java.util.Date;
+
 public class CameraReadyEvent extends Event<CameraReadyEvent> {
   private static final Pools.SynchronizedPool<CameraReadyEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
   private CameraReadyEvent() {}

File: android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/FacesDetectedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;

File: android/src/main/java/org/reactnative/camera/events/PictureSavedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/PictureTakenEvent.java
Patch:
@@ -1,13 +1,15 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
+import java.util.Date;
+
 public class PictureTakenEvent extends Event<PictureTakenEvent> {
   private static final Pools.SynchronizedPool<PictureTakenEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
   private PictureTakenEvent() {}

File: android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import androidx.core.util.Pools;
+import android.support.v4.util.Pools;
 
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableArray;

File: android/src/main/java/org/reactnative/camera/tasks/ResolveTakenPictureAsyncTask.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Matrix;
 import android.net.Uri;
 import android.os.AsyncTask;
-import androidx.exifinterface.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.util.Base64;
 
 import org.reactnative.camera.RNCameraViewHelper;

File: android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -1,7 +1,7 @@
 package org.reactnative.facedetector.tasks;
 
 import android.content.Context;
-import androidx.exifinterface.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/general/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/main/java/com/google/android/cameraview/AspectRatio.java
Patch:
@@ -18,8 +18,8 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.NonNull;
-import android.support.v4.util.SparseArrayCompat;
+import androidx.annotation.NonNull;
+import androidx.collection.SparseArrayCompat;
 
 /**
  * Immutable class for describing proportional relationship between width and height.

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -37,7 +37,7 @@
 import android.media.Image;
 import android.media.ImageReader;
 import android.media.MediaRecorder;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import android.util.Log;
 import android.util.SparseIntArray;
 import android.view.Surface;

File: android/src/main/java/com/google/android/cameraview/Size.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Immutable class for describing width and height dimensions in pixels.

File: android/src/main/java/com/google/android/cameraview/SizeMap.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.android.cameraview;
 
-import android.support.v4.util.ArrayMap;
+import androidx.collection.ArrayMap;
 
 import java.util.Set;
 import java.util.SortedSet;

File: android/src/main/java/com/google/android/cameraview/SurfaceViewPreview.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.android.cameraview;
 
 import android.content.Context;
-import android.support.v4.view.ViewCompat;
+import androidx.core.view.ViewCompat;
 import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.util.Base64;
 import android.util.Log;
 

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewManager.java
Patch:
@@ -1,6 +1,6 @@
 package com.lwansbrough.RCTCamera;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.common.MapBuilder;

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.common.MapBuilder;

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -7,7 +7,7 @@
 import android.media.CamcorderProfile;
 import android.media.MediaActionSound;
 import android.os.Build;
-import android.support.v4.content.ContextCompat;
+import androidx.core.content.ContextCompat;
 import android.view.View;
 import android.os.AsyncTask;
 import com.facebook.react.bridge.*;

File: android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Paint;
 import android.media.CamcorderProfile;
 import android.os.Build;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.view.ViewGroup;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.ReactContext;

File: android/src/main/java/org/reactnative/camera/events/BarCodeReadEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
@@ -11,7 +11,6 @@
 import com.google.zxing.Result;
 import com.google.zxing.ResultPoint;
 
-import java.util.Date;
 import java.util.Formatter;
 
 public class BarCodeReadEvent extends Event<BarCodeReadEvent> {

File: android/src/main/java/org/reactnative/camera/events/BarcodeDetectionErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/BarcodesDetectedEvent.java
Patch:
@@ -1,6 +1,7 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
+import android.util.SparseArray;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableArray;
 import com.facebook.react.bridge.WritableMap;

File: android/src/main/java/org/reactnative/camera/events/CameraMountErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/CameraReadyEvent.java
Patch:
@@ -1,15 +1,13 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
-import java.util.Date;
-
 public class CameraReadyEvent extends Event<CameraReadyEvent> {
   private static final Pools.SynchronizedPool<CameraReadyEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
   private CameraReadyEvent() {}

File: android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/FacesDetectedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;

File: android/src/main/java/org/reactnative/camera/events/PictureSavedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;

File: android/src/main/java/org/reactnative/camera/events/PictureTakenEvent.java
Patch:
@@ -1,15 +1,13 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import org.reactnative.camera.CameraViewManager;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableMap;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
-import java.util.Date;
-
 public class PictureTakenEvent extends Event<PictureTakenEvent> {
   private static final Pools.SynchronizedPool<PictureTakenEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
   private PictureTakenEvent() {}

File: android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java
Patch:
@@ -1,6 +1,6 @@
 package org.reactnative.camera.events;
 
-import android.support.v4.util.Pools;
+import androidx.core.util.Pools;
 
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.WritableArray;

File: android/src/main/java/org/reactnative/camera/tasks/ResolveTakenPictureAsyncTask.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Matrix;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.util.Base64;
 
 import org.reactnative.camera.RNCameraViewHelper;

File: android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -1,7 +1,7 @@
 package org.reactnative.facedetector.tasks;
 
 import android.content.Context;
-import android.support.media.ExifInterface;
+import androidx.exifinterface.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/mlkit/java/org/reactnative/barcodedetector/BarcodeFormatUtils.java
Patch:
@@ -36,6 +36,7 @@ public class BarcodeFormatUtils {
     map.put(FirebaseVisionBarcode.FORMAT_AZTEC, "AZTEC");
     map.put(FirebaseVisionBarcode.FORMAT_ALL_FORMATS, "ALL");
     map.put(FirebaseVisionBarcode.FORMAT_UPC_A, "UPC_A");
+    map.put(FirebaseVisionBarcode.FORMAT_ALL_FORMATS, "ALL");
     map.put(-1, "None");
     FORMATS = map;
 

File: android/src/main/java/com/google/android/cameraview/Camera1.java
Patch:
@@ -657,9 +657,7 @@ void adjustCameraParameters() {
         Size size = chooseOptimalSize(sizes);
 
         // Always re-apply camera parameters
-        if (mPictureSize == null) {
-            mPictureSize = mPictureSizes.sizes(mAspectRatio).last();
-        }
+        mPictureSize = mPictureSizes.sizes(mAspectRatio).last();
         if (mShowingPreview) {
             mCamera.stopPreview();
             mIsPreviewActive = false;

File: android/src/general/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -131,7 +131,7 @@ protected void onPostExecute(SparseArray<Face> faces) {
 
   private static RNFaceDetector detectorForOptions(ReadableMap options, Context context) {
     RNFaceDetector detector = new RNFaceDetector(context);
-    detector.setTrackingEnabled(false);
+    detector.setTracking(false);
 
     if(options.hasKey(MODE_OPTION_KEY)) {
       detector.setMode(options.getInt(MODE_OPTION_KEY));

File: android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -148,7 +148,7 @@ private void serializeEventData(List<FirebaseVisionFace> faces) {
 
   private static RNFaceDetector detectorForOptions(ReadableMap options, Context context) {
     RNFaceDetector detector = new RNFaceDetector(context);
-    detector.setTrackingEnabled(false);
+    detector.setTracking(false);
 
     if(options.hasKey(MODE_OPTION_KEY)) {
       detector.setMode(options.getInt(MODE_OPTION_KEY));

File: android/src/general/java/org/reactnative/barcodedetector/RNBarcodeDetector.java
Patch:
@@ -12,6 +12,7 @@ public class RNBarcodeDetector {
     public static int NORMAL_MODE = 0;
     public static int ALTERNATE_MODE = 1;
     public static int INVERTED_MODE = 2;
+    public static int ALL_FORMATS = Barcode.ALL_FORMATS;
 
     private BarcodeDetector mBarcodeDetector = null;
     private ImageDimensions mPreviousDimensions;

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewManager.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.support.annotation.Nullable;
 
-import com.facebook.infer.annotation.Assertions;
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.common.MapBuilder;
 import com.facebook.react.uimanager.*;
@@ -39,7 +38,9 @@ public Map<String, Integer> getCommandsMap() {
 
     @Override
     public void receiveCommand(RCTCameraView view, int commandType, @Nullable ReadableArray args) {
-        Assertions.assertNotNull(view);
+        if (view == null) {
+            throw new AssertionError();
+        }
         switch (commandType) {
             case COMMAND_STOP_PREVIEW: {
                 view.stopPreview();

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -13,7 +13,6 @@
 import com.facebook.react.bridge.*;
 import com.facebook.react.uimanager.ThemedReactContext;
 import com.google.android.cameraview.CameraView;
-import com.google.android.gms.vision.barcode.Barcode;
 import com.google.zxing.BarcodeFormat;
 import com.google.zxing.DecodeHintType;
 import com.google.zxing.MultiFormatReader;
@@ -62,7 +61,7 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
   private int mFaceDetectorMode = RNFaceDetector.FAST_MODE;
   private int mFaceDetectionLandmarks = RNFaceDetector.NO_LANDMARKS;
   private int mFaceDetectionClassifications = RNFaceDetector.NO_CLASSIFICATIONS;
-  private int mGoogleVisionBarCodeType = Barcode.ALL_FORMATS;
+  private int mGoogleVisionBarCodeType = RNBarcodeDetector.ALL_FORMATS;
   private int mGoogleVisionBarCodeMode = RNBarcodeDetector.NORMAL_MODE;
   private int mPaddingX;
   private int mPaddingY;

File: android/src/mlkit/java/org/reactnative/barcodedetector/RNBarcodeDetector.java
Patch:
@@ -14,6 +14,7 @@ public class RNBarcodeDetector {
     public static int NORMAL_MODE = 0;
     public static int ALTERNATE_MODE = 1;
     public static int INVERTED_MODE = 2;
+    public static int ALL_FORMATS = FirebaseVisionBarcode.FORMAT_ALL_FORMATS;
 
     private FirebaseVisionBarcodeDetector mBarcodeDetector = null;
     private FirebaseVisionBarcodeDetectorOptions.Builder  mBuilder;

File: android/src/main/java/com/google/android/cameraview/Camera1.java
Patch:
@@ -557,7 +557,7 @@ void setDeviceOrientation(int deviceOrientation) {
             return;
         }
         mDeviceOrientation = deviceOrientation;
-        if (isCameraOpened() && mOrientation == Constants.ORIENTATION_AUTO) {
+        if (isCameraOpened() && mOrientation == Constants.ORIENTATION_AUTO && !mIsRecording) {
             mCameraParameters.setRotation(calcCameraRotation(deviceOrientation));
             mCamera.setParameters(mCameraParameters);
          }

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -298,7 +298,7 @@ private void initBarcodeReader() {
       for (String code : mBarCodeTypes) {
         String formatString = (String) CameraModule.VALID_BARCODE_TYPES.get(code);
         if (formatString != null) {
-          decodeFormats.add(BarcodeFormat.valueOf(code));
+          decodeFormats.add(BarcodeFormat.valueOf(formatString));
         }
       }
     }

File: android/src/main/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTaskDelegate.java
Patch:
@@ -1,12 +1,11 @@
 package org.reactnative.camera.tasks;
 
-import android.util.SparseArray;
-import com.google.android.gms.vision.barcode.Barcode;
+import com.facebook.react.bridge.WritableArray;
 import org.reactnative.barcodedetector.RNBarcodeDetector;
 
 public interface BarcodeDetectorAsyncTaskDelegate {
 
-    void onBarcodesDetected(SparseArray<Barcode> barcodes, int sourceWidth, int sourceHeight, int sourceRotation);
+    void onBarcodesDetected(WritableArray barcodes);
 
     void onBarcodeDetectionError(RNBarcodeDetector barcodeDetector);
 

File: examples/basic/android/app/src/main/java/com/rncameraexample/MainApplication.java
Patch:
@@ -3,7 +3,6 @@
 import android.app.Application;
 
 import com.facebook.react.ReactApplication;
-import com.swmansion.gesturehandler.react.RNGestureHandlerPackage;
 import org.reactnative.camera.RNCameraPackage;
 import com.facebook.react.ReactNativeHost;
 import com.facebook.react.ReactPackage;
@@ -25,7 +24,6 @@ public boolean getUseDeveloperSupport() {
     protected List<ReactPackage> getPackages() {
       return Arrays.<ReactPackage>asList(
           new MainReactPackage(),
-            new RNGestureHandlerPackage(),
             new RNCameraPackage()
       );
     }

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -432,7 +432,7 @@ public void onBarcodesDetected(SparseArray<Barcode> barcodesReported, int source
 
     SparseArray<Barcode> barcodesDetected = barcodesReported == null ? new SparseArray<Barcode>() : barcodesReported;
 
-    RNCameraViewHelper.emitBarcodesDetectedEvent(this, barcodesDetected);
+    RNCameraViewHelper.emitBarcodesDetectedEvent(this, barcodesDetected, sourceWidth, sourceHeight, sourceRotation);
   }
 
   public void onBarcodeDetectionError(RNBarcodeDetector barcodeDetector) {

File: examples/basic/android/app/src/main/java/com/rncameraexample/MainApplication.java
Patch:
@@ -3,6 +3,7 @@
 import android.app.Application;
 
 import com.facebook.react.ReactApplication;
+import com.swmansion.gesturehandler.react.RNGestureHandlerPackage;
 import org.reactnative.camera.RNCameraPackage;
 import com.facebook.react.ReactNativeHost;
 import com.facebook.react.ReactPackage;
@@ -24,6 +25,7 @@ public boolean getUseDeveloperSupport() {
     protected List<ReactPackage> getPackages() {
       return Arrays.<ReactPackage>asList(
           new MainReactPackage(),
+            new RNGestureHandlerPackage(),
             new RNCameraPackage()
       );
     }

File: android/src/main/java/com/google/android/cameraview/CameraViewImpl.java
Patch:
@@ -83,6 +83,8 @@ abstract boolean record(String path, int maxDuration, int maxFileSize,
 
     abstract void stopRecording();
 
+    abstract int getCameraOrientation();
+
     abstract void setDisplayOrientation(int displayOrientation);
 
     abstract void setDeviceOrientation(int deviceOrientation);

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -121,7 +121,7 @@ public void onVideoRecorded(CameraView cameraView, String path, int videoOrienta
 
       @Override
       public void onFramePreview(CameraView cameraView, byte[] data, int width, int height, int rotation) {
-        int correctRotation = RNCameraViewHelper.getCorrectCameraRotation(rotation, getFacing());
+        int correctRotation = RNCameraViewHelper.getCorrectCameraRotation(rotation, getFacing(), getCameraOrientation());
         boolean willCallBarCodeTask = mShouldScanBarCodes && !barCodeScannerTaskLock && cameraView instanceof BarCodeScannerAsyncTaskDelegate;
         boolean willCallFaceTask = mShouldDetectFaces && !faceDetectorTaskLock && cameraView instanceof FaceDetectorAsyncTaskDelegate;
         boolean willCallGoogleBarcodeTask = mShouldGoogleDetectBarcodes && !googleBarcodeDetectorTaskLock && cameraView instanceof BarcodeDetectorAsyncTaskDelegate;

File: android/src/main/java/com/google/android/cameraview/CameraView.java
Patch:
@@ -119,8 +119,9 @@ public CameraView(Context context, AttributeSet attrs, int defStyleAttr, boolean
         // Display orientation detector
         mDisplayOrientationDetector = new DisplayOrientationDetector(context) {
             @Override
-            public void onDisplayOrientationChanged(int displayOrientation) {
+            public void onDisplayOrientationChanged(int displayOrientation, int deviceOrientation) {
                 mImpl.setDisplayOrientation(displayOrientation);
+                mImpl.setDeviceOrientation(deviceOrientation);
             }
         };
     }

File: android/src/main/java/com/google/android/cameraview/CameraViewImpl.java
Patch:
@@ -85,6 +85,8 @@ abstract boolean record(String path, int maxDuration, int maxFileSize,
 
     abstract void setDisplayOrientation(int displayOrientation);
 
+    abstract void setDeviceOrientation(int deviceOrientation);
+
     abstract void setFocusDepth(float value);
 
     abstract float getFocusDepth();

File: android/src/main/java/org/reactnative/camera/tasks/BarCodeScannerAsyncTask.java
Patch:
@@ -41,7 +41,7 @@ protected Result doInBackground(Void... ignored) {
       BinaryBitmap bitmap = generateBitmapFromImageData(mImageData, mWidth, mHeight);
       result = mMultiFormatReader.decodeWithState(bitmap);
     } catch (NotFoundException e) {
-      BinaryBitmap bitmap = generateBitmapFromImageData(rotateImage(mImageData,mWidth, mHeight), mWidth, mHeight);
+      BinaryBitmap bitmap = generateBitmapFromImageData(rotateImage(mImageData,mWidth, mHeight), mHeight, mWidth);
       try {
         result = mMultiFormatReader.decodeWithState(bitmap);
       } catch (NotFoundException e1) {

File: android/src/main/java/com/google/android/cameraview/CameraViewImpl.java
Patch:
@@ -79,7 +79,7 @@ View getView() {
     abstract void takePicture(ReadableMap options);
 
     abstract boolean record(String path, int maxDuration, int maxFileSize,
-                            boolean recordAudio, CamcorderProfile profile);
+                            boolean recordAudio, CamcorderProfile profile, int orientation);
 
     abstract void stopRecording();
 
@@ -115,9 +115,9 @@ interface Callback {
 
         void onCameraClosed();
 
-        void onPictureTaken(byte[] data);
+        void onPictureTaken(byte[] data, int deviceOrientation);
 
-        void onVideoRecorded(String path);
+        void onVideoRecorded(String path, int videoOrientation, int deviceOrientation);
 
         void onFramePreview(byte[] data, int width, int height, int orientation);
 

File: android/src/main/java/com/google/android/cameraview/Camera2.java
Patch:
@@ -1053,8 +1053,8 @@ void captureStillPicture() {
                         public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                 @NonNull CaptureRequest request,
                                 @NonNull TotalCaptureResult result) {
-                            if (mCaptureCallback.getOptions().hasKey("stopPreviewAfterCapture")
-                              && !mCaptureCallback.getOptions().getBoolean("stopPreviewAfterCapture")) {
+                            if (mCaptureCallback.getOptions().hasKey("pauseAfterCapture")
+                              && !mCaptureCallback.getOptions().getBoolean("pauseAfterCapture")) {
                                 unlockFocus();
                             }
                         }

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -318,7 +318,9 @@ public void onBarCodeRead(Result barCode, int width, int height) {
 
   public void onBarCodeScanningTaskCompleted() {
     barCodeScannerTaskLock = false;
-    mMultiFormatReader.reset();
+    if(mMultiFormatReader != null) {
+      mMultiFormatReader.reset();
+    }
   }
 
   /**

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -167,7 +167,7 @@ private static Bitmap toBitmap(byte[] data) {
     }
 
     public String toBase64(int jpegQualityPercent) {
-        return Base64.encodeToString(toJpeg(currentRepresentation, jpegQualityPercent), Base64.DEFAULT);
+        return Base64.encodeToString(toJpeg(currentRepresentation, jpegQualityPercent), Base64.NO_WRAP);
     }
 
     public void writeDataToFile(File file, ReadableMap options, int jpegQualityPercent) throws IOException {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -434,7 +434,7 @@ private void releaseMediaRecorder() {
         switch (mRecordingOptions.getInt("target")) {
             case RCT_CAMERA_CAPTURE_TARGET_MEMORY:
                 byte[] encoded = convertFileToByteArray(mVideoFile);
-                response.putString("data", new String(encoded, Base64.DEFAULT));
+                response.putString("data", new String(encoded, Base64.NO_WRAP));
                 mRecordingPromise.resolve(response);
                 f.delete();
                 break;

File: android/src/main/java/org/reactnative/camera/tasks/ResolveTakenPictureAsyncTask.java
Patch:
@@ -91,7 +91,7 @@ protected WritableMap doInBackground(Void... voids) {
                 if (mOptions.hasKey("fixOrientation") && mOptions.getBoolean("fixOrientation") && orientation != ExifInterface.ORIENTATION_UNDEFINED) {
                     mBitmap = rotateBitmap(mBitmap, getImageRotation(orientation));
                 }
-                
+
                 if (mOptions.hasKey("width")) {
                     mBitmap = resizeBitmap(mBitmap, mOptions.getInt("width"));
                 }
@@ -125,7 +125,7 @@ protected WritableMap doInBackground(Void... voids) {
 
             // Write base64-encoded image to the response if requested
             if (mOptions.hasKey("base64") && mOptions.getBoolean("base64")) {
-                response.putString("base64", Base64.encodeToString(imageStream.toByteArray(), Base64.DEFAULT));
+                response.putString("base64", Base64.encodeToString(imageStream.toByteArray(), Base64.NO_WRAP));
             }
 
             // Cleanup

File: android/src/main/java/org/reactnative/camera/events/PictureTakenEvent.java
Patch:
@@ -30,7 +30,7 @@ public short getCoalescingKey() {
 
   @Override
   public String getEventName() {
-    return CameraViewManager.Events.EVENT_PICTURE_TAKEN.toString();
+    return CameraViewManager.Events.EVENT_ON_PICTURE_TAKEN.toString();
   }
 
   @Override

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -818,7 +818,7 @@ private void addToMediaStore(String path) {
      */
     @Override
     public void onHostResume() {
-        // ... do nothing
+        mSafeToCapture = true;
     }
 
     @Override

File: android/src/main/java/com/google/android/cameraview/CameraView.java
Patch:
@@ -69,6 +69,7 @@ public class CameraView extends FrameLayout {
     public static final int FLASH_RED_EYE = Constants.FLASH_RED_EYE;
 
     /** The mode for for the camera device's flash control */
+    @Retention(RetentionPolicy.SOURCE)
     @IntDef({FLASH_OFF, FLASH_ON, FLASH_TORCH, FLASH_AUTO, FLASH_RED_EYE})
     public @interface Flash {
     }

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -92,10 +92,10 @@ public void onPictureTaken(CameraView cameraView, final byte[] data) {
         }
         final File cacheDirectory = mPictureTakenDirectories.remove(promise);
         if(Build.VERSION.SDK_INT >= 11/*HONEYCOMB*/) {
-          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory)
+          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, RNCameraView.this)
                   .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
         } else {
-          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory)
+          new ResolveTakenPictureAsyncTask(data, promise, options, cacheDirectory, RNCameraView.this)
                   .execute();
         }
       }

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -103,7 +103,7 @@ public void setWhiteBalance(RNCameraView view, int whiteBalance) {
     
   @ReactProp(name = "pictureSize")
   public void setPictureSize(RNCameraView view, String size) {
-    view.setPictureSize(Size.parse(size));
+    view.setPictureSize(size.equals("None") ? null : Size.parse(size));
   }
 
   @ReactProp(name = "barCodeTypes")

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -103,7 +103,7 @@ public void setWhiteBalance(RNCameraView view, int whiteBalance) {
     
   @ReactProp(name = "pictureSize")
   public void setPictureSize(RNCameraView view, String size) {
-    view.setPictureSize(Size.parse(size));
+    view.setPictureSize(size.equals("None") ? null : Size.parse(size));
   }
 
   @ReactProp(name = "barCodeTypes")

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -818,7 +818,7 @@ private void addToMediaStore(String path) {
      */
     @Override
     public void onHostResume() {
-        // ... do nothing
+        mSafeToCapture = true;
     }
 
     @Override

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -397,7 +397,7 @@ protected Void doInBackground(Void... ignored) {
                         resultPoints.pushMap(newPoint);
                     }
                 }
-
+                
                 event.putArray("bounds", resultPoints);
                 event.putString("data", result.getText());
                 event.putString("type", result.getBarcodeFormat().toString());
@@ -528,4 +528,4 @@ private float getFingerSpacing(MotionEvent event) {
         float y = event.getY(0) - event.getY(1);
         return (float) Math.sqrt(x * x + y * y);
     }
-}
+}
\ No newline at end of file

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -442,9 +442,7 @@ public void onHostResume() {
       if ((mIsPaused && !isCameraOpened()) || mIsNew) {
         mIsPaused = false;
         mIsNew = false;
-        if (!Build.FINGERPRINT.contains("generic")) {
-          start();
-        }
+        start();
       }
     } else {
       RNCameraViewHelper.emitMountErrorEvent(this, "Camera permissions not granted - component could not be rendered.");

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -1,10 +1,9 @@
 package com.lwansbrough.RCTCamera;
 
-import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-import android.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.util.Base64;
 import android.util.Log;
 

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -1,6 +1,7 @@
 package org.reactnative.camera;
 
 import android.Manifest;
+import android.annotation.SuppressLint;
 import android.content.pm.PackageManager;
 import android.graphics.Color;
 import android.media.CamcorderProfile;
@@ -186,6 +187,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
     preview.layout(paddingX, paddingY, correctWidth + paddingX, correctHeight + paddingY);
   }
 
+  @SuppressLint("all")
   @Override
   public void requestLayout() {
     // React handles this for us, so we don't need to call super.requestLayout();

File: android/src/main/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -1,10 +1,9 @@
 package com.lwansbrough.RCTCamera;
 
-import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-import android.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.util.Base64;
 import android.util.Log;
 

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -1,6 +1,7 @@
 package org.reactnative.camera;
 
 import android.Manifest;
+import android.annotation.SuppressLint;
 import android.content.pm.PackageManager;
 import android.graphics.Color;
 import android.media.CamcorderProfile;
@@ -186,6 +187,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
     preview.layout(paddingX, paddingY, correctWidth + paddingX, correctHeight + paddingY);
   }
 
+  @SuppressLint("all")
   @Override
   public void requestLayout() {
     // React handles this for us, so we don't need to call super.requestLayout();

File: android/src/main/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.media.ExifInterface;
+import android.support.media.ExifInterface;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.util.Log;

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -147,8 +147,8 @@ public void setFaceDetectionClassifications(RNCameraView view, int classificatio
   }
 
   @ReactProp(name = "googleVisionBarcodeDetectorEnabled")
-  public void setGoogleVisionBarcodeDetecting(RNCameraView view, boolean barcodeDetectorEnabled) {
-    view.setShouldDetectBarcodes(barcodeDetectorEnabled);
+  public void setGoogleVisionBarcodeDetecting(RNCameraView view, boolean googleBarcodeDetectorEnabled) {
+    view.setShouldGoogleDetectBarcodes(googleBarcodeDetectorEnabled);
   }
 
   @ReactProp(name = "googleVisionBarcodeType")

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -147,8 +147,8 @@ public void setFaceDetectionClassifications(RNCameraView view, int classificatio
   }
 
   @ReactProp(name = "googleVisionBarcodeDetectorEnabled")
-  public void setGoogleVisionBarcodeDetecting(RNCameraView view, boolean barcodeDetectorEnabled) {
-    view.setShouldDetectBarcodes(barcodeDetectorEnabled);
+  public void setGoogleVisionBarcodeDetecting(RNCameraView view, boolean googleBarcodeDetectorEnabled) {
+    view.setShouldGoogleDetectBarcodes(googleBarcodeDetectorEnabled);
   }
 
   @ReactProp(name = "googleVisionBarcodeType")

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -20,6 +20,7 @@ public enum Events {
     EVENT_ON_FACES_DETECTED("onFacesDetected"),
     EVENT_ON_BARCODES_DETECTED("onGoogleVisionBarcodesDetected"),
     EVENT_ON_FACE_DETECTION_ERROR("onFaceDetectionError"),
+    EVENT_ON_BARCODE_DETECTION_ERROR("onGoogleVisionBarcodeDetectionError"),
     EVENT_ON_TEXT_RECOGNIZED("onTextRecognized");
 
     private final String mName;

File: android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
Patch:
@@ -161,8 +161,8 @@ public class RNCameraViewHelper {
   };
   // Mount error event
 
-  public static void emitMountErrorEvent(ViewGroup view) {
-    CameraMountErrorEvent event = CameraMountErrorEvent.obtain(view.getId());
+  public static void emitMountErrorEvent(ViewGroup view, String error) {
+    CameraMountErrorEvent event = CameraMountErrorEvent.obtain(view.getId(), error);
     ReactContext reactContext = (ReactContext) view.getContext();
     reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(event);
   }

File: android/src/main/java/org/reactnative/camera/events/BarcodeDetectionErrorEvent.java
Patch:
@@ -37,7 +37,7 @@ public short getCoalescingKey() {
 
   @Override
   public String getEventName() {
-    return CameraViewManager.Events.EVENT_ON_MOUNT_ERROR.toString();
+    return CameraViewManager.Events.EVENT_ON_BARCODE_DETECTION_ERROR.toString();
   }
 
   @Override

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -20,6 +20,7 @@ public enum Events {
     EVENT_ON_FACES_DETECTED("onFacesDetected"),
     EVENT_ON_BARCODES_DETECTED("onGoogleVisionBarcodesDetected"),
     EVENT_ON_FACE_DETECTION_ERROR("onFaceDetectionError"),
+    EVENT_ON_BARCODE_DETECTION_ERROR("onGoogleVisionBarcodeDetectionError"),
     EVENT_ON_TEXT_RECOGNIZED("onTextRecognized");
 
     private final String mName;

File: android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
Patch:
@@ -161,8 +161,8 @@ public class RNCameraViewHelper {
   };
   // Mount error event
 
-  public static void emitMountErrorEvent(ViewGroup view) {
-    CameraMountErrorEvent event = CameraMountErrorEvent.obtain(view.getId());
+  public static void emitMountErrorEvent(ViewGroup view, String error) {
+    CameraMountErrorEvent event = CameraMountErrorEvent.obtain(view.getId(), error);
     ReactContext reactContext = (ReactContext) view.getContext();
     reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(event);
   }

File: android/src/main/java/org/reactnative/camera/events/BarcodeDetectionErrorEvent.java
Patch:
@@ -37,7 +37,7 @@ public short getCoalescingKey() {
 
   @Override
   public String getEventName() {
-    return CameraViewManager.Events.EVENT_ON_MOUNT_ERROR.toString();
+    return CameraViewManager.Events.EVENT_ON_BARCODE_DETECTION_ERROR.toString();
   }
 
   @Override

File: android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java
Patch:
@@ -104,7 +104,7 @@ private WritableMap serializeText(Text text) {
 
     WritableMap size = Arguments.createMap();
     size.putDouble("width", text.getBoundingBox().width() * this.mScaleX);
-    size.putDouble("height", text.getBoundingBox().width() * this.mScaleY);
+    size.putDouble("height", text.getBoundingBox().height() * this.mScaleY);
 
     WritableMap bounds = Arguments.createMap();
     bounds.putMap("origin", origin);

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -219,7 +219,7 @@ public void writeDataToFile(File file, ReadableMap options, int jpegQualityPerce
     // Even the value is formatted as double it is returned as a String because exif.setAttribute requires it.
     private String convertExposureTimeToDoubleFormat(String exposureTime) {
         if(!exposureTime.contains("/"))
-          return;
+          return "";
 
         String exposureFractions[]= exposureTime.split("/");
         double divider = Double.parseDouble(exposureFractions[1]);

File: android/src/main/java/com/lwansbrough/RCTCamera/MutableImage.java
Patch:
@@ -219,7 +219,7 @@ public void writeDataToFile(File file, ReadableMap options, int jpegQualityPerce
     // Even the value is formatted as double it is returned as a String because exif.setAttribute requires it.
     private String convertExposureTimeToDoubleFormat(String exposureTime) {
         if(!exposureTime.contains("/"))
-          return;
+          return "";
 
         String exposureFractions[]= exposureTime.split("/");
         double divider = Double.parseDouble(exposureFractions[1]);

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -66,7 +66,7 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
   private int mFaceDetectionClassifications = RNFaceDetector.NO_CLASSIFICATIONS;
 
   public RNCameraView(ThemedReactContext themedReactContext) {
-    super(themedReactContext);
+    super(themedReactContext, true);
     initBarcodeReader();
     mThemedReactContext = themedReactContext;
     mFaceDetector = new RNFaceDetector(themedReactContext);

File: android/src/main/java/org/reactnative/camera/RNCameraView.java
Patch:
@@ -66,7 +66,7 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
   private int mFaceDetectionClassifications = RNFaceDetector.NO_CLASSIFICATIONS;
 
   public RNCameraView(ThemedReactContext themedReactContext) {
-    super(themedReactContext);
+    super(themedReactContext, true);
     initBarcodeReader();
     mThemedReactContext = themedReactContext;
     mFaceDetector = new RNFaceDetector(themedReactContext);

File: android/src/main/java/org/reactnative/camera/RNCameraPackage.java
Patch:
@@ -1,4 +1,4 @@
-package org.reactnative;
+package org.reactnative.camera;
 
 import com.facebook.react.ReactPackage;
 import com.facebook.react.bridge.JavaScriptModule;

File: android/src/main/java/org/reactnative/camera/events/BarCodeReadEvent.java
Patch:
@@ -24,7 +24,7 @@ public static BarCodeReadEvent obtain(int viewTag, Result barCode) {
     if (event == null) {
       event = new BarCodeReadEvent();
     }
-    event.init(viewTag);
+    event.init(viewTag, barCode);
     return event;
   }
 

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -135,13 +135,13 @@ public void setZoom(int zoom) {
         RCTCamera.getInstance().setZoom(_cameraType, zoom);
    }
 
-    private void startPreview() {
+    public void startPreview() {
         if (_surfaceTexture != null) {
             startCamera();
         }
     }
 
-    private void stopPreview() {
+    public void stopPreview() {
         if (_camera != null) {
             stopCamera();
         }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -135,13 +135,13 @@ public void setZoom(int zoom) {
         RCTCamera.getInstance().setZoom(_cameraType, zoom);
    }
 
-    private void startPreview() {
+    public void startPreview() {
         if (_surfaceTexture != null) {
             startCamera();
         }
     }
 
-    private void stopPreview() {
+    public void stopPreview() {
         if (_camera != null) {
             stopCamera();
         }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCamera.java
Patch:
@@ -140,8 +140,8 @@ private Camera.Size getClosestSize(List<Camera.Size> supportedSizes, int matchWi
               continue;
           }
 
-          int currentDelta = Math.abs(closestSize.width - matchWidth) * Math.abs(closestSize.height - matchHeight);
-          int newDelta = Math.abs(size.width - matchWidth) * Math.abs(size.height - matchHeight);
+          double currentDelta = Math.sqrt(Math.pow(closestSize.width - matchWidth,2) + Math.pow(closestSize.height - matchHeight,2));
+          double newDelta = Math.sqrt(Math.pow(size.width - matchWidth,2) + Math.pow(size.height - matchHeight,2));
 
           if (newDelta < currentDelta) {
               closestSize = size;

File: android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
Patch:
@@ -47,7 +47,7 @@ public void dispatch(RCTEventEmitter rctEventEmitter) {
 
   private WritableMap serializeEventData() {
     WritableMap map = Arguments.createMap();
-    map.putBoolean("isOperational", mFaceDetector.isOperational());
+    map.putBoolean("isOperational", mFaceDetector != null ? mFaceDetector.isOperational() : false);
     return map;
   }
 }

File: android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
Patch:
@@ -47,7 +47,7 @@ public void dispatch(RCTEventEmitter rctEventEmitter) {
 
   private WritableMap serializeEventData() {
     WritableMap map = Arguments.createMap();
-    map.putBoolean("isOperational", mFaceDetector.isOperational());
+    map.putBoolean("isOperational", mFaceDetector != null ? mFaceDetector.isOperational() : false);
     return map;
   }
 }

File: android/src/main/java/org/reactnative/camera/CameraViewManager.java
Patch:
@@ -41,7 +41,7 @@ public String toString() {
     }
   }
 
-  private static final String REACT_CLASS = "RNnentCamera";
+  private static final String REACT_CLASS = "RNCamera";
 
   private static CameraViewManager instance;
   private RNCameraView mCameraView;
@@ -163,7 +163,7 @@ public void takePicture(ReadableMap options, Promise promise) {
 
   public void record(final ReadableMap options, final Promise promise) {
     // TODO fix this
-//    RNnent.getInstance().getPermissions(new RNnent.PermissionsListener() {
+//    RN.getInstance().getPermissions(new RN.PermissionsListener() {
 //      @Override
 //      public void permissionsGranted() {
 //        if (mCameraView.isCameraOpened()) {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -586,8 +586,9 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
                 int type = options.getInt("type");
                 float paddingWidth = RCTCamera.getInstance().getPreviewPaddingWidth(type);
                 float paddingHeight = RCTCamera.getInstance().getPreviewPaddingHeight(type);
+                int orientation = _reactContext.getResources().getConfiguration().orientation;
 
-                mutableImage.cropToPreview(paddingWidth, paddingHeight);
+                mutableImage.cropToPreview(orientation, paddingWidth, paddingHeight);
             } catch (MutableImage.ImageMutationFailedException e) {
                 promise.reject("Error cropping image to preview", e);
             }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCamera.java
Patch:
@@ -475,7 +475,6 @@ private class CameraInfoWrapper {
         public int rotation = 0;
         public int previewWidth = -1;
         public int previewHeight = -1;
-        public int previewHeight = -1;
         public float previewPaddingHeight = -1;
         public float previewPaddingWidth = -1;
 

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -580,7 +580,7 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
             }
         }
 
-        boolean shouldCropToPreview = options.hasKey(“cropToPreview”) && options.getBoolean(“cropToPreview”);
+        boolean shouldCropToPreview = options.hasKey("cropToPreview") && options.getBoolean("cropToPreview");
         if (shouldCropToPreview) {
             try {
                 int type = options.getInt("type");

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -618,7 +618,7 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
                 }
 
                 try {
-                    mutableImage.writeDataToFile(pictureFile, options, 85);
+                    mutableImage.writeDataToFile(pictureFile, options, jpegQualityPercent);
                 } catch (IOException e) {
                     promise.reject("failed to save image file", e);
                     return;
@@ -636,7 +636,7 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
                 }
 
                 try {
-                    mutableImage.writeDataToFile(tempFile, options, 85);
+                    mutableImage.writeDataToFile(tempFile, options, jpegQualityPercent);
                 } catch (IOException e) {
                     promise.reject("failed to save image file", e);
                     return;

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -618,7 +618,7 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
                 }
 
                 try {
-                    mutableImage.writeDataToFile(pictureFile, options, 85);
+                    mutableImage.writeDataToFile(pictureFile, options, jpegQualityPercent);
                 } catch (IOException e) {
                     promise.reject("failed to save image file", e);
                     return;
@@ -636,7 +636,7 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
                 }
 
                 try {
-                    mutableImage.writeDataToFile(tempFile, options, 85);
+                    mutableImage.writeDataToFile(tempFile, options, jpegQualityPercent);
                 } catch (IOException e) {
                     promise.reject("failed to save image file", e);
                     return;

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCamera.java
Patch:
@@ -123,8 +123,8 @@ private Camera.Size getClosestSize(List<Camera.Size> supportedSizes, int matchWi
               continue;
           }
 
-          int currentDelta = Math.abs(closestSize.width - matchWidth) * Math.abs(closestSize.height - matchHeight);
-          int newDelta = Math.abs(size.width - matchWidth) * Math.abs(size.height - matchHeight);
+          double currentDelta = Math.sqrt(Math.pow(closestSize.width - matchWidth,2) + Math.pow(closestSize.height - matchHeight,2));
+          double newDelta = Math.sqrt(Math.pow(size.width - matchWidth,2) + Math.pow(size.height - matchHeight,2));
 
           if (newDelta < currentDelta) {
               closestSize = size;

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraPackage.java
Patch:
@@ -17,7 +17,7 @@ public List<NativeModule> createNativeModules(ReactApplicationContext reactAppli
         return Collections.<NativeModule>singletonList(new RCTCameraModule(reactApplicationContext));
     }
 
-    @Override
+    // Deprecated in RN 0.47
     public List<Class<? extends JavaScriptModule>> createJSModules() {
         return Collections.emptyList();
     }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -598,7 +598,7 @@ private synchronized void processImage(MutableImage mutableImage, ReadableMap op
 
                 try {
                     mutableImage.writeDataToFile(cameraRollFile, options, jpegQualityPercent);
-                } catch (IOException e) {
+                } catch (IOException | NullPointerException e) {
                     promise.reject("failed to save image file", e);
                     return;
                 }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraView.java
Patch:
@@ -74,7 +74,7 @@ public void setCameraType(final int type) {
                 _viewFinder.setFlashMode(this._flashMode);
             }
             if (-1 != this._torchMode) {
-                _viewFinder.setFlashMode(this._torchMode);
+                _viewFinder.setTorchMode(this._torchMode);
             }
             addView(_viewFinder);
         }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -187,9 +187,9 @@ synchronized private void stopCamera() {
     /**
      * Parse barcodes as BarcodeFormat constants.
      *
-     * Supports all iOS codes except [code138, code39mod43, itf14]
+     * Supports all iOS codes except [code39mod43, itf14]
      *
-     * Additionally supports [codabar, code128, maxicode, rss14, rssexpanded, upca, upceanextension]
+     * Additionally supports [codabar, maxicode, rss14, rssexpanded, upca, upceanextension]
      */
     private BarcodeFormat parseBarCodeString(String c) {
         if ("aztec".equals(c)) {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -129,6 +129,7 @@ synchronized private void stopCamera() {
             try {
                 if (_camera != null) {
                     _camera.stopPreview();
+                    _camera.setPreviewCallback(null);
                     RCTCamera.getInstance().releaseCameraInstance(_cameraType);
                     _camera = null;
                 }

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -5,7 +5,6 @@
 
 package com.lwansbrough.RCTCamera;
 
-import android.annotation.TargetApi;
 import android.content.ContentValues;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -16,13 +15,13 @@
 import android.media.MediaRecorder;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Environment;
 import android.provider.MediaStore;
 import android.util.Base64;
 import android.util.Log;
 import android.view.Surface;
 
+import com.facebook.react.bridge.LifecycleEventListener;
 import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReactContextBaseJavaModule;

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -74,7 +74,7 @@ public void setTorchMode(int torchMode) {
     }
 
     public void setFlashMode(int flashMode) {
-        RCTCamera.getInstance().setTorchMode(_cameraType, flashMode);
+        RCTCamera.getInstance().setFlashMode(_cameraType, flashMode);
     }
 
     private void startPreview() {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraView.java
Patch:
@@ -5,7 +5,6 @@
 package com.lwansbrough.RCTCamera;
 
 import android.content.Context;
-import android.graphics.*;
 import android.hardware.SensorManager;
 import android.view.OrientationEventListener;
 import android.view.ViewGroup;
@@ -65,6 +64,7 @@ public void setAspect(int aspect) {
     public void setCameraType(final int type) {
         if (null != this._viewFinder) {
             this._viewFinder.setCameraType(type);
+            RCTCamera.getInstance().adjustPreviewLayout(type);
         } else {
             _viewFinder = new RCTCameraViewFinder(_context, type);
             if (-1 != this._flashMode) {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewManager.java
Patch:
@@ -2,9 +2,10 @@
 
 import android.support.annotation.Nullable;
 import com.facebook.react.uimanager.*;
+import com.facebook.react.uimanager.annotations.ReactProp;
 
-public class RCTCameraViewManager extends SimpleViewManager<RCTCameraView> {
-    private static final String REACT_CLASS = "RCTCameraView";
+public class RCTCameraViewManager extends ViewGroupManager<RCTCameraView> {
+    private static final String REACT_CLASS = "RCTCamera";
 
     @Override
     public String getName() {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewManager.java
Patch:
@@ -2,9 +2,10 @@
 
 import android.support.annotation.Nullable;
 import com.facebook.react.uimanager.*;
+import com.facebook.react.uimanager.annotations.ReactProp;
 
-public class RCTCameraViewManager extends SimpleViewManager<RCTCameraView> {
-    private static final String REACT_CLASS = "RCTCameraView";
+public class RCTCameraViewManager extends ViewGroupManager<RCTCameraView> {
+    private static final String REACT_CLASS = "RCTCamera";
 
     @Override
     public String getName() {

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -159,6 +159,8 @@ public void capture(final ReadableMap options, final Promise promise) {
         camera.takePicture(null, null, new Camera.PictureCallback() {
             @Override
             public void onPictureTaken(byte[] data, Camera camera) {
+                camera.stopPreview();
+                camera.startPreview();
                 switch (options.getInt("target")) {
                     case RCT_CAMERA_CAPTURE_TARGET_MEMORY:
                         String encoded = Base64.encodeToString(data, Base64.DEFAULT);

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraView.java
Patch:
@@ -144,6 +144,3 @@ private void layoutViewFinder(int left, int top, int right, int bottom) {
         this.postInvalidate(this.getLeft(), this.getTop(), this.getRight(), this.getBottom());
     }
 }
-
-
-

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -89,6 +89,9 @@ synchronized private void startCamera() {
             _isStarting = true;
             try {
                 _camera = RCTCamera.getInstance().acquireCameraInstance(_cameraType);
+                Camera.Parameters parameters = _camera.getParameters();
+                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
+                _camera.setParameters(parameters);
                 _camera.setPreviewTexture(_surfaceTexture);
                 _camera.startPreview();
             } catch (NullPointerException e) {
@@ -120,6 +123,3 @@ synchronized private void stopCamera() {
         }
     }
 }
-
-
-

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraModule.java
Patch:
@@ -159,6 +159,8 @@ public void capture(final ReadableMap options, final Callback callback) {
         camera.takePicture(null, null, new Camera.PictureCallback() {
             @Override
             public void onPictureTaken(byte[] data, Camera camera) {
+                camera.stopPreview();
+                camera.startPreview();
                 switch (options.getInt("target")) {
                     case RCT_CAMERA_CAPTURE_TARGET_MEMORY:
                         String encoded = Base64.encodeToString(data, Base64.DEFAULT);

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraView.java
Patch:
@@ -144,6 +144,3 @@ private void layoutViewFinder(int left, int top, int right, int bottom) {
         this.postInvalidate(this.getLeft(), this.getTop(), this.getRight(), this.getBottom());
     }
 }
-
-
-

File: android/src/main/java/com/lwansbrough/RCTCamera/RCTCameraViewFinder.java
Patch:
@@ -89,6 +89,9 @@ synchronized private void startCamera() {
             _isStarting = true;
             try {
                 _camera = RCTCamera.getInstance().acquireCameraInstance(_cameraType);
+                Camera.Parameters parameters = _camera.getParameters();
+                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
+                _camera.setParameters(parameters);
                 _camera.setPreviewTexture(_surfaceTexture);
                 _camera.startPreview();
             } catch (NullPointerException e) {
@@ -120,6 +123,3 @@ synchronized private void stopCamera() {
         }
     }
 }
-
-
-

