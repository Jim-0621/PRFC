File: pkl-core/src/main/java/org/pkl/core/EvaluatorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -324,7 +324,7 @@ private <T> T doEvaluate(Supplier<T> supplier) {
       var error = new ExceptionInInitializerError(pklException);
       error.setStackTrace(e.getStackTrace());
       throw new PklBugException(error);
-    } catch (ThreadDeath e) {
+    } catch (Throwable e) {
       if (e.getClass()
           .getName()
           .equals("com.oracle.truffle.polyglot.PolyglotEngineImpl$CancelExecution")) {

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorWhenNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public GeneratorWhenNode(
       GeneratorMemberNode[] thenNodes,
       GeneratorMemberNode[] elseNodes) {
 
-    super(sourceSection);
+    super(sourceSection, false);
     this.conditionNode = conditionNode;
     this.thenNodes = thenNodes;
     this.elseNodes = elseNodes;

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/FunctionLiteralNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import com.oracle.truffle.api.frame.VirtualFrame;
 import com.oracle.truffle.api.source.SourceSection;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.builder.SymbolTable.CustomThisScope;
 import org.pkl.core.ast.member.FunctionNode;
 import org.pkl.core.ast.member.UnresolvedFunctionNode;
 import org.pkl.core.runtime.VmFunction;
@@ -48,7 +47,7 @@ public VmFunction executeGeneric(VirtualFrame frame) {
       CompilerDirectives.transferToInterpreterAndInvalidate();
       functionNode = unresolvedFunctionNode.execute(frame);
       if (isCustomThisScope) {
-        customThisSlot = VmUtils.findAuxiliarySlot(frame, CustomThisScope.FRAME_SLOT_ID);
+        customThisSlot = VmUtils.findCustomThisSlot(frame);
       }
     }
 

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/ObjectLiteralNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ protected final AmendFunctionNode createAmendFunctionNode(VirtualFrame frame) {
         parametersDescriptor == null
             ? new TypeNode[0]
             : VmUtils.resolveParameterTypes(frame, parametersDescriptor, parameterTypes);
-    return new AmendFunctionNode(this, resolvedParameterTypes, frame.getFrameDescriptor());
+    return new AmendFunctionNode(this, resolvedParameterTypes);
   }
 
   @Idempotent

File: pkl-core/src/main/java/org/pkl/core/ast/expression/primary/CustomThisNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import com.oracle.truffle.api.nodes.NodeInfo;
 import com.oracle.truffle.api.source.SourceSection;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.builder.SymbolTable.CustomThisScope;
 import org.pkl.core.runtime.VmUtils;
 
 /** `this` inside `CustomThisScope` (type constraint, object member predicate). */
@@ -38,7 +37,7 @@ public Object executeGeneric(VirtualFrame frame) {
     if (customThisSlot == -1) {
       CompilerDirectives.transferToInterpreterAndInvalidate();
       // deferred until execution time s.t. nodes of inlined type aliases get the right frame slot
-      customThisSlot = VmUtils.findAuxiliarySlot(frame, CustomThisScope.FRAME_SLOT_ID);
+      customThisSlot = VmUtils.findCustomThisSlot(frame);
     }
     return frame.getAuxiliarySlot(customThisSlot);
   }

File: pkl-core/src/main/java/org/pkl/core/ast/internal/ToStringNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -80,7 +80,6 @@ protected InvokeMethodVirtualNode createInvokeNode() {
         Identifier.TO_STRING,
         new ExpressionNode[] {},
         MemberLookupMode.EXPLICIT_RECEIVER,
-        false,
         null,
         null);
   }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction0Node.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,12 +33,12 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, false);
+    return callNode.call(function.getThisValue(), function);
   }
 
   @Specialization(replaces = "evalDirect")
   protected Object eval(VmFunction function, @Cached("create()") IndirectCallNode callNode) {
 
-    return callNode.call(function.getCallTarget(), function.getThisValue(), function, false);
+    return callNode.call(function.getCallTarget(), function.getThisValue(), function);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction1Node.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -77,13 +77,13 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, false, arg1);
+    return callNode.call(function.getThisValue(), function, arg1);
   }
 
   @Specialization(replaces = "evalDirect")
   protected Object eval(
       VmFunction function, Object arg1, @Cached("create()") IndirectCallNode callNode) {
 
-    return callNode.call(function.getCallTarget(), function.getThisValue(), function, false, arg1);
+    return callNode.call(function.getCallTarget(), function.getThisValue(), function, arg1);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction3Node.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, false, arg1, arg2, arg3);
+    return callNode.call(function.getThisValue(), function, arg1, arg2, arg3);
   }
 
   @Specialization(replaces = "evalDirect")
@@ -48,6 +48,6 @@ protected Object eval(
       @Cached("create()") IndirectCallNode callNode) {
 
     return callNode.call(
-        function.getCallTarget(), function.getThisValue(), function, false, arg1, arg2, arg3);
+        function.getCallTarget(), function.getThisValue(), function, arg1, arg2, arg3);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction4Node.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, false, arg1, arg2, arg3, arg4);
+    return callNode.call(function.getThisValue(), function, arg1, arg2, arg3, arg4);
   }
 
   @Specialization(replaces = "evalDirect")
@@ -51,6 +51,6 @@ protected Object eval(
       @Cached("create()") IndirectCallNode callNode) {
 
     return callNode.call(
-        function.getCallTarget(), function.getThisValue(), function, false, arg1, arg2, arg3, arg4);
+        function.getCallTarget(), function.getThisValue(), function, arg1, arg2, arg3, arg4);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/type/TypeConstraintNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,6 @@
 import com.oracle.truffle.api.source.SourceSection;
 import org.pkl.core.ast.ExpressionNode;
 import org.pkl.core.ast.PklNode;
-import org.pkl.core.ast.builder.SymbolTable.CustomThisScope;
 import org.pkl.core.ast.lambda.ApplyVmFunction1Node;
 import org.pkl.core.runtime.BaseModule;
 import org.pkl.core.runtime.VmFunction;
@@ -87,7 +86,7 @@ private void initConstraintSlot(VirtualFrame frame) {
     if (customThisSlot == -1) {
       CompilerDirectives.transferToInterpreterAndInvalidate();
       // deferred until execution time s.t. nodes of inlined type aliases get the right frame slot
-      customThisSlot = VmUtils.findAuxiliarySlot(frame, CustomThisScope.FRAME_SLOT_ID);
+      customThisSlot = VmUtils.findCustomThisSlot(frame);
     }
   }
 }

File: pkl-core/src/main/java/org/pkl/core/runtime/VmFunction.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ public int getParameterCount() {
   // if call site is a node, use ApplyVmFunction1Node.execute() or DirectCallNode.call() instead of
   // this method
   public Object apply(Object arg1) {
-    return getCallTarget().call(thisValue, this, false, arg1);
+    return getCallTarget().call(thisValue, this, arg1);
   }
 
   public String applyString(Object arg1) {
@@ -69,7 +69,7 @@ public String applyString(Object arg1) {
   // if call site is a node, use ApplyVmFunction2Node.execute() or DirectCallNode.call() instead of
   // this method
   public Object apply(Object arg1, Object arg2) {
-    return getCallTarget().call(thisValue, this, false, arg1, arg2);
+    return getCallTarget().call(thisValue, this, arg1, arg2);
   }
 
   public VmFunction copy(

File: pkl-core/src/main/java/org/pkl/core/stdlib/protobuf/RendererNodes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
+ * Copyright © 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -310,7 +310,7 @@ protected void visitEntryKey(Object key, boolean isFirst) {
           isDirective || key instanceof Long || key instanceof Boolean || key instanceof String;
       if (!isValidKey) {
         throw new VmExceptionBuilder()
-            .evalError("cannotRenderNonScalarMapKey")
+            .evalError("cannotRenderProtobufMapKey")
             .withProgramValue("Key", key)
             .build();
       }
@@ -583,7 +583,7 @@ public void visitNull(VmNull value) {
             || keyType instanceof StringTypeNode
             || keyType instanceof BooleanTypeNode)) {
           throw new VmExceptionBuilder()
-              .evalError("cannotRenderNonScalarMapKeyType")
+              .evalError("cannotRenderProtobufMapKeyType")
               .withSourceSection(type.getSourceSection())
               .build();
         }

File: pkl-core/src/main/java/org/pkl/core/Evaluator.java
Patch:
@@ -170,7 +170,7 @@ static Evaluator preconfigured() {
   String evaluateExpressionString(ModuleSource moduleSource, String expression);
 
   /**
-   * Evalautes the module's schema, which describes the properties, methods, and classes of a
+   * Evaluates the module's schema, which describes the properties, methods, and classes of a
    * module.
    *
    * @throws PklException if an error occurs during evaluation

File: pkl-core/src/main/java/org/pkl/core/NoSuchPropertyException.java
Patch:
@@ -16,7 +16,7 @@
 package org.pkl.core;
 
 /**
- * Indicates that a non-existent property was requested for a {@link Composite}. To check if a
+ * Indicates that a nonexistent property was requested for a {@link Composite}. To check if a
  * property exists, use {@link Composite#hasProperty(String)}.
  */
 public final class NoSuchPropertyException extends RuntimeException {

File: pkl-core/src/main/java/org/pkl/core/ast/member/ClassNode.java
Patch:
@@ -106,7 +106,7 @@ public VmClass executeGeneric(VirtualFrame frame) {
           new VmTyped(
               frame.materialize(),
               null, // initialized later by VmClass
-              null, // initialized later by Vmclass
+              null, // initialized later by VmClass
               prototypeMembers);
     }
 

File: pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java
Patch:
@@ -114,7 +114,7 @@ public Object executeEagerly(VirtualFrame frame, Object value) {
   }
 
   /**
-   * Visit child type nodes; but not paramaterized types (does not visit {@code String} in {@code
+   * Visit child type nodes; but not parameterized types (does not visit {@code String} in {@code
    * Listing<String>}).
    */
   protected abstract boolean acceptTypeNode(TypeNodeConsumer consumer);

File: pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java
Patch:
@@ -534,7 +534,7 @@ public ResolvedModuleKey resolve(SecurityManager securityManager)
       conn.connect();
       if (conn instanceof JarURLConnection && IoUtils.isWindows()) {
         // On Windows, opening a JarURLConnection prevents the jar file from being deleted, unless
-        // cacheing is disabled.
+        // caching is disabled.
         // See https://bugs.openjdk.org/browse/JDK-8239054
         conn.setUseCaches(false);
       }

File: pkl-core/src/main/java/org/pkl/core/packages/PackageResolvers.java
Patch:
@@ -333,7 +333,7 @@ public byte[] getBytes(
         throw fileIsADirectory();
       }
       var entries = cachedEntries.get(packageUri);
-      // need to normalize here but not in `doListElments` nor `doHasElement` because
+      // need to normalize here but not in `doListElements` nor `doHasElement` because
       // `TreePathElement.getElement` does normalization already.
       var path = IoUtils.toNormalizedPathString(Path.of(uri.getAssetPath()).normalize());
       return entries.get(path).array();

File: pkl-core/src/main/java/org/pkl/core/util/GlobResolver.java
Patch:
@@ -434,7 +434,7 @@ private static void resolveHierarchicalGlob(
     }
   }
 
-  /** Split a glob pattern into the base, non-wildard parts, and the wildcard parts. */
+  /** Split a glob pattern into the base, non-wildcard parts, and the wildcard parts. */
   private static Pair<String, String[]> splitGlobPatternIntoBaseAndWildcards(
       ReaderBase reader, String globPattern, boolean hasAbsoluteGlob) {
     var effectiveGlobPattern = globPattern;

File: pkl-core/src/main/java/org/pkl/core/util/json/Json.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Parser for JSON.
  *
- * <p>JSON types are paresd into the following Java types:
+ * <p>JSON types are parsed into the following Java types:
  *
  * <table>
  *   <thead>

File: pkl-executor/src/main/java/org/pkl/executor/EmbeddedExecutor.java
Patch:
@@ -267,7 +267,7 @@ protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundE
         if (clazz == null) {
           if (name.startsWith("org.pkl.executor.spi.")) {
             try {
-              // give pkl-executor a chance to load the SPI clasa
+              // give pkl-executor a chance to load the SPI class
               clazz = pklExecutorClassLoader.loadClass(name);
             } catch (ClassNotFoundException ignored) {
               // The SPI class exists in this distribution but not in pkl-executor,

File: pkl-core/src/main/java/org/pkl/core/ast/member/ElementOrEntryNode.java
Patch:
@@ -49,7 +49,7 @@ protected Object evalListing(
       VirtualFrame frame,
       VmListing receiver,
       @Cached("create()") @Shared("callNode") IndirectCallNode callNode) {
-    var result = executeBody(frame);
+    var result = bodyNode.executeGeneric(frame);
     return VmUtils.shouldRunTypeCheck(frame)
         ? receiver.executeTypeCasts(result, VmUtils.getOwner(frame), callNode, null, null)
         : result;
@@ -60,14 +60,14 @@ protected Object evalMapping(
       VirtualFrame frame,
       VmMapping receiver,
       @Cached("create()") @Shared("callNode") IndirectCallNode callNode) {
-    var result = executeBody(frame);
+    var result = bodyNode.executeGeneric(frame);
     return VmUtils.shouldRunTypeCheck(frame)
         ? receiver.executeTypeCasts(result, VmUtils.getOwner(frame), callNode, null, null)
         : result;
   }
 
   @Specialization
   protected Object evalDynamic(VirtualFrame frame, VmDynamic ignored) {
-    return executeBody(frame);
+    return bodyNode.executeGeneric(frame);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/SimpleRootNode.java
Patch:
@@ -49,7 +49,7 @@ public String getName() {
   }
 
   @Override
-  public Object execute(VirtualFrame frame) {
-    return executeBody(frame, bodyNode);
+  protected Object executeImpl(VirtualFrame frame) {
+    return bodyNode.executeGeneric(frame);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/member/ModuleNode.java
Patch:
@@ -52,8 +52,8 @@ public String getName() {
   }
 
   @Override
-  public Object execute(VirtualFrame frame) {
-    var module = executeBody(frame, moduleNode);
+  protected Object executeImpl(VirtualFrame frame) {
+    var module = moduleNode.executeGeneric(frame);
     if (module instanceof VmClass vmClass) {
       return vmClass.getPrototype();
     }

File: pkl-core/src/main/java/org/pkl/core/ast/member/ObjectMethodNode.java
Patch:
@@ -59,7 +59,7 @@ public ObjectMethodNode(
   }
 
   @Override
-  public CallTarget execute(VirtualFrame frame) {
+  protected CallTarget executeImpl(VirtualFrame frame) {
     if (functionNode == null) {
       CompilerDirectives.transferToInterpreter();
 

File: pkl-core/src/main/java/org/pkl/core/ast/member/SharedMemberNode.java
Patch:
@@ -58,7 +58,7 @@ public SourceSection getHeaderSection() {
   }
 
   @Override
-  public Object execute(VirtualFrame frame) {
-    return executeBody(frame);
+  protected Object executeImpl(VirtualFrame frame) {
+    return bodyNode.executeGeneric(frame);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/member/TypeCheckedPropertyNode.java
Patch:
@@ -51,7 +51,7 @@ protected Object evalTypedObjectCached(
       @Cached("getProperty(cachedOwnerClass)") ClassProperty property,
       @Cached("createTypeCheckCallNode(property)") @Nullable DirectCallNode callNode) {
 
-    var result = executeBody(frame);
+    var result = bodyNode.executeGeneric(frame);
 
     // TODO: propagate SUPER_CALL_MARKER to disable constraint (but not type) check
     if (callNode != null && VmUtils.shouldRunTypeCheck(frame)) {
@@ -66,7 +66,7 @@ protected Object evalTypedObjectCached(
   protected Object eval(
       VirtualFrame frame, VmObjectLike owner, @Cached("create()") IndirectCallNode callNode) {
 
-    var result = executeBody(frame);
+    var result = bodyNode.executeGeneric(frame);
 
     if (VmUtils.shouldRunTypeCheck(frame)) {
       var property = getProperty(owner.getVmClass());
@@ -86,7 +86,7 @@ protected Object eval(
 
   @Specialization
   protected Object eval(VirtualFrame frame, @SuppressWarnings("unused") VmDynamic owner) {
-    return executeBody(frame);
+    return bodyNode.executeGeneric(frame);
   }
 
   protected ClassProperty getProperty(VmClass ownerClass) {

File: pkl-core/src/main/java/org/pkl/core/ast/member/TypedPropertyNode.java
Patch:
@@ -43,8 +43,8 @@ public TypedPropertyNode(
   }
 
   @Override
-  public Object execute(VirtualFrame frame) {
-    var propertyValue = executeBody(frame);
+  protected Object executeImpl(VirtualFrame frame) {
+    var propertyValue = bodyNode.executeGeneric(frame);
     if (VmUtils.shouldRunTypeCheck(frame)) {
       return typeCheckCallNode.call(
           VmUtils.getReceiver(frame),

File: pkl-core/src/main/java/org/pkl/core/ast/member/UntypedObjectMemberNode.java
Patch:
@@ -32,7 +32,7 @@ public UntypedObjectMemberNode(
   }
 
   @Override
-  public Object execute(VirtualFrame frame) {
-    return executeBody(frame);
+  protected Object executeImpl(VirtualFrame frame) {
+    return bodyNode.executeGeneric(frame);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/repl/ResolveClassMemberNode.java
Patch:
@@ -49,7 +49,7 @@ public String getName() {
   }
 
   @Override
-  public Object execute(VirtualFrame frame) {
+  protected Object executeImpl(VirtualFrame frame) {
     return unresolvedNode.execute(frame, clazz);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode.java
Patch:
@@ -103,7 +103,7 @@ private void addMembers(VirtualFrame frame, VmObject parent, ObjectData data) {
             var callTarget = member.getCallTarget();
             value = callTarget.call(parent, owner, key);
           }
-          owner.setCachedValue(key, value, member);
+          owner.setCachedValue(key, value);
         }
 
         frame.setAuxiliarySlot(customThisSlot, value);

File: pkl-core/src/main/java/org/pkl/core/ast/expression/member/ReadLocalPropertyNode.java
Patch:
@@ -71,7 +71,7 @@ public Object executeGeneric(VirtualFrame frame) {
 
     if (result == null) {
       result = callNode.call(objReceiver, owner, property.getName());
-      objReceiver.setCachedValue(property, result, property);
+      objReceiver.setCachedValue(property, result);
     }
 
     return result;

File: pkl-core/src/main/java/org/pkl/core/ast/expression/primary/ResolveVariableNode.java
Patch:
@@ -184,12 +184,12 @@ private ExpressionNode doResolve(VirtualFrame frame) {
       if (member != null) {
         var constantValue = member.getConstantValue();
         if (constantValue != null) {
-          baseModule.setCachedValue(variableName, constantValue, member);
+          baseModule.setCachedValue(variableName, constantValue);
           return new ConstantValueNode(sourceSection, constantValue);
         }
 
         var computedValue = member.getCallTarget().call(baseModule, baseModule);
-        baseModule.setCachedValue(variableName, computedValue, member);
+        baseModule.setCachedValue(variableName, computedValue);
         return new ConstantValueNode(sourceSection, computedValue);
       }
     }

File: pkl-core/src/main/java/org/pkl/core/ast/member/ListingOrMappingTypeCastNode.java
Patch:
@@ -26,7 +26,7 @@
 import org.pkl.core.util.Nullable;
 
 /** Performs a typecast on a Mapping entry value, or a Listing element. */
-public class ListingOrMappingTypeCastNode extends PklRootNode {
+public final class ListingOrMappingTypeCastNode extends PklRootNode {
 
   @Child private TypeNode typeNode;
   private final String qualifiedName;

File: pkl-core/src/main/java/org/pkl/core/ast/type/ResolveDeclaredTypeNode.java
Patch:
@@ -73,7 +73,7 @@ protected VmTyped getImport(
     var result = module.getCachedValue(importName);
     if (result == null) {
       result = callNode.call(member.getCallTarget(), module, module, importName);
-      module.setCachedValue(importName, result, member);
+      module.setCachedValue(importName, result);
     }
     return (VmTyped) result;
   }
@@ -94,7 +94,7 @@ protected VmTyped getImport(
     var result = module.getCachedValue(typeName);
     if (result == null) {
       result = callNode.call(member.getCallTarget(), module, module, typeName);
-      module.setCachedValue(typeName, result, member);
+      module.setCachedValue(typeName, result);
     }
     return result;
   }

File: pkl-core/src/main/java/org/pkl/core/runtime/VmFunction.java
Patch:
@@ -113,7 +113,7 @@ public UnmodifiableEconomicMap<Object, ObjectMember> getMembers() {
 
   @Override
   @TruffleBoundary
-  public void setCachedValue(Object key, Object value, ObjectMember objectMember) {
+  public void setCachedValue(Object key, Object value) {
     throw new VmExceptionBuilder()
         .bug("Class `VmFunction` does not support method `setCachedValue()`.")
         .build();

File: pkl-core/src/main/java/org/pkl/core/runtime/VmObject.java
Patch:
@@ -87,12 +87,12 @@ public final UnmodifiableEconomicMap<Object, ObjectMember> getMembers() {
   }
 
   @Override
-  public void setCachedValue(Object key, Object value, ObjectMember objectMember) {
+  public final void setCachedValue(Object key, Object value) {
     EconomicMaps.put(cachedValues, key, value);
   }
 
   @Override
-  public boolean hasCachedValue(Object key) {
+  public final boolean hasCachedValue(Object key) {
     return EconomicMaps.containsKey(cachedValues, key);
   }
 

File: pkl-core/src/main/java/org/pkl/core/runtime/VmObjectLike.java
Patch:
@@ -96,7 +96,7 @@ public boolean isModuleObject() {
    * receiver.
    */
   @TruffleBoundary
-  public abstract void setCachedValue(Object key, Object value, ObjectMember objectMember);
+  public abstract void setCachedValue(Object key, Object value);
 
   /**
    * Prefer this method over {@link #getCachedValue} if the value is not required. (There is no

File: pkl-core/src/main/java/org/pkl/core/runtime/VmObject.java
Patch:
@@ -92,7 +92,7 @@ public void setCachedValue(Object key, Object value, ObjectMember objectMember)
   }
 
   @Override
-  public final boolean hasCachedValue(Object key) {
+  public boolean hasCachedValue(Object key) {
     return EconomicMaps.containsKey(cachedValues, key);
   }
 

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/LetExprNode.java
Patch:
@@ -71,6 +71,6 @@ public Object executeGeneric(VirtualFrame frame) {
 
     var value = valueNode.executeGeneric(frame);
 
-    return callNode.call(function.getThisValue(), function, value);
+    return callNode.call(function.getThisValue(), function, false, value);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/AmendFunctionNode.java
Patch:
@@ -184,7 +184,8 @@ public Object executeGeneric(VirtualFrame frame) {
       var arguments = new Object[frameArguments.length];
       arguments[0] = functionToAmend.getThisValue();
       arguments[1] = functionToAmend;
-      System.arraycopy(frameArguments, 2, arguments, 2, frameArguments.length - 2);
+      arguments[2] = false;
+      System.arraycopy(frameArguments, 3, arguments, 3, frameArguments.length - 3);
 
       var valueToAmend = callNode.call(functionToAmend.getCallTarget(), arguments);
       if (!(valueToAmend instanceof VmFunction newFunctionToAmend)) {

File: pkl-core/src/main/java/org/pkl/core/ast/internal/ToStringNode.java
Patch:
@@ -80,6 +80,7 @@ protected InvokeMethodVirtualNode createInvokeNode() {
         Identifier.TO_STRING,
         new ExpressionNode[] {},
         MemberLookupMode.EXPLICIT_RECEIVER,
+        false,
         null,
         null);
   }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction0Node.java
Patch:
@@ -33,12 +33,12 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function);
+    return callNode.call(function.getThisValue(), function, false);
   }
 
   @Specialization(replaces = "evalDirect")
   protected Object eval(VmFunction function, @Cached("create()") IndirectCallNode callNode) {
 
-    return callNode.call(function.getCallTarget(), function.getThisValue(), function);
+    return callNode.call(function.getCallTarget(), function.getThisValue(), function, false);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction1Node.java
Patch:
@@ -77,13 +77,13 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, arg1);
+    return callNode.call(function.getThisValue(), function, false, arg1);
   }
 
   @Specialization(replaces = "evalDirect")
   protected Object eval(
       VmFunction function, Object arg1, @Cached("create()") IndirectCallNode callNode) {
 
-    return callNode.call(function.getCallTarget(), function.getThisValue(), function, arg1);
+    return callNode.call(function.getCallTarget(), function.getThisValue(), function, false, arg1);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction2Node.java
Patch:
@@ -76,7 +76,7 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, arg1, arg2);
+    return callNode.call(function.getThisValue(), function, false, arg1, arg2);
   }
 
   @Specialization(replaces = "evalDirect")
@@ -86,6 +86,7 @@ protected Object eval(
       Object arg2,
       @Cached("create()") IndirectCallNode callNode) {
 
-    return callNode.call(function.getCallTarget(), function.getThisValue(), function, arg1, arg2);
+    return callNode.call(
+        function.getCallTarget(), function.getThisValue(), function, false, arg1, arg2);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction3Node.java
Patch:
@@ -36,7 +36,7 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, arg1, arg2, arg3);
+    return callNode.call(function.getThisValue(), function, false, arg1, arg2, arg3);
   }
 
   @Specialization(replaces = "evalDirect")
@@ -48,6 +48,6 @@ protected Object eval(
       @Cached("create()") IndirectCallNode callNode) {
 
     return callNode.call(
-        function.getCallTarget(), function.getThisValue(), function, arg1, arg2, arg3);
+        function.getCallTarget(), function.getThisValue(), function, false, arg1, arg2, arg3);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/lambda/ApplyVmFunction4Node.java
Patch:
@@ -38,7 +38,7 @@ protected Object evalDirect(
           RootCallTarget cachedCallTarget,
       @Cached("create(cachedCallTarget)") DirectCallNode callNode) {
 
-    return callNode.call(function.getThisValue(), function, arg1, arg2, arg3, arg4);
+    return callNode.call(function.getThisValue(), function, false, arg1, arg2, arg3, arg4);
   }
 
   @Specialization(replaces = "evalDirect")
@@ -51,6 +51,6 @@ protected Object eval(
       @Cached("create()") IndirectCallNode callNode) {
 
     return callNode.call(
-        function.getCallTarget(), function.getThisValue(), function, arg1, arg2, arg3, arg4);
+        function.getCallTarget(), function.getThisValue(), function, false, arg1, arg2, arg3, arg4);
   }
 }

File: pkl-core/src/main/java/org/pkl/core/ast/type/IdentityMixinNode.java
Patch:
@@ -55,16 +55,16 @@ public String getName() {
   @Override
   public Object execute(VirtualFrame frame) {
     var arguments = frame.getArguments();
-    if (arguments.length != 3) {
+    if (arguments.length != 4) {
       CompilerDirectives.transferToInterpreter();
       throw exceptionBuilder()
-          .evalError("wrongFunctionArgumentCount", 1, arguments.length - 2)
+          .evalError("wrongFunctionArgumentCount", 1, arguments.length - 3)
           .withSourceSection(sourceSection)
           .build();
     }
 
     try {
-      var argument = arguments[2];
+      var argument = arguments[3];
       if (argumentTypeNode != null) {
         return argumentTypeNode.execute(frame, argument);
       }

File: pkl-core/src/main/java/org/pkl/core/runtime/VmFunction.java
Patch:
@@ -55,7 +55,7 @@ public int getParameterCount() {
   // if call site is a node, use ApplyVmFunction1Node.execute() or DirectCallNode.call() instead of
   // this method
   public Object apply(Object arg1) {
-    return getCallTarget().call(thisValue, this, arg1);
+    return getCallTarget().call(thisValue, this, false, arg1);
   }
 
   public String applyString(Object arg1) {
@@ -69,7 +69,7 @@ public String applyString(Object arg1) {
   // if call site is a node, use ApplyVmFunction2Node.execute() or DirectCallNode.call() instead of
   // this method
   public Object apply(Object arg1, Object arg2) {
-    return getCallTarget().call(thisValue, this, arg1, arg2);
+    return getCallTarget().call(thisValue, this, false, arg1, arg2);
   }
 
   public VmFunction copy(

File: pkl-core/src/main/java/org/pkl/core/stdlib/base/FunctionNodes.java
Patch:
@@ -31,11 +31,12 @@ public abstract static class applyToList extends ExternalMethod1Node {
     protected Object eval(VmFunction self, VmList argList) {
       var argCount = argList.getLength();
 
-      var args = new Object[2 + argCount];
+      var args = new Object[3 + argCount];
       args[0] = self.getThisValue();
       args[1] = self;
+      args[2] = false;
 
-      var i = 2;
+      var i = 3;
       for (var arg : argList) {
         args[i++] = arg;
       }

File: pkl-core/src/main/java/org/pkl/core/EvaluatorImpl.java
Patch:
@@ -235,7 +235,7 @@ public TestResults evaluateTest(ModuleSource moduleSource, boolean overwrite) {
     return doEvaluate(
         moduleSource,
         (module) -> {
-          var testRunner = new TestRunner(logger, frameTransformer, overwrite);
+          var testRunner = new TestRunner(logger, frameTransformer, overwrite, color);
           return testRunner.run(module);
         });
   }

File: bench/src/jmh/java/org/pkl/core/ListSort.java
Patch:
@@ -50,7 +50,8 @@ public class ListSort {
           null,
           null,
           IoUtils.getCurrentWorkingDir(),
-          StackFrameTransformers.defaultTransformer);
+          StackFrameTransformers.defaultTransformer,
+          false);
   private static final List<Object> list = new ArrayList<>(100000);
 
   static {

File: pkl-core/src/main/java/org/pkl/core/project/Project.java
Patch:
@@ -143,7 +143,7 @@ public static Project load(Evaluator evaluator, ModuleSource moduleSource) {
                   .build();
         }
         // stack frame transformer never used; this exception has no stack frames.
-        throw vmException.toPklException(StackFrameTransformers.defaultTransformer);
+        throw vmException.toPklException(StackFrameTransformers.defaultTransformer, false);
       }
       throw e;
     } catch (URISyntaxException e) {
@@ -192,6 +192,7 @@ private static List<List<URI>> findImportCycle(ModuleSource moduleSource) {
     var analyzer =
         new Analyzer(
             StackFrameTransformers.defaultTransformer,
+            builder.getColor(),
             SecurityManagers.defaultManager,
             builder.getModuleKeyFactories(),
             builder.getModuleCacheDir(),
@@ -517,6 +518,7 @@ public EvaluatorSettings(
               env,
               allowedModules,
               allowedResources,
+              null,
               noCache,
               moduleCacheDir,
               modulePath,

File: pkl-core/src/main/java/org/pkl/core/repl/ReplServer.java
Patch:
@@ -78,12 +78,13 @@ public ReplServer(
       @Nullable DeclaredDependencies projectDependencies,
       @Nullable String outputFormat,
       Path workingDir,
-      StackFrameTransformer frameTransformer) {
+      StackFrameTransformer frameTransformer,
+      boolean color) {
 
     this.workingDir = workingDir;
     this.securityManager = securityManager;
     this.moduleResolver = new ModuleResolver(moduleKeyFactories);
-    this.errorRenderer = new VmExceptionRenderer(new StackTraceRenderer(frameTransformer));
+    this.errorRenderer = new VmExceptionRenderer(new StackTraceRenderer(frameTransformer), color);
     replState = new ReplState(createEmptyReplModule(BaseModule.getModuleClass().getPrototype()));
 
     var languageRef = new MutableReference<VmLanguage>(null);

File: pkl-core/src/main/java/org/pkl/core/runtime/VmBugException.java
Patch:
@@ -58,8 +58,8 @@ public String getLocalizedMessage() {
 
   @Override
   @TruffleBoundary
-  public PklException toPklException(StackFrameTransformer transformer) {
-    var renderer = new VmExceptionRenderer(new StackTraceRenderer(transformer));
+  public PklException toPklException(StackFrameTransformer transformer, boolean color) {
+    var renderer = new VmExceptionRenderer(new StackTraceRenderer(transformer), color);
     var rendered = renderer.render(this);
     return new PklBugException(rendered, this);
   }

File: pkl-core/src/main/java/org/pkl/core/runtime/VmException.java
Patch:
@@ -117,8 +117,8 @@ public String toString() {
   }
 
   @TruffleBoundary
-  public PklException toPklException(StackFrameTransformer transformer) {
-    var renderer = new VmExceptionRenderer(new StackTraceRenderer(transformer));
+  public PklException toPklException(StackFrameTransformer transformer, boolean color) {
+    var renderer = new VmExceptionRenderer(new StackTraceRenderer(transformer), color);
     var rendered = renderer.render(this);
     return new PklException(rendered);
   }

File: pkl-core/src/main/java/org/pkl/core/stdlib/test/TestNodes.java
Patch:
@@ -28,7 +28,7 @@
 
 public final class TestNodes {
   private static final VmExceptionRenderer noStackTraceExceptionRenderer =
-      new VmExceptionRenderer(null);
+      new VmExceptionRenderer(null, false);
 
   private TestNodes() {}
 

File: pkl-gradle/src/main/java/org/pkl/gradle/PklPlugin.java
Patch:
@@ -445,6 +445,7 @@ private <T extends BasePklTask, S extends BasePklSpec> void configureBaseTask(T
     task.getModulePath().from(spec.getModulePath());
     task.getSettingsModule().set(spec.getSettingsModule());
     task.getEvalRootDir().set(spec.getEvalRootDir());
+    task.getColor().set(spec.getColor());
     task.getNoCache().set(spec.getNoCache());
     task.getModuleCacheDir().set(spec.getModuleCacheDir());
     task.getEvalTimeout().set(spec.getEvalTimeout());

File: pkl-gradle/src/main/java/org/pkl/gradle/spec/BasePklSpec.java
Patch:
@@ -45,6 +45,8 @@ public interface BasePklSpec {
 
   DirectoryProperty getModuleCacheDir();
 
+  Property<Boolean> getColor();
+
   Property<Boolean> getNoCache();
 
   // use same type (Duration) as Gradle's `Task.timeout`

File: pkl-gradle/src/main/java/org/pkl/gradle/task/ModulesTask.java
Patch:
@@ -36,6 +36,7 @@
 import org.gradle.api.tasks.Optional;
 import org.gradle.api.tasks.TaskAction;
 import org.pkl.commons.cli.CliBaseOptions;
+import org.pkl.core.evaluatorSettings.Color;
 import org.pkl.core.util.IoUtils;
 import org.pkl.core.util.Pair;
 
@@ -175,6 +176,7 @@ protected CliBaseOptions getCliBaseOptions() {
               getProjectDir().isPresent() ? getProjectDir().get().getAsFile().toPath() : null,
               getEvalTimeout().getOrNull(),
               mapAndGetOrNull(getModuleCacheDir(), it1 -> it1.getAsFile().toPath()),
+              getColor().getOrElse(false) ? Color.ALWAYS : Color.NEVER,
               getNoCache().getOrElse(false),
               getOmitProjectSettings().getOrElse(false),
               getNoProject().getOrElse(false),

File: pkl-core/src/main/java/org/pkl/core/ast/member/ObjectMember.java
Patch:
@@ -27,6 +27,7 @@
 import org.pkl.core.util.Nullable;
 
 public final class ObjectMember extends Member {
+
   @CompilationFinal private @Nullable Object constantValue;
   @CompilationFinal private @Nullable MemberNode memberNode;
 

File: pkl-core/src/main/java/org/pkl/core/externalreader/ExternalReaderMessagePackDecoder.java
Patch:
@@ -28,7 +28,7 @@
 import org.pkl.core.messaging.Message.Type;
 import org.pkl.core.util.Nullable;
 
-public class ExternalReaderMessagePackDecoder extends BaseMessagePackDecoder {
+final class ExternalReaderMessagePackDecoder extends BaseMessagePackDecoder {
 
   public ExternalReaderMessagePackDecoder(MessageUnpacker unpacker) {
     super(unpacker);

File: pkl-core/src/main/java/org/pkl/core/externalreader/ExternalReaderMessagePackEncoder.java
Patch:
@@ -25,7 +25,7 @@
 import org.pkl.core.messaging.ProtocolException;
 import org.pkl.core.util.Nullable;
 
-public class ExternalReaderMessagePackEncoder extends BaseMessagePackEncoder {
+final class ExternalReaderMessagePackEncoder extends BaseMessagePackEncoder {
 
   public ExternalReaderMessagePackEncoder(MessagePacker packer) {
     super(packer);

File: pkl-core/src/main/java/org/pkl/core/externalreader/ExternalReaderMessages.java
Patch:
@@ -20,7 +20,8 @@
 import org.pkl.core.messaging.Messages.ResourceReaderSpec;
 import org.pkl.core.util.Nullable;
 
-public class ExternalReaderMessages {
+final class ExternalReaderMessages {
+  private ExternalReaderMessages() {}
 
   public record InitializeModuleReaderRequest(long requestId, String scheme)
       implements Server.Request {

File: pkl-core/src/main/java/org/pkl/core/messaging/MessageTransports.java
Patch:
@@ -27,7 +27,8 @@
 import org.pkl.core.util.Pair;
 
 /** Factory methods for creating [MessageTransport]s. */
-public class MessageTransports {
+public final class MessageTransports {
+  private MessageTransports() {}
 
   public interface Logger {
     void log(String msg);

File: pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java
Patch:
@@ -30,7 +30,7 @@
 import org.pkl.core.SecurityManager;
 import org.pkl.core.SecurityManagerException;
 import org.pkl.core.externalreader.ExternalReaderProcessException;
-import org.pkl.core.messaging.Messages.*;
+import org.pkl.core.messaging.Messages.ModuleReaderSpec;
 import org.pkl.core.packages.Dependency;
 import org.pkl.core.packages.Dependency.LocalDependency;
 import org.pkl.core.packages.PackageAssetUri;
@@ -131,7 +131,7 @@ public static ModuleKey projectpackage(URI uri) throws URISyntaxException {
 
   /** Creates a module key for an externally read module. */
   public static ModuleKey externalResolver(
-      URI uri, ModuleReaderSpec spec, ExternalModuleResolver resolver) throws URISyntaxException {
+      URI uri, ModuleReaderSpec spec, ExternalModuleResolver resolver) {
     return new ExternalResolver(uri, spec, resolver);
   }
 

File: pkl-core/src/main/java/org/pkl/core/resource/ExternalResourceResolver.java
Patch:
@@ -49,7 +49,7 @@ public Optional<Object> read(URI uri) throws IOException {
     return Optional.of(new Resource(uri, result));
   }
 
-  public boolean hasElement(org.pkl.core.SecurityManager securityManager, URI elementUri)
+  public boolean hasElement(SecurityManager securityManager, URI elementUri)
       throws SecurityManagerException {
     securityManager.checkResolveResource(elementUri);
     try {

File: pkl-core/src/main/java/org/pkl/core/resource/ResourceReaders.java
Patch:
@@ -31,7 +31,7 @@
 import org.pkl.core.SecurityManagerException;
 import org.pkl.core.externalreader.ExternalReaderProcess;
 import org.pkl.core.externalreader.ExternalReaderProcessException;
-import org.pkl.core.messaging.Messages.*;
+import org.pkl.core.messaging.Messages.ResourceReaderSpec;
 import org.pkl.core.module.FileResolver;
 import org.pkl.core.module.ModulePathResolver;
 import org.pkl.core.module.PathElement;

File: pkl-core/src/main/java/org/pkl/core/util/Readers.java
Patch:
@@ -15,7 +15,9 @@
  */
 package org.pkl.core.util;
 
-public class Readers {
+public final class Readers {
+  private Readers() {}
+
   /** Closes the given readers, ignoring any exceptions. */
   public static void closeQuietly(Iterable<? extends AutoCloseable> readers) {
     for (var reader : readers) {

File: pkl-core/src/main/java/org/pkl/core/Evaluator.java
Patch:
@@ -16,7 +16,6 @@
 package org.pkl.core;
 
 import java.util.Map;
-import org.pkl.core.runtime.TestResults;
 import org.pkl.core.runtime.VmEvalException;
 
 /**
@@ -194,9 +193,9 @@ static Evaluator preconfigured() {
    * <p>This requires that the target module be a test module; it must either amend or extend module
    * {@code "pkl:test"}. Otherwise, a type mismatch error is thrown.
    *
-   * <p>This method will write possibly {@code pcf-expected.pkl} and {@code pcf-actual.pcf} files as
+   * <p>This method will write possibly {@code pkl-expected.pcf} and {@code pkl-actual.pcf} files as
    * a sibling of the test module. The {@code overwrite} parameter causes the evaluator to overwrite
-   * {@code pcf-expected.pkl} files if they currently exist.
+   * {@code pkl-expected.pkl} files if they currently exist.
    *
    * @throws PklException if an error occurs during evaluation
    * @throws IllegalStateException if this evaluator has already been closed

File: pkl-core/src/main/java/org/pkl/core/EvaluatorImpl.java
Patch:
@@ -40,7 +40,6 @@
 import org.pkl.core.runtime.Identifier;
 import org.pkl.core.runtime.ModuleResolver;
 import org.pkl.core.runtime.ResourceManager;
-import org.pkl.core.runtime.TestResults;
 import org.pkl.core.runtime.TestRunner;
 import org.pkl.core.runtime.VmContext;
 import org.pkl.core.runtime.VmException;

File: pkl-core/src/main/java/org/pkl/core/stdlib/test/report/TestReport.java
Patch:
@@ -21,7 +21,7 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import org.pkl.core.PklBugException;
-import org.pkl.core.runtime.TestResults;
+import org.pkl.core.TestResults;
 import org.pkl.core.util.StringBuilderWriter;
 
 public interface TestReport {

File: pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java
Patch:
@@ -2153,7 +2153,7 @@ public VmTyped getMirror() {
 
     @Override
     public boolean isEquivalentTo(TypeNode other) {
-      return other instanceof UIntTypeAliasTypeNode;
+      return other instanceof UIntTypeAliasTypeNode aliasTypeNode && mask == aliasTypeNode.mask;
     }
 
     @Override

File: pkl-core/src/main/java/org/pkl/core/PClassInfo.java
Patch:
@@ -61,6 +61,8 @@ public final class PClassInfo<T> implements Serializable {
   public static final PClassInfo<LinkedHashMap> Mapping =
       pklBaseClassInfo("Mapping", LinkedHashMap.class);
   public static final PClassInfo<PModule> Module = pklBaseClassInfo("Module", PModule.class);
+  public static final PClassInfo<PObject> ModuleOutput =
+      pklBaseClassInfo("ModuleOutput", PObject.class);
   public static final PClassInfo<PClass> Class = pklBaseClassInfo("Class", PClass.class);
   public static final PClassInfo<TypeAlias> TypeAlias =
       pklBaseClassInfo("TypeAlias", TypeAlias.class);
@@ -216,6 +218,7 @@ public String toString() {
           entry(Listing.className, Listing),
           entry(Mapping.className, Mapping),
           entry(Module.className, Module),
+          entry(ModuleOutput.className, ModuleOutput),
           entry(Class.className, Class),
           entry(TypeAlias.className, TypeAlias),
           entry(Regex.className, Regex),

File: pkl-core/src/main/java/org/pkl/core/StackFrameTransformers.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.nio.file.Path;
 import java.util.stream.StreamSupport;
 import org.pkl.core.packages.PackageAssetUri;
 import org.pkl.core.runtime.VmContext;
@@ -93,7 +92,7 @@ public static StackFrameTransformer convertFilePathToUriScheme(String scheme) {
       var uri = frame.getModuleUri();
       if (!uri.startsWith("file:")) return frame;
 
-      return transformUri(frame, Path.of(URI.create(uri)).toString(), scheme);
+      return transformUri(frame, IoUtils.pathOf(URI.create(uri)).toString(), scheme);
     };
   }
 

File: pkl-core/src/main/java/org/pkl/core/module/FileResolver.java
Patch:
@@ -24,12 +24,13 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import org.pkl.core.util.IoUtils;
 
 public final class FileResolver {
   private FileResolver() {}
 
   public static List<PathElement> listElements(URI baseUri) throws IOException {
-    return listElements(Path.of(baseUri));
+    return listElements(IoUtils.pathOf(baseUri));
   }
 
   public static List<PathElement> listElements(Path path) throws IOException {
@@ -49,7 +50,7 @@ public static List<PathElement> listElements(Path path) throws IOException {
   }
 
   public static boolean hasElement(URI elementUri) {
-    return Files.exists(Path.of(elementUri));
+    return Files.exists(IoUtils.pathOf(elementUri));
   }
 
   public static boolean hasElement(Path path) {

File: pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java
Patch:
@@ -16,7 +16,6 @@
 package org.pkl.core.module;
 
 import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
-import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -26,7 +25,6 @@
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse.BodyHandlers;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
 import java.util.List;
 import java.util.Map;
 import org.pkl.core.SecurityManager;
@@ -325,7 +323,7 @@ public ResolvedModuleKey resolve(SecurityManager securityManager)
       if (java.io.File.separatorChar == '\\' && uriPath != null && uriPath.contains("\\")) {
         throw new FileNotFoundException();
       }
-      var realPath = Path.of(uri).toRealPath();
+      var realPath = IoUtils.pathOf(uri).toRealPath();
       var resolvedUri = realPath.toUri();
       securityManager.checkResolveModule(resolvedUri);
       return ResolvedModuleKeys.file(this, resolvedUri, realPath);

File: pkl-core/src/main/java/org/pkl/core/Analyzer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ImportGraph.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/runtime/AnalyzeModule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/runtime/VmImportAnalyzer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/runtime/VmWrappedEvalException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/stdlib/analyze/AnalyzeNodes.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-gradle/src/main/java/org/pkl/gradle/PklAnalyzerCommands.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-gradle/src/main/java/org/pkl/gradle/spec/AnalyzeImportsSpec.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-gradle/src/main/java/org/pkl/gradle/task/AnalyzeImportsTask.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java
Patch:
@@ -298,6 +298,9 @@ public static Object doReadMember(
           }
         }
       } else if (receiver instanceof VmListingOrMapping<?> vmListingOrMapping) {
+        if (owner != receiver && owner instanceof VmListingOrMapping<?> vmListingOrMappingOwner) {
+          ret = vmListingOrMappingOwner.typecastObjectMember(member, ret, callNode);
+        }
         ret = vmListingOrMapping.typecastObjectMember(member, ret, callNode);
       }
       receiver.setCachedValue(memberKey, ret, member);

File: pkl-core/src/main/java/org/pkl/core/runtime/ModuleCache.java
Patch:
@@ -85,6 +85,8 @@ public synchronized VmTyped getOrLoad(
       // some standard library modules are cached as static singletons
       // and hence aren't parsed/initialized anew for every evaluator
       switch (moduleName) {
+        case "analyze":
+          return AnalyzeModule.getModule();
         case "base":
           // always needed
           return BaseModule.getModule();

File: pkl-core/src/main/java/org/pkl/core/runtime/VmException.java
Patch:
@@ -94,6 +94,7 @@ public final Map<CallTarget, StackFrame> getInsertedStackFrames() {
   public enum Kind {
     EVAL_ERROR,
     UNDEFINED_VALUE,
+    WRAPPED,
     BUG
   }
 

File: pkl-gradle/src/main/java/org/pkl/gradle/task/ModulesTask.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 import org.gradle.api.InvalidUserDataException;
-import org.gradle.api.file.ConfigurableFileCollection;
 import org.gradle.api.file.DirectoryProperty;
 import org.gradle.api.file.FileCollection;
 import org.gradle.api.provider.ListProperty;
@@ -49,7 +48,7 @@ public abstract class ModulesTask extends BasePklTask {
   public abstract ListProperty<Object> getSourceModules();
 
   @InputFiles
-  public abstract ConfigurableFileCollection getTransitiveModules();
+  public abstract ListProperty<File> getTransitiveModules();
 
   private final Map<List<Object>, Pair<List<File>, List<URI>>> parsedSourceModulesCache =
       new HashMap<>();

File: bench/src/jmh/java/org/pkl/core/Fibonacci.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: bench/src/jmh/java/org/pkl/core/ListSort.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: bench/src/jmh/java/org/pkl/core/parser/ParserBenchmark.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-cli/src/main/java/org/pkl/cli/svm/InitFeature.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-cli/src/main/java/org/pkl/cli/svm/MessagePackRecomputations.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-cli/src/main/java/org/pkl/cli/svm/PolyglotContextImplTarget.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-cli/src/main/java/org/pkl/cli/svm/PolyglotThreadInfoTarget.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-cli/src/main/java/org/pkl/cli/svm/ThreadLocalHandshakeTarget.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-cli/src/main/java/org/pkl/cli/svm/WeakAssumedValueTarget.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/AbstractConfig.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/CompositeConfig.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/Config.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/ConfigEvaluator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/ConfigEvaluatorBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/ConfigEvaluatorImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/InvalidMappingException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/JavaType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/LeafConfig.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/MapConfig.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/NoSuchChildException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ClassRegistry.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Conversion.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ConversionException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Conversions.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Converter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ConverterFactories.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ConverterFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Named.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/NonNull.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PAnyToOptional.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PCollectionToArray.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PCollectionToCollection.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PMapToMap.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PNullToAny.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PObjectToDataObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PObjectToMap.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PObjectToPObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PPairToPair.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/PStringToEnum.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Reflection.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Tuple2.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/TypeMapping.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/TypeMappings.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/Types.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ValueMapper.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ValueMapperBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ValueMapperImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/ConfigEvaluatorBuilderTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/ConfigTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/JavaTypeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/ConversionsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PAnyToOptionalTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PCollectionToArrayTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PCollectionToCollectionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PMapToMapTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PModuleToDataObjectTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PNullToAnyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToDataObjectJavaxInjectTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToDataObjectOverriddenPropertyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToDataObjectTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToInnerClassTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PObjectToPObjectTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PPairToPairTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PStringToEnumTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PStringToVersionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PVersionToStringTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/PVersionToVersionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/Person.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/ReflectionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-java/src/test/java/org/pkl/config/java/mapper/TypesTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-config-kotlin/src/test/java/org/pkl/config/kotlin/JavaPerson.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/BufferedLogger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Composite.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/DataSize.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/DataSizeUnit.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Duration.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/DurationUnit.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Evaluator.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/EvaluatorBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/EvaluatorImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/FileOutput.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/FileOutputImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/JsonRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Logger.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Loggers.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Member.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Modifier.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ModuleSchema.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ModuleSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/NoSuchPropertyException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/OutputFormat.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PClass.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PClassInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PListRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PModule.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PNull.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PObject.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Pair.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PcfRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PklBugException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PklException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PklInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Platform.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/PropertiesRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Release.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/RendererException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/SecurityManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/SecurityManagerBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/SecurityManagerException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/SecurityManagers.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/StackFrame.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/StackFrameTransformer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/StackFrameTransformers.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/TypeAlias.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/TypeParameter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Value.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ValueConverter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ValueFormatter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ValueRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ValueRenderers.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ValueVisitor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/Version.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/YamlRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/ConstantNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/ConstantValueNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/ExpressionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/MemberLookupMode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/MemberNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/PklNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/PklRootNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/SimpleRootNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/VmModifier.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/AbstractAstBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/CannotInvokeAbstractFunctionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/CannotInvokeAbstractPropertyNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/ConstLevel.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/ImportsAndReadsParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/AdditionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/BinaryExpressionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/ComparatorNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/DivisionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/EqualNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/ExponentiationNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/GreaterThanNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/GreaterThanOrEqualNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/LessThanNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/LessThanOrEqualNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/LetExprNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/LogicalAndNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/LogicalOrNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/MultiplicationNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/NotEqualNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/NullCoalescingNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/PipeNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/RemainderNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/ShortCircuitingExpressionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/SubscriptNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/SubtractionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/TruncatingDivisionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorElementNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorEntryNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorForNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorMemberNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorObjectLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPropertyNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorSpreadNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorWhenNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/WriteForVariablesNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/AmendFunctionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/AmendModuleNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/CheckIsAnnotationClassNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/ConstantEntriesLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/ElementsEntriesLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/ElementsLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/EmptyObjectLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/EntriesLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/FalseLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/FloatLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/FunctionLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/IntLiteralNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright © 2024 Apple Inc. and the Pkl project authors. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: pkl-core/src/main/java/org/pkl/core/runtime/VmUtils.java
Patch:
@@ -43,7 +43,6 @@
 import org.pkl.core.StackFrameTransformer;
 import org.pkl.core.ast.ConstantNode;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.MemberNode;
 import org.pkl.core.ast.SimpleRootNode;
 import org.pkl.core.ast.VmModifier;
 import org.pkl.core.ast.builder.AstBuilder;
@@ -62,8 +61,7 @@
 import org.pkl.core.util.Nullable;
 
 public final class VmUtils {
-  /** See {@link MemberNode#shouldRunTypeCheck(VirtualFrame)}. */
-  @SuppressWarnings("JavadocReference")
+  /** See {@link VmUtils#shouldRunTypeCheck(VirtualFrame)}. */
   public static final Object SKIP_TYPECHECK_MARKER = new Object();
 
   public static final String REPL_TEXT = "repl:text";

File: pkl-core/src/main/java/org/pkl/core/project/ProjectDeps.java
Patch:
@@ -218,6 +218,7 @@ private void write() throws IOException {
       }
       jsonWriter.endObject();
       jsonWriter.endObject();
+      jsonWriter.newline();
       jsonWriter.close();
     }
   }

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode.java
Patch:
@@ -103,7 +103,7 @@ private void addMembers(VirtualFrame frame, VmObject parent, ObjectData data) {
             var callTarget = member.getCallTarget();
             value = callTarget.call(parent, owner, key);
           }
-          owner.setCachedValue(key, value);
+          owner.setCachedValue(key, value, member);
         }
 
         frame.setAuxiliarySlot(customThisSlot, value);

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/EntriesLiteralNode.java
Patch:
@@ -150,8 +150,8 @@ protected void evalListingClass(@SuppressWarnings("unused") VmClass parent) {
 
   @Fallback
   @TruffleBoundary
-  protected void fallback(Object parent) {
-    elementsEntriesFallback(parent, values[0], false);
+  protected Object fallback(Object parent) {
+    return elementsEntriesFallback(parent, values[0], false);
   }
 
   @ExplodeLoop

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode.java
Patch:
@@ -285,7 +285,7 @@ protected void addListEntries(
   }
 
   @TruffleBoundary
-  protected void elementsEntriesFallback(
+  protected Object elementsEntriesFallback(
       Object parent, @Nullable ObjectMember firstElemOrEntry, boolean isElementsOnly) {
     var parentIsClass = parent instanceof VmClass;
     var parentClass = parentIsClass ? (VmClass) parent : VmUtils.getClass(parent);

File: pkl-core/src/main/java/org/pkl/core/ast/expression/member/ReadLocalPropertyNode.java
Patch:
@@ -71,7 +71,7 @@ public Object executeGeneric(VirtualFrame frame) {
 
     if (result == null) {
       result = callNode.call(objReceiver, owner, property.getName());
-      objReceiver.setCachedValue(property, result);
+      objReceiver.setCachedValue(property, result, property);
     }
 
     return result;

File: pkl-core/src/main/java/org/pkl/core/ast/expression/primary/ResolveVariableNode.java
Patch:
@@ -184,12 +184,12 @@ private ExpressionNode doResolve(VirtualFrame frame) {
       if (member != null) {
         var constantValue = member.getConstantValue();
         if (constantValue != null) {
-          baseModule.setCachedValue(variableName, constantValue);
+          baseModule.setCachedValue(variableName, constantValue, member);
           return new ConstantValueNode(sourceSection, constantValue);
         }
 
         var computedValue = member.getCallTarget().call(baseModule, baseModule);
-        baseModule.setCachedValue(variableName, computedValue);
+        baseModule.setCachedValue(variableName, computedValue, member);
         return new ConstantValueNode(sourceSection, computedValue);
       }
     }

File: pkl-core/src/main/java/org/pkl/core/ast/member/FunctionNode.java
Patch:
@@ -118,7 +118,7 @@ public Object execute(VirtualFrame frame) {
       var result = bodyNode.executeGeneric(frame);
 
       if (checkedReturnTypeNode != null) {
-        checkedReturnTypeNode.execute(frame, result);
+        return checkedReturnTypeNode.execute(frame, result);
       }
 
       return result;

File: pkl-core/src/main/java/org/pkl/core/ast/member/LocalTypedPropertyNode.java
Patch:
@@ -66,8 +66,7 @@ public Object execute(VirtualFrame frame) {
         unresolvedTypeNode = null;
       }
       var result = bodyNode.executeGeneric(frame);
-      typeNode.execute(frame, result);
-      return result;
+      return typeNode.execute(frame, result);
     } catch (VmTypeMismatchException e) {
       CompilerDirectives.transferToInterpreter();
       throw e.toVmException();

File: pkl-core/src/main/java/org/pkl/core/ast/member/ObjectMember.java
Patch:
@@ -134,7 +134,8 @@ public SourceSection getBodySection() {
     var skip = 0;
     var text = candidate.getCharacters();
     var ch = text.charAt(skip);
-    while (ch == '=' || Character.isWhitespace(ch)) {
+    // body section of entries needs to chomp the ending delimiter too.
+    while ((ch == ']' && isEntry()) || ch == '=' || Character.isWhitespace(ch)) {
       ch = text.charAt(++skip);
     }
     return source.createSection(candidate.getCharIndex() + skip, candidate.getCharLength() - skip);

File: pkl-core/src/main/java/org/pkl/core/ast/member/PropertyTypeNode.java
Patch:
@@ -62,10 +62,9 @@ public String getName() {
   }
 
   @Override
-  public @Nullable Object execute(VirtualFrame frame) {
+  public Object execute(VirtualFrame frame) {
     try {
-      typeNode.execute(frame, frame.getArguments()[2]);
-      return null;
+      return typeNode.execute(frame, frame.getArguments()[2]);
     } catch (VmTypeMismatchException e) {
       CompilerDirectives.transferToInterpreter();
       throw e.toVmException();

File: pkl-core/src/main/java/org/pkl/core/ast/member/TypedPropertyNode.java
Patch:
@@ -45,8 +45,9 @@ public TypedPropertyNode(
   @Override
   public Object execute(VirtualFrame frame) {
     var propertyValue = executeBody(frame);
-    if (shouldRunTypeCheck(frame)) {
-      typeCheckCallNode.call(VmUtils.getReceiver(frame), VmUtils.getOwner(frame), propertyValue);
+    if (VmUtils.shouldRunTypeCheck(frame)) {
+      return typeCheckCallNode.call(
+          VmUtils.getReceiver(frame), VmUtils.getOwner(frame), propertyValue);
     }
     return propertyValue;
   }

File: pkl-core/src/main/java/org/pkl/core/ast/type/IdentityMixinNode.java
Patch:
@@ -66,7 +66,7 @@ public Object execute(VirtualFrame frame) {
     try {
       var argument = arguments[2];
       if (argumentTypeNode != null) {
-        argumentTypeNode.execute(frame, argument);
+        return argumentTypeNode.execute(frame, argument);
       }
       return argument;
     } catch (VmTypeMismatchException e) {

File: pkl-core/src/main/java/org/pkl/core/ast/type/ResolveDeclaredTypeNode.java
Patch:
@@ -73,7 +73,7 @@ protected VmTyped getImport(
     var result = module.getCachedValue(importName);
     if (result == null) {
       result = callNode.call(member.getCallTarget(), module, module, importName);
-      module.setCachedValue(importName, result);
+      module.setCachedValue(importName, result, member);
     }
     return (VmTyped) result;
   }
@@ -94,7 +94,7 @@ protected VmTyped getImport(
     var result = module.getCachedValue(typeName);
     if (result == null) {
       result = callNode.call(member.getCallTarget(), module, module, typeName);
-      module.setCachedValue(typeName, result);
+      module.setCachedValue(typeName, result, member);
     }
     return result;
   }

File: pkl-core/src/main/java/org/pkl/core/ast/type/TypeCastNode.java
Patch:
@@ -17,10 +17,12 @@
 
 import com.oracle.truffle.api.CompilerDirectives;
 import com.oracle.truffle.api.frame.VirtualFrame;
+import com.oracle.truffle.api.nodes.NodeInfo;
 import com.oracle.truffle.api.source.SourceSection;
 import org.pkl.core.ast.ExpressionNode;
 import org.pkl.core.util.LateInit;
 
+@NodeInfo(shortName = "as")
 public final class TypeCastNode extends ExpressionNode {
   @Child private ExpressionNode valueNode;
   @Child private UnresolvedTypeNode unresolvedTypeNode;
@@ -47,8 +49,7 @@ public Object executeGeneric(VirtualFrame frame) {
 
     var value = valueNode.executeGeneric(frame);
     try {
-      typeNode.execute(frame, value);
-      return value;
+      return typeNode.execute(frame, value);
     } catch (VmTypeMismatchException e) {
       CompilerDirectives.transferToInterpreter();
       throw e.toVmException();

File: pkl-core/src/main/java/org/pkl/core/runtime/VmFunction.java
Patch:
@@ -113,7 +113,7 @@ public UnmodifiableEconomicMap<Object, ObjectMember> getMembers() {
 
   @Override
   @TruffleBoundary
-  public void setCachedValue(Object key, Object value) {
+  public void setCachedValue(Object key, Object value, ObjectMember objectMember) {
     throw new VmExceptionBuilder()
         .bug("Class `VmFunction` does not support method `setCachedValue()`.")
         .build();

File: pkl-core/src/main/java/org/pkl/core/runtime/VmObject.java
Patch:
@@ -82,12 +82,12 @@ public final UnmodifiableEconomicMap<Object, ObjectMember> getMembers() {
   }
 
   @Override
-  public final @Nullable Object getCachedValue(Object key) {
+  public @Nullable Object getCachedValue(Object key) {
     return EconomicMaps.get(cachedValues, key);
   }
 
   @Override
-  public final void setCachedValue(Object key, Object value) {
+  public void setCachedValue(Object key, Object value, ObjectMember objectMember) {
     EconomicMaps.put(cachedValues, key, value);
   }
 

File: pkl-core/src/main/java/org/pkl/core/runtime/VmObjectLike.java
Patch:
@@ -52,7 +52,7 @@ public final boolean hasExtraStorage() {
     return extraStorage != null;
   }
 
-  public final Object getExtraStorage() {
+  public Object getExtraStorage() {
     assert extraStorage != null;
     return extraStorage;
   }
@@ -96,7 +96,7 @@ public boolean isModuleObject() {
    * receiver.
    */
   @TruffleBoundary
-  public abstract void setCachedValue(Object key, Object value);
+  public abstract void setCachedValue(Object key, Object value, ObjectMember objectMember);
 
   /**
    * Prefer this method over {@link #getCachedValue} if the value is not required. (There is no

File: pkl-core/src/main/java/org/pkl/core/ast/expression/unary/ImportGlobMemberBodyNode.java
Patch:
@@ -45,7 +45,7 @@ public ImportGlobMemberBodyNode(
 
   @Override
   public Object executeGeneric(VirtualFrame frame) {
-    var mapping = VmUtils.getObjectReceiver(frame);
+    var mapping = VmUtils.getOwner(frame);
     var path = (String) VmUtils.getMemberKey(frame);
     return importModule(mapping, path);
   }

File: pkl-core/src/main/java/org/pkl/core/ast/expression/unary/ReadGlobMemberBodyNode.java
Patch:
@@ -33,7 +33,7 @@ public ReadGlobMemberBodyNode(SourceSection sourceSection) {
 
   @Override
   public Object executeGeneric(VirtualFrame frame) {
-    var mapping = VmUtils.getObjectReceiver(frame);
+    var mapping = VmUtils.getOwner(frame);
     var path = (String) VmUtils.getMemberKey(frame);
     return readResource(mapping, path);
   }

File: pkl-core/src/main/java/org/pkl/core/stdlib/base/StringNodes.java
Patch:
@@ -768,7 +768,7 @@ public abstract static class toInt extends ExternalMethod0Node {
     @Specialization
     protected long eval(String self) {
       try {
-        return Long.parseLong(self);
+        return Long.parseLong(self.replaceAll("_", ""));
       } catch (NumberFormatException e) {
         throw exceptionBuilder()
             .evalError("cannotParseStringAs", "Int")
@@ -783,7 +783,7 @@ public abstract static class toIntOrNull extends ExternalMethod0Node {
     @Specialization
     protected Object eval(String self) {
       try {
-        return Long.parseLong(self);
+        return Long.parseLong(self.replaceAll("_", ""));
       } catch (NumberFormatException e) {
         return VmNull.withoutDefault();
       }

File: pkl-core/src/main/java/org/pkl/core/runtime/ModuleCache.java
Patch:
@@ -30,6 +30,7 @@
 import org.pkl.core.Release;
 import org.pkl.core.SecurityManager;
 import org.pkl.core.SecurityManagerException;
+import org.pkl.core.http.HttpClientInitException;
 import org.pkl.core.module.ModuleKey;
 import org.pkl.core.module.ModuleKeys;
 import org.pkl.core.module.ResolvedModuleKey;
@@ -191,7 +192,7 @@ private ResolvedModuleKey resolve(
       ModuleKey module, SecurityManager securityManager, @Nullable Node importNode) {
     try {
       return module.resolve(securityManager);
-    } catch (SecurityManagerException | PackageLoadError e) {
+    } catch (SecurityManagerException | PackageLoadError | HttpClientInitException e) {
       throw new VmExceptionBuilder().withOptionalLocation(importNode).withCause(e).build();
     } catch (FileNotFoundException | NoSuchFileException e) {
       var exceptionBuilder =

File: pkl-core/src/main/java/org/pkl/core/ast/builder/SymbolTable.java
Patch:
@@ -439,7 +439,7 @@ public TypeAliasScope(
         String qualifiedName,
         FrameDescriptor.Builder frameDescriptorBuilder,
         List<TypeParameter> typeParameters) {
-      super(parent, name, qualifiedName, ConstLevel.NONE, frameDescriptorBuilder, typeParameters);
+      super(parent, name, qualifiedName, ConstLevel.MODULE, frameDescriptorBuilder, typeParameters);
     }
   }
 

File: pkl-core/src/main/java/org/pkl/core/EvaluatorImpl.java
Patch:
@@ -105,7 +105,8 @@ public EvaluatorImpl(
                       packageResolver,
                       projectDependencies == null
                           ? null
-                          : new ProjectDependenciesManager(projectDependencies)));
+                          : new ProjectDependenciesManager(
+                              projectDependencies, moduleResolver, securityManager)));
             });
     this.timeout = timeout;
     // NOTE: would probably make sense to share executor between evaluators

File: pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java
Patch:
@@ -1825,6 +1825,8 @@ private URI resolveImport(String importUri, StringConstantContext importUriCtx)
     } catch (VmException e) {
       throw exceptionBuilder()
           .evalError(e.getMessage(), e.getMessageArguments())
+          .withCause(e.getCause())
+          .withHint(e.getHint())
           .withSourceSection(createSourceSection(importUriCtx))
           .build();
     }

File: pkl-core/src/main/java/org/pkl/core/repl/ReplServer.java
Patch:
@@ -89,7 +89,9 @@ public ReplServer(
     var languageRef = new MutableReference<VmLanguage>(null);
     packageResolver = PackageResolver.getInstance(securityManager, httpClient, moduleCacheDir);
     projectDependenciesManager =
-        projectDependencies == null ? null : new ProjectDependenciesManager(projectDependencies);
+        projectDependencies == null
+            ? null
+            : new ProjectDependenciesManager(projectDependencies, moduleResolver, securityManager);
     polyglotContext =
         VmUtils.createContext(
             () -> {

File: pkl-core/src/main/java/org/pkl/core/runtime/VmExceptionBuilder.java
Patch:
@@ -324,7 +324,7 @@ public VmExceptionBuilder withCause(Throwable cause) {
     return this;
   }
 
-  public VmExceptionBuilder withHint(String hint) {
+  public VmExceptionBuilder withHint(@Nullable String hint) {
     this.hint = hint;
     return this;
   }

File: pkl-core/src/main/java/org/pkl/core/ast/expression/unary/ImportNode.java
Patch:
@@ -33,7 +33,6 @@
 @NodeInfo(shortName = "import")
 public final class ImportNode extends AbstractImportNode {
   private final VmLanguage language;
-  private final ResolvedModuleKey currentModule;
 
   @CompilationFinal @LateInit private VmTyped importedModule;
 
@@ -42,9 +41,8 @@ public ImportNode(
       SourceSection sourceSection,
       ResolvedModuleKey currentModule,
       URI importUri) {
-    super(sourceSection, importUri);
+    super(sourceSection, currentModule, importUri);
     this.language = language;
-    this.currentModule = currentModule;
 
     assert importUri.isAbsolute();
   }

File: pkl-core/src/main/java/org/pkl/core/ast/member/FunctionNode.java
Patch:
@@ -27,7 +27,6 @@
 import org.pkl.core.PType;
 import org.pkl.core.TypeParameter;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.MemberNode;
 import org.pkl.core.ast.VmModifier;
 import org.pkl.core.ast.type.TypeNode;
 import org.pkl.core.ast.type.VmTypeMismatchException;
@@ -36,7 +35,7 @@
 import org.pkl.core.util.Nullable;
 import org.pkl.core.util.Pair;
 
-public final class FunctionNode extends MemberNode {
+public final class FunctionNode extends RegularMemberNode {
   // Every function (and property) call passes two implicit arguments at positions
   // frame.getArguments()[0] and [1]:
   // - the receiver (target) of the call, of type Object (see VmUtils.getReceiver())

File: pkl-core/src/main/java/org/pkl/core/ast/member/LocalTypedPropertyNode.java
Patch:
@@ -19,7 +19,6 @@
 import com.oracle.truffle.api.frame.FrameDescriptor;
 import com.oracle.truffle.api.frame.VirtualFrame;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.MemberNode;
 import org.pkl.core.ast.type.TypeNode;
 import org.pkl.core.ast.type.UnresolvedTypeNode;
 import org.pkl.core.ast.type.VmTypeMismatchException;
@@ -28,7 +27,7 @@
 import org.pkl.core.util.LateInit;
 import org.pkl.core.util.Nullable;
 
-public final class LocalTypedPropertyNode extends MemberNode {
+public final class LocalTypedPropertyNode extends RegularMemberNode {
   private final VmLanguage language;
   @Child private UnresolvedTypeNode unresolvedTypeNode;
   @Child @LateInit private TypeNode typeNode;

File: pkl-core/src/main/java/org/pkl/core/ast/member/ObjectMethodNode.java
Patch:
@@ -21,14 +21,13 @@
 import com.oracle.truffle.api.frame.FrameDescriptor;
 import com.oracle.truffle.api.frame.VirtualFrame;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.MemberNode;
 import org.pkl.core.ast.type.TypeNode;
 import org.pkl.core.ast.type.UnresolvedTypeNode;
 import org.pkl.core.runtime.*;
 import org.pkl.core.util.LateInit;
 import org.pkl.core.util.Nullable;
 
-public final class ObjectMethodNode extends MemberNode {
+public final class ObjectMethodNode extends RegularMemberNode {
   private final VmLanguage language;
   private final int parameterCount;
   @Children private final @Nullable UnresolvedTypeNode[] unresolvedParameterTypeNodes;

File: pkl-core/src/main/java/org/pkl/core/ast/member/TypedPropertyNode.java
Patch:
@@ -20,12 +20,11 @@
 import com.oracle.truffle.api.frame.VirtualFrame;
 import com.oracle.truffle.api.nodes.DirectCallNode;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.MemberNode;
 import org.pkl.core.runtime.VmLanguage;
 import org.pkl.core.runtime.VmUtils;
 
 /** A property definition that has a type annotation. */
-public final class TypedPropertyNode extends MemberNode {
+public final class TypedPropertyNode extends RegularMemberNode {
   @Child private DirectCallNode typeCheckCallNode;
 
   @TruffleBoundary
@@ -46,7 +45,7 @@ public TypedPropertyNode(
   @Override
   public Object execute(VirtualFrame frame) {
     var propertyValue = executeBody(frame);
-    if (!shouldRunTypecheck(frame)) {
+    if (shouldRunTypeCheck(frame)) {
       typeCheckCallNode.call(VmUtils.getReceiver(frame), VmUtils.getOwner(frame), propertyValue);
     }
     return propertyValue;

File: pkl-core/src/main/java/org/pkl/core/ast/member/UntypedObjectMemberNode.java
Patch:
@@ -18,11 +18,10 @@
 import com.oracle.truffle.api.frame.FrameDescriptor;
 import com.oracle.truffle.api.frame.VirtualFrame;
 import org.pkl.core.ast.ExpressionNode;
-import org.pkl.core.ast.MemberNode;
 import org.pkl.core.runtime.VmLanguage;
 import org.pkl.core.util.Nullable;
 
-public final class UntypedObjectMemberNode extends MemberNode {
+public final class UntypedObjectMemberNode extends RegularMemberNode {
   public UntypedObjectMemberNode(
       @Nullable VmLanguage language,
       FrameDescriptor descriptor,

File: pkl-core/src/main/java/org/pkl/core/runtime/VmLanguage.java
Patch:
@@ -22,7 +22,6 @@
 import com.oracle.truffle.api.nodes.Node;
 import com.oracle.truffle.api.source.Source;
 import org.pkl.core.ast.builder.AstBuilder;
-import org.pkl.core.ast.expression.unary.ImportNode;
 import org.pkl.core.module.ModuleKey;
 import org.pkl.core.module.ResolvedModuleKey;
 import org.pkl.core.parser.LexParseException;
@@ -73,7 +72,7 @@ public VmTyped loadModule(ModuleKey moduleKey) {
   }
 
   @TruffleBoundary
-  public VmTyped loadModule(ModuleKey moduleKey, ImportNode importNode) {
+  public VmTyped loadModule(ModuleKey moduleKey, @Nullable Node importNode) {
     var context = VmContext.get(null);
 
     return context

File: pkl-core/src/main/java/org/pkl/core/Platform.java
Patch:
@@ -31,6 +31,7 @@ public final class Platform {
     var pklVersion = Release.current().version().toString();
     var osName = System.getProperty("os.name");
     if (osName.equals("Mac OS X")) osName = "macOS";
+    if (osName.contains("Windows")) osName = "Windows";
     var osVersion = System.getProperty("os.version");
     var architecture = System.getProperty("os.arch");
 

File: pkl-core/src/main/java/org/pkl/core/Release.java
Patch:
@@ -49,6 +49,7 @@ public final class Release {
     var commitId = properties.getProperty("commitId");
     var osName = System.getProperty("os.name");
     if (osName.equals("Mac OS X")) osName = "macOS";
+    if (osName.contains("Windows")) osName = "Windows";
     var osVersion = System.getProperty("os.version");
     var os = osName + " " + osVersion;
     var flavor = TruffleOptions.AOT ? "native" : "Java " + System.getProperty("java.version");

File: pkl-core/src/main/java/org/pkl/core/module/ModulePathResolver.java
Patch:
@@ -30,6 +30,7 @@
 import javax.annotation.concurrent.GuardedBy;
 import org.pkl.core.module.PathElement.TreePathElement;
 import org.pkl.core.runtime.FileSystemManager;
+import org.pkl.core.util.IoUtils;
 import org.pkl.core.util.LateInit;
 
 /**
@@ -152,8 +153,8 @@ private void populateFileCache(Path basePath) throws IOException {
       // in case of duplicate path, first entry wins (cf. class loader)
       stream.forEach(
           (path) -> {
-            var relativized = basePath.relativize(path);
-            fileCache.putIfAbsent(relativized.toString(), path);
+            var relativized = IoUtils.relativize(path, basePath);
+            fileCache.putIfAbsent(IoUtils.toNormalizedPathString(relativized), path);
             var element = cachedPathElementRoot;
             for (var i = 0; i < relativized.getNameCount(); i++) {
               var name = relativized.getName(i).toString();

File: pkl-core/src/main/java/org/pkl/core/packages/Dependency.java
Patch:
@@ -50,7 +50,7 @@ public Path getPath() {
 
     public Path resolveAssetPath(Path projectDir, PackageAssetUri packageAssetUri) {
       // drop 1 to remove leading `/`
-      var assetPath = packageAssetUri.getAssetPath().toString().substring(1);
+      var assetPath = packageAssetUri.getAssetPath().substring(1);
       return projectDir.resolve(path).resolve(assetPath);
     }
 

File: pkl-core/src/main/java/org/pkl/core/project/ProjectDependenciesResolver.java
Patch:
@@ -33,6 +33,7 @@
 import org.pkl.core.util.EconomicMaps;
 import org.pkl.core.util.EconomicSets;
 import org.pkl.core.util.ErrorMessages;
+import org.pkl.core.util.IoUtils;
 import org.pkl.core.util.Nullable;
 
 /**
@@ -78,7 +79,7 @@ public ProjectDeps resolve() {
 
   private void log(String message) {
     try {
-      logWriter.write(message + "\n");
+      logWriter.write(message + IoUtils.getLineSeparator());
     } catch (IOException e) {
       throw new UncheckedIOException(e);
     }
@@ -130,7 +131,7 @@ private void resolveDependencies(DeclaredDependencies declaredDependencies) {
     var packageUri = declaredDependencies.getMyPackageUri();
     assert packageUri != null;
     var projectDir = Path.of(declaredDependencies.getProjectFileUri()).getParent();
-    var relativePath = this.project.getProjectDir().relativize(projectDir);
+    var relativePath = IoUtils.relativize(projectDir, this.project.getProjectDir());
     var localDependency = new LocalDependency(packageUri.toProjectPackageUri(), relativePath);
     updateDependency(localDependency);
     buildResolvedDependencies(declaredDependencies);

File: pkl-core/src/main/java/org/pkl/core/project/ProjectDeps.java
Patch:
@@ -35,6 +35,7 @@
 import org.pkl.core.packages.PackageUtils;
 import org.pkl.core.runtime.VmExceptionBuilder;
 import org.pkl.core.util.EconomicMaps;
+import org.pkl.core.util.IoUtils;
 import org.pkl.core.util.Nullable;
 import org.pkl.core.util.json.Json;
 import org.pkl.core.util.json.Json.FormatException;
@@ -196,7 +197,7 @@ private void writeLocalDependency(LocalDependency localDependency) throws IOExce
       jsonWriter.beginObject();
       jsonWriter.name("type").value("local");
       jsonWriter.name("uri").value(localDependency.getPackageUri().toString());
-      jsonWriter.name("path").value(localDependency.getPath().toString());
+      jsonWriter.name("path").value(IoUtils.toNormalizedPathString(localDependency.getPath()));
       jsonWriter.endObject();
     }
 

File: pkl-gradle/src/main/java/org/pkl/gradle/task/ModulesTask.java
Patch:
@@ -134,7 +134,7 @@ private Pair<List<File>, List<URI>> splitFilesAndUris(List<Object> modules) {
    */
   private URI parsedModuleNotationToUri(Object notation) {
     if (notation instanceof File file) {
-      return IoUtils.createUri(file.getPath());
+      return IoUtils.createUri(IoUtils.toNormalizedPathString(file.toPath()));
     } else if (notation instanceof URI uri) {
       return uri;
     }

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ClassRegistry.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Set;
 import org.pkl.config.java.InvalidMappingException;
 import org.pkl.core.PClassInfo;
+import org.pkl.core.util.IoUtils;
 import org.pkl.core.util.Nullable;
 
 /**
@@ -77,7 +78,7 @@ private static void initClassMappings(String pklModuleName) {
       loadedModules.add(pklModuleName);
       var url =
           ClassRegistry.class.getResourceAsStream(
-              CLASSES_DIRECTORY + "/" + pklModuleName + ".properties");
+              CLASSES_DIRECTORY + "/" + IoUtils.encodePath(pklModuleName) + ".properties");
       if (url == null) {
         return;
       }

File: pkl-config-java/src/main/java/org/pkl/config/java/Config.java
Patch:
@@ -55,7 +55,7 @@ public interface Config {
   /**
    * Converts this node's value to the given {@link Type}.
    *
-   * <p>Note that usages of this methods are not type safe.
+   * <p>Note that usages of this method are not type safe.
    *
    * @throws ConversionException if the value cannot be converted to the given type
    */

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ConverterFactory.java
Patch:
@@ -22,12 +22,12 @@
 
 /**
  * A factory for {@link Converter}s. Used to implement conversions to generic Java classes. In such
- * a case a single {@link Converter} does not suffice. Instead the factory creates a new converter
+ * a case a single {@link Converter} does not suffice. Instead, the factory creates a new converter
  * for every parameterization of the target type. Once created, the converter is cached for later
  * use, and the factory is never again invoked for the same parameterized target type.
  *
  * <p>For best performance, all introspection of target types (for example using {@link Reflection})
- * should happen in the factory rather then the returned converters.
+ * should happen in the factory rather than the returned converters.
  */
 @FunctionalInterface
 public interface ConverterFactory {

File: pkl-core/src/main/java/org/pkl/core/PType.java
Patch:
@@ -109,8 +109,7 @@ public PType getBaseType() {
   }
 
   public static final class Constrained extends PType {
-
-    private static final long serialVersionUID = 0L;
+    @Serial private static final long serialVersionUID = 0L;
 
     private final PType baseType;
     private final List<String> constraints;

File: pkl-core/src/main/java/org/pkl/core/StackFrameTransformers.java
Patch:
@@ -45,7 +45,7 @@ private StackFrameTransformers() {}
         return frame;
       };
 
-  public static StackFrameTransformer replacePackageUriWithSourceCodeUrl =
+  public static final StackFrameTransformer replacePackageUriWithSourceCodeUrl =
       frame -> {
         var uri = URI.create(frame.getModuleUri());
         if (!uri.getScheme().equalsIgnoreCase("package")) {

File: pkl-core/src/main/java/org/pkl/core/ValueRenderers.java
Patch:
@@ -60,8 +60,9 @@ public static ValueRenderer plist(Writer writer, String indent) {
    * Creates a renderer for {@link java.util.Properties} file format. If {@code omitNullProperties}
    * is {@code true}, object properties and map entries whose value is {@code null} will not be
    * rendered. If {@code restrictCharset} is {@code true} characters outside the printable US-ASCII
-   * charset range will be rendered as Unicode escapes (see
-   * https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3).
+   * charset range will be rendered as <a
+   * href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3">Unicode
+   * escapes</a>.
    */
   public static ValueRenderer properties(
       Writer writer, boolean omitNullProperties, boolean restrictCharset) {

File: pkl-core/src/main/java/org/pkl/core/Version.java
Patch:
@@ -21,7 +21,7 @@
 import org.pkl.core.util.Nullable;
 
 /**
- * A semantic version (https://semver.org/spec/v2.0.0.html).
+ * A <a href="https://semver.org/spec/v2.0.0.html">semantic version</a>.
  *
  * <p>This class guarantees that valid semantic version numbers are handled correctly, but does
  * <em>not</em> guarantee that invalid semantic version numbers are rejected.

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/EqualNode.java
Patch:
@@ -65,9 +65,9 @@ protected boolean eval(boolean left, boolean right) {
   }
 
   /**
-   * This method effectively covers `VmValue left, VmValue right` but is implemented in a more
-   * efficient way. See:
-   * https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces
+   * This method effectively covers `VmValue left, VmValue right` but is implemented in a <a
+   * href="https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces">more
+   * efficient way</a>.
    */
   @Specialization(
       guards = {"left.getClass() == leftJavaClass", "right.getClass() == leftJavaClass"},

File: pkl-core/src/main/java/org/pkl/core/ast/expression/binary/NotEqualNode.java
Patch:
@@ -65,9 +65,9 @@ protected boolean eval(boolean left, boolean right) {
   }
 
   /**
-   * This method effectively covers `VmValue left, VmValue right` but is implemented in a more
-   * efficient way. See:
-   * https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces
+   * This method effectively covers `VmValue left, VmValue right` but is implemented in a <a
+   * href="https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces">more
+   * efficient way</a>.
    */
   @Specialization(
       guards = {"left.getClass() == leftJavaClass", "right.getClass() == leftJavaClass"},

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorMemberNode.java
Patch:
@@ -78,7 +78,7 @@ protected boolean checkIsValidTypedProperty(VmClass clazz, ObjectMember member)
    * `ObjectData.forBindings`. - 3 `FrameSlot`s for `i`, `key`, and `value`
    */
   @ValueType
-  static final class ObjectData {
+  public static final class ObjectData {
     // member count is exact iff every for/when body has exactly one member
     ObjectData(int minMemberCount, int length) {
       this.members = EconomicMaps.create(minMemberCount);

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/PropertiesLiteralNode.java
Patch:
@@ -107,7 +107,7 @@ protected Object evalNull(VirtualFrame frame, VmNull parent) {
   // Ultimately, this lambda or a lambda returned from it will call one of the other
   // specializations,
   // which will perform the "isValidXYZ" guard check.
-  // That said, to flag non-sensical amendments early, this specialization could have a guard to
+  // That said, to flag nonsensical amendments early, this specialization could have a guard to
   // check
   // that this amendment is at least one of a valid listing, mapping, or object amendment (modulo
   // parameters).

File: pkl-core/src/main/java/org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode.java
Patch:
@@ -67,6 +67,7 @@ public SpecializedObjectLiteralNode(
 
   // only runs once per VmClass (which often means once per PropertiesLiteralNode)
   // unless an XYZUncached specialization is active
+  @SuppressWarnings("ExtractMethodRecommender")
   @TruffleBoundary
   @Idempotent
   protected boolean checkIsValidTypedAmendment(Object parent) {

File: pkl-core/src/main/java/org/pkl/core/ast/frame/ReadEnclosingAuxiliarySlotNode.java
Patch:
@@ -23,7 +23,6 @@
 import org.pkl.core.runtime.VmUtils;
 
 public class ReadEnclosingAuxiliarySlotNode extends ExpressionNode {
-
   private final int slot;
   private final int levelsUp;
 

File: pkl-core/src/main/java/org/pkl/core/ast/frame/ReadFrameSlotNode.java
Patch:
@@ -22,7 +22,6 @@
 import org.pkl.core.ast.ExpressionNode;
 
 public abstract class ReadFrameSlotNode extends ExpressionNode {
-
   private final int slot;
 
   protected ReadFrameSlotNode(SourceSection sourceSection, int slot) {

File: pkl-core/src/main/java/org/pkl/core/ast/internal/IsInstanceOfNode.java
Patch:
@@ -50,8 +50,9 @@ protected boolean eval(@SuppressWarnings("unused") boolean left, VmClass right)
   }
 
   /**
-   * This method effectively covers `VmValue value` but is implemented in a more efficient way. See:
-   * https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces
+   * This method effectively covers `VmValue value` but is implemented in a <a
+   * href="https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces">more
+   * efficient way</a>.
    */
   @Specialization(guards = "value.getClass() == valueJavaClass", limit = "99")
   protected boolean evalVmValue(

File: pkl-core/src/main/java/org/pkl/core/ast/member/ObjectMember.java
Patch:
@@ -61,8 +61,9 @@ public void initMemberNode(MemberNode node) {
   /**
    * Tells if this member is a property.
    *
-   * <p>Not named `isProperty()` to work around https://bugs.openjdk.java.net/browse/JDK-8185424
-   * (which is apparently triggered by `-Xdoclint:none`).
+   * <p>Not named `isProperty()` to work around <a
+   * href="https://bugs.openjdk.java.net/browse/JDK-8185424">JDK-8185424</a> (which is apparently
+   * triggered by `-Xdoclint:none`).
    */
   public boolean isProp() {
     return name != null;

File: pkl-core/src/main/java/org/pkl/core/ast/type/TypeNode.java
Patch:
@@ -44,6 +44,7 @@
 import org.pkl.core.runtime.*;
 import org.pkl.core.util.EconomicMaps;
 import org.pkl.core.util.LateInit;
+import org.pkl.core.util.Nonnull;
 import org.pkl.core.util.Nullable;
 
 public abstract class TypeNode extends PklNode {
@@ -1683,7 +1684,7 @@ public void executeAndSet(VirtualFrame frame, Object value) {
     }
 
     @Override
-    public VmTypeAlias getVmTypeAlias() {
+    public @Nonnull VmTypeAlias getVmTypeAlias() {
       return typeAlias;
     }
 

File: pkl-core/src/main/java/org/pkl/core/module/PathElement.java
Patch:
@@ -25,7 +25,7 @@
 import org.pkl.core.util.Nullable;
 
 public class PathElement {
-  public static Comparator<PathElement> comparator =
+  public static final Comparator<PathElement> comparator =
       (o1, o2) -> {
         if (o1.isDirectory && !o2.isDirectory) {
           return 1;

File: pkl-core/src/main/java/org/pkl/core/packages/PackageResolvers.java
Patch:
@@ -339,7 +339,7 @@ public byte[] getBytes(
     }
 
     @Override
-    public List<PathElement> doListElements(PackageAssetUri uri, Checksums checksums)
+    public List<PathElement> doListElements(PackageAssetUri uri, @Nullable Checksums checksums)
         throws IOException, SecurityManagerException {
       var packageUri = uri.getPackageUri();
       ensurePackageDownloaded(packageUri, checksums);
@@ -351,7 +351,7 @@ public List<PathElement> doListElements(PackageAssetUri uri, Checksums checksums
     }
 
     @Override
-    public boolean doHasElement(PackageAssetUri uri, Checksums checksums)
+    public boolean doHasElement(PackageAssetUri uri, @Nullable Checksums checksums)
         throws IOException, SecurityManagerException {
       var packageUri = uri.getPackageUri();
       ensurePackageDownloaded(packageUri, checksums);

File: pkl-core/src/main/java/org/pkl/core/project/ProjectDeps.java
Patch:
@@ -86,7 +86,7 @@ public static ProjectDeps parse(Path path)
     return parse(input);
   }
 
-  public static ProjectDeps parse(String input) throws JsonParseException, URISyntaxException {
+  public static ProjectDeps parse(String input) throws JsonParseException {
     var parsed = Json.parseObject(input);
     var schemaVersion = parsed.getInt("schemaVersion");
     if (!supportedSchemaVersions.contains(schemaVersion)) {

File: pkl-core/src/main/java/org/pkl/core/runtime/VmClass.java
Patch:
@@ -88,7 +88,7 @@ public final class VmClass extends VmValue {
 
   private final Object allHiddenPropertyNamesLock = new Object();
 
-  // Helps to to overcome recursive initialization issues
+  // Helps to overcome recursive initialization issues
   // between classes and annotations in pkl.base.
   @CompilationFinal private volatile boolean isInitialized;
 
@@ -497,7 +497,6 @@ public EconomicMap<Object, ObjectMember> getTypedToDynamicMembers() {
   public EconomicMap<Object, ObjectMember> getDynamicToTypedMembers() {
     synchronized (dynamicToTypedMembersLock) {
       if (__dynamicToTypedMembers == null) {
-        //noinspection ConstantConditions
         __dynamicToTypedMembers =
             createDelegatingMembers(
                 (member) ->
@@ -515,7 +514,6 @@ public EconomicMap<Object, ObjectMember> getDynamicToTypedMembers() {
   public EconomicMap<Object, ObjectMember> getMapToTypedMembers() {
     synchronized (mapToTypedMembersLock) {
       if (__mapToTypedMembers == null) {
-        //noinspection ConstantConditions
         __mapToTypedMembers =
             createDelegatingMembers(
                 (member) ->

File: pkl-core/src/main/java/org/pkl/core/runtime/VmCollection.java
Patch:
@@ -56,6 +56,7 @@ public final void checkNonEmpty() {
     }
   }
 
+  @SuppressWarnings("BooleanMethodIsAlwaysInverted")
   public abstract boolean isLengthOne();
 
   public final void checkLengthOne() {

File: pkl-core/src/main/java/org/pkl/core/runtime/VmLanguage.java
Patch:
@@ -21,7 +21,6 @@
 import com.oracle.truffle.api.TruffleLanguage.ContextPolicy;
 import com.oracle.truffle.api.nodes.Node;
 import com.oracle.truffle.api.source.Source;
-import org.pkl.core.SecurityManagerException;
 import org.pkl.core.ast.builder.AstBuilder;
 import org.pkl.core.ast.expression.unary.ImportNode;
 import org.pkl.core.module.ModuleKey;
@@ -74,8 +73,7 @@ public VmTyped loadModule(ModuleKey moduleKey) {
   }
 
   @TruffleBoundary
-  public VmTyped loadModule(ModuleKey moduleKey, ImportNode importNode)
-      throws SecurityManagerException {
+  public VmTyped loadModule(ModuleKey moduleKey, ImportNode importNode) {
     var context = VmContext.get(null);
 
     return context

File: pkl-core/src/main/java/org/pkl/core/stdlib/AbstractRenderer.java
Patch:
@@ -72,7 +72,7 @@ public abstract class AbstractRenderer implements VmValueVisitor {
   @LateInit private Object topLevelValue;
 
   /** The current indent. Modified by {@link #increaseIndent()} and {@link #decreaseIndent()}. */
-  protected StringBuilder currIndent = new StringBuilder();
+  protected final StringBuilder currIndent = new StringBuilder();
 
   /** The (closest) {@link SourceSection} of the value being visited, for better error messages. */
   protected @Nullable SourceSection currSourceSection = null;

File: pkl-core/src/main/java/org/pkl/core/stdlib/PklName.java
Patch:
@@ -21,8 +21,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Associates a stdlib node class with an Pkl member name or a stdlib package with a Pkl module
- * name. Only required if the Java class/package can't have the same name as its corresponding Pkl
+ * Associates a stdlib node class with a Pkl member name or a stdlib package with a Pkl module name.
+ * Only required if the Java class/package can't have the same name as its corresponding Pkl
  * member/module.
  */
 @Target({ElementType.PACKAGE, ElementType.TYPE})

File: pkl-core/src/main/java/org/pkl/core/stdlib/VmObjectFactory.java
Patch:
@@ -89,7 +89,6 @@ private VmObjectFactory<E> doAddProperty(String name, ExpressionNode bodyNode) {
     var section = VmUtils.unavailableSourceSection();
     var identifier = Identifier.get(name);
     var member = new ObjectMember(section, section, VmModifier.NONE, identifier, name);
-    //noinspection ConstantConditions
     var node =
         isPropertyTypeChecked
             ? TypeCheckedPropertyNodeGen.create(null, new FrameDescriptor(), member, bodyNode)

File: pkl-core/src/main/java/org/pkl/core/stdlib/xml/RendererNodes.java
Patch:
@@ -293,6 +293,7 @@ protected void visitEntryValue(Object value) {
         } else if (deferredKey instanceof String string) {
           writeXmlElement(string, null, value, true, true);
         } else {
+          assert deferredKey != null;
           cannotRenderNonStringKey(deferredKey);
         }
       }
@@ -458,7 +459,7 @@ private void validateName(String name, String kind) {
     }
 
     private void startNewLine() {
-      if (builder.length() == 0) return;
+      if (builder.isEmpty()) return;
 
       lineNumber += 1;
       builder.append(LINE_BREAK).append(currIndent);

File: pkl-core/src/main/java/org/pkl/core/util/NonnullByDefault.java
Patch:
@@ -24,13 +24,14 @@
 
 /**
  * Indicates that method return types and method parameters in the annotated package are {@link
- * org.pkl.core.util.Nonnull} unless explicitly annotated with {@link org.pkl.core.util.Nullable}.
+ * Nonnull} unless explicitly annotated with {@link Nullable}.
  *
  * <p>This annotation is a generalization of {@link javax.annotation.ParametersAreNonnullByDefault}.
  * All Pkl packages containing Java code should carry this annotation.
  *
  * <p>Ideally, this default would apply to every {@link ElementType#TYPE_USE}, but I haven't been
- * able to make this work reasonably in IntelliJ (https://youtrack.jetbrains.com/issue/IDEA-278618).
+ * able to make this work reasonably in <a
+ * href="https://youtrack.jetbrains.com/issue/IDEA-278618">IntelliJ</a>.
  */
 @Documented
 @TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE_PARAMETER})

File: pkl-core/src/main/java/org/pkl/core/util/StringUtils.java
Patch:
@@ -25,11 +25,13 @@ public final class StringUtils {
   // whose key property is that it maps 25 characters into the 32-slot table without collision.
   // Basically this is an opportunistic fast implementation as opposed to "good code". For most
   // other use-cases, the reduction in readability isn't worth it.
+  @SuppressWarnings("UnnecessaryUnicodeEscape")
   private static final String TABLE =
       "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000"
           + "\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680"
           + "\u0009\u0020\u2006\u2001\u202F\u00A0\u000C\u2009"
           + "\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000";
+
   private static final int MULTIPLIER = 1682554634;
   private static final int SHIFT = Integer.numberOfLeadingZeros(TABLE.length() - 1);
 

File: pkl-core/src/main/java/org/pkl/core/util/json/JsonParser.java
Patch:
@@ -397,7 +397,7 @@ private String endCapture() {
     var start = captureStart;
     var end = index - 1;
     captureStart = -1;
-    if (captureBuffer.length() > 0) {
+    if (!captureBuffer.isEmpty()) {
       captureBuffer.append(buffer, start, end - start);
       var captured = captureBuffer.toString();
       captureBuffer.setLength(0);

File: pkl-core/src/main/java/org/pkl/core/util/json/JsonWriter.java
Patch:
@@ -201,7 +201,7 @@ public JsonWriter(Writer out) {
    * @param indent a string containing only whitespace.
    */
   public final void setIndent(String indent) {
-    if (indent.length() == 0) {
+    if (indent.isEmpty()) {
       this.indent = null;
       this.separator = ":";
     } else {

File: pkl-core/src/main/java/org/pkl/core/util/yaml/YamlEscaper.java
Patch:
@@ -43,6 +43,7 @@ public final class YamlEscaper extends AbstractCharEscaper {
 
   @Override
   protected @Nullable String findReplacement(char ch) {
+    //noinspection UnnecessaryUnicodeEscape
     return ch <= '\u0022'
         ? REPLACEMENTS[ch]
         : ch == '\u2028' ? "\\L" : ch == '\u2029' ? "\\P" : null;

File: pkl-executor/src/main/java/org/pkl/executor/Version.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.regex.Pattern;
 
 /**
- * A semantic version (https://semver.org/spec/v2.0.0.html).
+ * A <a href="https://semver.org/spec/v2.0.0.html">semantic version</a>.
  *
  * <p>This class guarantees that valid semantic version numbers are handled correctly, but does
  * <em>not</em> guarantee that invalid semantic version numbers are rejected.
@@ -212,8 +212,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return ""
-        + major
+    return major
         + "."
         + minor
         + "."

File: pkl-gradle/src/main/java/org/pkl/gradle/PklPlugin.java
Patch:
@@ -398,7 +398,7 @@ private void configureIdeaModule(CodeGenSpec spec) {
               var outputDir = spec.getOutputDir().get().getAsFile();
               module.getGeneratedSourceDirs().add(outputDir);
               if (spec.getSourceSet().get().getName().toLowerCase().contains("test")) {
-                module.setTestSourceDirs(append(module.getTestSourceDirs(), outputDir));
+                module.getTestSources().from(append(module.getTestSources().getFiles(), outputDir));
               } else {
                 module.setSourceDirs(append(module.getSourceDirs(), outputDir));
               }
@@ -476,7 +476,9 @@ private Optional<SourceDirectorySet> getKotlinSourceDirectorySet(SourceSet sourc
     try {
       var getConventionMethod = sourceSet.getClass().getMethod("getConvention");
       var convention = getConventionMethod.invoke(sourceSet);
+      //noinspection deprecation
       if (convention instanceof Convention c) {
+        //noinspection deprecation
         var kotlinSourceSet = c.getPlugins().get("kotlin");
         if (kotlinSourceSet == null) {
           project

File: pkl-core/src/main/java/org/pkl/core/project/ProjectPackager.java
Patch:
@@ -191,7 +191,7 @@ private void checkAlreadyPublishedPackage(Package pkg, String computedChecksum)
         } else {
           throw new PklException(
               ErrorMessages.create(
-                  "unableToAccessPublishPackage", pkg.getPackageZipUrl(), e.getArguments()[0]));
+                  "unableToAccessPublishedPackage", pkg.getName() , pkg.getPackageZipUrl(), e.getArguments()[0]));
         }
       }
       throw e;

File: pkl-core/src/main/java/org/pkl/core/http/JdkHttpClient.java
Patch:
@@ -101,9 +101,6 @@ public <T> HttpResponse<T> send(HttpRequest request, BodyHandler<T> responseBody
               "errorSslHandshake", request.uri().getHost(), Exceptions.getRootReason(e)));
     } catch (SSLException e) {
       throw new SSLException(Exceptions.getRootReason(e));
-    } catch (IOException e) {
-      // JDK 11 throws IOException instead of SSLHandshakeException
-      throw new IOException(Exceptions.getRootReason(e));
     } catch (InterruptedException e) {
       // next best thing after letting (checked) InterruptedException bubble up
       Thread.currentThread().interrupt();

File: pkl-gradle/src/main/java/org/pkl/gradle/PklPlugin.java
Patch:
@@ -62,7 +62,7 @@
 @SuppressWarnings("unused")
 public class PklPlugin implements Plugin<Project> {
 
-  private static final String MIN_GRADLE_VERSION = "7.2";
+  private static final String MIN_GRADLE_VERSION = "8.1";
 
   @LateInit private Project project;
 

File: pkl-core/src/main/java/org/pkl/core/resource/ResourceReaders.java
Patch:
@@ -304,8 +304,7 @@ public Optional<Object> read(URI uri) throws IOException {
       }
 
       try {
-        var url = IoUtils.toUrl(uri);
-        var content = IoUtils.readBytes(url);
+        var content = IoUtils.readBytes(uri);
         return Optional.of(new Resource(uri, content));
       } catch (FileNotFoundException e) {
         return Optional.empty();

File: pkl-tools/src/dummy/java/org/pkl/tools/Empty.java
Patch:
@@ -20,5 +20,6 @@
  */
 // TODO: figure out how to generate javadoc for a shadow jar.
 @SuppressWarnings("unused")
-public class Empty {
+public final class Empty {
+  private Empty() {}
 }

File: pkl-core/src/main/java/org/pkl/core/stdlib/base/MergeSort.java
Patch:
@@ -58,7 +58,7 @@ private static void merge(
       SortComparatorNode comparator,
       @Nullable VmFunction function) {
 
-    if (comparator.executeWith(array[mid-1], array[mid], function)) {
+    if (comparator.executeWith(array[mid - 1], array[mid], function)) {
       return; // already sorted
     }
 

File: pkl-core/src/main/java/org/pkl/core/stdlib/base/MergeSort.java
Patch:
@@ -58,7 +58,7 @@ private static void merge(
       SortComparatorNode comparator,
       @Nullable VmFunction function) {
 
-    if (comparator.executeWith(array[mid], array[mid], function)) {
+    if (comparator.executeWith(array[mid-1], array[mid], function)) {
       return; // already sorted
     }
 

File: docs/modules/java-binding/examples/JavaConfigExample.java
Patch:
@@ -13,7 +13,7 @@ public void usage() {
     Config config;
     try (var evaluator = ConfigEvaluator.preconfigured()) { // <1>
       config = evaluator.evaluate(
-        ModuleSource.text("pigeon { age = 5; diet = \"Seeds\" }")); // <2>
+        ModuleSource.text("pigeon { age = 5; diet = new Listing { \"Seeds\" } }")); // <2>
     }
     var pigeon = config.get("pigeon"); // <3>
     var age = pigeon.get("age").as(int.class); // <4>

File: pkl-core/src/main/java/org/pkl/core/http/HttpClientInitException.java
Patch:
@@ -15,13 +15,11 @@
  */
 package org.pkl.core.http;
 
-import org.pkl.core.PklException;
-
 /**
  * Indicates that an error occurred while initializing an HTTP client. A common example is an error
  * reading or parsing a certificate.
  */
-public class HttpClientInitException extends PklException {
+public class HttpClientInitException extends RuntimeException {
   public HttpClientInitException(String message) {
     super(message);
   }

File: pkl-gradle/src/main/java/org/pkl/gradle/PklPlugin.java
Patch:
@@ -279,6 +279,8 @@ private void configureBaseSpec(BasePklSpec spec) {
     spec.getModuleCacheDir().set(IoUtils.getDefaultModuleCacheDir().toFile());
 
     spec.getNoCache().convention(false);
+
+    spec.getTestPort().convention(-1);
   }
 
   private void configureCodeGenSpec(CodeGenSpec spec) {
@@ -421,6 +423,7 @@ private <T extends BasePklTask, S extends BasePklSpec> void configureBaseTask(T
     task.getNoCache().set(spec.getNoCache());
     task.getModuleCacheDir().set(spec.getModuleCacheDir());
     task.getEvalTimeout().set(spec.getEvalTimeout());
+    task.getTestPort().set(spec.getTestPort());
   }
 
   private <T extends ModulesTask, S extends ModulesSpec> void configureModulesTask(T task, S spec) {

File: pkl-gradle/src/main/java/org/pkl/gradle/spec/BasePklSpec.java
Patch:
@@ -48,4 +48,6 @@ public interface BasePklSpec {
 
   // use same type (Duration) as Gradle's `Task.timeout`
   Property<Duration> getEvalTimeout();
+
+  Property<Integer> getTestPort();
 }

File: pkl-gradle/src/main/java/org/pkl/gradle/task/ModulesTask.java
Patch:
@@ -178,6 +178,7 @@ protected CliBaseOptions getCliBaseOptions() {
               getOmitProjectSettings().getOrElse(false),
               getNoProject().getOrElse(false),
               false,
+              getTestPort().getOrElse(-1),
               Collections.emptyList());
     }
     return cachedOptions;

File: pkl-core/src/main/java/org/pkl/core/runtime/Identifier.java
Patch:
@@ -152,6 +152,9 @@ public final class Identifier implements Comparable<Identifier> {
   // common in lambdas etc
   public static final Identifier IT = get("it");
 
+  // dummy, unrepresentable identifier
+  public static final Identifier DUMMY = get("`#_");
+
   private final String name;
 
   private Identifier(String name) {

File: bench/src/jmh/java/org/pkl/core/ListSort.java
Patch:
@@ -23,6 +23,7 @@
 import org.openjdk.jmh.annotations.*;
 import org.openjdk.jmh.util.TempFile;
 import org.openjdk.jmh.util.TempFileManager;
+import org.pkl.core.http.HttpClient;
 import org.pkl.core.module.ModuleKeyFactories;
 import org.pkl.core.repl.ReplRequest;
 import org.pkl.core.repl.ReplResponse;
@@ -39,6 +40,7 @@ public class ListSort {
   private static final ReplServer repl =
       new ReplServer(
           SecurityManagers.defaultManager,
+          HttpClient.dummyClient(),
           Loggers.stdErr(),
           List.of(ModuleKeyFactories.standardLibrary),
           List.of(ResourceReaders.file()),

File: pkl-core/src/main/java/org/pkl/core/ast/expression/unary/ImportGlobNode.java
Patch:
@@ -30,6 +30,7 @@
 import org.pkl.core.ast.VmModifier;
 import org.pkl.core.ast.member.ObjectMember;
 import org.pkl.core.ast.member.UntypedObjectMemberNode;
+import org.pkl.core.http.HttpClientInitException;
 import org.pkl.core.module.ResolvedModuleKey;
 import org.pkl.core.packages.PackageLoadError;
 import org.pkl.core.runtime.BaseModule;
@@ -113,7 +114,7 @@ public Object executeGeneric(VirtualFrame frame) {
                 frame.materialize(), BaseModule.getMappingClass().getPrototype(), members);
       } catch (IOException e) {
         throw exceptionBuilder().evalError("ioErrorResolvingGlob", importUri).withCause(e).build();
-      } catch (SecurityManagerException e) {
+      } catch (SecurityManagerException | HttpClientInitException e) {
         throw exceptionBuilder().withCause(e).build();
       } catch (PackageLoadError e) {
         throw exceptionBuilder().adhocEvalError(e.getMessage()).build();

File: pkl-core/src/main/java/org/pkl/core/ast/expression/unary/ImportNode.java
Patch:
@@ -22,6 +22,7 @@
 import com.oracle.truffle.api.source.SourceSection;
 import java.net.URI;
 import org.pkl.core.SecurityManagerException;
+import org.pkl.core.http.HttpClientInitException;
 import org.pkl.core.module.ResolvedModuleKey;
 import org.pkl.core.packages.PackageLoadError;
 import org.pkl.core.runtime.VmContext;
@@ -60,7 +61,7 @@ public Object executeGeneric(VirtualFrame frame) {
         context.getSecurityManager().checkImportModule(currentModule.getUri(), importUri);
         var moduleToImport = context.getModuleResolver().resolve(importUri, this);
         importedModule = language.loadModule(moduleToImport, this);
-      } catch (SecurityManagerException | PackageLoadError e) {
+      } catch (SecurityManagerException | PackageLoadError | HttpClientInitException e) {
         throw exceptionBuilder().withCause(e).build();
       }
     }

File: pkl-core/src/main/java/org/pkl/core/project/ProjectPackager.java
Patch:
@@ -43,6 +43,7 @@
 import org.pkl.core.SecurityManagerException;
 import org.pkl.core.StackFrameTransformer;
 import org.pkl.core.ast.builder.ImportsAndReadsParser;
+import org.pkl.core.http.HttpClient;
 import org.pkl.core.module.ModuleKeys;
 import org.pkl.core.module.ProjectDependenciesManager;
 import org.pkl.core.module.ResolvedModuleKeys;
@@ -105,14 +106,15 @@ public ProjectPackager(
       String outputPathPattern,
       StackFrameTransformer stackFrameTransformer,
       SecurityManager securityManager,
+      HttpClient httpClient,
       boolean skipPublishCheck,
       Writer outputWriter) {
     this.projects = projects;
     this.workingDir = workingDir;
     this.outputPathPattern = outputPathPattern;
     this.stackFrameTransformer = stackFrameTransformer;
     // intentionally use InMemoryPackageResolver
-    this.packageResolver = PackageResolver.getInstance(securityManager, null);
+    this.packageResolver = PackageResolver.getInstance(securityManager, httpClient, null);
     this.skipPublishCheck = skipPublishCheck;
     this.outputWriter = outputWriter;
   }

File: pkl-core/src/main/java/org/pkl/core/runtime/ResourceManager.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Optional;
 import org.pkl.core.SecurityManager;
 import org.pkl.core.SecurityManagerException;
+import org.pkl.core.http.HttpClientInitException;
 import org.pkl.core.module.ModuleKey;
 import org.pkl.core.packages.PackageLoadError;
 import org.pkl.core.resource.Resource;
@@ -105,7 +106,7 @@ public List<ResolvedGlobElement> resolveGlob(
                 .withHint(e.getMessage())
                 .withLocation(readNode)
                 .build();
-          } catch (SecurityManagerException e) {
+          } catch (SecurityManagerException | HttpClientInitException e) {
             throw new VmExceptionBuilder().withCause(e).withLocation(readNode).build();
           } catch (IOException e) {
             throw new VmExceptionBuilder()
@@ -151,7 +152,7 @@ public Optional<Object> read(URI resourceUri, Node readNode) {
                 .withHint(e.getReason())
                 .withLocation(readNode)
                 .build();
-          } catch (SecurityManagerException | PackageLoadError e) {
+          } catch (SecurityManagerException | PackageLoadError | HttpClientInitException e) {
             throw new VmExceptionBuilder().withCause(e).withLocation(readNode).build();
           }
           if (resource.isEmpty()) return resource;

File: pkl-core/src/main/java/org/pkl/core/runtime/StdLibModule.java
Patch:
@@ -22,6 +22,7 @@
 import org.pkl.core.Loggers;
 import org.pkl.core.SecurityManagers;
 import org.pkl.core.StackFrameTransformers;
+import org.pkl.core.http.HttpClient;
 import org.pkl.core.module.ModuleKeyFactories;
 import org.pkl.core.module.ModuleKeys;
 import org.pkl.core.module.ResolvedModuleKey;
@@ -39,6 +40,7 @@ protected static void loadModule(URI uri, VmTyped instance) {
                   new VmContext.Holder(
                       StackFrameTransformers.defaultTransformer,
                       SecurityManagers.defaultManager,
+                      HttpClient.dummyClient(),
                       new ModuleResolver(List.of(ModuleKeyFactories.standardLibrary)),
                       new ResourceManager(SecurityManagers.defaultManager, List.of()),
                       Loggers.noop(),

File: pkl-core/src/main/java/org/pkl/core/EvaluatorBuilder.java
Patch:
@@ -48,7 +48,7 @@ public final class EvaluatorBuilder {
 
   private final Map<String, String> externalProperties = new HashMap<>();
 
-  private java.time.@Nullable Duration timeout;
+  private @Nullable java.time.Duration timeout;
 
   private @Nullable Path moduleCacheDir = IoUtils.getDefaultModuleCacheDir();
 
@@ -343,7 +343,7 @@ public Map<String, String> getExternalProperties() {
   /**
    * Sets an evaluation timeout to be enforced by the {@link Evaluator}'s {@code evaluate} methods.
    */
-  public EvaluatorBuilder setTimeout(java.time.@Nullable Duration timeout) {
+  public EvaluatorBuilder setTimeout(@Nullable java.time.Duration timeout) {
     this.timeout = timeout;
     return this;
   }

File: pkl-core/src/main/java/org/pkl/core/ast/builder/AstBuilder.java
Patch:
@@ -2169,7 +2169,7 @@ private FrameDescriptor.Builder createFrameDescriptorBuilder(ParameterListContex
     return builder;
   }
 
-  private FrameDescriptor.@Nullable Builder createFrameDescriptorBuilder(ObjectBodyContext ctx) {
+  private @Nullable FrameDescriptor.Builder createFrameDescriptorBuilder(ObjectBodyContext ctx) {
     if (ctx.ps.isEmpty()) return null;
 
     checkCommaSeparatedElements(ctx, ctx.ps, ctx.errs);

File: pkl-core/src/main/java/org/pkl/core/project/Project.java
Patch:
@@ -67,7 +67,7 @@ public final class Project {
   public static Project loadFromPath(
       Path path,
       SecurityManager securityManager,
-      java.time.@Nullable Duration timeout,
+      @Nullable java.time.Duration timeout,
       StackFrameTransformer stackFrameTransformer,
       Map<String, String> envVars) {
     try (var evaluator =
@@ -90,7 +90,7 @@ public static Project loadFromPath(
 
   /** Convenience method to load a project with the default stack frame transformer. */
   public static Project loadFromPath(
-      Path path, SecurityManager securityManager, java.time.@Nullable Duration timeout) {
+      Path path, SecurityManager securityManager, @Nullable java.time.Duration timeout) {
     return loadFromPath(
         path, securityManager, timeout, StackFrameTransformers.defaultTransformer, System.getenv());
   }

File: pkl-core/src/main/java/org/pkl/core/ast/member/TypeAliasNode.java
Patch:
@@ -82,7 +82,8 @@ public Object executeGeneric(VirtualFrame frame) {
             simpleName,
             module,
             qualifiedName,
-            typeParameters);
+            typeParameters,
+            frame.materialize());
 
     VmUtils.evaluateAnnotations(frame, annotationNodes, annotations);
     cachedTypeAlias.initTypeCheckNode(typeAnnotationNode.execute(frame));

File: pkl-core/src/main/java/org/pkl/core/packages/PackageResolvers.java
Patch:
@@ -554,7 +554,7 @@ private Path getZipFilePath(PackageUri packageUri, DependencyMetadata dependency
     private FileSystem getZipFileSystem(PackageAssetUri uri, @Nullable Checksums checksums)
         throws IOException, SecurityManagerException {
       var packageUri = uri.getPackageUri();
-      synchronized (fileSystems) {
+      synchronized (lock) {
         var fs = fileSystems.get(packageUri);
         if (fs == null) {
           var metadata = getDependencyMetadata(packageUri, checksums);

File: pkl-core/src/main/java/org/pkl/core/util/MathUtils.java
Patch:
@@ -63,7 +63,7 @@ public static boolean isMathematicalInteger(double x) {
    * Long.bitCount(Long.MIN_VALUE) == 1}, but {@link Long#MIN_VALUE} is not a power of two.
    */
   public static boolean isPowerOfTwo(long x) {
-    return x > 0 & (x & (x - 1)) == 0;
+    return x > 0 && (x & (x - 1)) == 0;
   }
 
   /**

File: pkl-core/src/main/java/org/pkl/core/util/IoUtils.java
Patch:
@@ -365,13 +365,13 @@ public static URI relativize(URI uri, URI base) {
       return uri;
     }
 
-    var basePath = Path.of(base.getRawPath());
+    var basePath = Path.of(base.getPath());
     if (!base.getRawPath().endsWith("/")) basePath = basePath.getParent();
-    var resultPath = basePath.relativize(Path.of(uri.getRawPath()));
+    var resultPath = basePath.relativize(Path.of(uri.getPath()));
 
     try {
       return new URI(
-          null, null, null, -1, resultPath.toString(), uri.getRawQuery(), uri.getRawFragment());
+          null, null, null, -1, resultPath.toString(), uri.getQuery(), uri.getFragment());
     } catch (URISyntaxException e) {
       throw new IllegalArgumentException(e);
     }

File: pkl-core/src/main/java/org/pkl/core/runtime/VmExceptionRenderer.java
Patch:
@@ -59,7 +59,7 @@ private void renderBugException(VmBugException exception, StringBuilder builder)
         .append("Cmd+Double-click the link below to open an issue.\n")
         .append(
             "Please copy and paste the entire error output into the issue's description, provided you can share it.\n\n")
-        .append("https://github.com/apple/pkl/issues/new");
+        .append("https://github.com/apple/pkl/issues/new\n\n");
 
     builder.append(
         URLEncoder.encode(exceptionToReport.toString(), StandardCharsets.UTF_8)

File: pkl-core/src/main/java/org/pkl/core/PklInfo.java
Patch:
@@ -17,7 +17,7 @@
 
 /** Information about the Pkl package index. */
 public final class PklInfo {
-  private static final String PACKAGE_INDEX_HOMEPAGE = "https://pkl-lang.org/package-docs";
+  private static final String PACKAGE_INDEX_HOMEPAGE = "https://pkl-lang.org/package-docs/";
 
   private static final PklInfo CURRENT;
   private final PackageIndex packageIndex;

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ConverterFactory.java
Patch:
@@ -26,7 +26,7 @@
  * for every parameterization of the target type. Once created, the converter is cached for later
  * use, and the factory is never again invoked for the same parameterized target type.
  *
- * <p>For best performace, all introspection of target types (for example using {@link Reflection})
+ * <p>For best performance, all introspection of target types (for example using {@link Reflection})
  * should happen in the factory rather then the returned converters.
  */
 @FunctionalInterface

File: pkl-core/src/main/java/org/pkl/core/SecurityManagerException.java
Patch:
@@ -16,7 +16,7 @@
 package org.pkl.core;
 
 /**
- * A SecurityManagerException declares that a violation occured during an external i/o operation.
+ * A SecurityManagerException declares that a violation occurred during an external i/o operation.
  *
  * <p>{@link SecurityManagerException#getMessage()} is passed to users when errors arise.
  */

File: pkl-core/src/main/java/org/pkl/core/ValueRenderers.java
Patch:
@@ -60,7 +60,7 @@ public static ValueRenderer plist(Writer writer, String indent) {
    * Creates a renderer for {@link java.util.Properties} file format. If {@code omitNullProperties}
    * is {@code true}, object properties and map entries whose value is {@code null} will not be
    * rendered. If {@code restrictCharset} is {@code true} characters outside the printable US-ASCII
-   * charset range will be rendererd as Unicode escapes (see
+   * charset range will be rendered as Unicode escapes (see
    * https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3).
    */
   public static ValueRenderer properties(

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode.java
Patch:
@@ -84,7 +84,7 @@ private void addMembers(VirtualFrame frame, VmObject parent, ObjectData data) {
     var visitedKeys = EconomicSets.create();
 
     // do our own traversal instead of relying on `VmAbstractObject.force/iterateMemberValues`
-    // (more efficent and we don't want to execute `predicateNode` behind Truffle boundary)
+    // (more efficient and we don't want to execute `predicateNode` behind Truffle boundary)
     for (var owner = parent; owner != null; owner = owner.getParent()) {
       var entries = EconomicMaps.getEntries(owner.getMembers());
       while (entries.advance()) {

File: pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java
Patch:
@@ -516,7 +516,7 @@ public URI getUri() {
     protected Pair<String, String> parseDependencyNotation(String importPath) {
       var idx = importPath.indexOf('/');
       if (idx == -1) {
-        // treat named dependency wihout a subpath as the root path.
+        // treat named dependency without a subpath as the root path.
         // i.e. resolve to `@foo` to `package://example.com/foo@1.0.0#/`
         return Pair.of(importPath.substring(1), "/");
       }

File: pkl-core/src/main/java/org/pkl/core/project/Project.java
Patch:
@@ -62,7 +62,7 @@ public final class Project {
    * <p>Evaluates a module's {@code output.value} to allow for embedding a project within a
    * template.
    *
-   * @throws PklException if an error occured while evaluating the project file.
+   * @throws PklException if an error occurred while evaluating the project file.
    */
   public static Project loadFromPath(
       Path path,

File: pkl-core/src/main/java/org/pkl/core/project/ProjectDeps.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * The Java representation of a project's resolved dependency list. Resolved dependencies are stored
  * as JSON as a sibling file to PklProject. Each key in the JSON file records an entry for each
- * dependecy via its base URI, and the major version number.
+ * dependency via its base URI, and the major version number.
  *
  * <p>A resolved dependency can either be local or remote. A remote dependency will have its
  * checksums recorded, while a local dependency will point to the relative path of the project
@@ -100,7 +100,7 @@ public static ProjectDeps parse(String input) throws JsonParseException, URISynt
   private static EconomicMap<CanonicalPackageUri, Dependency> parseResolvedDependencies(
       Object object) throws JsonParseException, URISyntaxException {
     if (!(object instanceof JsObject)) {
-      throw new FormatException("resolvedDendencies", "object", object.getClass());
+      throw new FormatException("resolvedDependencies", "object", object.getClass());
     }
     var jsObj = (JsObject) object;
     var ret = EconomicMaps.<CanonicalPackageUri, Dependency>create(jsObj.size());

File: pkl-core/src/main/java/org/pkl/core/runtime/FileSystemManager.java
Patch:
@@ -70,7 +70,7 @@ public static synchronized FileSystem getFileSystem(URI uri) throws IOException
   }
 
   /**
-   * Possibily close this file system. Will not close if the file system was initialized externally
+   * Possibly close this file system. Will not close if the file system was initialized externally
    * to Pkl.
    */
   private static synchronized void close(Handle fs) throws IOException {

File: pkl-config-java/src/main/java/org/pkl/config/java/mapper/ConverterFactory.java
Patch:
@@ -26,7 +26,7 @@
  * for every parameterization of the target type. Once created, the converter is cached for later
  * use, and the factory is never again invoked for the same parameterized target type.
  *
- * <p>For best performace, all introspection of target types (for example using {@link Reflection})
+ * <p>For best performance, all introspection of target types (for example using {@link Reflection})
  * should happen in the factory rather then the returned converters.
  */
 @FunctionalInterface

File: pkl-core/src/main/java/org/pkl/core/SecurityManagerException.java
Patch:
@@ -16,7 +16,7 @@
 package org.pkl.core;
 
 /**
- * A SecurityManagerException declares that a violation occured during an external i/o operation.
+ * A SecurityManagerException declares that a violation occurred during an external i/o operation.
  *
  * <p>{@link SecurityManagerException#getMessage()} is passed to users when errors arise.
  */

File: pkl-core/src/main/java/org/pkl/core/ValueRenderers.java
Patch:
@@ -60,7 +60,7 @@ public static ValueRenderer plist(Writer writer, String indent) {
    * Creates a renderer for {@link java.util.Properties} file format. If {@code omitNullProperties}
    * is {@code true}, object properties and map entries whose value is {@code null} will not be
    * rendered. If {@code restrictCharset} is {@code true} characters outside the printable US-ASCII
-   * charset range will be rendererd as Unicode escapes (see
+   * charset range will be rendered as Unicode escapes (see
    * https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3).
    */
   public static ValueRenderer properties(

File: pkl-core/src/main/java/org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode.java
Patch:
@@ -84,7 +84,7 @@ private void addMembers(VirtualFrame frame, VmObject parent, ObjectData data) {
     var visitedKeys = EconomicSets.create();
 
     // do our own traversal instead of relying on `VmAbstractObject.force/iterateMemberValues`
-    // (more efficent and we don't want to execute `predicateNode` behind Truffle boundary)
+    // (more efficient and we don't want to execute `predicateNode` behind Truffle boundary)
     for (var owner = parent; owner != null; owner = owner.getParent()) {
       var entries = EconomicMaps.getEntries(owner.getMembers());
       while (entries.advance()) {

File: pkl-core/src/main/java/org/pkl/core/module/ModuleKeys.java
Patch:
@@ -516,7 +516,7 @@ public URI getUri() {
     protected Pair<String, String> parseDependencyNotation(String importPath) {
       var idx = importPath.indexOf('/');
       if (idx == -1) {
-        // treat named dependency wihout a subpath as the root path.
+        // treat named dependency without a subpath as the root path.
         // i.e. resolve to `@foo` to `package://example.com/foo@1.0.0#/`
         return Pair.of(importPath.substring(1), "/");
       }

File: pkl-core/src/main/java/org/pkl/core/project/Project.java
Patch:
@@ -62,7 +62,7 @@ public final class Project {
    * <p>Evaluates a module's {@code output.value} to allow for embedding a project within a
    * template.
    *
-   * @throws PklException if an error occured while evaluating the project file.
+   * @throws PklException if an error occurred while evaluating the project file.
    */
   public static Project loadFromPath(
       Path path,

File: pkl-core/src/main/java/org/pkl/core/project/ProjectDeps.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * The Java representation of a project's resolved dependency list. Resolved dependencies are stored
  * as JSON as a sibling file to PklProject. Each key in the JSON file records an entry for each
- * dependecy via its base URI, and the major version number.
+ * dependency via its base URI, and the major version number.
  *
  * <p>A resolved dependency can either be local or remote. A remote dependency will have its
  * checksums recorded, while a local dependency will point to the relative path of the project
@@ -100,7 +100,7 @@ public static ProjectDeps parse(String input) throws JsonParseException, URISynt
   private static EconomicMap<CanonicalPackageUri, Dependency> parseResolvedDependencies(
       Object object) throws JsonParseException, URISyntaxException {
     if (!(object instanceof JsObject)) {
-      throw new FormatException("resolvedDendencies", "object", object.getClass());
+      throw new FormatException("resolvedDependencies", "object", object.getClass());
     }
     var jsObj = (JsObject) object;
     var ret = EconomicMaps.<CanonicalPackageUri, Dependency>create(jsObj.size());

File: pkl-core/src/main/java/org/pkl/core/runtime/FileSystemManager.java
Patch:
@@ -70,7 +70,7 @@ public static synchronized FileSystem getFileSystem(URI uri) throws IOException
   }
 
   /**
-   * Possibily close this file system. Will not close if the file system was initialized externally
+   * Possibly close this file system. Will not close if the file system was initialized externally
    * to Pkl.
    */
   private static synchronized void close(Handle fs) throws IOException {

