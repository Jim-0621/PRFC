File: sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
Patch:
@@ -394,7 +394,7 @@ public void setAsyncHttpClient(AsyncHttpClient client) {
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     private void setHomeAsUpEnabled() {
-        if (Integer.valueOf(Build.VERSION.SDK) >= 11) {
+        if (Build.VERSION.SDK_INT >= 11) {
             if (getActionBar() != null)
                 getActionBar().setDisplayHomeAsUpEnabled(true);
         }

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
 import java.net.URI;
+import java.util.Locale;
 
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
@@ -241,7 +242,7 @@ public void setCharset(final String charset) {
      * @param totalSize    total size of file
      */
     public void onProgress(long bytesWritten, long totalSize) {
-        AsyncHttpClient.log.v(LOG_TAG, String.format("Progress %d from %d (%2.0f%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));
+        AsyncHttpClient.log.v(LOG_TAG, String.format(Locale.US, "Progress %d from %d (%2.0f%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));
     }
 
     /**
@@ -294,7 +295,7 @@ public void onPostProcessResponse(ResponseHandlerInterface instance, HttpRespons
      * @param retryNo number of retry
      */
     public void onRetry(int retryNo) {
-        AsyncHttpClient.log.d(LOG_TAG, String.format("Request retry no. %d", retryNo));
+        AsyncHttpClient.log.d(LOG_TAG, String.format(Locale.US, "Request retry no. %d", retryNo));
     }
 
     public void onCancel() {

File: sample/src/main/java/com/loopj/android/http/sample/GetSample.java
Patch:
@@ -25,6 +25,8 @@
 import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.ResponseHandlerInterface;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 
@@ -85,7 +87,7 @@ public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Th
             @Override
             public void onRetry(int retryNo) {
                 Toast.makeText(GetSample.this,
-                        String.format("Request is retried, retry no. %d", retryNo),
+                        String.format(Locale.US, "Request is retried, retry no. %d", retryNo),
                         Toast.LENGTH_SHORT)
                         .show();
             }

File: sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
Patch:
@@ -188,7 +188,7 @@ public DialogRunnable(String realm) {
             String prefaceText = preface.getText().toString();
 
             // Substitute placeholders, and re-set the value.
-            preface.setText(String.format(prefaceText, SECRET_USERNAME, SECRET_PASSWORD));
+            preface.setText(String.format(Locale.US, prefaceText, SECRET_USERNAME, SECRET_PASSWORD));
         }
 
         @Override

File: sample/src/main/java/com/loopj/android/http/sample/RangeResponseSample.java
Patch:
@@ -30,6 +30,8 @@
 import java.io.File;
 import java.io.IOException;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 import cz.msebera.android.httpclient.client.methods.HttpUriRequest;
@@ -75,7 +77,7 @@ protected void onDestroy() {
         // Remove temporary file.
         if (file != null) {
             if (!file.delete()) {
-                Log.e(LOG_TAG, String.format("Couldn't remove temporary file in path: %s", file.getAbsolutePath()));
+                Log.e(LOG_TAG, String.format(Locale.US, "Couldn't remove temporary file in path: %s", file.getAbsolutePath()));
             }
             file = null;
         }

File: sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
Patch:
@@ -27,6 +27,8 @@
 import cz.msebera.android.httpclient.client.HttpClient;
 import cz.msebera.android.httpclient.impl.client.DefaultHttpClient;
 
+import java.util.Locale;
+
 public class Redirect302Sample extends GetSample {
 
     private static final int MENU_ENABLE_REDIRECTS = 10;
@@ -89,7 +91,7 @@ public AsyncHttpClient getAsyncHttpClient() {
         HttpClient client = ahc.getHttpClient();
         if (client instanceof DefaultHttpClient) {
             Toast.makeText(this,
-                    String.format("redirects: %b\nrelative redirects: %b\ncircular redirects: %b",
+                    String.format(Locale.US, "redirects: %b\nrelative redirects: %b\ncircular redirects: %b",
                             enableRedirects, enableRelativeRedirects, enableCircularRedirects),
                     Toast.LENGTH_SHORT
             ).show();

File: sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
Patch:
@@ -263,7 +263,7 @@ public List<Header> getRequestHeadersList() {
 
                     String headerName = line.substring(0, equalSignPos).trim();
                     String headerValue = line.substring(1 + equalSignPos).trim();
-                    Log.d(LOG_TAG, String.format("Added header: [%s:%s]", headerName, headerValue));
+                    Log.d(LOG_TAG, String.format(Locale.US, "Added header: [%s:%s]", headerName, headerValue));
 
                     headers.add(new BasicHeader(headerName, headerValue));
                 } catch (Throwable t) {

File: sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
Patch:
@@ -25,6 +25,8 @@
 import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.ResponseHandlerInterface;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 
@@ -64,7 +66,7 @@ protected synchronized void setStatus(int id, String status) {
         states.put(id, current == null ? status : current + "," + status);
         clearOutputs();
         for (int i = 0; i < states.size(); i++) {
-            debugResponse(LOG_TAG, String.format("%d (from %d): %s", states.keyAt(i), getCounter(), states.get(states.keyAt(i))));
+            debugResponse(LOG_TAG, String.format(Locale.US, "%d (from %d): %s", states.keyAt(i), getCounter(), states.get(states.keyAt(i))));
         }
     }
 

File: sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
Patch:
@@ -10,6 +10,8 @@
 import com.loopj.android.http.sample.IntentServiceSample;
 import com.loopj.android.http.sample.util.IntentUtil;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 
 public class ExampleIntentService extends IntentService {
@@ -73,7 +75,7 @@ public void onCancel() {
                 @Override
                 public void onRetry(int retryNo) {
                     sendBroadcast(new Intent(IntentServiceSample.ACTION_RETRY));
-                    Log.d(LOG_TAG, String.format("onRetry: %d", retryNo));
+                    Log.d(LOG_TAG, String.format(Locale.US, "onRetry: %d", retryNo));
                 }
 
                 @Override

File: library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -180,7 +180,7 @@ private void makeRequestWithRetries() throws IOException {
                     // switching between WI-FI and mobile data networks can cause a retry which then results in an UnknownHostException
                     // while the WI-FI is initialising. The retry logic will be invoked here, if this is NOT the first retry
                     // (to assist in genuine cases of unknown host) which seems better than outright failure
-                    cause = new IOException("UnknownHostException exception: " + e.getMessage());
+                    cause = new IOException("UnknownHostException exception: " + e.getMessage(), e);
                     retry = (executionCount > 0) && retryHandler.retryRequest(e, ++executionCount, context);
                 } catch (NullPointerException e) {
                     // there's a bug in HttpClient 4.0.x that on some occasions causes
@@ -203,7 +203,7 @@ private void makeRequestWithRetries() throws IOException {
         } catch (Exception e) {
             // catch anything else to ensure failure message is propagated
             AsyncHttpClient.log.e("AsyncHttpRequest", "Unhandled exception origin cause", e);
-            cause = new IOException("Unhandled exception: " + e.getMessage());
+            cause = new IOException("Unhandled exception: " + e.getMessage(), cause);
         }
 
         // cleaned up to throw IOException

File: library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
Patch:
@@ -36,6 +36,7 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
+import android.util.Log;
 
 import cz.msebera.android.httpclient.HttpVersion;
 import cz.msebera.android.httpclient.conn.ClientConnectionManager;

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -1608,7 +1608,8 @@ public InflatingEntity(HttpEntity wrapped) {
         public InputStream getContent() throws IOException {
             wrappedStream = wrappedEntity.getContent();
             pushbackStream = new PushbackInputStream(wrappedStream, 2);
-            if (isInputStreamGZIPCompressed(pushbackStream)) {
+            Header enc = wrappedEntity.getContentEncoding();
+            if ((enc != null && "gzip".equalsIgnoreCase(enc.getValue())) || isInputStreamGZIPCompressed(pushbackStream)) {
                 gzippedStream = new GZIPInputStream(pushbackStream);
                 return gzippedStream;
             } else {

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -38,7 +38,7 @@
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.List;
-import java.security.SecureRandom;
+import java.util.Random;
 
 /**
  * Simplified multipart entity mainly used for sending one or more files.
@@ -74,7 +74,7 @@ class SimpleMultipartEntity implements HttpEntity {
 
     public SimpleMultipartEntity(ResponseHandlerInterface progressHandler) {
         final StringBuilder buf = new StringBuilder();
-        final SecureRandom rand = new SecureRandom();
+        final Random rand = new Random();
         for (int i = 0; i < 30; i++) {
             buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);
         }

File: library/src/main/java/com/loopj/android/http/Base64OutputStream.java
Patch:
@@ -27,7 +27,7 @@ public class Base64OutputStream extends FilterOutputStream {
     private byte[] buffer = null;
     private int bpos = 0;
 
-    private static byte[] EMPTY = new byte[0];
+    private static final byte[] EMPTY = new byte[0];
 
     /**
      * Performs Base64 encoding on the data written to the stream, writing the encoded data to

File: library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
Patch:
@@ -56,7 +56,7 @@
  * certificate validation on every device, use with caution
  */
 public class MySSLSocketFactory extends SSLSocketFactory {
-    SSLContext sslContext = SSLContext.getInstance("TLS");
+    final SSLContext sslContext = SSLContext.getInstance("TLS");
 
     /**
      * Creates a new SSL Socket Factory with the given KeyStore.

File: sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
Patch:
@@ -40,7 +40,7 @@
 public class AsyncBackgroundThreadSample extends SampleParentActivity {
     private static final String LOG_TAG = "AsyncBackgroundThreadSample";
 
-    private ExecutorService executor = Executors.newSingleThreadExecutor();
+    private final ExecutorService executor = Executors.newSingleThreadExecutor();
 
     @Override
     public void onStop()

File: sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
Patch:
@@ -225,7 +225,7 @@ public void onCancelButtonPressed() {
         asyncHttpClient.cancelRequests(SampleParentActivity.this, true);
     }
 
-    protected View.OnClickListener onClickListener = new View.OnClickListener() {
+    protected final View.OnClickListener onClickListener = new View.OnClickListener() {
         @Override
         public void onClick(View v) {
             switch (v.getId()) {

File: sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
Patch:
@@ -21,7 +21,7 @@ public class ExampleIntentService extends IntentService {
     public static final String INTENT_DATA = "INTENT_DATA";
     public static final String INTENT_THROWABLE = "INTENT_THROWABLE";
 
-    private AsyncHttpClient aClient = new SyncHttpClient();
+    private final AsyncHttpClient aClient = new SyncHttpClient();
 
     public ExampleIntentService() {
         super("ExampleIntentService");

File: library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -18,8 +18,6 @@
 
 package com.loopj.android.http;
 
-import android.util.Log;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.methods.HttpUriRequest;

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -21,7 +21,6 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
-import android.util.Log;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;

File: library/src/main/java/com/loopj/android/http/BaseJsonHttpResponseHandler.java
Patch:
@@ -18,8 +18,6 @@
 
 package com.loopj.android.http;
 
-import android.util.Log;
-
 import org.apache.http.Header;
 import org.apache.http.HttpStatus;
 

File: library/src/main/java/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -19,7 +19,6 @@
 package com.loopj.android.http;
 
 import android.os.Looper;
-import android.util.Log;
 
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;

File: library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
Patch:
@@ -19,7 +19,6 @@
 package com.loopj.android.http;
 
 import android.os.Message;
-import android.util.Log;
 
 import org.apache.http.HttpEntity;
 import org.apache.http.util.ByteArrayBuffer;

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -19,7 +19,6 @@
 package com.loopj.android.http;
 
 import android.content.Context;
-import android.util.Log;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -19,7 +19,6 @@
 package com.loopj.android.http;
 
 import android.text.TextUtils;
-import android.util.Log;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -374,7 +373,7 @@ static byte[] escape(String string) {
                     break;
                 default:
                     // Reference: http://www.unicode.org/versions/Unicode5.1.0/
-                    if ((ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
+                    if ((ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
                         String intString = Integer.toHexString(ch);
                         sb.append("\\u");
                         int intLength = 4 - intString.length();

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.text.TextUtils;
-import android.util.Log;
 
 import org.apache.http.client.CookieStore;
 import org.apache.http.cookie.Cookie;

File: library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
Patch:
@@ -18,8 +18,6 @@
 
 package com.loopj.android.http;
 
-import android.util.Log;
-
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;

File: library/src/main/java/com/loopj/android/http/RequestParams.java
Patch:
@@ -18,8 +18,6 @@
 
 package com.loopj.android.http;
 
-import android.util.Log;
-
 import org.apache.http.HttpEntity;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
 import org.apache.http.client.utils.URLEncodedUtils;

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -18,8 +18,6 @@
 
 package com.loopj.android.http;
 
-import android.util.Log;
-
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.xml.sax.InputSource;

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -24,7 +24,6 @@
 package com.loopj.android.http;
 
 import android.text.TextUtils;
-import android.util.Log;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;

File: library/src/main/java/com/loopj/android/http/TextHttpResponseHandler.java
Patch:
@@ -18,8 +18,6 @@
 
 package com.loopj.android.http;
 
-import android.util.Log;
-
 import org.apache.http.Header;
 
 import java.io.UnsupportedEncodingException;

File: library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -110,7 +110,7 @@ public void run() {
             if (!isCancelled()) {
                 responseHandler.sendFailureMessage(0, null, null, e);
             } else {
-                Log.e("AsyncHttpRequest", "makeRequestWithRetries returned error", e);
+                AsyncHttpClient.log.e("AsyncHttpRequest", "makeRequestWithRetries returned error", e);
             }
         }
 
@@ -204,7 +204,7 @@ private void makeRequestWithRetries() throws IOException {
             }
         } catch (Exception e) {
             // catch anything else to ensure failure message is propagated
-            Log.e("AsyncHttpRequest", "Unhandled exception origin cause", e);
+            AsyncHttpClient.log.e("AsyncHttpRequest", "Unhandled exception origin cause", e);
             cause = new IOException("Unhandled exception: " + e.getMessage());
         }
 

File: library/src/main/java/com/loopj/android/http/BaseJsonHttpResponseHandler.java
Patch:
@@ -87,7 +87,7 @@ public void run() {
                             }
                         });
                     } catch (final Throwable t) {
-                        Log.d(LOG_TAG, "parseResponse thrown an problem", t);
+                        AsyncHttpClient.log.d(LOG_TAG, "parseResponse thrown an problem", t);
                         postRunnable(new Runnable() {
                             @Override
                             public void run() {
@@ -123,7 +123,7 @@ public void run() {
                             }
                         });
                     } catch (Throwable t) {
-                        Log.d(LOG_TAG, "parseResponse thrown an problem", t);
+                        AsyncHttpClient.log.d(LOG_TAG, "parseResponse thrown an problem", t);
                         postRunnable(new Runnable() {
                             @Override
                             public void run() {

File: library/src/main/java/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -89,7 +89,7 @@ public BinaryHttpResponseHandler(String[] allowedContentTypes) {
         if (allowedContentTypes != null) {
             mAllowedContentTypes = allowedContentTypes;
         } else {
-            Log.e(LOG_TAG, "Constructor passed allowedContentTypes was null !");
+            AsyncHttpClient.log.e(LOG_TAG, "Constructor passed allowedContentTypes was null !");
         }
     }
     
@@ -105,7 +105,7 @@ public BinaryHttpResponseHandler(String[] allowedContentTypes, Looper looper) {
         if (allowedContentTypes != null) {
             mAllowedContentTypes = allowedContentTypes;
         } else {
-            Log.e(LOG_TAG, "Constructor passed allowedContentTypes was null !");
+            AsyncHttpClient.log.e(LOG_TAG, "Constructor passed allowedContentTypes was null !");
         }
     }
 
@@ -140,7 +140,7 @@ public final void sendResponseMessage(HttpResponse response) throws IOException
                     foundAllowedContentType = true;
                 }
             } catch (PatternSyntaxException e) {
-                Log.e(LOG_TAG, "Given pattern is not valid: " + anAllowedContentType, e);
+                AsyncHttpClient.log.e(LOG_TAG, "Given pattern is not valid: " + anAllowedContentType, e);
             }
         }
         if (!foundAllowedContentType) {

File: library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
Patch:
@@ -46,7 +46,7 @@ public DataAsyncHttpResponseHandler() {
      * @param responseBody response body received so far
      */
     public void onProgressData(byte[] responseBody) {
-        Log.d(LOG_TAG, "onProgressData(byte[]) was not overriden, but callback was received");
+        AsyncHttpClient.log.d(LOG_TAG, "onProgressData(byte[]) was not overriden, but callback was received");
     }
 
 
@@ -67,10 +67,10 @@ protected void handleMessage(Message message) {
                     try {
                         onProgressData((byte[]) response[0]);
                     } catch (Throwable t) {
-                        Log.e(LOG_TAG, "custom onProgressData contains an error", t);
+                        AsyncHttpClient.log.e(LOG_TAG, "custom onProgressData contains an error", t);
                     }
                 } else {
-                    Log.e(LOG_TAG, "PROGRESS_DATA_MESSAGE didn't got enough params");
+                    AsyncHttpClient.log.e(LOG_TAG, "PROGRESS_DATA_MESSAGE didn't got enough params");
                 }
                 break;
         }

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -71,7 +71,7 @@ public FileAsyncHttpResponseHandler(File file, boolean append, boolean renameTar
         }
         if (file.isDirectory()) {
             if (!file.mkdirs()) {
-                Log.d(LOG_TAG, "Cannot create directories for requested Directory location, might not be a problem");
+                AsyncHttpClient.log.d(LOG_TAG, "Cannot create directories for requested Directory location, might not be a problem");
             }
         }
         this.file = file;
@@ -111,7 +111,7 @@ protected File getTemporaryFile(Context context) {
         try {
             return File.createTempFile("temp_", "_handled", context.getCacheDir());
         } catch (IOException e) {
-            Log.e(LOG_TAG, "Cannot create temporary file", e);
+            AsyncHttpClient.log.e(LOG_TAG, "Cannot create temporary file", e);
         }
         return null;
     }

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -236,7 +236,7 @@ public void writeTo(final OutputStream out) throws IOException {
                 os.write((elapsedTime + "").getBytes());
             }
 
-            Log.i(LOG_TAG, "Uploaded JSON in " + Math.floor(elapsedTime / 1000) + " seconds");
+            AsyncHttpClient.log.i(LOG_TAG, "Uploaded JSON in " + Math.floor(elapsedTime / 1000) + " seconds");
         }
 
         // Close the JSON object.

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -187,7 +187,7 @@ protected String encodeCookie(SerializableCookie cookie) {
             ObjectOutputStream outputStream = new ObjectOutputStream(os);
             outputStream.writeObject(cookie);
         } catch (IOException e) {
-            Log.d(LOG_TAG, "IOException in encodeCookie", e);
+            AsyncHttpClient.log.d(LOG_TAG, "IOException in encodeCookie", e);
             return null;
         }
 
@@ -208,9 +208,9 @@ protected Cookie decodeCookie(String cookieString) {
             ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
             cookie = ((SerializableCookie) objectInputStream.readObject()).getCookie();
         } catch (IOException e) {
-            Log.d(LOG_TAG, "IOException in decodeCookie", e);
+            AsyncHttpClient.log.d(LOG_TAG, "IOException in decodeCookie", e);
         } catch (ClassNotFoundException e) {
-            Log.d(LOG_TAG, "ClassNotFoundException in decodeCookie", e);
+            AsyncHttpClient.log.d(LOG_TAG, "ClassNotFoundException in decodeCookie", e);
         }
 
         return cookie;

File: library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
Patch:
@@ -67,7 +67,7 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                         append = false;
                         current = 0;
                     } else {
-                        Log.v(LOG_TAG, AsyncHttpClient.HEADER_CONTENT_RANGE + ": " + header.getValue());
+                        AsyncHttpClient.log.v(LOG_TAG, AsyncHttpClient.HEADER_CONTENT_RANGE + ": " + header.getValue());
                     }
                     sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), getResponseData(response.getEntity()));
                 }

File: library/src/main/java/com/loopj/android/http/RequestParams.java
Patch:
@@ -123,7 +123,7 @@ public void setContentEncoding(final String encoding) {
         if (encoding != null) {
             this.contentEncoding = encoding;
         } else {
-            Log.d(LOG_TAG, "setContentEncoding called with null attribute");
+            AsyncHttpClient.log.d(LOG_TAG, "setContentEncoding called with null attribute");
         }
     }
 
@@ -567,7 +567,7 @@ private HttpEntity createFormEntity() {
         try {
             return new UrlEncodedFormEntity(getParamsList(), contentEncoding);
         } catch (UnsupportedEncodingException e) {
-            Log.e(LOG_TAG, "createFormEntity failed", e);
+            AsyncHttpClient.log.e(LOG_TAG, "createFormEntity failed", e);
             return null; // Can happen, if the 'contentEncoding' won't be HTTP.UTF_8
         }
     }

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -102,9 +102,9 @@ protected byte[] getResponseData(HttpEntity entity) throws IOException {
                     inputStreamReader = new InputStreamReader(instream, getCharset());
                     rssReader.parse(new InputSource(inputStreamReader));
                 } catch (SAXException e) {
-                    Log.e(LOG_TAG, "getResponseData exception", e);
+                    AsyncHttpClient.log.e(LOG_TAG, "getResponseData exception", e);
                 } catch (ParserConfigurationException e) {
-                    Log.e(LOG_TAG, "getResponseData exception", e);
+                    AsyncHttpClient.log.e(LOG_TAG, "getResponseData exception", e);
                 } finally {
                     AsyncHttpClient.silentCloseInputStream(instream);
                     if (inputStreamReader != null) {

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -97,7 +97,7 @@ public void addPart(String key, String value, String contentType) {
             out.write(CR_LF);
         } catch (final IOException e) {
             // Shall not happen on ByteArrayOutputStream
-            Log.e(LOG_TAG, "addPart ByteArrayOutputStream exception", e);
+            AsyncHttpClient.log.e(LOG_TAG, "addPart ByteArrayOutputStream exception", e);
         }
     }
 
@@ -197,7 +197,7 @@ private byte[] createHeader(String key, String filename, String type) {
                 headerStream.write(CR_LF);
             } catch (IOException e) {
                 // Can't happen on ByteArrayOutputStream
-                Log.e(LOG_TAG, "createHeader ByteArrayOutputStream exception", e);
+                AsyncHttpClient.log.e(LOG_TAG, "createHeader ByteArrayOutputStream exception", e);
             }
             return headerStream.toByteArray();
         }

File: library/src/main/java/com/loopj/android/http/TextHttpResponseHandler.java
Patch:
@@ -120,7 +120,7 @@ public static String getResponseString(byte[] stringBytes, String charset) {
             }
             return toReturn;
         } catch (UnsupportedEncodingException e) {
-            Log.e(LOG_TAG, "Encoding response into string failed", e);
+            AsyncHttpClient.log.e(LOG_TAG, "Encoding response into string failed", e);
             return null;
         }
     }

File: sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
Patch:
@@ -88,7 +88,7 @@ public boolean isRequestHeadersAllowed() {
 
     protected JSONObject getBodyTextAsJSON() {
         String bodyText = getBodyText();
-        if (bodyText != null && TextUtils.isEmpty(bodyText)) {
+        if (bodyText != null && !TextUtils.isEmpty(bodyText)) {
             try {
                 return new JSONObject(bodyText);
             } catch (JSONException e) {

File: library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -56,7 +56,7 @@ public AsyncHttpRequest(AbstractHttpClient client, HttpContext context, HttpUriR
      * This method is called once by the system when the request is about to be
      * processed by the system. The library makes sure that a single request
      * is pre-processed only once.
-     * <p/>
+     * <p>&nbsp;</p>
      * Please note: pre-processing does NOT run on the main thread, and thus
      * any UI activities that you must perform should be properly dispatched to
      * the app's UI thread.
@@ -71,7 +71,7 @@ public void onPreProcessRequest(AsyncHttpRequest request) {
      * This method is called once by the system when the request has been fully
      * sent, handled and finished. The library makes sure that a single request
      * is post-processed only once.
-     * <p/>
+     * <p>&nbsp;</p>
      * Please note: post-processing does NOT run on the main thread, and thus
      * any UI activities that you must perform should be properly dispatched to
      * the app's UI thread.

File: sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
Patch:
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http.sample;
 
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.loopj.android.http.AsyncHttpClient;
@@ -87,7 +88,7 @@ public boolean isRequestHeadersAllowed() {
 
     protected JSONObject getBodyTextAsJSON() {
         String bodyText = getBodyText();
-        if (bodyText != null && !bodyText.isEmpty()) {
+        if (bodyText != null && TextUtils.isEmpty(bodyText)) {
             try {
                 return new JSONObject(bodyText);
             } catch (JSONException e) {

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -144,6 +144,6 @@ public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
     @Override
     public void onFailure(int statusCode, Header[] headers,
                           byte[] responseBody, Throwable error) {
-        onSuccess(statusCode, headers, handler);
+        onFailure(statusCode, headers, handler);
     }
 }

File: library/src/main/java/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -140,7 +140,7 @@ public final void sendResponseMessage(HttpResponse response) throws IOException
                     foundAllowedContentType = true;
                 }
             } catch (PatternSyntaxException e) {
-                Log.e("BinaryHttpResponseHandler", "Given pattern is not valid: " + anAllowedContentType, e);
+                Log.e(LOG_TAG, "Given pattern is not valid: " + anAllowedContentType, e);
             }
         }
         if (!foundAllowedContentType) {

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -99,7 +99,7 @@ protected byte[] getResponseData(HttpEntity entity) throws IOException {
                     SAXParser sparser = sfactory.newSAXParser();
                     XMLReader rssReader = sparser.getXMLReader();
                     rssReader.setContentHandler(handler);
-                    inputStreamReader = new InputStreamReader(instream, DEFAULT_CHARSET);
+                    inputStreamReader = new InputStreamReader(instream, getCharset());
                     rssReader.parse(new InputSource(inputStreamReader));
                 } catch (SAXException e) {
                     Log.e(LOG_TAG, "getResponseData exception", e);

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -99,7 +99,7 @@ protected byte[] getResponseData(HttpEntity entity) throws IOException {
                     SAXParser sparser = sfactory.newSAXParser();
                     XMLReader rssReader = sparser.getXMLReader();
                     rssReader.setContentHandler(handler);
-                    inputStreamReader = new InputStreamReader(instream, DEFAULT_CHARSET);
+                    inputStreamReader = new InputStreamReader(instream, getCharset());
                     rssReader.parse(new InputSource(inputStreamReader));
                 } catch (SAXException e) {
                     Log.e(LOG_TAG, "getResponseData exception", e);

File: library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
Patch:
@@ -101,8 +101,8 @@ protected byte[] getResponseData(HttpEntity entity) throws IOException {
     }
 
     public void updateRequestHeaders(HttpUriRequest uriRequest) {
-        if (mFile.exists() && mFile.canWrite())
-            current = mFile.length();
+        if (file.exists() && file.canWrite())
+            current = file.length();
         if (current > 0) {
             append = true;
             uriRequest.setHeader("Range", "bytes=" + current + "-");

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -1298,9 +1298,9 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         if (responseHandler.getUseSynchronousMode() && !responseHandler.getUsePoolThread()) {
             throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");
         }
-
+        
         if (contentType != null) {
-            if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase) uriRequest).getEntity() != null) {
+            if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase) uriRequest).getEntity() != null && uriRequest.containsHeader(HEADER_CONTENT_TYPE)) {
                 Log.w(LOG_TAG, "Passed contentType will be ignored because HttpEntity sets content type");
             } else {
                 uriRequest.setHeader(HEADER_CONTENT_TYPE, contentType);

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -1309,9 +1309,10 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         RequestHandle requestHandle = new RequestHandle(request);
 
         if (context != null) {
+            List<RequestHandle> requestList;
             // Add request to request map
-            List<RequestHandle> requestList = requestMap.get(context);
             synchronized (requestMap) {
+                requestList = requestMap.get(context);
                 if (requestList == null) {
                     requestList = Collections.synchronizedList(new LinkedList<RequestHandle>());
                     requestMap.put(context, requestList);

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -425,7 +425,6 @@ protected void postRunnable(Runnable runnable) {
                 runnable.run();
             } else {
                 // Otherwise, run on provided handler
-                Utils.asserts(handler != null, "handler should not be null!");
                 handler.post(runnable);
             }
         }

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -199,9 +199,9 @@ public void writeTo(final OutputStream out) throws IOException {
                         } else if (value instanceof JsonValueInterface) {
                             os.write(((JsonValueInterface) value).getEscapedJsonValue());
                         } else if (value instanceof org.json.JSONObject) {
-                            os.write(((org.json.JSONObject) value).toString().getBytes());
+                            os.write(value.toString().getBytes());
                         } else if (value instanceof org.json.JSONArray) {
-                            os.write(((org.json.JSONArray) value).toString().getBytes());
+                            os.write(value.toString().getBytes());
                         } else if (value instanceof Boolean) {
                             os.write((Boolean) value ? JSON_TRUE : JSON_FALSE);
                         } else if (value instanceof Long) {

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -53,7 +53,9 @@ public FileAsyncHttpResponseHandler(File file) {
     public FileAsyncHttpResponseHandler(File file, boolean append) {
         super();
         Utils.asserts(file != null, "File passed into FileAsyncHttpResponseHandler constructor must not be null");
-        Utils.asserts(file.getParentFile().mkdirs(), "Cannot create parent directories for requested File location");
+        if (!file.getParentFile().isDirectory()) {
+            Utils.asserts(file.getParentFile().mkdirs(), "Cannot create parent directories for requested File location");
+        }
         this.mFile = file;
         this.append = append;
     }

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -101,7 +101,9 @@ protected byte[] getResponseData(HttpEntity entity) throws IOException {
                     rssReader.setContentHandler(handler);
                     inputStreamReader = new InputStreamReader(instream, DEFAULT_CHARSET);
                     rssReader.parse(new InputSource(inputStreamReader));
-                } catch (SAXException | ParserConfigurationException e) {
+                } catch (SAXException e) {
+                    Log.e(LOG_TAG, "getResponseData exception", e);
+                } catch (ParserConfigurationException e) {
                     Log.e(LOG_TAG, "getResponseData exception", e);
                 } finally {
                     AsyncHttpClient.silentCloseInputStream(instream);

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -101,9 +101,7 @@ protected byte[] getResponseData(HttpEntity entity) throws IOException {
                     rssReader.setContentHandler(handler);
                     inputStreamReader = new InputStreamReader(instream, DEFAULT_CHARSET);
                     rssReader.parse(new InputSource(inputStreamReader));
-                } catch (SAXException e) {
-                    Log.e(LOG_TAG, "getResponseData exception", e);
-                } catch (ParserConfigurationException e) {
+                } catch (SAXException | ParserConfigurationException e) {
                     Log.e(LOG_TAG, "getResponseData exception", e);
                 } finally {
                     AsyncHttpClient.silentCloseInputStream(instream);

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -52,8 +52,8 @@ public FileAsyncHttpResponseHandler(File file) {
      */
     public FileAsyncHttpResponseHandler(File file, boolean append) {
         super();
-        AssertUtils.asserts(file != null, "File passed into FileAsyncHttpResponseHandler constructor must not be null");
-        AssertUtils.asserts(file.getParentFile().mkdirs(), "Cannot create parent directories for requested File location");
+        Utils.asserts(file != null, "File passed into FileAsyncHttpResponseHandler constructor must not be null");
+        Utils.asserts(file.getParentFile().mkdirs(), "Cannot create parent directories for requested File location");
         this.mFile = file;
         this.append = append;
     }
@@ -85,7 +85,7 @@ public boolean deleteTargetFile() {
      * @return temporary file or null if creating file failed
      */
     protected File getTemporaryFile(Context context) {
-        AssertUtils.asserts(context != null, "Tried creating temporary file without having Context");
+        Utils.asserts(context != null, "Tried creating temporary file without having Context");
         try {
             // not effective in release mode
             assert context != null;

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -53,6 +53,7 @@ public FileAsyncHttpResponseHandler(File file) {
     public FileAsyncHttpResponseHandler(File file, boolean append) {
         super();
         AssertUtils.asserts(file != null, "File passed into FileAsyncHttpResponseHandler constructor must not be null");
+        AssertUtils.asserts(getTargetFile().getParentFile().mkdirs(), "Cannot create parent directories for requested File location");
         this.mFile = file;
         this.append = append;
     }

File: library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
Patch:
@@ -30,7 +30,7 @@
 public abstract class DataAsyncHttpResponseHandler extends AsyncHttpResponseHandler {
     private static final String LOG_TAG = "DataAsyncHttpResponseHandler";
 
-    protected static final int PROGRESS_DATA_MESSAGE = 6;
+    protected static final int PROGRESS_DATA_MESSAGE = 7;
 
     /**
      * Creates a new AsyncHttpResponseHandler

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -1378,7 +1378,7 @@ public InputStream getContent() throws IOException {
 
         @Override
         public long getContentLength() {
-            return -1;
+            return wrappedEntity == null ? 0 : wrappedEntity.getContentLength();
         }
 
         @Override

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -169,7 +169,7 @@ public AsyncHttpClient(int httpPort, int httpsPort) {
     /**
      * Creates new AsyncHttpClient using given params
      *
-     * @param fixNoHttpResponseException Whether to fix or not issue, by ommiting SSL verification
+     * @param fixNoHttpResponseException Whether to fix issue or not, by omitting SSL verification
      * @param httpPort                   HTTP port to be used, must be greater than 0
      * @param httpsPort                  HTTPS port to be used, must be greater than 0
      */
@@ -180,7 +180,7 @@ public AsyncHttpClient(boolean fixNoHttpResponseException, int httpPort, int htt
     /**
      * Returns default instance of SchemeRegistry
      *
-     * @param fixNoHttpResponseException Whether to fix or not issue, by ommiting SSL verification
+     * @param fixNoHttpResponseException Whether to fix issue or not, by omitting SSL verification
      * @param httpPort                   HTTP port to be used, must be greater than 0
      * @param httpsPort                  HTTPS port to be used, must be greater than 0
      */

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -169,7 +169,7 @@ public AsyncHttpClient(int httpPort, int httpsPort) {
     /**
      * Creates new AsyncHttpClient using given params
      *
-     * @param fixNoHttpResponseException Whether to fix or not issue, by ommiting SSL verification
+     * @param fixNoHttpResponseException Whether to fix issue or not, by omitting SSL verification
      * @param httpPort                   HTTP port to be used, must be greater than 0
      * @param httpsPort                  HTTPS port to be used, must be greater than 0
      */
@@ -180,7 +180,7 @@ public AsyncHttpClient(boolean fixNoHttpResponseException, int httpPort, int htt
     /**
      * Returns default instance of SchemeRegistry
      *
-     * @param fixNoHttpResponseException Whether to fix or not issue, by ommiting SSL verification
+     * @param fixNoHttpResponseException Whether to fix issue or not, by omitting SSL verification
      * @param httpPort                   HTTP port to be used, must be greater than 0
      * @param httpsPort                  HTTPS port to be used, must be greater than 0
      */

File: library/src/main/java/com/loopj/android/http/ResponseHandlerInterface.java
Patch:
@@ -154,5 +154,5 @@ public interface ResponseHandlerInterface {
      * @param instance An instance of this response object
      * @param response The response to post-process
      */
-    public void onPostProcessResponse(ResponseHandlerInterface instance, HttpResponse response);
+    void onPostProcessResponse(ResponseHandlerInterface instance, HttpResponse response);
 }

File: library/src/main/java/com/loopj/android/http/TextHttpResponseHandler.java
Patch:
@@ -115,8 +115,9 @@ public void onFailure(int statusCode, Header[] headers, byte[] responseBytes, Th
     public static String getResponseString(byte[] stringBytes, String charset) {
         try {
             String toReturn = (stringBytes == null) ? null : new String(stringBytes, charset);
-            if (toReturn != null && toReturn.startsWith(UTF8_BOM))
+            if (toReturn != null && toReturn.startsWith(UTF8_BOM)) {
                 return toReturn.substring(1);
+            }
             return toReturn;
         } catch (UnsupportedEncodingException e) {
             Log.e(LOG_TAG, "Encoding response into string failed", e);

File: sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
Patch:
@@ -55,7 +55,7 @@ public RequestHandle executeSample(final AsyncHttpClient client, final String UR
         FutureTask<RequestHandle> future = new FutureTask<>(new Callable<RequestHandle>() {
             public RequestHandle call() {
                 Log.d(LOG_TAG, "Executing GET request on background thread");
-                return client.get(null, URL, headers, null, responseHandler);
+                return client.get(ctx, URL, headers, null, responseHandler);
             }
         });
 
@@ -66,7 +66,7 @@ public RequestHandle call() {
             handle = future.get(5, TimeUnit.SECONDS);
             Log.d(LOG_TAG, "Background thread for GET request has finished");
         } catch (Exception e) {
-            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();
+            Toast.makeText(ctx, e.getMessage(), Toast.LENGTH_LONG).show();
             e.printStackTrace();
         }
 

File: library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -146,22 +146,22 @@ private void makeRequest() throws IOException {
 
         HttpResponse response = client.execute(request, context);
 
-        if(isCancelled()) {
+        if (isCancelled()) {
             return;
         }
 
         if (responseHandler != null) {
             // Carry out pre-processing for this response.
             responseHandler.onPreProcessResponse(responseHandler, response);
 
-            if(isCancelled()) {
+            if (isCancelled()) {
                 return;
             }
 
             // The response is ready, handle it.
             responseHandler.sendResponseMessage(response);
 
-            if(isCancelled()) {
+            if (isCancelled()) {
                 return;
             }
 

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -330,10 +330,11 @@ protected void handleMessage(Message message) {
                 break;
             case RETRY_MESSAGE:
                 response = (Object[]) message.obj;
-                if (response != null && response.length == 1)
+                if (response != null && response.length == 1) {
                     onRetry((Integer) response[0]);
-                else
+                } else {
                     Log.e(LOG_TAG, "RETRY_MESSAGE didn't get enough params");
+                }
                 break;
             case CANCEL_MESSAGE:
                 onCancel();

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -28,11 +28,9 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-
-import java.io.IOException;
-
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;

File: library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
Patch:
@@ -66,8 +66,9 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                     if (header == null) {
                         append = false;
                         current = 0;
-                    } else
+                    } else {
                         Log.v(LOG_TAG, AsyncHttpClient.HEADER_CONTENT_RANGE + ": " + header.getValue());
+                    }
                     sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), getResponseData(response.getEntity()));
                 }
             }

File: library/src/main/java/com/loopj/android/http/RequestParams.java
Patch:
@@ -112,10 +112,11 @@ public class RequestParams {
      * @param encoding String constant from {@link org.apache.http.protocol.HTTP}
      */
     public void setContentEncoding(final String encoding) {
-        if (encoding != null)
+        if (encoding != null) {
             this.contentEncoding = encoding;
-        else
+        } else {
             Log.d(LOG_TAG, "setContentEncoding called with null attribute");
+        }
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -200,10 +200,8 @@ public void writeTo(final OutputStream out) throws IOException {
                 os.write((((Number) value).floatValue() + "").getBytes());
             } else if (value instanceof Integer) {
                 os.write((((Number) value).intValue() + "").getBytes());
-            } else if (value instanceof String) {
-                os.write(escape(value));
             } else {
-                os.write(value.toString().getBytes());
+                os.write(escape(value.toString()));
             }
 
             os.write(',');

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -255,6 +255,9 @@ public void process(HttpRequest request, HttpContext context) {
                                         header, clientHeaderMap.get(header),
                                         overwritten.getName(), overwritten.getValue())
                         );
+                        
+                        //remove the overwritten header
+                        request.removeHeader(overwritten);
                     }
                     request.addHeader(header, clientHeaderMap.get(header));
                 }

File: sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
Patch:
@@ -115,6 +115,7 @@ protected SampleJSON parseResponse(String rawJsonData, boolean isFailure) throws
 
     @Override
     public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        client.setEnableRedirects(true);
         return client.get(this, URL, headers, null, responseHandler);
     }
 

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -411,6 +411,7 @@ byte[] getResponseData(HttpEntity entity) throws IOException {
                         }
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
+                        AsyncHttpClient.endEntityViaReflection(entity);
                     }
                     responseBody = buffer.toByteArray();
                 } catch (OutOfMemoryError e) {

File: sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
Patch:
@@ -134,11 +134,11 @@ public void onFailure(int statusCode, Header[] headers, Throwable throwable, Str
 
                             // Get the type of auth requested.
                             int charPos = headerValueLowerCase.indexOf(' ');
-                            if(0 < charPos) {
+                            if (0 < charPos) {
                                 authType = headerValueLowerCase.substring(0, charPos);
 
                                 // The second part should begin with a "realm=" prefix.
-                                if(headerValueLowerCase.substring(1 + charPos).startsWith(HEADER_REALM_PREFIX)) {
+                                if (headerValueLowerCase.substring(1 + charPos).startsWith(HEADER_REALM_PREFIX)) {
                                     // The new realm value, including any possible wrapping quotation.
                                     realm = headerValue.substring(1 + charPos + HEADER_REALM_PREFIX.length());
 
@@ -154,7 +154,7 @@ public void onFailure(int statusCode, Header[] headers, Throwable throwable, Str
                     // We will support basic auth in this sample.
                     if (authType != null && HEADER_BASIC.equals(authType)) {
                         // Show a dialog for the user and request user/pass.
-                        Log.d(LOG_TAG, "realm=" + realm);
+                        Log.d(LOG_TAG, HEADER_REALM_PREFIX + realm);
 
                         // Present the dialog.
                         postRunnable(new DialogRunnable(realm));

File: sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
Patch:
@@ -51,7 +51,7 @@ public class WaypointsActivity extends ListActivity {
         new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
         new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
         new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
-        new SampleConfig(R.string.title_401_unauth, Http401Auth.class)
+        new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class)
     };
 
     @Override

File: sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
Patch:
@@ -33,7 +33,7 @@ public boolean isRequestBodyAllowed() {
     public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
         try {
             RequestParams params = new RequestParams();
-            final String contentType = "application/octet-stream";
+            final String contentType = RequestParams.APPLICATION_OCTET_STREAM;
             params.put("fileOne", createTempFile("fileOne", 1020), contentType);
             params.put("fileTwo", createTempFile("fileTwo", 1030), contentType);
             params.put("fileThree", createTempFile("fileThree", 1040), contentType);

File: library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
Patch:
@@ -67,7 +67,7 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                         append = false;
                         current = 0;
                     } else
-                        Log.v(LOG_TAG, "Content-Rnage: " + header.getValue());
+                        Log.v(LOG_TAG, "Content-Range: " + header.getValue());
                     sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), getResponseData(response.getEntity()));
                 }
             }

File: library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
Patch:
@@ -67,7 +67,7 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                         append = false;
                         current = 0;
                     } else
-                        Log.v(LOG_TAG, "Content-Rnage: " + header.getValue());
+                        Log.v(LOG_TAG, "Content-Range: " + header.getValue());
                     sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), getResponseData(response.getEntity()));
                 }
             }

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -74,8 +74,8 @@ protected File getTemporaryFile(Context context) {
         assert (context != null);
         try {
             return File.createTempFile("temp_", "_handled", context.getCacheDir());
-        } catch (Throwable t) {
-            Log.e(LOG_TAG, "Cannot create temporary file", t);
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Cannot create temporary file", e);
         }
         return null;
     }

File: library/src/main/java/com/loopj/android/http/MyRedirectHandler.java
Patch:
@@ -52,6 +52,7 @@ public MyRedirectHandler(final boolean allowRedirects) {
         this.enableRedirects = allowRedirects;
     }
 
+    @Override
     public boolean isRedirectRequested(
             final HttpResponse response,
             final HttpContext context) {
@@ -73,6 +74,7 @@ public boolean isRedirectRequested(
         } //end of switch
     }
 
+    @Override
     public URI getLocationURI(
             final HttpResponse response,
             final HttpContext context) throws ProtocolException {

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -54,6 +54,7 @@
  *     });
  * <pre/>
  *
+ * @param <T> Handler extending {@link org.xml.sax.helpers.DefaultHandler}
  * @see org.xml.sax.helpers.DefaultHandler
  * @see com.loopj.android.http.AsyncHttpResponseHandler
  */
@@ -83,6 +84,8 @@ public SaxAsyncHttpResponseHandler(T t) {
      * Deconstructs response into given content handler
      *
      * @param entity returned HttpEntity
+     * @return deconstructed response
+     * @throws java.io.IOException
      * @see org.apache.http.HttpEntity
      */
     @Override

File: library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
Patch:
@@ -74,8 +74,8 @@ protected File getTemporaryFile(Context context) {
         assert (context != null);
         try {
             return File.createTempFile("temp_", "_handled", context.getCacheDir());
-        } catch (Throwable t) {
-            Log.e(LOG_TAG, "Cannot create temporary file", t);
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Cannot create temporary file", e);
         }
         return null;
     }

File: library/src/main/java/com/loopj/android/http/MyRedirectHandler.java
Patch:
@@ -52,6 +52,7 @@ public MyRedirectHandler(final boolean allowRedirects) {
         this.enableRedirects = allowRedirects;
     }
 
+    @Override
     public boolean isRedirectRequested(
             final HttpResponse response,
             final HttpContext context) {
@@ -73,6 +74,7 @@ public boolean isRedirectRequested(
         } //end of switch
     }
 
+    @Override
     public URI getLocationURI(
             final HttpResponse response,
             final HttpContext context) throws ProtocolException {

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -54,6 +54,7 @@
  *     });
  * <pre/>
  *
+ * @param <T> Handler extending {@link org.xml.sax.helpers.DefaultHandler}
  * @see org.xml.sax.helpers.DefaultHandler
  * @see com.loopj.android.http.AsyncHttpResponseHandler
  */
@@ -83,6 +84,8 @@ public SaxAsyncHttpResponseHandler(T t) {
      * Deconstructs response into given content handler
      *
      * @param entity returned HttpEntity
+     * @return deconstructed response
+     * @throws java.io.IOException
      * @see org.apache.http.HttpEntity
      */
     @Override

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -165,7 +165,7 @@ public void setOmitNonPersistentCookies(boolean omitNonPersistentCookies) {
      * @param cookie cookie to be removed
      */
     public void deleteCookie(Cookie cookie) {
-        String name = cookie.getName();
+        String name = cookie.getName() + cookie.getDomain();
         cookies.remove(name);
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         prefsWriter.remove(COOKIE_NAME_PREFIX + name);

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -48,7 +48,7 @@
  *              // Request got HTTP success statusCode
  *         }
  *         &#064;Override
- *         public void onFailure(int statusCode, Header[] headers, T t){
+ *         public void onFailure(int statusCode, Header[] headers, FontHandler t){
  *              // Request got HTTP fail statusCode
  *         }
  *     });

File: library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
Patch:
@@ -48,7 +48,7 @@
  *              // Request got HTTP success statusCode
  *         }
  *         &#064;Override
- *         public void onFailure(int statusCode, Header[] headers, T t){
+ *         public void onFailure(int statusCode, Header[] headers, FontHandler t){
  *              // Request got HTTP fail statusCode
  *         }
  *     });

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -71,7 +71,7 @@ class JsonStreamerEntity implements HttpEntity {
         new BasicHeader("Content-Encoding", "gzip");
 
     // JSON data and associated meta-data to be uploaded.
-    private final Map<String, Object> jsonParams = new HashMap();
+    private final Map<String, Object> jsonParams = new HashMap<String, Object>();
 
     // Whether to use gzip compression while uploading
     private final Header contentEncoding;

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -60,7 +60,7 @@ public class PersistentCookieStore implements CookieStore {
      */
     public PersistentCookieStore(Context context) {
         cookiePrefs = context.getSharedPreferences(COOKIE_PREFS, 0);
-        cookies = new ConcurrentHashMap();
+        cookies = new ConcurrentHashMap<String, Cookie>();
 
         // Load any previously stored cookies into the store
         String storedCookieNames = cookiePrefs.getString(COOKIE_NAME_STORE, null);
@@ -146,7 +146,7 @@ public boolean clearExpired(Date date) {
 
     @Override
     public List<Cookie> getCookies() {
-        return new ArrayList(cookies.values());
+        return new ArrayList<Cookie>(cookies.values());
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RequestHandle.java
Patch:
@@ -9,7 +9,7 @@ public class RequestHandle {
     private final WeakReference<AsyncHttpRequest> request;
 
     public RequestHandle(AsyncHttpRequest request) {
-        this.request = new WeakReference(request);
+        this.request = new WeakReference<AsyncHttpRequest>(request);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RetryHandler.java
Patch:
@@ -40,8 +40,8 @@
 import javax.net.ssl.SSLException;
 
 class RetryHandler implements HttpRequestRetryHandler {
-    private final static HashSet<Class<?>> exceptionWhitelist = new HashSet();
-    private final static HashSet<Class<?>> exceptionBlacklist = new HashSet();
+    private final static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
+    private final static HashSet<Class<?>> exceptionBlacklist = new HashSet<Class<?>>();
 
     static {
         // Retry if the server dropped connection on us

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -59,7 +59,7 @@ class SimpleMultipartEntity implements HttpEntity {
     private final byte[] boundaryEnd;
     private boolean isRepeatable;
 
-    private final List<FilePart> fileParts = new ArrayList();
+    private final List<FilePart> fileParts = new ArrayList<FilePart>();
 
     // The buffer we use for building the message excluding files and the last
     // boundary

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -511,9 +511,6 @@ public void setMaxRetriesAndTimeout(int retries, int timeout) {
     /**
      * Will, before sending, remove all headers currently present in AsyncHttpClient instance,
      * which applies on all requests this client makes
-     *
-     * @param header the name of the header
-     * @param value  the contents of the header
      */
     public void removeAllHeaders() {
         clientHeaderMap.clear();

File: library/src/main/java/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -55,7 +55,9 @@ public abstract class BinaryHttpResponseHandler extends AsyncHttpResponseHandler
 
     private String[] mAllowedContentTypes = new String[]{
             "image/jpeg",
-            "image/png"
+            "image/png",
+            "image/gif",
+            "application/octet-stream"
     };
 
     /**

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -81,7 +81,6 @@
 import java.util.WeakHashMap;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadPoolExecutor;
 import java.util.zip.GZIPInputStream;
 
 
@@ -331,10 +330,10 @@ public void setCookieStore(CookieStore cookieStore) {
      * Overrides the threadpool implementation used when queuing/pooling requests. By default,
      * Executors.newFixedThreadPool() is used.
      *
-     * @param threadPool an instance of {@link ThreadPoolExecutor} to use for queuing/pooling
+     * @param threadPool an instance of {@link ExecutorService} to use for queuing/pooling
      *                   requests.
      */
-    public void setThreadPool(ThreadPoolExecutor threadPool) {
+    public void setThreadPool(ExecutorService threadPool) {
         this.threadPool = threadPool;
     }
 

File: library/src/main/java/com/loopj/android/http/RequestParams.java
Patch:
@@ -527,8 +527,8 @@ private List<BasicNameValuePair> getParamsList(String key, Object value) {
             for (Object nestedValue : set) {
                 params.addAll(getParamsList(key, nestedValue));
             }
-        } else if (value instanceof String) {
-            params.add(new BasicNameValuePair(key, (String) value));
+        } else {
+            params.add(new BasicNameValuePair(key, value.toString()));
         }
         return params;
     }

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -179,7 +179,7 @@ public String getCharset() {
      */
     public AsyncHttpResponseHandler() {
         // Use asynchronous mode by default.
-        setUseSynchronousMode(true);
+        setUseSynchronousMode(false);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/ResponseHandlerInterface.java
Patch:
@@ -104,7 +104,7 @@ public interface ResponseHandlerInterface {
     void setUseSynchronousMode(boolean useSynchronousMode);
 
     /**
-     * Can set, whether the handler should be asynchronous or synchronous
+     * Returns whether the handler is asynchronous or synchronous
      *
      * @return boolean if the ResponseHandler is running in synchronous mode
      */

File: library/src/main/java/com/loopj/android/http/RequestParams.java
Patch:
@@ -525,8 +525,8 @@ private List<BasicNameValuePair> getParamsList(String key, Object value) {
             for (Object nestedValue : set) {
                 params.addAll(getParamsList(key, nestedValue));
             }
-        } else if (value instanceof String) {
-            params.add(new BasicNameValuePair(key, (String) value));
+        } else {
+            params.add(new BasicNameValuePair(key, value.toString()));
         }
         return params;
     }

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -185,7 +185,7 @@ public AsyncHttpResponseHandler() {
      * @param totalSize    total size of file
      */
     public void onProgress(int bytesWritten, int totalSize) {
-        Log.v(LOG_TAG, String.format("Progress %d from %d (%d%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten / totalSize) * 100 : -1));
+        Log.v(LOG_TAG, String.format("Progress %d from %d (%2.0f%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten*1.0 / totalSize) * 100 : -1));
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -71,7 +71,7 @@ class JsonStreamerEntity implements HttpEntity {
         new BasicHeader("Content-Encoding", "gzip");
 
     // JSON data and associated meta-data to be uploaded.
-    private final Map<String, Object> jsonParams = new HashMap<>();
+    private final Map<String, Object> jsonParams = new HashMap();
 
     // Whether to use gzip compression while uploading
     private final Header contentEncoding;

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -60,7 +60,7 @@ public class PersistentCookieStore implements CookieStore {
      */
     public PersistentCookieStore(Context context) {
         cookiePrefs = context.getSharedPreferences(COOKIE_PREFS, 0);
-        cookies = new ConcurrentHashMap<>();
+        cookies = new ConcurrentHashMap();
 
         // Load any previously stored cookies into the store
         String storedCookieNames = cookiePrefs.getString(COOKIE_NAME_STORE, null);
@@ -146,7 +146,7 @@ public boolean clearExpired(Date date) {
 
     @Override
     public List<Cookie> getCookies() {
-        return new ArrayList<>(cookies.values());
+        return new ArrayList(cookies.values());
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RequestHandle.java
Patch:
@@ -9,7 +9,7 @@ public class RequestHandle {
     private final WeakReference<AsyncHttpRequest> request;
 
     public RequestHandle(AsyncHttpRequest request) {
-        this.request = new WeakReference<>(request);
+        this.request = new WeakReference(request);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RetryHandler.java
Patch:
@@ -40,8 +40,8 @@
 import javax.net.ssl.SSLException;
 
 class RetryHandler implements HttpRequestRetryHandler {
-    private final static HashSet<Class<?>> exceptionWhitelist = new HashSet<>();
-    private final static HashSet<Class<?>> exceptionBlacklist = new HashSet<>();
+    private final static HashSet<Class<?>> exceptionWhitelist = new HashSet();
+    private final static HashSet<Class<?>> exceptionBlacklist = new HashSet();
 
     static {
         // Retry if the server dropped connection on us

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -59,7 +59,7 @@ class SimpleMultipartEntity implements HttpEntity {
     private final byte[] boundaryEnd;
     private boolean isRepeatable;
 
-    private final List<FilePart> fileParts = new ArrayList<>();
+    private final List<FilePart> fileParts = new ArrayList();
 
     // The buffer we use for building the message excluding files and the last
     // boundary

File: sample/src/main/java/com/loopj/android/http/sample/CancelAllRequestsSample.java
Patch:
@@ -3,12 +3,12 @@
 public class CancelAllRequestsSample extends ThreadingTimeoutSample {
 
     @Override
-    protected int getSampleTitle() {
+    public int getSampleTitle() {
         return R.string.title_cancel_all;
     }
 
     @Override
-    protected void onCancelButtonPressed() {
+    public void onCancelButtonPressed() {
         getAsyncHttpClient().cancelAllRequests(true);
     }
 }

File: sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandleSample.java
Patch:
@@ -5,12 +5,12 @@
 public class CancelRequestHandleSample extends ThreadingTimeoutSample {
 
     @Override
-    protected int getSampleTitle() {
+    public int getSampleTitle() {
         return R.string.title_cancel_handle;
     }
 
     @Override
-    protected void onCancelButtonPressed() {
+    public void onCancelButtonPressed() {
         for (RequestHandle handle : getRequestHandles()) {
             if (!handle.isCancelled() && !handle.isFinished()) {
                 handle.cancel(true);

File: sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
Patch:
@@ -17,7 +17,7 @@ public class ThreadingTimeoutSample extends SampleParentActivity {
 
     @Override
     protected int getSampleTitle() {
-        return R.string.app_name;
+        return R.string.title_threading_timeout;
     }
 
     @Override

File: sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
Patch:
@@ -47,10 +47,10 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
                 targetClass = ThreadingTimeoutSample.class;
                 break;
             case 8:
-                targetClass = CancelAllRequests.class;
+                targetClass = CancelAllRequestsSample.class;
                 break;
             case 9:
-                targetClass = CancelRequestHandle.class;
+                targetClass = CancelRequestHandleSample.class;
                 break;
         }
         if (targetClass != null)

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -71,7 +71,7 @@ class JsonStreamerEntity implements HttpEntity {
         new BasicHeader("Content-Encoding", "gzip");
 
     // JSON data and associated meta-data to be uploaded.
-    private final Map<String, Object> jsonParams = new HashMap();
+    private final Map<String, Object> jsonParams = new HashMap<>();
 
     // Whether to use gzip compression while uploading
     private final Header contentEncoding;

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -60,7 +60,7 @@ public class PersistentCookieStore implements CookieStore {
      */
     public PersistentCookieStore(Context context) {
         cookiePrefs = context.getSharedPreferences(COOKIE_PREFS, 0);
-        cookies = new ConcurrentHashMap();
+        cookies = new ConcurrentHashMap<>();
 
         // Load any previously stored cookies into the store
         String storedCookieNames = cookiePrefs.getString(COOKIE_NAME_STORE, null);
@@ -146,7 +146,7 @@ public boolean clearExpired(Date date) {
 
     @Override
     public List<Cookie> getCookies() {
-        return new ArrayList(cookies.values());
+        return new ArrayList<>(cookies.values());
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RequestHandle.java
Patch:
@@ -9,7 +9,7 @@ public class RequestHandle {
     private final WeakReference<AsyncHttpRequest> request;
 
     public RequestHandle(AsyncHttpRequest request) {
-        this.request = new WeakReference(request);
+        this.request = new WeakReference<>(request);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RetryHandler.java
Patch:
@@ -40,8 +40,8 @@
 import javax.net.ssl.SSLException;
 
 class RetryHandler implements HttpRequestRetryHandler {
-    private final static HashSet<Class<?>> exceptionWhitelist = new HashSet();
-    private final static HashSet<Class<?>> exceptionBlacklist = new HashSet();
+    private final static HashSet<Class<?>> exceptionWhitelist = new HashSet<>();
+    private final static HashSet<Class<?>> exceptionBlacklist = new HashSet<>();
 
     static {
         // Retry if the server dropped connection on us

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -59,7 +59,7 @@ class SimpleMultipartEntity implements HttpEntity {
     private final byte[] boundaryEnd;
     private boolean isRepeatable;
 
-    private final List<FilePart> fileParts = new ArrayList();
+    private final List<FilePart> fileParts = new ArrayList<>();
 
     // The buffer we use for building the message excluding files and the last
     // boundary

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -376,7 +376,7 @@ byte[] getResponseData(HttpEntity entity) throws IOException {
                 if (contentLength > Integer.MAX_VALUE) {
                     throw new IllegalArgumentException("HTTP entity too large to be buffered in memory");
                 }
-                int buffersize = (contentLength < 0) ? BUFFER_SIZE : (int) contentLength;
+                int buffersize = (contentLength <= 0) ? BUFFER_SIZE : (int) contentLength;
                 try {
                     ByteArrayBuffer buffer = new ByteArrayBuffer(buffersize);
                     try {
@@ -386,7 +386,7 @@ byte[] getResponseData(HttpEntity entity) throws IOException {
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                             count += l;
                             buffer.append(tmp, 0, l);
-                            sendProgressMessage(count, (int) contentLength);
+                            sendProgressMessage(count, (int) (contentLength <= 0 ? 1 : contentLength));
                         }
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);

File: library/src/main/java/com/loopj/android/http/RequestHandle.java
Patch:
@@ -9,7 +9,7 @@ public class RequestHandle {
     private final WeakReference<AsyncHttpRequest> request;
 
     public RequestHandle(AsyncHttpRequest request) {
-        this.request = new WeakReference(request);
+        this.request = new WeakReference<AsyncHttpRequest>(request);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RequestHandle.java
Patch:
@@ -5,11 +5,11 @@
 /**
  * A Handle to an AsyncRequest which can be used to cancel a running request.
  */
-public class RequestHandle {
+class RequestHandle {
     private final WeakReference<AsyncHttpRequest> request;
 
     public RequestHandle(AsyncHttpRequest request) {
-        this.request = new WeakReference<AsyncHttpRequest>(request);
+        this.request = new WeakReference(request);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/RequestHandle.java
Patch:
@@ -9,7 +9,7 @@ class RequestHandle {
     private final WeakReference<AsyncHttpRequest> request;
 
     public RequestHandle(AsyncHttpRequest request) {
-        this.request = new WeakReference<AsyncHttpRequest>(request);
+        this.request = new WeakReference(request);
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
Patch:
@@ -190,7 +190,7 @@ private byte[] createHeader(String key, String filename, String type) {
         }
 
         public long getTotalLength() {
-            long streamLength = file.length();
+            long streamLength = file.length() + CR_LF.length;
             return header.length + streamLength;
         }
 

File: library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.zip.GZIPOutputStream;
@@ -297,7 +298,7 @@ static byte[] escape(String string) {
                         for (int zero = 0; zero < intLength; zero++) {
                             BUILDER.append('0');
                         }
-                        BUILDER.append(intString.toUpperCase());
+                        BUILDER.append(intString.toUpperCase(Locale.US));
                     } else {
                         BUILDER.append(ch);
                     }

File: library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -201,7 +202,7 @@ protected String byteArrayToHexString(byte[] bytes) {
             }
             sb.append(Integer.toHexString(v));
         }
-        return sb.toString().toUpperCase();
+        return sb.toString().toUpperCase(Locale.US);
     }
 
     /**

File: sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 public abstract class SampleParentActivity extends Activity {
 
@@ -109,7 +110,7 @@ protected final void debugHeaders(String TAG, Header[] headers) {
             Log.d(TAG, "Return Headers:");
             StringBuilder builder = new StringBuilder();
             for (Header h : headers) {
-                String _h = String.format("%s : %s", h.getName(), h.getValue());
+                String _h = String.format(Locale.US, "%s : %s", h.getName(), h.getValue());
                 Log.d(TAG, _h);
                 builder.append(_h);
                 builder.append("\n");
@@ -143,7 +144,7 @@ protected final void debugResponse(String TAG, String response) {
     }
 
     protected final void debugStatusCode(String TAG, int statusCode) {
-        String msg = String.format("Return Status Code: %d", statusCode);
+        String msg = String.format(Locale.US, "Return Status Code: %d", statusCode);
         Log.d(TAG, msg);
         addView(getColoredView(LIGHTBLUE, msg));
     }

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -179,7 +179,7 @@ public AsyncHttpResponseHandler() {
      * @param totalSize    total size of file
      */
     public void onProgress(int bytesWritten, int totalSize) {
-        Log.d(LOG_TAG, String.format("Progress %d from %d (%d)", bytesWritten, totalSize, totalSize > 0 ? bytesWritten / (totalSize / 100) : -1));
+        Log.d(LOG_TAG, String.format("Progress %d from %d (%d%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten / totalSize) * 100 : -1));
     }
 
     /**

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -210,7 +210,7 @@ public AsyncHttpClient(SchemeRegistry schemeRegistry) {
 
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
 
-        threadPool = Executors.newFixedThreadPool(DEFAULT_MAX_CONNECTIONS);
+        threadPool = Executors.newCachedThreadPool();
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
 

File: library/src/main/java/com/loopj/android/http/RequestParams.java
Patch:
@@ -354,8 +354,8 @@ private HttpEntity createJsonStreamerEntity() throws IOException {
             FileWrapper fileWrapper = entry.getValue();
             entity.addPart(entry.getKey(),
                            new FileInputStream(fileWrapper.file),
-                                               fileWrapper.file.getName(),
-                                               fileWrapper.contentType);
+                           fileWrapper.file.getName(),
+                           fileWrapper.contentType);
         }
 
         // Add stream params

File: library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -315,7 +315,7 @@ public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Thr
             onFailure(statusCode, headers, error, response);
         } catch (UnsupportedEncodingException e) {
             Log.e(LOG_TAG, e.toString());
-            onFailure(statusCode, headers, e, null);
+            onFailure(statusCode, headers, error, null);
         }
     }
 

File: library/src/main/java/com/loopj/android/http/TextHttpResponseHandler.java
Patch:
@@ -107,8 +107,8 @@ public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Thr
             String response = responseBody == null ? null : new String(responseBody, getCharset());
             onFailure(statusCode, headers, response, error);
         } catch (UnsupportedEncodingException e) {
-            Log.v(LOG_TAG, "String encoding failed, calling onFailure(int, Header[], String, Throwable)");
-            onFailure(0, headers, (String) null, e);
+            Log.e(LOG_TAG, "String encoding failed, calling onFailure(int, Header[], String, Throwable)", e);
+            onFailure(0, headers, (String) null, error);
         }
     }
 

File: library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -884,7 +884,7 @@ public RequestHandle delete(Context context, String url, Header[] headers, Reque
      */
     protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
         if (contentType != null) {
-            uriRequest.addHeader("Content-Type", contentType);
+            uriRequest.setHeader("Content-Type", contentType);
         }
 
         responseHandler.setRequestHeaders(uriRequest.getAllHeaders());

File: library/src/com/loopj/android/http/MySSLSocketFactory.java
Patch:
@@ -15,8 +15,8 @@
 import javax.net.ssl.X509TrustManager;
 
 /**
- * This file is introduced to fix HTTPS Post bug on API &lt; ICS
- * see http://code.google.com/p/android/issues/detail?id=13117#c14
+ * This file is introduced to fix HTTPS Post bug on API &lt; ICS see
+ * http://code.google.com/p/android/issues/detail?id=13117#c14
  */
 public class MySSLSocketFactory extends SSLSocketFactory {
     SSLContext sslContext = SSLContext.getInstance("TLS");

File: library/src/com/loopj/android/http/SerializableCookie.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.Date;
 
 /**
- * A wrapper class around {@link Cookie} and/or {@link BasicClientCookie}
- * designed for use in {@link PersistentCookieStore}.
+ * A wrapper class around {@link Cookie} and/or {@link BasicClientCookie} designed for use in {@link
+ * PersistentCookieStore}.
  */
 public class SerializableCookie implements Serializable {
     private static final long serialVersionUID = 6374381828722046732L;

File: library/src/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -18,6 +18,8 @@
 
 package com.loopj.android.http;
 
+import android.util.Log;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.methods.HttpUriRequest;
@@ -110,6 +112,7 @@ private void makeRequestWithRetries() throws IOException {
             }
         } catch (Exception e) {
             // catch anything else to ensure failure message is propagated
+            Log.e("AsyncHttpRequest", "Unhandled exception origin cause", e);
             cause = new IOException("Unhandled exception: " + e.getMessage());
         }
 

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -446,7 +446,7 @@ byte[] getResponseData(HttpEntity entity) throws IOException {
                     } finally {
                         instream.close();
                     }
-                    responseBody = buffer.buffer();
+                    responseBody = buffer.toByteArray();
                 } catch (OutOfMemoryError e) {
                     System.gc();
                     throw new IOException("File too large to fit into available memory");

File: library/src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -213,7 +213,7 @@ public AsyncHttpClient(SchemeRegistry schemeRegistry) {
 
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
 
-        threadPool = (ThreadPoolExecutor) Executors.newCachedThreadPool();
+        threadPool = (ThreadPoolExecutor) Executors.newFixedThreadPool(DEFAULT_MAX_CONNECTIONS);
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
 
@@ -286,7 +286,7 @@ public void setCookieStore(CookieStore cookieStore) {
 
     /**
      * Overrides the threadpool implementation used when queuing/pooling
-     * requests. By default, Executors.newCachedThreadPool() is used.
+     * requests. By default, Executors.newFixedThreadPool() is used.
      *
      * @param threadPool an instance of {@link ThreadPoolExecutor} to use for queuing/pooling requests.
      */

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -291,9 +291,8 @@ public void onFailure(int statusCode, Header[] headers, Throwable error, String
      * @param error        the underlying cause of the failure
      */
     public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
-        String response;
         try {
-            response = new String(responseBody, getCharset());
+            String response = responseBody == null ? null : new String(responseBody, getCharset());
             onFailure(statusCode, headers, error, response);
         } catch (UnsupportedEncodingException e) {
             Log.e(LOG_TAG, e.toString());

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -291,9 +291,8 @@ public void onFailure(int statusCode, Header[] headers, Throwable error, String
      * @param error        the underlying cause of the failure
      */
     public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
-        String response;
         try {
-            response = new String(responseBody, getCharset());
+            String response = responseBody == null ? null : new String(responseBody, getCharset());
             onFailure(statusCode, headers, error, response);
         } catch (UnsupportedEncodingException e) {
             Log.e(LOG_TAG, e.toString());

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -139,7 +139,7 @@ public void setCharset(final String charset) {
     }
 
     public String getCharset() {
-        return this.responseCharset;
+        return this.responseCharset == null ? DEFAULT_CHARSET : this.responseCharset;
     }
 
     /**
@@ -222,7 +222,7 @@ public void onSuccess(int statusCode, String content) {
      */
     public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
         try {
-            String response = new String(responseBody, getCharset());
+            String response = responseBody == null ? null : new String(responseBody, getCharset());
             onSuccess(statusCode, headers, response);
         } catch (UnsupportedEncodingException e) {
             Log.e(LOG_TAG, e.toString());

File: library/src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -45,7 +45,7 @@ public class JsonHttpResponseHandler extends TextHttpResponseHandler {
     private static final String LOG_TAG = "JsonHttpResponseHandler";
 
     /**
-     * Creates a new TextHttpResponseHandler
+     * Creates a new JsonHttpResponseHandler
      */
 
     public JsonHttpResponseHandler() {

File: library/src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -134,10 +134,9 @@ public void onFailure(int statusCode, Header[] headers, byte[] responseData, Thr
     protected void sendResponseMessage(HttpResponse response) throws IOException {
         StatusLine status = response.getStatusLine();
         Header[] contentTypeHeaders = response.getHeaders("Content-Type");
-        byte[] responseBody = null;
         if (contentTypeHeaders.length != 1) {
             //malformed/ambiguous HTTP Header, ABORT!
-            sendFailureMessage(status.getStatusCode(), response.getAllHeaders(), (byte[]) null, new HttpResponseException(status.getStatusCode(), "None, or more than one, Content-Type Header found!"));
+            sendFailureMessage(status.getStatusCode(), response.getAllHeaders(), null, new HttpResponseException(status.getStatusCode(), "None, or more than one, Content-Type Header found!"));
             return;
         }
         Header contentTypeHeader = contentTypeHeaders[0];
@@ -149,7 +148,7 @@ protected void sendResponseMessage(HttpResponse response) throws IOException {
         }
         if (!foundAllowedContentType) {
             //Content-Type not in allowed list, ABORT!
-            sendFailureMessage(status.getStatusCode(), response.getAllHeaders(), (byte[]) null, new HttpResponseException(status.getStatusCode(), "Content-Type not allowed!"));
+            sendFailureMessage(status.getStatusCode(), response.getAllHeaders(), null, new HttpResponseException(status.getStatusCode(), "Content-Type not allowed!"));
             return;
         }
         super.sendResponseMessage( response );

File: sample/src/main/java/com/loopj/android/http/sample/MainActivity.java
Patch:
@@ -11,7 +11,6 @@
 import android.widget.Toast;
 
 import com.loopj.android.http.AsyncHttpClient;
-import com.loopj.android.http.AsyncHttpResponseHandler;
 import com.loopj.android.http.TextHttpResponseHandler;
 
 import org.apache.http.Header;

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -93,7 +93,8 @@ public class AsyncHttpResponseHandler {
     protected static final int BUFFER_SIZE = 4096;
 
     private Handler handler;
-    private String responseCharset = "UTF-8";
+    public static final String DEFAULT_CHARSET = "UTF-8";
+    private String responseCharset = DEFAULT_CHARSET;
     private Boolean useSynchronousMode = false;
 
     // avoid leaks by using a non-anonymous handler class

File: examples/CookieVideoView.java
Patch:
@@ -39,6 +39,8 @@
 import android.widget.MediaController;
 import android.widget.MediaController.MediaPlayerControl;
 
+import com.loopj.android.http.PersistentCookieStore;
+
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.List;

File: examples/TestCaseExampleUsage.java
Patch:
@@ -2,7 +2,7 @@
 import java.util.concurrent.TimeUnit;
 
 import com.loopj.android.http.AsyncHttpClient;
-import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.TextHttpResponseHandler;
 
 import android.test.InstrumentationTestCase;
 import android.util.Log;
@@ -23,7 +23,7 @@ public void run()
 			{
 				AsyncHttpClient client = new AsyncHttpClient();
 
-				client.get("http://www.google.com", new AsyncHttpResponseHandler()
+				client.get("http://www.google.com", new TextHttpResponseHandler()
 				{
 					@Override
 					public void onStart()
@@ -39,7 +39,7 @@ public void onSuccess(String response)
 					}
 
 					@Override
-					public void onFailure(Throwable error, String content)
+					public void onFailure(String content, Throwable error)
 					{
 						Log.e(TAG , "onFailure error : " + error.toString() + "content : " + content);
 					}

File: sample/src/main/java/com/loopj/android/http/sample/MainActivity.java
Patch:
@@ -12,6 +12,7 @@
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.TextHttpResponseHandler;
 
 import org.apache.http.Header;
 
@@ -59,7 +60,7 @@ public void onClick(View v) {
     }
 
     private void startRequest() {
-        aclient.get(this, getURLString(), new AsyncHttpResponseHandler() {
+        aclient.get(this, getURLString(), new TextHttpResponseHandler() {
 
             @Override
             public void onSuccess(int statusCode, Header[] headers, String content) {
@@ -71,7 +72,7 @@ public void onSuccess(int statusCode, Header[] headers, String content) {
             }
 
             @Override
-            public void onFailure(int statusCode, Header[] headers, Throwable error, String content) {
+            public void onFailure(int statusCode, Header[] headers, String content, Throwable error) {
                 setStatusMessage("Failed", Color.parseColor("#99FF0000"));
                 printThrowable(error);
                 printHeaders(headers);

File: library/src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -86,7 +86,7 @@
  * <p>&nbsp;</p>
  * <pre>
  * AsyncHttpClient client = new AsyncHttpClient();
- * client.get("http://www.google.com", new AsyncHttpResponseHandler() {
+ * client.get("http://www.google.com", new TextHttpResponseHandler() {
  *     &#064;Override
  *     public void onSuccess(String response) {
  *         System.out.println(response);
@@ -199,7 +199,6 @@ private static SchemeRegistry getDefaultSchemeRegistry(boolean fixNoHttpResponse
      * @param schemeRegistry SchemeRegistry to be used
      */
     public AsyncHttpClient(SchemeRegistry schemeRegistry) {
-
         BasicHttpParams httpParams = new BasicHttpParams();
 
         ConnManagerParams.setTimeout(httpParams, socketTimeout);
@@ -889,7 +888,7 @@ private HttpEntity paramsToEntity(RequestParams params, AsyncHttpResponseHandler
             }
         } catch (Throwable t) {
             if (responseHandler != null)
-                responseHandler.sendFailureMessage(0, null, t, (String) null);
+                responseHandler.sendFailureMessage(0, null, null, t);
             else
                 t.printStackTrace();
         }

File: library/src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -57,7 +57,7 @@
  */
 public class BinaryHttpResponseHandler extends AsyncHttpResponseHandler {
     // Allow images by default
-    private static String[] mAllowedContentTypes = new String[]{
+    private String[] mAllowedContentTypes = new String[]{
             "image/jpeg",
             "image/png"
     };

File: sample/src/main/java/com/loopj/android/http/sample/MainActivity.java
Patch:
@@ -64,6 +64,7 @@ private void startRequest() {
             @Override
             public void onSuccess(int statusCode, Header[] headers, String content) {
                 setStatusMessage("Succeeded", Color.parseColor("#DD00FF00"));
+                printThrowable(null);
                 printHeaders(headers);
                 printContents(content);
                 printStatusCode(statusCode);

File: library/src/com/loopj/android/http/MySSLSocketFactory.java
Patch:
@@ -16,7 +16,7 @@
 import javax.net.ssl.X509TrustManager;
 
 /**
- * This file is introduced to fix HTTPS Post bug on API < ICS
+ * This file is introduced to fix HTTPS Post bug on API &lt; ICS
  * see http://code.google.com/p/android/issues/detail?id=13117#c14
  */
 public class MySSLSocketFactory extends SSLSocketFactory {

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -253,6 +253,7 @@ protected void sendResponseMessage(HttpResponse response) {
             }
         } catch (IOException e) {
             sendFailureMessage(e, (String) null);
+            return;
         }
 
         if (status.getStatusCode() >= 300) {

File: library/src/com/loopj/android/http/RetryHandler.java
Patch:
@@ -88,7 +88,7 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         if (retry) {
             // resend all idempotent requests
             HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
-            String requestType = currentReq.getMethod();
+            String requestType = currentReq != null ? currentReq.getMethod() : "";
             retry = !requestType.equals("POST");
         }
 

File: library/src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -687,7 +687,7 @@ protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, Ht
     public static String getUrlWithQueryString(String url, RequestParams params) {
         if (params != null) {
             String paramString = params.getParamString();
-            if (url.indexOf("?") == -1) {
+            if (!url.contains("?")) {
                 url += "?" + paramString;
             } else {
                 url += "&" + paramString;

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -36,12 +36,12 @@
  * Used to intercept and handle the responses from requests made using
  * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is
  * designed to be anonymously overridden with your own response handling code.
- * <p/>
+ * <p>&nbsp;</p>
  * Additionally, you can override the {@link #onFailure(Throwable, String)},
  * {@link #onStart()}, and {@link #onFinish()} methods as required.
- * <p/>
+ * <p>&nbsp;</p>
  * For example:
- * <p/>
+ * <p>&nbsp;</p>
  * <pre>
  * AsyncHttpClient client = new AsyncHttpClient();
  * client.get("http://www.google.com", new AsyncHttpResponseHandler() {

File: library/src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -31,11 +31,11 @@
  * Used to intercept and handle the responses from requests made using
  * {@link AsyncHttpClient}, with automatic parsing into a {@link JSONObject}
  * or {@link JSONArray}.
- * <p/>
+ * <p>&nbsp;</p>
  * This class is designed to be passed to get, post, put and delete requests
  * with the {@link #onSuccess(JSONObject)} or {@link #onSuccess(JSONArray)}
  * methods anonymously overridden.
- * <p/>
+ * <p>&nbsp;</p>
  * Additionally, you can override the other event methods from the
  * parent class.
  */

File: library/src/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -39,7 +39,7 @@
  * {@link CookieStore} interface. Cookies are stored and will persist on the
  * user's device between application sessions since they are serialized and
  * stored in {@link SharedPreferences}.
- * <p/>
+ * <p>&nbsp;</p>
  * Instances of this class are designed to be used with
  * {@link AsyncHttpClient#setCookieStore}, but can also be used with a
  * regular old apache HttpClient/HttpContext if you prefer.
@@ -54,6 +54,8 @@ public class PersistentCookieStore implements CookieStore {
 
     /**
      * Construct a persistent cookie store.
+     *
+     * @param context Context to attach cookie store to
      */
     public PersistentCookieStore(Context context) {
         cookiePrefs = context.getSharedPreferences(COOKIE_PREFS, 0);

File: library/src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -147,7 +147,7 @@ protected void handleMessage(Message msg) {
         switch (msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[]) msg.obj;
-                handleSuccessMessage(((Integer) response[0]).intValue(), (byte[]) response[1]);
+                handleSuccessMessage((Integer) response[0], (byte[]) response[1]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[]) msg.obj;

File: library/src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -191,6 +191,8 @@ protected void handleFailureMessage(Throwable e, String responseBody) {
                     onFailure(e, (JSONObject) jsonResponse);
                 } else if (jsonResponse instanceof JSONArray) {
                     onFailure(e, (JSONArray) jsonResponse);
+                } else if (jsonResponse instanceof String) {
+                    onFailure(e, (String) jsonResponse);
                 } else {
                     onFailure(e, responseBody);
                 }

File: library/src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -221,7 +221,7 @@ public void setUserAgent(String userAgent) {
     }
 
     /**
-     * Sets the connection time oout. By default, 10 seconds
+     * Set the connection timeout. By default, 10 seconds.
      *
      * @param timeout the connect/socket timeout in milliseconds
      */

File: library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -239,7 +239,7 @@ protected Message obtainMessage(int responseMessage, Object response) {
     }
 
     // Interface to AsyncHttpRequest
-    void sendResponseMessage(HttpResponse response) {
+    protected void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         String responseBody = null;
         try {

File: library/src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -161,7 +161,7 @@ protected void handleMessage(Message msg) {
 
     // Interface to AsyncHttpRequest
     @Override
-    void sendResponseMessage(HttpResponse response) {
+    protected void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         Header[] contentTypeHeaders = response.getHeaders("Content-Type");
         byte[] responseBody = null;

File: library/src/com/loopj/android/http/SyncHttpClient.java
Patch:
@@ -18,7 +18,7 @@ public abstract class SyncHttpClient extends AsyncHttpClient {
     protected AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
 
         @Override
-        void sendResponseMessage(org.apache.http.HttpResponse response) {
+        protected void sendResponseMessage(org.apache.http.HttpResponse response) {
             responseCode = response.getStatusLine().getStatusCode();
             super.sendResponseMessage(response);
         }

File: src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -147,7 +147,7 @@ protected void handleMessage(Message msg) {
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
-                handleFailureMessage((Throwable)response[0], response[1].toString());
+                handleFailureMessage((Throwable)response[0], (byte[]) response[1]);
                 break;
             default:
                 super.handleMessage(msg);
@@ -195,4 +195,4 @@ void sendResponseMessage(HttpResponse response) {
             sendSuccessMessage(status.getStatusCode(), responseBody);
         }
     }
-}
\ No newline at end of file
+}

File: src/com/loopj/android/http/RequestParams.java
Patch:
@@ -210,12 +210,12 @@ public String toString() {
                 result.append("&");
 
             ArrayList<String> values = entry.getValue();
-            for (String value : values) {
-                if (values.indexOf(value) != 0)
+            for (int i = 0; i < values.size(); i++) {
+                if (i != 0)
                     result.append("&");
                 result.append(entry.getKey());
                 result.append("=");
-                result.append(value);
+                result.append(values.get(i));
             }
         }
 

File: src/com/loopj/android/http/RequestParams.java
Patch:
@@ -210,12 +210,12 @@ public String toString() {
                 result.append("&");
 
             ArrayList<String> values = entry.getValue();
-            for (String value : values) {
-                if (values.indexOf(value) != 0)
+            for (int i = 0; i < values.size(); i++) {
+                if (i != 0)
                     result.append("&");
                 result.append(entry.getKey());
                 result.append("=");
-                result.append(value);
+                result.append(values.get(i));
             }
         }
 

File: src/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -98,16 +98,16 @@ public void addCookie(Cookie cookie) {
 
     @Override
     public void clear() {
-        // Clear cookies from local store
-        cookies.clear();
-
         // Clear cookies from persistent store
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         for(String name : cookies.keySet()) {
             prefsWriter.remove(COOKIE_NAME_PREFIX + name);
         }
         prefsWriter.remove(COOKIE_NAME_STORE);
         prefsWriter.commit();
+
+        // Clear cookies from local store
+        cookies.clear();
     }
 
     @Override

File: src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -19,6 +19,7 @@
 package com.loopj.android.http;
 
 import java.io.IOException;
+import java.util.regex.Pattern;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -168,7 +169,7 @@ void sendResponseMessage(HttpResponse response) {
         Header contentTypeHeader = contentTypeHeaders[0];
         boolean foundAllowedContentType = false;
         for(String anAllowedContentType : mAllowedContentTypes) {
-            if(anAllowedContentType.equals(contentTypeHeader.getValue())) {
+            if(Pattern.matches(anAllowedContentType, contentTypeHeader.getValue())) {
                 foundAllowedContentType = true;
             }
         }

File: src/com/loopj/android/http/BinaryHttpResponseHandler.java
Patch:
@@ -19,6 +19,7 @@
 package com.loopj.android.http;
 
 import java.io.IOException;
+import java.util.regex.Pattern;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -168,7 +169,7 @@ void sendResponseMessage(HttpResponse response) {
         Header contentTypeHeader = contentTypeHeaders[0];
         boolean foundAllowedContentType = false;
         for(String anAllowedContentType : mAllowedContentTypes) {
-            if(anAllowedContentType.equals(contentTypeHeader.getValue())) {
+            if(Pattern.matches(anAllowedContentType, contentTypeHeader.getValue())) {
                 foundAllowedContentType = true;
             }
         }

File: src/com/loopj/android/http/SyncHttpClient.java
Patch:
@@ -14,8 +14,8 @@ public abstract class SyncHttpClient extends AsyncHttpClient {
 	 * the result back to this method. Therefore the result object has to be a
 	 * field to be accessible
 	 */
-	private String result;
-	AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
+	protected String result;
+	protected AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
 
 		void sendResponseMessage(org.apache.http.HttpResponse response) {
 			responseCode = response.getStatusLine().getStatusCode();

File: src/com/loopj/android/http/RetryHandler.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 
-import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLException;
 
 import org.apache.http.NoHttpResponseException;
 import org.apache.http.client.HttpRequestRetryHandler;
@@ -56,7 +56,7 @@ class RetryHandler implements HttpRequestRetryHandler {
         // never retry timeouts
         exceptionBlacklist.add(InterruptedIOException.class);
         // never retry SSL handshake failures
-        exceptionBlacklist.add(SSLHandshakeException.class);
+        exceptionBlacklist.add(SSLException.class);
     }
 
     private final int maxRetries;

File: src/com/loopj/android/http/RetryHandler.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 
-import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLException;
 
 import org.apache.http.NoHttpResponseException;
 import org.apache.http.client.HttpRequestRetryHandler;
@@ -56,7 +56,7 @@ class RetryHandler implements HttpRequestRetryHandler {
         // never retry timeouts
         exceptionBlacklist.add(InterruptedIOException.class);
         // never retry SSL handshake failures
-        exceptionBlacklist.add(SSLHandshakeException.class);
+        exceptionBlacklist.add(SSLException.class);
     }
 
     private final int maxRetries;

File: examples/ExampleUsage.java
Patch:
@@ -4,7 +4,7 @@ public class ExampleUsage {
     public static void makeRequest() {
         AsyncHttpClient client = new AsyncHttpClient();
 
-        client.get("http://www.google.com", new AsyncHttpResponseHandler() {
+        client.get("http://www.google.com", new TextHttpResponseHandler() {
             @Override
             public void onSuccess(String response) {
                 System.out.println(response);

File: examples/TwitterRestClient.java
Patch:
@@ -12,7 +12,7 @@ public static void get(String url, RequestParams params, AsyncHttpResponseHandle
     }
 
     public static void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.get(getAbsoluteUrl(url), params, responseHandler);
+        client.post(getAbsoluteUrl(url), params, responseHandler);
     }
 
     private static String getAbsoluteUrl(String relativeUrl) {

File: src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -101,7 +101,7 @@ protected void handleSuccessJsonMessage(Object jsonResponse) {
         } else if(jsonResponse instanceof JSONArray) {
             onSuccess((JSONArray)jsonResponse);
         } else {
-            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()));
+            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
     }
 

File: src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -89,7 +89,6 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
 
     @Override
     protected void handleFailureMessage(Throwable e, String responseBody) {
-        super.handleFailureMessage(e, responseBody);
         if (responseBody != null) try {
             Object jsonResponse = parseResponse(responseBody);
             if(jsonResponse instanceof JSONObject) {
@@ -105,4 +104,4 @@ protected void handleFailureMessage(Throwable e, String responseBody) {
             onFailure(e, "");
         }
     }
-}
\ No newline at end of file
+}

File: src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -39,6 +39,8 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpResponseInterceptor;
 import org.apache.http.HttpVersion;
+import org.apache.http.auth.AuthScope;
+import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.CookieStore;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpDelete;

File: src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -211,7 +211,7 @@ void sendResponseMessage(HttpResponse response) {
             HttpEntity temp = response.getEntity();
             if(temp != null) {
                 entity = new BufferedHttpEntity(temp);
-                responseBody = EntityUtils.toString(entity);
+                responseBody = EntityUtils.toString(entity, "UTF-8");
             }
         } catch(IOException e) {
             sendFailureMessage(e, null);

File: src/com/loopj/android/http/AsyncHttpResponseHandler.java
Patch:
@@ -211,7 +211,7 @@ void sendResponseMessage(HttpResponse response) {
             HttpEntity temp = response.getEntity();
             if(temp != null) {
                 entity = new BufferedHttpEntity(temp);
-                responseBody = EntityUtils.toString(entity);
+                responseBody = EntityUtils.toString(entity, "UTF-8");
             }
         } catch(IOException e) {
             sendFailureMessage(e, null);

File: src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -58,6 +58,7 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpParams;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpProtocolParams;
 import org.apache.http.protocol.BasicHttpContext;
@@ -205,7 +206,7 @@ public void setUserAgent(String userAgent) {
      * @param timeout the connect/socket timeout in milliseconds
      */
     public void setTimeout(int timeout){
-        final BasicHttpParams httpParams = this.httpClient.getParams();
+        final HttpParams httpParams = this.httpClient.getParams();
         ConnManagerParams.setTimeout(httpParams, timeout);
         HttpConnectionParams.setSoTimeout(httpParams, timeout);
         HttpConnectionParams.setConnectionTimeout(httpParams, timeout);

File: src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -117,7 +117,7 @@ public AsyncHttpClient() {
         ConnManagerParams.setMaxTotalConnections(httpParams, DEFAULT_MAX_CONNECTIONS);
 
         HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
-        HttpConnectionParams.setConnectionTimeout(httpParams, socketTimout);
+        HttpConnectionParams.setConnectionTimeout(httpParams, socketTimeout);
         HttpConnectionParams.setTcpNoDelay(httpParams, true);
         HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 

File: src/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -55,7 +55,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(e);
+                responseHandler.sendFailureMessage(e, null);
             }
         }
     }

File: src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -71,7 +71,7 @@ protected void handleSuccessMessage(String responseBody) {
                 onSuccess((JSONArray)jsonResponse);
             }
         } catch(JSONException e) {
-            onFailure(e);
+            onFailure(e, responseBody);
         }
     }
 

File: src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -92,6 +92,7 @@ public class AsyncHttpClient {
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
     private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
     private static final int DEFAULT_MAX_RETRIES = 5;
+    private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
     private static final String ENCODING_GZIP = "gzip";
 
@@ -117,6 +118,7 @@ public AsyncHttpClient() {
 
         HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
         HttpConnectionParams.setTcpNoDelay(httpParams, true);
+        HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
         HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
         HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));

File: src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -92,6 +92,7 @@ public class AsyncHttpClient {
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
     private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
     private static final int DEFAULT_MAX_RETRIES = 5;
+    private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
     private static final String ENCODING_GZIP = "gzip";
 
@@ -117,6 +118,7 @@ public AsyncHttpClient() {
 
         HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
         HttpConnectionParams.setTcpNoDelay(httpParams, true);
+        HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
         HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
         HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));

File: src/com/loopj/android/http/PersistentCookieStore.java
Patch:
@@ -89,9 +89,6 @@ public void addCookie(Cookie cookie) {
             cookies.remove(name);
         }
 
-        // Save cookie into local store
-        cookies.put(name, cookie);
-
         // Save cookie into persistent store
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         prefsWriter.putString(COOKIE_NAME_STORE, TextUtils.join(",", cookies.keySet()));

File: src/com/loopj/android/http/AsyncHttpRequest.java
Patch:
@@ -55,7 +55,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(e);
+                responseHandler.sendFailureMessage(e, null);
             }
         }
     }

File: src/com/loopj/android/http/JsonHttpResponseHandler.java
Patch:
@@ -71,7 +71,7 @@ protected void handleSuccessMessage(String responseBody) {
                 onSuccess((JSONArray)jsonResponse);
             }
         } catch(JSONException e) {
-            onFailure(e);
+            onFailure(e, responseBody);
         }
     }
 

File: src/com/loopj/android/http/AsyncHttpClient.java
Patch:
@@ -340,7 +340,7 @@ public void put(String url, AsyncHttpResponseHandler responseHandler) {
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        put(null, params, responseHandler);
+        put(null, url, params, responseHandler);
     }
 
     /**
@@ -457,4 +457,4 @@ public long getContentLength() {
             return -1;
         }
     }
-}
\ No newline at end of file
+}

File: src/com/loopj/android/http/RequestParams.java
Patch:
@@ -89,7 +89,7 @@ public void put(String key, String value){
     /**
      * Adds a file to the request.
      * @param key the key name for the new param.
-     * @param filedata the file contents to add.
+     * @param file the file to add.
      */
     public void put(String key, File file) throws FileNotFoundException {
         put(key, new FileInputStream(file), file.getName());

File: examples/TwitterRestClientUsage.java
Patch:
@@ -9,7 +9,7 @@ public void onSuccess(Object response) {
                 JSONArray timeline = (JSONArray)response;
 
                 try {
-                    JSONObject firstEvent = timeline.get(0);
+                    JSONObject firstEvent = (JSONObject)timeline.get(0);
                     String tweetText = firstEvent.getString("text");
 
                     // Do something with the response

File: examples/TwitterRestClientUsage.java
Patch:
@@ -6,7 +6,7 @@
 
 class TwitterRestClientUsage {
     public void getPublicTimeline() {
-        ExampleRestClient.get("statuses/public_timeline.json", null, new JsonHttpResponseHandler() {
+        TwitterRestClient.get("statuses/public_timeline.json", null, new JsonHttpResponseHandler() {
             @Override
             public void onSuccess(Object response) {
                 JSONArray timeline = (JSONArray)response;

