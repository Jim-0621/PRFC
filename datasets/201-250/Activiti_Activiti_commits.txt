File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/DynamicBpmnService.java
Patch:
@@ -18,6 +18,7 @@
 package org.activiti.engine;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
+import org.activiti.engine.repository.ProcessDefinition;
 
 /** Service providing access to the repository of process definitions and deployments.
  *
@@ -27,6 +28,8 @@ public interface DynamicBpmnService {
 
   ObjectNode getProcessDefinitionInfo(String processDefinitionId);
 
+  ObjectNode getProcessDefinitionInfo(ProcessDefinition processDefinition);
+
   void saveProcessDefinitionInfo(String processDefinitionId, ObjectNode infoNode);
 
   ObjectNode changeServiceTaskClassName(String id, String className);

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/CachingAndArtifactsManager.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.Process;
 import org.activiti.engine.ActivitiException;
@@ -61,6 +60,7 @@ public void updateCachingAndArtifacts(ParsedDeployment parsedDeployment) {
 
       // Add to deployment for further usage
       deployment.addDeployedArtifact(processDefinition);
+      deployment.addDeployedArtifact(cacheEntry);
     }
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeploymentSettings.java
Patch:
@@ -27,4 +27,5 @@ public interface DeploymentSettings {
 
   String IS_PROCESS_VALIDATION_ENABLED = "isProcessValidationEnabled";
 
+  String RESOURCE_NAMES = "resourceNames";
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/DefaultDeploymentCache.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -53,7 +52,7 @@ public DefaultDeploymentCache(final int limit) {
           protected boolean removeEldestEntry(Map.Entry<String, T> eldest) {
             boolean removeEldest = size() > limit;
             if (removeEldest && logger.isTraceEnabled()) {
-              logger.trace("Cache limit is reached, {} will be evicted", eldest.getKey());
+              logger.trace("Cache limit {} is reached, {} will be evicted", limit, eldest.getKey());
             }
             return removeEldest;
           }

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/CachingProcessExtensionService.java
Patch:
@@ -17,8 +17,8 @@
 package org.activiti.spring.process;
 
 import org.activiti.spring.process.model.Extension;
-import org.springframework.cache.annotation.Cacheable;
 
+@Deprecated
 public class CachingProcessExtensionService {
 
     private final ProcessExtensionService processExtensionService;
@@ -27,7 +27,6 @@ public CachingProcessExtensionService(ProcessExtensionService processExtensionSe
         this.processExtensionService = processExtensionService;
     }
 
-    @Cacheable("extensionsById")
     public Extension getExtensionsForId(String processDefinitionId) {
         return processExtensionService.getExtensionsForId(processDefinitionId);
     }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/Problems.java
Patch:
@@ -93,6 +93,8 @@ public interface Problems {
   String FLOW_ELEMENT_ASYNC_NOT_AVAILABLE = "FLOW_ELEMENT_ASYNC_NOT_AVAILABLE";
   String EVENT_TIMER_ASYNC_NOT_AVAILABLE = "EVENT_TIMER_ASYNC_NOT_AVAILABLE";
   String SIGNAL_ASYNC_NOT_AVAILABLE = "SIGNAL_ASYNC_NOT_AVAILABLE";
-  String LINK_EVENT_DEFINITION_MISSING_TARGET = "LINK_EVENT_DEFINITION_MISSING_TARGET";
+  String  LINK_EVENT_DEFINITION_MISSING_TARGET = "LINK_EVENT_DEFINITION_MISSING_TARGET";
+  String LINK_EVENT_DEFINITION_MISSING_TARGET_EMPTY_NAME  = "LINK_EVENT_DEFINITION_MISSING_TARGET_EMPTY_NAME";
   String LINK_EVENT_DEFINITION_MISSING_SOURCE = "LINK_EVENT_DEFINITION_MISSING_SOURCE";
+  String LINK_EVENT_DEFINITION_MISSING_SOURCE_EMPTY_NAME = "LINK_EVENT_DEFINITION_MISSING_SOURCE_EMPTY_NAME";
 }

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/bpmn/converter/child/LinkEventDefinitionParserTest.java
Patch:
@@ -24,7 +24,6 @@
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamReader;
 import java.io.InputStream;
-import java.util.Collections;
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core/activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -38,6 +38,7 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.cfg.ProcessEngineConfigurator;
 import org.activiti.engine.impl.bpmn.behavior.VariablesPropagator;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.event.EventSubscriptionPayloadMappingProvider;
 import org.activiti.engine.impl.persistence.StrongUuidGenerator;
 import org.activiti.runtime.api.event.impl.StartMessageSubscriptionConverter;
@@ -85,8 +86,8 @@ public ProcessEngineAutoConfiguration(UserGroupManager userGroupManager) {
     }
 
     @Bean
-    public ShutdownListener shutdownListener() {
-        return new ShutdownListener();
+    public ShutdownListener shutdownListener(ProcessEngineConfigurationImpl processEngineConfiguration) {
+        return new ShutdownListener(processEngineConfiguration);
     }
 
     @Bean

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/ActivitiEventListenerValidator.java
Patch:
@@ -39,11 +39,11 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
 
         if (eventListener.getImplementationType() != null && eventListener.getImplementationType().equals(ImplementationType.IMPLEMENTATION_TYPE_INVALID_THROW_EVENT)) {
 
-          addError(errors, Problems.EVENT_LISTENER_INVALID_THROW_EVENT_TYPE, process, eventListener, "Invalid or unsupported throw event type on event listener");
+          addError(errors, Problems.EVENT_LISTENER_INVALID_THROW_EVENT_TYPE, process, eventListener);
 
         } else if (eventListener.getImplementationType() == null || eventListener.getImplementationType().length() == 0) {
 
-          addError(errors, Problems.EVENT_LISTENER_IMPLEMENTATION_MISSING, process, eventListener, "Element 'class', 'delegateExpression' or 'throwEvent' is mandatory on eventListener");
+          addError(errors, Problems.EVENT_LISTENER_IMPLEMENTATION_MISSING, process, eventListener);
 
         } else if (eventListener.getImplementationType() != null) {
 
@@ -53,7 +53,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
               && !ImplementationType.IMPLEMENTATION_TYPE_THROW_GLOBAL_SIGNAL_EVENT.equals(eventListener.getImplementationType())
               && !ImplementationType.IMPLEMENTATION_TYPE_THROW_MESSAGE_EVENT.equals(eventListener.getImplementationType())
               && !ImplementationType.IMPLEMENTATION_TYPE_THROW_ERROR_EVENT.equals(eventListener.getImplementationType())) {
-            addError(errors, Problems.EVENT_LISTENER_INVALID_IMPLEMENTATION, process, eventListener, "Unsupported implementation type for event listener");
+            addError(errors, Problems.EVENT_LISTENER_INVALID_IMPLEMENTATION, process, eventListener);
           }
 
         }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/AssociationValidator.java
Patch:
@@ -60,10 +60,10 @@ public void validate(BpmnModel bpmnModel, List<ValidationError> errors) {
 
   protected void validate(Process process, Association association, List<ValidationError> errors) {
     if (StringUtils.isEmpty(association.getSourceRef())) {
-      addError(errors, Problems.ASSOCIATION_INVALID_SOURCE_REFERENCE, process, association, "association element missing attribute 'sourceRef'");
+      addError(errors, Problems.ASSOCIATION_INVALID_SOURCE_REFERENCE, process, association);
     }
     if (StringUtils.isEmpty(association.getTargetRef())) {
-      addError(errors, Problems.ASSOCIATION_INVALID_TARGET_REFERENCE, process, association, "association element missing attribute 'targetRef'");
+      addError(errors, Problems.ASSOCIATION_INVALID_TARGET_REFERENCE, process, association);
     }
   }
 

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/DataObjectValidator.java
Patch:
@@ -47,7 +47,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
     // Validate
     for (ValuedDataObject dataObject : allDataObjects) {
       if (StringUtils.isEmpty(dataObject.getName())) {
-        addError(errors, Problems.DATA_OBJECT_MISSING_NAME, process, dataObject, "Name is mandatory for a data object");
+        addError(errors, Problems.DATA_OBJECT_MISSING_NAME, process, dataObject);
       }
     }
 

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/EndEventValidator.java
Patch:
@@ -47,7 +47,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
 
           FlowElementsContainer parent = process.findParent(endEvent);
           if (!(parent instanceof Transaction)) {
-            addError(errors, Problems.END_EVENT_CANCEL_ONLY_INSIDE_TRANSACTION, process, endEvent, "end event with cancelEventDefinition only supported inside transaction subprocess");
+            addError(errors, Problems.END_EVENT_CANCEL_ONLY_INSIDE_TRANSACTION, process, endEvent);
           }
 
         }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/EventGatewayValidator.java
Patch:
@@ -40,7 +40,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
       for (SequenceFlow sequenceFlow : eventGateway.getOutgoingFlows()) {
         FlowElement flowElement = process.getFlowElement(sequenceFlow.getTargetRef(), true);
         if (flowElement != null && !(flowElement instanceof IntermediateCatchEvent)) {
-          addError(errors, Problems.EVENT_GATEWAY_ONLY_CONNECTED_TO_INTERMEDIATE_EVENTS, process, eventGateway, "Event based gateway can only be connected to elements of type intermediateCatchEvent");
+          addError(errors, Problems.EVENT_GATEWAY_ONLY_CONNECTED_TO_INTERMEDIATE_EVENTS, process, eventGateway);
         }
       }
     }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/EventSubprocessValidator.java
Patch:
@@ -44,7 +44,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
         if (startEvent.getEventDefinitions() != null && !startEvent.getEventDefinitions().isEmpty()) {
           EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);
           if (!(eventDefinition instanceof org.activiti.bpmn.model.ErrorEventDefinition) && !(eventDefinition instanceof MessageEventDefinition) && !(eventDefinition instanceof SignalEventDefinition)) {
-            addError(errors, Problems.EVENT_SUBPROCESS_INVALID_START_EVENT_DEFINITION, process, eventSubprocess, "start event of event subprocess must be of type 'error', 'message' or 'signal'");
+            addError(errors, Problems.EVENT_SUBPROCESS_INVALID_START_EVENT_DEFINITION, process, eventSubprocess);
           }
         }
       }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/ExecutionListenerValidator.java
Patch:
@@ -47,10 +47,10 @@ protected void validateListeners(Process process, BaseElement baseElement, List<
     if (listeners != null) {
       for (ActivitiListener listener : listeners) {
         if (listener.getImplementation() == null || listener.getImplementationType() == null) {
-          addError(errors, Problems.EXECUTION_LISTENER_IMPLEMENTATION_MISSING, process, baseElement, "Element 'class' or 'expression' is mandatory on executionListener");
+          addError(errors, Problems.EXECUTION_LISTENER_IMPLEMENTATION_MISSING, process, baseElement);
         }
         if (listener.getOnTransaction() != null && ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equals(listener.getImplementationType())) {
-          addError(errors, Problems.EXECUTION_LISTENER_INVALID_IMPLEMENTATION_TYPE, process, baseElement, "Expression cannot be used when using 'onTransaction'");
+          addError(errors, Problems.EXECUTION_LISTENER_INVALID_IMPLEMENTATION_TYPE, process, baseElement);
         }
       }
     }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/IntermediateCatchEventValidator.java
Patch:
@@ -44,10 +44,10 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
       }
 
       if (eventDefinition == null) {
-        addError(errors, Problems.INTERMEDIATE_CATCH_EVENT_NO_EVENTDEFINITION, process, intermediateCatchEvent, "No event definition for intermediate catch event ");
+        addError(errors, Problems.INTERMEDIATE_CATCH_EVENT_NO_EVENTDEFINITION, process, intermediateCatchEvent);
       } else {
         if (!(eventDefinition instanceof TimerEventDefinition) && !(eventDefinition instanceof SignalEventDefinition) && !(eventDefinition instanceof MessageEventDefinition)) {
-          addError(errors, Problems.INTERMEDIATE_CATCH_EVENT_INVALID_EVENTDEFINITION, process, intermediateCatchEvent, "Unsupported intermediate catch event type");
+          addError(errors, Problems.INTERMEDIATE_CATCH_EVENT_INVALID_EVENTDEFINITION, process, intermediateCatchEvent);
         }
       }
     }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/IntermediateThrowEventValidator.java
Patch:
@@ -47,7 +47,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
           && !(eventDefinition instanceof SignalEventDefinition)
           && !(eventDefinition instanceof CompensateEventDefinition)
           && !(eventDefinition instanceof MessageEventDefinition)) {
-        addError(errors, Problems.THROW_EVENT_INVALID_EVENTDEFINITION, process, throwEvent, "Unsupported intermediate throw event type");
+        addError(errors, Problems.THROW_EVENT_INVALID_EVENTDEFINITION, process, throwEvent);
       }
     }
   }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/MessageValidator.java
Patch:
@@ -38,7 +38,7 @@ public void validate(BpmnModel bpmnModel, List<ValidationError> errors) {
         // Item ref
         if (StringUtils.isNotEmpty(message.getItemRef())) {
           if (!bpmnModel.getItemDefinitions().containsKey(message.getItemRef())) {
-            addError(errors, Problems.MESSAGE_INVALID_ITEM_REF, null, message, "Item reference is invalid: not found");
+            addError(errors, Problems.MESSAGE_INVALID_ITEM_REF, null, message);
           }
         }
 

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/OperationValidator.java
Patch:
@@ -37,7 +37,7 @@ public void validate(BpmnModel bpmnModel, List<ValidationError> errors) {
         if (bpmnInterface.getOperations() != null) {
           for (Operation operation : bpmnInterface.getOperations()) {
             if (bpmnModel.getMessage(operation.getInMessageRef()) == null) {
-              addError(errors, Problems.OPERATION_INVALID_IN_MESSAGE_REFERENCE, null, operation, "Invalid inMessageRef for operation");
+              addError(errors, Problems.OPERATION_INVALID_IN_MESSAGE_REFERENCE, null, operation);
             }
           }
         }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/ScriptTaskValidator.java
Patch:
@@ -36,7 +36,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
     List<ScriptTask> scriptTasks = process.findFlowElementsOfType(ScriptTask.class);
     for (ScriptTask scriptTask : scriptTasks) {
       if (StringUtils.isEmpty(scriptTask.getScript())) {
-        addError(errors, Problems.SCRIPT_TASK_MISSING_SCRIPT, process, scriptTask, "No script provided for script task");
+        addError(errors, Problems.SCRIPT_TASK_MISSING_SCRIPT, process, scriptTask);
       }
     }
   }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/SendTaskValidator.java
Patch:
@@ -40,14 +40,14 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
 
       // Verify implementation
       if (StringUtils.isEmpty(sendTask.getType()) && !ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(sendTask.getImplementationType())) {
-        addError(errors, Problems.SEND_TASK_INVALID_IMPLEMENTATION, process, sendTask, "One of the attributes 'type' or 'operation' is mandatory on sendTask");
+        addError(errors, Problems.SEND_TASK_INVALID_IMPLEMENTATION, process, sendTask);
       }
 
       // Verify type
       if (StringUtils.isNotEmpty(sendTask.getType())) {
 
         if (!sendTask.getType().equalsIgnoreCase("mail") && !sendTask.getType().equalsIgnoreCase("mule") && !sendTask.getType().equalsIgnoreCase("camel")) {
-          addError(errors, Problems.SEND_TASK_INVALID_TYPE, process, sendTask, "Invalid or unsupported type for send task");
+          addError(errors, Problems.SEND_TASK_INVALID_TYPE, process, sendTask);
         }
 
         if (sendTask.getType().equalsIgnoreCase("mail")) {
@@ -78,7 +78,7 @@ protected void verifyWebservice(BpmnModel bpmnModel, Process process, SendTask s
       }
 
       if (!operationFound) {
-        addError(errors, Problems.SEND_TASK_WEBSERVICE_INVALID_OPERATION_REF, process, sendTask, "Invalid operation reference for send task");
+        addError(errors, Problems.SEND_TASK_WEBSERVICE_INVALID_OPERATION_REF, process, sendTask);
       }
 
     }

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/SubprocessValidator.java
Patch:
@@ -42,12 +42,12 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
         // Verify start events
         List<StartEvent> startEvents = process.findFlowElementsInSubProcessOfType(subProcess, StartEvent.class, false);
         if (startEvents.size() > 1) {
-          addError(errors, Problems.SUBPROCESS_MULTIPLE_START_EVENTS, process, subProcess, "Multiple start events not supported for subprocess");
+          addError(errors, Problems.SUBPROCESS_MULTIPLE_START_EVENTS, process, subProcess);
         }
 
         for (StartEvent startEvent : startEvents) {
           if (!startEvent.getEventDefinitions().isEmpty()) {
-            addError(errors, Problems.SUBPROCESS_START_EVENT_EVENT_DEFINITION_NOT_ALLOWED, process, startEvent, "event definitions only allowed on start event if subprocess is an event subprocess");
+            addError(errors, Problems.SUBPROCESS_START_EVENT_EVENT_DEFINITION_NOT_ALLOWED, process, startEvent);
           }
         }
 

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/UserTaskValidator.java
Patch:
@@ -38,7 +38,7 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
       if (userTask.getTaskListeners() != null) {
         for (ActivitiListener listener : userTask.getTaskListeners()) {
           if (listener.getImplementation() == null || listener.getImplementationType() == null) {
-            addError(errors, Problems.USER_TASK_LISTENER_IMPLEMENTATION_MISSING, process, userTask, "Element 'class' or 'expression' is mandatory on executionListener");
+            addError(errors, Problems.USER_TASK_LISTENER_IMPLEMENTATION_MISSING, process, userTask);
           }
         }
       }

File: activiti-core/activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/process/validation/AsyncPropertyValidator.java
Patch:
@@ -44,15 +44,15 @@ protected void validateFlowElementsInContainer(FlowElementsContainer container,
             }
 
             if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {
-                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, "Async property is not available when asyncExecutor is disabled.");
+                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement);
             }
 
             if ((flowElement instanceof Event)) {
                 ((Event) flowElement).getEventDefinitions().stream().forEach(event -> {
                     if (event instanceof TimerEventDefinition) {
-                        addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, process, flowElement, "Timer event is not available when asyncExecutor is disabled.");
+                        addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, process, flowElement);
                     } else if ((event instanceof SignalEventDefinition) && ((SignalEventDefinition) event).isAsync() ) {
-                        addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, flowElement, "Async property is not available when asyncExecutor is disabled.");
+                        addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, flowElement);
                     }
                 });
             }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java
Patch:
@@ -154,7 +154,7 @@ protected void logException() {
        else if(ApplicationStatusHolder.isShutdownInProgress()) {
             //reduce log level, because this may have been caused by the application termination
             log.warn("Error while closing command context", exception);
-        } else if(exception instanceof BpmnError){
+        } else if(exception instanceof BpmnError || exception instanceof ActivitiException) {
             log.warn("Error while closing command context", exception);
         }
         else {

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/spring/process/ProcessVariablesInitiator.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.bpmn.behavior.MappingExecutionContext;
@@ -113,7 +114,7 @@ private Map<String, Object> processVariables(Map<String, Object> variables, Map<
         variableDefinitionMap.forEach((k, v) -> {
             if (!newVarsMap.containsKey(v.getName()) && v.getValue() != null) {
                 Object value = createDefaultVariableValue(v);
-                if (expressionResolver.containsExpression(value)) {
+                if (expressionResolver.containsExpression(value) || value instanceof ObjectNode) {
                     varsWithExpressions.put(v.getName(), value);
                 } else {
                     newVarsMap.put(v.getName(), value);

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/VariableParsingService.java
Patch:
@@ -36,7 +36,7 @@ public VariableParsingService(Map<String, VariableType> variableTypeMap) {
 
     private Map<String, VariableType> variableTypeMap;
 
-    public Object parse(VariableDefinition variableDefinition) throws ActivitiException{
+    public Object parse(VariableDefinition variableDefinition) throws ActivitiException {
 
 
         if(variableDefinition.getType()!=null) {

File: activiti-examples/activiti-api-web-example/src/main/java/org/activiti/examples/DemoApplicationConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
 import org.springframework.security.core.userdetails.User;
 import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.provisioning.InMemoryUserDetailsManager;
@@ -67,7 +68,7 @@ public UserDetailsService userDetailsService() {
     @Bean
     public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
         return http
-            .csrf().disable()
+            .csrf(AbstractHttpConfigurer::disable)
             .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())
             .httpBasic(withDefaults())
             .build();

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -60,7 +60,7 @@ public static void propagateError(String errorRef, DelegateExecution execution)
             isCatchExecutedForProcess = executeCatch(eventMap, execution, errorRef);
         }
 
-        if (isCallActivity(execution)) {
+        if (!isCatchExecutedForProcess && isCallActivity(execution)) {
             isCatchExecutedForCallActivity = findCatchingEventsAndExecuteCatchForCallActivity(errorRef, execution);
         }
     } finally {

File: activiti-core/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -57,7 +57,7 @@ public void testGetTableMetaData() {
     assertThat(assigneeIndex).isGreaterThanOrEqualTo(0);
     assertThat(createTimeIndex).isGreaterThanOrEqualTo(0);
 
-    assertThat(tableMetaData.getColumnTypes().get(assigneeIndex)).isIn("VARCHAR", "NVARCHAR2", "nvarchar", "NVARCHAR");
+    assertThat(tableMetaData.getColumnTypes().get(assigneeIndex)).isIn("CHARACTER VARYING");
     assertThat(tableMetaData.getColumnTypes().get(createTimeIndex)).isIn("TIMESTAMP", "TIMESTAMP(6)", "datetime", "DATETIME");
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -43,7 +43,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "8.0.0"; // Note the extra -x at the end. To cater for snapshot releases with different database changes
+  public static String VERSION = "8.1.0"; // Note the extra -x at the end. To cater for snapshot releases with different database changes
 
   /**
    * The name as specified in 'process-engine-name' in the activiti.cfg.xml configuration file. The default name for a process engine is 'default

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -37,7 +37,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiOptimisticLockingException;
 import org.activiti.engine.ActivitiWrongDbException;
@@ -146,6 +145,7 @@ public class DbSqlSession implements Session {
         ACTIVITI_VERSIONS.add(new ActivitiVersion(LAST_V7_VERSION));
 
         /* Current */
+        ACTIVITI_VERSIONS.add(new ActivitiVersion("8.0.0"));
         ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));
     }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/history/DefaultHistoryManager.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Date;
 import java.util.List;
-
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.FlowNode;
 import org.activiti.bpmn.model.SequenceFlow;
@@ -820,6 +819,7 @@ public void recordIdentityLinkCreated(IdentityLinkEntity identityLink) {
       historicIdentityLinkEntity.setTaskId(identityLink.getTaskId());
       historicIdentityLinkEntity.setType(identityLink.getType());
       historicIdentityLinkEntity.setUserId(identityLink.getUserId());
+      historicIdentityLinkEntity.setDetails(identityLink.getDetails());
       getHistoricIdentityLinkEntityManager().insert(historicIdentityLinkEntity, false);
     }
   }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricIdentityLinkEntity.java
Patch:
@@ -39,4 +39,5 @@ public interface HistoricIdentityLinkEntity extends HistoricIdentityLink, Entity
 
   void setProcessInstanceId(String processInstanceId);
 
+  void setDetails(byte[] details);
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -57,4 +57,5 @@ public interface IdentityLinkEntity extends IdentityLink, Entity {
 
   String getProcessDefinitionId();
 
+  void setDetails(byte[] details);
 }

File: activiti-core-common/activiti-juel-jakarta/src/test/java/org/activiti/core/el/juel/tree/BindingsTest.java
Patch:
@@ -58,7 +58,7 @@ protected void setUp() throws Exception {
             "v",
             new ObjectValueExpression(
                 TypeConverter.DEFAULT,
-                new Long(0),
+               Long.valueOf(0),
                 long.class
             )
         );

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/IntegerType.java
Patch:
@@ -33,7 +33,7 @@ public boolean isCachable() {
 
   public Object getValue(ValueFields valueFields) {
     if (valueFields.getLongValue() != null) {
-      return new Integer(valueFields.getLongValue().intValue());
+      return Integer.valueOf(valueFields.getLongValue().intValue());
     }
     return null;
   }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityMappings.java
Patch:
@@ -151,7 +151,7 @@ public Object createId(EntityMetaData metaData, String string) {
     } else if (type == Double.class || type == double.class) {
       return Double.parseDouble(string);
     } else if (type == Character.class || type == char.class) {
-      return new Character(string.charAt(0));
+      return Character.valueOf(string.charAt(0));
     } else if (type == java.util.Date.class) {
       return new java.util.Date(Long.parseLong(string));
     } else if (type == java.sql.Date.class) {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/ShortType.java
Patch:
@@ -33,7 +33,7 @@ public boolean isCachable() {
 
   public Object getValue(ValueFields valueFields) {
     if (valueFields.getLongValue() != null) {
-      return new Short(valueFields.getLongValue().shortValue());
+      return Short.valueOf(valueFields.getLongValue().shortValue());
     }
     return null;
   }

File: activiti-core-common/activiti-common-util/src/main/java/org/activiti/common/util/conf/ActivitiCoreCommonUtilAutoConfiguration.java
Patch:
@@ -17,11 +17,11 @@
 
 import org.activiti.common.util.DateFormatterProvider;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 public class ActivitiCoreCommonUtilAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/conf/AssertionsAPIAutoConfiguration.java
Patch:
@@ -20,10 +20,10 @@
 import org.activiti.test.operations.ProcessOperations;
 import org.activiti.test.operations.TaskOperations;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 public class AssertionsAPIAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-core-test/activiti-core-test-local-runtime/src/main/java/org/activiti/test/config/ActivitiAssertionsAutoConfiguration.java
Patch:
@@ -55,10 +55,10 @@
 import org.activiti.test.TaskSource;
 import org.activiti.test.operations.ProcessRuntimeOperations;
 import org.activiti.test.operations.TaskRuntimeOperations;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 public class ActivitiAssertionsAutoConfiguration {
 
     private final LocalEventSource localEventProvider = new LocalEventSource();

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ActivitiFunctionMapper.java
Patch:
@@ -15,16 +15,16 @@
  */
 package org.activiti.core.el;
 
+import jakarta.el.FunctionMapper;
 import java.lang.reflect.Method;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import javax.el.FunctionMapper;
 
 /**
  * Default implementation of a {@link FunctionMapper}.
  * <p>
- * A non-null implementation is required by the javax.el.* classes, hence the reason for this pretty useless class.
+ * A non-null implementation is required by the jakarta.el.* classes, hence the reason for this pretty useless class.
  */
 public class ActivitiFunctionMapper extends FunctionMapper {
 

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ActivitiVariablesMapper.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import jakarta.el.ValueExpression;
+import jakarta.el.VariableMapper;
 
 public class ActivitiVariablesMapper extends VariableMapper {
 

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ELResolverDecorator.java
Patch:
@@ -17,8 +17,8 @@
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 
 /**
  * Generic Decorator for {@link ELResolver} implementations.

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ELResolverReflectionBlockerDecorator.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 
 /**
  * {@link ELResolverDecorator} that blocks invocations using reflection or native calls.

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ReadOnlyMapELResolver.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.Iterator;
 import java.util.Map;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 
 /**
  * An {@link ELResolver} that exposed object values in the map, under the name of the entry's key. The values in the map are only returned when requested property has no 'base', meaning it's a

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/conf/ApplicationAutoConfiguration.java
Patch:
@@ -29,11 +29,11 @@
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.support.ResourcePatternResolver;
 
-@Configuration
+@AutoConfiguration
 public class ApplicationAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-spring-connector/src/main/java/org/activiti/core/common/spring/connector/autoconfigure/ConnectorAutoConfiguration.java
Patch:
@@ -21,16 +21,16 @@
 import org.activiti.core.common.model.connector.ConnectorDefinition;
 import org.activiti.core.common.spring.connector.ConnectorDefinitionService;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.support.ResourcePatternResolver;
 
 import java.io.IOException;
 import java.util.List;
 
-@Configuration
+@AutoConfiguration
 public class ConnectorAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-spring-identity/src/main/java/org/activiti/core/common/spring/identity/config/ActivitiSpringIdentityAutoConfiguration.java
Patch:
@@ -17,12 +17,12 @@
 
 import org.activiti.api.runtime.shared.identity.UserGroupManager;
 import org.activiti.core.common.spring.identity.ActivitiUserGroupManagerImpl;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.security.core.userdetails.UserDetailsService;
 
-@Configuration
+@AutoConfiguration
 public class ActivitiSpringIdentityAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-spring-project/src/main/java/org/activiti/core/common/spring/project/conf/ApplicationUpgradeContextAutoConfiguration.java
Patch:
@@ -18,13 +18,13 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.activiti.core.common.spring.project.ApplicationUpgradeContextService;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.support.ResourcePatternResolver;
 
-@Configuration
+@AutoConfiguration
 public class ApplicationUpgradeContextAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-spring-resource-finder/src/main/java/org/activiti/spring/resources/conf/ResourceFinderAutoConfiguration.java
Patch:
@@ -16,12 +16,12 @@
 package org.activiti.spring.resources.conf;
 
 import org.activiti.spring.resources.ResourceFinder;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.support.ResourcePatternResolver;
 
-@Configuration
+@AutoConfiguration
 public class ResourceFinderAutoConfiguration {
 
     @Bean

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/config/ActivitiSpringSecurityPoliciesAutoConfiguration.java
Patch:
@@ -24,12 +24,12 @@
 import org.activiti.core.common.spring.security.policies.SecurityPoliciesProcessInstanceRestrictionApplier;
 import org.activiti.core.common.spring.security.policies.SecurityPoliciesRestrictionApplier;
 import org.activiti.core.common.spring.security.policies.conf.SecurityPoliciesProperties;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 @EnableConfigurationProperties(SecurityPoliciesProperties.class)
 public class ActivitiSpringSecurityPoliciesAutoConfiguration {
 

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/config/ActivitiSpringSecurityAutoConfiguration.java
Patch:
@@ -31,11 +31,11 @@
 import org.activiti.core.common.spring.security.SimpleGrantedAuthoritiesGroupsMapper;
 import org.activiti.core.common.spring.security.SimpleGrantedAuthoritiesResolver;
 import org.activiti.core.common.spring.security.SimpleGrantedAuthoritiesRolesMapper;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 public class ActivitiSpringSecurityAutoConfiguration {
 
     @Bean

File: activiti-core/activiti-api-impl/activiti-api-model-shared-impl/src/main/java/org/activiti/api/runtime/conf/impl/CommonModelAutoConfiguration.java
Patch:
@@ -28,11 +28,11 @@
 import org.activiti.api.model.shared.Result;
 import org.activiti.api.model.shared.model.VariableInstance;
 import org.activiti.api.runtime.model.impl.VariableInstanceImpl;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.PropertySource;
 
-@Configuration
+@AutoConfiguration
 @PropertySource("classpath:conf/rest-jackson-configuration.properties") //load default jackson configuration
 public class CommonModelAutoConfiguration {
 

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/conf/impl/ProcessModelAutoConfiguration.java
Patch:
@@ -87,11 +87,11 @@
 import org.activiti.api.runtime.model.impl.StringToSetConverter;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
 import org.springframework.boot.convert.ApplicationConversionService;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
@@ -109,8 +109,8 @@
 import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 
+@AutoConfiguration
 @AutoConfigureBefore({JacksonAutoConfiguration.class})
-@Configuration
 public class ProcessModelAutoConfiguration {
 
     @Autowired(required = false)

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ConnectorsAutoConfiguration.java
Patch:
@@ -28,14 +28,14 @@
 import org.activiti.runtime.api.impl.ExpressionResolver;
 import org.activiti.runtime.api.impl.ExtensionsVariablesMappingProvider;
 import org.activiti.spring.process.ProcessExtensionService;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
 import java.util.List;
 
-@Configuration
+@AutoConfiguration
 public class ConnectorsAutoConfiguration {
 
     @Bean

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ProcessRuntimeAutoConfiguration.java
Patch:
@@ -143,18 +143,18 @@
 import org.activiti.spring.process.variable.VariableValidationService;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
 
 import java.util.List;
 
 import static java.util.Collections.emptyList;
 
-@Configuration
+@AutoConfiguration
 @AutoConfigureAfter(CommonRuntimeAutoConfiguration.class)
 public class ProcessRuntimeAutoConfiguration {
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsConfiguratorAutoConfiguration.java
Patch:
@@ -18,9 +18,9 @@
 import org.activiti.engine.cfg.AbstractProcessEngineConfigurator;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.spring.process.ProcessVariablesInitiator;
-import org.springframework.context.annotation.Configuration;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 
-@Configuration
+@AutoConfiguration
 public class ProcessExtensionsConfiguratorAutoConfiguration extends AbstractProcessEngineConfigurator {
 
     private ProcessVariablesInitiator processVariablesInitiator;

File: activiti-core/activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/conf/CommonRuntimeAutoConfiguration.java
Patch:
@@ -33,10 +33,10 @@
 import org.activiti.runtime.api.model.impl.APIVariableInstanceConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 public class CommonRuntimeAutoConfiguration {
 
     @Bean

File: activiti-core/activiti-api-impl/activiti-api-task-model-impl/src/main/java/org/activiti/api/task/conf/impl/TaskModelAutoConfiguration.java
Patch:
@@ -39,13 +39,13 @@
 import org.activiti.api.task.model.payloads.SaveTaskPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskPayload;
 import org.activiti.api.task.model.results.TaskResult;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
+@AutoConfiguration
 @AutoConfigureBefore({JacksonAutoConfiguration.class})
-@Configuration
 public class TaskModelAutoConfiguration {
 
     //this bean will be automatically injected inside boot's ObjectMapper

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/conf/TaskRuntimeAutoConfiguration.java
Patch:
@@ -74,12 +74,12 @@
 import org.activiti.runtime.api.model.impl.APIVariableInstanceConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
 
-@Configuration
+@AutoConfiguration
 @AutoConfigureAfter(CommonRuntimeAutoConfiguration.class)
 public class TaskRuntimeAutoConfiguration {
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/JpaHelper.java
Patch:
@@ -18,8 +18,8 @@
 package org.activiti.engine.impl.cfg;
 
 
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 /**
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/JtaProcessEngineConfiguration.java
Patch:
@@ -16,8 +16,7 @@
 
 package org.activiti.engine.impl.cfg;
 
-import javax.transaction.TransactionManager;
-
+import jakarta.transaction.TransactionManager;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.cfg.jta.JtaTransactionContextFactory;
 import org.activiti.engine.impl.interceptor.CommandInterceptor;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/jta/JtaTransactionContextFactory.java
Patch:
@@ -17,8 +17,7 @@
 
 package org.activiti.engine.impl.cfg.jta;
 
-import javax.transaction.TransactionManager;
-
+import jakarta.transaction.TransactionManager;
 import org.activiti.engine.impl.cfg.TransactionContext;
 import org.activiti.engine.impl.cfg.TransactionContextFactory;
 import org.activiti.engine.impl.interceptor.CommandContext;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/delegate/invocation/ExpressionGetInvocation.java
Patch:
@@ -16,8 +16,8 @@
 
 package org.activiti.engine.impl.delegate.invocation;
 
-import javax.el.ELContext;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ValueExpression;
 
 /**
  * Class responsible for handling Expression.getValue invocations

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/delegate/invocation/ExpressionInvocation.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.activiti.engine.impl.delegate.invocation;
 
-import javax.el.ValueExpression;
+import jakarta.el.ValueExpression;
 
 /**
  * Baseclass responsible for handling invocations of Expressions

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/delegate/invocation/ExpressionSetInvocation.java
Patch:
@@ -16,8 +16,8 @@
 
 package org.activiti.engine.impl.delegate.invocation;
 
-import javax.el.ELContext;
-import javax.el.ValueExpression;
+import jakarta.el.ELContext;
+import jakarta.el.ValueExpression;
 
 /**
  * Class responsible for handling Expression.setValue() invocations.

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/el/CustomMapperJsonNodeELResolver.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.activiti.engine.impl.el;
 
-import javax.el.CompositeELResolver;
-import javax.el.ELResolver;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import jakarta.el.CompositeELResolver;
+import jakarta.el.ELResolver;
 import org.activiti.core.el.JsonNodeELResolver;
 import org.activiti.engine.impl.context.Context;
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.activiti.engine.impl.el;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 import java.beans.FeatureDescriptor;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
-import javax.el.ELContext;
-import javax.el.ELResolver;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.el.variable.AuthenticatedUserELResolver;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -19,6 +19,7 @@
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.unmodifiableMap;
 
+import jakarta.el.ELContext;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -27,9 +28,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
-import javax.el.ELContext;
-
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.context.Context;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/EntityManagerSession.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.activiti.engine.impl.variable;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.api.internal.Internal;
 import org.activiti.engine.impl.interceptor.Session;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/EntityManagerSessionFactory.java
Patch:
@@ -17,8 +17,7 @@
 
 package org.activiti.engine.impl.variable;
 
-import javax.persistence.EntityManagerFactory;
-
+import jakarta.persistence.EntityManagerFactory;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.Session;
@@ -38,7 +37,7 @@ public EntityManagerSessionFactory(Object entityManagerFactory, boolean handleTr
       throw new ActivitiIllegalArgumentException("entityManagerFactory is null");
     }
     if (!(entityManagerFactory instanceof EntityManagerFactory)) {
-      throw new ActivitiIllegalArgumentException("EntityManagerFactory must implement 'javax.persistence.EntityManagerFactory'");
+      throw new ActivitiIllegalArgumentException("EntityManagerFactory must implement 'jakarta.persistence.EntityManagerFactory'");
     }
 
     this.entityManagerFactory = (EntityManagerFactory) entityManagerFactory;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityMappings.java
Patch:
@@ -17,15 +17,13 @@
 
 package org.activiti.engine.impl.variable;
 
+import jakarta.persistence.EntityManager;
 import java.lang.reflect.InvocationTargetException;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
-
-import javax.persistence.EntityManager;
-
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/test/mock/MockElResolver.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.activiti.engine.test.mock;
 
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
-
 public class MockElResolver extends ELResolver {
 
   @Override

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/el/VariableScopeElResolverTest.java
Patch:
@@ -24,9 +24,9 @@
 import static org.mockito.Mockito.verifyNoInteractions;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import jakarta.el.ELContext;
 import java.util.Arrays;
 import java.util.List;
-import javax.el.ELContext;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/mapError/BoundaryErrorMapTest.java
Patch:
@@ -19,11 +19,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
+import jakarta.xml.bind.JAXBException;
 import java.util.HashMap;
 import java.util.Map;
-
-import javax.xml.bind.JAXBException;
-
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.test.Deployment;
 import org.activiti.standalone.testing.helpers.ServiceTaskTestMock;

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/el/ExpressionBeanAccessTest.java
Patch:
@@ -20,8 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
-import javax.el.PropertyNotFoundException;
-
+import jakarta.el.PropertyNotFoundException;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.test.ResourceActivitiTestCase;
 import org.activiti.engine.runtime.ProcessInstance;

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/escapeclause/AbstractEscapeClauseTestCase.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.activiti.engine.impl.test.ResourceActivitiTestCase;
 
-public class AbstractEscapeClauseTestCase extends ResourceActivitiTestCase {
+public abstract class AbstractEscapeClauseTestCase extends ResourceActivitiTestCase {
 
     public AbstractEscapeClauseTestCase() {
         super("org/activiti/standalone/escapeclause/activiti.cfg.xml");

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -22,15 +22,14 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.history.HistoricActivityInstance;

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/BigDecimalIdJPAEntity.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.math.BigDecimal;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/BigIntegerIdJPAEntity.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.math.BigInteger;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/ByteIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/CharIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/CompoundIdJPAEntity.java
Patch:
@@ -19,8 +19,8 @@
 
 import java.io.Serializable;
 
-import javax.persistence.EmbeddedId;
-import javax.persistence.Entity;
+import jakarta.persistence.EmbeddedId;
+import jakarta.persistence.Entity;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/DoubleIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/EmbeddableCompoundId.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.io.Serializable;
 
-import javax.persistence.Embeddable;
+import jakarta.persistence.Embeddable;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/FieldAccessJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
  * Simple JPA entity, id is set on a field.

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/FloatIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/IllegalIdClassJPAEntity.java
Patch:
@@ -19,8 +19,8 @@
 
 import java.util.Calendar;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
  *

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/IntegerIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/JPAVariableTest.java
Patch:
@@ -29,8 +29,8 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ProcessEngine;

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/LongIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/MappedSuperClassFieldAccessJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Id;
-import javax.persistence.MappedSuperclass;
+import jakarta.persistence.Column;
+import jakarta.persistence.Id;
+import jakarta.persistence.MappedSuperclass;
 
 /**
  * Mapped superclass containing an

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/MappedSuperClassPropertyAccessJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Id;
-import javax.persistence.MappedSuperclass;
+import jakarta.persistence.Column;
+import jakarta.persistence.Id;
+import jakarta.persistence.MappedSuperclass;
 
 /**
  * Mapped superclass containing an

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/PropertyAccessJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
  * Simple JPA entity, id is set on a property.

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/SQLDateIdJPAEntity.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.sql.Date;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/ShortIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/StringIdJPAEntity.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/SubclassFieldAccessJPAEntity.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
 
 /**
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/standalone/jpa/SubclassPropertyAccessJPAEntity.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.activiti.standalone.jpa;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
 
 /**
 

File: activiti-core/activiti-spring-app-process/src/main/java/org/activiti/application/conf/ApplicationProcessAutoConfiguration.java
Patch:
@@ -20,10 +20,10 @@
 import org.activiti.application.deployer.ProcessEntryDeployer;
 import org.activiti.application.discovery.ProcessEntryDiscovery;
 import org.activiti.engine.RepositoryService;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 public class ApplicationProcessAutoConfiguration {
 
     @Bean

File: activiti-core/activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/EndpointAutoConfiguration.java
Patch:
@@ -19,15 +19,15 @@
 import org.activiti.engine.ProcessEngine;
 import org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint;
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
 /**
  * The idea behind this module is that Spring Security could
  * talk to the org.activiti.engine.IdentityService
  * as required.
  */
-@Configuration
+@AutoConfiguration
 public class EndpointAutoConfiguration {
 
     @Bean

File: activiti-core/activiti-spring-conformance-tests/activiti-spring-conformance-util/src/main/java/org/activiti/spring/conformance/util/RuntimeTestConfiguration.java
Patch:
@@ -45,6 +45,7 @@
 import org.activiti.spring.conformance.util.security.SecurityUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.test.context.TestConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -57,6 +58,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+@AutoConfiguration
 @TestConfiguration
 public class RuntimeTestConfiguration {
 

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -35,12 +35,12 @@
 import org.activiti.spring.process.variable.types.VariableType;
 import org.activiti.spring.resources.DeploymentResourceLoader;
 import org.springframework.beans.factory.InitializingBean;
+import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.cache.annotation.EnableCaching;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@AutoConfiguration
 @EnableCaching
 public class ProcessExtensionsAutoConfiguration {
 

File: activiti-core/activiti-spring/src/main/java/org/activiti/spring/ApplicationContextElResolver.java
Patch:
@@ -20,8 +20,8 @@
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import jakarta.el.ELContext;
+import jakarta.el.ELResolver;
 
 import org.activiti.engine.ActivitiException;
 import org.springframework.context.ApplicationContext;

File: activiti-core/activiti-spring/src/main/java/org/activiti/spring/SpringEntityManagerSessionFactory.java
Patch:
@@ -24,8 +24,8 @@
 import org.activiti.engine.impl.variable.EntityManagerSessionImpl;
 import org.springframework.orm.jpa.EntityManagerFactoryUtils;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
 
 /**
  * Session Factory for {@link EntityManagerSession}.

File: activiti-core/activiti-spring/src/main/java/org/activiti/spring/SpringExpressionManager.java
Patch:
@@ -18,7 +18,7 @@
 package org.activiti.spring;
 
 import java.util.Map;
-import javax.el.CompositeELResolver;
+import jakarta.el.CompositeELResolver;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.activiti.core.el.ReadOnlyMapELResolver;
 import org.springframework.context.ApplicationContext;

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/jpa/LoanRequest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.activiti.spring.test.jpa;
 
-import javax.persistence.*;
+import jakarta.persistence.*;
 
 /**
 

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/jpa/LoanRequestBean.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.springframework.transaction.annotation.Transactional;
 
-import javax.persistence.EntityManager;
-import javax.persistence.PersistenceContext;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.PersistenceContext;
 
 /**
  * Service bean that handles loan requests.

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ActivityEventsTest.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
-
 import org.activiti.engine.delegate.event.ActivitiActivityCancelledEvent;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
 import org.activiti.engine.delegate.event.ActivitiErrorEvent;
@@ -486,7 +485,7 @@ public void testActivityTimeOutEvent() {
     Calendar tomorrow = Calendar.getInstance();
     tomorrow.add(Calendar.DAY_OF_YEAR, 1);
     processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());
-    waitForJobExecutorToProcessAllJobs(2000, 1000);
+    waitForJobExecutorToProcessAllJobs(5000, 1000);
 
     // Check timeout has been dispatched
     assertThat(listener.getEventsReceived()).hasSize(1);

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -89,6 +89,7 @@ public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper,
         variableTypeMap.put("json", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("file", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("folder", new JsonObjectVariableType(objectMapper));
+        variableTypeMap.put("content", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("date", new DateVariableType(Date.class, dateFormatterProvider));
         variableTypeMap.put("datetime", new DateVariableType(Date.class, dateFormatterProvider));
         variableTypeMap.put("array", new JsonObjectVariableType(objectMapper));

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeploymentHelper.java
Patch:
@@ -165,7 +165,7 @@ public void updateTimersAndEvents(ProcessDefinitionEntity processDefinition,
     timerManager.scheduleTimers(processDefinition, process);
   }
 
-  enum ExpressionType {
+  protected enum ExpressionType {
     USER, GROUP
   }
 

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessCandidateStarterEventIT.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.TestPropertySource;
 
 import java.util.List;
 
@@ -34,7 +33,6 @@
 
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
-@TestPropertySource(properties = "activiti.candidateStarters.enabled=true")
 public class ProcessCandidateStarterEventIT {
 
     @Autowired

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeCompleteTaskTest.java
Patch:
@@ -249,9 +249,10 @@ public void completeProcessTaskAndCheckReturnedTaskAndVariables() {
         assertThat(processRuntime.variables(ProcessPayloadBuilder.variables().withProcessInstance(twoTaskInstance).build()))
                 .extracting(VariableInstance::getName,
                             VariableInstance::getValue)
-                .containsExactly(
+                .containsOnly(
                         tuple("start1", "modagainstart1"),
-                        tuple("start2", "start2"));
+                        tuple("start2", "start2"),
+                        tuple("taskAssignee", "user"));
 
     }
 }

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeSaveTaskTest.java
Patch:
@@ -77,7 +77,7 @@ public void createStandaloneTaskAndSave() {
         // then
         List<VariableInstance> variables = taskRuntime.variables(TaskPayloadBuilder.variables().withTaskId(standAloneTask.getId()).build());
         assertThat(variables).extracting(VariableInstance::getName, VariableInstance::getValue)
-                             .containsExactly(tuple("name", "value"));
+                             .containsOnly(tuple("name", "value"));
     }
 
 
@@ -140,7 +140,7 @@ public void testSaveCompleteReviewOutcomeTasksProcessWithVariables() {
         List<VariableInstance> variables1 = taskRuntime.variables(TaskPayloadBuilder.variables().withTaskId(task2.getId()).build());
 
         assertThat(variables1).extracting(VariableInstance::getName, VariableInstance::getValue)
-                              .containsExactly(tuple("name", "wrong"));
+                              .containsExactly(tuple("name", "wrong"), tuple("taskAssignee", "garth"));
 
         taskRuntime.complete(TaskPayloadBuilder.complete().withTaskId(task2.getId()).withVariable("approved", false).build());
 

File: activiti-core/activiti-api-impl/activiti-api-model-shared-impl/src/main/java/org/activiti/api/runtime/model/impl/VariableInstanceImpl.java
Patch:
@@ -81,7 +81,7 @@ public String toString() {
                 ", type='" + type + '\'' +
                 ", processInstanceId='" + processInstanceId + '\'' +
                 ", taskId='" + taskId + '\'' +
-                ", value='" + value.toString() + '\'' +
+                ", value='" + value + '\'' +
                 '}';
     }
 

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/VariableDefinition.java
Patch:
@@ -31,4 +31,6 @@ public interface VariableDefinition {
 
     String getDisplayName();
 
+    boolean isAnalytics();
+
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ContinueMultiInstanceOperation.java
Patch:
@@ -82,8 +82,7 @@ protected void executeSynchronous(FlowNode flowNode) {
 
       if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
         Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
-            ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, flowNode.getId(), flowNode.getName(), execution.getId(),
-                execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));
+            ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, execution, flowNode));
       }
 
       try {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -61,8 +61,7 @@ public void leave(DelegateExecution execution) {
 
     if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
-          ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED, exclusiveGateway.getId(), exclusiveGateway.getName(), execution.getId(),
-              execution.getProcessInstanceId(), execution.getProcessDefinitionId(), exclusiveGateway));
+          ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED, execution, exclusiveGateway));
     }
 
     SequenceFlow outgoingSequenceFlow = null;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -72,8 +72,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
 
         if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
           commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
-                ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPENSATE, flowElement.getId(), flowElement.getName(),
-                    compensatingExecution.getId(), compensatingExecution.getProcessInstanceId(), compensatingExecution.getProcessDefinitionId(), flowElement));
+                ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPENSATE, compensatingExecution, flowElement));
         }
         compensatingExecution.setCurrentFlowElement(flowElement);
         Context.getAgenda().planContinueProcessInCompensation(compensatingExecution);

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/Problems.java
Patch:
@@ -72,6 +72,7 @@ public interface Problems {
 
   String BPMN_MODEL_TARGET_NAMESPACE_TOO_LONG = "activiti-bpmn-model-target-namespace-too-long";
 
+  String PROCESS_DEFINITION_ID_NOT_UNIQUE = "activiti-process-definition-id-duplicated";
   String PROCESS_DEFINITION_ID_TOO_LONG = "activiti-process-definition-id-too-long";
   String PROCESS_DEFINITION_NAME_TOO_LONG = "activiti-process-definition-name-too-long";
   String PROCESS_DEFINITION_DOCUMENTATION_TOO_LONG = "activiti-process-definition-documentation-too-long";

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -262,7 +262,7 @@ public Page<ProcessInstance> processInstances(Pageable pageable,
         org.activiti.engine.runtime.ProcessInstanceQuery internalQuery = runtimeService.createProcessInstanceQuery();
 
         String currentUserId = securityManager.getAuthenticatedUserId();
-        internalQuery.startedBy(currentUserId);
+        internalQuery.involvedUser(currentUserId);
 
         if (!securityKeysInPayload.getProcessDefinitionKeys().isEmpty()) {
             getProcessInstancesPayload.setProcessDefinitionKeys(securityKeysInPayload.getProcessDefinitionKeys());

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/IndentingXMLStreamWriter.java
Patch:
@@ -51,6 +51,7 @@ public IndentingXMLStreamWriter(XMLStreamWriter writer) {
    *
    * @deprecated Only return the length of the indent string.
    */
+  @Deprecated
   public int getIndentStep() {
     return indentStep.length();
   }
@@ -64,6 +65,7 @@ public int getIndentStep() {
    *
    * @deprecated Should use the version that takes string.
    */
+  @Deprecated
   public void setIndentStep(int indentStep) {
     StringBuilder s = new StringBuilder();
     for (; indentStep > 0; indentStep--)

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractNativeQuery.java
Patch:
@@ -20,20 +20,19 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.query.NativeQuery;
-import org.apache.commons.lang3.ObjectUtils;
 import org.apache.commons.lang3.StringUtils;
 
 /**
  * Abstract superclass for all native query types.
  *
-
  */
 public abstract class AbstractNativeQuery<T extends NativeQuery<?, ?>, U> implements Command<Object>, NativeQuery<T, U>, Serializable {
 
@@ -123,7 +122,7 @@ public Object execute(CommandContext commandContext) {
       parameterMap.put("resultType", "LIST_PAGE");
       parameterMap.put("firstResult", firstResult);
       parameterMap.put("maxResults", maxResults);
-      if (StringUtils.isNotBlank(ObjectUtils.toString(parameterMap.get("orderBy")))) {
+      if (StringUtils.isNotBlank(Objects.toString(parameterMap.get("orderBy")))) {
         parameterMap.put("orderByColumns", "RES." + parameterMap.get("orderBy"));
       } else {
         parameterMap.put("orderByColumns", "RES.ID_ asc");

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DefaultBusinessCalendar.java
Patch:
@@ -81,7 +81,7 @@ protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity)
     }
 
     String quantityText = singleUnitQuantity.substring(0, spaceIndex);
-    Integer quantity = new Integer(quantityText);
+    Integer quantity = Integer.valueOf(quantityText);
 
     String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/util/json/JSONWriter.java
Patch:
@@ -312,7 +312,7 @@ public JSONWriter value(boolean b) throws JSONException {
    *           If the number is not finite.
    */
   public JSONWriter value(double d) throws JSONException {
-    return this.value(new Double(d));
+    return this.value(Double.valueOf(d));
   }
 
   /**

File: activiti-core/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/BoundaryEventValidator.java
Patch:
@@ -73,15 +73,15 @@ protected void executeValidation(BpmnModel bpmnModel, Process process, List<Vali
             addError(errors, Problems.BOUNDARY_EVENT_CANCEL_ONLY_ON_TRANSACTION, process, boundaryEvent, "boundary event with cancelEventDefinition only supported on transaction subprocesses");
           } else {
             if (!cancelBoundaryEventsCounts.containsKey(attachedToFlowElement.getId())) {
-              cancelBoundaryEventsCounts.put(attachedToFlowElement.getId(), new Integer(0));
+              cancelBoundaryEventsCounts.put(attachedToFlowElement.getId(), Integer.valueOf(0));
             }
-            cancelBoundaryEventsCounts.put(attachedToFlowElement.getId(), new Integer(cancelBoundaryEventsCounts.get(attachedToFlowElement.getId()) + 1));
+            cancelBoundaryEventsCounts.put(attachedToFlowElement.getId(), Integer.valueOf(cancelBoundaryEventsCounts.get(attachedToFlowElement.getId()) + 1));
           }
 
         } else if (eventDefinition instanceof CompensateEventDefinition) {
 
           if (!compensateBoundaryEventsCounts.containsKey(boundaryEvent.getAttachedToRefId())) {
-            compensateBoundaryEventsCounts.put(boundaryEvent.getAttachedToRefId(), new Integer(0));
+            compensateBoundaryEventsCounts.put(boundaryEvent.getAttachedToRefId(), Integer.valueOf(0));
           }
           compensateBoundaryEventsCounts.put(boundaryEvent.getAttachedToRefId(), compensateBoundaryEventsCounts.get(boundaryEvent.getAttachedToRefId()) + 1);
 

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessDeployedEventIT.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.annotation.Import;
 
 import java.io.File;
 import java.util.List;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -25,6 +25,7 @@
 import javax.el.ELResolver;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.el.variable.AssigneeUserELResolver;
 import org.activiti.engine.impl.el.variable.AuthenticatedUserELResolver;
 import org.activiti.engine.impl.el.variable.ExecutionElResolver;
 import org.activiti.engine.impl.el.variable.ProcessInitiatorELResolver;
@@ -82,7 +83,8 @@ protected List<VariableScopeItemELResolver> getVariableScopeItemELResolvers() {
                 new TaskElResolver(),
                 new AuthenticatedUserELResolver(),
                 new ProcessInitiatorELResolver(),
-                new VariableElResolver(Context.getProcessEngineConfiguration().getObjectMapper()));
+                new VariableElResolver(Context.getProcessEngineConfiguration().getObjectMapper()),
+                new AssigneeUserELResolver());
         }
         return variableScopeItemELResolvers;
     }

File: activiti-core-common/activiti-spring-application/src/test/java/org/activiti/application/ApplicationDiscoveryTest.java
Patch:
@@ -20,7 +20,9 @@
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.core.io.Resource;
 import org.springframework.core.io.support.ResourcePatternResolver;
 
@@ -29,8 +31,8 @@
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class ApplicationDiscoveryTest {
 
     private ApplicationDiscovery applicationDiscovery;
@@ -40,7 +42,6 @@ public class ApplicationDiscoveryTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         applicationDiscovery = new ApplicationDiscovery(resourceLoader, "classpath:/applications/");
     }
 

File: activiti-core-common/activiti-spring-application/src/test/java/org/activiti/application/deployer/ApplicationDeployerTest.java
Patch:
@@ -19,14 +19,16 @@
 import org.activiti.application.ApplicationService;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import static java.util.Arrays.asList;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class ApplicationDeployerTest {
 
     private ApplicationDeployer deployer;
@@ -42,7 +44,6 @@ public class ApplicationDeployerTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         deployer = new ApplicationDeployer(applicationLoader,
                                            asList(firstDeployer, secondDeployer));
     }

File: activiti-core-common/activiti-spring-connector/src/test/java/org/activiti/core/common/spring/connector/ConnectorDefinitionServiceTest.java
Patch:
@@ -19,15 +19,17 @@
 import org.activiti.core.common.model.connector.ConnectorDefinition;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.core.io.support.ResourcePatternResolver;
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class ConnectorDefinitionServiceTest {
 
     private ConnectorDefinitionService connectorDefinitionService;
@@ -40,7 +42,6 @@ public class ConnectorDefinitionServiceTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         connectorDefinitionService = new ConnectorDefinitionService("/connectors",
                                                                        objectMapper,
                                                                        resourceLoader);

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/SignalReceivedListenerDelegateTest.java
Patch:
@@ -23,16 +23,18 @@
 import org.activiti.runtime.api.event.impl.ToSignalReceivedConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class SignalReceivedListenerDelegateTest {
 
     private SignalReceivedListenerDelegate listenerDelegate;
@@ -48,7 +50,6 @@ public class SignalReceivedListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new SignalReceivedListenerDelegate(asList(firstListener, secondListener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerCancelledListenerDelegateTest.java
Patch:
@@ -22,7 +22,9 @@
 import org.activiti.runtime.api.event.impl.ToTimerCancelledConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
@@ -32,8 +34,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class TimerCancelledListenerDelegateTest {
 
     private TimerCancelledListenerDelegate listenerDelegate;
@@ -46,7 +48,6 @@ public class TimerCancelledListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new TimerCancelledListenerDelegate(singletonList(listener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerExecutedListenerDelegateTest.java
Patch:
@@ -22,7 +22,9 @@
 import org.activiti.runtime.api.event.impl.ToTimerExecutedConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
@@ -32,8 +34,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class TimerExecutedListenerDelegateTest {
 
     private TimerExecutedListenerDelegate listenerDelegate;
@@ -46,7 +48,6 @@ public class TimerExecutedListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new TimerExecutedListenerDelegate(singletonList(listener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerFailedListenerDelegateTest.java
Patch:
@@ -22,7 +22,9 @@
 import org.activiti.runtime.api.event.impl.ToTimerFailedConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
@@ -32,8 +34,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class TimerFailedListenerDelegateTest {
 
     private TimerFailedListenerDelegate listenerDelegate;
@@ -46,7 +48,6 @@ public class TimerFailedListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new TimerFailedListenerDelegate(singletonList(listener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerFiredListenerDelegateTest.java
Patch:
@@ -22,7 +22,9 @@
 import org.activiti.runtime.api.event.impl.ToTimerFiredConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
@@ -32,8 +34,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class TimerFiredListenerDelegateTest {
 
     private TimerFiredListenerDelegate listenerDelegate;
@@ -46,7 +48,6 @@ public class TimerFiredListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new TimerFiredListenerDelegate(singletonList(listener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerRetriesDecrementedListenerDelegateTest.java
Patch:
@@ -22,7 +22,9 @@
 import org.activiti.runtime.api.event.impl.ToTimerRetriesDecrementedConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
@@ -32,8 +34,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class TimerRetriesDecrementedListenerDelegateTest {
 
     private TimerRetriesDecrementedListenerDelegate listenerDelegate;
@@ -46,7 +48,6 @@ public class TimerRetriesDecrementedListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new TimerRetriesDecrementedListenerDelegate(singletonList(listener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerScheduledListenerDelegateTest.java
Patch:
@@ -22,7 +22,9 @@
 import org.activiti.runtime.api.event.impl.ToTimerScheduledConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import java.util.Optional;
 
@@ -32,8 +34,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class TimerScheduledListenerDelegateTest {
 
     private TimerScheduledListenerDelegate listenerDelegate;
@@ -46,7 +48,6 @@ public class TimerScheduledListenerDelegateTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         listenerDelegate = new TimerScheduledListenerDelegate(singletonList(listener), converter);
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ExpressionResolverTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
-import static org.mockito.MockitoAnnotations.initMocks;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -35,8 +34,11 @@
 import org.activiti.engine.impl.interceptor.DelegateInterceptor;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
+@ExtendWith(MockitoExtension.class)
 public class ExpressionResolverTest {
 
     private ExpressionResolver expressionResolver;
@@ -54,7 +56,6 @@ public class ExpressionResolverTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         expressionResolver = new ExpressionResolver(expressionManager,
                                                     mapper, delegateInterceptor);
     }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ProcessVariablesPayloadValidatorTest.java
Patch:
@@ -23,7 +23,6 @@
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.MockitoAnnotations.initMocks;
 import java.io.IOException;
 import java.util.Date;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -41,8 +40,11 @@
 import org.activiti.spring.process.variable.types.VariableType;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
+@ExtendWith(MockitoExtension.class)
 public class ProcessVariablesPayloadValidatorTest {
 
     @Mock
@@ -61,8 +63,6 @@ public class ProcessVariablesPayloadValidatorTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
-
         VariableDefinition variableDefinitionName = new VariableDefinition();
         variableDefinitionName.setName("name");
         variableDefinitionName.setType("string");

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/model/impl/APIProcessDefinitionConverterTest.java
Patch:
@@ -22,15 +22,17 @@
 import org.activiti.engine.RepositoryService;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 
 import static org.activiti.runtime.api.model.impl.MockProcessDefinitionBuilder.processDefinitionBuilderBuilder;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@ExtendWith(MockitoExtension.class)
 public class APIProcessDefinitionConverterTest {
 
     @InjectMocks
@@ -41,8 +43,6 @@ public class APIProcessDefinitionConverterTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
-
         Process process = new Process();
         process.setId("processKey");
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/bpmn/parser/handler/ServiceTaskParseHandlerTest.java
Patch:
@@ -21,14 +21,16 @@
 import org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@RunWith(MockitoJUnitRunner.class)
 public class ServiceTaskParseHandlerTest {
 
     @InjectMocks
@@ -42,7 +44,6 @@ public class ServiceTaskParseHandlerTest {
 
     @Before
     public void setUp() throws Exception {
-        initMocks(this);
         given(bpmnParse.getActivityBehaviorFactory()).willReturn(activityBehaviorFactory);
     }
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/cmd/integration/DeleteIntegrationContextCmdTest.java
Patch:
@@ -21,13 +21,15 @@
 import org.activiti.engine.impl.persistence.entity.integration.IntegrationContextManager;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@RunWith(MockitoJUnitRunner.class)
 public class DeleteIntegrationContextCmdTest {
 
     @Mock
@@ -41,7 +43,6 @@ public class DeleteIntegrationContextCmdTest {
 
     @Before
     public void setUp() throws Exception {
-        initMocks(this);
         given(commandContext.getProcessEngineConfiguration()).willReturn(processEngineConfiguration);
         given(processEngineConfiguration.getIntegrationContextManager()).willReturn(integrationContextManager);
     }

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/cmd/integration/RetrieveIntegrationContextCmdTest.java
Patch:
@@ -21,13 +21,15 @@
 import org.activiti.engine.impl.persistence.entity.integration.IntegrationContextManager;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
-import static org.mockito.MockitoAnnotations.initMocks;
 
+@RunWith(MockitoJUnitRunner.class)
 public class RetrieveIntegrationContextCmdTest {
 
     @Mock
@@ -41,7 +43,6 @@ public class RetrieveIntegrationContextCmdTest {
 
     @Before
     public void setUp() throws Exception {
-        initMocks(this);
         given(commandContext.getProcessEngineConfiguration()).willReturn(processEngineConfiguration);
         given(processEngineConfiguration.getIntegrationContextManager()).willReturn(integrationContextManager);
     }

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/el/VariableScopeElResolverTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoInteractions;
-import static org.mockito.MockitoAnnotations.initMocks;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import java.util.Arrays;
@@ -39,10 +38,13 @@
 import org.activiti.engine.impl.el.variable.VariableScopeItemELResolver;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.Spy;
+import org.mockito.junit.MockitoJUnitRunner;
 
+@RunWith(MockitoJUnitRunner.class)
 public class VariableScopeElResolverTest {
 
     @Spy
@@ -64,7 +66,6 @@ public class VariableScopeElResolverTest {
 
     @Before
     public void setUp() throws Exception {
-        initMocks(this);
         doReturn(Arrays.asList(firstItemResolver, secondItemResolver, thirdItemResolver)).when(
             variableScopeElResolver).getVariableScopeItemELResolvers();
     }

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImplTest.java
Patch:
@@ -19,7 +19,6 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
-import static org.mockito.MockitoAnnotations.initMocks;
 
 import java.util.ArrayList;
 import java.util.Date;

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/ProcessDeployedEventProducerTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
 
 import java.io.ByteArrayInputStream;
 import java.util.List;
@@ -35,11 +34,14 @@
 import org.activiti.runtime.api.model.impl.APIProcessDefinitionConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Answers;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.context.ApplicationEventPublisher;
 
+@ExtendWith(MockitoExtension.class)
 public class ProcessDeployedEventProducerTest {
 
     private ProcessDeployedEventProducer producer;
@@ -61,7 +63,6 @@ public class ProcessDeployedEventProducerTest {
 
     @BeforeEach
     public void setUp() {
-        initMocks(this);
         producer = new ProcessDeployedEventProducer(repositoryService,
                                                     converter,
                                                     asList(firstListener, secondListener),

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/DefaultAutoDeploymentStrategyTest.java
Patch:
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 
-
 package org.activiti.spring.test.autodeployment;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -110,4 +109,5 @@ public void testDetermineResourceNameWithExceptionFailsGracefully() throws Excep
                                            resources,
                                            repositoryServiceMock);
     }
+
 }

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/email/JndiEmailTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.mock.jndi.SimpleNamingContextBuilder;
 import org.springframework.test.context.ContextConfiguration;
 
-@ContextConfiguration("classpath:org/activiti/spring/test/email/jndiEmailConfiguaration-context.xml")
+@ContextConfiguration("classpath:org/activiti/spring/test/email/jndiEmailConfiguration-context.xml")
 public class JndiEmailTest extends SpringActivitiTestCase {
 
     private static Logger logger = LoggerFactory.getLogger(JndiEmailTest.class);
@@ -85,4 +85,5 @@ public void testEmailUsingJndi() {
         ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("EmailJndiProcess", emptyMap());
         assertThat(runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count()).isEqualTo(0);
     }
+
 }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/MappingAwareActivityBehaviorFactoryTest.java
Patch:
@@ -25,8 +25,7 @@
 
 public class MappingAwareActivityBehaviorFactoryTest {
 
-    private MappingAwareActivityBehaviorFactory factory = new MappingAwareActivityBehaviorFactory(null,
-                                                                                                  null);
+    private MappingAwareActivityBehaviorFactory factory = new MappingAwareActivityBehaviorFactory(null, null, null);
 
     @Test
     public void createUserTaskActivityBehaviorShouldReturnMappingAwareUserTaskBehavior() {

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ProcessRuntimeAutoConfiguration.java
Patch:
@@ -135,6 +135,7 @@
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 @Configuration
 @AutoConfigureAfter(CommonRuntimeAutoConfiguration.class)
@@ -266,8 +267,8 @@ public APIDeploymentConverter apiDeploymentConverter(){
 
     @Bean
     @ConditionalOnMissingBean
-    public ProcessRuntimeConfiguration processRuntimeConfiguration(@Autowired(required = false) List<ProcessRuntimeEventListener<?>> processRuntimeEventListeners,
-                                                                   @Autowired(required = false) List<VariableEventListener<?>> variableEventListeners) {
+    public ProcessRuntimeConfiguration processRuntimeConfiguration(@Autowired(required = false) @Lazy List<ProcessRuntimeEventListener<?>> processRuntimeEventListeners,
+                                                                   @Autowired(required = false) @Lazy List<VariableEventListener<?>> variableEventListeners) {
         return new ProcessRuntimeConfigurationImpl(getInitializedListeners(processRuntimeEventListeners),
                 getInitializedListeners(variableEventListeners));
     }

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/conf/TaskRuntimeAutoConfiguration.java
Patch:
@@ -77,6 +77,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 @Configuration
 @AutoConfigureAfter(CommonRuntimeAutoConfiguration.class)
@@ -141,8 +142,8 @@ public TaskVariablesPayloadValidator taskVariablesValidator(DateFormatterProvide
     }
 
     @Bean
-    public TaskRuntimeConfiguration taskRuntimeConfiguration(@Autowired(required = false) List<TaskRuntimeEventListener<?>> taskRuntimeEventListeners,
-                                                             @Autowired(required = false) List<VariableEventListener<?>> variableEventListeners) {
+    public TaskRuntimeConfiguration taskRuntimeConfiguration(@Autowired(required = false) @Lazy List<TaskRuntimeEventListener<?>> taskRuntimeEventListeners,
+                                                             @Autowired(required = false) @Lazy List<VariableEventListener<?>> variableEventListeners) {
         return new TaskRuntimeConfigurationImpl(getInitializedTaskRuntimeEventListeners(taskRuntimeEventListeners),
                                                 getInitializedTaskRuntimeEventListeners(variableEventListeners));
     }

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/types/DateVariableType.java
Patch:
@@ -16,7 +16,6 @@
 package org.activiti.spring.process.variable.types;
 
 import java.util.List;
-
 import org.activiti.common.util.DateFormatterProvider;
 import org.activiti.engine.ActivitiException;
 
@@ -41,6 +40,9 @@ public void validate(Object var, List<ActivitiException> errors) {
     public Object parseFromValue(Object value) throws ActivitiException {
 
         try {
+            if (isExpression(value)) {
+                return value;
+            }
             return dateFormatterProvider.toDate(value);
         } catch (Exception e) {
             throw new ActivitiException("Error parsing date value " + value, e);

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/types/JavaObjectVariableType.java
Patch:
@@ -42,9 +42,9 @@ public void setClazz(Class clazz) {
     }
 
     @Override
-    public void validate(Object var,List<ActivitiException> errors) {
+    public void validate(Object var, List<ActivitiException> errors) {
 
-        if (var != null && !(var).getClass().isAssignableFrom(clazz)) {
+        if (var != null && !(var).getClass().isAssignableFrom(clazz) && !isExpression(var)) {
             String message = var.getClass() + " is not assignable from " + clazz;
             errors.add(new ActivitiException(message));
             logger.error(message);

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/JuelExpressionResolver.java
Patch:
@@ -58,6 +58,6 @@ protected ELContext buildContext (Map<String, Object> variables) {
                 beanResolver()
             )
             .withVariables(variables)
-            .build();
+            .buildWithDateFunctions();
     }
 }

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/IntegrationContext.java
Patch:
@@ -23,6 +23,8 @@ public interface IntegrationContext {
 
     String getProcessInstanceId();
 
+    String getRootProcessInstanceId();
+
     String getParentProcessInstanceId();
 
     String getExecutionId();

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/connector/IntegrationContextBuilder.java
Patch:
@@ -49,6 +49,7 @@ public IntegrationContext from(DelegateExecution execution) {
 
     private IntegrationContextImpl buildFromExecution(DelegateExecution execution) {
         IntegrationContextImpl integrationContext = new IntegrationContextImpl();
+        integrationContext.setRootProcessInstanceId(execution.getRootProcessInstanceId());
         integrationContext.setProcessInstanceId(execution.getProcessInstanceId());
         integrationContext.setProcessDefinitionId(execution.getProcessDefinitionId());
         integrationContext.setBusinessKey(execution.getProcessInstanceBusinessKey());

File: activiti-core/activiti-spring-boot-starter/src/main/java/org/activiti/spring/ProcessDeployedEventProducer.java
Patch:
@@ -51,7 +51,7 @@ public ProcessDeployedEventProducer(RepositoryService repositoryService,
 
     @Override
     public void doStart() {
-        List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());
+        List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().latestVersion().list());
         List<ProcessDeployedEvent> processDeployedEvents = new ArrayList<>();
         for (ProcessDefinition processDefinition : processDefinitions) {
             try (InputStream inputStream = repositoryService.getProcessModel(processDefinition.getId())) {

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/ProcessDeployedEventProducerTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.activiti.runtime.api.model.impl.APIProcessDefinitionConverter;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.mockito.Answers;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.springframework.context.ApplicationEventPublisher;
@@ -43,7 +44,7 @@ public class ProcessDeployedEventProducerTest {
 
     private ProcessDeployedEventProducer producer;
 
-    @Mock
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
     private RepositoryService repositoryService;
 
     @Mock
@@ -71,7 +72,7 @@ public void setUp() {
     public void shouldCallRegisteredListenersWhenWebApplicationTypeIsServlet() {
         //given
         ProcessDefinitionQuery definitionQuery = mock(ProcessDefinitionQuery.class);
-        given(repositoryService.createProcessDefinitionQuery()).willReturn(definitionQuery);
+        given(repositoryService.createProcessDefinitionQuery().latestVersion()).willReturn(definitionQuery);
 
         List<ProcessDefinition> internalProcessDefinitions = asList(mock(ProcessDefinition.class),
                                                                     mock(ProcessDefinition.class));

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ActivitiElContext.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.impl.el;
+package org.activiti.core.el;
 
 import javax.el.ELContext;
 import javax.el.ELResolver;

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ActivitiFunctionMapper.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 
-package org.activiti.engine.impl.el;
+package org.activiti.core.el;
 
 import java.lang.reflect.Method;
 

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ELResolverDecorator.java
Patch:
@@ -13,9 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
-package org.activiti.engine.impl.el;
+package org.activiti.core.el;
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;

File: activiti-core-common/activiti-expression-language/src/main/java/org/activiti/core/el/ELResolverReflectionBlockerDecorator.java
Patch:
@@ -13,9 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
-package org.activiti.engine.impl.el;
+package org.activiti.core.el;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/test/mock/MockExpressionManager.java
Patch:
@@ -24,8 +24,8 @@
 import javax.el.ListELResolver;
 import javax.el.MapELResolver;
 
+import org.activiti.core.el.ELResolverReflectionBlockerDecorator;
 import org.activiti.engine.delegate.VariableScope;
-import org.activiti.engine.impl.el.ELResolverReflectionBlockerDecorator;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.activiti.engine.impl.el.VariableScopeElResolver;
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/el/ELResolverReflectionBlockerDecoratorTest.java
Patch:
@@ -57,7 +57,7 @@ public void should_throwException_when_nativeMethodIsUsed() {
         assertThatExceptionOfType(ActivitiException.class)
             .as("Using Native Method: getClass in an expression")
             .isThrownBy(() -> expression.getValue(expressionManager, new DefaultDelegateInterceptor(), availableVariables))
-            .as("Illegal use of Native Method in a JUEL Expression");
+            .withCauseInstanceOf(IllegalArgumentException.class);
     }
 
     @Test
@@ -75,7 +75,7 @@ public void should_throwException_when_reflectionIsUsed() {
         assertThatExceptionOfType(ActivitiException.class)
             .as("Using Reflection in an expression")
             .isThrownBy(() -> expression.getValue(expressionManager, new DefaultDelegateInterceptor(), availableVariables))
-            .as("Illegal use of Reflection in a JUEL Expression");
+            .withCauseInstanceOf(IllegalArgumentException.class);
     }
 
 }

File: activiti-core/activiti-spring/src/main/java/org/activiti/spring/SpringExpressionManager.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import javax.el.CompositeELResolver;
 import org.activiti.engine.impl.el.ExpressionManager;
-import org.activiti.engine.impl.el.ReadOnlyMapELResolver;
+import org.activiti.core.el.ReadOnlyMapELResolver;
 import org.springframework.context.ApplicationContext;
 
 /**

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/el/ExpressionManager.java
Patch:
@@ -135,7 +135,7 @@ private void addBaseResolvers(CompositeELResolver elResolver) {
         elResolver.add(new DynamicBeanPropertyELResolver(ItemInstance.class,
                                                          "getFieldValue",
                                                          "setFieldValue")); // TODO: needs verification
-        elResolver.add(new BeanELResolver());
+        elResolver.add(new ELResolverReflectionBlockerDecorator(new BeanELResolver()));
     }
 
     public Map<Object, Object> getBeans() {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/test/mock/MockExpressionManager.java
Patch:
@@ -25,6 +25,7 @@
 import javax.el.MapELResolver;
 
 import org.activiti.engine.delegate.VariableScope;
+import org.activiti.engine.impl.el.ELResolverReflectionBlockerDecorator;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.activiti.engine.impl.el.VariableScopeElResolver;
 
@@ -38,7 +39,7 @@ protected ELResolver createElResolver(VariableScope variableScope) {
     compositeElResolver.add(new ArrayELResolver());
     compositeElResolver.add(new ListELResolver());
     compositeElResolver.add(new MapELResolver());
-    compositeElResolver.add(new BeanELResolver());
+    compositeElResolver.add(new ELResolverReflectionBlockerDecorator(new BeanELResolver()));
     return compositeElResolver;
   }
 

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/ExtensionElementsParser.java
Patch:
@@ -55,7 +55,9 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
           new PotentialStarterParser().parse(xtr, activeProcess);
         } else {
           ExtensionElement extensionElement = BpmnXMLUtil.parseExtensionElement(xtr);
-          parentElement.addExtensionElement(extensionElement);
+          if (parentElement != null) {
+              parentElement.addExtensionElement(extensionElement);
+          }
         }
 
       } else if (xtr.isEndElement()) {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -262,6 +262,7 @@ public ExecutionEntity updateProcessInstanceStartDate(ExecutionEntity processIns
       processInstanceExecution.setStartTime(Context.getProcessEngineConfiguration().getClock().getCurrentTime());
       return update(processInstanceExecution);
   }
+
   /**
    * Creates a new execution. properties processDefinition, processInstance and activity will be initialized.
    */
@@ -303,6 +304,8 @@ public ExecutionEntity createSubprocessInstance(ProcessDefinition processDefinit
     subProcessInstance.setProcessDefinitionId(processDefinition.getId());
     subProcessInstance.setProcessDefinitionKey(processDefinition.getKey());
     subProcessInstance.setProcessDefinitionName(processDefinition.getName());
+    subProcessInstance.setProcessDefinitionVersion(processDefinition.getVersion());
+    subProcessInstance.setName(superExecutionEntity.getProcessInstance().getName());
     subProcessInstance.setSuperExecution(superExecutionEntity);
     subProcessInstance.setRootProcessInstanceId(superExecutionEntity.getRootProcessInstanceId());
     subProcessInstance.setScope(true); // process instance is always a scope for all child executions

File: activiti-core/activiti-image-generator/src/main/java/org/activiti/image/ProcessDiagramGenerator.java
Patch:
@@ -66,6 +66,7 @@ InputStream generateDiagram(BpmnModel bpmnModel,
      * @param highLightedActivities activities to highlight
      * @param highLightedFlows flows to highlight
      * @param currentActivities current activities to highlight
+     * @param erroredActivities errored activities to highlight
      * @param activityFontName override the default activity font
      * @param labelFontName override the default label font
      * @param generateDefaultDiagram true if a default diagram should be generated if there is no graphic info available
@@ -75,6 +76,7 @@ InputStream generateDiagram(BpmnModel bpmnModel,
                                 List<String> highLightedActivities,
                                 List<String> highLightedFlows,
                                 List<String> currentActivities,
+                                List<String> erroredActivities,
                                 String activityFontName,
                                 String labelFontName,
                                 String annotationFontName,

File: activiti-core/activiti-image-generator/src/test/java/org/activiti/engine/test/image/ProcessDiagramGeneratorTest.java
Patch:
@@ -230,6 +230,7 @@ public void testGenerateDefaultDiagram() throws Exception {
                                                  emptyList(),
                                                  emptyList(),
                                                  emptyList(),
+                                                 emptyList(),
                                                  activityFontName,
                                                  labelFontName,
                                                  annotationFontName,

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPITaskCreatedEventConverter.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.activiti.runtime.api.event.impl;
 
+import java.util.Optional;
+
 import org.activiti.api.task.runtime.events.TaskCreatedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
-import java.util.Optional;
-
 public class ToAPITaskCreatedEventConverter implements EventConverter<TaskCreatedEvent, ActivitiEntityEvent> {
 
     private final APITaskConverter taskConverter;
@@ -31,6 +31,6 @@ public ToAPITaskCreatedEventConverter(APITaskConverter taskConverter) {
 
     @Override
     public Optional<TaskCreatedEvent> from(ActivitiEntityEvent internalEvent) {
-        return Optional.of(new TaskCreatedEventImpl(taskConverter.from((org.activiti.engine.task.Task) internalEvent.getEntity())));
+        return Optional.of(new TaskCreatedEventImpl(taskConverter.fromWithCandidates((org.activiti.engine.task.Task) internalEvent.getEntity())));
     }
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/WebServiceActivityBehavior.java
Patch:
@@ -272,7 +272,7 @@ protected void fillImporterInfo(Import theImport, String sourceSystemId) {
         Class<?> wsdlImporterClass;
         try {
           wsdlImporterClass = Class.forName("org.activiti.engine.impl.webservice.CxfWSDLImporter", true, Thread.currentThread().getContextClassLoader());
-          XMLImporter importerInstance = (XMLImporter) wsdlImporterClass.newInstance();
+          XMLImporter importerInstance = (XMLImporter) wsdlImporterClass.getDeclaredConstructor().newInstance();
           xmlImporterMap.put(theImport.getImportType(), importerInstance);
           importerInstance.importFrom(theImport, sourceSystemId);
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/util/ReflectUtil.java
Patch:
@@ -136,7 +136,7 @@ public static URL getResource(String name) {
   public static Object instantiate(String className) {
     try {
       Class<?> clazz = loadClass(className);
-      return clazz.newInstance();
+      return clazz.getDeclaredConstructor().newInstance();
     } catch (Exception e) {
       throw new ActivitiException("couldn't instantiate class " + className, e);
     }

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/mapError/ThrowCustomExceptionDelegate.java
Patch:
@@ -38,7 +38,7 @@ public void execute(DelegateExecution execution) {
       RuntimeException exception = null;
       try {
         Class<?> clazz = Class.forName(exceptionClassName);
-        exception = (RuntimeException) clazz.newInstance();
+        exception = (RuntimeException) clazz.getDeclaredConstructor().newInstance();
 
       } catch (Exception e) {
         throw new ActivitiException("Class not found", e);

File: activiti-core/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -509,7 +509,7 @@ protected void processFlowElement(FlowElement flowElement,
         Class<? extends BaseBpmnJsonConverter> converter = convertersToJsonMap.get(flowElement.getClass());
         if (converter != null) {
             try {
-                BaseBpmnJsonConverter converterInstance = converter.newInstance();
+                BaseBpmnJsonConverter converterInstance = converter.getDeclaredConstructor().newInstance();
                 if (converterInstance instanceof FormKeyAwareConverter) {
                     ((FormKeyAwareConverter) converterInstance).setFormKeyMap(formKeyMap);
                 }
@@ -542,7 +542,7 @@ protected void processArtifacts(FlowElementsContainer container,
             Class<? extends BaseBpmnJsonConverter> converter = convertersToJsonMap.get(artifact.getClass());
             if (converter != null) {
                 try {
-                    converter.newInstance().convertToJson(artifact,
+                    converter.getDeclaredConstructor().newInstance().convertToJson(artifact,
                                                           this,
                                                           model,
                                                           container,
@@ -843,7 +843,7 @@ public void processJsonElements(JsonNode shapesArrayNode,
             String stencilId = BpmnJsonConverterUtil.getStencilId(shapeNode);
             Class<? extends BaseBpmnJsonConverter> converter = convertersToBpmnMap.get(stencilId);
             try {
-                BaseBpmnJsonConverter converterInstance = converter.newInstance();
+                BaseBpmnJsonConverter converterInstance = converter.getDeclaredConstructor().newInstance();
                 if (converterInstance instanceof DecisionTableAwareConverter) {
                     ((DecisionTableAwareConverter) converterInstance).setDecisionTableMap(decisionTableMap);
                 }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ProcessRuntimeImplTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 import static org.mockito.MockitoAnnotations.initMocks;
 
@@ -161,7 +161,7 @@ public void should_getProcessDefinitionById_when_appVersionIsNull() {
         processRuntime.processDefinition(processDefinitionId);
 
         verify(processDefinitionConverter).from(processDefinition);
-        verifyZeroInteractions(deploymentConverter);
+        verifyNoInteractions(deploymentConverter);
     }
 
     @Test

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/el/VariableScopeElResolverTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.MockitoAnnotations.initMocks;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -86,7 +86,7 @@ public void getValue_should_returnResolvedValueAndMarkContextAsResolved() {
         //then
         assertThat(result).isEqualTo("myValue");
         verify(elContext).setPropertyResolved(true);
-        verifyZeroInteractions(thirdItemResolver);
+        verifyNoInteractions(thirdItemResolver);
     }
 
     @Test
@@ -104,7 +104,7 @@ public void getValue_should_returnNullWhenNoneOfItemResolversCanResolveTheProper
 
         //then
         assertThat(result).isNull();
-        verifyZeroInteractions(elContext);
+        verifyNoInteractions(elContext);
     }
 
 

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/RuntimeEvent.java
Patch:
@@ -30,13 +30,13 @@ public interface RuntimeEvent<ENTITY_TYPE, EVENT_TYPE extends Enum<?>> extends S
     String getProcessInstanceId();
 
     String getParentProcessInstanceId();
-    
+
     String getProcessDefinitionId();
-    
+
     String getProcessDefinitionKey();
 
     Integer getProcessDefinitionVersion();
-    
+
     String getBusinessKey();
 
 }

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/VariableEvent.java
Patch:
@@ -29,4 +29,4 @@ enum VariableEvents {
         VARIABLE_DELETED
 
     }
-}
\ No newline at end of file
+}

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNElement.java
Patch:
@@ -16,7 +16,7 @@
 package org.activiti.api.process.model;
 
 public interface BPMNElement {
-    
+
     String getElementId();
 
     String getProcessInstanceId();

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNError.java
Patch:
@@ -18,6 +18,6 @@
 public interface BPMNError extends BPMNActivity {
 
     String getErrorCode();
-    
+
     String getErrorId();
 }

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/MessageSubscription.java
Patch:
@@ -26,7 +26,7 @@ public interface MessageSubscription {
     String getExecutionId();
 
     String getProcessInstanceId();
-    
+
     String getBusinessKey();
 
     String getConfiguration();

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessDefinition.java
Patch:
@@ -31,4 +31,4 @@ public interface ProcessDefinition extends ApplicationElement {
 
     String getFormKey();
 
-}
\ No newline at end of file
+}

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessDefinitionMeta.java
Patch:
@@ -21,4 +21,4 @@ public interface ProcessDefinitionMeta {
 
 
 
-}
\ No newline at end of file
+}

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/GetProcessInstancesPayloadBuilder.java
Patch:
@@ -27,7 +27,7 @@ public class GetProcessInstancesPayloadBuilder {
     private boolean suspendedOnly = false;
     private boolean activeOnly = false;
     private String parentProcessInstanceId;
-    
+
 
     public GetProcessInstancesPayloadBuilder withBusinessKey(String businessKey) {
         this.businessKey = businessKey;
@@ -61,8 +61,8 @@ public GetProcessInstancesPayloadBuilder withParentProcessInstanceId(String pare
         this.parentProcessInstanceId = parentProcessInstanceId;
         return this;
     }
-    
-    
+
+
     public GetProcessInstancesPayload build() {
         GetProcessInstancesPayload getProcessInstancesPayload = new GetProcessInstancesPayload();
         getProcessInstancesPayload.setBusinessKey(businessKey);

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/ReceiveMessagePayloadBuilder.java
Patch:
@@ -102,8 +102,8 @@ public boolean equals(Object obj) {
         if (getClass() != obj.getClass())
             return false;
         ReceiveMessagePayloadBuilder other = (ReceiveMessagePayloadBuilder) obj;
-        return Objects.equals(correlationKey, other.correlationKey) 
-                && Objects.equals(name, other.name) 
+        return Objects.equals(correlationKey, other.correlationKey)
+                && Objects.equals(name, other.name)
                 && Objects.equals(variables, other.variables);
     }
 }

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/MessageDefinitionEvent.java
Patch:
@@ -22,7 +22,7 @@ public interface MessageDefinitionEvent<ENTITY_TYPE> extends RuntimeEvent<ENTITY
     enum MessageDefinitionEvents {
 
         START_MESSAGE_DEPLOYED
-        
+
     }
 
 }

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ProcessDefinitionEvent.java
Patch:
@@ -23,7 +23,7 @@ public interface ProcessDefinitionEvent extends RuntimeEvent<ProcessDefinition,
     enum ProcessDefinitionEvents {
 
         PROCESS_DEPLOYED
-        
+
     }
 
 }

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ProcessRuntimeEvent.java
Patch:
@@ -33,7 +33,7 @@ enum ProcessEvents {
         PROCESS_SUSPENDED,
 
         PROCESS_RESUMED,
-        
+
         PROCESS_UPDATED
     }
 

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/StartMessageDeployedEvent.java
Patch:
@@ -23,5 +23,5 @@ public interface StartMessageDeployedEvent extends MessageDefinitionEvent<StartM
     default MessageDefinitionEvents getEventType() {
         return MessageDefinitionEvents.START_MESSAGE_DEPLOYED;
     }
-    
+
 }

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/payloads/GetProcessInstancesPayload.java
Patch:
@@ -70,14 +70,14 @@ public boolean isActiveOnly() {
     public void setActiveOnly(boolean activeOnly) {
         this.activeOnly = activeOnly;
     }
-    
+
     public String getParentProcessInstanceId() {
         return parentProcessInstanceId;
     }
-    
+
     public void setParentProcessInstanceId(String parentProcessInstanceId) {
         this.parentProcessInstanceId=parentProcessInstanceId;
     }
 
-    
+
 }

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/ProcessAdminRuntime.java
Patch:
@@ -99,7 +99,7 @@ Page<ProcessInstance> processInstances(Pageable pageable,
      * Resume a suspended process instance
      */
     ProcessInstance resume(ResumeProcessPayload resumeProcessPayload);
-    
+
     /**
      * Update a Process Instance
      */
@@ -111,6 +111,6 @@ Page<ProcessInstance> processInstances(Pageable pageable,
     void removeVariables(RemoveProcessVariablesPayload removeProcessVariablesPayload);
 
     void receive(ReceiveMessagePayload messagePayload);
-    
+
     ProcessInstance start(StartMessagePayload messagePayload);
 }

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/AbstractSecurityManager.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 
 public abstract class AbstractSecurityManager implements SecurityManager {
-    
+
     private static final String INVALID_AUTHENTICATED_PRINCIPAL = "Invalid authenticated principal";
 
     private final SecurityContextPrincipalProvider securityContextPrincipalProvider;
@@ -56,9 +56,9 @@ public List<String> getAuthenticatedUserRoles() {
                                                .map(principalRolesProvider::getRoles)
                                                .orElseThrow(this::securityException);
     }
-    
+
     protected SecurityException securityException() {
         return new SecurityException(INVALID_AUTHENTICATED_PRINCIPAL);
     }
-    
+
 }

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/PrincipalGroupsProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 public interface PrincipalGroupsProvider {
-    
+
    List<String> getGroups(Principal principal);
 
 }

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/PrincipalIdentityProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 
 public interface PrincipalIdentityProvider {
-    
+
     default String getUserId(Principal principal) {
         return Optional.of(principal)
                        .map(Principal::getName)

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/PrincipalRolesProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 public interface PrincipalRolesProvider {
-    
+
     List<String> getRoles(Principal principal);
 
 }

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/SecurityContextPrincipalProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 
 public interface SecurityContextPrincipalProvider {
-    
+
     Optional<Principal> getCurrentPrincipal();
-    
+
 }

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/builders/CandidateGroupsPayloadBuilder.java
Patch:
@@ -24,7 +24,7 @@ public class CandidateGroupsPayloadBuilder {
 
     private String taskId;
     private List<String> candidateGroups = new ArrayList<>();
- 
+
     public CandidateGroupsPayloadBuilder withTaskId(String taskId) {
         this.taskId = taskId;
         return this;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/builders/CandidateUsersPayloadBuilder.java
Patch:
@@ -24,7 +24,7 @@ public class CandidateUsersPayloadBuilder {
 
     private String taskId;
     private List<String> candidateUsers = new ArrayList<>();
- 
+
     public CandidateUsersPayloadBuilder withTaskId(String taskId) {
         this.taskId = taskId;
         return this;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/builders/CreateTaskPayloadBuilder.java
Patch:
@@ -32,7 +32,7 @@ public class CreateTaskPayloadBuilder {
     private List<String> candidateUsers = new ArrayList<>();
     private String parentTaskId;
     private String formKey;
- 
+
     public CreateTaskPayloadBuilder withName(String name) {
         this.name = name;
         return this;

File: activiti-core-common/activiti-spring-connector/src/main/java/org/activiti/core/common/spring/connector/ConnectorDefinitionService.java
Patch:
@@ -90,4 +90,3 @@ protected void validate(List<ConnectorDefinition> connectorDefinitions) {
         }
     }
 }
-

File: activiti-core-common/activiti-spring-identity/src/main/java/org/activiti/core/common/spring/identity/config/ActivitiSpringIdentityAutoConfiguration.java
Patch:
@@ -24,7 +24,7 @@
 
 @Configuration
 public class ActivitiSpringIdentityAutoConfiguration {
-    
+
     @Bean
     @ConditionalOnMissingBean
     public UserGroupManager userGroupManager(UserDetailsService userDetailsService) {

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/ActivitiForbiddenException.java
Patch:
@@ -25,4 +25,4 @@ public ActivitiForbiddenException(String message, Throwable cause) {
     public ActivitiForbiddenException(String message) {
         super(message);
     }
-}
\ No newline at end of file
+}

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/conf/SecurityPoliciesProperties.java
Patch:
@@ -37,4 +37,4 @@ public String getWildcard() {
         return wildcard;
     }
 
-}
\ No newline at end of file
+}

File: activiti-core-common/activiti-spring-security-policies/src/test/java/org/activiti/core/common/spring/security/policies/Application.java
Patch:
@@ -24,4 +24,4 @@ public class Application {
     public static void main(String[] args) {
         SpringApplication.run(Application.class, args);
     }
-}
\ No newline at end of file
+}

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/AbstractSimpleGrantedAuthoritiesMapper.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.stream.Collectors;
 
 public abstract class AbstractSimpleGrantedAuthoritiesMapper {
-    
+
     protected static List<String> getAuthoritesFilteredByPrefix(@NonNull Collection<? extends GrantedAuthority> authorities,
                                                                 @NonNull String prefix) {
         return authorities.stream()

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/AuthenticationPrincipalGroupsProvider.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Optional;
 
 public class AuthenticationPrincipalGroupsProvider implements PrincipalGroupsProvider {
-    
+
     private final GrantedAuthoritiesResolver grantedAuthoritiesResolver;
     private final GrantedAuthoritiesGroupsMapper grantedAuthoritiesGroupsMapper;
 
@@ -32,7 +32,7 @@ public AuthenticationPrincipalGroupsProvider(@NonNull GrantedAuthoritiesResolver
         this.grantedAuthoritiesResolver = grantedAuthoritiesResolver;
         this.grantedAuthoritiesGroupsMapper = grantedAuthoritiesGroupsMapper;
     }
-    
+
     @Override
     public List<String> getGroups(@NonNull Principal principal) {
         return Optional.of(principal)
@@ -43,6 +43,6 @@ public List<String> getGroups(@NonNull Principal principal) {
 
     protected SecurityException securityException() {
         return new SecurityException("Invalid principal groups");
-    }    
+    }
 
 }

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/GrantedAuthoritiesGroupsMapper.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 public interface GrantedAuthoritiesGroupsMapper {
-    
+
     List<String> getGroups(Collection<? extends GrantedAuthority> authorities);
 
 }

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/GrantedAuthoritiesResolver.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Collection;
 
 public interface GrantedAuthoritiesResolver {
-    
+
     Collection<? extends GrantedAuthority> getAuthorities(Principal principal);
-    
+
 }

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/GrantedAuthoritiesRolesMapper.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 public interface GrantedAuthoritiesRolesMapper {
-    
+
     List<String> getRoles(Collection<? extends GrantedAuthority> authorities);
 
 }

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/LocalSpringSecurityManager.java
Patch:
@@ -26,13 +26,13 @@
  * This is a simple wrapper for Spring Security Context Holder
  */
 public class LocalSpringSecurityManager extends AbstractSecurityManager {
-    
+
     public LocalSpringSecurityManager(@NonNull SecurityContextPrincipalProvider securityContextPrincipalProvider,
                                       @NonNull PrincipalIdentityProvider principalIdentityProvider,
                                       @NonNull PrincipalGroupsProvider principalGroupsProvider,
                                       @NonNull PrincipalRolesProvider principalRolesProvider) {
-        super(securityContextPrincipalProvider, 
-              principalIdentityProvider, 
+        super(securityContextPrincipalProvider,
+              principalIdentityProvider,
               principalGroupsProvider,
               principalRolesProvider);
     }

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/event/impl/ApplicationDeployedEventImpl.java
Patch:
@@ -25,9 +25,9 @@ public class ApplicationDeployedEventImpl extends RuntimeEventImpl<Deployment, A
     public ApplicationDeployedEventImpl(Deployment entity) {
         super(entity);
     }
-    
+
     @Override
     public ApplicationEvents getEventType() {
         return ApplicationEvents.APPLICATION_DEPLOYED;
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/event/impl/MessageSubscriptionCancelledEventImpl.java
Patch:
@@ -19,15 +19,15 @@
 import org.activiti.api.process.model.events.MessageSubscriptionCancelledEvent;
 import org.activiti.api.process.model.events.MessageSubscriptionEvent;
 
-public class MessageSubscriptionCancelledEventImpl extends RuntimeEventImpl<MessageSubscription, MessageSubscriptionEvent.MessageSubscriptionEvents> 
+public class MessageSubscriptionCancelledEventImpl extends RuntimeEventImpl<MessageSubscription, MessageSubscriptionEvent.MessageSubscriptionEvents>
                                                    implements MessageSubscriptionCancelledEvent {
 
     public MessageSubscriptionCancelledEventImpl() {
     }
 
     public MessageSubscriptionCancelledEventImpl(MessageSubscription entity) {
         super(entity);
-        
+
         setProcessInstanceId(entity.getProcessInstanceId());
         setProcessDefinitionId(entity.getProcessDefinitionId());
     }

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/event/impl/StartMessageDeployedEvents.java
Patch:
@@ -27,12 +27,12 @@ public class StartMessageDeployedEvents extends ApplicationEvent {
     public StartMessageDeployedEvents(List<StartMessageDeployedEvent> processDeployedEvents) {
         super(processDeployedEvents);
     }
-    
-    
+
+
     @SuppressWarnings("unchecked")
     public final List<StartMessageDeployedEvent> getStartMessageDeployedEvents() {
         return (List<StartMessageDeployedEvent>) getSource();
     }
-    
+
 
 }

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/BPMNElementImpl.java
Patch:
@@ -42,13 +42,13 @@ public String getProcessDefinitionId() {
     public void setProcessDefinitionId(String processDefinitionId) {
         this.processDefinitionId = processDefinitionId;
     }
-    
- 
+
+
     @Override
     public String getElementId() {
         return elementId;
     }
-    
+
     public void setElementId(String elementId) {
         this.elementId = elementId;
     }

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/BPMNSequenceFlowImpl.java
Patch:
@@ -84,7 +84,7 @@ public String getTargetActivityType() {
     public void setTargetActivityType(String targetActivityType) {
         this.targetActivityType = targetActivityType;
     }
-    
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessVariableValue.java
Patch:
@@ -192,4 +192,4 @@ public ProcessVariableValue build() {
             return new ProcessVariableValue(this);
         }
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessVariablesMap.java
Patch:
@@ -29,4 +29,4 @@ public ProcessVariablesMap<K, V> clone() {
 
         return copy;
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-api-impl/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessVariablesMapDeserializer.java
Patch:
@@ -84,4 +84,4 @@ public ProcessVariablesMap<String, Object> deserialize(JsonParser jp, Deserializ
 
         return map;
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/BPMNMessageConverter.java
Patch:
@@ -29,11 +29,11 @@ public BPMNMessageImpl convertToBPMNMessage(ActivitiMessageEvent internalEvent)
         BPMNMessageImpl bpmnMessage = new BPMNMessageImpl(internalEvent.getActivityId());
         bpmnMessage.setProcessDefinitionId(internalEvent.getProcessDefinitionId());
         bpmnMessage.setProcessInstanceId(internalEvent.getProcessInstanceId());
-   
+
         bpmnMessage.setMessagePayload(new MessageEventPayload(internalEvent.getMessageName(),
                                                               internalEvent.getMessageCorrelationKey(),
                                                               internalEvent.getMessageBusinessKey(),
-                                                              (Map<String, Object>)internalEvent.getMessageData()));        
+                                                              (Map<String, Object>)internalEvent.getMessageData()));
 
         return bpmnMessage;
     }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/MessageSubscriptionConverter.java
Patch:
@@ -24,7 +24,7 @@
 public class MessageSubscriptionConverter {
 
     public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscriptionEntity messageEventSubscriptionEntity) {
-        
+
         return Optional.of(messageEventSubscriptionEntity)
                        .map(entity -> MessageSubscriptionImpl.builder()
                                                              .withId(entity.getId())
@@ -41,5 +41,5 @@ public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscrip
                                                              .build())
                        .orElseThrow( () -> new IllegalArgumentException("messageEventSubscriptionEntity must not be null"));
     }
-    
+
 }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/StartMessageSubscriptionConverter.java
Patch:
@@ -35,5 +35,5 @@ public StartMessageSubscriptionImpl convertToStartMessageSubscription(MessageEve
                                                                        .build())
                        .orElseThrow(() -> new IllegalArgumentException("messageEventSubscriptionEntity must not be null"));
     }
-    
+
 }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToMessageSubscriptionCancelledConverter.java
Patch:
@@ -32,13 +32,13 @@ public ToMessageSubscriptionCancelledConverter(MessageSubscriptionConverter conv
 
     @Override
     public Optional<MessageSubscriptionCancelledEvent> from(ActivitiEntityEvent internalEvent) {
-        
+
         return Optional.of(internalEvent)
                        .map(ActivitiEntityEvent::getEntity)
                        .filter(MessageEventSubscriptionEntity.class::isInstance)
                        .map(MessageEventSubscriptionEntity.class::cast)
                        .map(converter::convertToMessageSubscription)
                        .map(MessageSubscriptionCancelledEventImpl::new);
-                       
+
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/MessageSubscriptionCancelledListenerDelegate.java
Patch:
@@ -52,7 +52,7 @@ public void onEvent(ActivitiEvent event) {
     public boolean isFailOnException() {
         return false;
     }
-    
+
     protected boolean isValidEvent(ActivitiEvent event) {
         return Optional.ofNullable(event)
                        .filter(ActivitiEntityEvent.class::isInstance)

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessUpdatedListenerDelegate.java
Patch:
@@ -53,4 +53,3 @@ public boolean isFailOnException() {
         return false;
     }
 }
-

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/message/ReceiveMessagePayloadEventListener.java
Patch:
@@ -22,7 +22,7 @@
  * MessagePayloadEventListener handler interface.
  */
 public interface ReceiveMessagePayloadEventListener {
-    
+
     @EventListener
     public void receiveMessage(ReceiveMessagePayload messagePayload);
 }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/ProcessRuntimeTestApp.java
Patch:
@@ -43,7 +43,7 @@ public RepositoryService repositoryService() {
     public RuntimeService runtimeService() {
         return mock(RuntimeService.class);
     }
-    
+
     @Bean
     public ManagementService managementService() {
         return mock(ManagementService.class);

File: activiti-core/activiti-api-impl/activiti-api-task-model-impl/src/main/java/org/activiti/api/task/conf/impl/TaskModelAutoConfiguration.java
Patch:
@@ -81,7 +81,7 @@ public JavaType resolveAbstractType(DeserializationConfig config,
 
         module.registerSubtypes(new NamedType(SaveTaskPayload.class,
                                               SaveTaskPayload.class.getSimpleName()));
-        
+
         module.registerSubtypes(new NamedType(CreateTaskPayload.class,
                                               CreateTaskPayload.class.getSimpleName()));
 

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/impl/TaskAdminRuntimeImpl.java
Patch:
@@ -149,9 +149,9 @@ public Task complete(CompleteTaskPayload completeTaskPayload) {
         if (task == null) {
             throw new IllegalStateException("Task with id: " + completeTaskPayload.getTaskId() + " cannot be completed because it cannot be found.");
         }
-        
+
         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);
-        
+
         TaskImpl competedTaskData = new TaskImpl(task.getId(),
                 task.getName(),
                 Task.TaskStatus.COMPLETED);

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/test/java/org/activiti/runtime/api/impl/TaskRuntimeImplTest.java
Patch:
@@ -45,7 +45,7 @@
 public class TaskRuntimeImplTest {
 
     private static final String AUTHENTICATED_USER = "user";
-    
+
     @Spy
     @InjectMocks
     private TaskRuntimeImpl taskRuntime;
@@ -126,7 +126,7 @@ public void assign_should_updateTaskAssignee_whenAssigneeIsACandidateUser() {
         doReturn(task).when(taskConverter).fromWithCandidates(any());
 
         taskRuntime.assign(assignTaskPayload);
-        
+
         verify(taskService).unclaim(taskId);
         verify(taskService).claim(taskId, newAssignee);
     }

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/test/java/org/activiti/runtime/api/model/impl/MockTaskBuilder.java
Patch:
@@ -125,7 +125,7 @@ public MockTaskBuilder withFormKey(String formKey) {
         when(task.getFormKey()).thenReturn(formKey);
         return this;
     }
-    
+
     public MockTaskBuilder withTaskDefinitionKey(String taskDefinitionKey) {
         when(task.getTaskDefinitionKey()).thenReturn(taskDefinitionKey);
         return this;

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BpmnXMLConverter.java
Patch:
@@ -250,7 +250,7 @@ protected Schema createSchema(SchemaFactory factory, URL schemaUrl) throws SAXEx
       throw new XMLException("BPMN XSD could not be found", e);
     }
   }
-  
+
   public BpmnModel convertToBpmnModel(InputStreamProvider inputStreamProvider, boolean validateSchema, boolean enableSafeBpmnXml) {
     return convertToBpmnModel(inputStreamProvider, validateSchema, enableSafeBpmnXml, DEFAULT_ENCODING);
   }

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/bpmn/converter/BpmnXMLConverterTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.jupiter.api.Test;
 
 public class BpmnXMLConverterTest {
-    
+
     private BpmnXMLConverter bpmnXMLConverter = new BpmnXMLConverter();
     private SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
 
@@ -46,10 +46,10 @@ private URL getDecodedUrl(String path) throws MalformedURLException {
     }
 
     @Test
-    public void should_createSchema() throws Exception { 
+    public void should_createSchema() throws Exception {
         Schema schema = bpmnXMLConverter.createSchema(factory, getClass().getClassLoader()
                 .getResource("org/activiti/impl/bpmn/parser/BPMN20.xsd"));
         assertThat(schema).isNotNull();
     }
-    
+
 }

File: activiti-core/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/HasExtensionAttributes.java
Patch:
@@ -28,7 +28,7 @@ public interface HasExtensionAttributes {
 
   /**
    * return value of the attribute from given namespace with given name.
-   * 
+   *
    * @param namespace
    * @param name
    * @return attribute value or null in case when attribute was not found

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/ActivitiTaskAlreadyClaimedException.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * This exception is thrown when you try to claim a task that is already claimed by someone else.
- * 
+ *
 
 
  */

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/JobNotFoundException.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This exception is thrown when you try to execute a job that is not found (may be due to cancelActiviti="true" for instance)..
- * 
+ *
 
  */
 public class JobNotFoundException extends ActivitiObjectNotFoundException {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/delegate/event/ActivitiCancelledEvent.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * An {@link org.activiti.engine.delegate.event.ActivitiEvent} related to cancel event being sent when activiti object is cancelled.
- * 
+ *
 
  */
 public interface ActivitiCancelledEvent extends ActivitiEvent {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiSequenceFlowTakenEventImpl.java
Patch:
@@ -108,5 +108,5 @@ public String getTargetActivityBehaviorClass() {
   public void setTargetActivityBehaviorClass(String targetActivityBehaviorClass) {
     this.targetActivityBehaviorClass = targetActivityBehaviorClass;
   }
-  
+
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/history/NativeHistoricDetailQuery.java
Patch:
@@ -25,4 +25,4 @@
 @Internal
 public interface NativeHistoricDetailQuery extends NativeQuery<NativeHistoricDetailQuery, HistoricDetail> {
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/history/NativeHistoricVariableInstanceQuery.java
Patch:
@@ -25,4 +25,4 @@
 @Internal
 public interface NativeHistoricVariableInstanceQuery extends NativeQuery<NativeHistoricVariableInstanceQuery, HistoricVariableInstance> {
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/history/ProcessInstanceHistoryLogQuery.java
Patch:
@@ -20,9 +20,9 @@
 
 /**
  * Allows to fetch the {@link ProcessInstanceHistoryLog} for a process instance.
- * 
+ *
  * Note that every includeXXX() method below will lead to an additional query.
- * 
+ *
  * This class is actually a convenience on top of the other specific queries such as {@link HistoricTaskInstanceQuery}, {@link HistoricActivityInstanceQuery}, ... It will execute separate queries for
  * each included type, order the data according to the date (ascending) and wrap the results in the {@link ProcessInstanceHistoryLog}.
  *

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/DeploymentQueryImpl.java
Patch:
@@ -173,10 +173,10 @@ public DeploymentQueryImpl latest() {
   @Override
   public DeploymentQuery latestVersion() {
     this.latestVersion = true;
-    
+
     return this;
-  }  
-  
+  }
+
   // sorting ////////////////////////////////////////////////////////
 
   public DeploymentQuery orderByDeploymentId() {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/NativeHistoricDetailQueryImpl.java
Patch:
@@ -45,4 +45,4 @@ public long executeCount(CommandContext commandContext, Map<String, Object> para
     return commandContext.getHistoricDetailEntityManager().findHistoricDetailCountByNativeQuery(parameterMap);
   }
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/NativeHistoricVariableInstanceQueryImpl.java
Patch:
@@ -45,4 +45,4 @@ public long executeCount(CommandContext commandContext, Map<String, Object> para
     return commandContext.getHistoricVariableInstanceEntityManager().findHistoricVariableInstanceCountByNativeQuery(parameterMap);
   }
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeploymentHelper.java
Patch:
@@ -217,4 +217,3 @@ public void setEventSubscriptionManager(EventSubscriptionManager eventSubscripti
     this.eventSubscriptionManager = eventSubscriptionManager;
   }
 }
-

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/CachingAndArtifactsManager.java
Patch:
@@ -104,4 +104,3 @@ protected void addDefinitionInfoToCache(ProcessDefinitionEntity processDefinitio
     deploymentManager.getProcessDefinitionInfoCache().add(processDefinition.getId(), definitionCacheObject);
   }
 }
-

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/EventSubscriptionManager.java
Patch:
@@ -167,4 +167,3 @@ protected void addSignalEventSubscriptions(CommandContext commandContext,
         }
     }
 }
-

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/ParsedDeployment.java
Patch:
@@ -82,4 +82,3 @@ public Process getProcessModelForProcessDefinition(ProcessDefinitionEntity proce
   }
 
 }
-

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/ResourceNameUtil.java
Patch:
@@ -89,4 +89,3 @@ public static String getProcessDiagramResourceNameFromDeployment(
   }
 
 }
-

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/TimerManager.java
Patch:
@@ -97,4 +97,3 @@ protected List<TimerJobEntity> getTimerDeclarations(ProcessDefinitionEntity proc
     return timers;
   }
 }
-

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/MessageExecutionContextFactory.java
Patch:
@@ -20,7 +20,7 @@
 import org.activiti.engine.impl.el.ExpressionManager;
 
 public interface MessageExecutionContextFactory {
-    
+
     MessageExecutionContext create(MessageEventDefinition messageEventDefinition,
                                    MessagePayloadMappingProvider messagePayloadMappingProvider,
                                    ExpressionManager expressionManager);

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/CommandExecutorImpl.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Command executor that passes commands to the first interceptor in the chain. If no {@link CommandConfig} is passed, the default configuration will be used.
- * 
+ *
 
 
  */
@@ -39,7 +39,7 @@ public CommandExecutorImpl(CommandConfig defaultConfig, CommandInterceptor first
   public CommandInterceptor getFirst() {
     return first;
   }
-  
+
   public void setFirst(CommandInterceptor commandInterceptor) {
     this.first = commandInterceptor;
   }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CustomSqlExecution.java
Patch:
@@ -27,4 +27,4 @@ public interface CustomSqlExecution<Mapper, ResultType> {
 
   ResultType execute(Mapper mapper);
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/db/BulkDeleteable.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Marker interface to indicate the entity can be deleted in bulk.
- * 
+ *
 
  */
 @Internal

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/delegate/DefaultThrowMessageJavaDelegate.java
Patch:
@@ -23,4 +23,4 @@ public class DefaultThrowMessageJavaDelegate implements ThrowMessageDelegate {
     public boolean send(DelegateExecution execution, ThrowMessage message) {
         return true;
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/delegate/InactiveActivityBehavior.java
Patch:
@@ -20,9 +20,9 @@
 
 /**
  * If the behaviour of an element in a process implements this interface, it has a 'background job' functionality.
- * 
+ *
  * The instance will be called at the end of executing the engine operations for each {@link ExecutionEntity} that currently is at the activity AND is inactive.
- * 
+ *
 
  */
 @Internal

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityCompensatedEventHandler.java
Patch:
@@ -38,7 +38,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
- 
+
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityCompletedEventHandler.java
Patch:
@@ -39,7 +39,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
     putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
-    
+
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityErrorReceivedEventHandler.java
Patch:
@@ -38,7 +38,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
-    
+
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityMessageEventHandler.java
Patch:
@@ -38,7 +38,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, messageEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, messageEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, messageEvent.getActivityType());
-    
+
     putInMapIfNotNull(data, Fields.MESSAGE_NAME, messageEvent.getMessageName());
     putInMapIfNotNull(data, Fields.MESSAGE_DATA, messageEvent.getMessageData());
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivitySignaledEventHandler.java
Patch:
@@ -38,7 +38,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, signalEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, signalEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, signalEvent.getActivityType());
-    
+
     putInMapIfNotNull(data, Fields.SIGNAL_NAME, signalEvent.getSignalName());
     putInMapIfNotNull(data, Fields.SIGNAL_DATA, signalEvent.getSignalData());
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityStartedEventHandler.java
Patch:
@@ -39,7 +39,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
     putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
-    
+
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/SequenceFlowTakenEventHandler.java
Patch:
@@ -38,12 +38,12 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.SOURCE_ACTIVITY_NAME, sequenceFlowTakenEvent.getSourceActivityName());
     putInMapIfNotNull(data, Fields.SOURCE_ACTIVITY_TYPE, sequenceFlowTakenEvent.getSourceActivityType());
     putInMapIfNotNull(data, Fields.SOURCE_ACTIVITY_BEHAVIOR_CLASS, sequenceFlowTakenEvent.getSourceActivityBehaviorClass());
-    
+
     putInMapIfNotNull(data, Fields.TARGET_ACTIVITY_ID, sequenceFlowTakenEvent.getTargetActivityId());
     putInMapIfNotNull(data, Fields.TARGET_ACTIVITY_NAME, sequenceFlowTakenEvent.getTargetActivityName());
     putInMapIfNotNull(data, Fields.TARGET_ACTIVITY_TYPE, sequenceFlowTakenEvent.getTargetActivityType());
     putInMapIfNotNull(data, Fields.TARGET_ACTIVITY_BEHAVIOR_CLASS, sequenceFlowTakenEvent.getTargetActivityBehaviorClass());
-    
+
     return createEventLogEntry(event.getProcessDefinitionId(), event.getProcessInstanceId(), event.getExecutionId(), null, data);
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/TaskCompletedEventHandler.java
Patch:
@@ -31,7 +31,7 @@ public class TaskCompletedEventHandler extends AbstractTaskEventHandler {
 
   @Override
   public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
-    
+
     ActivitiEntityEvent activitiEntityEvent = (ActivitiEntityEvent) event;
 
     TaskEntity task = (TaskEntity) activitiEntityEvent.getEntity();
@@ -53,9 +53,9 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
           putInMapIfNotNull(data, Fields.VARIABLES, variableMap);
         }
       }
-  
+
     }
-    
+
     return createEventLogEntry(task.getProcessDefinitionId(), task.getProcessInstanceId(), task.getExecutionId(), task.getId(), data);
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryManager.java
Patch:
@@ -161,7 +161,7 @@ public interface HistoryManager {
    * Record task definition key change, if audit history is enabled.
    */
   void recordTaskDefinitionKeyChange(String taskId, String taskDefinitionKey);
-  
+
   /**
    * Record a change of the process-definition id of a task instance, if activity history is enabled.
    */

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandConfig.java
Patch:
@@ -19,9 +19,9 @@
 
 /**
  * Configuration settings for the command interceptor chain.
- * 
+ *
  * Instances of this class are immutable, and thus thread- and share-safe.
- * 
+ *
 
  */
 public class CommandConfig {
@@ -38,7 +38,7 @@ public CommandConfig(boolean contextReusePossible) {
     this.contextReusePossible = contextReusePossible;
     this.propagation = TransactionPropagation.REQUIRED;
   }
-  
+
   public CommandConfig(boolean contextReusePossible, TransactionPropagation transactionPropagation) {
     this.contextReusePossible = contextReusePossible;
     this.propagation = transactionPropagation;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerEventHandler.java
Patch:
@@ -23,7 +23,7 @@ public class TimerEventHandler {
   public static final String PROPERTYNAME_TIMER_ACTIVITY_ID = "activityId";
   public static final String PROPERTYNAME_END_DATE_EXPRESSION = "timerEndDate";
   public static final String PROPERTYNAME_CALENDAR_NAME_EXPRESSION = "calendarName";
-  
+
   public static String createConfiguration(String id, String endDate, String calendarName) {
     JSONObject cfgJson = new JSONObject();
     cfgJson.put(PROPERTYNAME_TIMER_ACTIVITY_ID, id);
@@ -54,7 +54,7 @@ public static String getActivityIdFromConfiguration(String jobHandlerConfigurati
       return jobHandlerConfiguration;
     }
   }
-  
+
   public static String geCalendarNameFromConfiguration(String jobHandlerConfiguration) {
     try {
       JSONObject cfgJson = new JSONObject(jobHandlerConfiguration);

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/ByteArrayRefTypeHandler.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * MyBatis TypeHandler for {@link ByteArrayRef}.
- * 
+ *
 
  */
 public class ByteArrayRefTypeHandler extends TypeReference<ByteArrayRef> implements TypeHandler<ByteArrayRef> {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/CachedEntityMatcher.java
Patch:
@@ -23,18 +23,18 @@
 
 /**
  * Interface to express a condition whether or not a cached entity should be used in the return result of a query.
- * 
+ *
 
  */
 @Internal
 public interface CachedEntityMatcher<EntityImpl extends Entity> {
 
   /**
    * Returns true if an entity from the cache should be retained (i.e. used as return result for a query).
-   * 
+   *
    * Most implementations of this interface probably don't need this method,
    * and should extend the simpler {@link CachedEntityMatcherAdapter}, which hides this method.
-   * 
+   *
    * Note that the databaseEntities collection can be null, in case only the cache is checked.
    */
   boolean isRetained(Collection<EntityImpl> databaseEntities, Collection<CachedEntity> cachedEntities, EntityImpl entity, Object param);

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/SingleCachedEntityMatcher.java
Patch:
@@ -20,12 +20,12 @@
 
 /**
  * Interface to express a condition whether or not one specific cached entity should be used in the return result of a query.
- * 
+ *
 
  */
 @Internal
 public interface SingleCachedEntityMatcher<EntityImpl extends Entity> {
 
   boolean isRetained(EntityImpl entity, Object param);
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayRef.java
Patch:
@@ -23,7 +23,7 @@
  * <p>
  * Encapsulates the logic for transparently working with {@link ByteArrayEntity} .
  * </p>
- * 
+ *
 
  */
 public class ByteArrayRef implements Serializable {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/util/condition/ConditionUtil.java
Patch:
@@ -41,7 +41,7 @@ public static boolean hasTrueCondition(SequenceFlow sequenceFlow, DelegateExecut
     } else {
       conditionExpression = sequenceFlow.getConditionExpression();
     }
-    
+
     if (StringUtils.isNotEmpty(conditionExpression)) {
 
       Expression expression = Context.getProcessEngineConfiguration().getExpressionManager().createExpression(conditionExpression);
@@ -57,7 +57,7 @@ public static boolean hasTrueCondition(SequenceFlow sequenceFlow, DelegateExecut
     }
 
   }
-    
+
   protected static String getActiveValue(String originalValue, String propertyName, ObjectNode elementProperties) {
     String activeValue = originalValue;
     if (elementProperties != null) {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/util/json/HTTPTokener.java
Patch:
@@ -41,15 +41,15 @@ of this software and associated documentation files (the "Software"), to deal
 
 /**
  * The HTTPTokener extends the JSONTokener to provide additional methods for the parsing of HTTP headers.
- * 
+ *
 
  * @version 2008-09-18
  */
 public class HTTPTokener extends JSONTokener {
 
   /**
    * Construct an HTTPTokener from a string.
-   * 
+   *
    * @param s
    *          A source string.
    */
@@ -59,7 +59,7 @@ public HTTPTokener(String s) {
 
   /**
    * Get the next token or string. This is used in parsing HTTP headers.
-   * 
+   *
    * @throws JSONException
    * @return A String.
    */

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/util/json/JSONException.java
Patch:
@@ -17,20 +17,20 @@
 
 /**
  * The JSONException is thrown by the JSON.org classes when things are amiss.
- * 
+ *
 
  * @version 2008-09-18
  */
 public class JSONException extends RuntimeException {
   /**
-	 * 
+	 *
 	 */
   private static final long serialVersionUID = 0;
   private Throwable cause;
 
   /**
    * Constructs a JSONException with an explanatory message.
-   * 
+   *
    * @param message
    *          Detail about the reason for the exception.
    */

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/util/json/JSONString.java
Patch:
@@ -23,7 +23,7 @@
 public interface JSONString {
   /**
    * The <code>toJSONString</code> method allows a class to produce its own JSON serialization.
-   * 
+   *
    * @return A strictly syntactically correct JSON text.
    */
   public String toJSONString();

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityListVariableType.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Variable type capable of storing a list of reference to JPA-entities. Only JPA-Entities which are configured by annotations are supported. Use of compound primary keys is not supported. <br>
  * The variable value should be of type {@link List} and can only contain objects of the same type.
- * 
+ *
 
  */
 public class JPAEntityListVariableType implements VariableType, CacheableVariable {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/logging/LogMDC.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Constants and functions for MDC (Mapped Diagnostic Context) logging
- * 
+ *
 
  */
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/repository/NativeDeploymentQuery.java
Patch:
@@ -25,4 +25,4 @@
 @Internal
 public interface NativeDeploymentQuery extends NativeQuery<NativeDeploymentQuery, Deployment> {
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/repository/NativeModelQuery.java
Patch:
@@ -25,4 +25,4 @@
 @Internal
 public interface NativeModelQuery extends NativeQuery<NativeModelQuery, Model> {
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/repository/NativeProcessDefinitionQuery.java
Patch:
@@ -25,4 +25,4 @@
 @Internal
 public interface NativeProcessDefinitionQuery extends NativeQuery<NativeProcessDefinitionQuery, ProcessDefinition> {
 
-}
\ No newline at end of file
+}

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/test/profiler/ActivitiProfiler.java
Patch:
@@ -58,7 +58,7 @@ public void configure(ProcessEngineConfigurationImpl processEngineConfiguration)
     public int getPriority() {
         return 0;
     }
-    
+
     public void reset() {
       if (currentProfileSession != null) {
         stopCurrentProfileSession();

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/test/profiler/CommandStats.java
Patch:
@@ -26,10 +26,10 @@
 public class CommandStats {
 
     protected long getTotalCommandTime = 0L;
-    
+
     protected List<Long> commandExecutionTimings = new ArrayList<Long>();
     protected List<Long> databaseTimings = new ArrayList<Long>();
-    
+
     protected Map<String, Long> dbSelects = new HashMap<String, Long>();
     protected Map<String, Long> dbInserts = new HashMap<String, Long>();
     protected Map<String, Long> dbUpdates = new HashMap<String, Long>();
@@ -38,7 +38,7 @@ public class CommandStats {
     public CommandStats(List<CommandExecutionResult> executions) {
         for (CommandExecutionResult execution : executions) {
             getTotalCommandTime += execution.getTotalTimeInMs();
-            
+
             commandExecutionTimings.add(execution.getTotalTimeInMs());
             databaseTimings.add(execution.getDatabaseTimeInMs());
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/regression/RegressionTest.java
Patch:
@@ -36,7 +36,7 @@ public void testAct1623() throws Exception {
 
         runtimeService.startProcessInstanceByKey("ProcessOne");
 
-        //Quick fix for random test failure on Travis
+        //Quick fix for random test failure on CI
         Thread.sleep(2000);
 
         // Clean

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1129,6 +1129,7 @@ public static Properties getDefaultDatabaseTypeMappings() {
     databaseTypeMappings.setProperty("DB2/PTX", DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/2", DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2 UDB AS400", DATABASE_TYPE_DB2);
+    databaseTypeMappings.setProperty("MariaDB", DATABASE_TYPE_MYSQL);
     return databaseTypeMappings;
   }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/task/Task.java
Patch:
@@ -30,7 +30,7 @@ public interface Task extends TaskInfo {
   /**
    * Default value used for priority when a new {@link Task} is created.
    */
-  int DEFAULT_PRIORITY = 50;
+  int DEFAULT_PRIORITY = 0;
 
   /** Name or title of the task. */
   void setName(String name);

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/DynamicUserTaskTest.java
Patch:
@@ -345,7 +345,7 @@ public void testChangePriorityAndCategory() {
     String processDefinitionId = processInstance.getProcessDefinitionId();
 
     Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
-    assertThat(task.getPriority()).isEqualTo(50);
+    assertThat(task.getPriority()).isEqualTo(0);
     assertThat(task.getCategory()).isNull();
     taskService.complete(task.getId());
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -43,7 +43,7 @@ public void testTaskPropertiesNotNull() {
     assertThat(task.getId()).isNotNull();
     assertThat(task.getName()).isEqualTo("my task");
     assertThat(task.getDescription()).isEqualTo("Very important");
-    assertThat(task.getPriority() > 0).isTrue();
+    assertThat(task.getPriority() == 0).isTrue();
     assertThat(task.getAssignee()).isEqualTo("kermit");
     assertThat(task.getProcessInstanceId()).isEqualTo(processInstance.getId());
     assertThat(task.getProcessDefinitionId()).isNotNull();

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/VariableUpdatedEvent.java
Patch:
@@ -17,4 +17,5 @@
 
 public interface VariableUpdatedEvent extends VariableEvent {
 
+    <T> T getPreviousValue();
 }

File: activiti-core/activiti-api-impl/activiti-api-model-shared-impl/src/main/java/org/activiti/api/runtime/event/impl/VariableCreatedEventImpl.java
Patch:
@@ -26,10 +26,12 @@ public VariableCreatedEventImpl() {
 
     public VariableCreatedEventImpl(VariableInstance entity) {
         super(entity);
+        setProcessInstanceId(entity.getProcessInstanceId());
     }
 
     @Override
     public VariableEvent.VariableEvents getEventType() {
         return VariableEvent.VariableEvents.VARIABLE_CREATED;
     }
+
 }

File: activiti-core/activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/event/impl/ToVariableDeletedConverter.java
Patch:
@@ -29,8 +29,8 @@ public Optional<VariableDeletedEvent> from(ActivitiVariableEvent internalEvent)
         VariableInstanceImpl<Object> variableInstance = new VariableInstanceImpl<>(internalEvent.getVariableName(),
                                                                                    internalEvent.getVariableType().getTypeName(),
                                                                                    internalEvent.getVariableValue(),
-                                                                                   internalEvent.getProcessInstanceId());
-        variableInstance.setTaskId(internalEvent.getTaskId());
+                                                                                   internalEvent.getProcessInstanceId(),
+                                                                                   internalEvent.getTaskId());
         return Optional.of(new VariableDeletedEventImpl(variableInstance));
     }
 }

File: activiti-core/activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/event/internal/VariableUpdatedListenerDelegate.java
Patch:
@@ -21,7 +21,7 @@
 import org.activiti.api.runtime.shared.events.VariableEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
-import org.activiti.engine.delegate.event.ActivitiVariableEvent;
+import org.activiti.engine.delegate.event.ActivitiVariableUpdatedEvent;
 import org.activiti.runtime.api.event.impl.ToVariableUpdatedConverter;
 
 public class VariableUpdatedListenerDelegate implements ActivitiEventListener {
@@ -43,8 +43,8 @@ public VariableUpdatedListenerDelegate(
 
     @Override
     public void onEvent(ActivitiEvent event) {
-        if (event instanceof ActivitiVariableEvent) {
-            ActivitiVariableEvent internalEvent = (ActivitiVariableEvent) event;
+        if (event instanceof ActivitiVariableUpdatedEvent) {
+            ActivitiVariableUpdatedEvent internalEvent = (ActivitiVariableUpdatedEvent) event;
             if (variableEventFilter.shouldEmmitEvent(internalEvent)) {
                 converter.from(internalEvent)
                     .ifPresent(convertedEvent -> {

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeIT.java
Patch:
@@ -291,6 +291,7 @@ public void should_startAnAlreadyCreatedProcess_when_startCreatedProcessIsCalled
         assertThat(RuntimeTestConfiguration.createdTasks).contains(tasks.getContent().get(0).getId());
         assertThat(singleTaskProcessStarted).isNotNull();
         assertThat(singleTaskProcessStarted.getStatus()).isEqualTo(ProcessInstance.ProcessInstanceStatus.RUNNING);
+        assertThat(processRuntime.processInstance(singleTaskProcessStarted.getId()).getStatus()).isEqualTo(ProcessInstance.ProcessInstanceStatus.RUNNING);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ProcessRuntimeImplTest.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.util.HashMap;
 import java.util.List;
+
 import org.activiti.api.process.model.ProcessInstance;
 import org.activiti.api.process.model.builders.ProcessPayloadBuilder;
 import org.activiti.api.process.model.payloads.CreateProcessInstancePayload;
@@ -84,7 +85,7 @@ public class ProcessRuntimeImplTest {
     private ProcessVariablesPayloadValidator processVariableValidator;
 
     @Mock
-    APIProcessDefinitionConverter processDefinitionConverter;
+    private APIProcessDefinitionConverter processDefinitionConverter;
 
     @BeforeEach
     public void setUp() {

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/conf/TaskRuntimeAutoConfiguration.java
Patch:
@@ -181,9 +181,9 @@ public InitializingBean registerTaskAssignedEventListener(RuntimeService runtime
     @Bean
     public InitializingBean registerTaskCompletedEventListener(RuntimeService runtimeService,
                                                                @Autowired(required = false) List<TaskRuntimeEventListener<TaskCompletedEvent>> listeners,
-                                                               APITaskConverter taskConverter) {
+                                                               APITaskConverter taskConverter, SecurityManager securityManager) {
         return () -> runtimeService.addEventListener(new TaskCompletedListenerDelegate(getInitializedTaskRuntimeEventListeners(listeners),
-                                                                                       new ToTaskCompletedConverter(taskConverter)),
+                                                                                       new ToTaskCompletedConverter(taskConverter, securityManager)),
                                                      ActivitiEventType.TASK_COMPLETED);
     }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.activiti.engine.impl.jobexecutor;
 
+import java.util.HashMap;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.delegate.event.ActivitiEventType;
@@ -64,7 +65,7 @@ public void execute(JobEntity job, String configuration, ExecutionEntity executi
             throw new ActivitiException("Could not find matching FlowElement for activityId " + activityId);
           }
           ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, null, null, true);
+          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, new HashMap<>(), null, true);
         } else {
           new StartProcessInstanceCmd(processDefinitionEntity.getKey(), null, null, null, job.getTenantId()).execute(commandContext);
         }

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNMessageIT.java
Patch:
@@ -279,7 +279,7 @@ public void shouldStartProcessByMessageWithMappedPayload() {
                                                         null,
                                                         process.getBusinessKey(),
                                                         singletonMap("message_variable_name",
-                                                                                 "value")));
+                                                                     "value")));
 
         // and
         List<VariableInstance> variables = processRuntime.variables(ProcessPayloadBuilder.variables()

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskVariablesLocalCopiesTest.java
Patch:
@@ -90,7 +90,7 @@ public void shouldGetAvailableProcessDefinitionForTheGivenUser() {
     }
 
     @Test
-    public void processInstanceVariablesCopiedIntoTasksByDefault() {
+    public void should_processInstanceVariablesBeCopiedIntoTasks() {
 
         securityUtil.logInAs("user");
 

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessBaseRuntime.java
Patch:
@@ -26,9 +26,9 @@
 import org.activiti.api.runtime.shared.query.Pageable;
 import org.activiti.spring.boot.security.util.SecurityUtil;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class ProcessBaseRuntime {
 
     public static final Pageable DEFAULT_PAGEABLE = Pageable.of(0,

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessDeployedEventIT.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.List;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
-@Import(DeployedProcessesListener.class)
 public class ProcessDeployedEventIT {
 
     private static final String CATEGORIZE_PROCESS = "categorizeProcess";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessExtensionsIT.java
Patch:
@@ -40,10 +40,8 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.ContextConfiguration;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@ContextConfiguration
 public class ProcessExtensionsIT {
 
     private static final String INITIAL_VARS_PROCESS = "Process_initialVarsProcess";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessExtensionsJsonVarsTest.java
Patch:
@@ -43,7 +43,6 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@ContextConfiguration
 public class ProcessExtensionsJsonVarsTest {
 
     private static final String JSON_VARS_PROCESS = "jsonVarsProcess";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNErrorReceivedIT.java
Patch:
@@ -40,7 +40,6 @@
 import org.springframework.context.annotation.Import;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@Import(DummyBPMNErrorReceivedListener.class)
 public class ProcessRuntimeBPMNErrorReceivedIT {
 
     private static final String ERROR_BOUNDARY_EVENT_SUBPROCESS = "errorBoundaryEventSubProcess";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNSignalReceivedIT.java
Patch:
@@ -40,7 +40,6 @@
 import org.springframework.context.annotation.Import;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@Import(DummyBPMNSignalReceivedListener.class)
 public class ProcessRuntimeBPMNSignalReceivedIT {
 
     private static final String PROCESS_WITH_BOUNDARY_SIGNAL = "ProcessWithBoundarySignal";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeTerminatedEndEventIT.java
Patch:
@@ -33,10 +33,8 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.ContextConfiguration;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@ContextConfiguration
 public class ProcessRuntimeTerminatedEndEventIT {
 
     private static final String PROCESS_TERMINATE_EVENT = "Process_KzwZAEl-";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/TimerTestConfigurator.java
Patch:
@@ -17,11 +17,11 @@
 
 import org.activiti.spring.SpringProcessEngineConfiguration;
 import org.activiti.spring.boot.ProcessEngineConfigurationConfigurer;
-import org.springframework.boot.test.context.TestComponent;
 import org.springframework.context.annotation.Profile;
+import org.springframework.stereotype.Component;
 
 @Profile(ProcessRuntimeBPMNTimerIT.PROCESS_RUNTIME_BPMN_TIMER_IT)
-@TestComponent
+@Component
 public class TimerTestConfigurator implements ProcessEngineConfigurationConfigurer {
 
     @Override

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/listener/DeployedProcessesListener.java
Patch:
@@ -23,9 +23,9 @@
 import org.activiti.api.process.model.ProcessDefinition;
 import org.activiti.api.process.model.events.ProcessDeployedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class DeployedProcessesListener implements ProcessRuntimeEventListener<ProcessDeployedEvent> {
 
     private List<ProcessDefinition> deployedProcesses = new ArrayList<>();

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/listener/DummyBPMNErrorReceivedListener.java
Patch:
@@ -20,9 +20,9 @@
 
 import org.activiti.api.process.model.events.BPMNErrorReceivedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class DummyBPMNErrorReceivedListener implements BPMNElementEventListener<BPMNErrorReceivedEvent> {
 
     private List<BPMNErrorReceivedEvent> errorReceivedEvents = new LinkedList<>();

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/listener/DummyBPMNSignalReceivedListener.java
Patch:
@@ -20,9 +20,9 @@
 
 import org.activiti.api.process.model.events.BPMNSignalReceivedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class DummyBPMNSignalReceivedListener implements BPMNElementEventListener<BPMNSignalReceivedEvent> {
 
     private List<BPMNSignalReceivedEvent> signalReceivedEvents = new LinkedList<>();

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskBaseRuntime.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.List;
 import java.util.Map;
-
 import org.activiti.api.model.shared.model.VariableInstance;
 import org.activiti.api.process.model.ProcessInstance;
 import org.activiti.api.runtime.shared.query.Pageable;
@@ -29,9 +28,9 @@
 import org.activiti.api.task.model.builders.TaskPayloadBuilder;
 import org.activiti.api.task.runtime.TaskRuntime;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class TaskBaseRuntime {
 
     @Autowired

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeFormKeyTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@ContextConfiguration
 public class TaskRuntimeFormKeyTest {
 
     private static final String SINGLE_TASK_PROCESS = "SingleTaskProcess";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeMultiInstanceIT.java
Patch:
@@ -54,12 +54,9 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.annotation.Import;
 import org.springframework.test.context.ActiveProfiles;
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
 @ActiveProfiles(ProcessRuntimeBPMNTimerIT.PROCESS_RUNTIME_BPMN_TIMER_IT)
-@Import({TimerTestConfigurator.class,
-        MealsConnectorConfiguration.class})
 public class TaskRuntimeMultiInstanceIT {
 
     @Autowired

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeVariableMappingIT.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
 import org.activiti.api.model.shared.model.VariableInstance;
 import org.activiti.api.process.model.ProcessInstance;
 import org.activiti.api.task.model.Task;
@@ -34,10 +33,8 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.ContextConfiguration;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@ContextConfiguration
 public class TaskRuntimeVariableMappingIT {
 
     private static final String TASK_VAR_MAPPING = "taskVarMapping";

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/test/util/ProcessCleanUpUtil.java
Patch:
@@ -22,9 +22,9 @@
 import org.activiti.api.runtime.shared.query.Pageable;
 import org.activiti.spring.boot.security.util.SecurityUtil;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class ProcessCleanUpUtil {
 
     @Autowired

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/test/util/TaskCleanUpUtil.java
Patch:
@@ -22,9 +22,9 @@
 import org.activiti.api.task.runtime.TaskAdminRuntime;
 import org.activiti.spring.boot.security.util.SecurityUtil;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.TestComponent;
+import org.springframework.stereotype.Component;
 
-@TestComponent
+@Component
 public class TaskCleanUpUtil {
 
     @Autowired

File: activiti-core/activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/event/internal/VariableEventFilter.java
Patch:
@@ -21,7 +21,7 @@
 public class VariableEventFilter {
 
     public boolean shouldEmmitEvent(ActivitiVariableEvent event) {
-        return event.getExecutionId().equals(event.getProcessInstanceId()) || event.getTaskId() != null;
+        return  event.getTaskId() != null || event.getExecutionId().equals(event.getProcessInstanceId());
     }
 
 }

File: activiti-core/activiti-spring-conformance-tests/activiti-spring-conformance-set1/src/test/java/org/activiti/spring/conformance/set1/ConformanceServiceTaskModifyVariableTest.java
Patch:
@@ -116,15 +116,14 @@ public void shouldBeAbleToStartProcess() {
                         BPMNActivityEvent.ActivityEvents.ACTIVITY_COMPLETED,
                         BPMNSequenceFlowTakenEvent.SequenceFlowEvents.SEQUENCE_FLOW_TAKEN,
                         BPMNActivityEvent.ActivityEvents.ACTIVITY_STARTED,
-                        VariableEvent.VariableEvents.VARIABLE_CREATED,
                         VariableEvent.VariableEvents.VARIABLE_UPDATED,
                         BPMNActivityEvent.ActivityEvents.ACTIVITY_COMPLETED,
                         BPMNSequenceFlowTakenEvent.SequenceFlowEvents.SEQUENCE_FLOW_TAKEN,
                         BPMNActivityEvent.ActivityEvents.ACTIVITY_STARTED,
                         BPMNActivityEvent.ActivityEvents.ACTIVITY_COMPLETED,
                         ProcessRuntimeEvent.ProcessEvents.PROCESS_COMPLETED);
 
-        assertThat((String)((VariableUpdatedEvent)RuntimeTestConfiguration.collectedEvents.get(8)).getEntity().getValue()).isEqualTo("value1-modified");
+        assertThat((String)((VariableUpdatedEvent)RuntimeTestConfiguration.collectedEvents.get(7)).getEntity().getValue()).isEqualTo("value1-modified");
 
     }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BpmnActivityBehavior.java
Patch:
@@ -110,7 +110,7 @@ protected ActivitiEngineAgenda getAgenda() {
     private void propagateVariablesToParent(ExecutionEntity execution) {
         ExecutionEntity parentExecution = execution.getParent();
         if (parentExecution != null) {
-            parentExecution.setVariablesLocal(variablesCalculator
+            parentExecution.setVariables(variablesCalculator
                 .calculateOutPutVariables(buildMappingExecutionContext(execution), execution.getVariablesLocal()));
         }
     }

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/bpmn/behavior/BpmnActivityBehaviorTest.java
Patch:
@@ -66,7 +66,7 @@ public void performDefaultOutgoingBehavior_should_propagateVariablesToParentAndP
         bpmnActivityBehavior.performDefaultOutgoingBehavior(execution);
 
         //then
-        verify(parentExecution).setVariablesLocal(calculatedVariables);
+        verify(parentExecution).setVariables(calculatedVariables);
         verify(agenda).planTakeOutgoingSequenceFlowsOperation(execution, true);
 
     }

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/MealsConnector.java
Patch:
@@ -28,11 +28,14 @@ public class MealsConnector implements Connector {
 
     private List<String> meals = Arrays.asList("pizza", "pasta");
 
+    private List<String> sizes = Arrays.asList("small", "medium");
+
     @Override
     public IntegrationContext apply(
         IntegrationContext integrationContext) {
         int remainder = currentMealIndex.getAndIncrement() % meals.size();
         integrationContext.addOutBoundVariable("meal", meals.get(remainder));
+        integrationContext.addOutBoundVariable("size", sizes.get(remainder));
         return integrationContext;
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/connector/IntegrationContextBuilderTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.integration.IntegrationContextEntityImpl;
 import org.activiti.engine.repository.ProcessDefinition;
-import org.activiti.runtime.api.impl.VariablesMappingProvider;
+import org.activiti.runtime.api.impl.ExtensionsVariablesMappingProvider;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.InjectMocks;
@@ -53,7 +53,7 @@ public class IntegrationContextBuilderTest {
     private IntegrationContextBuilder builder;
 
     @Mock
-    private VariablesMappingProvider inboundVariablesProvider;
+    private ExtensionsVariablesMappingProvider inboundVariablesProvider;
 
     @BeforeEach
     public void setUp() {

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ExtensionsVariablesMappingProviderTest.java
Patch:
@@ -16,9 +16,9 @@
 package org.activiti.runtime.api.impl;
 
 import static java.util.Arrays.asList;
+import static org.activiti.engine.impl.bpmn.behavior.MappingExecutionContext.buildMappingExecutionContext;
 import static org.activiti.engine.impl.util.CollectionUtil.map;
 import static org.activiti.engine.impl.util.CollectionUtil.singletonMap;
-import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMappingExecutionContext;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assertions.tuple;
@@ -41,10 +41,10 @@
 import org.mockito.Mock;
 import org.springframework.test.util.ReflectionTestUtils;
 
-public class VariablesMappingProviderTest {
+public class ExtensionsVariablesMappingProviderTest {
 
     @InjectMocks
-    private VariablesMappingProvider variablesMappingProvider;
+    private ExtensionsVariablesMappingProvider variablesMappingProvider;
 
     @Mock
     private ProcessExtensionService processExtensionService;

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/MappingAwareCallActivityBehaviorTest.java
Patch:
@@ -28,7 +28,7 @@
 
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.singletonMap;
-import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMappingExecutionContext;
+import static org.activiti.engine.impl.bpmn.behavior.MappingExecutionContext.buildMappingExecutionContext;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
@@ -40,7 +40,7 @@ public class MappingAwareCallActivityBehaviorTest {
     private MappingAwareCallActivityBehavior behavior;
 
     @Mock
-    private VariablesMappingProvider mappingProvider;
+    private ExtensionsVariablesMappingProvider mappingProvider;
 
     @Mock
     private ProcessVariablesInitiator processVariablesInitiator;

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/MappingAwareUserTaskBehaviorTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.singletonMap;
-import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMappingExecutionContext;
+import static org.activiti.engine.impl.bpmn.behavior.MappingExecutionContext.buildMappingExecutionContext;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
@@ -37,7 +37,7 @@ public class MappingAwareUserTaskBehaviorTest {
     private MappingAwareUserTaskBehavior behavior;
 
     @Mock
-    private VariablesMappingProvider mappingProvider;
+    private ExtensionsVariablesMappingProvider mappingProvider;
 
     @BeforeEach
     public void setUp() throws Exception {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MappingExecutionContext.java
Patch:
@@ -13,10 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.runtime.api.impl;
+package org.activiti.engine.impl.bpmn.behavior;
 
 import java.util.Objects;
-
 import org.activiti.engine.delegate.DelegateExecution;
 
 public class MappingExecutionContext {

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/cfg/executioncount/VerifyDatabaseOperationsTest.java
Patch:
@@ -252,7 +252,8 @@ public void testOneTaskProcess() {
         "selectIdentityLinksByTask", 1L,
         "selectVariablesByTaskId", 1L,
         "selectExecutionsWithSameRootProcessInstanceId", 1L,
-        "selectTasksByExecutionId", 1L
+        "selectTasksByExecutionId", 1L,
+        "selectVariablesByExecutionId", 1L
         );
     assertDatabaseInserts("CompleteTaskCmd",
         "HistoricActivityInstanceEntityImpl", 1L);

File: activiti-core/activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -38,7 +38,7 @@
 import org.activiti.engine.impl.event.EventSubscriptionPayloadMappingProvider;
 import org.activiti.engine.impl.persistence.StrongUuidGenerator;
 import org.activiti.runtime.api.event.impl.StartMessageSubscriptionConverter;
-import org.activiti.runtime.api.impl.VariablesMappingProvider;
+import org.activiti.runtime.api.impl.ExtensionsVariablesMappingProvider;
 import org.activiti.runtime.api.model.impl.APIProcessDefinitionConverter;
 import org.activiti.spring.ProcessDeployedEventProducer;
 import org.activiti.spring.SpringAsyncExecutor;
@@ -230,7 +230,8 @@ public StartMessageDeployedEventProducer startMessageDeployedEventProducer(Repos
 
     @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)
     @ConditionalOnMissingBean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)
-    public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,
+    public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(
+        ExtensionsVariablesMappingProvider variablesMappingProvider,
                                                                                                            ProcessVariablesInitiator processVariablesInitiator,
                                                                                                            EventSubscriptionPayloadMappingProvider eventSubscriptionPayloadMappingProvider) {
         return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityImpl.java
Patch:
@@ -473,7 +473,7 @@ public ExecutionEntity getRootProcessInstance() {
   }
 
   protected void ensureRootProcessInstanceInitialized() {
-    if (rootProcessInstanceId == null) {
+    if (rootProcessInstance == null) {
       rootProcessInstance = (ExecutionEntityImpl) Context.getCommandContext().getExecutionEntityManager().findById(rootProcessInstanceId);
     }
   }

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/EmptyResult.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared;
 
 public class EmptyResult extends Result<Void> {

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/RuntimeEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.event;
 
 import java.io.Serializable;

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/VariableCreatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.event;
 
 public interface VariableCreatedEvent extends VariableEvent {

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/VariableDeletedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.event;
 
 public interface VariableDeletedEvent extends VariableEvent {

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/VariableEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.event;
 
 

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/VariableUpdatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.event;
 
 public interface VariableUpdatedEvent extends VariableEvent {

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/model/ApplicationElement.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.model;
 
 public interface ApplicationElement {

File: activiti-api/activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/model/VariableInstance.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.model.shared.model;
 
 public interface VariableInstance {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNElement.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 public interface BPMNElement {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNError.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 public interface BPMNError extends BPMNActivity {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNMessage.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import org.activiti.api.process.model.payloads.MessageEventPayload;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNSequenceFlow.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 public interface BPMNSequenceFlow extends BPMNElement {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNSignal.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import org.activiti.api.process.model.payloads.SignalPayload;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNTimer.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import org.activiti.api.process.model.payloads.TimerPayload;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/IntegrationContext.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import java.util.Map;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessDefinition.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import org.activiti.api.model.shared.model.ApplicationElement;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessDefinitionMeta.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 public interface ProcessDefinitionMeta {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessInstance.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import java.util.Date;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessInstanceMeta.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model;
 
 import java.util.List;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/MessageEventPayloadBuilder.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.builders;
 
 import java.util.LinkedHashMap;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/MessagePayloadBuilder.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.builders;
 
 import org.activiti.api.process.model.payloads.MessageEventPayload;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/ReceiveMessagePayloadBuilder.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.builders;
 
 import java.util.LinkedHashMap;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/StartMessagePayloadBuilder.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNMessageEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNMessageReceivedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNMessageReceivedEvent extends BPMNMessageEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNMessageSentEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNMessageSentEvent extends BPMNMessageEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNMessageWaitingEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNMessageWaitingEvent extends BPMNMessageEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNSequenceFlowTakenEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNSequenceFlowTakenEvent extends SequenceFlowEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNSignalEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNSignalReceivedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNSignalReceivedEvent extends BPMNSignalEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerCancelledEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNTimerCancelledEvent extends BPMNTimerEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerExecutedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNTimerExecutedEvent extends BPMNTimerEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerFailedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNTimerFailedEvent extends BPMNTimerEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerFiredEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNTimerFiredEvent extends BPMNTimerEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerRetriesDecrementedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNTimerRetriesDecrementedEvent extends BPMNTimerEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNTimerScheduledEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface BPMNTimerScheduledEvent extends BPMNTimerEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ExtendedProcessRuntimeEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/IntegrationEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/MessageDefinitionEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/MessageSubscriptionCancelledEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface MessageSubscriptionCancelledEvent extends MessageSubscriptionEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/MessageSubscriptionEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ProcessDefinitionEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ProcessDeployedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 public interface ProcessDeployedEvent extends ProcessDefinitionEvent {

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ProcessRuntimeEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/SequenceFlowEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.process.model.BPMNSequenceFlow;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/StartMessageDeployedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.model.events;
 
 import org.activiti.api.process.model.StartMessageDeploymentDefinition;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/payloads/ReceiveMessagePayload.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/payloads/StartMessagePayload.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessCancelledEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessCompletedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessCreatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessResumedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessStartedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessSuspendedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/runtime/events/ProcessUpdatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/ProcessAdminRuntime.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime;
 
 

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/ProcessRuntime.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime;
 
 import java.util.List;

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/conf/ProcessRuntimeConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.conf;
 
 import java.util.List;

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/connector/Connector.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.connector;
 
 import org.activiti.api.process.model.IntegrationContext;

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/events/listener/BPMNElementEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events.listener;
 
 

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/events/listener/ProcessEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events.listener;
 
 

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/events/listener/ProcessRuntimeEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.process.runtime.events.listener;
 
 

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/NotFoundException.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared;
 
 public class NotFoundException extends RuntimeException {

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/UnprocessableEntityException.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2020 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared;
 
 public class UnprocessableEntityException extends IllegalArgumentException {

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/events/VariableEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/query/Order.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.query;
 
 public class Order {

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/query/Page.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.query;
 
 import java.util.List;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/query/Pageable.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.query;
 
 public class Pageable {

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/AbstractSecurityManager.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.util.List;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/PrincipalGroupsProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.security.Principal;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/PrincipalIdentityProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.security.Principal;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/PrincipalRolesProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.security.Principal;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/SecurityContextPrincipalProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.security.Principal;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/SecurityContextTokenProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.util.Optional;

File: activiti-api/activiti-api-runtime-shared/src/main/java/org/activiti/api/runtime/shared/security/SecurityManager.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.shared.security;
 
 import java.util.List;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/Task.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model;
 
 import org.activiti.api.model.shared.model.ApplicationElement;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/TaskCandidate.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model;
 
 public interface TaskCandidate {

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/TaskCandidateGroup.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model;
 
 public interface TaskCandidateGroup extends TaskCandidate {

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/TaskCandidateUser.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model;
 
 public interface TaskCandidateUser extends TaskCandidate{

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/events/TaskCandidateGroupEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model.events;
 
 

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/events/TaskCandidateUserEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/model/events/TaskRuntimeEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.model.events;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskActivatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskRuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskAssignedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskRuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCancelledEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskRuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCandidateGroupAddedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskCandidateGroupEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCandidateGroupRemovedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskCandidateGroupEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCandidateUserAddedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskCandidateUserEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCandidateUserRemovedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskCandidateUserEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCompletedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskRuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCreatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskSuspendedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.events.TaskRuntimeEvent;

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskUpdatedEvent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events;
 
 import org.activiti.api.task.model.Task;

File: activiti-api/activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/TaskAdminRuntime.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime;
 
 import java.util.List;

File: activiti-api/activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/TaskRuntime.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime;
 
 import java.util.List;

File: activiti-api/activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/conf/TaskRuntimeConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.conf;
 
 import java.util.List;

File: activiti-api/activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/events/listener/TaskCandidateEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events.listener;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/events/listener/TaskEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events.listener;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-api/activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/events/listener/TaskRuntimeEventListener.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.task.runtime.events.listener;
 
 import org.activiti.api.model.shared.event.RuntimeEvent;

File: activiti-core-common/activiti-common-util/src/test/java/org/activiti/common/util/DateFormatterProviderTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.common.util;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/EventSource.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/TaskSource.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/AwaitProcessInstanceAssertions.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/AwaitSignalAssertions.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/AwaitTaskAssertions.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import org.activiti.api.task.model.Task;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/ProcessInstanceAssertions.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/ProcessInstanceAssertionsImpl.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/SignalAssertions.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/SignalAssertionsImpl.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/TaskAssertions.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import org.activiti.api.task.model.Task;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/assertions/TaskAssertionsImpl.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.assertions;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/conf/AssertionsAPIAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.conf;
 
 import org.activiti.test.operations.AwaitableProcessOperations;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ActivityMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/BPMNStartEventMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class BPMNStartEventMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/EndEventMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class EndEventMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ExclusiveGatewayMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class ExclusiveGatewayMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/InclusiveGatewayMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class InclusiveGatewayMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/IntermediateCatchEventMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class IntermediateCatchEventMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ManualTaskMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class ManualTaskMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/OperationScope.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public interface OperationScope {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/OperationScopeImpl.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class OperationScopeImpl implements OperationScope {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/OperationScopeMatcher.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessInstanceMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessResultMatcher.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import org.activiti.api.process.model.ProcessInstance;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessTaskMatcher.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessTaskMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessVariableMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/SequenceFlowMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/SignalMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/TaskMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/TaskResultMatcher.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 import org.activiti.api.task.model.Task;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ThrowEventMatchers.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.matchers;
 
 public class ThrowEventMatchers extends ActivityMatchers {

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/operations/AwaitableProcessOperations.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.operations;
 
 import org.activiti.api.process.model.payloads.SignalPayload;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/operations/AwaitableTaskOperations.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.operations;
 
 import org.activiti.api.task.model.payloads.ClaimTaskPayload;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/operations/ProcessOperations.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.operations;
 
 import org.activiti.api.process.model.payloads.SignalPayload;

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/operations/TaskOperations.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.operations;
 
 import org.activiti.api.task.model.payloads.ClaimTaskPayload;

File: activiti-core-common/activiti-core-test/activiti-core-test-local-runtime/src/main/java/org/activiti/test/LocalEventSource.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test;
 
 import static java.util.Arrays.asList;

File: activiti-core-common/activiti-core-test/activiti-core-test-local-runtime/src/main/java/org/activiti/test/LocalTaskSource.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-local-runtime/src/main/java/org/activiti/test/config/ActivitiAssertionsAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.config;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-local-runtime/src/main/java/org/activiti/test/operations/ProcessRuntimeOperations.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.operations;
 
 import java.util.List;

File: activiti-core-common/activiti-core-test/activiti-core-test-local-runtime/src/main/java/org/activiti/test/operations/TaskRuntimeOperations.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.test.operations;
 
 import java.util.List;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationContent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import static java.util.Collections.emptyList;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationDiscovery.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import static java.util.Arrays.asList;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationEntry.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 public class ApplicationEntry {

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationEntryDiscovery.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import java.util.function.Predicate;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationLoadException.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 public class ApplicationLoadException extends RuntimeException {

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationReader.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationService.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/FileContent.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 public class FileContent {

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/conf/ApplicationAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application.conf;
 
 import static java.util.Collections.emptyList;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/deployer/ApplicationDeployer.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application.deployer;
 
 import java.util.List;

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/deployer/ApplicationEntryDeployer.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application.deployer;
 
 import org.activiti.application.ApplicationContent;

File: activiti-core-common/activiti-spring-application/src/test/java/org/activiti/application/ApplicationDiscoveryTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-application/src/test/java/org/activiti/application/ApplicationServiceTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-application/src/test/java/org/activiti/application/deployer/ApplicationDeployerTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.application.deployer;
 
 import org.activiti.application.ApplicationContent;

File: activiti-core-common/activiti-spring-connector/src/main/java/org/activiti/core/common/spring/connector/ConnectorDefinitionService.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.connector;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-connector/src/main/java/org/activiti/core/common/spring/connector/autoconfigure/ConnectorAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.connector.autoconfigure;
 
 import static java.util.Collections.emptyList;

File: activiti-core-common/activiti-spring-connector/src/test/java/org/activiti/core/common/spring/connector/ConnectorDefinitionServiceIT.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.connector;
 
 import org.activiti.core.common.model.connector.ConnectorDefinition;

File: activiti-core-common/activiti-spring-connector/src/test/java/org/activiti/core/common/spring/connector/ConnectorDefinitionServiceTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.connector;
 
 import com.fasterxml.jackson.databind.ObjectMapper;

File: activiti-core-common/activiti-spring-connector/src/test/java/org/activiti/core/common/spring/connector/EmptyConnectorDefinitionServiceIT.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.connector;
 
 import org.activiti.core.common.model.connector.ConnectorDefinition;

File: activiti-core-common/activiti-spring-connector/src/test/java/org/activiti/core/common/spring/connector/MultipleConnectorDefinitionServiceIT.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.connector;
 
 import org.activiti.core.common.model.connector.ConnectorDefinition;

File: activiti-core-common/activiti-spring-identity/src/test/java/org/activiti/core/common/spring/identity/ActivitiUserGroupManagerImplIT.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.identity;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-resource-finder/src/main/java/org/activiti/spring/resources/ResourceFinder.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.spring.resources;
 
 import static java.util.Arrays.asList;

File: activiti-core-common/activiti-spring-resource-finder/src/main/java/org/activiti/spring/resources/ResourceFinderDescriptor.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.spring.resources;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-resource-finder/src/main/java/org/activiti/spring/resources/ResourceReader.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.spring.resources;
 
 import java.io.IOException;

File: activiti-core-common/activiti-spring-resource-finder/src/main/java/org/activiti/spring/resources/conf/ResourceFinderAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.spring.resources.conf;
 
 import org.activiti.spring.resources.ResourceFinder;

File: activiti-core-common/activiti-spring-resource-finder/src/test/java/org/activiti/spring/resources/DummyResourceFinderDescriptor.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.spring.resources;
 
 import static java.util.Arrays.asList;

File: activiti-core-common/activiti-spring-resource-finder/src/test/java/org/activiti/spring/resources/ResourceFinderIT.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2019 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.spring.resources;
 
 import java.util.List;

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesProcessDefinitionRestrictionApplier.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.policies;
 
 import org.activiti.api.process.model.builders.ProcessPayloadBuilder;

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesProcessInstanceRestrictionApplier.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.policies;
 
 import org.activiti.api.process.model.builders.ProcessPayloadBuilder;

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesRestrictionApplier.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.policies;
 
 import java.util.Set;

File: activiti-core-common/activiti-spring-security-policies/src/test/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesProcessDefinitionRestrictionApplierTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.policies;
 
 import java.util.Set;

File: activiti-core-common/activiti-spring-security-policies/src/test/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesProcessInstanceRestrictionApplierTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.policies;
 
 import java.util.Set;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/AbstractSimpleGrantedAuthoritiesMapper.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.springframework.lang.NonNull;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/AuthenticationPrincipalGroupsProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.activiti.api.runtime.shared.security.PrincipalGroupsProvider;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/AuthenticationPrincipalIdentityProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.activiti.api.runtime.shared.security.PrincipalIdentityProvider;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/AuthenticationPrincipalRolesProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.activiti.api.runtime.shared.security.PrincipalRolesProvider;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/GrantedAuthoritiesGroupsMapper.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.springframework.security.core.GrantedAuthority;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/GrantedAuthoritiesResolver.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.springframework.security.core.GrantedAuthority;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/GrantedAuthoritiesRolesMapper.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.springframework.security.core.GrantedAuthority;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/LocalSpringSecurityContextPrincipalProvider.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.activiti.api.runtime.shared.security.SecurityContextPrincipalProvider;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/LocalSpringSecurityManager.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.activiti.api.runtime.shared.security.AbstractSecurityManager;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/SimpleGrantedAuthoritiesGroupsMapper.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.springframework.security.core.GrantedAuthority;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/SimpleGrantedAuthoritiesResolver.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import static java.util.Collections.emptyList;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/SimpleGrantedAuthoritiesRolesMapper.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import org.springframework.security.core.GrantedAuthority;

File: activiti-core-common/activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/config/ActivitiSpringSecurityAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.config;
 
 import org.activiti.api.runtime.shared.security.PrincipalGroupsProvider;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/LocalSpringSecurityManagerTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/test/AuthenticationPrincipalGroupsProviderTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/test/AuthenticationPrincipalRolesProviderTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/test/LocalSpringSecurityContextPrincipalProviderTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/test/SimpleGrantedAuthoritiesGroupsMapperTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/test/SimpleGrantedAuthoritiesResolverTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core-common/activiti-spring-security/src/test/java/org/activiti/core/common/spring/security/test/SimpleGrantedAuthoritiesRolesMapperTest.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.core.common.spring.security.test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: activiti-core/activiti-api-impl/activiti-api-model-shared-impl/src/main/java/org/activiti/api/runtime/conf/impl/CommonModelAutoConfiguration.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.conf.impl;
 
 import com.fasterxml.jackson.core.Version;

File: activiti-core/activiti-api-impl/activiti-api-model-shared-impl/src/main/java/org/activiti/api/runtime/conf/impl/PayloadMixIn.java
Patch:
@@ -1,19 +1,18 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2010-2020 Alfresco Software, Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.api.runtime.conf.impl;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/connector/IntegrationContextBuilder.java
Patch:
@@ -84,7 +84,7 @@ private IntegrationContextImpl buildFromExecution(DelegateExecution execution) {
         }
 
 
-        integrationContext.setInBoundVariables(inboundVariablesProvider.calculateInputVariables(execution));
+        integrationContext.addInBoundVariables(inboundVariablesProvider.calculateInputVariables(execution));
 
         return integrationContext;
     }

File: activiti-api/activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/ProcessRuntime.java
Patch:
@@ -24,6 +24,7 @@
 import org.activiti.api.process.model.ProcessDefinitionMeta;
 import org.activiti.api.process.model.ProcessInstance;
 import org.activiti.api.process.model.ProcessInstanceMeta;
+import org.activiti.api.process.model.payloads.CreateProcessInstancePayload;
 import org.activiti.api.process.model.payloads.DeleteProcessPayload;
 import org.activiti.api.process.model.payloads.GetProcessDefinitionsPayload;
 import org.activiti.api.process.model.payloads.GetProcessInstancesPayload;
@@ -76,12 +77,12 @@ Page<ProcessDefinition> processDefinitions(Pageable pageable,
     /**
      * Start an already created Process Instance based on the process instance id
      */
-    ProcessInstance startCreatedProcess(String processInstanceId);
+    ProcessInstance startCreatedProcess(String processInstanceId, StartProcessPayload startProcessPayload);
 
     /**
      * Create a new Process Instance based on the payload parameters
      */
-    ProcessInstance create(StartProcessPayload startProcessPayload);
+    ProcessInstance create(CreateProcessInstancePayload startProcessPayload);
 
     /**
      * Get all process instances by pages

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
Patch:
@@ -57,7 +57,7 @@ public interface RuntimeService {
    * @throws NotFoundException
    *          when no process instance with the given id is found
    */
-  ProcessInstance startCreatedProcessInstance(ProcessInstance createdProcessInstance);
+  ProcessInstance startCreatedProcessInstance(ProcessInstance createdProcessInstance, Map<String, Object> variables);
 
   /**
    * Starts a new process instance in the latest version of the process definition with the given key.

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -522,8 +522,8 @@ public ProcessInstanceBuilder createProcessInstanceBuilder() {
     }
 
     @Override
-    public ProcessInstance startCreatedProcessInstance(ProcessInstance createdProcessInstance) {
-        return commandExecutor.execute(new StartCreatedProcessInstanceCmd<>(createdProcessInstance));
+    public ProcessInstance startCreatedProcessInstance(ProcessInstance createdProcessInstance, Map<String, Object> variables) {
+        return commandExecutor.execute(new StartCreatedProcessInstanceCmd<>(createdProcessInstance, variables));
     }
 
     public ProcessInstance startProcessInstance(ProcessInstanceBuilderImpl processInstanceBuilder) {

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ExecutionEventsTest.java
Patch:
@@ -49,11 +49,11 @@ public void testExecutionEvents() throws Exception {
     assertThat(((Execution) event.getEntity()).getProcessInstanceId()).isEqualTo(processInstance.getId());
 
     event = (ActivitiEntityEvent) listener.getEventsReceived().get(1);
-    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_INITIALIZED);
+    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);
     assertThat(((Execution) event.getEntity()).getProcessInstanceId()).isEqualTo(processInstance.getId());
 
     event = (ActivitiEntityEvent) listener.getEventsReceived().get(2);
-    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);
+    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_INITIALIZED);
     assertThat(((Execution) event.getEntity()).getProcessInstanceId()).isEqualTo(processInstance.getId());
 
     event = (ActivitiEntityEvent) listener.getEventsReceived().get(3);

File: activiti-core/activiti-spring-conformance-tests/activiti-spring-conformance-signals/src/test/java/org/activiti/spring/conformance/signals/SignalThrowCatchTest.java
Patch:
@@ -268,8 +268,8 @@ public void testProcessStartedBySignal() {
                 .extracting(RuntimeEvent::getEventType)
                 .containsExactly(
                         ProcessRuntimeEvent.ProcessEvents.PROCESS_CREATED,
-                        VariableEvent.VariableEvents.VARIABLE_CREATED,
                         BPMNSignalEvent.SignalEvents.SIGNAL_RECEIVED,
+                        VariableEvent.VariableEvents.VARIABLE_CREATED,
                         ProcessRuntimeEvent.ProcessEvents.PROCESS_STARTED,
                         BPMNActivityEvent.ActivityEvents.ACTIVITY_COMPLETED,
                         BPMNSequenceFlowTakenEvent.SequenceFlowEvents.SEQUENCE_FLOW_TAKEN,
@@ -278,7 +278,7 @@ public void testProcessStartedBySignal() {
                         ProcessRuntimeEvent.ProcessEvents.PROCESS_COMPLETED
                 );
 
-        BPMNSignalReceivedEvent event = (BPMNSignalReceivedEvent) RuntimeTestConfiguration.collectedEvents.get(2);
+        BPMNSignalReceivedEvent event = (BPMNSignalReceivedEvent) RuntimeTestConfiguration.collectedEvents.get(1);
 
         assertThat(event.getEntity()).isNotNull();
         assertThat(event.getEntity().getSignalPayload()).isNotNull();

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -252,6 +252,8 @@ public ProcessRuntimeConfiguration configuration() {
 
     @Override
     public ProcessInstance start(StartProcessPayload startProcessPayload) {
+
+
         return processInstanceConverter.from(this.createProcessInstanceBuilder(startProcessPayload).start());
     }
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ProcessRuntimeImplTest.java
Patch:
@@ -32,6 +32,7 @@
 import static org.mockito.MockitoAnnotations.initMocks;
 
 import java.util.List;
+
 import org.activiti.api.process.model.ProcessInstance;
 import org.activiti.api.process.model.builders.ProcessPayloadBuilder;
 import org.activiti.api.process.model.payloads.StartProcessPayload;
@@ -103,6 +104,7 @@ public void setUp() {
                 null,
                 null,
                 processVariableValidator));
+
     }
 
     @Test

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -84,6 +84,7 @@ public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper,
         variableTypeMap.put("folder", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("date", new DateVariableType(Date.class, dateFormatterProvider));
         variableTypeMap.put("datetime", new DateVariableType(Date.class, dateFormatterProvider));
+        variableTypeMap.put("array", new JsonObjectVariableType(objectMapper));
         return variableTypeMap;
     }
 

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -84,6 +84,7 @@ public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper,
         variableTypeMap.put("folder", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("date", new DateVariableType(Date.class, dateFormatterProvider));
         variableTypeMap.put("datetime", new DateVariableType(Date.class, dateFormatterProvider));
+        variableTypeMap.put("array", new JsonObjectVariableType(objectMapper));
         return variableTypeMap;
     }
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ActivityMatchers.java
Patch:
@@ -23,7 +23,8 @@
 import org.activiti.api.process.model.events.BPMNActivityEvent;
 import org.activiti.api.process.model.events.BPMNActivityStartedEvent;
 
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
 
 public abstract class ActivityMatchers {
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessInstanceMatchers.java
Patch:
@@ -28,7 +28,8 @@
 import org.activiti.test.TaskSource;
 
 import static org.activiti.api.process.model.events.ProcessRuntimeEvent.ProcessEvents.PROCESS_STARTED;
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
 
 public class ProcessInstanceMatchers {
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessTaskMatchers.java
Patch:
@@ -25,7 +25,8 @@
 import org.activiti.api.task.runtime.events.TaskAssignedEvent;
 import org.activiti.api.task.runtime.events.TaskCreatedEvent;
 
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
 
 public class ProcessTaskMatchers {
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessVariableMatchers.java
Patch:
@@ -22,7 +22,8 @@
 import org.activiti.api.model.shared.event.VariableCreatedEvent;
 import org.activiti.api.model.shared.event.VariableEvent;
 
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
 
 public class ProcessVariableMatchers {
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/SequenceFlowMatchers.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.api.process.model.events.BPMNSequenceFlowTakenEvent;
 import org.activiti.api.process.model.events.SequenceFlowEvent;
 
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SequenceFlowMatchers {
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/SignalMatchers.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.api.process.model.events.BPMNSignalEvent;
 import org.activiti.api.process.model.events.BPMNSignalReceivedEvent;
 
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SignalMatchers {
 

File: activiti-core-common/activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/TaskMatchers.java
Patch:
@@ -23,7 +23,7 @@
 import org.activiti.api.task.runtime.events.TaskAssignedEvent;
 import org.activiti.api.task.runtime.events.TaskCompletedEvent;
 
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class TaskMatchers {
 

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationContent.java
Patch:
@@ -16,8 +16,9 @@
 
 package org.activiti.application;
 
+import static java.util.Collections.emptyList;
+
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -33,7 +34,7 @@ public void add(ApplicationEntry entry) {
     }
 
     public List<FileContent> getFileContents(String entryType) {
-        return entries.getOrDefault(entryType, Collections.emptyList());
+        return entries.getOrDefault(entryType, emptyList());
     }
 
 }

File: activiti-core-common/activiti-spring-application/src/main/java/org/activiti/application/ApplicationDiscovery.java
Patch:
@@ -16,9 +16,10 @@
 
 package org.activiti.application;
 
+import static java.util.Arrays.asList;
+
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 import org.springframework.core.io.Resource;
@@ -40,7 +41,7 @@ public List<Resource> discoverApplications() {
         Resource resource = resourceLoader.getResource(applicationsLocation);
         if (resource.exists()) {
             try {
-                resources = Arrays.asList(resourceLoader.getResources(applicationsLocation + "**.zip"));
+                resources = asList(resourceLoader.getResources(applicationsLocation + "**.zip"));
             } catch (IOException e) {
                 throw new ApplicationLoadException("Unable to load application resources", e);
             }

File: activiti-core-common/activiti-spring-connector/src/main/java/org/activiti/core/common/spring/connector/autoconfigure/ConnectorAutoConfiguration.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.activiti.core.common.spring.connector.autoconfigure;
 
+import static java.util.Collections.emptyList;
+
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.activiti.core.common.model.connector.ConnectorDefinition;
 import org.activiti.core.common.spring.connector.ConnectorDefinitionService;
@@ -27,7 +29,6 @@
 import org.springframework.core.io.support.ResourcePatternResolver;
 
 import java.io.IOException;
-import java.util.Collections;
 import java.util.List;
 
 @Configuration
@@ -50,6 +51,6 @@ public ConnectorDefinitionService connectorDefinitionService(@Value("${activiti.
     @ConditionalOnMissingBean
     public List<ConnectorDefinition> connectorDefinitions(ConnectorDefinitionService connectorDefinitionService) throws IOException {
         List<ConnectorDefinition> connectorDefinitions = connectorDefinitionService.get();
-        return connectorDefinitions == null? Collections.emptyList() : connectorDefinitions;
+        return connectorDefinitions == null? emptyList() : connectorDefinitions;
     }
 }

File: activiti-core-common/activiti-spring-resource-finder/src/test/java/org/activiti/spring/resources/DummyResourceFinderDescriptor.java
Patch:
@@ -16,8 +16,9 @@
 
 package org.activiti.spring.resources;
 
+import static java.util.Arrays.asList;
+
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.List;
 
 import org.springframework.core.io.Resource;
@@ -30,7 +31,7 @@ public class DummyResourceFinderDescriptor implements ResourceFinderDescriptor {
 
     public DummyResourceFinderDescriptor(String locationPrefix,
                                          String ... suffixes) {
-        this.suffixes = Arrays.asList(suffixes);
+        this.suffixes = asList(suffixes);
         this.locationPrefix = locationPrefix;
     }
 

File: activiti-core-common/activiti-spring-security-policies/src/main/java/org/activiti/core/common/spring/security/policies/BaseSecurityPoliciesManagerImpl.java
Patch:
@@ -1,9 +1,10 @@
 package org.activiti.core.common.spring.security.policies;
 
+import static java.util.Arrays.asList;
+
 import org.activiti.api.runtime.shared.security.SecurityManager;
 import org.activiti.core.common.spring.security.policies.conf.SecurityPoliciesProperties;
 
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -46,7 +47,7 @@ public Map<String, Set<String>> getAllowedKeys(SecurityPolicyAccess... securityP
             if (isUserInPolicy(ssp, authenticatedUserId) || isGroupInPolicy(ssp, groups)) {
 
                 // Here if securityPolicyAccess is READ, it should also include WRITES, if it is NONE nothing, and if it is WRITE only WRITE
-                List<SecurityPolicyAccess> securityPolicyAccesses = Arrays.asList(securityPoliciesAccess);
+                List<SecurityPolicyAccess> securityPolicyAccesses = asList(securityPoliciesAccess);
                 if (securityPolicyAccesses.contains(SecurityPolicyAccess.WRITE)) {
                     if (ssp.getAccess().equals(SecurityPolicyAccess.WRITE)) {
                         definitionKeysAllowedByPolicy.get(ssp.getServiceName()).addAll(ssp.getKeys());

File: activiti-core-common/activiti-spring-security-policies/src/test/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesProcessInstanceRestrictionApplierTest.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.core.common.spring.security.policies;
 
-import java.util.Collections;
 import java.util.Set;
 
 import org.activiti.api.process.model.payloads.GetProcessInstancesPayload;
 import org.junit.Test;
 
+import static java.util.Collections.singleton;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class SecurityPoliciesProcessInstanceRestrictionApplierTest {
@@ -31,7 +31,7 @@ public class SecurityPoliciesProcessInstanceRestrictionApplierTest {
     @Test
     public void restrictToKeysAddFilterOnGivenKeys() {
         //given
-        Set<String> keys = Collections.singleton("procDef");
+        Set<String> keys = singleton("procDef");
 
         //when
         GetProcessInstancesPayload filter = restrictionApplier.restrictToKeys(keys);
@@ -49,4 +49,4 @@ public void denyAllShouldAddUnmatchableFilter() {
         assertThat(filter.getProcessDefinitionKeys()).hasSize(1);
         assertThat(filter.getProcessDefinitionKeys().iterator().next()).startsWith("missing-");
     }
-}
\ No newline at end of file
+}

File: activiti-core-common/activiti-spring-security-policies/src/test/java/org/activiti/core/common/spring/security/policies/SecurityPoliciesServiceIT.java
Patch:
@@ -10,7 +10,6 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.security.test.context.support.WithUserDetails;
 import org.springframework.test.context.ContextConfiguration;
-import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.List;
@@ -19,7 +18,6 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
-@TestPropertySource("classpath:propstest.properties")
 @ContextConfiguration
 public class SecurityPoliciesServiceIT {
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/spring/process/ProcessVariablesInitiator.java
Patch:
@@ -13,7 +13,8 @@
 
 package org.activiti.spring.process;
 
-import java.util.Collections;
+import static java.util.Collections.emptyMap;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -109,7 +110,7 @@ public ExecutionEntity createProcessInstanceWithInitialFlowElement(ProcessDefini
     }
 
     private Map<String, Object> processVariables(Map<String, Object> variables, Map<String, VariableDefinition> variableDefinitionMap) {
-        Map<String, Object> newVarsMap = new HashMap<>(Optional.ofNullable(variables).orElse(Collections.emptyMap()));
+        Map<String, Object> newVarsMap = new HashMap<>(Optional.ofNullable(variables).orElse(emptyMap()));
         variableDefinitionMap.forEach((k, v) -> {
             if (!newVarsMap.containsKey(v.getName()) && v.getValue() != null) {
                 newVarsMap.put(v.getName(), createDefaultVariableValue(v));

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/SignalReceivedListenerDelegateTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Arrays;
 import java.util.Optional;
 
+import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.verify;
@@ -50,7 +50,7 @@ public class SignalReceivedListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new SignalReceivedListenerDelegate(Arrays.asList(firstListener, secondListener), converter);
+        listenerDelegate = new SignalReceivedListenerDelegate(asList(firstListener, secondListener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerCancelledListenerDelegateTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Collections;
 import java.util.Optional;
 
+import static java.util.Collections.singletonList;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -48,7 +48,7 @@ public class TimerCancelledListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new TimerCancelledListenerDelegate(Collections.singletonList(listener), converter);
+        listenerDelegate = new TimerCancelledListenerDelegate(singletonList(listener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerExecutedListenerDelegateTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Collections;
 import java.util.Optional;
 
+import static java.util.Collections.singletonList;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -48,7 +48,7 @@ public class TimerExecutedListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new TimerExecutedListenerDelegate(Collections.singletonList(listener), converter);
+        listenerDelegate = new TimerExecutedListenerDelegate(singletonList(listener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerFailedListenerDelegateTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Collections;
 import java.util.Optional;
 
+import static java.util.Collections.singletonList;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -48,7 +48,7 @@ public class TimerFailedListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new TimerFailedListenerDelegate(Collections.singletonList(listener), converter);
+        listenerDelegate = new TimerFailedListenerDelegate(singletonList(listener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerFiredListenerDelegateTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Collections;
 import java.util.Optional;
 
+import static java.util.Collections.singletonList;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -48,7 +48,7 @@ public class TimerFiredListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new TimerFiredListenerDelegate(Collections.singletonList(listener), converter);
+        listenerDelegate = new TimerFiredListenerDelegate(singletonList(listener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerRetriesDecrementedListenerDelegateTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Collections;
 import java.util.Optional;
 
+import static java.util.Collections.singletonList;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -48,7 +48,7 @@ public class TimerRetriesDecrementedListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new TimerRetriesDecrementedListenerDelegate(Collections.singletonList(listener), converter);
+        listenerDelegate = new TimerRetriesDecrementedListenerDelegate(singletonList(listener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/event/internal/TimerScheduledListenerDelegateTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 
-import java.util.Collections;
 import java.util.Optional;
 
+import static java.util.Collections.singletonList;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -48,7 +48,7 @@ public class TimerScheduledListenerDelegateTest {
     @Before
     public void setUp() {
         initMocks(this);
-        listenerDelegate = new TimerScheduledListenerDelegate(Collections.singletonList(listener), converter);
+        listenerDelegate = new TimerScheduledListenerDelegate(singletonList(listener), converter);
     }
 
     @Test

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/SimpleMapExpressionEvaluatorTest.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.impl;
 
+import static java.util.Collections.singletonMap;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 import static org.mockito.MockitoAnnotations.initMocks;
 
-import java.util.Collections;
 import java.util.Map;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.impl.el.ExpressionManager;
@@ -46,7 +46,7 @@ public void setUp() {
     @Test
     public void evaluate_should_returnResultOfGetValueWithMap() {
         //given
-        Map<String, Object> context = Collections.singletonMap("city", "London");
+        Map<String, Object> context = singletonMap("city", "London");
         SimpleMapExpressionEvaluator evaluator = new SimpleMapExpressionEvaluator(
             context);
         Expression expression = mock(Expression.class);

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/model/impl/ToSignalConverterTest.java
Patch:
@@ -48,4 +48,4 @@ public void fromShouldSetMetaInfoAndVariables() {
         assertThat(signal.getProcessInstanceId()).isEqualTo("procInstId");
 
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APITaskConverter.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.activiti.runtime.api.model.impl;
 
+import static java.util.Collections.emptyList;
+
 import org.activiti.api.task.model.Task;
 import org.activiti.api.task.model.impl.TaskImpl;
 import org.activiti.engine.TaskService;
@@ -24,7 +26,6 @@
 import org.activiti.engine.task.IdentityLinkType;
 import org.springframework.beans.factory.annotation.Autowired;
 
-import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Function;
@@ -82,7 +83,7 @@ private void extractCandidateUsersAndGroups(org.activiti.engine.task.Task source
     }
 
     private List<String> extractCandidatesBy(List<IdentityLink> candidates, Function<IdentityLink, String> extractor) {
-        List<String> result = Collections.emptyList();
+        List<String> result = emptyList();
         if (candidates != null) {
             result = candidates
                              .stream()

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/multi/instance/MultiInstanceParser.java
Patch:
@@ -16,7 +16,8 @@
 
 package org.activiti.bpmn.converter.child.multi.instance;
 
-import java.util.Arrays;
+import static java.util.Arrays.asList;
+
 import java.util.List;
 import javax.xml.stream.XMLStreamReader;
 import org.activiti.bpmn.converter.child.BaseChildElementParser;
@@ -32,7 +33,7 @@ public class MultiInstanceParser extends BaseChildElementParser {
     private final List<ElementParser<MultiInstanceLoopCharacteristics>> multiInstanceElementParsers;
 
     public MultiInstanceParser() {
-        this(Arrays.asList(new LoopCardinalityParser(),
+        this(asList(new LoopCardinalityParser(),
             new MultiInstanceDataInputParser(),
             new MultiInstanceInputDataItemParser(),
             new MultiInstanceCompletionConditionParser(),

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/ProcessExport.java
Patch:
@@ -12,7 +12,8 @@
  */
 package org.activiti.bpmn.converter.export;
 
-import java.util.Arrays;
+import static java.util.Arrays.asList;
+
 import java.util.List;
 
 import javax.xml.stream.XMLStreamWriter;
@@ -27,7 +28,7 @@ public class ProcessExport implements BpmnXMLConstants {
   /**
    * default attributes taken from process instance attributes
    */
-  public static final List<ExtensionAttribute> defaultProcessAttributes = Arrays.asList(new ExtensionAttribute(ATTRIBUTE_ID), new ExtensionAttribute(ATTRIBUTE_NAME), new ExtensionAttribute(
+  public static final List<ExtensionAttribute> defaultProcessAttributes = asList(new ExtensionAttribute(ATTRIBUTE_ID), new ExtensionAttribute(ATTRIBUTE_NAME), new ExtensionAttribute(
       ATTRIBUTE_PROCESS_EXECUTABLE), new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_PROCESS_CANDIDATE_USERS), new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE,
       ATTRIBUTE_PROCESS_CANDIDATE_GROUPS));
 

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/bpmn/converter/ServiceTaskXMLConverterTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.mockito.Spy;
 
 import static org.activiti.bpmn.constants.BpmnXMLConstants.ATTRIBUTE_TASK_IMPLEMENTATION;
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.initMocks;
@@ -84,4 +84,4 @@ public void convertServiceTaskElementToXMLShouldWriteTheImplementionAttribute()
         verify(writer).writeAttribute(eq(ATTRIBUTE_TASK_IMPLEMENTATION),
                                       eq("myConnectorImplementation"));
     }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ManualTaskConverterTest.java
Patch:
@@ -31,7 +31,7 @@ protected String getResource() {
     private void validateModel(BpmnModel model) throws Exception {
         FlowElement flowElement = model.getMainProcess().getFlowElement("ManualTask_0ej3luy");
         assertThat(flowElement).isNotNull();
-        assertThat(flowElement instanceof ManualTask).isTrue();
+        assertThat(flowElement).isInstanceOf(ManualTask.class);
 
         checkXml(model);
     }

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/MultiInstanceUserTaskConverterTest.java
Patch:
@@ -31,7 +31,7 @@ protected String getResource() {
     private void validateModel(BpmnModel model) throws Exception {
         FlowElement flowElement = model.getMainProcess().getFlowElement("UserTask_0br0ocv");
         assertThat(flowElement).isNotNull();
-        assertThat(flowElement instanceof UserTask).isTrue();
+        assertThat(flowElement).isInstanceOf(UserTask.class);
 
         checkXml(model);
     }

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SignalConverterTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.activiti.editor.language.xml;
 
-import static org.junit.Assert.assertEquals;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.Collection;
 
@@ -25,10 +25,10 @@ public void convertModelToXML() throws Exception {
 
   private void validateModel(BpmnModel model) {
     Collection<Signal> signals = model.getSignals();
-    assertEquals(2, signals.size());
+    assertThat(signals).hasSize(2);
   }
 
   protected String getResource() {
     return "signaltest.bpmn";
   }
-}
\ No newline at end of file
+}

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SimpleUserTaskConverterTest.java
Patch:
@@ -31,7 +31,7 @@ protected String getResource() {
     private void validateModel(BpmnModel model) throws Exception {
         FlowElement flowElement = model.getMainProcess().getFlowElement("UserTask_0ej3luy");
         assertThat(flowElement).isNotNull();
-        assertThat(flowElement instanceof UserTask).isTrue();
+        assertThat(flowElement).isInstanceOf(UserTask.class);
 
         checkXml(model);
     }

File: activiti-core/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/TaskConverterTest.java
Patch:
@@ -31,7 +31,7 @@ protected String getResource() {
     private void validateModel(BpmnModel model) throws Exception {
         FlowElement flowElement = model.getMainProcess().getFlowElement("Task_17unmd8");
         assertThat(flowElement).isNotNull();
-        assertThat(flowElement instanceof Task).isTrue();
+        assertThat(flowElement).isInstanceOf(Task.class);
 
         checkXml(model);
     }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/AcquiredTimerJobEntities.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -19,7 +19,6 @@
 import org.activiti.engine.impl.persistence.entity.TimerJobEntity;
 
 /**
-
  */
 public class AcquiredTimerJobEntities {
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DurationHelper.java
Patch:
@@ -14,9 +14,10 @@
 
 package org.activiti.engine.impl.calendar;
 
+import static java.util.Arrays.asList;
+
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
@@ -73,7 +74,7 @@ public DurationHelper(String expressionS,
                           ClockReader clockReader) throws Exception {
         this.clockReader = clockReader;
         this.maxIterations = maxIterations;
-        List<String> expression = Arrays.asList(expressionS.split("/"));
+        List<String> expression = asList(expressionS.split("/"));
         datatypeFactory = DatatypeFactory.newInstance();
 
         if (expression.size() > 3 || expression.isEmpty()) {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -427,7 +427,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
   protected TaskEntityManager taskEntityManager;
   protected VariableInstanceEntityManager variableInstanceEntityManager;
   private IntegrationContextManager integrationContextManager;
-  private EventSubscriptionPayloadMappingProvider eventSubscriptionPayloadMappingProvider = 
+  private EventSubscriptionPayloadMappingProvider eventSubscriptionPayloadMappingProvider =
                                                               new EventSubscriptionPayloadMappingProvider() {};
   // History Manager
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/SpringBeanFactoryProxyMap.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -48,7 +48,7 @@ public boolean containsKey(Object key) {
   public Set<Object> keySet() {
     throw new ActivitiException("unsupported operation on configuration beans");
     // List<String> beanNames =
-    // Arrays.asList(beanFactory.getBeanDefinitionNames());
+    // asList(beanFactory.getBeanDefinitionNames());
     // return new HashSet<Object>(beanNames);
   }
 

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployerTest.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.engine.impl.bpmn.deployer;
 
+import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
 import static org.mockito.MockitoAnnotations.initMocks;
 
-import java.util.Collections;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntityImpl;
 import org.junit.Before;
 import org.junit.Test;
@@ -47,8 +47,7 @@ public void makeProcessDefinitionsConsistentWithPersistedVersions_should_setAppV
         ParsedDeployment parsedDeployment = mock(ParsedDeployment.class);
         ProcessDefinitionEntityImpl parsedProcessDefinition = new ProcessDefinitionEntityImpl();
 
-        given(parsedDeployment.getAllProcessDefinitions()).willReturn(Collections.singletonList(
-            parsedProcessDefinition));
+        given(parsedDeployment.getAllProcessDefinitions()).willReturn(singletonList(parsedProcessDefinition));
 
         ProcessDefinitionEntityImpl persistedProcessDefinition = new ProcessDefinitionEntityImpl();
         persistedProcessDefinition.setId("procId");

File: activiti-core/activiti-engine/src/test/java/org/activiti/engine/impl/variable/JsonTypeConverterTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.activiti.engine.impl.variable;
 
+import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -24,7 +25,6 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import java.util.Arrays;
 import java.util.List;
 import org.junit.Test;
 
@@ -38,7 +38,7 @@ public class JsonTypeConverterTest {
     @Test
     public void should_convertToList() throws Exception {
         //given
-        List<Integer> originalValue = Arrays.asList(1, 2);
+        List<Integer> originalValue = asList(1, 2);
         String json = objectMapper.writeValueAsString(originalValue);
         JsonNode jsonNode = objectMapper.readTree(json);
         System.out.println(json);

File: activiti-core/activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.activiti.common.util.DateFormatterProvider;
 import org.activiti.engine.RepositoryService;
@@ -82,6 +81,7 @@ public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper,
         variableTypeMap.put("integer", new JavaObjectVariableType(Integer.class));
         variableTypeMap.put("json", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("file", new JsonObjectVariableType(objectMapper));
+        variableTypeMap.put("folder", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("date", new DateVariableType(Date.class, dateFormatterProvider));
         variableTypeMap.put("datetime", new DateVariableType(Date.class, dateFormatterProvider));
         return variableTypeMap;

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/executionListener/ExecutionListenerOnTransactionTest.java
Patch:
@@ -168,7 +168,7 @@ public void testOnClosedExecutionListenersWithExecutionVariables() {
     }
 
     @Deployment
-    public void testOnCloseFailureExecutionListenersWithTransactionalOperation() {
+    public void testOnCloseFailureExecutionListenersWithTransactionalOperation() throws InterruptedException {
 
         MyTransactionalOperationTransactionDependentExecutionListener.clear();
 
@@ -183,6 +183,7 @@ public void testOnCloseFailureExecutionListenersWithTransactionalOperation() {
                          historicProcessInstances.get(0).getProcessDefinitionKey());
         }
 
+        Thread.sleep(3);
         ProcessInstance secondProcessInstance = runtimeService.startProcessInstanceByKey("secondTransactionDependentExecutionListenerProcess");
         assertProcessEnded(secondProcessInstance.getId());
 

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APIProcessInstanceConverter.java
Patch:
@@ -48,6 +48,8 @@ private ProcessInstance.ProcessInstanceStatus calculateStatus(org.activiti.engin
             return ProcessInstance.ProcessInstanceStatus.SUSPENDED;
         } else if (internalProcessInstance.isEnded()) {
             return ProcessInstance.ProcessInstanceStatus.COMPLETED;
+        }else if(internalProcessInstance.getStartTime() == null){
+            return ProcessInstance.ProcessInstanceStatus.CREATED;
         }
         return ProcessInstance.ProcessInstanceStatus.RUNNING;
     }

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeIT.java
Patch:
@@ -198,7 +198,7 @@ public void should_createNewProcessInstanceWithoutRunningIt_whenCreateIsCalled()
         assertThat(RuntimeTestConfiguration.completedProcesses).doesNotContain(categorizeProcess.getId());
         assertThat(categorizeProcess).isNotNull();
 
-        assertThat(categorizeProcess.getStatus()).isEqualTo(ProcessInstance.ProcessInstanceStatus.RUNNING);
+        assertThat(categorizeProcess.getStatus()).isEqualTo(ProcessInstance.ProcessInstanceStatus.CREATED);
     }
 
     @Test

File: activiti-api/activiti-api-process-model/src/main/java/org/activiti/api/process/model/BPMNActivity.java
Patch:
@@ -5,4 +5,7 @@ public interface BPMNActivity extends BPMNElement {
     String getActivityName();
 
     String getActivityType();
+
+    String getExecutionId();
+
 }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/connector/IntegrationContextBuilder.java
Patch:
@@ -53,6 +53,7 @@ private IntegrationContextImpl buildFromExecution(DelegateExecution execution) {
         integrationContext.setProcessDefinitionId(execution.getProcessDefinitionId());
         integrationContext.setBusinessKey(execution.getProcessInstanceBusinessKey());
         integrationContext.setClientId(execution.getCurrentActivityId());
+        integrationContext.setExecutionId(execution.getId());
 
         if (ExecutionEntity.class.isInstance(execution)) {
             ExecutionContext executionContext = new ExecutionContext(ExecutionEntity.class.cast(execution));

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/ToActivityConverter.java
Patch:
@@ -28,6 +28,8 @@ public BPMNActivity from(ActivitiActivityEvent internalEvent) {
                                                              internalEvent.getActivityType());
         activity.setProcessDefinitionId(internalEvent.getProcessDefinitionId());
         activity.setProcessInstanceId(internalEvent.getProcessInstanceId());
+        activity.setExecutionId(internalEvent.getExecutionId());
+
         return activity;
     }
 

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/impl/TaskRuntimeImpl.java
Patch:
@@ -194,7 +194,7 @@ public Task release(ReleaseTaskPayload releaseTaskPayload) {
         try {
             task = task(releaseTaskPayload.getTaskId());
         } catch (IllegalStateException ex) {
-            throw new IllegalStateException("The authenticated user cannot claim task" + releaseTaskPayload.getTaskId() + " due it is not a candidate for it");
+            throw new IllegalStateException("The authenticated user cannot release task" + releaseTaskPayload.getTaskId() + " due it is not a candidate for it");
         }
         // validate the the task doesn't have an assignee
         if (task.getAssignee() == null || task.getAssignee().isEmpty()) {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/repository/DeploymentBuilder.java
Patch:
@@ -51,6 +51,8 @@ DeploymentBuilder addInputStream(String resourceName,
 
   DeploymentBuilder setProjectManifest(ProjectManifest projectManifest);
 
+  DeploymentBuilder setEnforcedAppVersion(Integer enforcedAppVersion);
+
   /**
    * If called, no XML schema validation against the BPMN 2.0 XSD.
    * 

File: activiti-core/activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import org.activiti.api.process.model.events.StartMessageDeployedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.api.runtime.shared.identity.UserGroupManager;
-import org.activiti.core.common.spring.project.ProjectModelService;
+import org.activiti.core.common.spring.project.ApplicationUpgradeContextService;
 import org.activiti.engine.ManagementService;
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.cfg.ProcessEngineConfigurator;
@@ -81,11 +81,11 @@ public SpringProcessEngineConfiguration springProcessEngineConfiguration(
             ActivitiProperties activitiProperties,
             ResourceFinder resourceFinder,
             List<ResourceFinderDescriptor> resourceFinderDescriptors,
-            ProjectModelService projectModelService,
+            ApplicationUpgradeContextService applicationUpgradeContextService,
             @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,
             @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {
 
-        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration(projectModelService);
+        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration(applicationUpgradeContextService);
         conf.setConfigurators(processEngineConfigurators);
 
 

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/AbstractAutoDeploymentStrategyTest.java
Patch:
@@ -16,11 +16,10 @@
 import java.io.File;
 import java.io.InputStream;
 
-import org.activiti.core.common.spring.project.ProjectModelService;
+import org.activiti.core.common.spring.project.ApplicationUpgradeContextService;
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.repository.DeploymentBuilder;
-import org.activiti.spring.SpringProcessEngineConfiguration;
 import org.junit.Before;
 import org.mockito.Mock;
 import org.springframework.core.io.ByteArrayResource;
@@ -76,7 +75,7 @@ public class AbstractAutoDeploymentStrategyTest {
     private Deployment deploymentMock;
 
     @Mock
-    protected ProjectModelService projectModelServiceMock;
+    protected ApplicationUpgradeContextService applicationUpgradeContextServiceMock;
 
     protected final String deploymentNameHint = "nameHint";
 

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/DefaultAutoDeploymentStrategyTest.java
Patch:
@@ -38,7 +38,7 @@ public class DefaultAutoDeploymentStrategyTest extends AbstractAutoDeploymentStr
     @Before
     public void before() throws Exception {
         super.before();
-        deploymentStrategy = new DefaultAutoDeploymentStrategy(projectModelServiceMock);
+        deploymentStrategy = new DefaultAutoDeploymentStrategy(applicationUpgradeContextServiceMock);
     }
 
     @Test

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/ResourceParentFolderAutoDeploymentStrategyTest.java
Patch:
@@ -51,7 +51,7 @@ public class ResourceParentFolderAutoDeploymentStrategyTest extends AbstractAuto
   @Before
   public void before() throws Exception {
     super.before();
-    deploymentStrategy = new ResourceParentFolderAutoDeploymentStrategy(projectModelServiceMock);
+    deploymentStrategy = new ResourceParentFolderAutoDeploymentStrategy(applicationUpgradeContextServiceMock);
     assertNotNull(deploymentStrategy);
 
     when(parentFile1Mock.getName()).thenReturn(parentFilename1);

File: activiti-core/activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/SingleResourceAutoDeploymentStrategyTest.java
Patch:
@@ -37,7 +37,7 @@ public class SingleResourceAutoDeploymentStrategyTest extends AbstractAutoDeploy
     @Before
     public void before() throws Exception {
         super.before();
-        deploymentStrategy = new SingleResourceAutoDeploymentStrategy(projectModelServiceMock);
+        deploymentStrategy = new SingleResourceAutoDeploymentStrategy(applicationUpgradeContextServiceMock);
         assertNotNull(deploymentStrategy);
     }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventBuilder.java
Patch:
@@ -389,7 +389,7 @@ protected static void populateEventWithCurrentContext(ActivitiEventImpl event) {
         event.setProcessInstanceId(((Task) persistedObject).getProcessInstanceId());
         event.setExecutionId(((Task) persistedObject).getExecutionId());
         event.setProcessDefinitionId(((Task) persistedObject).getProcessDefinitionId());
-        //((ActivitiEntityEventImpl)event).setReason(TerminateEndEventActivityBehavior.createDeleteReason(null));
+        event.setReason(TerminateEndEventActivityBehavior.createDeleteReason(null));
       } else if (persistedObject instanceof ProcessDefinition) {
         event.setProcessDefinitionId(((ProcessDefinition) persistedObject).getId());
       }

File: activiti-api/activiti-api-task-model/src/main/java/org/activiti/api/task/runtime/events/TaskCancelledEvent.java
Patch:
@@ -21,4 +21,6 @@
 
 public interface TaskCancelledEvent extends TaskRuntimeEvent<Task> {
 
+    String getReason();
+
 }

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskCancelledConverter.java
Patch:
@@ -38,7 +38,8 @@ public Optional<TaskCancelledEvent> from(ActivitiEntityEvent internalEvent) {
         if (isTaskCancelled(internalEvent)) {
             TaskEntity taskEntity = (TaskEntity) internalEvent.getEntity();
             Task task = taskConverter.from(taskEntity, Task.TaskStatus.CANCELLED);
-            event = new TaskCancelledImpl(task);
+            String reason = internalEvent.getReason();
+            event = new TaskCancelledImpl(task, reason);
         }
         return Optional.ofNullable(event);
     }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventBuilder.java
Patch:
@@ -32,6 +32,7 @@
 import org.activiti.engine.delegate.event.ActivitiSequenceFlowTakenEvent;
 import org.activiti.engine.delegate.event.ActivitiSignalEvent;
 import org.activiti.engine.delegate.event.ActivitiVariableEvent;
+import org.activiti.engine.impl.bpmn.behavior.TerminateEndEventActivityBehavior;
 import org.activiti.engine.impl.context.ExecutionContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
@@ -388,6 +389,7 @@ protected static void populateEventWithCurrentContext(ActivitiEventImpl event) {
         event.setProcessInstanceId(((Task) persistedObject).getProcessInstanceId());
         event.setExecutionId(((Task) persistedObject).getExecutionId());
         event.setProcessDefinitionId(((Task) persistedObject).getProcessDefinitionId());
+        //((ActivitiEntityEventImpl)event).setReason(TerminateEndEventActivityBehavior.createDeleteReason(null));
       } else if (persistedObject instanceof ProcessDefinition) {
         event.setProcessDefinitionId(((ProcessDefinition) persistedObject).getId());
       }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/history/DeleteReason.java
Patch:
@@ -22,7 +22,7 @@ public interface DeleteReason {
   
   String PROCESS_INSTANCE_DELETED = "process instance deleted";
   
-  String TERMINATE_END_EVENT = "terminate end event";
+  String TERMINATE_END_EVENT = "Terminated by end event";
   
   String BOUNDARY_EVENT_INTERRUPTING = "boundary event";
   

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -186,7 +186,7 @@ protected void sendProcessInstanceCancelledEvent(DelegateExecution execution, Fl
 
         Context.getProcessEngineConfiguration().getEventDispatcher()
             .dispatchEvent(ActivitiEventBuilder.createCancelledEvent(execution.getId(), execution.getProcessInstanceId(),
-                execution.getProcessDefinitionId(), execution.getCurrentFlowElement()));
+                execution.getProcessDefinitionId(), createDeleteReason(terminateEndEvent.getId())));
       }
     }
 
@@ -224,8 +224,8 @@ protected void dispatchActivityCancelled(DelegateExecution execution, FlowElemen
                 execution.getProcessDefinitionId(), parseActivityType((FlowNode) execution.getCurrentFlowElement()), terminateEndEvent));
   }
 
-  protected String createDeleteReason(String activityId) {
-    return DeleteReason.TERMINATE_END_EVENT + " (" + activityId + ")";
+  public static String createDeleteReason(String activityId) {
+      return activityId != null ?  DeleteReason.TERMINATE_END_EVENT + ": " + activityId : DeleteReason.TERMINATE_END_EVENT;
   }
 
   public boolean isTerminateAll() {

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeCompleteTaskTest.java
Patch:
@@ -224,7 +224,4 @@ public void completeProcessTaskAndCheckReturnedTaskAndVariables() {
                         tuple("start2", "start2"));
 
     }
-
-    
-
 }

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessExtensionsTest.java
Patch:
@@ -29,7 +29,7 @@
 @ContextConfiguration
 public class ProcessExtensionsTest {
 
-    private static final String INITIAL_VARS_PROCESS = "initialVarsProcess";
+    private static final String INITIAL_VARS_PROCESS = "Process_initialVarsProcess";
 
     @Autowired
     private ProcessRuntime processRuntime;
@@ -151,7 +151,7 @@ public void processInstanceFailsIfVariableTypeIncorrect() {
                     .build());
         }).withMessage("Variables fail type validation: subscribe, name, age");
     }
-    
+
     @Test
     public void should_mapProcessVariables_when_startEventMappingExists() {
 

File: activiti-core/activiti-spring-process-extensions/src/test/java/org/activiti/spring/process/ProcessExtensionResourceReaderIT.java
Patch:
@@ -45,7 +45,7 @@ public void shouldReadExtensionFromJsonFile() throws Exception{
             ProcessExtensionModel processExtensionModel = reader.read(inputStream);
             assertThat(processExtensionModel).isNotNull();
             assertThat(processExtensionModel.getId()).isEqualTo("initialVarsProcess");
-            assertThat(processExtensionModel.getExtensions().getProperties()).containsKey("d440ff7b-0ac8-4a97-b163-51a6ec49faa1");
+            assertThat(processExtensionModel.getExtensions("Process_initialVarsProcess").getProperties()).containsKey("d440ff7b-0ac8-4a97-b163-51a6ec49faa1");
         }
     }
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -267,6 +267,7 @@ public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntit
     childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != null
         ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());
     childExecution.setParentProcessInstanceId(parentExecutionEntity.getParentProcessInstanceId());
+    childExecution.setAppVersion(parentExecutionEntity.getAppVersion());
     childExecution.setScope(false);
 
     // manage the bidirectional parent-child relation

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -160,6 +160,8 @@ public interface BpmnXMLConstants {
   public static final String ELEMENT_MULTIINSTANCE_CARDINALITY = "loopCardinality";
   public static final String ELEMENT_MULTIINSTANCE_DATAINPUT = "loopDataInputRef";
   public static final String ELEMENT_MULTIINSTANCE_DATAITEM = "inputDataItem";
+  public static final String ELEMENT_MULTI_INSTANCE_DATA_OUTPUT = "loopDataOutputRef";
+  public static final String ELEMENT_MULTI_INSTANCE_OUTPUT_DATA_ITEM = "outputDataItem";
   public static final String ELEMENT_MULTIINSTANCE_CONDITION = "completionCondition";
   public static final String ATTRIBUTE_MULTIINSTANCE_SEQUENTIAL = "isSequential";
   public static final String ATTRIBUTE_MULTIINSTANCE_COLLECTION = "collection";

File: activiti-core/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/util/BpmnXMLUtil.java
Patch:
@@ -15,6 +15,8 @@
 
 import org.activiti.bpmn.constants.BpmnXMLConstants;
 import org.activiti.bpmn.converter.child.*;
+import org.activiti.bpmn.converter.child.MessageEventDefinitionParser;
+import org.activiti.bpmn.converter.child.multi.instance.MultiInstanceParser;
 import org.activiti.bpmn.model.*;
 import org.apache.commons.lang3.StringUtils;
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-
 import org.activiti.bpmn.model.Activity;
 import org.activiti.bpmn.model.BoundaryEvent;
 import org.activiti.bpmn.model.CallActivity;
@@ -129,6 +128,7 @@ public void leave(DelegateExecution execution) {
       setLoopVariable(miRootExecution, NUMBER_OF_COMPLETED_INSTANCES, nrOfCompletedInstances);
       setLoopVariable(miRootExecution, NUMBER_OF_ACTIVE_INSTANCES, nrOfActiveInstances);
     }
+    updateResultCollection(execution, miRootExecution);
 
     //executeCompensationBoundaryEvents(execution.getCurrentFlowElement(), execution);
 
@@ -150,6 +150,8 @@ public void leave(DelegateExecution execution) {
           executionToUse = executionEntity;
         }
 
+        propagateLoopDataOutputRefToProcessInstance(executionToUse);
+
         boolean hasCompensation = false;
         Activity activity = (Activity) execution.getCurrentFlowElement();
         if (activity instanceof Transaction) {

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessExtensionsJsonVarsTest.java
Patch:
@@ -118,7 +118,7 @@ public void processInstanceHasValidInitialVariables() throws ParseException, IOE
                 .filteredOn("name","var4")
                 .extracting("value")
                 .hasSize(1)
-                .hasOnlyElementsOfType(ObjectNode.class)
+                .hasOnlyElementsOfTypes(ObjectNode.class, CustomType.class)
                 .toString()
                 .contains(customType.getCustomTypeField1());
 

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APITaskConverter.java
Patch:
@@ -48,6 +48,7 @@ public Task from(org.activiti.engine.task.Task internalTask,
         task.setFormKey(internalTask.getFormKey());
         task.setTaskDefinitionKey(internalTask.getTaskDefinitionKey());
         task.setAppVersion(Objects.toString(internalTask.getAppVersion(), null));
+        task.setBusinessKey(internalTask.getBusinessKey());
         return task;
     }
 

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -70,6 +70,7 @@ public void execute(DelegateExecution execution) {
     ExecutionEntity executionEntity = (ExecutionEntity) execution;
     task.setExecution(executionEntity);
     task.setTaskDefinitionKey(userTask.getId());
+    task.setBusinessKey(executionEntity.getProcessInstanceBusinessKey());
 
     String activeTaskName = null;
     String activeTaskDescription = null;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -71,4 +71,6 @@ public interface TaskEntity extends VariableScope, Task, DelegateTask, Entity, H
   boolean isCanceled();
   
   void setCanceled(boolean isCanceled);
+
+  void setBusinessKey(String businessKey);
 }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/task/TaskInfo.java
Patch:
@@ -113,4 +113,6 @@ public interface TaskInfo {
    * The claim time of this task
    */
   Date getClaimTime();
+
+  String getBusinessKey();
 }

File: activiti-core/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -47,7 +47,7 @@ public void testGetTableMetaData() {
 
     TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix+"ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
-    assertEquals(21, tableMetaData.getColumnNames().size());
+    assertEquals(22, tableMetaData.getColumnNames().size());
 
     int assigneeIndex = tableMetaData.getColumnNames().indexOf("ASSIGNEE_");
     int createTimeIndex = tableMetaData.getColumnNames().indexOf("CREATE_TIME_");

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeIT.java
Patch:
@@ -709,15 +709,15 @@ public void should_selectLatestDeployment(){
     }
 
     @Test
-    public void should_ProcessDefinitionsFromLatestVersionRetrieved(){
+    public void should_OnlyProcessDefinitionsFromLatestVersionRetrieved(){
         securityUtil.logInAs("user");
 
         Deployment deployment = processRuntime.selectLatestDeployment();
 
         Page<ProcessDefinition> processDefinitionPage = processRuntime.processDefinitions(Pageable.of(0,
                                                                                                       50));
 
-        assertThat(processDefinitionPage.getContent())
+        assertThat(processDefinitionPage.getContent().stream().filter(c -> c.getKey().equals(SUPER_PROCESS)))
                 .extracting(ProcessDefinition::getAppVersion)
                 .containsOnly(deployment.getVersion().toString());
     }

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToActivityCancelledConverter.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.api.process.model.events.BPMNActivityCancelledEvent;
 import org.activiti.api.runtime.event.impl.BPMNActivityCancelledEventImpl;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
+import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.runtime.api.model.impl.ToActivityConverter;
 
 import java.util.Optional;

File: activiti-core/activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCancelledListenerDelegate.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.api.task.runtime.events.TaskCancelledEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiActivityCancelledEvent;
+import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskCancelledConverter;
@@ -39,8 +40,8 @@ public TaskCancelledListenerDelegate(List<TaskRuntimeEventListener<TaskCancelled
 
     @Override
     public void onEvent(ActivitiEvent event) {
-        if (event instanceof ActivitiActivityCancelledEvent) {
-            toTaskCancelledConverter.from((ActivitiActivityCancelledEvent) event)
+        if (event instanceof ActivitiEntityEvent) {
+            toTaskCancelledConverter.from((ActivitiEntityEvent) event)
                     .ifPresent(convertedEvent -> {
                         for (TaskRuntimeEventListener<TaskCancelledEvent> listener : listeners) {
                             listener.onEvent(convertedEvent);

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -19,6 +19,8 @@
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.Condition;
+import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
+import org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior;
 import org.activiti.engine.impl.bpmn.helper.SkipExpressionUtil;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.el.UelExpressionCondition;
@@ -101,7 +103,7 @@ protected void handleActivityEnd(FlowNode flowNode) {
             commandContext.getHistoryManager().recordActivityEnd(execution,
                                                                  null);
 
-            if (!(execution.getCurrentFlowElement() instanceof SubProcess)) {
+            if (!(execution.getCurrentFlowElement() instanceof SubProcess) && !(flowNode.getBehavior() instanceof MultiInstanceActivityBehavior)) {
                 Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
                         ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED,
                                                                  flowNode.getId(),

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -51,7 +51,7 @@ public void leave(DelegateExecution execution) {
     }
     if (!hasLoopCharacteristics()) {
       super.leave(execution);
-    } else if (hasMultiInstanceCharacteristics()) {
+    } else if (hasMultiInstanceCharacteristics() && !execution.isEnded()) {
       multiInstanceActivityBehavior.leave(execution);
     }
   }

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -154,7 +154,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
       }
     }
 
-    executionEntityManager.deleteExecutionAndRelatedData(parentExecution, deleteReason, false);
+    executionEntityManager.deleteExecutionAndRelatedData(parentExecution, deleteReason, true);
   }
 
   public boolean isInterrupting() {

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/EventSubProcessMessageStartEventActivityBehavior.java
Patch:
@@ -24,6 +24,7 @@
 import org.activiti.bpmn.model.SubProcess;
 import org.activiti.bpmn.model.ValuedDataObject;
 import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.history.DeleteReason;
 import org.activiti.engine.impl.bpmn.parser.factory.MessageExecutionContext;
 import org.activiti.engine.impl.context.Context;

File: activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -93,6 +93,7 @@ public void leave(DelegateExecution childExecution) {
       multiInstanceRootExecution.setScope(false);
       multiInstanceRootExecution.setCurrentFlowElement(childExecution.getCurrentFlowElement());
       Context.getCommandContext().getExecutionEntityManager().deleteChildExecutions((ExecutionEntity) multiInstanceRootExecution, "MI_END", false);
+      dispatchActivityCompletedEvent(childExecution);
       super.leave(multiInstanceRootExecution);
       
     } else {
@@ -108,7 +109,7 @@ public void leave(DelegateExecution childExecution) {
         } else {
           executeOriginalBehavior(childExecution, loopCounter);
         }
-        
+        dispatchActivityCompletedEvent(childExecution);
       } catch (BpmnError error) {
         // re-throw business fault so that it can be caught by an Error
         // Intermediate Event or Error Event Sub-Process in the process

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNTimerIT.java
Patch:
@@ -96,6 +96,7 @@ public class ProcessRuntimeBPMNTimerIT {
     @Before
     public void setUp() {
         clear();
+        processEngineConfiguration.getClock().reset();
     }
 
     @After
@@ -280,8 +281,8 @@ public void shouldExecuteProcessWithTimerStartExtension() {
         assertThat(processInstances).isNotNull();
         assertThat(processInstances.getContent()).isEmpty();
 
-        //when shift 10 minutes
-        long waitTime = 600 * 1000;
+        //when shift 31 minutes
+        long waitTime = 31 * 60 * 1000;
         processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + waitTime));
 
         //then

File: activiti-core/activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/listener/DummyBPMNTimerFiredListener.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.boot.test.context.TestComponent;
 
 @TestComponent
-public class DummyBPMNTimerFiredListener implements BPMNElementEventListener<BPMNTimerFiredEvent> { 
+public class DummyBPMNTimerFiredListener implements BPMNElementEventListener<BPMNTimerFiredEvent> {
 
     private List<BPMNTimerFiredEvent> events = new LinkedList<>();
     

File: activiti-core/activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/VariablesMappingProvider.java
Patch:
@@ -140,10 +140,10 @@ public Map<String, Object> calculateOutPutVariables(MappingExecutionContext exec
         }
 
         if (!extensions.getExtensions().hasMapping(execution.getActivityId())) {
-            return new HashMap<>(availableVariables);
+            return (availableVariables != null ? new HashMap<>(availableVariables) : Collections.emptyMap());
         }
 
-        if (!availableVariables.isEmpty()) {
+        if (availableVariables != null && !availableVariables.isEmpty()) {
             if (expressionResolver.containsExpression(availableVariables)) {
                 throw new ActivitiIllegalArgumentException("Expressions are not allowed as variable values in the output mapping");
             }

File: activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/Payload.java
Patch:
@@ -1,5 +1,7 @@
 package org.activiti.api.model.shared;
 
-public interface Payload {
+import java.io.Serializable;
+
+public interface Payload extends Serializable {
     String getId();
 }

File: activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/RuntimeEvent.java
Patch:
@@ -16,7 +16,9 @@
 
 package org.activiti.api.model.shared.event;
 
-public interface RuntimeEvent<ENTITY_TYPE, EVENT_TYPE extends Enum<?>> {
+import java.io.Serializable;
+
+public interface RuntimeEvent<ENTITY_TYPE, EVENT_TYPE extends Enum<?>> extends Serializable {
 
     String getId();
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APIProcessDefinitionConverter.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.activiti.runtime.api.model.impl;
 
+import java.util.Objects;
+
 import org.activiti.api.process.model.ProcessDefinition;
 import org.activiti.api.runtime.model.impl.ProcessDefinitionImpl;
 import org.activiti.bpmn.model.BpmnModel;
@@ -37,6 +39,7 @@ public ProcessDefinition from(org.activiti.engine.repository.ProcessDefinition i
         processDefinition.setDescription(internalProcessDefinition.getDescription());
         processDefinition.setVersion(internalProcessDefinition.getVersion());
         processDefinition.setKey(internalProcessDefinition.getKey());
+        processDefinition.setAppVersion(Objects.toString(internalProcessDefinition.getAppVersion(), null));
         BpmnModel model = repositoryService.getBpmnModel(internalProcessDefinition.getId());
         processDefinition.setFormKey(model.getStartFormKey(internalProcessDefinition.getKey()));
         return processDefinition;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APITaskConverter.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.activiti.runtime.api.model.impl;
 
+import java.util.Objects;
+
 import org.activiti.api.task.model.Task;
 import org.activiti.api.task.model.impl.TaskImpl;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
@@ -45,6 +47,7 @@ public Task from(org.activiti.engine.task.Task internalTask,
         task.setPriority(internalTask.getPriority());
         task.setFormKey(internalTask.getFormKey());
         task.setTaskDefinitionKey(internalTask.getTaskDefinitionKey());
+        task.setAppVersion(Objects.toString(internalTask.getAppVersion(), null));
         return task;
     }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeployCmd.java
Patch:
@@ -82,7 +82,7 @@ protected Deployment executeDeploy(CommandContext commandContext) {
                                      existingDeployment)) {
                   return existingDeployment;
               } else {
-                  deployment.setVersion(existingDeployment.getVersion() != null? existingDeployment.getVersion() + 1 : 2);
+                  deployment.setVersion(existingDeployment.getVersion() + 1);
               }
           }
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManagerImpl.java
Patch:
@@ -80,6 +80,7 @@ public void insert(TaskEntity taskEntity, ExecutionEntity execution) {
       taskEntity.setExecutionId(execution.getId());
       taskEntity.setProcessInstanceId(execution.getProcessInstanceId());
       taskEntity.setProcessDefinitionId(execution.getProcessDefinitionId());
+      taskEntity.setAppVersion(execution.getAppVersion());
       
       getHistoryManager().recordTaskExecutionIdChange(taskEntity.getId(), taskEntity.getExecutionId());
     }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessVariablesPayloadValidator.java
Patch:
@@ -81,7 +81,7 @@ private boolean validateVariablesAgainstDefinitions(Optional<Map<String, Variabl
                 if (variableDefinitionEntry.getValue().getName().equals(name)) {
                     String type = variableDefinitionEntry.getValue().getType();
 
-                    if ("date".equals(type) &&  value != null) {
+                    if (type.contains("date") &&  value != null) {
                         try {
                             payloadVar.setValue(dateFormatterProvider.toDate(value));
                         } catch (Exception e) {

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -96,6 +96,7 @@ public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper,
         variableTypeMap.put("json", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("file", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("date", new DateVariableType(Date.class, dateFormatterProvider));
+        variableTypeMap.put("datetime", new DateVariableType(Date.class, dateFormatterProvider));
         return variableTypeMap;
     }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/EventSubProcessMessageStartEventActivityBehavior.java
Patch:
@@ -76,8 +76,8 @@ public void trigger(DelegateExecution execution, String triggerName, Object trig
       List<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(executionEntity.getParentId());
       for (ExecutionEntity childExecution : childExecutions) {
         if (!childExecution.getId().equals(executionEntity.getId())) {
-          executionEntityManager.deleteExecutionAndRelatedData(childExecution, 
-              DeleteReason.EVENT_SUBPROCESS_INTERRUPTING + "(" + startEvent.getId() + ")", false);
+          executionEntityManager.deleteExecutionAndRelatedData(childExecution,
+              DeleteReason.EVENT_SUBPROCESS_INTERRUPTING + "(" + startEvent.getId() + ")", true);
         }
       }
     }
@@ -104,7 +104,7 @@ public void trigger(DelegateExecution execution, String triggerName, Object trig
   }
 
   protected Map<String, Object> processDataObjects(Collection<ValuedDataObject> dataObjects) {
-    Map<String, Object> variablesMap = new HashMap<String, Object>();
+    Map<String, Object> variablesMap = new HashMap<>();
     // convert data objects to process variables
     if (dataObjects != null) {
       for (ValuedDataObject dataObject : dataObjects) {

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ProcessCompletedImpl.java
Patch:
@@ -26,6 +26,7 @@ public class ProcessCompletedImpl extends RuntimeEventImpl<ProcessInstance, Proc
 
     public ProcessCompletedImpl(ProcessInstance entity) {
         super(entity);
+        setProcessInstanceId(entity.getId());
     }
 
     @Override

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessDefinition.java
Patch:
@@ -16,7 +16,9 @@
 
 package org.activiti.api.process.model;
 
-public interface ProcessDefinition {
+import org.activiti.api.model.shared.model.ApplicationElement;
+
+public interface ProcessDefinition extends ApplicationElement {
 
     String getId();
 

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/ProcessInstance.java
Patch:
@@ -18,7 +18,9 @@
 
 import java.util.Date;
 
-public interface ProcessInstance {
+import org.activiti.api.model.shared.model.ApplicationElement;
+
+public interface ProcessInstance extends ApplicationElement {
 
     enum ProcessInstanceStatus {
         CREATED,

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/Task.java
Patch:
@@ -18,7 +18,9 @@
 
 import java.util.Date;
 
-public interface Task {
+import org.activiti.api.model.shared.model.ApplicationElement;
+
+public interface Task extends ApplicationElement {
 
     enum TaskStatus {
         CREATED,

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -179,8 +179,8 @@ public ProcessDefinitionResourceFinderDescriptor processDefinitionResourceFinder
     @Bean
     @ConditionalOnMissingBean
     public ProcessExtensionResourceFinderDescriptor processExtensionResourceFinderDescriptor(ActivitiProperties activitiProperties,
-                                                                                             @Value("${activiti.process.extensions.dir:classpath:**/processes/}") String locationPrefix,
-                                                                                             @Value("${activiti.process.extensions.suffix:**-extensions.json}") String locationSuffix) {
+                                                                                             @Value("${spring.activiti.process.extensions.dir:classpath*:**/processes/}") String locationPrefix,
+                                                                                             @Value("${spring.activiti.process.extensions.suffix:**-extensions.json}") String locationSuffix) {
         return new ProcessExtensionResourceFinderDescriptor(activitiProperties.isCheckProcessDefinitions(),
                 locationPrefix,
                 locationSuffix);

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeployCmd.java
Patch:
@@ -82,7 +82,7 @@ protected Deployment executeDeploy(CommandContext commandContext) {
                                      existingDeployment)) {
                   return existingDeployment;
               } else {
-                  deployment.setVersion(existingDeployment.getVersion() + 1);
+                  deployment.setVersion(existingDeployment.getVersion() != null? existingDeployment.getVersion() + 1 : 2);
               }
           }
     }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/TextAnnotationXMLConverter.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -66,7 +66,7 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
   protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {
     TextAnnotation textAnnotation = (TextAnnotation) element;
     if (StringUtils.isNotEmpty(textAnnotation.getText())) {
-      xtw.writeStartElement(ELEMENT_TEXT_ANNOTATION_TEXT);
+      xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_TEXT_ANNOTATION_TEXT, BPMN2_NAMESPACE);
       xtw.writeCharacters(textAnnotation.getText());
       xtw.writeEndElement();
     }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/SignalAndMessageDefinitionExport.java
Patch:
@@ -63,7 +63,7 @@ public static void writeSignalsAndMessages(BpmnModel model,
         }
 
         for (Message message : model.getMessages()) {
-            xtw.writeStartElement(ELEMENT_MESSAGE);
+            xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_MESSAGE, BPMN2_NAMESPACE);
             String messageId = message.getId();
             // remove the namespace from the message id if set
             if (model.getTargetNamespace() != null && messageId.startsWith(model.getTargetNamespace())) {

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/CatchEventXMLConverter.java
Patch:
@@ -18,13 +18,15 @@
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.bpmn.model.FlowNode;
 import org.activiti.bpmn.model.IntermediateCatchEvent;
 
 /**
 
  */
 public class CatchEventXMLConverter extends BaseBpmnXMLConverter {
 
+  @Override
   public Class<? extends BaseElement> getBpmnElementType() {
     return IntermediateCatchEvent.class;
   }
@@ -49,6 +51,7 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
 
   @Override
   protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {
+    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
     IntermediateCatchEvent catchEvent = (IntermediateCatchEvent) element;
     writeEventDefinitions(catchEvent, catchEvent.getEventDefinitions(), model, xtw);
   }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ThrowEventXMLConverter.java
Patch:
@@ -18,13 +18,15 @@
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.bpmn.model.FlowNode;
 import org.activiti.bpmn.model.ThrowEvent;
 
 /**
 
  */
 public class ThrowEventXMLConverter extends BaseBpmnXMLConverter {
 
+  @Override
   public Class<? extends BaseElement> getBpmnElementType() {
     return ThrowEvent.class;
   }
@@ -48,6 +50,7 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
 
   @Override
   protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {
+    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
     ThrowEvent throwEvent = (ThrowEvent) element;
     writeEventDefinitions(throwEvent, throwEvent.getEventDefinitions(), model, xtw);
   }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/EndEventXMLConverter.java
Patch:
@@ -26,6 +26,7 @@
  */
 public class EndEventXMLConverter extends BaseBpmnXMLConverter {
 
+  @Override
   public Class<? extends BaseElement> getBpmnElementType() {
     return EndEvent.class;
   }
@@ -49,8 +50,8 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
 
   @Override
   protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {
+    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
     EndEvent endEvent = (EndEvent) element;
     writeEventDefinitions(endEvent, endEvent.getEventDefinitions(), model, xtw);
-    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
   }
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ConnectorsAutoConfiguration.java
Patch:
@@ -31,8 +31,8 @@ public class ConnectorsAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean
-    public IntegrationContextBuilder integrationContextBuilder(ProcessExtensionService processExtensionService) {
-        return new IntegrationContextBuilder(new VariablesMappingProvider(processExtensionService));
+    public IntegrationContextBuilder integrationContextBuilder(VariablesMappingProvider variablesMappingProvider) {
+        return new IntegrationContextBuilder(variablesMappingProvider);
     }
 
     @Bean(name = DefaultActivityBehaviorFactory.DEFAULT_SERVICE_TASK_BEAN_NAME)

File: activiti-spring-process-extensions/src/test/java/org/activiti/spring/process/ProcessVariablesInitiatorIT.java
Patch:
@@ -54,7 +54,7 @@ public class ProcessVariablesInitiatorIT {
 
     @MockBean
     private RepositoryService repositoryService;
-    
+
     @Before
     public void setUp() {
         initMocks(this);

File: activiti-common-util/src/main/java/org/activiti/common/util/conf/ActivitiCoreCommonUtilAutoConfiguration.java
Patch:
@@ -24,7 +24,7 @@ public class ActivitiCoreCommonUtilAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean
-    public DateFormatterProvider dateFormatterProvider(@Value("${spring.activiti.date-format-pattern:yyyy-MM-dd[['T'][ ]HH:mm:ss[.SSS'Z']]}")
+    public DateFormatterProvider dateFormatterProvider(@Value("${spring.activiti.date-format-pattern:yyyy-MM-dd[['T']HH:mm:ss[.SSS'Z']]}")
                                                        String dateFormatPattern) {
         return new DateFormatterProvider(dateFormatPattern);
     }

File: activiti-common-util/src/test/java/org/activiti/common/util/DateFormatterProviderTest.java
Patch:
@@ -28,7 +28,7 @@
 
 public class DateFormatterProviderTest {
 
-    private DateFormatterProvider provider = new DateFormatterProvider("yyyy-MM-dd[['T'][ ]HH:mm:ss[.SSS'Z']]");
+    private DateFormatterProvider provider = new DateFormatterProvider("yyyy-MM-dd[['T']HH:mm:ss[.SSS'Z']]");
 
     @Test
     public void should_returnDate_when_stringRepresentsADate() {

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/types/DateVariableType.java
Patch:
@@ -1,10 +1,10 @@
 package org.activiti.spring.process.variable.types;
 
-import org.activiti.engine.ActivitiException;
-import org.activiti.spring.process.variable.DateFormatterProvider;
-
 import java.util.List;
 
+import org.activiti.common.util.DateFormatterProvider;
+import org.activiti.engine.ActivitiException;
+
 /**
  * Basic date type for setting default date values for vars in extension json
  */

File: activiti-common-util/src/main/java/org/activiti/common/util/conf/ActivitiCoreCommonUtilAutoConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
-public class UtilAutoConfiguration {
+public class ActivitiCoreCommonUtilAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ActivitiMethodSecurityAutoConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package org.activiti.spring.boot;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
@@ -9,6 +10,7 @@
 @Configuration
 @ConditionalOnProperty(name = "spring.activiti.security.enabled", matchIfMissing = true)
 @ConditionalOnClass(GlobalMethodSecurityConfiguration.class)
+@ConditionalOnMissingBean(annotation = EnableGlobalMethodSecurity.class)
 public class ActivitiMethodSecurityAutoConfiguration {
 
     @Configuration

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BaseBpmnXMLConverter.java
Patch:
@@ -501,7 +501,7 @@ protected void writeMessageDefinition(Event parentEvent, MessageEventDefinition
 
   protected void writeErrorDefinition(Event parentEvent, ErrorEventDefinition errorDefinition, XMLStreamWriter xtw) throws Exception {
     xtw.writeStartElement(ELEMENT_EVENT_ERRORDEFINITION);
-    writeDefaultAttribute(ATTRIBUTE_ERROR_REF, errorDefinition.getErrorCode(), xtw);
+    writeDefaultAttribute(ATTRIBUTE_ERROR_REF, errorDefinition.getErrorRef(), xtw);
     boolean didWriteExtensionStartElement = BpmnXMLUtil.writeExtensionElements(errorDefinition, false, xtw);
     if (didWriteExtensionStartElement) {
       xtw.writeEndElement();

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ErrorEventDefinitionParser.java
Patch:
@@ -36,8 +36,8 @@ public void parseChildElement(XMLStreamReader xtr,
         ErrorEventDefinition eventDefinition = new ErrorEventDefinition();
         BpmnXMLUtil.addXMLLocation(eventDefinition,
                                    xtr);
-        eventDefinition.setErrorCode(xtr.getAttributeValue(null,
-                                                           "errorRef"));
+        eventDefinition.setErrorRef(xtr.getAttributeValue(null,
+                                                          ATTRIBUTE_ERROR_REF));
 
         BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_ERRORDEFINITION,
                                        eventDefinition,

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/DefaultActivityBehaviorFactory.java
Patch:
@@ -505,7 +505,7 @@ public NoneEndEventActivityBehavior createNoneEndEventActivityBehavior(EndEvent
 
     public ErrorEndEventActivityBehavior createErrorEndEventActivityBehavior(EndEvent endEvent,
                                                                              ErrorEventDefinition errorEventDefinition) {
-        return new ErrorEndEventActivityBehavior(errorEventDefinition.getErrorCode());
+        return new ErrorEndEventActivityBehavior(errorEventDefinition.getErrorRef());
     }
 
     public CancelEndEventActivityBehavior createCancelEndEventActivityBehavior(EndEvent endEvent) {

File: activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BaseBpmnJsonConverter.java
Patch:
@@ -560,9 +560,9 @@ protected void addEventProperties(Event event,
             EventDefinition eventDefinition = eventDefinitions.get(0);
             if (eventDefinition instanceof ErrorEventDefinition) {
                 ErrorEventDefinition errorDefinition = (ErrorEventDefinition) eventDefinition;
-                if (StringUtils.isNotEmpty(errorDefinition.getErrorCode())) {
+                if (StringUtils.isNotEmpty(errorDefinition.getErrorRef())) {
                     propertiesNode.put(PROPERTY_ERRORREF,
-                                       errorDefinition.getErrorCode());
+                                       errorDefinition.getErrorRef());
                 }
             } else if (eventDefinition instanceof SignalEventDefinition) {
                 SignalEventDefinition signalDefinition = (SignalEventDefinition) eventDefinition;
@@ -723,7 +723,7 @@ protected void convertJsonToErrorDefinition(JsonNode objectNode,
         String errorRef = getPropertyValueAsString(PROPERTY_ERRORREF,
                                                    objectNode);
         ErrorEventDefinition eventDefinition = new ErrorEventDefinition();
-        eventDefinition.setErrorCode(errorRef);
+        eventDefinition.setErrorRef(errorRef);
         event.getEventDefinitions().add(eventDefinition);
     }
 

File: activiti-json-converter/src/test/java/org/activiti/editor/language/BoundaryEventConverterTest.java
Patch:
@@ -37,7 +37,7 @@ private void validateModel(BpmnModel model) {
     BoundaryEvent errorElement = (BoundaryEvent) model.getMainProcess().getFlowElement("errorEvent", true);
     ErrorEventDefinition errorEvent = (ErrorEventDefinition) extractEventDefinition(errorElement);
     assertTrue(errorElement.isCancelActivity()); // always true
-    assertEquals("errorRef", errorEvent.getErrorCode());
+    assertEquals("errorRef", errorEvent.getErrorRef());
     assertEquals("sid-F21E9F4D-EA19-44DF-B1D3-14663A809CAE", errorElement.getAttachedToRefId());
 
     BoundaryEvent signalElement = (BoundaryEvent) model.getMainProcess().getFlowElement("signalEvent", true);

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ConnectorsAutoConfiguration.java
Patch:
@@ -30,6 +30,7 @@
 public class ConnectorsAutoConfiguration {
 
     @Bean
+    @ConditionalOnMissingBean
     public IntegrationContextBuilder integrationContextBuilder(ProcessExtensionService processExtensionService) {
         return new IntegrationContextBuilder(new VariablesMappingProvider(processExtensionService));
     }
@@ -45,6 +46,7 @@ public DefaultServiceTaskBehavior defaultServiceTaskBehavior(ApplicationContext
     }
 
     @Bean
+    @ConditionalOnMissingBean
     public VariablesMappingProvider variablesMappingProvider(ProcessExtensionService processExtensionService) {
         return new VariablesMappingProvider(processExtensionService);
     }

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNErrorReceivedIT.java
Patch:
@@ -39,10 +39,12 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Import;
 import org.springframework.test.context.junit4.SpringRunner;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
+@Import(DummyBPMNErrorReceivedListener.class)
 public class ProcessRuntimeBPMNErrorReceivedIT {
 
     private static final String ERROR_BOUNDARY_EVENT_SUBPROCESS = "errorBoundaryEventSubProcess";

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNSignalReceivedIT.java
Patch:
@@ -36,13 +36,15 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Import;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Java6Assertions.tuple;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
+@Import(DummyBPMNSignalReceivedListener.class)
 public class ProcessRuntimeBPMNSignalReceivedIT {
 
     private static final String PROCESS_WITH_BOUNDARY_SIGNAL = "ProcessWithBoundarySignal";

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeVariableMappingTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.activiti.spring.boot.process;
 
-import java.util.List;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
 
 import org.activiti.api.model.shared.model.VariableInstance;
 import org.activiti.api.process.model.ProcessInstance;
@@ -11,7 +12,7 @@
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import static org.assertj.core.api.Assertions.*;
+import java.util.List;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)

File: activiti-spring/src/test/java/org/activiti/spring/test/fieldinjection/TestExecutionListener.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.activiti.spring.test.fieldinjection;
 
-import java.util.concurrent.atomic.AtomicInteger;
-
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.DelegateHelper;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.Expression;
 import org.springframework.stereotype.Component;
 
+import java.util.concurrent.atomic.AtomicInteger;
+
 /**
 
  */

File: activiti-spring-security-policies/src/test/java/org/activiti/core/common/spring/security/policies/Application.java
Patch:
@@ -2,10 +2,8 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan(basePackages = {"org.activiti.core.common.spring.identity", "org.activiti.core.common.spring.security"})
 public class Application {
 
     public static void main(String[] args) {

File: activiti-spring-security/src/main/java/org/activiti/core/common/spring/security/LocalSpringSecurityManager.java
Patch:
@@ -2,12 +2,10 @@
 
 import org.activiti.api.runtime.shared.security.SecurityManager;
 import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.stereotype.Component;
 
 /*
  * This is a simple wrapper for Spring Security Context Holder
  */
-@Component
 public class LocalSpringSecurityManager implements SecurityManager {
 
     public String getAuthenticatedUserId() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/TriggerCmd.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.impl.cmd;
 
-import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -52,8 +51,9 @@ protected Object execute(CommandContext commandContext, ExecutionEntity executio
     }
 
     Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
-        ActivitiEventBuilder.createSignalEvent(ActivitiEventType.ACTIVITY_SIGNALED, execution.getCurrentActivityId(), null,
-            null, execution.getId(), execution.getProcessInstanceId(), execution.getProcessDefinitionId()));
+        ActivitiEventBuilder.createActivitiySignalledEvent(execution,
+                                                           null,
+                                                           null));
 
     Context.getAgenda().planTriggerExecutionOperation(execution);
     return null;

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntityImpl.java
Patch:
@@ -48,7 +48,7 @@ public class ProcessDefinitionEntityImpl extends AbstractEntity implements Proce
   protected List<IdentityLinkEntity> definitionIdentityLinkEntities = new ArrayList<IdentityLinkEntity>();
   protected IOSpecification ioSpecification;
 
-  // Backwards compatibility
+    // Backwards compatibility
   protected String engineVersion;
   
   public Object getPersistentState() {

File: activiti-engine/src/main/java/org/activiti/engine/repository/DeploymentBuilder.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.zip.ZipInputStream;
 
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.core.common.project.model.ProjectManifest;
 import org.activiti.engine.api.internal.Internal;
 import org.springframework.core.io.Resource;
 
@@ -48,6 +49,8 @@ DeploymentBuilder addInputStream(String resourceName,
 
   DeploymentBuilder addBpmnModel(String resourceName, BpmnModel bpmnModel);
 
+  DeploymentBuilder setProjectManifest(ProjectManifest projectManifest);
+
   /**
    * If called, no XML schema validation against the BPMN 2.0 XSD.
    * 

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.activiti.api.process.model.events.ProcessDeployedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.api.runtime.shared.identity.UserGroupManager;
+import org.activiti.core.common.spring.project.ProjectModelService;
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.cfg.ProcessEngineConfigurator;
 import org.activiti.engine.impl.event.EventSubscriptionPayloadMappingProvider;
@@ -70,10 +71,11 @@ public SpringProcessEngineConfiguration springProcessEngineConfiguration(
             SpringAsyncExecutor springAsyncExecutor,
             ActivitiProperties activitiProperties,
             ProcessDefinitionResourceFinder processDefinitionResourceFinder,
+            ProjectModelService projectModelService,
             @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,
             @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {
 
-        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();
+        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration(projectModelService);
         conf.setConfigurators(processEngineConfigurators);
         configureProcessDefinitionResources(processDefinitionResourceFinder,
                                             conf);

File: activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/DefaultAutoDeploymentStrategyTest.java
Patch:
@@ -38,7 +38,7 @@ public class DefaultAutoDeploymentStrategyTest extends AbstractAutoDeploymentStr
     @Before
     public void before() throws Exception {
         super.before();
-        deploymentStrategy = new DefaultAutoDeploymentStrategy();
+        deploymentStrategy = new DefaultAutoDeploymentStrategy(projectModelServiceMock);
     }
 
     @Test
@@ -106,4 +106,4 @@ public void testDetermineResourceNameWithExceptionFailsGracefully() throws Excep
                                            resources,
                                            repositoryServiceMock);
     }
-}
\ No newline at end of file
+}

File: activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/ResourceParentFolderAutoDeploymentStrategyTest.java
Patch:
@@ -51,7 +51,7 @@ public class ResourceParentFolderAutoDeploymentStrategyTest extends AbstractAuto
   @Before
   public void before() throws Exception {
     super.before();
-    deploymentStrategy = new ResourceParentFolderAutoDeploymentStrategy();
+    deploymentStrategy = new ResourceParentFolderAutoDeploymentStrategy(projectModelServiceMock);
     assertNotNull(deploymentStrategy);
 
     when(parentFile1Mock.getName()).thenReturn(parentFilename1);
@@ -197,4 +197,4 @@ public void testDeployResourcesIOExceptionWhenCreatingMapFallsBackToResourceName
     verify(deploymentBuilderMock).deploy();
   }
 
-}
\ No newline at end of file
+}

File: activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/SingleResourceAutoDeploymentStrategyTest.java
Patch:
@@ -37,7 +37,7 @@ public class SingleResourceAutoDeploymentStrategyTest extends AbstractAutoDeploy
     @Before
     public void before() throws Exception {
         super.before();
-        deploymentStrategy = new SingleResourceAutoDeploymentStrategy();
+        deploymentStrategy = new SingleResourceAutoDeploymentStrategy(projectModelServiceMock);
         assertNotNull(deploymentStrategy);
     }
 
@@ -110,4 +110,4 @@ public void testDeployResourcesNoResources() {
                never()).deploy();
     }
 
-}
\ No newline at end of file
+}

File: activiti-spring-project/src/main/java/org/activiti/core/common/spring/project/conf/ProjectModelAutoConfiguration.java
Patch:
@@ -21,7 +21,7 @@ public ObjectMapper objectMapper() {
 
     @Bean
     public ProjectModelService projectModelService(@Value("${application.manifest.file.path:classpath:/}") String path,
-                                                   @Value("${activiti.cloud.application.name}") String applicationName,
+                                                   @Value("${activiti.cloud.application.name:default-app}") String applicationName,
                                                    ObjectMapper objectMapper,
                                                    ResourcePatternResolver resourceLoader) {
         return new ProjectModelService(path,

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessExtensionsTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.spring.boot.security.util.SecurityUtil;
 import org.activiti.spring.boot.test.util.ProcessCleanUpUtil;
-import org.activiti.spring.process.variable.types.DateVariableType;
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -99,7 +98,7 @@ public void processInstanceHasValidInitialVariables() throws ParseException {
                         "bob")
                 .withVariable("subscribe",
                         true)
-                .withVariable("birth", new SimpleDateFormat(DateVariableType.defaultFormat).parse("2009-11-30"))
+                .withVariable("birth", new SimpleDateFormat("yyyy-MM-dd").parse("2009-11-30"))
                 .withBusinessKey("my business key")
                 .build());
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/MappingAwareActivityBehaviorFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
 import org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory;
 import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.spring.process.ProcessVariablesInitiator;
 
 /**
@@ -38,6 +39,8 @@ public MappingAwareActivityBehaviorFactory(VariablesMappingProvider variablesMap
         super();
         this.variablesMappingProvider = variablesMappingProvider;
         this.processVariablesInitiator = processVariablesInitiator;
+        
+        this.setMessagePayloadMappingProviderFactory(new JsonMessagePayloadMappingProviderFactory(variablesMappingProvider));
     }
 
     @Override

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -66,6 +66,7 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_CANCEL_REMAINING_INSTANCES = "cancelRemainingInstances";
   public static final String ELEMENT_COMPLETION_CONDITION = "completionCondition";
   public static final String ATTRIBUTE_MESSAGE_EXPRESSION = "messageExpression";
+  public static final String ATTRIBUTE_MESSAGE_CORRELATION_KEY = "correlationKey";
   public static final String ATTRIBUTE_SIGNAL_EXPRESSION = "signalExpression";
 
   public static final String ELEMENT_DATA_STATE = "dataState";

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
Patch:
@@ -79,7 +79,7 @@ public ProcessInstance execute(CommandContext commandContext) {
     }
 
     ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, processVariables, transientVariables);
+    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, businessKey, messageName, processVariables, transientVariables, messageEventSubscription);
 
     return processInstance;
   }

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -69,6 +69,7 @@ public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper){
         variableTypeMap.put("string", new JavaObjectVariableType(String.class));
         variableTypeMap.put("integer", new JavaObjectVariableType(Integer.class));
         variableTypeMap.put("json", new JsonObjectVariableType(objectMapper));
+        variableTypeMap.put("file", new JsonObjectVariableType(objectMapper));
         variableTypeMap.put("date", new DateVariableType(Date.class, new SimpleDateFormat(DateVariableType.defaultFormat)));
         return variableTypeMap;
     }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessAdminRuntimeImpl.java
Patch:
@@ -247,7 +247,7 @@ public void receive(ReceiveMessagePayload messagePayload) {
     }
 
     @Override
-    public void start(StartMessagePayload messagePayload) {
+    public ProcessInstance start(StartMessagePayload messagePayload) {
         throw new UnsupportedOperationException("method not yet implemented");
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -351,7 +351,7 @@ public void receive(ReceiveMessagePayload messagePayload) {
     }
 
     @Override
-    public void start(StartMessagePayload messagePayload) {
+    public ProcessInstance start(StartMessagePayload messagePayload) {
         throw new UnsupportedOperationException("method not yet implemented");
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessAdminRuntimeImpl.java
Patch:
@@ -247,7 +247,7 @@ public void receive(ReceiveMessagePayload messagePayload) {
     }
 
     @Override
-    public void start(StartMessagePayload messagePayload) {
+    public ProcessInstance start(StartMessagePayload messagePayload) {
         throw new UnsupportedOperationException("method not yet implemented");
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -351,7 +351,7 @@ public void receive(ReceiveMessagePayload messagePayload) {
     }
 
     @Override
-    public void start(StartMessagePayload messagePayload) {
+    public ProcessInstance start(StartMessagePayload messagePayload) {
         throw new UnsupportedOperationException("method not yet implemented");
     }
 

File: activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/ProcessAdminRuntime.java
Patch:
@@ -113,5 +113,5 @@ Page<ProcessInstance> processInstances(Pageable pageable,
 
     void receive(ReceiveMessagePayload messagePayload);
     
-    void start(StartMessagePayload messagePayload);
+    ProcessInstance start(StartMessagePayload messagePayload);
 }

File: activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/ProcessRuntime.java
Patch:
@@ -128,5 +128,5 @@ Page<ProcessInstance> processInstances(Pageable pageable,
     
     void receive(ReceiveMessagePayload messagePayload);
     
-    void start(StartMessagePayload messagePayload);
+    ProcessInstance start(StartMessagePayload messagePayload);
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessAdminRuntimeImpl.java
Patch:
@@ -242,13 +242,12 @@ public void removeVariables(RemoveProcessVariablesPayload removeProcessVariables
 
     @Override
     public void receive(MessagePayload messagePayload) {
-        throw new UnsupportedOperationException("methot not implemented");
-        
+        throw new UnsupportedOperationException("method not yet implemented");
     }
 
     @Override
     public void start(MessagePayload messagePayload) {
-        throw new UnsupportedOperationException("methot not implemented");
+        throw new UnsupportedOperationException("method not yet implemented");
     }
 
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -346,12 +346,12 @@ public ProcessInstance update(UpdateProcessPayload updateProcessPayload) {
 
     @Override
     public void receive(MessagePayload messagePayload) {
-        throw new UnsupportedOperationException("methot not implemented");
+        throw new UnsupportedOperationException("method not yet implemented");
     }
 
     @Override
     public void start(MessagePayload messagePayload) {
-        throw new UnsupportedOperationException("methot not implemented");
+        throw new UnsupportedOperationException("method not yet implemented");
     }
 
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ConnectorsAutoConfiguration.java
Patch:
@@ -40,12 +40,12 @@ public DefaultServiceTaskBehavior defaultServiceTaskBehavior(ApplicationContext
                                                                  IntegrationContextBuilder integrationContextBuilder,
                                                                  VariablesMappingProvider outboundVariablesProvider) {
         return new DefaultServiceTaskBehavior(applicationContext,
-                                              integrationContextBuilder,
-                                              outboundVariablesProvider);
+                integrationContextBuilder,
+                outboundVariablesProvider);
     }
 
     @Bean
-    public VariablesMappingProvider variablesMappingProvider(ProcessExtensionService processExtensionService){
+    public VariablesMappingProvider variablesMappingProvider(ProcessExtensionService processExtensionService) {
         return new VariablesMappingProvider(processExtensionService);
     }
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ActivitiEntityEventHelper.java
Patch:
@@ -22,9 +22,9 @@
 public class ActivitiEntityEventHelper {
 
     public static boolean isProcessInstanceEntity(Object entity) {
-        return entity != null
-                && ProcessInstance.class.isAssignableFrom(entity.getClass())
-                && ((ExecutionEntity) entity).isProcessInstanceType();
+        return entity != null &&
+                ProcessInstance.class.isAssignableFrom(entity.getClass()) &&
+                ((ExecutionEntity) entity).isProcessInstanceType();
     }
 
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ProcessCompletedImpl.java
Patch:
@@ -16,9 +16,9 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.api.process.runtime.events.ProcessCompletedEvent;
-import org.activiti.api.process.model.events.ProcessRuntimeEvent;
 import org.activiti.api.process.model.ProcessInstance;
+import org.activiti.api.process.model.events.ProcessRuntimeEvent;
+import org.activiti.api.process.runtime.events.ProcessCompletedEvent;
 import org.activiti.api.runtime.event.impl.RuntimeEventImpl;
 
 public class ProcessCompletedImpl extends RuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents>

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPIProcessCreatedEventConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.runtime.events.ProcessCreatedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.runtime.api.model.impl.APIProcessInstanceConverter;
 
+import java.util.Optional;
+
 import static org.activiti.runtime.api.event.impl.ActivitiEntityEventHelper.isProcessInstanceEntity;
 
 public class ToAPIProcessCreatedEventConverter implements EventConverter<ProcessCreatedEvent, ActivitiEntityEvent> {
@@ -45,4 +45,4 @@ public Optional<ProcessCreatedEvent> from(ActivitiEntityEvent internalEvent) {
         return Optional.ofNullable(event);
     }
 
-}
\ No newline at end of file
+}

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPIProcessStartedEventConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.runtime.events.ProcessStartedEvent;
 import org.activiti.engine.delegate.event.ActivitiProcessStartedEvent;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.runtime.api.model.impl.APIProcessInstanceConverter;
 
+import java.util.Optional;
+
 public class ToAPIProcessStartedEventConverter implements EventConverter<ProcessStartedEvent, ActivitiProcessStartedEvent> {
 
     private final APIProcessInstanceConverter processInstanceConverter;
@@ -41,4 +41,4 @@ public Optional<ProcessStartedEvent> from(ActivitiProcessStartedEvent internalEv
         processStartedEvent.setNestedProcessInstanceId(internalEvent.getNestedProcessInstanceId());
         return Optional.of(processStartedEvent);
     }
-}
\ No newline at end of file
+}

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToActivityCompletedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNActivityCompletedEvent;
 import org.activiti.api.runtime.event.impl.BPMNActivityCompletedEventImpl;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
 import org.activiti.runtime.api.model.impl.ToActivityConverter;
 
+import java.util.Optional;
+
 public class ToActivityCompletedConverter implements EventConverter<BPMNActivityCompletedEvent, ActivitiActivityEvent> {
 
     private ToActivityConverter toActivityConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToActivityStartedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNActivityStartedEvent;
 import org.activiti.api.runtime.event.impl.BPMNActivityStartedEventImpl;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
 import org.activiti.runtime.api.model.impl.ToActivityConverter;
 
+import java.util.Optional;
+
 public class ToActivityStartedConverter implements EventConverter<BPMNActivityStartedEvent, ActivitiActivityEvent> {
 
     private ToActivityConverter toActivityConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToProcessCompletedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.runtime.events.ProcessCompletedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.runtime.api.model.impl.APIProcessInstanceConverter;
 
+import java.util.Optional;
+
 public class ToProcessCompletedConverter implements EventConverter<ProcessCompletedEvent, ActivitiEntityEvent> {
 
     private APIProcessInstanceConverter processInstanceConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToProcessResumedConverter.java
Patch:
@@ -16,16 +16,16 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.runtime.events.ProcessResumedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.runtime.api.model.impl.APIProcessInstanceConverter;
 
+import java.util.Optional;
+
 import static org.activiti.runtime.api.event.impl.ActivitiEntityEventHelper.isProcessInstanceEntity;
 
-public class ToProcessResumedConverter implements EventConverter<ProcessResumedEvent, ActivitiEntityEvent>{
+public class ToProcessResumedConverter implements EventConverter<ProcessResumedEvent, ActivitiEntityEvent> {
 
     private final APIProcessInstanceConverter processInstanceConverter;
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToProcessSuspendedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.runtime.events.ProcessSuspendedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.runtime.api.model.impl.APIProcessInstanceConverter;
 
+import java.util.Optional;
+
 import static org.activiti.runtime.api.event.impl.ActivitiEntityEventHelper.isProcessInstanceEntity;
 
 public class ToProcessSuspendedConverter implements EventConverter<ProcessSuspendedEvent, ActivitiEntityEvent> {

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTimerCancelledConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNTimerCancelledEvent;
 import org.activiti.api.runtime.event.impl.BPMNTimerCancelledEventImpl;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 
+import java.util.Optional;
+
 public class ToTimerCancelledConverter implements EventConverter<BPMNTimerCancelledEvent, ActivitiEvent> {
 
     private BPMNTimerConverter bpmnTimerConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTimerExecutedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNTimerExecutedEvent;
 import org.activiti.api.runtime.event.impl.BPMNTimerExecutedEventImpl;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 
+import java.util.Optional;
+
 public class ToTimerExecutedConverter implements EventConverter<BPMNTimerExecutedEvent, ActivitiEvent> {
 
     private BPMNTimerConverter bpmnTimerConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTimerFailedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNTimerFailedEvent;
 import org.activiti.api.runtime.event.impl.BPMNTimerFailedEventImpl;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 
+import java.util.Optional;
+
 public class ToTimerFailedConverter implements EventConverter<BPMNTimerFailedEvent, ActivitiEvent> {
 
     private BPMNTimerConverter bpmnTimerConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTimerFiredConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNTimerFiredEvent;
 import org.activiti.api.runtime.event.impl.BPMNTimerFiredEventImpl;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 
+import java.util.Optional;
+
 public class ToTimerFiredConverter implements EventConverter<BPMNTimerFiredEvent, ActivitiEvent> {
 
     private BPMNTimerConverter bpmnTimerConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTimerRetriesDecrementedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNTimerRetriesDecrementedEvent;
 import org.activiti.api.runtime.event.impl.BPMNTimerRetriesDecrementedEventImpl;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 
+import java.util.Optional;
+
 public class ToTimerRetriesDecrementedConverter implements EventConverter<BPMNTimerRetriesDecrementedEvent, ActivitiEvent> {
 
     private BPMNTimerConverter bpmnTimerConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTimerScheduledConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.process.model.events.BPMNTimerScheduledEvent;
 import org.activiti.api.runtime.event.impl.BPMNTimerScheduledEventImpl;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 
+import java.util.Optional;
+
 public class ToTimerScheduledConverter implements EventConverter<BPMNTimerScheduledEvent, ActivitiEvent> {
 
     private BPMNTimerConverter bpmnTimerConverter;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ActivityCancelledListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNActivityCancelledEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToActivityCancelledConverter;
 
+import java.util.List;
+
 public class ActivityCancelledListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNActivityCancelledEvent>> processRuntimeEventListeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiActivityEvent) {
             converter.from((ActivitiActivityEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (BPMNElementEventListener<BPMNActivityCancelledEvent> listener : processRuntimeEventListeners) {
+                        for ( BPMNElementEventListener<BPMNActivityCancelledEvent> listener : processRuntimeEventListeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ActivityStartedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNActivityStartedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToActivityStartedConverter;
 
+import java.util.List;
+
 public class ActivityStartedListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNActivityStartedEvent>> processRuntimeEventListeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiActivityEvent) {
             converter.from((ActivitiActivityEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (BPMNElementEventListener<BPMNActivityStartedEvent> listener : processRuntimeEventListeners) {
+                        for ( BPMNElementEventListener<BPMNActivityStartedEvent> listener : processRuntimeEventListeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessCancelledListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.runtime.events.ProcessCancelledEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiCancelledEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToProcessCancelledConverter;
 
+import java.util.List;
+
 public class ProcessCancelledListenerDelegate implements ActivitiEventListener {
 
     private List<ProcessRuntimeEventListener<ProcessCancelledEvent>> processRuntimeEventListeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiCancelledEvent) {
             processCancelledConverter.from((ActivitiCancelledEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (ProcessRuntimeEventListener<ProcessCancelledEvent> listener : processRuntimeEventListeners) {
+                        for ( ProcessRuntimeEventListener<ProcessCancelledEvent> listener : processRuntimeEventListeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessCreatedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.runtime.events.ProcessCreatedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToAPIProcessCreatedEventConverter;
 
+import java.util.List;
+
 public class ProcessCreatedListenerDelegate implements ActivitiEventListener {
 
     private List<ProcessRuntimeEventListener<ProcessCreatedEvent>> listeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiEntityEvent) {
             entityCreatedEventConverter.from((ActivitiEntityEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (ProcessRuntimeEventListener<ProcessCreatedEvent> listener : listeners) {
+                        for ( ProcessRuntimeEventListener<ProcessCreatedEvent> listener : listeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessResumedEventListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.runtime.events.ProcessResumedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToProcessResumedConverter;
 
+import java.util.List;
+
 public class ProcessResumedEventListenerDelegate implements ActivitiEventListener {
 
     private List<ProcessRuntimeEventListener<ProcessResumedEvent>> processRuntimeEventListeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiEntityEvent) {
             processResumedConverter.from((ActivitiEntityEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (ProcessRuntimeEventListener<ProcessResumedEvent> listener : processRuntimeEventListeners) {
+                        for ( ProcessRuntimeEventListener<ProcessResumedEvent> listener : processRuntimeEventListeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessStartedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.runtime.events.ProcessStartedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.engine.delegate.event.ActivitiProcessStartedEvent;
 import org.activiti.runtime.api.event.impl.ToAPIProcessStartedEventConverter;
 
+import java.util.List;
+
 public class ProcessStartedListenerDelegate implements ActivitiEventListener {
 
     private List<ProcessRuntimeEventListener<ProcessStartedEvent>> listeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiProcessStartedEvent) {
             processInstanceStartedEventConverter.from((ActivitiProcessStartedEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (ProcessRuntimeEventListener<ProcessStartedEvent> listener : listeners) {
+                        for ( ProcessRuntimeEventListener<ProcessStartedEvent> listener : listeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessSuspendedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.runtime.events.ProcessSuspendedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToProcessSuspendedConverter;
 
+import java.util.List;
+
 public class ProcessSuspendedListenerDelegate implements ActivitiEventListener {
 
     private List<ProcessRuntimeEventListener<ProcessSuspendedEvent>> processRuntimeEventListeners;
@@ -42,7 +42,7 @@ public void onEvent(ActivitiEvent event) {
         if (event instanceof ActivitiEntityEvent) {
             processSuspendedConverter.from((ActivitiEntityEvent) event)
                     .ifPresent(convertedEvent -> {
-                        for (ProcessRuntimeEventListener<ProcessSuspendedEvent> listener : processRuntimeEventListeners) {
+                        for ( ProcessRuntimeEventListener<ProcessSuspendedEvent> listener : processRuntimeEventListeners ) {
                             listener.onEvent(convertedEvent);
                         }
                     });

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/ProcessUpdatedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.runtime.events.ProcessUpdatedEvent;
 import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToProcessUpdatedConverter;
 
+import java.util.List;
+
 public class ProcessUpdatedListenerDelegate implements ActivitiEventListener {
 
     private List<ProcessRuntimeEventListener<ProcessUpdatedEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/SequenceFlowTakenListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNSequenceFlowTakenEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.engine.delegate.event.ActivitiSequenceFlowTakenEvent;
 import org.activiti.runtime.api.event.impl.ToSequenceFlowTakenConverter;
 
+import java.util.List;
+
 public class SequenceFlowTakenListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNSequenceFlowTakenEvent>> listeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/SignalReceivedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNSignalReceivedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.engine.delegate.event.ActivitiSignalEvent;
 import org.activiti.runtime.api.event.impl.ToSignalReceivedConverter;
 
+import java.util.List;
+
 public class SignalReceivedListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNSignalReceivedEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TimerCancelledListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNTimerCancelledEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTimerCancelledConverter;
 
+import java.util.List;
+
 public class TimerCancelledListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNTimerCancelledEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TimerExecutedListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNTimerExecutedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTimerExecutedConverter;
 
+import java.util.List;
+
 public class TimerExecutedListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNTimerExecutedEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TimerFailedListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNTimerFailedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTimerFailedConverter;
 
+import java.util.List;
+
 public class TimerFailedListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNTimerFailedEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TimerFiredListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNTimerFiredEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTimerFiredConverter;
 
+import java.util.List;
+
 public class TimerFiredListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNTimerFiredEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TimerRetriesDecrementedListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNTimerRetriesDecrementedEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTimerRetriesDecrementedConverter;
 
+import java.util.List;
+
 public class TimerRetriesDecrementedListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNTimerRetriesDecrementedEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TimerScheduledListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.process.model.events.BPMNTimerScheduledEvent;
 import org.activiti.api.process.runtime.events.listener.BPMNElementEventListener;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTimerScheduledConverter;
 
+import java.util.List;
+
 public class TimerScheduledListenerDelegate implements ActivitiEventListener {
 
     private List<BPMNElementEventListener<BPMNTimerScheduledEvent>> processRuntimeEventListeners;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/MappingAwareActivityBehaviorFactory.java
Patch:
@@ -10,6 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.activiti.runtime.api.impl;
 
 import java.util.List;
@@ -21,7 +22,6 @@
 import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
 import org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory;
 import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.spring.process.ProcessVariablesInitiator;
 
 /**

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/ToActivityConverter.java
Patch:
@@ -16,9 +16,9 @@
 
 package org.activiti.runtime.api.model.impl;
 
+import org.activiti.api.process.model.BPMNActivity;
 import org.activiti.api.runtime.model.impl.BPMNActivityImpl;
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
-import org.activiti.api.process.model.BPMNActivity;
 
 public class ToActivityConverter {
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/ToSignalConverter.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.model.impl;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.activiti.api.process.model.BPMNSignal;
 import org.activiti.api.process.model.builders.ProcessPayloadBuilder;
 import org.activiti.api.process.model.payloads.SignalPayload;
 import org.activiti.api.runtime.model.impl.BPMNSignalImpl;
 import org.activiti.engine.delegate.event.ActivitiSignalEvent;
 
+import java.util.HashMap;
+import java.util.Map;
+
 public class ToSignalConverter {
 
     @SuppressWarnings("unchecked")

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/signal/SignalPayloadEventListener.java
Patch:
@@ -3,8 +3,7 @@
 import org.activiti.api.process.model.payloads.SignalPayload;
 
 /**
- * SignalPayloadEventListener handler interface   
- *
+ * SignalPayloadEventListener handler interface.
  */
 public interface SignalPayloadEventListener {
     public void sendSignal(SignalPayload signalPayload);

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/ProcessRuntimeTestApp.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api;
 
-import org.activiti.engine.RepositoryService;
-import org.activiti.engine.RuntimeService;
 import org.activiti.api.runtime.shared.identity.UserGroupManager;
 import org.activiti.api.runtime.shared.security.SecurityManager;
 import org.activiti.core.common.spring.security.policies.ProcessSecurityPoliciesManager;
+import org.activiti.engine.RepositoryService;
+import org.activiti.engine.RuntimeService;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/MappingAwareCallActivityBehaviorTest.java
Patch:
@@ -50,7 +50,6 @@ public void setUp() {
         initMocks(this);
     }
 
-
     @Test
     public void calculateInboundVariablesShouldTakeIntoAccountMappingProviderAndProcessVariablesInitiator() {
         //given
@@ -93,4 +92,4 @@ public void calculateOutBoundVariablesShouldReturnValueFromMappingProvider() {
         //then
         assertThat(outBoundVariables).isEqualTo(providerVariables);
     }
-}
\ No newline at end of file
+}

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/VariablesMappingProviderTest.java
Patch:
@@ -117,7 +117,6 @@ public void calculateInputVariablesShouldPassOnlyConstantsWhenTheMappingIsEmpty(
                         tuple("process_constant_inputmap_2", "constant_value")
                 );
 
-
     }
 
     @Test
@@ -184,5 +183,4 @@ public void calculateOutputVariablesShouldNotPassAnyVariablesWhenTheMappingIsEmp
         assertThat(inputVariables).isEmpty();
     }
 
-
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/model/impl/MockProcessDefinitionBuilder.java
Patch:
@@ -22,7 +22,7 @@
 import static org.mockito.Mockito.when;
 
 /**
- * Mock process definition builder
+ * Mock process definition builder.
  */
 public class MockProcessDefinitionBuilder {
 

File: activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/event/impl/ToVariableCreatedConverter.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.model.shared.event.VariableCreatedEvent;
 import org.activiti.api.runtime.event.impl.VariableCreatedEventImpl;
-import org.activiti.engine.delegate.event.ActivitiVariableEvent;
 import org.activiti.api.runtime.model.impl.VariableInstanceImpl;
+import org.activiti.engine.delegate.event.ActivitiVariableEvent;
+
+import java.util.Optional;
 
 public class ToVariableCreatedConverter implements EventConverter<VariableCreatedEvent, ActivitiVariableEvent> {
 

File: activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/event/impl/ToVariableDeletedConverter.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.model.shared.event.VariableDeletedEvent;
 import org.activiti.api.runtime.event.impl.VariableDeletedEventImpl;
-import org.activiti.engine.delegate.event.ActivitiVariableEvent;
 import org.activiti.api.runtime.model.impl.VariableInstanceImpl;
+import org.activiti.engine.delegate.event.ActivitiVariableEvent;
+
+import java.util.Optional;
 
 public class ToVariableDeletedConverter implements EventConverter<VariableDeletedEvent, ActivitiVariableEvent> {
 

File: activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/event/impl/ToVariableUpdatedConverter.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.model.shared.event.VariableUpdatedEvent;
 import org.activiti.api.runtime.event.impl.VariableUpdatedEventImpl;
-import org.activiti.engine.delegate.event.ActivitiVariableEvent;
 import org.activiti.api.runtime.model.impl.VariableInstanceImpl;
+import org.activiti.engine.delegate.event.ActivitiVariableEvent;
+
+import java.util.Optional;
 
 public class ToVariableUpdatedConverter implements EventConverter<VariableUpdatedEvent, ActivitiVariableEvent> {
 

File: activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/model/impl/ModelConverter.java
Patch:
@@ -34,9 +34,9 @@
 import java.util.Collection;
 import java.util.List;
 
-public interface ModelConverter<SOURCE, TARGET> {
+public interface ModelConverter<SourceT, TargetT> {
 
-    TARGET from(SOURCE source);
+    TargetT from(SourceT source);
 
-    List<TARGET> from(Collection<SOURCE> sources);
+    List<TargetT> from(Collection<SourceT> sources);
 }

File: activiti-api-impl/activiti-api-runtime-shared-impl/src/main/java/org/activiti/runtime/api/query/impl/PageImpl.java
Patch:
@@ -16,10 +16,10 @@
 
 package org.activiti.runtime.api.query.impl;
 
-import java.util.List;
-
 import org.activiti.api.runtime.shared.query.Page;
 
+import java.util.List;
+
 public class PageImpl<T> implements Page<T> {
 
     private List<T> content;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/conf/impl/TaskRuntimeConfigurationImpl.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.conf.impl;
 
-import java.util.Collections;
-import java.util.List;
-
 import org.activiti.api.runtime.shared.events.VariableEventListener;
 import org.activiti.api.task.runtime.conf.TaskRuntimeConfiguration;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 
+import java.util.Collections;
+import java.util.List;
+
 public class TaskRuntimeConfigurationImpl implements TaskRuntimeConfiguration {
 
     private List<TaskRuntimeEventListener<?>> taskRuntimeEventListeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPITaskAssignedEventConverter.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskAssignedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
+import java.util.Optional;
+
 public class ToAPITaskAssignedEventConverter implements EventConverter<TaskAssignedEvent, ActivitiEntityEvent> {
 
     private final APITaskConverter taskConverter;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPITaskCandidateGroupAddedEventConverter.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskCandidateGroupAddedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
 import org.activiti.engine.task.IdentityLink;
 import org.activiti.runtime.api.model.impl.APITaskCandidateGroupConverter;
 
+import java.util.Optional;
+
 import static org.activiti.engine.task.IdentityLinkType.CANDIDATE;
 
 public class ToAPITaskCandidateGroupAddedEventConverter implements EventConverter<TaskCandidateGroupAddedEvent, ActivitiEntityEvent> {

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPITaskCandidateUserAddedEventConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskCandidateUserAddedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.task.IdentityLink;
 import org.activiti.runtime.api.model.impl.APITaskCandidateUserConverter;
 
+import java.util.Optional;
+
 import static org.activiti.engine.task.IdentityLinkType.CANDIDATE;
 
 public class ToAPITaskCandidateUserAddedEventConverter implements EventConverter<TaskCandidateUserAddedEvent, ActivitiEntityEvent> {

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPITaskCreatedEventConverter.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskCreatedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
+import java.util.Optional;
+
 public class ToAPITaskCreatedEventConverter implements EventConverter<TaskCreatedEvent, ActivitiEntityEvent> {
 
     private final APITaskConverter taskConverter;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToAPITaskUpdatedEventConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskUpdatedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.task.Task;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
+import java.util.Optional;
+
 public class ToAPITaskUpdatedEventConverter implements EventConverter<TaskUpdatedEvent, ActivitiEntityEvent> {
 
     private final APITaskConverter taskConverter;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskActivatedConverter.java
Patch:
@@ -16,12 +16,12 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskActivatedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
+import java.util.Optional;
+
 public class ToTaskActivatedConverter implements EventConverter<TaskActivatedEvent, ActivitiEntityEvent> {
 
     private APITaskConverter taskConverter;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskCandidateGroupRemovedConverter.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskCandidateGroupRemovedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
 import org.activiti.engine.task.IdentityLink;
 import org.activiti.runtime.api.model.impl.APITaskCandidateGroupConverter;
 
+import java.util.Optional;
+
 import static org.activiti.engine.task.IdentityLinkType.CANDIDATE;
 
 public class ToTaskCandidateGroupRemovedConverter implements EventConverter<TaskCandidateGroupRemovedEvent, ActivitiEntityEvent> {

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskCandidateUserRemovedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskCandidateUserRemovedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.task.IdentityLink;
 import org.activiti.runtime.api.model.impl.APITaskCandidateUserConverter;
 
+import java.util.Optional;
+
 import static org.activiti.engine.task.IdentityLinkType.CANDIDATE;
 
 public class ToTaskCandidateUserRemovedConverter implements EventConverter<TaskCandidateUserRemovedEvent, ActivitiEntityEvent> {

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskCompletedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskCompletedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.task.Task;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
+import java.util.Optional;
+
 public class ToTaskCompletedConverter implements EventConverter<TaskCompletedEvent, ActivitiEntityEvent> {
 
     private APITaskConverter converter;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskSuspendedConverter.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Optional;
-
 import org.activiti.api.task.runtime.events.TaskSuspendedEvent;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.task.Task;
 import org.activiti.runtime.api.model.impl.APITaskConverter;
 
+import java.util.Optional;
+
 public class ToTaskSuspendedConverter implements EventConverter<TaskSuspendedEvent, ActivitiEntityEvent> {
 
     private APITaskConverter taskConverter;
@@ -40,7 +40,6 @@ public Optional<TaskSuspendedEvent> from(ActivitiEntityEvent internalEvent) {
         return Optional.ofNullable(event);
     }
 
-
     private boolean isTaskEvent(ActivitiEntityEvent internal) {
         return internal.getEntity() instanceof Task;
     }

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskActivatedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskActivatedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskActivatedConverter;
 
+import java.util.List;
+
 public class TaskActivatedListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskActivatedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskAssignedListenerDelegate.java
Patch:
@@ -16,14 +16,14 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskAssignedEvent;
+import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToAPITaskAssignedEventConverter;
-import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
+
+import java.util.List;
 
 public class TaskAssignedListenerDelegate implements ActivitiEventListener {
 

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCancelledListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCancelledEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiActivityCancelledEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskCancelledConverter;
 
+import java.util.List;
+
 public class TaskCancelledListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskCancelledEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCandidateGroupAddedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCandidateGroupAddedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToAPITaskCandidateGroupAddedEventConverter;
 
+import java.util.List;
+
 public class TaskCandidateGroupAddedListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskCandidateGroupAddedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCandidateGroupRemovedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCandidateGroupRemovedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskCandidateGroupRemovedConverter;
 
+import java.util.List;
+
 public class TaskCandidateGroupRemovedListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskCandidateGroupRemovedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCandidateUserAddedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCandidateUserAddedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToAPITaskCandidateUserAddedEventConverter;
 
+import java.util.List;
+
 public class TaskCandidateUserAddedListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskCandidateUserAddedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCandidateUserRemovedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCandidateUserRemovedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskCandidateUserRemovedConverter;
 
+import java.util.List;
+
 public class TaskCandidateUserRemovedListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskCandidateUserRemovedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCompletedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCompletedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskCompletedConverter;
 
+import java.util.List;
+
 public class TaskCompletedListenerDelegate implements ActivitiEventListener {
 
     private List<TaskRuntimeEventListener<TaskCompletedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskCreatedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskCreatedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToAPITaskCreatedEventConverter;
 
+import java.util.List;
+
 public class TaskCreatedListenerDelegate implements ActivitiEventListener {
 
     private List<TaskRuntimeEventListener<TaskCreatedEvent>> taskCreatedListeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskSuspendedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskSuspendedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToTaskSuspendedConverter;
 
+import java.util.List;
+
 public class TaskSuspendedListenerDelegate implements ActivitiEventListener {
 
     private final List<TaskRuntimeEventListener<TaskSuspendedEvent>> listeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/internal/TaskUpdatedListenerDelegate.java
Patch:
@@ -16,15 +16,15 @@
 
 package org.activiti.runtime.api.event.internal;
 
-import java.util.List;
-
 import org.activiti.api.task.runtime.events.TaskUpdatedEvent;
 import org.activiti.api.task.runtime.events.listener.TaskRuntimeEventListener;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.runtime.api.event.impl.ToAPITaskUpdatedEventConverter;
 
+import java.util.List;
+
 public class TaskUpdatedListenerDelegate implements ActivitiEventListener {
 
     private List<TaskRuntimeEventListener<TaskUpdatedEvent>> taskUpdatedListeners;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APITaskCandidateGroupConverter.java
Patch:
@@ -16,9 +16,9 @@
 
 package org.activiti.runtime.api.model.impl;
 
+import org.activiti.api.task.model.TaskCandidateGroup;
 import org.activiti.api.task.model.impl.TaskCandidateGroupImpl;
 import org.activiti.engine.task.IdentityLink;
-import org.activiti.api.task.model.TaskCandidateGroup;
 
 public class APITaskCandidateGroupConverter extends ListConverter<IdentityLink, TaskCandidateGroup>
         implements ModelConverter<IdentityLink, TaskCandidateGroup> {

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APITaskCandidateUserConverter.java
Patch:
@@ -16,9 +16,9 @@
 
 package org.activiti.runtime.api.model.impl;
 
+import org.activiti.api.task.model.TaskCandidateUser;
 import org.activiti.api.task.model.impl.TaskCandidateUserImpl;
 import org.activiti.engine.task.IdentityLink;
-import org.activiti.api.task.model.TaskCandidateUser;
 
 public class APITaskCandidateUserConverter extends ListConverter<IdentityLink, TaskCandidateUser>
         implements ModelConverter<IdentityLink, TaskCandidateUser> {

File: activiti-api-impl/activiti-api-task-runtime-impl/src/test/java/org/activiti/runtime/api/event/impl/ToTaskCancelledConverterTest.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import java.util.Collections;
-
 import org.activiti.api.task.model.events.TaskRuntimeEvent;
 import org.activiti.api.task.model.impl.TaskImpl;
 import org.activiti.api.task.runtime.events.TaskCancelledEvent;
@@ -32,6 +30,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 
+import java.util.Collections;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
@@ -116,4 +116,4 @@ public void fromShouldFilterOnTaskIdWhenProcessInstanceIsNotSet() {
 
         verify(taskQuery).taskId(taskId);
     }
-}
\ No newline at end of file
+}

File: activiti-api-impl/activiti-api-task-runtime-impl/src/test/java/org/activiti/runtime/api/model/impl/APITaskCandidateUserConverterTest.java
Patch:
@@ -41,5 +41,4 @@ public void fromShouldConvertEngineObjectToModelObject() {
         assertThat(taskCandidateUser.getTaskId()).isNotEqualToIgnoringCase("taskId");
     }
 
-
-}
\ No newline at end of file
+}

File: activiti-api-impl/activiti-api-task-runtime-impl/src/test/java/org/activiti/runtime/api/model/impl/MockTaskBuilder.java
Patch:
@@ -16,16 +16,16 @@
 
 package org.activiti.runtime.api.model.impl;
 
-import java.util.Date;
-
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
 import org.activiti.engine.task.Task;
 
+import java.util.Date;
+
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 /**
- * Mock task builder
+ * Mock task builder.
  */
 public class MockTaskBuilder {
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ConnectorsAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.conf.activiti.runtime.api;
+package org.activiti.runtime.api.conf;
 
 import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
 import org.activiti.runtime.api.connector.DefaultServiceTaskBehavior;

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/conf/ProcessRuntimeAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.conf.activiti.runtime.api;
+package org.activiti.runtime.api.conf;
 
 import java.util.Collections;
 import java.util.List;

File: activiti-spring-conformance-tests/activiti-spring-conformance-set0/src/test/java/org/activiti/spring/conformance/set0/ProcessInstanceOperationsTest.java
Patch:
@@ -71,7 +71,7 @@ public void shouldBeAbleToStartAndDeleteProcessInstance() {
         ProcessInstance deletedProcessInstance = processRuntime.delete(ProcessPayloadBuilder.delete(processInstance.getId()));
         assertThat(deletedProcessInstance.getStatus()).isEqualTo(ProcessInstance.ProcessInstanceStatus.DELETED);
 
-        assertThat(RuntimeTestConfiguration.collectedEvents).extracting(RuntimeEvent::getEventType).containsExactly(
+        assertThat(RuntimeTestConfiguration.collectedEvents).extracting(RuntimeEvent::getEventType).containsExactlyInAnyOrder(
                 TaskRuntimeEvent.TaskEvents.TASK_CANCELLED,
                 BPMNActivityEvent.ActivityEvents.ACTIVITY_CANCELLED,
                 ProcessRuntimeEvent.ProcessEvents.PROCESS_CANCELLED);

File: activiti-spring-conformance-tests/activiti-spring-conformance-signals/src/test/java/org/activiti/spring/conformance/signals/SignalThrowCatchTest.java
Patch:
@@ -232,7 +232,7 @@ public void testProcessWithBoundaryEventSignal() {
 
         assertThat(RuntimeTestConfiguration.collectedEvents)
                 .extracting(RuntimeEvent::getEventType)
-                .containsExactly(
+                .containsExactlyInAnyOrder(
                         BPMNSignalEvent.SignalEvents.SIGNAL_RECEIVED,
                         VariableEvent.VariableEvents.VARIABLE_CREATED,
                         TaskRuntimeEvent.TaskEvents.TASK_CANCELLED,

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.spring.process.autoconfigure;
+package org.activiti.spring.process.conf;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.activiti.spring.process.ProcessExtensionService;

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/conf/ProcessExtensionsConfiguratorAutoConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.spring.process.autoconfigure;
+package org.activiti.spring.process.conf;
 
 import org.activiti.engine.cfg.AbstractProcessEngineConfigurator;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;

File: activiti-spring-process-extensions/src/test/java/org/activiti/spring/process/ProcessExtensionServiceIT.java
Patch:
@@ -5,8 +5,8 @@
 
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.activiti.spring.process.autoconfigure.ProcessExtensionsAutoConfiguration;
-import org.activiti.spring.process.autoconfigure.ProcessExtensionsConfiguratorAutoConfiguration;
+import org.activiti.spring.process.conf.ProcessExtensionsAutoConfiguration;
+import org.activiti.spring.process.conf.ProcessExtensionsConfiguratorAutoConfiguration;
 import org.activiti.spring.process.model.ProcessExtensionModel;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: activiti-spring-process-extensions/src/test/java/org/activiti/spring/process/ProcessVariablesInitiatorIT.java
Patch:
@@ -24,8 +24,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.repository.ProcessDefinition;
-import org.activiti.spring.process.autoconfigure.ProcessExtensionsAutoConfiguration;
-import org.activiti.spring.process.autoconfigure.ProcessExtensionsConfiguratorAutoConfiguration;
+import org.activiti.spring.process.conf.ProcessExtensionsAutoConfiguration;
+import org.activiti.spring.process.conf.ProcessExtensionsConfiguratorAutoConfiguration;
 import org.activiti.spring.process.model.ProcessExtensionModel;
 import org.junit.Before;
 import org.junit.Test;

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -307,4 +307,7 @@ public interface BpmnXMLConstants {
   public static final String MAP_EXCEPTION_ERRORCODE = "errorCode";
   public static final String MAP_EXCEPTION_ANDCHILDREN = "includeChildExceptions";
 
+  public static final String ELEMENT_GATEWAY_INCOMING = "incoming";
+  public static final String ELEMENT_GATEWAY_OUTGOING = "outgoing";
+
 }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/EndEventXMLConverter.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.EndEvent;
+import org.activiti.bpmn.model.FlowNode;
 
 /**
 
@@ -50,5 +51,6 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
   protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {
     EndEvent endEvent = (EndEvent) element;
     writeEventDefinitions(endEvent, endEvent.getEventDefinitions(), model, xtw);
+    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
   }
 }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ParallelGatewayXMLConverter.java
Patch:
@@ -18,6 +18,7 @@
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.bpmn.model.FlowNode;
 import org.activiti.bpmn.model.ParallelGateway;
 
 /**
@@ -48,6 +49,6 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
 
   @Override
   protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {
-
+    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
   }
 }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/StartEventXMLConverter.java
Patch:
@@ -16,9 +16,7 @@
 import javax.xml.stream.XMLStreamWriter;
 
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
-import org.activiti.bpmn.model.BaseElement;
-import org.activiti.bpmn.model.BpmnModel;
-import org.activiti.bpmn.model.StartEvent;
+import org.activiti.bpmn.model.*;
 import org.activiti.bpmn.model.alfresco.AlfrescoStartEvent;
 import org.apache.commons.lang3.StringUtils;
 
@@ -101,10 +99,12 @@ protected boolean writeExtensionChildElements(BaseElement element,
     protected void writeAdditionalChildElements(BaseElement element,
                                                 BpmnModel model,
                                                 XMLStreamWriter xtw) throws Exception {
+        BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);
         StartEvent startEvent = (StartEvent) element;
         writeEventDefinitions(startEvent,
                               startEvent.getEventDefinitions(),
                               model,
                               xtw);
     }
+
 }

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/ProcessVariablesInitiator.java
Patch:
@@ -13,9 +13,11 @@
 
 package org.activiti.spring.process;
 
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 
 import org.activiti.bpmn.model.FlowElement;
@@ -84,7 +86,7 @@ public ProcessInstance createAndStartProcessInstanceWithInitialFlowElement(Proce
     }
 
     private Map<String, Object> processVariables(Map<String, Object> variables, Map<String, VariableDefinition> variableDefinitionMap) {
-        Map<String, Object> newVarsMap = new HashMap<>(variables);
+        Map<String, Object> newVarsMap = new HashMap<>(Optional.ofNullable(variables).orElse(Collections.emptyMap()));
         variableDefinitionMap.forEach((k,v) -> {
             if (!newVarsMap.containsKey(v.getName()) && v.getValue() != null) {
                 newVarsMap.put(v.getName(), createDefaultVariableValue(v));

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/HistoryConfigurationTest.java
Patch:
@@ -104,7 +104,7 @@ public void init() {
 
     @Test
     public void shouldRecordHistory() {
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         //when
         ProcessInstance categorizeProcess = processRuntime.start(ProcessPayloadBuilder.start()

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessExtensionsJsonVarsTest.java
Patch:
@@ -56,7 +56,7 @@ public void cleanUp(){
     @Test
     public void processInstanceHasValidInitialVariables() throws ParseException, IOException {
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         ProcessRuntimeConfiguration configuration = processRuntime.configuration();
         assertThat(configuration).isNotNull();
@@ -138,7 +138,7 @@ public void processInstanceHasValidInitialVariables() throws ParseException, IOE
 
     @Test
     public void processInstanceFailsIfVariableTypeIncorrect() {
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
         ProcessRuntimeConfiguration configuration = processRuntime.configuration();
         assertThat(configuration).isNotNull();
 
@@ -159,7 +159,7 @@ public void processInstanceFailsIfVariableTypeIncorrect() {
     @Test
     public void processInstanceFailsIfVariableCannotBeSerializedAsJson(){
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
         ProcessRuntimeConfiguration configuration = processRuntime.configuration();
         assertThat(configuration).isNotNull();
 

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNSignalReceivedIT.java
Patch:
@@ -74,7 +74,7 @@ public void shouldGetSignalReceivedEventsForProcessWithSignalStart() {
 
         //In this test processWithSignalStart1 should be started
         //given
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
         Page<ProcessDefinition> processDefinitionPage = processRuntime
                 .processDefinitions(Pageable.of(0,
                                                 10),
@@ -110,7 +110,7 @@ public void shouldGetSignalReceivedEventsForProcessWithSignalStart() {
     public void shouldGetOneSignalReceivedEventPerWaitingSignalsForNonStartSignals() {
 
         //given
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         ProcessInstance boundarySignalProcInst1 = processRuntime.start(ProcessPayloadBuilder.start()
                                                                                .withProcessDefinitionKey(PROCESS_WITH_BOUNDARY_SIGNAL)
@@ -165,7 +165,7 @@ public void shouldGetOneSignalReceivedEventPerWaitingSignalsForNonStartSignals()
     public void shouldGetSignalReceivedEventWithVariables() {
 
         //given
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         //when
         ProcessInstance process = processRuntime.start(ProcessPayloadBuilder.start()

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeBPMNTimerIT.java
Patch:
@@ -99,7 +99,7 @@ public void tearDown() {
     @Test
     public void shouldGetTimerCanceledEventByProcessDelete() {
         // GIVEN
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         ProcessInstance process = processRuntime.start(ProcessPayloadBuilder.start()
                                                                .withProcessDefinitionKey(PROCESS_TIMER_CANCELLED_EVENT)
@@ -130,7 +130,7 @@ public void shouldGetTimerCanceledEventByProcessDelete() {
     @Test
     public void shouldGetTimerFiredScheduledEventsForProcessWithTimer() throws Exception{
         //given
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         Date startTime = new Date();
         ProcessInstance process = processRuntime.start(ProcessPayloadBuilder.start()
@@ -214,7 +214,7 @@ public void shouldGetTimerFiredScheduledEventsForProcessWithTimer() throws Excep
     @Test
     public void shouldGetTimerCanceledEventOnBoundaryEvent() {
         //given
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         ProcessInstance process = processRuntime.start(ProcessPayloadBuilder.start()
                                                                .withProcessDefinitionKey(PROCESS_TIMER_CANCELLED_EVENT)

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeCallActivityIT.java
Patch:
@@ -47,7 +47,7 @@ public void tearDown() {
     @Test
     public void testCheckSubProcessTaskWhenCallActivity (){
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         // After the process has started, the subProcess task should be active
         ProcessInstance processInstance = processRuntime.start(

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeConnectorIT.java
Patch:
@@ -39,7 +39,7 @@ public class ProcessRuntimeConnectorIT {
 
     @Before
     public void setUp() {
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
     }
 
     @After

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeEmptyConnectorDefinitionIT.java
Patch:
@@ -34,7 +34,7 @@ public class ProcessRuntimeEmptyConnectorDefinitionIT {
     @Test
     public void connectorDefinitionEmptyDir() {
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         processRuntime.start(ProcessPayloadBuilder.start()
                                      .withProcessDefinitionKey(CATEGORIZE_PROCESS)

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeSecurityPoliciesIT.java
Patch:
@@ -45,7 +45,7 @@ public void cleanUp(){
     @Test
     public void getRestrictedProcessDefs() {
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         ProcessRuntimeConfiguration configuration = processRuntime.configuration(); //@TODO: I should get the security policies defined here.
         assertThat(configuration).isNotNull();

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeClaimTaskFromProcessTest.java
Patch:
@@ -45,7 +45,7 @@ public void cleanUp(){
     @Test
     public void claimTaskWithoutGroup() {
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         //when
         ProcessInstance twoTaskInstance = processRuntime.start(ProcessPayloadBuilder.start()

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeCompleteTaskTest.java
Patch:
@@ -102,7 +102,7 @@ public void createStandaloneTaskandCompleteWithUnAuthorizedUser() {
         assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);
 
         // Complete should fail with a different user
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         //when
         Throwable throwable = catchThrowable(() ->
@@ -117,7 +117,7 @@ public void createStandaloneTaskandCompleteWithUnAuthorizedUser() {
     @Test
     public void completeProcessTaskAndCheckReturnedTaskAndVariables() {
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         Map<String,Object> startVariables = new HashMap<>();
         startVariables.put("start1","start1");
@@ -165,7 +165,7 @@ public void completeProcessTaskAndCheckReturnedTaskAndVariables() {
         .containsExactly(
                       TaskStatus.ASSIGNED,
                       task.getOwner(),
-                      "salaboy",
+                      "user",
                       task.getName(), 
                       task.getDescription(),
                       task.getCreatedDate(),

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeDeleteTaskTest.java
Patch:
@@ -86,10 +86,10 @@ public void createStandaloneGroupTaskClaimAndDeleteFail() {
         assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);
 
         // Claim a task created for a group
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(task.getId()).build());
-        assertThat(claimedTask.getAssignee()).isEqualTo("salaboy");
+        assertThat(claimedTask.getAssignee()).isEqualTo("user");
         assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);
 
 

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeTaskForOtherTest.java
Patch:
@@ -61,7 +61,7 @@ public void createStandaloneTaskWithNoCandidates() {
         assertThat(task.getAssignee()).isNull();
         assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);
 
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
         // Other users beside the owner shouldn't see the task
         tasks = taskRuntime.tasks(Pageable.of(0,
                 50));

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeUnAuthorizedTest.java
Patch:
@@ -65,7 +65,7 @@ public void createStandaloneTaskForGroup() {
         assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);
 
         // Claim should throw a NotFoundException due you are not a candidate
-        securityUtil.logInAs("salaboy");
+        securityUtil.logInAs("user");
 
         //when
         Throwable throwable = catchThrowable(() ->

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/MappingAwareCallActivityBehavior.java
Patch:
@@ -26,6 +26,8 @@
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.spring.process.ProcessVariablesInitiator;
 
+import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMappingExecutionContext;
+
 public class MappingAwareCallActivityBehavior extends CallActivityBehavior {
 
     private VariablesMappingProvider mappingProvider;
@@ -63,8 +65,7 @@ protected Map<String, Object> calculateInboundVariables(DelegateExecution execut
     @Override
     protected Map<String, Object> calculateOutBoundVariables(DelegateExecution execution,
                                                              Map<String, Object> availableVariables) {
-
-        return mappingProvider.calculateOutPutVariables(execution,
+        return mappingProvider.calculateOutPutVariables(buildMappingExecutionContext(execution),
                                                         availableVariables);
     }
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/MappingAwareUserTaskBehavior.java
Patch:
@@ -22,6 +22,8 @@
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
 
+import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMappingExecutionContext;
+
 public class MappingAwareUserTaskBehavior extends UserTaskActivityBehavior {
 
     private VariablesMappingProvider mappingProvider;
@@ -41,8 +43,7 @@ protected Map<String, Object> calculateInputVariables(DelegateExecution executio
     @Override
     protected Map<String, Object> calculateOutBoundVariables(DelegateExecution execution,
                                                              Map<String, Object> taskCompleteVariables) {
-        
-        return mappingProvider.calculateOutPutVariables(execution,
+        return mappingProvider.calculateOutPutVariables(buildMappingExecutionContext(execution),
                                                         taskCompleteVariables); 
     }
     

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/MappingAwareCallActivityBehaviorTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 
+import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMappingExecutionContext;
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
@@ -82,7 +83,8 @@ public void calculateOutBoundVariablesShouldReturnValueFromMappingProvider() {
         Map<String, Object> availableVariables = Collections.emptyMap();
         Map<String, Object> providerVariables = Collections.singletonMap("var",
                                                          "value");
-        given(mappingProvider.calculateOutPutVariables(execution, availableVariables))
+        given(mappingProvider.calculateOutPutVariables(buildMappingExecutionContext(execution),
+                                                       availableVariables))
                 .willReturn(providerVariables);
 
         //when

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeVariableMappingTest.java
Patch:
@@ -61,7 +61,7 @@ public void shouldMapVariables() {
                         tuple("nickName",
                               "testName"),
                         tuple("out-unmapped-variable-matching-name",
-                              "outTest"),
+                              "default"),
                         tuple("output-unmapped-variable-with-non-matching-connector-output-name",
                               "default")
                 );

File: activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/ExecuteAsyncRunnableFactory.java
Patch:
@@ -21,7 +21,6 @@
 
  */
 @Internal
-@Deprecated
 public interface ExecuteAsyncRunnableFactory {
   
   Runnable createExecuteAsyncRunnable(Job job, ProcessEngineConfigurationImpl processEngineConfiguration);

File: activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/JobManager.java
Patch:
@@ -15,9 +15,7 @@
 /**
  * Contains methods that are not tied to any specific job type (async, timer, suspended or deadletter),
  * but which are generally applicable or are about going from one type to another.
- * @deprecated we discourage the use of tenant aware interfaces/classes this will be removed in future versions
  */
-@Deprecated
 @Internal
 public interface JobManager {
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/multitenant/TenantAwareAsyncExecutor.java
Patch:
@@ -22,9 +22,7 @@
  * Interface for {@link AsyncExecutor} implementations used in conjucntion with the 
  * {@link MultiSchemaMultiTenantProcessEngineConfiguration}. Allows to dynamically
  * add tenant executors to the engine.
- * @deprecated we discourage the use of tenant aware interfaces/classes this will be removed in future versions
  */
-@Deprecated
 public interface TenantAwareAsyncExecutor extends AsyncExecutor {
   
   Set<String> getTenantIds();

File: activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/multitenant/TenantAwareAsyncExecutorFactory.java
Patch:
@@ -18,9 +18,7 @@
  * Factory used by the {@link ExecutorPerTenantAsyncExecutor} async executor.
  * This factory will be called when a new {@link AsyncExecutor} for a tenant needs to be created
  * and can be used to create special implementations for specific tenants.
- * @deprecated we discourage the use of tenant aware interfaces/classes this will be removed in future versions
  */
-@Deprecated
 public interface TenantAwareAsyncExecutorFactory {
 
   /**

File: activiti-engine/src/main/java/org/activiti/engine/impl/calendar/AdvancedCycleBusinessCalendar.java
Patch:
@@ -42,9 +42,7 @@
  * 
  * By default (if no VER key is included in the string), it assumes version 2. This can be changed by modifying the defaultScheduleVersion property.
  * <p>
- * @deprecated Calendar Functionally will be provided as a separate service/library
  */
-@Deprecated
 @Internal
 public class AdvancedCycleBusinessCalendar extends CycleBusinessCalendar {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/calendar/AdvancedSchedulerResolver.java
Patch:
@@ -9,9 +9,7 @@
 /**
  * Provides an interface for versioned due date resolvers.
  * 
- * @deprecated Calendar Functionally will be provided as a separate service/library
  */
-@Deprecated
 @Internal
 public interface AdvancedSchedulerResolver {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/calendar/AdvancedSchedulerResolverWithTimeZone.java
Patch:
@@ -11,9 +11,7 @@
 /**
  * Resolves a due date taking into account the specified time zone.
  *
- * @deprecated Calendar Functionally will be provided as a separate service/library
  */
-@Deprecated
 @Internal
 public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/calendar/AdvancedSchedulerResolverWithoutTimeZone.java
Patch:
@@ -9,9 +9,7 @@
 /**
  * Resolves a due date using the original Activiti due date resolver. This does not take into account the passed time zone.
  *
- * @deprecated Calendar Functionally will be provided as a separate service/library
  */
-@Deprecated
 @Internal
 public class AdvancedSchedulerResolverWithoutTimeZone implements AdvancedSchedulerResolver {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/calendar/BusinessCalendarManager.java
Patch:
@@ -15,9 +15,7 @@
 import org.activiti.engine.api.internal.Internal;
 
 /**
- * @deprecated Calendar Functionally will be provided as a separate service/library
  */
-@Deprecated
 @Internal
 public interface BusinessCalendarManager {
 

File: activiti-engine/src/main/java/org/activiti/engine/runtime/Clock.java
Patch:
@@ -18,9 +18,7 @@
 
 /**
  * This interface provides full access to the clock
- * @deprecated dealing with Clock, Calendars and Time will be delaged to a separate service/library
  */
-@Deprecated
 public interface Clock extends ClockReader {
 
   void setCurrentTime(Date currentTime);

File: activiti-engine/src/main/java/org/activiti/engine/runtime/ClockReader.java
Patch:
@@ -19,9 +19,7 @@
 
 /**
  * This interface provides clock reading functionality
- @deprecated dealing with Clock, Calendars and Time will be delaged to a separate service/library
  */
-@Deprecated
 public interface ClockReader {
 
   Date getCurrentTime();

File: activiti-engine/src/main/java/org/activiti/engine/runtime/DataObject.java
Patch:
@@ -17,9 +17,7 @@
 
 /*
  * Represents a modeled DataObject.
- * @deprecated dealing with custom data objects will delegated to a separate library
  */
-@Deprecated
 @Internal
 public interface DataObject {
   

File: activiti-engine/src/main/java/org/activiti/engine/runtime/DeadLetterJobQuery.java
Patch:
@@ -20,9 +20,7 @@
 
 /**
  * Allows programmatic querying of {@link Job}s.
- * @deprecated we recommend against using the Job Executor, this should be handled by an integration instead of an internal component
  */
-@Deprecated
 @Internal
 public interface DeadLetterJobQuery extends Query<DeadLetterJobQuery, Job> {
 

File: activiti-engine/src/main/java/org/activiti/engine/runtime/Job.java
Patch:
@@ -21,9 +21,7 @@
 /**
  * Represents one job (timer, async job, etc.).
  *
- * @deprecated we recommend against using the Job Executor, this should be handled by an integration instead of an internal component
  */
-@Deprecated
 @Internal
 public interface Job {
   

File: activiti-engine/src/main/java/org/activiti/engine/runtime/JobQuery.java
Patch:
@@ -21,9 +21,7 @@
 /**
  * Allows programmatic querying of {@link Job}s.
  *
- * @deprecated we recommend against using the Job Executor, this should be handled by an integration instead of an internal component
  */
-@Deprecated
 @Internal
 public interface JobQuery extends Query<JobQuery, Job> {
 

File: activiti-engine/src/main/java/org/activiti/engine/runtime/SuspendedJobQuery.java
Patch:
@@ -21,9 +21,7 @@
 /**
  * Allows programmatic querying of {@link Job}s.
  *
- * @deprecated we recommend against using the Job Executor, this should be handled by an integration instead of an internal component
  */
-@Deprecated
 @Internal
 public interface SuspendedJobQuery extends Query<SuspendedJobQuery, Job> {
 

File: activiti-engine/src/main/java/org/activiti/engine/runtime/TimerJobQuery.java
Patch:
@@ -21,9 +21,7 @@
 /**
  * Allows programmatic querying of {@link Job}s.
  *
- * @deprecated we recommend against using the Job Executor, this should be handled by an integration instead of an internal component
  */
-@Deprecated
 @Internal
 public interface TimerJobQuery extends Query<TimerJobQuery, Job> {
 

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/RuntimeTestConfiguration.java
Patch:
@@ -67,8 +67,6 @@ public UserDetailsService myUserDetailsService() {
         extendedInMemoryUserDetailsManager.createUser(new User("salaboy",
                                                                "password",
                                                                salaboyAuthorities));
-        salaboyAuthorities.add(new SimpleGrantedAuthority("ROLE_ACTIVITI_USER"));
-        salaboyAuthorities.add(new SimpleGrantedAuthority("GROUP_activitiTeam"));
 
         extendedInMemoryUserDetailsManager.createUser(new User("user",
                                                                "password",

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/autoconfigure/ProcessExtensionsAutoConfiguration.java
Patch:
@@ -14,8 +14,6 @@
 package org.activiti.spring.process.autoconfigure;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.activiti.engine.cfg.AbstractProcessEngineConfigurator;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.spring.process.ProcessExtensionService;
 import org.activiti.spring.process.ProcessVariablesInitiator;
 import org.activiti.spring.process.model.ProcessExtensionModel;

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ActivitiProperties.java
Patch:
@@ -24,7 +24,7 @@
 public class ActivitiProperties {
 
   private boolean checkProcessDefinitions = true;
-  private boolean asyncExecutorActivate = false;
+  private boolean asyncExecutorActivate = true;
   private String deploymentName = "SpringAutoDeployment";
   private String mailServerHost = "localhost";
   private int mailServerPort = 1025;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/CallActivityBehavior.java
Patch:
@@ -120,9 +120,9 @@ public void execute(DelegateExecution execution) {
         variables.put(entry.getKey(), entry.getValue());
       }
     }
-
-    variables=calculateVariables(execution,subProcess);
-
+    Map<String, Object> calculateVariables = calculateVariables(execution,
+                                                             subProcess);
+    variables.putAll(calculateVariables);
 
     // copy process variables
     for (IOParameter ioParameter : callActivity.getInParameters()) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/CallActivityBehavior.java
Patch:
@@ -225,7 +225,7 @@ protected  Map<String, Object>  calculateVariables(DelegateExecution execution,
   }
 
   protected Map<String, Object> getInboundVariables(DelegateExecution execution) {
-    return null;
+    return new HashMap<String, Object>();
   }
 
 
@@ -236,7 +236,7 @@ protected Map<String, Object> getOutBoundVariables(CommandContext commandContext
     if(commandContext.getProcessEngineConfiguration().isCopyVariablesToLocalForTasks()){
       return taskVariables;
     }
-    return null;
+    return new HashMap<String, Object>();
   }
 
 }

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/builders/ProcessPayloadBuilder.java
Patch:
@@ -44,7 +44,7 @@ public static RemoveVariablesPayloadBuilder removeVariables() {
     public static SignalPayloadBuilder signal() {
         return new SignalPayloadBuilder();
     }
-
+    
     public static GetProcessDefinitionsPayloadBuilder processDefinitions() {
         return new GetProcessDefinitionsPayloadBuilder();
     }

File: activiti-core-test/activiti-core-test-assertions/src/main/java/org/activiti/test/matchers/ProcessInstanceMatchers.java
Patch:
@@ -78,7 +78,7 @@ public OperationScopeMatcher hasBeenCompleted() {
         };
     }
 
-    public ProcessResultMatcher hasStatus(ProcessInstance.ProcessInstanceStatus status){
+    public ProcessResultMatcher status(ProcessInstance.ProcessInstanceStatus status){
         return (processInstance) -> assertThat(processInstance.getStatus()).isEqualTo(status);
     }
 

File: activiti-api-basic-connector-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -129,12 +129,12 @@ private void listAvailableProcesses() {
         }
     }
 
-    @Bean("MoviesId.getMovieDescId")
+    @Bean("Movies.getMovieDesc")
     public Connector getMovieDesc() {
         return getConnector();
     }
 
-    @Bean("connector-8abc839468e609ca0168e61babb60005.getMovieDescId")
+    @Bean("MoviesWithUUIDs.getMovieDesc")
     public Connector getMovieDescUUIDs() {
         return getConnector();
     }

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/RuntimeTestConfiguration.java
Patch:
@@ -108,7 +108,7 @@ public Connector processImageConnector() {
         };
     }
 
-    @Bean(name = "processImageConnectorId.processImageActionId")
+    @Bean(name = "Process Image Connector.processImageActionName")
     public Connector processImageActionName() {
         return integrationContext -> {
             Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();
@@ -123,7 +123,7 @@ public Connector processImageActionName() {
         };
     }
 
-    @Bean(name = "tagImageConnectorId.tagImageActionId")
+    @Bean(name = "Tag Image Connector.tagImageActionName")
     public Connector tagImageActionName() {
         return integrationContext -> {
             Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();
@@ -194,7 +194,7 @@ public TaskRuntimeEventListener<TaskCandidateUserRemovedEvent> CandidateUserRemo
         return candidateUserRemovedEvent -> taskCandidateUserRemovedEvents.add(candidateUserRemovedEvent);
     }
 
-    @Bean(name = "variableMappingConnectorId.variableMappingActionId")
+    @Bean(name = "Variable Mapping Connector.variableMappingActionName")
     public Connector variableMappingActionName() {
         return integrationContext -> {
             Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/payloads/CompleteTaskPayload.java
Patch:
@@ -1,6 +1,5 @@
 package org.activiti.api.task.model.payloads;
 
-import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.UUID;
 
@@ -10,7 +9,7 @@ public class CompleteTaskPayload implements Payload {
 
     private String id;
     private String taskId;
-    private Map<String, Object> variables = new LinkedHashMap<>();
+    private Map<String, Object> variables;
 
     public CompleteTaskPayload() {
         this.id = UUID.randomUUID().toString();

File: activiti-api-task-model-impl/src/main/java/org/activiti/api/task/conf/impl/TaskModelAutoConfiguration.java
Patch:
@@ -37,7 +37,7 @@
 import org.activiti.api.task.model.payloads.GetTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.GetTasksPayload;
 import org.activiti.api.task.model.payloads.ReleaseTaskPayload;
-import org.activiti.api.task.model.payloads.UpdateTaskVariablesPayload;
+import org.activiti.api.task.model.payloads.SaveTaskPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskPayload;
 import org.activiti.api.task.model.results.TaskResult;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
@@ -80,8 +80,8 @@ public JavaType resolveAbstractType(DeserializationConfig config,
         module.registerSubtypes(new NamedType(CompleteTaskPayload.class,
                                               CompleteTaskPayload.class.getSimpleName()));
 
-        module.registerSubtypes(new NamedType(UpdateTaskVariablesPayload.class,
-                                              UpdateTaskVariablesPayload.class.getSimpleName()));
+        module.registerSubtypes(new NamedType(SaveTaskPayload.class,
+                                              SaveTaskPayload.class.getSimpleName()));
         
         module.registerSubtypes(new NamedType(CreateTaskPayload.class,
                                               CreateTaskPayload.class.getSimpleName()));

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/payloads/SaveTaskPayload.java
Patch:
@@ -5,17 +5,17 @@
 
 import org.activiti.api.model.shared.Payload;
 
-public class UpdateTaskVariablesPayload implements Payload {
+public class SaveTaskPayload implements Payload {
 
     private String id;
     private String taskId;
     private Map<String, Object> variables;
 
-    public UpdateTaskVariablesPayload() {
+    public SaveTaskPayload() {
         this.id = UUID.randomUUID().toString();
     }
 
-    public UpdateTaskVariablesPayload(String taskId,
+    public SaveTaskPayload(String taskId,
                                Map<String, Object> variables) {
         this();
         this.taskId = taskId;

File: activiti-api-task-model-impl/src/main/java/org/activiti/api/task/conf/impl/TaskModelAutoConfiguration.java
Patch:
@@ -37,7 +37,7 @@
 import org.activiti.api.task.model.payloads.GetTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.GetTasksPayload;
 import org.activiti.api.task.model.payloads.ReleaseTaskPayload;
-import org.activiti.api.task.model.payloads.SaveTaskVariablesPayload;
+import org.activiti.api.task.model.payloads.UpdateTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskPayload;
 import org.activiti.api.task.model.results.TaskResult;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
@@ -80,8 +80,8 @@ public JavaType resolveAbstractType(DeserializationConfig config,
         module.registerSubtypes(new NamedType(CompleteTaskPayload.class,
                                               CompleteTaskPayload.class.getSimpleName()));
 
-        module.registerSubtypes(new NamedType(SaveTaskVariablesPayload.class,
-                                              SaveTaskVariablesPayload.class.getSimpleName()));
+        module.registerSubtypes(new NamedType(UpdateTaskVariablesPayload.class,
+                                              UpdateTaskVariablesPayload.class.getSimpleName()));
         
         module.registerSubtypes(new NamedType(CreateTaskPayload.class,
                                               CreateTaskPayload.class.getSimpleName()));

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/payloads/UpdateTaskVariablesPayload.java
Patch:
@@ -5,17 +5,17 @@
 
 import org.activiti.api.model.shared.Payload;
 
-public class SaveTaskVariablesPayload implements Payload {
+public class UpdateTaskVariablesPayload implements Payload {
 
     private String id;
     private String taskId;
     private Map<String, Object> variables;
 
-    public SaveTaskVariablesPayload() {
+    public UpdateTaskVariablesPayload() {
         this.id = UUID.randomUUID().toString();
     }
 
-    public SaveTaskVariablesPayload(String taskId,
+    public UpdateTaskVariablesPayload(String taskId,
                                Map<String, Object> variables) {
         this();
         this.taskId = taskId;

File: activiti-api-task-model-impl/src/main/java/org/activiti/api/task/conf/impl/TaskModelAutoConfiguration.java
Patch:
@@ -37,7 +37,7 @@
 import org.activiti.api.task.model.payloads.GetTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.GetTasksPayload;
 import org.activiti.api.task.model.payloads.ReleaseTaskPayload;
-import org.activiti.api.task.model.payloads.SaveTaskPayload;
+import org.activiti.api.task.model.payloads.SaveTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskPayload;
 import org.activiti.api.task.model.results.TaskResult;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
@@ -80,8 +80,8 @@ public JavaType resolveAbstractType(DeserializationConfig config,
         module.registerSubtypes(new NamedType(CompleteTaskPayload.class,
                                               CompleteTaskPayload.class.getSimpleName()));
 
-        module.registerSubtypes(new NamedType(SaveTaskPayload.class,
-                                              SaveTaskPayload.class.getSimpleName()));
+        module.registerSubtypes(new NamedType(SaveTaskVariablesPayload.class,
+                                              SaveTaskVariablesPayload.class.getSimpleName()));
         
         module.registerSubtypes(new NamedType(CreateTaskPayload.class,
                                               CreateTaskPayload.class.getSimpleName()));

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/payloads/SaveTaskVariablesPayload.java
Patch:
@@ -5,17 +5,17 @@
 
 import org.activiti.api.model.shared.Payload;
 
-public class SaveTaskPayload implements Payload {
+public class SaveTaskVariablesPayload implements Payload {
 
     private String id;
     private String taskId;
     private Map<String, Object> variables;
 
-    public SaveTaskPayload() {
+    public SaveTaskVariablesPayload() {
         this.id = UUID.randomUUID().toString();
     }
 
-    public SaveTaskPayload(String taskId,
+    public SaveTaskVariablesPayload(String taskId,
                                Map<String, Object> variables) {
         this();
         this.taskId = taskId;

File: activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/TaskAdminRuntime.java
Patch:
@@ -32,7 +32,7 @@
 import org.activiti.api.task.model.payloads.GetTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.GetTasksPayload;
 import org.activiti.api.task.model.payloads.ReleaseTaskPayload;
-import org.activiti.api.task.model.payloads.SaveTaskPayload;
+import org.activiti.api.task.model.payloads.SaveTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskVariablePayload;
 
@@ -84,7 +84,7 @@ Page<Task> tasks(Pageable pageable,
      * - This method also check that the task is assigned to the currently authenticated user before complete
      * - This method return a shallow Task object with the basic information needed to validate that the task was completed
      */
-    Task save(SaveTaskPayload saveTaskPayload);
+    Task saveVariables(SaveTaskVariablesPayload saveTaskVariablesPayload);
 
     /**
      * Completes the selected task with the variables set in the payload

File: activiti-api-task-runtime/src/main/java/org/activiti/api/task/runtime/TaskRuntime.java
Patch:
@@ -32,7 +32,7 @@
 import org.activiti.api.task.model.payloads.GetTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.GetTasksPayload;
 import org.activiti.api.task.model.payloads.ReleaseTaskPayload;
-import org.activiti.api.task.model.payloads.SaveTaskPayload;
+import org.activiti.api.task.model.payloads.SaveTaskVariablesPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskPayload;
 import org.activiti.api.task.model.payloads.UpdateTaskVariablePayload;
 import org.activiti.api.task.runtime.conf.TaskRuntimeConfiguration;
@@ -106,7 +106,7 @@ Page<Task> tasks(Pageable pageable,
      * - This method also check that the task is assigned to the currently authenticated user before complete
      * - This method return a shallow Task object with the basic information needed to validate that the task was completed
      */
-    Task save(SaveTaskPayload saveTaskPayload);
+    Task saveVariables(SaveTaskVariablesPayload saveTaskVariablesPayload);
 
     
     /**

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/builders/CompleteTaskPayloadBuilder.java
Patch:
@@ -48,6 +48,7 @@ public CompleteTaskPayloadBuilder withTaskVariable(String name,
     
     public CompleteTaskPayload build() {
         return new CompleteTaskPayload(taskId,
-                                       variables);
+                                       variables,
+                                       taskVariables);
     }
 }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ServiceTaskXMLConverter.java
Patch:
@@ -88,6 +88,8 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
       writeQualifiedAttribute(ATTRIBUTE_TASK_SERVICE_EXPRESSION, serviceTask.getImplementation(), xtw);
     } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equals(serviceTask.getImplementationType())) {
       writeQualifiedAttribute(ATTRIBUTE_TASK_SERVICE_DELEGATEEXPRESSION, serviceTask.getImplementation(), xtw);
+    } else {
+      writeQualifiedAttribute(ATTRIBUTE_TASK_IMPLEMENTATION, serviceTask.getImplementation(), xtw);
     }
 
     if (StringUtils.isNotEmpty(serviceTask.getResultVariableName())) {

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ServiceTaskXMLConverter.java
Patch:
@@ -88,6 +88,8 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
       writeQualifiedAttribute(ATTRIBUTE_TASK_SERVICE_EXPRESSION, serviceTask.getImplementation(), xtw);
     } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equals(serviceTask.getImplementationType())) {
       writeQualifiedAttribute(ATTRIBUTE_TASK_SERVICE_DELEGATEEXPRESSION, serviceTask.getImplementation(), xtw);
+    } else {
+      writeQualifiedAttribute(ATTRIBUTE_TASK_IMPLEMENTATION, serviceTask.getImplementation(), xtw);
     }
 
     if (StringUtils.isNotEmpty(serviceTask.getResultVariableName())) {

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/RuntimeTestConfiguration.java
Patch:
@@ -55,7 +55,7 @@ public class RuntimeTestConfiguration {
     public static Set<TaskCandidateUserAddedEvent> taskCandidateUserAddedEvents = new HashSet<>();
 
     public static Set<TaskCandidateUserRemovedEvent> taskCandidateUserRemovedEvents = new HashSet<>();
-
+    
     @Bean
     public UserDetailsService myUserDetailsService() {
         ExtendedInMemoryUserDetailsManager extendedInMemoryUserDetailsManager = new ExtendedInMemoryUserDetailsManager();
@@ -173,7 +173,7 @@ public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListen
     public BPMNElementEventListener<BPMNSequenceFlowTakenEvent> sequenceFlowTakenEventListener() {
         return sequenceFlowTakenEvent -> sequenceFlowTakenEvents.add(sequenceFlowTakenEvent);
     }
-
+    
     @Bean
     public VariableEventListener<VariableCreatedEvent> variableCreatedEventFromProcessInstanceListener() {
         return variableCreatedEvent -> {

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessDeployedEventIT.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import org.activiti.api.process.model.ProcessDefinition;
+import org.activiti.spring.boot.process.listener.DeployedProcessesListener;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/listener/DeployedProcessesListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Alfresco, Inc. and/or its affiliates.
+ * Copyright 2019 Alfresco, Inc. and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti.spring.boot.process;
+package org.activiti.spring.boot.process.listener;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNActivityEvent.java
Patch:
@@ -1,8 +1,8 @@
 package org.activiti.api.process.model.events;
 
 
-import org.activiti.api.process.model.BPMNActivity;
 import org.activiti.api.model.shared.event.RuntimeEvent;
+import org.activiti.api.process.model.BPMNActivity;
 
 public interface BPMNActivityEvent extends RuntimeEvent<BPMNActivity, BPMNActivityEvent.ActivityEvents> {
 
@@ -13,6 +13,5 @@ enum ActivityEvents {
         ACTIVITY_CANCELLED,
 
         ACTIVITY_COMPLETED
-
     }
 }

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/ProcessDeployedEvent.java
Patch:
@@ -18,4 +18,6 @@
 
 public interface ProcessDeployedEvent extends ProcessDefinitionEvent {
 
+    String getProcessModelContent();
+
 }

File: activiti-api-basic-connector-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -26,10 +26,8 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
-import org.springframework.scheduling.annotation.EnableScheduling;
 
 @SpringBootApplication
-@EnableScheduling
 public class DemoApplication implements CommandLineRunner {
 
     private Logger logger = LoggerFactory.getLogger(DemoApplication.class);

File: activiti-api-basic-connector-example/src/test/java/org/activiti/examples/DemoApplicationTests.java
Patch:
@@ -23,7 +23,7 @@ public class DemoApplicationTests {
     @Test
     public void contextLoads() {
         securityUtil.logInAs("system");
-        ProcessDefinition processDefinition = processRuntime.processDefinition("categorizeProcess");
+        ProcessDefinition processDefinition = processRuntime.processDefinition("RankMovieId");
         assertThat(processDefinition).isNotNull();
     }
 

File: activiti-api-basic-connector-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -79,7 +79,7 @@ public Connector getMovieDesc() {
         return integrationContext -> {
             Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();
             logger.info(">>inbound: " + inBoundVariables);
-            integrationContext.addOutBoundVariable("movieDesc",
+            integrationContext.addOutBoundVariable("movieDescription",
                                                    "The Lord of the Rings is an epic high fantasy novel written by English author and scholar J. R. R. Tolkien");
             return integrationContext;
         };

File: activiti-connector-model/src/main/java/org/activiti/core/common/model/connector/ActionDefinition.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.core.common.model.connector;
 
+import java.util.Collections;
 import java.util.List;
 
 public class ActionDefinition {
@@ -27,11 +28,11 @@ public String getDescription() {
     }
 
     public List<VariableDefinition> getInputs() {
-        return inputs;
+        return inputs != null ? inputs : Collections.emptyList();
     }
 
     public List<VariableDefinition> getOutputs() {
-        return outputs;
+        return outputs != null ? outputs : Collections.emptyList();
     }
 
     public void setId(String id) {

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 import org.activiti.spring.ProcessDeployedEventProducer;
 import org.activiti.spring.SpringAsyncExecutor;
 import org.activiti.spring.SpringProcessEngineConfiguration;
-import org.activiti.spring.boot.validation.AsyncPropertyValidator;
+import org.activiti.spring.boot.process.validation.AsyncPropertyValidator;
 import org.activiti.spring.bpmn.parser.CloudActivityBehaviorFactory;
 import org.activiti.validation.ProcessValidatorImpl;
 import org.activiti.validation.validator.ValidatorSet;

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/process/validation/AsyncPropertyValidator.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.spring.boot.validation;
+package org.activiti.spring.boot.process.validation;
 
 import java.util.List;
 
@@ -35,9 +35,9 @@ protected void validateFlowElementsInContainer(FlowElementsContainer container,
             if ((flowElement instanceof Event)) {
                 ((Event) flowElement).getEventDefinitions().stream().forEach(event -> {
                     if (event instanceof TimerEventDefinition) {
-                        addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, null, event, "");
+                        addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, process, flowElement, "");
                     } else if ((event instanceof SignalEventDefinition) && ((SignalEventDefinition) event).isAsync() ) {
-                        addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, event, "");
+                        addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, flowElement, "");
                     }
                 });
             }

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ActivitiProperties.java
Patch:
@@ -35,7 +35,7 @@ public class ActivitiProperties {
   private boolean mailServerUseTls;
   private String databaseSchemaUpdate = "true";
   private String databaseSchema;
-  private boolean isDbHistoryUsed = false;
+  private boolean dbHistoryUsed = false;
   private HistoryLevel historyLevel = HistoryLevel.NONE;
   private String processDefinitionLocationPrefix = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + "**/processes/";
   private List<String> processDefinitionLocationSuffixes = Arrays.asList("**.bpmn20.xml", "**.bpmn");
@@ -88,11 +88,11 @@ public void setDatabaseSchema(String databaseSchema) {
   }
 
   public boolean isDbHistoryUsed() {
-    return isDbHistoryUsed;
+    return dbHistoryUsed;
   }
 
   public void setDbHistoryUsed(boolean isDbHistoryUsed) {
-    this.isDbHistoryUsed = isDbHistoryUsed;
+    this.dbHistoryUsed = isDbHistoryUsed;
   }
 
   public HistoryLevel getHistoryLevel() {

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/HistoryConfigurationTest.java
Patch:
@@ -68,8 +68,6 @@ public class HistoryConfigurationTest {
     @Autowired
     private ApplicationEventPublisher applicationEventPublisher;
 
-    private ApplicationEventPublisher eventPublisher;
-    
     @Autowired
     private ProcessCleanUpUtil processCleanUpUtil;
 
@@ -80,7 +78,7 @@ public void cleanUp(){
 
     @Before
     public void init() {
-        eventPublisher = spy(applicationEventPublisher);
+        ApplicationEventPublisher eventPublisher = spy(applicationEventPublisher);
         
         spy(new ProcessRuntimeImpl(repositoryService,
                                                      processDefinitionConverter,

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ActivitiProperties.java
Patch:
@@ -35,7 +35,7 @@ public class ActivitiProperties {
   private boolean mailServerUseTls;
   private String databaseSchemaUpdate = "true";
   private String databaseSchema;
-  private boolean isDbHistoryUsed = false;
+  private boolean dbHistoryUsed = false;
   private HistoryLevel historyLevel = HistoryLevel.NONE;
   private String processDefinitionLocationPrefix = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + "**/processes/";
   private List<String> processDefinitionLocationSuffixes = Arrays.asList("**.bpmn20.xml", "**.bpmn");
@@ -88,11 +88,11 @@ public void setDatabaseSchema(String databaseSchema) {
   }
 
   public boolean isDbHistoryUsed() {
-    return isDbHistoryUsed;
+    return dbHistoryUsed;
   }
 
   public void setDbHistoryUsed(boolean isDbHistoryUsed) {
-    this.isDbHistoryUsed = isDbHistoryUsed;
+    this.dbHistoryUsed = isDbHistoryUsed;
   }
 
   public HistoryLevel getHistoryLevel() {

File: activiti-api-basic-full-example-bean/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -76,7 +76,7 @@ public void processText() {
         ProcessInstance processInstance = processRuntime.start(ProcessPayloadBuilder
                 .start()
                 .withProcessDefinitionKey("categorizeHumanProcess")
-                .withProcessInstanceName("Processing Content: " + content)
+                .withName("Processing Content: " + content)
                 .withVariable("content", content)
                 .build());
         logger.info(">>> Created Process Instance: " + processInstance);

File: activiti-api-basic-full-example-nobean/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -87,7 +87,7 @@ public void processText() {
         ProcessInstance processInstance = processRuntime.start(ProcessPayloadBuilder
                 .start()
                 .withProcessDefinitionKey("categorizeHumanProcess")
-                .withProcessInstanceName("Processing Content: " + content)
+                .withName("Processing Content: " + content)
                 .withVariable("content", objectMapper.convertValue(content, JsonNode.class))
                 .build());
         logger.info(">>> Created Process Instance: " + processInstance);

File: activiti-api-basic-process-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -67,7 +67,7 @@ public void processText() {
         ProcessInstance processInstance = processRuntime.start(ProcessPayloadBuilder
                 .start()
                 .withProcessDefinitionKey("categorizeProcess")
-                .withProcessInstanceName("Processing Content: " + content)
+                .withName("Processing Content: " + content)
                 .withVariable("content", content)
                 .build());
         logger.info(">>> Created Process Instance: " + processInstance);

File: activiti-api-spring-integration-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -97,7 +97,7 @@ public void processFile(Message<File> message) throws IOException {
         ProcessInstance processInstance = processRuntime.start(ProcessPayloadBuilder
                 .start()
                 .withProcessDefinitionKey("categorizeProcess")
-                .withProcessInstanceName("Processing Content: " + content)
+                .withName("Processing Content: " + content)
                 .withVariable("content", content)
                 .build());
         logger.info(">>> Created Process Instance: " + processInstance);

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/connector/DefaultServiceTaskBehavior.java
Patch:
@@ -81,7 +81,7 @@ public void execute(DelegateExecution execution) {
                             Connector.class);
         }
 
-        IntegrationContext results = connector.execute(context);
+        IntegrationContext results = connector.apply(context);
 
         if(variablesMatchHelper != null) {
             execution.setVariables(variablesMatchHelper.match(results.getOutBoundVariables(),

File: activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/connector/Connector.java
Patch:
@@ -18,8 +18,9 @@
 
 import org.activiti.api.process.model.IntegrationContext;
 
-public interface Connector {
+import java.util.function.Function;
+
+public interface Connector extends Function<IntegrationContext, IntegrationContext> {
 
-    IntegrationContext execute(IntegrationContext executionContext);
 
 }

File: activiti-engine/src/test/java/org/activiti/engine/test/json/SerializePOJOJsonTest.java
Patch:
@@ -57,8 +57,7 @@ public void testCollectionJsonVarInExpression() throws Exception {
         ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testCollectionJsonVarInExpression", vars);
         String taskId = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult().getId();
         taskService.complete(taskId);
-        taskId = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult().getId();
-        taskService.complete(taskId);
+        taskService.createTaskQuery().processInstanceId(processInstance.getId()).list().forEach(task -> taskService.complete(task.getId()));
     }
 
     @Deployment

File: activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java
Patch:
@@ -38,7 +38,7 @@ public class TaskImpl implements Task {
     private String parentTaskId;
     private String formKey;
     private Date completedDate;
-    private long duration;
+    private Long duration;
 
     public TaskImpl() {
     }
@@ -171,11 +171,11 @@ public void setCompletedDate(Date completedDate) {
         this.completedDate = completedDate;
     }
 
-    public long getDuration() {
+    public Long getDuration() {
         return duration;
     }
 
-    public void setDuration(long duration) {
+    public void setDuration(Long duration) {
         this.duration = duration;
     }
 

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/Task.java
Patch:
@@ -59,5 +59,5 @@ enum TaskStatus {
 
     Date getCompletedDate();
 
-    long getDuration();
+    Long getDuration();
 }

File: activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java
Patch:
@@ -38,7 +38,7 @@ public class TaskImpl implements Task {
     private String parentTaskId;
     private String formKey;
     private Date completedDate;
-    private long duration;
+    private Long duration;
 
     public TaskImpl() {
     }
@@ -171,11 +171,11 @@ public void setCompletedDate(Date completedDate) {
         this.completedDate = completedDate;
     }
 
-    public long getDuration() {
+    public Long getDuration() {
         return duration;
     }
 
-    public void setDuration(long duration) {
+    public void setDuration(Long duration) {
         this.duration = duration;
     }
 

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/Task.java
Patch:
@@ -59,5 +59,5 @@ enum TaskStatus {
 
     Date getCompletedDate();
 
-    long getDuration();
+    Long getDuration();
 }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ProcessRuntimeImplTest.java
Patch:
@@ -61,9 +61,8 @@ public void setUp() {
                                                     securityPoliciesManager,
                                                     processInstanceConverter,
                                                     null,
-                                                    null)
-                             );
-        
+                                                    null,
+                                                    null));
        doReturn(true).when(securityPoliciesManager).canWrite("processDefinitionKey");
   
     }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessAdminRuntimeImpl.java
Patch:
@@ -198,9 +198,6 @@ public ProcessInstance delete(DeleteProcessPayload deleteProcessPayload) {
     @Override
     @Transactional
     public void signal(SignalPayload signalPayload) {
-        //@TODO: define security policies for signalling
-        runtimeService.signalEventReceived(signalPayload.getName(),
-                                           signalPayload.getVariables());
         eventPublisher.publishEvent(signalPayload);
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -305,8 +305,6 @@ public void setVariables(SetProcessVariablesPayload setProcessVariablesPayload)
     @Transactional
     public void signal(SignalPayload signalPayload) {
         //@TODO: define security policies for signalling
-        runtimeService.signalEventReceived(signalPayload.getName(),
-                                           signalPayload.getVariables());
         eventPublisher.publishEvent(signalPayload);
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessAdminRuntimeImpl.java
Patch:
@@ -198,9 +198,6 @@ public ProcessInstance delete(DeleteProcessPayload deleteProcessPayload) {
     @Override
     @Transactional
     public void signal(SignalPayload signalPayload) {
-        //@TODO: define security policies for signalling
-        runtimeService.signalEventReceived(signalPayload.getName(),
-                                           signalPayload.getVariables());
         eventPublisher.publishEvent(signalPayload);
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -305,8 +305,6 @@ public void setVariables(SetProcessVariablesPayload setProcessVariablesPayload)
     @Transactional
     public void signal(SignalPayload signalPayload) {
         //@TODO: define security policies for signalling
-        runtimeService.signalEventReceived(signalPayload.getName(),
-                                           signalPayload.getVariables());
         eventPublisher.publishEvent(signalPayload);
     }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -61,6 +61,8 @@ public interface ExecutionEntity extends DelegateExecution, Execution, ProcessIn
 
   void setRootProcessInstanceId(String rootProcessInstanceId);
   
+  public void setParentProcessInstanceId(String parentProcessInstanceId);
+  
   ExecutionEntity getRootProcessInstance();
   
   void setRootProcessInstance(ExecutionEntity rootProcessInstance);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -264,6 +264,7 @@ public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntit
     childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());
     childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != null 
         ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());
+    childExecution.setParentProcessInstanceId(parentExecutionEntity.getParentProcessInstanceId());
     childExecution.setScope(false);
 
     // manage the bidirectional parent-child relation

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -61,6 +61,8 @@ public interface ExecutionEntity extends DelegateExecution, Execution, ProcessIn
 
   void setRootProcessInstanceId(String rootProcessInstanceId);
   
+  public void setParentProcessInstanceId(String parentProcessInstanceId);
+  
   ExecutionEntity getRootProcessInstance();
   
   void setRootProcessInstance(ExecutionEntity rootProcessInstance);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -264,6 +264,7 @@ public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntit
     childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());
     childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != null 
         ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());
+    childExecution.setParentProcessInstanceId(parentExecutionEntity.getParentProcessInstanceId());
     childExecution.setScope(false);
 
     // manage the bidirectional parent-child relation

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeTest.java
Patch:
@@ -86,6 +86,7 @@ public class ProcessRuntimeTest {
     
     private ProcessAdminRuntime processAdminRuntimeMock;
 
+    @Autowired
     private ProcessCleanUpUtil processCleanUpUtil;
 
     @After

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -61,6 +61,8 @@ public interface ExecutionEntity extends DelegateExecution, Execution, ProcessIn
 
   void setRootProcessInstanceId(String rootProcessInstanceId);
   
+  public void setParentProcessInstanceId(String parentProcessInstanceId);
+  
   ExecutionEntity getRootProcessInstance();
   
   void setRootProcessInstance(ExecutionEntity rootProcessInstance);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -264,6 +264,7 @@ public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntit
     childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());
     childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != null 
         ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());
+    childExecution.setParentProcessInstanceId(parentExecutionEntity.getParentProcessInstanceId());
     childExecution.setScope(false);
 
     // manage the bidirectional parent-child relation

File: activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessInstanceImpl.java
Patch:
@@ -35,6 +35,9 @@ public class ProcessInstanceImpl implements ProcessInstance {
     private String parentId;
     private Integer processDefinitionVersion;
 
+    public ProcessInstanceImpl() {
+    }
+
     @Override
     public String getId() {
         return id;

File: activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java
Patch:
@@ -49,7 +49,9 @@ public TaskImpl(String id,
         this.status = status;
     }
 
-
+    public void setId(String id) {
+        this.id = id;
+    }
 
     public String getId() {
         return id;

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -93,6 +93,8 @@ public SpringProcessEngineConfiguration springProcessEngineConfiguration(
 
         conf.setHistoryLevel(activitiProperties.getHistoryLevel());
         conf.setCopyVariablesToLocalForTasks(activitiProperties.isCopyVariablesToLocalForTasks());
+        conf.setSerializePOJOsInVariablesToJson(activitiProperties.isSerializePOJOsInVariablesToJson());
+        conf.setJavaClassFieldForJackson(activitiProperties.getJavaClassFieldForJackson());
 
         if (activitiProperties.getCustomMybatisMappers() != null) {
             conf.setCustomMybatisMappers(getCustomMybatisMapperClasses(activitiProperties.getCustomMybatisMappers()));

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/VariableParsingService.java
Patch:
@@ -27,7 +27,7 @@ public Object parse(VariableDefinition variableDefinition) throws ActivitiExcept
         if(variableDefinition.getType()!=null) {
             VariableType type = variableTypeMap.get(variableDefinition.getType());
 
-            return type.parseFromString(String.valueOf(variableDefinition.getValue()));
+            return type.parseFromValue(variableDefinition.getValue());
         }
 
         return variableDefinition.getValue();

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/types/DateVariableType.java
Patch:
@@ -37,12 +37,12 @@ public void validate(Object var, List<ActivitiException> errors) {
     }
 
     @Override
-    public Object parseFromString(String stringValue) throws ActivitiException {
+    public Object parseFromValue(Object value) throws ActivitiException {
 
         try {
-            return format.parse(String.valueOf(stringValue));
+            return format.parse(String.valueOf(value));
         } catch (ParseException e) {
-            throw new ActivitiException("Error parsing date value " + stringValue, e);
+            throw new ActivitiException("Error parsing date value " + value, e);
         }
     }
 }

File: activiti-spring-process-extensions/src/main/java/org/activiti/spring/process/variable/types/VariableType.java
Patch:
@@ -22,7 +22,7 @@ public void setName(String name) {
 
     abstract public void validate(Object var, List<ActivitiException> errors);
 
-    public Object parseFromString(String stringValue) throws ActivitiException {
-        return stringValue;
+    public Object parseFromValue(Object value) throws ActivitiException {
+        return value;
     }
 }

File: activiti-spring-process-extensions/src/test/java/org/activiti/spring/process/ProcessExtensionServiceIT.java
Patch:
@@ -1,8 +1,8 @@
 package org.activiti.spring.process;
 
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.Map;
-
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.activiti.spring.process.autoconfigure.ProcessExtensionsAutoConfiguration;
@@ -34,7 +34,7 @@ ObjectMapper objectMapper(){
 
         @Bean
         ProcessExtensionService processExtensionService(ResourcePatternResolver resourcePatternResolver, ObjectMapper objectMapper){
-            return new ProcessExtensionService("classpath:/processes/", "**-extensions.json", objectMapper,resourcePatternResolver);
+            return new ProcessExtensionService("classpath:/processes/", "**-extensions.json", objectMapper,resourcePatternResolver,new HashMap<>());
         }
     }
 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/model/impl/APIProcessInstanceConverter.java
Patch:
@@ -26,9 +26,12 @@ public class APIProcessInstanceConverter extends ListConverter<org.activiti.engi
     public ProcessInstance from(org.activiti.engine.runtime.ProcessInstance internalProcessInstance) {
         ProcessInstanceImpl processInstance = new ProcessInstanceImpl();
         processInstance.setId(internalProcessInstance.getId());
+        processInstance.setParentId(internalProcessInstance.getParentProcessInstanceId());
         processInstance.setName(internalProcessInstance.getName());
         processInstance.setDescription(internalProcessInstance.getDescription());
         processInstance.setProcessDefinitionId(internalProcessInstance.getProcessDefinitionId());
+        processInstance.setProcessDefinitionKey(internalProcessInstance.getProcessDefinitionKey());
+        processInstance.setProcessDefinitionVersion(internalProcessInstance.getProcessDefinitionVersion());
         processInstance.setInitiator(internalProcessInstance.getStartUserId());
         processInstance.setStartDate(internalProcessInstance.getStartTime());
         processInstance.setProcessDefinitionKey(internalProcessInstance.getProcessDefinitionKey());

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -61,6 +61,8 @@ public interface ExecutionEntity extends DelegateExecution, Execution, ProcessIn
 
   void setRootProcessInstanceId(String rootProcessInstanceId);
   
+  public void setParentProcessInstanceId(String parentProcessInstanceId);
+  
   ExecutionEntity getRootProcessInstance();
   
   void setRootProcessInstance(ExecutionEntity rootProcessInstance);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -264,6 +264,7 @@ public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntit
     childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());
     childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != null 
         ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());
+    childExecution.setParentProcessInstanceId(parentExecutionEntity.getParentProcessInstanceId());
     childExecution.setScope(false);
 
     // manage the bidirectional parent-child relation

File: activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -57,7 +57,7 @@ public interface TaskService {
    * @param task
    *          the task, cannot be null.
    */
-  void saveTask(Task task);
+  Task saveTask(Task task);
 
   /**
    * Deletes the given task, not deleting historic information that is related to this task.

File: activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -96,8 +96,8 @@ public Task newTask(String taskId) {
     return commandExecutor.execute(new NewTaskCmd(taskId));
   }
 
-  public void saveTask(Task task) {
-    commandExecutor.execute(new SaveTaskCmd(task));
+  public Task saveTask(Task task) {
+    return commandExecutor.execute(new SaveTaskCmd(task));
   }
 
   public void deleteTask(String taskId) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManagerImpl.java
Patch:
@@ -122,7 +122,7 @@ private void changeTaskAssignee(TaskEntity taskEntity, String assignee, boolean
       if (taskEntity.getId() != null) {
         getHistoryManager().recordTaskAssigneeChange(taskEntity.getId(), taskEntity.getAssignee());
         addAssigneeIdentityLinks(taskEntity);
-        update(taskEntity);
+        update(taskEntity, fireEvents);
       }
     }
   }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessAdminRuntimeImpl.java
Patch:
@@ -44,6 +44,7 @@
 import org.activiti.runtime.api.query.impl.PageImpl;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.transaction.annotation.Transactional;
 
 @PreAuthorize("hasRole('ACTIVITI_ADMIN')")
 public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {
@@ -192,6 +193,7 @@ public ProcessInstance delete(DeleteProcessPayload deleteProcessPayload) {
     }
 
     @Override
+    @Transactional
     public void signal(SignalPayload signalPayload) {
         //@TODO: define security policies for signalling
         runtimeService.signalEventReceived(signalPayload.getName(),

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/impl/ProcessRuntimeImpl.java
Patch:
@@ -57,6 +57,7 @@
 import org.activiti.runtime.api.query.impl.PageImpl;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.transaction.annotation.Transactional;
 
 @PreAuthorize("hasRole('ACTIVITI_USER')")
 public class ProcessRuntimeImpl implements ProcessRuntime {
@@ -297,6 +298,7 @@ public void setVariables(SetProcessVariablesPayload setProcessVariablesPayload)
     }
 
     @Override
+    @Transactional
     public void signal(SignalPayload signalPayload) {
         //@TODO: define security policies for signalling
         runtimeService.signalEventReceived(signalPayload.getName(),

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeTest.java
Patch:
@@ -91,8 +91,7 @@ public void init() {
                                                      processInstanceConverter,
                                                      variableInstanceConverter,
                                                      configuration,
-                                                     eventPublisher,
-                                                     null));
+                                                     eventPublisher));
 
         processAdminRuntimeMock = spy(new ProcessAdminRuntimeImpl(repositoryService,
                                                               processDefinitionConverter,

File: activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -57,7 +57,7 @@ public interface TaskService {
    * @param task
    *          the task, cannot be null.
    */
-  void saveTask(Task task);
+  Task saveTask(Task task);
 
   /**
    * Deletes the given task, not deleting historic information that is related to this task.

File: activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -96,8 +96,8 @@ public Task newTask(String taskId) {
     return commandExecutor.execute(new NewTaskCmd(taskId));
   }
 
-  public void saveTask(Task task) {
-    commandExecutor.execute(new SaveTaskCmd(task));
+  public Task saveTask(Task task) {
+    return commandExecutor.execute(new SaveTaskCmd(task));
   }
 
   public void deleteTask(String taskId) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManagerImpl.java
Patch:
@@ -122,7 +122,7 @@ private void changeTaskAssignee(TaskEntity taskEntity, String assignee, boolean
       if (taskEntity.getId() != null) {
         getHistoryManager().recordTaskAssigneeChange(taskEntity.getId(), taskEntity.getAssignee());
         addAssigneeIdentityLinks(taskEntity);
-        update(taskEntity);
+        update(taskEntity, fireEvents);
       }
     }
   }

File: activiti-api-impl/activiti-api-process-runtime-impl/src/test/java/org/activiti/runtime/api/impl/ProcessRuntimeImplTest.java
Patch:
@@ -72,6 +72,7 @@ public void setUp() {
                                                     processInstanceConverter,
                                                     null,
                                                     null,
+                                                    null,
                                                     Collections.singletonList(listener)));
        doReturn(true).when(securityPoliciesManager).canWrite("processDefinitionKey");
   

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeTest.java
Patch:
@@ -91,7 +91,8 @@ public void init() {
                                                      processInstanceConverter,
                                                      variableInstanceConverter,
                                                      configuration,
-                                                     eventPublisher));
+                                                     eventPublisher,
+                                                     null));
 
         processAdminRuntimeMock = spy(new ProcessAdminRuntimeImpl(repositoryService,
                                                               processDefinitionConverter,

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/conf/activiti/runtime/api/ProcessRuntimeAutoConfiguration.java
Patch:
@@ -97,7 +97,7 @@ public ProcessRuntime processRuntime(RepositoryService repositoryService,
                 processInstanceConverter,
                 variableInstanceConverter,
                 processRuntimeConfiguration,
-                eventPublisher;
+                eventPublisher,
                 getInitializedProcessRuntimeEventListeners(listeners));
     }
 

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/impl/TaskRuntimeImpl.java
Patch:
@@ -317,8 +317,8 @@ public Task create(CreateTaskPayload createTaskPayload) {
         taskService.saveTask(task);
         taskService.addCandidateUser(task.getId(),
                                      securityManager.getAuthenticatedUserId());
-        if (createTaskPayload.getGroups() != null && !createTaskPayload.getGroups().isEmpty()) {
-            for (String g : createTaskPayload.getGroups()) {
+        if (createTaskPayload.getCandidateGroups() != null && !createTaskPayload.getCandidateGroups().isEmpty()) {
+            for (String g : createTaskPayload.getCandidateGroups()) {
                 taskService.addCandidateGroup(task.getId(),
                                               g);
             }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/MessageParser.java
Patch:
@@ -46,7 +46,8 @@ protected String parseItemRef(String itemRef, BpmnModel model) {
         String resolvedNamespace = model.getNamespace(prefix);
         result = resolvedNamespace + ":" + itemRef.substring(indexOfP + 1);
       } else {
-        result = itemRef;
+        String resolvedNamespace = model.getTargetNamespace();
+        result = resolvedNamespace + ":" + itemRef;
       }
     }
     return result;

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeClaimReleaseTest.java
Patch:
@@ -44,7 +44,7 @@ public void createStandaloneTaskForGroup() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("group task")
-                .withGroup("activitiTeam")
+                .withCandidateGroup("activitiTeam")
                 .build());
 
         // the owner should be able to see the created task
@@ -76,7 +76,7 @@ public void createStandaloneTaskReleaseUnAuthorized() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("group task")
-                .withGroup("activitiTeam")
+                .withCandidateGroup("activitiTeam")
                 .build());
 
 
@@ -98,7 +98,7 @@ public void createStandaloneTaskAndClaimAndReleaseUnAuthorized() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("group task")
-                .withGroup("activitiTeam")
+                .withCandidateGroup("activitiTeam")
                 .build());
 
 

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeDeleteTaskTest.java
Patch:
@@ -73,7 +73,7 @@ public void createStandaloneGroupTaskClaimAndDeleteFail() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("simple task")
-                .withGroup("activitiTeam")
+                .withCandidateGroup("activitiTeam")
                 .build());
 
         Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeStandaloneTaskTest.java
Patch:
@@ -83,7 +83,7 @@ public void createStandaloneTaskForGroup() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("find Lucien Sanchez")
-                .withGroup("doctor")
+                .withCandidateGroup("doctor")
                 .build());
 
         Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeTaskAssigneeTest.java
Patch:
@@ -95,7 +95,7 @@ public void createStandaloneTaskForGroupAndClaim() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("group task")
-                .withGroup("doctor")
+                .withCandidateGroup("doctor")
                 .build());
 
         // the owner should be able to see the created task

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/tasks/TaskRuntimeUnAuthorizedTest.java
Patch:
@@ -51,7 +51,7 @@ public void createStandaloneTaskForGroup() {
 
         Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                 .withName("group task")
-                .withGroup("doctor")
+                .withCandidateGroup("doctor")
                 .build());
 
         // the owner should be able to see the created task

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/MessageParser.java
Patch:
@@ -46,7 +46,8 @@ protected String parseItemRef(String itemRef, BpmnModel model) {
         String resolvedNamespace = model.getNamespace(prefix);
         result = resolvedNamespace + ":" + itemRef.substring(indexOfP + 1);
       } else {
-        result = itemRef;
+        String resolvedNamespace = model.getTargetNamespace();
+        result = resolvedNamespace + ":" + itemRef;
       }
     }
     return result;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -216,7 +216,7 @@ protected void dispatchProcessDefinitionEntityInitializedEvent(ParsedDeployment
         CommandContext commandContext = Context.getCommandContext();
         for (ProcessDefinitionEntity processDefinitionEntity : parsedDeployment.getAllProcessDefinitions()) {
             log.info("Process deployed: {id: " + processDefinitionEntity.getId() +
-                ", key: " + processDefinitionEntity.getKey() + "}");
+                ", key: " + processDefinitionEntity.getKey() + ", name: " + processDefinitionEntity.getName() +" }");
             if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
                 commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
                         ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED,

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -216,7 +216,7 @@ protected void dispatchProcessDefinitionEntityInitializedEvent(ParsedDeployment
         CommandContext commandContext = Context.getCommandContext();
         for (ProcessDefinitionEntity processDefinitionEntity : parsedDeployment.getAllProcessDefinitions()) {
             log.info("Process deployed: {id: " + processDefinitionEntity.getId() +
-                ", key: " + processDefinitionEntity.getKey() + "}");
+                ", key: " + processDefinitionEntity.getKey() + ", name: " + processDefinitionEntity.getName() +" }");
             if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
                 commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
                         ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED,

File: activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/event/impl/BPMNActivityEventImpl.java
Patch:
@@ -13,4 +13,6 @@ public BPMNActivityEventImpl() {
     public BPMNActivityEventImpl(BPMNActivity entity) {
         super(entity);
     }
+
+
 }

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/events/BPMNSequenceFlowTakenEvent.java
Patch:
@@ -16,6 +16,6 @@
 
 package org.activiti.api.process.model.events;
 
-public interface SequenceFlowTakenEvent extends SequenceFlowEvent {
+public interface BPMNSequenceFlowTakenEvent extends SequenceFlowEvent {
 
 }

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/AbstractProcessEngineAutoConfiguration.java
Patch:
@@ -29,10 +29,8 @@
 import org.activiti.spring.SpringCallerRunsRejectedJobsHandler;
 import org.activiti.spring.SpringProcessEngineConfiguration;
 import org.activiti.spring.SpringRejectedJobsHandler;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Primary;
 import org.springframework.core.task.SimpleAsyncTaskExecutor;
 import org.springframework.core.task.TaskExecutor;
 
@@ -44,7 +42,7 @@ public abstract class AbstractProcessEngineAutoConfiguration
         extends AbstractProcessEngineConfiguration {
 
   @Bean
-  public SpringAsyncExecutor springAsyncExecutor(@Qualifier("taskExecutor") TaskExecutor applicationTaskExecutor) {
+  public SpringAsyncExecutor springAsyncExecutor(TaskExecutor applicationTaskExecutor) {
     return new SpringAsyncExecutor(applicationTaskExecutor, springRejectedJobsHandler());
   }
   

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ProcessEngineAutoConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -41,7 +42,7 @@
 import org.springframework.transaction.PlatformTransactionManager;
 
 @Configuration
-@AutoConfigureAfter(DataSourceAutoConfiguration.class)
+@AutoConfigureAfter({DataSourceAutoConfiguration.class, TaskExecutionAutoConfiguration.class})
 @EnableConfigurationProperties(ActivitiProperties.class)
 public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoConfiguration {
 
@@ -56,7 +57,7 @@ public ProcessEngineAutoConfiguration(UserGroupManager userGroupManager) {
     public SpringProcessEngineConfiguration springProcessEngineConfiguration(
             DataSource dataSource,
             PlatformTransactionManager transactionManager,
-            @Autowired(required = false) SpringAsyncExecutor springAsyncExecutor,
+            SpringAsyncExecutor springAsyncExecutor,
             ActivitiProperties activitiProperties,
             ProcessDefinitionResourceFinder processDefinitionResourceFinder,
             @Autowired(required = false) ProcessEngineConfigurationConfigurer processEngineConfigurationConfigurer) throws IOException {

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/AbstractProcessEngineAutoConfiguration.java
Patch:
@@ -42,8 +42,8 @@ public abstract class AbstractProcessEngineAutoConfiguration
         extends AbstractProcessEngineConfiguration {
 
   @Bean
-  public SpringAsyncExecutor springAsyncExecutor(TaskExecutor taskExecutor) {
-    return new SpringAsyncExecutor(taskExecutor, springRejectedJobsHandler());
+  public SpringAsyncExecutor springAsyncExecutor(TaskExecutor applicationTaskExecutor) {
+    return new SpringAsyncExecutor(applicationTaskExecutor, springRejectedJobsHandler());
   }
   
   @Bean 

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToSequenceFlowTakenConverter.java
Patch:
@@ -29,7 +29,7 @@ public class ToSequenceFlowTakenConverter implements EventConverter<SequenceFlow
     public Optional<SequenceFlowTakenEvent> from(ActivitiSequenceFlowTakenEvent internalEvent) {
         BPMNSequenceFlowImpl sequenceFlow = new BPMNSequenceFlowImpl(internalEvent.getId(),
                                                                      internalEvent.getSourceActivityId(),
-                internalEvent.getTargetActivityId());
+                                                                     internalEvent.getTargetActivityId());
 
 
         sequenceFlow.setProcessDefinitionId(internalEvent.getProcessDefinitionId());

File: activiti-api-impl/activiti-api-process-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToSequenceFlowTakenConverter.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.activiti.api.process.model.events.SequenceFlowTakenEvent;
 import org.activiti.api.runtime.event.impl.SequenceFlowTakenImpl;
+import org.activiti.api.runtime.model.impl.BPMNSequenceFlowImpl;
 import org.activiti.engine.delegate.event.ActivitiSequenceFlowTakenEvent;
 
 public class ToSequenceFlowTakenConverter implements EventConverter<SequenceFlowTakenEvent, ActivitiSequenceFlowTakenEvent>{

File: activiti-api-process-runtime/src/main/java/org/activiti/api/process/runtime/events/ProcessUpdatedEvent.java
Patch:
@@ -17,8 +17,8 @@
 package org.activiti.api.process.runtime.events;
 
 import org.activiti.api.process.model.ProcessInstance;
-import org.activiti.api.process.model.events.ExtendedProcessRuntimeEvent;
+import org.activiti.api.process.model.events.ProcessRuntimeEvent;
 
-public interface ProcessUpdatedEvent extends ExtendedProcessRuntimeEvent<ProcessInstance> {
+public interface ProcessUpdatedEvent extends ProcessRuntimeEvent<ProcessInstance> {
 
 }

File: activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/RuntimeEvent.java
Patch:
@@ -27,6 +27,8 @@ public interface RuntimeEvent<ENTITY_TYPE, EVENT_TYPE extends Enum<?>> {
     EVENT_TYPE getEventType();
 
     String getProcessInstanceId();
+
+    String getParentProcessInstanceId();
     
     String getProcessDefinitionId();
     

File: activiti-api-process-model/src/main/java/org/activiti/api/process/model/IntegrationContext.java
Patch:
@@ -24,6 +24,8 @@ public interface IntegrationContext {
 
     String getProcessInstanceId();
 
+    String getParentProcessInstanceId();
+    
     String getProcessDefinitionId();
 
     String getProcessDefinitionKey();

File: activiti-api-model-shared/src/main/java/org/activiti/api/model/shared/event/RuntimeEvent.java
Patch:
@@ -25,6 +25,8 @@ public interface RuntimeEvent<ENTITY_TYPE, EVENT_TYPE extends Enum<?>> {
     Long getTimestamp();
 
     EVENT_TYPE getEventType();
+
+    String getProcessInstanceId();
     
     String getProcessDefinitionId();
     

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ActivitiProperties.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.activiti.engine.impl.history.HistoryLevel;
 import org.springframework.boot.context.properties.ConfigurationProperties;
-
+import org.springframework.core.io.support.ResourcePatternResolver;
 
 @ConfigurationProperties("spring.activiti")
 public class ActivitiProperties {
@@ -36,7 +36,7 @@ public class ActivitiProperties {
   private String databaseSchema;
   private boolean isDbHistoryUsed = false;
   private HistoryLevel historyLevel = HistoryLevel.NONE;
-  private String processDefinitionLocationPrefix = "classpath:**/processes/";
+  private String processDefinitionLocationPrefix = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + "**/processes/";
   private List<String> processDefinitionLocationSuffixes = Arrays.asList("**.bpmn20.xml", "**.bpmn");
   private List<String> customMybatisMappers;
   private List<String> customMybatisXMLMappers;

File: activiti-api-impl/activiti-api-task-runtime-impl/src/main/java/org/activiti/runtime/api/event/impl/ToTaskCompletedConverter.java
Patch:
@@ -33,6 +33,6 @@ public ToTaskCompletedConverter(APITaskConverter converter) {
 
     @Override
     public Optional<TaskCompletedEvent> from(ActivitiEntityEvent internalEvent) {
-        return Optional.of(new TaskCompletedImpl(converter.from((Task) internalEvent.getEntity())));
+        return Optional.of(new TaskCompletedImpl(converter.from((Task) internalEvent.getEntity(), org.activiti.api.task.model.Task.TaskStatus.COMPLETED)));
     }
 }

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeConnectorIT.java
Patch:
@@ -17,7 +17,7 @@
         locations = {"classpath:application.properties"}
 )
 @ContextConfiguration
-public class ProcessRuntimeConnectorTest {
+public class ProcessRuntimeConnectorIT {
 
     private static final String CATEGORIZE_IMAGE_CONNECTORS_PROCESS = "categorizeProcessConnectors";
 

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeEmptyConnectorDefinitionIT.java
Patch:
@@ -17,7 +17,7 @@
         locations = {"classpath:application-connectors-empty.properties"}
 )
 @ContextConfiguration
-public class ProcessRuntimeEmptyConnectorDefinitionTest {
+public class ProcessRuntimeEmptyConnectorDefinitionIT {
 
     private static final String CATEGORIZE_PROCESS = "categorizeProcess";
 

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeIT.java
Patch:
@@ -25,7 +25,7 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
 @ContextConfiguration
-public class ProcessRuntimeTest {
+public class ProcessRuntimeIT {
 
     private static final String CATEGORIZE_PROCESS = "categorizeProcess";
     private static final String CATEGORIZE_HUMAN_PROCESS = "categorizeHumanProcess";

File: activiti-spring-boot-starter/src/test/java/org/activiti/spring/boot/process/ProcessRuntimeSecurityPoliciesIT.java
Patch:
@@ -21,7 +21,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
 @TestPropertySource("classpath:application-with-sec-policies.properties")
 @ContextConfiguration
-public class ProcessRuntimeSecurityPoliciesTest {
+public class ProcessRuntimeSecurityPoliciesIT {
 
     @Autowired
     private ProcessRuntime processRuntime;

File: activiti-spring-application/src/test/java/org/activiti/application/ApplicationDiscoveryTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.springframework.core.io.Resource;
 import org.springframework.core.io.support.ResourcePatternResolver;
@@ -35,7 +34,6 @@
 
 public class ApplicationDiscoveryTest {
 
-    @InjectMocks
     private ApplicationDiscovery applicationDiscovery;
 
     @Mock
@@ -44,6 +42,7 @@ public class ApplicationDiscoveryTest {
     @Before
     public void setUp() {
         initMocks(this);
+        applicationDiscovery = new ApplicationDiscovery(resourceLoader, "classpath:/applications/");
     }
 
     @Test

File: activiti-api-task-model/src/main/java/org/activiti/api/task/model/events/TaskRuntimeEvent.java
Patch:
@@ -30,6 +30,8 @@ enum TaskEvents {
 
         TASK_CREATED,
 
+        TASK_UPDATED,
+
         TASK_ACTIVATED,
 
         TASK_SUSPENDED,

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -215,6 +215,8 @@ protected void updateTimersAndEvents(ParsedDeployment parsedDeployment,
     protected void dispatchProcessDefinitionEntityInitializedEvent(ParsedDeployment parsedDeployment) {
         CommandContext commandContext = Context.getCommandContext();
         for (ProcessDefinitionEntity processDefinitionEntity : parsedDeployment.getAllProcessDefinitions()) {
+            log.info("Process deployed: {id: " + processDefinitionEntity.getId() +
+                ", key: " + processDefinitionEntity.getKey() + "}");
             if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
                 commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
                         ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED,

File: activiti-spring-boot-starter/src/main/java/org/activiti/spring/boot/ActivitiProperties.java
Patch:
@@ -24,7 +24,7 @@ public class ActivitiProperties {
 
   private boolean checkProcessDefinitions = true;
   private boolean asyncExecutorActivate = false;
-  private String deploymentName;
+  private String deploymentName = "SpringAutoDeployment";
   private String mailServerHost = "localhost";
   private int mailServerPort = 1025;
   private String mailServerUserName;

File: activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/AbstractAutoDeploymentStrategyTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.*;
+import static org.mockito.MockitoAnnotations.initMocks;
 
 public class AbstractAutoDeploymentStrategyTest {
 
@@ -82,7 +83,7 @@ public class AbstractAutoDeploymentStrategyTest {
 
     @Before
     public void before() throws Exception {
-
+        initMocks(this);
         when(resourceMock1.getPathWithinContext()).thenReturn(resourceName1);
         when(resourceMock1.getFile()).thenReturn(fileMock1);
 

File: activiti-api-basic-process-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -3,7 +3,6 @@
 import org.activiti.runtime.api.ProcessRuntime;
 import org.activiti.runtime.api.connector.Connector;
 import org.activiti.runtime.api.event.ProcessCompleted;
-import org.activiti.runtime.api.event.ProcessStarted;
 import org.activiti.runtime.api.event.listener.ProcessRuntimeEventListener;
 import org.activiti.runtime.api.model.ProcessDefinition;
 import org.activiti.runtime.api.model.ProcessInstance;

File: activiti-api-web-example/src/main/java/org/activiti/examples/DemoApplication.java
Patch:
@@ -28,8 +28,7 @@
 import org.springframework.messaging.MessageChannel;
 import org.springframework.web.bind.annotation.RestController;
 
-@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })
-@RestController
+@SpringBootApplication
 public class DemoApplication implements CommandLineRunner {
 
     public static void main(String[] args) {

File: activiti-api/activiti-process-model-api/src/main/java/org/activiti/runtime/api/model/ProcessInstance.java
Patch:
@@ -25,7 +25,8 @@ enum ProcessInstanceStatus {
         RUNNING,
         SUSPENDED,
         CANCELLED,
-        COMPLETED
+        COMPLETED,
+        DELETED
     }
 
     String getId();

File: activiti-api/activiti-process-model-api/src/main/java/org/activiti/runtime/api/model/builders/GetProcessDefinitionsPayloadBuilder.java
Patch:
@@ -8,7 +8,7 @@
 public class GetProcessDefinitionsPayloadBuilder {
 
     private String processDefinitionId;
-    private Set<String> processDefinitionKeys;
+    private Set<String> processDefinitionKeys = new HashSet<>();
 
     public GetProcessDefinitionsPayloadBuilder withProcessDefinitionKeys(Set<String> processDefinitionKeys) {
         this.processDefinitionKeys = processDefinitionKeys;

File: activiti-api/activiti-process-model-api/src/main/java/org/activiti/runtime/api/model/payloads/RemoveProcessVariablesPayload.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.runtime.api.model.payloads;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 
@@ -9,7 +10,7 @@ public class RemoveProcessVariablesPayload implements Payload {
 
     private String id;
     private String processInstanceId;
-    private List<String> variableNames;
+    private List<String> variableNames = new ArrayList<>();
     private boolean localOnly;
 
     public RemoveProcessVariablesPayload() {

File: activiti-api/activiti-process-model-api/src/main/java/org/activiti/runtime/api/model/payloads/SetProcessVariablesPayload.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.runtime.api.model.payloads;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
 
@@ -9,7 +10,7 @@ public class SetProcessVariablesPayload implements Payload {
 
     private String id;
     private String processInstanceId;
-    private Map<String, Object> variables;
+    private Map<String, Object> variables = new HashMap<>();
     private boolean localOnly = false;
 
     public SetProcessVariablesPayload() {

File: activiti-api/activiti-process-model-api/src/main/java/org/activiti/runtime/api/model/payloads/SignalPayload.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.runtime.api.model.payloads;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
 
@@ -9,7 +10,7 @@ public class SignalPayload implements Payload {
 
     private String id;
     private String name;
-    private Map<String, Object> variables;
+    private Map<String, Object> variables = new HashMap<>();
 
     public SignalPayload() {
         this.id = UUID.randomUUID().toString();

File: activiti-api/activiti-process-runtime-api/src/main/java/org/activiti/runtime/api/conf/ProcessRuntimeConfiguration.java
Patch:
@@ -23,10 +23,9 @@
 
 public interface ProcessRuntimeConfiguration {
 
-    List<ProcessRuntimeEventListener<?>> eventProcessRuntimeListeners();
+    List<ProcessRuntimeEventListener<?>> processEventListeners();
 
     List<VariableEventListener<?>> variableEventListeners();
 
-    int maxPagedResults();
 
 }

File: activiti-api/activiti-task-model-api/src/main/java/org/activiti/runtime/api/model/builders/GetTaskVariablesPayloadBuilder.java
Patch:
@@ -5,15 +5,15 @@
 public class GetTaskVariablesPayloadBuilder {
 
     private String taskId;
-    private boolean localOnly;
+    private boolean localOnly = false;
 
     public GetTaskVariablesPayloadBuilder withTaskId(String taskId) {
         this.taskId = taskId;
         return this;
     }
 
-    public GetTaskVariablesPayloadBuilder withLocalOnly(boolean localOnly) {
-        this.localOnly = localOnly;
+    public GetTaskVariablesPayloadBuilder localOnly() {
+        this.localOnly = true;
         return this;
     }
 

File: activiti-api/activiti-task-model-api/src/main/java/org/activiti/runtime/api/model/builders/SetTaskVariablesPayloadBuilder.java
Patch:
@@ -8,10 +8,10 @@ public class SetTaskVariablesPayloadBuilder {
 
     private String taskId;
     private Map<String, Object> variables;
-    private boolean localOnly;
+    private boolean localOnly = false;
 
-    public SetTaskVariablesPayloadBuilder withLocalOnly(boolean localOnly) {
-        this.localOnly = localOnly;
+    public SetTaskVariablesPayloadBuilder localOnly() {
+        this.localOnly = true;
         return this;
     }
 

File: activiti-api/activiti-task-model-api/src/main/java/org/activiti/runtime/api/model/builders/UpdateTaskPayloadBuilder.java
Patch:
@@ -10,7 +10,7 @@ public class UpdateTaskPayloadBuilder {
     private String name;
     private String description;
     private Date dueDate;
-    private int priority;
+    private Integer priority;
     private String assignee;
 
     public UpdateTaskPayloadBuilder withAssignee(String assignee) {
@@ -38,7 +38,7 @@ public UpdateTaskPayloadBuilder withDueDate(Date dueDate) {
         return this;
     }
 
-    public UpdateTaskPayloadBuilder withPriority(int priority) {
+    public UpdateTaskPayloadBuilder withPriority(Integer priority) {
         this.priority = priority;
         return this;
     }

File: activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import org.activiti.engine.impl.persistence.entity.integration.IntegrationContextManager;
 import org.activiti.engine.integration.IntegrationContextService;
 import org.activiti.engine.runtime.Clock;
-import org.activiti.runtime.api.identity.IdentityLookup;
+import org.activiti.runtime.api.identity.UserGroupManager;
 
 import javax.sql.DataSource;
 import java.io.InputStream;
@@ -247,7 +247,7 @@ public static ProcessEngineConfiguration createStandaloneInMemProcessEngineConfi
 
   public abstract ProcessEngineConfiguration getProcessEngineConfiguration();
 
-  public abstract IdentityLookup getIdentityLookup();
+  public abstract UserGroupManager getUserGroupManager();
 
   public abstract IntegrationContextService getIntegrationContextService();
 
@@ -745,7 +745,7 @@ public ProcessEngineConfiguration setEnableProcessDefinitionInfoCache(boolean en
   public void setEngineAgendaFactory(ActivitiEngineAgendaFactory engineAgendaFactory) {
     this.engineAgendaFactory = engineAgendaFactory;
   }
-  
+
   public ActivitiEngineAgendaFactory getEngineAgendaFactory() {
     return engineAgendaFactory;
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/multitenant/MultiSchemaMultiTenantProcessEngineConfiguration.java
Patch:
@@ -27,7 +27,7 @@
 import org.activiti.engine.impl.interceptor.CommandInterceptor;
 import org.activiti.engine.impl.persistence.StrongUuidGenerator;
 import org.activiti.engine.repository.DeploymentBuilder;
-import org.activiti.runtime.api.identity.IdentityLookup;
+import org.activiti.runtime.api.identity.UserGroupManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -170,7 +170,7 @@ protected void postProcessEngineInitialisation() {
   }
 
   @Override
-  public IdentityLookup getIdentityLookup() {
+  public UserGroupManager getUserGroupManager() {
     return null; //no external identity provider supplied
   }
 }

File: activiti-spring/src/main/java/org/activiti/spring/SpringProcessEngineConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.engine.impl.interceptor.CommandConfig;
 import org.activiti.engine.impl.interceptor.CommandInterceptor;
 import org.activiti.engine.impl.variable.EntityManagerSession;
-import org.activiti.runtime.api.identity.IdentityLookup;
+import org.activiti.runtime.api.identity.UserGroupManager;
 import org.activiti.spring.autodeployment.AutoDeploymentStrategy;
 import org.activiti.spring.autodeployment.DefaultAutoDeploymentStrategy;
 import org.activiti.spring.autodeployment.ResourceParentFolderAutoDeploymentStrategy;
@@ -70,8 +70,8 @@ public ProcessEngine buildProcessEngine() {
   }
 
   @Override
-  public IdentityLookup getIdentityLookup() {
-    return identityLookup;
+  public UserGroupManager getUserGroupManager() {
+    return userGroupManager;
   }
 
   public void setTransactionSynchronizationAdapterOrder(Integer transactionSynchronizationAdapterOrder) {

File: activiti-api/activiti-process-runtime-api-impl/src/main/java/org/activiti/runtime/api/connector/DefaultServiceTaskBehavior.java
Patch:
@@ -49,7 +49,9 @@ private String getServiceTaskImplementation(DelegateExecution execution) {
     }
 
     protected boolean hasConnectorBean(DelegateExecution execution) {
-        return applicationContext.containsBean(getServiceTaskImplementation(execution));
+        String implementation = getServiceTaskImplementation(execution);
+        return applicationContext.containsBean(implementation)
+                && applicationContext.getBean(implementation) instanceof Connector;
     }
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/history/HistoricTaskInstanceQuery.java
Patch:
@@ -53,9 +53,6 @@ public interface HistoricTaskInstanceQuery extends TaskInfoQuery<HistoricTaskIns
    */
   HistoricTaskInstanceQuery processUnfinished();
 
-  /** Only select subtasks of the given parent task */
-  HistoricTaskInstanceQuery taskParentTaskId(String parentTaskId);
-
   /**
    * Only select select historic task instances which are completed on the given date
    */

File: activiti-api/activiti-task-runtime-api-impl/src/main/java/org/activiti/runtime/api/conf/TaskRuntimeAutoConfiguration.java
Patch:
@@ -131,7 +131,7 @@ public InitializingBean registerTaskCancelledEventListener(RuntimeService runtim
         return () -> runtimeService.addEventListener(new TaskCancelledListenerDelegate(getInitializedTaskRuntimeEventListeners(taskRuntimeEventListeners),
                                                                                        new ToTaskCancelledConverter(taskConverter,
                                                                                                                     taskService)),
-                                                     ActivitiEventType.ENTITY_DELETED);
+                                                     ActivitiEventType.ACTIVITY_CANCELLED);
     }
 
     @Bean

File: activiti-api/activiti-cloud-common-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudVariableCreatedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudVariableCreatedEvent;
+import org.activiti.runtime.api.event.CloudVariableCreated;
 import org.activiti.runtime.api.event.VariableEvent;
 import org.activiti.runtime.api.model.VariableInstance;
 
-public class CloudVariableCreatedEventImpl extends CloudVariableEventImpl implements CloudVariableCreatedEvent {
+public class CloudVariableCreatedEventImpl extends CloudVariableEventImpl implements CloudVariableCreated {
 
     public CloudVariableCreatedEventImpl() {
     }

File: activiti-api/activiti-cloud-common-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudVariableDeletedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudVariableDeletedEvent;
+import org.activiti.runtime.api.event.CloudVariableDeleted;
 import org.activiti.runtime.api.event.VariableEvent;
 import org.activiti.runtime.api.model.VariableInstance;
 
-public class CloudVariableDeletedEventImpl extends CloudVariableEventImpl implements CloudVariableDeletedEvent {
+public class CloudVariableDeletedEventImpl extends CloudVariableEventImpl implements CloudVariableDeleted {
 
     public CloudVariableDeletedEventImpl() {
     }

File: activiti-api/activiti-cloud-common-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudVariableUpdatedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudVariableUpdatedEvent;
+import org.activiti.runtime.api.event.CloudVariableUpdated;
 import org.activiti.runtime.api.event.VariableEvent;
 import org.activiti.runtime.api.model.VariableInstance;
 
-public class CloudVariableUpdatedEventImpl extends CloudVariableEventImpl implements CloudVariableUpdatedEvent {
+public class CloudVariableUpdatedEventImpl extends CloudVariableEventImpl implements CloudVariableUpdated {
 
     public CloudVariableUpdatedEventImpl() {
     }

File: activiti-api/activiti-cloud-common-model-api/src/main/java/org/activiti/runtime/api/event/CloudVariableCreated.java
Patch:
@@ -16,6 +16,6 @@
 
 package org.activiti.runtime.api.event;
 
-public interface CloudVariableDeletedEvent extends CloudVariableEvent {
+public interface CloudVariableCreated extends CloudVariableEvent {
 
 }

File: activiti-api/activiti-cloud-common-model-api/src/main/java/org/activiti/runtime/api/event/CloudVariableDeleted.java
Patch:
@@ -16,6 +16,6 @@
 
 package org.activiti.runtime.api.event;
 
-public interface CloudVariableUpdatedEvent extends CloudVariableEvent {
+public interface CloudVariableDeleted extends CloudVariableEvent {
 
 }

File: activiti-api/activiti-cloud-common-model-api/src/main/java/org/activiti/runtime/api/event/CloudVariableUpdated.java
Patch:
@@ -16,6 +16,6 @@
 
 package org.activiti.runtime.api.event;
 
-public interface CloudProcessCreatedEvent extends CloudProcessRuntimeEvent {
+public interface CloudVariableUpdated extends CloudVariableEvent {
 
 }

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudBPMNActivityCancelledEventImpl.java
Patch:
@@ -17,10 +17,10 @@
 package org.activiti.runtime.api.event.impl;
 
 import org.activiti.runtime.api.event.BPMNActivityEvent;
-import org.activiti.runtime.api.event.CloudBPMNActivityCancelledEvent;
+import org.activiti.runtime.api.event.CloudBPMNActivityCancelled;
 import org.activiti.runtime.api.model.BPMNActivity;
 
-public class CloudBPMNActivityCancelledEventImpl extends CloudBPMNActivityEventImpl implements CloudBPMNActivityCancelledEvent {
+public class CloudBPMNActivityCancelledEventImpl extends CloudBPMNActivityEventImpl implements CloudBPMNActivityCancelled {
 
     private String cause;
 

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudBPMNActivityCompletedEventImpl.java
Patch:
@@ -17,10 +17,10 @@
 package org.activiti.runtime.api.event.impl;
 
 import org.activiti.runtime.api.event.BPMNActivityEvent;
-import org.activiti.runtime.api.event.CloudBPMNActivityCompletedEvent;
+import org.activiti.runtime.api.event.CloudBPMNActivityCompleted;
 import org.activiti.runtime.api.model.BPMNActivity;
 
-public class CloudBPMNActivityCompletedEventImpl extends CloudBPMNActivityEventImpl implements CloudBPMNActivityCompletedEvent {
+public class CloudBPMNActivityCompletedEventImpl extends CloudBPMNActivityEventImpl implements CloudBPMNActivityCompleted {
 
     public CloudBPMNActivityCompletedEventImpl() {
     }

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudBPMNActivityStartedEventImpl.java
Patch:
@@ -17,10 +17,10 @@
 package org.activiti.runtime.api.event.impl;
 
 import org.activiti.runtime.api.event.BPMNActivityEvent;
-import org.activiti.runtime.api.event.CloudBPMNActivityStartedEvent;
+import org.activiti.runtime.api.event.CloudBPMNActivityStarted;
 import org.activiti.runtime.api.model.BPMNActivity;
 
-public class CloudBPMNActivityStartedEventImpl extends CloudBPMNActivityEventImpl implements CloudBPMNActivityStartedEvent {
+public class CloudBPMNActivityStartedEventImpl extends CloudBPMNActivityEventImpl implements CloudBPMNActivityStarted {
 
 
     public CloudBPMNActivityStartedEventImpl() {

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudProcessCancelledEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudProcessCancelledEvent;
+import org.activiti.runtime.api.event.CloudProcessCancelled;
 import org.activiti.runtime.api.event.ProcessRuntimeEvent;
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public class CloudProcessCancelledEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessCancelledEvent {
+public class CloudProcessCancelledEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessCancelled {
 
     private String cause;
 

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudProcessCompletedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudProcessCompletedEvent;
+import org.activiti.runtime.api.event.CloudProcessCompleted;
 import org.activiti.runtime.api.event.ProcessRuntimeEvent;
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public class CloudProcessCompletedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessCompletedEvent {
+public class CloudProcessCompletedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessCompleted {
 
     public CloudProcessCompletedEventImpl() {
     }

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudProcessCreatedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudProcessCreatedEvent;
+import org.activiti.runtime.api.event.CloudProcessCreated;
 import org.activiti.runtime.api.event.ProcessRuntimeEvent;
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public class CloudProcessCreatedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessCreatedEvent {
+public class CloudProcessCreatedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessCreated {
 
     public CloudProcessCreatedEventImpl() {
     }

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudProcessResumedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudProcessResumedEvent;
+import org.activiti.runtime.api.event.CloudProcessResumed;
 import org.activiti.runtime.api.event.ProcessRuntimeEvent;
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public class CloudProcessResumedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessResumedEvent {
+public class CloudProcessResumedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessResumed {
 
     public CloudProcessResumedEventImpl() {
     }

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudProcessStartedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudProcessStartedEvent;
+import org.activiti.runtime.api.event.CloudProcessStarted;
 import org.activiti.runtime.api.event.ProcessRuntimeEvent;
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public class CloudProcessStartedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessStartedEvent {
+public class CloudProcessStartedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessStarted {
 
     private String nestedProcessDefinitionId;
     private String nestedProcessInstanceId;

File: activiti-api/activiti-cloud-process-model-api-impl/src/main/java/org/activiti/runtime/api/event/impl/CloudProcessSuspendedEventImpl.java
Patch:
@@ -16,11 +16,11 @@
 
 package org.activiti.runtime.api.event.impl;
 
-import org.activiti.runtime.api.event.CloudProcessSuspendedEvent;
+import org.activiti.runtime.api.event.CloudProcessSuspended;
 import org.activiti.runtime.api.event.ProcessRuntimeEvent;
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public class CloudProcessSuspendedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessSuspendedEvent {
+public class CloudProcessSuspendedEventImpl extends CloudRuntimeEventImpl<ProcessInstance, ProcessRuntimeEvent.ProcessEvents> implements CloudProcessSuspended {
 
     public CloudProcessSuspendedEventImpl() {
     }

File: activiti-api/activiti-cloud-process-model-api/src/main/java/org/activiti/runtime/api/event/CloudBPMNActivityCancelled.java
Patch:
@@ -16,6 +16,6 @@
 
 package org.activiti.runtime.api.event;
 
-public interface CloudBPMNActivityCancelledEvent extends CloudBPMNActivityEvent {
+public interface CloudBPMNActivityCancelled extends CloudBPMNActivityEvent {
     String getCause();
 }

File: activiti-api/activiti-cloud-process-model-api/src/main/java/org/activiti/runtime/api/event/CloudProcessCancelled.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public interface CloudProcessCancelledEvent extends CloudProcessRuntimeEvent,
-                                                    ProcessRuntimeEvent<ProcessInstance> {
+public interface CloudProcessCancelled extends CloudProcessRuntimeEvent,
+                                               ProcessRuntimeEvent<ProcessInstance> {
     String getCause();
 }

File: activiti-api/activiti-cloud-process-model-api/src/main/java/org/activiti/runtime/api/event/CloudProcessCreated.java
Patch:
@@ -16,6 +16,6 @@
 
 package org.activiti.runtime.api.event;
 
-public interface CloudVariableCreatedEvent extends CloudVariableEvent {
+public interface CloudProcessCreated extends CloudProcessRuntimeEvent {
 
 }

File: activiti-api/activiti-cloud-process-model-api/src/main/java/org/activiti/runtime/api/event/CloudProcessResumed.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public interface CloudProcessResumedEvent extends CloudProcessRuntimeEvent,
-                                                  ProcessRuntimeEvent<ProcessInstance> {
+public interface CloudProcessResumed extends CloudProcessRuntimeEvent,
+                                             ProcessRuntimeEvent<ProcessInstance> {
 
 }

File: activiti-api/activiti-cloud-process-model-api/src/main/java/org/activiti/runtime/api/event/CloudProcessStarted.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public interface CloudProcessSuspendedEvent extends CloudProcessRuntimeEvent,
-                                                    ProcessRuntimeEvent<ProcessInstance> {
+public interface CloudProcessStarted extends CloudProcessRuntimeEvent,
+                                             ExtendedProcessRuntimeEvent<ProcessInstance> {
 
 }

File: activiti-api/activiti-cloud-process-model-api/src/main/java/org/activiti/runtime/api/event/CloudProcessSuspended.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.activiti.runtime.api.model.ProcessInstance;
 
-public interface CloudProcessStartedEvent extends CloudProcessRuntimeEvent,
-                                                  ExtendedProcessRuntimeEvent<ProcessInstance> {
+public interface CloudProcessSuspended extends CloudProcessRuntimeEvent,
+                                               ProcessRuntimeEvent<ProcessInstance> {
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveTaskCmd.java
Patch:
@@ -59,6 +59,9 @@ public Void execute(CommandContext commandContext) {
 
       if (commandContext.getEventDispatcher().isEnabled()) {
         commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TASK_CREATED, task));
+        if (task.getAssignee() != null) {
+          commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TASK_ASSIGNED, task));
+        }
       }
 
     } else {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManager.java
Patch:
@@ -24,6 +24,8 @@ public interface TaskEntityManager extends EntityManager<TaskEntity> {
   
   void changeTaskAssignee(TaskEntity taskEntity, String assignee);
   
+  void changeTaskAssigneeNoEvents(TaskEntity taskEntity, String assignee);
+  
   void changeTaskOwner(TaskEntity taskEntity, String owner);
 
   List<TaskEntity> findTasksByExecutionId(String executionId);

File: activiti-bpmn-layout/src/main/java/org/activiti/bpmn/BpmnAutoLayout.java
Patch:
@@ -268,7 +268,7 @@ protected void handleSequenceFlow() {
     boundaryEdgeStyle.put(mxConstants.STYLE_EXIT_Y, 1.0);
     boundaryEdgeStyle.put(mxConstants.STYLE_ENTRY_X, 0.5);
     boundaryEdgeStyle.put(mxConstants.STYLE_ENTRY_Y, 1.0);
-    boundaryEdgeStyle.put(mxConstants.STYLE_EDGE, mxEdgeStyle.orthConnector);
+    boundaryEdgeStyle.put(mxConstants.STYLE_EDGE, mxEdgeStyle.OrthConnector);
     graph.getStylesheet().putCellStyle(STYLE_BOUNDARY_SEQUENCEFLOW, boundaryEdgeStyle);
 
     for (SequenceFlow sequenceFlow : sequenceFlows.values()) {
@@ -306,7 +306,7 @@ protected void handleAssociations() {
     boundaryEdgeStyle.put(mxConstants.STYLE_EXIT_Y, 1.0);
     boundaryEdgeStyle.put(mxConstants.STYLE_ENTRY_X, 0.5);
     boundaryEdgeStyle.put(mxConstants.STYLE_ENTRY_Y, 1.0);
-    boundaryEdgeStyle.put(mxConstants.STYLE_EDGE, mxEdgeStyle.orthConnector);
+    boundaryEdgeStyle.put(mxConstants.STYLE_EDGE, mxEdgeStyle.OrthConnector);
     graph.getStylesheet().putCellStyle(STYLE_BOUNDARY_SEQUENCEFLOW, boundaryEdgeStyle);
 
     for (Association association : associations.values()) {

File: activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/FlowElementsContainer.java
Patch:
@@ -13,13 +13,16 @@
 package org.activiti.bpmn.model;
 
 import java.util.Collection;
+import java.util.Map;
 
 public interface FlowElementsContainer {
 
   FlowElement getFlowElement(String id);
 
   Collection<FlowElement> getFlowElements();
 
+  Map<String, FlowElement> getFlowElementMap();
+
   void addFlowElement(FlowElement element);
   
   void addFlowElementToMap(FlowElement element);

File: activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Process.java
Patch:
@@ -204,6 +204,9 @@ public void addFlowElement(FlowElement element) {
     if (StringUtils.isNotEmpty(element.getId())) {
       flowElementMap.put(element.getId(), element);
     }
+    if(element instanceof FlowElementsContainer){
+      flowElementMap.putAll(((FlowElementsContainer) element).getFlowElementMap());
+    }
   }
   
   public void addFlowElementToMap(FlowElement element) {

File: activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/SubProcess.java
Patch:
@@ -42,6 +42,9 @@ public Collection<FlowElement> getFlowElements() {
   public void addFlowElement(FlowElement element) {
     flowElementList.add(element);
     element.setParentContainer(this);
+    if(element instanceof FlowElementsContainer){
+      flowElementMap.putAll(((FlowElementsContainer) element).getFlowElementMap());
+    }
     if (StringUtils.isNotEmpty(element.getId())) {
       flowElementMap.put(element.getId(), element);
       if (getParentContainer() != null) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/integration/IntegrationContextDataManager.java
Patch:
@@ -19,8 +19,10 @@
 import org.activiti.engine.impl.persistence.entity.data.DataManager;
 import org.activiti.engine.impl.persistence.entity.integration.IntegrationContextEntity;
 
+import java.util.List;
+
 public interface IntegrationContextDataManager extends DataManager<IntegrationContextEntity> {
 
-    IntegrationContextEntity findIntegrationContextByExecutionId(final String executionId);
+    List<IntegrationContextEntity> findIntegrationContextByExecutionId(final String executionId);
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/integration/IntegrationContextManager.java
Patch:
@@ -18,8 +18,10 @@
 
 import org.activiti.engine.impl.persistence.entity.EntityManager;
 
+import java.util.List;
+
 public interface IntegrationContextManager extends EntityManager<IntegrationContextEntity> {
 
-    IntegrationContextEntity findIntegrationContextByExecutionId(final String executionId);
+    List<IntegrationContextEntity> findIntegrationContextByExecutionId(final String executionId);
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/integration/IntegrationContextManagerImpl.java
Patch:
@@ -21,6 +21,8 @@
 import org.activiti.engine.impl.persistence.entity.data.DataManager;
 import org.activiti.engine.impl.persistence.entity.data.integration.IntegrationContextDataManager;
 
+import java.util.List;
+
 public class IntegrationContextManagerImpl extends AbstractEntityManager<IntegrationContextEntity> implements IntegrationContextManager {
 
     private final IntegrationContextDataManager dataManager;
@@ -36,7 +38,7 @@ protected DataManager<IntegrationContextEntity> getDataManager() {
     }
 
     @Override
-    public IntegrationContextEntity findIntegrationContextByExecutionId(String executionId) {
+    public List<IntegrationContextEntity> findIntegrationContextByExecutionId(String executionId) {
         return dataManager.findIntegrationContextByExecutionId(executionId);
     }
 

File: activiti-engine/src/main/java/org/activiti/engine/integration/IntegrationContextService.java
Patch:
@@ -18,9 +18,11 @@
 
 import org.activiti.engine.impl.persistence.entity.integration.IntegrationContextEntity;
 
+import java.util.List;
+
 public interface IntegrationContextService {
 
-    IntegrationContextEntity findIntegrationContextByExecutionId(String executionId);
+    List<IntegrationContextEntity> findIntegrationContextByExecutionId(String executionId);
 
     void deleteIntegrationContext(IntegrationContextEntity integrationContextEntity);
 

File: activiti-image-generator/src/test/java/org/activiti/engine/test/image/ProcessDiagramGeneratorTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.image.ProcessDiagramGenerator;
 import org.activiti.image.impl.DefaultProcessDiagramGenerator;
-import org.apache.batik.dom.svg.SAXSVGDocumentFactory;
-import org.apache.batik.dom.svg.SVGOMDocument;
+import org.apache.batik.anim.dom.SAXSVGDocumentFactory;
+import org.apache.batik.anim.dom.SVGOMDocument;
 import org.apache.batik.util.XMLResourceDescriptor;
 
 public class ProcessDiagramGeneratorTest extends PluggableActivitiTestCase {

File: activiti-spring/src/test/java/org/activiti/spring/test/autodeployment/SpringAutoDeployTest.java
Patch:
@@ -95,7 +95,7 @@ public void testResourceRedeploymentAfterProcessDefinitionChange() throws Except
         createAppContext(CTX_PATH);
         assertEquals(1,
                      repositoryService.createDeploymentQuery().count());
-        ((AbstractXmlApplicationContext) applicationContext).destroy();
+        ((AbstractXmlApplicationContext) applicationContext).close();
 
         String filePath = "org/activiti/spring/test/autodeployment/autodeploy.a.bpmn20.xml";
         String originalBpmnFileContent = IoUtil.readFileAsString(filePath);

File: activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContextInterceptor.java
Patch:
@@ -62,7 +62,7 @@ public <T> T execute(CommandConfig config, Command<T> command) {
 
       return next.execute(config, command);
 
-    } catch (Exception e) {
+    } catch (Throwable e) {
 
       context.exception(e);
       

File: activiti-engine/src/main/java/org/activiti/engine/integration/IntegrationContextService.java
Patch:
@@ -22,4 +22,6 @@ public interface IntegrationContextService {
 
     IntegrationContextEntity findIntegrationContextByExecutionId(String executionId);
 
+    void deleteIntegrationContext(IntegrationContextEntity integrationContextEntity);
+
 }

File: activiti-engine/src/test/java/org/activiti/engine/impl/cmd/integration/RetrieveIntegrationContextCmdTest.java
Patch:
@@ -50,11 +50,11 @@ public void setUp() throws Exception {
     @Test
     public void executeShouldReturnResultOfIntegrationContextManager() throws Exception {
         //given
-        String correlationId = "corId";
-        RetrieveIntegrationContextCmd command = new RetrieveIntegrationContextCmd(correlationId);
+        String executionId = "executionId";
+        RetrieveIntegrationContextCmd command = new RetrieveIntegrationContextCmd(executionId);
 
         IntegrationContextEntity contextEntity = mock(IntegrationContextEntity.class);
-        given(integrationContextManager.findIntegrationContextByExecutionId(correlationId)).willReturn(contextEntity);
+        given(integrationContextManager.findIntegrationContextByExecutionId(executionId)).willReturn(contextEntity);
 
         //when
         IntegrationContextEntity executeResult = command.execute(commandContext);

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ServiceTaskXMLConverter.java
Patch:
@@ -57,6 +57,8 @@ protected BaseElement convertXMLToElement(XMLStreamReader xtr, BpmnModel model)
     } else if ("##WebService".equals(xtr.getAttributeValue(null, ATTRIBUTE_TASK_IMPLEMENTATION))) {
       serviceTask.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE);
       serviceTask.setOperationRef(parseOperationRef(xtr.getAttributeValue(null, ATTRIBUTE_TASK_OPERATION_REF), model));
+    } else {
+      serviceTask.setImplementation(xtr.getAttributeValue(null, ATTRIBUTE_TASK_IMPLEMENTATION));
     }
 
     serviceTask.setResultVariableName(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_SERVICE_RESULTVARIABLE));

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/ActivityBehaviorFactory.java
Patch:
@@ -120,6 +120,8 @@ public interface ActivityBehaviorFactory {
 
   public abstract ServiceTaskDelegateExpressionActivityBehavior createServiceTaskDelegateExpressionActivityBehavior(ServiceTask serviceTask);
 
+  public abstract ServiceTaskDelegateExpressionActivityBehavior createDefaultServiceTaskBehavior(ServiceTask serviceTask);
+
   public abstract ServiceTaskExpressionActivityBehavior createServiceTaskExpressionActivityBehavior(ServiceTask serviceTask);
 
   public abstract WebServiceActivityBehavior createWebServiceActivityBehavior(ServiceTask serviceTask);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/ServiceTaskParseHandler.java
Patch:
@@ -75,7 +75,8 @@ protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {
       serviceTask.setBehavior(webServiceActivityBehavior);
       
     } else {
-      logger.warn("One of the attributes 'class', 'delegateExpression', 'type', 'operation', or 'expression' is mandatory on serviceTask " + serviceTask.getId());
+      logger.debug("Using default behavior for service task '" + serviceTask.getId() + "'");
+      serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDefaultServiceTaskBehavior(serviceTask));
     }
 
   }

File: activiti-engine/src/test/java/org/activiti/standalone/validation/DefaultProcessValidatorTest.java
Patch:
@@ -59,7 +59,7 @@ public void verifyValidation() throws Exception {
     Assert.assertNotNull(bpmnModel);
 
     List<ValidationError> allErrors = processValidator.validate(bpmnModel);
-    Assert.assertEquals(65, allErrors.size());
+    Assert.assertEquals(64, allErrors.size());
 
     String setName = ValidatorSetNames.ACTIVITI_EXECUTABLE_PROCESS; // shortening
                                                                     // it a
@@ -122,8 +122,6 @@ public void verifyValidation() throws Exception {
     assertCommonProblemFieldForActivity(problems.get(0));
     problems = findErrors(allErrors, setName, Problems.SERVICE_TASK_INVALID_TYPE, 1);
     assertCommonProblemFieldForActivity(problems.get(0));
-    problems = findErrors(allErrors, setName, Problems.SERVICE_TASK_MISSING_IMPLEMENTATION, 1);
-    assertCommonProblemFieldForActivity(problems.get(0));
     problems = findErrors(allErrors, setName, Problems.SERVICE_TASK_WEBSERVICE_INVALID_OPERATION_REF, 1);
     assertCommonProblemFieldForActivity(problems.get(0));
 

File: activiti-services/activiti-services-query/activiti-services-query-repo/src/main/java/org/activiti/services/query/app/repository/ProcessInstanceRepository.java
Patch:
@@ -29,7 +29,7 @@
         collectionResourceDescription = @Description("Collection of process instance resources"),
         collectionResourceRel = "process-instances",
         itemResourceRel = "process-instance")
-public interface ProcessInstanceRepository extends RestResourceQueryRepository<ProcessInstance, Long>, QuerydslPredicateExecutor<ProcessInstance>, QuerydslBinderCustomizer<QProcessInstance> {
+public interface ProcessInstanceRepository extends RestResourceQueryRepository<ProcessInstance, String>, QuerydslPredicateExecutor<ProcessInstance>, QuerydslBinderCustomizer<QProcessInstance> {
 
     @Override
     default void customize(QuerydslBindings bindings,

File: activiti-services/activiti-services-query/activiti-services-query-repo/src/test/java/org/activiti/services/query/app/repository/EntityFinderTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() throws Exception {
     @Test
     public void findByIdShouldReturnResultWhenIsPresent() throws Exception {
         //given
-        long processInstanceId = 5L;
+        String processInstanceId = "5";
         ProcessInstance processInstance = mock(ProcessInstance.class);
         given(repository.findById(processInstanceId)).willReturn(Optional.of(processInstance));
 
@@ -68,7 +68,7 @@ public void findByIdShouldReturnResultWhenIsPresent() throws Exception {
     @Test
     public void findByIdShouldThrowExceptionWhenNotPresent() throws Exception {
         //given
-        long processInstanceId = 5L;
+        String processInstanceId = "5";
         given(repository.findById(processInstanceId)).willReturn(Optional.empty());
 
         //then

File: activiti-services/activiti-services-query/activiti-services-query-rest/src/main/java/org/activiti/services/query/events/handlers/ProcessCompletedEventHandler.java
Patch:
@@ -39,7 +39,7 @@ public ProcessCompletedEventHandler(ProcessInstanceRepository processInstanceRep
 
     @Override
     public void handle(ProcessEngineEvent completedEvent) {
-        long processInstanceId = Long.parseLong(completedEvent.getProcessInstanceId());
+        String processInstanceId = completedEvent.getProcessInstanceId();
         Optional<ProcessInstance> findResult = processInstanceRepository.findById(processInstanceId);
         if (findResult.isPresent()) {
             ProcessInstance processInstance = findResult.get();

File: activiti-services/activiti-services-query/activiti-services-query-rest/src/test/java/org/activiti/services/query/events/handlers/ProcessCompletedEventHandlerTest.java
Patch:
@@ -63,7 +63,7 @@ public void handleShouldUpdateCurrentProcessInstanceStateToCompleted() throws Ex
                                                                                 new ProcessInstance());
 
         ProcessInstance currentProcessInstance = mock(ProcessInstance.class);
-        given(processInstanceRepository.findById(200L)).willReturn(Optional.of(currentProcessInstance));
+        given(processInstanceRepository.findById("200")).willReturn(Optional.of(currentProcessInstance));
 
         //when
         handler.handle(event);
@@ -84,7 +84,7 @@ public void handleShouldThrowExceptionWhenRelatedProcessInstanceIsNotFound() thr
                                                                                 "200",
                                                                                 new ProcessInstance());
 
-        given(processInstanceRepository.findById(200L)).willReturn(Optional.empty());
+        given(processInstanceRepository.findById("200")).willReturn(Optional.empty());
 
         //then
         expectedException.expect(ActivitiException.class);

File: activiti-services/activiti-services-query/activiti-services-query-rest/src/main/java/org/activiti/services/query/events/handlers/ProcessStartedHandler.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.Date;
 
 import org.activiti.services.api.events.ProcessEngineEvent;
-import org.activiti.services.query.model.ProcessInstance;
 import org.activiti.services.query.app.repository.ProcessInstanceRepository;
 import org.activiti.services.query.events.ProcessStartedEvent;
+import org.activiti.services.query.model.ProcessInstance;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -44,7 +44,7 @@ public void handle(ProcessEngineEvent event) {
         LOGGER.debug("Handling start of process Instance " + event.getProcessInstanceId());
 
         processInstanceRepository.save(
-                new ProcessInstance(Long.parseLong(event.getProcessInstanceId()),
+                new ProcessInstance(event.getProcessInstanceId(),
                                     event.getProcessDefinitionId(),
                                     "RUNNING",
                                     new Date(event.getTimestamp())));

File: activiti-services/activiti-services-audit/activiti-services-audit-jpa/src/main/java/org/activiti/services/audit/events/BaseActivityEventEntity.java
Patch:
@@ -16,6 +16,9 @@
 
 package org.activiti.services.audit.events;
 
+import javax.persistence.Entity;
+
+@Entity
 public abstract class BaseActivityEventEntity extends ProcessEngineEventEntity {
 
     private String activityId;

File: activiti-services/activiti-services-query/activiti-services-query-rest/src/main/java/org/activiti/services/query/events/AbstractProcessEngineEvent.java
Patch:
@@ -27,7 +27,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.PROPERTY,
-        property = "eventType")
+        property = "eventType",
+        defaultImpl = IgnoredProcessEngineEvent.class)
 @JsonSubTypes({
         @JsonSubTypes.Type(value = ProcessStartedEvent.class, name = "ProcessStartedEvent"),
         @JsonSubTypes.Type(value = ProcessCompletedEvent.class, name = "ProcessCompletedEvent"),

File: activiti-services/activiti-services-events/src/main/java/org/activiti/services/events/AbstractProcessEngineEvent.java
Patch:
@@ -73,9 +73,6 @@ public String getProcessInstanceId() {
         return processInstanceId;
     }
 
-    @Override
-    public abstract String getEventType();
-
     @Override
     public Long getTimestamp() {
         return timestamp;

File: activiti-services/activiti-services-events/src/test/java/org/activiti/services/events/converter/EventConverterContextIT.java
Patch:
@@ -34,7 +34,7 @@
 import static org.mockito.Mockito.*;
 
 @RunWith(SpringRunner.class)
-@ContextConfiguration(classes = EventConverterContextIT.SpringConfig.class)
+@ContextConfiguration(classes = EventConverterContextIT.EventConverterContextConfig.class)
 @TestPropertySource("classpath:test-application.properties")
 public class EventConverterContextIT {
 
@@ -43,7 +43,7 @@ public class EventConverterContextIT {
 
     @Configuration
     @ComponentScan({"org.activiti.services.events.converter", "org.activiti.services.core.model.converter"})
-    public static class SpringConfig {
+    public static class EventConverterContextConfig {
 
     }
 

File: activiti-spring-boot/spring-boot-samples/spring-boot-sample-hal-rest-api/src/main/java/org/activiti/SampleApplication.java
Patch:
@@ -11,10 +11,10 @@
 @SpringBootApplication
 @EnableBinding(ProcessEngineChannels.class)
 @ComponentScan("org.activiti")
-public class Application {
+public class SampleApplication {
 
 	public static void main(String[] args) {
-		SpringApplication.run(Application.class, args);
+		SpringApplication.run(SampleApplication.class, args);
 	}
 
 }
\ No newline at end of file

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/util/BpmnXMLUtil.java
Patch:
@@ -330,7 +330,7 @@ public static String convertToDelimitedString(List<String> stringList) {
    * 
    * @param xtr
    * @param element
-   * @param blackList
+   * @param blackLists
    */
   public static void addCustomAttributes(XMLStreamReader xtr, BaseElement element, List<ExtensionAttribute>... blackLists) {
     for (int i = 0; i < xtr.getAttributeCount(); i++) {
@@ -358,7 +358,7 @@ public static void writeCustomAttributes(Collection<List<ExtensionAttribute>> at
    * 
    * @param attributes
    * @param xtw
-   * @param blackList
+   * @param blackLists
    */
   public static void writeCustomAttributes(Collection<List<ExtensionAttribute>> attributes, XMLStreamWriter xtw, Map<String, String> namespaceMap, List<ExtensionAttribute>... blackLists)
       throws XMLStreamException {

File: activiti-bpmn-layout/src/main/java/org/activiti/bpmn/BPMNLayout.java
Patch:
@@ -98,7 +98,7 @@ public mxGraph getGraph() {
   }
 
   /**
-   * Returns a boolean indicating if the given <mxCell> should be ignored as a vertex. This returns true if the cell has no connections.
+   * Returns a boolean indicating if the given <em>mxCell</em> should be ignored as a vertex. This returns true if the cell has no connections.
    * 
    * @param vertex
    *          Object that represents the vertex to be tested.

File: activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java
Patch:
@@ -80,7 +80,7 @@
 /**
  * Represents a canvas on which BPMN 2.0 constructs can be drawn.
  * <p>
- * @see org.activiti.engine.impl.bpmn.diagram.DefaultProcessDiagramGenerator
+ * @see org.activiti.image.impl.DefaultProcessDiagramGenerator
  */
 public class DefaultProcessDiagramCanvas {
 
@@ -311,7 +311,7 @@ public void initialize() {
     /**
      * Generates an image of what currently is drawn on the canvas.
      * <p>
-     * Throws an {@link ActivitiException} when {@link #close()} is already
+     * Throws an {@link ActivitiImageException} when {@link #close()} is already
      * called.
      */
     public InputStream generateImage() {

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-basic/src/main/java/org/activiti/spring/boot/EndpointAutoConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * The idea behind this module is that Spring Security could
- * talk to the {@link org.activiti.engine.IdentityService}
+ * talk to the org.activiti.engine.IdentityService
  * as required.
  */
 @Configuration

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-basic/src/main/java/org/activiti/spring/integration/Activiti.java
Patch:
@@ -43,7 +43,7 @@ public static IntegrationActivityBehavior inboundGatewayActivityBehavior(Activit
     /**
      * Any message that enters this {@link org.springframework.messaging.MessageHandler}
      * containing a {@code executionId} parameter will trigger a
-     * {@link org.activiti.engine.RuntimeService#signal(String)}.
+     * {@link org.activiti.engine.RuntimeService#signalEventReceived(String)}.
      */
     public static MessageHandler signallingMessageHandler(final ProcessEngine processEngine) {
         return new MessageHandler() {

File: activiti-spring/src/main/java/org/activiti/spring/SpringAsyncExecutor.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * <p>
- * This is a spring based implementation of the {@link JobExecutor} using spring abstraction {@link TaskExecutor} for performing background task execution.
+ * This is a spring based implementation of the Job Executor using spring abstraction {@link TaskExecutor} for performing background task execution.
  * </p>
  * <p>
  * The idea behind this implementation is to externalize the configuration of the task executor, so it can leverage to Application servers controller thread pools, for example using the commonj API.
@@ -62,9 +62,9 @@ public SpringRejectedJobsHandler getRejectedJobsHandler() {
   }
 
   /**
-   * Required spring injected {@link RejectedJobsHandler} implementation that will be used when jobs were rejected by the task executor.
+   * Required spring injected {@link SpringRejectedJobsHandler} implementation that will be used when jobs were rejected by the task executor.
    * 
-   * @param taskExecutor
+   * @param rejectedJobsHandler
    */
   public void setRejectedJobsHandler(SpringRejectedJobsHandler rejectedJobsHandler) {
     this.rejectedJobsHandler = rejectedJobsHandler;

File: activiti-spring/src/main/java/org/activiti/spring/autodeployment/AutoDeploymentStrategy.java
Patch:
@@ -38,7 +38,7 @@ public interface AutoDeploymentStrategy {
   /**
    * Performs deployment for the provided resources, using the provided name as a hint and the provided {@link RepositoryService} to perform deployment(s).
    * 
-   * @param deploymentName
+   * @param deploymentNameHint
    *          the hint for the name of deployment(s) performed
    * @param resources
    *          the resources to be deployed

File: activiti-spring/src/main/java/org/activiti/spring/impl/test/CleanTestExecutionListener.java
Patch:
@@ -11,9 +11,9 @@
  * Use this as follows in a Spring test:
  * 
 
- * @RunWith(SpringJUnit4ClassRunner.class)
- * @TestExecutionListeners(CleanTestExecutionListener.class)
- * @ContextConfiguration("...")
+ * {@literal @}RunWith(SpringJUnit4ClassRunner.class)
+ * {@literal @}TestExecutionListeners(CleanTestExecutionListener.class)
+ * {@literal @}ContextConfiguration("...")
  */
 public class CleanTestExecutionListener extends AbstractTestExecutionListener {
 

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/runtime/ProcessInstanceIT.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() throws Exception{
         assertThat(processDefinitions.getStatusCode()).isEqualTo(HttpStatus.OK);
 
 
-        assertThat(processDefinitions.getBody().getContent()).hasSize(4);
+        assertThat(processDefinitions.getBody().getContent()).isNotNull();
         for (ProcessDefinition pd : processDefinitions.getBody().getContent()) {
             processDefinitionIds.put(pd.getName(), pd.getId());
         }

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/runtime/SignalIT.java
Patch:
@@ -67,7 +67,7 @@ public class SignalIT extends KeycloakEnabledBaseTestIT {
     public void setUp() throws Exception {
         super.setUp();
         ResponseEntity<PagedResources<ProcessDefinition>> processDefinitions = getProcessDefinitions();
-        assertThat(processDefinitions.getBody().getContent()).hasSize(4);
+        assertThat(processDefinitions.getBody().getContent()).isNotNull();
         for (ProcessDefinition pd : processDefinitions.getBody().getContent()) {
             processDefinitionIds.put(pd.getName(), pd.getId());
         }

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/runtime/TasksIT.java
Patch:
@@ -79,7 +79,7 @@ public void setUp() throws Exception{
         ResponseEntity<PagedResources<ProcessDefinition>> processDefinitions = getProcessDefinitions();
         assertThat(processDefinitions.getStatusCode()).isEqualTo(HttpStatus.OK);
 
-        assertThat(processDefinitions.getBody().getContent()).hasSize(4); //if a new definition is added then this is expected to be increased
+        assertThat(processDefinitions.getBody().getContent()).isNotNull();
         for(ProcessDefinition pd : processDefinitions.getBody().getContent()){
             processDefinitionIds.put(pd.getName(), pd.getId());
         }

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/ProcessInstance.java
Patch:
@@ -25,9 +25,9 @@
 public class ProcessInstance {
 
     public enum ProcessInstanceStatus {
-        RUNNING,
-        SUSPENDED,
-        COMPLETED
+                                       RUNNING,
+                                       SUSPENDED,
+                                       COMPLETED
     }
 
     private String id;

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/Task.java
Patch:
@@ -25,7 +25,7 @@
 public class Task {
 
     public enum TaskStatus {
-        CREATED, ASSIGNED, SUSPENDED
+                            CREATED, ASSIGNED, SUSPENDED
     }
 
     private String id;

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/commands/CompleteTaskCmd.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Map;
 
-public class CompleteTaskCmd implements Command{
+public class CompleteTaskCmd implements Command {
 
     private Map<String, Object> outputVariables;
 

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/AuthenticationWrapper.java
Patch:
@@ -23,11 +23,11 @@
  */
 public class AuthenticationWrapper {
 
-    public void setAuthenticatedUserId(String user){
+    public void setAuthenticatedUserId(String user) {
         Authentication.setAuthenticatedUserId(user);
     }
 
-    public String getAuthenticatedUserId(){
+    public String getAuthenticatedUserId() {
         return Authentication.getAuthenticatedUserId();
     }
 }

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/sort/ProcessDefinitionSortApplier.java
Patch:
@@ -35,6 +35,7 @@ public ProcessDefinitionSortApplier() {
         orderByProperties.put("name", ProcessDefinitionQueryProperty.PROCESS_DEFINITION_NAME);
     }
 
+    @Override
     protected void applyDefaultSort(ProcessDefinitionQuery query) {
         query.orderByProcessDefinitionId().asc();
     }

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/sort/SortApplier.java
Patch:
@@ -18,7 +18,7 @@
 import org.activiti.engine.query.Query;
 import org.springframework.data.domain.Pageable;
 
-public interface SortApplier<T extends Query<?,?>> {
+public interface SortApplier<T extends Query<?, ?>> {
 
     void applySort(T query, Pageable pageable);
 

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/sort/TaskSortApplier.java
Patch:
@@ -31,7 +31,7 @@ public class TaskSortApplier extends BaseSortApplier<TaskQuery> {
     private Map<String, TaskQueryProperty> orderByProperties = new HashMap<>();
 
     public TaskSortApplier() {
-        orderByProperties.put("id" , TaskQueryProperty.TASK_ID);
+        orderByProperties.put("id", TaskQueryProperty.TASK_ID);
         orderByProperties.put("name", TaskQueryProperty.NAME);
         orderByProperties.put("assignee", TaskQueryProperty.ASSIGNEE);
     }

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/controllers/ProcessInstanceController.java
Patch:
@@ -68,8 +68,7 @@ public Resource<ProcessInstance> getProcessInstanceById(@PathVariable String pro
     }
 
     @RequestMapping(value = "/signal")
-    public ResponseEntity<Void> sendSignal(@RequestBody
-                                                   SignalProcessInstancesCmd cmd) {
+    public ResponseEntity<Void> sendSignal(@RequestBody SignalProcessInstancesCmd cmd) {
         processEngine.signal(cmd);
         return new ResponseEntity<>(HttpStatus.OK);
     }

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/controllers/ProcessInstanceVariableController.java
Patch:
@@ -39,7 +39,8 @@ public class ProcessInstanceVariableController {
     private final ProcessVariableResourceAssembler variableResourceBuilder;
 
     @Autowired
-    public ProcessInstanceVariableController(RuntimeService runtimeService, ProcessVariableResourceAssembler variableResourceBuilder) {
+    public ProcessInstanceVariableController(RuntimeService runtimeService,
+                                             ProcessVariableResourceAssembler variableResourceBuilder) {
         this.runtimeService = runtimeService;
         this.variableResourceBuilder = variableResourceBuilder;
     }

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/controllers/TaskController.java
Patch:
@@ -96,8 +96,7 @@ public Resource<Task> releaseTask(@PathVariable String taskId) {
 
     @RequestMapping(value = "/{taskId}/complete", method = RequestMethod.POST)
     public ResponseEntity<Void> completeTask(@PathVariable String taskId,
-                                             @RequestBody(required = false)
-                                                     CompleteTaskCmd completeTaskCmd) {
+                                             @RequestBody(required = false) CompleteTaskCmd completeTaskCmd) {
         Map<String, Object> inputVariables = null;
         if (completeTaskCmd != null) {
             inputVariables = completeTaskCmd.getOutputVariables();

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/resources/HomeResource.java
Patch:
@@ -2,7 +2,8 @@
 
 import org.springframework.hateoas.ResourceSupport;
 
-public class HomeResource extends ResourceSupport{
+public class HomeResource extends ResourceSupport {
+
     private String welcome = "Welcome to an instance of the Activiti Process Engine";
 
     public HomeResource() {

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/resources/assembler/ProcessInstanceResourceAssembler.java
Patch:
@@ -36,7 +36,8 @@ public ProcessInstanceResourceAssembler() {
 
     @Override
     public ProcessInstanceResource toResource(ProcessInstance processInstance) {
-        Link processInstancesRel = linkTo(methodOn(ProcessInstanceController.class).getProcessInstances(null, null)).withRel("processInstances");
+        Link processInstancesRel = linkTo(methodOn(ProcessInstanceController.class).getProcessInstances(null, null))
+                                                                                                                    .withRel("processInstances");
         Link selfLink = linkTo(methodOn(ProcessInstanceController.class).getProcessInstanceById(processInstance.getId())).withSelfRel();
         Link variablesLink = linkTo(methodOn(ProcessInstanceVariableController.class).getVariables(processInstance.getId())).withRel("variables");
         Link homeLink = linkTo(HomeController.class).withRel("home");

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/Application.java
Patch:
@@ -27,8 +27,8 @@
 @EnableBinding(ProcessEngineChannels.class)
 public class Application {
 
-	public static void main(String[] args) {
-		SpringApplication.run(Application.class, args);
-	}
+    public static void main(String[] args) {
+        SpringApplication.run(Application.class, args);
+    }
 
 }

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/cmdendpoint/CommandEndpointTest.java
Patch:
@@ -1,5 +1,4 @@
 
-
 /*
  * Copyright 2017 Alfresco and/or its affiliates.
  *

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/cmdendpoint/cmds/StartProcessInstanceCmd.java
Patch:
@@ -24,5 +24,4 @@ public Map<String, String> getVariables() {
         return variables;
     }
 
-
 }

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/ProcessDefinition.java
Patch:
@@ -13,7 +13,7 @@
  *
  */
 
-package org.activiti.client.model;
+package org.activiti.services.core.model;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
@@ -55,4 +55,4 @@ public String getDescription() {
     public int getVersion() {
         return version;
     }
-}
+}
\ No newline at end of file

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/ProcessInstanceVariables.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti.client.model;
+package org.activiti.services.core.model;
 
 import java.util.Map;
 

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/Task.java
Patch:
@@ -13,7 +13,7 @@
  *
  */
 
-package org.activiti.client.model;
+package org.activiti.services.core.model;
 
 import java.util.Date;
 
@@ -124,4 +124,4 @@ public String getStatus() {
     public String getParentTaskId() {
         return parentTaskId;
     }
-}
+}
\ No newline at end of file

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/commands/CompleteTaskCmd.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti.client.model.commands;
+package org.activiti.services.core.model.commands;
 
 import java.util.Map;
 

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/commands/StartProcessInstanceCmd.java
Patch:
@@ -13,11 +13,11 @@
  *
  */
 
-package org.activiti.client.model.commands;
+package org.activiti.services.core.model.commands;
 
 import java.util.Map;
 
-public class StartProcessInstanceCmd implements Command{
+public class StartProcessInstanceCmd implements Command {
 
     private String processDefinitionId;
     private Map<String, Object> variables;

File: activiti-services/activiti-services-core-model/src/main/java/org/activiti/services/core/model/converter/ProcessDefinitionConverter.java
Patch:
@@ -13,11 +13,11 @@
  *
  */
 
-package org.activiti.model.converter;
+package org.activiti.services.core.model.converter;
 
 import java.util.List;
 
-import org.activiti.client.model.ProcessDefinition;
+import org.activiti.services.core.model.ProcessDefinition;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/AuthenticationWrapper.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti.services;
+package org.activiti.services.core.pageable;
 
 import org.activiti.engine.impl.identity.Authentication;
 

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/PageRetriever.java
Patch:
@@ -13,12 +13,12 @@
  *
  */
 
-package org.activiti.services;
+package org.activiti.services.core.pageable;
 
 import java.util.List;
 
 import org.activiti.engine.query.Query;
-import org.activiti.model.converter.ModelConverter;
+import org.activiti.services.core.model.converter.ModelConverter;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageImpl;
 import org.springframework.data.domain.Pageable;

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/sort/BaseSortApplier.java
Patch:
@@ -13,7 +13,7 @@
  *
  */
 
-package org.activiti.services.sort;
+package org.activiti.services.core.pageable.sort;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.query.Query;

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/sort/SortApplier.java
Patch:
@@ -13,7 +13,7 @@
  *
  */
 
-package org.activiti.services.sort;
+package org.activiti.services.core.pageable.sort;
 
 import org.activiti.engine.query.Query;
 import org.springframework.data.domain.Pageable;

File: activiti-services/activiti-services-core/src/main/java/org/activiti/services/core/pageable/sort/TaskSortApplier.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti.services.sort;
+package org.activiti.services.core.pageable.sort;
 
 import java.util.HashMap;
 import java.util.Map;

File: activiti-services/activiti-services-identity-keycloak/src/test/java/org/activiti/services/identity/keycloak/KeycloakEnabledBaseTestIT.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti;
+package org.activiti.services.identity.keycloak;
 
 import org.junit.Before;
 import org.keycloak.admin.client.Keycloak;

File: activiti-services/activiti-services-identity-keycloak/src/test/java/org/activiti/services/identity/keycloak/TestConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.activiti;
+package org.activiti.services.identity.keycloak;
 
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -28,7 +28,6 @@
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 
 @Configuration
-@PropertySources({@PropertySource("classpath:application.properties"),@PropertySource("classpath:application-test.properties")})
 public class TestConfiguration {
 
     @Bean

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/controllers/HomeController.java
Patch:
@@ -13,9 +13,9 @@
  *
  */
 
-package org.activiti.controllers;
+package org.activiti.services.rest.controllers;
 
-import org.activiti.client.model.resources.HomeResource;
+import org.activiti.services.rest.resources.HomeResource;
 import org.springframework.hateoas.Resource;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/controllers/ProcessInstanceVariableController.java
Patch:
@@ -13,12 +13,12 @@
  *
  */
 
-package org.activiti.controllers;
+package org.activiti.services.rest.controllers;
 
 import java.util.Map;
 
-import org.activiti.client.model.ProcessInstanceVariables;
-import org.activiti.client.model.resources.assembler.ProcessVariableResourceAssembler;
+import org.activiti.services.core.model.ProcessInstanceVariables;
+import org.activiti.services.rest.resources.assembler.ProcessVariableResourceAssembler;
 import org.activiti.engine.RuntimeService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.hateoas.MediaTypes;

File: activiti-services/activiti-services-rest/src/main/java/org/activiti/services/rest/resources/HomeResource.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.client.model.resources;
+package org.activiti.services.rest.resources;
 
 import org.springframework.hateoas.ResourceSupport;
 

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter/src/test/java/org/activiti/runtime/ProcessVariablesIT.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.client.model.ProcessDefinition;
-import org.activiti.client.model.ProcessInstance;
 import org.activiti.definition.ProcessDefinitionIT;
+import org.activiti.services.core.model.ProcessDefinition;
+import org.activiti.services.core.model.ProcessInstance;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ConditionExpressionParser.java
Patch:
@@ -28,8 +28,9 @@ public String getElementName() {
   }
 
   public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
-    if (parentElement instanceof SequenceFlow == false)
+    if (!(parentElement instanceof SequenceFlow)) {
       return;
+    }
 
     ((SequenceFlow) parentElement).setConditionExpression(xtr.getElementText().trim());
   }

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/DataOutputAssociationParser.java
Patch:
@@ -31,9 +31,9 @@ public String getElementName() {
 
   public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
 
-    if (parentElement instanceof Activity == false)
+    if (!(parentElement instanceof Activity)) {
       return;
-
+    }
     DataAssociation dataAssociation = new DataAssociation();
     BpmnXMLUtil.addXMLLocation(dataAssociation, xtr);
     DataAssociationParser.parseDataAssociation(dataAssociation, getElementName(), xtr);

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/TerminateEventDefinitionParser.java
Patch:
@@ -32,7 +32,7 @@ public String getElementName() {
   }
 
   public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
-    if (parentElement instanceof EndEvent == false) {
+    if (!(parentElement instanceof EndEvent)) {
       return;
     }
 

File: activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/FieldExtensionExport.java
Patch:
@@ -31,7 +31,7 @@ public static boolean writeFieldExtensions(List<FieldExtension> fieldExtensionLi
 
         if (StringUtils.isNotEmpty(fieldExtension.getStringValue()) || StringUtils.isNotEmpty(fieldExtension.getExpression())) {
 
-          if (didWriteExtensionStartElement == false) {
+          if (!didWriteExtensionStartElement) {
             xtw.writeStartElement(ELEMENT_EXTENSIONS);
             didWriteExtensionStartElement = true;
           }

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryImpl.java
Patch:
@@ -1161,12 +1161,12 @@ protected void localize(HistoricTaskInstance task) {
         ObjectNode languageNode = Context.getLocalizationElementProperties(locale, task.getTaskDefinitionKey(), processDefinitionId, withLocalizationFallback);
         if (languageNode != null) {
           JsonNode languageNameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);
-          if (languageNameNode != null && languageNameNode.isNull() == false) {
+          if (languageNameNode != null && !languageNameNode.isNull()) {
             taskEntity.setLocalizedName(languageNameNode.asText());
           }
 
           JsonNode languageDescriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);
-          if (languageDescriptionNode != null && languageDescriptionNode.isNull() == false) {
+          if (languageDescriptionNode != null && !languageDescriptionNode.isNull()) {
             taskEntity.setLocalizedDescription(languageDescriptionNode.asText());
           }
         }

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricVariableInstanceQueryImpl.java
Patch:
@@ -221,7 +221,7 @@ public List<HistoricVariableInstance> executeList(CommandContext commandContext,
 
     List<HistoricVariableInstance> historicVariableInstances = commandContext.getHistoricVariableInstanceEntityManager().findHistoricVariableInstancesByQueryCriteria(this, page);
 
-    if (excludeVariableInitialization == false) {
+    if (!excludeVariableInitialization) {
       for (HistoricVariableInstance historicVariableInstance : historicVariableInstances) {
         if (historicVariableInstance instanceof HistoricVariableInstanceEntity) {
           HistoricVariableInstanceEntity variableEntity = (HistoricVariableInstanceEntity) historicVariableInstance;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -106,7 +106,7 @@ public void execute(DelegateExecution execution) {
       List<? extends ExecutionEntity> multiInstanceExecutions = parentScopeExecution.getExecutions();
       List<ExecutionEntity> executionsToDelete = new ArrayList<ExecutionEntity>();
       for (ExecutionEntity multiInstanceExecution : multiInstanceExecutions) {
-        if (multiInstanceExecution.getId().equals(parentScopeExecution.getId()) == false) {
+        if (!multiInstanceExecution.getId().equals(parentScopeExecution.getId())) {
           ScopeUtil.createCopyOfSubProcessExecutionForCompensation(multiInstanceExecution);
 
           // end all executions in the scope of the transaction

File: activiti-engine/src/test/java/org/activiti/standalone/calendar/DurationHelperTest.java
Patch:
@@ -112,7 +112,7 @@ public void daylightSavingFallObservedFirstHour() throws Exception {
     testingClock.setCurrentCalendar(parseCalendar("20131103-00:45:00", TimeZone.getTimeZone("US/Eastern")));
 
     DurationHelper dh = new DurationHelper("R2/2013-11-03T00:45:00-04:00/PT1H", testingClock);
-    Calendar expected = parseCalendarWithOffset("20131103-01:45:00 -04:00", TimeZone.getTimeZone("US/Eastern"));
+    Calendar expected = parseCalendarWithOffset("20131103-01:45:00 -04:00");
 
     assertTrue(expected.compareTo(dh.getCalendarAfter()) == 0);
   }
@@ -123,7 +123,7 @@ public void daylightSavingFallObservedSecondHour() throws Exception {
     testingClock.setCurrentCalendar(parseCalendar("20131103-00:45:00", TimeZone.getTimeZone("US/Eastern")));
 
     DurationHelper dh = new DurationHelper("R2/2013-11-03T00:45:00-04:00/PT2H", testingClock);
-    Calendar expected = parseCalendarWithOffset("20131103-01:45:00 -05:00", TimeZone.getTimeZone("US/Eastern"));
+    Calendar expected = parseCalendarWithOffset("20131103-01:45:00 -05:00");
 
     assertTrue(expected.compareTo(dh.getCalendarAfter()) == 0);
   }
@@ -194,7 +194,7 @@ private Date parse(String str) throws Exception {
     return simpleDateFormat.parse(str);
   }
 
-  private Calendar parseCalendarWithOffset(String str, TimeZone timeZone) throws Exception {
+  private Calendar parseCalendarWithOffset(String str) throws Exception {
 
     Calendar cal = Calendar.getInstance();
     cal.setTime(DateUtils.parseDate(str, "yyyyMMdd-HH:mm:ssZZ"));

File: activiti-spring-boot/spring-boot-samples/spring-boot-sample-hal-rest-api/src/main/java/org/activiti/Application.java
Patch:
@@ -12,5 +12,4 @@ public static void main(String[] args) {
 		SpringApplication.run(Application.class, args);
 	}
 
-
-}
+}
\ No newline at end of file

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-hal-rest-api/src/main/java/org/activiti/client/model/ProcessInstance.java
Patch:
@@ -16,7 +16,6 @@
 package org.activiti.client.model;
 
 import java.util.Date;
-
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 
@@ -89,4 +88,5 @@ public String getStatus() {
     public String getProcessDefinitionId() {
         return processDefinitionId;
     }
+
 }

File: activiti-spring/src/main/java/org/activiti/spring/SpringProcessEngineConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public ProcessEngine buildProcessEngine() {
 
   @Override
   public UserGroupLookupProxy getUserGroupLookupProxy() {
-    return null; //no identity provider set
+    return userGroupLookupProxy;
   }
 
   public void setTransactionSynchronizationAdapterOrder(Integer transactionSynchronizationAdapterOrder) {

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-hal-rest-api/src/main/java/org/activiti/client/model/resources/ProcessInstanceResource.java
Patch:
@@ -19,9 +19,6 @@
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.Resource;
 
-/**
-
- */
 public class ProcessInstanceResource extends Resource<ProcessInstance> {
 
     public ProcessInstanceResource(ProcessInstance processInstance, Link... links) {

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-hal-rest-api/src/main/java/org/activiti/client/model/resources/TaskResource.java
Patch:
@@ -19,9 +19,6 @@
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.Resource;
 
-/**
-
- */
 public class TaskResource extends Resource<Task> {
 
     public TaskResource(Task content, Iterable<Link> links) {

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-hal-rest-api/src/main/java/org/activiti/client/model/resources/VariablesResource.java
Patch:
@@ -20,9 +20,6 @@
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.Resource;
 
-/**
-
- */
 public class VariablesResource extends Resource<Map<String, Object>> {
 
     public VariablesResource(Map<String, Object> content, Link... links) {

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-hal-rest-api/src/main/java/org/activiti/controllers/ProcessInstanceTasksController.java
Patch:
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package org.activiti.services;
+package org.activiti.controllers;
 
 import org.activiti.client.model.Task;
 import org.activiti.client.model.resources.TaskResource;
 import org.activiti.client.model.resources.assembler.TaskResourceAssembler;
+import org.activiti.services.PageableTaskService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -30,7 +31,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@RequestMapping(value = "/api/process-instances/{processInstanceId}", produces = MediaTypes.HAL_JSON_VALUE)
+@RequestMapping(value = "process-instances/{processInstanceId}", produces = MediaTypes.HAL_JSON_VALUE)
 public class ProcessInstanceTasksController {
 
     private final PageableTaskService pageableTaskService;

File: activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-hal-rest-api/src/main/java/org/activiti/controllers/ProcessInstanceVariableController.java
Patch:
@@ -13,7 +13,7 @@
  *
  */
 
-package org.activiti.services;
+package org.activiti.controllers;
 
 import java.util.Map;
 
@@ -32,7 +32,7 @@
 
  */
 @RestController
-@RequestMapping(value = "/api/process-instances/{processInstanceId}/variables", produces = MediaTypes.HAL_JSON_VALUE)
+@RequestMapping(value = "process-instances/{processInstanceId}/variables", produces = MediaTypes.HAL_JSON_VALUE)
 public class ProcessInstanceVariableController {
 
     private final RuntimeService runtimeService;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
Patch:
@@ -61,13 +61,13 @@ public ProcessInstance execute(CommandContext commandContext) {
     }
 
     MessageEventSubscriptionEntity messageEventSubscription = commandContext.getEventSubscriptionEntityManager().findMessageStartEventSubscriptionByName(messageName, tenantId);
-
     if (messageEventSubscription == null) {
       throw new ActivitiObjectNotFoundException("Cannot start process instance by message: no subscription to message with name '" + messageName + "' found.", MessageEventSubscriptionEntity.class);
     }
 
     String processDefinitionId = messageEventSubscription.getConfiguration();
-    if (processDefinitionId == null) {
+    String messageActivityId = messageEventSubscription.getActivityId();
+    if (processDefinitionId == null || messageActivityId == null) {
       throw new ActivitiException("Cannot start process instance by message: subscription to message with name '" + messageName + "' is not a message start event.");
     }
 
@@ -79,7 +79,7 @@ public ProcessInstance execute(CommandContext commandContext) {
     }
 
     ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, processVariables, transientVariables);
+    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, messageActivityId, processVariables, transientVariables);
 
     return processInstance;
   }

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetCompletedFormDefinitionCmd.java
Patch:
@@ -242,7 +242,7 @@ protected Map<String, JsonNode> fillPreviousFormValues(SubmittedForm submittedFo
         
         try {
           JsonNode submittedNode = formEngineConfiguration.getObjectMapper().readTree(submittedForm.getFormValueBytes());
-          if (submittedNode == null || submittedNode.get("values") != null) {
+          if (submittedNode == null || submittedNode.get("values") == null) {
             continue;
           }
          

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetVariablesFromFormSubmissionCmd.java
Patch:
@@ -132,9 +132,9 @@ protected Object transformFormFieldValueToVariableValue(FormField formField, Obj
       }
 
     } else if (formField.getType().equals(FormFieldTypes.UPLOAD)) {
-      // We don't store the variable, the field-name will be referenced by the created related content entries
-      result = null;
-
+      //We are storing related content ids as comma separated string in variable table as related content type is not available.
+      result = (String) formFieldValue;
+      
     } else if (formField.getType().equals(FormFieldTypes.PEOPLE) || formField.getType().equals(FormFieldTypes.FUNCTIONAL_GROUP)) {
       if (formFieldValue != null && formFieldValue instanceof Map<?, ?>) {
         Map<String, Object> value = (Map<String, Object>) formFieldValue;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -146,13 +146,11 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
     }
 
     String deleteReason = DeleteReason.BOUNDARY_EVENT_INTERRUPTING + " (" + notToDeleteExecution.getCurrentActivityId() + ")";
-    if (parentExecution.getCurrentFlowElement() instanceof CallActivity) {
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution.getId(),
             subProcessExecution.getCurrentActivityId(), deleteReason, true, true);
       }
-    }
 
     executionEntityManager.deleteExecutionAndRelatedData(parentExecution, deleteReason, false);
   }

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureShellTaskTest.java
Patch:
@@ -38,7 +38,7 @@ public void testClassWhiteListingNotAllowed() {
         }
 
         try {
-            runtimeService.startProcessInstanceByKey("shellCommandStart");
+            runtimeService.startProcessInstanceByKey("shellCommandEcho");
             Assert.fail(); // Expecting exception
         } catch (Exception e) {
             e.printStackTrace();

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureShellTaskTest.java
Patch:
@@ -38,7 +38,7 @@ public void testClassWhiteListingNotAllowed() {
         }
 
         try {
-            runtimeService.startProcessInstanceByKey("shellCommandStart");
+            runtimeService.startProcessInstanceByKey("shellCommandEcho");
             Assert.fail(); // Expecting exception
         } catch (Exception e) {
             e.printStackTrace();

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureShellTaskTest.java
Patch:
@@ -38,7 +38,7 @@ public void testClassWhiteListingNotAllowed() {
         }
 
         try {
-            runtimeService.startProcessInstanceByKey("shellCommandStart");
+            runtimeService.startProcessInstanceByKey("shellCommandEcho");
             Assert.fail(); // Expecting exception
         } catch (Exception e) {
             e.printStackTrace();

File: modules/activiti-dmn-engine/src/main/java/org/activiti/dmn/engine/DmnEngineConfiguration.java
Patch:
@@ -343,7 +343,7 @@ public void initDatabaseType() {
   protected Map<Class<?>, PropertyHandler> customPropertyHandlers = new HashMap<Class<?>, PropertyHandler>();
 
   /**
-   * Set this to true if you want to have extra checks on the BPMN xml that is parsed. See http://www.jorambarrez.be/blog/2013/02/19/uploading-a-funny-xml -can-bring-down-your-server/
+   * Set this to true if you want to have extra checks on the BPMN xml that is parsed.
    * 
    * Unfortunately, this feature is not available on some platforms (JDK 6, JBoss), hence the reason why it is disabled by default. If your platform allows the use of StaxSource during XML parsing, do
    * enable it.

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -41,7 +41,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "6.0.0.4"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
+  public static String VERSION = "6.0.1.0"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
 
   /**
    * The name as specified in 'process-engine-name' in the activiti.cfg.xml configuration file. The default name for a process engine is 'default

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -559,7 +559,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
   protected FailedJobCommandFactory failedJobCommandFactory;
 
   /**
-   * Set this to true if you want to have extra checks on the BPMN xml that is parsed. See http://www.jorambarrez.be/blog/2013/02/19/uploading-a-funny-xml -can-bring-down-your-server/
+   * Set this to true if you want to have extra checks on the BPMN xml that is parsed.
    *
    * Unfortunately, this feature is not available on some platforms (JDK 6, JBoss), hence the reason why it is disabled by default. If your platform allows the use of StaxSource during XML parsing, do
    * enable it.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -117,6 +117,7 @@ public class DbSqlSession implements Session {
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.20.0.1"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.20.0.2"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.21.0.0"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("5.22.0.0"));
     
     /*
      * Version 5.18.0.1 is the latest v5 version in the list here, although if you would look at the v5 code,
@@ -138,6 +139,7 @@ public class DbSqlSession implements Session {
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.1"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.2"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.3"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.4"));
     
     /* Current */
     ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntityManagerImpl.java
Patch:
@@ -68,7 +68,7 @@ public void delete(String historicProcessInstanceId) {
       getHistoricIdentityLinkEntityManager().deleteHistoricIdentityLinksByProcInstance(historicProcessInstanceId);
       getCommentEntityManager().deleteCommentsByProcessInstanceId(historicProcessInstanceId);
 
-      delete(historicProcessInstance, false);
+      delete(historicProcessInstance);
 
       // Also delete any sub-processes that may be active (ACT-821)
 

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureServiceTaskBaseTest.java
Patch:
@@ -28,7 +28,7 @@ public abstract class SecureServiceTaskBaseTest extends ServiceTaskBaseTest {
     @Override
     protected List<ProcessEngineConfigurator> getConfigurators() {
         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()
-                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList("ls", "pwd")));
+                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList("cmd","ls", "pwd")));
 
         return Arrays.asList(configurator);
     }

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureShellTaskTest.java
Patch:
@@ -28,7 +28,7 @@ public class SecureShellTaskTest extends SecureServiceTaskBaseTest {
     @Test
     public void testClassWhiteListingNotAllowed() {
         if (osType == OsType.WINDOWS) {
-            deployProcessDefinition("ShellTaskTest.testEchoShellWindows.bpmn20.xml");
+            deployProcessDefinition("ShellTaskTest.testShellWindows.bpmn20.xml");
         } else if (osType == OsType.LINUX) {
             deployProcessDefinition("ShellTaskTest.testEchoShellLinux.bpmn20.xml");
         } else if (osType == OsType.MAC) {
@@ -38,7 +38,7 @@ public void testClassWhiteListingNotAllowed() {
         }
 
         try {
-            runtimeService.startProcessInstanceByKey("shellCommandEcho");
+            runtimeService.startProcessInstanceByKey("shellCommandStart");
             Assert.fail(); // Expecting exception
         } catch (Exception e) {
             e.printStackTrace();

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/util/XmlUtil.java
Patch:
@@ -21,8 +21,6 @@ public class XmlUtil {
 
 	/**
 	 * 'safe' is here reflecting:
-	 * http://www.jorambarrez.be/blog/2013/02/19/uploading
-	 * -a-funny-xml-can-bring-down-your-server/ and
 	 * http://activiti.org/userguide/index.html#advanced.safe.bpmn.xml
 	 */
 	public static XMLInputFactory createSafeXmlInputFactory() {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/ManagementService.java
Patch:
@@ -115,9 +115,6 @@ public interface ManagementService {
   /** get the list of properties. */
   Map<String, String> getProperties();
   
-  /** programmatic schema update on a given connection returning feedback about what happened */
-  String databaseSchemaUpgrade(Connection connection, String catalog, String schema);
-  
   /**
    * Executes a given command with the default {@link CommandConfig}.
    * @param command the command, cannot be null.

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/ProcessEngineImpl.java
Patch:
@@ -91,8 +91,6 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
   public void close() {
     ProcessEngines.unregister(this);
     
-    commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationProcessEngineClose());
-    
     if (processEngineConfiguration.getProcessEngineLifecycleListener() != null) {
       processEngineConfiguration.getProcessEngineLifecycleListener().onProcessEngineClosed(this);
     }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -545,7 +545,6 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
   
   /**
    * Set this to true if you want to have extra checks on the BPMN xml that is parsed.
-   * See http://www.jorambarrez.be/blog/2013/02/19/uploading-a-funny-xml-can-bring-down-your-server/
    * 
    * Unfortunately, this feature is not available on some platforms (JDK 6, JBoss),
    * hence the reason why it is disabled by default. If your platform allows 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/HistoricProcessInstanceEventsTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class HistoricProcessInstanceEventsTest extends PluggableActivitiTestCase{
 
-	private TestHistoricProcessInstanceEventListener listener;
+	private TestActivitiEntityEventListener listener;
 	
 	/**
 	 * Test create, update and delete events of historic process instances.
@@ -51,7 +51,7 @@ public void testHistoricProcessInstanceEvents() throws Exception {
 	protected void initializeServices() {
 		super.initializeServices();
 	
-		listener = new TestHistoricProcessInstanceEventListener(HistoricProcessInstance.class);
+		listener = new TestActivitiEntityEventListener(HistoricProcessInstance.class);
 		processEngineConfiguration.getEventDispatcher().addEventListener(listener);
 	}
 	

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetRuntimeFormDefinitionCmd.java
Patch:
@@ -181,7 +181,7 @@ protected Map<String, JsonNode> fillPreviousFormValues(FormEngineConfiguration f
       for (SubmittedForm otherForm : submittedForms) {
         try {
           JsonNode submittedNode = formEngineConfiguration.getObjectMapper().readTree(otherForm.getFormValueBytes());
-          if (submittedNode == null || submittedNode.get("values") != null) {
+          if (submittedNode == null || submittedNode.get("values") == null) {
             continue;
           }
          
@@ -221,7 +221,7 @@ public void fillVariablesWithFormValues(Map<String, JsonNode> submittedFormField
         try {
           if (StringUtils.isNotEmpty(fieldValue)) {
             LocalDate dateValue = LocalDate.parse(fieldValue);
-            variables.put(field.getId(), dateValue);
+            variables.put(field.getId(), dateValue.toString("yyyy-M-d"));
           }
         } catch (Exception e) {
           logger.error("Error parsing form date value for process instance " + processInstanceId + " with value " + fieldValue, e);

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureServiceTaskBaseTest.java
Patch:
@@ -28,7 +28,7 @@ public abstract class SecureServiceTaskBaseTest extends ServiceTaskBaseTest {
     @Override
     protected List<ProcessEngineConfigurator> getConfigurators() {
         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()
-                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList("ls", "pwd")));
+                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList("cmd","ls", "pwd")));
 
         return Arrays.asList(configurator);
     }

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureShellTaskTest.java
Patch:
@@ -28,7 +28,7 @@ public class SecureShellTaskTest extends SecureServiceTaskBaseTest {
     @Test
     public void testClassWhiteListingNotAllowed() {
         if (osType == OsType.WINDOWS) {
-            deployProcessDefinition("ShellTaskTest.testEchoShellWindows.bpmn20.xml");
+            deployProcessDefinition("ShellTaskTest.testShellWindows.bpmn20.xml");
         } else if (osType == OsType.LINUX) {
             deployProcessDefinition("ShellTaskTest.testEchoShellLinux.bpmn20.xml");
         } else if (osType == OsType.MAC) {
@@ -38,7 +38,7 @@ public void testClassWhiteListingNotAllowed() {
         }
 
         try {
-            runtimeService.startProcessInstanceByKey("shellCommandEcho");
+            runtimeService.startProcessInstanceByKey("shellCommandStart");
             Assert.fail(); // Expecting exception
         } catch (Exception e) {
             e.printStackTrace();

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetVariablesFromFormSubmissionCmd.java
Patch:
@@ -13,6 +13,7 @@
 package org.activiti.form.engine.impl.cmd;
 
 import java.io.Serializable;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -132,9 +133,9 @@ protected Object transformFormFieldValueToVariableValue(FormField formField, Obj
       }
 
     } else if (formField.getType().equals(FormFieldTypes.UPLOAD)) {
-      // We don't store the variable, the field-name will be referenced by the created related content entries
+      //We are storing related content ids as comma separated string in variable table as related content type is not available.
       result = (String) formFieldValue;
-
+      
     } else if (formField.getType().equals(FormFieldTypes.PEOPLE) || formField.getType().equals(FormFieldTypes.FUNCTIONAL_GROUP)) {
       if (formFieldValue != null && formFieldValue instanceof Map<?, ?>) {
         Map<String, Object> value = (Map<String, Object>) formFieldValue;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -146,13 +146,11 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
     }
 
     String deleteReason = DeleteReason.BOUNDARY_EVENT_INTERRUPTING + " (" + notToDeleteExecution.getCurrentActivityId() + ")";
-    if (parentExecution.getCurrentFlowElement() instanceof CallActivity) {
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution.getId(),
             subProcessExecution.getCurrentActivityId(), deleteReason, true, true);
       }
-    }
 
     executionEntityManager.deleteExecutionAndRelatedData(parentExecution, deleteReason, false);
   }

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetCompletedFormDefinitionCmd.java
Patch:
@@ -242,7 +242,7 @@ protected Map<String, JsonNode> fillPreviousFormValues(SubmittedForm submittedFo
         
         try {
           JsonNode submittedNode = formEngineConfiguration.getObjectMapper().readTree(submittedForm.getFormValueBytes());
-          if (submittedNode == null || submittedNode.get("values") != null) {
+          if (submittedNode == null || submittedNode.get("values") == null) {
             continue;
           }
          

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetRuntimeFormDefinitionCmd.java
Patch:
@@ -181,7 +181,7 @@ protected Map<String, JsonNode> fillPreviousFormValues(FormEngineConfiguration f
       for (SubmittedForm otherForm : submittedForms) {
         try {
           JsonNode submittedNode = formEngineConfiguration.getObjectMapper().readTree(otherForm.getFormValueBytes());
-          if (submittedNode == null || submittedNode.get("values") != null) {
+          if (submittedNode == null || submittedNode.get("values") == null) {
             continue;
           }
          

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetVariablesFromFormSubmissionCmd.java
Patch:
@@ -133,7 +133,7 @@ protected Object transformFormFieldValueToVariableValue(FormField formField, Obj
 
     } else if (formField.getType().equals(FormFieldTypes.UPLOAD)) {
       // We don't store the variable, the field-name will be referenced by the created related content entries
-      result = null;
+      result = (String) formFieldValue;
 
     } else if (formField.getType().equals(FormFieldTypes.PEOPLE) || formField.getType().equals(FormFieldTypes.FUNCTIONAL_GROUP)) {
       if (formFieldValue != null && formFieldValue instanceof Map<?, ?>) {

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetRuntimeFormDefinitionCmd.java
Patch:
@@ -181,7 +181,7 @@ protected Map<String, JsonNode> fillPreviousFormValues(FormEngineConfiguration f
       for (SubmittedForm otherForm : submittedForms) {
         try {
           JsonNode submittedNode = formEngineConfiguration.getObjectMapper().readTree(otherForm.getFormValueBytes());
-          if (submittedNode == null || submittedNode.get("values") != null) {
+          if (submittedNode == null || submittedNode.get("values") == null) {
             continue;
           }
          
@@ -220,8 +220,9 @@ public void fillVariablesWithFormValues(Map<String, JsonNode> submittedFormField
       if (FormFieldTypes.DATE.equals(fieldType)) {
         try {
           if (StringUtils.isNotEmpty(fieldValue)) {
+        	  
             LocalDate dateValue = LocalDate.parse(fieldValue);
-            variables.put(field.getId(), dateValue);
+            variables.put(field.getId(), dateValue.toString("yyyy-M-d"));
           }
         } catch (Exception e) {
           logger.error("Error parsing form date value for process instance " + processInstanceId + " with value " + fieldValue, e);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntityManager.java
Patch:
@@ -74,7 +74,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
       for (ProcessDefinition processDefinition: processDefinitions) {
         String processDefinitionId = processDefinition.getId();
         
-        getProcessInstanceManager().deleteProcessInstancesByProcessDefinition(processDefinitionId, "deleted deployment", cascade);
+        getProcessInstanceManager().deleteProcessInstancesByProcessDefinition(processDefinitionId, "deleted deployment", cascade, false);
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/InterpretableExecution.java
Patch:
@@ -81,4 +81,6 @@ public interface InterpretableExecution extends ActivityExecution, ExecutionList
   StartingExecution getStartingExecution();
   
   void disposeStartingExecution();
+
+  boolean shouldExecuteListeners();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -160,7 +160,7 @@ public List<String> getTablesPresentInDatabase() {
         String databaseTablePrefix = getDbSqlSession().getDbSqlSessionFactory().getDatabaseTablePrefix();
         String tableNameFilter = databaseTablePrefix+"ACT_%";
         if ("postgres".equals(getDbSqlSession().getDbSqlSessionFactory().getDatabaseType())) {
-          tableNameFilter = databaseTablePrefix+"act_%";
+          tableNameFilter = databaseTablePrefix+"act\\_%";
         }
         if ("oracle".equals(getDbSqlSession().getDbSqlSessionFactory().getDatabaseType())) {
           tableNameFilter = databaseTablePrefix+"ACT" + databaseMetaData.getSearchStringEscape() + "_%";

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureServiceTaskBaseTest.java
Patch:
@@ -28,7 +28,7 @@ public abstract class SecureServiceTaskBaseTest extends ServiceTaskBaseTest {
     @Override
     protected List<ProcessEngineConfigurator> getConfigurators() {
         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()
-                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList("ls", "pwd")));
+                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList("cmd","ls", "pwd")));
 
         return Arrays.asList(configurator);
     }

File: modules/activiti-secure-service-tasks/src/test/java/org/activiti/test/serviceTask/secure/SecureShellTaskTest.java
Patch:
@@ -28,7 +28,7 @@ public class SecureShellTaskTest extends SecureServiceTaskBaseTest {
     @Test
     public void testClassWhiteListingNotAllowed() {
         if (osType == OsType.WINDOWS) {
-            deployProcessDefinition("ShellTaskTest.testEchoShellWindows.bpmn20.xml");
+            deployProcessDefinition("ShellTaskTest.testShellWindows.bpmn20.xml");
         } else if (osType == OsType.LINUX) {
             deployProcessDefinition("ShellTaskTest.testEchoShellLinux.bpmn20.xml");
         } else if (osType == OsType.MAC) {
@@ -38,7 +38,7 @@ public void testClassWhiteListingNotAllowed() {
         }
 
         try {
-            runtimeService.startProcessInstanceByKey("shellCommandEcho");
+            runtimeService.startProcessInstanceByKey("shellCommandStart");
             Assert.fail(); // Expecting exception
         } catch (Exception e) {
             e.printStackTrace();

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/MessageConverterTest.java
Patch:
@@ -40,7 +40,7 @@ private void validateModel(BpmnModel model) {
         MessageEventDefinition messageEventDefinition = (MessageEventDefinition) startEvent.getEventDefinitions().get(0);
         assertNotNull("Attribute messageRef of messageEventDefinition can't be null.", messageEventDefinition.getMessageRef());
         if(!(message.getId().equals(message.getName())) && messageEventDefinition.getMessageRef() != null){
-          assertTrue("MessageRef in messageEventDefinition of start event should be equal to messageId.", messageEventDefinition.getMessageRef().equals(message.getId()));
+          assertTrue("MessageRef attribute of messageEventDefinition of start event should be equal to messageId.", (messageEventDefinition.getMessageRef()).equals(message.getId()));
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/EventSubscriptionManager.java
Patch:
@@ -87,7 +87,6 @@ protected void insertMessageEvent(MessageEventDefinition messageEventDefinition,
     Message message = null;
     if (bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {
       message = bpmnModel.getMessage(messageEventDefinition.getMessageRef());
-      //messageEventDefinition.setMessageRef(message.getName());
     }
 
     // look for subscriptions for the same name in db:

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
Patch:
@@ -61,13 +61,13 @@ public ProcessInstance execute(CommandContext commandContext) {
     }
 
     MessageEventSubscriptionEntity messageEventSubscription = commandContext.getEventSubscriptionEntityManager().findMessageStartEventSubscriptionByName(messageName, tenantId);
-
     if (messageEventSubscription == null) {
       throw new ActivitiObjectNotFoundException("Cannot start process instance by message: no subscription to message with name '" + messageName + "' found.", MessageEventSubscriptionEntity.class);
     }
 
     String processDefinitionId = messageEventSubscription.getConfiguration();
-    if (processDefinitionId == null) {
+    String messageActivityId = messageEventSubscription.getActivityId();
+    if (processDefinitionId == null || messageActivityId == null) {
       throw new ActivitiException("Cannot start process instance by message: subscription to message with name '" + messageName + "' is not a message start event.");
     }
 
@@ -79,7 +79,7 @@ public ProcessInstance execute(CommandContext commandContext) {
     }
 
     ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, processVariables, transientVariables);
+    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, messageActivityId, processVariables, transientVariables);
 
     return processInstance;
   }

File: modules/activiti-camel/src/test/java/org/activiti/camel/examples/multiinstance/MultiInstanceTest.java
Patch:
@@ -55,7 +55,7 @@ public void testRunProcess() throws Exception {
         .processInstanceId(processInstance.getId())
         .activityId("serviceTask1").count());
     
-    waitForJobExecutorToProcessAllJobs(3000, 500);
+    waitForJobExecutorToProcessAllJobs(30000, 500);
     int counter = 0;
     long processInstanceCount = 1;
     while (processInstanceCount == 1 && counter < 20) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/cfg/executioncount/ChangeConfigAndRebootEngineTest.java
Patch:
@@ -32,7 +32,8 @@
 /**
  * @author Joram Barrez
  */
-public class ChangeConfigAndRebootEngineTest extends ResourceActivitiTestCase {
+public class ChangeConfigAndRebootEngineTest {
+ /* extends ResourceActivitiTestCase {
   
   private static final Logger logger = LoggerFactory.getLogger(ChangeConfigAndRebootEngineTest.class);
   
@@ -137,5 +138,5 @@ protected void finishProcessInstance(ProcessInstance processInstance) {
     taskService.complete(task.getId());
     assertProcessEnded(processInstance.getId());
   }
-
+*/
 }

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ManagementServiceTest extends PluggableActivitiTestCase {
 
-  public void testTableCount() {
+/*  public void testTableCount() {
     Map<String, Long> tableCount = managementService.getTableCount();
 
     String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
@@ -42,7 +42,7 @@ public void testTableCount() {
     assertEquals(new Long(0), tableCount.get(tablePrefix + "ACT_RE_PROCDEF"));
     assertEquals(new Long(0), tableCount.get(tablePrefix + "ACT_RU_TASK"));
     assertEquals(new Long(0), tableCount.get(tablePrefix + "ACT_RU_IDENTITYLINK"));
-  }
+  }*/
 
   public void testGetTableMetaData() {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/idm/UserRepresentation.java
Patch:
@@ -35,11 +35,13 @@ public UserRepresentation() {
   }
   
   public UserRepresentation(User user) {
+	if(user!=null){
     setId(user.getId());
     setFirstName(user.getFirstName());
     setLastName(user.getLastName());
     setFullName( (user.getFirstName() != null ? user.getFirstName() : "") + " " + (user.getLastName() != null ? user.getLastName() : ""));
     setEmail(user.getEmail());
+	}
   }
   
   public String getId() {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelRepository.java
Patch:
@@ -52,6 +52,9 @@ public interface ModelRepository extends JpaRepository<Model, String> {
   
   @Query("select m.id, m.name, m.modelType from ModelRelation mr inner join mr.parentModel m where mr.modelId = :modelId")
   List<Model> findModelsByChildModelId(@Param("modelId") String modelId);
+  
+  @Query("select model.key from Model as model where model.id = :modelId and model.createdBy = :user")
+  String appDefinitionIdByModelAndUser(@Param("modelId") String modelId, @Param("user") String user);
 
 
 }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/AppDefinitionService.java
Patch:
@@ -21,5 +21,7 @@ public interface AppDefinitionService {
 	List<AppDefinitionServiceRepresentation> getAppDefinitions();
 	
 	List<AppDefinitionServiceRepresentation> getDeployableAppDefinitions(User user);
+	
+	String getDefinitionIdForModelAndUser(String modelId, User user);
 
 }
\ No newline at end of file

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/DeploymentService.java
Patch:
@@ -23,6 +23,6 @@ public interface DeploymentService {
     Deployment updateAppDefinition(Model appDefinition, User user);
 
     @Transactional
-    void deleteAppDefinition(Long appDefinitionId);
+    void deleteAppDefinition(String appDefinitionId);
 
 }
\ No newline at end of file

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/DeploymentServiceImpl.java
Patch:
@@ -154,7 +154,7 @@ public Deployment updateAppDefinition(Model appDefinitionModel, User user) {
 
   @Override
   @Transactional
-  public void deleteAppDefinition(Long appDefinitionId) {
+  public void deleteAppDefinition(String appDefinitionId) {
     // First test if deployment is still there, otherwhise the transaction will be rolled back
     List<Deployment> deployments = repositoryService.createDeploymentQuery().deploymentKey(String.valueOf(appDefinitionId)).list();
     if (deployments != null) {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelRepository.java
Patch:
@@ -52,6 +52,9 @@ public interface ModelRepository extends JpaRepository<Model, String> {
   
   @Query("select m.id, m.name, m.modelType from ModelRelation mr inner join mr.parentModel m where mr.modelId = :modelId")
   List<Model> findModelsByChildModelId(@Param("modelId") String modelId);
+  
+  @Query("select model.key from Model as model where model.id = :modelId and model.createdBy = :user")
+  String appDefinitionIdByModelAndUser(@Param("modelId") String modelId, @Param("user") String user);
 
 
 }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/AppDefinitionService.java
Patch:
@@ -21,5 +21,7 @@ public interface AppDefinitionService {
 	List<AppDefinitionServiceRepresentation> getAppDefinitions();
 	
 	List<AppDefinitionServiceRepresentation> getDeployableAppDefinitions(User user);
+	
+	String getDefinitionIdForModelAndUser(String modelId, User user);
 
 }
\ No newline at end of file

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/DeploymentService.java
Patch:
@@ -23,6 +23,6 @@ public interface DeploymentService {
     Deployment updateAppDefinition(Model appDefinition, User user);
 
     @Transactional
-    void deleteAppDefinition(Long appDefinitionId);
+    void deleteAppDefinition(String appDefinitionId);
 
 }
\ No newline at end of file

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/DeploymentServiceImpl.java
Patch:
@@ -154,7 +154,7 @@ public Deployment updateAppDefinition(Model appDefinitionModel, User user) {
 
   @Override
   @Transactional
-  public void deleteAppDefinition(Long appDefinitionId) {
+  public void deleteAppDefinition(String appDefinitionId) {
     // First test if deployment is still there, otherwhise the transaction will be rolled back
     List<Deployment> deployments = repositoryService.createDeploymentQuery().deploymentKey(String.valueOf(appDefinitionId)).list();
     if (deployments != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -439,7 +439,7 @@ public void deleteProcessInstanceExecutionEntity(String processInstanceId,
     
     // Call activities
     for (ExecutionEntity subExecutionEntity : processInstanceEntity.getExecutions()) {
-      if (subExecutionEntity.getSubProcessInstance() != null) {
+      if (subExecutionEntity.getSubProcessInstance() != null &&  !subExecutionEntity.isEnded()) {
         deleteProcessInstanceCascade(subExecutionEntity.getSubProcessInstance(), deleteReason, cascade);
       }
     }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/AsyncEndEventConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class AsyncEndEventConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/CallActivityConverterTest.java
Patch:
@@ -15,7 +15,7 @@
 public class CallActivityConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ChineseConverterTest.java
Patch:
@@ -6,7 +6,7 @@
 public class ChineseConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     deployProcess(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/CompleteConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class CompleteConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/DataStoreConverterTest.java
Patch:
@@ -14,7 +14,7 @@
 public class DataStoreConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/EmptyModelTest.java
Patch:
@@ -8,7 +8,7 @@
 public class EmptyModelTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     try {
       readXMLFile();
       fail("Expected xml exception");

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/EncodingConverterTest.java
Patch:
@@ -12,7 +12,7 @@
 public class EncodingConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/EventBasedGatewayConverterTest.java
Patch:
@@ -21,7 +21,7 @@
 public class EventBasedGatewayConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/EventListenerConverterTest.java
Patch:
@@ -18,7 +18,7 @@
 public class EventListenerConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/FormPropertiesConverterTest.java
Patch:
@@ -20,7 +20,7 @@
 public class FormPropertiesConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/MapExceptionConverterTest.java
Patch:
@@ -66,7 +66,7 @@ public void testMapExceptionWithNoExceptionClass() throws Exception {
   }
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     resourceName = "mapException/mapExceptionModel.bpmn";
 
     BpmnModel bpmnModel = readXMLFile();

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/MessageConverterTest.java
Patch:
@@ -10,7 +10,7 @@
 public class MessageConverterTest extends AbstractConverterTest {
   
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/MessageFlowConverterTest.java
Patch:
@@ -12,7 +12,7 @@
 public class MessageFlowConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/NotExecutableConverterTest.java
Patch:
@@ -8,7 +8,7 @@
 public class NotExecutableConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/OtherToolImportConverterTest.java
Patch:
@@ -10,7 +10,7 @@
 public class OtherToolImportConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/PoolsConverterTest.java
Patch:
@@ -15,7 +15,7 @@
 public class PoolsConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ScopedConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class ScopedConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ServiceTaskConverterTest.java
Patch:
@@ -17,7 +17,7 @@
 public class ServiceTaskConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SignalConverterTest.java
Patch:
@@ -11,7 +11,7 @@
 public class SignalConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SimpleConverterTest.java
Patch:
@@ -17,7 +17,7 @@
 public class SimpleConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SubProcessConverterNoDITest.java
Patch:
@@ -18,7 +18,7 @@
 public class SubProcessConverterNoDITest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SubProcessConverterTest.java
Patch:
@@ -18,7 +18,7 @@
 public class SubProcessConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/TextAnnotationConverterTest.java
Patch:
@@ -12,7 +12,7 @@
 public class TextAnnotationConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/TimerDefinitionConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class TimerDefinitionConverterTest extends AbstractConverterTest {
   
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/UserTaskConverterTest.java
Patch:
@@ -18,7 +18,7 @@
 public class UserTaskConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertXMLToModel() throws Exception {
+  public void convertXMLToModel() throws Exception {
     BpmnModel bpmnModel = readXMLFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -513,7 +513,7 @@ public ProcessInstance getProcessInstance() {
 
   protected void assertAssociated() {
     if (associationManager.getExecution() == null) {
-      throw new ActivitiCdiException("No execution associated. Call busniessProcess.associateExecutionById() or businessProcess.startTask() first.");
+      throw new ActivitiCdiException("No execution associated. Call businessProcess.associateExecutionById() or businessProcess.startTask() first.");
     }
   }
 

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/impl/context/DefaultContextAssociationManager.java
Patch:
@@ -168,7 +168,7 @@ public void disAssociate() {
     }
     ScopedAssociation scopedAssociation = getScopedAssociation();
     if (scopedAssociation.getExecution() == null) {
-      throw new ActivitiException("Cannot dissasociate execution, no " + scopedAssociation.getClass().getAnnotations()[0].annotationType().getSimpleName() + " execution associated. ");
+      throw new ActivitiException("Cannot disasociate execution, no " + scopedAssociation.getClass().getAnnotations()[0].annotationType().getSimpleName() + " execution associated. ");
     }
     if (log.isTraceEnabled()) {
       log.trace("Disassociating");

File: modules/activiti-dmn-json-converter/src/main/java/org/activiti/editor/dmn/converter/DmnJsonConverter.java
Patch:
@@ -45,11 +45,11 @@ public class DmnJsonConverter {
 
     protected ObjectMapper objectMapper = new ObjectMapper();
 
-    public DmnDefinition convertToDmn(JsonNode modelNode, Long modelId, int modelVersion, Date lastUpdated) {
+    public DmnDefinition convertToDmn(JsonNode modelNode, String modelId, int modelVersion, Date lastUpdated) {
 
         DmnDefinition definition = new DmnDefinition();
 
-        definition.setId("definition_"+String.valueOf(modelId));
+        definition.setId("definition_"+modelId);
         definition.setName(DmnJsonConverterUtil.getValueAsString("name", modelNode));
         definition.setNamespace(MODEL_NAMESPACE);
         definition.setTypeLanguage(URI_JSON);

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngines.java
Patch:
@@ -91,7 +91,7 @@ public synchronized static void init() {
       for (Iterator<URL> iterator = configUrls.iterator(); iterator.hasNext();) {
         URL resource = iterator.next();
         log.info("Initializing process engine using configuration '{}'", resource.toString());
-        initProcessEnginFromResource(resource);
+        initProcessEngineFromResource(resource);
       }
 
       try {
@@ -142,7 +142,7 @@ public static void unregister(ProcessEngine processEngine) {
     processEngines.remove(processEngine.getName());
   }
 
-  private static ProcessEngineInfo initProcessEnginFromResource(URL resourceUrl) {
+  private static ProcessEngineInfo initProcessEngineFromResource(URL resourceUrl) {
     ProcessEngineInfo processEngineInfo = processEngineInfosByResourceUrl.get(resourceUrl.toString());
     // if there is an existing process engine info
     if (processEngineInfo != null) {
@@ -231,7 +231,7 @@ public static ProcessEngine getProcessEngine(String processEngineName) {
   public static ProcessEngineInfo retry(String resourceUrl) {
     log.debug("retying initializing of resource {}", resourceUrl);
     try {
-      return initProcessEnginFromResource(new URL(resourceUrl));
+      return initProcessEngineFromResource(new URL(resourceUrl));
     } catch (MalformedURLException e) {
       throw new ActivitiIllegalArgumentException("invalid url: " + resourceUrl, e);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateCatchEventActivityBehavior.java
Patch:
@@ -68,11 +68,11 @@ protected EventGateway getPrecedingEventBasedGateway(DelegateExecution execution
     FlowElement currentFlowElement = execution.getCurrentFlowElement();
     if (currentFlowElement instanceof IntermediateCatchEvent) {
       IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) currentFlowElement;
-      List<SequenceFlow> incomingSequenFlow = intermediateCatchEvent.getIncomingFlows();
+      List<SequenceFlow> incomingSequenceFlow = intermediateCatchEvent.getIncomingFlows();
       
       // If behind an event based gateway, there is only one incoming sequence flow that originates from said gateway
-      if (incomingSequenFlow != null && incomingSequenFlow.size() == 1) {
-        SequenceFlow sequenceFlow = incomingSequenFlow.get(0);
+      if (incomingSequenceFlow != null && incomingSequenceFlow.size() == 1) {
+        SequenceFlow sequenceFlow = incomingSequenceFlow.get(0);
         FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();
         if (sourceFlowElement instanceof EventGateway) {
           return (EventGateway) sourceFlowElement;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/deletereason/DeleteReasonTest.java
Patch:
@@ -134,11 +134,11 @@ public void testDeleteProcessInstanceWithReceiveTask() {
       assertEquals(DeleteReason.PROCESS_INSTANCE_DELETED, historyService.createHistoricProcessInstanceQuery()
           .processInstanceId(processInstance.getId()).singleResult().getDeleteReason());
       
-      List<HistoricActivityInstance> historicActiviyInstances = historyService.createHistoricActivityInstanceQuery()
+      List<HistoricActivityInstance> historicActivityInstances = historyService.createHistoricActivityInstanceQuery()
           .activityId("A").processInstanceId(processInstance.getId()).list();
-      assertEquals(1, historicActiviyInstances.size());
+      assertEquals(1, historicActivityInstances.size());
       
-      for (HistoricActivityInstance historicActivityInstance : historicActiviyInstances) {
+      for (HistoricActivityInstance historicActivityInstance : historicActivityInstances) {
         assertEquals(DeleteReason.PROCESS_INSTANCE_DELETED, historicActivityInstance.getDeleteReason());
       }
     }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ActivityProcessor.java
Patch:
@@ -31,5 +31,5 @@ public void processFlowElements(FlowElementsContainer container, BpmnModel model
       Map<String, ModelInfo> formKeyMap, Map<String, ModelInfo> decisionTableKeyMap, double subProcessX, double subProcessY);
 
   public void processJsonElements(JsonNode shapesArrayNode, JsonNode modelNode, BaseElement parentElement, 
-      Map<String, JsonNode> shapeMap, Map<Long, String> formKeyMap, Map<Long, String> decisionTableMap, BpmnModel bpmnModel);
+      Map<String, JsonNode> shapeMap, Map<String, String> formKeyMap, Map<String, String> decisionTableMap, BpmnModel bpmnModel);
 }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -429,7 +429,7 @@ public BpmnModel convertToBpmnModel(JsonNode modelNode) {
     return convertToBpmnModel(modelNode, null, null);
   }
 
-  public BpmnModel convertToBpmnModel(JsonNode modelNode, Map<Long, String> formKeyMap, Map<Long, String> decisionTableKeyMap) {
+  public BpmnModel convertToBpmnModel(JsonNode modelNode, Map<String, String> formKeyMap, Map<String, String> decisionTableKeyMap) {
 
     BpmnModel bpmnModel = new BpmnModel();
 
@@ -623,7 +623,7 @@ public BpmnModel convertToBpmnModel(JsonNode modelNode, Map<Long, String> formKe
   }
 
   public void processJsonElements(JsonNode shapesArrayNode, JsonNode modelNode, BaseElement parentElement, Map<String, JsonNode> shapeMap, 
-      Map<Long, String> formMap, Map<Long, String> decisionTableMap, BpmnModel bpmnModel) {
+      Map<String, String> formMap, Map<String, String> decisionTableMap, BpmnModel bpmnModel) {
 
     for (JsonNode shapeNode : shapesArrayNode) {
       String stencilId = BpmnJsonConverterUtil.getStencilId(shapeNode);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/DecisionTableAwareConverter.java
Patch:
@@ -19,5 +19,5 @@
  */
 public interface DecisionTableAwareConverter {
 
-    public void setDecisionTableMap(Map<Long, String> decisionTableMap);
+    public void setDecisionTableMap(Map<String, String> decisionTableMap);
 }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/DecisionTaskJsonConverter.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class DecisionTaskJsonConverter extends BaseBpmnJsonConverter implements DecisionTableAwareConverter {
 
-  protected Map<Long, String> decisionTableMap;
+  protected Map<String, String> decisionTableMap;
 
   public static void fillTypes(Map<String, Class<? extends BaseBpmnJsonConverter>> convertersToBpmnMap,
       Map<Class<? extends BaseElement>, Class<? extends BaseBpmnJsonConverter>> convertersToJsonMap) {
@@ -58,7 +58,7 @@ protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelN
     JsonNode decisionTableReferenceNode = getProperty(PROPERTY_DECISIONTABLE_REFERENCE, elementNode);
     if (decisionTableReferenceNode != null && decisionTableReferenceNode.has("id") && decisionTableReferenceNode.get("id").isNull() == false) {
 
-      Long decisionTableId = decisionTableReferenceNode.get("id").asLong();
+      String decisionTableId = decisionTableReferenceNode.get("id").asText();
       if (decisionTableMap != null) {
         String decisionTableKey = decisionTableMap.get(decisionTableId);
 
@@ -78,7 +78,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
   }
   
   @Override
-  public void setDecisionTableMap(Map<Long, String> decisionTableMap) {
+  public void setDecisionTableMap(Map<String, String> decisionTableMap) {
     this.decisionTableMap = decisionTableMap;
   }
 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/FormAwareConverter.java
Patch:
@@ -19,5 +19,5 @@
  */
 public interface FormAwareConverter {
 
-    public void setFormMap(Map<Long, String> formMap);
+    public void setFormMap(Map<String, String> formMap);
 }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/BoundaryEventConverterTest.java
Patch:
@@ -15,7 +15,7 @@
 public class BoundaryEventConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CallActivityConverterTest.java
Patch:
@@ -15,7 +15,7 @@
 public class CallActivityConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CatchEventConverterTest.java
Patch:
@@ -14,7 +14,7 @@
 public class CatchEventConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CompleteConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class CompleteConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FormPropertiesConverterTest.java
Patch:
@@ -21,7 +21,7 @@
 public class FormPropertiesConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/NotExecutableConverterTest.java
Patch:
@@ -8,7 +8,7 @@
 public class NotExecutableConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ScopedConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class ScopedConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ServiceTaskConverterTest.java
Patch:
@@ -17,7 +17,7 @@
 public class ServiceTaskConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/SimpleConverterTest.java
Patch:
@@ -15,7 +15,7 @@
 public class SimpleConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/StartEventConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class StartEventConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/SubProcessConverterTest.java
Patch:
@@ -16,7 +16,7 @@
 public class SubProcessConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/UserTaskConverterTest.java
Patch:
@@ -20,7 +20,7 @@
 public class UserTaskConverterTest extends AbstractConverterTest {
 
   @Test
-  public void connvertJsonToModel() throws Exception {
+  public void convertJsonToModel() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
   }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/AppModelDefinition.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class AppModelDefinition {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected Integer version;
   protected Integer modelType;
@@ -29,11 +29,11 @@ public class AppModelDefinition {
   protected String lastUpdatedBy;
   protected Date lastUpdated;
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/ModelHistory.java
Patch:
@@ -25,7 +25,7 @@
 public class ModelHistory extends AbstractModel {
 
 	@Column(name="model_id")
-	protected Long modelId;
+	protected String modelId;
 	
 	@Column(name="removal_date")
     @Temporal(TemporalType.TIMESTAMP)
@@ -35,11 +35,11 @@ public ModelHistory() {
 		super();
 	}
 
-	public Long getModelId() {
+	public String getModelId() {
 		return modelId;
 	}
 
-	public void setModelId(Long modelId) {
+	public void setModelId(String modelId) {
 		this.modelId = modelId;
 	}
 	

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/AppDefinitionRepresentation.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class AppDefinitionRepresentation extends AbstractRepresentation {
 
-  private Long id;
+  private String id;
   private String name;
   private String key;
   private String description;
@@ -45,11 +45,11 @@ public AppDefinitionRepresentation(AbstractModel model) {
     this.created = model.getCreated();
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/ModelKeyRepresentation.java
Patch:
@@ -23,7 +23,7 @@ public class ModelKeyRepresentation extends AbstractRepresentation {
 
   protected boolean keyAlreadyExists;
   protected String key;
-  protected Long id;
+  protected String id;
   protected String name;
   
   public boolean isKeyAlreadyExists() {
@@ -42,11 +42,11 @@ public void setKey(String key) {
     this.key = key;
   }
   
-  public Long getId() {
+  public String getId() {
     return id;
   }
   
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
   

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/ModelRepresentation.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class ModelRepresentation extends AbstractRepresentation {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected String key;
   protected String description;
@@ -66,11 +66,11 @@ public void initialize(AbstractModel model) {
     }
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableDefinitionRepresentation.java
Patch:
@@ -24,7 +24,7 @@
 @JsonInclude(Include.NON_NULL)
 public class DecisionTableDefinitionRepresentation {
 
-    protected Long id;
+    protected String id;
     protected String name;
     protected String key;
     protected String description;
@@ -34,11 +34,11 @@ public class DecisionTableDefinitionRepresentation {
     protected List<DecisionTableExpressionRepresentation> outputExpressions;
     protected List<Map<String,Object>> rules;
 
-    public Long getId() {
+    public String getId() {
         return id;
     }
 
-    public void setId(Long id) {
+    public void setId(String id) {
         this.id = id;
     }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableRepresentation.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class DecisionTableRepresentation extends AbstractRepresentation {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected String key;
   protected String description;
@@ -44,11 +44,11 @@ public DecisionTableRepresentation(AbstractModel model) {
   public DecisionTableRepresentation() {
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/form/FormRepresentation.java
Patch:
@@ -20,7 +20,7 @@
 
 public class FormRepresentation extends AbstractRepresentation {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected String key;
   protected String description;
@@ -42,11 +42,11 @@ public FormRepresentation(AbstractModel model) {
   public FormRepresentation() {
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelHistoryRepository.java
Patch:
@@ -20,12 +20,13 @@
 /**
  * Spring Data JPA repository for the ModelHistory entity.
  */
-public interface ModelHistoryRepository extends JpaRepository<ModelHistory, Long> {
+public interface ModelHistoryRepository extends JpaRepository<ModelHistory, String> {
 
 	List<ModelHistory> findByCreatedByAndModelTypeAndRemovalDateIsNull(String createdBy, Integer modelType);
 	
-	List<ModelHistory> findByModelIdAndRemovalDateIsNullOrderByVersionDesc(Long modelId);
+	List<ModelHistory> findByModelIdAndRemovalDateIsNullOrderByVersionDesc(String modelId);
 	
 	List<ModelHistory> findByModelIdOrderByVersionDesc(Long modelId);
+
 	
 }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/AppDefinitionExportService.java
Patch:
@@ -48,7 +48,7 @@ public class AppDefinitionExportService {
   
   protected BpmnJsonConverter bpmnJsonConverter = new BpmnJsonConverter();
 
-  public void exportAppDefinition(HttpServletResponse response, Long modelId) throws IOException {
+  public void exportAppDefinition(HttpServletResponse response, String modelId) throws IOException {
 
     if (modelId == null) {
       throw new BadRequestException("No application definition id provided");
@@ -72,8 +72,8 @@ protected void createAppDefinitionZip(HttpServletResponse response, Model appMod
 
       List<AppModelDefinition> modelDefinitions = appDefinition.getDefinition().getModels();
       if (CollectionUtils.isNotEmpty(modelDefinitions)) {
-        Map<Long, Model> formMap = new HashMap<Long, Model>();
-        Map<Long, Model> decisionTableMap = new HashMap<Long, Model>();
+        Map<String, Model> formMap = new HashMap<String, Model>();
+        Map<String, Model> decisionTableMap = new HashMap<String, Model>();
 
         for (AppModelDefinition modelDef : modelDefinitions) {
           Model model = modelService.getModel(modelDef.getId());

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/AppDefinitionServiceImpl.java
Patch:
@@ -57,7 +57,7 @@ public class AppDefinitionServiceImpl implements AppDefinitionService {
 
   @Override
   public List<AppDefinitionServiceRepresentation> getAppDefinitions() {
-    Map<Long, AbstractModel> modelMap = new HashMap<Long, AbstractModel>();
+    Map<String, AbstractModel> modelMap = new HashMap<String, AbstractModel>();
     List<AppDefinitionServiceRepresentation> resultList = new ArrayList<AppDefinitionServiceRepresentation>();
 
     User user = SecurityUtils.getCurrentUserObject();
@@ -81,7 +81,7 @@ public List<AppDefinitionServiceRepresentation> getAppDefinitions() {
    */
   @Override
   public List<AppDefinitionServiceRepresentation> getDeployableAppDefinitions(User user) {
-    Map<Long, ModelHistory> modelMap = new HashMap<Long, ModelHistory>();
+    Map<String, ModelHistory> modelMap = new HashMap<String, ModelHistory>();
     List<AppDefinitionServiceRepresentation> resultList = new ArrayList<AppDefinitionServiceRepresentation>();
 
     List<ModelHistory> createdByModels = modelHistoryRepository.findByCreatedByAndModelTypeAndRemovalDateIsNull(user.getId(), AbstractModel.MODEL_TYPE_APP);
@@ -130,7 +130,7 @@ protected AppDefinitionServiceRepresentation createAppDefinition(AbstractModel m
       resultInfo.setIcon(appDefinition.getIcon());
       List<AppModelDefinition> models = appDefinition.getModels();
       if (CollectionUtils.isNotEmpty(models)) {
-        List<Long> modelIds = new ArrayList<Long>();
+        List<String> modelIds = new ArrayList<String>();
         for (AppModelDefinition appModelDef : models) {
           modelIds.add(appModelDef.getId());
         }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/BaseActivitiModelService.java
Patch:
@@ -43,7 +43,7 @@ public class BaseActivitiModelService {
   @Autowired
   protected IdentityService identityService;
 
-  protected Model getModel(Long modelId, boolean checkRead, boolean checkEdit) {
+  protected Model getModel(String modelId, boolean checkRead, boolean checkEdit) {
     Model model = modelRepository.findOne(modelId);
 
     if (model == null) {
@@ -55,7 +55,7 @@ protected Model getModel(Long modelId, boolean checkRead, boolean checkEdit) {
     return model;
   }
 
-  protected ModelHistory getModelHistory(Long modelId, Long modelHistoryId, boolean checkRead, boolean checkEdit) {
+  protected ModelHistory getModelHistory(String modelId, String modelHistoryId, boolean checkRead, boolean checkEdit) {
     // Check if the user has read-rights on the process-model in order to fetch history
     Model model = getModel(modelId, checkRead, checkEdit);
     ModelHistory modelHistory = modelHistoryRepository.findOne(modelHistoryId);

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelBpmnResource.java
Patch:
@@ -41,7 +41,7 @@ public class AbstractModelBpmnResource {
   @Autowired
   protected ModelService modelService;
 
-  public void getProcessModelBpmn20Xml(HttpServletResponse response, Long processModelId) throws IOException {
+  public void getProcessModelBpmn20Xml(HttpServletResponse response, String processModelId) throws IOException {
 
     if (processModelId == null) {
       throw new BadRequestException("No process model id provided");
@@ -51,7 +51,7 @@ public void getProcessModelBpmn20Xml(HttpServletResponse response, Long processM
     generateBpmn20Xml(response, model);
   }
 
-  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, Long processModelId, Long processModelHistoryId) throws IOException {
+  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, String processModelId, String processModelHistoryId) throws IOException {
 
     if (processModelId == null) {
       throw new BadRequestException("No process model id provided");

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelHistoryResource.java
Patch:
@@ -38,7 +38,7 @@ public class AbstractModelHistoryResource {
   @Autowired
   protected ObjectMapper objectMapper;
 
-  public ResultListDataRepresentation getModelHistoryCollection(Long modelId, Boolean includeLatestVersion) {
+  public ResultListDataRepresentation getModelHistoryCollection(String modelId, Boolean includeLatestVersion) {
 
     Model model = modelService.getModel(modelId);
     List<ModelHistory> history = modelHistoryRepository.findByModelIdAndRemovalDateIsNullOrderByVersionDesc(model.getId());
@@ -64,7 +64,7 @@ public ResultListDataRepresentation getModelHistoryCollection(Long modelId, Bool
     return result;
   }
 
-  public ModelRepresentation getProcessModelHistory(Long modelId, Long modelHistoryId) {
+  public ModelRepresentation getProcessModelHistory(String modelId, String modelHistoryId) {
     // Check if the user has read-rights on the process-model in order to fetch history
     ModelHistory modelHistory = modelService.getModelHistory(modelId, modelHistoryId);
     return new ModelRepresentation(modelHistory);

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelResource.java
Patch:
@@ -48,14 +48,14 @@ public class AbstractModelResource {
 
   protected BpmnXMLConverter bpmnXMLConverter = new BpmnXMLConverter();
 
-  public ModelRepresentation getModel(Long modelId) {
+  public ModelRepresentation getModel(String modelId) {
     Model model = modelService.getModel(modelId);
     ModelRepresentation result = new ModelRepresentation(model);
 
     return result;
   }
 
-  public byte[] getModelThumbnail(Long modelId) {
+  public byte[] getModelThumbnail(String modelId) {
     Model model = modelService.getModel(modelId);
 
     if (model == null) {
@@ -65,7 +65,7 @@ public byte[] getModelThumbnail(Long modelId) {
     return model.getThumbnail();
   }
 
-  public ModelRepresentation importNewVersion(Long modelId, MultipartFile file) {
+  public ModelRepresentation importNewVersion(String modelId, MultipartFile file) {
 
     Model processModel = modelService.getModel(modelId);
     User currentUser = SecurityUtils.getCurrentUserObject();

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelsResource.java
Patch:
@@ -105,7 +105,7 @@ public ResultListDataRepresentation getModels(String filter, String sort, Intege
     }
 
     if (CollectionUtils.isNotEmpty(models)) {
-      List<Long> addedModelIds = new ArrayList<Long>();
+      List<String> addedModelIds = new ArrayList<String>();
       for (Model model : models) {
         if (addedModelIds.contains(model.getId()) == false) {
           addedModelIds.add(model.getId());
@@ -125,7 +125,7 @@ public ResultListDataRepresentation getModelsToIncludeInAppDefinition() {
 
     User user = SecurityUtils.getCurrentUserObject();
 
-    List<Long> addedModelIds = new ArrayList<Long>();
+    List<String> addedModelIds = new ArrayList<String>();
 
     List<Model> models = modelRepository.findModelsCreatedBy(user.getId(), 0, getSort(null, false));
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/EditorDisplayJsonClientResource.java
Patch:
@@ -39,15 +39,15 @@ public class EditorDisplayJsonClientResource {
 	protected ObjectMapper objectMapper = new ObjectMapper();
 	
 	@RequestMapping(value = "/rest/models/{processModelId}/model-json", method = RequestMethod.GET, produces = "application/json")
-	public JsonNode getModelJSON(@PathVariable Long processModelId) {
+	public JsonNode getModelJSON(@PathVariable String processModelId) {
 		ObjectNode displayNode = objectMapper.createObjectNode();
 		Model model = modelService.getModel(processModelId);
 		bpmnDisplayJsonConverter.processProcessElements(model, displayNode, new GraphicInfo());
 		return displayNode;
 	}
 	
 	@RequestMapping(value = "/rest/models/{processModelId}/history/{processModelHistoryId}/model-json", method = RequestMethod.GET, produces = "application/json")
-    public JsonNode getModelHistoryJSON(@PathVariable Long processModelId, @PathVariable Long processModelHistoryId) {
+    public JsonNode getModelHistoryJSON(@PathVariable String processModelId, @PathVariable String processModelHistoryId) {
 	    ObjectNode displayNode = objectMapper.createObjectNode();
         ModelHistory model = modelService.getModelHistory(processModelId, processModelHistoryId);
         bpmnDisplayJsonConverter.processProcessElements(model, displayNode, new GraphicInfo());

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/FormResource.java
Patch:
@@ -37,7 +37,7 @@ public class FormResource {
   protected ActivitiFormService formService;
 
   @RequestMapping(value = "/{formId}", method = RequestMethod.GET, produces = "application/json")
-  public FormRepresentation getForm(@PathVariable Long formId) {
+  public FormRepresentation getForm(@PathVariable String formId) {
     return formService.getForm(formId);
   }
 
@@ -48,12 +48,12 @@ public List<FormRepresentation> getForms(HttpServletRequest request) {
   }
 
   @RequestMapping(value = "/{formId}/history/{formHistoryId}", method = RequestMethod.GET, produces = "application/json")
-  public FormRepresentation getFormHistory(@PathVariable Long formId, @PathVariable Long formHistoryId) {
+  public FormRepresentation getFormHistory(@PathVariable String formId, @PathVariable String formHistoryId) {
     return formService.getFormHistory(formId, formHistoryId);
   }
 
   @RequestMapping(value = "/{formId}", method = RequestMethod.PUT, produces = "application/json")
-  public FormRepresentation saveForm(@PathVariable Long formId, @RequestBody FormSaveRepresentation saveRepresentation) {
+  public FormRepresentation saveForm(@PathVariable String formId, @RequestBody FormSaveRepresentation saveRepresentation) {
     return formService.saveForm(formId, saveRepresentation);
   }
 }

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelBpmnResource.java
Patch:
@@ -31,15 +31,15 @@ public class ModelBpmnResource extends AbstractModelBpmnResource {
    * GET /rest/models/{modelId}/bpmn -> Get BPMN 2.0 xml
    */
   @RequestMapping(value = "/rest/models/{processModelId}/bpmn20", method = RequestMethod.GET)
-  public void getProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable Long processModelId) throws IOException {
+  public void getProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable String processModelId) throws IOException {
     super.getProcessModelBpmn20Xml(response, processModelId);
   }
 
   /**
    * GET /rest/models/{modelId}/history/{processModelHistoryId}/bpmn20 -> Get BPMN 2.0 xml
    */
   @RequestMapping(value = "/rest/models/{processModelId}/history/{processModelHistoryId}/bpmn20", method = RequestMethod.GET)
-  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable Long processModelId, @PathVariable Long processModelHistoryId) throws IOException {
+  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable String processModelId, @PathVariable String processModelHistoryId) throws IOException {
     super.getHistoricProcessModelBpmn20Xml(response, processModelId, processModelHistoryId);
   }
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelHistoryResource.java
Patch:
@@ -30,17 +30,17 @@
 public class ModelHistoryResource extends AbstractModelHistoryResource {
 
   @RequestMapping(value = "/rest/models/{modelId}/history", method = RequestMethod.GET, produces = "application/json")
-  public ResultListDataRepresentation getModelHistoryCollection(@PathVariable Long modelId, @RequestParam(value = "includeLatestVersion", required = false) Boolean includeLatestVersion) {
+  public ResultListDataRepresentation getModelHistoryCollection(@PathVariable String modelId, @RequestParam(value = "includeLatestVersion", required = false) Boolean includeLatestVersion) {
     return super.getModelHistoryCollection(modelId, includeLatestVersion);
   }
 
   @RequestMapping(value = "/rest/models/{modelId}/history/{modelHistoryId}", method = RequestMethod.GET, produces = "application/json")
-  public ModelRepresentation getProcessModelHistory(@PathVariable Long modelId, @PathVariable Long modelHistoryId) {
+  public ModelRepresentation getProcessModelHistory(@PathVariable String modelId, @PathVariable String modelHistoryId) {
     return super.getProcessModelHistory(modelId, modelHistoryId);
   }
 
   @RequestMapping(value = "/rest/models/{modelId}/history/{modelHistoryId}", method = RequestMethod.POST, produces = "application/json")
-  public ReviveModelResultRepresentation executeProcessModelHistoryAction(@PathVariable Long modelId, @PathVariable Long modelHistoryId,
+  public ReviveModelResultRepresentation executeProcessModelHistoryAction(@PathVariable String modelId, @PathVariable String modelHistoryId,
       @RequestBody(required = true) BaseRestActionRepresentation action) {
 
     // In order to execute actions on a historic process model, write permission is needed

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelRelationResource.java
Patch:
@@ -31,7 +31,7 @@ public class ModelRelationResource extends AbstractModelResource {
   private ModelRelationService modelRelationService;
 
   @RequestMapping(value = "/rest/models/{modelId}/parent-relations", method = RequestMethod.GET, produces = "application/json")
-  public List<ModelInformation> getModelRelations(@PathVariable Long modelId) {
+  public List<ModelInformation> getModelRelations(@PathVariable String modelId) {
     Model model = modelService.getModel(modelId);
     if (model == null) {
       throw new NotFoundException();

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelsResource.java
Patch:
@@ -165,7 +165,7 @@ public ModelRepresentation createModel(@RequestBody ModelRepresentation modelRep
   }
 
   @RequestMapping(value = "/rest/models/{modelId}/clone", method = RequestMethod.POST, produces = "application/json")
-  public ModelRepresentation duplicateModel(@PathVariable Long modelId, @RequestBody ModelRepresentation modelRepresentation) {
+  public ModelRepresentation duplicateModel(@PathVariable String modelId, @RequestBody ModelRepresentation modelRepresentation) {
 
     String json = null;
     Model model = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -439,7 +439,7 @@ public void deleteProcessInstanceExecutionEntity(String processInstanceId,
     
     // Call activities
     for (ExecutionEntity subExecutionEntity : processInstanceEntity.getExecutions()) {
-      if (subExecutionEntity.getSubProcessInstance() != null) {
+      if (subExecutionEntity.getSubProcessInstance() != null &&  !subExecutionEntity.isEnded()) {
         deleteProcessInstanceCascade(subExecutionEntity.getSubProcessInstance(), deleteReason, cascade);
       }
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceSuspensionTest.java
Patch:
@@ -586,7 +586,7 @@ public void testJobNotExecutedAfterProcessInstanceSuspend() {
 
     // Activation of the process instance should now allow for job execution
     runtimeService.activateProcessInstanceById(processInstance.getId());
-    waitForJobExecutorToProcessAllJobs(1000L, 100L);
+    waitForJobExecutorToProcessAllJobs(10000L, 100L);
     assertEquals(0, managementService.createJobQuery().count());
     assertEquals(0, managementService.createTimerJobQuery().count());
     assertEquals(0, managementService.createSuspendedJobQuery().count());

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -98,7 +98,7 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("log4j").artifactId("log4j").version("1.2.17"),
         mavenBundle().groupId("joda-time").artifactId("joda-time").version("2.6"),
         mavenBundle().groupId("com.h2database").artifactId("h2").version("1.3.176"),
-        mavenBundle().groupId("org.mybatis").artifactId("mybatis").version("3.3.0"),
+        mavenBundle().groupId("org.mybatis").artifactId("mybatis").version("3.4.2"),
         mavenBundle().groupId("org.slf4j").artifactId("slf4j-api").version("1.7.6"),
         mavenBundle().groupId("org.slf4j").artifactId("slf4j-log4j12").version("1.7.6").noStart(),
         mavenBundle().groupId("org.apache.felix").artifactId("org.apache.felix.fileinstall").version("3.5.4"),

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceSuspensionTest.java
Patch:
@@ -586,7 +586,7 @@ public void testJobNotExecutedAfterProcessInstanceSuspend() {
 
     // Activation of the process instance should now allow for job execution
     runtimeService.activateProcessInstanceById(processInstance.getId());
-    waitForJobExecutorToProcessAllJobs(1000L, 100L);
+    waitForJobExecutorToProcessAllJobs(10000L, 100L);
     assertEquals(0, managementService.createJobQuery().count());
     assertEquals(0, managementService.createTimerJobQuery().count());
     assertEquals(0, managementService.createSuspendedJobQuery().count());

File: modules/activiti-dmn-json-converter/src/main/java/org/activiti/editor/dmn/converter/DmnJsonConverter.java
Patch:
@@ -45,11 +45,11 @@ public class DmnJsonConverter {
 
     protected ObjectMapper objectMapper = new ObjectMapper();
 
-    public DmnDefinition convertToDmn(JsonNode modelNode, Long modelId, int modelVersion, Date lastUpdated) {
+    public DmnDefinition convertToDmn(JsonNode modelNode, String modelId, int modelVersion, Date lastUpdated) {
 
         DmnDefinition definition = new DmnDefinition();
 
-        definition.setId("definition_"+String.valueOf(modelId));
+        definition.setId("definition_"+modelId);
         definition.setName(DmnJsonConverterUtil.getValueAsString("name", modelNode));
         definition.setNamespace(MODEL_NAMESPACE);
         definition.setTypeLanguage(URI_JSON);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ActivityProcessor.java
Patch:
@@ -31,5 +31,5 @@ public void processFlowElements(FlowElementsContainer container, BpmnModel model
       Map<String, ModelInfo> formKeyMap, Map<String, ModelInfo> decisionTableKeyMap, double subProcessX, double subProcessY);
 
   public void processJsonElements(JsonNode shapesArrayNode, JsonNode modelNode, BaseElement parentElement, 
-      Map<String, JsonNode> shapeMap, Map<Long, String> formKeyMap, Map<Long, String> decisionTableMap, BpmnModel bpmnModel);
+      Map<String, JsonNode> shapeMap, Map<String, String> formKeyMap, Map<String, String> decisionTableMap, BpmnModel bpmnModel);
 }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -429,7 +429,7 @@ public BpmnModel convertToBpmnModel(JsonNode modelNode) {
     return convertToBpmnModel(modelNode, null, null);
   }
 
-  public BpmnModel convertToBpmnModel(JsonNode modelNode, Map<Long, String> formKeyMap, Map<Long, String> decisionTableKeyMap) {
+  public BpmnModel convertToBpmnModel(JsonNode modelNode, Map<String, String> formKeyMap, Map<String, String> decisionTableKeyMap) {
 
     BpmnModel bpmnModel = new BpmnModel();
 
@@ -623,7 +623,7 @@ public BpmnModel convertToBpmnModel(JsonNode modelNode, Map<Long, String> formKe
   }
 
   public void processJsonElements(JsonNode shapesArrayNode, JsonNode modelNode, BaseElement parentElement, Map<String, JsonNode> shapeMap, 
-      Map<Long, String> formMap, Map<Long, String> decisionTableMap, BpmnModel bpmnModel) {
+      Map<String, String> formMap, Map<String, String> decisionTableMap, BpmnModel bpmnModel) {
 
     for (JsonNode shapeNode : shapesArrayNode) {
       String stencilId = BpmnJsonConverterUtil.getStencilId(shapeNode);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/DecisionTableAwareConverter.java
Patch:
@@ -19,5 +19,5 @@
  */
 public interface DecisionTableAwareConverter {
 
-    public void setDecisionTableMap(Map<Long, String> decisionTableMap);
+    public void setDecisionTableMap(Map<String, String> decisionTableMap);
 }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/DecisionTaskJsonConverter.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class DecisionTaskJsonConverter extends BaseBpmnJsonConverter implements DecisionTableAwareConverter {
 
-  protected Map<Long, String> decisionTableMap;
+  protected Map<String, String> decisionTableMap;
 
   public static void fillTypes(Map<String, Class<? extends BaseBpmnJsonConverter>> convertersToBpmnMap,
       Map<Class<? extends BaseElement>, Class<? extends BaseBpmnJsonConverter>> convertersToJsonMap) {
@@ -78,7 +78,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
   }
   
   @Override
-  public void setDecisionTableMap(Map<Long, String> decisionTableMap) {
+  public void setDecisionTableMap(Map<String, String> decisionTableMap) {
     this.decisionTableMap = decisionTableMap;
   }
 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/FormAwareConverter.java
Patch:
@@ -19,5 +19,5 @@
  */
 public interface FormAwareConverter {
 
-    public void setFormMap(Map<Long, String> formMap);
+    public void setFormMap(Map<String, String> formMap);
 }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/StartEventJsonConverter.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class StartEventJsonConverter extends BaseBpmnJsonConverter implements FormAwareConverter, FormKeyAwareConverter {
 
-  protected Map<Long, String> formMap;
+  protected Map<String, String> formMap;
   protected Map<String, ModelInfo> formKeyMap;
 
   public static void fillTypes(Map<String, Class<? extends BaseBpmnJsonConverter>> convertersToBpmnMap, Map<Class<? extends BaseElement>, Class<? extends BaseBpmnJsonConverter>> convertersToJsonMap) {
@@ -138,7 +138,7 @@ protected void addExtensionElement(String name, String elementText, Event event)
   }
 
   @Override
-  public void setFormMap(Map<Long, String> formMap) {
+  public void setFormMap(Map<String, String> formMap) {
     this.formMap = formMap;
   }
   

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/UserTaskJsonConverter.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class UserTaskJsonConverter extends BaseBpmnJsonConverter implements FormAwareConverter, FormKeyAwareConverter {
 
-  protected Map<Long, String> formMap;
+  protected Map<String, String> formMap;
   protected Map<String, ModelInfo> formKeyMap;
 
   public static void fillTypes(Map<String, Class<? extends BaseBpmnJsonConverter>> convertersToBpmnMap, Map<Class<? extends BaseElement>, Class<? extends BaseBpmnJsonConverter>> convertersToJsonMap) {
@@ -555,7 +555,7 @@ protected void fillProperty(String propertyName, String extensionElementName, Ob
   }
   
   @Override
-  public void setFormMap(Map<Long, String> formMap) {
+  public void setFormMap(Map<String, String> formMap) {
     this.formMap = formMap;
   }
   

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/AbstractModel.java
Patch:
@@ -37,7 +37,7 @@ public class AbstractModel {
   @GeneratedValue(strategy = GenerationType.TABLE, generator = "modelIdGenerator")
   @TableGenerator(name = "modelIdGenerator", allocationSize = IdBlockSize.DEFAULT_ALLOCATION_SIZE)
   @Column(name = "id")
-  protected Long id;
+  protected String id;
 
   @Column(name = "name")
   protected String name;
@@ -78,11 +78,11 @@ public AbstractModel() {
     this.created = new Date();
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/AppModelDefinition.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class AppModelDefinition {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected Integer version;
   protected Integer modelType;
@@ -29,11 +29,11 @@ public class AppModelDefinition {
   protected String lastUpdatedBy;
   protected Date lastUpdated;
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/ModelHistory.java
Patch:
@@ -25,7 +25,7 @@
 public class ModelHistory extends AbstractModel {
 
 	@Column(name="model_id")
-	protected Long modelId;
+	protected String modelId;
 	
 	@Column(name="removal_date")
     @Temporal(TemporalType.TIMESTAMP)
@@ -35,11 +35,11 @@ public ModelHistory() {
 		super();
 	}
 
-	public Long getModelId() {
+	public String getModelId() {
 		return modelId;
 	}
 
-	public void setModelId(Long modelId) {
+	public void setModelId(String modelId) {
 		this.modelId = modelId;
 	}
 	

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/AppDefinitionRepresentation.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class AppDefinitionRepresentation extends AbstractRepresentation {
 
-  private Long id;
+  private String id;
   private String name;
   private String key;
   private String description;
@@ -45,11 +45,11 @@ public AppDefinitionRepresentation(AbstractModel model) {
     this.created = model.getCreated();
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/ModelKeyRepresentation.java
Patch:
@@ -23,7 +23,7 @@ public class ModelKeyRepresentation extends AbstractRepresentation {
 
   protected boolean keyAlreadyExists;
   protected String key;
-  protected Long id;
+  protected String id;
   protected String name;
   
   public boolean isKeyAlreadyExists() {
@@ -42,11 +42,11 @@ public void setKey(String key) {
     this.key = key;
   }
   
-  public Long getId() {
+  public String getId() {
     return id;
   }
   
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
   

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/ModelRepresentation.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class ModelRepresentation extends AbstractRepresentation {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected String key;
   protected String description;
@@ -66,11 +66,11 @@ public void initialize(AbstractModel model) {
     }
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableDefinitionRepresentation.java
Patch:
@@ -24,7 +24,7 @@
 @JsonInclude(Include.NON_NULL)
 public class DecisionTableDefinitionRepresentation {
 
-    protected Long id;
+    protected String id;
     protected String name;
     protected String key;
     protected String description;
@@ -34,11 +34,11 @@ public class DecisionTableDefinitionRepresentation {
     protected List<DecisionTableExpressionRepresentation> outputExpressions;
     protected List<Map<String,Object>> rules;
 
-    public Long getId() {
+    public String getId() {
         return id;
     }
 
-    public void setId(Long id) {
+    public void setId(String id) {
         this.id = id;
     }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableRepresentation.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class DecisionTableRepresentation extends AbstractRepresentation {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected String key;
   protected String description;
@@ -44,11 +44,11 @@ public DecisionTableRepresentation(AbstractModel model) {
   public DecisionTableRepresentation() {
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/form/FormRepresentation.java
Patch:
@@ -20,7 +20,7 @@
 
 public class FormRepresentation extends AbstractRepresentation {
 
-  protected Long id;
+  protected String id;
   protected String name;
   protected String key;
   protected String description;
@@ -42,11 +42,11 @@ public FormRepresentation(AbstractModel model) {
   public FormRepresentation() {
   }
 
-  public Long getId() {
+  public String getId() {
     return id;
   }
 
-  public void setId(Long id) {
+  public void setId(String id) {
     this.id = id;
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelHistoryRepository.java
Patch:
@@ -24,8 +24,10 @@ public interface ModelHistoryRepository extends JpaRepository<ModelHistory, Long
 
 	List<ModelHistory> findByCreatedByAndModelTypeAndRemovalDateIsNull(String createdBy, Integer modelType);
 	
-	List<ModelHistory> findByModelIdAndRemovalDateIsNullOrderByVersionDesc(Long modelId);
+	List<ModelHistory> findByModelIdAndRemovalDateIsNullOrderByVersionDesc(String modelId);
 	
 	List<ModelHistory> findByModelIdOrderByVersionDesc(Long modelId);
+
+    ModelHistory findOne(String id);
 	
 }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/AppDefinitionExportService.java
Patch:
@@ -48,7 +48,7 @@ public class AppDefinitionExportService {
   
   protected BpmnJsonConverter bpmnJsonConverter = new BpmnJsonConverter();
 
-  public void exportAppDefinition(HttpServletResponse response, Long modelId) throws IOException {
+  public void exportAppDefinition(HttpServletResponse response, String modelId) throws IOException {
 
     if (modelId == null) {
       throw new BadRequestException("No application definition id provided");
@@ -72,8 +72,8 @@ protected void createAppDefinitionZip(HttpServletResponse response, Model appMod
 
       List<AppModelDefinition> modelDefinitions = appDefinition.getDefinition().getModels();
       if (CollectionUtils.isNotEmpty(modelDefinitions)) {
-        Map<Long, Model> formMap = new HashMap<Long, Model>();
-        Map<Long, Model> decisionTableMap = new HashMap<Long, Model>();
+        Map<String, Model> formMap = new HashMap<String, Model>();
+        Map<String, Model> decisionTableMap = new HashMap<String, Model>();
 
         for (AppModelDefinition modelDef : modelDefinitions) {
           Model model = modelService.getModel(modelDef.getId());

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/AppDefinitionServiceImpl.java
Patch:
@@ -57,7 +57,7 @@ public class AppDefinitionServiceImpl implements AppDefinitionService {
 
   @Override
   public List<AppDefinitionServiceRepresentation> getAppDefinitions() {
-    Map<Long, AbstractModel> modelMap = new HashMap<Long, AbstractModel>();
+    Map<String, AbstractModel> modelMap = new HashMap<String, AbstractModel>();
     List<AppDefinitionServiceRepresentation> resultList = new ArrayList<AppDefinitionServiceRepresentation>();
 
     User user = SecurityUtils.getCurrentUserObject();
@@ -81,7 +81,7 @@ public List<AppDefinitionServiceRepresentation> getAppDefinitions() {
    */
   @Override
   public List<AppDefinitionServiceRepresentation> getDeployableAppDefinitions(User user) {
-    Map<Long, ModelHistory> modelMap = new HashMap<Long, ModelHistory>();
+    Map<String, ModelHistory> modelMap = new HashMap<String, ModelHistory>();
     List<AppDefinitionServiceRepresentation> resultList = new ArrayList<AppDefinitionServiceRepresentation>();
 
     List<ModelHistory> createdByModels = modelHistoryRepository.findByCreatedByAndModelTypeAndRemovalDateIsNull(user.getId(), AbstractModel.MODEL_TYPE_APP);
@@ -130,7 +130,7 @@ protected AppDefinitionServiceRepresentation createAppDefinition(AbstractModel m
       resultInfo.setIcon(appDefinition.getIcon());
       List<AppModelDefinition> models = appDefinition.getModels();
       if (CollectionUtils.isNotEmpty(models)) {
-        List<Long> modelIds = new ArrayList<Long>();
+        List<String> modelIds = new ArrayList<String>();
         for (AppModelDefinition appModelDef : models) {
           modelIds.add(appModelDef.getId());
         }

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/BaseActivitiModelService.java
Patch:
@@ -43,7 +43,7 @@ public class BaseActivitiModelService {
   @Autowired
   protected IdentityService identityService;
 
-  protected Model getModel(Long modelId, boolean checkRead, boolean checkEdit) {
+  protected Model getModel(String modelId, boolean checkRead, boolean checkEdit) {
     Model model = modelRepository.findOne(modelId);
 
     if (model == null) {
@@ -55,7 +55,7 @@ protected Model getModel(Long modelId, boolean checkRead, boolean checkEdit) {
     return model;
   }
 
-  protected ModelHistory getModelHistory(Long modelId, Long modelHistoryId, boolean checkRead, boolean checkEdit) {
+  protected ModelHistory getModelHistory(String modelId, String modelHistoryId, boolean checkRead, boolean checkEdit) {
     // Check if the user has read-rights on the process-model in order to fetch history
     Model model = getModel(modelId, checkRead, checkEdit);
     ModelHistory modelHistory = modelHistoryRepository.findOne(modelHistoryId);

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelBpmnResource.java
Patch:
@@ -41,7 +41,7 @@ public class AbstractModelBpmnResource {
   @Autowired
   protected ModelService modelService;
 
-  public void getProcessModelBpmn20Xml(HttpServletResponse response, Long processModelId) throws IOException {
+  public void getProcessModelBpmn20Xml(HttpServletResponse response, String processModelId) throws IOException {
 
     if (processModelId == null) {
       throw new BadRequestException("No process model id provided");
@@ -51,7 +51,7 @@ public void getProcessModelBpmn20Xml(HttpServletResponse response, Long processM
     generateBpmn20Xml(response, model);
   }
 
-  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, Long processModelId, Long processModelHistoryId) throws IOException {
+  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, String processModelId, String processModelHistoryId) throws IOException {
 
     if (processModelId == null) {
       throw new BadRequestException("No process model id provided");

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelHistoryResource.java
Patch:
@@ -38,7 +38,7 @@ public class AbstractModelHistoryResource {
   @Autowired
   protected ObjectMapper objectMapper;
 
-  public ResultListDataRepresentation getModelHistoryCollection(Long modelId, Boolean includeLatestVersion) {
+  public ResultListDataRepresentation getModelHistoryCollection(String modelId, Boolean includeLatestVersion) {
 
     Model model = modelService.getModel(modelId);
     List<ModelHistory> history = modelHistoryRepository.findByModelIdAndRemovalDateIsNullOrderByVersionDesc(model.getId());
@@ -64,7 +64,7 @@ public ResultListDataRepresentation getModelHistoryCollection(Long modelId, Bool
     return result;
   }
 
-  public ModelRepresentation getProcessModelHistory(Long modelId, Long modelHistoryId) {
+  public ModelRepresentation getProcessModelHistory(String modelId, String modelHistoryId) {
     // Check if the user has read-rights on the process-model in order to fetch history
     ModelHistory modelHistory = modelService.getModelHistory(modelId, modelHistoryId);
     return new ModelRepresentation(modelHistory);

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelResource.java
Patch:
@@ -48,14 +48,14 @@ public class AbstractModelResource {
 
   protected BpmnXMLConverter bpmnXMLConverter = new BpmnXMLConverter();
 
-  public ModelRepresentation getModel(Long modelId) {
+  public ModelRepresentation getModel(String modelId) {
     Model model = modelService.getModel(modelId);
     ModelRepresentation result = new ModelRepresentation(model);
 
     return result;
   }
 
-  public byte[] getModelThumbnail(Long modelId) {
+  public byte[] getModelThumbnail(String modelId) {
     Model model = modelService.getModel(modelId);
 
     if (model == null) {
@@ -65,7 +65,7 @@ public byte[] getModelThumbnail(Long modelId) {
     return model.getThumbnail();
   }
 
-  public ModelRepresentation importNewVersion(Long modelId, MultipartFile file) {
+  public ModelRepresentation importNewVersion(String modelId, MultipartFile file) {
 
     Model processModel = modelService.getModel(modelId);
     User currentUser = SecurityUtils.getCurrentUserObject();

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/AbstractModelsResource.java
Patch:
@@ -105,7 +105,7 @@ public ResultListDataRepresentation getModels(String filter, String sort, Intege
     }
 
     if (CollectionUtils.isNotEmpty(models)) {
-      List<Long> addedModelIds = new ArrayList<Long>();
+      List<String> addedModelIds = new ArrayList<String>();
       for (Model model : models) {
         if (addedModelIds.contains(model.getId()) == false) {
           addedModelIds.add(model.getId());
@@ -125,7 +125,7 @@ public ResultListDataRepresentation getModelsToIncludeInAppDefinition() {
 
     User user = SecurityUtils.getCurrentUserObject();
 
-    List<Long> addedModelIds = new ArrayList<Long>();
+    List<String> addedModelIds = new ArrayList<String>();
 
     List<Model> models = modelRepository.findModelsCreatedBy(user.getId(), 0, getSort(null, false));
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/EditorDisplayJsonClientResource.java
Patch:
@@ -39,15 +39,15 @@ public class EditorDisplayJsonClientResource {
 	protected ObjectMapper objectMapper = new ObjectMapper();
 	
 	@RequestMapping(value = "/rest/models/{processModelId}/model-json", method = RequestMethod.GET, produces = "application/json")
-	public JsonNode getModelJSON(@PathVariable Long processModelId) {
+	public JsonNode getModelJSON(@PathVariable String processModelId) {
 		ObjectNode displayNode = objectMapper.createObjectNode();
 		Model model = modelService.getModel(processModelId);
 		bpmnDisplayJsonConverter.processProcessElements(model, displayNode, new GraphicInfo());
 		return displayNode;
 	}
 	
 	@RequestMapping(value = "/rest/models/{processModelId}/history/{processModelHistoryId}/model-json", method = RequestMethod.GET, produces = "application/json")
-    public JsonNode getModelHistoryJSON(@PathVariable Long processModelId, @PathVariable Long processModelHistoryId) {
+    public JsonNode getModelHistoryJSON(@PathVariable String processModelId, @PathVariable String processModelHistoryId) {
 	    ObjectNode displayNode = objectMapper.createObjectNode();
         ModelHistory model = modelService.getModelHistory(processModelId, processModelHistoryId);
         bpmnDisplayJsonConverter.processProcessElements(model, displayNode, new GraphicInfo());

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/FormResource.java
Patch:
@@ -37,7 +37,7 @@ public class FormResource {
   protected ActivitiFormService formService;
 
   @RequestMapping(value = "/{formId}", method = RequestMethod.GET, produces = "application/json")
-  public FormRepresentation getForm(@PathVariable Long formId) {
+  public FormRepresentation getForm(@PathVariable String formId) {
     return formService.getForm(formId);
   }
 
@@ -48,12 +48,12 @@ public List<FormRepresentation> getForms(HttpServletRequest request) {
   }
 
   @RequestMapping(value = "/{formId}/history/{formHistoryId}", method = RequestMethod.GET, produces = "application/json")
-  public FormRepresentation getFormHistory(@PathVariable Long formId, @PathVariable Long formHistoryId) {
+  public FormRepresentation getFormHistory(@PathVariable String formId, @PathVariable String formHistoryId) {
     return formService.getFormHistory(formId, formHistoryId);
   }
 
   @RequestMapping(value = "/{formId}", method = RequestMethod.PUT, produces = "application/json")
-  public FormRepresentation saveForm(@PathVariable Long formId, @RequestBody FormSaveRepresentation saveRepresentation) {
+  public FormRepresentation saveForm(@PathVariable String formId, @RequestBody FormSaveRepresentation saveRepresentation) {
     return formService.saveForm(formId, saveRepresentation);
   }
 }

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelBpmnResource.java
Patch:
@@ -31,15 +31,15 @@ public class ModelBpmnResource extends AbstractModelBpmnResource {
    * GET /rest/models/{modelId}/bpmn -> Get BPMN 2.0 xml
    */
   @RequestMapping(value = "/rest/models/{processModelId}/bpmn20", method = RequestMethod.GET)
-  public void getProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable Long processModelId) throws IOException {
+  public void getProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable String processModelId) throws IOException {
     super.getProcessModelBpmn20Xml(response, processModelId);
   }
 
   /**
    * GET /rest/models/{modelId}/history/{processModelHistoryId}/bpmn20 -> Get BPMN 2.0 xml
    */
   @RequestMapping(value = "/rest/models/{processModelId}/history/{processModelHistoryId}/bpmn20", method = RequestMethod.GET)
-  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable Long processModelId, @PathVariable Long processModelHistoryId) throws IOException {
+  public void getHistoricProcessModelBpmn20Xml(HttpServletResponse response, @PathVariable String processModelId, @PathVariable String processModelHistoryId) throws IOException {
     super.getHistoricProcessModelBpmn20Xml(response, processModelId, processModelHistoryId);
   }
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelHistoryResource.java
Patch:
@@ -30,17 +30,17 @@
 public class ModelHistoryResource extends AbstractModelHistoryResource {
 
   @RequestMapping(value = "/rest/models/{modelId}/history", method = RequestMethod.GET, produces = "application/json")
-  public ResultListDataRepresentation getModelHistoryCollection(@PathVariable Long modelId, @RequestParam(value = "includeLatestVersion", required = false) Boolean includeLatestVersion) {
+  public ResultListDataRepresentation getModelHistoryCollection(@PathVariable String modelId, @RequestParam(value = "includeLatestVersion", required = false) Boolean includeLatestVersion) {
     return super.getModelHistoryCollection(modelId, includeLatestVersion);
   }
 
   @RequestMapping(value = "/rest/models/{modelId}/history/{modelHistoryId}", method = RequestMethod.GET, produces = "application/json")
-  public ModelRepresentation getProcessModelHistory(@PathVariable Long modelId, @PathVariable Long modelHistoryId) {
+  public ModelRepresentation getProcessModelHistory(@PathVariable String modelId, @PathVariable String modelHistoryId) {
     return super.getProcessModelHistory(modelId, modelHistoryId);
   }
 
   @RequestMapping(value = "/rest/models/{modelId}/history/{modelHistoryId}", method = RequestMethod.POST, produces = "application/json")
-  public ReviveModelResultRepresentation executeProcessModelHistoryAction(@PathVariable Long modelId, @PathVariable Long modelHistoryId,
+  public ReviveModelResultRepresentation executeProcessModelHistoryAction(@PathVariable String modelId, @PathVariable String modelHistoryId,
       @RequestBody(required = true) BaseRestActionRepresentation action) {
 
     // In order to execute actions on a historic process model, write permission is needed

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelRelationResource.java
Patch:
@@ -31,7 +31,7 @@ public class ModelRelationResource extends AbstractModelResource {
   private ModelRelationService modelRelationService;
 
   @RequestMapping(value = "/rest/models/{modelId}/parent-relations", method = RequestMethod.GET, produces = "application/json")
-  public List<ModelInformation> getModelRelations(@PathVariable Long modelId) {
+  public List<ModelInformation> getModelRelations(@PathVariable String modelId) {
     Model model = modelService.getModel(modelId);
     if (model == null) {
       throw new NotFoundException();

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelsResource.java
Patch:
@@ -165,7 +165,7 @@ public ModelRepresentation createModel(@RequestBody ModelRepresentation modelRep
   }
 
   @RequestMapping(value = "/rest/models/{modelId}/clone", method = RequestMethod.POST, produces = "application/json")
-  public ModelRepresentation duplicateModel(@PathVariable Long modelId, @RequestBody ModelRepresentation modelRepresentation) {
+  public ModelRepresentation duplicateModel(@PathVariable String modelId, @RequestBody ModelRepresentation modelRepresentation) {
 
     String json = null;
     Model model = null;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/UserTaskJsonConverter.java
Patch:
@@ -91,7 +91,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
             fillProperty("name", "assignee-field-info-name", assigneeNode, userTask);
 
           } else {
-            assigneeNode.put("id", Long.valueOf(userTask.getAssignee()));
+            assigneeNode.put("id", userTask.getAssignee());
             idmNode.set("assignee", assigneeNode);
             idmNode.put("type", "user");
 
@@ -149,7 +149,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
             idmNode.put("type", "users");
             for (String candidateUser : candidateUserIds) {
               ObjectNode candidateUserNode = objectMapper.createObjectNode();
-              candidateUserNode.put("id", Long.valueOf(candidateUser));
+              candidateUserNode.put("id", candidateUser);
               candidateUsersNode.add(candidateUserNode);
 
               fillProperty("externalId", "user-info-externalid-" + candidateUser, candidateUserNode, userTask);
@@ -207,7 +207,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
             idmNode.put("type", "groups");
             for (String candidateGroup : candidateGroupIds) {
               ObjectNode candidateGroupNode = objectMapper.createObjectNode();
-              candidateGroupNode.put("id", Long.valueOf(candidateGroup));
+              candidateGroupNode.put("id", candidateGroup);
               candidateGroupsNode.add(candidateGroupNode);
 
               fillProperty("externalId", "group-info-externalid-" + candidateGroup, candidateGroupNode, userTask);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/TaskInvolvementTest.java
Patch:
@@ -26,7 +26,7 @@ public void testQueryByInvolvedGroupOrUserO() {
             assertEquals(1, taskService.createTaskQuery()
                     .or()
                     .taskInvolvedUser("involvedUser")
-                    .taskInvolvedGroups(groups)
+                    .taskInvolvedGroupsIn(groups)
                     .endOr()
                     .count());
 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/UserTaskJsonConverter.java
Patch:
@@ -91,7 +91,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
             fillProperty("name", "assignee-field-info-name", assigneeNode, userTask);
 
           } else {
-            assigneeNode.put("id", Long.valueOf(userTask.getAssignee()));
+            assigneeNode.put("id", userTask.getAssignee());
             idmNode.set("assignee", assigneeNode);
             idmNode.put("type", "user");
 
@@ -149,7 +149,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
             idmNode.put("type", "users");
             for (String candidateUser : candidateUserIds) {
               ObjectNode candidateUserNode = objectMapper.createObjectNode();
-              candidateUserNode.put("id", Long.valueOf(candidateUser));
+              candidateUserNode.put("id", candidateUser);
               candidateUsersNode.add(candidateUserNode);
 
               fillProperty("externalId", "user-info-externalid-" + candidateUser, candidateUserNode, userTask);
@@ -207,7 +207,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
             idmNode.put("type", "groups");
             for (String candidateGroup : candidateGroupIds) {
               ObjectNode candidateGroupNode = objectMapper.createObjectNode();
-              candidateGroupNode.put("id", Long.valueOf(candidateGroup));
+              candidateGroupNode.put("id", candidateGroup);
               candidateGroupsNode.add(candidateGroupNode);
 
               fillProperty("externalId", "group-info-externalid-" + candidateGroup, candidateGroupNode, userTask);

File: modules/activiti-camel/src/test/java/org/activiti/camel/revisited/AsyncProcessRevisitedTest.java
Patch:
@@ -53,7 +53,7 @@ public void testRunProcess() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("asyncCamelProcessRevisited");
     List<Execution> executionList = runtimeService.createExecutionQuery().list();
     assertEquals(3, executionList.size());
-    waitForJobExecutorToProcessAllJobs(3000, 500);
+    waitForJobExecutorToProcessAllJobs(5000, 500);
     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
   }
 }

File: modules/activiti-dmn-rest/src/main/java/org/activiti/rest/dmn/service/api/repository/DecisionTableResourceDataResource.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.bind.annotation.RestController;
 
 /**
@@ -27,7 +28,7 @@
 public class DecisionTableResourceDataResource extends BaseDecisionTableResource {
 
   @RequestMapping(value = "/dmn-repository/decision-tables/{decisionTableId}/resourcedata", method = RequestMethod.GET, produces = "application/json")
-  public byte[] getDecisionTableResource(@PathVariable String decisionTableId, HttpServletResponse response) {
+  public @ResponseBody byte[] getDecisionTableResource(@PathVariable String decisionTableId, HttpServletResponse response) {
     DecisionTable decisionTable = geDecisionTableFromRequest(decisionTableId);
     return getDeploymentResourceData(decisionTable.getDeploymentId(), decisionTable.getResourceName(), response);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
-import org.activiti.engine.impl.runtime.Agenda;
+import org.activiti.engine.Agenda;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 
 /**
@@ -110,7 +110,7 @@ public Agenda getAgenda() {
     return agenda;
   }
 
-  public void setAgenda(DefaultActivitiAgenda agenda) {
+  public void setAgenda(DefaultActivitiEngineAgenda agenda) {
     this.agenda = agenda;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -79,7 +79,7 @@ protected void handleProcessInstanceExecution(ExecutionEntity processInstanceExe
 
    // note the use of execution here vs processinstance execution for getting the flowelement
       executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceId,
-          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false, true);
+          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false);
     } else {
       logger.debug("Active executions found. Process instance {} will not be ended.", processInstanceId);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -150,7 +150,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution.getId(),
-            subProcessExecution.getCurrentActivityId(), deleteReason, true, false, true);
+            subProcessExecution.getCurrentActivityId(), deleteReason, true, true);
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -198,7 +198,7 @@ public void leave(DelegateExecution execution) {
                     && callActivityExecutionIds.contains(childExecution.getSuperExecutionId())) {
 
                   executionEntityManager.deleteProcessInstanceExecutionEntity(childExecution.getId(), activity.getId(),
-                      "call activity completion condition met", true, false, true);
+                      "call activity completion condition met", true, false);
                 }
               }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -116,11 +116,11 @@ protected void defaultTerminateEndEventBehaviour(DelegateExecution execution, Co
 
         MultiInstanceActivityBehavior multiInstanceBehavior = (MultiInstanceActivityBehavior) callActivity.getBehavior();
         multiInstanceBehavior.leave(callActivityExecution);
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
 
       } else {
 
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
         ExecutionEntity superExecutionEntity = executionEntityManager.findById(scopeExecutionEntity.getSuperExecutionId());
         Context.getAgenda().planTakeOutgoingSequenceFlowsOperation(superExecutionEntity, true);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -70,7 +70,7 @@ public static void propagateError(String errorCode, DelegateExecution execution)
               executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceEntity.getId(),
                   execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null,
                   "ERROR_EVENT " + errorCode,
-                  false, false, false);
+                  false, false);
 
               // Event
               if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/context/Context.java
Patch:
@@ -14,12 +14,13 @@
 package org.activiti.engine.impl.context;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
+
+import org.activiti.engine.ActivitiEngineAgenda;
 import org.activiti.engine.compatibility.Activiti5CompatibilityHandler;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.TransactionContext;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.deploy.ProcessDefinitionInfoCacheObject;
-import org.activiti.engine.impl.runtime.ActivitiAgenda;
 
 import java.util.*;
 
@@ -49,7 +50,7 @@ public static CommandContext getCommandContext() {
     return stack.peek();
   }
 
-  public static ActivitiAgenda getAgenda() {
+  public static ActivitiEngineAgenda getAgenda() {
     return getCommandContext().getAgenda();
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandInvoker.java
Patch:
@@ -32,7 +32,6 @@ public <T> T execute(final CommandConfig config, final Command<T> command) {
     // Execute the command.
     // This will produce operations that will be put on the agenda.
     commandContext.getAgenda().planOperation(new Runnable() {
-
       @Override
       public void run() {
         commandContext.setResult(command.execute(commandContext));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -90,7 +90,7 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
   void deleteProcessInstance(String processInstanceId, String deleteReason, boolean cascade);
   
   void deleteProcessInstanceExecutionEntity(String processInstanceId, String currentFlowElementId, 
-      String deleteReason, boolean cascade, boolean cancel, boolean fireEvent);
+      String deleteReason, boolean cascade, boolean cancel);
   
   void deleteChildExecutions(ExecutionEntity executionEntity, String deleteReason, boolean cancel);
   

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/DeploymentResourceDataResource.java
Patch:
@@ -40,10 +40,10 @@ public class DeploymentResourceDataResource extends BaseDeploymentResourceDataRe
       @ApiResponse(code = 404, message = "Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information.")})
   @ApiOperation(value = "Get a deployment resource content", tags = {"Deployment"}, nickname = "getDeploymentResourceData",
   notes = "The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.")
-  @RequestMapping(value = "/repository/deployments/{deploymentId}/resourcedata/{resourceId}", method = RequestMethod.GET)
+  @RequestMapping(value = "/repository/deployments/{deploymentId}/resourcedata/{resourceName}", method = RequestMethod.GET)
   public @ResponseBody
-  byte[] getDeploymentResource(@ApiParam(name = "deploymentId", value="The id of the deployment the requested resource is part of.") @PathVariable("deploymentId") String deploymentId,@ApiParam(name = "resourceId", value = "The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.")  @PathVariable("resourceId") String resourceId, HttpServletResponse response) {
+  byte[] getDeploymentResource(@ApiParam(name = "deploymentId", value="The id of the deployment the requested resource is part of.") @PathVariable("deploymentId") String deploymentId,@ApiParam(name = "resourceName", value = "The name of the resource to get the data for. Make sure you URL-encode the resourceName in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.")  @PathVariable("resourceName") String resourceName, HttpServletResponse response) {
 
-    return getDeploymentResourceData(deploymentId, resourceId, response);
+    return getDeploymentResourceData(deploymentId, resourceName, response);
   }
 }

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/jpa/BaseJPARestTestCase.java
Patch:
@@ -74,7 +74,7 @@
 
 import junit.framework.AssertionFailedError;
 
-public class BaseJPARestTestCase extends AbstractTestCase {
+public abstract class BaseJPARestTestCase extends AbstractTestCase {
 
   private static Logger log = LoggerFactory.getLogger(BaseJPARestTestCase.class);
 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/BaseSpringRestTestCase.java
Patch:
@@ -73,7 +73,7 @@
 
 import junit.framework.AssertionFailedError;
 
-public class BaseSpringRestTestCase extends AbstractTestCase {
+public abstract class BaseSpringRestTestCase extends AbstractTestCase {
 
   private static Logger log = LoggerFactory.getLogger(BaseSpringRestTestCase.class);
   

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/UserDetailsService.java
Patch:
@@ -60,7 +60,6 @@ public UserDetails loadUserByUsername(final String login) {
     String actualLogin = login;
     User userFromDatabase = null;
 
-    actualLogin = login.toLowerCase();
     userFromDatabase = identityService.createUserQuery().userId(actualLogin).singleResult();
 
     // Verify user

File: modules/activiti-engine/src/main/java/org/activiti/engine/ActivitiEngineAgenda.java
Patch:
@@ -19,8 +19,6 @@
  */
 public interface ActivitiEngineAgenda extends Agenda {
 
-    void planOperation(Runnable operation, ExecutionEntity executionEntity);
-
     void planContinueProcessOperation(ExecutionEntity execution);
 
     void planContinueProcessSynchronousOperation(ExecutionEntity execution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/Agenda.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine;
 
+import org.activiti.engine.impl.agenda.AbstractOperation;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ActivityBehavior;
 import org.activiti.engine.impl.interceptor.Command;
@@ -36,6 +37,6 @@ public interface Agenda {
   /**
    * Generic method to plan a {@link Runnable}.
    */
-  void planOperation(Runnable operation);
+  void planOperation(AbstractOperation operation);
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandInvoker.java
Patch:
@@ -31,8 +31,7 @@ public <T> T execute(final CommandConfig config, final Command<T> command) {
 
     // Execute the command.
     // This will produce operations that will be put on the agenda.
-    commandContext.getAgenda().planOperation(new Runnable() {
-
+    commandContext.getAgenda().planOperation(new AbstractOperation(commandContext, null) {
       @Override
       public void run() {
         commandContext.setResult(command.execute(commandContext));

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/jpa/BaseJPARestTestCase.java
Patch:
@@ -74,7 +74,7 @@
 
 import junit.framework.AssertionFailedError;
 
-public class BaseJPARestTestCase extends AbstractTestCase {
+public abstract class BaseJPARestTestCase extends AbstractTestCase {
 
   private static Logger log = LoggerFactory.getLogger(BaseJPARestTestCase.class);
 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/BaseSpringRestTestCase.java
Patch:
@@ -73,7 +73,7 @@
 
 import junit.framework.AssertionFailedError;
 
-public class BaseSpringRestTestCase extends AbstractTestCase {
+public abstract class BaseSpringRestTestCase extends AbstractTestCase {
 
   private static Logger log = LoggerFactory.getLogger(BaseSpringRestTestCase.class);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
-import org.activiti.engine.impl.runtime.Agenda;
+import org.activiti.engine.Agenda;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 
 /**
@@ -110,7 +110,7 @@ public Agenda getAgenda() {
     return agenda;
   }
 
-  public void setAgenda(DefaultActivitiAgenda agenda) {
+  public void setAgenda(DefaultActivitiEngineAgenda agenda) {
     this.agenda = agenda;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/context/Context.java
Patch:
@@ -14,12 +14,13 @@
 package org.activiti.engine.impl.context;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
+
+import org.activiti.engine.ActivitiEngineAgenda;
 import org.activiti.engine.compatibility.Activiti5CompatibilityHandler;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.TransactionContext;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.deploy.ProcessDefinitionInfoCacheObject;
-import org.activiti.engine.impl.runtime.ActivitiAgenda;
 
 import java.util.*;
 
@@ -49,7 +50,7 @@ public static CommandContext getCommandContext() {
     return stack.peek();
   }
 
-  public static ActivitiAgenda getAgenda() {
+  public static ActivitiEngineAgenda getAgenda() {
     return getCommandContext().getAgenda();
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
-import org.activiti.engine.impl.runtime.Agenda;
+import org.activiti.engine.Agenda;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 
 /**
@@ -110,7 +110,7 @@ public Agenda getAgenda() {
     return agenda;
   }
 
-  public void setAgenda(DefaultActivitiAgenda agenda) {
+  public void setAgenda(DefaultActivitiEngineAgenda agenda) {
     this.agenda = agenda;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/context/Context.java
Patch:
@@ -14,12 +14,13 @@
 package org.activiti.engine.impl.context;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
+
+import org.activiti.engine.ActivitiEngineAgenda;
 import org.activiti.engine.compatibility.Activiti5CompatibilityHandler;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.TransactionContext;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.deploy.ProcessDefinitionInfoCacheObject;
-import org.activiti.engine.impl.runtime.ActivitiAgenda;
 
 import java.util.*;
 
@@ -49,7 +50,7 @@ public static CommandContext getCommandContext() {
     return stack.peek();
   }
 
-  public static ActivitiAgenda getAgenda() {
+  public static ActivitiEngineAgenda getAgenda() {
     return getCommandContext().getAgenda();
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -79,7 +79,7 @@ protected void handleProcessInstanceExecution(ExecutionEntity processInstanceExe
 
    // note the use of execution here vs processinstance execution for getting the flowelement
       executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceId,
-          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false, true);
+          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false);
     } else {
       logger.debug("Active executions found. Process instance {} will not be ended.", processInstanceId);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -150,7 +150,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution.getId(),
-            subProcessExecution.getCurrentActivityId(), deleteReason, true, false, true);
+            subProcessExecution.getCurrentActivityId(), deleteReason, true, true);
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -198,7 +198,7 @@ public void leave(DelegateExecution execution) {
                     && callActivityExecutionIds.contains(childExecution.getSuperExecutionId())) {
 
                   executionEntityManager.deleteProcessInstanceExecutionEntity(childExecution.getId(), activity.getId(),
-                      "call activity completion condition met", true, false, true);
+                      "call activity completion condition met", true, false);
                 }
               }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -116,11 +116,11 @@ protected void defaultTerminateEndEventBehaviour(DelegateExecution execution, Co
 
         MultiInstanceActivityBehavior multiInstanceBehavior = (MultiInstanceActivityBehavior) callActivity.getBehavior();
         multiInstanceBehavior.leave(callActivityExecution);
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
 
       } else {
 
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
         ExecutionEntity superExecutionEntity = executionEntityManager.findById(scopeExecutionEntity.getSuperExecutionId());
         Context.getAgenda().planTakeOutgoingSequenceFlowsOperation(superExecutionEntity, true);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -70,7 +70,7 @@ public static void propagateError(String errorCode, DelegateExecution execution)
               executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceEntity.getId(),
                   execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null,
                   "ERROR_EVENT " + errorCode,
-                  false, false, false);
+                  false, false);
 
               // Event
               if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -90,7 +90,7 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
   void deleteProcessInstance(String processInstanceId, String deleteReason, boolean cascade);
   
   void deleteProcessInstanceExecutionEntity(String processInstanceId, String currentFlowElementId, 
-      String deleteReason, boolean cascade, boolean cancel, boolean fireEvent);
+      String deleteReason, boolean cascade, boolean cancel);
   
   void deleteChildExecutions(ExecutionEntity executionEntity, String deleteReason, boolean cancel);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -79,7 +79,7 @@ protected void handleProcessInstanceExecution(ExecutionEntity processInstanceExe
 
    // note the use of execution here vs processinstance execution for getting the flowelement
       executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceId,
-          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false, true);
+          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false);
     } else {
       logger.debug("Active executions found. Process instance {} will not be ended.", processInstanceId);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -150,7 +150,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution.getId(),
-            subProcessExecution.getCurrentActivityId(), deleteReason, true, false, true);
+            subProcessExecution.getCurrentActivityId(), deleteReason, true, true);
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -198,7 +198,7 @@ public void leave(DelegateExecution execution) {
                     && callActivityExecutionIds.contains(childExecution.getSuperExecutionId())) {
 
                   executionEntityManager.deleteProcessInstanceExecutionEntity(childExecution.getId(), activity.getId(),
-                      "call activity completion condition met", true, false, true);
+                      "call activity completion condition met", true, false);
                 }
               }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -116,11 +116,11 @@ protected void defaultTerminateEndEventBehaviour(DelegateExecution execution, Co
 
         MultiInstanceActivityBehavior multiInstanceBehavior = (MultiInstanceActivityBehavior) callActivity.getBehavior();
         multiInstanceBehavior.leave(callActivityExecution);
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
 
       } else {
 
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
         ExecutionEntity superExecutionEntity = executionEntityManager.findById(scopeExecutionEntity.getSuperExecutionId());
         Context.getAgenda().planTakeOutgoingSequenceFlowsOperation(superExecutionEntity, true);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -70,7 +70,7 @@ public static void propagateError(String errorCode, DelegateExecution execution)
               executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceEntity.getId(),
                   execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null,
                   "ERROR_EVENT " + errorCode,
-                  false, false, false);
+                  false, false);
 
               // Event
               if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -90,7 +90,7 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
   void deleteProcessInstance(String processInstanceId, String deleteReason, boolean cascade);
   
   void deleteProcessInstanceExecutionEntity(String processInstanceId, String currentFlowElementId, 
-      String deleteReason, boolean cascade, boolean cancel, boolean fireEvent);
+      String deleteReason, boolean cascade, boolean cancel);
   
   void deleteChildExecutions(ExecutionEntity executionEntity, String deleteReason, boolean cancel);
   

File: modules/activiti-dmn-rest/src/main/java/org/activiti/rest/dmn/service/api/repository/DecisionTableResourceDataResource.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.bind.annotation.RestController;
 
 /**
@@ -27,7 +28,7 @@
 public class DecisionTableResourceDataResource extends BaseDecisionTableResource {
 
   @RequestMapping(value = "/dmn-repository/decision-tables/{decisionTableId}/resourcedata", method = RequestMethod.GET, produces = "application/json")
-  public byte[] getDecisionTableResource(@PathVariable String decisionTableId, HttpServletResponse response) {
+  public @ResponseBody byte[] getDecisionTableResource(@PathVariable String decisionTableId, HttpServletResponse response) {
     DecisionTable decisionTable = geDecisionTableFromRequest(decisionTableId);
     return getDeploymentResourceData(decisionTable.getDeploymentId(), decisionTable.getResourceName(), response);
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/DeploymentResourceDataResource.java
Patch:
@@ -40,10 +40,10 @@ public class DeploymentResourceDataResource extends BaseDeploymentResourceDataRe
       @ApiResponse(code = 404, message = "Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information.")})
   @ApiOperation(value = "Get a deployment resource content", tags = {"Deployment"}, nickname = "getDeploymentResourceData",
   notes = "The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.")
-  @RequestMapping(value = "/repository/deployments/{deploymentId}/resourcedata/{resourceId}", method = RequestMethod.GET)
+  @RequestMapping(value = "/repository/deployments/{deploymentId}/resourcedata/{resourceName}", method = RequestMethod.GET)
   public @ResponseBody
-  byte[] getDeploymentResource(@ApiParam(name = "deploymentId", value="The id of the deployment the requested resource is part of.") @PathVariable("deploymentId") String deploymentId,@ApiParam(name = "resourceId", value = "The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.")  @PathVariable("resourceId") String resourceId, HttpServletResponse response) {
+  byte[] getDeploymentResource(@ApiParam(name = "deploymentId", value="The id of the deployment the requested resource is part of.") @PathVariable("deploymentId") String deploymentId,@ApiParam(name = "resourceName", value = "The name of the resource to get the data for. Make sure you URL-encode the resourceName in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.")  @PathVariable("resourceName") String resourceName, HttpServletResponse response) {
 
-    return getDeploymentResourceData(deploymentId, resourceId, response);
+    return getDeploymentResourceData(deploymentId, resourceName, response);
   }
 }

File: modules/activiti-camel/src/test/java/org/activiti/camel/revisited/AsyncProcessRevisitedTest.java
Patch:
@@ -53,7 +53,7 @@ public void testRunProcess() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("asyncCamelProcessRevisited");
     List<Execution> executionList = runtimeService.createExecutionQuery().list();
     assertEquals(3, executionList.size());
-    waitForJobExecutorToProcessAllJobs(3000, 500);
+    waitForJobExecutorToProcessAllJobs(5000, 500);
     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
   }
 }

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/idm/IdmProfileResource.java
Patch:
@@ -15,7 +15,6 @@
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.List;
 
 import javax.servlet.ServletOutputStream;
@@ -33,7 +32,6 @@
 import org.activiti.engine.identity.Picture;
 import org.activiti.engine.identity.User;
 import org.activiti.engine.impl.util.IoUtil;
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
@@ -105,10 +103,12 @@ public void getProfilePicture(HttpServletResponse response) {
       Picture picture = identityService.getUserPicture(SecurityUtils.getCurrentUserId());
       if(picture==null){
     	  try{
-    		  byte[] pictureBytes = IoUtil.readInputStream(this.getClass().getClassLoader().getResourceAsStream("../../images/activiti-logo.png"), "default-logo");
+    		  byte[] pictureBytes = IoUtil.readInputStream(this.getClass().getClassLoader().getResourceAsStream("activiti-logo.png"), "default-logo");
+    		  System.out.println("pictureBytes "+pictureBytes);
     		  picture=new Picture(pictureBytes,"image/png");
     	  }
     	  catch (Exception e) {
+    		  e.printStackTrace();
     		  throw new InternalServerErrorException("Could not find default tenant logo");
     	  }
       }

File: modules/activiti-dmn-json-converter/src/main/java/org/activiti/editor/dmn/converter/DmnJsonConverter.java
Patch:
@@ -108,7 +108,7 @@ public ObjectNode convertToJson(DmnDefinition definition) {
             ObjectNode inputExpressionNode = objectMapper.createObjectNode();
             inputExpressionNode.put("id", inputExpression.getId());
             inputExpressionNode.put("type", inputExpression.getTypeRef());
-            inputExpressionNode.put("label", inputExpression.getLabel());
+            inputExpressionNode.put("label", clause.getLabel());
             inputExpressionNode.put("variableId", inputExpression.getText());
 
             inputExpressionsNode.add(inputExpressionNode);

File: modules/activiti-dmn-xml-converter/src/main/java/org/activiti/dmn/xml/converter/InputClauseXMLConverter.java
Patch:
@@ -37,6 +37,9 @@ protected String getXMLElementName() {
     @Override
     protected DmnElement convertXMLToElement(XMLStreamReader xtr, DmnDefinition model) throws Exception {
         InputClause clause = new InputClause();
+        if(ELEMENT_INPUT_CLAUSE.equals(xtr.getLocalName())){
+            clause.setLabel(xtr.getAttributeValue(null, ATTRIBUTE_LABEL));
+        }
         parseChildElements(getXMLElementName(), clause, model, xtr);
         return clause;
     }

File: modules/activiti-camel/src/test/java/org/activiti/camel/revisited/AsyncProcessRevisitedTest.java
Patch:
@@ -53,7 +53,7 @@ public void testRunProcess() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("asyncCamelProcessRevisited");
     List<Execution> executionList = runtimeService.createExecutionQuery().list();
     assertEquals(3, executionList.size());
-    waitForJobExecutorToProcessAllJobs(3000, 500);
+    waitForJobExecutorToProcessAllJobs(5000, 500);
     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -79,7 +79,7 @@ protected void handleProcessInstanceExecution(ExecutionEntity processInstanceExe
 
    // note the use of execution here vs processinstance execution for getting the flowelement
       executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceId,
-          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false, true);
+          execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null, null, false, false);
     } else {
       logger.debug("Active executions found. Process instance {} will not be ended.", processInstanceId);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -150,7 +150,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution.getId(),
-            subProcessExecution.getCurrentActivityId(), deleteReason, true, false, true);
+            subProcessExecution.getCurrentActivityId(), deleteReason, true, true);
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -198,7 +198,7 @@ public void leave(DelegateExecution execution) {
                     && callActivityExecutionIds.contains(childExecution.getSuperExecutionId())) {
 
                   executionEntityManager.deleteProcessInstanceExecutionEntity(childExecution.getId(), activity.getId(),
-                      "call activity completion condition met", true, false, true);
+                      "call activity completion condition met", true, false);
                 }
               }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -116,11 +116,11 @@ protected void defaultTerminateEndEventBehaviour(DelegateExecution execution, Co
 
         MultiInstanceActivityBehavior multiInstanceBehavior = (MultiInstanceActivityBehavior) callActivity.getBehavior();
         multiInstanceBehavior.leave(callActivityExecution);
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
 
       } else {
 
-        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false, true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(scopeExecutionEntity.getId(), execution.getCurrentFlowElement().getId(), "terminate end event", false, false);
         ExecutionEntity superExecutionEntity = executionEntityManager.findById(scopeExecutionEntity.getSuperExecutionId());
         Context.getAgenda().planTakeOutgoingSequenceFlowsOperation(superExecutionEntity, true);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -70,7 +70,7 @@ public static void propagateError(String errorCode, DelegateExecution execution)
               executionEntityManager.deleteProcessInstanceExecutionEntity(processInstanceEntity.getId(),
                   execution.getCurrentFlowElement() != null ? execution.getCurrentFlowElement().getId() : null,
                   "ERROR_EVENT " + errorCode,
-                  false, false, false);
+                  false, false);
 
               // Event
               if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -90,7 +90,7 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
   void deleteProcessInstance(String processInstanceId, String deleteReason, boolean cascade);
   
   void deleteProcessInstanceExecutionEntity(String processInstanceId, String currentFlowElementId, 
-      String deleteReason, boolean cascade, boolean cancel, boolean fireEvent);
+      String deleteReason, boolean cascade, boolean cancel);
   
   void deleteChildExecutions(ExecutionEntity executionEntity, String deleteReason, boolean cancel);
   

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/UserDetailsService.java
Patch:
@@ -60,7 +60,6 @@ public UserDetails loadUserByUsername(final String login) {
     String actualLogin = login;
     User userFromDatabase = null;
 
-    actualLogin = login.toLowerCase();
     userFromDatabase = identityService.createUserQuery().userId(actualLogin).singleResult();
 
     // Verify user

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/UserDetailsService.java
Patch:
@@ -60,7 +60,6 @@ public UserDetails loadUserByUsername(final String login) {
     String actualLogin = login;
     User userFromDatabase = null;
 
-    actualLogin = login.toLowerCase();
     userFromDatabase = identityService.createUserQuery().userId(actualLogin).singleResult();
 
     // Verify user

File: modules/activiti-bpmn-layout/src/main/java/org/activiti/bpmn/BpmnAutoLayout.java
Patch:
@@ -514,6 +514,7 @@ protected void translateNestedSubprocesses(Process process) {
             if (flowElement instanceof SubProcess) {
               translateNestedSubprocessElements((SubProcess) flowElement);
             }
+       }
   }
 
   protected void translateNestedSubprocessElements(SubProcess subProcess) {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/ActivitiDecisionTableService.java
Patch:
@@ -181,6 +181,7 @@ public ModelRepresentation importDecisionTable(HttpServletRequest request, Multi
         editorJsonNode.remove("id");
 
         ModelRepresentation modelRepresentation = new ModelRepresentation();
+        modelRepresentation.setKey(dmnDefinition.getCurrentDecisionTable().getId());
         modelRepresentation.setName(dmnDefinition.getName());
         modelRepresentation.setDescription(dmnDefinition.getDescription());
         modelRepresentation.setModelType(AbstractModel.MODEL_TYPE_DECISION_TABLE);

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -1347,7 +1347,7 @@ public void testQueryHistoricProcessInstanceIncludeBinaryVariable() throws Excep
 
   // Test for https://activiti.atlassian.net/browse/ACT-2186
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
-  public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() {
+  public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() throws InterruptedException {
     Map<String, Object> vars = new HashMap<String, Object>();
     vars.put("var1", "Hello");
     vars.put("var2", "World");
@@ -1371,6 +1371,7 @@ public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() {
     }
 
     // Remove one variable
+    Thread.sleep(800);
     runtimeService.removeVariable(processInstance.getId(), "var2");
 
     // Verify runtime

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -1347,7 +1347,7 @@ public void testQueryHistoricProcessInstanceIncludeBinaryVariable() throws Excep
 
   // Test for https://activiti.atlassian.net/browse/ACT-2186
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
-  public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() {
+  public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() throws InterruptedException {
     Map<String, Object> vars = new HashMap<String, Object>();
     vars.put("var1", "Hello");
     vars.put("var2", "World");
@@ -1371,6 +1371,7 @@ public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() {
     }
 
     // Remove one variable
+    Thread.sleep(800);
     runtimeService.removeVariable(processInstance.getId(), "var2");
 
     // Verify runtime

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -215,6 +215,8 @@ public ExecutionEntity createProcessInstanceExecution(ProcessDefinition processD
     
     processInstanceExecution.setProcessDefinitionId(processDefinition.getId());
     processInstanceExecution.setProcessDefinitionKey(processDefinition.getKey());
+    processInstanceExecution.setProcessDefinitionName(processDefinition.getName());
+    processInstanceExecution.setProcessDefinitionVersion(processDefinition.getVersion());
     processInstanceExecution.setBusinessKey(businessKey);
     processInstanceExecution.setScope(true); // process instance is always a scope for all child executions
 

File: modules/activiti-engine/src/test/java/org/activiti/standalone/cfg/MyTestMapper.java
Patch:
@@ -7,11 +7,11 @@
 
 public interface MyTestMapper {
 
-	@Select("SELECT ID_ as id, NAME_ as name, CREATE_TIME_ as createTime FROM ACT_RU_TASK")
+	@Select("SELECT ID_ as ID, NAME_ as NAME, CREATE_TIME_ as CREATETIME FROM ACT_RU_TASK")
 	List<Map<String, Object>> selectTasks();
 	
 	@Select({
-		"SELECT task.ID_ as taskId, variable.LONG_ as variableValue FROM ACT_RU_VARIABLE variable",
+		"SELECT task.ID_ as TASKID, variable.LONG_ as VARIABLEVALUE FROM ACT_RU_VARIABLE variable",
 		"inner join ACT_RU_TASK task on variable.TASK_ID_ = task.ID_",
 		"where variable.NAME_ = #{variableName}"
 	})

File: modules/activiti-camel/src/test/java/org/activiti/camel/revisited/AsyncProcessRevisitedTest.java
Patch:
@@ -53,7 +53,7 @@ public void testRunProcess() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("asyncCamelProcessRevisited");
     List<Execution> executionList = runtimeService.createExecutionQuery().list();
     assertEquals(3, executionList.size());
-    waitForJobExecutorToProcessAllJobs(3000, 500);
+    waitForJobExecutorToProcessAllJobs(10000, 500);
     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
   }
 }

File: modules/activiti-cxf/src/test/java/org/activiti/engine/impl/webservice/WebServiceTaskTest.java
Patch:
@@ -54,7 +54,7 @@ public void testWebServiceInvocationWithEndpointAddressConfigured() throws Excep
 
         processEngineConfiguration.addWsEndpointAddress(
                 new QName("http://webservice.impl.engine.activiti.org/", "CounterImplPort"),
-                new URL("http://localhost:63081/webservicemock"));
+                new URL(WEBSERVICE_MOCK_ADDRESS));
 
         ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("webServiceInvocation");
         waitForJobExecutorToProcessAllJobs(10000L, 250L);

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/RestResponseFactory.java
Patch:
@@ -552,6 +552,7 @@ public ProcessInstanceResponse createProcessInstanceResponse(ProcessInstance pro
     result.setActivityId(processInstance.getActivityId());
     result.setBusinessKey(processInstance.getBusinessKey());
     result.setId(processInstance.getId());
+    result.setName(processInstance.getName());
     result.setProcessDefinitionId(processInstance.getProcessDefinitionId());
     result.setProcessDefinitionUrl(urlBuilder.buildUrl(RestUrls.URL_PROCESS_DEFINITION, processInstance.getProcessDefinitionId()));
     result.setEnded(processInstance.isEnded());
@@ -588,6 +589,7 @@ public ProcessInstanceResponse createProcessInstanceResponse(ProcessInstance pro
     result.setActivityId(processInstance.getActivityId());
     result.setBusinessKey(processInstance.getBusinessKey());
     result.setId(processInstance.getId());
+    result.setName(processInstance.getName());
     result.setProcessDefinitionId(processInstance.getProcessDefinitionId());
     result.setProcessDefinitionUrl(urlBuilder.buildUrl(RestUrls.URL_PROCESS_DEFINITION, processInstance.getProcessDefinitionId()));
     result.setEnded(processInstance.isEnded());
@@ -739,6 +741,7 @@ public HistoricProcessInstanceResponse createHistoricProcessInstanceResponse(His
     result.setEndActivityId(processInstance.getEndActivityId());
     result.setEndTime(processInstance.getEndTime());
     result.setId(processInstance.getId());
+    result.setName(processInstance.getName());
     result.setProcessDefinitionId(processInstance.getProcessDefinitionId());
     result.setProcessDefinitionUrl(urlBuilder.buildUrl(RestUrls.URL_PROCESS_DEFINITION, processInstance.getProcessDefinitionId()));
     result.setStartActivityId(processInstance.getStartActivityId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -930,7 +930,7 @@ protected void flushRegularDeletes(boolean dispatchEvent) {
       delete.execute();
 
       //  fire event for variable delete operation. (BulkDeleteOperation is not taken into account)
-      if (dispatchEvent) {
+      /*if (dispatchEvent) {
         //  prepare delete event to fire for variable delete operation. (BulkDeleteOperation is not taken into account)
         if (delete instanceof CheckedDeleteOperation) {
           CheckedDeleteOperation checkedDeleteOperation = (CheckedDeleteOperation) delete;
@@ -952,7 +952,7 @@ protected void flushRegularDeletes(boolean dispatchEvent) {
         		}
         	}
         }
-      }
+      }*/
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -27,7 +27,7 @@
  * Abstract superclass for all operation interfaces (which are {@link Runnable} instances),
  * exposing some shared helper methods and member fields to subclasses.
  *
- * An operations is a {@link Runnable} instance that is put on the {@link DefaultAgenda} during
+ * An operations is a {@link Runnable} instance that is put on the {@link Agenda} during
  * the execution of a {@link Command}.
  *
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ShellActivityBehavior.java
Patch:
@@ -62,8 +62,8 @@ private void readFields(DelegateExecution execution) {
     String cleanEnvStr = getStringFromField(cleanEnv, execution);
 
     waitFlag = waitStr == null || waitStr.equals("true");
-    redirectErrorFlag = redirectErrorStr != null && redirectErrorStr.equals("true");
-    cleanEnvBoolean = cleanEnvStr != null && cleanEnvStr.equals("true");
+    redirectErrorFlag = "true".equals(redirectErrorStr);
+    cleanEnvBoolean = "true".equals(cleanEnvStr);
     directoryStr = getStringFromField(directory, execution);
 
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/multitenant/ExecutorPerTenantAsyncExecutor.java
Patch:
@@ -75,6 +75,7 @@ public void addTenantAsyncExecutor(String tenantId, boolean startExecutor) {
       defaultAsyncJobExecutor.setAsyncJobsDueRunnable(new TenantAwareAcquireAsyncJobsDueRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));
       defaultAsyncJobExecutor.setTimerJobRunnable(new TenantAwareAcquireTimerJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));
       defaultAsyncJobExecutor.setExecuteAsyncRunnableFactory(new TenantAwareExecuteAsyncRunnableFactory(tenantInfoHolder, tenantId));
+      defaultAsyncJobExecutor.setResetExpiredJobsRunnable(new TenantAwareResetExpiredJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));
     }
     
     tenantExecutors.put(tenantId, tenantExecutor);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/multitenant/ExecutorPerTenantAsyncExecutor.java
Patch:
@@ -22,7 +22,6 @@
 import org.activiti.engine.impl.asyncexecutor.JobManager;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.multitenant.TenantInfoHolder;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.runtime.Job;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -68,6 +67,8 @@ public void addTenantAsyncExecutor(String tenantId, boolean startExecutor) {
     } else {
       tenantExecutor = tenantAwareAyncExecutorFactory.createAsyncExecutor(tenantId);
     }
+
+    tenantExecutor.setProcessEngineConfiguration(processEngineConfiguration);
     
     if (tenantExecutor instanceof DefaultAsyncJobExecutor) {
       DefaultAsyncJobExecutor defaultAsyncJobExecutor = (DefaultAsyncJobExecutor) tenantExecutor;
@@ -76,8 +77,6 @@ public void addTenantAsyncExecutor(String tenantId, boolean startExecutor) {
       defaultAsyncJobExecutor.setExecuteAsyncRunnableFactory(new TenantAwareExecuteAsyncRunnableFactory(tenantInfoHolder, tenantId));
     }
     
-    tenantExecutor.setProcessEngineConfiguration(processEngineConfiguration); // Needs to be done for job executors created after boot. Doesn't hurt on boot.
-    
     tenantExecutors.put(tenantId, tenantExecutor);
     
     if (startExecutor) {
@@ -106,6 +105,7 @@ public JobManager getJobManager() {
   
   @Override
   public void setProcessEngineConfiguration(ProcessEngineConfigurationImpl processEngineConfiguration) {
+    this.processEngineConfiguration = processEngineConfiguration;
     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {
       asyncExecutor.setProcessEngineConfiguration(processEngineConfiguration);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/NewTaskCmd.java
Patch:
@@ -35,6 +35,7 @@ public NewTaskCmd(String taskId) {
   public Task execute(CommandContext commandContext) {
     TaskEntity task = commandContext.getTaskEntityManager().create(); 
     task.setId(taskId);
+    task.setRevision(0);
     return task;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveTaskCmd.java
Patch:
@@ -54,7 +54,7 @@ public Void execute(CommandContext commandContext) {
       return null;
     }
 
-    if (task.getId() == null) {
+    if (task.getRevision() == 0) {
       commandContext.getTaskEntityManager().insert(task, null);
 
       if (commandContext.getEventDispatcher().isEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityImpl.java
Patch:
@@ -47,8 +47,6 @@ public class TaskEntityImpl extends VariableScopeImpl implements TaskEntity, Ser
 
   private static final long serialVersionUID = 1L;
 
-  protected int revision;
-
   protected String owner;
   protected int assigneeUpdatedCount; // needed for v5 compatibility
   protected String originalAssignee; // needed for v5 compatibility

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -902,8 +902,8 @@ protected void initSqlSessionFactory() {
         Properties properties = new Properties();
         properties.put("prefix", databaseTablePrefix);
         String wildcardEscapeClause = "";
-        if((wildcardEscapeCharacter !=null)&&(wildcardEscapeCharacter.length() !=0)){
-          wildcardEscapeClause = " escape '" + wildcardEscapeCharacter + "'";
+        if ((databaseWildcardEscapeCharacter != null) && (databaseWildcardEscapeCharacter.length() != 0)) {
+          wildcardEscapeClause = " escape '" + databaseWildcardEscapeCharacter + "'";
         }
         properties.put("wildcardEscapeClause", wildcardEscapeClause);
         if(databaseType != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -41,7 +41,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "6.0.0.3"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
+  public static String VERSION = "6.0.0.4"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
 
   /**
    * The name as specified in 'process-engine-name' in the activiti.cfg.xml configuration file. The default name for a process engine is 'default

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -137,6 +137,7 @@ public class DbSqlSession implements Session {
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.0"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.1"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.2"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.3"));
     
     /* Current */
     ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -273,8 +273,8 @@ public void testQueryTasks() throws Exception {
       
       // Filtering by category
       requestNode.removeAll();
-      requestNode.put("category", "someCategory");
-      assertResultsPresentInPostDataResponse(url, requestNode);
+      requestNode.put("category", "some-category");
+      assertResultsPresentInPostDataResponse(url, requestNode, adhocTask.getId());
 
       // Filtering without duedate
       requestNode.removeAll();

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/conf/AsyncConfiguration.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.conf;
+package org.activiti.app.conf;
 
 import java.util.concurrent.Executor;
 

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/conf/ContentStorageConfiguration.java
Patch:
@@ -10,10 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.conf;
+package org.activiti.app.conf;
 
-import com.activiti.content.storage.api.ContentStorage;
-import com.activiti.content.storage.fs.FileSystemContentStorage;
+import org.activiti.content.storage.api.ContentStorage;
+import org.activiti.content.storage.fs.FileSystemContentStorage;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.annotation.Bean;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/conf/EmailConfiguration.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.conf;
+package org.activiti.app.conf;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/conf/JacksonConfiguration.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.conf;
+package org.activiti.app.conf;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/conf/RestApiConfiguration.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.conf;
+package org.activiti.app.conf;
 
 import org.activiti.rest.common.application.ContentTypeResolver;
 import org.activiti.rest.common.application.DefaultContentTypeResolver;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/conf/SchedulingConfiguration.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.conf;
+package org.activiti.app.conf;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/db/DbScriptUtil.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.db;
+package org.activiti.app.db;
 
 import liquibase.Liquibase;
 import liquibase.database.Database;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/AjaxAuthenticationFailureHandler.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/AjaxAuthenticationSuccessHandler.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import org.springframework.security.core.Authentication;
 import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/AjaxLogoutSuccessHandler.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import org.springframework.security.core.Authentication;
 import org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/AuthoritiesConstants.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 /**
  * Constants for Spring Security authorities.

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/CustomDaoAuthenticationProvider.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.security.authentication.BadCredentialsException;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/CustomRememberMeService.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
+import org.activiti.app.domain.idm.PersistentToken;
 import org.activiti.engine.identity.User;
 
-import com.activiti.domain.idm.PersistentToken;
-
 public interface CustomRememberMeService {
 
     PersistentToken createAndInsertPersistentToken(User user, String remoteAddress, String userAgent);

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/CustomUserDetailService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import org.springframework.security.core.userdetails.UserDetails;
 

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/security/Http401UnauthorizedEntryPoint.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/servlet/AppDispatcherServletConfiguration.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.servlet;
+package org.activiti.app.servlet;
 
 import java.util.List;
 
@@ -35,7 +35,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 @Configuration
-@ComponentScan(value = {"com.activiti.rest"})
+@ComponentScan(value = {"org.activiti.app.rest"})
 @EnableAsync
 public class AppDispatcherServletConfiguration extends WebMvcConfigurationSupport {
 

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/servlet/WebConfigurer.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.servlet;
+package org.activiti.app.servlet;
 
 import java.util.EnumSet;
 
@@ -21,6 +21,7 @@
 import javax.servlet.ServletContextListener;
 import javax.servlet.ServletRegistration;
 
+import org.activiti.app.conf.ApplicationConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.web.context.WebApplicationContext;
@@ -29,8 +30,6 @@
 import org.springframework.web.filter.DelegatingFilterProxy;
 import org.springframework.web.servlet.DispatcherServlet;
 
-import com.activiti.conf.ApplicationConfiguration;
-
 /**
  * Configuration of web application with Servlet 3.0 APIs.
  */

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/web/CustomAntPathMatcher.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.web;
+package org.activiti.app.web;
 
 import org.springframework.http.HttpMethod;
 import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/web/CustomFormLoginConfig.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.web;
+package org.activiti.app.web;
 
 import org.springframework.security.config.annotation.web.HttpSecurityBuilder;
 import org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer;

File: modules/activiti-ui/activiti-app-conf/src/main/java/org/activiti/app/web/CustomUsernamePasswordAuthenticationFilter.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.web;
+package org.activiti.app.web;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/constant/GroupIds.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.constant;
+package org.activiti.app.constant;
 
 /**
  * @author Joram Barrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/constant/GroupTypes.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.constant;
+package org.activiti.app.constant;
 
 /**
  * @author Joram Barrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/common/IdBlockSize.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.common;
+package org.activiti.app.domain.common;
 
 /**
  * @author jbarrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/AbstractModel.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 import java.util.Date;
 
@@ -23,7 +23,7 @@
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
-import com.activiti.domain.common.IdBlockSize;
+import org.activiti.app.domain.common.IdBlockSize;
 
 @MappedSuperclass
 public class AbstractModel {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/AppDefinition.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 import java.util.List;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/AppModelDefinition.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 import java.util.Date;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/MissingModelInformation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 /**
  * @author jbarrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/Model.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/ModelHistory.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 import java.util.Date;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/ModelInformation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 /**
  * Light weight version of the {@link Model}, when you only need metadata.

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/ModelRelation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;
@@ -23,7 +23,7 @@
 import javax.persistence.Table;
 import javax.persistence.TableGenerator;
 
-import com.activiti.domain.common.IdBlockSize;
+import org.activiti.app.domain.common.IdBlockSize;
 
 @Entity
 @Table(name = "ACT_DE_MODEL_RELATION")

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/editor/ModelRelationTypes.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.editor;
+package org.activiti.app.domain.editor;
 
 public interface ModelRelationTypes {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/idm/PersistentToken.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.idm;
+package org.activiti.app.domain.idm;
 
 import java.io.Serializable;
 import java.util.Date;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/runtime/Comment.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.runtime;
+package org.activiti.app.domain.runtime;
 
 import java.io.Serializable;
 import java.util.Date;
@@ -25,12 +25,11 @@
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
+import org.activiti.app.domain.common.IdBlockSize;
 import org.hibernate.annotations.Cache;
 import org.hibernate.annotations.CacheConcurrencyStrategy;
 import org.hibernate.validator.constraints.Length;
 
-import com.activiti.domain.common.IdBlockSize;
-
 /**
  * @author Frederik Heremans
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/runtime/RelatedContent.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.runtime;
+package org.activiti.app.domain.runtime;
 
 import java.util.Date;
 
@@ -24,12 +24,11 @@
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
+import org.activiti.app.domain.common.IdBlockSize;
 import org.hibernate.annotations.Cache;
 import org.hibernate.annotations.CacheConcurrencyStrategy;
 import org.hibernate.validator.constraints.Length;
 
-import com.activiti.domain.common.IdBlockSize;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/domain/util/CustomLocalDateSerializer.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.domain.util;
+package org.activiti.app.domain.util;
 
 import java.io.IOException;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/common/AbstractRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.common;
+package org.activiti.app.model.common;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/common/BaseRestActionRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.common;
+package org.activiti.app.model.common;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/common/ResultListDataRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.common;
+package org.activiti.app.model.common;
 
 import java.util.List;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/component/SimpleContentTypeMapper.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.component;
+package org.activiti.app.model.component;
 
+import org.activiti.app.domain.runtime.RelatedContent;
 import org.springframework.stereotype.Component;
 
-import com.activiti.domain.runtime.RelatedContent;
-
 /**
  * Mapper that converts mimetypes into simple types for convenience and grouping
  * common types together (eg. xls and xsls mimetypes will all be 'excel').

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/AppDefinitionListModelRepresentation.java
Patch:
@@ -10,10 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.domain.editor.AbstractModel;
-import com.activiti.domain.editor.AppDefinition;
+import org.activiti.app.domain.editor.AbstractModel;
+import org.activiti.app.domain.editor.AppDefinition;
 
 
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/AppDefinitionPublishRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 public class AppDefinitionPublishRepresentation extends AbstractRepresentation {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/AppDefinitionSaveRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 public class AppDefinitionSaveRepresentation extends AbstractRepresentation {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/AppDefinitionUpdateResultRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 public class AppDefinitionUpdateResultRepresentation extends AbstractRepresentation {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/CountDataRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
 
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/DecisionTableSaveRepresentation.java
Patch:
@@ -10,10 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
-import com.activiti.model.editor.decisiontable.DecisionTableRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
+import org.activiti.app.model.editor.decisiontable.DecisionTableRepresentation;
 
 
 public class DecisionTableSaveRepresentation extends AbstractRepresentation {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/FormFieldSummaryRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
 public class FormFieldSummaryRepresentation {
 	

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/FormFieldValuesRepresentation.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 
 public class FormFieldValuesRepresentation extends AbstractRepresentation {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/FormSaveRepresentation.java
Patch:
@@ -10,10 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
-import com.activiti.model.editor.form.FormRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
+import org.activiti.app.model.editor.form.FormRepresentation;
 
 
 public class FormSaveRepresentation extends AbstractRepresentation {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/FormValidationError.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
 public class FormValidationError {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/LightAppRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 
 public class LightAppRepresentation extends AbstractRepresentation {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/ModelKeyRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 /**
  * Representation of model key validation

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/ReviveModelResultRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor;
+package org.activiti.app.model.editor;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableDefinitionModelRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.decisiontable;
+package org.activiti.app.model.editor.decisiontable;
 
 /**
  * @author Bassam Al-Sarori

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableDefinitionRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.decisiontable;
+package org.activiti.app.model.editor.decisiontable;
 
 import java.util.List;
 import java.util.Map;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableExpressionRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.decisiontable;
+package org.activiti.app.model.editor.decisiontable;
 
 import java.util.List;
 import java.util.Map;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/decisiontable/DecisionTableRepresentation.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.decisiontable;
+package org.activiti.app.model.editor.decisiontable;
 
 import java.util.Date;
 
-import com.activiti.domain.editor.AbstractModel;
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.domain.editor.AbstractModel;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 /**
  * Created by yvoswillens on 14/08/15.

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/form/CompleteTaskFormRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.form;
+package org.activiti.app.model.editor.form;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/form/ConditionOperators.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.form;
+package org.activiti.app.model.editor.form;
 
 /**
  * @author jbarrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/editor/form/ConditionRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.editor.form;
+package org.activiti.app.model.editor.form;
 
 /**
  * @author Joram Barrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/idm/ChangePasswordRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.idm;
+package org.activiti.app.model.idm;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/idm/CreateUserRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.idm;
+package org.activiti.app.model.idm;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/idm/GroupRepresentation.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.idm;
+package org.activiti.app.model.idm;
 
+import org.activiti.app.model.common.AbstractRepresentation;
 import org.activiti.engine.identity.Group;
 
-import com.activiti.model.common.AbstractRepresentation;
-
 /**
  * @author Joram Barrez
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/idm/UpdateUsersRepresentation.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.idm;
+package org.activiti.app.model.idm;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 /**
  * @author Joram Barrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/idm/UserRepresentation.java
Patch:
@@ -10,15 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.idm;
+package org.activiti.app.model.idm;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import org.activiti.app.model.common.AbstractRepresentation;
 import org.activiti.engine.identity.User;
 
-import com.activiti.model.common.AbstractRepresentation;
-
 /**
  * @author Joram Barrez
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/AppDefinitionRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 public class AppDefinitionRepresentation extends AbstractRepresentation {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/CommentRepresentation.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 import java.util.Date;
 
-import com.activiti.domain.runtime.Comment;
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.domain.runtime.Comment;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 public class CommentRepresentation extends AbstractRepresentation {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/CompleteFormRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 import java.util.Map;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/CreateProcessInstanceRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 public class CreateProcessInstanceRepresentation extends CompleteFormRepresentation {
     private String processDefinitionId;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/CreateTaskRepresentation.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 /**
  * @author Joram Barrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/FormValueRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 /**
  * 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/ProcessDefinitionRepresentation.java
Patch:
@@ -10,10 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
-import com.activiti.model.common.AbstractRepresentation;
 import com.fasterxml.jackson.annotation.JsonProperty;
+
+import org.activiti.app.model.common.AbstractRepresentation;
 import org.activiti.engine.repository.ProcessDefinition;
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/ProcessInstanceVariableRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 /**
  * 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/QueryVariable.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/ResetPasswordRepresentation.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 public class ResetPasswordRepresentation {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/RestVariable.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/RuntimeAppDefinitionSaveRepresentation.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
-
-import com.activiti.model.common.AbstractRepresentation;
+package org.activiti.app.model.runtime;
 
 import java.util.List;
 
+import org.activiti.app.model.common.AbstractRepresentation;
+
 public class RuntimeAppDefinitionSaveRepresentation extends AbstractRepresentation {
 
     private List<AppDefinitionRepresentation> appDefinitions;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/TaskRepresentation.java
Patch:
@@ -10,18 +10,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
+package org.activiti.app.model.runtime;
 
 import java.util.Date;
 import java.util.List;
 
+import org.activiti.app.model.common.AbstractRepresentation;
+import org.activiti.app.model.idm.UserRepresentation;
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.task.TaskInfo;
 
-import com.activiti.model.common.AbstractRepresentation;
-import com.activiti.model.idm.UserRepresentation;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/model/runtime/TaskUpdateRepresentation.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.model.runtime;
-
-import com.activiti.model.common.AbstractRepresentation;
+package org.activiti.app.model.runtime;
 
 import java.util.Date;
 
+import org.activiti.app.model.common.AbstractRepresentation;
+
 public class TaskUpdateRepresentation extends AbstractRepresentation {
 
     private String name;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelHistoryRepository.java
Patch:
@@ -10,14 +10,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.repository.editor;
+package org.activiti.app.repository.editor;
 
 import java.util.List;
 
+import org.activiti.app.domain.editor.ModelHistory;
 import org.springframework.data.jpa.repository.JpaRepository;
 
-import com.activiti.domain.editor.ModelHistory;
-
 /**
  * Spring Data JPA repository for the ModelHistory entity.
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelRelationRepository.java
Patch:
@@ -10,17 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.repository.editor;
+package org.activiti.app.repository.editor;
 
 import java.util.List;
 
+import org.activiti.app.domain.editor.ModelRelation;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Modifying;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.activiti.domain.editor.ModelRelation;
-
 /**
  * @author jbarrez
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/editor/ModelRepository.java
Patch:
@@ -10,17 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.repository.editor;
+package org.activiti.app.repository.editor;
 
 import java.util.List;
 
+import org.activiti.app.domain.editor.Model;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.activiti.domain.editor.Model;
-
 /**
  * Spring Data JPA repository for the Model entity.
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/idm/PersistentTokenRepository.java
Patch:
@@ -10,16 +10,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.repository.idm;
+package org.activiti.app.repository.idm;
 
 import java.util.Date;
 import java.util.List;
 
+import org.activiti.app.domain.idm.PersistentToken;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Modifying;
 
-import com.activiti.domain.idm.PersistentToken;
-
 public interface PersistentTokenRepository extends JpaRepository<PersistentToken, String> {
 
     List<PersistentToken> findByUser(String user);

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/runtime/CommentRepository.java
Patch:
@@ -10,19 +10,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.repository.runtime;
+package org.activiti.app.repository.runtime;
 
 import java.util.List;
 
+import org.activiti.app.domain.runtime.Comment;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Modifying;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;
 
-import com.activiti.domain.runtime.Comment;
-
 /**
  * @author Frederik Heremans
  * @author Joram Barrez

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/repository/runtime/RelatedContentRepository.java
Patch:
@@ -10,17 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.repository.runtime;
+package org.activiti.app.repository.runtime;
 
+import org.activiti.app.domain.runtime.RelatedContent;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Modifying;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.activiti.domain.runtime.RelatedContent;
-
 /**
  * @author Frederik Heremans
  * @author Erik Winlof

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/security/ActivitiAppUser.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.security;
+package org.activiti.app.security;
 
 import java.util.Collection;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/AppDefinitionService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.api;
+package org.activiti.app.service.api;
 
 import java.util.List;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/AppDefinitionServiceRepresentation.java
Patch:
@@ -10,11 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.api;
+package org.activiti.app.service.api;
 
 import java.util.List;
 
-import com.activiti.model.common.AbstractRepresentation;
+import org.activiti.app.model.common.AbstractRepresentation;
 
 
 public class AppDefinitionServiceRepresentation extends AbstractRepresentation {

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/DeploymentService.java
Patch:
@@ -10,14 +10,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.api;
+package org.activiti.app.service.api;
 
+import org.activiti.app.domain.editor.Model;
 import org.activiti.engine.identity.User;
 import org.activiti.engine.repository.Deployment;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.activiti.domain.editor.Model;
-
 public interface DeploymentService {
 
     @Transactional

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/api/UserCache.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.api;
+package org.activiti.app.service.api;
 
 import java.util.Collection;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/ModelImageService.java
Patch:
@@ -10,13 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor;
+package org.activiti.app.service.editor;
 
 import java.awt.image.BufferedImage;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
+import org.activiti.app.domain.editor.Model;
 import org.activiti.bpmn.model.Artifact;
 import org.activiti.bpmn.model.Association;
 import org.activiti.bpmn.model.BpmnModel;
@@ -32,7 +33,6 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Service;
 
-import com.activiti.domain.editor.Model;
 import com.activiti.image.ImageGenerator;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/ServiceParameters.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor;
+package org.activiti.app.service.editor;
 
 import java.util.Arrays;
 import java.util.Collections;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/AbstractInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/EventInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import org.activiti.bpmn.model.ErrorEventDefinition;
 import org.activiti.bpmn.model.Event;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/InfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/ReceiveTaskInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import org.activiti.bpmn.model.ReceiveTask;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/ScriptTaskInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import org.activiti.bpmn.model.ScriptTask;
 import org.apache.commons.lang3.StringUtils;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/SequenceFlowInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import org.activiti.bpmn.model.SequenceFlow;
 import org.apache.commons.lang3.StringUtils;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/ServiceTaskInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import org.activiti.bpmn.model.ImplementationType;
 import org.activiti.bpmn.model.ServiceTask;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/editor/mapper/UserTaskInfoMapper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.editor.mapper;
+package org.activiti.app.service.editor.mapper;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/BadRequestException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/BaseModelerRestException.java
Patch:
@@ -22,7 +22,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/ConflictingRequestException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 import java.util.Map;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/ErrorInfo.java
Patch:
@@ -22,7 +22,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/InternalServerErrorException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/ModelErrorException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/NonJsonResourceNotFoundException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/NotFoundException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 
 /**

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/NotPermittedException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 
 /**
  * Exception thrown when an operation is performed for which the current user has insufficient

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/exception/UnauthorizedException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.exception;
+package org.activiti.app.service.exception;
 /**
  * Exception thrown when the request that is performed need authorization, but no valid ticket
  * has been passed along with it.

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/idm/PersistentTokenService.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.idm;
+package org.activiti.app.service.idm;
 
+import org.activiti.app.domain.idm.PersistentToken;
 import org.activiti.engine.identity.User;
 
-import com.activiti.domain.idm.PersistentToken;
-
 /**
  * @author Joram Barrez
  */

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/idm/PersistentTokenServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.idm;
+package org.activiti.app.service.idm;
 
 import java.security.SecureRandom;
 import java.util.Date;
@@ -20,6 +20,8 @@
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
 
+import org.activiti.app.domain.idm.PersistentToken;
+import org.activiti.app.repository.idm.PersistentTokenRepository;
 import org.activiti.engine.identity.User;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -29,8 +31,6 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.activiti.domain.idm.PersistentToken;
-import com.activiti.repository.idm.PersistentTokenRepository;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/ActivitiService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.runtime;
+package org.activiti.app.service.runtime;
 
 import java.util.Map;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/AppConstants.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.runtime;
+package org.activiti.app.service.runtime;
 
 /**
  * Constants for well known default apps.

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/AppVersionService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.runtime;
+package org.activiti.app.service.runtime;
 
 import java.io.IOException;
 import java.util.HashMap;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/ProcessInstanceService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.runtime;
+package org.activiti.app.service.runtime;
 
 import javax.inject.Inject;
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/RelatedContentStreamProvider.java
Patch:
@@ -10,10 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.runtime;
+package org.activiti.app.service.runtime;
 
-import com.activiti.content.storage.api.ContentStorage;
-import com.activiti.domain.runtime.RelatedContent;
+import org.activiti.app.domain.runtime.RelatedContent;
+import org.activiti.content.storage.api.ContentStorage;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/runtime/SubmittedFormVariables.java
Patch:
@@ -10,14 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.service.runtime;
+package org.activiti.app.service.runtime;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import com.activiti.domain.runtime.RelatedContent;
+import org.activiti.app.domain.runtime.RelatedContent;
 
 public class SubmittedFormVariables {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/service/util/TaskUtil.java
Patch:
@@ -10,13 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.util;
+package org.activiti.app.service.util;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.app.model.runtime.TaskRepresentation;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.ExtensionElement;
 import org.activiti.bpmn.model.FlowElement;
@@ -33,8 +34,6 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
 
-import com.activiti.model.runtime.TaskRepresentation;
-
 public class TaskUtil {
 
   public static void fillPermissionInformation(TaskRepresentation taskRepresentation, TaskInfo task, User currentUser, 

File: modules/activiti-ui/activiti-app-logic/src/main/java/org/activiti/app/util/XmlUtil.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.util;
+package org.activiti.app.util;
 
 import javax.xml.stream.XMLInputFactory;
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/editor/ModelBpmnResource.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.editor;
+package org.activiti.app.rest.editor;
 
 import java.io.IOException;
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/AbstractAppDefinitionsResource.java
Patch:
@@ -10,21 +10,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime;
+package org.activiti.app.rest.runtime;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.app.model.common.ResultListDataRepresentation;
+import org.activiti.app.model.runtime.AppDefinitionRepresentation;
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.repository.Deployment;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.activiti.model.common.ResultListDataRepresentation;
-import com.activiti.model.runtime.AppDefinitionRepresentation;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 public abstract class AbstractAppDefinitionsResource {

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/ProcessDefinitionResource.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime;
+package org.activiti.app.rest.runtime;
 
 import javax.servlet.http.HttpServletRequest;
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/ProcessDefinitionsResource.java
Patch:
@@ -10,15 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime;
+package org.activiti.app.rest.runtime;
 
+import org.activiti.app.model.common.ResultListDataRepresentation;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.activiti.model.common.ResultListDataRepresentation;
-
 /**
  * REST controller for managing the Engine process definitions.
  */

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/ProcessInstanceResource.java
Patch:
@@ -10,10 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime;
+package org.activiti.app.rest.runtime;
 
 import javax.servlet.http.HttpServletResponse;
 
+import org.activiti.app.model.runtime.ProcessInstanceRepresentation;
 import org.activiti.form.model.FormDefinition;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -22,8 +23,6 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.activiti.model.runtime.ProcessInstanceRepresentation;
-
 /**
  * REST controller for managing a process instance.
  */

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/TaskQueryResource.java
Patch:
@@ -10,14 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime;
+package org.activiti.app.rest.runtime;
 
+import org.activiti.app.model.common.ResultListDataRepresentation;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.activiti.model.common.ResultListDataRepresentation;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 @RestController

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/WorkflowUsersResource.java
Patch:
@@ -10,15 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime;
+package org.activiti.app.rest.runtime;
 
+import org.activiti.app.model.common.ResultListDataRepresentation;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.activiti.model.common.ResultListDataRepresentation;
-
 /**
  * Rest resource for managing users, specifically related to tasks and processes.
  */

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/BooleanRestVariableConverter.java
Patch:
@@ -10,13 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/DateRestVariableConverter.java
Patch:
@@ -10,15 +10,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
 import java.text.ParseException;
 import java.util.Date;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
 import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
 
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/DoubleRestVariableConverter.java
Patch:
@@ -10,13 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/IntegerRestVariableConverter.java
Patch:
@@ -10,13 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/LongRestVariableConverter.java
Patch:
@@ -10,13 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/RestVariableConverter.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
-import com.activiti.model.runtime.RestVariable;
+import org.activiti.app.model.runtime.RestVariable;
 
 
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/ShortRestVariableConverter.java
Patch:
@@ -10,13 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-ui/activiti-app-rest/src/main/java/org/activiti/app/rest/runtime/variable/StringRestVariableConverter.java
Patch:
@@ -10,13 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.activiti.rest.runtime.variable;
+package org.activiti.app.rest.runtime.variable;
 
+import org.activiti.app.model.runtime.RestVariable;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.springframework.stereotype.Component;
 
-import com.activiti.model.runtime.RestVariable;
-
 
 /**
  * @author Frederik Heremans

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -83,7 +83,8 @@ else if (SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)){
         if (defaultSequenceFlow != null) {
           PvmTransition defaultTransition = execution.getActivity().findOutgoingTransition(defaultSequenceFlow);
           if (defaultTransition != null) {
-            execution.take(defaultTransition);
+            transitionsToTake.add(defaultTransition);
+            execution.takeAll(transitionsToTake, joinedExecutions);
           } else {
             throw new ActivitiException("Default sequence flow '"
                 + defaultSequenceFlow + "' could not be not found");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -83,7 +83,8 @@ else if (SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)){
         if (defaultSequenceFlow != null) {
           PvmTransition defaultTransition = execution.getActivity().findOutgoingTransition(defaultSequenceFlow);
           if (defaultTransition != null) {
-            execution.take(defaultTransition);
+            transitionsToTake.add(defaultTransition);
+            execution.takeAll(transitionsToTake, joinedExecutions);
           } else {
             throw new ActivitiException("Default sequence flow '"
                 + defaultSequenceFlow + "' could not be not found");

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -273,8 +273,8 @@ public void testQueryTasks() throws Exception {
       
       // Filtering by category
       requestNode.removeAll();
-      requestNode.put("category", "someCategory");
-      assertResultsPresentInPostDataResponse(url, requestNode);
+      requestNode.put("category", "some-category");
+      assertResultsPresentInPostDataResponse(url, requestNode, adhocTask.getId());
 
       // Filtering without duedate
       requestNode.removeAll();

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -273,8 +273,8 @@ public void testQueryTasks() throws Exception {
       
       // Filtering by category
       requestNode.removeAll();
-      requestNode.put("category", "someCategory");
-      assertResultsPresentInPostDataResponse(url, requestNode);
+      requestNode.put("category", "some-category");
+      assertResultsPresentInPostDataResponse(url, requestNode, adhocTask.getId());
 
       // Filtering without duedate
       requestNode.removeAll();

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -273,8 +273,8 @@ public void testQueryTasks() throws Exception {
       
       // Filtering by category
       requestNode.removeAll();
-      requestNode.put("category", "someCategory");
-      assertResultsPresentInPostDataResponse(url, requestNode);
+      requestNode.put("category", "some-category");
+      assertResultsPresentInPostDataResponse(url, requestNode, adhocTask.getId());
 
       // Filtering without duedate
       requestNode.removeAll();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -101,14 +101,14 @@ protected void createInstances(ActivityExecution execution) throws Exception {
   public void leave(ActivityExecution execution) {
     callActivityEndListeners(execution);
     
-    if (resolveNrOfInstances(execution) == 0) {
+    int nrOfInstances = getLoopVariable(execution, NUMBER_OF_INSTANCES);
+    if (nrOfInstances == 0) {
     	// Empty collection, just leave.
     	super.leave(execution);
     	return;
     }
     
     int loopCounter = getLoopVariable(execution, getCollectionElementIndexVariable());
-    int nrOfInstances = getLoopVariable(execution, NUMBER_OF_INSTANCES);
     int nrOfCompletedInstances = getLoopVariable(execution, NUMBER_OF_COMPLETED_INSTANCES) + 1;
     int nrOfActiveInstances = getLoopVariable(execution, NUMBER_OF_ACTIVE_INSTANCES) - 1;
     

File: modules/activiti-cxf/src/test/java/org/activiti/engine/impl/webservice/WSDLImporterTest.java
Patch:
@@ -90,7 +90,7 @@ public void testImportCounterWithImport() throws Exception {
     WSService service = services.get(0);
     
     assertEquals("Counter", service.getName());
-    assertEquals("http://localhost:63081/counter", service.getLocation());
+    assertEquals("http://localhost:63081/webservicemock", service.getLocation());
     
     List<StructureDefinition> structures = sortStructures();
     List<WSOperation> operations = sortOperations();

File: modules/activiti-cxf/src/test/java/org/activiti/engine/impl/webservice/WebServiceImportTest.java
Patch:
@@ -12,15 +12,14 @@
  */
 package org.activiti.engine.impl.webservice;
 
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.test.Deployment;
 
 /**
  * An integration test for CXF based web services
  *
  * @author Christophe DENEUX
  */
-public class WebServiceImportTest extends PluggableActivitiTestCase {
+public class WebServiceImportTest extends AbstratWebServiceTask {
 
     @Deployment
     public void testImport() throws Exception {

File: modules/activiti-cxf/src/test/java/org/activiti/engine/impl/webservice/WebServiceMock.java
Patch:
@@ -29,7 +29,7 @@ public interface WebServiceMock {
   /**
    * Increase the counter in 1
    */
-  void inc();
+    void inc() throws MaxValueReachedFault;
 
   /**
    * Returns the current count

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/webservice/Operation.java
Patch:
@@ -46,7 +46,7 @@ public Operation(String id, String name, BpmnInterface bpmnInterface, MessageDef
     setInMessage(inMessage);
   }
   
-  public MessageInstance sendMessage(MessageInstance message) {
+  public MessageInstance sendMessage(MessageInstance message) throws Exception {
     return this.implementation.sendFor(message, this);
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/webservice/OperationImplementation.java
Patch:
@@ -36,5 +36,5 @@ public interface OperationImplementation {
    * @param operation the operation that is interested on sending the message
    * @return the resulting message
    */
-  MessageInstance sendFor(MessageInstance message, Operation operation);
+  MessageInstance sendFor(MessageInstance message, Operation operation) throws Exception;
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/webservice/WSOperation.java
Patch:
@@ -57,7 +57,7 @@ public String getName() {
   /**
    * {@inheritDoc}
    */
-  public MessageInstance sendFor(MessageInstance message, Operation operation) {
+    public MessageInstance sendFor(MessageInstance message, Operation operation) throws Exception {
     Object[] arguments = this.getArguments(message);
     Object[] results = this.safeSend(arguments);
     return this.createResponseMessage(results, operation);
@@ -67,13 +67,13 @@ private Object[] getArguments(MessageInstance message) {
     return message.getStructureInstance().toArray();
   }
   
-  private Object[] safeSend(Object[] arguments) {
+    private Object[] safeSend(Object[] arguments) throws Exception {
     Object[] results = null;
     
     try {
       results = this.service.getClient().send(this.name, arguments);
     } catch (Exception e) {
-      LOGGER.warn("Error calling WS {}", this.service.getName(), e);
+      throw e;
     }
     
     if (results == null) {

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/AbstractModelsResource.java
Patch:
@@ -171,6 +171,7 @@ public ModelRepresentation importProcessModel(HttpServletRequest request, Multip
         String description = process.getDocumentation();
 
         ModelRepresentation model = new ModelRepresentation();
+        model.setKey(process.getId());
         model.setName(name);
         model.setDescription(description);
         model.setModelType(AbstractModel.MODEL_TYPE_BPMN);

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/cmd/GetRuntimeFormDefinitionCmd.java
Patch:
@@ -108,7 +108,7 @@ protected void fillFormFieldValues(FormDefinition formDefinition, CommandContext
           try {
             field.setValue(formExpression.getValue(variables));
           } catch (Exception e) {
-            logger.error("Error getting value for expression " + expressionField.getExpression() + " " + e.getMessage());
+            logger.error("Error getting value for expression " + expressionField.getExpression() + " " + e.getMessage(), e);
           }
           
         } else {

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/ModelResource.java
Patch:
@@ -22,13 +22,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.util.MultiValueMap;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
@@ -110,6 +112,7 @@ public ModelRepresentation updateModel(@PathVariable Long modelId, @RequestBody
   /**
    * DELETE /rest/models/{modelId} -> delete process model or, as a non-owner, remove the share info link for that user specifically
    */
+  @ResponseStatus(value = HttpStatus.OK)
   @RequestMapping(value = "/rest/models/{modelId}", method = RequestMethod.DELETE)
   public void deleteModel(@PathVariable Long modelId, @RequestParam(required = false) Boolean cascade, @RequestParam(required = false) Boolean deleteRuntimeApp) {
 

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -199,6 +199,7 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_CALL_ACTIVITY_CALLEDELEMENT = "calledElement";
   public static final String ATTRIBUTE_CALL_ACTIVITY_BUSINESS_KEY = "businessKey";
   public static final String ATTRIBUTE_CALL_ACTIVITY_INHERIT_BUSINESS_KEY = "inheritBusinessKey";
+  public static final String ATTRIBUTE_CALL_ACTIVITY_INHERITVARIABLES = "inheritVariables";
   public static final String ELEMENT_CALL_ACTIVITY_IN_PARAMETERS = "in";
   public static final String ELEMENT_CALL_ACTIVITY_OUT_PARAMETERS = "out";
   public static final String ATTRIBUTE_IOPARAMETER_SOURCE = "source";

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/CallActivityXMLConverter.java
Patch:
@@ -58,6 +58,7 @@ protected BaseElement convertXMLToElement(XMLStreamReader xtr, BpmnModel model)
     callActivity.setBusinessKey(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_CALL_ACTIVITY_BUSINESS_KEY));
     callActivity.setInheritBusinessKey(Boolean.parseBoolean(xtr.getAttributeValue(
         ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_CALL_ACTIVITY_INHERIT_BUSINESS_KEY)));
+    callActivity.setInheritVariables(Boolean.valueOf(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_CALL_ACTIVITY_INHERITVARIABLES)));
     parseChildElements(getXMLElementName(), callActivity, childParserMap, model, xtr);
     return callActivity;
   }
@@ -74,6 +75,7 @@ protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, X
     if (callActivity.isInheritBusinessKey()) {
       writeQualifiedAttribute(ATTRIBUTE_CALL_ACTIVITY_INHERIT_BUSINESS_KEY, "true", xtw);
     }
+    xtw.writeAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_CALL_ACTIVITY_INHERITVARIABLES, String.valueOf(callActivity.isInheritVariables()));
   }
 
   @Override

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/TasksResource.java
Patch:
@@ -46,6 +46,9 @@ public TaskRepresentation createNewTask(@RequestBody CreateTaskRepresentation ta
     Task task = taskService.newTask();
     task.setName(taskRepresentation.getName());
     task.setDescription(taskRepresentation.getDescription());
+    if (StringUtils.isNotEmpty(taskRepresentation.getCategory())) {
+      task.setCategory(taskRepresentation.getCategory());
+    }
     task.setAssignee(SecurityUtils.getCurrentUserId());
     taskService.saveTask(task);
     return new TaskRepresentation(taskService.createTaskQuery().taskId(task.getId()).singleResult());

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/factory/DefaultActivityBehaviorFactory.java
Patch:
@@ -346,6 +346,8 @@ public CallActivityBehavior createCallActivityBehavior(CallActivity callActivity
     } else {
       callActivityBehaviour = new CallActivityBehavior(callActivity.getCalledElement(), callActivity.getMapExceptions());
     }
+    
+    callActivityBehaviour.setInheritVariables(callActivity.isInheritVariables());
 
     for (IOParameter ioParameter : callActivity.getInParameters()) {
       if (StringUtils.isNotEmpty(ioParameter.getSourceExpression())) {

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/idm/IdmUsersResource.java
Patch:
@@ -145,10 +145,10 @@ public void deleteUser(@PathVariable String userId) {
     public User createNewUser(@RequestBody CreateUserRepresentation userRepresentation) {
       validateAdminRole();
       
-      if(StringUtils.isBlank(userRepresentation.getEmail()) ||
+      if(StringUtils.isBlank(userRepresentation.getId()) ||
           StringUtils.isBlank(userRepresentation.getPassword()) || 
-          StringUtils.isBlank(userRepresentation.getLastName())) {
-          throw new BadRequestException("Email, password and last name are required");
+          StringUtils.isBlank(userRepresentation.getFirstName())) {
+          throw new BadRequestException("Id, password and first name are required");
       }
       
       if (userRepresentation.getEmail() != null && identityService.createUserQuery().userEmail(userRepresentation.getEmail()).count() > 0) {

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/TasksResource.java
Patch:
@@ -46,6 +46,9 @@ public TaskRepresentation createNewTask(@RequestBody CreateTaskRepresentation ta
     Task task = taskService.newTask();
     task.setName(taskRepresentation.getName());
     task.setDescription(taskRepresentation.getDescription());
+    if (StringUtils.isNotEmpty(taskRepresentation.getCategory())) {
+      task.setCategory(taskRepresentation.getCategory());
+    }
     task.setAssignee(SecurityUtils.getCurrentUserId());
     taskService.saveTask(task);
     return new TaskRepresentation(taskService.createTaskQuery().taskId(task.getId()).singleResult());

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/AbstractTaskQueryResource.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 import com.activiti.model.common.ResultListDataRepresentation;
+import com.activiti.model.idm.UserRepresentation;
 import com.activiti.model.runtime.TaskRepresentation;
 import com.activiti.security.SecurityUtils;
 import com.activiti.service.api.UserCache;
@@ -277,7 +278,7 @@ protected List<TaskRepresentation> convertTaskInfoList(List<? extends TaskInfo>
           CachedUser cachedUser = userCache.getUser(task.getAssignee());
           if (cachedUser != null && cachedUser.getUser() != null) {
             User assignee = cachedUser.getUser();
-            representation.setAssignee(assignee);
+            representation.setAssignee(new UserRepresentation(assignee));
           }
         }
         

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/HistoricTaskQueryResource.java
Patch:
@@ -28,6 +28,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.common.ResultListDataRepresentation;
+import com.activiti.model.idm.UserRepresentation;
 import com.activiti.model.runtime.TaskRepresentation;
 import com.activiti.security.SecurityUtils;
 import com.activiti.service.api.UserCache;
@@ -96,7 +97,7 @@ protected List<TaskRepresentation> convertTaskInfoList(List<HistoricTaskInstance
 
         CachedUser cachedUser = userCache.getUser(task.getAssignee());
         if (cachedUser != null && cachedUser.getUser() != null) {
-          representation.setAssignee(cachedUser.getUser());
+          representation.setAssignee(new UserRepresentation(cachedUser.getUser()));
         }
 
         result.add(representation);

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/idm/IdmGroupsResource.java
Patch:
@@ -74,7 +74,7 @@ public ResultListDataRepresentation getGroupUsers(@PathVariable String groupId,
     
     UserQuery userQuery = identityService.createUserQuery().memberOfGroup(groupId);
     if (StringUtils.isNotEmpty(filter)) {
-      userQuery.userFullNameLike(filter);
+      userQuery.userFullNameLike("%" + filter + "%");
     }
     List<User> users = userQuery.listPage(pageValue, pageSizeValue);
     

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/idm/IdmUsersResource.java
Patch:
@@ -66,11 +66,12 @@ public ResultListDataRepresentation getUsers(@RequestParam(required=false) Strin
         userQuery.userFullNameLike("%" + filter + "%");
       }
       
+      Integer startValue = start != null ? start.intValue() : 0;
       Integer size = MAX_USER_SIZE; // TODO: pass actual size
-      List<User> users = userQuery.listPage(start, (size != null && size > 0) ? size : MAX_USER_SIZE);
+      List<User> users = userQuery.listPage(startValue, (size != null && size > 0) ? size : MAX_USER_SIZE);
       Long totalCount = userQuery.count();
       result.setTotal(Long.valueOf(totalCount.intValue()));
-      result.setStart(start);
+      result.setStart(startValue);
       result.setSize(users.size());
       result.setData(convertToUserRepresentations(users));
       

File: modules/activiti-ui/activiti-app/src/main/java/com/activiti/security/UserDetailsService.java
Patch:
@@ -61,7 +61,7 @@ public UserDetails loadUserByUsername(final String login) {
     User userFromDatabase = null;
 
     actualLogin = login.toLowerCase();
-    userFromDatabase = identityService.createUserQuery().userEmail(actualLogin).singleResult();
+    userFromDatabase = identityService.createUserQuery().userId(actualLogin).singleResult();
 
     // Verify user
     if (userFromDatabase == null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -222,7 +222,7 @@ protected Map<String, VariableInstance> collectVariableInstances(HashMap<String,
     }
     
     if (transientVariabes != null) {
-      variables.putAll(variables);
+      variables.putAll(transientVariabes);
     }
 
     return variables;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.engine.impl.ExecutionQueryImpl;
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.ProcessInstanceQueryImpl;
+import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.ProcessInstance;
 
@@ -27,11 +28,11 @@
  */
 public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
   
-  ExecutionEntity createProcessInstanceExecution(String processDefinitionId, String businessKey, String tenantId, String initiatorVariableName);
+  ExecutionEntity createProcessInstanceExecution(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName);
 
   ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntity);
   
-  ExecutionEntity createSubprocessInstance(String processDefinitionId, ExecutionEntity superExecutionEntity, String businessKey);
+  ExecutionEntity createSubprocessInstance(ProcessDefinition processDefinition, ExecutionEntity superExecutionEntity, String businessKey);
   
   /**
    * Finds the {@link ExecutionEntity} for the given root process instance id.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceHelper.java
Patch:
@@ -148,7 +148,7 @@ public ProcessInstance createAndStartProcessInstanceWithInitialFlowElement(Proce
     }
     
     ExecutionEntity processInstance = commandContext.getExecutionEntityManager()
-    		.createProcessInstanceExecution(processDefinition.getId(), businessKey, processDefinition.getTenantId(), initiatorVariableName);
+    		.createProcessInstanceExecution(processDefinition, businessKey, processDefinition.getTenantId(), initiatorVariableName);
     
     commandContext.getHistoryManager().recordProcessInstanceStart(processInstance, initialFlowElement);
     

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/ProcessDefinitionsResource.java
Patch:
@@ -28,7 +28,7 @@ public class ProcessDefinitionsResource extends AbstractProcessDefinitionsResour
 	@RequestMapping(value = "/rest/process-definitions", method = RequestMethod.GET)
     public ResultListDataRepresentation getProcessDefinitions(
     		@RequestParam(value="latest", required=false) Boolean latest,
-            @RequestParam(value="deploymentKey", required=false) String deploymentKey) {
+        @RequestParam(value="deploymentKey", required=false) String deploymentKey) {
 	    
 	    return super.getProcessDefinitions(latest, deploymentKey);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -83,7 +83,8 @@ else if (SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)){
         if (defaultSequenceFlow != null) {
           PvmTransition defaultTransition = execution.getActivity().findOutgoingTransition(defaultSequenceFlow);
           if (defaultTransition != null) {
-            execution.take(defaultTransition);
+            transitionsToTake.add(defaultTransition);
+            execution.takeAll(transitionsToTake, joinedExecutions);
           } else {
             throw new ActivitiException("Default sequence flow '"
                 + defaultSequenceFlow + "' could not be not found");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -160,6 +160,8 @@ public DbSqlSession(DbSqlSessionFactory dbSqlSessionFactory, EntityCache entityC
     this.dbSqlSessionFactory = dbSqlSessionFactory;
     this.sqlSession = dbSqlSessionFactory.getSqlSessionFactory().openSession();
     this.entityCache = entityCache;
+    this.connectionMetadataDefaultCatalog = dbSqlSessionFactory.getDatabaseCatalog();
+    this.connectionMetadataDefaultSchema = dbSqlSessionFactory.getDatabaseSchema();
   }
 
   public DbSqlSession(DbSqlSessionFactory dbSqlSessionFactory, EntityCache entityCache, Connection connection, String catalog, String schema) {
@@ -1286,6 +1288,7 @@ protected boolean isMissingTablesException(Exception e) {
 
   public void performSchemaOperationsProcessEngineBuild() {
     String databaseSchemaUpdate = Context.getProcessEngineConfiguration().getDatabaseSchemaUpdate();
+    log.debug("Executing performSchemaOperationsProcessEngineBuild with setting " + databaseSchemaUpdate);
     if (ProcessEngineConfigurationImpl.DB_SCHEMA_UPDATE_DROP_CREATE.equals(databaseSchemaUpdate)) {
       try {
         dbSchemaDrop();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1209,7 +1209,7 @@ public void initDatabaseType() {
 
       // Special care for MSSQL, as it has a hard limit of 2000 params per statement (incl bulk statement).
       // Especially with executions, with 100 as default, this limit is passed.
-      if (DATABASE_TYPE_MYSQL.equals(databaseType)) {
+      if (DATABASE_TYPE_MSSQL.equals(databaseType)) {
         maxNrOfStatementsInBulkInsert = DEFAULT_MAX_NR_OF_STATEMENTS_BULK_INSERT_SQL_SERVER;
       }
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -534,7 +534,7 @@ public ProcessInstance startProcessInstance(ProcessInstanceBuilderImpl processIn
     } else if (processInstanceBuilder.getMessageName() != null) {
       return commandExecutor.execute(new StartProcessInstanceByMessageCmd(processInstanceBuilder));
     } else {
-      throw new IllegalArgumentException("No processDefinitionId, processDefinitionKey nor messageName provided");
+      throw new ActivitiIllegalArgumentException("No processDefinitionId, processDefinitionKey nor messageName provided");
     }
     
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionBaseResource.java
Patch:
@@ -188,9 +188,9 @@ protected Execution getExecutionFromRequest(String executionId) {
     return execution;
   }
 
-  protected Map<String, Object> getVariablesToSet(ExecutionActionRequest actionRequest) {
+  protected Map<String, Object> getVariablesToSet(List<RestVariable> restVariables) {
     Map<String, Object> variablesToSet = new HashMap<String, Object>();
-    for (RestVariable var : actionRequest.getVariables()) {
+    for (RestVariable var : restVariables) {
       if (var.getName() == null) {
         throw new ActivitiIllegalArgumentException("Variable name is required");
       }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java
Patch:
@@ -102,7 +102,7 @@ public void executeExecutionAction(@RequestBody ExecutionActionRequest actionReq
     }
 
     if (actionRequest.getVariables() != null) {
-      runtimeService.signalEventReceived(actionRequest.getSignalName(), getVariablesToSet(actionRequest));
+      runtimeService.signalEventReceived(actionRequest.getSignalName(), getVariablesToSet(actionRequest.getVariables()));
     } else {
       runtimeService.signalEventReceived(actionRequest.getSignalName());
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/DefaultHistoryManager.java
Patch:
@@ -630,8 +630,8 @@ public void recordTaskDefinitionKeyChange(TaskEntity task, String taskDefinition
   }
   
   /* (non-Javadoc)
-  +* @see org.activiti.engine.impl.history.HistoryManagerInterface#recordTaskDefinitionChange(java.lang.String, java.lang.String)
-  +*/
+   * @see org.activiti.engine.impl.history.HistoryManagerInterface#recordTaskProcessDefinitionChange(java.lang.String, java.lang.String)
+   */
   @Override
   public void recordTaskProcessDefinitionChange(String taskId, String processDefinitionId) {
     if (isHistoryLevelAtLeast(HistoryLevel.ACTIVITY)) {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/DatabaseTablePrefixTest.java
Patch:
@@ -52,6 +52,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     config1.setActiviti5CompatibilityEnabled(true);
+    config1.getPerformanceSettings().setValidateExecutionRelationshipCountConfigOnBoot(false);
     ProcessEngine engine1 = config1.buildProcessEngine();
     
     ProcessEngineConfigurationImpl config2 = (ProcessEngineConfigurationImpl) ProcessEngineConfigurationImpl
@@ -60,6 +61,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema        
     config2.setDatabaseTablePrefix("SCHEMA2.");
     config2.setActiviti5CompatibilityEnabled(true);
+    config2.getPerformanceSettings().setValidateExecutionRelationshipCountConfigOnBoot(false);
     ProcessEngine engine2 = config2.buildProcessEngine();
     
     // create the tables in SCHEMA1

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/DatabaseTablePrefixTest.java
Patch:
@@ -52,6 +52,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     config1.setActiviti5CompatibilityEnabled(true);
+    config1.getPerformanceSettings().setValidateExecutionRelationshipCountConfigOnBoot(false);
     ProcessEngine engine1 = config1.buildProcessEngine();
     
     ProcessEngineConfigurationImpl config2 = (ProcessEngineConfigurationImpl) ProcessEngineConfigurationImpl
@@ -60,6 +61,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema        
     config2.setDatabaseTablePrefix("SCHEMA2.");
     config2.setActiviti5CompatibilityEnabled(true);
+    config2.getPerformanceSettings().setValidateExecutionRelationshipCountConfigOnBoot(false);
     ProcessEngine engine2 = config2.buildProcessEngine();
     
     // create the tables in SCHEMA1

File: modules/activiti5-test/src/test/java/org/activiti5/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -32,7 +32,7 @@ public void testTableCount() {
     
     String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
     
-    assertEquals(new Long(3), tableCount.get(tablePrefix+"ACT_GE_PROPERTY"));
+    assertEquals(new Long(4), tableCount.get(tablePrefix+"ACT_GE_PROPERTY"));
     assertEquals(new Long(0), tableCount.get(tablePrefix+"ACT_GE_BYTEARRAY"));
     assertEquals(new Long(0), tableCount.get(tablePrefix+"ACT_RE_DEPLOYMENT"));
     assertEquals(new Long(0), tableCount.get(tablePrefix+"ACT_RU_EXECUTION"));

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -197,6 +197,8 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_TASK_RULE_CLASS = "class";
 
   public static final String ATTRIBUTE_CALL_ACTIVITY_CALLEDELEMENT = "calledElement";
+  public static final String ATTRIBUTE_CALL_ACTIVITY_BUSINESS_KEY = "businessKey";
+  public static final String ATTRIBUTE_CALL_ACTIVITY_INHERIT_BUSINESS_KEY = "inheritBusinessKey";
   public static final String ELEMENT_CALL_ACTIVITY_IN_PARAMETERS = "in";
   public static final String ELEMENT_CALL_ACTIVITY_OUT_PARAMETERS = "out";
   public static final String ATTRIBUTE_IOPARAMETER_SOURCE = "source";

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ServiceTask.java
Patch:
@@ -20,6 +20,7 @@
  */
 public class ServiceTask extends TaskWithFieldExtensions {
 
+  public static final String DMN_TASK = "dmn";
   public static final String MAIL_TASK = "mail";
 
   protected String implementation;

File: modules/activiti-dmn-api/src/main/java/org/activiti/dmn/api/DmnDeploymentBuilder.java
Patch:
@@ -35,6 +35,8 @@ public interface DmnDeploymentBuilder {
   DmnDeploymentBuilder addClasspathResource(String resource);
 
   DmnDeploymentBuilder addString(String resourceName, String text);
+  
+  DmnDeploymentBuilder addDmnBytes(String resourceName, byte[] dmnBytes);
 
   DmnDeploymentBuilder addDmnModel(String resourceName, DmnDefinition dmnDefinition);
 

File: modules/activiti-dmn-api/src/main/java/org/activiti/dmn/api/DmnDeploymentQuery.java
Patch:
@@ -71,12 +71,12 @@ public interface DmnDeploymentQuery extends Query<DmnDeploymentQuery, DmnDeploym
   DmnDeploymentQuery deploymentWithoutTenantId();
 
   /** Only select deployments with the given process definition key. */
-  DmnDeploymentQuery processDefinitionKey(String key);
+  DmnDeploymentQuery decisionTableKey(String key);
 
   /**
    * Only select deployments with a process definition key like the given string.
    */
-  DmnDeploymentQuery processDefinitionKeyLike(String keyLike);
+  DmnDeploymentQuery decisionTableKeyLike(String keyLike);
 
   // sorting ////////////////////////////////////////////////////////
 

File: modules/activiti-dmn-api/src/main/java/org/activiti/dmn/api/DmnRepositoryService.java
Patch:
@@ -26,7 +26,7 @@
 public interface DmnRepositoryService {
 
     DmnDeploymentBuilder createDeployment();
-
+    
     void deleteDeployment(String deploymentId);
     
     DecisionTableQuery createDecisionTableQuery();

File: modules/activiti-dmn-engine/src/test/java/org/activiti/dmn/engine/test/RuntimeTest.java
Patch:
@@ -20,13 +20,11 @@
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * @author Yvo Swillens
  */
-@Ignore
 public class RuntimeTest extends AbstractActivitiDmnTest {
 
     @Test

File: modules/activiti-engine/src/main/java/org/activiti/engine/DynamicBpmnConstants.java
Patch:
@@ -36,6 +36,8 @@ public interface DynamicBpmnConstants {
   String USER_TASK_CANDIDATE_USERS = "userTaskCandidateUsers";
   String USER_TASK_CANDIDATE_GROUPS = "userTaskCandidateGroups";
   
+  String DMN_TASK_DECISION_TABLE_KEY = "dmnTaskDecisionTableKey";
+  
   String SEQUENCE_FLOW_CONDITION = "sequenceFlowCondition";
 
   String LOCALIZATION_LANGUAGE = "language";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/SendTaskParseHandler.java
Patch:
@@ -42,6 +42,8 @@ protected void executeParse(BpmnParse bpmnParse, SendTask sendTask) {
         sendTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(sendTask));
       } else if (sendTask.getType().equalsIgnoreCase("camel")) {
         sendTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createCamelActivityBehavior(sendTask));
+      } else if (sendTask.getType().equalsIgnoreCase("dmn")) {
+        sendTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDmnActivityBehavior(sendTask));
       }
 
     } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(sendTask.getImplementationType()) && StringUtils.isNotEmpty(sendTask.getOperationRef())) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/ServiceTaskParseHandler.java
Patch:
@@ -48,6 +48,9 @@ protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {
 
       } else if (serviceTask.getType().equalsIgnoreCase("shell")) {
         serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));
+        
+      } else if (serviceTask.getType().equalsIgnoreCase("dmn")) {
+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDmnActivityBehavior(serviceTask));
 
       } else {
         logger.warn("Invalid service task type: '" + serviceTask.getType() + "' " + " for service task " + serviceTask.getId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -31,7 +31,7 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
 
   ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntity);
   
-  ExecutionEntity createSubprocessInstance(String processDefinitionId, ExecutionEntity superExecutionEntity);
+  ExecutionEntity createSubprocessInstance(String processDefinitionId, ExecutionEntity superExecutionEntity, String businessKey);
   
   /**
    * Finds the {@link ExecutionEntity} for the given root process instance id.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -280,14 +280,15 @@ public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntit
   }
   
   @Override
-  public ExecutionEntity createSubprocessInstance(String processDefinitionId, ExecutionEntity superExecutionEntity) {
+  public ExecutionEntity createSubprocessInstance(String processDefinitionId, ExecutionEntity superExecutionEntity, String businessKey) {
     ExecutionEntity subProcessInstance = executionDataManager.create(); 
     inheritCommonProperties(superExecutionEntity, subProcessInstance);
     subProcessInstance.setProcessDefinitionId(processDefinitionId);
     subProcessInstance.setSuperExecution(superExecutionEntity);
     subProcessInstance.setRootProcessInstanceId(superExecutionEntity.getRootProcessInstanceId());
     subProcessInstance.setScope(true); // process instance is always a scope for all child executions
     subProcessInstance.setStartUserId(Authentication.getAuthenticatedUserId());
+    subProcessInstance.setBusinessKey(businessKey);
 
     // Store in database
     insert(subProcessInstance, false);

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/DeploymentBuilder.java
Patch:
@@ -37,6 +37,8 @@ public interface DeploymentBuilder {
   DeploymentBuilder addClasspathResource(String resource);
 
   DeploymentBuilder addString(String resourceName, String text);
+  
+  DeploymentBuilder addBytes(String resourceName, byte[] bytes);
 
   DeploymentBuilder addZipInputStream(ZipInputStream zipInputStream);
 

File: modules/activiti-form-engine-configurator/src/main/java/org/activiti/form/engine/deployer/FormDeployer.java
Patch:
@@ -32,6 +32,8 @@ public class FormDeployer implements Deployer {
 
   @Override
   public void deploy(DeploymentEntity deployment, Map<String, Object> deploymentSettings) {
+    if (deployment.isNew() == false) return;
+    
     log.debug("FormDeployer: processing deployment {}", deployment.getName());
 
     FormDeploymentBuilder formDeploymentBuilder = null;

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/repository/FormDeploymentBuilderImpl.java
Patch:
@@ -45,7 +45,7 @@ public class FormDeploymentBuilderImpl implements FormDeploymentBuilder, Seriali
 
   public FormDeploymentBuilderImpl() {
     FormEngineConfiguration formEngineConfiguration = Context.getFormEngineConfiguration();
-    this.repositoryService = formEngineConfiguration.getFormRepositoryService();
+    this.repositoryService = (FormRepositoryServiceImpl) formEngineConfiguration.getFormRepositoryService();
     this.deployment = formEngineConfiguration.getDeploymentEntityManager().create();
     this.resourceEntityManager = formEngineConfiguration.getResourceEntityManager();
   }

File: modules/activiti-form-model/src/main/java/org/activiti/form/model/OptionFormField.java
Patch:
@@ -18,6 +18,8 @@
  * @author Tijs Rademakers
  */
 public class OptionFormField extends FormField {
+  
+  private static final long serialVersionUID = 1L;
 
   protected String optionType;
   protected Boolean hasEmptyValue;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/constants/StencilConstants.java
Patch:
@@ -222,7 +222,6 @@ public interface StencilConstants {
   final String PROPERTY_SEQUENCEFLOW_DEFAULT = "defaultflow";
   final String PROPERTY_SEQUENCEFLOW_CONDITION = "conditionsequenceflow";
   final String PROPERTY_SEQUENCEFLOW_ORDER = "sequencefloworder";
-  final String PROPERTY_COLLAPSED_SUBPROCESS_REFERENCE = "subprocessreference";
   final String PROPERTY_FORM_REFERENCE = "formreference";
   
   final String PROPERTY_MESSAGE_DEFINITIONS = "messagedefinitions";

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ActivityProcessor.java
Patch:
@@ -17,6 +17,7 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.FlowElementsContainer;
+import org.activiti.editor.language.json.model.ModelInfo;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
@@ -27,8 +28,8 @@
 public interface ActivityProcessor {
 
   public void processFlowElements(FlowElementsContainer container, BpmnModel model, ArrayNode shapesArrayNode, 
-      double subProcessX, double subProcessY);
+      Map<String, ModelInfo> formKeyMap, Map<String, ModelInfo> decisionTableKeyMap, double subProcessX, double subProcessY);
 
   public void processJsonElements(JsonNode shapesArrayNode, JsonNode modelNode, BaseElement parentElement, 
-      Map<String, JsonNode> shapeMap, Map<Long, JsonNode> decisionTableMap, BpmnModel bpmnModel);
+      Map<String, JsonNode> shapeMap, Map<Long, String> formKeyMap, Map<Long, String> decisionTableMap, BpmnModel bpmnModel);
 }

File: modules/activiti-process-validation/src/main/java/org/activiti/validation/validator/Problems.java
Patch:
@@ -55,6 +55,8 @@ public interface Problems {
 
   String SHELL_TASK_NO_COMMAND = "activiti-shelltask-no-command";
   String SHELL_TASK_INVALID_PARAM = "activiti-shelltask-invalid-param";
+  
+  String DMN_TASK_NO_KEY = "activiti-dmntask-no-decision-table-key";
 
   String EXCLUSIVE_GATEWAY_NO_OUTGOING_SEQ_FLOW = "activiti-exclusive-gateway-no-outgoing-seq-flow";
   String EXCLUSIVE_GATEWAY_CONDITION_NOT_ALLOWED_ON_SINGLE_SEQ_FLOW = "activiti-exclusive-gateway-condition-not-allowed-on-single-seq-flow";

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/editor/Model.java
Patch:
@@ -17,7 +17,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name="MODEL")
+@Table(name="ACT_DE_MODEL")
 public class Model extends AbstractModel {
 
 	@Column(name="thumbnail")

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/editor/ModelHistory.java
Patch:
@@ -21,7 +21,7 @@
 import javax.persistence.TemporalType;
 
 @Entity
-@Table(name="MODEL_HISTORY")
+@Table(name="ACT_DE_MODEL_HISTORY")
 public class ModelHistory extends AbstractModel {
 
 	@Column(name="model_id")

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/editor/ModelRelationTypes.java
Patch:
@@ -20,4 +20,5 @@ public interface ModelRelationTypes {
 	
 	String TYPE_PROCESS_MODEL = "process-model";
 	
+	String TYPE_DECISION_TABLE_MODEL_CHILD = "decision-table-model";
 }

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/idm/PersistentToken.java
Patch:
@@ -39,7 +39,7 @@
  * @see com.mycompany.myapp.security.CustomPersistentRememberMeServices
  */
 @Entity
-@Table(name = "PERSISTENT_TOKEN")
+@Table(name = "ACT_IDM_PERSISTENT_TOKEN")
 @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
 public class PersistentToken implements Serializable {
 

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/runtime/Comment.java
Patch:
@@ -35,7 +35,7 @@
  * @author Frederik Heremans
  */
 @Entity
-@Table(name = "COMMENTS")
+@Table(name = "ACT_WO_COMMENTS")
 @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
 public class Comment implements Serializable {
 

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/runtime/RelatedContent.java
Patch:
@@ -35,7 +35,7 @@
  * @author Frederik Heremans
  */
 @Entity
-@Table(name = "RELATED_CONTENT")
+@Table(name = "ACT_WO_RELATED_CONTENT")
 @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
 public class RelatedContent {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/editor/AlfrescoDecisionTableService.java
Patch:
@@ -260,6 +260,7 @@ public DecisionTableRepresentation saveDecisionTable(Long decisionTableId, Decis
     Model model = getModel(decisionTableId, false, false);
 
     model.setName(saveRepresentation.getDecisionTableRepresentation().getName());
+    model.setKey(saveRepresentation.getDecisionTableRepresentation().getKey());
     model.setDescription(saveRepresentation.getDecisionTableRepresentation().getDescription());
 
     String editorJson = null;

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/AbstractModelsResource.java
Patch:
@@ -52,7 +52,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
-public class AbstractModelsResource extends BaseModelResource {
+public class AbstractModelsResource {
 
   protected static final String FILTER_SHARED_WITH_ME = "sharedWithMe";
   protected static final String FILTER_SHARED_WITH_OTHERS = "sharedWithOthers";

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/ModelsResource.java
Patch:
@@ -162,7 +162,7 @@ public ModelRepresentation duplicateModel(@PathVariable Long modelId, @RequestBo
     String json = null;
     Model model = null;
     if (modelId != null) {
-      model = getModel(modelId, true, false);
+      model = modelService.getModel(modelId);
       json = model.getModelEditorJson();
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDataObjectCmd.java
Patch:
@@ -131,7 +131,7 @@ public DataObject execute(CommandContext commandContext) {
       }
       
       if (foundDataObject != null) {
-        dataObject = new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId());
+        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());
       }
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDataObjectsCmd.java
Patch:
@@ -151,7 +151,7 @@ public Map<String, DataObject> execute(CommandContext commandContext) {
         }
         
         if (foundDataObject != null) {
-          dataObjects.put(name, new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId()));
+          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskDataObjectCmd.java
Patch:
@@ -115,7 +115,7 @@ public DataObject execute(CommandContext commandContext) {
       }
 
       if (foundDataObject != null) {
-        dataObject = new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId());
+        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskDataObjectsCmd.java
Patch:
@@ -128,7 +128,7 @@ public Map<String, DataObject> execute(CommandContext commandContext) {
         }
         
         if (foundDataObject != null) {
-          dataObjects.put(variableEntity.getName(), new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId()));
+          dataObjects.put(variableEntity.getName(), new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDataObjectCmd.java
Patch:
@@ -131,7 +131,7 @@ public DataObject execute(CommandContext commandContext) {
       }
       
       if (foundDataObject != null) {
-        dataObject = new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId());
+        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());
       }
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDataObjectsCmd.java
Patch:
@@ -151,7 +151,7 @@ public Map<String, DataObject> execute(CommandContext commandContext) {
         }
         
         if (foundDataObject != null) {
-          dataObjects.put(name, new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId()));
+          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskDataObjectCmd.java
Patch:
@@ -115,7 +115,7 @@ public DataObject execute(CommandContext commandContext) {
       }
 
       if (foundDataObject != null) {
-        dataObject = new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId());
+        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskDataObjectsCmd.java
Patch:
@@ -128,7 +128,7 @@ public Map<String, DataObject> execute(CommandContext commandContext) {
         }
         
         if (foundDataObject != null) {
-          dataObjects.put(variableEntity.getName(), new DataObjectImpl(variableEntity, foundDataObject.getDocumentation(), localizedName, localizedDescription, foundDataObject.getId()));
+          dataObjects.put(variableEntity.getName(), new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryImpl.java
Patch:
@@ -139,7 +139,7 @@ public List<HistoricTaskInstance> executeList(CommandContext commandContext, Pag
       tasks = commandContext.getHistoricTaskInstanceEntityManager().findHistoricTaskInstancesByQueryCriteria(this);
     }
     
-    if (tasks != null) {
+    if (tasks != null && Context.getProcessEngineConfiguration().getPerformanceSettings().isEnableLocalization()) {
       for (HistoricTaskInstance task : tasks) {
         localize(task);
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -1256,7 +1256,7 @@ public List<Task> executeList(CommandContext commandContext, Page page) {
       tasks = commandContext.getTaskEntityManager().findTasksByQueryCriteria(this);
     }
     
-    if (tasks != null) {
+    if (tasks != null && Context.getProcessEngineConfiguration().getPerformanceSettings().isEnableLocalization()) {
       for (Task task : tasks) {
         localize(task);
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/MoveJobToDeadLetterJobCmd.java
Patch:
@@ -54,7 +54,7 @@ public DeadLetterJobEntity execute(CommandContext commandContext) {
     }
 
     if (log.isDebugEnabled()) {
-      log.debug("Movving job to deadletter job table {}", job.getId());
+      log.debug("Moving job to deadletter job table {}", job.getId());
     }
     
     DeadLetterJobEntity deadLetterJob = commandContext.getJobManager().moveJobToDeadLetterJob(job);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -16,9 +16,9 @@
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.Group;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
+import org.activiti.engine.impl.persistence.entity.Entity;
 import org.activiti.engine.impl.persistence.entity.GroupEntity;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -16,9 +16,9 @@
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
+import org.activiti.engine.impl.persistence.entity.Entity;
 import org.activiti.engine.impl.persistence.entity.UserEntity;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/EntityDependencyOrder.java
Patch:
@@ -10,6 +10,7 @@
 import org.activiti.engine.impl.persistence.entity.CompensateEventSubscriptionEntityImpl;
 import org.activiti.engine.impl.persistence.entity.DeadLetterJobEntityImpl;
 import org.activiti.engine.impl.persistence.entity.DeploymentEntityImpl;
+import org.activiti.engine.impl.persistence.entity.Entity;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntityImpl;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityImpl;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityImpl;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/cache/CachedEntity.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.persistence.cache;
 
-import org.activiti.engine.impl.db.Entity;
+import org.activiti.engine.impl.persistence.entity.Entity;
 
 /**
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/cache/EntityCache.java
Patch:
@@ -16,9 +16,9 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.Session;
+import org.activiti.engine.impl.persistence.entity.Entity;
 
 /**
  * This is a cache for {@link Entity} instances during the execution of one {@link Command}.
@@ -39,6 +39,7 @@ public interface EntityCache extends Session {
    * @param entity The {@link Entity} instance
    * @param storeState If true, the current state {@link Entity#getPersistentState()} will be stored for future diffing.
    *                   Note that, if false, the {@link Entity} will always be seen as changed.
+   * @return Returns a {@link CachedEntity} instance, which can be enriched later on.                   
    */
   CachedEntity put(Entity entity, boolean storeState);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/cache/EntityCacheImpl.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.impl.db.Entity;
+import org.activiti.engine.impl.persistence.entity.Entity;
 
 /**
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AbstractEntityManager.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.persistence.AbstractManager;
 import org.activiti.engine.impl.persistence.entity.data.DataManager;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AbstractJobEntity.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.Date;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.runtime.Job;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.Date;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.task.Attachment;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CommentEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.Date;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.task.Comment;
 import org.activiti.engine.task.Event;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.repository.Deployment;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EntityManager.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventLogEntryEntity.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Date;
 
 import org.activiti.engine.event.EventLogEntry;
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * An event log entry can only be inserted (and maybe deleted).

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.Date;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -55,8 +55,6 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
   
   List<ProcessInstance> findProcessInstanceAndVariablesByQueryCriteria(ProcessInstanceQueryImpl executionQuery);
 
-  List<ExecutionEntity> findEventScopeExecutionsByActivityId(String activityRef, String parentExecutionId);
-  
   Collection<ExecutionEntity> findInactiveExecutionsByProcessInstanceId(String processInstanceId);
 
   Collection<ExecutionEntity> findInactiveExecutionsByActivityIdAndProcessInstanceId(String activityId, String processInstanceId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/GroupEntity.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.persistence.entity;
 
 import org.activiti.engine.identity.Group;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/GroupEntityManagerImpl.java
Patch:
@@ -48,6 +48,7 @@ protected DataManager<GroupEntity> getDataManager() {
   public Group createNewGroup(String groupId) {
     GroupEntity groupEntity = groupDataManager.create();
     groupEntity.setId(groupId);
+    groupEntity.setRevision(0); // Needed as groups can be transient and not save when they are returned 
     return groupEntity;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailEntity.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Date;
 
 import org.activiti.engine.history.HistoricDetail;
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -14,7 +14,6 @@
 package org.activiti.engine.impl.persistence.entity;
 
 import org.activiti.engine.history.HistoricVariableUpdate;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricIdentityLinkEntity.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.persistence.entity;
 
 import org.activiti.engine.history.HistoricIdentityLink;
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricScopeInstanceEntity.java
Patch:
@@ -16,8 +16,6 @@
 
 import java.util.Date;
 
-import org.activiti.engine.impl.db.Entity;
-
 /**
  * @author Joram Barrez
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntity.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.List;
 
 import org.activiti.engine.history.HistoricTaskInstance;
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Date;
 
 import org.activiti.engine.history.HistoricVariableInstance;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.Map;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.task.IdentityLink;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/MembershipEntity.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/MembershipEntityImpl.java
Patch:
@@ -18,7 +18,7 @@
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public class MembershipEntityImpl implements MembershipEntity, Serializable {
+public class MembershipEntityImpl extends AbstractEntityNoRevision implements MembershipEntity, Serializable {
 
   private static final long serialVersionUID = 1L;
 
@@ -42,7 +42,7 @@ public String getId() {
   public void setId(String id) {
     // membership doesn't have an id
   }
-
+  
   public String getUserId() {
     return userId;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ModelEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.Date;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.repository.Model;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.List;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.repository.ProcessDefinition;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionInfoEntity.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/PropertyEntity.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ResourceEntity.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TableDataManagerImpl.java
Patch:
@@ -36,7 +36,6 @@
 import org.activiti.engine.impl.TablePageQueryImpl;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.persistence.AbstractManager;
 import org.activiti.engine.management.TableMetaData;
 import org.activiti.engine.management.TablePage;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.bpmn.model.ActivitiListener;
 import org.activiti.engine.delegate.DelegateTask;
 import org.activiti.engine.delegate.VariableScope;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.task.Task;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/UserEntity.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.activiti.engine.identity.Picture;
 import org.activiti.engine.identity.User;
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/UserEntityManagerImpl.java
Patch:
@@ -54,6 +54,7 @@ public UserEntity findById(String entityId) {
   public User createNewUser(String userId) {
     UserEntity userEntity = create();
     userEntity.setId(userId);
+    userEntity.setRevision(0); // needed as users can be transient
     return userEntity;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstance.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.engine.impl.persistence.entity;
 
-import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.variable.ValueFields;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/DataManager.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.persistence.entity.data;
 
-import org.activiti.engine.impl.db.Entity;
+import org.activiti.engine.impl.persistence.entity.Entity;
 
 /**
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/ExecutionDataManager.java
Patch:
@@ -51,13 +51,11 @@ public interface ExecutionDataManager extends DataManager<ExecutionEntity> {
   
   List<ProcessInstance> findProcessInstanceAndVariablesByQueryCriteria(ProcessInstanceQueryImpl executionQuery);
 
-  List<ExecutionEntity> findEventScopeExecutionsByActivityId(String activityRef, String parentExecutionId);
-
   Collection<ExecutionEntity> findInactiveExecutionsByProcessInstanceId(final String processInstanceId);
   
   Collection<ExecutionEntity> findInactiveExecutionsByActivityIdAndProcessInstanceId(final String activityId, final String processInstanceId);
   
-  List<String> findProcessInstanceIdsByProcessDefinitionId(String processDefinitionId);
+  List<ExecutionEntity> findProcessInstanceIdsByProcessDefinitionId(String processDefinitionId);
   
   List<Execution> findExecutionsByNativeQuery(Map<String, Object> parameterMap, int firstResult, int maxResults);
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -98,6 +98,7 @@ protected void setUp() throws Exception {
       public String execute(CommandContext commandContext) {
         JobEntity message = commandContext.getJobEntityManager().create();
         message.setJobType(Job.JOB_TYPE_MESSAGE);
+        message.setRetries(3);
         commandContext.getJobManager().scheduleAsyncJob(message);
         return message.getId();
       }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -469,7 +469,7 @@ public List<ActivityExecution> findInactiveConcurrentExecutions(PvmActivity acti
     if (isConcurrent()) {
       List< ? extends ActivityExecution> concurrentExecutions = getParent().getAllChildExecutions();
       for (ActivityExecution concurrentExecution: concurrentExecutions) {
-        if (concurrentExecution.getActivity()==activity) {
+        if (concurrentExecution.getActivity() != null && concurrentExecution.getActivity().getId().equals(activity.getId())) {
           if (!concurrentExecution.isActive()) {
             inactiveConcurrentExecutionsInActivity.add(concurrentExecution);
           }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -513,7 +513,7 @@ public List<ActivityExecution> findInactiveConcurrentExecutions(PvmActivity acti
     if (isConcurrent()) {
       List< ? extends ActivityExecution> concurrentExecutions = getParent().getExecutions();
       for (ActivityExecution concurrentExecution: concurrentExecutions) {
-        if (concurrentExecution.getActivity()==activity) {
+        if (concurrentExecution.getActivity() != null && concurrentExecution.getActivity().getId().equals(activity.getId())) {
           if (concurrentExecution.isActive()) {
             throw new PvmException("didn't expect active execution in "+activity+". bug?");
           }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/ProcessDefinitionInfoCache.java
Patch:
@@ -45,7 +45,7 @@ public class ProcessDefinitionInfoCache {
   /** Cache with no limit */
   public ProcessDefinitionInfoCache(CommandExecutor commandExecutor) {
     this.commandExecutor = commandExecutor;
-    this.cache = new HashMap<String, ProcessDefinitionInfoCacheObject>();
+    this.cache = Collections.synchronizedMap(new HashMap<String, ProcessDefinitionInfoCacheObject>());
   }
   
   /** Cache which has a hard limit: no more elements will be cached than the limit. */

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/deploy/ProcessDefinitionInfoCache.java
Patch:
@@ -44,7 +44,7 @@ public class ProcessDefinitionInfoCache {
   /** Cache with no limit */
   public ProcessDefinitionInfoCache(CommandExecutor commandExecutor) {
     this.commandExecutor = commandExecutor;
-    this.cache = new HashMap<String, ProcessDefinitionInfoCacheObject>();
+    this.cache = Collections.synchronizedMap(new HashMap<String, ProcessDefinitionInfoCacheObject>());
   }
   
   /** Cache which has a hard limit: no more elements will be cached than the limit. */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/ProcessDefinitionInfoCache.java
Patch:
@@ -44,7 +44,7 @@ public class ProcessDefinitionInfoCache {
   /** Cache with no limit */
   public ProcessDefinitionInfoCache(CommandExecutor commandExecutor) {
     this.commandExecutor = commandExecutor;
-    this.cache = new HashMap<String, ProcessDefinitionInfoCacheObject>();
+    this.cache = Collections.synchronizedMap(new HashMap<String, ProcessDefinitionInfoCacheObject>()); 
   }
   
   /** Cache which has a hard limit: no more elements will be cached than the limit. */

File: modules/activiti-dmn-engine/src/main/java/org/activiti/dmn/engine/impl/persistence/deploy/DefaultDeploymentCache.java
Patch:
@@ -33,7 +33,7 @@ public class DefaultDeploymentCache<T> implements DeploymentCache<T> {
 
     /** Cache with no limit */
     public DefaultDeploymentCache() {
-        this.cache = new HashMap<String, T>();
+        this.cache = Collections.synchronizedMap(new HashMap<String, T>());
     }
 
     /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/DefaultDeploymentCache.java
Patch:
@@ -33,7 +33,7 @@ public class DefaultDeploymentCache<T> implements DeploymentCache<T> {
 
   /** Cache with no limit */
   public DefaultDeploymentCache() {
-    this.cache = new HashMap<String, T>();
+    this.cache = Collections.synchronizedMap(new HashMap<String, T>());
   }
 
   /**

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/persistence/deploy/DefaultDeploymentCache.java
Patch:
@@ -33,7 +33,7 @@ public class DefaultDeploymentCache<T> implements DeploymentCache<T> {
 
     /** Cache with no limit */
     public DefaultDeploymentCache() {
-        this.cache = new HashMap<String, T>();
+        this.cache = Collections.synchronizedMap(new HashMap<String, T>());
     }
 
     /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/DefaultDeploymentCache.java
Patch:
@@ -54,7 +54,7 @@ protected boolean removeEldestEntry(Map.Entry<String, T> eldest) {
         
       });
     } else {
-      this.cache = new HashMap<String, T>();
+      this.cache = Collections.synchronizedMap(new HashMap<String, T>());
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/DefaultJobManager.java
Patch:
@@ -231,7 +231,8 @@ public void unacquire(Job job) {
       // as the chance of failure will be high.
       
     } else {
-      throw new ActivitiException("Only JobEntity instances can be unacquired");
+      // It could be a v5 job, so simply unlock it.
+      processEngineConfiguration.getJobEntityManager().resetExpiredJob(job.getId());
     }
     
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TableDataManagerImpl.java
Patch:
@@ -88,6 +88,7 @@ public TableDataManagerImpl(ProcessEngineConfigurationImpl processEngineConfigur
     entityToTableNameMap.put(DeploymentEntity.class, "ACT_RE_DEPLOYMENT");
     entityToTableNameMap.put(ProcessDefinitionEntity.class, "ACT_RE_PROCDEF");
     entityToTableNameMap.put(ModelEntity.class, "ACT_RE_MODEL");
+    entityToTableNameMap.put(ProcessDefinitionInfoEntity.class, "ACT_PROCDEF_INFO");
 
     // history
     entityToTableNameMap.put(CommentEntity.class, "ACT_HI_COMMENT");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -37,8 +37,6 @@
 import org.activiti.engine.impl.cmd.GetAttachmentCmd;
 import org.activiti.engine.impl.cmd.GetAttachmentContentCmd;
 import org.activiti.engine.impl.cmd.GetCommentCmd;
-import org.activiti.engine.impl.cmd.GetExecutionVariableInstanceCmd;
-import org.activiti.engine.impl.cmd.GetExecutionVariableInstancesCmd;
 import org.activiti.engine.impl.cmd.GetIdentityLinksForTaskCmd;
 import org.activiti.engine.impl.cmd.GetProcessInstanceAttachmentsCmd;
 import org.activiti.engine.impl.cmd.GetProcessInstanceCommentsCmd;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateThrowCompensationEventActivityBehavior.java
Patch:
@@ -28,7 +28,6 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityManager;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.apache.commons.lang3.StringUtils;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ClassDelegateFactory.java
Patch:
@@ -16,7 +16,6 @@
 
 import org.activiti.bpmn.model.MapExceptionEntry;
 import org.activiti.engine.delegate.Expression;
-import org.activiti.engine.impl.bpmn.helper.ClassDelegate;
 import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;
 
 /** Constructs {@link ClassDelegate}s. */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/listener/ListenerNotificationHelper.java
Patch:
@@ -31,7 +31,6 @@
 import org.activiti.engine.delegate.TransactionDependentExecutionListener;
 import org.activiti.engine.delegate.TransactionDependentTaskListener;
 import org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.TransactionContext;
 import org.activiti.engine.impl.cfg.TransactionListener;
 import org.activiti.engine.impl.cfg.TransactionState;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntityImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.BulkDeleteable;
-import org.activiti.engine.impl.identity.Authentication;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/SuspendedJobEntityManager.java
Patch:
@@ -17,7 +17,6 @@
 import org.activiti.engine.impl.JobQueryImpl;
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.SuspendedJobQueryImpl;
-import org.activiti.engine.impl.TimerJobQueryImpl;
 import org.activiti.engine.runtime.Job;
 
 /**
@@ -51,4 +50,4 @@ public interface SuspendedJobEntityManager extends EntityManager<SuspendedJobEnt
    */
   void updateJobTenantIdForDeployment(String deploymentId, String newTenantId);
   
-}
\ No newline at end of file
+}

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManagerImpl.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.TaskQueryImpl;
 import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
-import org.activiti.engine.impl.bpmn.listener.ListenerNotificationHelper;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.persistence.entity.data.DataManager;
 import org.activiti.engine.impl.persistence.entity.data.TaskDataManager;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/impl/MybatisDeadLetterJobDataManager.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 import org.activiti.engine.impl.DeadLetterJobQueryImpl;
 import org.activiti.engine.impl.Page;

File: modules/activiti-engine/src/main/java/org/activiti/engine/runtime/ExecutionQuery.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Date;
 import java.util.Set;
 
-import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.query.Query;
 

File: modules/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/ExternalInvocationTaskValidator.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.List;
 
 import org.activiti.bpmn.model.FieldExtension;
-import org.activiti.bpmn.model.Task;
 import org.activiti.bpmn.model.TaskWithFieldExtensions;
 import org.activiti.validation.ValidationError;
 import org.activiti.validation.validator.Problems;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java
Patch:
@@ -168,7 +168,7 @@ public void close() {
               // reduce log level, as normally we're not interested in logging this exception
               log.debug("Optimistic locking exception : " + exception);
             } else {
-              log.debug("Error while closing command context", exception);
+              log.error("Error while closing command context", exception);
             }
 
             transactionContext.rollback();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java
Patch:
@@ -153,7 +153,7 @@ protected void logException() {
       // reduce log level, as normally we're not interested in logging this exception
       log.debug("Optimistic locking exception : " + exception);
     } else {
-      log.debug("Error while closing command context", exception);
+      log.error("Error while closing command context", exception);
     }
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/interceptor/CommandContext.java
Patch:
@@ -171,7 +171,7 @@ public void close() {
               // reduce log level, as normally we're not interested in logging this exception
               log.debug("Optimistic locking exception : " + exception);
             } else {
-              log.debug("Error while closing command context", exception);
+              log.error("Error while closing command context", exception);
             }
 
             transactionContext.rollback();

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -164,7 +164,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
 
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file).
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances based on the process definition.
    * 
@@ -178,7 +178,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
 
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file).
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances based on the process definition.
    * 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/QueryVariableValue.java
Patch:
@@ -55,8 +55,7 @@ public void initialize(VariableTypes types) {
       } else if (type instanceof JPAEntityListVariableType) {
         throw new ActivitiIllegalArgumentException("Variables containing a list of JPA entities cannot be used to query");
       } else {
-        // Type implementation determines which fields are set on the
-        // entity
+        // Type implementation determines which fields are set on the entity
         variableInstanceEntity = Context.getCommandContext().getVariableInstanceEntityManager().create(name, type, value);
       }
     }

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/deployer/CachingAndArtifactsManager.java
Patch:
@@ -36,6 +36,7 @@ public void updateCachingAndArtifacts(ParsedDeployment parsedDeployment) {
 
     for (FormEntity form : parsedDeployment.getAllForms()) {
       FormDefinition formDefinition = parsedDeployment.getFormDefinitionForForm(form);
+      formDefinition.setId(form.getId());
       FormCacheEntry cacheEntry = new FormCacheEntry(form, formDefinition);
       formCache.add(form.getId(), cacheEntry);
     

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/deployer/ParsedDeploymentBuilder.java
Patch:
@@ -65,14 +65,14 @@ protected FormParse createFormParseFromResource(ResourceEntity resource) {
     String resourceName = resource.getName();
     ByteArrayInputStream inputStream = new ByteArrayInputStream(resource.getBytes());
 
-    FormParse dmnParse = formParseFactory.createParse()
+    FormParse formParse = formParseFactory.createParse()
         .sourceInputStream(inputStream)
         .setSourceSystemId(resourceName)
         .deployment(deployment)
         .name(resourceName);
     
-    dmnParse.execute(Context.getFormEngineConfiguration());
-    return dmnParse;
+    formParse.execute(Context.getFormEngineConfiguration());
+    return formParse;
   }
 
   protected boolean isFormResource(String resourceName) {

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/persistence/entity/data/impl/MybatisFormDataManager.java
Patch:
@@ -31,8 +31,8 @@
  */
 public class MybatisFormDataManager extends AbstractDataManager<FormEntity> implements FormDataManager {
   
-  public MybatisFormDataManager(FormEngineConfiguration dmnEngineConfiguration) {
-    super(dmnEngineConfiguration);
+  public MybatisFormDataManager(FormEngineConfiguration formEngineConfiguration) {
+    super(formEngineConfiguration);
   }
 
   @Override

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/persistence/entity/data/impl/MybatisFormDeploymentDataManager.java
Patch:
@@ -30,8 +30,8 @@
  */
 public class MybatisFormDeploymentDataManager extends AbstractDataManager<FormDeploymentEntity> implements FormDeploymentDataManager {
 
-  public MybatisFormDeploymentDataManager(FormEngineConfiguration dmnEngineConfiguration) {
-    super(dmnEngineConfiguration);
+  public MybatisFormDeploymentDataManager(FormEngineConfiguration formEngineConfiguration) {
+    super(formEngineConfiguration);
   }
 
   @Override

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/persistence/entity/data/impl/MybatisResourceDataManager.java
Patch:
@@ -27,8 +27,8 @@
  */
 public class MybatisResourceDataManager extends AbstractDataManager<ResourceEntity> implements ResourceDataManager {
   
-  public MybatisResourceDataManager(FormEngineConfiguration dmnEngineConfiguration) {
-    super(dmnEngineConfiguration);
+  public MybatisResourceDataManager(FormEngineConfiguration formEngineConfiguration) {
+    super(formEngineConfiguration);
   }
 
   @Override

File: modules/activiti-form-engine/src/main/java/org/activiti/form/engine/impl/util/FormUtil.java
Patch:
@@ -62,7 +62,7 @@ public static FormDefinition getFormDefinitionFromCache(String formId) {
     return null;
   }
   
-  public static FormEntity getDecisionTableFromDatabase(String formId) {
+  public static FormEntity getFormDefinitionFromDatabase(String formId) {
     FormEntityManager formEntityManager = Context.getFormEngineConfiguration().getFormEntityManager();
     FormEntity form = formEntityManager.findById(formId);
     if (form == null) {

File: modules/activiti-form-json-converter/src/main/java/org/activiti/editor/form/converter/FormJsonConverter.java
Patch:
@@ -23,7 +23,7 @@ public class FormJsonConverter {
 
   protected ObjectMapper objectMapper = new ObjectMapper();
 
-  public FormDefinition convertToForm(String modelJson, Long modelId, int modelVersion) {
+  public FormDefinition convertToForm(String modelJson, String modelId, int modelVersion) {
     try {
       FormDefinition definition = objectMapper.readValue(modelJson, FormDefinition.class);
       definition.setId(modelId);

File: modules/activiti-form-json-converter/src/test/java/org/activiti/editor/form/converter/FormJsonConverterTest.java
Patch:
@@ -44,10 +44,10 @@ public class FormJsonConverterTest {
     public void testSimpleJsonForm() throws Exception {
 
         String testJsonResource = readJsonToString(JSON_RESOURCE_1);
-        FormDefinition formDefinition = new FormJsonConverter().convertToForm(testJsonResource, 11l, 1);
+        FormDefinition formDefinition = new FormJsonConverter().convertToForm(testJsonResource, "11", 1);
 
         assertNotNull(formDefinition);
-        assertEquals(Long.valueOf(11), formDefinition.getId());
+        assertEquals("11", formDefinition.getId());
         assertEquals("form1", formDefinition.getKey());
         assertEquals("My first form", formDefinition.getName());
 

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/repository/idm/PersistentTokenRepository.java
Patch:
@@ -19,11 +19,10 @@
 import org.springframework.data.jpa.repository.Modifying;
 
 import com.activiti.domain.idm.PersistentToken;
-import com.activiti.domain.idm.User;
 
 public interface PersistentTokenRepository extends JpaRepository<PersistentToken, String> {
 
-    List<PersistentToken> findByUser(User user);
+    List<PersistentToken> findByUser(String user);
 
     List<PersistentToken> findByTokenDateBefore(Date date);
     

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/repository/runtime/RelatedContentRepository.java
Patch:
@@ -19,7 +19,6 @@
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.activiti.domain.idm.User;
 import com.activiti.domain.runtime.RelatedContent;
 
 /**
@@ -55,5 +54,5 @@ public interface RelatedContentRepository extends JpaRepository<RelatedContent,
     void deleteAllContentByProcessInstanceId(@Param("processInstanceId") String processInstanceId);
     
     @Query("select sum(r.contentSize) from RelatedContent r where r.createdBy = :user")
-    Long getTotalContentSizeForUser(@Param("user") User user);
+    Long getTotalContentSizeForUser(@Param("user") String user);
 }

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/repository/runtime/RuntimeAppDefinitionRepository.java
Patch:
@@ -19,7 +19,6 @@
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
-import com.activiti.domain.idm.User;
 import com.activiti.domain.runtime.RuntimeAppDefinition;
 
 public interface RuntimeAppDefinitionRepository extends JpaRepository<RuntimeAppDefinition, Long>{
@@ -31,9 +30,9 @@ public interface RuntimeAppDefinitionRepository extends JpaRepository<RuntimeApp
     List<RuntimeAppDefinition> findByNameIgnoreCase(String name, Pageable pageable);
     
     @Query("select app.appDefinition from RuntimeApp app where app.user = :user")
-    List<RuntimeAppDefinition> findByUser(@Param("user") User user);
+    List<RuntimeAppDefinition> findByUser(@Param("user") String user);
     
     @Query("from RuntimeAppDefinition def where def.modelId = :modelId and def.createdBy = :user")
-    RuntimeAppDefinition findByModelAndUser(@Param("modelId") Long modelId, @Param("user") User user);
+    RuntimeAppDefinition findByModelAndUser(@Param("modelId") Long modelId, @Param("user") String user);
     
 }
\ No newline at end of file

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/security/ActivitiAppUser.java
Patch:
@@ -29,17 +29,17 @@ public class ActivitiAppUser extends User {
 
     private static final long serialVersionUID = 1L;
     
-    protected com.activiti.domain.idm.User userObject;
+    protected org.activiti.engine.identity.User userObject;
     
     /**
      * The userId needs to be passed explicitly. It can be the email, but also the external id when eg LDAP is being used. 
      */
-    public ActivitiAppUser(com.activiti.domain.idm.User user, String userId, Collection<? extends GrantedAuthority> authorities) {
+    public ActivitiAppUser(org.activiti.engine.identity.User user, String userId, Collection<? extends GrantedAuthority> authorities) {
         super(userId, user.getPassword() != null ? user.getPassword() : "", authorities); // Passwords needs to be non-null. Even if it's not there (eg LDAP auth)
         this.userObject = user;
     }
     
-    public com.activiti.domain.idm.User getUserObject() {
+    public org.activiti.engine.identity.User getUserObject() {
         return userObject;
     }
 }

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/api/AppDefinitionService.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import com.activiti.domain.idm.User;
+import org.activiti.engine.identity.User;
 
 public interface AppDefinitionService {
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/api/DeploymentService.java
Patch:
@@ -14,10 +14,9 @@
 
 import java.util.List;
 
+import org.activiti.engine.identity.User;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.activiti.domain.idm.User;
-
 public interface DeploymentService {
 
     @Transactional

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/editor/ModelInternalService.java
Patch:
@@ -13,11 +13,11 @@
 package com.activiti.service.editor;
 
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.engine.identity.User;
 
 import com.activiti.domain.editor.AbstractModel;
 import com.activiti.domain.editor.Model;
 import com.activiti.domain.editor.ModelHistory;
-import com.activiti.domain.idm.User;
 import com.activiti.model.editor.ModelRepresentation;
 import com.activiti.model.editor.ReviveModelResultRepresentation;
 import com.activiti.service.api.ModelService;

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/runtime/CommentService.java
Patch:
@@ -16,13 +16,13 @@
 
 import javax.inject.Inject;
 
+import org.activiti.engine.identity.User;
 import org.activiti.engine.runtime.Clock;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.domain.Sort.Direction;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.activiti.domain.idm.User;
 import com.activiti.domain.runtime.Comment;
 import com.activiti.repository.runtime.CommentRepository;
 
@@ -61,7 +61,7 @@ public Comment createComment(String message, User createdBy, String processInsta
     public Comment createComment(String message, User createdBy, String taskId, String processInstanceId) {
         Comment newComment = new Comment();
         newComment.setMessage(message);
-        newComment.setCreatedBy(createdBy);
+        newComment.setCreatedBy(createdBy.getId());
         newComment.setCreated(clock.getCurrentTime());
         newComment.setTaskId(taskId);
         newComment.setProcessInstanceId(processInstanceId);

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/runtime/RuntimeAppDefinitionInternalService.java
Patch:
@@ -14,7 +14,8 @@
 
 import java.util.List;
 
-import com.activiti.domain.idm.User;
+import org.activiti.engine.identity.User;
+
 import com.activiti.domain.runtime.RuntimeApp;
 import com.activiti.domain.runtime.RuntimeAppDefinition;
 import com.activiti.domain.runtime.RuntimeAppDeployment;

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -164,7 +164,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
 
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file).
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances based on the process definition.
    * 
@@ -178,7 +178,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
 
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file).
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances based on the process definition.
    * 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/RepositoryService.java
Patch:
@@ -172,7 +172,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.
@@ -186,7 +186,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -164,7 +164,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
 
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file).
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances based on the process definition.
    * 
@@ -178,7 +178,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
 
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file).
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances based on the process definition.
    * 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/RepositoryService.java
Patch:
@@ -172,7 +172,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.
@@ -186,7 +186,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -172,7 +172,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.
@@ -186,7 +186,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -172,7 +172,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionById(String processDefinitionId, boolean suspendProcessInstances, Date suspensionDate);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.
@@ -186,7 +186,7 @@ public interface RepositoryService {
   void suspendProcessDefinitionByKey(String processDefinitionKey);
   
   /**
-   * Suspends the <strong>all<strong> process definitions with the given key (= id in the bpmn20.xml file). 
+   * Suspends the <strong>all</strong> process definitions with the given key (= id in the bpmn20.xml file).
    * 
    * If a process definition is in state suspended, it will not be possible to start new process instances
    * based on the process definition.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/AcquireAsyncJobsDueRunnable.java
Patch:
@@ -43,6 +43,7 @@ public AcquireAsyncJobsDueRunnable(AsyncExecutor asyncExecutor) {
 
   public synchronized void run() {
     log.info("{} starting to acquire async jobs due");
+    Thread.currentThread().setName("activiti-acquire-async-jobs");
 
     final CommandExecutor commandExecutor = asyncExecutor.getCommandExecutor();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/AcquireTimerJobsRunnable.java
Patch:
@@ -47,6 +47,7 @@ public AcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, JobManager jobManag
 
   public synchronized void run() {
     log.info("{} starting to acquire async jobs due");
+    Thread.currentThread().setName("activiti-acquire-timer-jobs");
 
     final CommandExecutor commandExecutor = asyncExecutor.getCommandExecutor();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/ResetExpiredJobsRunnable.java
Patch:
@@ -48,6 +48,7 @@ public ResetExpiredJobsRunnable(AsyncExecutor asyncExecutor) {
 
   public synchronized void run() {
     log.info("{} starting to reset expired jobs");
+    Thread.currentThread().setName("activiti-reset-expired-jobs");
 
     while (!isInterrupted) {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -451,8 +451,8 @@ protected void debugFlush() {
         nrOfDeletes++;
       }
     }
-    for (Collection<BulkDeleteOperation> bulkDeleteOperations : bulkDeleteOperations.values()) {
-      for (BulkDeleteOperation bulkDeleteOperation : bulkDeleteOperations) {
+    for (Collection<BulkDeleteOperation> bulkDeleteOperationList : bulkDeleteOperations.values()) {
+      for (BulkDeleteOperation bulkDeleteOperation : bulkDeleteOperationList) {
         log.debug("  {}", bulkDeleteOperation);
         nrOfDeletes++;
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -70,14 +70,14 @@ public Class<?> getSessionType() {
 
   public Session openSession(CommandContext commandContext) {
     DbSqlSession dbSqlSession = new DbSqlSession(this, commandContext.getEntityCache());
-    if (getDatabaseSchema() != null) {
+    if (getDatabaseSchema() != null && getDatabaseSchema().length() > 0) {
       try {
         dbSqlSession.getSqlSession().getConnection().setSchema(getDatabaseSchema());
       } catch (SQLException e) {
         throw new ActivitiException("Could not set database schema on connection", e);
       }
     }
-    if (getDatabaseCatalog() != null) {
+    if (getDatabaseCatalog() != null && getDatabaseCatalog().length() > 0) {
       try {
         dbSqlSession.getSqlSession().getConnection().setCatalog(getDatabaseCatalog());
       } catch (SQLException e) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TableDataManagerImpl.java
Patch:
@@ -181,7 +181,8 @@ public List<String> getTablesPresentInDatabase() {
         if ("oracle".equals(getDbSqlSession().getDbSqlSessionFactory().getDatabaseType())) {
           tableNameFilter = databaseTablePrefix + "ACT" + databaseMetaData.getSearchStringEscape() + "_%";
         }
-        tables = databaseMetaData.getTables(null, null, tableNameFilter, DbSqlSession.JDBC_METADATA_TABLE_TYPES);
+        tables = databaseMetaData.getTables(getProcessEngineConfiguration().getDatabaseCatalog(), getProcessEngineConfiguration().getDatabaseSchema(), 
+            tableNameFilter, DbSqlSession.JDBC_METADATA_TABLE_TYPES);
         while (tables.next()) {
           String tableName = tables.getString("TABLE_NAME");
           tableName = tableName.toUpperCase();
@@ -250,7 +251,7 @@ public TableMetaData getTableMetaData(String tableName) {
       
       String schema = getProcessEngineConfiguration().getDatabaseSchema();
 
-      ResultSet resultSet = metaData.getColumns(null, null, tableName, null);
+      ResultSet resultSet = metaData.getColumns(getProcessEngineConfiguration().getDatabaseCatalog(), schema, tableName, null);
       while(resultSet.next()) {
         boolean wrongSchema = false;
         if (schema != null && schema.length() > 0) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -164,7 +164,8 @@ public List<String> getTablesPresentInDatabase() {
         if ("oracle".equals(getDbSqlSession().getDbSqlSessionFactory().getDatabaseType())) {
           tableNameFilter = databaseTablePrefix+"ACT" + databaseMetaData.getSearchStringEscape() + "_%";
         }
-        tables = databaseMetaData.getTables(null, null, tableNameFilter, getDbSqlSession().JDBC_METADATA_TABLE_TYPES);
+        tables = databaseMetaData.getTables(getProcessEngineConfiguration().getDatabaseCatalog(), getProcessEngineConfiguration().getDatabaseSchema(), 
+            tableNameFilter, getDbSqlSession().JDBC_METADATA_TABLE_TYPES);
         while (tables.next()) {
           String tableName = tables.getString("TABLE_NAME");
           tableName = tableName.toUpperCase();
@@ -237,7 +238,7 @@ public TableMetaData getTableMetaData(String tableName) {
       
       String schema = getProcessEngineConfiguration().getDatabaseSchema();
 
-      ResultSet resultSet = metaData.getColumns(null, null, tableName, null);
+      ResultSet resultSet = metaData.getColumns(getProcessEngineConfiguration().getDatabaseCatalog(), schema, tableName, null);
       while(resultSet.next()) {
         boolean wrongSchema = false;
         if (schema != null && schema.length() > 0) {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/compatibility/StartTimerEventRepeatCompatibilityTest.java
Patch:
@@ -88,7 +88,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes(9 * 60 * 24);
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);
+    executeJobExecutorForTime(10000, 200);
     
     // there must be a pending job because the endDate is not reached yet
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/compatibility/StartTimerEventRepeatCompatibilityTest.java
Patch:
@@ -88,7 +88,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes(9 * 60 * 24);
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);
+    executeJobExecutorForTime(10000, 200);
     
     // there must be a pending job because the endDate is not reached yet
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/DeadLetterJobEntity.java
Patch:
@@ -38,6 +38,7 @@ public DeadLetterJobEntity(AbstractJobEntity te) {
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();
     this.jobHandlerType = te.getJobHandlerType();
     this.isExclusive = te.isExclusive();
+    this.duedate = te.getDuedate();
     this.repeat = te.getRepeat();
     this.retries = te.getRetries();
     this.endDate = te.getEndDate();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -98,6 +98,7 @@ protected void scheduleEventAsync(Object payload) {
     message.setJobHandlerConfiguration(id);
     message.setTenantId(getTenantId());
     message.setProcessDefinitionId(getProcessDefinitionId());
+    message.setExecutionId(getExecutionId());
     message.setProcessInstanceId(getProcessInstanceId());
     
     if (Context.getProcessEngineConfiguration().getAsyncExecutor().isActive()) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/SuspendedJobEntity.java
Patch:
@@ -38,6 +38,7 @@ public SuspendedJobEntity(AbstractJobEntity te) {
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();
     this.jobHandlerType = te.getJobHandlerType();
     this.isExclusive = te.isExclusive();
+    this.duedate = te.getDuedate();
     this.repeat = te.getRepeat();
     this.retries = te.getRetries();
     this.endDate = te.getEndDate();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/TimerJobEntity.java
Patch:
@@ -69,6 +69,7 @@ public TimerJobEntity(AbstractJobEntity te) {
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();
     this.jobHandlerType = te.getJobHandlerType();
     this.isExclusive = te.isExclusive();
+    this.duedate = te.getDuedate();
     this.repeat = te.getRepeat();
     this.retries = te.getRetries();
     this.endDate = te.getEndDate();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/HistoricActivityEventsTest.java
Patch:
@@ -17,11 +17,11 @@
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventType;
-import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
+import org.activiti5.engine.history.HistoricActivityInstance;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 /**
  * Test case for all {@link ActivitiEvent}s related to activities.

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceAndVariablesQueryTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.task.Task;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceQueryAndWithExceptionTest.java
Patch:
@@ -3,11 +3,11 @@
 import java.util.List;
 
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.DeploymentProperties;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.runtime.TimerJobQuery;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class HistoricProcessInstanceQueryAndWithExceptionTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceQueryVersionTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class HistoricProcessInstanceQueryVersionTest extends PluggableActivitiTestCase{
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -28,12 +28,12 @@
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.history.HistoricTaskInstanceQuery;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.impl.util.CollectionUtil;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.task.TaskQuery;
 import org.activiti.engine.test.Deployment;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.test.api.runtime.ProcessInstanceQueryTest;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/NonCascadeDeleteTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.task.Task;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.junit.Test;
 
 public class NonCascadeDeleteTest extends PluggableActivitiTestCase {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/ProcessInstanceLogQueryAndByteArrayTypeVariableTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.activiti.engine.impl.history.HistoryLevel;
 import org.activiti.engine.impl.persistence.entity.HistoricDetailVariableInstanceUpdateEntity;
 import org.activiti.engine.impl.persistence.entity.HistoricVariableInstanceEntity;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.task.Task;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 /**
  * @author Daisuke Yoshimoto

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetJobExceptionStacktrace() {
     assertTextPresent("This is an exception thrown from scriptTask", timerJob.getExceptionMessage());
     
     // Get the full stacktrace using the managementService
-    String exceptionStack = managementService.getJobExceptionStacktrace(timerJob.getId());
+    String exceptionStack = managementService.getTimerJobExceptionStacktrace(timerJob.getId());
     assertNotNull(exceptionStack);
     assertTextPresent("This is an exception thrown from scriptTask", exceptionStack);    
   }

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/repository/ProcessDefinitionQueryByLatestTest.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.repository.ProcessDefinitionQuery;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class ProcessDefinitionQueryByLatestTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ExecutionAndProcessInstanceQueryVersionTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.activiti5.engine.test.api.runtime;
 
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class ExecutionAndProcessInstanceQueryVersionTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ProcessInstanceQueryAndWithExceptionTest.java
Patch:
@@ -4,12 +4,12 @@
 
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.DeploymentProperties;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.runtime.ProcessInstanceQuery;
 import org.activiti.engine.runtime.TimerJobQuery;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class ProcessInstanceQueryAndWithExceptionTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -297,7 +297,7 @@ public void testTimersRecreatedOnDeploymentDelete() {
    	assertEquals(3, repositoryService.createProcessDefinitionQuery().count());
    	assertEquals(0, managementService.createTimerJobQuery().count());
    	
-    // Deploy v4: no timer 
+    // Deploy v4: 1 start timer 
    	String deployment4 = repositoryService.createDeployment()
  			.addClasspathResource("org/activiti5/engine/test/bpmn/event/timer/StartTimerEventTest.testTimersRecreatedOnDeploymentDelete_v4.bpmn20.xml")
  			.deploymentProperty(DeploymentProperties.DEPLOY_AS_ACTIVITI5_PROCESS_DEFINITION, Boolean.TRUE)

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -77,7 +77,7 @@ public void testSimpleSubProcessWithTimer() {
     // Setting the clock forward 2 hours 1 second (timer fires in 2 hours) and fire up the job executor 
     clock.setCurrentTime(new Date(startTime.getTime() + (2 * 60 * 60 * 1000) + 1000));
     processEngineConfiguration.setClock(clock);
-    waitForJobExecutorToProcessAllJobs(5000L, 50L);
+    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(5000L, 100L);
 
     // The subprocess should be left, and the escalated task should be active
     Task escalationTask = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.history.HistoricIdentityLink;
 import org.activiti.engine.history.HistoricTaskInstance;
-import org.activiti.engine.impl.persistence.entity.TaskEntity;
 import org.activiti.engine.runtime.Clock;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/DeadLetterJobEntity.java
Patch:
@@ -38,6 +38,7 @@ public DeadLetterJobEntity(AbstractJobEntity te) {
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();
     this.jobHandlerType = te.getJobHandlerType();
     this.isExclusive = te.isExclusive();
+    this.duedate = te.getDuedate();
     this.repeat = te.getRepeat();
     this.retries = te.getRetries();
     this.endDate = te.getEndDate();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -98,6 +98,7 @@ protected void scheduleEventAsync(Object payload) {
     message.setJobHandlerConfiguration(id);
     message.setTenantId(getTenantId());
     message.setProcessDefinitionId(getProcessDefinitionId());
+    message.setExecutionId(getExecutionId());
     message.setProcessInstanceId(getProcessInstanceId());
     
     if (Context.getProcessEngineConfiguration().getAsyncExecutor().isActive()) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/SuspendedJobEntity.java
Patch:
@@ -38,6 +38,7 @@ public SuspendedJobEntity(AbstractJobEntity te) {
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();
     this.jobHandlerType = te.getJobHandlerType();
     this.isExclusive = te.isExclusive();
+    this.duedate = te.getDuedate();
     this.repeat = te.getRepeat();
     this.retries = te.getRetries();
     this.endDate = te.getEndDate();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/TimerJobEntity.java
Patch:
@@ -69,6 +69,7 @@ public TimerJobEntity(AbstractJobEntity te) {
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();
     this.jobHandlerType = te.getJobHandlerType();
     this.isExclusive = te.isExclusive();
+    this.duedate = te.getDuedate();
     this.repeat = te.getRepeat();
     this.retries = te.getRetries();
     this.endDate = te.getEndDate();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/HistoricActivityEventsTest.java
Patch:
@@ -17,11 +17,11 @@
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.delegate.event.ActivitiEventType;
-import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
+import org.activiti5.engine.history.HistoricActivityInstance;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 /**
  * Test case for all {@link ActivitiEvent}s related to activities.

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceAndVariablesQueryTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.task.Task;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceQueryAndWithExceptionTest.java
Patch:
@@ -3,11 +3,11 @@
 import java.util.List;
 
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.DeploymentProperties;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.runtime.TimerJobQuery;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class HistoricProcessInstanceQueryAndWithExceptionTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceQueryVersionTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class HistoricProcessInstanceQueryVersionTest extends PluggableActivitiTestCase{
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -28,12 +28,12 @@
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.history.HistoricTaskInstanceQuery;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.impl.util.CollectionUtil;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.task.TaskQuery;
 import org.activiti.engine.test.Deployment;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.test.api.runtime.ProcessInstanceQueryTest;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/NonCascadeDeleteTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.task.Task;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.junit.Test;
 
 public class NonCascadeDeleteTest extends PluggableActivitiTestCase {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/ProcessInstanceLogQueryAndByteArrayTypeVariableTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.activiti.engine.impl.history.HistoryLevel;
 import org.activiti.engine.impl.persistence.entity.HistoricDetailVariableInstanceUpdateEntity;
 import org.activiti.engine.impl.persistence.entity.HistoricVariableInstanceEntity;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.task.Task;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 /**
  * @author Daisuke Yoshimoto

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetJobExceptionStacktrace() {
     assertTextPresent("This is an exception thrown from scriptTask", timerJob.getExceptionMessage());
     
     // Get the full stacktrace using the managementService
-    String exceptionStack = managementService.getJobExceptionStacktrace(timerJob.getId());
+    String exceptionStack = managementService.getTimerJobExceptionStacktrace(timerJob.getId());
     assertNotNull(exceptionStack);
     assertTextPresent("This is an exception thrown from scriptTask", exceptionStack);    
   }

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/repository/ProcessDefinitionQueryByLatestTest.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.repository.ProcessDefinitionQuery;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class ProcessDefinitionQueryByLatestTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ExecutionAndProcessInstanceQueryVersionTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.activiti5.engine.test.api.runtime;
 
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class ExecutionAndProcessInstanceQueryVersionTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ProcessInstanceQueryAndWithExceptionTest.java
Patch:
@@ -4,12 +4,12 @@
 
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
-import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.DeploymentProperties;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.runtime.ProcessInstanceQuery;
 import org.activiti.engine.runtime.TimerJobQuery;
+import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
 public class ProcessInstanceQueryAndWithExceptionTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -297,7 +297,7 @@ public void testTimersRecreatedOnDeploymentDelete() {
    	assertEquals(3, repositoryService.createProcessDefinitionQuery().count());
    	assertEquals(0, managementService.createTimerJobQuery().count());
    	
-    // Deploy v4: no timer 
+    // Deploy v4: 1 start timer 
    	String deployment4 = repositoryService.createDeployment()
  			.addClasspathResource("org/activiti5/engine/test/bpmn/event/timer/StartTimerEventTest.testTimersRecreatedOnDeploymentDelete_v4.bpmn20.xml")
  			.deploymentProperty(DeploymentProperties.DEPLOY_AS_ACTIVITI5_PROCESS_DEFINITION, Boolean.TRUE)

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -77,7 +77,7 @@ public void testSimpleSubProcessWithTimer() {
     // Setting the clock forward 2 hours 1 second (timer fires in 2 hours) and fire up the job executor 
     clock.setCurrentTime(new Date(startTime.getTime() + (2 * 60 * 60 * 1000) + 1000));
     processEngineConfiguration.setClock(clock);
-    waitForJobExecutorToProcessAllJobs(5000L, 50L);
+    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(5000L, 100L);
 
     // The subprocess should be left, and the escalated task should be active
     Task escalationTask = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.history.HistoricIdentityLink;
 import org.activiti.engine.history.HistoricTaskInstance;
-import org.activiti.engine.impl.persistence.entity.TaskEntity;
 import org.activiti.engine.runtime.Clock;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;

File: modules/activiti-dmn-engine/src/main/java/org/activiti/dmn/engine/DmnRepositoryService.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.dmn.engine.repository.DmnDeploymentQuery;
 import org.activiti.dmn.engine.repository.NativeDecisionTableQuery;
 import org.activiti.dmn.engine.repository.NativeDmnDeploymentQuery;
+import org.activiti.dmn.model.DmnDefinition;
 
 /**
  * Service providing access to the repository of process definitions and deployments.
@@ -55,4 +56,6 @@ public interface DmnRepositoryService {
     InputStream getDmnResource(String decisionTableId);
     
     void setDecisionTableCategory(String decisionTableId, String category);
+
+    DmnDefinition getDmnDefinition(String decisionTableId);
 }

File: modules/activiti-dmn-engine/src/main/java/org/activiti/dmn/engine/test/DmnTestHelper.java
Patch:
@@ -111,7 +111,7 @@ public static DmnEngine getDmnEngine(String configurationResource) {
         DmnEngine dmnEngine = dmnEngines.get(configurationResource);
         if (dmnEngine == null) {
             log.debug("==== BUILDING DMN ENGINE ========================================================================");
-            dmnEngine = DmnEngineConfiguration.createDmnEngineConfigurationFromResource(configurationResource).buildDmnEngine();
+            dmnEngine = DmnEngineConfiguration.createDmnEngineConfigurationFromResource(configurationResource).setDatabaseSchemaUpdate(DmnEngineConfiguration.DB_SCHEMA_UPDATE_DROP_CREATE).buildDmnEngine();
             log.debug("==== DMN ENGINE CREATED =========================================================================");
             dmnEngines.put(configurationResource, dmnEngine);
         }

File: modules/activiti-dmn-engine/src/test/java/org/activiti/dmn/engine/test/CustomConfigRuntimeTest.java
Patch:
@@ -23,12 +23,14 @@
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
 /**
  * @author Yvo Swillens
  */
+@Ignore
 public class CustomConfigRuntimeTest {
 
     public static String H2_TEST_JDBC_URL = "jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000";

File: modules/activiti-dmn-engine/src/test/java/org/activiti/dmn/engine/test/RuntimeTest.java
Patch:
@@ -20,11 +20,13 @@
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * @author Yvo Swillens
  */
+@Ignore
 public class RuntimeTest extends AbstractActivitiDmnTest {
 
     @Test

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.java
Patch:
@@ -91,10 +91,9 @@ public void testCycleDateStartTimerEvent() throws Exception {
     
     // ADVANCE THE CLOCK
     // advance the clock after 9 days from starting the process ->
-    // the system will execute the pending job and will create a new one
-    // (day by day)
+    // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes((9 * 60 * 24));
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000L, 200);
+    executeJobExecutorForTime(10000, 200);
     
     // there must be a pending job because the endDate is not reached yet
     assertEquals(1, managementService.createTimerJobQuery().count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/compatibility/StartTimerEventRepeatCompatibilityTest.java
Patch:
@@ -87,7 +87,8 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes(9 * 60 * 24);
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000, 200);
+    executeJobExecutorForTime(10000, 200);
+    
     // there must be a pending job because the endDate is not reached yet
     jobs = managementService.createTimerJobQuery().list();
     assertEquals(1, jobs.size());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/compatibility/StartTimerEventRepeatCompatibilityTest.java
Patch:
@@ -87,7 +87,8 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes(9 * 60 * 24);
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000, 200);
+    executeJobExecutorForTime(10000, 200);
+    
     // there must be a pending job because the endDate is not reached yet
     jobs = managementService.createTimerJobQuery().list();
     assertEquals(1, jobs.size());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes((9 * 60 * 24));
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000L, 200);
+    executeJobExecutorForTime(10000, 200);
     
     // there must be a pending job because the endDate is not reached yet
     assertEquals(1, managementService.createTimerJobQuery().count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes((9 * 60 * 24));
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000L, 200);
+    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000L, 200);
     
     // there must be a pending job because the endDate is not reached yet
     assertEquals(1, managementService.createTimerJobQuery().count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.java
Patch:
@@ -91,8 +91,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     
     // ADVANCE THE CLOCK
     // advance the clock after 9 days from starting the process ->
-    // the system will execute the pending job and will create a new one
-    // (day by day)
+    // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes((9 * 60 * 24));
     waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000L, 200);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/MoveTimerToExecutableJobCmd.java
Patch:
@@ -54,9 +54,7 @@ public JobEntity execute(CommandContext commandContext) {
       log.debug("Executing timer job {}", timerJob.getId());
     }
     
-    JobEntity executableJob = commandContext.getJobManager().moveTimerJobToExecutableJob(timerJob);
-
-    return executableJob;
+    return commandContext.getJobManager().moveTimerJobToExecutableJob(timerJob);
   }
 
   public String getJobId() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/JobDataManager.java
Patch:
@@ -40,5 +40,4 @@ public interface JobDataManager extends DataManager<JobEntity> {
   
   void unacquireJob(String jobId);
   
-  void resetExpiredJobs();
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/ProcessDefinitionSuspensionTest.java
Patch:
@@ -483,7 +483,7 @@ public void testDelayedSuspendMultipleProcessDefinitionsByKey() {
 
     // Move time 3 hours and run job executor
     processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + (3 * hourInMs)));
-    waitForJobExecutorToProcessAllJobs(5000L, 50L);
+    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(5000L, 100L);
     assertEquals(nrOfProcessDefinitions, repositoryService.createProcessDefinitionQuery().count());
     assertEquals(0, repositoryService.createProcessDefinitionQuery().active().count());
     assertEquals(nrOfProcessDefinitions, repositoryService.createProcessDefinitionQuery().suspended().count());
@@ -498,7 +498,7 @@ public void testDelayedSuspendMultipleProcessDefinitionsByKey() {
 
     // Move time 6 hours and run job executor
     processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + (6 * hourInMs)));
-    waitForJobExecutorToProcessAllJobs(5000L, 50L);
+    waitForJobExecutorToProcessAllJobs(10000L, 100L);
     assertEquals(nrOfProcessDefinitions, repositoryService.createProcessDefinitionQuery().count());
     assertEquals(nrOfProcessDefinitions, repositoryService.createProcessDefinitionQuery().active().count());
     assertEquals(0, repositoryService.createProcessDefinitionQuery().suspended().count());

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -94,7 +94,6 @@ public void testHistoricTaskInstance() throws Exception {
     assertEquals("Schedule an engineering meeting for next week with the new hire.", historicTaskInstance.getDescription());
     assertEquals(dueDate, historicTaskInstance.getDueDate());
     assertEquals("kermit", historicTaskInstance.getAssignee());
-    assertEquals(TaskEntity.DELETE_REASON_COMPLETED, historicTaskInstance.getDeleteReason());
     assertEquals(taskDefinitionKey, historicTaskInstance.getTaskDefinitionKey());
     assertEquals("expressionFormKey", historicTaskInstance.getFormKey());
     assertNotNull(historicTaskInstance.getEndTime());
@@ -206,7 +205,6 @@ public void testHistoricTaskInstanceQuery() throws Exception {
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().taskAssigneeLike("%johndoe%").count());
     
     // Delete reason
-    assertEquals(1, historyService.createHistoricTaskInstanceQuery().taskDeleteReason(TaskEntity.DELETE_REASON_COMPLETED).count());
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().taskDeleteReason("deleted").count());
     
     // Task definition ID
@@ -408,7 +406,6 @@ public void testHistoricTaskInstanceOrQuery() throws Exception {
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().or().taskAssignee("kermit").endOr().or().taskAssigneeLike("%johndoe%").endOr().count());
     
     // Delete reason
-    assertEquals(1, historyService.createHistoricTaskInstanceQuery().or().taskDeleteReason(TaskEntity.DELETE_REASON_COMPLETED).endOr().count());
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().or().taskDeleteReason("deleted").endOr().count());
     
     // Task definition ID

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/DefaultAsyncJobExecutor.java
Patch:
@@ -14,6 +14,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.runtime.Job;
+import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -205,7 +206,8 @@ protected void startExecutingAsyncJobs() {
     if (executorService == null) {
       log.info("Creating executor service with corePoolSize {}, maxPoolSize {} and keepAliveTime {}", corePoolSize, maxPoolSize, keepAliveTime);
 
-      executorService = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.MILLISECONDS, threadPoolQueue);
+      BasicThreadFactory threadFactory = new BasicThreadFactory.Builder().namingPattern("activiti-async-job-executor-thread-%d").build();
+      executorService = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.MILLISECONDS, threadPoolQueue, threadFactory);
     }
 
     startJobAcquisitionThread();

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ActivityProcessor.java
Patch:
@@ -30,5 +30,5 @@ public void processFlowElements(FlowElementsContainer container, BpmnModel model
       double subProcessX, double subProcessY);
 
   public void processJsonElements(JsonNode shapesArrayNode, JsonNode modelNode, BaseElement parentElement, 
-      Map<String, JsonNode> shapeMap, BpmnModel bpmnModel);
+      Map<String, JsonNode> shapeMap, Map<Long, JsonNode> decisionTableMap, BpmnModel bpmnModel);
 }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BoundaryEventJsonConverter.java
Patch:
@@ -88,7 +88,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
     dockNode.put(EDITOR_BOUNDS_X, graphicInfo.getX() - parentGraphicInfo.getX());
     dockNode.put(EDITOR_BOUNDS_Y, graphicInfo.getY() - parentGraphicInfo.getY());
     dockersArrayNode.add(dockNode);
-    flowElementNode.put("dockers", dockersArrayNode);
+    flowElementNode.set("dockers", dockersArrayNode);
 
     propertiesNode.put(PROPERTY_CANCEL_ACTIVITY, boundaryEvent.isCancelActivity());
 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/CallActivityJsonConverter.java
Patch:
@@ -83,8 +83,8 @@ private void addJsonParameters(String propertyName, String valueName, List<IOPar
       itemsNode.add(parameterItemNode);
     }
 
-    parametersNode.put(valueName, itemsNode);
-    propertiesNode.put(propertyName, parametersNode);
+    parametersNode.set(valueName, itemsNode);
+    propertiesNode.set(propertyName, parametersNode);
   }
 
   protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/StartEventJsonConverter.java
Patch:
@@ -84,7 +84,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
           ObjectNode formRefNode = objectMapper.createObjectNode();
           formRefNode.put("id", Long.valueOf(formIdExtensions.get(0).getElementText()));
           formRefNode.put("name", formNameExtensions.get(0).getElementText());
-          propertiesNode.put(PROPERTY_FORM_REFERENCE, formRefNode);
+          propertiesNode.set(PROPERTY_FORM_REFERENCE, formRefNode);
           
       } else if (startEvent.getFormKey().startsWith("FORM_REFERENCE")) {
           String formReference = startEvent.getFormKey().replace("FORM_REFERENCE", "");
@@ -95,7 +95,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
               ObjectNode formRefNode = objectMapper.createObjectNode();
               formRefNode.put("id", Long.valueOf(formIdString));
               formRefNode.put("name", formNameString);
-              propertiesNode.put(PROPERTY_FORM_REFERENCE, formRefNode);
+              propertiesNode.set(PROPERTY_FORM_REFERENCE, formRefNode);
           }
 
       } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/DefaultAsyncJobExecutor.java
Patch:
@@ -14,6 +14,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.runtime.Job;
+import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -205,7 +206,8 @@ protected void startExecutingAsyncJobs() {
     if (executorService == null) {
       log.info("Creating executor service with corePoolSize {}, maxPoolSize {} and keepAliveTime {}", corePoolSize, maxPoolSize, keepAliveTime);
 
-      executorService = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.MILLISECONDS, threadPoolQueue);
+      BasicThreadFactory threadFactory = new BasicThreadFactory.Builder().namingPattern("activiti-async-job-executor-thread-%d").build();
+      executorService = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.MILLISECONDS, threadPoolQueue, threadFactory);
     }
 
     startJobAcquisitionThread();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -541,7 +541,7 @@ public void flush() {
 
     if (log.isDebugEnabled()) {
       Collection<List<Entity>> insertedObjectLists = insertedObjects.values();
-      log.debug("Flishing dbSqlSession");
+      log.debug("Flushing dbSqlSession");
       int nrOfInserts = 0, nrOfUpdates = 0, nrOfDeletes = 0;
       for (List<Entity> insertedObjectList: insertedObjectLists) {
       	for (Entity insertedObject : insertedObjectList) {

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/bean/ActivityBehaviourBean.java
Patch:
@@ -1,6 +1,7 @@
 package org.activiti.osgi.blueprint.bean;
 
 import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ActivityBehavior;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
@@ -11,8 +12,6 @@ public class ActivityBehaviourBean implements ActivityBehavior {
   @Override
   public void execute(DelegateExecution execution) {
     execution.setVariable("visitedActivityBehaviour", true);
-    
-    ((ExecutionEntity) execution).setActive(false);
-    ((ExecutionEntity) execution).setEnded(true);
+    Context.getAgenda().planTakeOutgoingSequenceFlowsOperation((ExecutionEntity) execution, true);
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -541,7 +541,7 @@ public void flush() {
 
     if (log.isDebugEnabled()) {
       Collection<List<Entity>> insertedObjectLists = insertedObjects.values();
-      log.debug("Flishing dbSqlSession");
+      log.debug("Flushing dbSqlSession");
       int nrOfInserts = 0, nrOfUpdates = 0, nrOfDeletes = 0;
       for (List<Entity> insertedObjectList: insertedObjectLists) {
       	for (Entity insertedObject : insertedObjectList) {

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -85,9 +85,9 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("org.activiti").artifactId("activiti-image-generator").version("6.0.0.Beta3-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("6.0.0.Beta3-SNAPSHOT"),
         mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.3.2"),
-        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.2.3"),
-        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.2.3"),
-        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-annotations").version("2.2.3"),
+        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.7.5"),
+        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.7.5"),
+        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-annotations").version("2.7.5"),
         mavenBundle().groupId("log4j").artifactId("log4j").version("1.2.17"),
         mavenBundle().groupId("joda-time").artifactId("joda-time").version("2.6"),
         mavenBundle().groupId("com.h2database").artifactId("h2").version("1.3.176"),

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/bean/ActivityBehaviourBean.java
Patch:
@@ -1,6 +1,7 @@
 package org.activiti.osgi.blueprint.bean;
 
 import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ActivityBehavior;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
@@ -11,8 +12,6 @@ public class ActivityBehaviourBean implements ActivityBehavior {
   @Override
   public void execute(DelegateExecution execution) {
     execution.setVariable("visitedActivityBehaviour", true);
-    
-    ((ExecutionEntity) execution).setActive(false);
-    ((ExecutionEntity) execution).setEnded(true);
+    Context.getAgenda().planTakeOutgoingSequenceFlowsOperation((ExecutionEntity) execution, true);
   }
 }

File: modules/activiti-ui/activiti-app-data/src/main/java/com/activiti/domain/editor/AbstractModel.java
Patch:
@@ -43,6 +43,7 @@ public class AbstractModel {
 	public static final int MODEL_TYPE_BPMN = 0;
 	public static final int MODEL_TYPE_FORM = 2;
 	public static final int MODEL_TYPE_APP = 3;
+	public static final int MODEL_TYPE_DECISION_TABLE = 4;
 
 	@Id
 	@GeneratedValue(strategy = GenerationType.TABLE, generator = "modelIdGenerator")

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/util/XmlUtil.java
Patch:
@@ -15,7 +15,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
-package com.activiti.rest.util;
+package com.activiti.util;
 
 import javax.xml.stream.XMLInputFactory;
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/AbstractModelResource.java
Patch:
@@ -34,11 +34,11 @@
 import com.activiti.domain.idm.User;
 import com.activiti.model.editor.ModelRepresentation;
 import com.activiti.repository.editor.ModelShareInfoRepository;
-import com.activiti.rest.util.XmlUtil;
 import com.activiti.security.SecurityUtils;
 import com.activiti.service.editor.ModelInternalService;
 import com.activiti.service.exception.BadRequestException;
 import com.activiti.service.exception.NonJsonResourceNotFoundException;
+import com.activiti.util.XmlUtil;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/AbstractModelsResource.java
Patch:
@@ -51,11 +51,11 @@
 import com.activiti.model.editor.AppDefinitionListModelRepresentation;
 import com.activiti.model.editor.ModelRepresentation;
 import com.activiti.repository.editor.ModelRepository;
-import com.activiti.rest.util.XmlUtil;
 import com.activiti.security.SecurityUtils;
 import com.activiti.service.editor.ModelInternalService;
 import com.activiti.service.exception.BadRequestException;
 import com.activiti.service.exception.InternalServerErrorException;
+import com.activiti.util.XmlUtil;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/EditorDisplayJsonClientResource.java
Patch:
@@ -28,7 +28,6 @@
 import com.activiti.domain.editor.Model;
 import com.activiti.domain.editor.ModelHistory;
 import com.activiti.service.editor.BpmnDisplayJsonConverter;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -42,7 +41,6 @@ public class EditorDisplayJsonClientResource extends BaseModelResource {
 	protected ObjectMapper objectMapper = new ObjectMapper();
 	
 	@RequestMapping(value = "/rest/models/{processModelId}/model-json", method = RequestMethod.GET, produces = "application/json")
-	@Timed
 	public JsonNode getModelJSON(@PathVariable Long processModelId) {
 		ObjectNode displayNode = objectMapper.createObjectNode();
 		Model model = getModel(processModelId, true, false);
@@ -51,7 +49,6 @@ public JsonNode getModelJSON(@PathVariable Long processModelId) {
 	}
 	
 	@RequestMapping(value = "/rest/models/{processModelId}/history/{processModelHistoryId}/model-json", method = RequestMethod.GET, produces = "application/json")
-    @Timed
     public JsonNode getModelHistoryJSON(@PathVariable Long processModelId, @PathVariable Long processModelHistoryId) {
 	    ObjectNode displayNode = objectMapper.createObjectNode();
         ModelHistory model = getModelHistory(processModelId, processModelHistoryId, true, false);

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/EditorGroupsResource.java
Patch:
@@ -23,15 +23,13 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.common.ResultListDataRepresentation;
-import com.codahale.metrics.annotation.Timed;
 
 /**
  * Rest resource for managing groups, used in the editor app.
  */
 @RestController
 public class EditorGroupsResource extends AbstractEditorGroupsResource {
 	
-    @Timed
     @RequestMapping(value = "/rest/editor-groups", method = RequestMethod.GET)
     public ResultListDataRepresentation getGroups(@RequestParam(required=false, value="filter") String filter) {
         

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/FormsResource.java
Patch:
@@ -54,7 +54,6 @@
 import com.activiti.service.editor.ModelInternalService;
 import com.activiti.service.exception.BadRequestException;
 import com.activiti.service.exception.InternalServerErrorException;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 /**
@@ -74,7 +73,6 @@ public class FormsResource extends BaseModelResource {
     
 	protected ObjectMapper objectMapper = new ObjectMapper();
 	
-	@Timed
 	@RequestMapping(method = RequestMethod.GET, produces = "application/json")
 	public ResultListDataRepresentation getForms(@RequestParam(required=true) Long referenceId, HttpServletRequest request) {
 	    
@@ -119,7 +117,6 @@ public ResultListDataRepresentation getForms(@RequestParam(required=true) Long r
         return result;
 	}
 	
-	@Timed
     @RequestMapping(value = "/editor-values", method = RequestMethod.GET, produces = "application/json")
     public EditorValuesRepresentation getEditorValues(HttpServletRequest request) {
         

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/ModelRelationResource.java
Patch:
@@ -29,7 +29,6 @@
 import com.activiti.domain.editor.ModelInformation;
 import com.activiti.service.editor.ModelRelationService;
 import com.activiti.service.exception.NotFoundException;
-import com.codahale.metrics.annotation.Timed;
 
 @RestController
 public class ModelRelationResource extends AbstractModelResource {
@@ -38,7 +37,6 @@ public class ModelRelationResource extends AbstractModelResource {
     private ModelRelationService modelRelationService;
     
     @RequestMapping(value = "/rest/models/{modelId}/parent-relations", method = RequestMethod.GET, produces = "application/json")
-    @Timed
     public List<ModelInformation>  getModelRelations(@PathVariable Long modelId) {    
     	Model model = getModel(modelId, true, false); 
     	if (model == null) {

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/ModelShareInfoResource.java
Patch:
@@ -53,7 +53,6 @@
 import com.activiti.service.api.UserCache.CachedUser;
 import com.activiti.service.api.UserService;
 import com.activiti.service.editor.ModelShareService;
-import com.codahale.metrics.annotation.Timed;
 
 /**
  * 
@@ -79,7 +78,6 @@ public class ModelShareInfoResource extends BaseModelResource {
     @RequestMapping(value = "/rest/models/{modelId}/share-info",
             method = RequestMethod.GET,
             produces = "application/json")
-    @Timed
     public ResultListDataRepresentation getProcessModelShareInfo(@PathVariable Long modelId) {
         // Only owner can view with who the process is shared
         Model model = getProcessModelForOwner(modelId);

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/editor/StencilSetResource.java
Patch:
@@ -26,7 +26,6 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.service.exception.InternalServerErrorException;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
@@ -39,7 +38,6 @@ public class StencilSetResource {
     protected ObjectMapper objectMapper;
     
     @RequestMapping(value = "/rest/stencil-sets/editor", method = RequestMethod.GET, produces = "application/json")
-    @Timed
     public JsonNode getStencilSetForEditor() {
         try {
             JsonNode stencilNode = objectMapper.readTree(this.getClass().getClassLoader().getResourceAsStream("stencilset_bpmn.json"));

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/idm/AccountResource.java
Patch:
@@ -28,7 +28,6 @@
 
 import com.activiti.model.idm.UserRepresentation;
 import com.activiti.service.exception.UnauthorizedException;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
@@ -46,7 +45,6 @@ public class AccountResource extends AbstractAccountResource {
     /**
      * GET  /rest/authenticate -> check if the user is authenticated, and return its full name.
      */
-    @Timed
     @RequestMapping(value = "/rest/authenticate", method = RequestMethod.GET, produces = {"application/json"})
     public ObjectNode isAuthenticated(HttpServletRequest request) {
         String user = request.getRemoteUser();
@@ -63,7 +61,6 @@ public ObjectNode isAuthenticated(HttpServletRequest request) {
     /**
      * GET  /rest/account -> get the current user.
      */
-    @Timed
     @RequestMapping(value = "/rest/account", method = RequestMethod.GET, produces = "application/json")
     public UserRepresentation getAccount(HttpServletResponse response, @RequestParam(value="includeApps", required=false) Boolean includeApps) {
     	return super.getAccount(response, includeApps);

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/idm/IdmInfoResource.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.service.idm.IdmInfoService;
-import com.codahale.metrics.annotation.Timed;
 
 @RestController
 @RequestMapping(value="/rest/admin/idm-info")
@@ -32,7 +31,6 @@ public class IdmInfoResource {
 	@Autowired
 	private IdmInfoService idmInfoService;
 	
-    @Timed
     @RequestMapping(method = RequestMethod.GET, produces = "plain/text")
     public String getIdmInfo() {
     	return idmInfoService.getIdmType();

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/HistoricTaskQueryResource.java
Patch:
@@ -42,7 +42,6 @@
 import com.activiti.service.exception.BadRequestException;
 import com.activiti.service.exception.NotPermittedException;
 import com.activiti.service.runtime.PermissionService;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
@@ -62,7 +61,6 @@ public class HistoricTaskQueryResource {
     protected PermissionService permissionService;
     
 	@RequestMapping(value = "/rest/query/history/tasks", method = RequestMethod.POST, produces = "application/json")
-	@Timed
 	public ResultListDataRepresentation listTasks(@RequestBody ObjectNode requestNode) {
 	    if (requestNode == null) {
 	        throw new BadRequestException("No request found");

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/ProcessDefinitionResource.java
Patch:
@@ -24,12 +24,10 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.editor.form.FormDefinitionRepresentation;
-import com.codahale.metrics.annotation.Timed;
 
 @RestController
 public class ProcessDefinitionResource extends AbstractProcessDefinitionResource {
     
-    @Timed
     @RequestMapping(value = "/rest/process-definitions/{processDefinitionId}/start-form", method = RequestMethod.GET, produces = "application/json")
     public FormDefinitionRepresentation getProcessDefinitionStartForm(HttpServletRequest request) {
     	return super.getProcessDefinitionStartForm(request);

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/ProcessDefinitionsResource.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.common.ResultListDataRepresentation;
-import com.codahale.metrics.annotation.Timed;
 
 /**
  * REST controller for managing the Engine process definitions.
@@ -32,7 +31,6 @@
 public class ProcessDefinitionsResource extends AbstractProcessDefinitionsResource {
 
 	@RequestMapping(value = "/rest/process-definitions", method = RequestMethod.GET)
-    @Timed
     public ResultListDataRepresentation getProcessDefinitions(
     		@RequestParam(value="latest", required=false) Boolean latest,
             @RequestParam(value="appDefinitionId", required=false) Long appDefinitionId) {

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/ProcessInstanceQueryResource.java
Patch:
@@ -23,14 +23,12 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.common.ResultListDataRepresentation;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 @RestController
 public class ProcessInstanceQueryResource extends AbstractProcessInstanceQueryResource {
     
 	@RequestMapping(value = "/rest/query/process-instances", method = RequestMethod.POST, produces = "application/json")
-    @Timed
     public ResultListDataRepresentation getProcessInstances(@RequestBody ObjectNode requestNode) {
 		return super.getProcessInstances(requestNode);
     }

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/ProcessInstancesResource.java
Patch:
@@ -24,13 +24,11 @@
 
 import com.activiti.model.runtime.CreateProcessInstanceRepresentation;
 import com.activiti.model.runtime.ProcessInstanceRepresentation;
-import com.codahale.metrics.annotation.Timed;
 
 @RestController
 public class ProcessInstancesResource extends AbstractProcessInstancesResource {
 
 	@RequestMapping(value = "/rest/process-instances", method = RequestMethod.POST)
-    @Timed
     public ProcessInstanceRepresentation startNewProcessInstance(@RequestBody CreateProcessInstanceRepresentation startRequest) {
 		return super.startNewProcessInstance(startRequest);
 	}

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/RuntimeAppDefinitionsResource.java
Patch:
@@ -33,7 +33,6 @@
 import com.activiti.service.api.AppDefinitionService;
 import com.activiti.service.api.AppDefinitionServiceRepresentation;
 import com.activiti.service.api.RuntimeAppDefinitionService;
-import com.codahale.metrics.annotation.Timed;
 
 @RestController
 public class RuntimeAppDefinitionsResource {
@@ -46,7 +45,6 @@ public class RuntimeAppDefinitionsResource {
 
 	
 	@RequestMapping(value = "/rest/editor/app-definitions", method = RequestMethod.GET, produces = "application/json")
-	@Timed
 	public ResultListDataRepresentation getAppDefinitions() {
 	    User user = SecurityUtils.getCurrentUserObject();
 	    List<AppDefinitionServiceRepresentation> appDefinitions = appDefinitionService.getDeployableAppDefinitions(user);

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/TaskQueryResource.java
Patch:
@@ -23,14 +23,12 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.common.ResultListDataRepresentation;
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 @RestController
 public class TaskQueryResource extends AbstractTaskQueryResource {
 	
 	@RequestMapping(value = "/rest/query/tasks", method = RequestMethod.POST, produces = "application/json")
-	@Timed
 	public ResultListDataRepresentation listTasks(@RequestBody ObjectNode requestNode) {
 		return super.listTasks(requestNode);	
 	}

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/TaskResource.java
Patch:
@@ -33,7 +33,6 @@
 import com.activiti.model.runtime.TaskRepresentation;
 import com.activiti.model.runtime.TaskUpdateRepresentation;
 import com.activiti.service.runtime.PermissionService;
-import com.codahale.metrics.annotation.Timed;
 
 /**
  * REST controller for managing the current user's account.
@@ -55,15 +54,13 @@ public class TaskResource extends AbstractTaskResource {
     @RequestMapping(value = "/rest/tasks/{taskId}",
             method = RequestMethod.GET,
             produces = "application/json")
-    @Timed
     public TaskRepresentation getTask(@PathVariable String taskId, HttpServletResponse response) {
     	return super.getTask(taskId, response);
     }
 
     @RequestMapping(value = "/rest/tasks/{taskId}",
             method = RequestMethod.PUT,
             produces = "application/json")
-    @Timed
     public TaskRepresentation updateTask(@PathVariable("taskId") String taskId, @RequestBody TaskUpdateRepresentation updated) {
         return super.updateTask(taskId, updated);
     }

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/TasksResource.java
Patch:
@@ -27,7 +27,6 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.activiti.model.runtime.TaskRepresentation;
-import com.codahale.metrics.annotation.Timed;
 
 /**
  * REST controller for managing the current user's account.
@@ -39,7 +38,6 @@ public class TasksResource extends AbstractTasksResource {
     protected TaskService taskService;
     
 	@RequestMapping(value = "/rest/tasks", method = RequestMethod.POST)
-    @Timed
     public TaskRepresentation createNewTask(@RequestBody TaskRepresentation taskRepresentation, HttpServletRequest request) {
 		return super.createNewTask(taskRepresentation, request);
     }

File: modules/activiti-ui/activiti-app-rest/src/main/java/com/activiti/rest/runtime/example/ExampleFormOptionResource.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.codahale.metrics.annotation.Timed;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -35,7 +34,6 @@ public class ExampleFormOptionResource {
     @Inject
     protected ObjectMapper objectMapper;
     
-    @Timed
     @RequestMapping(method = RequestMethod.GET, produces = "application/json")
     public ArrayNode getOptions() {
         ArrayNode optionsNode = objectMapper.createArrayNode();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/DefaultAsyncJobExecutor.java
Patch:
@@ -14,6 +14,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.runtime.Job;
+import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -205,7 +206,8 @@ protected void startExecutingAsyncJobs() {
     if (executorService == null) {
       log.info("Creating executor service with corePoolSize {}, maxPoolSize {} and keepAliveTime {}", corePoolSize, maxPoolSize, keepAliveTime);
 
-      executorService = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.MILLISECONDS, threadPoolQueue);
+      BasicThreadFactory threadFactory = new BasicThreadFactory.Builder().namingPattern("activiti-async-job-executor-thread-%d").build();
+      executorService = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.MILLISECONDS, threadPoolQueue, threadFactory);
     }
 
     startJobAcquisitionThread();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1597,7 +1597,7 @@ public void testQueryStartedBefore() throws Exception {
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testQueryStartedAfter() throws Exception {
     Calendar calendar = new GregorianCalendar();
-    calendar.set(Calendar.YEAR, 2200);
+    calendar.set(Calendar.YEAR, 2030);
     calendar.set(Calendar.MONTH, 8);
     calendar.set(Calendar.DAY_OF_MONTH, 30);
     calendar.set(Calendar.HOUR_OF_DAY, 12);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1901,7 +1901,7 @@ public void testQueryStartedBefore() throws Exception {
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testQueryStartedAfter() throws Exception {
     Calendar calendar = new GregorianCalendar();
-    calendar.set(Calendar.YEAR, 2200);
+    calendar.set(Calendar.YEAR, 2030);
     calendar.set(Calendar.MONTH, 8);
     calendar.set(Calendar.DAY_OF_MONTH, 30);
     calendar.set(Calendar.HOUR_OF_DAY, 12);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/compatibility/StartTimerEventRepeatCompatibilityTest.java
Patch:
@@ -87,7 +87,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one (day by day)
     moveByMinutes(9 * 60 * 24);
-    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);
+    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000, 200);
     // there must be a pending job because the endDate is not reached yet
     jobs = managementService.createTimerJobQuery().list();
     assertEquals(1, jobs.size());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1552,7 +1552,7 @@ public void testLocalizeExecution() throws Exception {
     assertEquals("SubProcess Description 'en'", execution.getDescription());
     
     
-    infoNode = dynamicBpmnService.changeLocalizationName("en-US", "executionLocalization", "Process Name 'en-US'");
+    dynamicBpmnService.changeLocalizationName("en-US", "executionLocalization", "Process Name 'en-US'", infoNode);
     dynamicBpmnService.changeLocalizationDescription("en-US", "executionLocalization", "Process Description 'en-US'", infoNode);
     dynamicBpmnService.saveProcessDefinitionInfo(processInstance.getProcessDefinitionId(), infoNode);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/AcquireTimerJobsRunnable.java
Patch:
@@ -60,7 +60,7 @@ public synchronized void run() {
           @Override
           public Void execute(CommandContext commandContext) {
             for (TimerJobEntity job : acquiredJobs.getJobs()) {
-              jobManager.moveTimerJobToExecutableJob(job);
+              jobManager.transformTimerJobToExecutableJob(job);
             }
             return null;
           }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AbstractSetProcessInstanceStateCmd.java
Patch:
@@ -95,12 +95,12 @@ public Void execute(CommandContext commandContext) {
     } else {
       List<TimerJobEntity> timerJobs = commandContext.getTimerJobEntityManager().findJobsByProcessInstanceId(processInstanceId);
       for (TimerJobEntity timerJob : timerJobs) {
-        commandContext.getJobManager().moveJobToSuspendedJob(timerJob);
+        commandContext.getJobManager().transformJobToSuspendedJob(timerJob);
       }
       
       List<JobEntity> jobs = commandContext.getJobEntityManager().findJobsByProcessInstanceId(processInstanceId);
       for (JobEntity job : jobs) {
-        commandContext.getJobManager().moveJobToSuspendedJob(job);
+        commandContext.getJobManager().transformJobToSuspendedJob(job);
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireJobsCmd.java
Patch:
@@ -36,7 +36,7 @@ public AcquireJobsCmd(AsyncExecutor asyncExecutor) {
 
   public AcquiredJobEntities execute(CommandContext commandContext) {
     AcquiredJobEntities acquiredJobs = new AcquiredJobEntities();
-    List<JobEntity> jobs = commandContext.getJobEntityManager().findNextJobsToExecute(new Page(0, asyncExecutor.getMaxAsyncJobsDuePerAcquisition()));
+    List<JobEntity> jobs = commandContext.getJobEntityManager().findJobsToExecute(new Page(0, asyncExecutor.getMaxAsyncJobsDuePerAcquisition()));
 
     for (JobEntity job : jobs) {
       lockJob(commandContext, job, asyncExecutor.getAsyncJobLockTimeInMillis());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireTimerJobsCmd.java
Patch:
@@ -36,7 +36,7 @@ public AcquireTimerJobsCmd(AsyncExecutor asyncExecutor) {
 
   public AcquiredTimerJobEntities execute(CommandContext commandContext) {
     AcquiredTimerJobEntities acquiredJobs = new AcquiredTimerJobEntities();
-    List<TimerJobEntity> timerJobs = commandContext.getTimerJobEntityManager().selectTimerJobsToDueDate(new Page(0, asyncExecutor.getMaxAsyncJobsDuePerAcquisition()));
+    List<TimerJobEntity> timerJobs = commandContext.getTimerJobEntityManager().findTimerJobsToExecute(new Page(0, asyncExecutor.getMaxAsyncJobsDuePerAcquisition()));
 
     for (TimerJobEntity job : timerJobs) {
       lockJob(commandContext, job, asyncExecutor.getAsyncJobLockTimeInMillis());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -75,7 +75,7 @@ public Object execute(CommandContext commandContext) {
       if (job.getRetries() <= 1) {
         newJobEntity = commandContext.getJobManager().moveJobToDeadLetterJob(job);
       } else {
-        newJobEntity = commandContext.getJobManager().moveJobToTimerJob(job);
+        newJobEntity = commandContext.getJobManager().transformJobToTimerJob(job);
       }
       
       newJobEntity.setRetries(job.getRetries() - 1);
@@ -99,7 +99,7 @@ public Object execute(CommandContext commandContext) {
         if (jobRetries <= 1) {
           newJobEntity = commandContext.getJobManager().moveJobToDeadLetterJob(job);
         } else {
-          newJobEntity = commandContext.getJobManager().moveJobToTimerJob(job);
+          newJobEntity = commandContext.getJobManager().transformJobToTimerJob(job);
         }
         
         newJobEntity.setDuedate(durationHelper.getDateAfter());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/MoveTimerToExecutableJobCmd.java
Patch:
@@ -54,7 +54,7 @@ public JobEntity execute(CommandContext commandContext) {
       log.debug("Executing timer job {}", timerJob.getId());
     }
     
-    JobEntity executableJob = commandContext.getJobManager().moveTimerJobToExecutableJob(timerJob);
+    JobEntity executableJob = commandContext.getJobManager().transformTimerJobToExecutableJob(timerJob);
 
     return executableJob;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AbstractJobEntity.java
Patch:
@@ -19,8 +19,6 @@
 import org.activiti.engine.runtime.Job;
 
 /**
- * Stub of the common parts of a Job. You will normally work with a subclass, such as {@link TimerEntity} or {@link JobEntity}.
- *
  * @author Tijs Rademakers
  * @author Joram Barrez
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.Date;
 
 /**
- * Stub of the common parts of a Job. You will normally work with a subclass of JobEntity, such as {@link TimerEntity} or {@link MessageEntity}.
- *
+ * Represents an async job: a piece of logic that needs to be executed asynchronously. 
+ * 
  * @author Tijs Rademakers
  * @author Joram Barrez
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/TimerJobDataManager.java
Patch:
@@ -25,7 +25,7 @@
  */
 public interface TimerJobDataManager extends DataManager<TimerJobEntity> {
   
-  List<TimerJobEntity> selectTimerJobsToDueDate(Page page);
+  List<TimerJobEntity> findTimerJobsToExecute(Page page);
 
   List<TimerJobEntity> findJobsByTypeAndProcessDefinitionId(String jobHandlerType, String processDefinitionId);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/impl/MybatisTimerJobDataManager.java
Patch:
@@ -61,9 +61,9 @@ public long findJobCountByQueryCriteria(TimerJobQueryImpl jobQuery) {
 
   @Override
   @SuppressWarnings("unchecked")
-  public List<TimerJobEntity> selectTimerJobsToDueDate(Page page) {
+  public List<TimerJobEntity> findTimerJobsToExecute(Page page) {
     Date now = getClock().getCurrentTime();
-    return getDbSqlSession().selectList("selectTimerJobsToDueDate", now, page);
+    return getDbSqlSession().selectList("selectTimerJobsToExecute", now, page);
   }
   
   @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/runtime/Job.java
Patch:
@@ -18,7 +18,7 @@
 import org.activiti.engine.ManagementService;
 
 /**
- * Represents one job (timer, message, etc.).
+ * Represents one job (timer, async job, etc.).
  * 
  * @author Joram Barrez
  */

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/ProcessInstanceSuspensionTest.java
Patch:
@@ -111,7 +111,7 @@ public void testSuspendedProcessTimerExecution() throws Exception {
 
       @Override
       public List<TimerJobEntity> execute(CommandContext commandContext) {
-        return processEngineConfiguration.getTimerJobEntityManager().selectTimerJobsToDueDate(new Page(0, 1));
+        return processEngineConfiguration.getTimerJobEntityManager().findTimerJobsToExecute(new Page(0, 1));
       }
       
     });
@@ -125,7 +125,7 @@ public List<TimerJobEntity> execute(CommandContext commandContext) {
 
       @Override
       public List<TimerJobEntity> execute(CommandContext commandContext) {
-        return processEngineConfiguration.getTimerJobEntityManager().selectTimerJobsToDueDate(new Page(0, 1));
+        return processEngineConfiguration.getTimerJobEntityManager().findTimerJobsToExecute(new Page(0, 1));
       }
     });
     
@@ -146,7 +146,7 @@ public Void execute(CommandContext commandContext) {
   protected List<TimerJobEntity> executeAcquireJobsCommand() {
     return processEngineConfiguration.getCommandExecutor().execute(new Command<List<TimerJobEntity>>() {
       public List<TimerJobEntity> execute(CommandContext commandContext) {
-        return commandContext.getTimerJobEntityManager().selectTimerJobsToDueDate(new Page(0, 1));
+        return commandContext.getTimerJobEntityManager().findTimerJobsToExecute(new Page(0, 1));
       }
       
     });

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/SubprocessXMLConverter.java
Patch:
@@ -89,7 +89,7 @@ public byte[] convertToXML(BpmnModel model, String encoding) {
       // refactor each subprocess into a separate Diagram
       List<BpmnModel> subModels = parseSubModels(model);
       for (BpmnModel tempModel : subModels) {
-        if (!tempModel.getFlowLocationMap().isEmpty()) {
+        if (!tempModel.getFlowLocationMap().isEmpty() || !tempModel.getLocationMap().isEmpty()) {
           BPMNDIExport.writeBPMNDI(tempModel, xtw);
         }
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AbstractSetProcessDefinitionStateCmd.java
Patch:
@@ -84,6 +84,7 @@ public Void execute(CommandContext commandContext) {
       } else if (getProcessDefinitionSuspensionState() == SuspensionState.SUSPENDED) {
         activiti5CompatibilityHandler.suspendProcessDefinition(processDefinitionId, processDefinitionKey, includeProcessInstances, executionDate, tenantId);
       }
+      return null;
     }
 
     if (executionDate != null) { // Process definition state change is delayed

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/BoundaryTimerNonInterruptingEventTest.java
Patch:
@@ -47,7 +47,7 @@ public void testMultipleTimersOnUserTask() {
 
     // After setting the clock to time '1 hour and 5 seconds', the first timer should fire
     processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + ((60 * 60 * 1000) + 5000)));
-    Job job = managementService.createTimerJobQuery().singleResult();
+    Job job = managementService.createTimerJobQuery().executable().singleResult();
     assertNotNull(job);
     managementService.moveTimerToExecutableJob(job.getId());
     managementService.executeJob(job.getId());

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/multiinstance/MultiInstanceTest.java
Patch:
@@ -977,11 +977,12 @@ public void testAct901() {
     
     clock.setCurrentTime(new Date(startTime.getTime() + 61000L));
     processEngineConfiguration.setClock(clock); // timer is set to one minute
-    List<Job> timers = managementService.createJobQuery().list();
+    List<Job> timers = managementService.createTimerJobQuery().list();
     assertEquals(5, timers.size());
     
     // Execute all timers one by one (single thread vs thread pool of job executor, which leads to optimisticlockingexceptions!)
     for (Job timer : timers) {
+      managementService.moveTimerToExecutableJob(timer.getId());
       managementService.executeJob(timer.getId());
     }
     

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -33,7 +33,8 @@ public void testInterruptingTimerDuration() {
     assertEquals("First line support", task.getName());
 
     // Manually execute the job
-    Job timer = managementService.createJobQuery().singleResult();
+    Job timer = managementService.createTimerJobQuery().singleResult();
+    managementService.moveTimerToExecutableJob(timer.getId());
     managementService.executeJob(timer.getId());
 
     // The timer has fired, and the second task (secondlinesupport) now exists

File: modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/Activiti5CompatibilityHandler.java
Patch:
@@ -61,8 +61,6 @@ public interface Activiti5CompatibilityHandler {
   
   boolean isProcessDefinitionSuspended(String processDefinitionId);
   
-  void saveProcessDefinitionInfo(String processDefinitionId, ObjectNode infoNode);
-  
   void addCandidateStarter(String processDefinitionId, String userId, String groupId);
   
   void deleteCandidateStarter(String processDefinitionId, String userId, String groupId);

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/ProcessEngineImpl.java
Patch:
@@ -72,8 +72,6 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
     this.sessionFactories = processEngineConfiguration.getSessionFactories();
     this.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();
     
-    commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationsProcessEngineBuild());
-
     if (name == null) {
       log.info("default activiti ProcessEngine created");
     } else {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -71,6 +71,9 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("mysql", "updateExecutionTenantIdForDeployment", "updateExecutionTenantIdForDeployment_mysql");
     addDatabaseSpecificStatement("mysql", "updateTaskTenantIdForDeployment", "updateTaskTenantIdForDeployment_mysql");
     addDatabaseSpecificStatement("mysql", "updateJobTenantIdForDeployment", "updateJobTenantIdForDeployment_mysql");
+    addDatabaseSpecificStatement("mysql", "updateTimerJobTenantIdForDeployment", "updateTimerJobTenantIdForDeployment_mysql");
+    addDatabaseSpecificStatement("mysql", "updateSuspendedJobTenantIdForDeployment", "updateSuspendedJobTenantIdForDeployment_mysql");
+    addDatabaseSpecificStatement("mysql", "updateDeadLetterJobTenantIdForDeployment", "updateDeadLetterJobTenantIdForDeployment_mysql");
     
     //postgres specific
     databaseSpecificLimitBeforeStatements.put("postgres", "");

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/TimerJobEntity.java
Patch:
@@ -63,6 +63,7 @@ public TimerJobEntity(TimerDeclarationImpl timerDeclaration) {
   }
 
   public TimerJobEntity(AbstractJobEntity te) {
+    this.id = te.getId();
     this.jobType = te.getJobType();
     this.revision = te.getRevision();
     this.jobHandlerConfiguration = te.getJobHandlerConfiguration();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/end/TerminateEndEventTest.java
Patch:
@@ -262,7 +262,7 @@ public void testTerminateInSubProcessWithBoundary() throws Exception {
     assertEquals(3, taskService.createTaskQuery().processInstanceId(pi.getId()).count());
     
     // a job for boundary event timer should exist 
-    assertEquals(1L, managementService.createJobQuery().count());
+    assertEquals(1L, managementService.createTimerJobQuery().count());
     
     // Complete sub process task that leads to a terminate end event
     Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).taskDefinitionKey("preTermInnerTask").singleResult();
@@ -272,6 +272,7 @@ public void testTerminateInSubProcessWithBoundary() throws Exception {
     assertEquals(1, taskService.createTaskQuery().processInstanceId(pi.getId()).count());
     
     // job for boundary event timer should have been removed  
+    assertEquals(0L, managementService.createTimerJobQuery().count());
     assertEquals(0L, managementService.createJobQuery().count());
     
     // complete outerTask

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -176,6 +176,7 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_TASK_USER_CANDIDATEUSERS = "candidateUsers";
   public static final String ATTRIBUTE_TASK_USER_CANDIDATEGROUPS = "candidateGroups";
   public static final String ATTRIBUTE_TASK_USER_DUEDATE = "dueDate";
+  public static final String ATTRIBUTE_TASK_USER_BUSINESS_CALENDAR_NAME = "businessCalendarName";
   public static final String ATTRIBUTE_TASK_USER_CATEGORY = "category";
   public static final String ATTRIBUTE_TASK_USER_PRIORITY = "priority";
   public static final String ATTRIBUTE_TASK_USER_SKIP_EXPRESSION = "skipExpression";
@@ -229,6 +230,7 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_SIGNAL_REF = "signalRef";
   public static final String ATTRIBUTE_SCOPE = "scope";
   public static final String ELEMENT_EVENT_TIMERDEFINITION = "timerEventDefinition";
+  public static final String ATTRIBUTE_CALENDAR_NAME = "businessCalendarName";
   public static final String ATTRIBUTE_TIMER_DATE = "timeDate";
   public static final String ATTRIBUTE_TIMER_CYCLE = "timeCycle";
   public static final String ATTRIBUTE_END_DATE = "endDate";

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BaseBpmnXMLConverter.java
Patch:
@@ -402,6 +402,9 @@ protected void writeEventDefinitions(Event parentEvent, List<EventDefinition> ev
   
   protected void writeTimerDefinition(Event parentEvent, TimerEventDefinition timerDefinition, XMLStreamWriter xtw) throws Exception {
     xtw.writeStartElement(ELEMENT_EVENT_TIMERDEFINITION);
+    if (StringUtils.isNotEmpty(timerDefinition.getCalendarName())) {
+      writeQualifiedAttribute(ATTRIBUTE_CALENDAR_NAME, timerDefinition.getCalendarName(), xtw);
+    }
     boolean didWriteExtensionStartElement = BpmnXMLUtil.writeExtensionElements(timerDefinition, false, xtw);
     if (didWriteExtensionStartElement) {
       xtw.writeEndElement();

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/UserTaskConverterTest.java
Patch:
@@ -47,7 +47,8 @@ private void validateModel(BpmnModel model) {
     assertEquals("testKey", userTask.getFormKey());
     assertEquals("40", userTask.getPriority());
     assertEquals("2012-11-01", userTask.getDueDate());
-    
+    assertEquals("customCalendarName", userTask.getBusinessCalendarName());
+
     assertEquals("kermit", userTask.getAssignee());
     assertEquals(2, userTask.getCandidateUsers().size());
     assertTrue(userTask.getCandidateUsers().contains("kermit"));

File: modules/activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/CxfWSDLImporter.java
Patch:
@@ -227,7 +227,7 @@ protected static void _importFields(final JDefinedClass theClass, final AtomicIn
       _importFields((JDefinedClass)parentClass, index, structure);
     }
     for (Entry<String, JFieldVar> entry : theClass.fields().entrySet()) {
-      Class<?> fieldClass = ReflectUtil.loadClass(entry.getValue().type().boxify().fullName());
+      Class<?> fieldClass = ReflectUtil.loadClass(entry.getValue().type().boxify().erasure().fullName());
 
       String fieldName = entry.getKey();
       if (fieldName.startsWith("_")) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -1104,6 +1104,9 @@ public List<String> getCandidateGroups() {
     
     } else if (candidateUser != null) {
       return getGroupsForCandidateUser(candidateUser);
+
+    } else if (userIdForCandidateAndAssignee != null) {
+      return getGroupsForCandidateUser(userIdForCandidateAndAssignee);
     } 
     return null;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -150,7 +150,7 @@ public void execute(ActivityExecution execution) throws Exception {
           BusinessCalendar businessCalendar = Context
             .getProcessEngineConfiguration()
             .getBusinessCalendarManager()
-            .getBusinessCalendar(DueDateBusinessCalendar.NAME);
+            .getBusinessCalendar(taskDefinition.getBusinessCalendarNameExpression().getValue(execution).toString());
           task.setDueDate(businessCalendar.resolveDuedate((String) dueDate));
         } else {
           throw new ActivitiIllegalArgumentException("Due date expression does not resolve to a Date or Date string: " + 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -153,7 +153,7 @@ public void deploy(DeploymentEntity deployment, Map<String, Object> deploymentSe
               try {
                   byte[] diagramBytes = IoUtil.readInputStream(processEngineConfiguration.
                     getProcessDiagramGenerator().generateDiagram(bpmnParse.getBpmnModel(), "png", processEngineConfiguration.getActivityFontName(),
-                        processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getClassLoader()), null);
+                        processEngineConfiguration.getLabelFontName(),processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader()), null);
                   diagramResourceName = getProcessImageResourceName(resourceName, processDefinition.getKey(), "png");
                   createResource(diagramResourceName, diagramBytes, deployment);
               } catch (Throwable t) { // if anything goes wrong, we don't store the image (the process will still be executable).

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -244,13 +244,13 @@ public void testHistoricProcessInstanceQueryForDelete() {
     assertEquals(1, processInstanceQuery.count());
     HistoricProcessInstance processInstance = processInstanceQuery.singleResult();
     assertEquals(processInstanceId, processInstance.getId());
-    assertEquals("ACTIVITI_DELETED", processInstance.getDeleteReason());
+    assertEquals("ACTIVITY_DELETED", processInstance.getDeleteReason());
 
     processInstanceQuery = historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstanceId).deleted();
     assertEquals(1, processInstanceQuery.count());
     processInstance = processInstanceQuery.singleResult();
     assertEquals(processInstanceId, processInstance.getId());
-    assertEquals("ACTIVITI_DELETED", processInstance.getDeleteReason());
+    assertEquals("ACTIVITY_DELETED", processInstance.getDeleteReason());
     
     processInstanceQuery = historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstanceId).notDeleted();
     assertEquals(0, processInstanceQuery.count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/IntermediateTimerEventTest.java
Patch:
@@ -43,7 +43,6 @@ public void testCatchingTimerEvent() throws Exception {
 
     assertEquals(0, jobQuery.count());
     assertProcessEnded(pi.getProcessInstanceId());
-
   }
 
   @Deployment

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionImageStreamResourceBuilder.java
Patch:
@@ -81,7 +81,7 @@ public StreamResource buildStreamResource(ProcessInstance processInstance, Repos
         BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());
         InputStream definitionImageStream = diagramGenerator.generateDiagram(bpmnModel, "png",
           runtimeService.getActiveActivityIds(processInstance.getId()), Collections.<String>emptyList(), 
-          processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), 
+          processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), processEngineConfig.getAnnotationFontName(),  
           processEngineConfig.getClassLoader(), 1.0);
               
         if(definitionImageStream != null) {
@@ -114,7 +114,7 @@ public StreamResource buildStreamResource(String processInstanceId, String proce
       BpmnModel bpmnModel = repositoryService.getBpmnModel(processDefinitionId);
       InputStream definitionImageStream = diagramGenerator.generateDiagram(bpmnModel, "png",
         runtimeService.getActiveActivityIds(processInstanceId), Collections.<String>emptyList(), 
-        processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), 
+        processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), processEngineConfig.getAnnotationFontName(),  
         processEngineConfig.getClassLoader(), 1.0);
       
       StreamSource streamSource = new InputStreamStreamSource(definitionImageStream);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/SimpleTableEditor.java
Patch:
@@ -251,7 +251,7 @@ public InputStream getStream() {
         final ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();
 
         return diagramGenerator.generateDiagram(workflowDefinitionConversion.getBpmnModel(), "png", processEngineConfiguration.getActivityFontName(),
-            processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getClassLoader());
+            processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader());
       }
     };
     
@@ -308,7 +308,7 @@ protected void save() {
       // TODO: we should really allow the service to take an inputstream as input. Now we load it into memory ...
       repositoryService.addModelEditorSourceExtra(model.getId(), IOUtils.toByteArray(
           diagramGenerator.generateDiagram(conversion.getBpmnModel(), "png", processEngineConfiguration.getActivityFontName(),
-              processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getClassLoader())));
+              processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader())));
     } catch (IOException e) {
       logger.warn("Could not generate process image. Image is not stored and will not be shown.", e);
     }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceDiagramResource.java
Patch:
@@ -58,7 +58,7 @@ public ResponseEntity<byte[]> getProcessInstanceDiagram(@PathVariable String pro
       ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();
       InputStream resource = diagramGenerator.generateDiagram(bpmnModel, "png", runtimeService.getActiveActivityIds(processInstance.getId()),
           Collections.<String>emptyList(), processEngineConfiguration.getActivityFontName(), processEngineConfiguration.getLabelFontName(),
-          processEngineConfiguration.getClassLoader(), 1.0);
+          processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader(), 1.0);
 
       HttpHeaders responseHeaders = new HttpHeaders();
       responseHeaders.set("Content-Type", "image/png");

File: modules/activiti-spring-boot/spring-boot-samples/spring-boot-sample-rest-api/src/test/java/org/activiti/test/spring/boot/RestApiAutoConfigurationTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import org.activiti.spring.boot.DataSourceProcessEngineAutoConfiguration;
 import org.activiti.spring.boot.RestApiAutoConfiguration;
+import org.activiti.spring.boot.SecurityAutoConfiguration;
 import org.junit.After;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
@@ -35,6 +36,7 @@ public class RestApiAutoConfigurationTest {
           ServerPropertiesAutoConfiguration.class,
           DataSourceAutoConfiguration.class,
           DataSourceProcessEngineAutoConfiguration.DataSourceProcessEngineConfiguration.class,
+          SecurityAutoConfiguration.class,
           RestApiAutoConfiguration.class,
           JacksonAutoConfiguration.class
   })

File: modules/activiti-camel/src/main/java/org/activiti/camel/ExchangeUtils.java
Patch:
@@ -121,7 +121,7 @@ public static Map<String, Object> prepareVariables(Exchange exchange, ActivitiEn
     if (camelBody instanceof Map<?,?>) {
       Map<?,?> camelBodyMap = (Map<?,?>)camelBody;
       for (@SuppressWarnings("rawtypes") Map.Entry e : camelBodyMap.entrySet()) {
-        if (e.getKey() instanceof String) {
+        if (e.getKey() instanceof String && IGNORE_MESSAGE_PROPERTY.equalsIgnoreCase((String) e.getKey()) == false) {
           camelVarMap.put((String) e.getKey(), e.getValue());
         }
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntityManagerImpl.java
Patch:
@@ -287,7 +287,9 @@ public void delete(JobEntity jobEntity) {
   protected void removeExecutionLink(JobEntity jobEntity) {
     if (jobEntity.getExecutionId() != null) {
       ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());
-      execution.getJobs().remove(jobEntity);
+      if (execution != null) {
+        execution.getJobs().remove(jobEntity);
+      }
     }
   }
 

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/transaction/SpringTransactionIntegrationTest.java
Patch:
@@ -56,7 +56,7 @@ public void testRollbackTransactionOnActivitiException() {
     // The hello() method will start the process. The process will wait in a
     // user task
     userBean.hello();
-    assertEquals(0, jdbcTemplate.queryForLong("select count(*) from MY_TABLE"));
+    assertEquals(Long.valueOf(0), jdbcTemplate.queryForObject("select count(*) from MY_TABLE", Long.class));
 
     // The completeTask() method will write a record to the 'MY_TABLE' table
     // and complete the user task
@@ -69,7 +69,7 @@ public void testRollbackTransactionOnActivitiException() {
     // Since the service task after the user tasks throws an exception, both
     // the record and the process must be rolled back !
     assertEquals("My Task", taskService.createTaskQuery().singleResult().getName());
-    assertEquals(0, jdbcTemplate.queryForLong("select count(*) from MY_TABLE"));
+    assertEquals(Long.valueOf(0), jdbcTemplate.queryForObject("select count(*) from MY_TABLE", Long.class));
 
     // Cleanup
     jdbcTemplate.execute("drop table MY_TABLE if exists;");

File: modules/activiti5-spring-test/src/test/java/org/activiti5/spring/test/transaction/SpringTransactionIntegrationTest.java
Patch:
@@ -56,7 +56,7 @@ public void testRollbackTransactionOnActivitiException() {
     // The hello() method will start the process. The process will wait in a
     // user task
     userBean.hello();
-    assertEquals(0, jdbcTemplate.queryForLong("select count(*) from MY_TABLE"));
+    assertEquals(Long.valueOf(0), jdbcTemplate.queryForObject("select count(*) from MY_TABLE", Long.class));
 
     // The completeTask() method will write a record to the 'MY_TABLE' table
     // and complete the user task
@@ -69,7 +69,7 @@ public void testRollbackTransactionOnActivitiException() {
     // Since the service task after the user tasks throws an exception, both
     // the record and the process must be rolled back !
     assertEquals("My Task", taskService.createTaskQuery().singleResult().getName());
-    assertEquals(0, jdbcTemplate.queryForLong("select count(*) from MY_TABLE"));
+    assertEquals(Long.valueOf(0), jdbcTemplate.queryForObject("select count(*) from MY_TABLE", Long.class));
 
     // Cleanup
     jdbcTemplate.execute("drop table MY_TABLE if exists;");

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -39,7 +39,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "6.0.0.1"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
+  public static String VERSION = "6.0.0.2"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
 
   /**
    * The name as specified in 'process-engine-name' in the activiti.cfg.xml configuration file. The default name for a process engine is 'default

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventSupport.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.activiti.engine.delegate.event.impl;
 
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
@@ -38,7 +38,7 @@ public class ActivitiEventSupport {
   protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;
 
   public ActivitiEventSupport() {
-    eventListeners = new ArrayList<ActivitiEventListener>();
+    eventListeners = new CopyOnWriteArrayList<ActivitiEventListener>();
     typedListeners = new HashMap<ActivitiEventType, List<ActivitiEventListener>>();
   }
 
@@ -117,7 +117,7 @@ protected synchronized void addTypedEventListener(ActivitiEventListener listener
     List<ActivitiEventListener> listeners = typedListeners.get(type);
     if (listeners == null) {
       // Add an empty list of listeners for this type
-      listeners = new ArrayList<ActivitiEventListener>();
+      listeners = new CopyOnWriteArrayList<ActivitiEventListener>();
       typedListeners.put(type, listeners);
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -190,12 +190,13 @@ public void execute(DelegateExecution execution) {
     handleAssignments(taskEntityManager, activeTaskAssignee, activeTaskOwner, 
         activeTaskCandidateUsers, activeTaskCandidateGroups, task, expressionManager, execution);
     
+    taskEntityManager.fireTaskListenerEvent(task, TaskListener.EVENTNAME_CREATE);
+    
     // All properties set, now firing 'create' events
     if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
           ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TASK_CREATED, task));
     }
-    taskEntityManager.fireTaskListenerEvent(task, TaskListener.EVENTNAME_CREATE);
     
     if (StringUtils.isNotEmpty(activeTaskSkipExpression)) {
       Expression skipExpression = expressionManager.createExpression(activeTaskSkipExpression);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -129,6 +129,7 @@ public class DbSqlSession implements Session {
     
     // Version 6
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.0"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.1"));
     
     /* Current */
     ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryManager.java
Patch:
@@ -76,10 +76,10 @@ public interface HistoryManager {
   /**
    * record task instance claim time, if audit history is enabled
    *
-   * @param taskId
+   * @param task
    */
 
-  void recordTaskClaim(String taskId);
+  void recordTaskClaim(TaskEntity task);
 
   /**
    * Record the id of a the task associated with a historic activity, if activity history is enabled.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntityImpl.java
Patch:
@@ -61,8 +61,8 @@ public HistoricProcessInstanceEntityImpl(ExecutionEntity processInstance) {
     processDefinitionName = processInstance.getProcessDefinitionName();
     processDefinitionVersion = processInstance.getProcessDefinitionVersion();
     deploymentId = processInstance.getDeploymentId();
-    startTime = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
-    startUserId = Authentication.getAuthenticatedUserId();
+    startTime = processInstance.getStartTime();
+    startUserId = processInstance.getStartUserId();
     startActivityId = processInstance.getActivityId();
     superProcessInstanceId = processInstance.getSuperExecution() != null ? processInstance.getSuperExecution().getProcessInstanceId() : null;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -70,5 +70,7 @@ public interface TaskEntity extends VariableScope, Task, DelegateTask, Entity, H
   
   void setDeleted(boolean isDeleted);
 
-  
+  Date getClaimTime();
+
+  void setClaimTime(Date claimTime);
 }

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetTableMetaData() {
     
     TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix+"ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
-    assertEquals(19, tableMetaData.getColumnNames().size());
+    assertEquals(20, tableMetaData.getColumnNames().size());
 
     int assigneeIndex = tableMetaData.getColumnNames().indexOf("ASSIGNEE_");
     int createTimeIndex = tableMetaData.getColumnNames().indexOf("CREATE_TIME_");

File: modules/activiti5-camel-test/src/test/java/org/activiti5/camel/revisited/AsyncProcessRevisitedTest.java
Patch:
@@ -53,7 +53,7 @@ public void testRunProcess() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("asyncCamelProcessRevisited");
     List<Execution> executionList = runtimeService.createExecutionQuery().list();
     assertEquals(3, executionList.size());
-    waitForJobExecutorToProcessAllJobs(3000, 500);
+    waitForJobExecutorToProcessAllJobs(3000, 300);
     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
   }
 }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/ProcessEngine.java
Patch:
@@ -50,7 +50,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "6.0.0.1";
+  public static String VERSION = "6.0.0.2";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/delegate/event/impl/ActivitiEventSupport.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.activiti5.engine.delegate.event.impl;
 
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
@@ -39,7 +39,7 @@ public class ActivitiEventSupport {
 	protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;
 
 	public ActivitiEventSupport() {
-		eventListeners = new ArrayList<ActivitiEventListener>();
+		eventListeners = new CopyOnWriteArrayList<ActivitiEventListener>();
 		typedListeners = new HashMap<ActivitiEventType, List<ActivitiEventListener>>();
 	}
 
@@ -119,7 +119,7 @@ protected synchronized void addTypedEventListener(ActivitiEventListener listener
 		List<ActivitiEventListener> listeners = typedListeners.get(type);
 		if (listeners == null) {
 			// Add an empty list of listeners for this type
-			listeners = new ArrayList<ActivitiEventListener>();
+			listeners = new CopyOnWriteArrayList<ActivitiEventListener>();
 			typedListeners.put(type, listeners);
 		}
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -205,15 +205,15 @@ public void execute(DelegateExecution execution) {
     
     handleAssignments(activeAssigneeExpression, activeOwnerExpression, activeCandidateUserExpressions, 
         activeCandidateGroupExpressions, task, activityExecution);
+    
+    task.fireEvent(TaskListener.EVENTNAME_CREATE);
    
     // All properties set, now firing 'create' events
     if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
         ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TASK_CREATED, task));
     }
 
-    task.fireEvent(TaskListener.EVENTNAME_CREATE);
-
     Expression skipExpression = taskDefinition.getSkipExpression();
     if (SkipExpressionUtil.isSkipExpressionEnabled(activityExecution, skipExpression) &&
         SkipExpressionUtil.shouldSkipFlowElement(activityExecution, skipExpression)) {

File: modules/activiti5-test/src/test/java/org/activiti5/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetTableMetaData() {
     
     TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix+"ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
-    assertEquals(19, tableMetaData.getColumnNames().size());
+    assertEquals(20, tableMetaData.getColumnNames().size());
 
     int assigneeIndex = tableMetaData.getColumnNames().indexOf("ASSIGNEE_");
     int createTimeIndex = tableMetaData.getColumnNames().indexOf("CREATE_TIME_");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/listener/ListenerUtil.java
Patch:
@@ -106,7 +106,7 @@ protected static void planTransactionDependentExecutionListener(ListenerFactory
     if (TransactionDependentExecutionListener.ON_TRANSACTION_RESULT_COMMITTED.equals(activitiListener.getOnTransactionResult())) {
       executionListenerContextCloseListener.addClosedExecutionListener(executionListener, execution, executionVariablesToUse, customPropertiesMapToUse);
     } else if (TransactionDependentExecutionListener.ON_TRANSACTION_RESULT_ROLLED_BACK.equals(activitiListener.getOnTransactionResult())) {
-      executionListenerContextCloseListener.addClosedExecutionListener(executionListener, execution, executionVariablesToUse, customPropertiesMapToUse);
+      executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener, execution, executionVariablesToUse, customPropertiesMapToUse);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TransactionDependentExecutionListener.java
Patch:
@@ -23,7 +23,7 @@
  */
 public interface TransactionDependentExecutionListener extends BaseExecutionListener {
 
-  String ON_TRANSACTION_RESULT_COMITTED = "committed";
+  String ON_TRANSACTION_RESULT_COMMITTED = "committed";
   String ON_TRANSACTION_RESULT_ROLLED_BACK = "rolled-back";
 
   void notify(String processInstanceId, String executionId, FlowElement flowElement,

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -23,13 +23,15 @@
 import org.activiti.engine.impl.bpmn.helper.ClassDelegate;
 import org.activiti.engine.impl.bpmn.listener.ListenerUtil;
 import org.activiti.engine.impl.bpmn.listener.TransactionDependentExecutionListeners;
+
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandContextCloseListener;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 
 import java.util.Map;
 
+
 /**
  * @author Joram Barrez
  */
@@ -113,7 +115,7 @@ protected void planTransactionDependentExecutionListener(BaseExecutionListener e
       customPropertiesMapToUse = ((ExecutionListenerCustomPropertiesResolver) customPropertiesResolver).getCustomPropertiesMap();
     }
 
-    if (TransactionDependentExecutionListener.ON_TRANSACTION_RESULT_COMITTED.equals(activitiListener.getOnTransactionResult())) {
+    if (TransactionDependentExecutionListener.ON_TRANSACTION_RESULT_COMMITTED.equals(activitiListener.getOnTransactionResult())) {
       ((TransactionDependentExecutionListeners) executionListenerContextCloseListener).addClosedListener((TransactionDependentExecutionListener) executionListener, getExecution().getProcessInstanceId(), getExecution().getId(),
               getExecution().getCurrentFlowElement(), executionVariablesToUse, customPropertiesMapToUse);
     } else if (TransactionDependentExecutionListener.ON_TRANSACTION_RESULT_ROLLED_BACK.equals(activitiListener.getOnTransactionResult())) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventSupport.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.activiti.engine.delegate.event.impl;
 
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
@@ -39,7 +39,7 @@ public class ActivitiEventSupport {
 	protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;
 
 	public ActivitiEventSupport() {
-		eventListeners = new ArrayList<ActivitiEventListener>();
+		eventListeners = new CopyOnWriteArrayList<ActivitiEventListener>();
 		typedListeners = new HashMap<ActivitiEventType, List<ActivitiEventListener>>();
 	}
 
@@ -119,7 +119,7 @@ protected synchronized void addTypedEventListener(ActivitiEventListener listener
 		List<ActivitiEventListener> listeners = typedListeners.get(type);
 		if (listeners == null) {
 			// Add an empty list of listeners for this type
-			listeners = new ArrayList<ActivitiEventListener>();
+			listeners = new CopyOnWriteArrayList<ActivitiEventListener>();
 			typedListeners.put(type, listeners);
 		}
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -39,7 +39,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "6.0.0.1"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
+  public static String VERSION = "6.0.0.2"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
 
   /**
    * The name as specified in 'process-engine-name' in the activiti.cfg.xml configuration file. The default name for a process engine is 'default

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -129,6 +129,7 @@ public class DbSqlSession implements Session {
     
     // Version 6
     ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.0"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("6.0.0.1"));
     
     /* Current */
     ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/ProcessEngine.java
Patch:
@@ -50,7 +50,7 @@
 public interface ProcessEngine {
 
   /** the version of the activiti library */
-  public static String VERSION = "6.0.0.1";
+  public static String VERSION = "6.0.0.2";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryCompensateEventActivityBehavior.java
Patch:
@@ -68,7 +68,7 @@ public void execute(DelegateExecution execution) {
     }
     
     if (compensationActivity == null) {
-      throw new ActivitiException("Compensation activity could not be found");
+      throw new ActivitiException("Compensation activity could not be found (or it is missing 'isForCompensation=\"true\"'");
     }
     
     // find SubProcess or Process instance execution
@@ -78,7 +78,7 @@ public void execute(DelegateExecution execution) {
       if (parentExecution.getCurrentFlowElement() instanceof SubProcess) {
         scopeExecution = parentExecution;
         
-      } else if (parentExecution.getId().equals(parentExecution.getProcessInstanceId())) {
+      } else if (parentExecution.isProcessInstanceType()) {
         scopeExecution = parentExecution;
       } else {
         parentExecution = parentExecution.getParent();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -98,13 +98,13 @@ public void execute(DelegateExecution execution) {
       throw new ActivitiException("Programmatic error: no parent scope execution found for boundary event " + cancelBoundaryEvent.getId());
     }
     
-    ScopeUtil.createCopyOfSubProcessExecutionForCompensation(parentScopeExecution, newParentScopeExecution);
+    ScopeUtil.createCopyOfSubProcessExecutionForCompensation(parentScopeExecution);
     
     if (subProcess.getLoopCharacteristics() != null) {
       List<? extends ExecutionEntity> multiInstanceExecutions = parentScopeExecution.getExecutions();
       for (ExecutionEntity multiInstanceExecution : multiInstanceExecutions) {
         if (multiInstanceExecution.getId().equals(parentScopeExecution.getId()) == false) {
-          ScopeUtil.createCopyOfSubProcessExecutionForCompensation(multiInstanceExecution, newParentScopeExecution);
+          ScopeUtil.createCopyOfSubProcessExecutionForCompensation(multiInstanceExecution);
           
           // end all executions in the scope of the transaction
           deleteChildExecutions(multiInstanceExecution, executionEntity, commandContext);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -175,7 +175,7 @@ public void leave(DelegateExecution execution) {
         }
         
         if (hasCompensation) {
-          ScopeUtil.createCopyOfSubProcessExecutionForCompensation(executionToUse, executionToUse.getParent());
+          ScopeUtil.createCopyOfSubProcessExecutionForCompensation(executionToUse);
         }
         
         if (activity instanceof CallActivity) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventSupport.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.activiti.engine.delegate.event.impl;
 
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
@@ -39,7 +39,7 @@ public class ActivitiEventSupport {
 	protected Map<ActivitiEventType, List<ActivitiEventListener>> typedListeners;
 
 	public ActivitiEventSupport() {
-		eventListeners = new ArrayList<ActivitiEventListener>();
+		eventListeners = new CopyOnWriteArrayList<ActivitiEventListener>();
 		typedListeners = new HashMap<ActivitiEventType, List<ActivitiEventListener>>();
 	}
 
@@ -119,7 +119,7 @@ protected synchronized void addTypedEventListener(ActivitiEventListener listener
 		List<ActivitiEventListener> listeners = typedListeners.get(type);
 		if (listeners == null) {
 			// Add an empty list of listeners for this type
-			listeners = new ArrayList<ActivitiEventListener>();
+			listeners = new CopyOnWriteArrayList<ActivitiEventListener>();
 			typedListeners.put(type, listeners);
 		}
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryManager.java
Patch:
@@ -62,10 +62,9 @@ public abstract void recordSubProcessInstanceStart(
 	public abstract void recordActivityEnd(ExecutionEntity executionEntity);
 
 	/**
-	 * Record the end of a start-task, if activity history is enabled.
+	 * Record the end of a start event, if activity history is enabled.
 	 */
-	public abstract void recordStartEventEnded(String executionId,
-			String activityId);
+	public abstract void recordStartEventEnded(ExecutionEntity execution, String activityId);
 
 	/**
 	 * Finds the {@link HistoricActivityInstanceEntity} that is active in the given

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/StartEventEndHandler.java
Patch:
@@ -25,11 +25,10 @@
 public class StartEventEndHandler implements ExecutionListener {
 
   public void notify(DelegateExecution execution) throws Exception {
-    String executionId = execution.getId();
-    String activityId = ((ExecutionEntity)execution).getActivityId();
+    String activityId = ((ExecutionEntity) execution).getActivityId();
     
     Context.getCommandContext().getHistoryManager()
-      .recordStartEventEnded(executionId, activityId);
+      .recordStartEventEnded((ExecutionEntity) execution, activityId);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetExecutionsVariablesCmd.java
Patch:
@@ -36,6 +36,7 @@ public List<VariableInstance> execute(CommandContext commandContext) {
     List<VariableInstance> instances = new ArrayList<VariableInstance>();
     List<VariableInstanceEntity> entities = commandContext.getVariableInstanceEntityManager().findVariableInstancesByExecutionIds(executionIds);
     for(VariableInstanceEntity entity : entities){
+        entity.getValue();
         instances.add(entity);
     }
     return instances;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTasksLocalVariablesCmd.java
Patch:
@@ -49,7 +49,8 @@ public List<VariableInstance> execute(CommandContext commandContext) {
     List<VariableInstance> instances = new ArrayList<VariableInstance>();
     List<VariableInstanceEntity> entities = commandContext.getVariableInstanceEntityManager().findVariableInstancesByTaskIds(taskIds);
     for(VariableInstanceEntity entity : entities){
-    	instances.add(entity);
+        entity.getValue();
+        instances.add(entity);
     }
     
     return instances;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ServiceTaskXMLConverter.java
Patch:
@@ -126,7 +126,7 @@ protected boolean writeExtensionChildElements(BaseElement element, boolean didWr
         } else {
           xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, ELEMENT_FIELD_STRING, ACTIVITI_EXTENSIONS_NAMESPACE);
         }
-        xtw.writeCharacters(customProperty.getSimpleValue());
+        xtw.writeCData(customProperty.getSimpleValue());
         xtw.writeEndElement();
         xtw.writeEndElement();
       }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/UserTaskXMLConverter.java
Patch:
@@ -162,7 +162,7 @@ protected boolean writeExtensionChildElements(BaseElement element, boolean didWr
           didWriteExtensionStartElement = true;
         }
         xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, customProperty.getName(), ACTIVITI_EXTENSIONS_NAMESPACE);
-        xtw.writeCharacters(customProperty.getSimpleValue());
+        xtw.writeCData(customProperty.getSimpleValue());
         xtw.writeEndElement();
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -85,7 +85,8 @@ protected void executeInclusiveGatewayLogic(ExecutionEntity execution) {
       logger.debug("Inclusive gateway cannot be reached by any execution and is activated");
 
       // Kill all executions here (except the incoming)
-      Collection<ExecutionEntity> executionsInGateway = executionEntityManager.findInactiveExecutionsByActivityId(execution.getCurrentActivityId());
+      Collection<ExecutionEntity> executionsInGateway = executionEntityManager
+          .findInactiveExecutionsByActivityIdAndProcessInstanceId(execution.getCurrentActivityId(), execution.getProcessInstanceId());
       for (ExecutionEntity executionEntityInGateway : executionsInGateway) {
         if (!executionEntityInGateway.getId().equals(execution.getId())) {
           executionEntityManager.delete(executionEntityInGateway);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -57,8 +57,6 @@ public interface ExecutionEntityManager extends EntityManager<ExecutionEntity> {
 
   List<ExecutionEntity> findEventScopeExecutionsByActivityId(String activityRef, String parentExecutionId);
   
-  Collection<ExecutionEntity> findInactiveExecutionsByActivityId(String activityId);
-
   Collection<ExecutionEntity> findInactiveExecutionsByProcessInstanceId(String processInstanceId);
 
   Collection<ExecutionEntity> findInactiveExecutionsByActivityIdAndProcessInstanceId(String activityId, String processInstanceId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/ExecutionDataManager.java
Patch:
@@ -53,8 +53,6 @@ public interface ExecutionDataManager extends DataManager<ExecutionEntity> {
 
   List<ExecutionEntity> findEventScopeExecutionsByActivityId(String activityRef, String parentExecutionId);
 
-  Collection<ExecutionEntity> findInactiveExecutionsByActivityId(final String activityId);
-
   Collection<ExecutionEntity> findInactiveExecutionsByProcessInstanceId(final String processInstanceId);
   
   Collection<ExecutionEntity> findInactiveExecutionsByActivityIdAndProcessInstanceId(final String activityId, final String processInstanceId);

File: modules/activiti5-compatibility-test/src/test/java/org/activiti/compatibility/test/JavaDelegateTest.java
Patch:
@@ -26,6 +26,7 @@ public void testActiviti5JavaDelegate() {
     
     // Check data for existing process
     ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processDefinitionKey("javaDelegateTestProcess").singleResult();
+    assertNotNull(processInstance);
     Map<String, Object> variables = runtimeService.getVariables(processInstance.getId());
     assertEquals(1, variables.size());
     assertNotNull(variables.get("testVar"));

File: modules/activiti5-compatibility-test/src/test/java/org/activiti/compatibility/test/ParseHandlerTest.java
Patch:
@@ -24,6 +24,7 @@ public class ParseHandlerTest extends AbstractActiviti6CompatibilityTest {
   @Test
   public void testActiviti5ParseHandlersApplied() {
       Task task = taskService.createTaskQuery().processDefinitionKey("parseHandlerTestProcess").singleResult();
+      assertNotNull(task);
       assertEquals("The task-activiti 5", task.getName());
       
       runtimeService.startProcessInstanceByKey("parseHandlerTestProcess");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractNativeQuery.java
Patch:
@@ -130,10 +130,11 @@ public Object execute(CommandContext commandContext) {
       int firstRow = firstResult + 1;
       parameterMap.put("firstRow", firstRow);
       int lastRow = 0;
-      if(maxResults == Integer.MAX_VALUE) {
+      if (maxResults == Integer.MAX_VALUE) {
         lastRow = maxResults;
+      } else {
+        lastRow = firstResult + maxResults + 1;
       }
-      lastRow = firstResult + maxResults + 1;
       parameterMap.put("lastRow", lastRow);
       return executeList(commandContext, parameterMap, firstResult, maxResults);
     } else if (resultType == ResultType.SINGLE_RESULT) {

File: modules/activiti-dmn-engine/src/main/java/org/activiti/dmn/engine/impl/AbstractNativeQuery.java
Patch:
@@ -130,8 +130,9 @@ public Object execute(CommandContext commandContext) {
       int lastRow = 0;
       if (maxResults == Integer.MAX_VALUE) {
         lastRow = maxResults;
+      } else {
+        lastRow = firstResult + maxResults + 1;
       }
-      lastRow = firstResult + maxResults + 1;
       parameterMap.put("lastRow", lastRow);
       return executeList(commandContext, parameterMap, firstResult, maxResults);
     } else if (resultType == ResultType.SINGLE_RESULT) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractNativeQuery.java
Patch:
@@ -130,8 +130,9 @@ public Object execute(CommandContext commandContext) {
       int lastRow = 0;
       if (maxResults == Integer.MAX_VALUE) {
         lastRow = maxResults;
+      } else {
+        lastRow = firstResult + maxResults + 1;
       }
-      lastRow = firstResult + maxResults + 1;
       parameterMap.put("lastRow", lastRow);
       return executeList(commandContext, parameterMap, firstResult, maxResults);
     } else if (resultType == ResultType.SINGLE_RESULT) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/AbstractNativeQuery.java
Patch:
@@ -129,10 +129,11 @@ public Object execute(CommandContext commandContext) {
       int firstRow = firstResult + 1;
       parameterMap.put("firstRow", firstRow);
       int lastRow = 0;
-      if(maxResults == Integer.MAX_VALUE) {
+      if (maxResults == Integer.MAX_VALUE) {
         lastRow = maxResults;
+      } else {
+        lastRow = firstResult + maxResults + 1;
       }
-      lastRow = firstResult + maxResults + 1;
       parameterMap.put("lastRow", lastRow);
       return executeList(commandContext, parameterMap, firstResult, maxResults);
     } else if (resultType == ResultType.SINGLE_RESULT) {

File: modules/activiti5-spring-compatibility/src/main/java/org/activiti/compatibility/spring/DefaultSpringProcessEngineFactory.java
Patch:
@@ -30,7 +30,7 @@ public ProcessEngine buildProcessEngine(ProcessEngineConfigurationImpl activiti6
     org.activiti5.engine.impl.cfg.ProcessEngineConfigurationImpl activiti5Configuration = null;
     if (activiti6Configuration instanceof SpringProcessEngineConfiguration) {
       activiti5Configuration = new org.activiti5.spring.SpringProcessEngineConfiguration();
-      copyConfigItems(activiti6Configuration, activiti5Configuration);
+      super.copyConfigItems(activiti6Configuration, activiti5Configuration);
       copySpringConfigItems((SpringProcessEngineConfiguration) activiti6Configuration, (org.activiti5.spring.SpringProcessEngineConfiguration) activiti5Configuration);
       return activiti5Configuration.buildProcessEngine();
     

File: modules/activiti5-test/src/test/java/org/activiti5/standalone/jpa/HistoricJPAVariableTest.java
Patch:
@@ -38,7 +38,7 @@ public class HistoricJPAVariableTest extends AbstractActivitiTestCase {
 	protected void initializeProcessEngine() {
 		if (cachedProcessEngine==null) {
 			ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
-				.createProcessEngineConfigurationFromResource("org/activiti/standalone/jpa/activiti.cfg.xml");
+				.createProcessEngineConfigurationFromResource("org/activiti5/standalone/jpa/activiti.cfg.xml");
 
 			cachedProcessEngine = processEngineConfiguration.buildProcessEngine();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/EventSubscriptionQueryImpl.java
Patch:
@@ -44,11 +44,11 @@ public EventSubscriptionQueryImpl(CommandExecutor commandExecutor) {
     super(commandExecutor);
   }
 
-  public EventSubscriptionQueryImpl eventSubscriptionId(String id) {
+  public EventSubscriptionQueryImpl eventSubscriptionId(String eventSubscriptionId) {
     if (eventSubscriptionId == null) {
       throw new ActivitiIllegalArgumentException("Provided event subscription id is null");
     }
-    this.eventSubscriptionId = id;
+    this.eventSubscriptionId = eventSubscriptionId;
     return this;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntityManagerImpl.java
Patch:
@@ -290,7 +290,7 @@ public void delete(JobEntity jobEntity) {
   protected void removeExecutionLink(JobEntity jobEntity) {
     if (jobEntity.getExecutionId() != null) {
       ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());
-      execution.getJobs().remove(this);
+      execution.getJobs().remove(jobEntity);
     }
   }
 

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/runtime/DeploymentServiceImpl.java
Patch:
@@ -221,7 +221,6 @@ protected DeploymentResult deployAppDefinitionToActiviti(AppDefinitionServiceRep
                 if (formMap != null) {
                 	for (Long formModelId : formMap.keySet()) {
                 		deploymentResult.addFormModelMapping(formModelId, formMap.get(formModelId));
-                		System.out.println("form mapping " + formModelId + " " + formMap.get(formModelId));
                 	}
                 }
                 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -182,11 +182,11 @@ public Map<String, Object> getVariablesLocal(String executionId, Collection<Stri
   }
   
   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {
-    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));
+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));
   }
 
   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {
-    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false, locale, withLocalizationFallback));
+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true, locale, withLocalizationFallback));
   }
 
   public Object getVariable(String executionId, String variableName) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -1104,6 +1104,9 @@ public List<String> getCandidateGroups() {
     
     } else if (candidateUser != null) {
       return getGroupsForCandidateUser(candidateUser);
+
+    } else if (userIdForCandidateAndAssignee != null) {
+      return getGroupsForCandidateUser(userIdForCandidateAndAssignee);
     } 
     return null;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -12,6 +12,7 @@
 import org.activiti.bpmn.model.FlowNode;
 import org.activiti.bpmn.model.Gateway;
 import org.activiti.bpmn.model.SequenceFlow;
+import org.activiti.bpmn.model.SubProcess;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.Expression;
@@ -95,7 +96,7 @@ public void run() {
       
       FlowNode flowNode = (FlowNode) currentFlowElement;
       
-      if (execution.getId().equals(execution.getProcessInstanceId()) == false) {
+      if (execution.getId().equals(execution.getProcessInstanceId()) == false && execution.getCurrentFlowElement() instanceof SubProcess == false) {
         Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
             ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED, flowNode.getId(), flowNode.getName(),
                 execution.getId(), execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -795,6 +795,7 @@ protected void flushInserts() {
     for (Class<? extends PersistentObject> persistentObjectClass : EntityDependencyOrder.INSERT_ORDER) {
       if (insertedObjects.containsKey(persistentObjectClass)) {
       	flushPersistentObjects(persistentObjectClass, insertedObjects.get(persistentObjectClass));
+      	insertedObjects.remove(persistentObjectClass);
       }
     }
     
@@ -818,7 +819,6 @@ protected void flushPersistentObjects(Class<? extends PersistentObject> persiste
 	  }	else {
 	  	flushBulkInsert(insertedObjects.get(persistentObjectClass), persistentObjectClass);
 	  }
-	  insertedObjects.remove(persistentObjectClass);
   }
   
   protected void flushRegularInsert(PersistentObject persistentObject, Class<? extends PersistentObject> clazz) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -182,11 +182,11 @@ public Map<String, Object> getVariablesLocal(String executionId, Collection<Stri
   }
   
   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {
-    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));
+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));
   }
 
   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {
-    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false, locale, withLocalizationFallback));
+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true, locale, withLocalizationFallback));
   }
 
   public Object getVariable(String executionId, String variableName) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -222,7 +222,7 @@ public interface RepositoryService {
    * Activates the process definition with the given id. 
    * 
    * @param activationDate The date on which the process definition will be activated. If null, the
-   *                       process definition is suspended immediately. 
+   *                       process definition is activated immediately. 
    *                       Note: The job executor needs to be active to use this!                                 
    *                                
    * @throws ActivitiObjectNotFoundException if no such processDefinition can be found.
@@ -242,7 +242,7 @@ public interface RepositoryService {
    * Activates the process definition with the given key (=id in the bpmn20.xml file). 
    * 
    * @param activationDate The date on which the process definition will be activated. If null, the
-   *                       process definition is suspended immediately. 
+   *                       process definition is activated immediately. 
    *                       Note: The job executor needs to be active to use this!                                 
    *                                
    * @throws ActivitiObjectNotFoundException if no such processDefinition can be found.

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinitionQuery.java
Patch:
@@ -106,7 +106,6 @@ public interface ProcessDefinitionQuery extends Query<ProcessDefinitionQuery, Pr
    * Only select the process definitions which are the latest deployed
    * (ie. which have the highest version number for the given key).
    * 
-   * Can only be used in combination with {@link #processDefinitionKey(String)} of {@link #processDefinitionKeyLike(String)}.
    * Can also be used without any other criteria (ie. query.latest().list()), which
    * will then give all the latest versions of all the deployed process definitions.
    * 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManagerImpl.java
Patch:
@@ -104,6 +104,9 @@ public void insert(TaskEntity taskEntity, ExecutionEntity execution) {
     
     getHistoryManager().recordTaskCreated(taskEntity, execution);
     getHistoryManager().recordTaskId(taskEntity);
+    if (taskEntity.getFormKey() != null) {
+      getHistoryManager().recordTaskFormKeyChange(taskEntity.getId(), taskEntity.getFormKey());
+    }
   }
   
   @Override

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/v6/AbstractActviti6Test.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti6;
+package org.activiti.engine.test.api.v6;
 
 import java.sql.SQLException;
 import java.util.List;
@@ -34,9 +34,9 @@
  * 
  * @author Joram Barrez
  */
-public class AbstractActvitiTest {
+public class AbstractActviti6Test {
   
-  private static final Logger logger = LoggerFactory.getLogger(AbstractActvitiTest.class);
+  private static final Logger logger = LoggerFactory.getLogger(AbstractActviti6Test.class);
 
   public static String H2_TEST_JDBC_URL = "jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000";
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/v6/CountingServiceTaskTestDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti6;
+package org.activiti.engine.test.api.v6;
 
 import java.util.concurrent.atomic.AtomicInteger;
 

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -15,17 +15,17 @@
 
 import java.util.List;
 
+import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
-import org.activiti6.AbstractActvitiTest;
 import org.junit.Assert;
 import org.junit.Test;
 
 /**
  * @author Joram Barrez
  */
-public class SubProcessTest extends AbstractActvitiTest {
+public class SubProcessTest extends PluggableActivitiTestCase {
 
   @Test
   public void testSimpleSubProcess() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/v6/AbstractActviti6Test.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti6;
+package org.activiti.engine.test.api.v6;
 
 import java.sql.SQLException;
 import java.util.List;
@@ -34,9 +34,9 @@
  * 
  * @author Joram Barrez
  */
-public class AbstractActvitiTest {
+public class AbstractActviti6Test {
   
-  private static final Logger logger = LoggerFactory.getLogger(AbstractActvitiTest.class);
+  private static final Logger logger = LoggerFactory.getLogger(AbstractActviti6Test.class);
 
   public static String H2_TEST_JDBC_URL = "jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000";
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/v6/CountingServiceTaskTestDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti6;
+package org.activiti.engine.test.api.v6;
 
 import java.util.concurrent.atomic.AtomicInteger;
 

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -15,17 +15,17 @@
 
 import java.util.List;
 
+import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
-import org.activiti6.AbstractActvitiTest;
 import org.junit.Assert;
 import org.junit.Test;
 
 /**
  * @author Joram Barrez
  */
-public class SubProcessTest extends AbstractActvitiTest {
+public class SubProcessTest extends PluggableActivitiTestCase {
 
   @Test
   public void testSimpleSubProcess() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
Patch:
@@ -66,17 +66,17 @@ public ProcessInstance execute(CommandContext commandContext) {
       throw new ActivitiException("Cannot start process instance by message: subscription to message with name '"+messageName+"' is not a message start event.");
     }
         
-    DeploymentManager deploymentCache = commandContext
+    DeploymentManager deploymentManager = commandContext
             .getProcessEngineConfiguration()
             .getDeploymentManager();
           
-    ProcessDefinitionEntity processDefinition = deploymentCache.findDeployedProcessDefinitionById(processDefinitionId);
+    ProcessDefinitionEntity processDefinition = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);
     if (processDefinition == null) {
       throw new ActivitiObjectNotFoundException("No process definition found for id '" + processDefinitionId + "'", ProcessDefinition.class);
     }
 
     // Do not start process a process instance if the process definition is suspended
-    if (processDefinition.isSuspended()) {
+    if (deploymentManager.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiException("Cannot start process instance. Process definition "
           + processDefinition.getName() + " (id = " + processDefinition.getId() + ") is suspended");
     }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ProcessDefinitionResource.java
Patch:
@@ -75,7 +75,7 @@ public ProcessDefinitionResponse executeProcessDefinitionAction(@PathVariable St
   
   protected ProcessDefinitionResponse activateProcessDefinition(ProcessDefinition processDefinition, boolean suspendInstances, Date date) {
     
-    if (!processDefinition.isSuspended()) {
+    if (!repositoryService.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiConflictException("Process definition with id '" + processDefinition.getId() + " ' is already active");
     }
     repositoryService.activateProcessDefinitionById(processDefinition.getId(), suspendInstances, date);
@@ -89,7 +89,7 @@ protected ProcessDefinitionResponse activateProcessDefinition(ProcessDefinition
 
   protected ProcessDefinitionResponse suspendProcessDefinition(ProcessDefinition processDefinition, boolean suspendInstances, Date date) {
     
-    if (processDefinition.isSuspended()) {
+    if (repositoryService.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiConflictException("Process definition with id '" + processDefinition.getId() + " ' is already suspended");
     }
     repositoryService.suspendProcessDefinitionById(processDefinition.getId(), suspendInstances, date);

File: modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/Activiti5CompatibilityHandler.java
Patch:
@@ -26,7 +26,6 @@
 import org.activiti.engine.impl.persistence.entity.SignalEventSubscriptionEntity;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
 import org.activiti.engine.impl.persistence.entity.VariableInstance;
-import org.activiti.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.repository.ProcessDefinition;
@@ -56,6 +55,8 @@ public interface Activiti5CompatibilityHandler {
   
   ObjectNode getProcessDefinitionInfo(String processDefinitionId);
   
+  boolean isProcessDefinitionSuspended(String processDefinitionId);
+  
   void saveProcessDefinitionInfo(String processDefinitionId, ObjectNode infoNode);
   
   void addCandidateStarter(String processDefinitionId, String userId, String groupId);

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ProcessDefinitionResource.java
Patch:
@@ -18,7 +18,6 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
-import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.rest.exception.ActivitiConflictException;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -76,7 +75,7 @@ public ProcessDefinitionResponse executeProcessDefinitionAction(@PathVariable St
 
   protected ProcessDefinitionResponse activateProcessDefinition(ProcessDefinition processDefinition, boolean suspendInstances, Date date) {
 
-    if (!ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
+    if (!repositoryService.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiConflictException("Process definition with id '" + processDefinition.getId() + " ' is already active");
     }
     repositoryService.activateProcessDefinitionById(processDefinition.getId(), suspendInstances, date);
@@ -91,7 +90,7 @@ protected ProcessDefinitionResponse activateProcessDefinition(ProcessDefinition
 
   protected ProcessDefinitionResponse suspendProcessDefinition(ProcessDefinition processDefinition, boolean suspendInstances, Date date) {
 
-    if (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
+    if (repositoryService.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiConflictException("Process definition with id '" + processDefinition.getId() + " ' is already suspended");
     }
     repositoryService.suspendProcessDefinitionById(processDefinition.getId(), suspendInstances, date);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/CallActivityBehavior.java
Patch:
@@ -86,7 +86,7 @@ public void execute(DelegateExecution execution) {
     }
 
     // Do not start a process instance if the process definition is suspended
-    if (processDefinition.isSuspended()) {
+    if (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiException("Cannot start process instance. Process definition " + processDefinition.getName() + " (id = " + processDefinition.getId() + ") is suspended");
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/NeedsActiveProcessDefinitionCmd.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 
 /**
@@ -35,7 +36,7 @@ public NeedsActiveProcessDefinitionCmd(String processDefinitionId) {
   }
 
   public T execute(CommandContext commandContext) {
-    ProcessDefinitionEntity processDefinition = commandContext.getProcessEngineConfiguration().getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);
+    ProcessDefinitionEntity processDefinition = ProcessDefinitionUtil.getProcessDefinitionFromDatabase(processDefinitionId);
 
     if (processDefinition == null) {
       throw new ActivitiObjectNotFoundException("No process definition found for id = '" + processDefinitionId + "'", ProcessDefinition.class);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java
Patch:
@@ -39,7 +39,7 @@ public String getType() {
   public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {
     DeploymentManager deploymentCache = Context.getProcessEngineConfiguration().getDeploymentManager();
 
-    ProcessDefinition processDefinition = ProcessDefinitionUtil.getProcessDefinitionEntity(job.getProcessDefinitionId()); 
+    ProcessDefinition processDefinition = ProcessDefinitionUtil.getProcessDefinitionFromDatabase(job.getProcessDefinitionId()); 
     if (processDefinition == null) {
       throw new ActivitiException("Could not find process definition needed for timer start event");
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceUtil.java
Patch:
@@ -63,7 +63,7 @@ protected static ProcessInstance createAndStartProcessInstance(ProcessDefinition
     }
 
     // Do not start process a process instance if the process definition is suspended
-    if (processDefinition.isSuspended()) {
+    if (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiException("Cannot start process instance. Process definition " + processDefinition.getName() + " (id = " + processDefinition.getId() + ") is suspended");
     }
 
@@ -100,7 +100,7 @@ public static ProcessInstance createAndStartProcessInstanceByMessage(ProcessDefi
     }
 
     // Do not start process a process instance if the process definition is suspended
-    if (processDefinition.isSuspended()) {
+    if (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiException("Cannot start process instance. Process definition " + processDefinition.getName() + " (id = " + processDefinition.getId() + ") is suspended");
     }
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ProcessDefinitionResource.java
Patch:
@@ -18,6 +18,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
+import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.rest.exception.ActivitiConflictException;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -75,7 +76,7 @@ public ProcessDefinitionResponse executeProcessDefinitionAction(@PathVariable St
 
   protected ProcessDefinitionResponse activateProcessDefinition(ProcessDefinition processDefinition, boolean suspendInstances, Date date) {
 
-    if (!processDefinition.isSuspended()) {
+    if (!ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiConflictException("Process definition with id '" + processDefinition.getId() + " ' is already active");
     }
     repositoryService.activateProcessDefinitionById(processDefinition.getId(), suspendInstances, date);
@@ -90,7 +91,7 @@ protected ProcessDefinitionResponse activateProcessDefinition(ProcessDefinition
 
   protected ProcessDefinitionResponse suspendProcessDefinition(ProcessDefinition processDefinition, boolean suspendInstances, Date date) {
 
-    if (processDefinition.isSuspended()) {
+    if (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiConflictException("Process definition with id '" + processDefinition.getId() + " ' is already suspended");
     }
     repositoryService.suspendProcessDefinitionById(processDefinition.getId(), suspendInstances, date);

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
Patch:
@@ -66,17 +66,17 @@ public ProcessInstance execute(CommandContext commandContext) {
       throw new ActivitiException("Cannot start process instance by message: subscription to message with name '"+messageName+"' is not a message start event.");
     }
         
-    DeploymentManager deploymentCache = commandContext
+    DeploymentManager deploymentManager = commandContext
             .getProcessEngineConfiguration()
             .getDeploymentManager();
           
-    ProcessDefinitionEntity processDefinition = deploymentCache.findDeployedProcessDefinitionById(processDefinitionId);
+    ProcessDefinitionEntity processDefinition = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);
     if (processDefinition == null) {
       throw new ActivitiObjectNotFoundException("No process definition found for id '" + processDefinitionId + "'", ProcessDefinition.class);
     }
 
     // Do not start process a process instance if the process definition is suspended
-    if (processDefinition.isSuspended()) {
+    if (deploymentManager.isProcessDefinitionSuspended(processDefinition.getId())) {
       throw new ActivitiException("Cannot start process instance. Process definition "
           + processDefinition.getName() + " (id = " + processDefinition.getId() + ") is suspended");
     }

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/StandaloneDatabaseEventLoggerTest.java
Patch:
@@ -49,8 +49,8 @@ public void testStandaloneTaskEvents() throws Exception {
 		
 		List<EventLogEntry> events = managementService.getEventLogEntries(null, null);
 		assertEquals(2, events.size());
-		assertEquals("TASK_CREATED", events.get(0).getType());
-		assertEquals("TASK_ASSIGNED", events.get(1).getType());
+		assertEquals("TASK_ASSIGNED", events.get(0).getType());
+		assertEquals("TASK_CREATED", events.get(1).getType());
 		
 		for (EventLogEntry eventLogEntry : events) {
 			Map<String, Object> data = objectMapper.readValue(eventLogEntry.getData(), new TypeReference<HashMap<String, Object>>(){});

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/standalone/StandaloneMybatisTransactionContext.java
Patch:
@@ -76,7 +76,7 @@ public void commit() {
    * @param transactionState The {@link TransactionState} for which the listeners will be called.
    * @param executeInNewContext If true, the listeners will be called in a new command context.
    *                            This is needed for example when firing the {@link TransactionState#COMMITTED}
-   *                            event: the transacation is already committed and executing logic in the same
+   *                            event: the transaction is already committed and executing logic in the same
    *                            context could lead to strange behaviour (for example doing a {@link SqlSession#update(String)}
    *                            would actually roll back the update (as the MyBatis context is already committed
    *                            and the internal flags have not been correctly set).

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -64,6 +64,9 @@ public interface BpmnXMLConstants {
   public static final String ELEMENT_SUBPROCESS = "subProcess";
   public static final String ATTRIBUTE_TRIGGERED_BY = "triggeredByEvent";
   public static final String ELEMENT_TRANSACTION = "transaction";
+  public static final String ELEMENT_ADHOC_SUBPROCESS = "adHocSubProcess";
+  public static final String ATTRIBUTE_ORDERING = "ordering";
+  public static final String ELEMENT_COMPLETION_CONDITION = "completionCondition";
 
   public static final String ELEMENT_DATA_STATE = "dataState";
 

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BaseBpmnXMLConverter.java
Patch:
@@ -136,9 +136,6 @@ public void convertToBpmnModel(XMLStreamReader xtr, BpmnModel model, Process act
         
         SubProcess subProcess = activeSubProcessList.get(activeSubProcessList.size() - 1);
         subProcess.addFlowElement(currentFlowElement);
-        if (currentFlowElement instanceof FlowNode) {
-          ((FlowNode) currentFlowElement).setSubProcess(subProcess);
-        }
 
       } else {
         activeProcess.addFlowElement(currentFlowElement);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/ActivityBehaviorFactory.java
Patch:
@@ -41,6 +41,7 @@
 import org.activiti.bpmn.model.Transaction;
 import org.activiti.bpmn.model.UserTask;
 import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
+import org.activiti.engine.impl.bpmn.behavior.AdhocSubProcessActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryCancelEventActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryCompensateEventActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
@@ -165,6 +166,8 @@ public interface ActivityBehaviorFactory {
   
   public abstract EventSubProcessMessageStartEventActivityBehavior createEventSubProcessMessageStartEventActivityBehavior(StartEvent startEvent, MessageEventDefinition messageEventDefinition);
 
+  public abstract AdhocSubProcessActivityBehavior createAdhocSubprocessActivityBehavior(SubProcess subProcess);
+  
   public abstract CallActivityBehavior createCallActivityBehavior(CallActivity callActivity);
 
   public abstract TransactionActivityBehavior createTransactionActivityBehavior(Transaction transaction);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -83,6 +83,7 @@
 import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
 import org.activiti.engine.impl.bpmn.parser.factory.DefaultListenerFactory;
 import org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory;
+import org.activiti.engine.impl.bpmn.parser.handler.AdhocSubProcessParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.BoundaryEventParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.BusinessRuleParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.CallActivityParseHandler;
@@ -1720,6 +1721,7 @@ public List<BpmnParseHandler> getDefaultBpmnParseHandlers() {
     bpmnParserHandlers.add(new StartEventParseHandler());
     bpmnParserHandlers.add(new SubProcessParseHandler());
     bpmnParserHandlers.add(new EventSubProcessParseHandler());
+    bpmnParserHandlers.add(new AdhocSubProcessParseHandler());
     bpmnParserHandlers.add(new TaskParseHandler());
     bpmnParserHandlers.add(new TimerEventDefinitionParseHandler());
     bpmnParserHandlers.add(new TransactionParseHandler());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManagerImpl.java
Patch:
@@ -241,7 +241,7 @@ public void fireTaskListenerEvent(TaskEntity taskEntity, String taskEventName) {
     if (taskEntity.getProcessDefinitionId() != null) {
       
       org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(taskEntity.getProcessDefinitionId());
-      FlowElement flowElement = process.getFlowElement(taskEntity.getTaskDefinitionKey());
+      FlowElement flowElement = process.getFlowElement(taskEntity.getTaskDefinitionKey(), true);
       if (flowElement != null && flowElement instanceof UserTask) {
         UserTask userTask = (UserTask) flowElement;
         for (ActivitiListener activitiListener : userTask.getTaskListeners()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/FormHandlerUtil.java
Patch:
@@ -56,7 +56,7 @@ public static StartFormHandler getStartFormHandler(CommandContext commandContext
   
   public static TaskFormHandler getTaskFormHandlder(String processDefinitionId, String taskId) {
     org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);
-    FlowElement flowElement = process.getFlowElement(taskId);
+    FlowElement flowElement = process.getFlowElement(taskId, true);
     if (flowElement != null && flowElement instanceof UserTask) {
       UserTask userTask = (UserTask) flowElement;
       

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CallActivityConverterTest.java
Patch:
@@ -32,7 +32,7 @@ protected String getResource() {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("callactivity");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("callactivity", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof CallActivity);
     CallActivity callActivity = (CallActivity) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CatchEventConverterTest.java
Patch:
@@ -32,19 +32,19 @@ protected String getResource() {
 
   private void validateModel(BpmnModel model) {
 
-    FlowElement timerElement = model.getMainProcess().getFlowElement("timer_evt");
+    FlowElement timerElement = model.getMainProcess().getFlowElement("timer_evt", true);
     EventDefinition timerEvent = extractEventDefinition(timerElement);
     assertTrue(timerEvent instanceof TimerEventDefinition);
     TimerEventDefinition ted = (TimerEventDefinition) timerEvent;
     assertEquals("PT5M", ted.getTimeDuration());
 
-    FlowElement signalElement = model.getMainProcess().getFlowElement("signal_evt");
+    FlowElement signalElement = model.getMainProcess().getFlowElement("signal_evt", true);
     EventDefinition signalEvent = extractEventDefinition(signalElement);
     assertTrue(signalEvent instanceof SignalEventDefinition);
     SignalEventDefinition sed = (SignalEventDefinition) signalEvent;
     assertEquals("signal_ref", sed.getSignalRef());
 
-    FlowElement messageElement = model.getMainProcess().getFlowElement("message_evt");
+    FlowElement messageElement = model.getMainProcess().getFlowElement("message_evt", true);
     EventDefinition messageEvent = extractEventDefinition(messageElement);
     assertTrue(messageEvent instanceof MessageEventDefinition);
     MessageEventDefinition med = (MessageEventDefinition) messageEvent;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CompleteConverterTest.java
Patch:
@@ -33,12 +33,12 @@ protected String getResource() {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("userTask1");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("userTask1", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof UserTask);
     assertEquals("userTask1", flowElement.getId());
 
-    flowElement = model.getMainProcess().getFlowElement("catchsignal");
+    flowElement = model.getMainProcess().getFlowElement("catchsignal", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof IntermediateCatchEvent);
     assertEquals("catchsignal", flowElement.getId());
@@ -48,7 +48,7 @@ private void validateModel(BpmnModel model) {
     SignalEventDefinition signalEvent = (SignalEventDefinition) catchEvent.getEventDefinitions().get(0);
     assertEquals("testSignal", signalEvent.getSignalRef());
 
-    flowElement = model.getMainProcess().getFlowElement("subprocess");
+    flowElement = model.getMainProcess().getFlowElement("subprocess", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SubProcess);
     assertEquals("subprocess", flowElement.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FlowNodeConverterTest.java
Patch:
@@ -25,7 +25,7 @@ public void doubleConversionValidation() throws Exception {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("sid-B074A0DD-934A-4053-A537-20ADF0781023");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("sid-B074A0DD-934A-4053-A537-20ADF0781023", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof ExclusiveGateway);
     ExclusiveGateway gateway = (ExclusiveGateway) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FlowNodeInSubProcessConverterTest.java
Patch:
@@ -23,7 +23,7 @@ public void doubleConversionValidation() throws Exception {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("subprocess1");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("subprocess1", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SubProcess);
     SubProcess subProcess = (SubProcess) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FlowNodeMultipleOutgoingFlowsConverterTest.java
Patch:
@@ -24,7 +24,7 @@ public void doubleConversionValidation() throws Exception {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("parallel1");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("parallel1", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof ParallelGateway);
     ParallelGateway gateway = (ParallelGateway) flowElement;
@@ -39,7 +39,7 @@ private void validateModel(BpmnModel model) {
     assertTrue(sequenceFlows.get(0).getSourceRef().equals("parallel1"));
     assertTrue(sequenceFlows.get(1).getSourceRef().equals("parallel1"));
     assertTrue(sequenceFlows.get(2).getSourceRef().equals("parallel1"));
-    flowElement = model.getMainProcess().getFlowElement("parallel2");
+    flowElement = model.getMainProcess().getFlowElement("parallel2", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof ParallelGateway);
     gateway = (ParallelGateway) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FormPropertiesConverterTest.java
Patch:
@@ -43,7 +43,7 @@ private void validateModel(BpmnModel model) {
     assertEquals("User registration", model.getMainProcess().getName());
     assertEquals(true, model.getMainProcess().isExecutable());
     
-    FlowElement startFlowElement = model.getMainProcess().getFlowElement("startNode");
+    FlowElement startFlowElement = model.getMainProcess().getFlowElement("startNode", true);
     assertNotNull(startFlowElement);
     assertTrue(startFlowElement instanceof StartEvent);
     StartEvent startEvent = (StartEvent) startFlowElement;
@@ -85,7 +85,7 @@ private void validateModel(BpmnModel model) {
       }
     }
     
-    FlowElement userFlowElement = model.getMainProcess().getFlowElement("userTask");
+    FlowElement userFlowElement = model.getMainProcess().getFlowElement("userTask", true);
     assertNotNull(userFlowElement);
     assertTrue(userFlowElement instanceof UserTask);
     UserTask userTask = (UserTask) userFlowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ScopedConverterTest.java
Patch:
@@ -33,7 +33,7 @@ protected String getResource() {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("outerSubProcess");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("outerSubProcess", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SubProcess);
     assertEquals("outerSubProcess", flowElement.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ServiceTaskConverterTest.java
Patch:
@@ -34,7 +34,7 @@ protected String getResource() {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("servicetask");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("servicetask", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof ServiceTask);
     assertEquals("servicetask", flowElement.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/SimpleConverterTest.java
Patch:
@@ -36,12 +36,12 @@ private void validateModel(BpmnModel model) {
     assertEquals("Simple process", model.getMainProcess().getName());
     assertEquals(true, model.getMainProcess().isExecutable());
 
-    FlowElement flowElement = model.getMainProcess().getFlowElement("flow1");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("flow1", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SequenceFlow);
     assertEquals("flow1", flowElement.getId());
 
-    flowElement = model.getMainProcess().getFlowElement("catchEvent");
+    flowElement = model.getMainProcess().getFlowElement("catchEvent", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof IntermediateCatchEvent);
     assertEquals("catchEvent", flowElement.getId());
@@ -52,7 +52,7 @@ private void validateModel(BpmnModel model) {
     TimerEventDefinition timerDefinition = (TimerEventDefinition) eventDefinition;
     assertEquals("PT5M", timerDefinition.getTimeDuration());
 
-    flowElement = model.getMainProcess().getFlowElement("flow1Condition");
+    flowElement = model.getMainProcess().getFlowElement("flow1Condition", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SequenceFlow);
     assertEquals("flow1Condition", flowElement.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/StartEventConverterTest.java
Patch:
@@ -33,7 +33,7 @@ protected String getResource() {
 
   private void validateModel(BpmnModel model) {
 
-    FlowElement flowElement = model.getMainProcess().getFlowElement("start");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("start", true);
     assertTrue(flowElement instanceof StartEvent);
 
     StartEvent startEvent = (StartEvent) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/UserTaskConverterTest.java
Patch:
@@ -37,7 +37,7 @@ protected String getResource() {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("usertask");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("usertask", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof UserTask);
     assertEquals("usertask", flowElement.getId());
@@ -90,13 +90,13 @@ private void validateModel(BpmnModel model) {
     assertEquals("${someDelegateExpression}", listener.getImplementation());
     assertEquals("complete", listener.getEvent());
 
-    flowElement = model.getMainProcess().getFlowElement("start");
+    flowElement = model.getMainProcess().getFlowElement("start", true);
     assertTrue(flowElement instanceof StartEvent);
 
     StartEvent startEvent = (StartEvent) flowElement;
     assertTrue(startEvent.getOutgoingFlows().size() == 1);
 
-    flowElement = model.getMainProcess().getFlowElement("flow1");
+    flowElement = model.getMainProcess().getFlowElement("flow1", true);
     assertTrue(flowElement instanceof SequenceFlow);
 
     SequenceFlow flow = (SequenceFlow) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ValuedDataObjectConverterTest.java
Patch:
@@ -42,7 +42,7 @@ protected String getResource() {
   }
 
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElement("start1");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("start1", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof StartEvent);
     assertEquals("start1", flowElement.getId());
@@ -96,7 +96,7 @@ private void validateModel(BpmnModel model) {
       }
     }
 
-    flowElement = model.getMainProcess().getFlowElement("subprocess1");
+    flowElement = model.getMainProcess().getFlowElement("subprocess1", true);
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SubProcess);
     assertEquals("subprocess1", flowElement.getId());

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Process.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Map;
 
 /**
  * @author Tijs Rademakers
@@ -42,7 +41,7 @@ public class Process extends BaseElement implements FlowElementsContainer, HasEx
   public Process() {
 
   }
-
+  
   public String getDocumentation() {
     return documentation;
   }
@@ -303,6 +302,7 @@ public Process clone() {
   public void setValues(Process otherElement) {
     super.setValues(otherElement);
 
+//    setBpmnModel(bpmnModel);
     setName(otherElement.getName());
     setExecutable(otherElement.isExecutable());
     setDocumentation(otherElement.getDocumentation());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/EventSubscriptionManager.java
Patch:
@@ -43,8 +43,8 @@ public class EventSubscriptionManager {
   protected void removeObsoleteEventSubscriptionsImpl(ProcessDefinitionEntity processDefinition, String eventHandlerType) {
     // remove all subscriptions for the previous version
     EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();
-    List<EventSubscriptionEntity> subscriptionsToDelete = eventSubscriptionEntityManager.findEventSubscriptionsByConfiguration(eventHandlerType,
-        processDefinition.getId(), processDefinition.getTenantId());
+    List<EventSubscriptionEntity> subscriptionsToDelete = 
+        eventSubscriptionEntityManager.findEventSubscriptionsByTypeAndProcessDefinitionId(eventHandlerType, processDefinition.getId(), processDefinition.getTenantId());
 
     for (EventSubscriptionEntity eventSubscriptionEntity : subscriptionsToDelete) {
       eventSubscriptionEntityManager.delete(eventSubscriptionEntity);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntityManager.java
Patch:
@@ -62,6 +62,8 @@ public interface EventSubscriptionEntityManager extends EntityManager<EventSubsc
   List<EventSubscriptionEntity> findEventSubscriptionsByExecution(String executionId);
 
   List<EventSubscriptionEntity> findEventSubscriptionsByConfiguration(String type, String configuration, String tenantId);
+  
+  List<EventSubscriptionEntity> findEventSubscriptionsByTypeAndProcessDefinitionId(String type, String processDefinitionId, String tenantId);
 
   List<EventSubscriptionEntity> findEventSubscriptionsByName(String type, String eventName, String tenantId);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/EventSubscriptionDataManager.java
Patch:
@@ -53,6 +53,8 @@ public interface EventSubscriptionDataManager extends DataManager<EventSubscript
   List<EventSubscriptionEntity> findEventSubscriptionsByExecution(final String executionId);
 
   List<EventSubscriptionEntity> findEventSubscriptionsByConfiguration(String type, String configuration, String tenantId);
+  
+  List<EventSubscriptionEntity> findEventSubscriptionsByTypeAndProcessDefinitionId(String type, String processDefinitionId, String tenantId);
 
   List<EventSubscriptionEntity> findEventSubscriptionsByName(final String type, final String eventName, final String tenantId);
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -808,6 +808,7 @@ protected void ensureProcessDefinitionInitialized() {
   public void setProcessDefinition(ProcessDefinitionImpl processDefinition) {
     this.processDefinition = processDefinition;
     this.processDefinitionId = processDefinition.getId();
+    this.processDefinitionKey = processDefinition.getKey();
   }
 
   // process instance /////////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/cache/EntityCache.java
Patch:
@@ -38,6 +38,7 @@ public interface EntityCache extends Session {
    * 
    * @param entity The {@link Entity} instance
    * @param storeState If true, the current state {@link Entity#getPersistentState()} will be stored for future diffing.
+   *                   Note that, if false, the {@link Entity} will always be seen as changed.
    */
   CachedEntity put(Entity entity, boolean storeState);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/EventSubscriptionQueryImpl.java
Patch:
@@ -44,11 +44,11 @@ public EventSubscriptionQueryImpl(CommandExecutor commandExecutor) {
     super(commandExecutor);
   }
 
-  public EventSubscriptionQueryImpl eventSubscriptionId(String id) {
+  public EventSubscriptionQueryImpl eventSubscriptionId(String eventSubscriptionId) {
     if (eventSubscriptionId == null) {
       throw new ActivitiIllegalArgumentException("Provided event subscription id is null");
     }
-    this.eventSubscriptionId = id;
+    this.eventSubscriptionId = eventSubscriptionId;
     return this;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/RepositoryService.java
Patch:
@@ -222,7 +222,7 @@ public interface RepositoryService {
    * Activates the process definition with the given id. 
    * 
    * @param activationDate The date on which the process definition will be activated. If null, the
-   *                       process definition is suspended immediately. 
+   *                       process definition is activated immediately. 
    *                       Note: The job executor needs to be active to use this!                                 
    *                                
    * @throws ActivitiObjectNotFoundException if no such processDefinition can be found.
@@ -242,7 +242,7 @@ public interface RepositoryService {
    * Activates the process definition with the given key (=id in the bpmn20.xml file). 
    * 
    * @param activationDate The date on which the process definition will be activated. If null, the
-   *                       process definition is suspended immediately. 
+   *                       process definition is activated immediately. 
    *                       Note: The job executor needs to be active to use this!                                 
    *                                
    * @throws ActivitiObjectNotFoundException if no such processDefinition can be found.

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinitionQuery.java
Patch:
@@ -106,7 +106,6 @@ public interface ProcessDefinitionQuery extends Query<ProcessDefinitionQuery, Pr
    * Only select the process definitions which are the latest deployed
    * (ie. which have the highest version number for the given key).
    * 
-   * Can only be used in combination with {@link #processDefinitionKey(String)} of {@link #processDefinitionKeyLike(String)}.
    * Can also be used without any other criteria (ie. query.latest().list()), which
    * will then give all the latest versions of all the deployed process definitions.
    * 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -801,6 +801,7 @@ protected void ensureProcessDefinitionInitialized() {
   public void setProcessDefinition(ProcessDefinitionImpl processDefinition) {
     this.processDefinition = processDefinition;
     this.processDefinitionId = processDefinition.getId();
+    this.processDefinitionKey = processDefinition.getKey();
   }
 
   // process instance /////////////////////////////////////////////////////////

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/repository/ProcessDefinitionQueryByLatestTest.java
Patch:
@@ -10,7 +10,7 @@
 
 public class ProcessDefinitionQueryByLatestTest extends PluggableActivitiTestCase {
 
-	private static String XML_FILE_PATH = "org/activiti/engine/test/repository/latest/";
+	private static String XML_FILE_PATH = "org/activiti5/engine/test/repository/latest/";
 	
 	  @Override
 	  protected void setUp() throws Exception {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/impl/MybatisJobDataManager.java
Patch:
@@ -198,7 +198,7 @@ public void unacquireJob(String jobId) {
     Map<String, Object> params = new HashMap<String, Object>(2);
     params.put("id", jobId);
     params.put("dueDate", new Date(getProcessEngineConfiguration().getClock().getCurrentTime().getTime()));
-    getDbSqlSession().update("unlockJob", params);
+    getDbSqlSession().update("unacquireJob", params);
   }
   
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractNativeQuery.java
Patch:
@@ -115,15 +115,16 @@ public long count() {
   public Object execute(CommandContext commandContext) {
     if (resultType == ResultType.LIST) {
       return executeList(commandContext, getParameterMap(), 0, Integer.MAX_VALUE);
+      
     } else if (resultType == ResultType.LIST_PAGE) {
       Map<String, Object> parameterMap = getParameterMap();
       parameterMap.put("resultType", "LIST_PAGE");
       parameterMap.put("firstResult", firstResult);
       parameterMap.put("maxResults", maxResults);
       if (StringUtils.isNotBlank(ObjectUtils.toString(parameterMap.get("orderBy")))) {
-        parameterMap.put("orderBy", "RES." + parameterMap.get("orderBy"));
+        parameterMap.put("orderByColumns", "RES." + parameterMap.get("orderBy"));
       } else {
-        parameterMap.put("orderBy", "RES.ID_ asc");
+        parameterMap.put("orderByColumns", "RES.ID_ asc");
       }
       
       int firstRow = firstResult + 1;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/AsyncExecutorTest.java
Patch:
@@ -332,11 +332,12 @@ static class CountingAsyncExecutor extends DefaultAsyncJobExecutor {
 		private AtomicInteger counter = new AtomicInteger(0);
 		
 		@Override
-		public void executeAsyncJob(JobEntity job) {
+		public boolean executeAsyncJob(JobEntity job) {
 			logger.info("About to execute job " + job.getId());
 			counter.incrementAndGet();
-		  super.executeAsyncJob(job);
+		  boolean success = super.executeAsyncJob(job);
 		  logger.info("Handed off job " + job.getId() + " to async executor (retries=" + job.getRetries() + ")");
+		  return success;
 		}
 
 		public AtomicInteger getCounter() {

File: modules/activiti-spring/src/main/java/org/activiti/spring/SpringAsyncExecutor.java
Patch:
@@ -77,12 +77,14 @@ public void setRejectedJobsHandler(SpringRejectedJobsHandler rejectedJobsHandler
   }
 
 	@Override
-  public void executeAsyncJob(JobEntity job) {
+  public boolean executeAsyncJob(JobEntity job) {
 	  try {
       taskExecutor.execute(new ExecuteAsyncRunnable(job, commandExecutor));
     } catch (RejectedExecutionException e) {
       rejectedJobsHandler.jobRejected(this, job);
+      return false;
     }
+	  return true;
   }
 
   @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractNativeQuery.java
Patch:
@@ -120,9 +120,9 @@ public Object execute(CommandContext commandContext) {
       parameterMap.put("firstResult", firstResult);
       parameterMap.put("maxResults", maxResults);
       if (StringUtils.isNotBlank(ObjectUtils.toString(parameterMap.get("orderBy")))) {
-        parameterMap.put("orderBy", "RES." + parameterMap.get("orderBy"));
+        parameterMap.put("orderByColumns", "RES." + parameterMap.get("orderBy"));
       } else {
-        parameterMap.put("orderBy", "RES.ID_ asc");
+        parameterMap.put("orderByColumns", "RES.ID_ asc");
       }
 
       int firstRow = firstResult + 1;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -158,7 +158,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitBetweenStatements.put("db2", ", row_number() over (ORDER BY ${orderByColumns}) rnk FROM ( select distinct RES.* ");
     databaseOuterJoinLimitBetweenStatements.put("db2", ", row_number() over (ORDER BY ${mssqlOrDB2OrderBy}) rnk FROM ( select distinct ");
     databaseSpecificOrderByStatements.put("db2", "");
-    databaseSpecificLimitBeforeNativeQueryStatements.put("db2", "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${orderByColumns}) rnk FROM (");
+    databaseSpecificLimitBeforeNativeQueryStatements.put("db2", "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${orderBy}) rnk FROM (");
     addDatabaseSpecificStatement("db2", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
     addDatabaseSpecificStatement("db2", "selectExecutionByNativeQuery", "selectExecutionByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement("db2", "selectHistoricActivityInstanceByNativeQuery", "selectHistoricActivityInstanceByNativeQuery_mssql_or_db2");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/ListQueryParameterObject.java
Patch:
@@ -74,7 +74,7 @@ public String getOrderBy() {
   }
   
   public String getOrderByColumns() {
-      return getOrderBy();
+    return getOrderBy();
   }
   
   public void setDatabaseType(String databaseType) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -113,7 +113,6 @@ public Object getPersistentState() {
   	persistentState.put("doubleValue", doubleValue);
   	persistentState.put("longValue", longValue);
   	persistentState.put("byteArrayRef", byteArrayRef.getId());
-  	
   	persistentState.put("createTime", createTime);
   	persistentState.put("lastUpdatedTime", lastUpdatedTime);
   	

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.LinkedList;
 import java.util.List;
 
 import org.activiti.bpmn.model.EndEvent;
@@ -23,7 +22,6 @@
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.bpmn.helper.ScopeUtil;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
@@ -67,7 +65,9 @@ public void execute(ActivityExecution execution) throws Exception {
     	terminateProcessInstanceExecution(execution, terminateEndEventActivity, processInstanceExecution);
     } else {
     	ActivityExecution scopeExecution = ScopeUtil.findScopeExecution(execution);
-    	terminateExecution(execution, terminateEndEventActivity, scopeExecution);
+    	if (scopeExecution != null) {
+    		terminateExecution(execution, terminateEndEventActivity, scopeExecution);
+    	} 
     }
     
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ScopeUtil.java
Patch:
@@ -34,6 +34,7 @@
 /**
  * @author Daniel Meyer
  * @author Nico Rehwaldt
+ * @author Joram Barrez
  */
 public class ScopeUtil {
  
@@ -47,11 +48,11 @@ public class ScopeUtil {
    */
   public static ActivityExecution findScopeExecution(ActivityExecution execution) {
     
-    while(!execution.isScope()) {
+    while(execution.getParentId() != null && !execution.isScope()) {
       execution = execution.getParent();
     }
     
-    if(execution.isConcurrent()) {
+    if(execution != null && execution.isConcurrent()) {
       execution = execution.getParent();
     }
     

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ActivitiFailedjobRetryParser.java
Patch:
@@ -19,7 +19,7 @@ public void parseChildElement(XMLStreamReader xtr,
 		 if (!(parentElement instanceof Activity)) 
             return;
 		 String cycle = xtr.getElementText();
-		 if (cycle == null | cycle.isEmpty())
+		 if (cycle == null || cycle.isEmpty())
 			 return;
 		 ((Activity) parentElement).setFailedJobRetryTimeCycleValue(cycle);
 	}

File: modules/activiti-cxf/src/test/java/org/activiti/engine/test/bpmn/sendtask/WebServiceSimplisticTest.java
Patch:
@@ -27,7 +27,7 @@ public class WebServiceSimplisticTest extends AbstractWebServiceTaskTest {
   protected boolean isValidating() {
     return false;
   }
-
+  
   @Deployment
   public void testAsyncInvocationWithSimplisticDataFlow() throws Exception {
     assertEquals(-1, webServiceMock.getCount());

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverterUtil.java
Patch:
@@ -17,14 +17,14 @@
 import java.util.List;
 
 import org.activiti.bpmn.model.ActivitiListener;
-import org.activiti.bpmn.model.Activity;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BooleanDataObject;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.DateDataObject;
 import org.activiti.bpmn.model.DoubleDataObject;
 import org.activiti.bpmn.model.EventListener;
 import org.activiti.bpmn.model.FieldExtension;
+import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ImplementationType;
 import org.activiti.bpmn.model.IntegerDataObject;
 import org.activiti.bpmn.model.ItemDefinition;
@@ -350,8 +350,8 @@ protected static void parseListeners(JsonNode listenersNode, BaseElement element
           } else {
             ((UserTask) element).getExecutionListeners().add(listener);
           }
-        } else if (element instanceof Activity) {
-          ((Activity) element).getExecutionListeners().add(listener);
+        }  else if (element instanceof FlowElement) {
+          ((FlowElement) element).getExecutionListeners().add(listener);
         }
       }
     }

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverterUtil.java
Patch:
@@ -17,14 +17,14 @@
 import java.util.List;
 
 import org.activiti.bpmn.model.ActivitiListener;
-import org.activiti.bpmn.model.Activity;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BooleanDataObject;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.DateDataObject;
 import org.activiti.bpmn.model.DoubleDataObject;
 import org.activiti.bpmn.model.EventListener;
 import org.activiti.bpmn.model.FieldExtension;
+import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ImplementationType;
 import org.activiti.bpmn.model.IntegerDataObject;
 import org.activiti.bpmn.model.ItemDefinition;
@@ -350,8 +350,8 @@ protected static void parseListeners(JsonNode listenersNode, BaseElement element
           } else {
             ((UserTask) element).getExecutionListeners().add(listener);
           }
-        } else if (element instanceof Activity) {
-          ((Activity) element).getExecutionListeners().add(listener);
+        }  else if (element instanceof FlowElement) {
+          ((FlowElement) element).getExecutionListeners().add(listener);
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/GroupQueryImpl.java
Patch:
@@ -142,9 +142,6 @@ public String getUserId() {
     return userId;
   }
 
-  public static long getSerialversionuid() {
-    return serialVersionUID;
-  }
 
   public String getProcDefId() {
     return procDefId;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BaseBpmnJsonConverter.java
Patch:
@@ -51,8 +51,8 @@
 import org.activiti.bpmn.model.UserTask;
 import org.activiti.editor.constants.EditorJsonConstants;
 import org.activiti.editor.constants.StencilConstants;
+import org.activiti.editor.language.json.converter.util.CollectionUtils;
 import org.activiti.editor.language.json.converter.util.JsonConverterUtil;
-import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -53,8 +53,8 @@
 import org.activiti.bpmn.model.ValuedDataObject;
 import org.activiti.editor.constants.EditorJsonConstants;
 import org.activiti.editor.constants.StencilConstants;
+import org.activiti.editor.language.json.converter.util.CollectionUtils;
 import org.activiti.editor.language.json.converter.util.JsonConverterUtil;
-import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverterUtil.java
Patch:
@@ -38,7 +38,7 @@
 import org.activiti.bpmn.model.ValuedDataObject;
 import org.activiti.editor.constants.EditorJsonConstants;
 import org.activiti.editor.constants.StencilConstants;
-import org.apache.commons.collections.CollectionUtils;
+import org.activiti.editor.language.json.converter.util.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormatter;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/UserTaskJsonConverter.java
Patch:
@@ -17,7 +17,7 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.UserTask;
-import org.apache.commons.collections.CollectionUtils;
+import org.activiti.editor.language.json.converter.util.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.databind.JsonNode;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -864,7 +864,7 @@ public void testSetProcessInstanceName() {
     runtimeService.setProcessInstanceName(processInstance.getId(), null);
     processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();
     assertNotNull(processInstance);
-    assertNull(processInstance.getName());
+    assertEquals("The One Task Process", processInstance.getName());
 
     // Set name for unexisting process instance, should fail
     try {
@@ -876,7 +876,7 @@ public void testSetProcessInstanceName() {
 
     processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();
     assertNotNull(processInstance);
-    assertNull(processInstance.getName());
+    assertEquals("The One Task Process", processInstance.getName());
 
     // Set name for suspended process instance, should fail
     runtimeService.suspendProcessInstanceById(processInstance.getId());
@@ -889,7 +889,7 @@ public void testSetProcessInstanceName() {
 
     processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();
     assertNotNull(processInstance);
-    assertNull(processInstance.getName());
+    assertEquals("The One Task Process", processInstance.getName());
   }
 
   private void startSignalCatchProcesses() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Objects;
 import java.util.Properties;
 import java.util.ServiceLoader;
 import java.util.Set;
@@ -948,7 +947,7 @@ protected void initSqlSessionFactory() {
           properties.put("limitBetween", DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
           properties.put("limitOuterJoinBetween", DbSqlSessionFactory.databaseOuterJoinLimitBetweenStatements.get(databaseType));
           properties.put("orderBy", DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
-          properties.put("limitBeforeNativeQuery", Objects.toString(DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType)));
+          properties.put("limitBeforeNativeQuery", String.valueOf(DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType)));
         }
 
         Configuration configuration = initMybatisConfiguration(environment, reader, properties);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -163,7 +163,7 @@ public void testTwoSubProcessInParallelWithinSubProcess() {
 	    assertEquals("myVar1", historicVariable1.getName());
 	    assertEquals("test789", historicVariable1.getTextValue());
 	    
-	    assertEquals(15, historyService.createHistoricActivityInstanceQuery().count());
+	    assertEquals(18, historyService.createHistoricActivityInstanceQuery().count());
 	    assertEquals(7, historyService.createHistoricDetailQuery().count());
   	}
   }

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/runtime/DeploymentServiceImpl.java
Patch:
@@ -333,7 +333,7 @@ protected String retrieveFinalFormKey(String formKey, FlowElement flowElement, M
             }
         }
         
-        if (StringUtils.isEmpty(formKey)) {
+        if (StringUtils.isEmpty(finalFormKey)) {
             finalFormKey = formKey;
         }
         

File: modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/runtime/DeploymentServiceImpl.java
Patch:
@@ -333,7 +333,7 @@ protected String retrieveFinalFormKey(String formKey, FlowElement flowElement, M
             }
         }
         
-        if (StringUtils.isEmpty(formKey)) {
+        if (StringUtils.isEmpty(finalFormKey)) {
             finalFormKey = formKey;
         }
         

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -49,7 +49,7 @@
 public interface ProcessEngine extends EngineServices {
 
   /** the version of the activiti library */
-  public static String VERSION = "5.18.0.1";
+  public static String VERSION = "5.20.0.0";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/QueryOperator.java
Patch:
@@ -29,4 +29,5 @@ public enum QueryOperator {
   LIKE,
   EQUALS_IGNORE_CASE,
   NOT_EQUALS_IGNORE_CASE,
+  LIKE_IGNORE_CASE,
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -113,6 +113,7 @@ public class DbSqlSession implements Session {
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.1"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.2"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.18.0.0"));
+	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.18.0.1"));
 	  
 	  /* Current */
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/engine/variable/QueryVariable.java
Patch:
@@ -66,6 +66,7 @@ public enum QueryVariableOperation {
     EQUALS_IGNORE_CASE("equalsIgnoreCase"),
     NOT_EQUALS_IGNORE_CASE("notEqualsIgnoreCase"),
     LIKE("like"),
+    LIKE_IGNORE_CASE("likeIgnoreCase"),
     GREATER_THAN("greaterThan"),
     GREATER_THAN_OR_EQUALS("greaterThanOrEquals"),
     LESS_THAN("lessThan"),

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -49,7 +49,7 @@
 public interface ProcessEngine extends EngineServices {
 
   /** the version of the activiti library */
-  public static String VERSION = "5.18.0.1";
+  public static String VERSION = "5.20.0.0";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -113,6 +113,7 @@ public class DbSqlSession implements Session {
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.1"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.2"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.18.0.0"));
+	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.18.0.1"));
 	  
 	  /* Current */
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/engine/variable/QueryVariable.java
Patch:
@@ -66,6 +66,7 @@ public enum QueryVariableOperation {
     EQUALS_IGNORE_CASE("equalsIgnoreCase"),
     NOT_EQUALS_IGNORE_CASE("notEqualsIgnoreCase"),
     LIKE("like"),
+    LIKE_IGNORE_CASE("likeIgnoreCase"),
     GREATER_THAN("greaterThan"),
     GREATER_THAN_OR_EQUALS("greaterThanOrEquals"),
     LESS_THAN("lessThan"),

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/DefaultActivityBehaviorFactory.java
Patch:
@@ -305,7 +305,7 @@ public ScriptTaskActivityBehavior createScriptTaskActivityBehavior(ScriptTask sc
     if (language == null) {
       language = ScriptingEngines.DEFAULT_SCRIPTING_LANGUAGE;
     }
-    return new ScriptTaskActivityBehavior(scriptTask.getScript(), language, scriptTask.getResultVariable(), scriptTask.isAutoStoreVariables());
+    return new ScriptTaskActivityBehavior(scriptTask.getId(), scriptTask.getScript(), language, scriptTask.getResultVariable(), scriptTask.isAutoStoreVariables());
   }
 
   // Gateways

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/Condition.java
Patch:
@@ -23,5 +23,5 @@
  */
 public interface Condition extends Serializable {
 
-  boolean evaluate(DelegateExecution execution);
+  boolean evaluate(String sequenceFlowId, DelegateExecution execution);
 }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/BpmnActivityBehavior.java
Patch:
@@ -125,7 +125,7 @@ protected void performOutgoingBehavior(ActivityExecution execution,
       if (!SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression)) {
         if (defaultSequenceFlow == null || !outgoingTransition.getId().equals(defaultSequenceFlow)) {
           Condition condition = (Condition) outgoingTransition.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
-          if (condition == null || !checkConditions || condition.evaluate(execution)) {
+          if (condition == null || !checkConditions || condition.evaluate(outgoingTransition.getId(), execution)) {
             transitionsToTake.add(outgoingTransition);
           }
         }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -67,7 +67,7 @@ protected void leave(ActivityExecution execution) {
       if (!SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression)) {
         Condition condition = (Condition) seqFlow.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
         if ( (condition == null && (defaultSequenceFlow == null || !defaultSequenceFlow.equals(seqFlow.getId())) ) 
-                || (condition != null && condition.evaluate(execution)) ) {
+                || (condition != null && condition.evaluate(seqFlow.getId(), execution)) ) {
           if (log.isDebugEnabled()) {
             log.debug("Sequence flow '{}'selected as outgoing sequence flow.", seqFlow.getId());
           }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -66,7 +66,7 @@ public void execute(DelegateExecution execution) {
         if (!SkipExpressionUtil.isSkipExpressionEnabled(activityExecution, skipExpression)) {
           if (defaultSequenceFlow == null || !outgoingTransition.getId().equals(defaultSequenceFlow)) {
             Condition condition = (Condition) outgoingTransition.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
-            if (condition == null || condition.evaluate(execution)) {
+            if (condition == null || condition.evaluate(outgoingTransition.getId(), execution)) {
               transitionsToTake.add(outgoingTransition);
             }
           }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/factory/DefaultActivityBehaviorFactory.java
Patch:
@@ -296,7 +296,7 @@ public ScriptTaskActivityBehavior createScriptTaskActivityBehavior(ScriptTask sc
     if (language == null) {
       language = ScriptingEngines.DEFAULT_SCRIPTING_LANGUAGE;
     }
-    return new ScriptTaskActivityBehavior(scriptTask.getScript(), language, scriptTask.getResultVariable(), scriptTask.isAutoStoreVariables());
+    return new ScriptTaskActivityBehavior(scriptTask.getId(), scriptTask.getScript(), language, scriptTask.getResultVariable(), scriptTask.isAutoStoreVariables());
   }
 
   // Gateways

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/handler/SequenceFlowParseHandler.java
Patch:
@@ -58,7 +58,7 @@ protected void executeParse(BpmnParse bpmnParse, SequenceFlow sequenceFlow) {
     transition.setDestination(destinationActivity);
 
     if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {
-      Condition expressionCondition = new UelExpressionCondition(bpmnParse.getExpressionManager().createExpression(sequenceFlow.getConditionExpression()));
+      Condition expressionCondition = new UelExpressionCondition(sequenceFlow.getConditionExpression());
       transition.setProperty(PROPERTYNAME_CONDITION_TEXT, sequenceFlow.getConditionExpression());
       transition.setProperty(PROPERTYNAME_CONDITION, expressionCondition);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/QueryOperator.java
Patch:
@@ -29,4 +29,5 @@ public enum QueryOperator {
   LIKE,
   EQUALS_IGNORE_CASE,
   NOT_EQUALS_IGNORE_CASE,
+  LIKE_IGNORE_CASE,
 }

File: modules/activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/CxfWSDLImporter.java
Patch:
@@ -242,7 +242,7 @@ private static void _importFields(final JDefinedClass theClass, final AtomicInte
 
       String fieldName = entry.getKey();
       if (fieldName.startsWith("_")) {
-        if (!reservedKeywords.contains(fieldName.substring(1)))
+        if (reservedKeywords.contains(fieldName.substring(1)))
           fieldName = fieldName.substring(1); //it was prefixed with '_' so we should use the original name.
       }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/UelExpressionCondition.java
Patch:
@@ -16,9 +16,9 @@
 import org.activiti.engine.DynamicBpmnConstants;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.Expression;
-import org.activiti.engine.impl.context.Context;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.impl.Condition;
+import org.activiti5.engine.impl.context.Context;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -234,6 +234,7 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_END_DATE = "endDate";
   public static final String ATTRIBUTE_TIMER_DURATION = "timeDuration";
   public static final String ELEMENT_EVENT_TERMINATEDEFINITION = "terminateEventDefinition";
+  public static final String ATTRIBUTE_TERMINATE_ALL = "terminateAll";
   public static final String ELEMENT_EVENT_CANCELDEFINITION = "cancelEventDefinition";
   public static final String ELEMENT_EVENT_COMPENSATEDEFINITION = "compensateEventDefinition";
   public static final String ATTRIBUTE_COMPENSATE_ACTIVITYREF = "activityRef";

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/constants/StencilConstants.java
Patch:
@@ -228,4 +228,6 @@ public interface StencilConstants {
   final String PROPERTY_SIGNAL_DEFINITION_ID = "id";
   final String PROPERTY_SIGNAL_DEFINITION_NAME = "name";
   final String PROPERTY_SIGNAL_DEFINITION_SCOPE = "scope";
+  
+  final String PROPERTY_TERMINATE_ALL = "terminateAll";
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JsonType.java
Patch:
@@ -56,7 +56,7 @@ public Object getValue(ValueFields valueFields) {
   }
 
   public void setValue(Object value, ValueFields valueFields) {
-    valueFields.setTextValue(((JsonNode) value).toString());
+    valueFields.setTextValue(value != null ? value.toString() : null);
   }
 
   public boolean isAbleToStore(Object value) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/variable/JsonType.java
Patch:
@@ -53,7 +53,7 @@ public Object getValue(ValueFields valueFields) {
   }
 
   public void setValue(Object value, ValueFields valueFields) {
-    valueFields.setTextValue(((JsonNode) value).toString());
+    valueFields.setTextValue(value != null ? value.toString() : null);
   }
 
   public boolean isAbleToStore(Object value) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JsonType.java
Patch:
@@ -56,7 +56,7 @@ public Object getValue(ValueFields valueFields) {
   }
 
   public void setValue(Object value, ValueFields valueFields) {
-    valueFields.setTextValue(((JsonNode) value).toString());
+    valueFields.setTextValue(value == null ? null : value.toString());
   }
 
   public boolean isAbleToStore(Object value) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -699,7 +699,7 @@ private void postProcessElements(FlowElementsContainer parentContainer,  Collect
                     ((FlowNode) sourceFlowElement).getOutgoingFlows().add(sequenceFlow);
                     JsonNode edgeNode = edgeMap.get(sequenceFlow.getId());
                     if (edgeNode != null) {
-                      boolean isDefault = JsonConverterUtil.getPropertyValueAsBoolean("defaultflow", edgeNode);
+                      boolean isDefault = JsonConverterUtil.getPropertyValueAsBoolean(PROPERTY_SEQUENCEFLOW_DEFAULT, edgeNode);
                       if (isDefault) {
                           if (sourceFlowElement instanceof Activity) {
                               ((Activity) sourceFlowElement).setDefaultFlow(sequenceFlow.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FlowNodeConverterTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.editor.language;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
@@ -34,6 +35,7 @@ private void validateModel(BpmnModel model) {
     assertTrue(sequenceFlows.get(1).getId().equals("sid-07A7E174-8857-4DE9-A7CD-A041706D79C3") || sequenceFlows.get(1).getId().equals("sid-C2068B1E-9A82-41C9-B876-C58E2736C186"));
     assertTrue(sequenceFlows.get(0).getSourceRef().equals("sid-B074A0DD-934A-4053-A537-20ADF0781023"));
     assertTrue(sequenceFlows.get(1).getSourceRef().equals("sid-B074A0DD-934A-4053-A537-20ADF0781023"));
+    assertEquals("sid-07A7E174-8857-4DE9-A7CD-A041706D79C3", gateway.getDefaultFlow());
   }
 
   protected String getResource() {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -332,7 +332,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
   }
   
   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
-  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass) && bulkInsertableMap.get(entityClass) == true;
+  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass) && bulkInsertableMap.get(persistentObjectClass) == true;
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -332,7 +332,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
   }
   
   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
-  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass);
+  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass) && bulkInsertableMap.get(persistentObjectClass) == true;
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -340,7 +340,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
   }
   
   public Boolean isBulkInsertable(Class<? extends Entity> entityClass) {
-  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(entityClass);
+  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(entityClass) && bulkInsertableMap.get(entityClass) == true;
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -332,7 +332,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
   }
   
   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
-  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass);
+  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass) && bulkInsertableMap.get(entityClass) == true;
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -332,7 +332,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
   }
   
   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
-  	return bulkInsertableMap != null && bulkInsertableMap.get(persistentObjectClass);
+  	return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass);
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/constants/StencilConstants.java
Patch:
@@ -216,6 +216,7 @@ public interface StencilConstants {
   final String PROPERTY_MULETASK_PAYLOAD_EXPRESSION = "muletaskpayloadexpression";
   final String PROPERTY_MULETASK_RESULT_VARIABLE = "muletaskresultvariable";
 
+  final String PROPERTY_SEQUENCEFLOW_DEFAULT = "defaultflow";
   final String PROPERTY_SEQUENCEFLOW_CONDITION = "conditionsequenceflow";
   final String PROPERTY_SEQUENCEFLOW_ORDER = "sequencefloworder";
   final String PROPERTY_COLLAPSED_SUBPROCESS_REFERENCE = "subprocessreference";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -261,8 +261,8 @@ protected void setMailServerProperties(Email email, String tenantId) {
 
         email.setSmtpPort(mailServerInfo.getMailServerPort());
 
-        email.setSSLOnConnect(processEngineConfiguration.getMailServerUseSSL());
-        email.setStartTLSEnabled(processEngineConfiguration.getMailServerUseTLS());
+        email.setSSLOnConnect(mailServerInfo.isMailServerUseSSL());
+        email.setStartTLSEnabled(mailServerInfo.isMailServerUseTLS());
 
         String user = mailServerInfo.getMailServerUsername();
         String password = mailServerInfo.getMailServerPassword();
@@ -407,4 +407,4 @@ protected void handleException(DelegateExecution execution, String msg, Exceptio
       }
     }
   }
-}
\ No newline at end of file
+}

File: modules/activiti-engine/src/test/java/org/activiti/standalone/calendar/DurationHelperTest.java
Patch:
@@ -14,7 +14,7 @@
 
 package org.activiti.standalone.calendar;
 
-import static groovy.util.GroovyTestCase.assertEquals;
+import static org.junit.Assert.*;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -117,7 +117,7 @@ public void daylightSavingFallObservedFirstHour() throws Exception {
     DurationHelper dh = new DurationHelper("R2/2013-11-03T00:45:00-04:00/PT1H", testingClock);
     Calendar expected = parseCalendarWithOffset("20131103-01:45:00 -04:00", TimeZone.getTimeZone("US/Eastern"));
 
-    assertEquals(expected, dh.getCalendarAfter());
+    assertTrue(expected.compareTo(dh.getCalendarAfter()) == 0);
   }
 
   @Test
@@ -128,7 +128,7 @@ public void daylightSavingFallObservedSecondHour() throws Exception {
     DurationHelper dh = new DurationHelper("R2/2013-11-03T00:45:00-04:00/PT2H", testingClock);
     Calendar expected = parseCalendarWithOffset("20131103-01:45:00 -05:00", TimeZone.getTimeZone("US/Eastern"));
 
-    assertEquals(expected, dh.getCalendarAfter());
+    assertTrue(expected.compareTo(dh.getCalendarAfter()) == 0);
   }
 
   @Test

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1054,7 +1054,9 @@ protected void initEntityManagers() {
   // History manager ///////////////////////////////////////////////////////////
   
   protected void initHistoryManager() {
-    historyManager = new DefaultHistoryManager(this, historyLevel);
+    if(historyManager == null) {
+      historyManager = new DefaultHistoryManager(this, historyLevel);
+    }
   }
 
   // session factories ////////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1054,7 +1054,9 @@ protected void initEntityManagers() {
   // History manager ///////////////////////////////////////////////////////////
   
   protected void initHistoryManager() {
-    historyManager = new DefaultHistoryManager(this, historyLevel);
+    if(historyManager == null) {
+      historyManager = new DefaultHistoryManager(this, historyLevel);
+    }
   }
 
   // session factories ////////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -261,8 +261,8 @@ protected void setMailServerProperties(Email email, String tenantId) {
 
         email.setSmtpPort(mailServerInfo.getMailServerPort());
 
-        email.setSSLOnConnect(processEngineConfiguration.getMailServerUseSSL());
-        email.setStartTLSEnabled(processEngineConfiguration.getMailServerUseTLS());
+        email.setSSLOnConnect(mailServerInfo.isMailServerUseSSL());
+        email.setStartTLSEnabled(mailServerInfo.isMailServerUseTLS());
 
         String user = mailServerInfo.getMailServerUsername();
         String password = mailServerInfo.getMailServerPassword();
@@ -407,4 +407,4 @@ protected void handleException(DelegateExecution execution, String msg, Exceptio
       }
     }
   }
-}
\ No newline at end of file
+}

File: modules/activiti-spring/src/main/java/org/activiti/spring/SpringConfigurationHelper.java
Patch:
@@ -31,7 +31,7 @@ class SpringConfigurationHelper {
 
   private static Logger log = LoggerFactory.getLogger(SpringConfigurationHelper.class);
 
-  private static ProcessEngine buildProcessEngine(URL resource) {
+  public static ProcessEngine buildProcessEngine(URL resource) {
     log.debug("==== BUILDING SPRING APPLICATION CONTEXT AND PROCESS ENGINE =========================================");
 
     ApplicationContext applicationContext = new GenericXmlApplicationContext(new UrlResource(resource));

File: modules/activiti-spring/src/main/java/org/activiti/spring/SpringConfigurationHelper.java
Patch:
@@ -32,7 +32,7 @@ class SpringConfigurationHelper {
 
     private static Logger log = LoggerFactory.getLogger(SpringConfigurationHelper.class);
 
-    private static ProcessEngine buildProcessEngine(URL resource) {
+    public static ProcessEngine buildProcessEngine(URL resource) {
         log.debug("==== BUILDING SPRING APPLICATION CONTEXT AND PROCESS ENGINE =========================================");
 
         ApplicationContext applicationContext = new GenericXmlApplicationContext(new UrlResource(resource));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessEngineImpl.java
Patch:
@@ -74,7 +74,7 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
     this.sessionFactories = processEngineConfiguration.getSessionFactories();
     this.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();
 
-    if (processEngineConfiguration.isUsingRelationalDatabase()) {
+    if (processEngineConfiguration.isUsingRelationalDatabase() && processEngineConfiguration.getDatabaseSchemaUpdate() != null) {
       commandExecutor.execute(processEngineConfiguration.getSchemaCommandConfig(), new SchemaOperationsProcessEngineBuild());
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/Entity.java
Patch:
@@ -14,6 +14,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public interface Entity {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.List;
 
 import org.activiti.engine.delegate.DelegateExecution;
-import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.db.Entity;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.runtime.Execution;
@@ -31,7 +30,7 @@
  * @author Joram Barrez
  */
 
-public interface ExecutionEntity extends VariableScope, DelegateExecution, Execution, ProcessInstance, Entity, HasRevision {
+public interface ExecutionEntity extends DelegateExecution, Execution, ProcessInstance, Entity, HasRevision {
   
   void setBusinessKey(String businessKey);
 

File: modules/activiti5-compatibility/src/main/java/org/activiti/compatibility/DefaultActiviti5CompatibilityHandler.java
Patch:
@@ -854,6 +854,7 @@ public void setProcessEngineFactory(DefaultProcessEngineFactory processEngineFac
   protected org.activiti5.engine.impl.persistence.entity.TaskEntity convertToActiviti5TaskEntity(TaskEntity task) {
     org.activiti5.engine.impl.persistence.entity.TaskEntity activiti5Task = new org.activiti5.engine.impl.persistence.entity.TaskEntity();
     activiti5Task.setAssigneeWithoutCascade(task.getAssignee());
+    activiti5Task.setInitialAssignee( ((TaskEntityImpl) task).getOriginalAssignee());
     activiti5Task.setCategoryWithoutCascade(task.getCategory());
     activiti5Task.setCreateTime(task.getCreateTime());
     activiti5Task.setDelegationStateString(((TaskEntityImpl)task).getDelegationStateString());

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/tasklistener/TaskAssignmentListener.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.activiti.engine.delegate.DelegateTask;
 import org.activiti.engine.delegate.TaskListener;
+import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -21,7 +21,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.interceptor.SessionFactory;
-import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
+import org.activiti.engine.impl.persistence.entity.EventLogEntryEntityImpl;
 import org.apache.ibatis.session.SqlSessionFactory;
 
 /**
@@ -335,7 +335,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
 
   	// Only Oracle is making a fuss in one specific case right now
 		if ("oracle".equals(databaseType)) {
-			bulkInsertableMap.put(EventLogEntryEntity.class, Boolean.FALSE);
+			bulkInsertableMap.put(EventLogEntryEntityImpl.class, Boolean.FALSE);
 		}
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/Entity.java
Patch:
@@ -22,7 +22,8 @@ public interface Entity {
   void setId(String id);
 
   /**
-   * Returns a representation of the object, as would be stored in the database. Used when deciding if updates have occurred to the object or not since it was last loaded.
+   * Returns a representation of the object, as would be stored in the database. 
+   * Used when deciding if updates have occurred to the object or not since it was last loaded.
    */
   Object getPersistentState();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JsonType.java
Patch:
@@ -53,7 +53,7 @@ public Object getValue(ValueFields valueFields) {
   }
 
   public void setValue(Object value, ValueFields valueFields) {
-    valueFields.setTextValue(((JsonNode) value).toString());
+    valueFields.setTextValue(value == null ? null : value.toString());
   }
 
   public boolean isAbleToStore(Object value) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/BaseChildElementParser.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -48,5 +48,5 @@ protected void parseChildElements(XMLStreamReader xtr, BaseElement parentElement
 
   public boolean accepts(BaseElement element) {
     return element != null;
-  };
+  }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ExecuteInactiveBehaviorsOperation.java
Patch:
@@ -57,8 +57,6 @@ public void run() {
             InactiveActivityBehavior inactiveActivityBehavior = ((InactiveActivityBehavior) flowNode.getBehavior());
             logger.debug("Found InactiveActivityBehavior instance of class {} that can be executed on activity '{}'", inactiveActivityBehavior.getClass(), flowNode.getId());
             inactiveActivityBehavior.executeInactive(inactiveExecution);
-            ;
-
           }
         }
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntityManagerImpl.java
Patch:
@@ -140,7 +140,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
         ProcessDefinitionEntity previousProcessDefinition = null;
         while (previousProcessDefinition == null && previousVersion > 0) {
           
-          ProcessDefinitionQueryImpl previousProcessDefinitionQuery = new ProcessDefinitionQueryImpl(getCommandContext())
+          ProcessDefinitionQueryImpl previousProcessDefinitionQuery = new ProcessDefinitionQueryImpl()
             .processDefinitionVersion(previousVersion)
             .processDefinitionKey(processDefinition.getKey());
         

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/HistoricActivityInstanceDataManager.java
Patch:
@@ -24,6 +24,8 @@
  * @author Joram Barrez
  */
 public interface HistoricActivityInstanceDataManager extends DataManager<HistoricActivityInstanceEntity> {
+  
+  List<HistoricActivityInstanceEntity> findUnfinishedHistoricActivityInstancesByExecutionAndActivityId(String executionId, String activityId);
 
   void deleteHistoricActivityInstancesByProcessInstanceId(String historicProcessInstanceId);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/data/ProcessDefinitionDataManager.java
Patch:
@@ -39,6 +39,8 @@ public interface ProcessDefinitionDataManager extends DataManager<ProcessDefinit
 
   ProcessDefinitionEntity findProcessDefinitionByDeploymentAndKeyAndTenantId(String deploymentId, String processDefinitionKey, String tenantId);
 
+  ProcessDefinitionEntity findProcessDefinitionByKeyAndVersion(String processDefinitionKey, Integer processDefinitionVersion);
+  
   ProcessDefinitionEntity findProcessDefinitionByKeyAndVersionAndTenantId(String processDefinitionKey, Integer processDefinitionVersion, String tenantId);
 
   List<ProcessDefinition> findProcessDefinitionsByNativeQuery(Map<String, Object> parameterMap, int firstResult, int maxResults);

File: modules/activiti-camel/src/main/java/org/activiti/camel/CamelBehavior.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.camel.CamelContext;
 import org.apache.camel.Endpoint;
 import org.apache.camel.Exchange;
-import org.apache.camel.impl.DefaultExchange;
 import org.apache.commons.lang3.StringUtils;
 
 /**
@@ -148,7 +147,7 @@ protected ActivitiEndpoint getEndpoint(String key) {
   }
 
   protected Exchange createExchange(DelegateExecution activityExecution, ActivitiEndpoint endpoint) {
-    Exchange ex = new DefaultExchange(camelContextObj);
+    Exchange ex = endpoint.createExchange();
     ex.setProperty(ActivitiProducer.PROCESS_ID_PROPERTY, activityExecution.getProcessInstanceId());
     ex.setProperty(ActivitiProducer.EXECUTION_ID_PROPERTY, activityExecution.getId());
     Map<String, Object> variables = activityExecution.getVariables();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/Activiti5Util.java
Patch:
@@ -30,7 +30,7 @@ public static boolean isActiviti5ProcessDefinitionId(CommandContext commandConte
       return false;
     }
     
-    ProcessDefinitionEntity processDefinitionEntity = ProcessDefinitionUtil.getProcessDefinitionEntity(processDefinitionId, false);
+    ProcessDefinitionEntity processDefinitionEntity = ProcessDefinitionUtil.getProcessDefinitionEntity(processDefinitionId);
     if (processDefinitionEntity == null) {
       return false;
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/form/FormServiceTest.java
Patch:
@@ -95,7 +95,7 @@ public void testGetTaskFormNullTaskId() {
     try {
       formService.getRenderedTaskForm(null);
       fail("ActivitiException expected");
-    } catch (ActivitiObjectNotFoundException e) {
+    } catch (ActivitiIllegalArgumentException e) {
       // Expected Exception
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ServiceTaskDelegateExpressionActivityBehavior.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.List;
 
+import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
@@ -104,7 +105,7 @@ public void execute(DelegateExecution execution) {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw new RuntimeException(exc);
+        throw new ActivitiException(exc.getMessage(), exc);
       }
 
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ServiceTaskExpressionActivityBehavior.java
Patch:
@@ -70,7 +70,7 @@ public void execute(DelegateExecution execution) {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw new ActivitiException("Could not execute service task expression",exc);
+        throw new ActivitiException("Could not execute service task expression", exc);
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -115,6 +115,7 @@ public class DbSqlSession implements Session {
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.0"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.1"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.2"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("5.18.0.0"));
 
     // This is the latest version of the 5 branch. It's a 'virtual' version cause it doesn't exist, but it is
     // there to make sure all previous version can upgrade to the 6 version correctly.

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/CreateUserAndMembershipTestDelegate.java
Patch:
@@ -17,6 +17,7 @@
 import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.identity.Group;
 import org.activiti.engine.identity.User;
+import org.activiti.engine.impl.context.Context;
 
 /**
  * @author Joram Barrez
@@ -26,7 +27,7 @@ public class CreateUserAndMembershipTestDelegate implements JavaDelegate {
   @Override
   public void execute(DelegateExecution execution) {
 
-    IdentityService identityService = execution.getEngineServices().getIdentityService();
+    IdentityService identityService = Context.getProcessEngineConfiguration().getIdentityService();
 
     String username = "Kermit";
     User user = identityService.newUser(username);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/StartProcessInstanceTestDelegate.java
Patch:
@@ -15,14 +15,15 @@
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti.engine.impl.context.Context;
 
 /**
  * @author Joram Barrez
  */
 public class StartProcessInstanceTestDelegate implements JavaDelegate {
 
   public void execute(DelegateExecution execution) {
-    RuntimeService runtimeService = execution.getEngineServices().getRuntimeService();
+    RuntimeService runtimeService = Context.getProcessEngineConfiguration().getRuntimeService();
     runtimeService.startProcessInstanceByKey("oneTaskProcess");
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/GetVariableLocalTask.java
Patch:
@@ -3,11 +3,12 @@
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti.engine.impl.context.Context;
 
 public class GetVariableLocalTask implements JavaDelegate {
   @Override
   public void execute(DelegateExecution execution) {
-    RuntimeService runtimeService = execution.getEngineServices().getRuntimeService();
+    RuntimeService runtimeService = Context.getProcessEngineConfiguration().getRuntimeService();
     runtimeService.getVariableLocal(execution.getProcessInstanceId(), "Variable-That-Does-Not-Exist");
   }
 }
\ No newline at end of file

File: modules/activiti-spring/src/main/java/org/activiti/spring/impl/test/SpringActivitiTestCase.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.activiti.spring.impl.test;
 
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.impl.test.AbstractActivitiTestCase;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -22,9 +25,6 @@
 import org.springframework.test.context.TestExecutionListeners;
 import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
 
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
 /**
  * @author Joram Barrez
  * @author Josh Long

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/servicetask/StartProcessInstanceTestDelegate.java
Patch:
@@ -15,14 +15,15 @@
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti.engine.impl.context.Context;
 
 /**
  * @author Joram Barrez
  */
 public class StartProcessInstanceTestDelegate implements JavaDelegate {
 
   public void execute(DelegateExecution execution) {
-    RuntimeService runtimeService = execution.getEngineServices().getRuntimeService();
+    RuntimeService runtimeService = Context.getProcessEngineConfiguration().getRuntimeService();
     runtimeService.startProcessInstanceByKey("oneTaskProcess");
   }
 

File: modules/activiti5-compatibility-test/src/test/java/org/activiti/compatibility/test/delegate/SetVariableJavaDelegate.java
Patch:
@@ -14,16 +14,16 @@
 
 import java.util.Random;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.JavaDelegate;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.JavaDelegate;
 
 /**
  * @author Joram Barrez
  */
 public class SetVariableJavaDelegate implements JavaDelegate {
   
   @Override
-  public void execute(DelegateExecution execution) throws Exception {
+  public void execute(DelegateExecution execution) {
     execution.setVariable("testVarFromActiviti6", new Random().nextInt(100));
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/HistoryService.java
Patch:
@@ -16,6 +16,7 @@
 
 import java.util.List;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.history.HistoricActivityInstance;
 import org.activiti5.engine.history.HistoricActivityInstanceQuery;
 import org.activiti5.engine.history.HistoricDetail;
@@ -34,7 +35,6 @@
 import org.activiti5.engine.history.NativeHistoricVariableInstanceQuery;
 import org.activiti5.engine.history.ProcessInstanceHistoryLog;
 import org.activiti5.engine.history.ProcessInstanceHistoryLogQuery;
-import org.activiti5.engine.task.IdentityLink;
 
 /** 
  * Service exposing information about ongoing and past process instances.  This is different

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/IdentityService.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti5.engine;
 
+import java.util.List;
+
 import org.activiti5.engine.identity.Group;
 import org.activiti5.engine.identity.GroupQuery;
 import org.activiti5.engine.identity.NativeGroupQuery;
@@ -20,8 +22,6 @@
 import org.activiti5.engine.identity.User;
 import org.activiti5.engine.identity.UserQuery;
 
-import java.util.List;
-
 
 /**
  * Service to manage {@link User}s and {@link Group}s.

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/RuntimeService.java
Patch:
@@ -16,7 +16,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventDispatcher;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;
@@ -29,7 +30,6 @@
 import org.activiti5.engine.runtime.ProcessInstanceBuilder;
 import org.activiti5.engine.runtime.ProcessInstanceQuery;
 import org.activiti5.engine.task.Event;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.IdentityLinkType;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/TaskService.java
Patch:
@@ -18,11 +18,12 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.task.DelegationState;
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.query.NativeQuery;
 import org.activiti5.engine.task.Attachment;
 import org.activiti5.engine.task.Comment;
 import org.activiti5.engine.task.Event;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.IdentityLinkType;
 import org.activiti5.engine.task.NativeTaskQuery;
 import org.activiti5.engine.task.Task;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/delegate/BpmnError.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti5.engine.delegate;
 
+import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
 import org.activiti5.engine.impl.bpmn.parser.Error;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/delegate/JavaDelegateHelper.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti5.engine.delegate;
 
+import org.activiti.engine.delegate.JavaDelegate;
+
 /**
  * Class that provides helper operations for use in the {@link JavaDelegate} class.
  * 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/delegate/event/impl/ActivitiEventBuilder.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.Map;
 
-import org.activiti5.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.event.ActivitiActivityCancelledEvent;
 import org.activiti5.engine.delegate.event.ActivitiActivityEvent;
 import org.activiti5.engine.delegate.event.ActivitiCancelledEvent;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/history/HistoricIdentityLink.java
Patch:
@@ -13,9 +13,9 @@
 
 package org.activiti5.engine.history;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.identity.GroupQuery;
 import org.activiti5.engine.identity.UserQuery;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.IdentityLinkType;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/Condition.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti5.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.DelegateExecution;
 
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/IdentityServiceImpl.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti5.engine.impl;
 
+import java.util.List;
+
 import org.activiti5.engine.IdentityService;
 import org.activiti5.engine.identity.Group;
 import org.activiti5.engine.identity.GroupQuery;
@@ -38,11 +40,8 @@
 import org.activiti5.engine.impl.cmd.SetUserInfoCmd;
 import org.activiti5.engine.impl.cmd.SetUserPictureCmd;
 import org.activiti5.engine.impl.identity.Authentication;
-import org.activiti5.engine.impl.persistence.entity.GroupEntity;
 import org.activiti5.engine.impl.persistence.entity.IdentityInfoEntity;
 
-import java.util.List;
-
 
 /**
  * @author Tom Baeyens

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/NativeDeploymentQueryImpl.java
Patch:
@@ -1,13 +1,13 @@
 package org.activiti5.engine.impl;
 
+import java.util.List;
+import java.util.Map;
+
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.interceptor.CommandExecutor;
 import org.activiti5.engine.repository.Deployment;
 import org.activiti5.engine.repository.NativeDeploymentQuery;
 
-import java.util.List;
-import java.util.Map;
-
 public class NativeDeploymentQueryImpl extends AbstractNativeQuery<NativeDeploymentQuery, Deployment> implements NativeDeploymentQuery {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/NativeGroupQueryImpl.java
Patch:
@@ -1,13 +1,13 @@
 package org.activiti5.engine.impl;
 
+import java.util.List;
+import java.util.Map;
+
 import org.activiti5.engine.identity.Group;
 import org.activiti5.engine.identity.NativeGroupQuery;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.interceptor.CommandExecutor;
 
-import java.util.List;
-import java.util.Map;
-
 public class NativeGroupQueryImpl extends AbstractNativeQuery<NativeGroupQuery, Group> implements NativeGroupQuery {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/NativeModelQueryImpl.java
Patch:
@@ -1,13 +1,13 @@
 package org.activiti5.engine.impl;
 
+import java.util.List;
+import java.util.Map;
+
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.interceptor.CommandExecutor;
 import org.activiti5.engine.repository.Model;
 import org.activiti5.engine.repository.NativeModelQuery;
 
-import java.util.List;
-import java.util.Map;
-
 public class NativeModelQueryImpl extends AbstractNativeQuery<NativeModelQuery, Model> implements NativeModelQuery {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/NativeProcessDefinitionQueryImpl.java
Patch:
@@ -1,13 +1,13 @@
 package org.activiti5.engine.impl;
 
+import java.util.List;
+import java.util.Map;
+
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.interceptor.CommandExecutor;
 import org.activiti5.engine.repository.NativeProcessDefinitionQuery;
 import org.activiti5.engine.repository.ProcessDefinition;
 
-import java.util.List;
-import java.util.Map;
-
 public class NativeProcessDefinitionQueryImpl extends AbstractNativeQuery<NativeProcessDefinitionQuery, ProcessDefinition> implements NativeProcessDefinitionQuery {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/NativeUserQueryImpl.java
Patch:
@@ -1,13 +1,13 @@
 package org.activiti5.engine.impl;
 
+import java.util.List;
+import java.util.Map;
+
 import org.activiti5.engine.identity.NativeUserQuery;
 import org.activiti5.engine.identity.User;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.interceptor.CommandExecutor;
 
-import java.util.List;
-import java.util.Map;
-
 public class NativeUserQueryImpl extends AbstractNativeQuery<NativeUserQuery, User> implements NativeUserQuery {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.engine.task.IdentityLink;
 import org.activiti.validation.ValidationError;
 import org.activiti5.engine.RepositoryService;
 import org.activiti5.engine.impl.cmd.ActivateProcessDefinitionCmd;
@@ -60,7 +61,6 @@
 import org.activiti5.engine.repository.NativeProcessDefinitionQuery;
 import org.activiti5.engine.repository.ProcessDefinition;
 import org.activiti5.engine.repository.ProcessDefinitionQuery;
-import org.activiti5.engine.task.IdentityLink;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
 import org.activiti5.engine.RuntimeService;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
@@ -56,7 +57,6 @@
 import org.activiti5.engine.runtime.ProcessInstanceBuilder;
 import org.activiti5.engine.runtime.ProcessInstanceQuery;
 import org.activiti5.engine.task.Event;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.IdentityLinkType;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/TaskQueryImpl.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Date;
 import java.util.List;
 
+import org.activiti.engine.task.DelegationState;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
 import org.activiti5.engine.identity.Group;
@@ -24,7 +25,6 @@
 import org.activiti5.engine.impl.interceptor.CommandExecutor;
 import org.activiti5.engine.impl.persistence.entity.SuspensionState;
 import org.activiti5.engine.impl.variable.VariableTypes;
-import org.activiti5.engine.task.DelegationState;
 import org.activiti5.engine.task.Task;
 import org.activiti5.engine.task.TaskQuery;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/TaskServiceImpl.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
 import org.activiti5.engine.TaskService;
 import org.activiti5.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -60,7 +61,6 @@
 import org.activiti5.engine.task.Attachment;
 import org.activiti5.engine.task.Comment;
 import org.activiti5.engine.task.Event;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.IdentityLinkType;
 import org.activiti5.engine.task.NativeTaskQuery;
 import org.activiti5.engine.task.Task;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -40,7 +40,7 @@ public BoundaryEventActivityBehavior(boolean interrupting, String activityId) {
   }
   
   @SuppressWarnings("unchecked")
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     ExecutionEntity executionEntity = (ExecutionEntity) execution;
     ActivityImpl boundaryActivity = executionEntity.getProcessDefinition().findActivity(activityId);
     ActivityImpl interruptedActivity = executionEntity.getActivity();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/BpmnActivityBehavior.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.Condition;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/BusinessRuleTaskActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Iterator;
 import java.util.Set;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti5.engine.impl.rules.RulesAgendaFilter;
@@ -41,7 +41,7 @@ public class BusinessRuleTaskActivityBehavior extends TaskActivityBehavior {
 
   public BusinessRuleTaskActivityBehavior() {}
   
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     PvmProcessDefinition processDefinition = execution.getActivity().getProcessDefinition();
     String deploymentId = processDefinition.getDeploymentId();
     

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/CancelBoundaryEventActivityBehavior.java
Patch:
@@ -27,7 +27,7 @@
 public class CancelBoundaryEventActivityBehavior  extends FlowNodeActivityBehavior {
     
   @Override
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
            
       List<CompensateEventSubscriptionEntity> eventSubscriptions = ((ExecutionEntity)execution).getCompensateEventSubscriptions();
       

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -28,7 +28,7 @@
 public class CancelEndEventActivityBehavior extends FlowNodeActivityBehavior {
   
   @Override
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     
     // find cancel boundary event:
     ActivityImpl cancelBoundaryEvent = ScopeUtil

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -28,7 +28,7 @@ public ErrorEndEventActivityBehavior(String errorCode) {
     this.errorCode = errorCode;
   }
   
-  public void execute(ActivityExecution execution) throws Exception {    
+  public void execute(ActivityExecution execution) {    
     ErrorPropagation.propagateError(errorCode, execution);    
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/EventBasedGatewayActivityBehavior.java
Patch:
@@ -22,7 +22,7 @@
 public class EventBasedGatewayActivityBehavior extends FlowNodeActivityBehavior {
   
   @Override
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     // the event based gateway doesn't really do anything
     // ignoring outgoing sequence flows (they're only parsed for the diagram)
   }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/EventSubProcessStartEventActivityBehavior.java
Patch:
@@ -39,7 +39,7 @@ public EventSubProcessStartEventActivityBehavior(String activityId) {
   }
   
   @Override
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
 
     InterpretableExecution interpretableExecution = (InterpretableExecution) execution;
     ActivityImpl activity = interpretableExecution.getProcessDefinition().findActivity(activityId);

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -14,8 +14,8 @@
 
 import java.util.Iterator;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.impl.Condition;
 import org.activiti5.engine.impl.bpmn.helper.SkipExpressionUtil;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/FlowNodeActivityBehavior.java
Patch:
@@ -32,7 +32,7 @@ public abstract class FlowNodeActivityBehavior implements SignallableActivityBeh
   /**
    * Default behaviour: just leave the activity with no extra functionality.
    */
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     leave(execution);
   }
   

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.impl.Condition;
 import org.activiti5.engine.impl.bpmn.helper.SkipExpressionUtil;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;
@@ -43,7 +43,7 @@ public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior {
   
   private static Logger log = LoggerFactory.getLogger(InclusiveGatewayActivityBehavior.class.getName());
 
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     
     execution.inactivate();
     lockConcurrentRoot(execution);

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/IntermediateCatchEventActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
 public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivityBehavior {
 
 
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     // Do nothing: waitstate behavior
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/IntermediateThrowCompensationEventActivityBehavior.java
Patch:
@@ -35,7 +35,7 @@ public IntermediateThrowCompensationEventActivityBehavior(CompensateEventDefinit
   }
   
   @Override
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     final String activityRef = compensateEventDefinition.getActivityRef();
             
     ExecutionEntity scopeExecution = ScopeUtil.findScopeExecutionForScope((ExecutionEntity)execution, (ActivityImpl)execution.getActivity());

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/IntermediateThrowSignalEventActivityBehavior.java
Patch:
@@ -39,7 +39,7 @@ public IntermediateThrowSignalEventActivityBehavior(ThrowEvent throwEvent, Signa
     this.signalDefinition = signalDefinition;
   }
   
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     
     CommandContext commandContext = Context.getCommandContext();
     

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/NoneEndEventActivityBehavior.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class NoneEndEventActivityBehavior extends FlowNodeActivityBehavior {
   
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     execution.end();
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -57,7 +57,7 @@ public class ParallelGatewayActivityBehavior extends GatewayActivityBehavior {
   
   private static Logger log = LoggerFactory.getLogger(ParallelGatewayActivityBehavior.class);
 
-  public void execute(ActivityExecution execution) throws Exception { 
+  public void execute(ActivityExecution execution) { 
     
     // Join
     PvmActivity activity = execution.getActivity();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -35,7 +35,7 @@ public ParallelMultiInstanceBehavior(ActivityImpl activity, AbstractBpmnActivity
    * Handles the parallel case of spawning the instances.
    * Will create child executions accordingly for every instance needed.
    */
-   protected void createInstances(ActivityExecution execution) throws Exception {
+   protected void createInstances(ActivityExecution execution) {
     int nrOfInstances = resolveNrOfInstances(execution);
     if (nrOfInstances < 0) {
       throw new ActivitiIllegalArgumentException("Invalid number of instances: must be non-negative integer value" 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ReceiveTaskActivityBehavior.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ReceiveTaskActivityBehavior extends TaskActivityBehavior {
 
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     // Do nothing: waitstate behavior
   }
   

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -52,7 +52,7 @@ public ScriptTaskActivityBehavior(String script, String language, String resultV
     this.storeScriptVariables = storeScriptVariables;
   }
   
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     ScriptingEngines scriptingEngines = Context
       .getProcessEngineConfiguration()
       .getScriptingEngines();

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -34,7 +34,7 @@ public SequentialMultiInstanceBehavior(ActivityImpl activity, AbstractBpmnActivi
    * Handles the sequential case of spawning the instances.
    * Will only create one instance, since at most one instance can be active.
    */
-  protected void createInstances(ActivityExecution execution) throws Exception {
+  protected void createInstances(ActivityExecution execution) {
     int nrOfInstances = resolveNrOfInstances(execution);
     if (nrOfInstances < 0) {
       throw new ActivitiIllegalArgumentException("Invalid number of instances: must be a non-negative integer value" 
@@ -86,7 +86,7 @@ public void leave(ActivityExecution execution) {
   }
   
   @Override
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     super.execute(execution);
     
     if(innerActivityBehavior instanceof SubProcessActivityBehavior) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ShellActivityBehavior.java
Patch:
@@ -12,9 +12,9 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 
 public class ShellActivityBehavior extends AbstractBpmnActivityBehavior {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/SubProcessActivityBehavior.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class SubProcessActivityBehavior extends AbstractBpmnActivityBehavior implements CompositeActivityBehavior {
   
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     PvmActivity activity = execution.getActivity();
     ActivityImpl initialActivity = (ActivityImpl) activity.getProperty(BpmnParse.PROPERTYNAME_INITIAL);
     

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -35,7 +35,7 @@ public TerminateEndEventActivityBehavior(EndEvent endEvent) {
     this.endEvent = endEvent.clone();
   }
 
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     ActivityImpl terminateEndEventActivity = (ActivityImpl) execution.getActivity();
     ActivityExecution scopeExecution = ScopeUtil.findScopeExecution(execution);
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.TaskListener;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.bpmn.helper.SkipExpressionUtil;
@@ -54,7 +54,7 @@ public UserTaskActivityBehavior(TaskDefinition taskDefinition) {
     this.taskDefinition = taskDefinition;
   }
 
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     TaskEntity task = TaskEntity.createAndInsert(execution);
     task.setExecution(execution);
     task.setTaskDefinition(taskDefinition);

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/WebServiceActivityBehavior.java
Patch:
@@ -57,7 +57,7 @@ public void addDataOutputAssociation(AbstractDataAssociation dataAssociation) {
   /**
    * {@inheritDoc}
    */
-  public void execute(ActivityExecution execution) throws Exception {
+  public void execute(ActivityExecution execution) {
     MessageInstance message;
     
     if (ioSpecification != null) {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/data/AbstractDataAssociation.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/data/Assignment.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti5.engine.impl.bpmn.data;
 
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/data/SimpleDataInputAssociation.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/data/TransformationDataOutputAssociation.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti5.engine.impl.bpmn.data;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ProcessEngineConfiguration;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/helper/DelegateExpressionActivitiEventListener.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti5.engine.impl.bpmn.helper;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/helper/SkipExpressionUtil.java
Patch:
@@ -1,7 +1,7 @@
 package org.activiti5.engine.impl.bpmn.helper;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/listener/DelegateExpressionTaskListener.java
Patch:
@@ -14,11 +14,11 @@
 
 import java.util.List;
 
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.DelegateTask;
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.bpmn.helper.ClassDelegate;
 import org.activiti5.engine.impl.bpmn.parser.FieldDeclaration;
 import org.activiti5.engine.impl.context.Context;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/listener/ExpressionTaskListener.java
Patch:
@@ -13,9 +13,9 @@
 
 package org.activiti5.engine.impl.bpmn.listener;
 
-import org.activiti5.engine.delegate.DelegateTask;
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.TaskListener;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/listener/ScriptExecutionListener.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.bpmn.listener;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.el.Expression;
 import org.activiti5.engine.impl.scripting.ScriptingEngines;
@@ -30,7 +30,7 @@ public class ScriptExecutionListener implements ExecutionListener {
 	private Expression resultVariable = null;
 
 	@Override
-  public void notify(DelegateExecution execution) throws Exception {
+  public void notify(DelegateExecution execution) {
     
 		if (script == null) {
 			throw new IllegalArgumentException("The field 'script' should be set on the ExecutionListener");

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/listener/ScriptTaskListener.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.bpmn.listener;
 
-import org.activiti5.engine.delegate.DelegateTask;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.el.Expression;
 import org.activiti5.engine.impl.scripting.ScriptingEngines;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/factory/AbstractBehaviorFactory.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import org.activiti.bpmn.model.FieldExtension;
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.bpmn.parser.FieldDeclaration;
 import org.activiti5.engine.impl.el.ExpressionManager;
 import org.activiti5.engine.impl.el.FixedValue;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/factory/DefaultActivityBehaviorFactory.java
Patch:
@@ -41,8 +41,8 @@
 import org.activiti.bpmn.model.ThrowEvent;
 import org.activiti.bpmn.model.Transaction;
 import org.activiti.bpmn.model.UserTask;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti5.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
 import org.activiti5.engine.impl.bpmn.behavior.BusinessRuleTaskActivityBehavior;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/factory/DefaultListenerFactory.java
Patch:
@@ -18,9 +18,10 @@
 import org.activiti.bpmn.model.ActivitiListener;
 import org.activiti.bpmn.model.EventListener;
 import org.activiti.bpmn.model.ImplementationType;
+import org.activiti.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.TaskListener;
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.ExecutionListener;
-import org.activiti5.engine.delegate.TaskListener;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;
 import org.activiti5.engine.impl.bpmn.helper.BaseDelegateEventListener;
 import org.activiti5.engine.impl.bpmn.helper.ClassDelegate;
@@ -40,7 +41,6 @@
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Attachment;
 import org.activiti5.engine.task.Comment;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.Task;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/factory/ListenerFactory.java
Patch:
@@ -14,8 +14,8 @@
 
 import org.activiti.bpmn.model.ActivitiListener;
 import org.activiti.bpmn.model.EventListener;
-import org.activiti5.engine.delegate.ExecutionListener;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParser;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/handler/AbstractBpmnParseHandler.java
Patch:
@@ -35,7 +35,7 @@
 import org.activiti.bpmn.model.IntermediateCatchEvent;
 import org.activiti.bpmn.model.SequenceFlow;
 import org.activiti.bpmn.model.ValuedDataObject;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.bpmn.data.Data;
 import org.activiti5.engine.impl.bpmn.data.DataRef;
 import org.activiti5.engine.impl.bpmn.data.IOSpecification;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/handler/AbstractExternalInvocationBpmnParseHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.bpmn.model.DataAssociation;
 import org.activiti.bpmn.model.FlowNode;
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.bpmn.data.AbstractDataAssociation;
 import org.activiti5.engine.impl.bpmn.data.Assignment;
 import org.activiti5.engine.impl.bpmn.data.SimpleDataInputAssociation;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/handler/SequenceFlowParseHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.SequenceFlow;
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.Condition;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti5.engine.impl.el.ExpressionManager;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/parser/handler/UserTaskParseHandler.java
Patch:
@@ -20,8 +20,8 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.ImplementationType;
 import org.activiti.bpmn.model.UserTask;
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti5.engine.impl.el.ExpressionManager;
 import org.activiti5.engine.impl.form.DefaultTaskFormHandler;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/webservice/MessageImplicitDataOutputAssociation.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti5.engine.impl.bpmn.webservice;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.bpmn.behavior.WebServiceActivityBehavior;
 import org.activiti5.engine.impl.bpmn.data.AbstractDataAssociation;
 import org.activiti5.engine.impl.bpmn.data.FieldBaseStructureInstance;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/calendar/BusinessCalendarImpl.java
Patch:
@@ -1,11 +1,11 @@
 package org.activiti5.engine.impl.calendar;
 
+import java.util.Date;
+
 import org.activiti5.engine.runtime.ClockReader;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.ISODateTimeFormat;
 
-import java.util.Date;
-
 /**
  * This class implements business calendar based on internal clock
  */

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/calendar/CycleBusinessCalendar.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.activiti5.engine.impl.calendar;
 
+import java.util.Date;
+
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.runtime.ClockReader;
 
-import java.util.Date;
-
 public class CycleBusinessCalendar extends BusinessCalendarImpl {
 
   public static String NAME = "cycle";

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/AbstractSetProcessDefinitionStateCmd.java
Patch:
@@ -30,8 +30,8 @@
 import org.activiti5.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti5.engine.impl.persistence.entity.ProcessDefinitionEntityManager;
 import org.activiti5.engine.impl.persistence.entity.SuspensionState;
-import org.activiti5.engine.impl.persistence.entity.TimerEntity;
 import org.activiti5.engine.impl.persistence.entity.SuspensionState.SuspensionStateUtil;
+import org.activiti5.engine.impl.persistence.entity.TimerEntity;
 import org.activiti5.engine.repository.ProcessDefinition;
 import org.activiti5.engine.runtime.ProcessInstance;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/AbstractSetProcessInstanceStateCmd.java
Patch:
@@ -21,8 +21,8 @@
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti5.engine.impl.persistence.entity.SuspensionState;
-import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 import org.activiti5.engine.impl.persistence.entity.SuspensionState.SuspensionStateUtil;
+import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 import org.activiti5.engine.runtime.Execution;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/DeleteProcessInstanceCmd.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.activiti5.engine.impl.cmd;
 
+import java.io.Serializable;
+
 import org.activiti5.engine.ActivitiIllegalArgumentException;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.interceptor.Command;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 
-import java.io.Serializable;
-
 /**
  * @author Joram Barrez
  */

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/GetIdentityLinksForProcessDefinitionCmd.java
Patch:
@@ -15,12 +15,12 @@
 import java.io.Serializable;
 import java.util.List;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.ActivitiObjectNotFoundException;
 import org.activiti5.engine.impl.interceptor.Command;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti5.engine.repository.ProcessDefinition;
-import org.activiti5.engine.task.IdentityLink;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/GetIdentityLinksForProcessInstanceCmd.java
Patch:
@@ -15,11 +15,11 @@
 import java.io.Serializable;
 import java.util.List;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.ActivitiObjectNotFoundException;
 import org.activiti5.engine.impl.interceptor.Command;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
-import org.activiti5.engine.task.IdentityLink;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/GetIdentityLinksForTaskCmd.java
Patch:
@@ -15,11 +15,11 @@
 import java.io.Serializable;
 import java.util.List;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.impl.interceptor.Command;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.IdentityLinkEntity;
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
-import org.activiti5.engine.task.IdentityLink;
 import org.activiti5.engine.task.IdentityLinkType;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/SetTaskDueDateCmd.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.activiti5.engine.impl.cmd;
 
+import java.util.Date;
+
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 
-import java.util.Date;
-
 
 /**
  * @author Brian Showers

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/SignalCmd.java
Patch:
@@ -13,11 +13,11 @@
 
 package org.activiti5.engine.impl.cmd;
 
+import java.util.Map;
+
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 
-import java.util.Map;
-
 /**
  * @author Tom Baeyens
  */

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/ActivityBehaviorInvocation.java
Patch:
@@ -30,7 +30,7 @@ public ActivityBehaviorInvocation(ActivityBehavior behaviorInstance, ActivityExe
     this.execution = execution;
   }
 
-  protected void invoke() throws Exception {
+  protected void invoke() {
     behaviorInstance.execute(execution);
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/DefaultDelegateInterceptor.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class DefaultDelegateInterceptor implements DelegateInterceptor {
 
-  public void handleInvocation(DelegateInvocation invocation) throws Exception {
+  public void handleInvocation(DelegateInvocation invocation) {
     invocation.proceed();
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/DelegateInvocation.java
Patch:
@@ -33,11 +33,11 @@ public abstract class DelegateInvocation {
    * @throws Exception
    *           the exception thrown by the user code
    */
-  public void proceed() throws Exception {
+  public void proceed() {
     invoke();
   }
 
-  protected abstract void invoke() throws Exception;
+  protected abstract void invoke();
 
   /**
    * @return the result of the invocation (can be null if the invocation does

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/ExecutionListenerInvocation.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti5.engine.impl.delegate;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 
 /**
  * Class handling invocations of ExecutionListeners
@@ -30,7 +30,7 @@ public ExecutionListenerInvocation(ExecutionListener executionListenerInstance,
     this.execution = execution;
   }
 
-  protected void invoke() throws Exception {
+  protected void invoke() {
     executionListenerInstance.notify(execution);
   }
   

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/ExpressionGetInvocation.java
Patch:
@@ -29,7 +29,7 @@ public ExpressionGetInvocation(ValueExpression valueExpression, ELContext elCont
     this.elContext = elContext;
   }
   
-  protected void invoke() throws Exception {    
+  protected void invoke() {    
     invocationResult = valueExpression.getValue(elContext);
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/ExpressionSetInvocation.java
Patch:
@@ -33,7 +33,7 @@ public ExpressionSetInvocation(ValueExpression valueExpression, ELContext elCont
   }
 
   @Override
-  protected void invoke() throws Exception {
+  protected void invoke() {
     valueExpression.setValue(elContext, value);
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/JavaDelegateInvocation.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti5.engine.impl.delegate;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.JavaDelegate;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.JavaDelegate;
 
 /**
  * Class handling invocations of JavaDelegates
@@ -30,7 +30,7 @@ public JavaDelegateInvocation(JavaDelegate delegateInstance, DelegateExecution e
     this.execution = execution;
   }
 
-  protected void invoke() throws Exception {
+  protected void invoke() {
     delegateInstance.execute((DelegateExecution) execution);
   }
   

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/delegate/TaskListenerInvocation.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti5.engine.impl.delegate;
 
-import org.activiti5.engine.delegate.DelegateTask;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.TaskListener;
 
 /**
  * Class handling invocations of {@link TaskListener TaskListeners}
@@ -30,7 +30,7 @@ public TaskListenerInvocation(TaskListener executionListenerInstance, DelegateTa
     this.delegateTask = delegateTask;
   }
 
-  protected void invoke() throws Exception {
+  protected void invoke() {
     executionListenerInstance.notify(delegateTask);
   }
   

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/Expression.java
Patch:
@@ -13,13 +13,14 @@
 
 package org.activiti5.engine.impl.el;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
+
 
 
 /**
  * @author Frederik Heremans
  */
-public interface Expression extends org.activiti5.engine.delegate.Expression {
+public interface Expression extends org.activiti.engine.delegate.Expression {
 
    Object getValue(VariableScope variableScope);
    

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/ExpressionManager.java
Patch:
@@ -14,8 +14,8 @@
 
 import java.util.Map;
 
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.bpmn.data.ItemInstance;
 import org.activiti5.engine.impl.javax.el.ArrayELResolver;
 import org.activiti5.engine.impl.javax.el.BeanELResolver;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/FixedValue.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.el;
 
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.VariableScope;
 
 /**
  * Expression that always returns the same value when <code>getValue</code> is

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/JuelExpression.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.el;
 
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.delegate.ExpressionGetInvocation;
 import org.activiti5.engine.impl.delegate.ExpressionSetInvocation;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/NoExecutionVariableScope.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/UelExpressionCondition.java
Patch:
@@ -13,9 +13,9 @@
 
 package org.activiti5.engine.impl.el;
 
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.impl.Condition;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -15,7 +15,7 @@
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.identity.Authentication;
 import org.activiti5.engine.impl.javax.el.ELContext;
 import org.activiti5.engine.impl.javax.el.ELResolver;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/form/DefaultFormHandler.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.form.AbstractFormType;
 import org.activiti5.engine.form.FormProperty;
 import org.activiti5.engine.impl.context.Context;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/form/FormPropertyHandler.java
Patch:
@@ -16,8 +16,8 @@
 import java.io.Serializable;
 import java.util.Map;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.form.AbstractFormType;
 import org.activiti5.engine.form.FormProperty;
 import org.activiti5.engine.impl.el.NoExecutionVariableScope;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/form/TaskFormHandler.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti5.engine.impl.form;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.form.TaskFormData;
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/HistoryManager.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.Date;
 import java.util.Map;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.impl.db.DbSqlSession;
 import org.activiti5.engine.impl.interceptor.Session;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
@@ -11,7 +12,6 @@
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 import org.activiti5.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.activiti5.engine.impl.pvm.runtime.InterpretableExecution;
-import org.activiti5.engine.task.IdentityLink;
 
 public interface HistoryManager extends Session {
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/ActivityInstanceEndHandler.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/ActivityInstanceStartHandler.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/CallActivityStartHandler.java
Patch:
@@ -1,12 +1,12 @@
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 
 
 public class CallActivityStartHandler implements ExecutionListener {
 
-  public void notify(DelegateExecution execution) throws Exception {
+  public void notify(DelegateExecution execution) {
     
   }
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/ProcessInstanceEndHandler.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/StartEventEndHandler.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateExecution;
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 
@@ -24,7 +24,7 @@
  */
 public class StartEventEndHandler implements ExecutionListener {
 
-  public void notify(DelegateExecution execution) throws Exception {
+  public void notify(DelegateExecution execution) {
     String executionId = execution.getId();
     String activityId = ((ExecutionEntity)execution).getActivityId();
     

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/UserTaskAssignmentHandler.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateTask;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/handler/UserTaskIdHandler.java
Patch:
@@ -1,7 +1,7 @@
 package org.activiti5.engine.impl.history.handler;
 
-import org.activiti5.engine.delegate.DelegateTask;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/history/parse/UserTaskHistoryParseHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.UserTask;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti5.engine.impl.bpmn.parser.handler.AbstractBpmnParseHandler;
 import org.activiti5.engine.impl.bpmn.parser.handler.UserTaskParseHandler;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/interceptor/DelegateInterceptor.java
Patch:
@@ -33,6 +33,6 @@
  */
 public interface DelegateInterceptor {
 
-  public void handleInvocation(DelegateInvocation invocation) throws Exception;
+  public void handleInvocation(DelegateInvocation invocation);
 
 }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/jobexecutor/TimerCatchIntermediateEventJobHandler.java
Patch:
@@ -13,14 +13,12 @@
 package org.activiti5.engine.impl.jobexecutor;
 
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti5.engine.impl.persistence.entity.JobEntity;
 import org.activiti5.engine.impl.pvm.process.ActivityImpl;
-import org.activiti5.engine.impl.util.json.JSONObject;
 import org.activiti5.engine.logging.LogMDC;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -16,10 +16,10 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.calendar.BusinessCalendar;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.el.NoExecutionVariableScope;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/jobexecutor/TimerEventHandler.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.util.json.JSONException;
 import org.activiti5.engine.impl.util.json.JSONObject;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti5.engine.impl.jobexecutor;
 
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
@@ -22,7 +21,6 @@
 import org.activiti5.engine.impl.persistence.entity.JobEntity;
 import org.activiti5.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti5.engine.impl.pvm.process.ActivityImpl;
-import org.activiti5.engine.impl.util.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/jobexecutor/TimerStartEventJobHandler.java
Patch:
@@ -22,7 +22,6 @@
 import org.activiti5.engine.impl.persistence.deploy.DeploymentManager;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti5.engine.impl.persistence.entity.JobEntity;
-import org.activiti5.engine.impl.util.json.JSONObject;
 import org.activiti5.engine.repository.ProcessDefinition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/juel/Cache.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.WeakHashMap;
 import java.util.Map.Entry;
+import java.util.WeakHashMap;
 
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/HistoricScopeInstanceEntity.java
Patch:
@@ -14,12 +14,12 @@
 
 package org.activiti5.engine.impl.persistence.entity;
 
-import org.activiti5.engine.impl.context.Context;
-import org.activiti5.engine.impl.db.PersistentObject;
-
 import java.io.Serializable;
 import java.util.Date;
 
+import org.activiti5.engine.impl.context.Context;
+import org.activiti5.engine.impl.db.PersistentObject;
+
 /**
  * @author Christian Stettler
  */

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -16,13 +16,13 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.task.IdentityLink;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.db.BulkDeleteable;
 import org.activiti5.engine.impl.db.PersistentObject;
-import org.activiti5.engine.task.IdentityLink;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.ProcessEngineConfiguration;
-import org.activiti5.engine.delegate.Expression;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventSupport;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/TaskEntityManager.java
Patch:
@@ -18,9 +18,9 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.TaskListener;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.Page;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -16,9 +16,9 @@
 import java.util.Date;
 import java.util.List;
 
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.calendar.BusinessCalendar;
 import org.activiti5.engine.impl.calendar.CycleBusinessCalendar;
 import org.activiti5.engine.impl.context.Context;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.context.Context;
 import org.activiti5.engine.impl.interceptor.CommandContext;
 import org.activiti5.engine.impl.javax.el.ELContext;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/ProcessDefinitionBuilder.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.List;
 import java.util.Stack;
 
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti5.engine.impl.pvm.process.ActivityImpl;
 import org.activiti5.engine.impl.pvm.process.ProcessDefinitionImpl;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/PvmTransition.java
Patch:
@@ -13,7 +13,8 @@
 
 package org.activiti5.engine.impl.pvm;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
+
 
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/delegate/ActivityBehavior.java
Patch:
@@ -20,5 +20,5 @@
  */
 public interface ActivityBehavior extends Serializable {
 
-  void execute(ActivityExecution execution) throws Exception;
+  void execute(ActivityExecution execution);
 }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import org.activiti5.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti5.engine.impl.pvm.PvmActivity;
 import org.activiti5.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti5.engine.impl.pvm.PvmProcessInstance;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/delegate/ExecutionListenerExecution.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti5.engine.impl.pvm.delegate;
 
-import org.activiti5.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti5.engine.impl.pvm.PvmProcessElement;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/delegate/SubProcessActivityBehavior.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti5.engine.impl.pvm.delegate;
 
-import org.activiti5.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.DelegateExecution;
 
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/delegate/TaskListener.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti5.engine.impl.pvm.delegate;
 
-import org.activiti5.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.DelegateTask;
 
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/process/ActivityImpl.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.PvmActivity;
 import org.activiti5.engine.impl.pvm.PvmException;
 import org.activiti5.engine.impl.pvm.PvmTransition;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/process/ScopeImpl.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.bpmn.data.IOSpecification;
 import org.activiti5.engine.impl.pvm.PvmException;
 import org.activiti5.engine.impl.pvm.PvmScope;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/process/TransitionImpl.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.activiti5.engine.delegate.ExecutionListener;
-import org.activiti5.engine.delegate.Expression;
+import org.activiti.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.Expression;
 import org.activiti5.engine.impl.pvm.PvmTransition;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/AbstractEventAtomicOperation.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.List;
 
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.impl.pvm.PvmException;
 import org.activiti5.engine.impl.pvm.process.ScopeImpl;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/AtomicOperationTransitionNotifyListenerTake.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import org.activiti5.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti5.engine.impl.context.Context;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/BeansResolverFactory.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti5.engine.impl.scripting;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.context.Context;
 
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/ResolverFactory.java
Patch:
@@ -13,7 +13,8 @@
 
 package org.activiti5.engine.impl.scripting;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
+
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/ScriptBindings.java
Patch:
@@ -23,7 +23,7 @@
 import javax.script.Bindings;
 import javax.script.SimpleScriptContext;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/ScriptBindingsFactory.java
Patch:
@@ -18,7 +18,7 @@
 
 import javax.script.Bindings;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/ScriptCondition.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti5.engine.impl.scripting;
 
+import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.impl.Condition;
 import org.activiti5.engine.impl.context.Context;
 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/ScriptingEngines.java
Patch:
@@ -23,8 +23,8 @@
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
 
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
-import org.activiti5.engine.delegate.VariableScope;
 
 /**
  * @author Tom Baeyens

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/VariableScopeResolver.java
Patch:
@@ -12,9 +12,9 @@
  */
 package org.activiti5.engine.impl.scripting;
 
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
-import org.activiti5.engine.delegate.VariableScope;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti5.engine.impl.persistence.entity.TaskEntity;
 import org.activiti5.engine.impl.pvm.runtime.ExecutionImpl;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/scripting/VariableScopeResolverFactory.java
Patch:
@@ -13,7 +13,8 @@
 
 package org.activiti5.engine.impl.scripting;
 
-import org.activiti5.engine.delegate.VariableScope;
+import org.activiti.engine.delegate.VariableScope;
+
 
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/task/TaskDefinition.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.activiti5.engine.delegate.Expression;
-import org.activiti5.engine.delegate.TaskListener;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.TaskListener;
 import org.activiti5.engine.impl.form.TaskFormHandler;
 
 /**

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/util/json/JSONObject.java
Patch:
@@ -27,8 +27,8 @@ of this software and associated documentation files (the "Software"), to deal
 import java.io.IOException;
 import java.io.Writer;
 import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/logging/LogMDC.java
Patch:
@@ -34,8 +34,8 @@ public static void putMDCExecution(ActivityExecution e) {
       MDC.put(LOG_MDC_PROCESSDEFINITION_ID, e.getProcessDefinitionId());
     if (e.getProcessInstanceId() != null)
       MDC.put(LOG_MDC_PROCESSINSTANCE_ID, e.getProcessInstanceId());
-    if (e.getProcessBusinessKey() != null)
-      MDC.put(LOG_MDC_BUSINESS_KEY, e.getProcessBusinessKey());
+    if (e.getProcessInstanceBusinessKey() != null)
+      MDC.put(LOG_MDC_BUSINESS_KEY, e.getProcessInstanceBusinessKey());
     
 
   }

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/runtime/ProcessInstanceQuery.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.activiti5.engine.runtime;
 
-import org.activiti5.engine.ProcessEngineConfiguration;
-import org.activiti5.engine.query.Query;
-
 import java.io.Serializable;
 import java.util.List;
 import java.util.Set;
 
+import org.activiti5.engine.ProcessEngineConfiguration;
+import org.activiti5.engine.query.Query;
+
 /**
  * Allows programmatic querying of {@link ProcessInstance}s.
  * 

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/task/Task.java
Patch:
@@ -14,6 +14,8 @@
 
 import java.util.Date;
 
+import org.activiti.engine.task.DelegationState;
+
 
 
 /** Represents one task for a human user.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -113,6 +113,7 @@ public class DbSqlSession implements Session {
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.0"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.1"));
     ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.2"));
+    ACTIVITI_VERSIONS.add(new ActivitiVersion("5.18.0.0"));
 
     // This is the latest version of the 5 branch. It's a 'virtual' version cause it doesn't exist, but it is
     // there to make sure all previous version can upgrade to the 6 version correctly.

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -104,6 +104,7 @@ public void leave(ActivityExecution execution) {
     if (resolveNrOfInstances(execution) == 0) {
     	// Empty collection, just leave.
     	super.leave(execution);
+    	return;
     }
     
     int loopCounter = getLoopVariable(execution, getCollectionElementIndexVariable());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -104,6 +104,7 @@ public void leave(ActivityExecution execution) {
     if (resolveNrOfInstances(execution) == 0) {
     	// Empty collection, just leave.
     	super.leave(execution);
+    	return;
     }
     
     int loopCounter = getLoopVariable(execution, getCollectionElementIndexVariable());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -65,6 +65,7 @@ public EventSubscriptionEntity(ExecutionEntity executionEntity) {
     setExecution(executionEntity);
     setActivity(execution.getActivity());
     this.processInstanceId = executionEntity.getProcessInstanceId();
+    this.processDefinitionId = executionEntity.getProcessDefinitionId();
   }
   
   // processing /////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/DestroyScopeOperation.java
Patch:
@@ -11,7 +11,7 @@
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 import org.activiti.engine.impl.persistence.entity.JobEntityManager;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
-import org.activiti.engine.impl.persistence.entity.TaskEntityManagerImpl;
+import org.activiti.engine.impl.persistence.entity.TaskEntityManager;
 import org.activiti.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.activiti.engine.impl.persistence.entity.VariableInstanceEntityManager;
 
@@ -61,7 +61,7 @@ public void run() {
     }
 
     // Delete all scope tasks
-    TaskEntityManagerImpl taskEntityManager = commandContext.getTaskEntityManager();
+    TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();
     Collection<TaskEntity> tasksForExecution = taskEntityManager.findTasksByExecutionId(parentScopeExecution.getId());
     for (TaskEntity taskEntity : tasksForExecution) {
       taskEntityManager.delete(taskEntity);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntityManagerImpl;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.apache.commons.collections.CollectionUtils;
 import org.slf4j.Logger;
@@ -43,7 +42,7 @@ public EndExecutionOperation(CommandContext commandContext, ActivityExecution ex
   @Override
   public void run() {
 
-    ExecutionEntityManagerImpl executionEntityManager = commandContext.getExecutionEntityManager();
+    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
     ExecutionEntity executionEntity = (ExecutionEntity) execution;
 
     // Find parent execution. If not found, it's the process instance and other logic needs to happen

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -183,7 +183,7 @@ protected void leaveFlowNode(FlowNode flowNode) {
     
     // Leave, and reuse the incoming sequence flow, make executions for all the others (if applicable)
 
-    ExecutionEntityManagerImpl executionEntityManager = commandContext.getExecutionEntityManager();
+    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
     List<ExecutionEntity> outgoingExecutions = new ArrayList<ExecutionEntity>(flowNode.getOutgoingFlows().size());
 
     // Reuse existing one

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -21,7 +21,6 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntityManagerImpl;
 import org.apache.commons.collections.CollectionUtils;
 
 /**
@@ -142,7 +141,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
     // This could be solved by not reusing an execution, but creating a new
     
     // Delete all child executions
-    ExecutionEntityManagerImpl executionEntityManager = commandContext.getExecutionEntityManager();
+    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
     Collection<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(parentExecution.getId());
     if (CollectionUtils.isNotEmpty(childExecutions)) {
       for (ExecutionEntity childExecution : childExecutions) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -27,7 +27,6 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntityManagerImpl;
 import org.apache.commons.collections.CollectionUtils;
 
 /**
@@ -126,7 +125,7 @@ public void execute(ActivityExecution execution) {
   
   protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionEntity notToDeleteExecution, CommandContext commandContext) {
     // Delete all child executions
-    ExecutionEntityManagerImpl executionEntityManager = commandContext.getExecutionEntityManager();
+    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
     Collection<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(parentExecution.getId());
     if (CollectionUtils.isNotEmpty(childExecutions)) {
       for (ExecutionEntity childExecution : childExecutions) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -20,7 +20,7 @@
 import org.activiti.engine.impl.delegate.InactiveActivityBehavior;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntityManagerImpl;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
 import org.activiti.engine.impl.util.ExecutionGraphUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -59,7 +59,7 @@ public void executeInactive(ExecutionEntity executionEntity) {
 
   protected void executeInclusiveGatewayLogic(ExecutionEntity execution) {
     CommandContext commandContext = Context.getCommandContext();
-    ExecutionEntityManagerImpl executionEntityManager = commandContext.getExecutionEntityManager();
+    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
     
     lockFirstParentScope(execution);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ScopeUtil.java
Patch:
@@ -24,7 +24,7 @@
 import org.activiti.engine.impl.delegate.ActivityExecution;
 import org.activiti.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntity;
-import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityManagerImpl;
+import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityManager;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
 import org.apache.commons.collections.CollectionUtils;
@@ -74,7 +74,7 @@ public int compare(EventSubscriptionEntity o1, EventSubscriptionEntity o2) {
    * Creates a new event scope execution and moves existing event subscriptions to this new execution
    */
   public static void createCopyOfSubProcessExecutionForCompensation(ExecutionEntity subProcessExecution, ExecutionEntity parentScopeExecution) {
-    EventSubscriptionEntityManagerImpl eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();
+    EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();
     List<EventSubscriptionEntity> eventSubscriptions = eventSubscriptionEntityManager.findEventSubscriptionsByExecutionAndType(subProcessExecution.getId(), "compensate");
     
     List<CompensateEventSubscriptionEntity> compensateEventSubscriptions = new ArrayList<CompensateEventSubscriptionEntity>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/DatabaseEventFlusher.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.activiti.engine.impl.event.logger.handler.EventLoggerEventHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.persistence.entity.EventLogEntryEntityManagerImpl;
+import org.activiti.engine.impl.persistence.entity.EventLogEntryEntityManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -20,7 +20,7 @@ public void closing(CommandContext commandContext) {
       return; // Not interested in events about exceptions
     }
     
-    EventLogEntryEntityManagerImpl eventLogEntryEntityManager = commandContext.getEventLogEntryEntityManager();
+    EventLogEntryEntityManager eventLogEntryEntityManager = commandContext.getEventLogEntryEntityManager();
     for (EventLoggerEventHandler eventHandler : eventHandlers) {
       try {
         eventLogEntryEntityManager.insert(eventHandler.generateEventLogEntry(commandContext), false);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManagerImpl.java
Patch:
@@ -386,7 +386,7 @@ private void deleteProcessInstanceCascade(ExecutionEntity execution, String dele
       }
     }
     
-    IdentityLinkEntityManagerImpl identityLinkEntityManager = Context.getCommandContext().getIdentityLinkEntityManager();
+    IdentityLinkEntityManager identityLinkEntityManager = Context.getCommandContext().getIdentityLinkEntityManager();
     List<IdentityLinkEntity> identityLinkEntities = identityLinkEntityManager.findIdentityLinksByProcessInstanceId(execution.getId());
     for (IdentityLinkEntity identityLinkEntity : identityLinkEntities) {
       identityLinkEntityManager.delete(identityLinkEntity);
@@ -504,7 +504,7 @@ public void deleteDataRelatedToExecution(ExecutionEntity executionEntity, String
     executionEntity.setActive(false);
     
     if (executionEntity.getId().equals(executionEntity.getProcessInstanceId())) {
-      IdentityLinkEntityManagerImpl identityLinkEntityManager = commandContext.getIdentityLinkEntityManager();
+      IdentityLinkEntityManager identityLinkEntityManager = commandContext.getIdentityLinkEntityManager();
       Collection<IdentityLinkEntity> identityLinks = identityLinkEntityManager.findIdentityLinksByProcessInstanceId(executionEntity.getProcessInstanceId());
       for (IdentityLinkEntity identityLink : identityLinks) {
         identityLinkEntityManager.delete(identityLink);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
-import org.activiti.engine.impl.persistence.entity.JobEntityManagerImpl;
+import org.activiti.engine.impl.persistence.entity.JobEntityManager;
 import org.activiti.engine.impl.persistence.entity.MessageEntity;
 import org.activiti.engine.impl.persistence.entity.TimerEntity;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
@@ -416,7 +416,7 @@ private void createJobWithoutExceptionMsg() {
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutor();
     commandExecutor.execute(new Command<Void>() {
       public Void execute(CommandContext commandContext) {
-        JobEntityManagerImpl jobManager = commandContext.getJobEntityManager();
+        JobEntityManager jobManager = commandContext.getJobEntityManager();
 
         timerEntity = new TimerEntity();
         timerEntity.setLockOwner(UUID.randomUUID().toString());
@@ -443,7 +443,7 @@ private void createJobWithoutExceptionStacktrace() {
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutor();
     commandExecutor.execute(new Command<Void>() {
       public Void execute(CommandContext commandContext) {
-        JobEntityManagerImpl jobManager = commandContext.getJobEntityManager();
+        JobEntityManager jobManager = commandContext.getJobEntityManager();
 
         timerEntity = new TimerEntity();
         timerEntity.setLockOwner(UUID.randomUUID().toString());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -34,6 +34,7 @@
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
+import org.activiti.engine.impl.persistence.entity.MessageEntity;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -76,7 +77,7 @@ public Object execute(CommandContext commandContext) {
       job.setRetries(job.getRetries() - 1);
       job.setLockOwner(null);
       job.setLockExpirationTime(null);
-      if (job.getDuedate() == null) {
+      if (job.getDuedate() == null || job instanceof MessageEntity) {
         // add wait time for failed async job
         job.setDuedate(calculateDueDate(commandContext, processEngineConfig.getAsyncFailedJobWaitTime(), null));
       } else {

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -38,6 +38,7 @@
 import org.activiti5.engine.impl.persistence.deploy.DeploymentManager;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti5.engine.impl.persistence.entity.JobEntity;
+import org.activiti5.engine.impl.persistence.entity.MessageEntity;
 import org.activiti5.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti5.engine.impl.persistence.entity.TimerEntity;
 import org.activiti5.engine.impl.pvm.process.ActivityImpl;
@@ -74,7 +75,7 @@ public Object execute(CommandContext commandContext)  {
       job.setRetries(job.getRetries() - 1);
       job.setLockOwner(null);
       job.setLockExpirationTime(null);
-      if (job.getDuedate() == null) {
+      if (job.getDuedate() == null || job instanceof MessageEntity) {
         // add wait time for failed async job
         job.setDuedate(calculateDueDate(commandContext, processEngineConfig.getAsyncFailedJobWaitTime(), null));
       } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventDispatcherImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.engine.impl.util.ProcessDefinitionUtil;
-import org.activiti.engine.repository.ProcessDefinition;
 
 /**
  * Class capable of dispatching events.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AddIdentityLinkCmd.java
Patch:
@@ -53,7 +53,9 @@ protected void validateParams(String taskId, String identityId, int identityIdTy
       throw new ActivitiIllegalArgumentException("type is required when adding a new task identity link");
     }
 
-    if (identityId == null && identityIdType == IDENTITY_GROUP) {
+    if (identityId == null && (identityIdType == IDENTITY_GROUP || 
+        (IdentityLinkType.ASSIGNEE.equals(identityType) == false && IdentityLinkType.OWNER.equals(identityType) == false))) {
+      
       throw new ActivitiIllegalArgumentException("identityId is null");
     }
     

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/cmd/AddIdentityLinkCmd.java
Patch:
@@ -52,7 +52,9 @@ protected void validateParams(String taskId, String identityId, int identityIdTy
       throw new ActivitiIllegalArgumentException("type is required when adding a new task identity link");
     }
 
-    if (identityId == null && identityIdType == IDENTITY_GROUP) {
+    if (identityId == null && (identityIdType == IDENTITY_GROUP || 
+        (IdentityLinkType.ASSIGNEE.equals(identityType) == false && IdentityLinkType.OWNER.equals(identityType) == false))) {
+      
       throw new ActivitiIllegalArgumentException("identityId is null");
     }
     

File: modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -65,6 +65,7 @@ public EventSubscriptionEntity(ExecutionEntity executionEntity) {
     setExecution(executionEntity);
     setActivity(execution.getActivity());
     this.processInstanceId = executionEntity.getProcessInstanceId();
+    this.processDefinitionId = executionEntity.getProcessDefinitionId();
   }
   
   // processing /////////////////////////////

File: modules/activiti5-test/src/main/java/org/activiti5/engine/impl/test/NoOpServiceTask.java
Patch:
@@ -17,9 +17,9 @@
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.activiti.engine.delegate.DelegateExecution;
-import org.activiti.engine.delegate.Expression;
-import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti5.engine.delegate.DelegateExecution;
+import org.activiti5.engine.delegate.Expression;
+import org.activiti5.engine.delegate.JavaDelegate;
 
 /**
  * @author Joram Barrez

File: modules/activiti5-test/src/main/java/org/activiti5/engine/impl/test/PluggableActivitiTestCase.java
Patch:
@@ -16,6 +16,8 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.ProcessEngines;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.activiti.engine.impl.context.Context;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -50,5 +52,6 @@ protected void initializeProcessEngine() {
       }
     }
     processEngine = cachedProcessEngine;
+    Context.setProcessEngineConfiguration((ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration());
   }
 }

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/ActivitiEventDispatcherTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/AttachmentEventsTest.java
Patch:
@@ -10,10 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import java.io.ByteArrayInputStream;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
@@ -23,7 +24,6 @@
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Attachment;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * Test case for all {@link ActivitiEvent}s related to attachments.
@@ -37,7 +37,7 @@ public class AttachmentEventsTest extends PluggableActivitiTestCase {
 	/**
 	 * Test create, update and delete events of attachments on a task/process.
 	 */
-	@Deployment(resources = { "org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml" })
+	@Deployment(resources = { "org/activiti5/engine/test/api/runtime/oneTaskProcess.bpmn20.xml" })
 	public void testAttachmentEntityEvents() throws Exception {
 		
 		if(processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/CommentEventsTest.java
Patch:
@@ -10,8 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
@@ -20,7 +21,6 @@
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Comment;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * Test case for all {@link ActivitiEvent}s related to comments.
@@ -34,7 +34,7 @@ public class CommentEventsTest extends PluggableActivitiTestCase {
 	/**
 	 * Test create, update and delete events of comments on a task/process.
 	 */
-	@Deployment(resources = { "org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml" })
+	@Deployment(resources = { "org/activiti5/engine/test/api/runtime/oneTaskProcess.bpmn20.xml" })
 	public void testCommentEntityEvents() throws Exception {
 		if(processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {
 			ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess");

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/DeploymentEventsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
@@ -35,7 +35,7 @@ public void testDeploymentEvents() throws Exception {
 		try {
 			listener.clearEventsReceived();
 			deployment = repositoryService.createDeployment()
-					.addClasspathResource("org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml")
+					.addClasspathResource("org/activiti5/engine/test/api/runtime/oneTaskProcess.bpmn20.xml")
 					.deploy();
 			assertNotNull(deployment);
 			

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/ErrorThrowingEventListenerTest.java
Patch:
@@ -10,16 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.impl.bpmn.helper.ErrorThrowingEventListener;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * Test case for all {@link ActivitiEventListener}s that throws an error BPMN event when an {@link ActivitiEvent}

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/ExecutionEventsTest.java
Patch:
@@ -10,15 +10,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.Execution;
 import org.activiti5.engine.runtime.ProcessInstance;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * Test case for all {@link ActivitiEvent}s related to executions.
@@ -32,7 +32,7 @@ public class ExecutionEventsTest extends PluggableActivitiTestCase {
 	/**
 	 * Test create, update and delete events of process instances.
 	 */
-	@Deployment(resources= {"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"})
+	@Deployment(resources= {"org/activiti5/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"})
 	public void testExecutionEvents() throws Exception {
 			ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess");
 			

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/GroupEventsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/MessageThrowingEventListenerTest.java
Patch:
@@ -10,16 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;
 import org.activiti5.engine.delegate.event.ActivitiEventType;
 import org.activiti5.engine.impl.bpmn.helper.MessageThrowingEventListener;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * Test case for all {@link ActivitiEventListener}s that throw a message BPMN event when an {@link ActivitiEvent}

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/ModelEventsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/StaticTestActivitiEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/TestActivitiActivityEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/TestActivitiEntityEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/TestActivitiEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/TestBaseEntityEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.BaseEntityEventListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/TestExceptionActivitiEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.delegate.event.ActivitiEventListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/TestVariableEventListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/UncaughtErrorEventTest.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.BpmnError;
 import org.activiti5.engine.delegate.event.ActivitiEvent;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * Test case for {@link ActivitiEvent} thrown when a BPMNError is not caught

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/UserEventsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti5.engine.delegate.event.ActivitiEvent;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/VariableEventsExecutionListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/event/VariableEventsTaskListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.event;
+package org.activiti5.engine.test.api.event;
 
 import org.activiti5.engine.delegate.DelegateTask;
 import org.activiti5.engine.delegate.TaskListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/form/Address.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.form;
+package org.activiti5.engine.test.api.form;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/form/FormPropertyDefaultValueTest.java
Patch:
@@ -1,16 +1,16 @@
-package org.activiti.engine.test.api.form;
+package org.activiti5.engine.test.api.form;
 
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.form.FormProperty;
 import org.activiti5.engine.form.StartFormData;
 import org.activiti5.engine.form.TaskFormData;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 public class FormPropertyDefaultValueTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricProcessInstanceAndVariablesQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.history;
+package org.activiti5.engine.test.api.history;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -39,8 +39,8 @@ public class HistoricProcessInstanceAndVariablesQueryTest extends PluggableActiv
   protected void setUp() throws Exception {
     super.setUp();
     repositoryService.createDeployment()
-      .addClasspathResource("org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml")
-      .addClasspathResource("org/activiti/engine/test/api/runtime/oneTaskProcess2.bpmn20.xml")
+      .addClasspathResource("org/activiti5/engine/test/api/runtime/oneTaskProcess.bpmn20.xml")
+      .addClasspathResource("org/activiti5/engine/test/api/runtime/oneTaskProcess2.bpmn20.xml")
       .deploy();
     
     Map<String, Object> startMap = new HashMap<String, Object>();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/HistoricTaskAndVariablesQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.history;
+package org.activiti5.engine.test.api.history;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -19,12 +19,12 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.history.HistoricTaskInstance;
 import org.activiti5.engine.impl.history.HistoryLevel;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Tijs Rademakers
@@ -417,7 +417,7 @@ public void testQueryWithPagingAndVariables() {
     }
   }
   
-  @Deployment(resources={"org/activiti/engine/test/api/task/TaskQueryTest.testProcessDefinition.bpmn20.xml"})
+  @Deployment(resources={"org/activiti5/engine/test/api/task/TaskQueryTest.testProcessDefinition.bpmn20.xml"})
   public void testWithoutDueDateQuery() throws Exception {
     if(processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {
       ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess");

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/history/ProcessInstanceLogQueryTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.api.history;
+package org.activiti5.engine.test.api.history;
 
 import java.util.HashMap;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/identity/GroupQueryTest.java
Patch:
@@ -11,7 +11,9 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.identity;
+package org.activiti5.engine.test.api.identity;
+
+import java.util.List;
 
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
@@ -20,8 +22,6 @@
 import org.activiti5.engine.impl.persistence.entity.GroupEntity;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
-import java.util.List;
-
 
 /**
  * @author Joram Barrez

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/identity/IdentityServiceTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.identity;
+package org.activiti5.engine.test.api.identity;
 
 import java.util.Arrays;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/identity/ProcessInstanceIdentityLinkTest.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.identity;
+package org.activiti5.engine.test.api.identity;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/identity/UserEntityTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.api.identity;
+package org.activiti5.engine.test.api.identity;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/identity/UserQueryTest.java
Patch:
@@ -11,7 +11,9 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.identity;
+package org.activiti5.engine.test.api.identity;
+
+import java.util.List;
 
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiIllegalArgumentException;
@@ -20,8 +22,6 @@
 import org.activiti5.engine.impl.persistence.entity.UserEntity;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
-import java.util.List;
-
 
 /**
  * @author Joram Barrez

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/nonpublic/EventSubscriptionQueryTest.java
Patch:
@@ -11,10 +11,11 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.nonpublic;
+package org.activiti5.engine.test.api.nonpublic;
 
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.EventSubscriptionQueryImpl;
 import org.activiti5.engine.impl.interceptor.Command;
 import org.activiti5.engine.impl.interceptor.CommandContext;
@@ -24,7 +25,6 @@
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.Execution;
 import org.activiti5.engine.runtime.ProcessInstance;
-import org.activiti5.engine.test.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/repository/DeployNonExecutableProcessDefinitionTest.java
Patch:
@@ -10,11 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.repository;
+package org.activiti5.engine.test.api.repository;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author jbarrez

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/repository/ModelQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.repository;
+package org.activiti5.engine.test.api.repository;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/DummySerializable.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.runtime;
+package org.activiti5.engine.test.api.runtime;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ProcessInstanceAndVariablesQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.runtime;
+package org.activiti5.engine.test.api.runtime;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -37,8 +37,8 @@ public class ProcessInstanceAndVariablesQueryTest extends PluggableActivitiTestC
   protected void setUp() throws Exception {
     super.setUp();
     repositoryService.createDeployment()
-      .addClasspathResource("org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml")
-      .addClasspathResource("org/activiti/engine/test/api/runtime/oneTaskProcess2.bpmn20.xml")
+      .addClasspathResource("org/activiti5/engine/test/api/runtime/oneTaskProcess.bpmn20.xml")
+      .addClasspathResource("org/activiti5/engine/test/api/runtime/oneTaskProcess2.bpmn20.xml")
       .deploy();
     
     Map<String, Object> startMap = new HashMap<String, Object>();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ProcessInstanceCommentTest.java
Patch:
@@ -10,16 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.runtime;
+package org.activiti5.engine.test.api.runtime;
 
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.impl.history.HistoryLevel;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Comment;
-import org.activiti5.engine.test.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/ProcessInstanceUpdateBusinessKeyTest.java
Patch:
@@ -10,16 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.runtime;
+package org.activiti5.engine.test.api.runtime;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;
 import org.activiti5.engine.history.HistoricProcessInstance;
 import org.activiti5.engine.impl.history.HistoryLevel;
 import org.activiti5.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
-import org.activiti5.engine.test.Deployment;
 
 public class ProcessInstanceUpdateBusinessKeyTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/DelegateTaskTest.java
Patch:
@@ -10,19 +10,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.history.HistoricTaskInstance;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Falko Menge

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/DelegateTaskTestTaskListener.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.util.HashSet;
 import java.util.Set;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/DeleteCandidateTaskListener.java
Patch:
@@ -1,5 +1,5 @@
 
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import org.activiti5.engine.delegate.DelegateTask;
 import org.activiti5.engine.delegate.TaskListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/SubTaskQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/SubTaskTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.util.HashSet;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/TaskAndVariablesQueryTest.java
Patch:
@@ -10,17 +10,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/TaskBatchDeleteTest.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 public class TaskBatchDeleteTest extends PluggableActivitiTestCase {
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/TaskDueDateTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.util.Date;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/TaskInfoQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.util.Date;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/task/TaskVariablesTest.java
Patch:
@@ -11,15 +11,15 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.api.task;
+package org.activiti5.engine.test.api.task;
 
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/variables/VariablesTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.api.variables;
+package org.activiti5.engine.test.api.variables;
 
 import java.io.Serializable;
 import java.util.Arrays;
@@ -28,7 +28,7 @@ protected void setUp() throws Exception {
 	  super.setUp();
 	  
 	  repositoryService.createDeployment()
-	  	.addClasspathResource("org/activiti/engine/test/api/variables/VariablesTest.bpmn20.xml")
+	  	.addClasspathResource("org/activiti5/engine/test/api/variables/VariablesTest.bpmn20.xml")
 	  	.deploy();
 	  
 	  // Creating 50 vars in total

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/async/AsyncEmailTaskTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.async;
+package org.activiti5.engine.test.bpmn.async;
 
 import java.util.Arrays;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/async/AsyncExclusiveJobsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.async;
+package org.activiti5.engine.test.bpmn.async;
 
 import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.impl.history.HistoryLevel;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/async/AsyncListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.async;
+package org.activiti5.engine.test.bpmn.async;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/async/AsyncService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.async;
+package org.activiti5.engine.test.bpmn.async;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/async/AsyncTaskListener.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.async;
+package org.activiti5.engine.test.bpmn.async;
 
 import org.activiti5.engine.delegate.DelegateTask;
 import org.activiti5.engine.delegate.TaskListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/async/FailingAsyncService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.async;
+package org.activiti5.engine.test.bpmn.async;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/IntermediateNoneEventTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event;
+package org.activiti5.engine.test.bpmn.event;
 
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/MessageEventDefinitionWithExtensionElementsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event;
+package org.activiti5.engine.test.bpmn.event;
 
 import java.util.List;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/compensate/helper/GetVariablesDelegate.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.compensate.helper;
+package org.activiti5.engine.test.bpmn.event.compensate.helper;
 
 import org.activiti5.engine.ActivitiIllegalArgumentException;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/compensate/helper/SetVariablesDelegate.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.compensate.helper;
+package org.activiti5.engine.test.bpmn.event.compensate.helper;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/compensate/helper/UndoService.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.compensate.helper;
+package org.activiti5.engine.test.bpmn.event.compensate.helper;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.Expression;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/end/EndEventTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.end;
+package org.activiti5.engine.test.bpmn.event.end;
 
 import org.activiti.engine.ActivitiOptimisticLockingException;
 import org.activiti.engine.runtime.ProcessInstance;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/end/EndEventTestJavaDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.end;
+package org.activiti5.engine.test.bpmn.event.end;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/BpmnErrorBean.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.error;
+package org.activiti5.engine.test.bpmn.event.error;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/ErrorEventSubProcessTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.error;
+package org.activiti5.engine.test.bpmn.event.error;
 
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.Deployment;
@@ -79,8 +79,8 @@ public void testCatchErrorThrownByScriptTaskInsideSubProcessInTopLevelProcess()
   }
 
   @Deployment(resources = {
-      "org/activiti/engine/test/bpmn/event/error/ErrorEventSubProcessTest.testThrowErrorInScriptTaskInsideCallActivitiCatchInTopLevelProcess.bpmn20.xml",
-      "org/activiti/engine/test/bpmn/event/error/BoundaryErrorEventTest.testCatchErrorThrownByJavaDelegateOnCallActivity-child.bpmn20.xml" })
+      "org/activiti5/engine/test/bpmn/event/error/ErrorEventSubProcessTest.testThrowErrorInScriptTaskInsideCallActivitiCatchInTopLevelProcess.bpmn20.xml",
+      "org/activiti5/engine/test/bpmn/event/error/BoundaryErrorEventTest.testCatchErrorThrownByJavaDelegateOnCallActivity-child.bpmn20.xml" })
   public void testThrowErrorInScriptTaskInsideCallActivitiCatchInTopLevelProcess() {
     String procId = runtimeService.startProcessInstanceByKey("testThrowErrorInScriptTaskInsideCallActivitiCatchInTopLevelProcess").getId();
     assertThatErrorHasBeenCaught(procId);

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/ThrowBpmnErrorDelegate.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.error;
+package org.activiti5.engine.test.bpmn.event.error;
 
 import org.activiti5.engine.delegate.BpmnError;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/mapError/BoundaryErrorParentException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.error.mapError;
+package org.activiti5.engine.test.bpmn.event.error.mapError;
 
 /**
  * @author Saeid Mirzaei

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/mapError/BoundaryEventChildException.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.error.mapError;
+package org.activiti5.engine.test.bpmn.event.error.mapError;
 
 /**
  * @author Saeid Mirzaei

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/mapError/FlagDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.error.mapError;
+package org.activiti5.engine.test.bpmn.event.error.mapError;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/error/mapError/ThrowCustomExceptionDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.event.error.mapError;
+package org.activiti5.engine.test.bpmn.event.error.mapError;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/message/MessageEventSubprocessTest.java
Patch:
@@ -11,14 +11,14 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.message;
+package org.activiti5.engine.test.bpmn.event.message;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.EventSubscriptionQueryImpl;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.Execution;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/message/MessageIntermediateEventTest.java
Patch:
@@ -11,16 +11,16 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.message;
+package org.activiti5.engine.test.bpmn.event.message;
 
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.EventSubscriptionQueryImpl;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.Execution;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/message/MessageNonInterruptingBoundaryEventTest.java
Patch:
@@ -11,12 +11,12 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.event.message;
+package org.activiti5.engine.test.bpmn.event.message;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.Execution;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.bpmn.event.timer;
+package org.activiti5.engine.test.bpmn.event.timer;
 
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
 
     //deploy the process
     repositoryService.createDeployment()
-            .addClasspathResource("org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndTest.testCycleDateStartTimerEvent.bpmn20.xml")
+            .addClasspathResource("org/activiti5/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndTest.testCycleDateStartTimerEvent.bpmn20.xml")
             .deploy();
     assertEquals(1, repositoryService.createProcessDefinitionQuery().count());
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/compatibility/IntermediateTimerEventRepeatCompatibilityTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.bpmn.event.timer.compatibility;
+package org.activiti5.engine.test.bpmn.event.timer.compatibility;
 
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,12 +17,12 @@
 import java.util.Date;
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.history.HistoricProcessInstance;
 import org.activiti5.engine.impl.history.HistoryLevel;
 import org.activiti5.engine.runtime.Job;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/event/timer/compatibility/TimerEventCompatibilityTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.bpmn.event.timer.compatibility;
+package org.activiti5.engine.test.bpmn.event.timer.compatibility;
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -12,6 +12,8 @@
  * limitations under the License.
  */
 
+import java.util.Date;
+
 import org.activiti5.engine.impl.ProcessEngineImpl;
 import org.activiti5.engine.impl.db.DbSqlSession;
 import org.activiti5.engine.impl.interceptor.Command;
@@ -22,8 +24,6 @@
 import org.activiti5.engine.impl.persistence.entity.JobEntity;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
-import java.util.Date;
-
 public abstract class TimerEventCompatibilityTest extends PluggableActivitiTestCase {
 
   protected void changeConfigurationToPlainText(JobEntity job) {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -10,19 +10,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.gateway;
+package org.activiti5.engine.test.bpmn.gateway;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.impl.util.CollectionUtil;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Joram Barrez
@@ -85,7 +85,7 @@ public void testWhitespaceInExpression() {
             CollectionUtil.singletonMap("input", 1));
   }
   
-  @Deployment(resources = {"org/activiti/engine/test/bpmn/gateway/ExclusiveGatewayTest.testDivergingExclusiveGateway.bpmn20.xml"})
+  @Deployment(resources = {"org/activiti5/engine/test/bpmn/gateway/ExclusiveGatewayTest.testDivergingExclusiveGateway.bpmn20.xml"})
   public void testUnknownVariableInExpression() {
     // Instead of 'input' we're starting a process instance with the name 'iinput' (ie. a typo)
     try {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/gateway/ExclusiveGatewayTestOrder.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.gateway;
+package org.activiti5.engine.test.bpmn.gateway;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/gateway/InclusiveGatewayTestOrder.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.gateway;
+package org.activiti5.engine.test.bpmn.gateway;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/gateway/ParallelGatewayTest.java
Patch:
@@ -11,16 +11,16 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.gateway;
+package org.activiti5.engine.test.bpmn.gateway;
 
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.history.HistoricActivityInstance;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
 import org.activiti5.engine.task.TaskQuery;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Joram Barrez

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/java/EventJavaTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.java;
+package org.activiti5.engine.test.bpmn.java;
 
 import java.io.ByteArrayInputStream;
 
@@ -25,9 +25,9 @@
 import org.activiti.bpmn.model.StartEvent;
 import org.activiti.bpmn.model.TimerEventDefinition;
 import org.activiti.bpmn.model.UserTask;
+import org.activiti.engine.repository.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.impl.util.io.InputStreamSource;
-import org.activiti5.engine.repository.Deployment;
 
 
 /**

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/mail/AttachmentsBean.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.mail;
+package org.activiti5.engine.test.bpmn.mail;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -28,7 +28,7 @@ public class AttachmentsBean implements Serializable {
   private static final long serialVersionUID = 1L;
 
   private static final File RESOURCE_DIR = new File("src/test/resources/");
-  private static final File PACKAGE_DIR = new File(RESOURCE_DIR, "org/activiti/engine/test/bpmn/mail/");
+  private static final File PACKAGE_DIR = new File(RESOURCE_DIR, "org/activiti5/engine/test/bpmn/mail/");
 
   public File getFile() {
     String fileName = "EmailServiceTaskTest.testTextMailWithFileAttachment.bpmn20.xml";

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/mail/EmailTestCase.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.mail;
+package org.activiti5.engine.test.bpmn.mail;
 
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.subethamail.wiser.Wiser;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/multiinstance/ActivityStartListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.multiinstance;
+package org.activiti5.engine.test.bpmn.multiinstance;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/multiinstance/MultiInstanceDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.multiinstance;
+package org.activiti5.engine.test.bpmn.multiinstance;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/multiinstance/TaskCompletionListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.multiinstance;
+package org.activiti5.engine.test.bpmn.multiinstance;
 
 import org.activiti5.engine.delegate.DelegateTask;
 import org.activiti5.engine.delegate.TaskListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/multiinstance/TestSampleServiceTask.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.bpmn.multiinstance;
+package org.activiti5.engine.test.bpmn.multiinstance;
 
 import org.activiti5.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/parallel/ParallelTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.parallel;
+package org.activiti5.engine.test.bpmn.parallel;
 
 import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/sequenceflow/ConditionalSequenceFlowTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.sequenceflow;
+package org.activiti5.engine.test.bpmn.sequenceflow;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/sequenceflow/DefaultSequenceFlowTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.sequenceflow;
+package org.activiti5.engine.test.bpmn.sequenceflow;
 
 import org.activiti.engine.test.Deployment;
 import org.activiti.engine.test.bpmn.gateway.ExclusiveGatewayTest;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/servicetask/CallServiceInServiceTaskTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.servicetask;
+package org.activiti5.engine.test.bpmn.servicetask;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/servicetask/CreateUserAndMembershipTestDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.servicetask;
+package org.activiti5.engine.test.bpmn.servicetask;
 
 import org.activiti5.engine.IdentityService;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/servicetask/DummyServiceTask.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.servicetask;
+package org.activiti5.engine.test.bpmn.servicetask;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/servicetask/RepeatingServiceTaskTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.servicetask;
+package org.activiti5.engine.test.bpmn.servicetask;
 
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/servicetask/ServiceTaskVariablesTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.servicetask;
+package org.activiti5.engine.test.bpmn.servicetask;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/servicetask/StartProcessInstanceTestDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.servicetask;
+package org.activiti5.engine.test.bpmn.servicetask;
 
 import org.activiti5.engine.RuntimeService;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.subprocess;
+package org.activiti5.engine.test.bpmn.subprocess;
 
 import java.util.Date;
 import java.util.Iterator;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/ImportExportTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
@@ -16,7 +16,7 @@
 public class ImportExportTest extends ResourceActivitiTestCase {
 
     public ImportExportTest() {
-        super("org/activiti/standalone/parsing/encoding.activiti.cfg.xml");
+        super("org/activiti5/standalone/parsing/encoding.activiti.cfg.xml");
     }
 
     public void testConvertXMLToModel() throws Exception {
@@ -42,7 +42,7 @@ protected void tearDown() throws Exception {
 
 
     protected String getResource() {
-        return "org/activiti/engine/test/bpmn/usertask/ImportExportTest.testImportExport.bpmn20.xml";
+        return "org/activiti5/engine/test/bpmn/usertask/ImportExportTest.testImportExport.bpmn20.xml";
     }
 
     protected BpmnModel readXMLFile() throws Exception {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/InitiatorTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/TaskAssignmentCandidateTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/TaskAssignmentExtensionsTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/TaskDueDateExtensionsTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/TaskPriorityExtensionsTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import java.util.HashMap;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/usertask/UserTaskTestCreateTaskListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.bpmn.usertask;
+package org.activiti5.engine.test.bpmn.usertask;
 
 import org.activiti5.engine.delegate.DelegateTask;
 import org.activiti5.engine.delegate.TaskListener;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/cfg/RetryInterceptorTest.java
Patch:
@@ -10,7 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.cfg;
+package org.activiti5.engine.test.cfg;
+
+import junit.framework.TestCase;
 
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.ActivitiOptimisticLockingException;
@@ -20,8 +22,6 @@
 import org.activiti5.engine.impl.interceptor.CommandInvoker;
 import org.activiti5.engine.impl.interceptor.RetryInterceptor;
 
-import junit.framework.TestCase;
-
 /**
  * 
  * @author Daniel Meyer

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/cmd/FailedJobRetryCmdTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.cmd;
+package org.activiti5.engine.test.cmd;
 
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.runtime.Job;
@@ -58,7 +58,7 @@ private ExecutionEntity refreshExecutionEntity(String executionId) {
         return (ExecutionEntity) runtimeService.createExecutionQuery().executionId(executionId).singleResult();
     }
 	
-    @Deployment(resources = { "org/activiti/engine/test/cmd/FailedJobRetryCmdTest.testFailedServiceTask.bpmn20.xml" })
+    @Deployment(resources = { "org/activiti5/engine/test/cmd/FailedJobRetryCmdTest.testFailedServiceTask.bpmn20.xml" })
 	public void testFailedServiceTask() {
     	ProcessInstance pi = runtimeService.startProcessInstanceByKey("failedServiceTask");
     	assertNotNull(pi);

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/cmd/FailingDelegate.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.cmd;
+package org.activiti5.engine.test.cmd;
 
 import org.activiti5.engine.ActivitiException;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/CompetingJobAcquisitionTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.ActivitiOptimisticLockingException;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/CompetingJoinTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.ProcessInstance;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/CompetingSignalsTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import org.activiti.engine.impl.RuntimeServiceImpl;
 import org.activiti.engine.impl.cfg.CommandExecutorImpl;
@@ -92,7 +92,7 @@ public void testCompetingSignals() throws Exception {
     assertTextPresent("was updated by another transaction concurrently", threadTwo.exception.getMessage());
   }
   
-  @Deployment(resources={"org/activiti/engine/test/concurrency/CompetingSignalsTest.testCompetingSignals.bpmn20.xml"})
+  @Deployment(resources={"org/activiti5/engine/test/concurrency/CompetingSignalsTest.testCompetingSignals.bpmn20.xml"})
   public void testCompetingSignalsWithRetry() throws Exception {
     RuntimeServiceImpl runtimeServiceImpl = (RuntimeServiceImpl)runtimeService;        
     CommandExecutorImpl before = (CommandExecutorImpl) runtimeServiceImpl.getCommandExecutor();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/ConcurrentEngineUsageTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import java.util.Collections;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/ControllableThread.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/ControlledCommand.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import org.activiti5.engine.impl.interceptor.Command;
 import org.activiti5.engine.impl.interceptor.CommandContext;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/concurrency/SetRandomVariablesTaskListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.concurrency;
+package org.activiti5.engine.test.concurrency;
 
 import java.util.Random;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/ConnectionPoolTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import javax.sql.DataSource;
 
@@ -28,7 +28,7 @@ public class ConnectionPoolTest extends PvmTestCase {
   
   public void testMyBatisConnectionPoolProperlyConfigured() {
     ProcessEngineConfigurationImpl config = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
-      .createProcessEngineConfigurationFromResource("org/activiti/engine/test/db/connection-pool.activiti.cfg.xml");
+      .createProcessEngineConfigurationFromResource("org/activiti5/engine/test/db/connection-pool.activiti.cfg.xml");
     
     config.buildProcessEngine();
     

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/DatabaseTablePrefixTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import java.sql.Connection;
 
@@ -76,7 +76,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
     try {
       engine1.getRepositoryService()
         .createDeployment()
-        .addClasspathResource("org/activiti/engine/test/db/oneJobProcess.bpmn20.xml")
+        .addClasspathResource("org/activiti5/engine/test/db/oneJobProcess.bpmn20.xml")
         .deploy();
 
       assertEquals(1, engine1.getRepositoryService().createDeploymentQuery().count());

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/DuplicateVariableInsertTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/GetVariableLocalTask.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import org.activiti5.engine.RuntimeService;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/IdGeneratorDataSource.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import org.apache.ibatis.datasource.pooled.PooledDataSource;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/IdGeneratorDataSourceDoNothing.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import org.activiti5.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/IdGeneratorDataSourceTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -10,7 +10,7 @@
 public class IdGeneratorDataSourceTest extends ResourceActivitiTestCase {
 
   public IdGeneratorDataSourceTest() {
-    super("org/activiti/engine/test/db/IdGeneratorDataSourceTest.activiti.cfg.xml");
+    super("org/activiti5/engine/test/db/IdGeneratorDataSourceTest.activiti.cfg.xml");
   }
 
   @Deployment

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/MetaDataTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/ProcessInstanceSuspensionTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import java.util.Calendar;
 import java.util.Date;
@@ -24,7 +24,7 @@
  */
 public class ProcessInstanceSuspensionTest extends PluggableActivitiTestCase {
 
-  @Deployment(resources={"org/activiti/engine/test/db/oneJobProcess.bpmn20.xml"})
+  @Deployment(resources={"org/activiti5/engine/test/db/oneJobProcess.bpmn20.xml"})
   public void testJobsNotVisisbleToAcquisitionIfInstanceSuspended() {
     
     ProcessDefinition pd = repositoryService.createProcessDefinitionQuery().singleResult();    
@@ -49,7 +49,7 @@ public void testJobsNotVisisbleToAcquisitionIfInstanceSuspended() {
     assertEquals(0, acquiredJobs.size());    
   }
   
-  @Deployment(resources={"org/activiti/engine/test/db/oneJobProcess.bpmn20.xml"})
+  @Deployment(resources={"org/activiti5/engine/test/db/oneJobProcess.bpmn20.xml"})
   public void testJobsNotVisisbleToAcquisitionIfDefinitionSuspended() {
     
     ProcessDefinition pd = repositoryService.createProcessDefinitionQuery().singleResult();    

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/SetLocalVariableTask.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/db/VariableScopeTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.db;
+package org.activiti5.engine.test.db;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/el/ExecutionTestVariable.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.el;
+package org.activiti5.engine.test.el;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/el/ExpressionManagerTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.el;
+package org.activiti5.engine.test.el;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/helper/PassThroughServiceTask.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.helper;
+package org.activiti5.engine.test.helper;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricActivityInstanceTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.history;
+package org.activiti5.engine.test.history;
 
 import java.util.List;
 
@@ -185,8 +185,8 @@ public void testHistoricActivityInstanceProperties() {
   }
   
   @Deployment(resources = {
-          "org/activiti/engine/test/history/calledProcess.bpmn20.xml",
-          "org/activiti/engine/test/history/HistoricActivityInstanceTest.testCallSimpleSubProcess.bpmn20.xml"
+          "org/activiti5/engine/test/history/calledProcess.bpmn20.xml",
+          "org/activiti5/engine/test/history/HistoricActivityInstanceTest.testCallSimpleSubProcess.bpmn20.xml"
         })
   public void testHistoricActivityInstanceCalledProcessId() {    
     runtimeService.startProcessInstanceByKey("callSimpleSubProcess");

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.history;
+package org.activiti5.engine.test.history;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricTaskInstanceUpdateTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.history;
+package org.activiti5.engine.test.history;
 
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.runtime.ProcessInstance;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/Noop.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.history;
+package org.activiti5.engine.test.history;
 
 import org.activiti5.engine.impl.pvm.PvmTransition;
 import org.activiti5.engine.impl.pvm.delegate.ActivityBehavior;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/SerializableVariable.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.history;
+package org.activiti5.engine.test.history;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/AsyncExecutorTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import java.util.Date;
 import java.util.concurrent.Callable;
@@ -307,7 +307,7 @@ private void cleanup(ProcessEngine processEngine) {
 	}
 	
 	private String deploy(ProcessEngine processEngine, String resource) {
-		return processEngine.getRepositoryService().createDeployment().addClasspathResource("org/activiti/engine/test/jobexecutor/" + resource).deploy().getId();
+		return processEngine.getRepositoryService().createDeployment().addClasspathResource("org/activiti5/engine/test/jobexecutor/" + resource).deploy().getId();
 	}
 
 	private void waitForAllJobsBeingExecuted(ProcessEngine processEngine) {

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/JobExecutorCmdHappyTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import java.util.Date;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/JobExecutorFailRetryTest.java
Patch:
@@ -10,10 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Saeid Mirzaei

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/JobExecutorTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import java.util.Calendar;
 import java.util.Date;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/JobExecutorTestCase.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import java.util.Date;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/RetryFailingDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/TweetExceptionHandler.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/jobexecutor/TweetHandler.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.jobexecutor;
+package org.activiti5.engine.test.jobexecutor;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/json/JsonTest.java
Patch:
@@ -11,18 +11,18 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.json;
+package org.activiti5.engine.test.json;
 
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.history.HistoricVariableInstance;
 import org.activiti5.engine.impl.history.HistoryLevel;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ArrayNode;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/logging/mdc/MDCLoggingTest.java
Patch:
@@ -1,11 +1,11 @@
-package org.activiti.engine.test.logging.mdc;
+package org.activiti5.engine.test.logging.mdc;
 
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti5.engine.test.Deployment;
 import org.apache.log4j.Appender;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/logging/mdc/MemoryLogAppender.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.logging.mdc;
+package org.activiti5.engine.test.logging.mdc;
 
 import java.io.StringWriter;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/logging/mdc/TestService.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.logging.mdc;
+package org.activiti5.engine.test.logging.mdc;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/EventCollector.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm;
+package org.activiti5.engine.test.pvm;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/PvmProcessInstanceEndTest.java
Patch:
@@ -11,10 +11,8 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm;
+package org.activiti5.engine.test.pvm;
 
-import org.activiti.engine.test.pvm.activities.Automatic;
-import org.activiti.engine.test.pvm.activities.WaitState;
 import org.activiti5.engine.impl.pvm.ProcessDefinitionBuilder;
 import org.activiti5.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti5.engine.impl.pvm.PvmProcessInstance;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/PvmVariablesTest.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.pvm;
+package org.activiti5.engine.test.pvm;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.test.pvm.activities.WaitState;
 import org.activiti5.engine.impl.pvm.ProcessDefinitionBuilder;
 import org.activiti5.engine.impl.pvm.PvmExecution;
 import org.activiti5.engine.impl.pvm.PvmProcessDefinition;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/Automatic.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/EmbeddedSubProcess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/End.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import org.activiti5.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/EventScopeCreatingSubprocess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/ParallelGateway.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/ReusableSubProcess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/WaitState.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import org.activiti5.engine.impl.pvm.PvmTransition;
 import org.activiti5.engine.impl.pvm.delegate.ActivityExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/pvm/activities/While.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.pvm.activities;
+package org.activiti5.engine.test.pvm.activities;
 
 import org.activiti5.engine.impl.pvm.PvmTransition;
 import org.activiti5.engine.impl.pvm.delegate.ActivityBehavior;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/regression/ActivitiTestCaseProcessValidator.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.regression;
+package org.activiti5.engine.test.regression;
 import java.util.ArrayList;
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/regression/DeleteProcessInstanceTest.java
Patch:
@@ -1,16 +1,16 @@
-package org.activiti.engine.test.regression;
+package org.activiti5.engine.test.regression;
 
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.history.HistoricProcessInstance;
 import org.activiti5.engine.impl.history.HistoryLevel;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.runtime.Execution;
 import org.activiti5.engine.runtime.Job;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.Task;
-import org.activiti5.engine.test.Deployment;
 //SLF4J
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/regression/ProcessValidationExecutedAfterDeployTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.regression;
+package org.activiti5.engine.test.regression;
 import java.util.List;
 
 import org.activiti.validation.ProcessValidator;
@@ -55,7 +55,7 @@ public void testGetLatestProcessDefinitionTextByKey() {
   	
   	disableValidation();
   	repositoryService.createDeployment()
-  		.addClasspathResource("org/activiti/engine/test/regression/ProcessValidationExecutedAfterDeployTest.bpmn20.xml")
+  		.addClasspathResource("org/activiti5/engine/test/regression/ProcessValidationExecutedAfterDeployTest.bpmn20.xml")
   		.deploy();
   	enableValidation();
   	clearDeploymentCache();
@@ -80,7 +80,7 @@ public void testGetStartFormData() {
   	
   	disableValidation();
   	repositoryService.createDeployment()
-  		.addClasspathResource("org/activiti/engine/test/regression/ProcessValidationExecutedAfterDeployTest.bpmn20.xml")
+  		.addClasspathResource("org/activiti5/engine/test/regression/ProcessValidationExecutedAfterDeployTest.bpmn20.xml")
   		.deploy();
   	enableValidation();
   	clearDeploymentCache();

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/regression/RegressionTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.regression;
+package org.activiti5.engine.test.regression;
 
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 
@@ -28,8 +28,8 @@ public void testAct1623() throws Exception {
    
     // Deploy processes
     String deploymentId = repositoryService.createDeployment()
-      .addClasspathResource("org/activiti/engine/test/regression/act1623-processOne.bpmn")
-      .addClasspathResource("org/activiti/engine/test/regression/act1623-processTwo.bpmn")
+      .addClasspathResource("org/activiti5/engine/test/regression/act1623-processOne.bpmn")
+      .addClasspathResource("org/activiti5/engine/test/regression/act1623-processTwo.bpmn")
       .deploy()
       .getId();
     

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/regression/ThrowBpmnError.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.engine.test.regression;
+package org.activiti5.engine.test.regression;
 
 import org.activiti5.engine.delegate.BpmnError;
 import org.activiti5.engine.delegate.DelegateExecution;

File: modules/activiti5-test/src/test/java/org/activiti5/engine/test/util/TestProcessUtil.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.test.util;
+package org.activiti5.engine.test.util;
 
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.EndEvent;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/authorization/StartAuthorizationTest.java
Patch:
@@ -12,18 +12,18 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.authorization;
+package org.activiti5.examples.bpmn.authorization;
 
 import java.util.List;
 
+import org.activiti.engine.test.Deployment;
 import org.activiti5.engine.IdentityService;
 import org.activiti5.engine.identity.Group;
 import org.activiti5.engine.identity.User;
 import org.activiti5.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti5.engine.repository.ProcessDefinition;
 import org.activiti5.engine.runtime.ProcessInstance;
 import org.activiti5.engine.task.IdentityLink;
-import org.activiti5.engine.test.Deployment;
 
 /**
  * @author Saeid Mirzaei

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/callactivity/CallActivityTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.callactivity;
+package org.activiti5.examples.bpmn.callactivity;
 
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
@@ -26,8 +26,8 @@
 public class CallActivityTest extends PluggableActivitiTestCase {
 
   @Deployment(resources={
-    "org/activiti/examples/bpmn/callactivity/orderProcess.bpmn20.xml",
-    "org/activiti/examples/bpmn/callactivity/checkCreditProcess.bpmn20.xml"       
+    "org/activiti5/examples/bpmn/callactivity/orderProcess.bpmn20.xml",
+    "org/activiti5/examples/bpmn/callactivity/checkCreditProcess.bpmn20.xml"       
   })
   public void testOrderProcessWithCallActivity() {
     // After the process has started, the 'verify credit history' task should be active

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.event.error;
+package org.activiti5.examples.bpmn.event.error;
 
 import java.util.HashMap;
 import java.util.List;
@@ -41,7 +41,7 @@ protected void tearDown() throws Exception {
     super.tearDown();
   }
   
-  @Deployment(resources = {"org/activiti/examples/bpmn/event/error/reviewSalesLead.bpmn20.xml"})
+  @Deployment(resources = {"org/activiti5/examples/bpmn/event/error/reviewSalesLead.bpmn20.xml"})
   public void testReviewSalesLeadProcess() {
     
     // After starting the process, a task should be assigned to the 'initiator' (normally set by GUI)

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.event.timer;
+package org.activiti5.examples.bpmn.event.timer;
 
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/CurrentActivityExecutionListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/CustomFlowBean.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/CustomFlowExecutionListenerTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.util.HashMap;
 import java.util.List;
@@ -26,10 +26,10 @@
 public class CustomFlowExecutionListenerTest extends ResourceActivitiTestCase {
   
   public CustomFlowExecutionListenerTest() {
-    super("org/activiti/examples/bpmn/executionlistener/custom.flow.parse.handler.activiti.cfg.xml");
+    super("org/activiti5/examples/bpmn/executionlistener/custom.flow.parse.handler.activiti.cfg.xml");
   }
 
-	@Deployment(resources = { "org/activiti/examples/bpmn/executionlistener/CustomFlowExecutionListenerTest.bpmn20.xml" })
+	@Deployment(resources = { "org/activiti5/examples/bpmn/executionlistener/CustomFlowExecutionListenerTest.bpmn20.xml" })
 	public void testScriptExecutionListener() {
 	  Map<String, Object> variableMap = new HashMap<String, Object>();
 	  variableMap.put("customFlowBean", new CustomFlowBean());

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/CustomSequenceFlowBpmnParseHandler.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.util.List;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/CustomSetConditionsExecutionListener.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/ExampleExecutionListenerOne.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/ExampleExecutionListenerPojo.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/ExampleExecutionListenerTwo.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/ExampleFieldInjectedExecutionListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.ExecutionListener;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/RecorderExecutionListener.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/executionlistener/ScriptExecutionListenerTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.executionlistener;
+package org.activiti5.examples.bpmn.executionlistener;
 
 import java.util.HashMap;
 import java.util.List;
@@ -27,7 +27,7 @@
  */
 public class ScriptExecutionListenerTest extends PluggableActivitiTestCase {
 
-	@Deployment(resources = { "org/activiti/examples/bpmn/executionlistener/ScriptExecutionListenerTest.bpmn20.xml" })
+	@Deployment(resources = { "org/activiti5/examples/bpmn/executionlistener/ScriptExecutionListenerTest.bpmn20.xml" })
 	public void testScriptExecutionListener() {
 		ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("scriptExecutionListenerProcess");     
 

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/expression/UelExpressionTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.expression;
+package org.activiti5.examples.bpmn.expression;
 
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/expression/UelExpressionTestOrder.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.expression;
+package org.activiti5.examples.bpmn.expression;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.gateway;
+package org.activiti5.examples.bpmn.gateway;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/gateway/InclusiveGatewayTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.gateway;
+package org.activiti5.examples.bpmn.gateway;
 
 import java.util.HashMap;
 import java.util.List;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/gateway/ParallelGatewayTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.gateway;
+package org.activiti5.examples.bpmn.gateway;
 
 import java.util.List;
 

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/mail/EmailSendTaskTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.mail;
+package org.activiti5.examples.bpmn.mail;
 
 import java.util.Date;
 import java.util.HashMap;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.mail;
+package org.activiti5.examples.bpmn.mail;
 
 import java.util.Date;
 import java.util.HashMap;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/receivetask/ReceiveTaskTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.receivetask;
+package org.activiti5.examples.bpmn.receivetask;
 
 import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.ProcessInstance;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/scripttask/ScriptTaskTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.bpmn.scripttask;
+package org.activiti5.examples.bpmn.scripttask;
 
 import groovy.lang.MissingPropertyException;
 
@@ -81,7 +81,7 @@ public void testAutoStoreVariables() {
   public void testNoScriptProvided() {
     try {
       repositoryService.createDeployment()
-        .addClasspathResource("org/activiti/examples/bpmn/scripttask/ScriptTaskTest.testNoScriptProvided.bpmn20.xml")
+        .addClasspathResource("org/activiti5/examples/bpmn/scripttask/ScriptTaskTest.testNoScriptProvided.bpmn20.xml")
         .deploy();
     } catch (ActivitiException e) {
       assertTextPresent("No script provided", e.getMessage());

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/scripttask/ScriptTaskTestPojo.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.examples.bpmn.scripttask;
+package org.activiti5.examples.bpmn.scripttask;
 
 import java.io.Serializable;
 

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/servicetask/BackwardsCompatibleExpressionDelegate.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.servicetask;
+package org.activiti5.examples.bpmn.servicetask;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/servicetask/BusinessKeyCheckJavaDelegate.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.servicetask;
+package org.activiti5.examples.bpmn.servicetask;
 
 import org.activiti5.engine.delegate.DelegateExecution;
 import org.activiti5.engine.delegate.JavaDelegate;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/servicetask/ExpressionServiceTaskTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.examples.bpmn.servicetask;
+package org.activiti5.examples.bpmn.servicetask;
 
 import java.util.HashMap;
 import java.util.Map;

File: modules/activiti5-test/src/test/java/org/activiti5/examples/bpmn/servicetask/GenderBean.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.examples.bpmn.servicetask;
+package org.activiti5.examples.bpmn.servicetask;
 
 import java.io.Serializable;
 

File: modules/activiti-crystalball/src/test/java/org/activiti/crystalball/simulator/impl/MultiInstanceScriptEventHandlerTest.java
Patch:
@@ -22,7 +22,7 @@ public MultiInstanceScriptEventHandlerTest() {
   public void testSequentialSimulationRun() throws Exception {
     ProcessInstance simulationExperiment = runtimeService.startProcessInstanceByKey("multiInstanceResultVariablesSimulationRun");
     // all simulationManager executions are finished
-    assertEquals(1, runtimeService.createExecutionQuery().count());
+    assertEquals(2, runtimeService.createExecutionQuery().count());
 
     // simulation run check - process variables has to be set to the value. "Hello worldX!"
     String simulationRunResult = (String) runtimeService.getVariable(simulationExperiment.getProcessInstanceId(), "simulationRunResult-0");
@@ -37,7 +37,8 @@ public void testSequentialSimulationRun() throws Exception {
     assertThat(simulationRunResult, is("Hello world4!"));
 
     // process end
-    runtimeService.signal(simulationExperiment.getId());
+    runtimeService.trigger(runtimeService.createExecutionQuery()
+        .onlyChildExecutions().singleResult().getId());
     // no process instance is running
     assertEquals(0, runtimeService.createExecutionQuery().count());
   }

File: modules/activiti-crystalball/src/test/java/org/activiti/crystalball/simulator/impl/ScriptEventHandlerTest.java
Patch:
@@ -22,14 +22,15 @@ public ScriptEventHandlerTest() {
   public void testSimpleScriptExecution() throws Exception {
     ProcessInstance simulationExperiment = runtimeService.startProcessInstanceByKey("resultVariableSimulationRun");
     // all simulationManager executions are finished
-    assertEquals(1, runtimeService.createExecutionQuery().count());
+    assertEquals(2, runtimeService.createExecutionQuery().count());
 
     String simulationRunResult = (String) runtimeService.getVariable(simulationExperiment.getProcessInstanceId(), "simulationRunResult");
     // simulation run check - process variable has to be set to the value.
     assertThat(simulationRunResult, is("Hello world!"));
 
     // process end
-    runtimeService.trigger(simulationExperiment.getId());
+    runtimeService.trigger(runtimeService.createExecutionQuery().processInstanceId(simulationExperiment.getId())
+        .onlyChildExecutions().singleResult().getId());
     // no process instance is running
     assertEquals( 0, runtimeService.createExecutionQuery().count());
   }

File: modules/activiti-camel/src/main/java/org/activiti/camel/CamelBehaviour.java
Patch:
@@ -73,7 +73,7 @@ private CamelContext getContext(ActivityExecution execution) {
         return ctx;
       }
     }
-    throw new ActivitiException("Could not find camel context for " + processName + " names are " + names);
+    throw new ActivitiException("Could not find camel context for " + processKey + " names are " + names);
   }
 
   private Exchange createExchange(ActivityExecution activityExecution, ActivitiEndpoint endpoint) {
@@ -91,7 +91,7 @@ private Exchange createExchange(ActivityExecution activityExecution, ActivitiEnd
   }
 
   private String getProcessKey(ActivityExecution execution) {
-    Process process = ProcessDefinitionUtil.getProcess(execution.getProcessDefinitionId());
+    org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(execution.getProcessDefinitionId());
     return process.getId();
   }
 

File: modules/activiti-crystalball/src/test/java/org/activiti/crystalball/simulator/impl/ScriptEventHandlerTest.java
Patch:
@@ -29,7 +29,7 @@ public void testSimpleScriptExecution() throws Exception {
     assertThat(simulationRunResult, is("Hello world!"));
 
     // process end
-    runtimeService.signal(simulationExperiment.getId());
+    runtimeService.trigger(simulationExperiment.getId());
     // no process instance is running
     assertEquals( 0, runtimeService.createExecutionQuery().count());
   }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/bpmn/SignalEventTest.java
Patch:
@@ -80,9 +80,6 @@ public void testSignalCatchBoundaryWithVariables() {
     assertEquals("catchSignal-visited (was catchSignal)", runtimeService.getVariable(piCatchSignal.getId(), "processName"));
     assertEquals("throwSignal-visited (was throwSignal)", runtimeService.getVariable(piThrowSignal.getId(), "processName"));
 
-    // clean up
-    runtimeService.trigger(piCatchSignal.getId());
-    runtimeService.trigger(piThrowSignal.getId());
   }
 
 }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/context/ThreadContextAssociationTest.java
Patch:
@@ -30,15 +30,13 @@ public class ThreadContextAssociationTest extends CdiActivitiTestCase {
   public void testBusinessProcessScopedWithJobExecutor() throws InterruptedException {
     String pid = runtimeService.startProcessInstanceByKey("processkey").getId();
 
-    waitForJobExecutorToProcessAllJobs(5000l, 25l);
+    waitForJobExecutorToProcessAllJobs(50000000L, 100L);
 
     assertNull(managementService.createJobQuery().singleResult());
 
     ProcessScopedMessageBean messageBean = (ProcessScopedMessageBean) runtimeService.getVariable(pid, "processScopedMessageBean");
     assertEquals("test", messageBean.getMessage());
 
-    runtimeService.trigger(pid);
-
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorThrowingEventListener.java
Patch:
@@ -33,9 +33,7 @@ public void onEvent(ActivitiEvent event) {
     if (isValidEvent(event)) {
       ExecutionEntity execution = null;
 
-      if (Context.isExecutionContextActive()) {
-        execution = Context.getExecutionContext().getExecution();
-      } else if (event.getExecutionId() != null) {
+      if (event.getExecutionId() != null) {
         // Get the execution based on the event's execution ID instead
         execution = Context.getCommandContext().getExecutionEntityManager().findExecutionById(event.getExecutionId());
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/ExpressionManager.java
Patch:
@@ -116,9 +116,7 @@ protected ELResolver createElResolver(VariableScope variableScope) {
     elResolver.add(new ArrayELResolver());
     elResolver.add(new ListELResolver());
     elResolver.add(new MapELResolver());
-    elResolver.add(new DynamicBeanPropertyELResolver(ItemInstance.class, "getFieldValue", "setFieldValue")); // TODO:
-                                                                                                             // needs
-                                                                                                             // verification
+    elResolver.add(new DynamicBeanPropertyELResolver(ItemInstance.class, "getFieldValue", "setFieldValue")); // TODO: needs verification
     elResolver.add(new BeanELResolver());
     return elResolver;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java
Patch:
@@ -208,9 +208,6 @@ public void exception(Throwable exception) {
       this.exception = exception;
 
     } else {
-      if (Context.isExecutionContextActive()) {
-        LogMDC.putMDCExecution(Context.getExecutionContext().getExecution());
-      }
       log.error("masked exception in command context. for root cause, see below as it will be rethrown later.", exception);
       LogMDC.clear();
     }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/event/EventNotificationTest.java
Patch:
@@ -57,15 +57,16 @@ public void testSelectEventsPerActivity() {
     TestEventListener listenerBean = getBeanInstance(TestEventListener.class);
     listenerBean.reset();
 
-    assertEquals(0, listenerBean.getEndActivityService1());
+    assertEquals(0, listenerBean.getEndActivityService1WithLoopCounter());
+    assertEquals(0, listenerBean.getEndActivityService1WithoutLoopCounter());
     assertEquals(0, listenerBean.getStartActivityService1WithoutLoopCounter());
     assertEquals(0, listenerBean.getTakeTransitiont1());
 
     // start the process
     runtimeService.startProcessInstanceByKey("process1");
 
     // assert
-    assertEquals(1, listenerBean.getEndActivityService1());
+    assertEquals(1, listenerBean.getEndActivityService1WithoutLoopCounter());
     assertEquals(1, listenerBean.getStartActivityService1WithoutLoopCounter());
     assertEquals(1, listenerBean.getTakeTransitiont1());
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -73,9 +73,7 @@ public void leave(ActivityExecution execution) {
     setLoopVariable(execution, NUMBER_OF_COMPLETED_INSTANCES, nrOfCompletedInstances);
     logLoopDetails(execution, "instance completed", loopCounter, nrOfCompletedInstances, nrOfActiveInstances, nrOfInstances);
     
-    if (loopCounter != nrOfInstances && !completionConditionSatisfied(execution)) {
-      callActivityEndListeners(execution);
-    }
+    callActivityEndListeners(execution);
     
     //executeCompensationBoundaryEvents(execution.getCurrentFlowElement(), execution);
 

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -332,7 +332,7 @@ public Task startTask(String taskId) {
       throw new ActivitiCdiException("Cannot resume task with id '" + taskId + "', no such task.");
     }
     associationManager.setTask(task);
-    associateExecutionById(task.getExecutionId());
+    associateExecutionById(task.getProcessInstanceId());
     return task;
   }
 

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/impl/event/CdiExecutionListener.java
Patch:
@@ -31,6 +31,7 @@
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 
 /**
@@ -74,7 +75,7 @@ public void notify(DelegateExecution execution) {
   }
 
   protected BusinessProcessEvent createEvent(DelegateExecution execution) {
-    ProcessDefinition processDefinition = Context.getExecutionContext().getProcessDefinition();
+    ProcessDefinition processDefinition = ProcessDefinitionUtil.getProcessDefinitionEntity(execution.getProcessDefinitionId());
     Date now = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
     return new CdiBusinessProcessEvent(activityId, transitionName, processDefinition, execution, type, execution.getProcessInstanceId(), execution.getId(), now);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -104,6 +104,7 @@ public void leave(ActivityExecution execution) {
 
     if (resolveNrOfInstances(execution) == 0) {
       // Empty collection, just leave.
+      removeLocalLoopVariable(execution, getCollectionElementIndexVariable());
       super.leave(execution);
     }
 
@@ -195,6 +196,7 @@ public void leave(ActivityExecution execution) {
       }
 
     } else {
+      removeLocalLoopVariable(execution, getCollectionElementIndexVariable());
       super.leave(executionEntity);
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -108,6 +108,7 @@ public void leave(ActivityExecution execution) {
         ScopeUtil.createCopyOfSubProcessExecutionForCompensation(executionEntity, executionEntity.getParent());
       }
       
+      removeLocalLoopVariable(execution, getCollectionElementIndexVariable());
       super.leave(execution);
       
     } else {

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/bpmn/SignalEventTest.java
Patch:
@@ -81,8 +81,8 @@ public void testSignalCatchBoundaryWithVariables() {
     assertEquals("throwSignal-visited (was throwSignal)", runtimeService.getVariable(piThrowSignal.getId(), "processName"));
 
     // clean up
-    runtimeService.signal(piCatchSignal.getId());
-    runtimeService.signal(piThrowSignal.getId());
+    runtimeService.trigger(piCatchSignal.getId());
+    runtimeService.trigger(piThrowSignal.getId());
   }
 
 }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/context/ThreadContextAssociationTest.java
Patch:
@@ -37,7 +37,7 @@ public void testBusinessProcessScopedWithJobExecutor() throws InterruptedExcepti
     ProcessScopedMessageBean messageBean = (ProcessScopedMessageBean) runtimeService.getVariable(pid, "processScopedMessageBean");
     assertEquals("test", messageBean.getMessage());
 
-    runtimeService.signal(pid);
+    runtimeService.trigger(pid);
 
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -130,7 +130,7 @@ public void deploy(DeploymentEntity deployment, Map<String, Object> deploymentSe
               try {
                   byte[] diagramBytes = IoUtil.readInputStream(processEngineConfiguration.
                     getProcessDiagramGenerator().generateDiagram(bpmnParse.getBpmnModel(), "png", processEngineConfiguration.getActivityFontName(),
-                        processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getClassLoader()), null);
+                        processEngineConfiguration.getLabelFontName(),processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader()), null);
                   diagramResourceName = getProcessImageResourceName(resourceName, processDefinition.getKey(), "png");
                   createResource(diagramResourceName, diagramBytes, deployment);
               } catch (Throwable t) { // if anything goes wrong, we don't store the image (the process will still be executable).

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionImageStreamResourceBuilder.java
Patch:
@@ -81,7 +81,7 @@ public StreamResource buildStreamResource(ProcessInstance processInstance, Repos
         BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());
         InputStream definitionImageStream = diagramGenerator.generateDiagram(bpmnModel, "png",
           runtimeService.getActiveActivityIds(processInstance.getId()), Collections.<String>emptyList(), 
-          processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), 
+          processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), processEngineConfig.getAnnotationFontName(),  
           processEngineConfig.getClassLoader(), 1.0);
               
         if(definitionImageStream != null) {
@@ -114,7 +114,7 @@ public StreamResource buildStreamResource(String processInstanceId, String proce
       BpmnModel bpmnModel = repositoryService.getBpmnModel(processDefinitionId);
       InputStream definitionImageStream = diagramGenerator.generateDiagram(bpmnModel, "png",
         runtimeService.getActiveActivityIds(processInstanceId), Collections.<String>emptyList(), 
-        processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), 
+        processEngineConfig.getActivityFontName(), processEngineConfig.getLabelFontName(), processEngineConfig.getAnnotationFontName(),  
         processEngineConfig.getClassLoader(), 1.0);
       
       StreamSource streamSource = new InputStreamStreamSource(definitionImageStream);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/SimpleTableEditor.java
Patch:
@@ -251,7 +251,7 @@ public InputStream getStream() {
         final ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();
 
         return diagramGenerator.generateDiagram(workflowDefinitionConversion.getBpmnModel(), "png", processEngineConfiguration.getActivityFontName(),
-            processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getClassLoader());
+            processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader());
       }
     };
     
@@ -308,7 +308,7 @@ protected void save() {
       // TODO: we should really allow the service to take an inputstream as input. Now we load it into memory ...
       repositoryService.addModelEditorSourceExtra(model.getId(), IOUtils.toByteArray(
           diagramGenerator.generateDiagram(conversion.getBpmnModel(), "png", processEngineConfiguration.getActivityFontName(),
-              processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getClassLoader())));
+              processEngineConfiguration.getLabelFontName(), processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader())));
     } catch (IOException e) {
       logger.warn("Could not generate process image. Image is not stored and will not be shown.", e);
     }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceDiagramResource.java
Patch:
@@ -58,7 +58,7 @@ public ResponseEntity<byte[]> getProcessInstanceDiagram(@PathVariable String pro
       ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();
       InputStream resource = diagramGenerator.generateDiagram(bpmnModel, "png", runtimeService.getActiveActivityIds(processInstance.getId()),
           Collections.<String>emptyList(), processEngineConfiguration.getActivityFontName(), processEngineConfiguration.getLabelFontName(),
-          processEngineConfiguration.getClassLoader(), 1.0);
+          processEngineConfiguration.getAnnotationFontName(), processEngineConfiguration.getClassLoader(), 1.0);
 
       HttpHeaders responseHeaders = new HttpHeaders();
       responseHeaders.set("Content-Type", "image/png");

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceResourceTest.java
Patch:
@@ -51,7 +51,6 @@ public void testGetProcessInstance() throws Exception {
     assertNotNull(responseNode);
     assertEquals(processInstance.getId(), responseNode.get("id").textValue());
     assertEquals("myBusinessKey", responseNode.get("businessKey").textValue());
-    assertEquals("processTask", responseNode.get("activityId").textValue());
     assertFalse(responseNode.get("suspended").booleanValue());
     assertEquals("", responseNode.get("tenantId").textValue());
 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskCollectionResourceTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 
 import org.activiti.engine.impl.cmd.ChangeDeploymentTenantIdCmd;
+import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.DelegationState;
 import org.activiti.engine.task.IdentityLinkType;
@@ -212,7 +213,8 @@ public void testGetTasks() throws Exception {
       assertResultsPresentInDataResponse(url, processTask.getId());
 
       // Execution filtering
-      url = RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?executionId=" + processInstance.getId();
+      Execution taskExecution = runtimeService.createExecutionQuery().activityId("processTask").singleResult();
+      url = RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_COLLECTION) + "?executionId=" + taskExecution.getId();
       assertResultsPresentInDataResponse(url, processTask.getId());
 
       // Process instance businesskey filtering

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.List;
 
+import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.DelegationState;
 import org.activiti.engine.task.IdentityLinkType;
@@ -177,7 +178,8 @@ public void testQueryTasks() throws Exception {
 
       // Execution filtering
       requestNode.removeAll();
-      requestNode.put("executionId", processInstance.getId());
+      Execution taskExecution = runtimeService.createExecutionQuery().activityId("processTask").singleResult();
+      requestNode.put("executionId", taskExecution.getId());
       assertResultsPresentInPostDataResponse(url, requestNode, processTask.getId());
 
       // Process instance businesskey filtering

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskVariablesCollectionResourceTest.java
Patch:
@@ -192,7 +192,6 @@ public void testCreateSingleTaskVariable() throws Exception {
     assertNull(responseNode.get("valueUrl"));
 
     assertTrue(runtimeService.hasVariable(task.getExecutionId(), "myVariable"));
-    assertEquals("Another simple string value", runtimeService.getVariableLocal(task.getExecutionId(), "myVariable"));
 
     // Create a new scope-less variable, which defaults to local variables
     variableNode.removeAll();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/CallActivityParseHandler.java
Patch:
@@ -33,6 +33,7 @@ protected void executeParse(BpmnParse bpmnParse, CallActivity callActivity) {
     ActivityImpl activity = createActivityOnCurrentScope(bpmnParse, callActivity, BpmnXMLConstants.ELEMENT_CALL_ACTIVITY);
     activity.setScope(true);
     activity.setAsync(callActivity.isAsynchronous());
+    activity.setExclusive(!callActivity.isNotExclusive());
     activity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createCallActivityBehavior(callActivity));
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/DefaultActiviti5CompatibilityHandlerFactory.java
Patch:
@@ -35,7 +35,7 @@ public Activiti5CompatibilityHandler createActiviti5CompatibilityHandler() {
       Activiti5CompatibilityHandler handler = (Activiti5CompatibilityHandler) Class.forName(compatibilityHandlerClassName).newInstance();
       return handler;
     } catch (Exception e) {
-      logger.info("Activiti 5 compatibility handler implementation not found or error during instantiation. " + "Error : " + e.getMessage() + ". Activiti 5 backwards compatibility disabled.");
+      logger.info("Activiti 5 compatibility handler implementation not found or error during instantiation : " + e.getMessage() + ". Activiti 5 backwards compatibility disabled.");
     }
     return null;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricActivityInstanceEntity.java
Patch:
@@ -127,7 +127,7 @@ public Date getTime() {
 
   @Override
   public String toString() {
-    return "HistoricActivityInstanceEntity[activityId=" + activityId + ", activityName=" + activityName + "]";
+    return "HistoricActivityInstanceEntity[id=" + id + ", activityId=" + activityId + ", activityName=" + activityName + "]";
   }
 
 }

File: modules/activiti-engine/src/test/java/org/activiti6/AbstractActvitiTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.activiti.engine.TaskService;
 import org.activiti.engine.cfg.ProcessEngineConfigurator;
 import org.activiti.engine.impl.ProcessEngineImpl;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.test.ActivitiRule;
 import org.activiti.engine.test.impl.logger.ProcessExecutionLoggerConfigurator;
 import org.h2.tools.Server;
@@ -39,6 +40,7 @@ public class AbstractActvitiTest {
   public ActivitiRule activitiRule = new ActivitiRule();
 
   protected static ProcessEngine cachedProcessEngine;
+  protected ProcessEngineConfigurationImpl processEngineConfiguration;
   protected RepositoryService repositoryService;
   protected RuntimeService runtimeService;
   protected TaskService taskService;
@@ -59,6 +61,7 @@ public void initProcessEngine() {
       }
     }
 
+    this.processEngineConfiguration = (ProcessEngineConfigurationImpl) cachedProcessEngine.getProcessEngineConfiguration();
     this.repositoryService = cachedProcessEngine.getRepositoryService();
     this.runtimeService = cachedProcessEngine.getRuntimeService();
     this.taskService = cachedProcessEngine.getTaskService();

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverterUtil.java
Patch:
@@ -302,8 +302,9 @@ public static void convertJsonToMessages(JsonNode objectNode, BpmnModel element)
   
   protected static void parseListeners(JsonNode listenersNode, BaseElement element, boolean isTaskListener) {  
     if (listenersNode == null) return;
-    
+    listenersNode = validateIfNodeIsTextual(listenersNode);
     for (JsonNode listenerNode : listenersNode) {
+      listenerNode = validateIfNodeIsTextual(listenerNode);
       JsonNode eventNode = listenerNode.get(PROPERTY_LISTENER_EVENT);
       if (eventNode != null && eventNode.isNull() == false && StringUtils.isNotEmpty(eventNode.asText())) {
         

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/SequenceFlowJsonConverter.java
Patch:
@@ -14,13 +14,11 @@
 
 import java.util.Map;
 
-import org.activiti.bpmn.model.Activity;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.ExtensionElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.FlowElementsContainer;
-import org.activiti.bpmn.model.Gateway;
 import org.activiti.bpmn.model.GraphicInfo;
 import org.activiti.bpmn.model.SequenceFlow;
 import org.apache.commons.lang3.StringUtils;

File: modules/activiti-diagram-rest/src/main/java/org/activiti/rest/diagram/services/BaseProcessDefinitionDiagramLayoutResource.java
Patch:
@@ -436,7 +436,7 @@ else if ("initial".equals(key)) {
 
         // If active activities nas no instance of this callActivity then add
         // last definition
-        if (processInstanceArray.size() == 0) {
+        if (processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())) {
           // Get last definition by key
           ProcessDefinition lastProcessDefinition = repositoryService
               .createProcessDefinitionQuery()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -325,7 +325,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
 		}
   }
   
-  public boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
+  public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
   	return bulkInsertableMap.get(persistentObjectClass);
   }
 

File: modules/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java
Patch:
@@ -776,6 +776,7 @@ protected void drawMultilineText(String text, int x, int y, int boxWidth, int bo
           }
           layouts.add(new TextLayout(lastLine, g.getFont(), g.getFontRenderContext()));
         }
+        break;
       } else {
         layouts.add(layout);
         lastLine = text.substring(previousPosition, measurer.getPosition());

File: modules/activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/CxfWSDLImporter.java
Patch:
@@ -61,7 +61,7 @@
  */
 public class CxfWSDLImporter implements XMLImporter {
     
-    protected static final String JAXB_BINDINGS_RESOURCE = "activiti-bindings.xjc";
+  protected static final String JAXB_BINDINGS_RESOURCE = "activiti-bindings.xjc";
 
   protected Map<String, WSService> wsServices = new HashMap<String, WSService>();
   protected Map<String, WSOperation> wsOperations = new HashMap<String, WSOperation>();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -299,7 +299,7 @@ public void testInvalidAddressWithoutExceptionVariableName() throws Exception {
   public static void assertEmailSend(WiserMessage emailMessage, boolean htmlMail, String subject, String message, String from, List<String> to, List<String> cc) throws IOException {
     try {
       MimeMessage mimeMessage = emailMessage.getMimeMessage();
-
+      System.out.println(mimeMessage.getContentType());
       if (htmlMail) {
         assertTrue(mimeMessage.getContentType().contains("multipart/mixed"));
       } else {

File: modules/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java
Patch:
@@ -256,6 +256,7 @@ public InputStream generateImage(String imageType) {
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     try {
       ImageIO.write(processDiagram, imageType, out);
+      
     } catch (IOException e) {
       throw new ActivitiImageException("Error while generating process image", e);
     } finally {
@@ -1147,7 +1148,7 @@ public void drawLabel(String text, GraphicInfo graphicInfo, boolean centered){
     	  Rectangle2D bb = tl.getBounds();
     	  double tX = graphicInfo.getX();
     	  if (centered) {
-    	    tX += (int) (graphicInfo.getWidth() / 2 - bb.getWidth() / 2);
+    	  	tX += (int) (graphicInfo.getWidth() / 2 - bb.getWidth() / 2);
     	  }
     	  tl.draw(g, (float) tX, textY);
     	  textY += tl.getDescent() + tl.getLeading() + (interline - 1.0f) * tl.getAscent();

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -55,6 +55,7 @@ public interface BpmnXMLConstants {
   public static final String ELEMENT_FLOWNODE_REF = "flowNodeRef";
   public static final String ATTRIBUTE_PROCESS_REF = "processRef";
   public static final String ELEMENT_RESOURCE = "resource";
+  
   public static final String ELEMENT_PROCESS = "process";
   public static final String ATTRIBUTE_PROCESS_EXECUTABLE = "isExecutable";
   public static final String ELEMENT_POTENTIAL_STARTER = "potentialStarter";
@@ -285,6 +286,7 @@ public interface BpmnXMLConstants {
   public static final String ELEMENT_RESOURCE_ASSIGNMENT = "resourceAssignmentExpression";
   public static final String ELEMENT_FORMAL_EXPRESSION = "formalExpression";
   public static final String ELEMENT_RESOURCE_REF = "resourceRef";
+  
   public static final String FAILED_JOB_RETRY_TIME_CYCLE = "failedJobRetryTimeCycle";
   public static final String MAP_EXCEPTION = "mapException";
   public static final String MAP_EXCEPTION_ERRORCODE = "errorCode";

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/constants/StencilConstants.java
Patch:
@@ -26,6 +26,7 @@ public interface StencilConstants {
 
   final String STENCIL_EVENT_END_NONE = "EndNoneEvent";
   final String STENCIL_EVENT_END_ERROR = "EndErrorEvent";
+  final String STENCIL_EVENT_END_CANCEL = "EndCancelEvent";
 
   final String STENCIL_SUB_PROCESS = "SubProcess";
   final String STENCIL_EVENT_SUB_PROCESS = "EventSubProcess";

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -155,6 +155,7 @@ public class BpmnJsonConverter implements EditorJsonConstants, StencilConstants,
 
         DI_CIRCLES.add(STENCIL_EVENT_END_NONE);
         DI_CIRCLES.add(STENCIL_EVENT_END_ERROR);
+        DI_CIRCLES.add(STENCIL_EVENT_END_CANCEL);
 
         DI_RECTANGLES.add(STENCIL_CALL_ACTIVITY);
         DI_RECTANGLES.add(STENCIL_SUB_PROCESS);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireAsyncJobsDueCmd.java
Patch:
@@ -41,7 +41,6 @@ public AcquiredJobEntities execute(CommandContext commandContext) {
     for (JobEntity job : jobs) {
       lockJob(commandContext, job, asyncExecutor.getAsyncJobLockTimeInMillis());
       acquiredJobs.addJob(job);
-      asyncExecutor.executeAsyncJob(job);
     }
 
     return acquiredJobs;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -55,15 +55,16 @@ public TimerEntity() {
   }
 
   public TimerEntity(TimerDeclarationImpl timerDeclaration) {
+    this();
     jobHandlerType = timerDeclaration.getJobHandlerType();
     jobHandlerConfiguration = timerDeclaration.getJobHandlerConfiguration();
     isExclusive = timerDeclaration.isExclusive();
     repeat = timerDeclaration.getRepeat();
     retries = timerDeclaration.getRetries();
-    this.jobType = "timer";
   }
 
   public TimerEntity(String jobHandlerType, String jobHandlerConfiguration, boolean isExclusive, int retries) {
+    this();
     this.jobHandlerType = jobHandlerType;
     this.jobHandlerConfiguration = jobHandlerConfiguration;
     this.isExclusive = isExclusive;
@@ -116,7 +117,6 @@ public void execute(CommandContext commandContext) {
         Date newTimer = calculateNextTimer();
         if (newTimer != null && isValidTime(newTimer)) {
           TimerEntity te = new TimerEntity(this);
-          System.out.println("-------AAP--->" + newTimer);
           te.setDuedate(newTimer);
           Context.getCommandContext().getJobEntityManager().schedule(te);
         }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -42,6 +42,9 @@ public class AttachmentEntity implements Attachment, PersistentObject, HasRevisi
   protected String userId;
   protected Date time;
 
+  public AttachmentEntity() {
+  }
+
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();
     persistentState.put("name", name);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CompensateEventSubscriptionEntity.java
Patch:
@@ -35,4 +35,4 @@ protected void processEventSync(Object payload) {
     delete();
     super.processEventSync(payload);
   }
-}
+}
\ No newline at end of file

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -42,6 +42,7 @@ public class HistoricDetailVariableInstanceUpdateEntity extends HistoricDetailEn
   protected Object cachedValue;
 
   protected HistoricDetailVariableInstanceUpdateEntity() {
+    this.detailType = "VariableUpdate";
   }
 
   public static HistoricDetailVariableInstanceUpdateEntity copyAndInsert(VariableInstanceEntity variableInstance) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricFormPropertyEntity.java
Patch:
@@ -27,6 +27,7 @@ public class HistoricFormPropertyEntity extends HistoricDetailEntity implements
   protected String propertyValue;
 
   public HistoricFormPropertyEntity() {
+    this.detailType = "FormProperty";
   }
 
   public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId, String propertyValue) {
@@ -40,6 +41,7 @@ public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId,
     this.propertyId = propertyId;
     this.propertyValue = propertyValue;
     this.time = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
+    this.detailType = "FormProperty";
 
     HistoricActivityInstanceEntity historicActivityInstance = Context.getCommandContext().getHistoryManager().findActivityInstance(execution, true, false);
     if (historicActivityInstance != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/SignalEventSubscriptionEntity.java
Patch:
@@ -31,7 +31,7 @@ public class SignalEventSubscriptionEntity extends EventSubscriptionEntity {
   public SignalEventSubscriptionEntity() {
     eventType = "signal";
   }
-
+  
   @Override
   public void setConfiguration(String configuration) {
     if (configuration != null && configuration.contains("{\"scope\":")) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/VariableType.java
Patch:
@@ -20,8 +20,8 @@ public interface VariableType {
   /**
    * name of variable type (limited to 100 characters length)
    */
-  String getTypeName();
-
+  public String getTypeName();
+  
   /**
    * <p>
    * Indicates if this variable type supports caching.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -790,7 +790,7 @@ protected void flushInserts() {
       }
     }
     
-    // Next, in case of custom entities or we've screwed up and forgotton some entity
+    // Next, in case of custom entities or we've screwed up and forgotten some entity
     if (insertedObjects.size() > 0) {
 	    for (Class<? extends PersistentObject> persistentObjectClass : insertedObjects.keySet()) {
       	flushPersistentObjects(persistentObjectClass, insertedObjects.get(persistentObjectClass));

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverterUtil.java
Patch:
@@ -302,8 +302,9 @@ public static void convertJsonToMessages(JsonNode objectNode, BpmnModel element)
   
   protected static void parseListeners(JsonNode listenersNode, BaseElement element, boolean isTaskListener) {  
     if (listenersNode == null) return;
-    
+    listenersNode = validateIfNodeIsTextual(listenersNode);
     for (JsonNode listenerNode : listenersNode) {
+      listenerNode = validateIfNodeIsTextual(listenerNode);
       JsonNode eventNode = listenerNode.get(PROPERTY_LISTENER_EVENT);
       if (eventNode != null && eventNode.isNull() == false && StringUtils.isNotEmpty(eventNode.asText())) {
         

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/SequenceFlowJsonConverter.java
Patch:
@@ -14,13 +14,11 @@
 
 import java.util.Map;
 
-import org.activiti.bpmn.model.Activity;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.ExtensionElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.FlowElementsContainer;
-import org.activiti.bpmn.model.Gateway;
 import org.activiti.bpmn.model.GraphicInfo;
 import org.activiti.bpmn.model.SequenceFlow;
 import org.apache.commons.lang3.StringUtils;

File: modules/activiti-diagram-rest/src/main/java/org/activiti/rest/diagram/services/BaseProcessDefinitionDiagramLayoutResource.java
Patch:
@@ -436,7 +436,7 @@ else if ("initial".equals(key)) {
 
         // If active activities nas no instance of this callActivity then add
         // last definition
-        if (processInstanceArray.size() == 0) {
+        if (processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())) {
           // Get last definition by key
           ProcessDefinition lastProcessDefinition = repositoryService
               .createProcessDefinitionQuery()

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/identity/IdentityServiceTest.java
Patch:
@@ -101,9 +101,9 @@ public void testUserPicture() {
     
     //interface defintion states that setting picture to null should delete it
     identityService.setUserPicture(userId, null);
-    assertNull('it should be possible to nullify user picture',identityService.getUserPicture(userId));    
+    assertNull("it should be possible to nullify user picture",identityService.getUserPicture(userId));    
     user = identityService.createUserQuery().userId("johndoe").singleResult();
-    assertNull('it should be possible to delete user picture',identityService.getUserPicture(userId));
+    assertNull("it should be possible to delete user picture",identityService.getUserPicture(userId));
 
     identityService.deleteUser(user.getId());
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayRef.java
Patch:
@@ -84,6 +84,8 @@ public void delete() {
       } else {
         Context.getCommandContext().getByteArrayEntityManager().deleteByteArrayById(id);
       }
+      entity = null;
+      id = null;
       deleted = true;
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/javax/el/BeanELResolver.java
Patch:
@@ -498,7 +498,7 @@ private Method findMethod(Object base, String name, Class<?>[] types, int paramC
 			try {
 				return findAccessibleMethod(base.getClass().getMethod(name, types));
 			} catch (NoSuchMethodException e) {
-				return null;
+				// try to get a method without a static type search
 			}
 		}
 		Method varArgsMethod = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/SerializableType.java
Patch:
@@ -36,8 +36,6 @@ public class SerializableType extends ByteArrayType {
 
   public static final String TYPE_NAME = "serializable";
   
-  private static final long serialVersionUID = 1L;
-  
   public String getTypeName() {
     return TYPE_NAME;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityScanner.java
Patch:
@@ -70,7 +70,7 @@ private Method getIdMethod(Class<?> clazz) {
     Id idAnnotation = null;
     for (Method method : methods) {
       idAnnotation = method.getAnnotation(Id.class);
-      if (idAnnotation != null) {
+      if(idAnnotation != null && !method.isBridge()) {
         idMethod = method;
         break;
       }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ExecutionEventsTest.java
Patch:
@@ -39,7 +39,7 @@ public void testExecutionEvents() throws Exception {
     assertNotNull(processInstance);
 
     // Check create-event
-    assertEquals(4, listener.getEventsReceived().size());
+    assertEquals(5, listener.getEventsReceived().size());
     assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);
 
     ActivitiEntityEvent event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DueDateBusinessCalendar.java
Patch:
@@ -33,7 +33,7 @@ public Date resolveDuedate(String duedate, int maxIterations) {
     try {
       // check if due period was specified
       if(duedate.startsWith("P")){
-        return DateTime.now().plus(Period.parse(duedate)).toDate();
+        return new DateTime(clockReader.getCurrentTime()).plus(Period.parse(duedate)).toDate();
       }
 
       return DateTime.parse(duedate).toDate();

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/DataObjectConverterTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.Test;
 
 /**
- * @see <a href="http://jira.codehaus.org/browse/ACT-1847">http://jira.codehaus.org/browse/ACT-1847</a>
+ * @see <a href="https://activiti.atlassian.net/browse/ACT-1847">https://activiti.atlassian.net/browse/ACT-1847</a>
  */
 public class DataObjectConverterTest extends AbstractConverterTest {
 

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SubProcessWithExtensionsConverterTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 /**
- * @see <a href="http://jira.codehaus.org/browse/ACT-2055">http://jira.codehaus.org/browse/ACT-2055</a>
+ * @see <a href="https://activiti.atlassian.net/browse/ACT-2055">https://activiti.atlassian.net/browse/ACT-2055</a>
  */
 public class SubProcessWithExtensionsConverterTest extends AbstractConverterTest {
   

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ValuedDataObjectConverterTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Test;
 
 /**
- * @see http://jira.codehaus.org/browse/ACT-1847
+ * @see <a href="https://activiti.atlassian.net/browse/ACT-1847">https://activiti.atlassian.net/browse/ACT-1847</a>
  */
 public class ValuedDataObjectConverterTest extends AbstractConverterTest {
 

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ValuedDataObjectWithExtensionsConverterTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 /**
- * @see <a href="http://jira.codehaus.org/browse/ACT-1847">http://jira.codehaus.org/browse/ACT-1847</a>
+ * @see <a href="https://activiti.atlassian.net/browse/ACT-1847">https://activiti.atlassian.net/browse/ACT-1847</a>
  */
 public class ValuedDataObjectWithExtensionsConverterTest extends AbstractConverterTest {
   

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ScriptTask.java
Patch:
@@ -22,7 +22,7 @@ public class ScriptTask extends Task {
   protected String scriptFormat;
   protected String script;
   protected String resultVariable;
-  protected boolean autoStoreVariables = false; // see http://jira.codehaus.org/browse/ACT-1626
+  protected boolean autoStoreVariables = false; // see https://activiti.atlassian.net/browse/ACT-1626
 
   public String getScriptFormat() {
     return scriptFormat;

File: modules/activiti-crystalball/src/main/java/org/activiti/engine/impl/jobexecutor/SimulationAcquireJobsRunnable.java
Patch:
@@ -81,7 +81,7 @@ public synchronized void run() {
 		        }
 
 		      } catch (ActivitiOptimisticLockingException optimisticLockingException) { 
-		        // See http://jira.codehaus.org/browse/ACT-1390
+		        // See https://activiti.atlassian.net/browse/ACT-1390
 		        log.trace("Optimistic locking exception during job acquisition. If you have multiple job executors running against the same database, " +
 		          		"this exception means that this thread tried to acquire a job, which already was acquired by another job executor acquisition thread." +
 		          		"This is expected behavior in a clustered environment. " +

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -183,8 +183,8 @@ public abstract class ProcessEngineConfiguration implements EngineServices {
 
   /**
    * In some situations you want to set the schema to use for table checks / generation if the database metadata
-   * doesn't return that correctly, see https://jira.codehaus.org/browse/ACT-1220,
-   * https://jira.codehaus.org/browse/ACT-1062
+   * doesn't return that correctly, see https://activiti.atlassian.net/browse/ACT-1220,
+   * https://activiti.atlassian.net/browse/ACT-1062
    */
   protected String databaseSchema = null;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -39,7 +39,7 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {
   protected String script;
   protected String language;
   protected String resultVariable;
-  protected boolean storeScriptVariables = false; // see http://jira.codehaus.org/browse/ACT-1626
+  protected boolean storeScriptVariables = false; // https://activiti.atlassian.net/browse/ACT-1626
 
   public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {
     this.script = script;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -824,7 +824,7 @@ protected void flushRegularInsert(PersistentObject persistentObject, Class<? ext
      log.debug("inserting: {}", persistentObject);
      sqlSession.insert(insertStatement, persistentObject);
      
-     // See http://jira.codehaus.org/browse/ACT-1290
+     // See https://activiti.atlassian.net/browse/ACT-1290
      if (persistentObject instanceof HasRevision) {
        ((HasRevision) persistentObject).setRevision(((HasRevision) persistentObject).getRevisionNext());
      }
@@ -862,7 +862,7 @@ protected void flushUpdates(List<PersistentObject> updatedObjects) {
         throw new ActivitiOptimisticLockingException(updatedObject + " was updated by another transaction concurrently");
       } 
       
-      // See http://jira.codehaus.org/browse/ACT-1290
+      // See https://activiti.atlassian.net/browse/ACT-1290
       if (updatedObject instanceof HasRevision) {
         ((HasRevision) updatedObject).setRevision(((HasRevision) updatedObject).getRevisionNext());
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -217,8 +217,8 @@ public class DbSqlSessionFactory implements SessionFactory {
   /**
    * In some situations you want to set the schema to use for table checks /
    * generation if the database metadata doesn't return that correctly, see
-   * https://jira.codehaus.org/browse/ACT-1220,
-   * https://jira.codehaus.org/browse/ACT-1062
+   * https://activiti.atlassian.net/browse/ACT-1220,
+   * https://activiti.atlassian.net/browse/ACT-1062
    */
   protected String databaseSchema;
   protected SqlSessionFactory sqlSessionFactory;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AcquireJobsRunnableImpl.java
Patch:
@@ -65,7 +65,7 @@ public synchronized void run() {
         }
 
       } catch (ActivitiOptimisticLockingException optimisticLockingException) { 
-        // See http://jira.codehaus.org/browse/ACT-1390
+        // See https://activiti.atlassian.net/browse/ACT-1390
         if (log.isDebugEnabled()) {
           log.debug("Optimistic locking exception during job acquisition. If you have multiple job executors running against the same database, " +
           		"this exception means that this thread tried to acquire a job, which already was acquired by another job executor acquisition thread." +

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/JobExecutor.java
Patch:
@@ -63,7 +63,7 @@ public abstract class JobExecutor {
    * In a non-clustered setup, this setting can be changed to any value > 0
    * without problems.
    * 
-   * See http://jira.codehaus.org/browse/ACT-1879 for more information.
+   * See https://activiti.atlassian.net/browse/ACT-1879 for more information.
    */
   protected int maxJobsPerAcquisition = 1;
   protected long waitTimeInMillis = 5000L;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -110,7 +110,7 @@ public String toString() {
   }
 
   // Wrapper for a byte array, needed to do byte array comparisons
-  // See http://jira.codehaus.org/browse/ACT-1524
+  // See https://activiti.atlassian.net/browse/ACT-1524
   private static class PersistentState {
     
     private final String name;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntityManager.java
Patch:
@@ -57,7 +57,7 @@ public List<ProcessDefinition> findProcessDefinitionsByQueryCriteria(ProcessDefi
     return getDbSqlSession().selectList("selectProcessDefinitionsByQueryCriteria", processDefinitionQuery, page);
 
     //skipped this after discussion within the team
-//    // retrieve process definitions from cache (http://jira.codehaus.org/browse/ACT-1020) to have all available information
+//    // retrieve process definitions from cache (https://activiti.atlassian.net/browse/ACT-1020) to have all available information
 //    ArrayList<ProcessDefinition> result = new ArrayList<ProcessDefinition>();
 //    for (ProcessDefinition processDefinitionEntity : processDefinitions) {      
 //      ProcessDefinitionEntity fullProcessDefinition = Context

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/identity/ProcessInstanceIdentityLinkTest.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class ProcessInstanceIdentityLinkTest extends PluggableActivitiTestCase {
   
-  // Test specific for fix introduced by https://jira.codehaus.org/browse/ACT-1591
+  // Test specific for fix introduced by https://activiti.atlassian.net/browse/ACT-1591
   // (Referential integrity constraint violation on PROC_INST and IDENTITY_LINK)
   @Deployment
   public void testSetAuthenticatedUserAndCompleteLastTask() {
@@ -43,7 +43,7 @@ public void testSetAuthenticatedUserAndCompleteLastTask() {
     
   }
   
-  // Test specific for fix introduced by https://jira.codehaus.org/browse/ACT-1591
+  // Test specific for fix introduced by https://activiti.atlassian.net/browse/ACT-1591
   // (Referential integrity constraint violation on PROC_INST and IDENTITY_LINK)
   @Deployment
   public void testSetAuthenticatedUserWithNoWaitStates() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -243,7 +243,7 @@ public void testDeleteJobThatWasAlreadyAcquired() {
     managementService.executeJob(timerJob.getId());
   }
   
-  // https://jira.codehaus.org/browse/ACT-1816:
+  // https://activiti.atlassian.net/browse/ACT-1816:
   // ManagementService doesn't seem to give actual table Name for EventSubscriptionEntity.class
   public void testGetTableName() {
 	  String table = managementService.getTableName(EventSubscriptionEntity.class);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/DeployInvalidXmlTest.java
Patch:
@@ -94,7 +94,7 @@ public void testDeployWithMissingWaypointsForSequenceflowInDiagramInterchange()
   "</definitions>";
   
   
-  // See http://jira.codehaus.org/browse/ACT-1579?focusedCommentId=319886#comment-319886
+  // See https://activiti.atlassian.net/browse/ACT-1579?focusedCommentId=319886#comment-319886
   public void testProcessEngineDenialOfServiceAttackUsingUnsafeXmlTest() throws InterruptedException {
 
   	// Putting this in a Runnable so we can time it out

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/DeployNonExecutableProcessDefinitionTest.java
Patch:
@@ -22,7 +22,7 @@
 public class DeployNonExecutableProcessDefinitionTest extends PluggableActivitiTestCase {
 	
 	/*
-	 * Test for https://jira.codehaus.org/browse/ACT-2071
+	 * Test for https://activiti.atlassian.net/browse/ACT-2071
 	 * 
 	 * In this test, a process definition is deployed together with 
 	 * one that is not executable. The none-executable should not be startable.

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1315,7 +1315,7 @@ public void testExecutionQueryWithProcessVariable() {
     assertEquals(3, concurrentExecutions.size());
     for (Execution execution : concurrentExecutions) {
       if (!((ExecutionEntity)execution).isProcessInstanceType()) {
-        // only the concurrent executions, not the root one, would be cooler to query that directly, see http://jira.codehaus.org/browse/ACT-1373        
+        // only the concurrent executions, not the root one, would be cooler to query that directly, see https://activiti.atlassian.net/browse/ACT-1373
         runtimeService.setVariableLocal(execution.getId(), "x", "child");
         runtimeService.setVariableLocal(execution.getId(), "xIgnoreCase", "ChILD");
       }      

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -200,7 +200,7 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {
   public void testNonUniqueBusinessKey() {
     runtimeService.startProcessInstanceByKey("oneTaskProcess", "123");
     
-    // Behaviour changed: http://jira.codehaus.org/browse/ACT-1860
+    // Behaviour changed: https://activiti.atlassian.net/browse/ACT-1860
     runtimeService.startProcessInstanceByKey("oneTaskProcess", "123");
     assertEquals(2, runtimeService.createProcessInstanceQuery().processInstanceBusinessKey("123").count());
   }
@@ -321,7 +321,7 @@ public void testFindActiveActivityIdsNullExecututionId() {
   }
   
   /**
-   * Testcase to reproduce ACT-950 (https://jira.codehaus.org/browse/ACT-950) 
+   * Testcase to reproduce ACT-950 (https://activiti.atlassian.net/browse/ACT-950)
    */
   @Deployment
   public void testFindActiveActivityIdProcessWithErrorEventAndSubProcess() {
@@ -1018,7 +1018,7 @@ public void testGetVariableLocalExistingVariableNameWithInvalidCast() {
         assertTrue(e instanceof ClassCastException);
     }
     
-    // Test for http://jira.codehaus.org/browse/ACT-2186
+    // Test for https://activiti.atlassian.net/browse/ACT-2186
     @Deployment(resources={
     	"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml"})
     public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/DelegateTaskTest.java
Patch:
@@ -30,7 +30,7 @@
 public class DelegateTaskTest extends PluggableActivitiTestCase {
 
 	/**
-	 * @see <a href="http://jira.codehaus.org/browse/ACT-380">http://jira.codehaus.org/browse/ACT-380</a>
+	 * @see <a href="https://activiti.atlassian.net/browse/ACT-380">https://activiti.atlassian.net/browse/ACT-380</a>
 	 */
 	@Deployment
 	public void testGetCandidates() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskDueDateTest.java
Patch:
@@ -36,7 +36,7 @@ protected void tearDown() throws Exception {
 	}
 
 	 /**
-   * See http://jira.codehaus.org/browse/ACT-2089
+   * See https://activiti.atlassian.net/browse/ACT-2089
    */
   public void testDueDateSortingWithNulls() {
   	Date now = processEngineConfiguration.getClock().getCurrentTime();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -2844,7 +2844,7 @@ public void testCombinationOfOrAndLikeIgnoreCase() {
   	}
   }
   
-  // Test for https://jira.codehaus.org/browse/ACT-2103
+  // Test for https://activiti.atlassian.net/browse/ACT-2103
   public void testTaskLocalAndProcessInstanceVariableEqualsInOr() {
   	
   	deployOneTaskTestProcess();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -1082,7 +1082,7 @@ public void testSetDueDateNullTaskId() {
   }
 
   /**
-   * @see <a href="http://jira.codehaus.org/browse/ACT-1059">http://jira.codehaus.org/browse/ACT-1059</a>
+   * @see <a href="https://activiti.atlassian.net/browse/ACT-1059">https://activiti.atlassian.net/browse/ACT-1059</a>
    */
   public void testSetDelegationState() {
     Task task = taskService.newTask();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/variables/VariablesTest.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Testing various constructs with variables. 
- * Created to test the changes done in https://jira.codehaus.org/browse/ACT-1900.
+ * Created to test the changes done in https://activiti.atlassian.net/browse/ACT-1900.
  * 
  * @author Joram Barrez
  */

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/signal/SignalEventTest.java
Patch:
@@ -140,7 +140,7 @@ public void testSignalCatchDifferentSignals() {
   }
   
   /**
-   * Verifies the solution of https://jira.codehaus.org/browse/ACT-1309
+   * Verifies the solution of https://activiti.atlassian.net/browse/ACT-1309
    */
   @Deployment
   public void testSignalBoundaryOnSubProcess() {
@@ -569,7 +569,7 @@ public void testNoneEndEventAfterSignalInConcurrentProcess() {
 	}
 	
 	/**
-	 * Test case for http://jira.codehaus.org/browse/ACT-1978
+	 * Test case for https://activiti.atlassian.net/browse/ACT-1978
 	 */
 	public void testSignalDeleteOnRedeploy() {
 		

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/BoundaryTimerNonInterruptingEventTest.java
Patch:
@@ -216,7 +216,7 @@ public void testTimerWithCycle() throws Exception {
   
   @Deployment
   /**
-   * see http://jira.codehaus.org/browse/ACT-1173
+   * see https://activiti.atlassian.net/browse/ACT-1173
    */
   public void testTimerOnEmbeddedSubprocess() {
     String id = runtimeService.startProcessInstanceByKey("nonInterruptingTimerOnEmbeddedSubprocess").getId();
@@ -243,7 +243,7 @@ public void testTimerOnEmbeddedSubprocess() {
   
   @Deployment
   /**
-   * see http://jira.codehaus.org/browse/ACT-1106
+   * see https://activiti.atlassian.net/browse/ACT-1106
    */
   public void testReceiveTaskWithBoundaryTimer(){
     // Set the clock fixed

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/ParallelGatewayTest.java
Patch:
@@ -107,7 +107,7 @@ public void testNestedForkJoin() {
   }
   
   /**
-   * http://jira.codehaus.org/browse/ACT-1222
+   * https://activiti.atlassian.net/browse/ACT-1222
    */
   @Deployment
   public void testReceyclingExecutionWithCallActivity() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -58,7 +58,7 @@ public void testQuerySortingWithParameter() {
   
   @Deployment
   public void testCompleteAfterParallelGateway() throws InterruptedException {
-	  // related to http://jira.codehaus.org/browse/ACT-1054
+	  // related to https://activiti.atlassian.net/browse/ACT-1054
 	  
 	  // start the process
     runtimeService.startProcessInstanceByKey("ForkProcess");

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -461,7 +461,7 @@ public void testHistoricProcessInstanceName() {
   }
   
   /**
-   * Validation for https://jira.codehaus.org/browse/ACT-2182
+   * Validation for https://activiti.atlassian.net/browse/ACT-2182
    */
   public void testNameAndTenantIdSetWhenFetchingVariables() {
   	

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -263,7 +263,7 @@ public void testVariableUpdatesLinkedToActivity() throws Exception {
 	    assertEquals(historicActivityInstance1.getExecutionId(), update1.getExecutionId());
 	    assertEquals("usertask1", historicActivityInstance1.getActivityId());
 	    
-	    // TODO http://jira.codehaus.org/browse/ACT-1083
+	    // TODO https://activiti.atlassian.net/browse/ACT-1083
 	    assertNotNull(update2.getActivityInstanceId());
 	    HistoricActivityInstance historicActivityInstance2 = historyService.createHistoricActivityInstanceQuery().activityInstanceId(update2.getActivityInstanceId()).singleResult();
 	    assertEquals("usertask2", historicActivityInstance2.getActivityId());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/regression/RegressionTest.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class RegressionTest extends PluggableActivitiTestCase {
   
-  // https://jira.codehaus.org/browse/ACT-1623
+  // https://activiti.atlassian.net/browse/ACT-1623
   // NPE when eventbased gateway is after referenced event
   public void testAct1623() throws Exception {
    

File: modules/activiti-engine/src/test/java/org/activiti/examples/task/StandaloneTaskTest.java
Patch:
@@ -107,7 +107,7 @@ public void testOptimisticLockingThrownOnMultipleUpdates() {
     taskService.deleteTask(taskId, true);
   }
   
-  // See http://jira.codehaus.org/browse/ACT-1290 
+  // See https://activiti.atlassian.net/browse/ACT-1290
   public void testRevisionUpdatedOnSave() {
     Task task = taskService.newTask();
     taskService.saveTask(task);
@@ -124,7 +124,7 @@ public void testRevisionUpdatedOnSave() {
     taskService.deleteTask(task.getId(), true);
   }
 
-  // See http://jira.codehaus.org/browse/ACT-1290 
+  // See https://activiti.atlassian.net/browse/ACT-1290
   public void testRevisionUpdatedOnSaveWhenFetchedUsingQuery() {
     Task task = taskService.newTask();
     taskService.saveTask(task);

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -1377,7 +1377,7 @@ public void testQueryHistoricProcessInstanceIncludeBinaryVariable() throws Excep
     
    }
    
-   // Test for http://jira.codehaus.org/browse/ACT-2186
+   // Test for https://activiti.atlassian.net/browse/ACT-2186
    @Deployment(resources={
    	"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml"})
    public void testHistoricVariableRemovedWhenRuntimeVariableIsRemoved() {

File: modules/activiti-engine/src/test/java/org/activiti/standalone/jpa/JPAVariableTest.java
Patch:
@@ -439,7 +439,7 @@ public void testStoreJPAEntityListAsVariableEdgeCases() {
     assertTrue(((List<?>) runtimeService.getVariable(processInstance.getId(), "list")).get(0) instanceof FieldAccessJPAEntity);
   }
   
-  // http://jira.codehaus.org/browse/ACT-995
+  // https://activiti.atlassian.net/browse/ACT-995
   @Deployment(resources="org/activiti/standalone/jpa/JPAVariableTest.testQueryJPAVariable.bpmn20.xml")
   public void testReplaceExistingJPAEntityWithAnotherOfSameType() {
     EntityManager manager = entityManagerFactory.createEntityManager();

File: modules/activiti-engine/src/test/java/org/activiti/standalone/validation/DefaultProcessValidatorTest.java
Patch:
@@ -267,7 +267,7 @@ public void testWarningError() throws UnsupportedEncodingException, XMLStreamExc
 	}
 	
 	/*
-	 * Test for https://jira.codehaus.org/browse/ACT-2071:
+	 * Test for https://activiti.atlassian.net/browse/ACT-2071:
 	 * 
 	 * If all processes in a deployment are not executable, throw an exception
 	 * as this doesn't make sense to do.
@@ -286,7 +286,7 @@ public void testAllNonExecutableProcesses() {
 	}
 	
 	/*
-	 * Test for https://jira.codehaus.org/browse/ACT-2071:
+	 * Test for https://activiti.atlassian.net/browse/ACT-2071:
 	 * 
 	 * If there is at least one process definition which is executable, 
 	 * and the deployment contains other process definitions which are not executable,

File: modules/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramGenerator.java
Patch:
@@ -901,7 +901,7 @@ protected static DefaultProcessDiagramCanvas initProcessDiagramCanvas(BpmnModel
       }
     }
     
-    // Special case, see http://jira.codehaus.org/browse/ACT-1431
+    // Special case, see https://activiti.atlassian.net/browse/ACT-1431
     if (flowNodes.isEmpty() && bpmnModel.getPools().isEmpty() && nrOfLanes == 0) {
       // Nothing to show
       minX = 0;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceCollectionResourceTest.java
Patch:
@@ -43,7 +43,7 @@
 public class ProcessInstanceCollectionResourceTest extends BaseSpringRestTestCase {
 
   // check if process instance query with business key with and without includeProcess Variables
-  // related to http://jira.codehaus.org/browse/ACT-1992
+  // related to https://activiti.atlassian.net/browse/ACT-1992
   @Deployment(resources = {"org/activiti/rest/service/api/runtime/ProcessInstanceResourceTest.process-one.bpmn20.xml"})
   public void testGetProcessInstancesByBusinessKeyAndIncludeVariables() throws Exception {
   	HashMap<String, Object> variables = new HashMap<String, Object>();

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/servicetask/BoundaryErrorEventSpringTest.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Angel Lopez Cima
  * @author Falko Menge
- * @see http://jira.codehaus.org/browse/ACT-1166
+ * @see https://activiti.atlassian.net/browse/ACT-1166
  */
 @ContextConfiguration("classpath:org/activiti/spring/test/servicetask/serviceraskSpringTestCatchError-context.xml")
 public class BoundaryErrorEventSpringTest extends SpringActivitiTestCase {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/IntermediateCatchEventParseHandler.java
Patch:
@@ -62,6 +62,9 @@ protected void executeParse(BpmnParse bpmnParse, IntermediateCatchEvent event) {
         nestedActivity = createActivityOnScope(bpmnParse, event, BpmnXMLConstants.ELEMENT_EVENT_CATCH, scope);
       }
       
+      nestedActivity.setAsync(event.isAsynchronous());
+      nestedActivity.setExclusive(!event.isNotExclusive());
+      
       // Catch event behavior is the same for all types
       nestedActivity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createIntermediateCatchEventActivityBehavior(event));
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/IntermediateThrowEventParseHandler.java
Patch:
@@ -43,6 +43,9 @@ protected void executeParse(BpmnParse bpmnParse, ThrowEvent intermediateEvent) {
       eventDefinition = intermediateEvent.getEventDefinitions().get(0);
     }
     
+    nestedActivityImpl.setAsync(intermediateEvent.isAsynchronous());
+    nestedActivityImpl.setExclusive(!intermediateEvent.isNotExclusive());
+    
     if (eventDefinition instanceof SignalEventDefinition) {
       bpmnParse.getBpmnParserHandlers().parseElement(bpmnParse, eventDefinition);
     } else if (eventDefinition instanceof org.activiti.bpmn.model.CompensateEventDefinition) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/IntermediateCatchEventParseHandler.java
Patch:
@@ -62,6 +62,9 @@ protected void executeParse(BpmnParse bpmnParse, IntermediateCatchEvent event) {
         nestedActivity = createActivityOnScope(bpmnParse, event, BpmnXMLConstants.ELEMENT_EVENT_CATCH, scope);
       }
       
+      nestedActivity.setAsync(event.isAsynchronous());
+      nestedActivity.setExclusive(!event.isNotExclusive());
+      
       // Catch event behavior is the same for all types
       nestedActivity.setActivityBehavior(bpmnParse.getActivityBehaviorFactory().createIntermediateCatchEventActivityBehavior(event));
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/IntermediateThrowEventParseHandler.java
Patch:
@@ -43,6 +43,9 @@ protected void executeParse(BpmnParse bpmnParse, ThrowEvent intermediateEvent) {
       eventDefinition = intermediateEvent.getEventDefinitions().get(0);
     }
     
+    nestedActivityImpl.setAsync(intermediateEvent.isAsynchronous());
+    nestedActivityImpl.setExclusive(!intermediateEvent.isNotExclusive());
+    
     if (eventDefinition instanceof SignalEventDefinition) {
       bpmnParse.getBpmnParserHandlers().parseElement(bpmnParse, eventDefinition);
     } else if (eventDefinition instanceof org.activiti.bpmn.model.CompensateEventDefinition) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndTest.java
Patch:
@@ -92,7 +92,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
 
     // ADVANCE THE CLOCK
     // advance the clock to 11 dec -> the system will execute the pending job and will create a new one
-    moveByMinutes(60 * 24);
+    moveByMinutes((60 * 24) + 10);
     try {
       waitForJobExecutorToProcessAllJobs(2000, 200);
       fail("there must be a pending job because the endDate is not reached yet");
@@ -119,7 +119,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
 
     // ADVANCE THE CLOCK SO THE END DATE WILL BE REACHED
     // 12 dec (last execution)
-    moveByMinutes(60 * 24);
+    moveByMinutes((60 * 24) + 10);
     try {
       waitForJobExecutorToProcessAllJobs(2000, 200);
     } catch (Exception e) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/ServiceTaskVariablesTest.java
Patch:
@@ -77,7 +77,7 @@ public void testSerializedVariablesBothAsync() {
     // third service task in the sequence
     
     runtimeService.startProcessInstanceByKey("process");
-    waitForJobExecutorToProcessAllJobs(1000, 500);
+    waitForJobExecutorToProcessAllJobs(10000, 500);
     
     synchronized (ServiceTaskVariablesTest.class) {
       assertTrue(isNullInDelegate2);
@@ -91,7 +91,7 @@ public void testSerializedVariablesThirdAsync() {
     // in this test, only the third service task is async
         
     runtimeService.startProcessInstanceByKey("process");
-    waitForJobExecutorToProcessAllJobs(1000, 500);
+    waitForJobExecutorToProcessAllJobs(10000, 500);
     
     synchronized (ServiceTaskVariablesTest.class) {
       assertTrue(isNullInDelegate2); 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -64,7 +64,7 @@ public Object execute(CommandContext commandContext)  {
     ProcessEngineConfiguration processEngineConfig = commandContext.getProcessEngineConfiguration();
    
     if (activity == null || activity.getFailedJobRetryTimeCycleValue() == null) {
-      log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
+      log.debug("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
       job.setRetries(job.getRetries() - 1);
       job.setLockOwner(null);
       job.setLockExpirationTime(null);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -325,7 +325,7 @@ protected void initBulkInsertEnabledMap(String databaseType) {
 		}
   }
   
-  public boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
+  public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {
   	return bulkInsertableMap.get(persistentObjectClass);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -635,7 +635,7 @@ protected static Properties getDefaultDatabaseTypeMappings() {
     databaseTypeMappings.setProperty("PostgreSQL", DATABASE_TYPE_POSTGRES);
     databaseTypeMappings.setProperty("Microsoft SQL Server", DATABASE_TYPE_MSSQL);
     databaseTypeMappings.setProperty(DATABASE_TYPE_DB2,DATABASE_TYPE_DB2);
-    databaseTypeMappings.setProperty(DATABASE_TYPE_DB2,DATABASE_TYPE_DB2);
+    databaseTypeMappings.setProperty("DB2",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/NT",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/NT64",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2 UDP",DATABASE_TYPE_DB2);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationProcessStart.java
Patch:
@@ -42,7 +42,7 @@ protected String getEventName() {
 
   @Override
   protected void eventNotificationsCompleted(InterpretableExecution execution) {
-  	if(Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
+  	if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
   	  Map<String, Object> variablesMap = null;
   	  try {
   	    variablesMap = execution.getVariables();
@@ -53,6 +53,8 @@ protected void eventNotificationsCompleted(InterpretableExecution execution) {
     	Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
     			ActivitiEventBuilder.createEntityWithVariablesEvent(ActivitiEventType.ENTITY_INITIALIZED, 
     			    execution, variablesMap, false));
+      Context.getProcessEngineConfiguration().getEventDispatcher()
+              .dispatchEvent(ActivitiEventBuilder.createProcessStartedEvent(execution, variablesMap, false));
     }
   	
     ProcessDefinitionImpl processDefinition = execution.getProcessDefinition();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ExecutionEventsTest.java
Patch:
@@ -39,7 +39,7 @@ public void testExecutionEvents() throws Exception {
 			assertNotNull(processInstance);
 			
 			// Check create-event
-			assertEquals(2, listener.getEventsReceived().size());
+			assertEquals(3, listener.getEventsReceived().size());
 			assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);
 			
 			ActivitiEntityEvent event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/main/StencilsetRestResource.java
Patch:
@@ -27,11 +27,11 @@
 @RestController
 public class StencilsetRestResource {
   
-  @RequestMapping(value="/editor/stencilset", method = RequestMethod.GET, produces = "application/json")
+  @RequestMapping(value="/editor/stencilset", method = RequestMethod.GET, produces = "application/json;charset=utf-8")
   public @ResponseBody String getStencilset() {
     InputStream stencilsetStream = this.getClass().getClassLoader().getResourceAsStream("stencilset.json");
     try {
-      return IOUtils.toString(stencilsetStream);
+      return IOUtils.toString(stencilsetStream, "utf-8");
     } catch (Exception e) {
       throw new ActivitiException("Error while loading stencil set", e);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationProcessStart.java
Patch:
@@ -42,7 +42,7 @@ protected String getEventName() {
 
   @Override
   protected void eventNotificationsCompleted(InterpretableExecution execution) {
-  	if(Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
+  	if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
   	  Map<String, Object> variablesMap = null;
   	  try {
   	    variablesMap = execution.getVariables();
@@ -53,8 +53,8 @@ protected void eventNotificationsCompleted(InterpretableExecution execution) {
     	Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
     			ActivitiEventBuilder.createEntityWithVariablesEvent(ActivitiEventType.ENTITY_INITIALIZED, 
     			    execution, variablesMap, false));
-            Context.getProcessEngineConfiguration().getEventDispatcher()
-                    .dispatchEvent(ActivitiEventBuilder.createProcessStartedEvent(execution, variablesMap, false));
+      Context.getProcessEngineConfiguration().getEventDispatcher()
+              .dispatchEvent(ActivitiEventBuilder.createProcessStartedEvent(execution, variablesMap, false));
     }
   	
     ProcessDefinitionImpl processDefinition = execution.getProcessDefinition();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ExecutionEventsTest.java
Patch:
@@ -39,7 +39,7 @@ public void testExecutionEvents() throws Exception {
 			assertNotNull(processInstance);
 			
 			// Check create-event
-			assertEquals(2, listener.getEventsReceived().size());
+			assertEquals(3, listener.getEventsReceived().size());
 			assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);
 			
 			ActivitiEntityEvent event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/TaskInfoQuery.java
Patch:
@@ -293,6 +293,9 @@ public interface TaskInfoQuery<T extends TaskInfoQuery<?, ?>, V extends TaskInfo
    */
   T processDefinitionKeyLikeIgnoreCase(String processDefinitionKeyLikeIgnoreCase);
   
+  /** Only select tasks that have a process definition for which the key is present in the given list **/
+  T processDefinitionKeyIn(List<String> processDefinitionKeys);
+  
   /**
    * Only select tasks which are part of a process instance which has the given
    * process definition id.

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/event/EventNotificationTest.java
Patch:
@@ -60,15 +60,15 @@ public void testSelectEventsPerActivity() {
     listenerBean.reset();
     
     assertEquals(0, listenerBean.getEndActivityService1());
-    assertEquals(0, listenerBean.getStartActivityService1());
+    assertEquals(0, listenerBean.getStartActivityService1WithoutLoopCounter());
     assertEquals(0, listenerBean.getTakeTransitiont1());
 
     // start the process
     runtimeService.startProcessInstanceByKey("process1");
 
     // assert
     assertEquals(1, listenerBean.getEndActivityService1());
-    assertEquals(1, listenerBean.getStartActivityService1());
+    assertEquals(1, listenerBean.getStartActivityService1WithoutLoopCounter());
     assertEquals(1, listenerBean.getTakeTransitiont1());
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -81,9 +81,9 @@ public class DbSqlSession implements Session {
   
   private static final Logger log = LoggerFactory.getLogger(DbSqlSession.class);
   
-  private static final Pattern CLEAN_VERSION_REGEX = Pattern.compile("\\d\\.\\d*");
+  protected static final Pattern CLEAN_VERSION_REGEX = Pattern.compile("\\d\\.\\d*");
   
-  private static final List<ActivitiVersion> ACTIVITI_VERSIONS = new ArrayList<ActivitiVersion>();
+  protected static final List<ActivitiVersion> ACTIVITI_VERSIONS = new ArrayList<ActivitiVersion>();
   static {
 	  
 	  /* Previous */
@@ -786,7 +786,7 @@ protected void flushInserts() {
     for (Class<? extends PersistentObject> persistentObjectClass : EntityDependencyOrder.INSERT_ORDER) {
       if (insertedObjects.containsKey(persistentObjectClass)) {
       	List<PersistentObject> persistentObjectsToInsert = insertedObjects.get(persistentObjectClass);
-      	if (persistentObjectsToInsert.size() == 1) {
+      	if (persistentObjectsToInsert.size() == 1 || Boolean.FALSE.equals(dbSqlSessionFactory.isBulkInsertable(persistentObjectClass))) {
       		flushRegularInsert(persistentObjectsToInsert.get(0), persistentObjectClass);
       	} else {
       		flushBulkInsert(insertedObjects.get(persistentObjectClass), persistentObjectClass);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -643,6 +643,7 @@ protected static Properties getDefaultDatabaseTypeMappings() {
     databaseTypeMappings.setProperty("DB2/LINUX390",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/LINUXX8664",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/LINUXZ64",DATABASE_TYPE_DB2);
+    databaseTypeMappings.setProperty("DB2/LINUXPPC64",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/400 SQL",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2/6000",DATABASE_TYPE_DB2);
     databaseTypeMappings.setProperty("DB2 UDB iSeries",DATABASE_TYPE_DB2);

File: modules/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java
Patch:
@@ -776,6 +776,7 @@ protected void drawMultilineText(String text, int x, int y, int boxWidth, int bo
           }
           layouts.add(new TextLayout(lastLine, g.getFont(), g.getFontRenderContext()));
         }
+        break;
       } else {
         layouts.add(layout);
         lastLine = text.substring(previousPosition, measurer.getPosition());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireAsyncJobsDueCmd.java
Patch:
@@ -44,7 +44,6 @@ public AcquiredJobEntities execute(CommandContext commandContext) {
     for (JobEntity job: jobs) {
       lockJob(commandContext, job, asyncExecutor.getAsyncJobLockTimeInMillis());
       acquiredJobs.addJob(job);
-      asyncExecutor.executeAsyncJob(job);
     }
     
     return acquiredJobs;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayRef.java
Patch:
@@ -84,6 +84,8 @@ public void delete() {
           .getByteArrayEntityManager()
           .deleteByteArrayById(id);
       }
+      entity = null;
+      id = null;
       deleted = true;
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityScanner.java
Patch:
@@ -71,7 +71,7 @@ private Method getIdMethod(Class< ? > clazz) {
     Id idAnnotation = null;
     for(Method method : methods) {
       idAnnotation = method.getAnnotation(Id.class);
-      if(idAnnotation != null) {
+      if(idAnnotation != null && !method.isBridge()) {
         idMethod = method;
         break;
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventDispatcherImpl.java
Patch:
@@ -102,7 +102,7 @@ protected ProcessDefinitionEntity extractProcessDefinitionEntityFromEvent(Activi
 
     if (event instanceof ActivitiEntityEvent) {
       Object entity = ((ActivitiEntityEvent) event).getEntity();
-      if (entity instanceof ProcessDefinition) {
+      if (entity instanceof ProcessDefinitionEntity) {
         result = (ProcessDefinitionEntity) entity;
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CompleteTaskCmd.java
Patch:
@@ -42,8 +42,10 @@ protected Void execute(CommandContext commandContext, TaskEntity task) {
     if (variables!=null) {
     	if (localScope) {
     		task.setVariablesLocal(variables);
-    	} else {
+    	} else if (task.getExecutionId() != null) {
     		task.setExecutionVariables(variables);
+    	} else {
+    		task.setVariables(variables);
     	}
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -581,7 +581,7 @@ protected void initDataSource() {
         }
 
       } else if (jdbcUrl != null) {
-        if ((jdbcDriver == null) || (jdbcUrl == null) || (jdbcUsername == null)) {
+        if ((jdbcDriver == null) || (jdbcUsername == null)) {
           throw new ActivitiException("DataSource or JDBC properties have to be specified in a process engine configuration");
         }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/EventLogger.java
Patch:
@@ -86,7 +86,7 @@ public void onEvent(ActivitiEvent event) {
       CommandContext currentCommandContext = Context.getCommandContext();
       EventFlusher eventFlusher = (EventFlusher) currentCommandContext.getAttribute(EVENT_FLUSHER_KEY);
 
-      if (eventHandler != null && eventFlusher == null) {
+      if (eventFlusher == null) {
 
         eventFlusher = createEventFlusher();
         if (eventFlusher == null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -168,7 +168,7 @@ public TimerEntity prepareTimerEntity(ExecutionEntity executionEntity) {
       timer.setProcessInstanceId(executionEntity.getProcessInstanceId());
 
       // Inherit tenant identifier (if applicable)
-      if (executionEntity != null && executionEntity.getTenantId() != null) {
+      if (executionEntity.getTenantId() != null) {
         timer.setTenantId(executionEntity.getTenantId());
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/TimerUtil.java
Patch:
@@ -95,7 +95,7 @@ public static TimerEntity createTimerEntityForTimerEventDefinition(TimerEventDef
       timer.setProcessInstanceId(executionEntity.getProcessInstanceId());
 
       // Inherit tenant identifier (if applicable)
-      if (executionEntity != null && executionEntity.getTenantId() != null) {
+      if (executionEntity.getTenantId() != null) {
         timer.setTenantId(executionEntity.getTenantId());
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/condition/ConditionUtil.java
Patch:
@@ -20,7 +20,7 @@ public static boolean hasTrueCondition(SequenceFlow sequenceFlow, ActivityExecut
       // TODO: should be done at parse time?
       Expression expression = Context.getProcessEngineConfiguration().getExpressionManager().createExpression(sequenceFlow.getConditionExpression());
       Condition condition = new UelExpressionCondition(expression);
-      if (condition == null || (condition != null && condition.evaluate(execution))) {
+      if (condition.evaluate(execution)) {
         return true;
       }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityMappings.java
Patch:
@@ -113,9 +113,6 @@ public Object getJPAEntity(String className, String idString) {
     entityClass = ReflectUtil.loadClass(className);
 
     EntityMetaData metaData = getEntityMetaData(entityClass);
-    if (metaData == null) {
-      throw new ActivitiIllegalArgumentException("Class is not a JPA-entity: " + className);
-    }
 
     // Create primary key of right type
     Object primaryKey = createId(metaData, idString);

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/executionlistener/RecorderExecutionListener.java
Patch:
@@ -73,7 +73,7 @@ public void notify(DelegateExecution execution) {
     
     recordedEvents.add(new RecordedEvent(
         executionCasted.getActivityId(),
-        currentFlowElement.getName(),
+        (null != currentFlowElement) ? currentFlowElement.getName() : null,
         execution.getEventName(), 
         (String) parameter.getValue(execution)));
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventDispatcherImpl.java
Patch:
@@ -102,7 +102,7 @@ protected ProcessDefinitionEntity extractProcessDefinitionEntityFromEvent(Activi
 
     if (event instanceof ActivitiEntityEvent) {
       Object entity = ((ActivitiEntityEvent) event).getEntity();
-      if (entity instanceof ProcessDefinition) {
+      if (entity instanceof ProcessDefinitionEntity) {
         result = (ProcessDefinitionEntity) entity;
       }
     }

File: modules/activiti-engine/src/test/java/org/activiti/standalone/deploy/CustomDeploymentCache.java
Patch:
@@ -28,7 +28,7 @@ public class CustomDeploymentCache implements DeploymentCache<ProcessDefinitionC
 
   @Override
   public ProcessDefinitionCacheEntry get(String id) {
-    if (id.equals(id)) {
+    if (id.equals(this.id)) {
       return entry;
     }
     return null;
@@ -42,7 +42,7 @@ public void add(String id, ProcessDefinitionCacheEntry object) {
 
   @Override
   public void remove(String id) {
-    if (id.equals(id)) {
+    if (id.equals(this.id)) {
       this.id = null;
       this.entry = null;
     }

File: modules/activiti-engine/src/test/java/org/activiti/standalone/deploy/CustomDeploymentCache.java
Patch:
@@ -28,7 +28,7 @@ public class CustomDeploymentCache implements DeploymentCache<ProcessDefinitionC
 
   @Override
   public ProcessDefinitionCacheEntry get(String id) {
-    if (id.equals(id)) {
+    if (id.equals(this.id)) {
       return entry;
     }
     return null;
@@ -42,7 +42,7 @@ public void add(String id, ProcessDefinitionCacheEntry object) {
 
   @Override
   public void remove(String id) {
-    if (id.equals(id)) {
+    if (id.equals(this.id)) {
       this.id = null;
       this.entry = null;
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/exclusive/ExclusiveTaskTest.java
Patch:
@@ -60,7 +60,7 @@ public void testExclusiveServiceConcurrent() {
     // now there should be 3 exclusive jobs in the database:
     assertEquals(3, managementService.createJobQuery().count());
 
-    waitForJobExecutorToProcessAllJobs(10000L, 400L);
+    waitForJobExecutorToProcessAllJobs(20000L, 400L);
 
     // all the jobs are done
     assertEquals(0, managementService.createJobQuery().count());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryManager.java
Patch:
@@ -65,7 +65,7 @@ public interface HistoryManager extends Session {
    * Finds the {@link HistoricActivityInstanceEntity} that is active in the given execution. Uses the {@link DbSqlSession} cache to make sure the right instance is returned, regardless of whether or
    * not entities have already been flushed to DB.
    */
-  public abstract HistoricActivityInstanceEntity findActivityInstance(ExecutionEntity execution, boolean createOnNotFound);
+  public abstract HistoricActivityInstanceEntity findActivityInstance(ExecutionEntity execution, boolean createOnNotFound, boolean validateEndTimeNull);
 
   /**
    * Replaces any open historic activityInstances' execution-id's to the id of the replaced execution, if activity history is enabled.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -495,6 +495,9 @@ public void deleteDataRelatedToExecution(ExecutionEntity executionEntity, String
     Collection<JobEntity> jobsForExecution = jobEntityManager.findJobsByExecutionId(executionEntity.getId());
     for (JobEntity job : jobsForExecution) {
       job.delete(); // TODO: should be moved to entitymanager!
+      if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
+        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED, job));
+      }
 //      jobEntityManager.delete(job, false); // false -> jobs fire the events themselves TODO: is this right?
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ContinueMultiInstanceOperation.java
Patch:
@@ -61,7 +61,7 @@ protected void continueThroughFlowNode(FlowNode flowNode) {
       if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
         Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
             ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, flowNode.getId(), flowNode.getName(), execution.getId(),
-                execution.getProcessInstanceId(), execution.getProcessDefinitionId(), parseActivityType(flowNode)));
+                execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));
       }
       
       try {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -92,7 +92,7 @@ public void run() {
       if (execution.getId().equals(execution.getProcessInstanceId()) == false) {
         Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
             ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED, flowNode.getId(), flowNode.getName(),
-                execution.getId(), execution.getProcessInstanceId(), execution.getProcessDefinitionId(), parseActivityType(flowNode)));
+                execution.getId(), execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));
       }
       
       leaveFlowNode(flowNode);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -57,7 +57,7 @@ public void leave(ActivityExecution execution) {
     if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
           ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED, exclusiveGateway.getId(), exclusiveGateway.getName(), execution.getId(),
-              execution.getProcessInstanceId(), execution.getProcessDefinitionId(), parseActivityType(exclusiveGateway)));
+              execution.getProcessInstanceId(), execution.getProcessDefinitionId(), exclusiveGateway));
     }
 
     SequenceFlow outgoingSequenceFlow = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AbstractCompleteTaskCmd.java
Patch:
@@ -57,7 +57,7 @@ protected void executeTaskComplete(CommandContext commandContext, TaskEntity tas
     ActivitiEventDispatcher eventDispatcher = Context.getProcessEngineConfiguration().getEventDispatcher();
     if (eventDispatcher.isEnabled()) {
       if (variables != null) {
-        eventDispatcher.dispatchEvent(ActivitiEventBuilder.createEntityWithVariablesEvent(ActivitiEventType.TASK_COMPLETED, this, variables, localScope));
+        eventDispatcher.dispatchEvent(ActivitiEventBuilder.createEntityWithVariablesEvent(ActivitiEventType.TASK_COMPLETED, taskEntity, variables, localScope));
       } else {
         eventDispatcher.dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TASK_COMPLETED, taskEntity));
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -70,7 +70,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
         if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
           commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
                 ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPENSATE, flowElement.getId(), flowElement.getName(),
-                    compensatingExecution.getId(), compensatingExecution.getProcessInstanceId(), compensatingExecution.getProcessDefinitionId(), flowElement.getClass().getCanonicalName()));
+                    compensatingExecution.getId(), compensatingExecution.getProcessInstanceId(), compensatingExecution.getProcessDefinitionId(), flowElement));
         }
         compensatingExecution.setCurrentFlowElement(flowElement);
         Context.getAgenda().planContinueProcessInCompensation(compensatingExecution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityCompletedEventHandler.java
Patch:
@@ -23,6 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
+    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
     
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityStartedEventHandler.java
Patch:
@@ -23,6 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
+    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
     
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -415,7 +415,9 @@ public void deleteChildExecutions(ExecutionEntity executionEntity, String delete
     Iterator<ExecutionTreeNode> iterator = executionTreeNode.leafsFirstIterator();
     while (iterator.hasNext()) {
       ExecutionEntity childExecutionEntity = iterator.next().getExecutionEntity();
-      if (childExecutionEntity.isActive() && !childExecutionEntity.isEnded()) {
+      if (childExecutionEntity.isActive() 
+          && !childExecutionEntity.isEnded()
+          && !executionTreeNode.getExecutionEntity().getId().equals(childExecutionEntity.getId())) { // Not the root of the tree is deleted here
         deleteExecutionAndRelatedData(childExecutionEntity, deleteReason, cancel);
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateCatchTimerEventActivityBehavior.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.activiti.bpmn.model.TimerEventDefinition;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.jobexecutor.TimerEventHandler;
 import org.activiti.engine.impl.jobexecutor.TriggerTimerEventJobHandler;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
@@ -36,7 +37,8 @@ public IntermediateCatchTimerEventActivityBehavior(TimerEventDefinition timerEve
 
   public void execute(ActivityExecution execution) {
     TimerEntity timer = TimerUtil
-        .createTimerEntityForTimerEventDefinition(timerEventDefinition, false, (ExecutionEntity) execution, TriggerTimerEventJobHandler.TYPE, execution.getCurrentActivityId());
+        .createTimerEntityForTimerEventDefinition(timerEventDefinition, false, (ExecutionEntity) execution, TriggerTimerEventJobHandler.TYPE, 
+            TimerEventHandler.createConfiguration(execution.getCurrentActivityId(), timerEventDefinition.getEndDate()));
     Context.getCommandContext().getJobEntityManager().schedule(timer);
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/IntermediateTimerEventRepeatWithEndTest.java
Patch:
@@ -104,9 +104,7 @@ public void testRepeatWithEnd() throws Throwable {
 
     // Test Timer Catch Intermediate Events after completing Task C
     taskService.complete(task.getId());
-    nextTimeCal.add(Calendar.MINUTE, 30); // after 1H 30 minutes from
-                                          // process start, the timer will
-                                          // trigger because of the endDate
+    nextTimeCal.add(Calendar.MINUTE, 60); 
     processEngineConfiguration.getClock().setCurrentTime(nextTimeCal.getTime());
 
     waitForJobExecutorToProcessAllJobs(2000, 500);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -274,8 +274,9 @@ protected void addTimerDeclarations(ProcessDefinitionEntity processDefinition, o
           if (CollectionUtils.isNotEmpty(startEvent.getEventDefinitions())) {
             EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);
             if (eventDefinition instanceof TimerEventDefinition) {
-              TimerEntity timer = TimerUtil.createTimerEntityForTimerEventDefinition((TimerEventDefinition) eventDefinition, false, null, TimerStartEventJobHandler.TYPE,
-                  TimerEventHandler.createConfiguration(startEvent.getId(), null));
+              TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;
+              TimerEntity timer = TimerUtil.createTimerEntityForTimerEventDefinition(timerEventDefinition, false, null, TimerStartEventJobHandler.TYPE,
+                  TimerEventHandler.createConfiguration(startEvent.getId(), timerEventDefinition.getEndDate()));
               timer.setProcessDefinitionId(processDefinition.getId());
 
               if (processDefinition.getTenantId() != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DurationHelper.java
Patch:
@@ -141,7 +141,7 @@ protected Calendar getDateAfterRepeat(Calendar date) {
     for (int i = 0; i < maxLoops + 1 && !cur.after(date); i++) {
       cur = add(cur, period);
     }
-
+    
     return cur.before(date) ? date : TimeZoneUtil.convertToTimeZone(cur, clockReader.getCurrentTimeZone());
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntityManager.java
Patch:
@@ -153,8 +153,9 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
                 if (CollectionUtils.isNotEmpty(startEvent.getEventDefinitions())) {
                   EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);
                   if (eventDefinition instanceof TimerEventDefinition) {
+                    TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;
                     TimerEntity timer = TimerUtil.createTimerEntityForTimerEventDefinition((TimerEventDefinition) eventDefinition, false, null, TimerStartEventJobHandler.TYPE,
-                        TimerEventHandler.createConfiguration(startEvent.getId(), null));
+                        TimerEventHandler.createConfiguration(startEvent.getId(), timerEventDefinition.getEndDate()));
                     timer.setProcessDefinitionId(previousProcessDefinition.getId());
 
                     if (previousProcessDefinition.getTenantId() != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -116,6 +116,7 @@ public void execute(CommandContext commandContext) {
         Date newTimer = calculateNextTimer();
         if (newTimer != null && isValidTime(newTimer)) {
           TimerEntity te = new TimerEntity(this);
+          System.out.println("-------AAP--->" + newTimer);
           te.setDuedate(newTimer);
           Context.getCommandContext().getJobEntityManager().schedule(te);
         }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndTest.java
Patch:
@@ -121,9 +121,9 @@ public void testCycleDateStartTimerEvent() throws Exception {
 
     // ADVANCE THE CLOCK SO THE END DATE WILL BE REACHED
     // 12 dec (last execution)
-    moveByMinutes(60 * 24);
+    moveByMinutes((60 * 24) + 100);
     try {
-      waitForJobExecutorToProcessAllJobs(2000, 200);
+      waitForJobExecutorToProcessAllJobs(10000, 200);
     } catch (Exception e) {
       fail("Because the endDate is reached it will not be executed other jobs");
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.java
Patch:
@@ -88,14 +88,14 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // No tasks
     List<Task> tasks = taskService.createTaskQuery().list();
     assertEquals(0, tasks.size());
-
+    
     // ADVANCE THE CLOCK
     // advance the clock after 9 days from starting the process ->
     // the system will execute the pending job and will create a new one
     // (day by day)
-    moveByMinutes(9 * 60 * 24);
+    moveByMinutes((9 * 60 * 24));
     try {
-      waitForJobExecutorToProcessAllJobs(2000L, 200);
+      waitForJobExecutorToProcessAllJobs(10000L, 200);
       fail("there must be a pending job because the endDate is not reached yet");
     } catch (Exception e) {
       // expected failure

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/FieldExtensionExport.java
Patch:
@@ -44,7 +44,7 @@ public static boolean writeFieldExtensions(List<FieldExtension> fieldExtensionLi
             xtw.writeCData(fieldExtension.getStringValue());
           } else {
             xtw.writeStartElement(ACTIVITI_EXTENSIONS_PREFIX, ATTRIBUTE_FIELD_EXPRESSION, ACTIVITI_EXTENSIONS_NAMESPACE);
-            xtw.writeCharacters(fieldExtension.getExpression());
+            xtw.writeCData(fieldExtension.getExpression());
           }
           xtw.writeEndElement();
           xtw.writeEndElement();

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/util/BpmnXMLUtil.java
Patch:
@@ -102,8 +102,8 @@ public static void parseChildElements(String elementName, BaseElement parentElem
   public static void parseChildElements(String elementName, BaseElement parentElement, XMLStreamReader xtr, 
       Map<String, BaseChildElementParser> childParsers, BpmnModel model) throws Exception {
     
-    Map<String, BaseChildElementParser> localParserMap = new HashMap<String, BaseChildElementParser>(genericChildParserMap);
-
+    Map<String, BaseChildElementParser> localParserMap =
+        new HashMap<String, BaseChildElementParser>(genericChildParserMap);
     if (childParsers != null) {
       localParserMap.putAll(childParsers);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/history/HistoricVariableInstanceQuery.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.activiti.engine.query.Query;
 
-/**
+/** 
  * Programmatic querying for {@link HistoricVariableInstance}s.
  * 
  * @author Joram Barrez
@@ -28,7 +28,7 @@ public interface HistoricVariableInstanceQuery extends Query<HistoricVariableIns
 
   /** Only select historic process variables with the given process instance. */
   HistoricVariableInstanceQuery processInstanceId(String processInstanceId);
-
+  
   /** Only select historic process variables with the given id. **/
   HistoricVariableInstanceQuery executionId(String executionId);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DurationHelper.java
Patch:
@@ -89,7 +89,7 @@ public DurationHelper(String expressionS, int maxIterations, ClockReader clockRe
       end = expression.size() == 1 ? null : parseDate(expression.get(1));
     } else {
       start = parseDate(expression.get(0));
-      if (isDuration(expression.get(1))) {
+      if (isDuration(expression.get(1)))  {
         period = parsePeriod(expression.get(1));
       } else {
         end = parseDate(expression.get(1));

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPConnectionUtil.java
Patch:
@@ -53,6 +53,7 @@ public static InitialDirContext createDirectoryContext(LDAPConfigurator ldapConf
     try {
       context = new InitialDirContext(properties);
     } catch (NamingException e) {
+    	LOGGER.warn("Could not create InitialDirContext for LDAP connection : " + e.getMessage());
       throw new ActivitiException("Could not create InitialDirContext for LDAP connection : " + e.getMessage(), e);
     }
     return context;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricVariableInstanceBaseResource.java
Patch:
@@ -58,8 +58,8 @@ protected DataResponse getQueryResponse(HistoricVariableInstanceQueryRequest que
     if (queryRequest.getTaskId() != null) {
       query.taskId(queryRequest.getTaskId());
     }
-
-    if (queryRequest.getExecutionId() != null) {
+    
+    if(queryRequest.getExecutionId() != null) {
       query.executionId(queryRequest.getExecutionId());
     }
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricVariableInstanceCollectionResource.java
Patch:
@@ -41,8 +41,9 @@ public DataResponse getHistoricActivityInstances(@RequestParam Map<String, Strin
     if (allRequestParams.get("taskId") != null) {
       query.setTaskId(allRequestParams.get("taskId"));
     }
-
-    if (allRequestParams.get("executionId") != null) {
+    
+    if(allRequestParams.get("executionId") != null)
+    {
       query.setExecutionId(allRequestParams.get("executionId"));
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -114,6 +114,8 @@ public void leave(ActivityExecution execution) {
     
     callActivityEndListeners(execution);
     
+    //executeCompensationBoundaryEvents(execution.getCurrentFlowElement(), execution);
+    
     logLoopDetails(execution, "instance completed", loopCounter, nrOfCompletedInstances, nrOfActiveInstances, nrOfInstances);
 
     ExecutionEntity executionEntity = (ExecutionEntity) execution;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -76,6 +76,8 @@ public void leave(ActivityExecution execution) {
     if (loopCounter != nrOfInstances && !completionConditionSatisfied(execution)) {
       callActivityEndListeners(execution);
     }
+    
+    //executeCompensationBoundaryEvents(execution.getCurrentFlowElement(), execution);
 
     if (loopCounter >= nrOfInstances || completionConditionSatisfied(execution)) {
       boolean hasCompensation = false;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntityManager.java
Patch:
@@ -83,7 +83,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
     for (ProcessDefinition processDefinition : processDefinitions) {
 
       // remove timer start events:
-      List<Job> timerStartJobs = Context.getCommandContext().getJobEntityManager().findJobsByConfiguration(TimerStartEventJobHandler.TYPE, processDefinition.getKey());
+      List<Job> timerStartJobs = Context.getCommandContext().getJobEntityManager().findJobsByTypeAndProcessDefinitionId(TimerStartEventJobHandler.TYPE, processDefinition.getId());
 
       if (timerStartJobs != null && !timerStartJobs.isEmpty()) {
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndExpressionTest.java
Patch:
@@ -94,7 +94,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // job and will create a new one
     moveByMinutes(60 * 24);
     try {
-      waitForJobExecutorToProcessAllJobs(2000, 200);
+      waitForJobExecutorToProcessAllJobs(2000L, 200);
       fail("there must be a pending job because the endDate is not reached yet");
     } catch (Exception e) {
       // expected failure

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.java
Patch:
@@ -95,7 +95,7 @@ public void testCycleDateStartTimerEvent() throws Exception {
     // (day by day)
     moveByMinutes(9 * 60 * 24);
     try {
-      waitForJobExecutorToProcessAllJobs(10000, 200);
+      waitForJobExecutorToProcessAllJobs(2000L, 200);
       fail("there must be a pending job because the endDate is not reached yet");
     } catch (Exception e) {
       // expected failure

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -73,7 +73,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
                     compensatingExecution.getId(), compensatingExecution.getProcessInstanceId(), compensatingExecution.getProcessDefinitionId(), flowElement.getClass().getCanonicalName()));
         }
         compensatingExecution.setCurrentFlowElement(flowElement);
-        Context.getAgenda().planContinueProcessOperation(compensatingExecution);
+        Context.getAgenda().planContinueProcessInCompensation(compensatingExecution);
 
       } catch (Exception e) {
         throw new ActivitiException("Error while handling compensation event " + eventSubscription, e);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/compensate/helper/GetVariablesDelegate.java
Patch:
@@ -23,8 +23,8 @@
 public class GetVariablesDelegate implements JavaDelegate {
 
   public void execute(DelegateExecution execution) {
-    Object nrOfCompletedInstances = execution.getVariable("nrOfCompletedInstances");
-    Integer variable = SetVariablesDelegate.variablesMap.get(nrOfCompletedInstances);
+    Integer nrOfCompletedInstances = (Integer) execution.getVariable("nrOfCompletedInstances");
+    Integer variable = SetVariablesDelegate.variablesMap.get(nrOfCompletedInstances - 1);
     Object variableLocal = execution.getVariable("variable");
     if (!variableLocal.equals(variable)) {
       throw new ActivitiIllegalArgumentException("wrong variable passed in to compensation handler");

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/compensate/helper/SetVariablesDelegate.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
 /**
  * @author Daniel Meyer
@@ -30,9 +31,9 @@ public class SetVariablesDelegate implements JavaDelegate {
   protected int lastInt = 0;
 
   public void execute(DelegateExecution execution) {
-    Object nrOfCompletedInstances = execution.getVariableLocal("nrOfCompletedInstances");
+    Object nrOfCompletedInstances = execution.getVariable("nrOfCompletedInstances");
     variablesMap.put(nrOfCompletedInstances, lastInt);
-    execution.setVariableLocal("variable", lastInt);
+    ((ExecutionEntity) execution).getParent().setVariableLocal("variable", lastInt);
     lastInt++;
   }
 

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ImplementationType.java
Patch:
@@ -17,6 +17,7 @@ public class ImplementationType {
   public static String IMPLEMENTATION_TYPE_CLASS = "class";
   public static String IMPLEMENTATION_TYPE_EXPRESSION = "expression";
   public static String IMPLEMENTATION_TYPE_DELEGATEEXPRESSION = "delegateExpression";
+  public static String IMPLEMENTATION_TYPE_INSTANCE = "instance";
   public static String IMPLEMENTATION_TYPE_THROW_SIGNAL_EVENT = "throwSignalEvent";
   public static String IMPLEMENTATION_TYPE_THROW_GLOBAL_SIGNAL_EVENT = "throwGlobalSignalEvent";
   public static String IMPLEMENTATION_TYPE_THROW_MESSAGE_EVENT = "throwMessageEvent";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -81,6 +81,8 @@ protected void executeExecutionListeners(HasExecutionListeners elementWithExecut
             executionListener = listenerFactory.createExpressionExecutionListener(activitiListener);
           } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {
             executionListener = listenerFactory.createDelegateExpressionExecutionListener(activitiListener);
+          } else if (ImplementationType.IMPLEMENTATION_TYPE_INSTANCE.equalsIgnoreCase(activitiListener.getImplementationType())) {
+            executionListener = (ExecutionListener) activitiListener.getInstance();
           }
           
           ActivityExecution executionToUse = executionToUseForListener != null ? executionToUseForListener : execution;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -377,7 +377,7 @@ private ProcessInstance startProcessInstanceWithFailingJob() {
       managementService.executeJob(timerJob.getId());
       fail("RuntimeException from within the script task expected");
     } catch (RuntimeException re) {
-      assertTextPresent(EXCEPTION_MESSAGE, re.getMessage());
+      assertTextPresent(EXCEPTION_MESSAGE, re.getCause().getMessage());
     }
     return processInstance;
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -57,7 +57,7 @@ public void testExecuteJobNullJobId() {
       managementService.executeJob(null);
       fail("ActivitiException expected");
     } catch (ActivitiIllegalArgumentException re) {
-      assertTextPresent("jobId and job is null", re.getMessage());
+      assertTextPresent("JobId is null", re.getMessage());
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -73,7 +73,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
                     compensatingExecution.getId(), compensatingExecution.getProcessInstanceId(), compensatingExecution.getProcessDefinitionId(), flowElement.getClass().getCanonicalName()));
         }
         compensatingExecution.setCurrentFlowElement(flowElement);
-        Context.getAgenda().planContinueProcessOperation(compensatingExecution);
+        Context.getAgenda().planContinueProcessInCompensation(compensatingExecution);
 
       } catch (Exception e) {
         throw new ActivitiException("Error while handling compensation event " + eventSubscription, e);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/compensate/helper/GetVariablesDelegate.java
Patch:
@@ -23,8 +23,8 @@
 public class GetVariablesDelegate implements JavaDelegate {
 
   public void execute(DelegateExecution execution) {
-    Object nrOfCompletedInstances = execution.getVariable("nrOfCompletedInstances");
-    Integer variable = SetVariablesDelegate.variablesMap.get(nrOfCompletedInstances);
+    Integer nrOfCompletedInstances = (Integer) execution.getVariable("nrOfCompletedInstances");
+    Integer variable = SetVariablesDelegate.variablesMap.get(nrOfCompletedInstances - 1);
     Object variableLocal = execution.getVariable("variable");
     if (!variableLocal.equals(variable)) {
       throw new ActivitiIllegalArgumentException("wrong variable passed in to compensation handler");

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/compensate/helper/SetVariablesDelegate.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
 /**
  * @author Daniel Meyer
@@ -30,9 +31,9 @@ public class SetVariablesDelegate implements JavaDelegate {
   protected int lastInt = 0;
 
   public void execute(DelegateExecution execution) {
-    Object nrOfCompletedInstances = execution.getVariableLocal("nrOfCompletedInstances");
+    Object nrOfCompletedInstances = execution.getVariable("nrOfCompletedInstances");
     variablesMap.put(nrOfCompletedInstances, lastInt);
-    execution.setVariableLocal("variable", lastInt);
+    ((ExecutionEntity) execution).getParent().setVariableLocal("variable", lastInt);
     lastInt++;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireAsyncJobsDueCmd.java
Patch:
@@ -44,7 +44,6 @@ public AcquiredJobEntities execute(CommandContext commandContext) {
     for (JobEntity job: jobs) {
       lockJob(commandContext, job, asyncExecutor.getAsyncJobLockTimeInMillis());
       acquiredJobs.addJob(job);
-      asyncExecutor.executeAsyncJob(job);
     }
     
     return acquiredJobs;

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/ActivitiErrorEvent.java
Patch:
@@ -23,4 +23,7 @@ public interface ActivitiErrorEvent extends ActivitiActivityEvent {
    * @return the error-code of the error. Returns null, if no specific error-code has been specified when the error was thrown.
    */
   public String getErrorCode();
+  
+  public String getErrorId();
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventBuilder.java
Patch:
@@ -231,12 +231,14 @@ public static ActivitiMessageEvent createMessageEvent(ActivitiEventType type, St
     return newEvent;
   }
 
-  public static ActivitiErrorEvent createErrorEvent(ActivitiEventType type, String activityId, String errorCode, String executionId, String processInstanceId, String processDefinitionId) {
+  public static ActivitiErrorEvent createErrorEvent(ActivitiEventType type, String activityId, String errorId, String errorCode, 
+      String executionId, String processInstanceId, String processDefinitionId) {
     ActivitiErrorEventImpl newEvent = new ActivitiErrorEventImpl(type);
     newEvent.setActivityId(activityId);
     newEvent.setExecutionId(executionId);
     newEvent.setProcessDefinitionId(processDefinitionId);
     newEvent.setProcessInstanceId(processInstanceId);
+    newEvent.setErrorId(errorId);
     newEvent.setErrorCode(errorCode);
     return newEvent;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -263,7 +263,6 @@ public ExecutionEntity createProcessInstanceExecution(String processDefinitionId
     // Fire events
     if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, processInstanceExecution));
-      Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, processInstanceExecution));
     }
 
     return processInstanceExecution;

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventSupport.java
Patch:
@@ -106,9 +106,7 @@ protected void dispatchEvent(ActivitiEvent event, ActivitiEventListener listener
       if (listener.isFailOnException()) {
         throw new ActivitiException("Exception while executing event-listener", t);
       } else {
-        // Ignore the exception and continue notifying remaining
-        // listeners. The
-        // listener
+        // Ignore the exception and continue notifying remaining listeners. The listener
         // explicitly states that the exception should not bubble up
         LOG.warn("Exception while executing event-listener, which was ignored", t);
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/ProcessParseHandler.java
Patch:
@@ -61,8 +61,7 @@ protected ProcessDefinitionEntity transformProcess(BpmnParse bpmnParse, Process
     currentProcessDefinition.setName(process.getName());
     currentProcessDefinition.setCategory(bpmnParse.getBpmnModel().getTargetNamespace());
     currentProcessDefinition.setDescription(process.getDocumentation());
-    currentProcessDefinition.setProperty(PROPERTYNAME_DOCUMENTATION, process.getDocumentation()); // Kept for backwards compatibility.
-                                                                                                  // See ACT-1020
+    currentProcessDefinition.setProperty(PROPERTYNAME_DOCUMENTATION, process.getDocumentation()); // Kept for backwards compatibility. See ACT-1020
     currentProcessDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());
     currentProcessDefinition.setDeploymentId(bpmnParse.getDeployment().getId());
     createEventListeners(bpmnParse, process.getEventListeners(), currentProcessDefinition);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -224,9 +224,9 @@ public void deploy(DeploymentEntity deployment, Map<String, Object> deploymentSe
         dbSqlSession.insert(processDefinition);
         addAuthorizations(processDefinition);
 
-        // if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
-        // commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, processDefinition));
-        // }
+        if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
+          commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, processDefinition));
+        }
 
         scheduleTimers(timers);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -328,6 +328,8 @@ public void setCurrentFlowElement(FlowElement currentFlowElement) {
     this.currentFlowElement = currentFlowElement;
     if (currentFlowElement != null) {
       this.activityId = currentFlowElement.getId();
+    } else {
+      this.activityId = null;
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -154,7 +154,6 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
       if (subProcessExecution != null) {
         executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution, subProcessExecution.getCurrentActivityId(), "boundary event interrupting", true, false);
       }
-    
     }
     
     executionEntityManager.deleteDataRelatedToExecution(parentExecution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -263,6 +263,7 @@ public ExecutionEntity createProcessInstanceExecution(String processDefinitionId
     // Fire events
     if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, processInstanceExecution));
+      Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, processInstanceExecution));
     }
 
     return processInstanceExecution;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -91,7 +91,9 @@ public void run() {
           ScopeUtil.createCopyOfSubProcessExecutionForCompensation(parentExecution, parentExecution.getParent());
         }
       } else {
-        parentExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement());
+        if (!(parentExecution.getCurrentFlowElement() instanceof SubProcess)) {
+          parentExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement());
+        }
       }
       
       // If there are no more active child executions, the process can be continues

File: modules/activiti-engine/src/test/java/org/activiti/standalone/parsing/TestBPMNParseHandler.java
Patch:
@@ -28,8 +28,9 @@ protected Class<? extends BaseElement> getHandledType() {
     return Process.class;
   }
 
-  protected void executeParse(BpmnParse bpmnParse, Process element) {
+  protected void executeParse(BpmnParse bpmnParse, Process process) {
     // Change the key of all deployed process-definitions
+    process.setId(bpmnParse.getCurrentProcessDefinition().getKey() + "-modified");
     bpmnParse.getCurrentProcessDefinition().setKey(bpmnParse.getCurrentProcessDefinition().getKey() + "-modified");
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1622,8 +1622,9 @@ public void testNativeQuery() {
 
     long piCount = runtimeService.createProcessInstanceQuery().count();
 
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(ProcessInstance.class)).list().size());
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(ProcessInstance.class)).count());
+    // There are 2 executions for each process instance
+    assertEquals(piCount*2, runtimeService.createNativeProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(ProcessInstance.class)).list().size());
+    assertEquals(piCount*2, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(ProcessInstance.class)).count());
   }
 
   /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CommentEntityManager.java
Patch:
@@ -31,7 +31,7 @@ public class CommentEntityManager extends AbstractEntityManager<CommentEntity> {
 
   public void delete(CommentEntity commentEntity) {
     checkHistoryEnabled();
-    super.delete(commentEntity);
+    super.delete(commentEntity, false);
 
     Comment comment = (Comment) commentEntity;
     if (getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
@@ -52,7 +52,7 @@ public void delete(CommentEntity commentEntity) {
 
   public void insert(CommentEntity commentEntity) {
     checkHistoryEnabled();
-    super.insert(commentEntity);
+    super.insert(commentEntity, false);
 
     Comment comment = (Comment) commentEntity;
     if (getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -43,6 +43,9 @@ public class AttachmentEntity implements Attachment, PersistentObject, HasRevisi
   protected String userId;
   protected Date time;
 
+  public AttachmentEntity() {
+  }
+
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();
     persistentState.put("name", name);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CompensateEventSubscriptionEntity.java
Patch:
@@ -24,17 +24,17 @@
 public class CompensateEventSubscriptionEntity extends EventSubscriptionEntity {
   
   private static final long serialVersionUID = 1L;
-  
+
   private CompensateEventSubscriptionEntity() {
   }
 
   private CompensateEventSubscriptionEntity(ExecutionEntity executionEntity) {
     super(executionEntity);
-    eventType=CompensationEventHandler.EVENT_HANDLER_TYPE;    
+    eventType=CompensationEventHandler.EVENT_HANDLER_TYPE;
   }
   
   public static CompensateEventSubscriptionEntity createAndInsert(ExecutionEntity executionEntity) {
-    CompensateEventSubscriptionEntity eventSubscription = new CompensateEventSubscriptionEntity(executionEntity);    
+    CompensateEventSubscriptionEntity eventSubscription = new CompensateEventSubscriptionEntity(executionEntity);
     if (executionEntity.getTenantId() != null) {
     	eventSubscription.setTenantId(executionEntity.getTenantId());
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -251,14 +251,14 @@ public class ExecutionEntity extends VariableScopeImpl implements ActivityExecut
   protected boolean forcedUpdate;
   
   protected List<VariableInstanceEntity> queryVariables;
-
-  public ExecutionEntity() {
-  }
   
   public ExecutionEntity(ActivityImpl activityImpl) {
     this.startingExecution = new StartingExecution(activityImpl);
   }
 
+  public ExecutionEntity() {
+  }
+
   /** creates a new execution. properties processDefinition, processInstance and activity will be initialized. */  
   public ExecutionEntity createExecution() {
     // create the new child execution

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -42,6 +42,7 @@ public class HistoricDetailVariableInstanceUpdateEntity extends HistoricDetailEn
   protected Object cachedValue;
 
   protected HistoricDetailVariableInstanceUpdateEntity() {
+    this.detailType = "VariableUpdate";
   }
 
   public static HistoricDetailVariableInstanceUpdateEntity copyAndInsert(VariableInstanceEntity variableInstance) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricFormPropertyEntity.java
Patch:
@@ -27,6 +27,7 @@ public class HistoricFormPropertyEntity extends HistoricDetailEntity implements
   protected String propertyValue;
   
   public HistoricFormPropertyEntity() {
+    this.detailType = "FormProperty";
   }
 
   public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId, String propertyValue) {
@@ -40,6 +41,7 @@ public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId,
     this.propertyId = propertyId;
     this.propertyValue = propertyValue;
     this.time = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
+    this.detailType = "FormProperty";
 
     HistoricActivityInstanceEntity historicActivityInstance = Context.getCommandContext().getHistoryManager().findActivityInstance(execution);
     if (historicActivityInstance!=null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/SignalEventSubscriptionEntity.java
Patch:
@@ -35,7 +35,7 @@ public SignalEventSubscriptionEntity(ExecutionEntity executionEntity) {
     eventType = "signal";
   }
   
-  public SignalEventSubscriptionEntity() {    
+  public SignalEventSubscriptionEntity() {
     eventType = "signal";
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/VariableType.java
Patch:
@@ -20,7 +20,7 @@ public interface VariableType {
   /**
    * name of variable type (limited to 100 characters length)
    */
-  String getTypeName();
+  public String getTypeName();
   
   /**
    * <p>Indicates if this variable type supports caching.</p>

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -74,7 +74,7 @@ public void execute(ActivityExecution execution) {
     }
     
     ExecutionEntityManager executionEntityManager = Context.getCommandContext().getExecutionEntityManager();
-    Collection<ExecutionEntity> joinedExecutions = executionEntityManager.getInactiveExecutionsInActivity(execution.getCurrentActivityId());
+    Collection<ExecutionEntity> joinedExecutions = executionEntityManager.getInactiveExecutionsInActivityAndForProcessInstance(execution.getCurrentActivityId(), execution.getProcessInstanceId());
     if (multiInstanceExecution != null) {
       joinedExecutions = cleanJoinedExecutions(joinedExecutions, multiInstanceExecution);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/AbstractActivityBpmnParseHandler.java
Patch:
@@ -53,7 +53,7 @@ protected void createMultiInstanceLoopCharacteristics(BpmnParse bpmnParse, Activ
 
     ExpressionManager expressionManager = bpmnParse.getExpressionManager();
 
-    // loopcardinality
+    // loop cardinality
     if (StringUtils.isNotEmpty(loopCharacteristics.getLoopCardinality())) {
       miActivityBehavior.setLoopCardinalityExpression(expressionManager.createExpression(loopCharacteristics.getLoopCardinality()));
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntityManager.java
Patch:
@@ -39,8 +39,7 @@ public Class<VariableInstanceEntity> getManagedPersistentObject() {
   public List<VariableInstanceEntity> findVariableInstancesByTaskId(String taskId) {
     return getDbSqlSession().selectList("selectVariablesByTaskId", taskId);
   }
-
-  @SuppressWarnings("unchecked")
+  
   public Collection<VariableInstanceEntity> findVariableInstancesByExecutionId(final String executionId) {
     return getList("selectVariablesByExecutionId", executionId, new CachedEntityMatcher<VariableInstanceEntity>() {
       public boolean isRetained(VariableInstanceEntity variableInstanceEntity) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/history/HistoricVariableInstanceQuery.java
Patch:
@@ -15,7 +15,6 @@
 
 import org.activiti.engine.query.Query;
 
-
 /** 
  * Programmatic querying for {@link HistoricVariableInstance}s.
  * 
@@ -29,6 +28,9 @@ public interface HistoricVariableInstanceQuery extends Query<HistoricVariableIns
   /** Only select historic process variables with the given process instance. */
   HistoricVariableInstanceQuery processInstanceId(String processInstanceId);
   
+  /** Only select historic process variables with the given id. **/
+  HistoricVariableInstanceQuery executionId(String executionId);
+
   /** Only select historic process variables with the given task. */
   HistoricVariableInstanceQuery taskId(String taskId);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DurationHelper.java
Patch:
@@ -90,7 +90,7 @@ public DurationHelper(String expressionS, int maxIterations, ClockReader clockRe
       end = expression.size() == 1 ? null : parseDate(expression.get(1));
     } else {
       start = parseDate(expression.get(0));
-      if (isDuration(expression.get(1))) {
+      if (isDuration(expression.get(1)))  {
         period = parsePeriod(expression.get(1));
       } else {
         end = parseDate(expression.get(1));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -791,7 +791,9 @@ protected void initSessionFactories() {
     if (sessionFactories==null) {
       sessionFactories = new HashMap<Class<?>, SessionFactory>();
 
-      dbSqlSessionFactory = new DbSqlSessionFactory();
+      if (dbSqlSessionFactory == null) {
+        dbSqlSessionFactory = new DbSqlSessionFactory();
+      }
       dbSqlSessionFactory.setDatabaseType(databaseType);
       dbSqlSessionFactory.setIdGenerator(idGenerator);
       dbSqlSessionFactory.setSqlSessionFactory(sqlSessionFactory);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -64,7 +64,7 @@ public Object execute(CommandContext commandContext)  {
     ProcessEngineConfiguration processEngineConfig = commandContext.getProcessEngineConfiguration();
    
     if (activity == null || activity.getFailedJobRetryTimeCycleValue() == null) {
-      log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
+      log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
       job.setRetries(job.getRetries() - 1);
       job.setLockOwner(null);
       job.setLockExpirationTime(null);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -144,5 +144,5 @@ public interface ActivityExecution extends DelegateExecution {
    * Performs destroy scope behavior: all child executions and sub-process instances and other related
    * resources are removed. The execution itself can continue execution. 
    */
-  void destroyScope(String string);
+  void destroyScope(String reason);
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -201,7 +201,8 @@ public void remove() {
       }
     }
   }
-  
+
+  @Override
   public void destroyScope(String reason) {
     
    log.debug("performing destroy scope behavior for execution {}", this);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BaseBpmnJsonConverter.java
Patch:
@@ -520,6 +520,7 @@ protected void convertJsonToFormProperties(JsonNode objectNode, BaseElement elem
                                 for (JsonNode enumNode : enumValuesNode) {
                                     if (enumNode.get("value") != null && enumNode.get("value").isNull() == false) {
                                         FormValue formValue = new FormValue();
+                                        formValue.setId(enumNode.get("value").asText());
                                         formValue.setName(enumNode.get("value").asText());
                                         formValueList.add(formValue);
                                     }

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPConnectionUtil.java
Patch:
@@ -53,6 +53,7 @@ public static InitialDirContext createDirectoryContext(LDAPConfigurator ldapConf
     try {
       context = new InitialDirContext(properties);
     } catch (NamingException e) {
+    	LOGGER.warn("Could not create InitialDirContext for LDAP connection : " + e.getMessage());
       throw new ActivitiException("Could not create InitialDirContext for LDAP connection : " + e.getMessage(), e);
     }
     return context; 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ServiceTaskExpressionActivityBehavior.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.engine.impl.bpmn.behavior;
 
+import org.activiti.engine.ActivitiException;
 import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
@@ -67,7 +68,7 @@ public void execute(ActivityExecution execution) {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw new RuntimeException(exc);
+        throw new ActivitiException("Could not execute service task expression",exc);
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -147,7 +147,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
     if (parentExecution.getCurrentFlowElement() instanceof CallActivity) {
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
-        executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution, subProcessExecution.getCurrentActivityId(), "boundary event interrupting", true);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution, subProcessExecution.getCurrentActivityId(), "boundary event interrupting", true, false);
       }
     
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteProcessInstanceCmd.java
Patch:
@@ -48,7 +48,7 @@ public Void execute(CommandContext commandContext) {
         .dispatchEvent(ActivitiEventBuilder.createCancelledEvent(this.processInstanceId, this.processInstanceId, null, deleteReason));
     }
 
-    commandContext.getExecutionEntityManager().deleteProcessInstanceExecutionEntity(processInstanceId, null, deleteReason);
+    commandContext.getExecutionEntityManager().deleteProcessInstanceExecutionEntity(processInstanceId, null, deleteReason, true);
 
     // TODO : remove following line of deleteProcessInstanceExecutionEntity is found to be doing the same as deleteProcessInstance
     // commandContext.getExecutionEntityManager().deleteProcessInstance(processInstanceId, deleteReason);

File: modules/activiti5-compatibility/src/test/java/org/activiti/engine/test/api/event/ProcessInstanceEventsTest.java
Patch:
@@ -231,7 +231,7 @@ public void testProcessCompleted_ParallelGatewayTwoEnds() throws Exception {
   }
 
   @Deployment(resources = { "org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml" })
-  public void testProcessInstanceCancelledEvents_cancell() throws Exception {
+  public void testProcessInstanceCancelledEvents_cancel() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess");
     assertNotNull(processInstance);
     listener.clearEventsReceived();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/identity/IdentityServiceTest.java
Patch:
@@ -100,9 +100,9 @@ public void testUserPicture() {
     
     //interface defintion states that setting picture to null should delete it
     identityService.setUserPicture(userId, null);
-    assertNull('it should be possible to nullify user picture',identityService.getUserPicture(userId));    
+    assertNull("it should be possible to nullify user picture",identityService.getUserPicture(userId));    
     user = identityService.createUserQuery().userId("johndoe").singleResult();
-    assertNull('it should be possible to delete user picture',identityService.getUserPicture(userId));
+    assertNull("it should be possible to delete user picture",identityService.getUserPicture(userId));
 
     identityService.deleteUser(user.getId());
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayRef.java
Patch:
@@ -84,6 +84,8 @@ public void delete() {
           .getByteArrayEntityManager()
           .deleteByteArrayById(id);
       }
+      entity = null;
+      id = null;
       deleted = true;
     }
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/regression/DeleteProcessInstanceTest.java
Patch:
@@ -41,7 +41,7 @@ public void testNoEndTimeSet() {
     log.info("Process instance (of process model " + instanceUser.getProcessDefinitionId() + ") started with id: " + instanceUser.getId() + ".");
 
     // Assert that the process instance is active.
-    Execution executionUser = runtimeService.createExecutionQuery().processInstanceId(instanceUser.getProcessInstanceId()).singleResult();
+    Execution executionUser = runtimeService.createExecutionQuery().processInstanceId(instanceUser.getProcessInstanceId()).onlyChildExecutions().singleResult();
     assertFalse(executionUser.isEnded());
 
     // Assert that a user task is available for claiming.
@@ -74,7 +74,7 @@ public void testNoEndTimeSet() {
     log.info("Process instance (of process model " + instanceJava.getProcessDefinitionId() + ") started with id: " + instanceJava.getId() + ".");
 
     // Assert that the process instance is active.
-    Execution executionJava = runtimeService.createExecutionQuery().processInstanceId(instanceJava.getProcessInstanceId()).singleResult();
+    Execution executionJava = runtimeService.createExecutionQuery().processInstanceId(instanceJava.getProcessInstanceId()).onlyChildExecutions().singleResult();
     assertFalse(executionJava.isEnded());
 
     // Try to execute job 3 times

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * @author Joram Barrez
- * @author Falko Menge
+ * @author Tijs Rademakers
  */
 public class BoundaryErrorEventTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -17,9 +17,11 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.JobNotFoundException;
+import org.activiti.engine.impl.cfg.TransactionState;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
+import org.activiti.engine.impl.jobexecutor.FailedJobListener;
 import org.activiti.engine.impl.jobexecutor.JobExecutorContext;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 import org.slf4j.Logger;
@@ -70,6 +72,7 @@ public Object execute(CommandContext commandContext) {
     }
 
     try {
+      commandContext.setManualJobExecution(true);
       job.execute(commandContext);
     } catch (Throwable exception) {
       // Finally, Throw the exception to indicate the ExecuteJobCmd failed

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -401,7 +401,8 @@ public void deleteDataRelatedToExecution(ExecutionEntity executionEntity, String
     JobEntityManager jobEntityManager = commandContext.getJobEntityManager();
     Collection<JobEntity> jobsForExecution = jobEntityManager.findJobsByExecutionId(executionEntity.getId());
     for (JobEntity job : jobsForExecution) {
-      jobEntityManager.delete(job, false); // false -> jobs fire the events themselves TODO: is this right?
+      job.delete(); // TODO: should be moved to entitymanager!
+//      jobEntityManager.delete(job, false); // false -> jobs fire the events themselves TODO: is this right?
     }
 
     // Delete event subscriptions

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -30,6 +30,7 @@
 import org.activiti.engine.impl.jobexecutor.JobHandler;
 import org.activiti.engine.runtime.Job;
 import org.apache.commons.lang3.StringUtils;
+import org.mvel2.ast.IsDef;
 
 /**
  * Stub of the common parts of a Job. You will normally work with a subclass of JobEntity, such as {@link TimerEntity} or {@link MessageEntity}.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -30,6 +30,7 @@
 import org.activiti.engine.impl.jobexecutor.TimerExecuteNestedActivityJobHandler;
 import org.activiti.engine.impl.jobexecutor.TimerStartEventJobHandler;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
+import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -159,7 +160,7 @@ private void restoreExtraData(CommandContext commandContext, String jobHandlerCo
     }
 
     if (processDefinitionId != null) {
-      ProcessDefinition def = Context.getProcessEngineConfiguration().getRepositoryService().getProcessDefinition(processDefinitionId);
+      ProcessDefinition def = ProcessDefinitionUtil.getProcessDefinitionEntity(processDefinitionId); 
       maxIterations = checkStartEventDefinitions(def, embededActivityId);
       if (maxIterations <= 1) {
         maxIterations = checkBoundaryEventsDefinitions(def, embededActivityId);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/JobEventsTest.java
Patch:
@@ -73,7 +73,8 @@ public void testJobEntityEvents() throws Exception {
     Calendar tomorrow = Calendar.getInstance();
     tomorrow.add(Calendar.DAY_OF_YEAR, 1);
     processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());
-    waitForJobExecutorToProcessAllJobs(2000, 100);
+//    waitForJobExecutorToProcessAllJobs(2000, 100);
+    managementService.executeJob(managementService.createJobQuery().singleResult().getId());
 
     // Check delete-event has been dispatched
     assertEquals(3, listener.getEventsReceived().size());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * @author Joram Barrez
- * @author Falko Menge
+ * @author Tijs Rademakers
  */
 public class BoundaryErrorEventTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -401,7 +401,7 @@ public void deleteDataRelatedToExecution(ExecutionEntity executionEntity, String
     JobEntityManager jobEntityManager = commandContext.getJobEntityManager();
     Collection<JobEntity> jobsForExecution = jobEntityManager.findJobsByExecutionId(executionEntity.getId());
     for (JobEntity job : jobsForExecution) {
-      jobEntityManager.delete(job);
+      jobEntityManager.delete(job, false); // false -> jobs fire the events themselves TODO: is this right?
     }
 
     // Delete event subscriptions

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/TaskEventsTest.java
Patch:
@@ -337,7 +337,7 @@ public void testStandaloneTaskEvents() throws Exception {
 
   protected void assertExecutionDetails(ActivitiEvent event, ProcessInstance processInstance) {
     assertEquals(processInstance.getId(), event.getProcessInstanceId());
-    assertEquals(processInstance.getId(), event.getExecutionId());
+    assertNotNull(event.getExecutionId());
     assertEquals(processInstance.getProcessDefinitionId(), event.getProcessDefinitionId());
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ContinueProcessOperation.java
Patch:
@@ -75,7 +75,7 @@ public void run() {
 
   protected void executeProcessStartExecutionListeners() {
     org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(execution.getProcessDefinitionId());
-    executeExecutionListeners(process, ExecutionListener.EVENTNAME_START);
+    executeExecutionListeners(process, execution.getParent(), ExecutionListener.EVENTNAME_START, false);
   }
 
   protected void continueThroughFlowNode(FlowNode flowNode) {
@@ -145,7 +145,7 @@ protected void continueThroughSequenceFlow(SequenceFlow sequenceFlow) {
 
     // Execution listener
     if (CollectionUtils.isNotEmpty(sequenceFlow.getExecutionListeners())) {
-      executeExecutionListeners(sequenceFlow, ExecutionListener.EVENTNAME_TAKE, true); // True -> any event type will be treated as 'take' for a sequence flow
+      executeExecutionListeners(sequenceFlow, null, ExecutionListener.EVENTNAME_TAKE, true); // True -> any event type will be treated as 'take' for a sequence flow
     }
 
     FlowElement targetFlowElement = sequenceFlow.getTargetFlowElement();

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -130,7 +130,7 @@ public void testVariableUpdates() {
     assertEquals("zVar1", historicVariableUpdate.getVariableName());
     assertEquals("Event: start", historicVariableUpdate.getValue());
     assertEquals(0, historicVariableUpdate.getRevision());
-    assertEquals(historicStartEvent.getId(), historicVariableUpdate.getActivityInstanceId());
+    assertNull(historicVariableUpdate.getActivityInstanceId());
 
     // Variable set from transition take execution listener
     historicVariableUpdate = (HistoricVariableUpdate) historicDetails.get(6);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ContinueProcessOperation.java
Patch:
@@ -74,8 +74,8 @@ public void run() {
   }
 
   protected void executeProcessStartExecutionListeners() {
-	org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(execution.getProcessDefinitionId());
-	executeExecutionListeners(process, ExecutionListener.EVENTNAME_START);
+    org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(execution.getProcessDefinitionId());
+    executeExecutionListeners(process, ExecutionListener.EVENTNAME_START);
   }
 
   protected void continueThroughFlowNode(FlowNode flowNode) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -484,8 +484,7 @@ public void setAssignee(String assignee, boolean dispatchAssignmentEvent, boolea
     this.assignee = assignee;
 
     // if there is no command context, then it means that the user is
-    // calling the
-    // setAssignee outside a service method. E.g. while creating a new task.
+    // calling the setAssignee outside a service method. E.g. while creating a new task.
     if (commandContext != null) {
       commandContext.getHistoryManager().recordTaskAssigneeChange(id, assignee);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1133,7 +1133,7 @@ protected VariableScopeImpl getParentVariableScope() {
    * used to calculate the sourceActivityExecution for method {@link #updateActivityInstanceIdInHistoricVariableUpdate(HistoricDetailVariableInstanceUpdateEntity, ExecutionEntity)}
    */
   protected ExecutionEntity getSourceActivityExecution() {
-    return (activityId != null ? this : null);
+    return this;
   }
 
   @Override

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -249,7 +249,6 @@ public void testVariableUpdatesLinkedToActivity() throws Exception {
       assertNotNull(update1.getActivityInstanceId());
       assertNotNull(update1.getExecutionId());
       HistoricActivityInstance historicActivityInstance1 = historyService.createHistoricActivityInstanceQuery().activityInstanceId(update1.getActivityInstanceId()).singleResult();
-      assertEquals(historicActivityInstance1.getExecutionId(), update1.getExecutionId());
       assertEquals("usertask1", historicActivityInstance1.getActivityId());
 
       // TODO http://jira.codehaus.org/browse/ACT-1083

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -147,10 +147,11 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
     if (parentExecution.getCurrentFlowElement() instanceof CallActivity) {
       ExecutionEntity subProcessExecution = executionEntityManager.findSubProcessInstanceBySuperExecutionId(parentExecution.getId());
       if (subProcessExecution != null) {
-        deleteChildExecutions(subProcessExecution, notToDeleteExecution, commandContext);
+        executionEntityManager.deleteProcessInstanceExecutionEntity(subProcessExecution, subProcessExecution.getCurrentActivityId(), "boundary event interrupting", true);
       }
+    
     }
-
+    
     executionEntityManager.deleteDataRelatedToExecution(parentExecution);
     executionEntityManager.delete(parentExecution);
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/multiinstance/MultiInstanceTest.java
Patch:
@@ -430,7 +430,7 @@ public void testSequentialSubProcess() {
       if (i != 3) {
         List<String> activities = runtimeService.getActiveActivityIds(procId);
         assertNotNull(activities);
-        assertEquals(2, activities.size());
+        assertEquals(3, activities.size());
       }
     }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * @author Joram Barrez
- * @author Falko Menge
+ * @author Tijs Rademakers
  */
 public class SubProcessTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/MessageEventReceivedCmd.java
Patch:
@@ -66,8 +66,8 @@ protected Void execute(CommandContext commandContext, ExecutionEntity execution)
       throw new ActivitiIllegalArgumentException("messageName cannot be null");
     }
 
-    List<EventSubscriptionEntity> eventSubscriptions = commandContext.getEventSubscriptionEntityManager().findEventSubscriptionsByNameAndExecution(MessageEventHandler.EVENT_HANDLER_TYPE, messageName,
-        executionId);
+    List<EventSubscriptionEntity> eventSubscriptions = commandContext.getEventSubscriptionEntityManager().
+        findEventSubscriptionsByNameAndExecution(MessageEventHandler.EVENT_HANDLER_TYPE, messageName, executionId);
 
     if (eventSubscriptions.isEmpty()) {
       throw new ActivitiException("Execution with id '" + executionId + "' does not have a subscription to a message event with name '" + messageName + "'");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.jobexecutor;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
@@ -22,7 +21,6 @@
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
-import org.activiti.engine.impl.util.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
Patch:
@@ -50,7 +50,7 @@ protected ProcessInstance execute(CommandContext commandContext, ProcessDefiniti
       processInstance = (ExecutionEntity) ProcessInstanceUtil.createProcessInstance(processDefinition, null, null, null);
     }
 
-    commandContext.getHistoryManager().reportFormPropertiesSubmitted(processInstance, properties, null);
+    commandContext.getHistoryManager().recordFormPropertiesSubmitted(processInstance.getExecutions().get(0), properties, null);
 
     StartFormHandler startFormHandler = FormHandlerUtil.getStartFormHandler(commandContext, processDefinition); 
     startFormHandler.submitFormProperties(properties, processInstance);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitTaskFormCmd.java
Patch:
@@ -39,7 +39,7 @@ public SubmitTaskFormCmd(String taskId, Map<String, String> properties, boolean
   }
 
   protected Void execute(CommandContext commandContext, TaskEntity task) {
-    commandContext.getHistoryManager().reportFormPropertiesSubmitted(task.getExecution(), properties, taskId);
+    commandContext.getHistoryManager().recordFormPropertiesSubmitted(task.getExecution(), properties, taskId);
 
     TaskFormHandler taskFormHandler = task.getTaskDefinition().getTaskFormHandler();
     taskFormHandler.submitFormProperties(properties, task.getExecution());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryManager.java
Patch:
@@ -65,7 +65,7 @@ public interface HistoryManager extends Session {
    * Finds the {@link HistoricActivityInstanceEntity} that is active in the given execution. Uses the {@link DbSqlSession} cache to make sure the right instance is returned, regardless of whether or
    * not entities have already been flushed to DB.
    */
-  public abstract HistoricActivityInstanceEntity findActivityInstance(ExecutionEntity execution);
+  public abstract HistoricActivityInstanceEntity findActivityInstance(ExecutionEntity execution, boolean createOnNotFound);
 
   /**
    * Replaces any open historic activityInstances' execution-id's to the id of the replaced execution, if activity history is enabled.
@@ -208,7 +208,7 @@ public interface HistoryManager extends Session {
   /**
    * Report form properties submitted, if audit history is enabled.
    */
-  public abstract void reportFormPropertiesSubmitted(ExecutionEntity processInstance, Map<String, String> properties, String taskId);
+  public abstract void recordFormPropertiesSubmitted(ExecutionEntity processInstance, Map<String, String> properties, String taskId);
 
   // Identity link related history
   /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceStartHandler.java
Patch:
@@ -19,9 +19,7 @@
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
 /**
- * @author Tom Baeyens
- * 
- *         BE AWARE: For Start Events this is done in the ProcessDefinitionEntity!
+ * @author Joram Barrez
  */
 public class ActivityInstanceStartHandler implements ExecutionListener {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/parse/FlowNodeHistoryParseHandler.java
Patch:
@@ -33,6 +33,7 @@
 import org.activiti.bpmn.model.ScriptTask;
 import org.activiti.bpmn.model.SendTask;
 import org.activiti.bpmn.model.ServiceTask;
+import org.activiti.bpmn.model.StartEvent;
 import org.activiti.bpmn.model.SubProcess;
 import org.activiti.bpmn.model.Task;
 import org.activiti.bpmn.model.ThrowEvent;
@@ -52,6 +53,7 @@ public class FlowNodeHistoryParseHandler implements BpmnParseHandler {
   protected static Set<Class<? extends BaseElement>> supportedElementClasses = new HashSet<Class<? extends BaseElement>>();
 
   static {
+    supportedElementClasses.add(StartEvent.class);
     supportedElementClasses.add(EndEvent.class);
     supportedElementClasses.add(ThrowEvent.class);
     supportedElementClasses.add(BoundaryEvent.class);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -158,7 +158,7 @@ public void testTwoSubProcessInParallelWithinSubProcess() {
       assertEquals("myVar1", historicVariable1.getName());
       assertEquals("test789", historicVariable1.getTextValue());
 
-      assertEquals(15, historyService.createHistoricActivityInstanceQuery().count());
+      assertEquals(18, historyService.createHistoricActivityInstanceQuery().count());
       assertEquals(7, historyService.createHistoricDetailQuery().count());
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/MessageEventReceivedCmd.java
Patch:
@@ -66,8 +66,8 @@ protected Void execute(CommandContext commandContext, ExecutionEntity execution)
       throw new ActivitiIllegalArgumentException("messageName cannot be null");
     }
 
-    List<EventSubscriptionEntity> eventSubscriptions = commandContext.getEventSubscriptionEntityManager().findEventSubscriptionsByNameAndExecution(MessageEventHandler.EVENT_HANDLER_TYPE, messageName,
-        executionId);
+    List<EventSubscriptionEntity> eventSubscriptions = commandContext.getEventSubscriptionEntityManager().
+        findEventSubscriptionsByNameAndExecution(MessageEventHandler.EVENT_HANDLER_TYPE, messageName, executionId);
 
     if (eventSubscriptions.isEmpty()) {
       throw new ActivitiException("Execution with id '" + executionId + "' does not have a subscription to a message event with name '" + messageName + "'");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.jobexecutor;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
@@ -22,7 +21,6 @@
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
-import org.activiti.engine.impl.util.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -70,7 +70,8 @@ public void execute(ActivityExecution execution) {
     // Fork
 
     // TODO: Verify if this is the correct place! Seems out of place here!
-    // Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) execution);
+    // Is needed to set the endTime for all historic activity joins
+    Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) execution);
 
     if (nbrOfExecutionsCurrentlyJoined == nbrOfExecutionsToJoin) {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1115,7 +1115,7 @@ protected List<BpmnParseHandler> getDefaultHistoryParseHandlers() {
     parseHandlers.add(new FlowNodeHistoryParseHandler());
     // parseHandlers.add(new ProcessHistoryParseHandler());
     // parseHandlers.add(new StartEventHistoryParseHandler());
-    parseHandlers.add(new UserTaskHistoryParseHandler());
+//    parseHandlers.add(new UserTaskHistoryParseHandler());
     return parseHandlers;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/DefaultHistoryManager.java
Patch:
@@ -380,6 +380,8 @@ public void recordTaskCreated(TaskEntity task, ExecutionEntity execution) {
       HistoricTaskInstanceEntity historicTaskInstance = new HistoricTaskInstanceEntity(task, execution);
       getDbSqlSession().insert(historicTaskInstance);
     }
+    
+    recordTaskId(task);
   }
 
   /*

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/parse/UserTaskHistoryParseHandler.java
Patch:
@@ -23,6 +23,9 @@
 import org.activiti.engine.impl.task.TaskDefinition;
 
 /**
+ * 
+ * TODO: DELETE, not used anymore
+ * 
  * @author Joram Barrez
  */
 public class UserTaskHistoryParseHandler extends AbstractBpmnParseHandler<UserTask> {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java
Patch:
@@ -272,7 +272,8 @@ public void testBoundaryEvent() {
 
     task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
 
-    runtimeService.signalEventReceived("alert", task.getExecutionId());
+    Execution signalExecution = runtimeService.createExecutionQuery().signalEventSubscriptionName("alert").singleResult();
+    runtimeService.signalEventReceived("alert", signalExecution.getId());
     assertEquals(0L, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
 
     historicActivityInstance = historyService.createHistoricActivityInstanceQuery().activityId("boundary").processInstanceId(processInstance.getId()).singleResult();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -72,7 +72,7 @@ public void execute(ActivityExecution execution) {
 				// Call activity needs special handling: the call activity is destroyed, but the main process continues
 				if (scopeExecutionEntity.getSuperExecutionId() != null) {
 				  
-				  executionEntityManager.deleteChildExecutions(scopeTreeNode.getExecutionEntity());
+				  executionEntityManager.deleteChildExecutions(scopeExecutionEntity);
 				  executionEntityManager.deleteExecutionAndRelatedData(scopeExecutionEntity);
 					ExecutionEntity superExecutionEntity = 
 							executionEntityManager.findExecutionById(scopeExecutionEntity.getSuperExecutionId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1250,7 +1250,9 @@ public String toString() {
     if (isProcessInstanceType()) {
       return "ProcessInstance[" + getToStringIdentity() + "]";
     } else {
-      return (isConcurrent ? "Concurrent" : "") + (isScope ? "Scope" : "") + "Execution[" + getToStringIdentity() + "]";
+      return (isScope ? "Scope" : "") + "Execution[ id '" + getToStringIdentity() + "'"
+                + (activityId != null ? " - activity '" + activityId + "'" : "") 
+                + (parentId != null ? " - parent '" + parentId + "'" : "") + "] ";
     }
   }
 

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/SubProcessParser.java
Patch:
@@ -70,7 +70,9 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
     }
 
     if (activeSubProcessList.size() > 1) {
-      activeSubProcessList.get(activeSubProcessList.size() - 2).addFlowElement(subProcess);
+      SubProcess parentSubProcess = activeSubProcessList.get(activeSubProcessList.size() - 2);
+      parentSubProcess.addFlowElement(subProcess);
+      subProcess.setSubProcess(parentSubProcess);
 
     } else {
       activeProcess.addFlowElement(subProcess);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/ActivityBehaviorFactory.java
Patch:
@@ -109,8 +109,6 @@ public interface ActivityBehaviorFactory {
 
   public abstract NoneStartEventActivityBehavior createNoneStartEventActivityBehavior(StartEvent startEvent);
 
-  public abstract EventSubProcessStartEventActivityBehavior createEventSubProcessStartEventActivityBehavior(StartEvent startEvent, String activityId);
-
   public abstract TaskActivityBehavior createTaskActivityBehavior(Task task);
 
   public abstract ManualTaskActivityBehavior createManualTaskActivityBehavior(ManualTask manualTask);
@@ -162,6 +160,8 @@ public interface ActivityBehaviorFactory {
   public abstract ParallelMultiInstanceBehavior createParallelMultiInstanceBehavior(Activity activity, AbstractBpmnActivityBehavior innerActivityBehavior);
 
   public abstract SubProcessActivityBehavior createSubprocessActivityBehavior(SubProcess subProcess);
+  
+  public abstract EventSubProcessStartEventActivityBehavior createEventSubProcessStartEventActivityBehavior(StartEvent startEvent);
 
   public abstract CallActivityBehavior createCallActivityBehavior(CallActivity callActivity);
 

File: modules/activiti-camel/src/main/java/org/activiti/camel/CamelBehavior.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
@@ -143,7 +144,7 @@ protected boolean handleCamelException(Exchange exchange, ActivityExecution exec
         ErrorPropagation.propagateError((BpmnError) camelException, execution);
         return true;
       } else {
-        if (ErrorPropagation.mapException(camelException, execution, mapExceptions))
+        if (ErrorPropagation.mapException(camelException, (ExecutionEntity) execution, mapExceptions))
           return true;
         else
           throw new ActivitiException("Unhandled exception on camel route", camelException);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/DestroyScopeOperation.java
Patch:
@@ -43,7 +43,7 @@ public void run() {
         if (currentlyExaminedExecution.isScope()) {
           parentScopeExecution = currentlyExaminedExecution;
         } else {
-          currentlyExaminedExecution = executionEntityManager.findExecutionById(executionEntity.getParentId());
+          currentlyExaminedExecution = executionEntityManager.findExecutionById(currentlyExaminedExecution.getParentId());
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -83,7 +83,7 @@ protected void executeInterruptingBehavior(ExecutionEntity executionEntity, Comm
       if (currentlyExaminedExecution.isScope()) {
         parentScopeExecution = currentlyExaminedExecution;
       } else {
-        currentlyExaminedExecution = executionEntityManager.findExecutionById(executionEntity.getParentId());
+        currentlyExaminedExecution = executionEntityManager.findExecutionById(currentlyExaminedExecution.getParentId());
       }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * @author Joram Barrez
- * @author Falko Menge
+ * @author Tijs Rademakers
  */
 public class ErrorEndEventActivityBehavior extends FlowNodeActivityBehavior {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -28,6 +28,7 @@
 
 /**
  * @author Joram Barrez
+ * @author Tijs Rademakers
  */
 public class ParallelMultiInstanceBehavior extends MultiInstanceActivityBehavior {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TransactionActivityBehavior.java
Patch:
@@ -14,8 +14,10 @@
 package org.activiti.engine.impl.bpmn.behavior;
 
 /**
- * @author Daniel Meyer
+ * @author Tijs Rademakers
  */
 public class TransactionActivityBehavior extends SubProcessActivityBehavior {
 
+  private static final long serialVersionUID = 1L;
+
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/BoundaryEventParseHandler.java
Patch:
@@ -27,6 +27,7 @@
 
 /**
  * @author Joram Barrez
+ * @author Tijs Rademakers
  */
 public class BoundaryEventParseHandler extends AbstractFlowNodeBpmnParseHandler<BoundaryEvent> {
 
@@ -54,8 +55,7 @@ protected void executeParse(BpmnParse bpmnParse, BoundaryEvent boundaryEvent) {
       bpmnParse.getBpmnParserHandlers().parseElement(bpmnParse, eventDefinition);
 
     } else {
-      // Should already be picked up by process validator on deploy, so
-      // this is just to be sure
+      // Should already be picked up by process validator on deploy, so this is just to be sure
       logger.warn("Unsupported boundary event type for boundary event " + boundaryEvent.getId());
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/EndEventParseHandler.java
Patch:
@@ -13,6 +13,7 @@
 package org.activiti.engine.impl.bpmn.parser.handler;
 
 import org.activiti.bpmn.model.BaseElement;
+import org.activiti.bpmn.model.CancelEventDefinition;
 import org.activiti.bpmn.model.EndEvent;
 import org.activiti.bpmn.model.ErrorEventDefinition;
 import org.activiti.bpmn.model.EventDefinition;
@@ -52,6 +53,8 @@ protected void executeParse(BpmnParse bpmnParse, EndEvent endEvent) {
         endEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createErrorEndEventActivityBehavior(endEvent, errorDefinition));
       } else if (eventDefinition instanceof TerminateEventDefinition) {
         endEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createTerminateEndEventActivityBehavior(endEvent));
+      } else if (eventDefinition instanceof CancelEventDefinition) {
+        endEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createCancelEndEventActivityBehavior(endEvent));
       } else {
         endEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createNoneEndEventActivityBehavior(endEvent));
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/SubProcessParseHandler.java
Patch:
@@ -27,7 +27,7 @@ protected Class<? extends BaseElement> getHandledType() {
 
   protected void executeParse(BpmnParse bpmnParse, SubProcess subProcess) {
 
-    subProcess.setBehavior(bpmnParse.getActivityBehaviorFactory().createSubprocActivityBehavior(subProcess));
+    subProcess.setBehavior(bpmnParse.getActivityBehaviorFactory().createSubprocessActivityBehavior(subProcess));
 
     bpmnParse.processFlowElements(subProcess.getFlowElements());
     processArtifacts(bpmnParse, subProcess.getArtifacts());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityCompensatedEventHandler.java
Patch:
@@ -23,8 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
-    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
-
+ 
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityCompletedEventHandler.java
Patch:
@@ -23,8 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
-    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
-
+    
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityErrorReceivedEventHandler.java
Patch:
@@ -23,8 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
-    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
-
+    
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityMessageEventHandler.java
Patch:
@@ -23,8 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, messageEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, messageEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, messageEvent.getActivityType());
-    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, messageEvent.getBehaviorClass());
-
+    
     putInMapIfNotNull(data, Fields.MESSAGE_NAME, messageEvent.getMessageName());
     putInMapIfNotNull(data, Fields.MESSAGE_DATA, messageEvent.getMessageData());
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivitySignaledEventHandler.java
Patch:
@@ -23,8 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, signalEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, signalEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, signalEvent.getActivityType());
-    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, signalEvent.getBehaviorClass());
-
+    
     putInMapIfNotNull(data, Fields.SIGNAL_NAME, signalEvent.getSignalName());
     putInMapIfNotNull(data, Fields.SIGNAL_DATA, signalEvent.getSignalData());
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityStartedEventHandler.java
Patch:
@@ -23,8 +23,7 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
     putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, activityEvent.getProcessInstanceId());
     putInMapIfNotNull(data, Fields.EXECUTION_ID, activityEvent.getExecutionId());
     putInMapIfNotNull(data, Fields.ACTIVITY_TYPE, activityEvent.getActivityType());
-    putInMapIfNotNull(data, Fields.BEHAVIOR_CLASS, activityEvent.getBehaviorClass());
-
+    
     return createEventLogEntry(activityEvent.getProcessDefinitionId(), activityEvent.getProcessInstanceId(), activityEvent.getExecutionId(), null, data);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -583,7 +583,7 @@ protected void fireActivityCompletedEvent() {
           .dispatchEvent(
               ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED, getActivity() != null ? getActivity().getId() : getActivityId(),
                   getActivity() != null ? (String) getActivity().getProperties().get("name") : null, getId(), getProcessInstanceId(), getProcessDefinitionId(),
-                  getActivity() != null ? (String) getActivity().getProperties().get("type") : null, getActivity() != null ? getActivity().getActivityBehavior().getClass().getCanonicalName() : null));
+                  getActivity() != null ? (String) getActivity().getProperties().get("type") : null));
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -58,7 +58,6 @@ public ExecutionEntity findSubProcessInstanceBySuperExecutionId(String superExec
     return (ExecutionEntity) getDbSqlSession().selectOne("selectSubProcessInstanceBySuperExecutionId", superExecutionId);
   }
 
-  @SuppressWarnings("unchecked")
   public List<ExecutionEntity> findChildExecutionsByParentExecutionId(final String parentExecutionId) {
     return getList("selectExecutionsByParentExecutionId", parentExecutionId, new CachedEntityMatcher<ExecutionEntity>() {
       @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationActivityExecute.java
Patch:
@@ -50,7 +50,7 @@ public void execute(InterpretableExecution execution) {
             .getEventDispatcher()
             .dispatchEvent(
                 ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, execution.getActivity().getId(), (String) execution.getActivity().getProperty("name"), execution.getId(),
-                    execution.getProcessInstanceId(), execution.getProcessDefinitionId(), (String) activity.getProperties().get("type"), activity.getActivityBehavior().getClass().getCanonicalName()));
+                    execution.getProcessInstanceId(), execution.getProcessDefinitionId(), (String) activity.getProperties().get("type")));
       }
 
       activityBehavior.execute(execution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceUtil.java
Patch:
@@ -38,11 +38,13 @@ public class ProcessInstanceUtil {
   
   public static ProcessInstance createProcessInstance(ProcessDefinitionEntity processDefinition, 
       String businessKey, String processInstanceName, Map<String, Object> variables) {
+    
     return createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, false);
   }
   
   public static ProcessInstance createAndStartProcessInstance(ProcessDefinitionEntity processDefinition, 
       String businessKey, String processInstanceName, Map<String, Object> variables) {
+    
     return createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, true);
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -73,8 +73,7 @@ public void testCatchErrorOfInnerSubprocessOnOuterSubprocess() {
     assertEquals("Inner subprocess task 1", tasks.get(0).getName());
     assertEquals("Inner subprocess task 2", tasks.get(1).getName());
 
-    // Completing task 2, will cause the end error event to throw error with
-    // code 123
+    // Completing task 2, will cause the end error event to throw error with code 123
     taskService.complete(tasks.get(1).getId());
     taskService.createTaskQuery().list();
     Task taskAfterError = taskService.createTaskQuery().singleResult();
@@ -378,7 +377,7 @@ public void testUncaughtErrorOnScriptTask() {
       fail("The script throws error event with errorCode 'errorUncaught', but no catching boundary event was defined. An exception is expected which did not occur");
       assertProcessEnded(procId);
     } catch (BpmnError e) {
-      assertTextPresent("No catching boundary event found for error with errorCode 'errorUncaught', neither in same process nor in parent process (errorCode='errorUncaught')", e.getMessage());
+      assertTextPresent("No catching boundary event found for error with errorCode 'errorUncaught', neither in same process nor in parent process", e.getMessage());
     }
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/mapError/BoundaryErrorParentException.java
Patch:
@@ -16,6 +16,8 @@
  * @author Saeid Mirzaei
  */
 
-public class BoundaryErrorParentException extends Exception {
+public class BoundaryErrorParentException extends RuntimeException {
+
+  private static final long serialVersionUID = 1L;
 
 }

File: modules/activiti5-compatibility/src/main/java/org/activiti5/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -17,10 +17,12 @@
 
 /**
  * @author Joram Barrez
- * @author Falko Menge
+ * @author Tijs Rademakers
  */
 public class ErrorEndEventActivityBehavior extends FlowNodeActivityBehavior {
 
+  private static final long serialVersionUID = 1L;
+  
   protected String errorCode;
 
   public ErrorEndEventActivityBehavior(String errorCode) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/tree/ExecutionTreeUtil.java
Patch:
@@ -45,7 +45,7 @@ public static ExecutionTree buildExecutionTree(Collection<ExecutionEntity> execu
           parentMapping.put(parentId, new ArrayList<ExecutionEntity>());
         }
         parentMapping.get(parentId).add(executionEntity);
-      } else {
+      } else if (executionEntity.getSuperExecutionId() == null){
         executionTree.setRoot(new ExecutionTreeNode(executionEntity));
       }
     }

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/main/StencilsetRestResource.java
Patch:
@@ -27,11 +27,11 @@
 @RestController
 public class StencilsetRestResource {
   
-  @RequestMapping(value="/editor/stencilset", method = RequestMethod.GET, produces = "application/json")
+  @RequestMapping(value="/editor/stencilset", method = RequestMethod.GET, produces = "application/json;charset=utf-8")
   public @ResponseBody String getStencilset() {
     InputStream stencilsetStream = this.getClass().getClassLoader().getResourceAsStream("stencilset.json");
     try {
-      return IOUtils.toString(stencilsetStream);
+      return IOUtils.toString(stencilsetStream, "utf-8");
     } catch (Exception e) {
       throw new ActivitiException("Error while loading stencil set", e);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CompleteTaskCmd.java
Patch:
@@ -46,7 +46,7 @@ protected Void execute(CommandContext commandContext, TaskEntity task) {
       }
     }
 
-    executeTaskComplete(task, variables, localScope);
+    executeTaskComplete(commandContext, task, variables, localScope);
     return null;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitTaskFormCmd.java
Patch:
@@ -45,7 +45,7 @@ protected Void execute(CommandContext commandContext, TaskEntity task) {
     taskFormHandler.submitFormProperties(properties, task.getExecution());
 
     if (completeTask) {
-      executeTaskComplete(task, null, false);
+      executeTaskComplete(commandContext, task, null, false);
     }
 
     return null;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/cmd/FailedJobRetryCmdTest.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
@@ -50,7 +51,7 @@ private Job fetchJob(String processInstanceId) {
   }
 
   private ExecutionEntity fetchExecutionEntity(String processInstanceId) {
-    return (ExecutionEntity) runtimeService.createExecutionQuery().processInstanceId(processInstanceId).singleResult();
+    return (ExecutionEntity) runtimeService.createExecutionQuery().processInstanceId(processInstanceId).onlyProcessInstanceExecutions().singleResult();
   }
 
   private Job refreshJob(String jobId) {
@@ -75,7 +76,7 @@ public void testFailedServiceTask() {
 
     assertEquals(4, job.getRetries());
 
-    ExecutionEntity execution = fetchExecutionEntity(pi.getProcessInstanceId());
+    Execution execution = runtimeService.createExecutionQuery().onlyChildExecutions().processInstanceId(pi.getId()).singleResult();
     assertEquals("failingServiceTask", execution.getActivityId());
 
     waitForExecutedJobWithRetriesLeft(3);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -156,7 +156,7 @@ public void testHistoricTaskInstanceQuery() throws Exception {
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().taskDescriptionLike("%unexistingdescripton%").count());
 
     // Execution id
-    assertEquals(1, historyService.createHistoricTaskInstanceQuery().executionId(finishedInstance.getId()).count());
+    assertEquals(1, historyService.createHistoricTaskInstanceQuery().processInstanceId(finishedInstance.getId()).count());
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().executionId("unexistingexecution").count());
 
     // Process instance id
@@ -331,7 +331,7 @@ public void testHistoricTaskInstanceOrQuery() throws Exception {
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().or().taskDescriptionLike("%unexistingdescripton%").taskDescription("unexistingdescription").endOr().count());
 
     // Execution id
-    assertEquals(1, historyService.createHistoricTaskInstanceQuery().or().executionId(finishedInstance.getId()).endOr().count());
+    assertEquals(1, historyService.createHistoricTaskInstanceQuery().or().processInstanceId(finishedInstance.getId()).endOr().count());
     assertEquals(0, historyService.createHistoricTaskInstanceQuery().or().executionId("unexistingexecution").endOr().count());
 
     // Process instance id

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/logging/mdc/MDCLoggingTest.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.List;
 
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti.engine.logging.LogMDC;
 import org.activiti.engine.test.Deployment;
 import org.apache.log4j.Appender;
 import org.apache.log4j.Level;
@@ -34,6 +35,8 @@ private void setCustomLogger() {
     removeAppenders();
 
     Logger.getRootLogger().addAppender(console);
+    
+    LogMDC.setMDCEnabled(true);
   }
 
   private void removeAppenders() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -85,14 +85,15 @@ protected void executeExecutionListeners(HasExecutionListeners elementWithExecut
           if (executionListener != null) {
             ((ExecutionEntity) execution).setEventName(eventType);
             executionListener.notify(execution);
+            
+            // TODO: is this still needed? Is this property still needed?
+            ((ExecutionEntity) execution).setEventName(null);
           }
 
         }
       }
     }
 
-    // TODO: is this still needed? Is this property still needed?
-    ((ExecutionEntity) execution).setEventName(null);
   }
 
   /* TODO: Should following methods be moved to the entityManager */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -30,6 +30,7 @@
 import org.activiti.engine.impl.calendar.BusinessCalendar;
 import org.activiti.engine.impl.calendar.DueDateBusinessCalendar;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.task.TaskDefinition;
@@ -144,6 +145,8 @@ public void execute(ActivityExecution execution) {
 
     Expression skipExpression = taskDefinition.getSkipExpression();
     if (SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression) && SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)) {
+      CommandContext commandContext = Context.getCommandContext();
+      commandContext.getTaskEntityManager().deleteTask(task, TaskEntity.DELETE_REASON_COMPLETED, false);
       leave(execution);
     }
   }

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/usertask/SkipExpressionUserTaskTest.java
Patch:
@@ -44,7 +44,7 @@ public void testSkipMultipleTasks() {
     variables.put("skip2", true);
     variables.put("skip3", false);
 
-    ProcessInstance pi = runtimeService.startProcessInstanceByKey("skipExpressionUserTask-testSkipMultipleTasks", variables);
+    runtimeService.startProcessInstanceByKey("skipExpressionUserTask-testSkipMultipleTasks", variables);
     List<Task> tasks = taskService.createTaskQuery().list();
     assertEquals(1, tasks.size());
     assertEquals("Task3", tasks.get(0).getName());

File: modules/activiti-engine/src/test/java/org/activiti/examples/variables/VariablesTest.java
Patch:
@@ -143,7 +143,7 @@ public void testBasicVariableOperations() {
     assertNotNull(newValue);
     assertEquals("a value", newValue);
 
-    Task task = taskService.createTaskQuery().executionId(processInstance.getId()).singleResult();
+    Task task = taskService.createTaskQuery().singleResult();
     taskService.complete(task.getId());
 
   }
@@ -241,7 +241,7 @@ public void testNullVariable() {
 
     assertEquals("434", resultVar);
 
-    task = taskService.createTaskQuery().executionId(processInstance.getId()).singleResult();
+    task = taskService.createTaskQuery().singleResult();
     taskService.complete(task.getId());
 
     // If no variable is given, no variable should be set and script test

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -204,7 +204,7 @@ public void setVariablesLocal(String executionId, Map<String, ? extends Object>
   }
 
   public void removeVariable(String executionId, String variableName) {
-    Collection<String> variableNames = new ArrayList<String>();
+    Collection<String> variableNames = new ArrayList<String>(1);
     variableNames.add(variableName);
     commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, false));
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -136,6 +136,7 @@ protected void leaveFlowNode(FlowNode flowNode) {
         ExecutionEntity outgoingExecutionEntity = new ExecutionEntity();
         outgoingExecutionEntity.setProcessDefinitionId(execution.getProcessDefinitionId());
         outgoingExecutionEntity.setProcessInstanceId(execution.getProcessInstanceId());
+        outgoingExecutionEntity.setTenantId(execution.getTenantId());
 
         outgoingExecutionEntity.setScope(false);
         outgoingExecutionEntity.setActive(true);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteProcessInstanceCmd.java
Patch:
@@ -37,14 +37,15 @@ public Void execute(CommandContext commandContext) {
     if (processInstanceId == null) {
       throw new ActivitiIllegalArgumentException("processInstanceId is null");
     }
-
+    
     // fill default reason if none provided
     if (deleteReason == null) {
       deleteReason = "ACTIVITI_DELETED";
     }
 
     if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
-      commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createCancelledEvent(this.processInstanceId, this.processInstanceId, null, deleteReason));
+      commandContext.getProcessEngineConfiguration().getEventDispatcher()
+        .dispatchEvent(ActivitiEventBuilder.createCancelledEvent(this.processInstanceId, this.processInstanceId, null, deleteReason));
     }
 
     commandContext.getExecutionEntityManager().deleteProcessInstanceExecutionEntity(processInstanceId, null, deleteReason);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetFormKeyCmd.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.engine.impl.task.TaskDefinition;
+import org.activiti.engine.impl.util.FormHandlerUtil;
 
 /**
  * Command for retrieving start or task form keys.
@@ -61,7 +62,7 @@ public String execute(CommandContext commandContext) {
     if (taskDefinitionKey == null) {
       // TODO: Maybe add getFormKey() to FormHandler interface to avoid
       // the following cast
-      formHandler = (DefaultFormHandler) processDefinition.getStartFormHandler();
+      formHandler = (DefaultFormHandler) FormHandlerUtil.getStartFormHandler(commandContext, processDefinition); 
     } else {
       TaskDefinition taskDefinition = processDefinition.getTaskDefinitions().get(taskDefinitionKey);
       // TODO: Maybe add getFormKey() to FormHandler interface to avoid

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetRenderedStartFormCmd.java
Patch:
@@ -22,6 +22,7 @@
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.activiti.engine.impl.util.FormHandlerUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 
 /**
@@ -44,7 +45,7 @@ public Object execute(CommandContext commandContext) {
     if (processDefinition == null) {
       throw new ActivitiObjectNotFoundException("Process Definition '" + processDefinitionId + "' not found", ProcessDefinition.class);
     }
-    StartFormHandler startFormHandler = processDefinition.getStartFormHandler();
+    StartFormHandler startFormHandler = FormHandlerUtil.getStartFormHandler(commandContext, processDefinition); 
     if (startFormHandler == null) {
       return null;
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AbstractEntityManager.java
Patch:
@@ -43,7 +43,8 @@ public void delete(Entity entity, boolean fireDeleteEvent) {
     getDbSqlSession().delete(entity);
 
     if (fireDeleteEvent && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
-      Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED, entity));
+      Context.getProcessEngineConfiguration().getEventDispatcher()
+        .dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED, entity));
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -162,7 +162,7 @@ public class ExecutionEntity extends VariableScopeImpl implements ActivityExecut
 
   protected boolean deleteRoot;
   protected String deleteReason;
-
+  
   // replaced by
   // //////////////////////////////////////////////////////////////
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/form/FormServiceTest.java
Patch:
@@ -183,7 +183,7 @@ public void testFormPropertyHandling() {
     address.setStreet("broadway");
     runtimeService.setVariable(processInstanceId, "address", address);
 
-    runtimeService.signal(runtimeService.createExecutionQuery().processInstanceId(processInstanceId).singleResult().getId());
+    runtimeService.trigger(runtimeService.createExecutionQuery().processInstanceId(processInstanceId).onlyChildExecutions().singleResult().getId());
 
     String taskId = taskService.createTaskQuery().singleResult().getId();
     TaskFormData taskFormData = formService.getTaskFormData(taskId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -40,7 +40,7 @@ public BoundaryEventActivityBehavior(boolean interrupting) {
 
   @Override
   public void execute(ActivityExecution execution) {
-
+    // Overridden by subclasses
   }
 
   @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -75,6 +75,7 @@ public void run() {
       } else {
         parentExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement());
       }
+      
       agenda.planTakeOutgoingSequenceFlowsOperation(parentExecution, true);
 
     } else {

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/util/BpmnModelUtil.java
Patch:
@@ -14,6 +14,7 @@
 import org.activiti.bpmn.model.Signal;
 import org.activiti.bpmn.model.SignalEventDefinition;
 import org.activiti.bpmn.model.ThrowEvent;
+import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.workflow.simple.converter.ConversionConstants;
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Artifact.java
Patch:
@@ -17,5 +17,5 @@
  */
 public abstract class Artifact extends BaseElement {
 
-    public abstract Artifact clone();
+  public abstract Artifact clone();
 }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/EventDefinition.java
Patch:
@@ -17,5 +17,5 @@
  */
 public abstract class EventDefinition extends BaseElement {
 
-    public abstract EventDefinition clone();
+  public abstract EventDefinition clone();
 }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Artifact.java
Patch:
@@ -17,5 +17,5 @@
  */
 public abstract class Artifact extends BaseElement {
 
-    public abstract Artifact clone();
+  public abstract Artifact clone();
 }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/EventDefinition.java
Patch:
@@ -17,5 +17,5 @@
  */
 public abstract class EventDefinition extends BaseElement {
 
-    public abstract EventDefinition clone();
+  public abstract EventDefinition clone();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/NoneEndEventActivityBehavior.java
Patch:
@@ -20,8 +20,10 @@
  */
 public class NoneEndEventActivityBehavior extends FlowNodeActivityBehavior {
 
+    private static final long serialVersionUID = 1L;
+
     public void execute(ActivityExecution execution) {
-        Context.getAgenda().planEndExecutionOperation(execution);
+        Context.getAgenda().planTakeOutgoingSequenceFlowsOperation(execution);
     }
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ProcessInstanceEventsTest.java
Patch:
@@ -282,7 +282,8 @@ public void testProcessCompleted_ParallelGatewayNoEnd() throws Exception {
     public void testProcessCompleted_ParallelGatewayTwoEnds() throws Exception {
         this.runtimeService.startProcessInstanceByKey("noEndProcess");
 
-        assertEquals("ActivitiEventType.PROCESS_COMPLETED was expected 1 time.", 1, listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());
+        List<ActivitiEvent> events = listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED);
+        assertEquals("ActivitiEventType.PROCESS_COMPLETED was expected 2 times.", 2, events.size());
     }
 
     @Deployment(resources = { "org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml" })

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/DestroyScopeOperation.java
Patch:
@@ -60,7 +60,7 @@ public void run() {
         // Delete all child executions
         Collection<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(parentScopeExecution.getId());
         for (ExecutionEntity childExcecution : childExecutions) {
-            deleteExecution(commandContext, childExcecution);
+            executionEntityManager.deleteExecutionAndRelatedData(childExcecution);
         }
 
         // Delete all scope tasks

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Collection;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.impl.agenda.OperationUtil;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
@@ -145,7 +144,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, ExecutionE
             }
         }
             
-        OperationUtil.deleteDataRelatedToExecution(commandContext, parentExecution);
+        executionEntityManager.deleteDataRelatedToExecution(parentExecution);
         commandContext.getExecutionEntityManager().delete(parentExecution);
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.activiti.bpmn.model.Activity;
 import org.activiti.engine.ActivitiIllegalArgumentException;
-import org.activiti.engine.impl.agenda.OperationUtil;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
@@ -148,7 +147,7 @@ protected void deleteChildExecutions(ExecutionEntity parentExecution, boolean de
         }
         
         if (deleteExecution) {
-            OperationUtil.deleteDataRelatedToExecution(commandContext, parentExecution);
+        	executionEntityManager.deleteDataRelatedToExecution(parentExecution);
             commandContext.getExecutionEntityManager().delete(parentExecution);
         }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1126,7 +1126,7 @@ protected List<BpmnParseHandler> getDefaultHistoryParseHandlers() {
         List<BpmnParseHandler> parseHandlers = new ArrayList<BpmnParseHandler>();
         parseHandlers.add(new FlowNodeHistoryParseHandler());
 //        parseHandlers.add(new ProcessHistoryParseHandler());
-        parseHandlers.add(new StartEventHistoryParseHandler());
+//        parseHandlers.add(new StartEventHistoryParseHandler());
         parseHandlers.add(new UserTaskHistoryParseHandler());
         return parseHandlers;
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/DefaultHistoryManager.java
Patch:
@@ -134,6 +134,7 @@ public void recordProcessInstanceNameChange(String processInstanceId, String new
     public void recordProcessInstanceStart(ExecutionEntity processInstance, FlowElement startElement) {
         if (isHistoryLevelAtLeast(HistoryLevel.ACTIVITY)) {
             HistoricProcessInstanceEntity historicProcessInstance = new HistoricProcessInstanceEntity(processInstance);
+            historicProcessInstance.setStartActivityId(startElement.getId());
 
             // Insert historic process-instance
             getDbSqlSession().insert(historicProcessInstance);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ProcessInstanceEndHandler.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * @author Tom Baeyens
+ * 
+ * TODO: Can probably be deleted
  */
 public class ProcessInstanceEndHandler implements ExecutionListener {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/StartEventEndHandler.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * @author Tom Baeyens
+ * 
+ * TODO: Can probably be deleted
  */
 public class StartEventEndHandler implements ExecutionListener {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/parse/ProcessHistoryParseHandler.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * @author Joram Barrez
+ * 
+ * TODO: can probably be deleted.
  */
 public class ProcessHistoryParseHandler extends AbstractBpmnParseHandler<Process> {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/parse/StartEventHistoryParseHandler.java
Patch:
@@ -20,6 +20,8 @@
 
 /**
  * @author Joram Barrez
+ * 
+ * TODO: can probably be deleted.
  */
 public class StartEventHistoryParseHandler extends AbstractBpmnParseHandler<StartEvent> {
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/async/AsyncTaskTest.java
Patch:
@@ -127,8 +127,7 @@ public void testFailingAsyncServiceTimer() {
         assertEquals("service", runtimeService.getActiveActivityIds(execution.getId()).get(0));
 
         // there is still a single job because the timer was created in the same
-        // transaction as the
-        // service was executed (which rolled back)
+        // transaction as the service was executed (which rolled back)
         assertEquals(1, managementService.createJobQuery().count());
 
         runtimeService.deleteProcessInstance(execution.getId(), "dead");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryMessageEventActivityBehavior.java
Patch:
@@ -37,6 +37,7 @@ public BoundaryMessageEventActivityBehavior(MessageEventDefinition messageEventD
         this.messageEventDefinition = messageEventDefinition;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
         ExecutionEntity executionEntity = (ExecutionEntity) execution;
         Context.getCommandContext().getEventSubscriptionEntityManager().insertMessageEvent(

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundarySignalEventActivityBehavior.java
Patch:
@@ -41,6 +41,7 @@ public BoundarySignalEventActivityBehavior(SignalEventDefinition signalEventDefi
         this.signal = signal;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
         ExecutionEntity executionEntity = (ExecutionEntity) execution;
         Context.getCommandContext().getEventSubscriptionEntityManager().insertSignalEvent(

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryTimerEventActivityBehavior.java
Patch:
@@ -36,6 +36,7 @@ public BoundaryTimerEventActivityBehavior(TimerEventDefinition timerEventDefinit
         this.timerEventDefinition = timerEventDefinition;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
 
         ExecutionEntity executionEntity = (ExecutionEntity) execution;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -29,6 +29,7 @@ public ErrorEndEventActivityBehavior(String errorCode) {
         this.errorCode = errorCode;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
         ErrorPropagation.propagateError(errorCode, execution);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/ErrorEventDefinitionParseHandler.java
Patch:
@@ -38,10 +38,10 @@ public Class<? extends BaseElement> getHandledType() {
 
     protected void executeParse(BpmnParse bpmnParse, ErrorEventDefinition eventDefinition) {
 
-        if (bpmnParse.getBpmnModel().containsErrorRef(eventDefinition.getErrorCode())) {
+        /*if (bpmnParse.getBpmnModel().containsErrorRef(eventDefinition.getErrorCode())) {
             String errorCode = bpmnParse.getBpmnModel().getErrors().get(eventDefinition.getErrorCode());
             eventDefinition.setErrorCode(errorCode);
-        }
+        }*/
 
         ScopeImpl scope = bpmnParse.getCurrentScope();
         ActivityImpl activity = bpmnParse.getCurrentActivity();
@@ -61,7 +61,7 @@ protected void executeParse(BpmnParse bpmnParse, ErrorEventDefinition eventDefin
 
         } else if (bpmnParse.getCurrentFlowElement() instanceof BoundaryEvent) {
             BoundaryEvent boundaryEvent = (BoundaryEvent) bpmnParse.getCurrentFlowElement();
-            boundaryEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createBoundaryEventActivityBehavior(boundaryEvent, boundaryEvent.isCancelActivity()));
+            boundaryEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createBoundaryEventActivityBehavior(boundaryEvent, true));
         }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -240,8 +240,7 @@ public boolean sameIdentity(PersistentObject other) {
 
         @Override
         public void clearCache() {
-            // this implementation cannot clear the object(s) to be removed from
-            // the cache.
+            // this implementation cannot clear the object(s) to be removed from the cache.
         }
 
         @Override

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageBoundaryEventTest.java
Patch:
@@ -591,7 +591,6 @@ public Boolean call() throws Exception {
         waitForJobExecutorOnCondition(2000L, 100L, new Callable<Boolean>() {
             @Override
             public Boolean call() throws Exception {
-                System.out.println("blaasdasdasdasdasddas " + taskService.createTaskQuery().list().size());
                 return taskService.createTaskQuery().list().size() == 3;
             }
         });

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1125,7 +1125,7 @@ protected List<BpmnParseHandler> getDefaultBpmnParseHandlers() {
     protected List<BpmnParseHandler> getDefaultHistoryParseHandlers() {
         List<BpmnParseHandler> parseHandlers = new ArrayList<BpmnParseHandler>();
         parseHandlers.add(new FlowNodeHistoryParseHandler());
-        parseHandlers.add(new ProcessHistoryParseHandler());
+//        parseHandlers.add(new ProcessHistoryParseHandler());
         parseHandlers.add(new StartEventHistoryParseHandler());
         parseHandlers.add(new UserTaskHistoryParseHandler());
         return parseHandlers;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryMessageEventActivityBehavior.java
Patch:
@@ -37,6 +37,7 @@ public BoundaryMessageEventActivityBehavior(MessageEventDefinition messageEventD
         this.messageEventDefinition = messageEventDefinition;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
         ExecutionEntity executionEntity = (ExecutionEntity) execution;
         Context.getCommandContext().getEventSubscriptionEntityManager().insertMessageEvent(

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundarySignalEventActivityBehavior.java
Patch:
@@ -41,6 +41,7 @@ public BoundarySignalEventActivityBehavior(SignalEventDefinition signalEventDefi
         this.signal = signal;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
         ExecutionEntity executionEntity = (ExecutionEntity) execution;
         Context.getCommandContext().getEventSubscriptionEntityManager().insertSignalEvent(

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryTimerEventActivityBehavior.java
Patch:
@@ -36,6 +36,7 @@ public BoundaryTimerEventActivityBehavior(TimerEventDefinition timerEventDefinit
         this.timerEventDefinition = timerEventDefinition;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
 
         ExecutionEntity executionEntity = (ExecutionEntity) execution;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -29,6 +29,7 @@ public ErrorEndEventActivityBehavior(String errorCode) {
         this.errorCode = errorCode;
     }
 
+    @Override
     public void execute(ActivityExecution execution) {
         ErrorPropagation.propagateError(errorCode, execution);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/ErrorEventDefinitionParseHandler.java
Patch:
@@ -38,10 +38,10 @@ public Class<? extends BaseElement> getHandledType() {
 
     protected void executeParse(BpmnParse bpmnParse, ErrorEventDefinition eventDefinition) {
 
-        if (bpmnParse.getBpmnModel().containsErrorRef(eventDefinition.getErrorCode())) {
+        /*if (bpmnParse.getBpmnModel().containsErrorRef(eventDefinition.getErrorCode())) {
             String errorCode = bpmnParse.getBpmnModel().getErrors().get(eventDefinition.getErrorCode());
             eventDefinition.setErrorCode(errorCode);
-        }
+        }*/
 
         ScopeImpl scope = bpmnParse.getCurrentScope();
         ActivityImpl activity = bpmnParse.getCurrentActivity();
@@ -61,7 +61,7 @@ protected void executeParse(BpmnParse bpmnParse, ErrorEventDefinition eventDefin
 
         } else if (bpmnParse.getCurrentFlowElement() instanceof BoundaryEvent) {
             BoundaryEvent boundaryEvent = (BoundaryEvent) bpmnParse.getCurrentFlowElement();
-            boundaryEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createBoundaryEventActivityBehavior(boundaryEvent, boundaryEvent.isCancelActivity()));
+            boundaryEvent.setBehavior(bpmnParse.getActivityBehaviorFactory().createBoundaryEventActivityBehavior(boundaryEvent, true));
         }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -240,8 +240,7 @@ public boolean sameIdentity(PersistentObject other) {
 
         @Override
         public void clearCache() {
-            // this implementation cannot clear the object(s) to be removed from
-            // the cache.
+            // this implementation cannot clear the object(s) to be removed from the cache.
         }
 
         @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SignalEventReceivedCmd.java
Patch:
@@ -89,8 +89,7 @@ public Void execute(CommandContext commandContext) {
 
         for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : signalEvents) {
             // We only throw the event to globally scoped signals.
-            // Process instance scoped signals must be thrown within the process
-            // itself
+            // Process instance scoped signals must be thrown within the process itself
             if (signalEventSubscriptionEntity.isGlobalScoped()) {
                 signalEventSubscriptionEntity.eventReceived(payload, async);
             }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/tree/ExecutionTreeNode.java
Patch:
@@ -67,7 +67,7 @@ public ExecutionTreeBfsIterator leafsFirstIterator() {
 	@Override
 	public String toString() {
 		StringBuilder strb = new StringBuilder();
-		strb.append(getExecutionEntity().getId() + " : " + getExecutionEntity().getActivityId() + "\r\n");
+		strb.append(getExecutionEntity().getId() + " : " + getExecutionEntity().getActivityId() + ", parent id " + getExecutionEntity().getParentId() + "\r\n");
 		if (children != null) {
 			for (ExecutionTreeNode childNode : children) {
 				childNode.internalToString(strb, "", true);
@@ -78,7 +78,7 @@ public String toString() {
 
 	protected void internalToString(StringBuilder strb, String prefix, boolean isTail) {
 		strb.append(prefix + (isTail ? "└── " : "├── ") + getExecutionEntity().getId() 
-				+ " : " + getExecutionEntity().getActivityId() + "\r\n"); 
+				+ " : " + getExecutionEntity().getActivityId() + ", parent id " + getExecutionEntity().getParentId() + "\r\n"); 
 		if (children != null) {
 			for (int i = 0; i < children.size() - 1; i++) {
 				children.get(i).internalToString(strb, prefix + (isTail ? "    " : "│   "), false);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageIntermediateEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.activiti.engine.test.Deployment;
 
 /**
- * @author Daniel Meyer
+ * @author Tijs Rademakers
  */
 public class MessageIntermediateEventTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageNonInterruptingBoundaryEventTest.java
Patch:
@@ -20,15 +20,15 @@
 
 /**
  * 
- * @author Kristin Polenz
+ * @author Tijs Rademakers
  */
 public class MessageNonInterruptingBoundaryEventTest extends PluggableActivitiTestCase {
 
     @Deployment
     public void testSingleNonInterruptingBoundaryMessageEvent() {
         runtimeService.startProcessInstanceByKey("process");
 
-        assertEquals(2, runtimeService.createExecutionQuery().count());
+        assertEquals(3, runtimeService.createExecutionQuery().count());
 
         Task userTask = taskService.createTaskQuery().taskDefinitionKey("task").singleResult();
         assertNotNull(userTask);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageStartEventTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.activiti.engine.test.Deployment;
 
 /**
- * @author Daniel Meyer
+ * @author Tijs Rademakers
  */
 public class MessageStartEventTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/asyncexecutor/ExecuteAsyncRunnable.java
Patch:
@@ -127,8 +127,7 @@ public Void execute(CommandContext commandContext) {
                 commandExecutor.execute(commandConfig, cmd);
 
                 // Dispatch an event, indicating job execution failed in a
-                // try-catch block, to prevent the original
-                // exception to be swallowed
+                // try-catch block, to prevent the original exception to be swallowed
                 if (commandContext.getEventDispatcher().isEnabled()) {
                     try {
                         commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityExceptionEvent(ActivitiEventType.JOB_EXECUTION_FAILURE, job, exception));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DueDateBusinessCalendar.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.Date;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.runtime.ClockReader;
 import org.joda.time.DateTime;
 import org.joda.time.Period;
@@ -32,7 +33,8 @@ public Date resolveDuedate(String duedate, int maxIterations) {
         try {
             // check if due period was specified
             if (duedate.startsWith("P")) {
-                return DateTime.now().plus(Period.parse(duedate)).toDate();
+            	DateTime dateTime = new DateTime(Context.getProcessEngineConfiguration().getClock().getCurrentTime().getTime());
+                return dateTime.plus(Period.parse(duedate)).toDate();
             }
 
             return DateTime.parse(duedate).toDate();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContextInterceptor.java
Patch:
@@ -40,9 +40,7 @@ public <T> T execute(CommandConfig config, Command<T> command) {
 
         boolean contextReused = false;
         // We need to check the exception, because the transaction can be in a
-        // rollback state,
-        // and some other command is being fired to compensate (eg. decrementing
-        // job retries)
+        // rollback state, and some other command is being fired to compensate (eg. decrementing job retries)
         if (!config.isContextReusePossible() || context == null || context.getException() != null) {
             context = commandContextFactory.createCommandContext(command);
         } else {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageBoundaryEventTest.java
Patch:
@@ -518,10 +518,10 @@ public void testSingleBoundaryMessageEventWithBoundaryTimerEvent() {
         // After setting the clock to time '1 hour and 5 seconds', the timer
         // should fire.
         processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + ((60 * 60 * 1000) + 5000)));
-        waitForJobExecutorOnCondition(12000L, 100L, new Callable<Boolean>() {
+        waitForJobExecutorOnCondition(120000000L, 100L, new Callable<Boolean>() {
             @Override
             public Boolean call() throws Exception {
-                return taskService.createTaskQuery().count() == 2;
+                return taskService.createTaskQuery().count() == 1;
             }
         });
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SignalEventReceivedCmd.java
Patch:
@@ -89,8 +89,7 @@ public Void execute(CommandContext commandContext) {
 
         for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : signalEvents) {
             // We only throw the event to globally scoped signals.
-            // Process instance scoped signals must be thrown within the process
-            // itself
+            // Process instance scoped signals must be thrown within the process itself
             if (signalEventSubscriptionEntity.isGlobalScoped()) {
                 signalEventSubscriptionEntity.eventReceived(payload, async);
             }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/tree/ExecutionTreeNode.java
Patch:
@@ -67,7 +67,7 @@ public ExecutionTreeBfsIterator leafsFirstIterator() {
 	@Override
 	public String toString() {
 		StringBuilder strb = new StringBuilder();
-		strb.append(getExecutionEntity().getId() + " : " + getExecutionEntity().getActivityId() + "\r\n");
+		strb.append(getExecutionEntity().getId() + " : " + getExecutionEntity().getActivityId() + ", parent id " + getExecutionEntity().getParentId() + "\r\n");
 		if (children != null) {
 			for (ExecutionTreeNode childNode : children) {
 				childNode.internalToString(strb, "", true);
@@ -78,7 +78,7 @@ public String toString() {
 
 	protected void internalToString(StringBuilder strb, String prefix, boolean isTail) {
 		strb.append(prefix + (isTail ? "└── " : "├── ") + getExecutionEntity().getId() 
-				+ " : " + getExecutionEntity().getActivityId() + "\r\n"); 
+				+ " : " + getExecutionEntity().getActivityId() + ", parent id " + getExecutionEntity().getParentId() + "\r\n"); 
 		if (children != null) {
 			for (int i = 0; i < children.size() - 1; i++) {
 				children.get(i).internalToString(strb, prefix + (isTail ? "    " : "│   "), false);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageIntermediateEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.activiti.engine.test.Deployment;
 
 /**
- * @author Daniel Meyer
+ * @author Tijs Rademakers
  */
 public class MessageIntermediateEventTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageNonInterruptingBoundaryEventTest.java
Patch:
@@ -20,15 +20,15 @@
 
 /**
  * 
- * @author Kristin Polenz
+ * @author Tijs Rademakers
  */
 public class MessageNonInterruptingBoundaryEventTest extends PluggableActivitiTestCase {
 
     @Deployment
     public void testSingleNonInterruptingBoundaryMessageEvent() {
         runtimeService.startProcessInstanceByKey("process");
 
-        assertEquals(2, runtimeService.createExecutionQuery().count());
+        assertEquals(3, runtimeService.createExecutionQuery().count());
 
         Task userTask = taskService.createTaskQuery().taskDefinitionKey("task").singleResult();
         assertNotNull(userTask);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageStartEventTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.activiti.engine.test.Deployment;
 
 /**
- * @author Daniel Meyer
+ * @author Tijs Rademakers
  */
 public class MessageStartEventTest extends PluggableActivitiTestCase {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.Collection;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.impl.agenda.OperationUtil;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
@@ -97,6 +98,7 @@ protected void executeInterruptingBehavior(ExecutionEntity executionEntity, Comm
         Collection<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(attachedRefScopeExecution.getId());
         for (ExecutionEntity childExcecution : childExecutions) {
             if (childExcecution.getId().equals(executionEntity.getId()) == false) {
+                OperationUtil.deleteDataRelatedToExecution(commandContext, childExcecution);
                 commandContext.getExecutionEntityManager().delete(childExcecution);
             }
         }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/ParallelGatewayTest.java
Patch:
@@ -153,7 +153,7 @@ public void testHistoryTables() {
     @Deployment
     public void testAsyncBehavior() {
         ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("async");
-        waitForJobExecutorToProcessAllJobs(5000, 500);
+        waitForJobExecutorToProcessAllJobs(5000L, 250L);
         assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityScanner.java
Patch:
@@ -71,7 +71,7 @@ private Method getIdMethod(Class< ? > clazz) {
     Id idAnnotation = null;
     for(Method method : methods) {
       idAnnotation = method.getAnnotation(Id.class);
-      if(idAnnotation != null) {
+      if(idAnnotation != null && !method.isBridge()) {
         idMethod = method;
         break;
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/impl/ActivitiEventDispatcherImpl.java
Patch:
@@ -111,9 +111,9 @@ protected ProcessDefinitionEntity extractProcessDefinitionEntityFromEvent(Activi
                 result = (ProcessDefinitionEntity) entity;
             }
         }
-
+        
         if (result == null && event.getProcessDefinitionId() != null) {
-            result = ProcessDefinitionUtil.getProcessDefinitionEntity(event.getProcessDefinitionId());
+            result = ProcessDefinitionUtil.getProcessDefinitionEntity(event.getProcessDefinitionId(), true);
             if (result != null) {
                 result = Context.getProcessEngineConfiguration().getDeploymentManager().resolveProcessDefinition(result).getProcessDefinitionEntity();
             }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -111,7 +111,7 @@ public void testQueryByProcessInstanceId() {
             assertEquals(3, query.list().size());
             assertEquals(3, query.count());
         }
-        assertEquals(1, runtimeService.createExecutionQuery().processInstanceId(sequentialProcessInstanceIds.get(0)).list().size());
+        assertEquals(2, runtimeService.createExecutionQuery().processInstanceId(sequentialProcessInstanceIds.get(0)).list().size());
     }
 
     public void testQueryByParentId() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -144,8 +144,7 @@ public void execute(ActivityExecution execution) {
 
         Expression skipExpression = taskDefinition.getSkipExpression();
         if (SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression) && SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)) {
-
-            // task.complete(null, false);
+        	leave(execution);
         }
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -144,5 +144,5 @@ public interface ActivityExecution extends DelegateExecution {
    * Performs destroy scope behavior: all child executions and sub-process instances and other related
    * resources are removed. The execution itself can continue execution. 
    */
-  void destroyScope(String string);
+  void destroyScope(String reason);
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -201,7 +201,8 @@ public void remove() {
       }
     }
   }
-  
+
+  @Override
   public void destroyScope(String reason) {
     
    log.debug("performing destroy scope behavior for execution {}", this);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/InclusiveGatewayTest.java
Patch:
@@ -433,7 +433,7 @@ public void testJoinAfterCall() {
     @Deployment
     public void testAsyncBehavior() {
         ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("async");
-        waitForJobExecutorToProcessAllJobs(500000000L, 5000L);
+        waitForJobExecutorToProcessAllJobs(5000L, 250);
         assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ContinueProcessOperation.java
Patch:
@@ -55,8 +55,7 @@ public void run() {
 
         if (currentFlowElement == null) {
             currentFlowElement = findCurrentFlowElement(execution);
-        } else {
-            execution.setCurrentActivityId(currentFlowElement.getId());
+            execution.setCurrentFlowElement(currentFlowElement);
         }
 
         if (currentFlowElement instanceof FlowNode) {
@@ -181,7 +180,6 @@ protected void executeBoundaryEvents(Collection<BoundaryEvent> boundaryEvents) {
             ExecutionEntity childExecutionEntity = (ExecutionEntity) execution.createExecution();
             childExecutionEntity.setParentId(execution.getId());
             childExecutionEntity.setCurrentFlowElement(boundaryEvent);
-            childExecutionEntity.setCurrentActivityId(boundaryEvent.getId());
             childExecutionEntity.setScope(false);
 
             ActivityBehavior boundaryEventBehavior = ((ActivityBehavior) boundaryEvent.getBehavior());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -13,7 +13,6 @@
 import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.util.condition.ConditionUtil;
-import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -37,8 +36,7 @@ public void run() {
 
         if (currentFlowElement == null) {
             currentFlowElement = findCurrentFlowElement(execution);
-        } else {
-            execution.setCurrentActivityId(currentFlowElement.getId());
+            execution.setCurrentFlowElement(currentFlowElement);
         }
 
         // If execution is a scope (and not the process instance), the scope

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TriggerExecutionOperation.java
Patch:
@@ -23,8 +23,7 @@ public void run() {
 
         if (currentFlowElement == null) {
             currentFlowElement = findCurrentFlowElement(execution);
-        } else {
-            execution.setCurrentActivityId(currentFlowElement.getId());
+            execution.setCurrentFlowElement(currentFlowElement);
         }
 
         if (currentFlowElement instanceof FlowNode) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -71,6 +71,9 @@ protected void executeInclusiveGatewayLogic(ExecutionEntity execution) {
                 if (canReachGateway) {
                     oneExecutionCanReachGateway = true;
                 }
+            } else if (executionEntity.getActivityId().equals(execution.getCurrentActivityId()) && executionEntity.isActive()) {
+            	// Special case: the execution has reached the inc gw, but the operation hasn't been executed yet for that execution
+            	oneExecutionCanReachGateway = true;
             }
         }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -51,7 +51,6 @@ protected void createInstances(ActivityExecution execution) {
         for (int loopCounter = 0; loopCounter < nrOfInstances; loopCounter++) {
             ActivityExecution concurrentExecution = execution.createExecution();
             concurrentExecution.setCurrentFlowElement(activity);
-            concurrentExecution.setCurrentActivityId(activity.getId());
             concurrentExecution.setActive(true);
             concurrentExecution.setConcurrent(true);
             concurrentExecution.setScope(false);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SubProcessActivityBehavior.java
Patch:
@@ -62,7 +62,6 @@ public void execute(ActivityExecution execution) {
 
         ExecutionEntity subProcessExecution = ((ExecutionEntity) execution).createExecution();
         subProcessExecution.setCurrentFlowElement(subProcess);
-        subProcessExecution.setCurrentActivityId(subProcess.getId());
 
         // initialize the template-defined data objects as variables
         Map<String, Object> dataObjectVars = processDataObjects(subProcess.getDataObjects());
@@ -72,7 +71,6 @@ public void execute(ActivityExecution execution) {
 
         ExecutionEntity startSubProcessExecution = subProcessExecution.createExecution();
         startSubProcessExecution.setCurrentFlowElement(startElement);
-        startSubProcessExecution.setCurrentActivityId(startElement.getId());
         Context.getAgenda().planContinueProcessOperation(startSubProcessExecution);
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -169,7 +169,6 @@ public ProcessInstance execute(CommandContext commandContext) {
         // Create the first execution that will visit all the process definition elements
         ExecutionEntity execution = processInstance.createExecution();
         execution.setCurrentFlowElement(initialFlowElement);
-        execution.setCurrentActivityId(initialFlowElement.getId());
         commandContext.getAgenda().planContinueProcessOperation(execution);
 
         return processInstance;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -65,7 +65,9 @@ public Collection<ExecutionEntity> findChildExecutionsByProcessInstanceId(final
         return getList("selectExecutionsByProcessInstanceId", processInstanceId, new CachedEntityMatcher<ExecutionEntity>() {
             @Override
             public boolean isRetained(ExecutionEntity executionEntity) {
-                return executionEntity.getProcessInstanceId() != null && executionEntity.getProcessInstanceId().equals(processInstanceId);
+                return executionEntity.getProcessInstanceId() != null 
+                		&& executionEntity.getProcessInstanceId().equals(processInstanceId)
+                		&& executionEntity.getParentId() != null;
             }
         });
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -33,8 +33,6 @@ public interface ActivityExecution extends DelegateExecution {
 
     void setCurrentFlowElement(FlowElement flowElement);
 
-    void setCurrentActivityId(String activityId);
-
     /* Process instance/activity/transition retrieval */
 
     /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/EndExecutionOperation.java
Patch:
@@ -87,7 +87,7 @@ public void run() {
             Collection<ExecutionEntity> executions = executionEntityManager.findChildExecutionsByProcessInstanceId(processInstanceId);
             int activeExecutions = 0;
             for (ExecutionEntity execution : executions) {
-                if (execution.isActive()) {
+                if (execution.isActive() && !processInstanceId.equals(execution.getId())) {
                     activeExecutions++;
                 }
             }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -108,6 +108,8 @@ protected void leaveFlowNode(FlowNode flowNode) {
         // Reuse existing one
         SequenceFlow sequenceFlow = outgoingSequenceFlow.get(0);
         execution.setCurrentFlowElement(sequenceFlow);
+        execution.setActive(true);
+//        execution.setScope(false);
         outgoingExecutions.add((ExecutionEntity) execution);
 
         // Executions for all the other one

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -33,8 +33,8 @@
 import org.activiti.engine.impl.pvm.PvmException;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.runtime.AtomicOperation;
+import org.activiti.engine.impl.util.ProcessDefinitionUtil;
 import org.activiti.engine.impl.util.ReflectUtil;
-import org.activiti.engine.impl.util.cache.ProcessDefinitionCacheUtil;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
@@ -145,7 +145,7 @@ protected static void executeEventHandler(Map<String, List<Event>> eventMap, Exe
     
     protected static Map<String, List<Event>> findCatchingEventsForProcess(String processDefinitionId, String errorCode) {
         Map<String, List<Event>> boundaryEventMap = new HashMap<String, List<Event>>();
-        org.activiti.bpmn.model.Process process = ProcessDefinitionCacheUtil.getCachedProcess(processDefinitionId);
+        org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);
 
         List<BoundaryEvent> boundaryEvents = process.findFlowElementsOfType(BoundaryEvent.class, true);
         for (BoundaryEvent boundaryEvent : boundaryEvents) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/ServiceTaskParseHandler.java
Patch:
@@ -51,10 +51,10 @@ protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {
                 serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMailActivityBehavior(serviceTask));
 
             } else if (serviceTask.getType().equalsIgnoreCase("mule")) {
-                serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(serviceTask, bpmnParse.getBpmnModel()));
+                serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(serviceTask));
 
             } else if (serviceTask.getType().equalsIgnoreCase("camel")) {
-                serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createCamelActivityBehavior(serviceTask, bpmnParse.getBpmnModel()));
+                serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createCamelActivityBehavior(serviceTask));
 
             } else if (serviceTask.getType().equalsIgnoreCase("shell")) {
                 serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -443,8 +443,7 @@ public void deleteVariablesInstanceForLeavingScope() {
 
         for (VariableInstanceEntity variableInstance : variableInstances.values()) {
             Context.getCommandContext().getHistoryManager().recordVariableUpdate(variableInstance);
-
-            variableInstance.delete();
+            Context.getCommandContext().getVariableInstanceEntityManager().delete(variableInstance);
         }
     }
 
@@ -672,7 +671,7 @@ protected void removeVariableLocal(String variableName, ExecutionEntity sourceAc
     }
 
     protected void deleteVariableInstanceForExplicitUserCall(VariableInstanceEntity variableInstance, ExecutionEntity sourceActivityExecution) {
-        variableInstance.delete();
+    	Context.getCommandContext().getVariableInstanceEntityManager().delete(variableInstance);
         variableInstance.setValue(null);
 
         // Record historic variable deletion

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateTimerCatchEventActivityBehavior.java
Patch:
@@ -12,9 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.behavior;
 
-import org.activiti.bpmn.model.BoundaryEvent;
 import org.activiti.bpmn.model.TimerEventDefinition;
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.jobexecutor.TriggerTimerEventJobHandler;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -38,8 +38,7 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {
     protected String script;
     protected String language;
     protected String resultVariable;
-    protected boolean storeScriptVariables = false; // see
-                                                    // http://jira.codehaus.org/browse/ACT-1626
+    protected boolean storeScriptVariables = false; // see http://jira.codehaus.org/browse/ACT-1626
 
     public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {
         this.script = script;
@@ -66,7 +65,7 @@ public void execute(ActivityExecution execution) {
 
         } catch (ActivitiException e) {
 
-            LOGGER.warn("Exception while executing " + execution.getActivity().getId() + " : " + e.getMessage());
+            LOGGER.warn("Exception while executing " + execution.getCurrentFlowElement().getId() + " : " + e.getMessage());
 
             noErrors = false;
             Throwable rootCause = ExceptionUtils.getRootCause(e);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -176,8 +176,9 @@ public ProcessInstance execute(CommandContext commandContext) {
         return processInstance;
     }
 
-    protected ExecutionEntity createProcessInstance(CommandContext commandContext, ProcessDefinitionEntity processDefinitionEntity, String businessKey, String initiatorVariableName,
-            FlowElement initialFlowElement) {
+    protected ExecutionEntity createProcessInstance(CommandContext commandContext, 
+    		ProcessDefinitionEntity processDefinitionEntity, String businessKey, 
+    		String initiatorVariableName, FlowElement initialFlowElement) {
 
         ExecutionEntity processInstance = new ExecutionEntity();
         processInstance.setProcessDefinitionId(processDefinitionEntity.getId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/TimerUtil.java
Patch:
@@ -33,8 +33,8 @@ public class TimerUtil {
      * Takes in an optional execution, if missing the
      * {@link NoExecutionVariableScope} will be used (eg Timer start event)
      */
-    public static TimerEntity createTimerEntityForTimerEventDefinition(TimerEventDefinition timerEventDefinition, boolean isInterruptingTimer, ExecutionEntity executionEntity, String jobHandlerType,
-            String jobHandlerConfig) {
+    public static TimerEntity createTimerEntityForTimerEventDefinition(TimerEventDefinition timerEventDefinition, 
+    		boolean isInterruptingTimer, ExecutionEntity executionEntity, String jobHandlerType, String jobHandlerConfig) {
 
         String businessCalendarRef = null;
         Expression expression = null;

File: modules/activiti-engine/src/test/java/org/activiti/standalone/deploy/CustomDeploymentCache.java
Patch:
@@ -61,6 +61,9 @@ public boolean contains(String id) {
 
     // For testing purposes only
     public ProcessDefinitionEntity getCachedProcessDefinition() {
+    	if (entry == null) {
+    		return null;
+    	}
         return entry.getProcessDefinitionEntity();
     }
 

File: modules/activiti-engine/src/test/java/org/activiti/standalone/testing/ActivitiRuleJunit4Test.java
Patch:
@@ -52,8 +52,7 @@ public void ruleUsageExample() {
         assertEquals(0, runtimeService.createProcessInstanceQuery().count());
     }
 
-    // this is to show how JobTestHelper could be used to wait for jobs to be
-    // all processed
+    // this is to show how JobTestHelper could be used to wait for jobs to be all processed
     @Test
     @Deployment(resources = { "org/activiti/engine/test/bpmn/async/AsyncTaskTest.testAsyncTask.bpmn20.xml" })
     public void testWaitForJobs() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/impl/logger/DebugInfoEntityEventListener.java
Patch:
@@ -20,11 +20,11 @@
 /**
  * @author jbarrez
  */
-public class LoggingEntityCreatedEventListener extends BaseEntityEventListener {
+public class DebugInfoEntityEventListener extends BaseEntityEventListener {
 
 	protected ProcessExecutionLogger processExecutionLogger;
 	
-	public LoggingEntityCreatedEventListener(ProcessExecutionLogger processExecutionLogger) {
+	public DebugInfoEntityEventListener(ProcessExecutionLogger processExecutionLogger) {
 		this.processExecutionLogger = processExecutionLogger;
     }
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/impl/logger/ProcessExecutionLogger.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ProcessExecutionLogger {
 
-	private static final Logger logger = LoggerFactory.getLogger(LoggingCommandInvoker.class);
+	private static final Logger logger = LoggerFactory.getLogger(ProcessExecutionLogger.class);
 	
 	protected Map<String, List<DebugInfo>> debugInfoMap = new HashMap<String, List<DebugInfo>>();
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/impl/logger/ProcessExecutionLoggerConfigurator.java
Patch:
@@ -30,7 +30,7 @@ public void beforeInit(ProcessEngineConfigurationImpl processEngineConfiguration
 
 	@Override
     public void configure(ProcessEngineConfigurationImpl processEngineConfiguration) {
-		processEngineConfiguration.getEventDispatcher().addEventListener(new LoggingEntityCreatedEventListener(processExecutionLogger));
+		processEngineConfiguration.getEventDispatcher().addEventListener(new DebugInfoEntityEventListener(processExecutionLogger));
     }
 
 	public ProcessExecutionLogger getProcessExecutionLogger() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/AbstractOperation.java
Patch:
@@ -66,7 +66,7 @@ protected FlowElement findCurrentFlowElement(final ActivityExecution execution)
 
     protected void deleteExecution(CommandContext commandContext, ExecutionEntity executionEntity) {
         deleteDataRelatedToExecution(commandContext, executionEntity);
-        commandContext.getExecutionEntityManager().delete(executionEntity); // TODO: What about delete reason
+        commandContext.getExecutionEntityManager().delete(executionEntity); // TODO: what about delete reason?
     }
 
     protected void deleteProcessInstanceExecutionEntity(CommandContext commandContext, ExecutionEntityManager executionEntityManager, String processInstanceId) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TriggerExecutionOperation.java
Patch:
@@ -34,7 +34,7 @@ public void run() {
             if (activityBehavior instanceof TriggerableActivityBehavior) {
                 ((TriggerableActivityBehavior) activityBehavior).trigger(execution, null, null);
             } else {
-                throw new RuntimeException("Invalid behavior: " + activityBehavior + " should implement " + TriggerableActivityBehavior.class.getCanonicalName());
+                throw new ActivitiException("Invalid behavior: " + activityBehavior + " should implement " + TriggerableActivityBehavior.class.getCanonicalName());
             }
 
         } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerEventHandler.java
Patch:
@@ -31,7 +31,7 @@ public static String createConfiguration(String id, Expression endDate) {
         return cfgJson.toString();
     }
 
-    public String setActivityIdToConfiguration(String jobHandlerConfiguration, String activityId) {
+    public static String setActivityIdToConfiguration(String jobHandlerConfiguration, String activityId) {
         try {
             JSONObject cfgJson = new JSONObject(jobHandlerConfiguration);
             cfgJson.put(PROPERTYNAME_TIMER_ACTIVITY_ID, activityId);
@@ -50,7 +50,7 @@ public static String getActivityIdFromConfiguration(String jobHandlerConfigurati
         }
     }
 
-    public String setEndDateToConfiguration(String jobHandlerConfiguration, String endDate) {
+    public static String setEndDateToConfiguration(String jobHandlerConfiguration, String endDate) {
         JSONObject cfgJson = null;
         try {
             cfgJson = new JSONObject(jobHandlerConfiguration);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandInvoker.java
Patch:
@@ -55,7 +55,7 @@ protected void executeOperations(final CommandContext commandContext) {
         }
     }
 
-	protected void executeOperation(Runnable runnable) {
+	public void executeOperation(Runnable runnable) {
 	    runnable.run();
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/Agenda.java
Patch:
@@ -69,7 +69,7 @@ public void planContinueProcessOperation(ActivityExecution execution) {
     }
     
     public void planContinueProcessSynchronousOperation(ActivityExecution execution) {
-        planOperation(new ContinueProcessOperation(this, execution, true), (ExecutionEntity) execution);
+        planOperation(new ContinueProcessOperation(commandContext, execution, true), (ExecutionEntity) execution);
     }
 
     public void planTakeOutgoingSequenceFlowsOperation(ActivityExecution execution, boolean evaluateConditions) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/DestroyScopeOperation.java
Patch:
@@ -19,8 +19,8 @@
  */
 public class DestroyScopeOperation extends AbstractOperation {
 
-    public DestroyScopeOperation(Agenda agenda, ActivityExecution execution) {
-        super(agenda, execution);
+    public DestroyScopeOperation(CommandContext commandContext, ActivityExecution execution) {
+        super(commandContext, execution);
     }
 
     @Override
@@ -33,7 +33,6 @@ public void run() {
         // where isScope = true
 
         // Find parent scope execution
-        CommandContext commandContext = Context.getCommandContext();
         ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
         ExecutionEntity executionEntity = (ExecutionEntity) execution;
         ExecutionEntity parentScopeExecution = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/ExecuteInactiveBehaviorsOperation.java
Patch:
@@ -22,8 +22,8 @@ public class ExecuteInactiveBehaviorsOperation extends AbstractOperation {
 
     protected Collection<ExecutionEntity> involvedExecutions;
 
-    public ExecuteInactiveBehaviorsOperation(Agenda agenda) {
-        super(agenda, null);
+    public ExecuteInactiveBehaviorsOperation(CommandContext commandContext) {
+        super(commandContext, null);
         this.involvedExecutions = agenda.getCommandContext().getInvolvedExecutions();
     }
 
@@ -37,7 +37,6 @@ public void run() {
          * executions inactive in those 3) Execute the inactivated behavior
          */
 
-        CommandContext commandContext = Context.getCommandContext();
         for (ExecutionEntity executionEntity : involvedExecutions) {
 
             Process process = ProcessDefinitionCacheUtil.getCachedProcess(executionEntity.getProcessDefinitionId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TakeOutgoingSequenceFlowsOperation.java
Patch:
@@ -24,8 +24,8 @@ public class TakeOutgoingSequenceFlowsOperation extends AbstractOperation {
 
     protected boolean evaluateConditions;
 
-    public TakeOutgoingSequenceFlowsOperation(Agenda agenda, ActivityExecution activityExecution, boolean evaluateConditions) {
-        super(agenda, activityExecution);
+    public TakeOutgoingSequenceFlowsOperation(CommandContext commandContext, ActivityExecution activityExecution, boolean evaluateConditions) {
+        super(commandContext, activityExecution);
         this.evaluateConditions = evaluateConditions;
     }
 
@@ -78,7 +78,6 @@ protected void leaveFlowNode(FlowNode flowNode) {
         // Leave, and reuse the incoming sequence flow, make executions for all
         // the others (if applicable)
 
-        CommandContext commandContext = Context.getCommandContext();
         ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();
         List<ExecutionEntity> outgoingExecutions = new ArrayList<ExecutionEntity>(flowNode.getOutgoingFlows().size());
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/agenda/TriggerExecutionOperation.java
Patch:
@@ -3,6 +3,7 @@
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.FlowNode;
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.delegate.TriggerableActivityBehavior;
@@ -12,8 +13,8 @@
  */
 public class TriggerExecutionOperation extends AbstractOperation {
 
-    public TriggerExecutionOperation(Agenda agenda, ActivityExecution execution) {
-        super(agenda, execution);
+    public TriggerExecutionOperation(CommandContext commandContext, ActivityExecution execution) {
+        super(commandContext, execution);
     }
 
     @Override

File: compatibility-test/new_engine_app/src/main/java/org/activiti/NewEngineApp.java
Patch:
@@ -40,7 +40,7 @@ public static void main(String[] args) {
 		
 		// Start a process in new engine 
 	    
-	    System.out.println("Starting process instance from old engine ...");
+	    System.out.println("Starting process instance from new engine ...");
 	    RepositoryService repositoryService = processEngine.getRepositoryService();
 	    repositoryService.createDeployment().addClasspathResource("oneTaskProcess.bpmn20.xml").deploy();
 	    

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -50,7 +50,7 @@
 public interface ProcessEngine extends EngineServices {
 
     /** the version of the activiti library */
-    public static String VERSION = "5.18.0.0";
+    public static String VERSION = "6.0.0.0"; // Note the extra .x at the end. To cater for snapshot releases with different database changes
 
     /**
      * The name as specified in 'process-engine-name' in the activiti.cfg.xml

File: modules/activiti5-compatibility/src/main/java/org/activiti5/engine/ProcessEngine.java
Patch:
@@ -50,7 +50,7 @@
 public interface ProcessEngine extends EngineServices {
 
     /** the version of the activiti library */
-    public static String VERSION = "5.18.0.0";
+    public static String VERSION = "6.0.0.0";
 
     /**
      * The name as specified in 'process-engine-name' in the activiti.cfg.xml

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -144,5 +144,5 @@ public interface ActivityExecution extends DelegateExecution {
    * Performs destroy scope behavior: all child executions and sub-process instances and other related
    * resources are removed. The execution itself can continue execution. 
    */
-  void destroyScope(String string);
+  void destroyScope(String reason);
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -201,7 +201,8 @@ public void remove() {
       }
     }
   }
-  
+
+  @Override
   public void destroyScope(String reason) {
     
    log.debug("performing destroy scope behavior for execution {}", this);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -64,7 +64,7 @@ public Object execute(CommandContext commandContext)  {
     ProcessEngineConfiguration processEngineConfig = commandContext.getProcessEngineConfiguration();
    
     if (activity == null || activity.getFailedJobRetryTimeCycleValue() == null) {
-      log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
+      log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
       job.setRetries(job.getRetries() - 1);
       job.setLockOwner(null);
       job.setLockExpirationTime(null);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BaseBpmnJsonConverter.java
Patch:
@@ -520,6 +520,7 @@ protected void convertJsonToFormProperties(JsonNode objectNode, BaseElement elem
                                 for (JsonNode enumNode : enumValuesNode) {
                                     if (enumNode.get("value") != null && enumNode.get("value").isNull() == false) {
                                         FormValue formValue = new FormValue();
+                                        formValue.setId(enumNode.get("value").asText());
                                         formValue.setName(enumNode.get("value").asText());
                                         formValueList.add(formValue);
                                     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -68,7 +68,7 @@ public Object execute(CommandContext commandContext)  {
     ProcessEngineConfiguration processEngineConfig = commandContext.getProcessEngineConfiguration();
    
     if (activity == null || activity.getFailedJobRetryTimeCycleValue() == null) {
-      log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
+      log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.");
       job.setRetries(job.getRetries() - 1);
       job.setLockOwner(null);
       job.setLockExpirationTime(null);

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceDiagramResourceTest.java
Patch:
@@ -34,6 +34,7 @@ public void testGetProcessDiagram() throws Exception {
     CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + 
         RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE_DIAGRAM, processInstance.getId())), HttpStatus.SC_OK);
     assertNotNull(response.getEntity().getContent());
+    assertEquals("image/png", response.getEntity().getContentType().getValue());
     closeResponse(response);
   }
   

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BaseBpmnJsonConverter.java
Patch:
@@ -520,6 +520,7 @@ protected void convertJsonToFormProperties(JsonNode objectNode, BaseElement elem
                                 for (JsonNode enumNode : enumValuesNode) {
                                     if (enumNode.get("value") != null && enumNode.get("value").isNull() == false) {
                                         FormValue formValue = new FormValue();
+                                        formValue.setId(enumNode.get("value").asText());
                                         formValue.setName(enumNode.get("value").asText());
                                         formValueList.add(formValue);
                                     }

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ConvertProcessDefinitionPopupWindow.java
Patch:
@@ -157,7 +157,7 @@ public void buttonClick(ClickEvent event) {
 
 	          URL explorerURL = ExplorerApp.get().getURL();
 	          URL url = new URL(explorerURL.getProtocol(), explorerURL.getHost(), explorerURL.getPort(),
-			          explorerURL.getPath().replace("/ui", "") + "service/editor?id=" + modelData.getId());
+			          explorerURL.getPath().replace("/ui", "") + "modeler.html?modelId=" + modelData.getId());
               ExplorerApp.get().getMainWindow().open(new ExternalResource(url));
             }
           }

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ConvertProcessDefinitionPopupWindow.java
Patch:
@@ -157,7 +157,7 @@ public void buttonClick(ClickEvent event) {
 
 	          URL explorerURL = ExplorerApp.get().getURL();
 	          URL url = new URL(explorerURL.getProtocol(), explorerURL.getHost(), explorerURL.getPort(),
-			          explorerURL.getPath().replace("/ui", "") + "service/editor?id=" + modelData.getId());
+			          explorerURL.getPath().replace("/ui", "") + "modeler.html?modelId=" + modelData.getId());
               ExplorerApp.get().getMainWindow().open(new ExternalResource(url));
             }
           }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/MessageParser.java
Patch:
@@ -46,7 +46,7 @@ protected String parseItemRef(String itemRef, BpmnModel model) {
         String resolvedNamespace = model.getNamespace(prefix);
         result = resolvedNamespace + ":" + itemRef.substring(indexOfP + 1);
       } else {
-        result = model.getTargetNamespace() + ":" + itemRef;
+        result = itemRef;
       }
     }
     return result;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/AdvancedCycleBusinessCalendar.java
Patch:
@@ -86,7 +86,7 @@ public void setDefaultScheduleVersion(Integer defaultScheduleVersion) {
   }
 
   @Override
-  public Date resolveDuedate(String duedateDescription) {
+  public Date resolveDuedate(String duedateDescription, int maxIterations) {
     logger.info("Resolving Due Date: " + duedateDescription);
 
     String timeZone = getValueFrom("DSTZONE", duedateDescription);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DurationBusinessCalendar.java
Patch:
@@ -29,15 +29,15 @@ public DurationBusinessCalendar(ClockReader clockReader) {
     super(clockReader);
   }
 
-  public Date resolveDuedate(String duedate) {
+  public Date resolveDuedate(String duedate, int maxIterations) {
     try {
       DurationHelper dh = new DurationHelper(duedate, clockReader);
       return dh.getDateAfter();
     } catch (Exception e) {
       throw new ActivitiException("couldn't resolve duedate: "+e.getMessage(), e);
     }
   }
-    
+
 // Code below just left in for a while just in case it would be needed again.
 //  
 //  private static Map<String, Integer> units = new HashMap<String, Integer>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -55,6 +55,9 @@ public TimerDeclarationImpl(Expression expression, TimerDeclarationType type, St
     this.type= type;
   }
 
+  public Expression getDescription() {
+    return description;
+  }
   public String getJobHandlerType() {
     return jobHandlerType;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -117,15 +117,15 @@ public void delete() {
 
     // Also delete the job's exception byte array
     exceptionByteArrayRef.delete();
-    
+
     // remove link to execution
     if (executionId != null) {
       ExecutionEntity execution = Context.getCommandContext()
         .getExecutionEntityManager()
         .findExecutionById(executionId);
       execution.removeJob(this);
     }
-    
+
     if(Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
     	Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
     			ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED, this));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntityManager.java
Patch:
@@ -113,7 +113,7 @@ protected void hintJobExecutor(JobEntity job) {
       .getTransactionContext()
       .addTransactionListener(TransactionState.COMMITTED, transactionListener);
   }
- 
+
   public void cancelTimers(ExecutionEntity execution) {
     List<TimerEntity> timers = Context
       .getCommandContext()
@@ -194,7 +194,7 @@ public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page) {
   public List<Job> findJobsByConfiguration(String jobHandlerType, String jobHandlerConfiguration) {
     Map<String, String> params = new HashMap<String, String>();
     params.put("handlerType", jobHandlerType);
-    params.put("handlerConfiguration", jobHandlerConfiguration);
+    params.put("handlerConfiguration", String.format("%%s%%",jobHandlerConfiguration));
     return getDbSqlSession().selectList("selectJobsByConfiguration", params);
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/standalone/calendar/DurationHelperTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldNotExceedNumberNegative() throws Exception {
 
     testingClock.setCurrentTime(parse("19700101-00:00:35"));
 
-    assertEquals(parse("19700101-00:00:40"), dh.getDateAfter());
+    assertEquals(parse("19700101-00:00:35"), dh.getDateAfter());
   }
 
   @Test

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {
 
-  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);
+  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementMBeanAssembler.class);
   
   protected final MBeanInfoAssembler assembler;
 

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/MBeanInfoAssembler.java
Patch:
@@ -45,7 +45,7 @@
 
 public class MBeanInfoAssembler {
 
-  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);
+  private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);
 
   protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);
 

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/mbeans/JobExecutorMBean.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Saeid Mirzaei
  */
-@ManagedResource(description = "Process definition MBean")
+@ManagedResource(description = "Job executor MBean")
 public class JobExecutorMBean {
 
   JobExecutor jobExecutor;
@@ -34,7 +34,7 @@ public JobExecutorMBean(ProcessEngineConfiguration processEngineConfig) {
 
   @ManagedAttribute(description = "check if the job executor is activated")
   public boolean isJobExecutorActivated() {
-    return jobExecutor == null || jobExecutor.isActive();
+    return jobExecutor != null && jobExecutor.isActive();
   }
 
   @ManagedOperation(description = "set job executor activate")

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/mbeans/JobExecutorMBean.java
Patch:
@@ -34,7 +34,7 @@ public JobExecutorMBean(ProcessEngineConfiguration processEngineConfig) {
 
   @ManagedAttribute(description = "check if the job executor is activated")
   public boolean isJobExecutorActivated() {
-    return jobExecutor == null || jobExecutor.isActive();
+    return jobExecutor != null && jobExecutor.isActive();
   }
 
   @ManagedOperation(description = "set job executor activate")

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {
 
-  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);
+  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementMBeanAssembler.class);
   
   protected final MBeanInfoAssembler assembler;
 

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/MBeanInfoAssembler.java
Patch:
@@ -45,7 +45,7 @@
 
 public class MBeanInfoAssembler {
 
-  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);
+  private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);
 
   protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);
 

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/mbeans/JobExecutorMBean.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Saeid Mirzaei
  */
-@ManagedResource(description = "Process definition MBean")
+@ManagedResource(description = "Job executor MBean")
 public class JobExecutorMBean {
 
   JobExecutor jobExecutor;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/MessageParser.java
Patch:
@@ -27,7 +27,7 @@ public class MessageParser implements BpmnXMLConstants {
   
   public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
     if (StringUtils.isNotEmpty(xtr.getAttributeValue(null, ATTRIBUTE_ID))) {
-      String messageId = model.getTargetNamespace() + ":" + xtr.getAttributeValue(null, ATTRIBUTE_ID);
+      String messageId   = xtr.getAttributeValue(null, ATTRIBUTE_ID);
       String messageName = xtr.getAttributeValue(null, ATTRIBUTE_NAME);
       String itemRef = parseItemRef(xtr.getAttributeValue(null, ATTRIBUTE_ITEM_REF), model);
       Message message = new Message(messageId, messageName, itemRef);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/TimerEventDefinitionParseHandler.java
Patch:
@@ -130,6 +130,8 @@ protected TimerDeclarationImpl createTimer(BpmnParse bpmnParse, TimerEventDefini
 
     if (jobHandlerType.equalsIgnoreCase(TimerExecuteNestedActivityJobHandler.TYPE)){
       jobHandlerConfiguration = TimerExecuteNestedActivityJobHandler.createConfiguration(timerActivity.getId(), endDate);
+    } else if (jobHandlerType.equalsIgnoreCase(TimerCatchIntermediateEventJobHandler.TYPE)){
+      jobHandlerConfiguration = TimerCatchIntermediateEventJobHandler.createConfiguration(timerActivity.getId(), endDate);
     }
 
     // Parse the timer declaration

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntityManager.java
Patch:
@@ -80,11 +80,11 @@ public void schedule(TimerEntity timer) {
     }
 
     timer.insert();
-    
+
     ProcessEngineConfiguration engineConfiguration = Context.getProcessEngineConfiguration();
     if (engineConfiguration.isAsyncExecutorEnabled() == false && 
         timer.getDuedate().getTime() <= (engineConfiguration.getClock().getCurrentTime().getTime())) {
-      
+
       hintJobExecutor(timer);
     }
   }

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ImportUploadReceiver.java
Patch:
@@ -88,12 +88,11 @@ protected void deployUploadedFile() {
       try {
         if (fileName.endsWith(".bpmn20.xml") || fileName.endsWith(".bpmn")) {
           validFile = true;
-          BpmnXMLConverter xmlConverter = new BpmnXMLConverter();
+            
           XMLInputFactory xif = XmlUtil.createSafeXmlInputFactory();
           InputStreamReader in = new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()), "UTF-8");
           XMLStreamReader xtr = xif.createXMLStreamReader(in);
           BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);
-          xmlConverter.convertToBpmnModel(xtr);
           
           if (bpmnModel.getMainProcess() == null || bpmnModel.getMainProcess().getId() == null) {
             notificationManager.showErrorNotification(Messages.MODEL_IMPORT_FAILED, 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BoundaryEventJsonConverter.java
Patch:
@@ -80,6 +80,8 @@ protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseE
         dockersArrayNode.add(dockNode);
         flowElementNode.put("dockers", dockersArrayNode);
 
+        propertiesNode.put(PROPERTY_CANCEL_ACTIVITY, boundaryEvent.isCancelActivity());
+        
         addEventProperties(boundaryEvent, propertiesNode);
     }
 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/util/JsonConverterUtil.java
Patch:
@@ -39,9 +39,9 @@ public static boolean getPropertyValueAsBoolean(String name, JsonNode objectNode
     boolean result = defaultValue;
     String stringValue = getPropertyValueAsString(name, objectNode);
     
-    if (PROPERTY_VALUE_YES.equalsIgnoreCase(stringValue)) {
+    if (PROPERTY_VALUE_YES.equalsIgnoreCase(stringValue) || "true".equalsIgnoreCase(stringValue)) {
       result = true;
-    } else if (PROPERTY_VALUE_NO.equalsIgnoreCase(stringValue)) {
+    } else if (PROPERTY_VALUE_NO.equalsIgnoreCase(stringValue) || "false".equalsIgnoreCase(stringValue)) {
       result = false;
     }
     

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/model/ModelSaveRestResource.java
Patch:
@@ -26,11 +26,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
 import org.springframework.util.MultiValueMap;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -51,6 +53,7 @@ public class ModelSaveRestResource implements ModelDataJsonConstants {
   private ObjectMapper objectMapper;
   
   @RequestMapping(value="/model/{modelId}/save", method = RequestMethod.PUT)
+  @ResponseStatus(value = HttpStatus.OK)
   public void saveModel(@PathVariable String modelId, @RequestBody MultiValueMap<String, String> values) {
     try {
       

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskResource.java
Patch:
@@ -30,6 +30,7 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 
 /**
@@ -65,6 +66,7 @@ public TaskResponse updateTask(@PathVariable String taskId,
   }
   
   @RequestMapping(value="/runtime/tasks/{taskId}", method = RequestMethod.POST)
+  @ResponseStatus(value = HttpStatus.OK)
   public void executeTaskAction(@PathVariable String taskId, @RequestBody TaskActionRequest actionRequest) {
     if (actionRequest == null) {
       throw new ActivitiException("A request body was expected when executing a task action.");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -30,6 +30,7 @@
  * @author Tijs Rademakers
  * @author Falko Menge
  * @author Bernd Ruecker
+ * @author Joram Barrez
  */
 public class HistoricProcessInstanceQueryImpl extends AbstractVariableQueryImpl<HistoricProcessInstanceQuery, HistoricProcessInstance> implements HistoricProcessInstanceQuery {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -650,9 +650,9 @@ protected void deleteVariableInstanceForExplicitUserCall(VariableInstanceEntity
     variableInstance.delete();
     variableInstance.setValue(null);
 
-    // Record historic variable
+    // Record historic variable deletion
     Context.getCommandContext().getHistoryManager()
-      .recordVariableUpdate(variableInstance);
+    	.recordVariableRemoved(variableInstance);
 
     // Record historic detail
     Context.getCommandContext().getHistoryManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -106,6 +106,7 @@ public ProcessInstance execute(CommandContext commandContext) {
     // now set processInstance name
     if (processInstanceName != null) {
       processInstance.setName(processInstanceName);
+      commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstance.getId(), processInstanceName);
     }
     
     processInstance.start();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -137,7 +137,7 @@ public void execute(ActivityExecution execution) throws Exception {
     if (SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression) &&
         SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)) {
       
-      leave(execution);
+      task.complete(null, false);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -137,7 +137,7 @@ public void execute(ActivityExecution execution) throws Exception {
     if (SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression) &&
         SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression)) {
       
-      leave(execution);
+      task.complete(null, false);
     }
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/DummyServiceTask.java
Patch:
@@ -25,7 +25,6 @@ public class DummyServiceTask implements JavaDelegate {
   public void execute(DelegateExecution execution) throws Exception {
     Integer count = (Integer) execution.getVariable("count");
     count = count+1;
-    System.out.println("Count = " + count);
     execution.setVariable("count", count);
   }
 

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -83,7 +83,7 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-converter").version("5.17.0"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-process-validation").version("5.17.0"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-image-generator").version("5.17.0"),
-        mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.17.0T"),
+        mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.17.0"),
         mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.3.2"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.2.3"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.2.3"),

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -83,7 +83,7 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-converter").version("5.17.0"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-process-validation").version("5.17.0"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-image-generator").version("5.17.0"),
-        mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.17.0T"),
+        mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.17.0"),
         mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.3.2"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.2.3"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.2.3"),

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/AsyncExecutorTest.java
Patch:
@@ -65,6 +65,7 @@ public void testRegularAsyncExecution() {
 			Assert.assertEquals(1, processEngine.getTaskService().createTaskQuery().taskName("The Task").count());
 			Assert.assertEquals(0, processEngine.getTaskService().createTaskQuery().taskName("Task after timer").count());
 			Assert.assertEquals(1, processEngine.getManagementService().createJobQuery().count());
+			Assert.assertEquals(0, getAsyncExecutorJobCount(processEngine));
 	
 			// Move clock 3 minutes and 1 second. Triggers the timer
 			addSecondsToCurrentTime(processEngine, 181); 
@@ -273,7 +274,7 @@ private ProcessEngine createProcessEngine(boolean enableAsyncExecutor, Date time
 			processEngineConfiguration.setAsyncExecutorActivate(true);
 			
 			CountingAsyncExecutor countingAsyncExecutor = new CountingAsyncExecutor();
-			countingAsyncExecutor.setDefaultAsyncJobAcquireWaitTimeInMillis(1);
+			countingAsyncExecutor.setDefaultAsyncJobAcquireWaitTimeInMillis(1); // To avoid waiting too long when a retry happens
 			processEngineConfiguration.setAsyncExecutor(countingAsyncExecutor);
 		}
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -40,6 +40,7 @@ public String getType() {
   }
   
   public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {
+    
     ActivityImpl borderEventActivity = execution.getProcessDefinition().findActivity(configuration);
 
     if (borderEventActivity == null) {

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/NewModelPopupWindow.java
Patch:
@@ -161,7 +161,7 @@ public void buttonClick(ClickEvent event) {
             ExplorerApp.get().getViewManager().showEditorProcessDefinitionPage(modelData.getId());
 	          URL explorerURL = ExplorerApp.get().getURL();
 	          URL url = new URL(explorerURL.getProtocol(), explorerURL.getHost(), explorerURL.getPort(),
-					          explorerURL.getPath().replace("/ui", "") + "service/editor?id=" + modelData.getId());
+					          explorerURL.getPath().replace("/ui", "") + "modeler.html?modelId=" + modelData.getId());
             ExplorerApp.get().getMainWindow().open(new ExternalResource(url));
             
           } catch(Exception e) {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/listener/EditModelClickListener.java
Patch:
@@ -133,7 +133,7 @@ public void editorSelectionChanged() {
   protected void showModeler() throws MalformedURLException {
 	  URL explorerURL = ExplorerApp.get().getURL();
 	  URL url = new URL(explorerURL.getProtocol(), explorerURL.getHost(), explorerURL.getPort(),
-			  explorerURL.getPath().replace("/ui", "") + "service/editor?id=" + model.getId());
+			  explorerURL.getPath().replace("/ui",  "") + "modeler.html?modelId=" + model.getId());
     ExplorerApp.get().getMainWindow().open(new ExternalResource(url));
   }
   

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BusinessRuleTaskJsonConverter.java
Patch:
@@ -41,12 +41,12 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(BusinessRuleTask.class, BusinessRuleTaskJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_TASK_BUSINESS_RULE;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
-    BusinessRuleTask ruleTask = (BusinessRuleTask) flowElement;
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
+    BusinessRuleTask ruleTask = (BusinessRuleTask) baseElement;
   	propertiesNode.put(PROPERTY_RULETASK_CLASS, ruleTask.getClassName());
   	propertiesNode.put(PROPERTY_RULETASK_VARIABLES_INPUT, convertListToCommaSeparatedString(ruleTask.getInputVariables()));
   	propertiesNode.put(PROPERTY_RULETASK_RESULT, ruleTask.getResultVariableName());

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/EventGatewayJsonConverter.java
Patch:
@@ -41,11 +41,11 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(EventGateway.class, EventGatewayJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_GATEWAY_EVENT;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
   }
   
   protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ExclusiveGatewayJsonConverter.java
Patch:
@@ -41,11 +41,11 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(ExclusiveGateway.class, ExclusiveGatewayJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_GATEWAY_EXCLUSIVE;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
   }
   
   protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/InclusiveGatewayJsonConverter.java
Patch:
@@ -41,11 +41,11 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(InclusiveGateway.class, InclusiveGatewayJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_GATEWAY_INCLUSIVE;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
   }
   
   protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ManualTaskJsonConverter.java
Patch:
@@ -41,11 +41,11 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(ManualTask.class, ManualTaskJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_TASK_MANUAL;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
   	
   }
   

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ParallelGatewayJsonConverter.java
Patch:
@@ -41,11 +41,11 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(ParallelGateway.class, ParallelGatewayJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_GATEWAY_PARALLEL;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
   }
   
   protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ReceiveTaskJsonConverter.java
Patch:
@@ -41,11 +41,11 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(ReceiveTask.class, ReceiveTaskJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_TASK_RECEIVE;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
   	
   }
   

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ScriptTaskJsonConverter.java
Patch:
@@ -41,12 +41,12 @@ public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? exten
     convertersToJsonMap.put(ScriptTask.class, ScriptTaskJsonConverter.class);
   }
   
-  protected String getStencilId(FlowElement flowElement) {
+  protected String getStencilId(BaseElement baseElement) {
     return STENCIL_TASK_SCRIPT;
   }
   
-  protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowElement) {
-  	ScriptTask scriptTask = (ScriptTask) flowElement;
+  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {
+  	ScriptTask scriptTask = (ScriptTask) baseElement;
   	propertiesNode.put(PROPERTY_SCRIPT_FORMAT, scriptTask.getScriptFormat());
   	propertiesNode.put(PROPERTY_SCRIPT_TEXT, scriptTask.getScript());
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/AbstractConverterTest.java
Patch:
@@ -27,7 +27,6 @@ protected BpmnModel readJsonFile() throws Exception {
   
   protected BpmnModel convertToJsonAndBack(BpmnModel bpmnModel) {
     ObjectNode modelNode = new BpmnJsonConverter().convertToJson(bpmnModel);
-    System.out.println("JSON: " + modelNode.toString());
     bpmnModel = new BpmnJsonConverter().convertToBpmnModel(modelNode);
     return bpmnModel;
   }

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/FlowNodeInSubProcessConverterTest.java
Patch:
@@ -19,7 +19,6 @@ public void doubleConversionValidation() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     validateModel(bpmnModel);
     bpmnModel = convertToJsonAndBack(bpmnModel);
-    //System.out.println("xml " + new String(new BpmnXMLConverter().convertToXML(bpmnModel), "utf-8"));
     validateModel(bpmnModel);
   }
   

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/PoolConverterTest.java
Patch:
@@ -49,7 +49,7 @@ private void validateModel(BpmnModel model) {
     Lane lane = process.getLanes().get(0);
     assertEquals("idLane1", lane.getId());
     assertEquals("Lane 1", lane.getName());
-    assertEquals(4, lane.getFlowReferences().size());
+    assertEquals(7, lane.getFlowReferences().size());
     assertTrue(lane.getFlowReferences().contains("startevent"));
     assertTrue(lane.getFlowReferences().contains("usertask1"));
     assertTrue(lane.getFlowReferences().contains("usertask6"));
@@ -58,14 +58,14 @@ private void validateModel(BpmnModel model) {
     lane = process.getLanes().get(1);
     assertEquals("idLane2", lane.getId());
     assertEquals("Lane 2", lane.getName());
-    assertEquals(2, lane.getFlowReferences().size());
+    assertEquals(4, lane.getFlowReferences().size());
     assertTrue(lane.getFlowReferences().contains("usertask2"));
     assertTrue(lane.getFlowReferences().contains("usertask5"));
     
     lane = process.getLanes().get(2);
     assertEquals("idLane3", lane.getId());
     assertEquals("Lane 3", lane.getName());
-    assertEquals(2, lane.getFlowReferences().size());
+    assertEquals(4, lane.getFlowReferences().size());
     assertTrue(lane.getFlowReferences().contains("usertask3"));
     assertTrue(lane.getFlowReferences().contains("usertask4"));
     

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/StartEventConverterTest.java
Patch:
@@ -5,7 +5,6 @@
 
 import java.util.List;
 
-import org.activiti.bpmn.converter.BpmnXMLConverter;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.FormProperty;
@@ -25,7 +24,6 @@ public void connvertJsonToModel() throws Exception {
   public void doubleConversionValidation() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     bpmnModel = convertToJsonAndBack(bpmnModel);
-    System.out.println("xml " + new String(new BpmnXMLConverter().convertToXML(bpmnModel), "utf-8"));
     validateModel(bpmnModel);
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -40,6 +40,7 @@ public String getType() {
   }
   
   public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {
+    
     ActivityImpl borderEventActivity = execution.getProcessDefinition().findActivity(configuration);
 
     if (borderEventActivity == null) {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/BaseSpringRestTestCase.java
Patch:
@@ -81,8 +81,8 @@ public class BaseSpringRestTestCase extends PvmTestCase {
 
   private static Logger log = LoggerFactory.getLogger(BaseSpringRestTestCase.class);
   
-  protected static final int HTTP_SERVER_PORT = 9898;
-  protected static final String SERVER_URL_PREFIX = "http://localhost:9898/service/";
+  protected static final int HTTP_SERVER_PORT = 9797;
+  protected static final String SERVER_URL_PREFIX = "http://localhost:9797/service/";
   protected static final RestUrlBuilder URL_BUILDER = RestUrlBuilder.usingBaseUrl(SERVER_URL_PREFIX);
   protected static final List<String> TABLENAMES_EXCLUDED_FROM_DB_CLEAN_CHECK = Arrays.asList(
     "ACT_GE_PROPERTY"

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/DatabaseEventLoggerTest.java
Patch:
@@ -102,7 +102,7 @@ public void testDatabaseEvents() throws IOException {
 			if (i == 1) {
 				
 				assertNotNull(entry.getType());
-				assertEquals(entry.getType(), "PROCESSINSTANCE_START");
+				assertEquals("PROCESSINSTANCE_START", entry.getType());
 				assertNotNull(entry.getProcessDefinitionId());
 				assertNotNull(entry.getProcessInstanceId());
 				assertNotNull(entry.getTimeStamp());
@@ -385,7 +385,7 @@ public void testDatabaseEvents() throws IOException {
 				
 			if (i == 14) {
 				assertNotNull(entry.getType());
-				assertEquals(entry.getType(), "PROCESSINSTANCE_END");
+				assertEquals("PROCESSINSTANCE_END", entry.getType());
 				assertNotNull(entry.getProcessDefinitionId());
 				assertNotNull(entry.getProcessInstanceId());
 				assertNotNull(entry.getTimeStamp());
@@ -449,7 +449,7 @@ public void testDatabaseEventsNoTenant() throws IOException {
 			
 			// process instance start
 			if (i == 1) {
-				assertEquals(entry.getType(), "PROCESSINSTANCE_START");
+				assertEquals("PROCESSINSTANCE_START", entry.getType());
 				Map<String, Object> data = objectMapper.readValue(entry.getData(), new TypeReference<HashMap<String, Object>>(){});
 				assertNull(data.get(Fields.TENANT_ID));
 			}

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -276,7 +276,7 @@ public void testJobQueryWithExceptions() throws Throwable {
     assertNotNull(job);
     
     List<Job> list = managementService.createJobQuery().withException().list();
-    assertEquals(list.size(), 1);
+    assertEquals(1, list.size());
     
     deleteJobInDatabase();
     
@@ -287,7 +287,7 @@ public void testJobQueryWithExceptions() throws Throwable {
     assertNotNull(job);
     
     list = managementService.createJobQuery().withException().list();
-    assertEquals(list.size(), 1);
+    assertEquals(1, list.size());
     
     deleteJobInDatabase();
     

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/TaskDueDateExtensionsTest.java
Patch:
@@ -75,8 +75,8 @@ public void testRelativeDueDateStringExtension() throws Exception {
     
     assertNotNull(task.getDueDate());
     Period period = new Period(task.getCreateTime().getTime(), task.getDueDate().getTime());
-    assertEquals(period.getDays(), 2);
-    assertEquals(period.getHours(), 5);
-    assertEquals(period.getMinutes(), 40);
+    assertEquals(2, period.getDays());
+    assertEquals(5, period.getHours());
+    assertEquals(40, period.getMinutes());
   }
 }

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/management/JobResourceTest.java
Patch:
@@ -51,7 +51,7 @@ public void testGetJob() throws Exception {
     assertEquals(timerJob.getProcessInstanceId(), responseNode.get("processInstanceId").textValue());
     assertEquals(timerJob.getRetries(), responseNode.get("retries").intValue());
     assertEquals(timerJob.getDuedate(), getDateFromISOString(responseNode.get("dueDate").textValue()));
-    assertEquals(responseNode.get("tenantId").textValue(), "");
+    assertEquals("", responseNode.get("tenantId").textValue());
     
     // Set tenant on deployment
     managementService.executeCommand(new ChangeDeploymentTenantIdCmd(deploymentId, "myTenant"));

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceCollectionResourceTest.java
Patch:
@@ -85,7 +85,7 @@ public void testGetProcessInstancesByBusinessKeyAndIncludeVariables() throws Exc
     assertEquals(1, variableNodes.size());
     
     variableNodes = dataNode.get("variables");
-    assertEquals(variableNodes.size(), 1);
+    assertEquals(1, variableNodes.size());
     assertNotNull(variableNodes.get(0).get("name"));
     assertNotNull(variableNodes.get(0).get("value"));
    

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/ProcessEngineAutoConfigurationTest.java
Patch:
@@ -48,7 +48,7 @@ public void launchProcessDefinition() throws Exception {
         Assert.assertNotNull(processDefinitionList);
         Assert.assertTrue(!processDefinitionList.isEmpty());
         ProcessDefinition processDefinition = processDefinitionList.iterator().next();
-        Assert.assertEquals(processDefinition.getKey(), "waiter");
+        Assert.assertEquals("waiter", processDefinition.getKey());
     }
 
     private AnnotationConfigApplicationContext context(Class<?>... clzz) {

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/SecurityAutoConfigurationTest.java
Patch:
@@ -36,8 +36,8 @@ public void userDetailsService() throws Throwable {
         this.applicationContext.refresh();
         UserDetailsService userDetailsService = this.applicationContext.getBean(UserDetailsService.class);
         Assert.assertNotNull("the userDetailsService should not be null", userDetailsService);
-        assertEquals("there should only be 1 authority", userDetailsService.loadUserByUsername("jlong").getAuthorities().size(), 1);
-        assertEquals("there should be 2 authorities", userDetailsService.loadUserByUsername("jbarrez").getAuthorities().size(), 2);
+        assertEquals("there should only be 1 authority", 1, userDetailsService.loadUserByUsername("jlong").getAuthorities().size());
+        assertEquals("there should be 2 authorities", 2, userDetailsService.loadUserByUsername("jbarrez").getAuthorities().size());
     }
 
     @Configuration

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/scope/ProcessScopeTestEngine.java
Patch:
@@ -43,20 +43,20 @@ private StatefulObject run() {
         StatefulObject scopedObject = (StatefulObject) runtimeService.getVariable(processInstance.getId(), statefulObjectVariableKey);
         assertNotNull(scopedObject);
         assertTrue(StringUtils.hasText(scopedObject.getName()));
-        assertEquals(scopedObject.getVisitedCount(), 2);
+        assertEquals(2, scopedObject.getVisitedCount());
 
         // the process has paused
         String procId = processInstance.getProcessInstanceId();
 
         List<Task> tasks = taskService.createTaskQuery().executionId(procId).list();
-        assertEquals(tasks.size(), 1);
+        assertEquals(1, tasks.size());
 
         Task t = tasks.iterator().next();
         this.taskService.claim(t.getId(), "me");
         this.taskService.complete(t.getId());
 
         scopedObject = (StatefulObject) runtimeService.getVariable(processInstance.getId(), statefulObjectVariableKey);
-        assertEquals(scopedObject.getVisitedCount(), 3);
+        assertEquals(3, scopedObject.getVisitedCount());
 
         assertEquals(customerId, scopedObject.getCustomerId());
         return scopedObject;

File: modules/activiti-camel/src/test/java/org/activiti/camel/exception/CamelExceptionTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ManagementService;
 import org.activiti.engine.RuntimeService;
+import org.activiti.engine.impl.test.JobTestHelper;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.test.Deployment;
 import org.activiti.spring.impl.test.SpringActivitiTestCase;
@@ -126,7 +127,7 @@ public void testHappyPathAsynchronous() {
     
     managementService.executeJob(job.getId());
     
-    assertFalse(areJobsAvailable());
+    assertFalse(JobTestHelper.areJobsAvailable(managementService));
     assertFalse(ExceptionServiceMock.isCalled());
     assertTrue(NoExceptionServiceMock.isCalled());
   }
@@ -138,7 +139,7 @@ public void testNonBpmnPathAsynchronous() {
     // Signal ThrowBpmnExceptionBean to throw non bpmn exception
     ThrowBpmnExceptionBean.setExceptionType(ThrowBpmnExceptionBean.ExceptionType.NON_BPMN_EXCEPTION);    
     runtimeService.startProcessInstanceByKey("exceptionInRouteSynchron");
-    assertTrue(areJobsAvailable());
+    assertTrue(JobTestHelper.areJobsAvailable(managementService));
     
     Job job = managementService.createJobQuery().singleResult();
 

File: modules/activiti-camel/src/test/java/org/activiti/camel/util/Routing.java
Patch:
@@ -21,6 +21,6 @@ public enum Routing {
 	/**
 	 * Camel route should throw an exception and handle it.
 	 */
-	HANDLE_ERROR;
-	
+	HANDLE_ERROR
+
 }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/el/ElTest.java
Patch:
@@ -16,7 +16,6 @@
 
 import org.activiti.cdi.test.CdiActivitiTestCase;
 import org.activiti.cdi.test.impl.beans.MessageBean;
-import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
 import org.junit.Test;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/form/AbstractFormType.java
Patch:
@@ -22,6 +22,8 @@
  * @author Joram Barrez
  */
 public abstract class AbstractFormType implements FormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public abstract Object convertFormValueToModelValue(String propertyValue);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/data/SimpleDataInputAssociation.java
Patch:
@@ -24,6 +24,8 @@
  * @author Esteban Robles Luna
  */
 public class SimpleDataInputAssociation extends AbstractDataAssociation {
+	
+  private static final long serialVersionUID = 1L;
 
   protected List<Assignment> assignments = new ArrayList<Assignment>();
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/data/TransformationDataOutputAssociation.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class TransformationDataOutputAssociation extends AbstractDataAssociation {
 
+  private static final long serialVersionUID = 1L;
+  
   protected Expression transformation;
   
   public TransformationDataOutputAssociation(String sourceRef, String targetRef, Expression transformation) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/webservice/MessageImplicitDataInputAssociation.java
Patch:
@@ -26,6 +26,8 @@
  */
 public class MessageImplicitDataInputAssociation extends AbstractDataAssociation {
 
+  private static final long serialVersionUID = 1L;
+
   public MessageImplicitDataInputAssociation(String source, String target) {
     super(source, target);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/webservice/MessageImplicitDataOutputAssociation.java
Patch:
@@ -25,6 +25,8 @@
  * @author Esteban Robles Luna
  */
 public class MessageImplicitDataOutputAssociation extends AbstractDataAssociation {
+	
+  private static final long serialVersionUID = 1L;
 
   public MessageImplicitDataOutputAssociation(String targetRef, Expression sourceExpression) {
     super(sourceExpression, targetRef);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/BooleanFormType.java
Patch:
@@ -20,7 +20,9 @@
  * @author Frederik Heremans
  */
 public class BooleanFormType extends AbstractFormType {
-
+	
+  private static final long serialVersionUID = 1L;
+  
   public String getName() {
     return "boolean";
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DateFormType.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class DateFormType extends AbstractFormType {
   
+  private static final long serialVersionUID = 1L;
+  
   protected String datePattern; 
   protected Format dateFormat; 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DoubleFormType.java
Patch:
@@ -21,6 +21,8 @@
  * @author Tom Baeyens
  */
 public class DoubleFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public String getName() {
     return "double";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/EnumFormType.java
Patch:
@@ -23,6 +23,8 @@
  * @author Tom Baeyens
  */
 public class EnumFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   protected Map<String, String> values;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/LongFormType.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class LongFormType extends AbstractFormType {
 
+  private static final long serialVersionUID = 1L;
+  
   public String getName() {
     return "long";
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/StringFormType.java
Patch:
@@ -21,6 +21,8 @@
  * @author Tom Baeyens
  */
 public class StringFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public String getName() {
     return "string";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/rules/RulesDeployer.java
Patch:
@@ -35,9 +35,11 @@
  */
 public class RulesDeployer implements Deployer {
   
-  private static Logger log = LoggerFactory.getLogger(RulesDeployer.class);
+  private static final Logger log = LoggerFactory.getLogger(RulesDeployer.class);
 
   public void deploy(DeploymentEntity deployment, Map<String, Object> deploymentSettings) {
+    log.debug("Processing deployment {}", deployment.getName());
+    
     KnowledgeBuilder knowledgeBuilder = null;
 
     DeploymentManager deploymentManager = Context

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/mock/MockResolverFactory.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.scripting.Resolver;
 import org.activiti.engine.impl.scripting.ResolverFactory;
-import org.activiti.engine.test.mock.Mocks;
 
 /**
  * This is a bridge resolver, making available any objects registered through

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/Messages.java
Patch:
@@ -77,7 +77,7 @@ public interface Messages {
   String PROFILE_LOCATION = "profile.location";
   String PROFILE_CONTACT = "profile.contact";
   String PROFILE_EMAIL = "profile.email";
-  String PROFILE_PHONE = "profile.phone";;
+  String PROFILE_PHONE = "profile.phone";
   String PROFILE_TWITTER = "profile.twitter";
   String PROFILE_SKYPE = "profile.skype";
   String PROFILE_ACCOUNTS = "profile.accounts";
@@ -438,7 +438,7 @@ public interface Messages {
   
   String RELATED_CONTENT_TYPE_URL = "related.content.type.url";
   String RELATED_CONTENT_TYPE_URL_URL = "related.content.type.url.url";
-  String RELATED_CONTENT_TYPE_URL_URL_REQUIRED = "related.content.type.url.url.required";;
+  String RELATED_CONTENT_TYPE_URL_URL_REQUIRED = "related.content.type.url.url.required";
   String RELATED_CONTENT_TYPE_URL_HELP = "related.content.type.url.help";
   
   String RELATED_CONTENT_TYPE_FILE = "related.content.type.file";

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/form/MonthFormType.java
Patch:
@@ -20,6 +20,8 @@
  * @author Joram Barrez
  */
 public class MonthFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public static final String TYPE_NAME = "month";
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/form/ProcessDefinitionFormType.java
Patch:
@@ -26,6 +26,8 @@
  */
 public class ProcessDefinitionFormType extends AbstractFormType {
 
+  private static final long serialVersionUID = 1L;
+  
   public static final String TYPE_NAME = "processDefinition";
   
   public String getName() {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/form/UserFormType.java
Patch:
@@ -25,6 +25,8 @@
  * @author 'Frederik Heremans'
  */
 public class UserFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public static final String TYPE_NAME = "user";
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/Images.java
Patch:
@@ -40,7 +40,7 @@ public class Images {
   public static final Resource MAIN_MENU_REPORTS = new ThemeResource("img/mm-reports.png");
   
   // Task
-  public static final Resource TASK_16 =  new ThemeResource("img/task-16.png");;
+  public static final Resource TASK_16 =  new ThemeResource("img/task-16.png");
   public static final Resource TASK_22 = new ThemeResource("img/task-22.png");
   public static final Resource TASK_50 = new ThemeResource("img/task-50.png");
   public static final Resource TASK_FINISHED_22 = new ThemeResource("img/task-finished-22.png");

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/UserTaskJsonConverter.java
Patch:
@@ -132,8 +132,8 @@ protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowE
     }
     setPropertyValue(PROPERTY_FORMKEY, userTask.getFormKey(), propertiesNode);
     setPropertyValue(PROPERTY_DUEDATE, userTask.getDueDate(), propertiesNode);
-    setPropertyValue(PROPERTY_CATEGORY, userTask.getCategory(), propertiesNode);;
-    
+    setPropertyValue(PROPERTY_CATEGORY, userTask.getCategory(), propertiesNode);
+
     addFormProperties(userTask.getFormProperties(), propertiesNode);
   }
   

File: modules/activiti-ldap/src/test/java/org/activiti/test/ldap/LdapGroupCacheTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.ldap.LDAPGroupCache;
 import org.activiti.ldap.LDAPGroupCache.LDAPGroupCacheListener;
 import org.activiti.ldap.LDAPGroupManagerFactory;
-import org.activiti.spring.impl.test.SpringActivitiTestCase;
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration("classpath:activiti-context-ldap-group-cache.xml")

File: modules/activiti-rest/src/main/java/org/activiti/rest/form/MonthFormType.java
Patch:
@@ -21,6 +21,8 @@
  */
 public class MonthFormType extends AbstractFormType {
 
+  private static final long serialVersionUID = 1L;
+  
   public static final String TYPE_NAME = "month";
   
   public String getName() {

File: modules/activiti-rest/src/main/java/org/activiti/rest/form/ProcessDefinitionFormType.java
Patch:
@@ -25,6 +25,8 @@
  * @author Joram Barrez
  */
 public class ProcessDefinitionFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public static final String TYPE_NAME = "processDefinition";
   

File: modules/activiti-rest/src/main/java/org/activiti/rest/form/UserFormType.java
Patch:
@@ -25,6 +25,8 @@
  * @author 'Frederik Heremans'
  */
 public class UserFormType extends AbstractFormType {
+	
+  private static final long serialVersionUID = 1L;
 
   public static final String TYPE_NAME = "user";
   

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/engine/variable/RestVariable.java
Patch:
@@ -30,7 +30,7 @@ public class RestVariable {
   
   public enum RestVariableScope {
     LOCAL, GLOBAL
-  };
+  }
 
   private String name;
   private String type;

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/jpa/JpaRestTest.java
Patch:
@@ -1,4 +1,5 @@
 package org.activiti.rest.api.jpa;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -10,7 +11,6 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
-import org.junit.Test;
 
 import com.fasterxml.jackson.databind.JsonNode;
 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResourceTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.junit.Assert;
-import org.junit.Test;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricProcessInstanceCommentResourceTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/identity/UserResourceTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.identity.User;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/management/JobExceptionStacktraceResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.activiti.rest.service.api.management;
 
-import java.io.InputStream;
 import java.util.Calendar;
 import java.util.Collections;
 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/repository/DeploymentResourceResourceTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.activiti.rest.service.api.RestUrls;
 import org.apache.commons.io.IOUtils;
 import org.apache.http.HttpHeaders;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ExecutionResourceTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskIdentityLinkResourceTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskVariablesCollectionResourceTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.HttpMultipartHelper;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: modules/activiti-spring-boot/spring-boot-samples/spring-boot-sample-actuator/src/main/java/activiti/Application.java
Patch:
@@ -1,18 +1,17 @@
 package activiti;
 
 
+import java.util.Collections;
+
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.TaskService;
-import org.activiti.engine.task.Task;
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 
-import java.util.Collections;
-
 /**
  * Demonstrates the actuator
  */

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/main/java/org/activiti/spring/boot/EndpointAutoConfiguration.java
Patch:
@@ -7,7 +7,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.integration.endpoint.AbstractEndpoint;
 
 /**
  * The idea behind this module is that Spring Security could

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/servicetask/ServiceTaskSpringDelegationTest.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.spring.test.servicetask;
 
+import org.activiti.engine.impl.test.JobTestHelper;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
 import org.activiti.spring.impl.test.SpringActivitiTestCase;
@@ -34,7 +35,7 @@ public void testDelegateExpression() {
     @Deployment
     public void testAsyncDelegateExpression() throws Exception {
         ProcessInstance procInst = runtimeService.startProcessInstanceByKey("delegateExpressionToSpringBean");
-        assertTrue(areJobsAvailable());
+        assertTrue(JobTestHelper.areJobsAvailable(managementService));
         waitForJobExecutorToProcessAllJobs(5000, 500);
         Thread.sleep(1000);
         assertEquals("Activiti BPMN 2.0 process engine", runtimeService.getVariable(procInst.getId(), "myVar"));
@@ -50,7 +51,7 @@ public void testMethodExpressionOnSpringBean() {
     @Deployment
     public void testAsyncMethodExpressionOnSpringBean() {
         ProcessInstance procInst = runtimeService.startProcessInstanceByKey("methodExpressionOnSpringBean");
-        assertTrue(areJobsAvailable());
+        assertTrue(JobTestHelper.areJobsAvailable(managementService));
         waitForJobExecutorToProcessAllJobs(5000, 500);
         assertEquals("ACTIVITI BPMN 2.0 PROCESS ENGINE", runtimeService.getVariable(procInst.getId(), "myVar"));
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetExecutionVariableCmd.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class GetExecutionVariableCmd implements Command<Object>, Serializable {
 
@@ -57,9 +58,9 @@ public Object execute(CommandContext commandContext) {
     Object value;
     
     if (isLocal) {
-      value = execution.getVariableLocal(variableName);
+      value = execution.getVariableLocal(variableName, false);
     } else {
-      value = execution.getVariable(variableName);
+      value = execution.getVariable(variableName, false);
     }
     
     return value;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskVariableCmd.java
Patch:
@@ -25,6 +25,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class GetTaskVariableCmd implements Command<Object>, Serializable {
 
@@ -58,9 +59,9 @@ public Object execute(CommandContext commandContext) {
     Object value;
     
     if (isLocal) {
-      value = task.getVariableLocal(variableName);
+      value = task.getVariableLocal(variableName, false);
     } else {
-      value = task.getVariable(variableName);
+      value = task.getVariable(variableName, false);
     }
     
     return value;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/DatabaseEventLoggerTest.java
Patch:
@@ -102,7 +102,7 @@ public void testDatabaseEvents() throws IOException {
 			if (i == 1) {
 				
 				assertNotNull(entry.getType());
-				assertEquals(entry.getType(), "PROCESSINSTANCE_START");
+				assertEquals("PROCESSINSTANCE_START", entry.getType());
 				assertNotNull(entry.getProcessDefinitionId());
 				assertNotNull(entry.getProcessInstanceId());
 				assertNotNull(entry.getTimeStamp());
@@ -385,7 +385,7 @@ public void testDatabaseEvents() throws IOException {
 				
 			if (i == 14) {
 				assertNotNull(entry.getType());
-				assertEquals(entry.getType(), "PROCESSINSTANCE_END");
+				assertEquals("PROCESSINSTANCE_END", entry.getType());
 				assertNotNull(entry.getProcessDefinitionId());
 				assertNotNull(entry.getProcessInstanceId());
 				assertNotNull(entry.getTimeStamp());
@@ -449,7 +449,7 @@ public void testDatabaseEventsNoTenant() throws IOException {
 			
 			// process instance start
 			if (i == 1) {
-				assertEquals(entry.getType(), "PROCESSINSTANCE_START");
+				assertEquals("PROCESSINSTANCE_START", entry.getType());
 				Map<String, Object> data = objectMapper.readValue(entry.getData(), new TypeReference<HashMap<String, Object>>(){});
 				assertNull(data.get(Fields.TENANT_ID));
 			}

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -276,7 +276,7 @@ public void testJobQueryWithExceptions() throws Throwable {
     assertNotNull(job);
     
     List<Job> list = managementService.createJobQuery().withException().list();
-    assertEquals(list.size(), 1);
+    assertEquals(1, list.size());
     
     deleteJobInDatabase();
     
@@ -287,7 +287,7 @@ public void testJobQueryWithExceptions() throws Throwable {
     assertNotNull(job);
     
     list = managementService.createJobQuery().withException().list();
-    assertEquals(list.size(), 1);
+    assertEquals(1, list.size());
     
     deleteJobInDatabase();
     

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/TaskDueDateExtensionsTest.java
Patch:
@@ -75,8 +75,8 @@ public void testRelativeDueDateStringExtension() throws Exception {
     
     assertNotNull(task.getDueDate());
     Period period = new Period(task.getCreateTime().getTime(), task.getDueDate().getTime());
-    assertEquals(period.getDays(), 2);
-    assertEquals(period.getHours(), 5);
-    assertEquals(period.getMinutes(), 40);
+    assertEquals(2, period.getDays());
+    assertEquals(5, period.getHours());
+    assertEquals(40, period.getMinutes());
   }
 }

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/management/JobResourceTest.java
Patch:
@@ -51,7 +51,7 @@ public void testGetJob() throws Exception {
     assertEquals(timerJob.getProcessInstanceId(), responseNode.get("processInstanceId").textValue());
     assertEquals(timerJob.getRetries(), responseNode.get("retries").intValue());
     assertEquals(timerJob.getDuedate(), getDateFromISOString(responseNode.get("dueDate").textValue()));
-    assertEquals(responseNode.get("tenantId").textValue(), "");
+    assertEquals("", responseNode.get("tenantId").textValue());
     
     // Set tenant on deployment
     managementService.executeCommand(new ChangeDeploymentTenantIdCmd(deploymentId, "myTenant"));

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceCollectionResourceTest.java
Patch:
@@ -85,7 +85,7 @@ public void testGetProcessInstancesByBusinessKeyAndIncludeVariables() throws Exc
     assertEquals(1, variableNodes.size());
     
     variableNodes = dataNode.get("variables");
-    assertEquals(variableNodes.size(), 1);
+    assertEquals(1, variableNodes.size());
     assertNotNull(variableNodes.get(0).get("name"));
     assertNotNull(variableNodes.get(0).get("value"));
    

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/ProcessEngineAutoConfigurationTest.java
Patch:
@@ -48,7 +48,7 @@ public void launchProcessDefinition() throws Exception {
         Assert.assertNotNull(processDefinitionList);
         Assert.assertTrue(!processDefinitionList.isEmpty());
         ProcessDefinition processDefinition = processDefinitionList.iterator().next();
-        Assert.assertEquals(processDefinition.getKey(), "waiter");
+        Assert.assertEquals("waiter", processDefinition.getKey());
     }
 
     private AnnotationConfigApplicationContext context(Class<?>... clzz) {

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/SecurityAutoConfigurationTest.java
Patch:
@@ -36,8 +36,8 @@ public void userDetailsService() throws Throwable {
         this.applicationContext.refresh();
         UserDetailsService userDetailsService = this.applicationContext.getBean(UserDetailsService.class);
         Assert.assertNotNull("the userDetailsService should not be null", userDetailsService);
-        assertEquals("there should only be 1 authority", userDetailsService.loadUserByUsername("jlong").getAuthorities().size(), 1);
-        assertEquals("there should be 2 authorities", userDetailsService.loadUserByUsername("jbarrez").getAuthorities().size(), 2);
+        assertEquals("there should only be 1 authority", 1, userDetailsService.loadUserByUsername("jlong").getAuthorities().size());
+        assertEquals("there should be 2 authorities", 2, userDetailsService.loadUserByUsername("jbarrez").getAuthorities().size());
     }
 
     @Configuration

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/scope/ProcessScopeTestEngine.java
Patch:
@@ -43,20 +43,20 @@ private StatefulObject run() {
         StatefulObject scopedObject = (StatefulObject) runtimeService.getVariable(processInstance.getId(), statefulObjectVariableKey);
         assertNotNull(scopedObject);
         assertTrue(StringUtils.hasText(scopedObject.getName()));
-        assertEquals(scopedObject.getVisitedCount(), 2);
+        assertEquals(2, scopedObject.getVisitedCount());
 
         // the process has paused
         String procId = processInstance.getProcessInstanceId();
 
         List<Task> tasks = taskService.createTaskQuery().executionId(procId).list();
-        assertEquals(tasks.size(), 1);
+        assertEquals(1, tasks.size());
 
         Task t = tasks.iterator().next();
         this.taskService.claim(t.getId(), "me");
         this.taskService.complete(t.getId());
 
         scopedObject = (StatefulObject) runtimeService.getVariable(processInstance.getId(), statefulObjectVariableKey);
-        assertEquals(scopedObject.getVisitedCount(), 3);
+        assertEquals(3, scopedObject.getVisitedCount());
 
         assertEquals(customerId, scopedObject.getCustomerId());
         return scopedObject;

File: modules/activiti-camel/src/test/java/org/activiti/camel/exception/CamelExceptionTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ManagementService;
 import org.activiti.engine.RuntimeService;
+import org.activiti.engine.impl.test.JobTestHelper;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.test.Deployment;
 import org.activiti.spring.impl.test.SpringActivitiTestCase;
@@ -126,7 +127,7 @@ public void testHappyPathAsynchronous() {
     
     managementService.executeJob(job.getId());
     
-    assertFalse(areJobsAvailable());
+    assertFalse(JobTestHelper.areJobsAvailable(managementService));
     assertFalse(ExceptionServiceMock.isCalled());
     assertTrue(NoExceptionServiceMock.isCalled());
   }
@@ -138,7 +139,7 @@ public void testNonBpmnPathAsynchronous() {
     // Signal ThrowBpmnExceptionBean to throw non bpmn exception
     ThrowBpmnExceptionBean.setExceptionType(ThrowBpmnExceptionBean.ExceptionType.NON_BPMN_EXCEPTION);    
     runtimeService.startProcessInstanceByKey("exceptionInRouteSynchron");
-    assertTrue(areJobsAvailable());
+    assertTrue(JobTestHelper.areJobsAvailable(managementService));
     
     Job job = managementService.createJobQuery().singleResult();
 

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/servicetask/ServiceTaskSpringDelegationTest.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.spring.test.servicetask;
 
+import org.activiti.engine.impl.test.JobTestHelper;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
 import org.activiti.spring.impl.test.SpringActivitiTestCase;
@@ -34,7 +35,7 @@ public void testDelegateExpression() {
     @Deployment
     public void testAsyncDelegateExpression() throws Exception {
         ProcessInstance procInst = runtimeService.startProcessInstanceByKey("delegateExpressionToSpringBean");
-        assertTrue(areJobsAvailable());
+        assertTrue(JobTestHelper.areJobsAvailable(managementService));
         waitForJobExecutorToProcessAllJobs(5000, 500);
         Thread.sleep(1000);
         assertEquals("Activiti BPMN 2.0 process engine", runtimeService.getVariable(procInst.getId(), "myVar"));
@@ -50,7 +51,7 @@ public void testMethodExpressionOnSpringBean() {
     @Deployment
     public void testAsyncMethodExpressionOnSpringBean() {
         ProcessInstance procInst = runtimeService.startProcessInstanceByKey("methodExpressionOnSpringBean");
-        assertTrue(areJobsAvailable());
+        assertTrue(JobTestHelper.areJobsAvailable(managementService));
         waitForJobExecutorToProcessAllJobs(5000, 500);
         assertEquals("ACTIVITI BPMN 2.0 PROCESS ENGINE", runtimeService.getVariable(procInst.getId(), "myVar"));
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/TaskAssignmentExtensionsTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.bpmn.exceptions.XMLException;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.impl.test.TestHelper;
 import org.activiti.engine.task.Task;
@@ -65,7 +65,7 @@ public void testDuplicateAssigneeDeclaration() {
       String resource = TestHelper.getBpmnProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
       repositoryService.createDeployment().addClasspathResource(resource).deploy();
       fail("Invalid BPMN 2.0 process should not parse, but it gets parsed sucessfully");
-    } catch (ActivitiException e) {
+    } catch (XMLException e) {
       // Exception is to be expected
     }
   }

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/BaseStepDefinitionConverter.java
Patch:
@@ -24,6 +24,7 @@
 import org.activiti.workflow.simple.converter.ConversionConstants;
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 import org.activiti.workflow.simple.definition.StepDefinition;
+import org.activiti.workflow.simple.definition.form.BooleanPropertyDefinition;
 import org.activiti.workflow.simple.definition.form.DatePropertyDefinition;
 import org.activiti.workflow.simple.definition.form.FormDefinition;
 import org.activiti.workflow.simple.definition.form.FormPropertyDefinition;
@@ -147,6 +148,8 @@ protected List<FormProperty> convertProperties(FormDefinition formDefinition) {
         type = "long";
       } else if (propertyDefinition instanceof DatePropertyDefinition) {
         type = "date";
+      } else if (propertyDefinition instanceof BooleanPropertyDefinition) {
+        type = "boolean";
       } else if (propertyDefinition instanceof ListPropertyDefinition) {
         
         type = "enum";

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BpmnXMLConverter.java
Patch:
@@ -274,15 +274,15 @@ public BpmnModel convertToBpmnModel(InputStreamProvider inputStreamProvider, boo
         }
   
       } catch (Exception e) {
-        throw new RuntimeException("Could not validate XML with BPMN 2.0 XSD", e);
+        throw new XMLException(e.getMessage(), e);
       }
   
       // XML conversion
       return convertToBpmnModel(xtr);
     } catch (UnsupportedEncodingException e) {
-      throw new RuntimeException("The bpmn 2.0 xml is not UTF8 encoded", e);
+      throw new XMLException("The bpmn 2.0 xml is not UTF8 encoded", e);
     } catch (XMLStreamException e) {
-      throw new RuntimeException("Error while reading the BPMN 2.0 XML", e);
+      throw new XMLException("Error while reading the BPMN 2.0 XML", e);
     } finally {
       if (in != null) {
         try {

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionDetailPanel.java
Patch:
@@ -269,8 +269,6 @@ public DownloadStream getStream() {
   
   protected void deployModel() {
     try {
-      
-      
       if (SimpleTableEditorConstants.TABLE_EDITOR_CATEGORY.equals(modelData.getCategory())) {
         deploySimpleTableEditorModel(repositoryService.getModelEditorSource(modelData.getId()));
       } else {
@@ -279,7 +277,7 @@ protected void deployModel() {
       }
 
     } catch (Exception e) {
-      e.printStackTrace();
+      LOGGER.error("Failed to deploy model", e);
       ExplorerApp.get().getNotificationManager().showErrorNotification(Messages.PROCESS_TOXML_FAILED, e);
     }
   }

File: modules/activiti-camel/src/test/java/org/activiti/camel/examples/ping/PingPongTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.camel.examples.pingpong;
+package org.activiti.camel.examples.ping;
 
 /**
  * @author Saeid Mirzaei  

File: modules/activiti-camel/src/test/java/org/activiti/camel/examples/ping/SaveOutput.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.camel.examples.pingpong;
+package org.activiti.camel.examples.ping;
 
 /**
  * @author Saeid Mirzaei  

File: modules/activiti-osgi/src/main/java/org/activiti/osgi/Extender.java
Patch:
@@ -295,7 +295,7 @@ private URL getOverrideURL(Bundle bundle, URL path, String basePath){
   //remove bundle protocol specific part, so that resource can be accessed by path relative to bundle root
   private static String getPath(URL url) {
       String path = url.toExternalForm();
-      return path.replaceAll("bundle://[^/]*/","");
+      return path.replaceAll(url.getProtocol() + "://[^/]*/", "");
   }
 
   // script engine part

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ComplexGatewayXMLConverter.java
Patch:
@@ -18,6 +18,7 @@
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
+import org.activiti.bpmn.model.ComplexGateway;
 import org.activiti.bpmn.model.ExclusiveGateway;
 
 /**
@@ -27,7 +28,7 @@ public class ComplexGatewayXMLConverter extends BaseBpmnXMLConverter {
   
   public Class<? extends BaseElement> getBpmnElementType() {
     // complex gateway is not supported so transform it to exclusive gateway
-    return ExclusiveGateway.class;
+    return ComplexGateway.class;
   }
   
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/UserTaskXMLConverter.java
Patch:
@@ -47,7 +47,8 @@ public class UserTaskXMLConverter extends BaseBpmnXMLConverter {
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_ASSIGNEE), 
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_PRIORITY), 
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CANDIDATEUSERS), 
-      new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CANDIDATEGROUPS)
+      new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CANDIDATEGROUPS),
+      new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CATEGORY)
   );
 
   public UserTaskXMLConverter() {

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/UserTaskConverterTest.java
Patch:
@@ -43,6 +43,7 @@ private void validateModel(BpmnModel model) {
     UserTask userTask = (UserTask) flowElement;
     assertEquals("usertask", userTask.getId());
     assertEquals("User task", userTask.getName());
+    assertEquals("Test Category", userTask.getCategory());
     assertEquals("testKey", userTask.getFormKey());
     assertEquals("40", userTask.getPriority());
     assertEquals("2012-11-01", userTask.getDueDate());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -350,8 +350,8 @@ protected void deleteVariableInstanceForExplicitUserCall(VariableInstanceEntity
   protected void updateVariableInstance(VariableInstanceEntity variableInstance, Object value, ExecutionEntity sourceActivityExecution) {
 	
     // Always check if the type should be altered. It's possible that the previous type is lower in the type
-    // checking chain (eg. serializable) and will return true on isAbleToStore(), even though another type
-    // higher in the chain is eligable for storage.
+    // checking chain (e.g. serializable) and will return true on isAbleToStore(), even though another type
+    // higher in the chain is eligible for storage.
     
     VariableTypes variableTypes = Context
         .getProcessEngineConfiguration()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -151,7 +151,7 @@ else if (dueDateValue instanceof Date) {
     	// See ACT-1427: A boundary timer with a cancelActivity='true', doesn't need to repeat itself
     	boolean repeat = !isInterruptingTimer;
     	
-    	// ACT-1951: intermediate catching timer events shouldn't repeat accoring to spec
+    	// ACT-1951: intermediate catching timer events shouldn't repeat according to spec
     	if(TimerCatchIntermediateEventJobHandler.TYPE.equals(jobHandlerType)) {
     		repeat = false;
     	}

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/repository/DeploymentResourceTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.activiti.rest.service.HttpMultipartHelper;
 import org.activiti.rest.service.api.RestUrls;
 import org.apache.commons.io.IOUtils;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementAgent.java
Patch:
@@ -176,8 +176,8 @@ protected MBeanServer findOrCreateMBeanServer() {
 
   @Override
   public void findAndRegisterMbeans() throws Exception {
-    register(new ProcessDefinitionsMBean(jmxConfigurator.getProcessEngineConfig()), new ObjectName(jmxConfigurator.getDomain(), "type", "Deployments"));  
-    register(new JobExecutorMBean(jmxConfigurator.getProcessEngineConfig()), new ObjectName(jmxConfigurator.getDomain(), "type", "JobExecutor"));
+	  register(new ProcessDefinitionsMBean(jmxConfigurator.getProcessEngineConfig()), new ObjectName(jmxConfigurator.getDomain(), "type", "Deployments"));
+	  register(new JobExecutorMBean(jmxConfigurator.getProcessEngineConfig()), new ObjectName(jmxConfigurator.getDomain(), "type", "JobExecutor"));
 
   }
   public void createJmxConnector(String host) throws IOException {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/UserTaskXMLConverter.java
Patch:
@@ -47,7 +47,8 @@ public class UserTaskXMLConverter extends BaseBpmnXMLConverter {
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_ASSIGNEE), 
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_PRIORITY), 
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CANDIDATEUSERS), 
-      new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CANDIDATEGROUPS)
+      new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CANDIDATEGROUPS),
+      new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_TASK_USER_CATEGORY)
   );
 
   public UserTaskXMLConverter() {

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/UserTaskConverterTest.java
Patch:
@@ -43,6 +43,7 @@ private void validateModel(BpmnModel model) {
     UserTask userTask = (UserTask) flowElement;
     assertEquals("usertask", userTask.getId());
     assertEquals("User task", userTask.getName());
+    assertEquals("Test Category", userTask.getCategory());
     assertEquals("testKey", userTask.getFormKey());
     assertEquals("40", userTask.getPriority());
     assertEquals("2012-11-01", userTask.getDueDate());

File: modules/activiti-jmx/src/test/java/org/activiti/management/jmx/DeploymentsJMXClientTest.java
Patch:
@@ -51,8 +51,9 @@ public class DeploymentsJMXClientTest {
   @SuppressWarnings("unchecked")
   @Test
   public void testDeploymentsJmxClient() throws IOException, InterruptedException, MalformedObjectNameException, AttributeNotFoundException, MBeanException, ReflectionException, InstanceNotFoundException, IntrospectionException {
+    String hostName = Utils.getHostName();
     JMXServiceURL url = 
-            new JMXServiceURL("service:jmx:rmi://DEACN458:10111/jndi/rmi://" + Utils.getHostName() + ":1099/jmxrmi/activiti");
+            new JMXServiceURL("service:jmx:rmi://" + hostName + ":10111/jndi/rmi://" + hostName + ":1099/jmxrmi/activiti");
    
     
     ProcessEngineConfiguration processEngineConfig = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml");

File: modules/activiti-jmx/src/test/java/org/activiti/management/jmx/JobExecutorJMXClientTest.java
Patch:
@@ -40,7 +40,8 @@ public class JobExecutorJMXClientTest {
 
   @Test
   public void testJobExecutorJMXClient() throws InterruptedException, IOException, MalformedObjectNameException, AttributeNotFoundException, InstanceNotFoundException, MBeanException, ReflectionException {
-    JMXServiceURL url = new JMXServiceURL("service:jmx:rmi://DEACN458:10111/jndi/rmi://" + Utils.getHostName() + ":1099/jmxrmi/activiti");
+    String hostName = Utils.getHostName();
+    JMXServiceURL url = new JMXServiceURL("service:jmx:rmi://" + hostName + ":10111/jndi/rmi://" + hostName + ":1099/jmxrmi/activiti");
     ProcessEngineConfiguration processEngineConfig = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource("activiti.cfg.xml");
     ProcessEngine processEngine = processEngineConfig.buildProcessEngine();
 

File: modules/activiti-process-validation/src/main/java/org/activiti/validation/validator/ValidatorSet.java
Patch:
@@ -47,7 +47,7 @@ public void setValidators(Collection<? extends Validator> validators) {
 		}
 	}
 	
-	public void removeValidator(Class<Validator> validatorClass) {
+	public void removeValidator(Class<? extends Validator> validatorClass) {
 		validators.remove(validatorClass);
 	}
 

File: modules/activiti-process-validation/src/main/java/org/activiti/validation/validator/ValidatorSet.java
Patch:
@@ -47,7 +47,7 @@ public void setValidators(Collection<? extends Validator> validators) {
 		}
 	}
 	
-	public void removeValidator(Class<Validator> validatorClass) {
+	public void removeValidator(Class<? extends Validator> validatorClass) {
 		validators.remove(validatorClass);
 	}
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/DeployInvalidXmlTest.java
Patch:
@@ -27,7 +27,7 @@ public class DeployInvalidXmlTest extends PluggableActivitiTestCase {
   protected void setUp() throws Exception {
     super.setUp();
     
-    processEngineConfiguration.setEnableSafeBpmnXml(false); // Needs to be enabled to test this
+    processEngineConfiguration.setEnableSafeBpmnXml(true); // Needs to be enabled to test this
   }
   
   @Override

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ConvertProcessDefinitionPopupWindow.java
Patch:
@@ -33,6 +33,7 @@
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.NotificationManager;
 import org.activiti.explorer.ui.custom.PopupWindow;
+import org.activiti.explorer.util.XmlUtil;
 import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -121,7 +122,7 @@ public void buttonClick(ClickEvent event) {
         
         try {
           InputStream bpmnStream = repositoryService.getResourceAsStream(processDefinition.getDeploymentId(), processDefinition.getResourceName());
-          XMLInputFactory xif = XMLInputFactory.newInstance();
+          XMLInputFactory xif = XmlUtil.createSafeXmlInputFactory();
           InputStreamReader in = new InputStreamReader(bpmnStream, "UTF-8");
           XMLStreamReader xtr = xif.createXMLStreamReader(in);
           BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ImportUploadReceiver.java
Patch:
@@ -33,6 +33,7 @@
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.NotificationManager;
 import org.activiti.explorer.ViewManager;
+import org.activiti.explorer.util.XmlUtil;
 import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -88,7 +89,7 @@ protected void deployUploadedFile() {
         if (fileName.endsWith(".bpmn20.xml") || fileName.endsWith(".bpmn")) {
           validFile = true;
           BpmnXMLConverter xmlConverter = new BpmnXMLConverter();
-          XMLInputFactory xif = XMLInputFactory.newInstance();
+          XMLInputFactory xif = XmlUtil.createSafeXmlInputFactory();
           InputStreamReader in = new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()), "UTF-8");
           XMLStreamReader xtr = xif.createXMLStreamReader(in);
           BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processinstance/ProcessInstanceDetailPanel.java
Patch:
@@ -49,6 +49,7 @@
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 import org.activiti.explorer.ui.process.ProcessDefinitionImageStreamResourceBuilder;
 import org.activiti.explorer.ui.variable.VariableRendererManager;
+import org.activiti.explorer.util.XmlUtil;
 import org.activiti.image.ProcessDiagramGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -171,7 +172,7 @@ protected void addProcessImage() {
           
           final InputStream definitionStream = repositoryService.getResourceAsStream(
               processDefinition.getDeploymentId(), processDefinition.getResourceName());
-          XMLInputFactory xif = XMLInputFactory.newInstance();
+          XMLInputFactory xif = XmlUtil.createSafeXmlInputFactory();
           XMLStreamReader xtr = xif.createXMLStreamReader(definitionStream);
           BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);
           

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionInfoComponent.java
Patch:
@@ -38,6 +38,7 @@
 import org.activiti.explorer.I18nManager;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
+import org.activiti.explorer.util.XmlUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -144,7 +145,7 @@ protected void initImage() {
         
         final InputStream definitionStream = repositoryService.getResourceAsStream(
             processDefinition.getDeploymentId(), processDefinition.getResourceName());
-        XMLInputFactory xif = XMLInputFactory.newInstance();
+        XMLInputFactory xif = XmlUtil.createSafeXmlInputFactory();
         XMLStreamReader xtr = xif.createXMLStreamReader(definitionStream);
         BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);
         

File: modules/activiti-jmx/src/test/java/org/activiti/management/jmx/MBeanInfoAssemblerTest.java
Patch:
@@ -136,9 +136,9 @@ public void testInherited() throws JMException {
     ModelMBeanInfo beanInfo = mbeanInfoAssembler.getMBeanInfo(new BadInherited(), null, "someName");
     assertNotNull(beanInfo);
     assertNotNull(beanInfo.getAttributes());
-    assertEquals(0, beanInfo.getAttributes().length);
+    assertEquals(2, beanInfo.getAttributes().length);
     assertNotNull(beanInfo.getOperations());
-    assertEquals(0, beanInfo.getOperations().length);
+    assertEquals(1, beanInfo.getOperations().length);
 
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/LockExclusiveJobCmd.java
Patch:
@@ -45,7 +45,7 @@ public Object execute(CommandContext commandContext) {
     }
     
     if (log.isDebugEnabled()) {
-      log.debug("Executing lock exclusive job {}", job.getId());
+      log.debug("Executing lock exclusive job {} {}", job.getId(), job.getExecutionId());
     }
     
     if (job.isExclusive()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireAsyncJobsDueCmd.java
Patch:
@@ -40,7 +40,7 @@ public AcquiredJobEntities execute(CommandContext commandContext) {
     List<JobEntity> jobs = commandContext
       .getJobEntityManager()
       .findAsyncJobsDueToExecute(new Page(0, asyncExecutor.getMaxAsyncJobsDuePerAcquisition()));
-
+    
     for (JobEntity job: jobs) {
       lockJob(commandContext, job, asyncExecutor.getAsyncJobLockTimeInMillis());
       acquiredJobs.addJob(job);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/exclusive/ExclusiveTaskTest.java
Patch:
@@ -60,7 +60,7 @@ public void testExclusiveServiceConcurrent() {
     // now there should be 3 exclusive jobs in the database:
     assertEquals(3, managementService.createJobQuery().count());
                    
-    waitForJobExecutorToProcessAllJobs(6000L, 400L);
+    waitForJobExecutorToProcessAllJobs(10000L, 400L);
     
     // all the jobs are done
     assertEquals(0, managementService.createJobQuery().count());      

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/InclusiveGatewayTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.impl.util.CollectionUtil;
 import org.activiti.engine.runtime.Execution;
@@ -434,7 +433,7 @@ public void testJoinAfterCall() {
   @Deployment
   public void testAsyncBehavior() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("async");
-    waitForJobExecutorToProcessAllJobs(5000, 500);
+    waitForJobExecutorToProcessAllJobs(10000, 500);
     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
   }
   

File: modules/activiti-jmx/src/test/java/org/activiti/management/jmx/testMbeans/BadInherited.java
Patch:
@@ -13,14 +13,14 @@
 
 package org.activiti.management.jmx.testMbeans;
 
-import org.activiti.examples.bpmn.usertask.taskcandidate.TestBean;
+
 import org.activiti.management.jmx.annotations.ManagedResource;
 
 /**
  * @author Saeid Mirzaei
  */
 
 @ManagedResource(description = "test description")
-public class BadInherited extends TestBean {
+public class BadInherited extends TestMbean {
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -49,7 +49,7 @@
 public interface ProcessEngine extends EngineServices {
 
   /** the version of the activiti library */
-  public static String VERSION = "5.17.0.0";
+  public static String VERSION = "5.17.0.1";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -31,6 +31,8 @@
  */
 public class ExclusiveGatewayActivityBehavior extends GatewayActivityBehavior {
   
+  private static final long serialVersionUID = 1L;
+  
   private static Logger log = LoggerFactory.getLogger(ExclusiveGatewayActivityBehavior.class);
   
   /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -110,6 +110,7 @@ List<? extends ActivityExecution> getLeaveExecutions(ActivityExecution parent) {
 
   public boolean activeConcurrentExecutionsExist(ActivityExecution execution) {
     PvmActivity activity = execution.getActivity();
+    System.out.println("!!!!! execution.isConcurrent() " + execution.isConcurrent());
     if (execution.isConcurrent()) {
       for (ActivityExecution concurrentExecution : getLeaveExecutions(execution.getParent())) {
         if (concurrentExecution.isActive() && concurrentExecution.getId().equals(execution.getId()) == false) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -53,6 +53,8 @@
  */
 public class ParallelGatewayActivityBehavior extends GatewayActivityBehavior {
   
+  private static final long serialVersionUID = 1L;
+  
   private static Logger log = LoggerFactory.getLogger(ParallelGatewayActivityBehavior.class);
 
   public void execute(ActivityExecution execution) throws Exception { 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -80,10 +80,11 @@ public Object execute(CommandContext commandContext) {
     try {
       job.execute(commandContext);
       
-      if(commandContext.getEventDispatcher().isEnabled()) {
+      if (commandContext.getEventDispatcher().isEnabled()) {
       	commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(
       			ActivitiEventType.JOB_EXECUTION_SUCCESS, job));
       }
+      
     } catch (Throwable exception) {
       // When transaction is rolled back, decrement retries
       CommandExecutor commandExecutor = Context

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -108,9 +108,10 @@ public class DbSqlSession implements Session {
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16.2"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16.3.0"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16.4.0"));
+
+	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.17.0.0"));
 	  
 	  /* Current */
-	  
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion(ProcessEngine.VERSION));
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -78,6 +78,7 @@ public void execute(CommandContext commandContext) {
     if (executionId != null) {
       execution = commandContext.getExecutionEntityManager().findExecutionById(executionId);
     }
+    
     Map<String, JobHandler> jobHandlers = Context.getProcessEngineConfiguration().getJobHandlers();
     JobHandler jobHandler = jobHandlers.get(jobHandlerType);
     jobHandler.execute(this, jobHandlerConfiguration, execution, commandContext);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/BoundaryTimerNonInterruptingEventTest.java
Patch:
@@ -48,7 +48,9 @@ public void testMultipleTimersOnUserTask() {
 
     // After setting the clock to time '1 hour and 5 seconds', the first timer should fire
     processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + ((60 * 60 * 1000) + 5000)));
-    waitForJobExecutorToProcessAllJobs(5000L, 25L);
+    Job job = managementService.createJobQuery().executable().singleResult();
+    assertNotNull(job);
+    managementService.executeJob(job.getId());
     
     // we still have one timer more to fire
     assertEquals(1L, jobQuery.count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/exclusive/ExclusiveTaskTest.java
Patch:
@@ -60,7 +60,7 @@ public void testExclusiveServiceConcurrent() {
     // now there should be 3 exclusive jobs in the database:
     assertEquals(3, managementService.createJobQuery().count());
                    
-    waitForJobExecutorToProcessAllJobs(6000L, 100L);
+    waitForJobExecutorToProcessAllJobs(6000L, 400L);
     
     // all the jobs are done
     assertEquals(0, managementService.createJobQuery().count());      

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/main/java/org/activiti/spring/boot/RestApiAutoConfiguration.java
Patch:
@@ -40,7 +40,7 @@
  */
 @Configuration
 @AutoConfigureAfter(SecurityAutoConfiguration.class)
-@ConditionalOnClass(name = {"org.springframework.web.servlet.DispatcherServlet"})
+@ConditionalOnClass(name = {"org.activiti.rest.service.api.RestUrls", "org.springframework.web.servlet.DispatcherServlet"})
 public class RestApiAutoConfiguration {
 
   @Bean()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -79,7 +79,9 @@ public Object execute(CommandContext commandContext)  {
       String failedJobRetryTimeCycle = activity.getFailedJobRetryTimeCycleValue();
       try {
         DurationHelper durationHelper = new DurationHelper(failedJobRetryTimeCycle, commandContext.getProcessEngineConfiguration().getClock());
-        job.setLockExpirationTime(durationHelper.getDateAfter());
+        job.setLockOwner(null);
+        job.setLockExpirationTime(null);
+        job.setDuedate(durationHelper.getDateAfter());
 	       
         if (job.getExceptionMessage() == null) {  // is it the first exception 
           log.debug("Applying JobRetryStrategy '" + failedJobRetryTimeCycle+ "' the first time for job " + job.getId() + " with "+ durationHelper.getTimes()+" retries");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/AbstractActivitiTestCase.java
Patch:
@@ -275,7 +275,7 @@ public void waitForJobExecutorOnCondition(long maxMillisToWait, long intervalMil
   public boolean areJobsAvailable() {
     return !managementService
       .createJobQuery()
-      .executable()
+      //.executable()
       .list()
       .isEmpty();
   }

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/runtime/TaskSubTaskCollectionResourceTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.activiti.engine.task.Task;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -51,10 +51,10 @@ public void testGetSubTasks() throws Exception {
     taskService.saveTask(subTask2);
 
     // Request all sub tasks
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + 
+    CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + 
         RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK_SUBTASKS_COLLECTION, parentTask.getId())), HttpStatus.SC_OK);
-    
     JsonNode responseNode = objectMapper.readTree(response.getEntity().getContent());
+    closeResponse(response);
     assertNotNull(responseNode);
     assertTrue(responseNode.isArray());
     assertEquals(2, responseNode.size());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResourceTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.junit.Assert;
 import org.junit.Test;
@@ -109,8 +109,9 @@ public void testQueryActivityInstances() throws Exception {
   
   protected void assertResultsPresentInDataResponse(String url, int numberOfResultsExpected, String... expectedActivityIds) throws JsonProcessingException, IOException {
     // Do the actual call
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
+  	CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     Assert.assertEquals(numberOfResultsExpected, dataNode.size());
     
     // Check presence of ID's

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricActivityInstanceQueryResourceTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.StringEntity;
 
@@ -137,10 +137,11 @@ protected void assertResultsPresentInDataResponse(String url, ObjectNode body, i
     // Do the actual call
     HttpPost post = new HttpPost(SERVER_URL_PREFIX + url);
     post.setEntity(new StringEntity(body.toString()));
-    HttpResponse response = executeHttpRequest(post, 200);
+    CloseableHttpResponse response = executeRequest(post, 200);
     
     // Check status and size
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     assertEquals(numberOfResultsExpected, dataNode.size());
 
     // Check presence of ID's

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricProcessInstanceIdentityLinkCollectionResourceTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -57,9 +57,10 @@ public void testGetIdentityLinks() throws Exception {
     String url = RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_IDENTITY_LINKS, processInstance.getId());
     
     // Do the actual call
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
+    CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
     
     JsonNode linksArray = objectMapper.readTree(response.getEntity().getContent());
+    closeResponse(response);
     assertEquals(3, linksArray.size());
     Map<String, JsonNode> linksMap = new HashMap<String, JsonNode>();
     for (JsonNode linkNode : linksArray) {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricProcessInstanceQueryResourceTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.StringEntity;
 
@@ -151,10 +151,11 @@ public void testQueryProcessInstancesWithVariables() throws Exception {
     
     HttpPost httpPost = new HttpPost(SERVER_URL_PREFIX + url + "?sort=startTime");
     httpPost.setEntity(new StringEntity(requestNode.toString()));
-    HttpResponse response = executeHttpRequest(httpPost, HttpStatus.SC_OK);
+    CloseableHttpResponse response = executeRequest(httpPost, HttpStatus.SC_OK);
     
     // Check status and size
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     assertEquals(2, dataNode.size());
     assertEquals(processInstance.getId(), dataNode.get(0).get("id").asText());
     assertEquals(processInstance2.getId(), dataNode.get(1).get("id").asText());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricTaskInstanceCollectionResourceTest.java
Patch:
@@ -29,8 +29,8 @@
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -129,10 +129,11 @@ public void testQueryTaskInstances() throws Exception {
   protected void assertResultsPresentInDataResponse(String url, int numberOfResultsExpected, String... expectedTaskIds) throws JsonProcessingException, IOException {
     
     // Do the actual call
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
+  	CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
     
     // Check status and size
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     assertEquals(numberOfResultsExpected, dataNode.size());
 
     // Check presence of ID's

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricTaskInstanceIdentityLinkCollectionResourceTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -58,10 +58,11 @@ public void testGetIdentityLinks() throws Exception {
     String url = RestUrls.createRelativeResourceUrl(RestUrls.URL_HISTORIC_TASK_INSTANCE_IDENTITY_LINKS, task.getId());
     
     // Do the actual call
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
+    CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
     
     // Check status and size
     JsonNode linksArray = objectMapper.readTree(response.getEntity().getContent());
+    closeResponse(response);
     assertEquals(2, linksArray.size());
     Map<String, JsonNode> linksMap = new HashMap<String, JsonNode>();
     for (JsonNode linkNode : linksArray) {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricTaskInstanceQueryResourceTest.java
Patch:
@@ -27,8 +27,8 @@
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.StringEntity;
 
@@ -244,9 +244,9 @@ protected void assertResultsPresentInPostDataResponse(String url, ObjectNode bod
     // Do the actual call
     HttpPost httpPost = new HttpPost(SERVER_URL_PREFIX + url);
     httpPost.setEntity(new StringEntity(body.toString()));
-    HttpResponse response = executeHttpRequest(httpPost, HttpStatus.SC_OK);
-    
+    CloseableHttpResponse response = executeRequest(httpPost, HttpStatus.SC_OK);
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     assertEquals(numberOfResultsExpected, dataNode.size());
 
     // Check presence of ID's

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricVariableInstanceCollectionResourceTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -82,10 +82,11 @@ public void testQueryVariableInstances() throws Exception {
   protected void assertResultsPresentInDataResponse(String url, int numberOfResultsExpected, String variableName, Object variableValue) throws JsonProcessingException, IOException {
     
     // Do the actual call
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
+  	CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + url), HttpStatus.SC_OK);
     
     // Check status and size
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     assertEquals(numberOfResultsExpected, dataNode.size());
 
     // Check presence of ID's

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricVariableInstanceQueryResourceTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.StringEntity;
 
@@ -133,10 +133,11 @@ protected void assertResultsPresentInDataResponse(String url, ObjectNode body, i
     // Do the actual call
     HttpPost httpPost = new HttpPost(SERVER_URL_PREFIX + url);
     httpPost.setEntity(new StringEntity(body.toString()));
-    HttpResponse response = executeHttpRequest(httpPost, HttpStatus.SC_OK);
+    CloseableHttpResponse response = executeRequest(httpPost, HttpStatus.SC_OK);
     
     // Check status and size
     JsonNode dataNode = objectMapper.readTree(response.getEntity().getContent()).get("data");
+    closeResponse(response);
     assertEquals(numberOfResultsExpected, dataNode.size());
 
     // Check presence of ID's

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/management/JobCollectionResourceTest.java
Patch:
@@ -93,8 +93,8 @@ public void testGetJobs() throws Exception {
     assertResultsPresentInDataResponse(url, timerJob.getId());
     
     // Combining messagesOnly with timersOnly should result in exception
-    executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + 
-        RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + "?timersOnly=true&messagesOnly=true"), HttpStatus.SC_BAD_REQUEST);
+    closeResponse(executeRequest(new HttpGet(SERVER_URL_PREFIX + 
+        RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + "?timersOnly=true&messagesOnly=true"), HttpStatus.SC_BAD_REQUEST));
     
     // Fetch using dueBefore
     url = RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + "?dueBefore=" + getISODateString(inAnHour.getTime());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/management/PropertiesCollectionResourceTest.java
Patch:
@@ -5,8 +5,8 @@
 
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -24,12 +24,13 @@ public class PropertiesCollectionResourceTest extends BaseSpringRestTestCase {
    * Test getting the engine properties.
    */
   public void testGetProperties() throws Exception {
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + 
+  	CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + 
         RestUrls.createRelativeResourceUrl(RestUrls.URL_PROPERTIES_COLLECTION)), HttpStatus.SC_OK);
     
     Map<String, String> properties = managementService.getProperties();
     
     JsonNode responseNode = objectMapper.readTree(response.getEntity().getContent());
+    closeResponse(response);
     assertNotNull(responseNode);
     assertEquals(properties.size(), responseNode.size());
     

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/repository/ModelCollectionResourceTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.StringEntity;
 
@@ -178,9 +178,9 @@ public void testCreateModel() throws Exception {
       HttpPost httpPost = new HttpPost(SERVER_URL_PREFIX + 
           RestUrls.createRelativeResourceUrl(RestUrls.URL_MODEL_COLLECTION));
       httpPost.setEntity(new StringEntity(requestNode.toString()));
-      HttpResponse response = executeHttpRequest(httpPost, HttpStatus.SC_CREATED);
-      
+      CloseableHttpResponse response = executeRequest(httpPost, HttpStatus.SC_CREATED);
       JsonNode responseNode = objectMapper.readTree(response.getEntity().getContent());
+      closeResponse(response);
       assertNotNull(responseNode);
       assertEquals("Model name", responseNode.get("name").textValue());
       assertEquals("Model key", responseNode.get("key").textValue());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ExecutionActiveActivitiesCollectionResourceTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseSpringRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -36,11 +36,12 @@ public class ExecutionActiveActivitiesCollectionResourceTest extends BaseSpringR
   public void testGetActivities() throws Exception {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("processOne");
     
-    HttpResponse response = executeHttpRequest(new HttpGet(SERVER_URL_PREFIX + 
+    CloseableHttpResponse response = executeRequest(new HttpGet(SERVER_URL_PREFIX + 
         RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_ACTIVITIES_COLLECTION, processInstance.getId())), HttpStatus.SC_OK);
     
     // Check resulting instance
     JsonNode responseNode = objectMapper.readTree(response.getEntity().getContent());
+    closeResponse(response);
     assertNotNull(responseNode);
     assertTrue(responseNode.isArray());
     assertEquals(2, responseNode.size());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ExecutionCollectionResourceTest.java
Patch:
@@ -138,7 +138,7 @@ public void testSignalEventExecutions() throws Exception {
     HttpPut httpPut = new HttpPut(SERVER_URL_PREFIX + 
         RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_COLLECTION));
     httpPut.setEntity(new StringEntity(requestNode.toString()));
-    executeHttpRequest(httpPut, HttpStatus.SC_NO_CONTENT);
+    closeResponse(executeRequest(httpPut, HttpStatus.SC_NO_CONTENT));
     
     // Check if process is moved on to the other wait-state
     waitingExecution = runtimeService.createExecutionQuery().activityId("anotherWaitState").singleResult();
@@ -172,7 +172,7 @@ public void testSignalEventExecutionsWithvariables() throws Exception {
     HttpPut httpPut = new HttpPut(SERVER_URL_PREFIX + 
         RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION_COLLECTION));
     httpPut.setEntity(new StringEntity(requestNode.toString()));
-    executeHttpRequest(httpPut, HttpStatus.SC_NO_CONTENT);
+    closeResponse(executeRequest(httpPut, HttpStatus.SC_NO_CONTENT));
     
     // Check if process is moved on to the other wait-state
     waitingExecution = runtimeService.createExecutionQuery().activityId("anotherWaitState").singleResult();

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -113,7 +113,7 @@ public abstract class ProcessEngineConfiguration implements EngineServices {
   protected String databaseType;
   protected String databaseSchemaUpdate = DB_SCHEMA_UPDATE_FALSE;
   protected String jdbcDriver = "org.h2.Driver";
-  protected String jdbcUrl = "jdbc:h2:tcp://localhost/activiti";
+  protected String jdbcUrl = "jdbc:h2:tcp://localhost/~/activiti";
   protected String jdbcUsername = "sa";
   protected String jdbcPassword = "";
   protected String dataSourceJndiName = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -167,4 +167,5 @@ private String getExceptionStacktrace() {
   private ExecutionEntity fetchExecutionEntity(CommandContext commandContext, String executionId) {
     return commandContext.getExecutionEntityManager().findExecutionById(executionId);
   }
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -141,7 +141,8 @@ private ActivityImpl getCurrentActivity(CommandContext commandContext, JobEntity
       }
     } else if (TimerStartEventJobHandler.TYPE.equals(type)) {
     	DeploymentManager deploymentManager = commandContext.getProcessEngineConfiguration().getDeploymentManager();
-      ProcessDefinitionEntity processDefinition =  deploymentManager.findDeployedLatestProcessDefinitionByKey(job.getJobHandlerConfiguration());
+      ProcessDefinitionEntity processDefinition =  
+      		deploymentManager.findDeployedLatestProcessDefinitionByKeyAndTenantId(job.getJobHandlerConfiguration(), job.getTenantId());
       if (processDefinition != null) {
         activity = processDefinition.getInitial();
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -111,7 +111,7 @@ public void execute(ActivityExecution execution) throws Exception {
     }
     
     if (taskDefinition.getFormKeyExpression() != null) {
-    	final Object formKey = (String) taskDefinition.getFormKeyExpression().getValue(execution);
+    	final Object formKey = taskDefinition.getFormKeyExpression().getValue(execution);
     	if (formKey != null) {
     		if (formKey instanceof String) {
     			task.setFormKey((String) formKey);

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/EndpointAutoConfigurationTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.activiti.engine.ProcessEngine;
 import org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint;
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration;
 import org.springframework.boot.actuate.autoconfigure.ManagementServerPropertiesAutoConfiguration;
@@ -19,6 +20,7 @@
 
 import java.util.Map;
 
+@Ignore
 public class EndpointAutoConfigurationTest {
 
     private AnnotationConfigEmbeddedWebApplicationContext applicationContext;

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/IntegrationAutoConfigurationTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.activiti.spring.integration.IntegrationActivityBehavior;
 import org.junit.After;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
@@ -35,6 +36,7 @@
  *
  * @author Josh Long
  */
+@Ignore
 public class IntegrationAutoConfigurationTest {
 
     private AnnotationConfigApplicationContext applicationContext;

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/ProcessEngineAutoConfigurationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
@@ -13,6 +14,7 @@
 /**
  * @author Josh Long
  */
+@Ignore
 public class ProcessEngineAutoConfigurationTest {
 
     private AnnotationConfigApplicationContext applicationContext;

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/RestApiAutoConfigurationTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.activiti.spring.boot;
 
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.web.*;
 import org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;
@@ -13,6 +14,7 @@
 import org.springframework.web.client.RestTemplate;
 
 import javax.servlet.ServletRegistration;
+
 import java.io.IOException;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -22,6 +24,7 @@
  *
  * @author Josh Long
  */
+@Ignore
 public class RestApiAutoConfigurationTest {
 
     private AnnotationConfigEmbeddedWebApplicationContext applicationContext;

File: modules/activiti-spring-boot/spring-boot-starters/spring-boot-starter-basic/src/test/java/org/activiti/spring/boot/SecurityAutoConfigurationTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.activiti.engine.identity.User;
 import org.junit.After;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -20,6 +21,7 @@
 /**
  * @author Josh Long
  */
+@Ignore
 public class SecurityAutoConfigurationTest {
     private AnnotationConfigApplicationContext applicationContext;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -873,7 +873,7 @@ public int compare(ProcessEngineConfigurator configurator1, ProcessEngineConfigu
   
   protected void configuratorsBeforeInit() {
   	for (ProcessEngineConfigurator configurator : allConfigurators) {
-  		log.info("Executing configure() of {} (priority:{})", configurator.getClass(), configurator.getPriority());
+  		log.info("Executing beforeInit() of {} (priority:{})", configurator.getClass(), configurator.getPriority());
   		configurator.beforeInit(this);
   	}
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/RestResponseFactory.java
Patch:
@@ -790,7 +790,7 @@ public UserResponse createUserResponse(SecuredResource securedResource, User use
       response.setPassword(user.getPassword());
     }
     
-    if(user.isPictureSet){
+    if(user.isPictureSet()){
       response.setPictureUrl(securedResource.createFullResourceUrl(RestUrls.URL_USER_PICTURE, user.getId()));
     }
     return response;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -873,7 +873,7 @@ public int compare(ProcessEngineConfigurator configurator1, ProcessEngineConfigu
   
   protected void configuratorsBeforeInit() {
   	for (ProcessEngineConfigurator configurator : allConfigurators) {
-  		log.info("Executing configure() of {} (priority:{})", configurator.getClass(), configurator.getPriority());
+  		log.info("Executing beforeInit() of {} (priority:{})", configurator.getClass(), configurator.getPriority());
   		configurator.beforeInit(this);
   	}
   }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processinstance/ProcessInstanceDetailPanel.java
Patch:
@@ -222,7 +222,7 @@ protected void addProcessImage() {
         ProcessEngineConfiguration processEngineConfiguration = ProcessEngines.getDefaultProcessEngine().getProcessEngineConfiguration();
         ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();
         StreamResource diagram = new ProcessDefinitionImageStreamResourceBuilder()
-          .buildStreamResource(processInstance, repositoryService, runtimeService, diagramGenerator);
+          .buildStreamResource(processInstance, repositoryService, runtimeService, diagramGenerator, processEngineConfiguration);
   
         if(diagram != null) {
           Label header = new Label(i18nManager.getMessage(Messages.PROCESS_HEADER_DIAGRAM));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/AbstractDatabaseEventLoggerEventHandler.java
Patch:
@@ -60,7 +60,7 @@ protected EventLogEntryEntity createEventLogEntry(String type,
 		}
 		
 		// Current tenant
-		if (processDefinitionId != null) {
+		if (!data.containsKey(Fields.TENANT_ID) && processDefinitionId != null) {
 			DeploymentCache<ProcessDefinitionEntity> processDefinitionCache = Context.getProcessEngineConfiguration().getProcessDefinitionCache();
 			if (processDefinitionCache != null) {
 				ProcessDefinitionEntity processDefinitionEntity = processDefinitionCache.get(processDefinitionId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/TaskAssignedEventHandler.java
Patch:
@@ -14,7 +14,6 @@ public class TaskAssignedEventHandler extends AbstractTaskEventHandler {
 	
 	@Override
 	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
-
 		TaskEntity task = (TaskEntity) ((ActivitiEntityEvent) event).getEntity();
 		Map<String, Object> data = handleCommonTaskFields(task);
     return createEventLogEntry(task.getProcessDefinitionId(), task.getProcessInstanceId(), task.getExecutionId(), task.getId(), data);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/TaskCreatedEventHandler.java
Patch:
@@ -14,7 +14,6 @@ public class TaskCreatedEventHandler extends AbstractTaskEventHandler {
 	
 	@Override
 	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
-		
 		TaskEntity task = (TaskEntity) ((ActivitiEntityEvent) event).getEntity();
 		Map<String, Object> data = handleCommonTaskFields(task);
     return createEventLogEntry(task.getProcessDefinitionId(), task.getProcessInstanceId(), task.getExecutionId(), task.getId(), data);

File: modules/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java
Patch:
@@ -1120,10 +1120,10 @@ public void drawLabel(String text, GraphicInfo graphicInfo, boolean centered){
     	  TextLayout tl = lbm.nextLayout(wrapWidth);
     	  textY += tl.getAscent();
     	  Rectangle2D bb = tl.getBounds();
-    	  double tY = graphicInfo.getY();
+    	  double tX = graphicInfo.getX();
     	  if (centered)
-        	  tY += (int) (graphicInfo.getWidth() / 2 - bb.getWidth() / 2);
-    	  tl.draw(g, (float) tY, textY);
+        	  tX += (int) (graphicInfo.getWidth() / 2 - bb.getWidth() / 2);
+    	  tl.draw(g, tX, textY);
     	  textY += tl.getDescent() + tl.getLeading() + (interline - 1.0f) * tl.getAscent();
       }
   

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/DataObjectConverterTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.Test;
 
 /**
- * @see http://jira.codehaus.org/browse/ACT-1847
+ * @see <a href="http://jira.codehaus.org/browse/ACT-1847">http://jira.codehaus.org/browse/ACT-1847</a>
  */
 public class DataObjectConverterTest extends AbstractConverterTest {
 

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/EventBasedGatewayConverterTest.java
Patch:
@@ -37,7 +37,7 @@ private void validateModel(BpmnModel model) {
     EventGateway gateway = (EventGateway) flowElement;
     List<ActivitiListener> listeners = gateway.getExecutionListeners();
     assertEquals(1, listeners.size());
-    ActivitiListener listener = (ActivitiListener) listeners.get(0);
+    ActivitiListener listener = listeners.get(0);
     assertTrue(ImplementationType.IMPLEMENTATION_TYPE_CLASS.equals(listener.getImplementationType()));
     assertEquals("org.test.TestClass", listener.getImplementation());
     assertEquals("start", listener.getEvent());

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/SubProcessWithExtensionsConverterTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 /**
- * @see http://jira.codehaus.org/browse/ACT-2055
+ * @see <a href="http://jira.codehaus.org/browse/ACT-2055">http://jira.codehaus.org/browse/ACT-2055</a>
  */
 public class SubProcessWithExtensionsConverterTest extends AbstractConverterTest {
   
@@ -209,6 +209,6 @@ protected Localization getLocalization(BaseElement bObj) {
       localization.setResourceBundleKeyForDescription(extensionAttributes.get(ATTRIBUTE_RESOURCE_BUNDLE_KEY_FOR_DESCRIPTION)
               .get(0).getValue());
     }
-    return (Localization) localization;
+    return localization;
   }
 }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/UserTaskConverterTest.java
Patch:
@@ -79,15 +79,15 @@ private void validateModel(BpmnModel model) {
     
     List<ActivitiListener> listeners = userTask.getTaskListeners();
     assertEquals(3, listeners.size());
-    ActivitiListener listener = (ActivitiListener) listeners.get(0);
+    ActivitiListener listener = listeners.get(0);
     assertTrue(ImplementationType.IMPLEMENTATION_TYPE_CLASS.equals(listener.getImplementationType()));
     assertEquals("org.test.TestClass", listener.getImplementation());
     assertEquals("create", listener.getEvent());
-    listener = (ActivitiListener) listeners.get(1);
+    listener = listeners.get(1);
     assertTrue(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equals(listener.getImplementationType()));
     assertEquals("${someExpression}", listener.getImplementation());
     assertEquals("assignment", listener.getEvent());
-    listener = (ActivitiListener) listeners.get(2);
+    listener = listeners.get(2);
     assertTrue(ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equals(listener.getImplementationType()));
     assertEquals("${someDelegateExpression}", listener.getImplementation());
     assertEquals("complete", listener.getEvent());

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ValuedDataObjectWithExtensionsConverterTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 /**
- * @see http://jira.codehaus.org/browse/ACT-1847
+ * @see <a href="http://jira.codehaus.org/browse/ACT-1847">http://jira.codehaus.org/browse/ACT-1847</a>
  */
 public class ValuedDataObjectWithExtensionsConverterTest extends AbstractConverterTest {
   
@@ -183,7 +183,7 @@ private void validateModel(BpmnModel model) {
     assertEquals("BooleanTest", dataObj.getName());
     assertEquals("xsd:boolean", dataObj.getItemSubjectRef().getStructureRef());
     assertTrue(dataObj.getValue() instanceof Boolean);
-    assertEquals(new Boolean(true), dataObj.getValue());
+    assertEquals(Boolean.TRUE, dataObj.getValue());
 
     /*
      * Verify DataObject attributes extension
@@ -262,6 +262,6 @@ protected Localization getLocalization(BaseElement dObj) {
       localization.setResourceBundleKeyForDescription(extensionAttributes.get(ATTRIBUTE_DATA_RESOURCE_BUNDLE_KEY_FOR_DESCRIPTION)
               .get(0).getValue());
     }
-    return (Localization) localization;
+    return localization;
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/LogInterceptor.java
Patch:
@@ -30,15 +30,15 @@ public <T> T execute(CommandConfig config, Command<T> command) {
       // do nothing here if we cannot log
       return next.execute(config, command);
     }
-    log.debug("                                                                                                    ");
+    log.debug("\n");
     log.debug("--- starting {} --------------------------------------------------------", command.getClass().getSimpleName());
     try {
 
       return next.execute(config, command);
 
     } finally {
       log.debug("--- {} finished --------------------------------------------------------", command.getClass().getSimpleName());
-      log.debug("                                                                                                    ");
+      log.debug("\n");
     }
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/AbstractActivitiTestCase.java
Patch:
@@ -145,7 +145,7 @@ protected void assertAndEnsureCleanDb() throws Throwable {
       if (!TABLENAMES_EXCLUDED_FROM_DB_CLEAN_CHECK.contains(tableNameWithoutPrefix)) {
         Long count = tableCounts.get(tableName);
         if (count!=0L) {
-          outputMessage.append("  "+tableName + ": " + count + " record(s) ");
+          outputMessage.append("  ").append(tableName).append(": ").append(count).append(" record(s) ");
         }
       }
     }
@@ -295,7 +295,7 @@ public BpmnModel createOneTaskTestProcess() {
     
     EndEvent endEvent = new EndEvent();
     endEvent.setId("theEnd");
-    process.addFlowElement(endEvent);;
+    process.addFlowElement(endEvent);
     
     process.addFlowElement(new SequenceFlow("start", "theTask"));
     process.addFlowElement(new SequenceFlow("theTask", "theEnd"));
@@ -328,7 +328,7 @@ public BpmnModel createTwoTasksTestProcess() {
     
     EndEvent endEvent = new EndEvent();
     endEvent.setId("theEnd");
-    process.addFlowElement(endEvent);;
+    process.addFlowElement(endEvent);
     
     process.addFlowElement(new SequenceFlow("start", "task1"));
     process.addFlowElement(new SequenceFlow("start", "task2"));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/PvmTestCase.java
Patch:
@@ -26,7 +26,7 @@
  */
 public abstract class PvmTestCase extends TestCase {
 
-  protected static final String EMPTY_LINE = "                                                                                           ";
+  protected static final String EMPTY_LINE = "\n";
 
   protected static Logger log = LoggerFactory.getLogger(PvmTestCase.class);
   
@@ -38,7 +38,7 @@ public abstract class PvmTestCase extends TestCase {
    */
   public void assertTextPresent(String expected, String actual) {
     if ( (actual==null)
-         || (actual.indexOf(expected)==-1)
+         || (!actual.contains(expected))
        ) {
       throw new AssertionFailedError("expected presence of ["+expected+"], but was ["+actual+"]");
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/TestHelper.java
Patch:
@@ -57,7 +57,7 @@ public abstract class TestHelper {
   
   private static Logger log = LoggerFactory.getLogger(TestHelper.class);
 
-  public static final String EMPTY_LINE = "                                                                                           ";
+  public static final String EMPTY_LINE = "\n";
 
   public static final List<String> TABLENAMES_EXCLUDED_FROM_DB_CLEAN_CHECK = Arrays.asList(
     "ACT_GE_PROPERTY"
@@ -259,7 +259,7 @@ public static void assertAndEnsureCleanDb(ProcessEngine processEngine) {
       if (!TABLENAMES_EXCLUDED_FROM_DB_CLEAN_CHECK.contains(tableName)) {
         Long count = tableCounts.get(tableName);
         if (count!=0L) {
-          outputMessage.append("  "+tableName + ": " + count + " record(s) ");
+          outputMessage.append("  ").append(tableName).append(": ").append(count).append(" record(s) ");
         }
       }
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ActivitiEventDispatcherTest.java
Patch:
@@ -274,7 +274,7 @@ public void testActivitiEventTypeParsing() throws Exception {
 
 		// Invalid type name
 		try {
-			types = ActivitiEventType.getTypesFromString("WHOOPS,ENTITY_DELETED");
+			ActivitiEventType.getTypesFromString("WHOOPS,ENTITY_DELETED");
 			fail("Exception expected");
 		} catch(ActivitiIllegalArgumentException expected) {
 			// Expected exception

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ActivityEventsTest.java
Patch:
@@ -483,7 +483,7 @@ protected void assertDatabaseEventPresent(ActivitiEventType eventType) {
 				found = true;
 			}
 		}
-		assertTrue(found);;
+		assertTrue(found);
 	}
 	
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/JobEventsTest.java
Patch:
@@ -151,8 +151,6 @@ public void testRepetitionJobEntityEvents() throws Exception {
 
   @Deployment
   public void testJobCanceledEventOnBoundaryEvent() throws Exception {
-    Clock previousClock = processEngineConfiguration.getClock();
-
     Clock testClock = new DefaultClockImpl();
 
     processEngineConfiguration.setClock(testClock);
@@ -237,7 +235,7 @@ public void testTimerFiredForTimerStart() throws Exception {
      */
     @Deployment
     public void testTimerFiredForIntermediateTimer() throws Exception {
-        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testTimerFiredForIntermediateTimer");
+        runtimeService.startProcessInstanceByKey("testTimerFiredForIntermediateTimer");
 
         // Force timer to start the process
         Calendar tomorrow = Calendar.getInstance();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/UncaughtErrorEventTest.java
Patch:
@@ -14,11 +14,8 @@
 
 import org.activiti.engine.delegate.BpmnError;
 
-import org.activiti.engine.delegate.event.ActivitiErrorEvent;
 import org.activiti.engine.delegate.event.ActivitiEvent;
-import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
 
 /**

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -159,7 +159,7 @@ public void testHistoricProcessInstanceQueryByProcessDefinitionKey() {
             .singleResult();
     HistoricProcessInstance historicProcessInstanceSuper = historyService.createHistoricProcessInstanceQuery().processDefinitionKey("orderProcess")
             .singleResult();
-    assertEquals(historicProcessInstanceSuper.getId(), ((HistoricProcessInstanceEntity) historicProcessInstanceSub).getSuperProcessInstanceId());
+    assertEquals(historicProcessInstanceSuper.getId(), historicProcessInstanceSub.getSuperProcessInstanceId());
   }
 
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml", "org/activiti/engine/test/api/runtime/oneTaskProcess2.bpmn20.xml" })
@@ -559,15 +559,15 @@ public void testQueryEqualsIgnoreCase() {
     
     // Pass in null-value, should cause exception
     try {
-      instance = historyService.createHistoricProcessInstanceQuery().variableValueEqualsIgnoreCase("upper", null).singleResult();
+      historyService.createHistoricProcessInstanceQuery().variableValueEqualsIgnoreCase("upper", null).singleResult();
       fail("Exception expected");
     } catch(ActivitiIllegalArgumentException ae) {
       assertEquals("value is null", ae.getMessage());
     }
     
     // Pass in null name, should cause exception
     try {
-      instance = historyService.createHistoricProcessInstanceQuery().variableValueEqualsIgnoreCase(null, "abcdefg").singleResult();
+      historyService.createHistoricProcessInstanceQuery().variableValueEqualsIgnoreCase(null, "abcdefg").singleResult();
       fail("Exception expected");
     } catch(ActivitiIllegalArgumentException ae) {
       assertEquals("name is null", ae.getMessage());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/identity/GroupQueryTest.java
Patch:
@@ -251,7 +251,7 @@ public void testNativeQuery() {
     assertEquals(3, identityService.createNativeGroupQuery().sql("SELECT aig.* from " + tableName + " aig"
         + " inner join ACT_ID_MEMBERSHIP aim on aig.ID_ = aim.GROUP_ID_ "
         + " inner join ACT_ID_USER aiu on aiu.ID_ = aim.USER_ID_ where aiu.ID_ = #{id}")
-        .parameter("id", "kermit").list().size());;
+        .parameter("id", "kermit").list().size());
 
     // paging
     assertEquals(2, identityService.createNativeGroupQuery().sql(baseQuerySql).listPage(0, 2).size());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -312,7 +312,7 @@ public void testUpdateModelPersistence() throws Exception {
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml"})
   public void testProcessDefinitionEntitySerializable() {
     String procDefId = repositoryService.createProcessDefinitionQuery().singleResult().getId();
-    ProcessDefinition processDefinition = ((RepositoryServiceImpl) repositoryService).getProcessDefinition(procDefId);
+    ProcessDefinition processDefinition = repositoryService.getProcessDefinition(procDefId);
     
     try {
       ByteArrayOutputStream baos = new ByteArrayOutputStream();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -113,7 +113,7 @@ public void testStartProcessInstanceByIdNullVariables() {
   
   @Deployment(resources={
     "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml"})
-  public void startProcessInstanceWithBusinessKey() {
+  public void testStartProcessInstanceWithBusinessKey() {
     ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();
     
     // by key
@@ -126,7 +126,7 @@ public void startProcessInstanceWithBusinessKey() {
     processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess", "456", CollectionUtil.singletonMap("var", "value"));
     assertNotNull(processInstance);
     assertEquals(2, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
-    assertEquals("var", runtimeService.getVariable(processInstance.getId(), "var"));
+    assertEquals("value", runtimeService.getVariable(processInstance.getId(), "var"));
     
     // by id
     processInstance = runtimeService.startProcessInstanceById(processDefinition.getId(), "789");
@@ -137,7 +137,7 @@ public void startProcessInstanceWithBusinessKey() {
     processInstance = runtimeService.startProcessInstanceById(processDefinition.getId(), "101123", CollectionUtil.singletonMap("var", "value2"));
     assertNotNull(processInstance);
     assertEquals(4, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
-    assertEquals("var", runtimeService.getVariable(processInstance.getId(), "var"));
+    assertEquals("value2", runtimeService.getVariable(processInstance.getId(), "var"));
   }
   
   @Deployment(resources={

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/DelegateTaskTest.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.test.api.task;
 
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -31,7 +30,7 @@
 public class DelegateTaskTest extends PluggableActivitiTestCase {
 
 	/**
-	 * @see http://jira.codehaus.org/browse/ACT-380
+	 * @see <a href="http://jira.codehaus.org/browse/ACT-380">http://jira.codehaus.org/browse/ACT-380</a>
 	 */
 	@Deployment
 	public void testGetCandidates() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -340,7 +340,7 @@ public void testTaskDelegationThroughServiceCall() {
     // Fetch the task again and update
     task = taskService.createTaskQuery().taskId(taskId).singleResult();
 
-    taskService.delegateTask(taskId, "joesmoe");
+    taskService.delegateTask(task.getId(), "joesmoe");
     
     task = taskService.createTaskQuery().taskId(taskId).singleResult();
     assertEquals("johndoe", task.getOwner());
@@ -682,7 +682,7 @@ public void testCompleteWithTaskLocalParameters() {
     assertEquals(new Integer(2), runtimeService.getVariable(processInstance.getId(), "sum"));
 
     // Fetch second task
-    task = taskService.createTaskQuery().singleResult();
+    taskService.createTaskQuery().singleResult();
 
   }
   
@@ -1079,7 +1079,7 @@ public void testSetDueDateNullTaskId() {
   }
 
   /**
-   * @see http://jira.codehaus.org/browse/ACT-1059
+   * @see <a href="http://jira.codehaus.org/browse/ACT-1059">http://jira.codehaus.org/browse/ACT-1059</a>
    */
   public void testSetDelegationState() {
     Task task = taskService.newTask();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/tenant/TenancyTest.java
Patch:
@@ -29,7 +29,7 @@ public class TenancyTest extends PluggableActivitiTestCase {
 	@Override
 	protected void setUp() throws Exception {
 	  super.setUp();
-	  this.autoCleanedUpDeploymentIds.clear();;
+	  this.autoCleanedUpDeploymentIds.clear();
 	}
 	
 	@Override

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -287,7 +287,7 @@ public void testSubProcessWithDataInputOutput() {
     assertEquals("Hello from sub process.", taskService.getVariable(taskAfterSubProcess.getId(), "superVariable"));
 
     vars.clear();
-    vars.put("x", new Long(5));
+    vars.put("x", 5l);
 
     // Completing this task ends the super process which leads to a task in the super process
     taskService.complete(taskAfterSubProcess.getId(), vars);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/compensate/helper/UndoService.java
Patch:
@@ -24,12 +24,12 @@
 public class UndoService implements JavaDelegate {
   
   private Expression counterName;
-  
+
   public void execute(DelegateExecution execution) throws Exception {
     String variableName = (String) counterName.getValue(execution);
     Object variable = execution.getVariable(variableName);
     if(variable == null) {
-      execution.setVariable(variableName, (Integer) 1);
+      execution.setVariable(variableName, 1);
     }
     else  {
       execution.setVariable(variableName, ((Integer)variable)+1);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -77,7 +77,7 @@ public void testCatchErrorOfInnerSubprocessOnOuterSubprocess() {
     
     // Completing task 2, will cause the end error event to throw error with code 123
     taskService.complete(tasks.get(1).getId());
-    tasks = taskService.createTaskQuery().list();
+    taskService.createTaskQuery().list();
     Task taskAfterError = taskService.createTaskQuery().singleResult();
     assertEquals("task outside subprocess", taskAfterError.getName());
   }
@@ -106,7 +106,7 @@ private void assertErrorCaughtInConcurrentEmbeddedSubprocesses(String processDef
     assertProcessEnded(procId);
     
     // Completing task B will lead to task C
-    procId = runtimeService.startProcessInstanceByKey(processDefinitionKey).getId();
+    runtimeService.startProcessInstanceByKey(processDefinitionKey).getId();
     tasks = taskService.createTaskQuery().orderByTaskName().asc().list();
     assertEquals(2, tasks.size());
     assertEquals("task A", tasks.get(0).getName());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageIntermediateEventTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.activiti.engine.impl.EventSubscriptionQueryImpl;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.runtime.Execution;
-import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.Deployment;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -192,7 +192,7 @@ public void testTimerShouldNotBeRecreatedOnDeploymentCacheReboot() {
     assertEquals(1, jobQuery.count());
     
     // Reset deployment cache
-    ((ProcessEngineConfigurationImpl) processEngineConfiguration).getProcessDefinitionCache().clear();
+    processEngineConfiguration.getProcessDefinitionCache().clear();
     
     // Start one instance of the process definition, this will trigger a cache reload
     runtimeService.startProcessInstanceByKey("startTimer");

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -149,7 +149,7 @@ public void testDefaultSequenceFlow() {
     assertEquals("Input is one", task.getName());
     runtimeService.deleteProcessInstance(procId, null);
     
-    procId = runtimeService.startProcessInstanceByKey("exclusiveGwDefaultSequenceFlow", 
+    runtimeService.startProcessInstanceByKey("exclusiveGwDefaultSequenceFlow",
             CollectionUtil.singletonMap("input", 5)).getId();
     task = taskService.createTaskQuery().singleResult();
     assertEquals("Default input", task.getName());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailSendTaskTest.java
Patch:
@@ -159,7 +159,7 @@ private void assertEmailSend(WiserMessage emailMessage, boolean htmlMail, String
       }
       
       assertEquals(subject, mimeMessage.getHeader("Subject", null));
-      assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+      assertEquals("\"" + from + "\" <" +from + ">" , mimeMessage.getHeader("From", null));
       assertTrue(getMessage(mimeMessage).contains(message));
       
       for (String t : to) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -172,7 +172,7 @@ public static void assertEmailSend(WiserMessage emailMessage, boolean htmlMail,
       }
       
       assertEquals(subject, mimeMessage.getHeader("Subject", null));
-      assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+      assertEquals("\"" + from + "\" <" +from + ">" , mimeMessage.getHeader("From", null));
       assertTrue(getMessage(mimeMessage).contains(message));
       
       for (String t : to) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/cache/ProcessDefinitionCacheTest.java
Patch:
@@ -182,7 +182,7 @@ public void testDeployRevisedProcessAfterDeleteOnOtherProcessEngine() {
       .getId();
     
     // Start process instance on second process engine -> must use revised process definition
-    processDefinitionId = repositoryService2.createProcessDefinitionQuery().singleResult().getId();
+    repositoryService2.createProcessDefinitionQuery().singleResult().getId();
     runtimeService2.startProcessInstanceByKey("oneTaskProcess");
     task = taskService2.createTaskQuery().singleResult();
     assertEquals("revised task", task.getName());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/cmd/FailingDelegate.java
Patch:
@@ -25,7 +25,7 @@ public class FailingDelegate implements JavaDelegate {
 	public void execute(DelegateExecution execution) throws Exception {
 	  Boolean fail = (Boolean) execution.getVariable("fail");
 
-	  if (fail == null || fail == true) {
+	  if (fail == null || fail) {
 	      throw new ActivitiException(EXCEPTION_MESSAGE);
 	  }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/concurrency/ConcurrentEngineUsageTest.java
Patch:
@@ -94,7 +94,7 @@ protected void retryStartProcess(String runningUser) {
         timeout = timeout + 200;
       }
     }
-    if(success == false) {
+    if(!success) {
       log.debug("Retrying process start FAILED " + MAX_RETRIES + " times");
     }
   }
@@ -118,7 +118,7 @@ protected void retryFinishTask(String taskId) {
       }
     }
     
-    if(success == false) {
+    if(!success) {
       log.debug("Retrying task completion FAILED " + MAX_RETRIES + " times");
     }
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/concurrency/SetRandomVariablesTaskListener.java
Patch:
@@ -30,7 +30,7 @@ public class SetRandomVariablesTaskListener implements TaskListener {
 
   @Override
   public void notify(DelegateTask delegateTask) {
-    String varName = null;
+    String varName;
     for(int i=0; i<5; i++) {
       varName = "variable-" + new Random().nextInt(10);
       delegateTask.getExecution().setVariable(varName, getRandomValue());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/VariableScopeTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.interceptor.Command;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java
Patch:
@@ -205,7 +205,7 @@ public void testHistoricActivityInstanceCalledProcessId() {
   public void testSorting() {
     runtimeService.startProcessInstanceByKey("process");
 
-    int expectedActivityInstances = -1;
+    int expectedActivityInstances;
     if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {
       expectedActivityInstances = 2;
     } else {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -3,7 +3,6 @@
  */
 package org.activiti.engine.test.jobexecutor;
 
-import org.activiti.engine.impl.cmd.CancelJobsCmd;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
@@ -68,7 +67,7 @@ public String execute(CommandContext commandContext) {
   public void testJobCommandsWith3Exceptions() {
     tweetExceptionHandler.setExceptionsRemaining(3);
 
-    String jobId = commandExecutor.execute(new Command<String>() {
+    commandExecutor.execute(new Command<String>() {
 
       public String execute(CommandContext commandContext) {
         MessageEntity message = createTweetExceptionMessage();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/logging/mdc/TestService.java
Patch:
@@ -17,8 +17,7 @@ public void execute(DelegateExecution execution) throws Exception {
 		TestService.executionId = execution.getId();
 		TestService.businessKey = execution.getBusinessKey();
 		
-		Exception a = new Exception("test");
-		throw a;
+		throw new Exception("test");
 		
 	}
 	

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/PvmEventTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.impl.pvm.ProcessDefinitionBuilder;
 import org.activiti.engine.impl.pvm.PvmExecution;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/PvmProcessInstanceEndTest.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.test.pvm;
 
-import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.impl.pvm.ProcessDefinitionBuilder;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti.engine.impl.pvm.PvmProcessInstance;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/PvmScopeAndEventsTest.java
Patch:
@@ -16,9 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.impl.pvm.ProcessDefinitionBuilder;
-import org.activiti.engine.impl.pvm.PvmActivity;
 import org.activiti.engine.impl.pvm.PvmExecution;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti.engine.impl.pvm.PvmProcessInstance;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/PvmScopesAndConcurrencyTest.java
Patch:
@@ -16,9 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.impl.pvm.ProcessDefinitionBuilder;
-import org.activiti.engine.impl.pvm.PvmException;
 import org.activiti.engine.impl.pvm.PvmExecution;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;
 import org.activiti.engine.impl.pvm.PvmProcessInstance;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/PvmVariablesTest.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class PvmVariablesTest extends PvmTestCase {
 
-  @Test
+  @Test //TODO JUnit 3 or 4???
   public void testVariables() {
     PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()
       .createActivity("a")

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/EmbeddedSubProcess.java
Patch:
@@ -57,7 +57,7 @@ public void lastExecutionEnded(ActivityExecution execution) {
   public void timerFires(ActivityExecution execution, String signalName, Object signalData) throws Exception {
     PvmActivity timerActivity = execution.getActivity();
     boolean isInterrupting = (Boolean) timerActivity.getProperty("isInterrupting");
-    List<ActivityExecution> recyclableExecutions = null;
+    List<ActivityExecution> recyclableExecutions;
     if (isInterrupting) {
       recyclableExecutions = removeAllExecutions(execution);
     } else {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/EventScopeCreatingSubprocess.java
Patch:
@@ -73,7 +73,7 @@ public void lastExecutionEnded(ActivityExecution execution) {
   public void timerFires(ActivityExecution execution, String signalName, Object signalData) throws Exception {
     PvmActivity timerActivity = execution.getActivity();
     boolean isInterrupting = (Boolean) timerActivity.getProperty("isInterrupting");
-    List<ActivityExecution> recyclableExecutions = null;
+    List<ActivityExecution> recyclableExecutions;
     if (isInterrupting) {
       recyclableExecutions = removeAllExecutions(execution);
     } else {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/regression/ActivitiTestCaseProcessValidator.java
Patch:
@@ -24,9 +24,8 @@ public List<ValidationError> validate(BpmnModel bpmnModel) {
       customParseValidator.executeParse(bpmnModel, process);
     }
  
-    ValidationError error = null;
     for (String errorRef : bpmnModel.getErrors().keySet()) {
-      error = new ValidationError();
+      ValidationError error = new ValidationError();
       error.setValidatorSetName("Manual BPMN parse validator");
       error.setProblem(errorRef);
       error.setActivityId(bpmnModel.getErrors().get(errorRef));

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/mail/EmailSendTaskTest.java
Patch:
@@ -88,7 +88,7 @@ public void testSendEmail() throws Exception {
     MimeMessage mimeMessage = message.getMimeMessage();
     
     assertEquals("Your order " + orderId + " has been shipped", mimeMessage.getHeader("Subject", null));
-    assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+    assertEquals("\"" + from + "\" <" +from + ">" , mimeMessage.getHeader("From", null));
     assertTrue(mimeMessage.getHeader("To", null).contains(recipient));
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -75,7 +75,7 @@ public void testSendEmail() throws Exception {
     MimeMessage mimeMessage = message.getMimeMessage();
     
     assertEquals("Your order " + orderId + " has been shipped", mimeMessage.getHeader("Subject", null));
-    assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+    assertEquals("\"" + from + "\" <" +from + ">" , mimeMessage.getHeader("From", null));
     assertTrue(mimeMessage.getHeader("To", null).contains(recipient));
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/ThrowsExceptionBehavior.java
Patch:
@@ -26,7 +26,7 @@ public class ThrowsExceptionBehavior implements ActivityBehavior {
   public void execute(ActivityExecution execution) throws Exception {
     String var = (String) execution.getVariable("var");
 
-    PvmTransition transition = null;
+    PvmTransition transition;
     try {
       executeLogic(var);
       transition = execution.getActivity().findOutgoingTransition("no-exception");

File: modules/activiti-engine/src/test/java/org/activiti/examples/identity/IdentityTest.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.examples.identity;
 
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -168,9 +169,7 @@ public void testMembership() {
 
   private Object createStringSet(String... strings) {
     Set<String> stringSet = new HashSet<String>();
-    for (String string : strings) {
-      stringSet.add(string);
-    }
+    Collections.addAll(stringSet, strings);
     return stringSet;
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/examples/pvm/Decision.java
Patch:
@@ -23,7 +23,7 @@
 public class Decision implements ActivityBehavior {
 
   public void execute(ActivityExecution execution) throws Exception {
-    PvmTransition transition = null; 
+    PvmTransition transition;
     String creditRating = (String) execution.getVariable("creditRating");
     if (creditRating.equals("AAA+")) {
       transition = execution.getActivity().findOutgoingTransition("wow");

File: modules/activiti-engine/src/test/java/org/activiti/examples/variables/VariablesTest.java
Patch:
@@ -28,11 +28,9 @@
 import org.activiti.engine.impl.variable.VariableType;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
-import org.activiti.engine.test.ActivitiRule;
 import org.activiti.engine.test.Deployment;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.ObjectUtils;
-import org.junit.Rule;
 import org.junit.Test;
 
 /**
@@ -155,7 +153,7 @@ public void testBasicVariableOperations() {
  
   
   // Test case for ACT-1839
-  @Test
+  @Test //TODO JUnit 3 or 4???
   @Deployment(resources = {"org/activiti/examples/variables/VariablesTest.testChangeTypeSerializable.bpmn20.xml"})
   public void testChangeTypeSerializable() {
 	  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("variable-type-change-test");

File: modules/activiti-engine/src/test/java/org/activiti/standalone/cfg/CustomMybatisMapperTest.java
Patch:
@@ -3,8 +3,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.net.ssl.HostnameVerifier;
-
 import org.activiti.engine.impl.cmd.AbstractCustomSqlExecution;
 import org.activiti.engine.impl.cmd.CustomSqlExecution;
 import org.activiti.engine.impl.test.ResourceActivitiTestCase;

File: modules/activiti-engine/src/test/java/org/activiti/standalone/deploy/DeploymentCacheLimitTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.text.MessageFormat;
 
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.persistence.deploy.DefaultDeploymentCache;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.engine.impl.test.ResourceActivitiTestCase;
@@ -33,7 +32,7 @@ public void testDeploymentCacheLimit() {
     int processDefinitionCacheLimit = 3; // This is set in the configuration above
     
     DefaultDeploymentCache<ProcessDefinitionEntity> processDefinitionCache = (DefaultDeploymentCache<ProcessDefinitionEntity>) 
-             ((ProcessEngineConfigurationImpl) processEngineConfiguration).getProcessDefinitionCache();
+              processEngineConfiguration.getProcessDefinitionCache();
     assertEquals(0, processDefinitionCache.size());
     
     

File: modules/activiti-engine/src/test/java/org/activiti/standalone/event/ProcessDefinitionScopedEventListenerDefinitionTest.java
Patch:
@@ -77,8 +77,8 @@ public void testProcessDefinitionListenerDefinition() throws Exception {
 		List<ActivitiEvent> events = StaticTestActivitiEventListener.getEventsReceived();
 		assertFalse(events.isEmpty());
 		
-		boolean insertFound = true;
-		boolean deleteFound = true;
+		boolean insertFound = false;
+		boolean deleteFound = false;
 		
 		for(ActivitiEvent e : events) {
 			if(ActivitiEventType.ENTITY_CREATED == e.getType() ) {

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/VariableUpdateExecutionListener.java
Patch:
@@ -17,7 +17,6 @@
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.Expression;
-import org.activiti.engine.impl.pvm.delegate.ExecutionListenerExecution;
 
 
 /**
@@ -29,7 +28,7 @@ public class VariableUpdateExecutionListener implements ExecutionListener {
   
   public void notify(DelegateExecution execution) throws Exception {
     String variableName = (String) varName.getValue(execution);
-    execution.setVariable(variableName, "Event: " + ((ExecutionListenerExecution)execution).getEventName());
+    execution.setVariable(variableName, "Event: " + execution.getEventName());
   }
  
 }

File: modules/activiti-engine/src/test/java/org/activiti/standalone/initialization/ProcessEngineInitializationTest.java
Patch:
@@ -60,8 +60,8 @@ public void testVersionMismatch() {
       Map<String, Object> parameters = new HashMap<String, Object>();
       parameters.put("name", "schema.version");
       parameters.put("value", "25.7");
-      parameters.put("revision", new Integer(1));
-      parameters.put("newRevision", new Integer(2));
+      parameters.put("revision", 1);
+      parameters.put("newRevision", 2);
       sqlSession.update("updateProperty", parameters);
       success = true;
     } catch (Exception e) {

File: modules/activiti-engine/src/test/java/org/activiti/standalone/testing/ActivitiRuleJunit4Test.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.ActivitiRule;
 import org.activiti.engine.test.Deployment;
-import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 

File: modules/activiti-engine/src/test/java/org/activiti/standalone/testing/MockSupportWithActivitiRuleTest.java
Patch:
@@ -37,7 +37,7 @@ protected void configureProcessEngine() {
 			activitiRule.mockSupport().mockServiceTaskWithClassDelegate("com.yourcompany.delegate", ServiceTaskTestMock.class);
 			activitiRule.mockSupport().mockServiceTaskWithClassDelegate("com.yourcompany.anotherDelegate",
 			    "org.activiti.standalone.testing.helpers.ServiceTaskTestMock");
-		};
+		}
 		
 	};
 

File: modules/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java
Patch:
@@ -1123,7 +1123,7 @@ public void drawLabel(String text, GraphicInfo graphicInfo, boolean centered){
     	  double tY = graphicInfo.getY();
     	  if (centered)
         	  tY += (int) (graphicInfo.getWidth() / 2 - bb.getWidth() / 2);
-    	  tl.draw(g, (float) tY, textY);
+    	  tl.draw(g, (float) graphicInfo.getX(), textY);
     	  textY += tl.getDescent() + tl.getLeading() + (interline - 1.0f) * tl.getAscent();
       }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -205,7 +205,7 @@ protected void addOrder(String column, String sortOrder, NullHandlingOnOrder nul
     			orderBy = orderBy + "isnull(" + column +") desc," + defaultOrderByClause;
     		} else if (ProcessEngineConfigurationImpl.DATABASE_TYPE_DB2.equals(databaseType)
     				|| ProcessEngineConfigurationImpl.DATABASE_TYPE_MSSQL.equals(databaseType)) {
-    			orderBy = orderBy + "case when " + column + " is null then 1 else 0 end," + defaultOrderByClause;
+    			orderBy = orderBy + "case when " + column + " is null then 0 else 1 end," + defaultOrderByClause;
     		} else {
     			orderBy = orderBy + defaultOrderByClause;
     		}
@@ -221,7 +221,7 @@ protected void addOrder(String column, String sortOrder, NullHandlingOnOrder nul
     			orderBy = orderBy + "isnull(" + column +") asc," + defaultOrderByClause;
     		} else if (ProcessEngineConfigurationImpl.DATABASE_TYPE_DB2.equals(databaseType)
     				|| ProcessEngineConfigurationImpl.DATABASE_TYPE_MSSQL.equals(databaseType)) {
-    			orderBy = orderBy + "case when " + column + " is null then 0 else 1 end," + defaultOrderByClause;
+    			orderBy = orderBy + "case when " + column + " is null then 1 else 0 end," + defaultOrderByClause;
     		} else {
     			orderBy = orderBy + defaultOrderByClause;
     		}

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -218,7 +218,7 @@ protected void addOrder(String column, String sortOrder, NullHandlingOnOrder nul
   					|| ProcessEngineConfigurationImpl.DATABASE_TYPE_ORACLE.equals(databaseType)) {
   				orderBy = orderBy + column + " "+sortOrder + " NULLS LAST";
   			} else if (ProcessEngineConfigurationImpl.DATABASE_TYPE_MYSQL.equals(databaseType)) {
-    			orderBy = orderBy + "order by isnull(" + column +") asc," + defaultOrderByClause;
+    			orderBy = orderBy + "isnull(" + column +") asc," + defaultOrderByClause;
     		} else if (ProcessEngineConfigurationImpl.DATABASE_TYPE_DB2.equals(databaseType)
     				|| ProcessEngineConfigurationImpl.DATABASE_TYPE_MSSQL.equals(databaseType)) {
     			orderBy = orderBy + "case when " + column + " is null then 0 else 1 end," + defaultOrderByClause;

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -49,7 +49,7 @@
 public interface ProcessEngine extends EngineServices {
 
   /** the version of the activiti library */
-  public static String VERSION = "5.16.2";
+  public static String VERSION = "5.16.3.0";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -104,6 +104,8 @@ public class DbSqlSession implements Session {
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.15.1"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16.1"));
+	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16.2-SNAPSHOT"));
+	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.16.2"));
 	  
 	  /* Current */
 	  

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ClaimTaskCmd.java
Patch:
@@ -45,7 +45,7 @@ protected Void execute(CommandContext commandContext, TaskEntity task) {
       }      
     } else {
       // Task should be assigned to no one
-      task.setAssignee(null);
+      task.setAssignee(null, true, true);
     }
     
     // Add claim time

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/AbstractTaskEventHandler.java
Patch:
@@ -26,7 +26,6 @@ protected Map<String, Object> handleCommonTaskFields(TaskEntity task) {
 		putInMapIfNotNull(data, Fields.PROCESS_DEFINITION_ID, task.getProcessDefinitionId());
 		putInMapIfNotNull(data, Fields.PROCESS_INSTANCE_ID, task.getProcessInstanceId());
 		putInMapIfNotNull(data, Fields.EXECUTION_ID, task.getExecutionId());
-		putInMapIfNotNull(data, Fields.TENANT_ID, task.getTenantId());
 		return data;
   }
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ProcessInstanceEndedEventHandler.java
Patch:
@@ -23,7 +23,6 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
 		putInMapIfNotNull(data, Fields.BUSINESS_KEY, processInstanceEntity.getBusinessKey());
 		putInMapIfNotNull(data, Fields.PROCESS_DEFINITION_ID, processInstanceEntity.getProcessDefinitionId());
 		putInMapIfNotNull(data, Fields.NAME, processInstanceEntity.getName());
-		putInMapIfNotNull(data, Fields.TENANT_ID, processInstanceEntity.getTenantId());
 		putInMapIfNotNull(data, Fields.END_TIME, timeStamp);
 		
 		return createEventLogEntry(TYPE, processInstanceEntity.getProcessDefinitionId(), processInstanceEntity.getId(), null, null, data);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ProcessInstanceStartedEventHandler.java
Patch:
@@ -26,7 +26,6 @@ public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext)
 		putInMapIfNotNull(data, Fields.BUSINESS_KEY, processInstanceEntity.getBusinessKey());
 		putInMapIfNotNull(data, Fields.PROCESS_DEFINITION_ID, processInstanceEntity.getProcessDefinitionId());
 		putInMapIfNotNull(data, Fields.NAME, processInstanceEntity.getName());
-		putInMapIfNotNull(data, Fields.TENANT_ID, processInstanceEntity.getTenantId());
 		putInMapIfNotNull(data, Fields.CREATE_TIME, timeStamp);
 		
 		if (eventWithVariables.getVariables() != null && eventWithVariables.getVariables().size() > 0) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/Deployment.java
Patch:
@@ -16,6 +16,8 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+
 /**
  * Annotation for a test method to create and delete a deployment around a test method.
  * 
@@ -51,5 +53,5 @@
 
   /** Specify resources that make up the process definition. */
   public String[] resources() default {};
-
+  
 }

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/FormDefinition.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
@@ -48,7 +49,7 @@ public void setDescription(String description) {
 /**
    * @return All {@link FormPropertyDefinition}s that are not part of any {@link FormPropertyGroup}.
    */
-  @JsonSerialize(contentAs=FormPropertyDefinition.class)
+  @JsonDeserialize(contentAs=FormPropertyDefinition.class)
   @JsonProperty(value="formProperties")
   public List<FormPropertyDefinition> getFormPropertyDefinitions() {
     return formProperties;

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/FormPropertyDefinition.java
Patch:
@@ -15,11 +15,11 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 
 /**
  * Defines one property in a {@link FormDefinition}.
@@ -92,7 +92,7 @@ public void setParameters(Map<String, Object> parameters) {
 	  this.parameters = parameters;
   }
   
-  @JsonSerialize(include=Inclusion.NON_EMPTY)
+  @JsonInclude(Include.NON_EMPTY)
   public Map<String, Object> getParameters() {
 	  return parameters;
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -125,7 +125,7 @@ public void testStartProcessInstanceWithBusinessKey() {
     processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess", "456", CollectionUtil.singletonMap("var", "value"));
     assertNotNull(processInstance);
     assertEquals(2, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
-    assertEquals("var", runtimeService.getVariable(processInstance.getId(), "var"));
+    assertEquals("value", runtimeService.getVariable(processInstance.getId(), "var"));
     
     // by id
     processInstance = runtimeService.startProcessInstanceById(processDefinition.getId(), "789");
@@ -136,7 +136,7 @@ public void testStartProcessInstanceWithBusinessKey() {
     processInstance = runtimeService.startProcessInstanceById(processDefinition.getId(), "101123", CollectionUtil.singletonMap("var", "value2"));
     assertNotNull(processInstance);
     assertEquals(4, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
-    assertEquals("var", runtimeService.getVariable(processInstance.getId(), "var"));
+    assertEquals("value2", runtimeService.getVariable(processInstance.getId(), "var"));
   }
   
   @Deployment(resources={

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -356,7 +356,7 @@ public void testNestedSubProcessesWithoutEndEvents() {
   }
 
   /**
-   * @see <a href="http://jira.codehaus.org/browse/ACT-1847">http://jira.codehaus.org/browse/ACT-1072</a>
+   * @see <a href="http://jira.codehaus.org/browse/ACT-1847">http://jira.codehaus.org/browse/ACT-1847</a>
    */
   @Deployment
   public void testDataObjectScope() {

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/UserTaskConverterTest.java
Patch:
@@ -79,6 +79,9 @@ private void validateModel(BpmnModel model) {
     assertTrue(ImplementationType.IMPLEMENTATION_TYPE_CLASS.equals(listener.getImplementationType()));
     assertEquals("org.test.TestClass", listener.getImplementation());
     assertEquals("create", listener.getEvent());
+    assertEquals(2, listener.getFieldExtensions().size());
+    assertEquals("testField", listener.getFieldExtensions().get(0).getFieldName());
+    assertEquals("test", listener.getFieldExtensions().get(0).getStringValue());
     listener = (ActivitiListener) listeners.get(1);
     assertTrue(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equals(listener.getImplementationType()));
     assertEquals("${someExpression}", listener.getImplementation());

File: modules/activiti-crystalball/src/main/java/org/activiti/crystalball/simulator/delegate/event/impl/EventLogUserTaskCompleteTransformer.java
Patch:
@@ -63,7 +63,7 @@ public SimulationEvent apply(EventLogEntry event) {
         localScope = true;
       }
       String taskDefinitionKeyValue = (String) data.get(Fields.TASK_DEFINITION_KEY);
-
+      
       Map<String, Object> properties = new HashMap<String, Object>();
       properties.put("taskId", taskIdValue);
       properties.put(TASK_DEFINITION_KEY, taskDefinitionKeyValue);

File: modules/activiti-crystalball/src/main/java/org/activiti/crystalball/simulator/impl/replay/ReplayUserTaskCompleteEventHandler.java
Patch:
@@ -44,6 +44,7 @@ public void handle(SimulationEvent event) {
         variableValueEquals(StartReplayLogEventHandler.PROCESS_INSTANCE_ID, processInstanceId).
         variableValueEquals(StartReplayLogEventHandler.SIMULATION_RUN_ID, simulationRunId).
         singleResult();
+    
     Task task = SimulationRunContext.getTaskService().createTaskQuery().
         processInstanceId(processInstance.getId()).
         taskDefinitionKey(taskDefinitionKey).

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/AbstractTaskEventHandler.java
Patch:
@@ -14,6 +14,7 @@ protected Map<String, Object> handleCommonTaskFields(TaskEntity task) {
 		Map<String, Object> data = new HashMap<String, Object>();
 		putInMapIfNotNull(data, Fields.ID, task.getId());
 		putInMapIfNotNull(data, Fields.NAME, task.getName());
+		putInMapIfNotNull(data, Fields.TASK_DEFINITION_KEY, task.getTaskDefinitionKey());
 		putInMapIfNotNull(data, Fields.DESCRIPTION, task.getDescription());
 		putInMapIfNotNull(data, Fields.ASSIGNEE, task.getAssignee());
 		putInMapIfNotNull(data, Fields.OWNER, task.getOwner());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -1056,7 +1056,7 @@ public boolean isIdentityTablePresent(){
   public boolean isTablePresent(String tableName) {
   	// ACT-1610: in case the prefix IS the schema itself, we don't add the prefix, since the
   	// check is already aware of the schema
-  	if(!dbSqlSessionFactory.isTablePrefixIsSchema()) {
+  	if (!dbSqlSessionFactory.isTablePrefixIsSchema()) {
   		tableName = prependDatabaseTablePrefix(tableName);
   	}
   	
@@ -1067,12 +1067,12 @@ public boolean isTablePresent(String tableName) {
       ResultSet tables = null;
 
       String catalog = this.connectionMetadataDefaultCatalog;
-      if (dbSqlSessionFactory.getDatabaseCatalog() != null) {
+      if (dbSqlSessionFactory.getDatabaseCatalog() != null && dbSqlSessionFactory.getDatabaseCatalog().length() > 0) {
         catalog = dbSqlSessionFactory.getDatabaseCatalog();
       }
 
       String schema = this.connectionMetadataDefaultSchema;
-      if (dbSqlSessionFactory.getDatabaseSchema()!=null) {
+      if (dbSqlSessionFactory.getDatabaseSchema() != null && dbSqlSessionFactory.getDatabaseSchema().length() > 0) {
         schema = dbSqlSessionFactory.getDatabaseSchema();
       }
       

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/JobEventsTest.java
Patch:
@@ -105,7 +105,7 @@ public void testRepetitionJobEntityEvents() throws Exception {
 
     processEngineConfiguration.setClock(testClock);
 
-    testClock.setCurrentTime(new Date(0));
+    testClock.setCurrentTime(new Date(1));
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testRepetitionJobEvents");
     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();
     assertNotNull(theJob);
@@ -156,7 +156,7 @@ public void testJobCanceledEventOnBoundaryEvent() throws Exception {
 
     processEngineConfiguration.setClock(testClock);
 
-    testClock.setCurrentTime(new Date(0));
+    testClock.setCurrentTime(new Date(1));
     runtimeService.startProcessInstanceByKey("testTimerCancelledEvent");
     listener.clearEventsReceived();
 
@@ -170,7 +170,7 @@ public void testJobCanceledEventOnBoundaryEvent() throws Exception {
   @Deployment(resources = "org/activiti/engine/test/api/event/JobEventsTest.testJobCanceledEventOnBoundaryEvent.bpmn20.xml")
   public void testJobCanceledEventByManagementService() throws Exception {
     // GIVEN
-    processEngineConfiguration.getClock().setCurrentTime(new Date(0));
+    processEngineConfiguration.getClock().setCurrentTime(new Date(1));
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testTimerCancelledEvent");
     listener.clearEventsReceived();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/FailedJobListener.java
Patch:
@@ -40,11 +40,12 @@ public FailedJobListener(CommandExecutor commandExecutor, String jobId, Throwabl
   }
   
   public void execute(CommandContext commandContext) {
+    CommandConfig commandConfig = commandExecutor.getDefaultConfig().transactionRequiresNew();
 	  FailedJobCommandFactory failedJobCommandFactory = commandContext.getFailedJobCommandFactory();
 	  Command<Object> cmd = failedJobCommandFactory.getCommand(jobId, exception);
 
 	  log.trace("Using FailedJobCommandFactory '" + failedJobCommandFactory.getClass() + "' and command of type '" + cmd.getClass() + "'");
-	  commandExecutor.execute(cmd);
+	  commandExecutor.execute(commandConfig, cmd);
   }
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -232,7 +232,7 @@ public void testQueryByException() {
     
     ProcessInstance processInstance = startProcessInstanceWithFailingJob();
     
-    query = managementService.createJobQuery().withException();
+    query = managementService.createJobQuery().processInstanceId(processInstance.getId()).withException();
     verifyFailedJob(query, processInstance);
   }
   

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ValuedDataObject.java
Patch:
@@ -25,9 +25,9 @@ public void setValues(ValuedDataObject otherElement) {
   
   public boolean equals(ValuedDataObject otherObject) {
     
-    if (otherObject.getItemSubjectRef().getStructureRef() != this.itemSubjectRef.getStructureRef()) return false;
-    if (otherObject.getId() != this.id) return false;
-    if (otherObject.getName() != this.name) return false;
+    if (!otherObject.getItemSubjectRef().getStructureRef().equals(this.itemSubjectRef.getStructureRef())) return false;
+    if (!otherObject.getId().equals(this.id)) return false;
+    if (!otherObject.getName().equals(this.name)) return false;
     if (!otherObject.getValue().equals(this.value.toString())) return false;
     
     return true;

File: modules/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/OperationValidator.java
Patch:
@@ -20,7 +20,7 @@ public void validate(BpmnModel bpmnModel, List<ValidationError> errors) {
 			for (Interface bpmnInterface : bpmnModel.getInterfaces()) {
 				if (bpmnInterface.getOperations() != null) {
 					for (Operation operation : bpmnInterface.getOperations()) {
-						if (bpmnModel.getMessages().contains(operation.getInMessageRef())) {
+						if (bpmnModel.getMessage(operation.getInMessageRef()) == null) {
 							addError(errors, Problems.OPERATION_INVALID_IN_MESSAGE_REFERENCE, null, operation, "Invalid inMessageRef for operation");
 						}
 					}

File: modules/activiti-process-validation/src/main/java/org/activiti/validation/validator/impl/OperationValidator.java
Patch:
@@ -20,7 +20,7 @@ public void validate(BpmnModel bpmnModel, List<ValidationError> errors) {
 			for (Interface bpmnInterface : bpmnModel.getInterfaces()) {
 				if (bpmnInterface.getOperations() != null) {
 					for (Operation operation : bpmnInterface.getOperations()) {
-						if (bpmnModel.getMessages().contains(operation.getInMessageRef())) {
+						if (bpmnModel.getMessage(operation.getInMessageRef()) == null) {
 							addError(errors, Problems.OPERATION_INVALID_IN_MESSAGE_REFERENCE, null, operation, "Invalid inMessageRef for operation");
 						}
 					}

File: modules/activiti-engine/src/main/java/org/activiti/engine/event/EventLogEntry.java
Patch:
@@ -23,6 +23,6 @@ public interface EventLogEntry {
 		
 		String getUserId();
 		
-		String getData();
+		byte[] getData();
 		
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/AbstractDatabaseEventLoggerEventHandler.java
Patch:
@@ -50,7 +50,7 @@ protected EventLogEntryEntity createEventLogEntry(String type, String processDef
 				putInMapIfNotNull(data, "userId", userId);
 			}
 			
-			eventLogEntry.setData(objectMapper.writeValueAsString(data));
+			eventLogEntry.setData(objectMapper.writeValueAsBytes(data));
 		
 			return eventLogEntry;
 			

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -434,6 +434,9 @@ public interface TaskService {
   /** The comments related to the given process instance. */
   List<Comment> getProcessInstanceComments(String processInstanceId);
 
+  /** The comments related to the given process instance. */
+  List<Comment> getProcessInstanceComments(String processInstanceId, String type);
+
   /** Add a new attachment to a task and/or a process instance and use an input stream to provide the content */
   Attachment createAttachment(String attachmentType, String taskId, String processInstanceId, String attachmentName, String attachmentDescription, InputStream content);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -53,6 +53,7 @@ private TimerEntity(TimerEntity te) {
     retries = te.retries;
     executionId = te.executionId;
     processInstanceId = te.processInstanceId;
+    processDefinitionId = te.processDefinitionId;
 
     // Inherit tenant
     tenantId = te.tenantId;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -53,6 +53,7 @@ private TimerEntity(TimerEntity te) {
     retries = te.retries;
     executionId = te.executionId;
     processInstanceId = te.processInstanceId;
+    processDefinitionId = te.processDefinitionId;
 
     // Inherit tenant
     tenantId = te.tenantId;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -138,7 +138,8 @@ else if (dueDateValue instanceof Date) {
     if (executionEntity != null) {
       timer.setExecution(executionEntity);
       timer.setProcessDefinitionId(executionEntity.getProcessDefinitionId());
-      
+      timer.setProcessInstanceId(executionEntity.getProcessInstanceId());
+
       // Inherit tenant identifier (if applicable)
       if (executionEntity != null && executionEntity.getTenantId() != null) {
       	timer.setTenantId(executionEntity.getTenantId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -138,7 +138,8 @@ else if (dueDateValue instanceof Date) {
     if (executionEntity != null) {
       timer.setExecution(executionEntity);
       timer.setProcessDefinitionId(executionEntity.getProcessDefinitionId());
-      
+      timer.setProcessInstanceId(executionEntity.getProcessInstanceId());
+
       // Inherit tenant identifier (if applicable)
       if (executionEntity != null && executionEntity.getTenantId() != null) {
       	timer.setTenantId(executionEntity.getTenantId());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -415,11 +415,9 @@ public void testVariableUpdateOrderHistoricTaskInstance() throws Exception {
     Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     assertNotNull(task);
     
-    // Update task and process-variable 10 times, using explicit removeVariables to have multiple revisions recorded
+    // Update task and process-variable 10 times
     for(int i=0; i<10; i++) {
-    	taskService.removeVariableLocal(task.getId(), "taskVar");
     	taskService.setVariableLocal(task.getId(), "taskVar", i);
-    	runtimeService.removeVariable(task.getExecutionId(), "procVar");
     	runtimeService.setVariable(task.getExecutionId(), "procVar", i);
     }
     

File: modules/activiti-crystalball/src/main/java/org/activiti/crystalball/simulator/delegate/event/impl/ProcessInstanceCreateTransformer.java
Patch:
@@ -44,7 +44,7 @@ public ProcessInstanceCreateTransformer(String simulationEventType, String proce
 
   @Override
   public SimulationEvent apply(ActivitiEvent event) {
-    if (ActivitiEventType.ENTITY_CREATED.equals(event.getType()) &&
+    if (ActivitiEventType.ENTITY_INITIALIZED.equals(event.getType()) &&
       (event instanceof ActivitiEntityEvent) &&
       ((ActivitiEntityEvent) event).getEntity() instanceof ProcessInstance &&
       ((ExecutionEntity) ((ActivitiEntityEvent) event).getEntity()).isProcessInstanceType()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -96,7 +96,7 @@ public void insert() {
       execution.addJob(this);
       
       // Inherit tenant if (if applicable)
-      if (execution != null && execution.getTenantId() != null) {
+      if (execution.getTenantId() != null) {
       	setTenantId(execution.getTenantId());
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/SequenceFlowParseHandler.java
Patch:
@@ -45,7 +45,6 @@ protected void executeParse(BpmnParse bpmnParse, SequenceFlow sequenceFlow) {
     bpmnParse.getSequenceFlows().put(sequenceFlow.getId(), transition);
     transition.setProperty("name", sequenceFlow.getName());
     transition.setProperty("documentation", sequenceFlow.getDocumentation());
-    System.out.println("flow " + sourceActivity.getId() + " " + sequenceFlow.getTargetRef() + " " + destinationActivity);
     transition.setDestination(destinationActivity);
 
     if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntityManager.java
Patch:
@@ -102,7 +102,7 @@ public List<SignalEventSubscriptionEntity> findSignalEventSubscriptionsByProcess
     
     // add events created in this command (not visible yet in query)
     for (SignalEventSubscriptionEntity entity : createdSignalSubscriptions) {
-      if(processInstanceId.equals(processInstanceId) && eventName.equals(entity.getEventName())) {
+      if(processInstanceId.equals(entity.getProcessInstanceId()) && eventName.equals(entity.getEventName())) {
         selectList.add(entity);        
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/SequenceFlowParseHandler.java
Patch:
@@ -45,7 +45,6 @@ protected void executeParse(BpmnParse bpmnParse, SequenceFlow sequenceFlow) {
     bpmnParse.getSequenceFlows().put(sequenceFlow.getId(), transition);
     transition.setProperty("name", sequenceFlow.getName());
     transition.setProperty("documentation", sequenceFlow.getDocumentation());
-    System.out.println("flow " + sourceActivity.getId() + " " + sequenceFlow.getTargetRef() + " " + destinationActivity);
     transition.setDestination(destinationActivity);
 
     if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/validation/ProcessValidationTest.java
Patch:
@@ -51,7 +51,7 @@ public void parseXml() throws Exception {
 	@Test
 	public void verifyValidation() {
 		List<ValidationError> allErrors = processValidator.validate(bpmnModel);
-		Assert.assertEquals(64, allErrors.size());
+		Assert.assertEquals(65, allErrors.size());
 		
 		String setName = ValidatorSetNames.ACTIVITI_EXECUTABLE_PROCESS; // shortening it a bit
 		
@@ -99,7 +99,7 @@ public void verifyValidation() {
 		// Sequence flow
 		problems = findErrors(allErrors, setName, Problems.SEQ_FLOW_INVALID_SRC, 1);
 		assertCommonProblemFieldForActivity(problems.get(0));
-		problems = findErrors(allErrors, setName, Problems.SEQ_FLOW_INVALID_TARGET, 1);
+		problems = findErrors(allErrors, setName, Problems.SEQ_FLOW_INVALID_TARGET, 2);
 		assertCommonProblemFieldForActivity(problems.get(0));
 		
 		// User task

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/SequenceFlowParseHandler.java
Patch:
@@ -45,6 +45,7 @@ protected void executeParse(BpmnParse bpmnParse, SequenceFlow sequenceFlow) {
     bpmnParse.getSequenceFlows().put(sequenceFlow.getId(), transition);
     transition.setProperty("name", sequenceFlow.getName());
     transition.setProperty("documentation", sequenceFlow.getDocumentation());
+    System.out.println("flow " + sourceActivity.getId() + " " + sequenceFlow.getTargetRef() + " " + destinationActivity);
     transition.setDestination(destinationActivity);
 
     if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/EventLogger.java
Patch:
@@ -121,7 +121,7 @@ public void closed(CommandContext commandContext) {
 	protected EventLoggerEventHandler getEventHandler(ActivitiEvent event) {
 
 		Class<? extends EventLoggerEventHandler> eventHandlerClass = null;
-		if (event.getType().equals(ActivitiEventType.ENTITY_CREATED)) {
+		if (event.getType().equals(ActivitiEventType.ENTITY_INITIALIZED)) {
 			Object entity = ((ActivitiEntityEvent) event).getEntity();
 			if (entity instanceof ExecutionEntity) {
 				ExecutionEntity executionEntity = (ExecutionEntity) entity;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -255,6 +255,8 @@ public ExecutionEntity createExecution() {
     if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
       Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
         ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, createdExecution));
+      Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
+              ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, createdExecution));
     }
 
     return createdExecution;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationProcessStart.java
Patch:
@@ -43,7 +43,7 @@ protected String getEventName() {
   protected void eventNotificationsCompleted(InterpretableExecution execution) {
   	if(Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
     	Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
-    			ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, execution));
+    			ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, execution));
     }
   	
     ProcessDefinitionImpl processDefinition = execution.getProcessDefinition();

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -82,8 +82,9 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-model").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-converter").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-process-validation").version("5.16-SNAPSHOT"),
+        mavenBundle().groupId("org.activiti").artifactId("activiti-image-generator").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.16-SNAPSHOT"),
-        mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.1"),
+        mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.3.2"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.2.3"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.2.3"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-annotations").version("2.2.3"),

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/BaseStepDefinitionConverter.java
Patch:
@@ -161,6 +161,7 @@ protected List<FormProperty> convertProperties(FormDefinition formDefinition) {
             formValue.setName(entry.getName());
             formValues.add(formValue);
           }
+          formProperty.setFormValues(formValues);
         }
       } else {
       	// Fallback to simple text

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/validation/ProcessValidationTest.java
Patch:
@@ -51,7 +51,7 @@ public void parseXml() throws Exception {
 	@Test
 	public void verifyValidation() {
 		List<ValidationError> allErrors = processValidator.validate(bpmnModel);
-		Assert.assertEquals(64, allErrors.size());
+		Assert.assertEquals(65, allErrors.size());
 		
 		String setName = ValidatorSetNames.ACTIVITI_EXECUTABLE_PROCESS; // shortening it a bit
 		
@@ -99,7 +99,7 @@ public void verifyValidation() {
 		// Sequence flow
 		problems = findErrors(allErrors, setName, Problems.SEQ_FLOW_INVALID_SRC, 1);
 		assertCommonProblemFieldForActivity(problems.get(0));
-		problems = findErrors(allErrors, setName, Problems.SEQ_FLOW_INVALID_TARGET, 1);
+		problems = findErrors(allErrors, setName, Problems.SEQ_FLOW_INVALID_TARGET, 2);
 		assertCommonProblemFieldForActivity(problems.get(0));
 		
 		// User task

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/SequenceFlowParseHandler.java
Patch:
@@ -45,6 +45,7 @@ protected void executeParse(BpmnParse bpmnParse, SequenceFlow sequenceFlow) {
     bpmnParse.getSequenceFlows().put(sequenceFlow.getId(), transition);
     transition.setProperty("name", sequenceFlow.getName());
     transition.setProperty("documentation", sequenceFlow.getDocumentation());
+    System.out.println("flow " + sourceActivity.getId() + " " + sequenceFlow.getTargetRef() + " " + destinationActivity);
     transition.setDestination(destinationActivity);
 
     if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -82,8 +82,9 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-model").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-converter").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-process-validation").version("5.16-SNAPSHOT"),
+        mavenBundle().groupId("org.activiti").artifactId("activiti-image-generator").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.16-SNAPSHOT"),
-        mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.1"),
+        mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.3.2"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.2.3"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.2.3"),
         mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-annotations").version("2.2.3"),

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/regression/DeleteProcessInstanceTest.java
Patch:
@@ -18,9 +18,9 @@
 /**
  * From http://forums.activiti.org/content/inability-completely-delete-process-instance-when
  */
-public class DeleteProcessInstanceFailure extends PluggableActivitiTestCase{
+public class DeleteProcessInstanceTest extends PluggableActivitiTestCase{
 	
-	private static Logger log = LoggerFactory.getLogger(DeleteProcessInstanceFailure.class);
+	private static Logger log = LoggerFactory.getLogger(DeleteProcessInstanceTest.class);
 	
 	@Deployment
 	public void testNoEndTimeSet() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationDeleteCascadeFireActivityEnd.java
Patch:
@@ -50,7 +50,6 @@ protected void eventNotificationsCompleted(InterpretableExecution execution) {
     ActivityImpl activity = (ActivityImpl) execution.getActivity();
     if ( (execution.isScope())
             && (activity!=null)
-            && (!activity.isScope())
           )  {
       execution.setActivity(activity.getParentActivity());
       execution.performOperation(AtomicOperation.DELETE_CASCADE_FIRE_ACTIVITY_END);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -191,6 +191,7 @@ public void testDeleteProcessInstance() {
       
       assertNotNull(historicInstance);
       assertEquals(deleteReason, historicInstance.getDeleteReason());
+      assertNotNull(historicInstance.getEndTime());
     }    
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/DatabaseEventLoggerTest.java
Patch:
@@ -290,7 +290,6 @@ public void testDatabaseEvents() throws JsonParseException, JsonMappingException
 				assertNotNull(data.get(Fields.ID));
 				assertNotNull(data.get(Fields.PROCESS_DEFINITION_ID));
 				assertNotNull(data.get(Fields.TENANT_ID));
-				assertNotNull(data.get(Fields.DURATION));
 				
 				assertFalse(data.containsKey(Fields.NAME));
 				assertFalse(data.containsKey(Fields.BUSINESS_KEY));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/DatabaseEventFlusher.java
Patch:
@@ -14,7 +14,7 @@ public class DatabaseEventFlusher extends AbstractEventFlusher {
 	public void closing(CommandContext commandContext) {
 		EventLogEntryEntityManager eventLogEntryEntityManager = commandContext.getEventLogEntryEntityManager();
 		for (EventLoggerEventHandler eventHandler : eventHandlers) {
-			eventLogEntryEntityManager.insert(eventHandler.generateEventLogEntry());
+			eventLogEntryEntityManager.insert(eventHandler.generateEventLogEntry(commandContext));
 		}
 	}
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityCompletedEventHandler.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 
 /**
@@ -12,7 +13,7 @@
 public class ActivityCompletedEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 	
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 		ActivitiActivityEvent activityEvent = (ActivitiActivityEvent) event;
 		
 		Map<String, Object> data = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/ActivityStartedEventHandler.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.delegate.event.ActivitiActivityEvent;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 
 /**
@@ -12,7 +13,7 @@
 public class ActivityStartedEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 	
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 		ActivitiActivityEvent activityEvent = (ActivitiActivityEvent) event;
 		
 		Map<String, Object> data = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/EngineClosedEventHandler.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 
 /**
@@ -13,7 +14,7 @@
 public class EngineClosedEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 		Map<String, Object> data = new HashMap<String, Object>();
 		try {
 	    data.put("ip", InetAddress.getLocalHost().getHostAddress()); // Note that this might give the wrong ip address in case of multiple network interfaces - but it's better than nothing.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/EngineCreatedEventHandler.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 
 /**
@@ -13,7 +14,7 @@
 public class EngineCreatedEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 		Map<String, Object> data = new HashMap<String, Object>();
 		try {
 	    data.put("ip", InetAddress.getLocalHost().getHostAddress()); // Note that this might give the wrong ip address in case of multiple network interfaces - but it's better than nothing.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/EventLoggerEventHandler.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.Date;
 
 import org.activiti.engine.delegate.event.ActivitiEvent;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -12,7 +13,7 @@
  */
 public interface EventLoggerEventHandler {
 	
-	EventLogEntryEntity generateEventLogEntry();
+	EventLogEntryEntity generateEventLogEntry(CommandContext commandContext);
 	
 	void setEvent(ActivitiEvent event);
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/SequenceFlowTakenEventHandler.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.delegate.event.ActivitiSequenceFlowTakenEvent;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 
 /**
@@ -12,7 +13,7 @@
 public class SequenceFlowTakenEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 	
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 		ActivitiSequenceFlowTakenEvent sequenceFlowTakenEvent = (ActivitiSequenceFlowTakenEvent) event;
 		
 		Map<String, Object> data = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/TaskCompletedEventHandler.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
 
@@ -13,7 +14,7 @@
 public class TaskCompletedEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 	
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 
 		TaskEntity task = (TaskEntity) ((ActivitiEntityEvent) event).getEntity();
 		long duration = timeStamp.getTime() - task.getCreateTime().getTime();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/logger/handler/TaskCreatedEventHandler.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
+import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
 
@@ -13,7 +14,7 @@
 public class TaskCreatedEventHandler extends AbstractDatabaseEventLoggerEventHandler {
 	
 	@Override
-	public EventLogEntryEntity generateEventLogEntry() {
+	public EventLogEntryEntity generateEventLogEntry(CommandContext commandContext) {
 		
 		TaskEntity task = (TaskEntity) ((ActivitiEntityEvent) event).getEntity();
 		

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/DatabaseEventLoggerTest.java
Patch:
@@ -66,7 +66,7 @@ public void testDatabaseEvents() throws JsonParseException, JsonMappingException
 			if (i == 0) {
 				
 				assertNotNull(entry.getType());
-				assertEquals(entry.getType(), "PROCESSINSTANCE-START");
+				assertEquals(entry.getType(), "PROCESSINSTANCE_START");
 				assertNotNull(entry.getProcessDefinitionId());
 				assertNotNull(entry.getProcessInstanceId());
 				assertNotNull(entry.getTimeStamp());
@@ -279,7 +279,7 @@ public void testDatabaseEvents() throws JsonParseException, JsonMappingException
 				
 			if (i == 12) {
 				assertNotNull(entry.getType());
-				assertEquals(entry.getType(), "PROCESSINSTANCE-END");
+				assertEquals(entry.getType(), "PROCESSINSTANCE_END");
 				assertNotNull(entry.getProcessDefinitionId());
 				assertNotNull(entry.getProcessInstanceId());
 				assertNotNull(entry.getTimeStamp());
@@ -290,6 +290,7 @@ public void testDatabaseEvents() throws JsonParseException, JsonMappingException
 				assertNotNull(data.get(Fields.ID));
 				assertNotNull(data.get(Fields.PROCESS_DEFINITION_ID));
 				assertNotNull(data.get(Fields.TENANT_ID));
+				assertNotNull(data.get(Fields.DURATION));
 				
 				assertFalse(data.containsKey(Fields.NAME));
 				assertFalse(data.containsKey(Fields.BUSINESS_KEY));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -101,6 +101,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificOrderByStatements.put("oracle", defaultOrderBy);
     addDatabaseSpecificStatement("oracle", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
     addDatabaseSpecificStatement("oracle", "selectUnlockedTimersByDuedate", "selectUnlockedTimersByDuedate_oracle");
+    addDatabaseSpecificStatement("oracle", "insertEventLogEntry", "insertEventLogEntry_oracle");
 
     // db2
     databaseSpecificLimitBeforeStatements.put("db2", "SELECT SUB.* FROM (");

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/BaseStepDefinitionConverter.java
Patch:
@@ -161,6 +161,7 @@ protected List<FormProperty> convertProperties(FormDefinition formDefinition) {
             formValue.setName(entry.getName());
             formValues.add(formValue);
           }
+          formProperty.setFormValues(formValues);
         }
       } else {
       	// Fallback to simple text

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -89,6 +89,9 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectCommentsByType", "selectCommentsByType_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskIdAndType", "selectCommentsByTaskIdAndType_postgres");
     addDatabaseSpecificStatement("postgres", "selectEventsByTaskId", "selectEventsByTaskId_postgres");
+    addDatabaseSpecificStatement("postgres", "insertEventLogEntry", "insertEventLogEntry_postgres");
+    addDatabaseSpecificStatement("postgres", "selectAllEventLogEntries", "selectAllEventLogEntries_postgres");
+    addDatabaseSpecificStatement("postgres", "selectEventLogEntries", "selectEventLogEntries_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/ExtensionElementsParser.java
Patch:
@@ -46,8 +46,10 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
       if (xtr.isStartElement()) {
         if (ELEMENT_EXECUTION_LISTENER.equals(xtr.getLocalName())) {
           new ExecutionListenerParser().parseChildElement(xtr, parentElement, model);
-        } else if(ELEMENT_EVENT_LISTENER.equals(xtr.getLocalName())){
+        } else if (ELEMENT_EVENT_LISTENER.equals(xtr.getLocalName())){
         	new ActivitiEventListenerParser().parseChildElement(xtr, parentElement, model);
+        } else if (ELEMENT_POTENTIAL_STARTER.equals(xtr.getLocalName())){
+          new PotentialStarterParser().parse(xtr, activeProcess);
         } else {
           ExtensionElement extensionElement = BpmnXMLUtil.parseExtensionElement(xtr);
           parentElement.addExtensionElement(extensionElement);

File: modules/activiti-camel/src/main/java/org/activiti/camel/CamelBehavior.java
Patch:
@@ -24,6 +24,7 @@
 import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.BpmnActivityBehavior;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;
@@ -60,7 +61,7 @@
 * @author Ryan Johnston (@rjfsu), Tijs Rademakers, Saeid Mirzaei
 * @version 5.12
 */
-public abstract class CamelBehavior extends BpmnActivityBehavior implements ActivityBehavior {
+public abstract class CamelBehavior extends AbstractBpmnActivityBehavior implements ActivityBehavior {
 
   private static final long serialVersionUID = 1L;
   protected Expression camelContext;
@@ -131,7 +132,7 @@ public Void call() {
       execution.setVariables(ExchangeUtils.prepareVariables(exchange, endpoint));
     }
   
-    performDefaultOutgoingBehavior(execution);
+    leave(execution);
   }
 
   protected ActivitiEndpoint createEndpoint(ActivityExecution execution) {

File: modules/activiti-crystalball/src/main/java/org/activiti/crystalball/process/SimulationRunTask.java
Patch:
@@ -31,9 +31,10 @@ public class SimulationRunTask implements JavaDelegate {
   @Override
   public void execute(DelegateExecution execution) throws Exception {
     SimulationRun simulationRun = (SimulationRun) simulationRunExpression.getValue(execution);
-    simulationRun.execute();
+    simulationRun.execute(execution);
   }
 
+  @SuppressWarnings("UnusedDeclaration")
   public void setSimulationRun(Expression simulationRun) {
     this.simulationRunExpression = simulationRun;
   }

File: modules/activiti-crystalball/src/main/java/org/activiti/crystalball/simulator/ReplaySimulationRun.java
Patch:
@@ -14,6 +14,7 @@
  */
 
 
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.ProcessEngineImpl;
 
 import java.util.Map;
@@ -39,7 +40,7 @@ public ReplaySimulationRun(ProcessEngineImpl processEngine, EventCalendar eventC
   }
 
   @Override
-  protected void initSimulationRunContext() {
+  protected void initSimulationRunContext(VariableScope execution) {
     SimulationRunContext.setEventCalendar(eventCalendar);
     SimulationRunContext.setProcessEngine(processEngine);
   }

File: modules/activiti-crystalball/src/main/java/org/activiti/crystalball/simulator/SimpleSimulationRun.java
Patch:
@@ -17,6 +17,7 @@
 import org.activiti.crystalball.simulator.impl.AcquireJobNotificationEventHandler;
 import org.activiti.crystalball.simulator.impl.NoopEventHandler;
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
 
@@ -55,11 +56,12 @@ public void close() {
   }
 
   @Override
-  protected void initSimulationRunContext() {// init new process engine
+  protected void initSimulationRunContext(VariableScope execution) {// init new process engine
     try {
     // add context in which simulation run is executed
     SimulationRunContext.setEventCalendar(eventCalendar);
     SimulationRunContext.setProcessEngine(processEngine);
+    SimulationRunContext.setExecution(execution);
 
     // run simulation
     // init context and task calendar and simulation time is set to current

File: modules/activiti-crystalball/src/test/java/org/activiti/crystalball/simulator/impl/playback/AbstractPlaybackTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.activiti.engine.delegate.event.ActivitiEvent;
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.activiti.engine.impl.el.NoExecutionVariableScope;
 import org.activiti.engine.impl.test.AbstractActivitiTestCase;
 import org.activiti.engine.impl.test.TestHelper;
 import org.activiti.engine.impl.util.DefaultClockImpl;
@@ -111,7 +112,7 @@ private void runPlayback() throws Throwable {
         .eventHandlers(getHandlers());
       simDebugger = builder.build();
 
-      simDebugger.init();
+      simDebugger.init(new NoExecutionVariableScope());
       this.processEngine = SimulationRunContext.getProcessEngine();
       initializeServices();
       deploymentIdFromDeploymentAnnotation = TestHelper.annotationDeploymentSetUp(processEngine, getClass(), getName());

File: modules/activiti-crystalball/src/test/java/org/activiti/crystalball/simulator/impl/playback/PlaybackRunTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.activiti.engine.impl.el.NoExecutionVariableScope;
 import org.activiti.engine.impl.util.DefaultClockImpl;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.runtime.Clock;
@@ -82,7 +83,7 @@ public void testProcessInstanceStartEvents() throws Exception {
       .eventHandlers(getHandlers());
     SimpleSimulationRun simRun = builder.build();
 
-    simRun.execute();
+    simRun.execute(new NoExecutionVariableScope());
 
     checkStatus(simProcessEngine);
 

File: modules/activiti-crystalball/src/test/java/org/activiti/crystalball/simulator/impl/replay/ReplayRunTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.activiti.engine.delegate.event.ActivitiEventListener;
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.activiti.engine.impl.el.NoExecutionVariableScope;
 import org.activiti.engine.parse.BpmnParseHandler;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
@@ -82,7 +83,7 @@ public void testProcessInstanceStartEvents() throws Exception {
 
     final SimulationDebugger simRun = new ReplaySimulationRun(processEngine, getReplayHandlers(processInstance.getId()));
 
-    simRun.init();
+    simRun.init(new NoExecutionVariableScope());
 
     // original process is finished - there should not be any running process instance/task
     assertEquals(0, runtimeService.createProcessInstanceQuery().processDefinitionKey(USERTASK_PROCESS).count());

File: modules/activiti-diagram-rest/src/main/java/org/activiti/rest/diagram/services/ProcessDefinitionDiagramLayoutResource.java
Patch:
@@ -56,7 +56,7 @@ public class ProcessDefinitionDiagramLayoutResource extends SecuredResource {
 
   // List<Object> sequenceFlowList = new ArrayList<Object>();
 
-  @Get
+  @Get("json")
   public ObjectNode getDiagram() {
     // TODO: do it all with Map and convert at the end to JSON
     processDefinitionId = (String) getRequest().getAttributes().get("processDefinitionId");

File: modules/activiti-diagram-rest/src/main/java/org/activiti/rest/diagram/services/ProcessInstanceHighlightsResource.java
Patch:
@@ -36,7 +36,7 @@ public class ProcessInstanceHighlightsResource extends SecuredResource {
 	
 	protected ObjectMapper objectMapper = new ObjectMapper();
 
-	@Get
+	@Get("json")
 	public ObjectNode getHighlighted() {
 		String processInstanceId = (String) getRequest().getAttributes().get("processInstanceId");
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -17,13 +17,13 @@
 
 import javax.sql.DataSource;
 
-import org.activiti.engine.impl.bpmn.diagram.ProcessDiagramGenerator;
 import org.activiti.engine.impl.cfg.BeansConfigurationHelper;
 import org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
 import org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration;
 import org.activiti.engine.impl.history.HistoryLevel;
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
 import org.activiti.engine.runtime.Clock;
+import org.activiti.image.ProcessDiagramGenerator;
 
 
 /** Configuration information from which a process engine can be build.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -61,7 +61,6 @@
 import org.activiti.engine.impl.TaskServiceImpl;
 import org.activiti.engine.impl.bpmn.data.ItemInstance;
 import org.activiti.engine.impl.bpmn.deployer.BpmnDeployer;
-import org.activiti.engine.impl.bpmn.diagram.DefaultProcessDiagramGenerator;
 import org.activiti.engine.impl.bpmn.parser.BpmnParseHandlers;
 import org.activiti.engine.impl.bpmn.parser.BpmnParser;
 import org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory;
@@ -210,6 +209,7 @@
 import org.activiti.engine.impl.variable.VariableType;
 import org.activiti.engine.impl.variable.VariableTypes;
 import org.activiti.engine.parse.BpmnParseHandler;
+import org.activiti.image.impl.DefaultProcessDiagramGenerator;
 import org.activiti.validation.ProcessValidator;
 import org.activiti.validation.ProcessValidatorFactory;
 import org.apache.commons.lang3.ObjectUtils;

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/model/ModelEditorJsonRestResource.java
Patch:
@@ -34,7 +34,7 @@ public class ModelEditorJsonRestResource extends ServerResource implements Model
   protected static final Logger LOGGER = LoggerFactory.getLogger(ModelEditorJsonRestResource.class);
   private ObjectMapper objectMapper = new ObjectMapper();
   
-  @Get
+  @Get("json")
   public ObjectNode getEditorJson() {
     ObjectNode modelNode = null;
     String modelId = (String) getRequest().getAttributes().get("modelId");

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/form/FormDataResource.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class FormDataResource extends SecuredResource {
 
-  @Get
+  @Get("json")
   public FormDataResponse getFormData() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceBaseResource.java
Patch:
@@ -48,7 +48,7 @@ public class HistoricActivityInstanceBaseResource extends SecuredResource {
     allowedSortProperties.put("tenantId", HistoricActivityInstanceQueryProperty.TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   protected DataResponse getQueryResponse(HistoricActivityInstanceQueryRequest queryRequest, Form urlQuery) {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricActivityInstanceCollectionResource extends HistoricActivityInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricActivityInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricDetailCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricDetailCollectionResource extends HistoricDetailBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricDetailInfo() {
     if (!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricProcessInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricProcessInstanceCollectionResource extends HistoricProcessInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricTaskInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricTaskInstanceCollectionResource extends HistoricTaskInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricVariableInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricVariableInstanceCollectionResource extends HistoricVariableInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricActivityInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/GroupCollectionResource.java
Patch:
@@ -44,7 +44,7 @@ public class GroupCollectionResource extends SecuredResource {
     properties.put("type", GroupQueryProperty.TYPE);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getGroups() {
     if(!authenticate())
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/UserCollectionResource.java
Patch:
@@ -45,7 +45,7 @@ public class UserCollectionResource extends SecuredResource {
     properties.put("email", UserQueryProperty.EMAIL);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getUsers() {
     if(!authenticate())
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/TasksResource.java
Patch:
@@ -43,7 +43,7 @@ public TasksResource() {
     properties.put("processInstanceId", TaskQueryProperty.PROCESS_INSTANCE_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getTasks() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/deployment/DeploymentsResource.java
Patch:
@@ -38,7 +38,7 @@ public DeploymentsResource() {
     properties.put("deploymentTime", DeploymentQueryProperty.DEPLOY_TIME);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getDeployments() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyGroupSearchResource.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class LegacyGroupSearchResource extends SecuredResource {
 
-  @Get
+  @Get("json")
   public DataResponse searchGroups() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyGroupUsersResource.java
Patch:
@@ -44,7 +44,7 @@ public LegacyGroupUsersResource() {
     properties.put("email", UserQueryProperty.EMAIL);
   }
 
-  @Get
+  @Get("json")
   public DataResponse getGroups() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyUserGroupsResource.java
Patch:
@@ -44,7 +44,7 @@ public LegacyUserGroupsResource() {
     properties.put("type", GroupQueryProperty.TYPE);
   }
 
-  @Get
+  @Get("json")
   public DataResponse getGroups() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyUserSearchResource.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class LegacyUserSearchResource extends SecuredResource {
   
-  @Get
+  @Get("json")
   public DataResponse searchUsers() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/management/JobsResource.java
Patch:
@@ -42,7 +42,7 @@ public JobsResource() {
     properties.put("retries", JobQueryProperty.RETRIES);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getJobs() {
     if(authenticate(SecuredResource.ADMIN) == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/LegacyProcessInstancesResource.java
Patch:
@@ -39,7 +39,7 @@ public LegacyProcessInstancesResource() {
     properties.put("startTime", HistoricProcessInstanceQueryProperty.START_TIME);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getProcessInstances() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/ProcessDefinitionsResource.java
Patch:
@@ -43,7 +43,7 @@ public ProcessDefinitionsResource() {
     properties.put("category", ProcessDefinitionQueryProperty.PROCESS_DEFINITION_CATEGORY);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getProcessDefinitions() {
     if(authenticate() == false) return null;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/ProcessInstanceTaskResource.java
Patch:
@@ -41,7 +41,7 @@ public ProcessInstanceTaskResource() {
 		properties.put("processInstanceId", TaskQueryProperty.PROCESS_INSTANCE_ID);
 	}
 
-	@Get
+	@Get("json")
 	public DataResponse getTasks() {
 		if (authenticate() == false)
 			return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/management/JobCollectionResource.java
Patch:
@@ -44,7 +44,7 @@ public class JobCollectionResource extends SecuredResource {
     properties.put("tenantId", JobQueryProperty.TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getJobs() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/management/TableDataResource.java
Patch:
@@ -30,7 +30,7 @@ public class TableDataResource extends SecuredResource {
   
   protected static final Integer DEFAULT_RESULT_SIZE = 10;
 
-  @Get
+  @Get("json")
   public DataResponse getTableData() {
     if(authenticate() == false) return null;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/DeploymentCollectionResource.java
Patch:
@@ -57,7 +57,7 @@ public class DeploymentCollectionResource extends SecuredResource {
     allowedSortProperties.put("tenantId", DeploymentQueryProperty.DEPLOYMENT_TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getDeployments() {
   	if(!authenticate()) { return null; }
   	

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ModelCollectionResource.java
Patch:
@@ -47,7 +47,7 @@ public class ModelCollectionResource extends BaseModelResource {
     allowedSortProperties.put("tenantId", ModelQueryProperty.MODEL_TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getModels() {
   	if(authenticate() == false) return null;
   	

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ProcessDefinitionCollectionResource.java
Patch:
@@ -42,7 +42,7 @@ public class ProcessDefinitionCollectionResource extends SecuredResource {
     properties.put("deploymentId", ProcessDefinitionQueryProperty.DEPLOYMENT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getProcessDefinitions() {
     if(authenticate() == false) return null;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ExecutionCollectionResource extends ExecutionBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCollectionResource.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class ProcessInstanceCollectionResource extends BaseProcessInstanceResource {
 
-  @Get
+  @Get("json")
   public DataResponse getProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskBaseResource.java
Patch:
@@ -160,6 +160,9 @@ protected DataResponse getTasksFromQueryRequest(TaskQueryRequest request) {
     if(request.getCandidateGroup() != null) {
       taskQuery.taskCandidateGroup(request.getCandidateGroup());
     }
+    if(request.getCandidateGroupIn() != null) {
+      taskQuery.taskCandidateGroupIn(request.getCandidateGroupIn());
+    }
     if(request.getProcessInstanceId() != null) {
       taskQuery.processInstanceId(request.getProcessInstanceId());
     }

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskCollectionResource.java
Patch:
@@ -50,7 +50,7 @@ public TaskResponse createTask(TaskRequest taskRequest) {
             .createTaskResponse(this, task);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getTasks() {
     if(!authenticate()) { return null; }
     

File: modules/activiti-simple-workflow-alfresco/src/main/java/org/activiti/workflow/simple/alfresco/form/AlfrescoTransitionsPropertyDefinition.java
Patch:
@@ -20,7 +20,8 @@
 import org.activiti.workflow.simple.definition.form.ListPropertyDefinition;
 import org.activiti.workflow.simple.definition.form.ListPropertyEntry;
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 public class AlfrescoTransitionsPropertyDefinition extends FormPropertyDefinition {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -557,7 +557,8 @@ public List<PersistentObject> getUpdatedObjects() {
         PersistentObject persistentObject = cachedObject.getPersistentObject();
         if (!isPersistentObjectDeleted(persistentObject)) {
           Object originalState = cachedObject.getPersistentObjectState();
-          if (!persistentObject.getPersistentState().equals(originalState)) {
+          if (persistentObject.getPersistentState() != null && 
+          		!persistentObject.getPersistentState().equals(originalState)) {
             updatedObjects.add(persistentObject);
           } else {
             log.trace("loaded object '{}' was not updated", persistentObject);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/InterpretableExecution.java
Patch:
@@ -29,6 +29,8 @@
 public interface InterpretableExecution extends ActivityExecution, ExecutionListenerExecution, PvmProcessInstance {
 
   void take(PvmTransition transition);
+  
+  void take(PvmTransition transition, boolean fireActivityCompletedEvent);
 
   void setEventName(String eventName);
 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.activiti.engine.task.IdentityLinkType;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.Deployment;
-import org.activiti.examples.bpmn.tasklistener.CandidateGroupAssignment;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
 import org.restlet.data.Status;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -164,7 +164,7 @@ public void testQueryTasks() throws Exception {
       ArrayNode arrayNode =  requestNode.arrayNode();
       
       arrayNode.add("sales");
-      arrayNode.add("somethingElse");
+      arrayNode.add("someOtherGroup");
       
       requestNode.put("candidateGroupIn", arrayNode);
       assertResultsPresentInDataResponse(url, requestNode, processTask.getId());

File: modules/activiti-camel/src/main/java/org/activiti/camel/CamelBehavior.java
Patch:
@@ -24,6 +24,7 @@
 import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.BpmnActivityBehavior;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.pvm.PvmProcessDefinition;
@@ -60,7 +61,7 @@
 * @author Ryan Johnston (@rjfsu), Tijs Rademakers, Saeid Mirzaei
 * @version 5.12
 */
-public abstract class CamelBehavior extends BpmnActivityBehavior implements ActivityBehavior {
+public abstract class CamelBehavior extends AbstractBpmnActivityBehavior implements ActivityBehavior {
 
   private static final long serialVersionUID = 1L;
   protected Expression camelContext;
@@ -131,7 +132,7 @@ public Void call() {
       execution.setVariables(ExchangeUtils.prepareVariables(exchange, endpoint));
     }
   
-    performDefaultOutgoingBehavior(execution);
+    leave(execution);
   }
 
   protected ActivitiEndpoint createEndpoint(ActivityExecution execution) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/DefaultDeploymentCache.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine.impl.persistence.deploy;
 
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -37,7 +38,7 @@ public DefaultDeploymentCache() {
   
   /** Cache which has a hard limit: no more elements will be cached than the limit. */
   public DefaultDeploymentCache(final int limit) {
-    this.cache = new LinkedHashMap<String, T>(limit + 1, 0.75f, true) { // +1 is needed, because the entry is inserted first, before it is removed
+    this.cache = Collections.synchronizedMap(new LinkedHashMap<String, T>(limit + 1, 0.75f, true) { // +1 is needed, because the entry is inserted first, before it is removed
                                                                        // 0.75 is the default (see javadocs)
                                                                        // true will keep the 'access-order', which is needed to have a real LRU cache
       private static final long serialVersionUID = 1L;
@@ -50,7 +51,7 @@ protected boolean removeEldestEntry(java.util.Map.Entry<String, T> eldest) {
         return removeEldest;
       }
       
-    };
+    });
   }
   
   public T get(String id) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/ExtensionElementsParser.java
Patch:
@@ -46,8 +46,10 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
       if (xtr.isStartElement()) {
         if (ELEMENT_EXECUTION_LISTENER.equals(xtr.getLocalName())) {
           new ExecutionListenerParser().parseChildElement(xtr, parentElement, model);
-        } else if(ELEMENT_EVENT_LISTENER.equals(xtr.getLocalName())){
+        } else if (ELEMENT_EVENT_LISTENER.equals(xtr.getLocalName())){
         	new ActivitiEventListenerParser().parseChildElement(xtr, parentElement, model);
+        } else if (ELEMENT_POTENTIAL_STARTER.equals(xtr.getLocalName())){
+          new PotentialStarterParser().parse(xtr, activeProcess);
         } else {
           ExtensionElement extensionElement = BpmnXMLUtil.parseExtensionElement(xtr);
           parentElement.addExtensionElement(extensionElement);

File: modules/activiti-diagram-rest/src/main/java/org/activiti/rest/diagram/services/ProcessDefinitionDiagramLayoutResource.java
Patch:
@@ -56,7 +56,7 @@ public class ProcessDefinitionDiagramLayoutResource extends SecuredResource {
 
   // List<Object> sequenceFlowList = new ArrayList<Object>();
 
-  @Get
+  @Get("json")
   public ObjectNode getDiagram() {
     // TODO: do it all with Map and convert at the end to JSON
     processDefinitionId = (String) getRequest().getAttributes().get("processDefinitionId");

File: modules/activiti-diagram-rest/src/main/java/org/activiti/rest/diagram/services/ProcessInstanceHighlightsResource.java
Patch:
@@ -36,7 +36,7 @@ public class ProcessInstanceHighlightsResource extends SecuredResource {
 	
 	protected ObjectMapper objectMapper = new ObjectMapper();
 
-	@Get
+	@Get("json")
 	public ObjectNode getHighlighted() {
 		String processInstanceId = (String) getRequest().getAttributes().get("processInstanceId");
 

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/model/ModelEditorJsonRestResource.java
Patch:
@@ -34,7 +34,7 @@ public class ModelEditorJsonRestResource extends ServerResource implements Model
   protected static final Logger LOGGER = LoggerFactory.getLogger(ModelEditorJsonRestResource.class);
   private ObjectMapper objectMapper = new ObjectMapper();
   
-  @Get
+  @Get("json")
   public ObjectNode getEditorJson() {
     ObjectNode modelNode = null;
     String modelId = (String) getRequest().getAttributes().get("modelId");

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/form/FormDataResource.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class FormDataResource extends SecuredResource {
 
-  @Get
+  @Get("json")
   public FormDataResponse getFormData() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceBaseResource.java
Patch:
@@ -48,7 +48,7 @@ public class HistoricActivityInstanceBaseResource extends SecuredResource {
     allowedSortProperties.put("tenantId", HistoricActivityInstanceQueryProperty.TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   protected DataResponse getQueryResponse(HistoricActivityInstanceQueryRequest queryRequest, Form urlQuery) {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricActivityInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricActivityInstanceCollectionResource extends HistoricActivityInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricActivityInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricDetailCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricDetailCollectionResource extends HistoricDetailBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricDetailInfo() {
     if (!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricProcessInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricProcessInstanceCollectionResource extends HistoricProcessInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricTaskInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricTaskInstanceCollectionResource extends HistoricTaskInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricVariableInstanceCollectionResource.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HistoricVariableInstanceCollectionResource extends HistoricVariableInstanceBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getHistoricActivityInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/GroupCollectionResource.java
Patch:
@@ -44,7 +44,7 @@ public class GroupCollectionResource extends SecuredResource {
     properties.put("type", GroupQueryProperty.TYPE);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getGroups() {
     if(!authenticate())
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/UserCollectionResource.java
Patch:
@@ -45,7 +45,7 @@ public class UserCollectionResource extends SecuredResource {
     properties.put("email", UserQueryProperty.EMAIL);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getUsers() {
     if(!authenticate())
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/TasksResource.java
Patch:
@@ -43,7 +43,7 @@ public TasksResource() {
     properties.put("processInstanceId", TaskQueryProperty.PROCESS_INSTANCE_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getTasks() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/deployment/DeploymentsResource.java
Patch:
@@ -38,7 +38,7 @@ public DeploymentsResource() {
     properties.put("deploymentTime", DeploymentQueryProperty.DEPLOY_TIME);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getDeployments() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyGroupSearchResource.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class LegacyGroupSearchResource extends SecuredResource {
 
-  @Get
+  @Get("json")
   public DataResponse searchGroups() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyGroupUsersResource.java
Patch:
@@ -44,7 +44,7 @@ public LegacyGroupUsersResource() {
     properties.put("email", UserQueryProperty.EMAIL);
   }
 
-  @Get
+  @Get("json")
   public DataResponse getGroups() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyUserGroupsResource.java
Patch:
@@ -44,7 +44,7 @@ public LegacyUserGroupsResource() {
     properties.put("type", GroupQueryProperty.TYPE);
   }
 
-  @Get
+  @Get("json")
   public DataResponse getGroups() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyUserSearchResource.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class LegacyUserSearchResource extends SecuredResource {
   
-  @Get
+  @Get("json")
   public DataResponse searchUsers() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/management/JobsResource.java
Patch:
@@ -42,7 +42,7 @@ public JobsResource() {
     properties.put("retries", JobQueryProperty.RETRIES);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getJobs() {
     if(authenticate(SecuredResource.ADMIN) == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/LegacyProcessInstancesResource.java
Patch:
@@ -39,7 +39,7 @@ public LegacyProcessInstancesResource() {
     properties.put("startTime", HistoricProcessInstanceQueryProperty.START_TIME);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getProcessInstances() {
     if(authenticate() == false) return null;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/ProcessDefinitionsResource.java
Patch:
@@ -43,7 +43,7 @@ public ProcessDefinitionsResource() {
     properties.put("category", ProcessDefinitionQueryProperty.PROCESS_DEFINITION_CATEGORY);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getProcessDefinitions() {
     if(authenticate() == false) return null;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/ProcessInstanceTaskResource.java
Patch:
@@ -41,7 +41,7 @@ public ProcessInstanceTaskResource() {
 		properties.put("processInstanceId", TaskQueryProperty.PROCESS_INSTANCE_ID);
 	}
 
-	@Get
+	@Get("json")
 	public DataResponse getTasks() {
 		if (authenticate() == false)
 			return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/management/JobCollectionResource.java
Patch:
@@ -44,7 +44,7 @@ public class JobCollectionResource extends SecuredResource {
     properties.put("tenantId", JobQueryProperty.TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getJobs() {
     if (authenticate() == false)
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/management/TableDataResource.java
Patch:
@@ -30,7 +30,7 @@ public class TableDataResource extends SecuredResource {
   
   protected static final Integer DEFAULT_RESULT_SIZE = 10;
 
-  @Get
+  @Get("json")
   public DataResponse getTableData() {
     if(authenticate() == false) return null;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/DeploymentCollectionResource.java
Patch:
@@ -57,7 +57,7 @@ public class DeploymentCollectionResource extends SecuredResource {
     allowedSortProperties.put("tenantId", DeploymentQueryProperty.DEPLOYMENT_TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getDeployments() {
   	if(!authenticate()) { return null; }
   	

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ModelCollectionResource.java
Patch:
@@ -47,7 +47,7 @@ public class ModelCollectionResource extends BaseModelResource {
     allowedSortProperties.put("tenantId", ModelQueryProperty.MODEL_TENANT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getModels() {
   	if(authenticate() == false) return null;
   	

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ProcessDefinitionCollectionResource.java
Patch:
@@ -42,7 +42,7 @@ public class ProcessDefinitionCollectionResource extends SecuredResource {
     properties.put("deploymentId", ProcessDefinitionQueryProperty.DEPLOYMENT_ID);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getProcessDefinitions() {
     if(authenticate() == false) return null;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ExecutionCollectionResource extends ExecutionBaseResource {
 
-  @Get
+  @Get("json")
   public DataResponse getProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCollectionResource.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class ProcessInstanceCollectionResource extends BaseProcessInstanceResource {
 
-  @Get
+  @Get("json")
   public DataResponse getProcessInstances() {
     if(!authenticate()) {
       return null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskCollectionResource.java
Patch:
@@ -50,7 +50,7 @@ public TaskResponse createTask(TaskRequest taskRequest) {
             .createTaskResponse(this, task);
   }
   
-  @Get
+  @Get("json")
   public DataResponse getTasks() {
     if(!authenticate()) { return null; }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -115,7 +115,7 @@ public Void execute(CommandContext commandContext) {
     
     // switch all sub-executions of the process instance to the new process definition version
     List<ExecutionEntity> childExecutions = executionManager
-      .findChildExecutionsByParentExecutionId(processInstanceId);
+      .findChildExecutionsByProcessInstanceId(processInstanceId);
     for (ExecutionEntity executionEntity : childExecutions) {
       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/deploy/DeploymentManager.java
Patch:
@@ -65,7 +65,7 @@ public ProcessDefinitionEntity findDeployedProcessDefinitionById(String processD
     processDefinition = resolveProcessDefinition(processDefinition);
     return processDefinition;
   }
-
+  
   public ProcessDefinitionEntity findDeployedLatestProcessDefinitionByKey(String processDefinitionKey) {
     ProcessDefinitionEntity processDefinition = Context
       .getCommandContext()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1105,6 +1105,7 @@ public Object getPersistentState() {
     persistentState.put("isScope", this.isScope);
     persistentState.put("isEventScope", this.isEventScope);
     persistentState.put("parentId", parentId);
+    persistentState.put("name", name);
     persistentState.put("superExecution", this.superExecutionId);
     if (forcedUpdate) {
       persistentState.put("forcedUpdate", Boolean.TRUE);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntity.java
Patch:
@@ -65,6 +65,7 @@ public Object getPersistentState() {
     Map<String, Object> persistentState = (Map<String, Object>) new HashMap<String, Object>();
     persistentState.put("endTime", endTime);
     persistentState.put("businessKey", businessKey);
+    persistentState.put("name", name);
     persistentState.put("durationInMillis", durationInMillis);
     persistentState.put("deleteReason", deleteReason);
     persistentState.put("endStateName", endActivityId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/runtime/ProcessInstanceQuery.java
Patch:
@@ -209,12 +209,12 @@ public interface ProcessInstanceQuery extends Query<ProcessInstanceQuery, Proces
   /**
    * Only select process instances with the given name.
    */
-  ProcessInstanceQuery name(String name);
+  ProcessInstanceQuery processInstanceName(String name);
   
   /**
    * Only select process instances with a name like the given value. 
    */
-  ProcessInstanceQuery nameLike(String nameLike);
+  ProcessInstanceQuery processInstanceNameLike(String nameLike);
   
   /**
    * Include process variables in the process query result

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetTableMetaData() {
     
     TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix+"ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
-    assertEquals(18, tableMetaData.getColumnNames().size());
+    assertEquals(19, tableMetaData.getColumnNames().size());
 
     int assigneeIndex = tableMetaData.getColumnNames().indexOf("ASSIGNEE_");
     int createTimeIndex = tableMetaData.getColumnNames().indexOf("CREATE_TIME_");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -115,7 +115,7 @@ public Void execute(CommandContext commandContext) {
     
     // switch all sub-executions of the process instance to the new process definition version
     List<ExecutionEntity> childExecutions = executionManager
-      .findChildExecutionsByParentExecutionId(processInstanceId);
+      .findChildExecutionsByProcessInstanceId(processInstanceId);
     for (ExecutionEntity executionEntity : childExecutions) {
       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);
     }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/DefinitionsParser.java
Patch:
@@ -39,7 +39,7 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
     model.setTargetNamespace(xtr.getAttributeValue(null, TARGET_NAMESPACE_ATTRIBUTE));
     for (int i = 0; i < xtr.getNamespaceCount(); i++) {
       String prefix = xtr.getNamespacePrefix(i);
-      if (prefix != null) {
+      if (StringUtils.isNotEmpty(prefix)) {
         model.addNamespace(prefix, xtr.getNamespaceURI(i));
       }
     }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ExtensionElement.java
Patch:
@@ -64,9 +64,10 @@ public ExtensionElement clone() {
   
   public void setValues(ExtensionElement otherElement) {
     setName(otherElement.getName());
-    setNamespace(otherElement.getNamespacePrefix());
+    setNamespacePrefix(otherElement.getNamespacePrefix());
     setNamespace(otherElement.getNamespace());
     setElementText(otherElement.getElementText());
+    setAttributes(otherElement.getAttributes());
     
     childElements = new LinkedHashMap<String, List<ExtensionElement>>();
     if (otherElement.getChildElements() != null && otherElement.getChildElements().size() > 0) {

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ValuedDataObject.java
Patch:
@@ -18,6 +18,9 @@ public Object getValue() {
 
   public void setValues(ValuedDataObject otherElement) {
     super.setValues(otherElement);
+    if (otherElement.getValue() != null) {
+      setValue(otherElement.getValue());
+    }
     setValue(otherElement.getValue());
   }
   

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -84,7 +84,9 @@ public Option[] createConfiguration() {
         mavenBundle().groupId("org.activiti").artifactId("activiti-process-validation").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.16-SNAPSHOT"),
         mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.1"),
-        mavenBundle().groupId("org.codehaus.jackson").artifactId("jackson-core-asl").version("1.9.9"),
+        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-core").version("2.2.3"),
+        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-databind").version("2.2.3"),
+        mavenBundle().groupId("com.fasterxml.jackson.core").artifactId("jackson-annotations").version("2.2.3"),
         mavenBundle().groupId("log4j").artifactId("log4j").version("1.2.17"),
         mavenBundle().groupId("joda-time").artifactId("joda-time").version("2.1"),
         mavenBundle().groupId("com.h2database").artifactId("h2").version("1.3.170"),

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/BoundaryEvent.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.bpmn.model;
 
-import org.codehaus.jackson.annotate.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Lane.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.codehaus.jackson.annotate.JsonBackReference;
+import com.fasterxml.jackson.annotation.JsonBackReference;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ParallelGateway.java
Patch:
@@ -16,7 +16,7 @@
  * @author Tijs Rademakers
  */
 public class ParallelGateway extends Gateway {
-
+  
   public ParallelGateway clone() {
     ParallelGateway clone = new ParallelGateway();
     clone.setValues(this);

File: modules/activiti-common-rest/src/main/java/org/activiti/rest/common/application/ActivitiStatusService.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.ActivitiOptimisticLockingException;
 import org.activiti.engine.ActivitiTaskAlreadyClaimedException;
 import org.activiti.rest.common.api.RestError;
-import org.codehaus.jackson.map.JsonMappingException;
 import org.restlet.Request;
 import org.restlet.Response;
 import org.restlet.data.Status;
@@ -28,6 +27,8 @@
 import org.restlet.resource.ResourceException;
 import org.restlet.service.StatusService;
 
+import com.fasterxml.jackson.databind.JsonMappingException;
+
 
 /**
  * Custom {@link StatusService}, translating dedicated {@link ActivitiException}'s into HTTP-response
@@ -62,7 +63,7 @@ public Representation getRepresentation(Status status, Request request, Response
   @Override
   public Status getStatus(Throwable throwable, Request request, Response response) {
     Status status = null;
-    if(throwable instanceof JsonMappingException && throwable.getCause() != null) {
+    if (throwable instanceof JsonMappingException && throwable.getCause() != null) {
       // Possible that the Jackson-unmarchalling has a more specific cause. if no specific exception caused
       // the throwable, it will be handled as a normal exception
       status = getSpecificStatus(throwable.getCause(), request, response);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -15,13 +15,13 @@
 
 import java.util.List;
 
+import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.pvm.PvmActivity;
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
 /**
  * Implementation of the Parallel Gateway/AND gateway as definined in the BPMN
@@ -60,7 +60,6 @@ public void execute(ActivityExecution execution) throws Exception {
     // Join
     PvmActivity activity = execution.getActivity();
     List<PvmTransition> outgoingTransitions = execution.getActivity().getOutgoingTransitions();
-    
     execution.inactivate();
     lockConcurrentRoot(execution);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -55,7 +55,7 @@ protected void createInstances(ActivityExecution execution) throws Exception {
       
       // In case of an embedded subprocess, and extra child execution is required
       // Otherwise, all child executions would end up under the same parent,
-      // without any differentation to which embedded subprocess they belong
+      // without any differentiation to which embedded subprocess they belong
       if (isExtraScopeNeeded()) {
         ActivityExecution extraScopedExecution = concurrentExecution.createExecution();
         extraScopedExecution.setActive(true);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -101,7 +101,7 @@ public class DbSqlSession implements Session {
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.13"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.14"));
 	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.15"));
-	  
+	  ACTIVITI_VERSIONS.add(new ActivitiVersion("5.15.1"));
 	  
 	  /* Current */
 	  

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -32,9 +32,7 @@ public String getType() {
   public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {
     // ATM only AtomicOperationTransitionCreateScope can be performed asynchronously 
     AtomicOperation atomicOperation = AtomicOperation.TRANSITION_CREATE_SCOPE;
-    
-    commandContext
-      .performOperation(atomicOperation, execution);
+    commandContext.performOperation(atomicOperation, execution);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -555,7 +555,7 @@ protected boolean allExecutionsInSameActivity(List<ExecutionEntity> executions)
   }
   
   public void performOperation(AtomicOperation executionOperation) {
-    if(executionOperation.isAsync(this)) {
+    if (executionOperation.isAsync(this)) {
       scheduleAtomicOperationAsync(executionOperation);
     } else {
       performOperationSync(executionOperation);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -77,10 +77,8 @@ public void execute(CommandContext commandContext) {
     if (executionId != null) {
       execution = commandContext.getExecutionEntityManager().findExecutionById(executionId);
     }
-
     Map<String, JobHandler> jobHandlers = Context.getProcessEngineConfiguration().getJobHandlers();
     JobHandler jobHandler = jobHandlers.get(jobHandlerType);
-
     jobHandler.execute(this, jobHandlerConfiguration, execution, commandContext);
   }
   

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ConvertProcessDefinitionPopupWindow.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.io.InputStream;
 import java.io.InputStreamReader;
-
 import java.net.URL;
 
 import javax.xml.stream.XMLInputFactory;
@@ -35,9 +34,9 @@
 import org.activiti.explorer.NotificationManager;
 import org.activiti.explorer.ui.custom.PopupWindow;
 import org.apache.commons.lang3.StringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.vaadin.terminal.ExternalResource;
 import com.vaadin.ui.Alignment;
 import com.vaadin.ui.Button;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/CopyModelPopupWindow.java
Patch:
@@ -21,9 +21,9 @@
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.ui.custom.PopupWindow;
 import org.apache.commons.lang3.StringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.vaadin.terminal.Sizeable;
 import com.vaadin.terminal.UserError;
 import com.vaadin.ui.Alignment;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionDetailPanel.java
Patch:
@@ -38,12 +38,12 @@
 import org.activiti.explorer.ui.process.simple.editor.SimpleTableEditorConstants;
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 import org.activiti.workflow.simple.definition.WorkflowDefinition;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.vaadin.data.Property.ValueChangeEvent;
 import com.vaadin.data.Property.ValueChangeListener;
 import com.vaadin.terminal.DownloadStream;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ImportUploadReceiver.java
Patch:
@@ -34,9 +34,9 @@
 import org.activiti.explorer.NotificationManager;
 import org.activiti.explorer.ViewManager;
 import org.apache.commons.lang3.StringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.vaadin.ui.Upload.FinishedEvent;
 import com.vaadin.ui.Upload.FinishedListener;
 import com.vaadin.ui.Upload.Receiver;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/demo/DemoDataGenerator.java
Patch:
@@ -35,11 +35,12 @@
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.task.Task;
 import org.apache.commons.io.IOUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 
 /**
  * @author Joram Barrez

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/listener/EditModelClickListener.java
Patch:
@@ -18,10 +18,10 @@
 import org.activiti.explorer.ui.process.simple.editor.SimpleTableEditorConstants;
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 import org.activiti.workflow.simple.definition.WorkflowDefinition;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.vaadin.terminal.ExternalResource;
 import com.vaadin.ui.Button.ClickEvent;
 import com.vaadin.ui.Button.ClickListener;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ActivityProcessor.java
Patch:
@@ -18,8 +18,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.FlowElement;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ArrayNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ArrayNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BusinessRuleTaskJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BusinessRuleTask;
 import org.activiti.bpmn.model.FlowElement;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/CatchEventJsonConverter.java
Patch:
@@ -21,8 +21,9 @@
 import org.activiti.bpmn.model.IntermediateCatchEvent;
 import org.activiti.bpmn.model.MessageEventDefinition;
 import org.activiti.bpmn.model.SignalEventDefinition;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/EndEventJsonConverter.java
Patch:
@@ -20,8 +20,9 @@
 import org.activiti.bpmn.model.ErrorEventDefinition;
 import org.activiti.bpmn.model.EventDefinition;
 import org.activiti.bpmn.model.FlowElement;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/EventGatewayJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.EventGateway;
 import org.activiti.bpmn.model.FlowElement;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ExclusiveGatewayJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.ExclusiveGateway;
 import org.activiti.bpmn.model.FlowElement;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/InclusiveGatewayJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.InclusiveGateway;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/MailTaskJsonConverter.java
Patch:
@@ -19,8 +19,9 @@
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ServiceTask;
 import org.apache.commons.lang3.StringUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ManualTaskJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ManualTask;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ParallelGatewayJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ParallelGateway;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ReceiveTaskJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ReceiveTask;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ScriptTaskJsonConverter.java
Patch:
@@ -17,8 +17,9 @@
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.ScriptTask;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ServiceTaskJsonConverter.java
Patch:
@@ -20,8 +20,9 @@
 import org.activiti.bpmn.model.ImplementationType;
 import org.activiti.bpmn.model.ServiceTask;
 import org.apache.commons.lang3.StringUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/StartEventJsonConverter.java
Patch:
@@ -23,8 +23,9 @@
 import org.activiti.bpmn.model.SignalEventDefinition;
 import org.activiti.bpmn.model.StartEvent;
 import org.activiti.bpmn.model.TimerEventDefinition;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ThrowEventJsonConverter.java
Patch:
@@ -20,8 +20,9 @@
 import org.activiti.bpmn.model.FlowElement;
 import org.activiti.bpmn.model.SignalEventDefinition;
 import org.activiti.bpmn.model.ThrowEvent;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/util/JsonConverterUtil.java
Patch:
@@ -5,7 +5,8 @@
 
 import org.activiti.editor.constants.EditorJsonConstants;
 import org.activiti.editor.constants.StencilConstants;
-import org.codehaus.jackson.JsonNode;
+
+import com.fasterxml.jackson.databind.JsonNode;
 
 public class JsonConverterUtil implements EditorJsonConstants, StencilConstants {
   

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/model/ModelEditorJsonRestResource.java
Patch:
@@ -17,14 +17,15 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.repository.Model;
 import org.apache.commons.lang3.StringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.Status;
 import org.restlet.resource.Get;
 import org.restlet.resource.ServerResource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * @author Tijs Rademakers
  */

File: modules/activiti-modeler/src/main/java/org/activiti/rest/editor/model/ModelSaveRestResource.java
Patch:
@@ -23,15 +23,16 @@
 import org.apache.batik.transcoder.TranscoderInput;
 import org.apache.batik.transcoder.TranscoderOutput;
 import org.apache.batik.transcoder.image.PNGTranscoder;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.Form;
 import org.restlet.data.Status;
 import org.restlet.resource.Put;
 import org.restlet.resource.ServerResource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * @author Tijs Rademakers
  */

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/engine/variable/DateRestVariableConverter.java
Patch:
@@ -17,7 +17,8 @@
 import java.util.Date;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
-import org.codehaus.jackson.map.util.ISO8601DateFormat;
+
+import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/form/SubmitFormRequest.java
Patch:
@@ -17,8 +17,9 @@
 import java.util.List;
 
 import org.activiti.rest.service.api.RestActionRequest;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricProcessInstanceQueryRequest.java
Patch:
@@ -18,8 +18,9 @@
 
 import org.activiti.rest.common.api.PaginateRequest;
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricTaskInstanceQueryRequest.java
Patch:
@@ -18,8 +18,9 @@
 
 import org.activiti.rest.common.api.PaginateRequest;
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricVariableInstanceQueryRequest.java
Patch:
@@ -16,8 +16,9 @@
 import java.util.List;
 
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/UserInfoRequest.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti.rest.service.api.identity;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
-import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/UserRequest.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.rest.service.api.identity;
 
-import org.codehaus.jackson.annotate.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/identity/UserResponse.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti.rest.service.api.identity;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
-import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/TasksSummaryResource.java
Patch:
@@ -21,10 +21,11 @@
 import org.activiti.engine.identity.GroupQuery;
 import org.activiti.rest.common.api.ActivitiUtil;
 import org.activiti.rest.common.api.SecuredResource;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.resource.Get;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * @author Tijs Rademakers
  */

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/deployment/DeploymentDeleteResource.java
Patch:
@@ -16,11 +16,12 @@
 import org.activiti.rest.common.api.ActivitiUtil;
 import org.activiti.rest.common.api.RequestUtil;
 import org.activiti.rest.common.api.SecuredResource;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.Status;
 import org.restlet.resource.Delete;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * @author Tijs Rademakers
  */

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/identity/LegacyUserGroupsDeleteResource.java
Patch:
@@ -17,8 +17,8 @@
 import org.activiti.engine.identity.Group;
 import org.activiti.rest.common.api.ActivitiUtil;
 import org.activiti.rest.common.api.SecuredResource;
-import org.restlet.resource.Delete;
 import org.restlet.data.Status;
+import org.restlet.resource.Delete;
 
 /**
  * @author Ernesto Revilla

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/legacy/process/ProcessInstanceDiagramResource.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.rest.service.api.legacy.process;
 
+import java.io.InputStream;
+
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
@@ -30,8 +32,6 @@
 import org.restlet.representation.InputRepresentation;
 import org.restlet.resource.Get;
 
-import java.io.InputStream;
-
 /**
  * @author Tijs Rademakers
  */

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/repository/ModelRequest.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.rest.service.api.repository;
 
-import org.codehaus.jackson.annotate.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionActionRequest.java
Patch:
@@ -17,8 +17,9 @@
 
 import org.activiti.rest.service.api.RestActionRequest;
 import org.activiti.rest.service.api.engine.variable.RestVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 /**
  * @author Frederik Heremans

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionBaseResource.java
Patch:
@@ -28,8 +28,8 @@
 import org.activiti.rest.common.api.SecuredResource;
 import org.activiti.rest.service.api.RestResponseFactory;
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.activiti.rest.service.api.engine.variable.RestVariable;
 import org.activiti.rest.service.api.engine.variable.QueryVariable.QueryVariableOperation;
+import org.activiti.rest.service.api.engine.variable.RestVariable;
 import org.activiti.rest.service.application.ActivitiRestServicesApplication;
 import org.restlet.data.Form;
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionQueryRequest.java
Patch:
@@ -17,8 +17,9 @@
 
 import org.activiti.rest.common.api.PaginateRequest;
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceDiagramResource.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.rest.service.api.runtime.process;
 
+import java.io.InputStream;
+
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.ProcessEngineImpl;
@@ -25,8 +27,6 @@
 import org.restlet.representation.InputRepresentation;
 import org.restlet.resource.Get;
 
-import java.io.InputStream;
-
 /**
  * @author Frederik Heremans
  */

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceQueryRequest.java
Patch:
@@ -17,8 +17,9 @@
 
 import org.activiti.rest.common.api.PaginateRequest;
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskActionRequest.java
Patch:
@@ -18,8 +18,9 @@
 
 import org.activiti.rest.service.api.RestActionRequest;
 import org.activiti.rest.service.api.engine.variable.RestVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 /**
  * @author Frederik Heremans

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskQueryRequest.java
Patch:
@@ -18,8 +18,9 @@
 
 import org.activiti.rest.common.api.PaginateRequest;
 import org.activiti.rest.service.api.engine.variable.QueryVariable;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/application/ActivitiRestServicesApplication.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.rest.common.application.ActivitiRestApplication;
 import org.activiti.rest.common.filter.JsonpFilter;
 import org.activiti.rest.service.api.RestResponseFactory;
-import org.codehaus.jackson.map.SerializationConfig;
 import org.restlet.Restlet;
 import org.restlet.engine.Engine;
 import org.restlet.engine.converter.ConverterHelper;
@@ -56,7 +55,7 @@ public synchronized Restlet createInboundRoot() {
     for(ConverterHelper helper : registeredConverters) {
       if(helper instanceof JacksonConverter) {
         JacksonConverter jacksonConverter = (JacksonConverter) helper;
-        jacksonConverter.getObjectMapper().configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS, false);
+        //jacksonConverter.getObjectMapper().configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS, false);
       }
     }
     return authenticator;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/demo/DemoDataGenerator.java
Patch:
@@ -30,11 +30,12 @@
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.repository.Model;
 import org.apache.commons.io.IOUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 
 /**
  * @author Joram Barrez

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/jpa/JpaRestTest.java
Patch:
@@ -17,8 +17,6 @@
 import org.activiti.rest.service.api.RestUrls;
 import org.activiti.rest.service.application.ActivitiRestServicesApplication;
 import org.activiti.spring.impl.test.SpringActivitiTestCase;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 import org.restlet.Component;
 import org.restlet.data.ChallengeScheme;
@@ -29,6 +27,9 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.test.context.ContextConfiguration;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
 @ContextConfiguration("classpath:activiti-jpa-context.xml")
 public class JpaRestTest extends SpringActivitiTestCase {
   

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/runtime/TaskSubTaskCollectionResourceTest.java
Patch:
@@ -16,11 +16,12 @@
 import org.activiti.engine.task.Task;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
 import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+
 
 /**
  * Test for all REST-operations related to sub tasks.

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/ActivitiStatusServiceTest.java
Patch:
@@ -41,7 +41,7 @@ public void testNewlineInMessage() throws Exception {
     Status status = statusService.getStatus(new ActivitiException("This is a\n newline"), null);
     
     assertNotNull(status);
-    assertEquals("This is a  newline", status.getName());
+    assertEquals("This is a  newline", status.getReasonPhrase());
   }
   
   public void test404WhenNotFound() throws Exception {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricProcessInstanceIdentityLinkCollectionResourceTest.java
Patch:
@@ -21,12 +21,13 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.util.ISO8601DateFormat;
 import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
+
 
 /**
  * Test for REST-operation related to the historic process instance identity links resource.

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/history/HistoricTaskInstanceIdentityLinkCollectionResourceTest.java
Patch:
@@ -21,12 +21,13 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.util.ISO8601DateFormat;
 import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
+
 
 /**
  * Test for REST-operation related to the historic task instance identity links resource.

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/identity/UserPictureResourceTest.java
Patch:
@@ -136,7 +136,7 @@ public void testUpdatePicture() throws Exception {
               new ByteArrayInputStream("this is the picture raw byte stream".getBytes())); 
       
       Representation response = client.put(request);
-      assertEquals(Status.SUCCESS_OK, client.getResponse().getStatus());
+      assertEquals(Status.SUCCESS_NO_CONTENT, client.getResponse().getStatus());
       assertNotNull(response);
       
       Picture picture = ActivitiUtil.getIdentityService().getUserPicture(newUser.getId());
@@ -172,7 +172,7 @@ public void testUpdatePictureWithCustomMimeType() throws Exception {
               new ByteArrayInputStream("this is the picture raw byte stream".getBytes()), additionalFields); 
       
       Representation response = client.put(request);
-      assertEquals(Status.SUCCESS_OK, client.getResponse().getStatus());
+      assertEquals(Status.SUCCESS_NO_CONTENT, client.getResponse().getStatus());
       assertNotNull(response);
       
       Picture picture = ActivitiUtil.getIdentityService().getUserPicture(newUser.getId());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/legacy/GroupSearchResourceTest.java
Patch:
@@ -1,10 +1,11 @@
 package org.activiti.rest.service.api.legacy;
 
 import org.activiti.rest.service.BaseRestTestCase;
-import org.codehaus.jackson.JsonNode;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+
 public class GroupSearchResourceTest extends BaseRestTestCase {
 
   public void testGetAllGroups() throws Exception {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/legacy/GroupUsersResourceTest.java
Patch:
@@ -1,10 +1,11 @@
 package org.activiti.rest.service.api.legacy;
 
 import org.activiti.rest.service.BaseRestTestCase;
-import org.codehaus.jackson.JsonNode;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+
 public class GroupUsersResourceTest extends BaseRestTestCase {
 
   public void testGetAllGroupUsers() throws Exception {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/legacy/StartProcessInstanceResourceTest.java
Patch:
@@ -7,13 +7,14 @@
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseRestTestCase;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 import org.restlet.resource.ResourceException;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 public class StartProcessInstanceResourceTest extends BaseRestTestCase {
 
   @Deployment

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/legacy/UserGroupsResourceTest.java
Patch:
@@ -1,10 +1,11 @@
 package org.activiti.rest.service.api.legacy;
 
 import org.activiti.rest.service.BaseRestTestCase;
-import org.codehaus.jackson.JsonNode;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+
 public class UserGroupsResourceTest extends BaseRestTestCase {
 
   public void testGetAllUserGroups() throws Exception {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/legacy/UserSearchResourceTest.java
Patch:
@@ -1,10 +1,11 @@
 package org.activiti.rest.service.api.legacy;
 
 import org.activiti.rest.service.BaseRestTestCase;
-import org.codehaus.jackson.JsonNode;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
+import com.fasterxml.jackson.databind.JsonNode;
+
 public class UserSearchResourceTest extends BaseRestTestCase {
 
   public void testGetAllUsers() throws Exception {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ExecutionQueryResourceTest.java
Patch:
@@ -19,8 +19,9 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.node.ArrayNode;
-import org.codehaus.jackson.node.ObjectNode;
+
+import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 
 /**

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ExecutionVariableResourceTest.java
Patch:
@@ -26,8 +26,6 @@
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.HttpMultipartRepresentation;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.MediaType;
 import org.restlet.data.Status;
 import org.restlet.engine.header.Header;
@@ -37,6 +35,9 @@
 import org.restlet.resource.ResourceException;
 import org.restlet.util.Series;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * Test for all REST-operations related to a single execution variable.
  * 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceVariableResourceTest.java
Patch:
@@ -25,8 +25,6 @@
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.HttpMultipartRepresentation;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.MediaType;
 import org.restlet.data.Status;
 import org.restlet.engine.header.Header;
@@ -36,6 +34,9 @@
 import org.restlet.resource.ResourceException;
 import org.restlet.util.Series;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * Test for all REST-operations related to a single task variable.
  * 

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskCollectionResourceTest.java
Patch:
@@ -24,13 +24,14 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 import org.restlet.resource.ResourceException;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 
 /**
  * Test for all REST-operations related to the Task collection resource.

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskQueryResourceTest.java
Patch:
@@ -26,11 +26,12 @@
 import org.activiti.engine.test.Deployment;
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.node.ArrayNode;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.Status;
 import org.restlet.resource.ResourceException;
 
+import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 
 /**
  * Test for all REST-operations related to the Task collection resource.

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskVariableResourceTest.java
Patch:
@@ -27,14 +27,15 @@
 import org.activiti.rest.service.BaseRestTestCase;
 import org.activiti.rest.service.HttpMultipartRepresentation;
 import org.activiti.rest.service.api.RestUrls;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.node.ObjectNode;
 import org.restlet.data.MediaType;
 import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 import org.restlet.resource.ResourceException;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+
 /**
  * Test for all REST-operations related to a single task variable.
  * 

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/WorkflowDefinitionConversionFactory.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.activiti.workflow.simple.converter;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/json/SimpleWorkflowJsonConverter.java
Patch:
@@ -33,7 +33,8 @@
 import org.activiti.workflow.simple.definition.form.ReferencePropertyDefinition;
 import org.activiti.workflow.simple.definition.form.TextPropertyDefinition;
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.map.ObjectMapper;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
 
 /**
  * A converter capable of converting {@link WorkflowDefinition}s from and to a
@@ -126,7 +127,7 @@ protected ObjectMapper getObjectMapper() {
 			synchronized (this) {
 				if (objectMapper == null) {
 					objectMapper = new ObjectMapper();
-
+				
 					// Register all property-definition model classes as sub-types
 					objectMapper.registerSubtypes(ListPropertyDefinition.class, TextPropertyDefinition.class,
 					    ReferencePropertyDefinition.class, DatePropertyDefinition.class, NumberPropertyDefinition.class, BooleanPropertyDefinition.class);

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/AbstractConditionStepListContainer.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/AbstractNamedStepDefinition.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
-import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 
 /**
  * Superclass for all {@link StepDefinition} classes that have a name or description.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/AbstractStepDefinitionContainer.java
Patch:
@@ -16,8 +16,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
-
 /**
  * @author Joram Barrez
  * @author Tijs Rademakers
@@ -44,7 +42,6 @@ public void addStep(StepDefinition stepDefinition) {
     steps.add(stepDefinition);
   }
 
-  @JsonSerialize(contentAs=StepDefinition.class)
   public List<StepDefinition> getSteps() {
     return steps;
   }

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/AbstractStepListContainer.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
  * @author Tijs Rademakers

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/ConditionDefinition.java
Patch:
@@ -1,6 +1,5 @@
 package org.activiti.workflow.simple.definition;
 
-import java.io.Serializable;
 
 public class ConditionDefinition {
 

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/DelayStepDefinition.java
Patch:
@@ -15,7 +15,8 @@
 import java.util.HashMap;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * Step that delays the current process/execution for a certain amount of time. Can be either

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/FeedbackStepDefinition.java
Patch:
@@ -19,8 +19,9 @@
 import org.activiti.workflow.simple.converter.step.FeedbackStepDefinitionConverter;
 import org.activiti.workflow.simple.definition.form.FormDefinition;
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 
 /**

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/HumanStepDefinition.java
Patch:
@@ -19,8 +19,9 @@
 import org.activiti.workflow.simple.definition.HumanStepAssignment.HumanStepAssignmentType;
 import org.activiti.workflow.simple.definition.form.FormDefinition;
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonIgnore;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * Defines a step that must be executed by a human actor.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/ScriptStepDefinition.java
Patch:
@@ -15,7 +15,8 @@
 import java.util.HashMap;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 
 /**

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/StepDefinition.java
Patch:
@@ -14,9 +14,9 @@
 
 import java.util.Map;
 
-import org.codehaus.jackson.annotate.JsonTypeInfo;
-import org.codehaus.jackson.annotate.JsonTypeInfo.As;
-import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 /**
  * Marker interface for all 'patterns' that are known by the simple workflow

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/TimeDurationDefinition.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.activiti.workflow.simple.definition;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
-import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 
 public class TimeDurationDefinition {
 

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/BooleanPropertyDefinition.java
Patch:
@@ -13,7 +13,8 @@
 package org.activiti.workflow.simple.definition.form;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * A form-property with a value that is represented as a boolean.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/DatePropertyDefinition.java
Patch:
@@ -13,7 +13,8 @@
 package org.activiti.workflow.simple.definition.form;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * A form-property with a value that is represented as a date.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/FormDefinition.java
Patch:
@@ -17,8 +17,9 @@
 
 import org.activiti.workflow.simple.definition.HumanStepDefinition;
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
  * A {@link HumanStepDefinition} (or other) can have a form associated with it 

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/FormPropertyGroup.java
Patch:
@@ -16,8 +16,9 @@
 import java.util.List;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
  * A group of {@link FormPropertyDefinition}s which belong together.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/ListPropertyDefinition.java
Patch:
@@ -16,8 +16,9 @@
 import java.util.List;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
  * A form-property with a value that is represented as single item selected

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/NumberPropertyDefinition.java
Patch:
@@ -13,7 +13,8 @@
 package org.activiti.workflow.simple.definition.form;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * A form-property with a value that is represented as a number.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/ReferencePropertyDefinition.java
Patch:
@@ -13,7 +13,8 @@
 package org.activiti.workflow.simple.definition.form;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * A form-property with a value that represents a reference to another entity.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/form/TextPropertyDefinition.java
Patch:
@@ -13,7 +13,8 @@
 package org.activiti.workflow.simple.definition.form;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
-import org.codehaus.jackson.annotate.JsonTypeName;
+
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 /**
  * A form-property with a value that is represented as a simple text.

File: modules/activiti-engine/src/main/java/org/activiti/engine/EngineServices.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine;
 
+
 /**
  * Interface implemented by all classes that expose the Activiti services.
  * 
@@ -33,4 +34,5 @@ public interface EngineServices {
   
   ManagementService getManagementService();
   
+  ProcessEngineConfiguration getProcessEngineConfiguration();
 }

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/junit4/SpringJunit4Test.java
Patch:
@@ -64,8 +64,8 @@ public void simpleProcessTest() {
     Task task = taskService.createTaskQuery().singleResult();
     assertEquals("My Task", task.getName());
 	
-	// ACT-1186: ActivitiRule services not initialized when using SpringJUnit4ClassRunner together with @ContextConfiguration
-	assertNotNull(activitiSpringRule.getRuntimeService());
+    // ACT-1186: ActivitiRule services not initialized when using SpringJUnit4ClassRunner together with @ContextConfiguration
+    assertNotNull(activitiSpringRule.getRuntimeService());
   
     taskService.complete(task.getId());
     assertEquals(0, runtimeService.createProcessInstanceQuery().count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/DelegateTaskTest.java
Patch:
@@ -69,7 +69,7 @@ public void testChangeCategoryInDelegateTask() {
 			assertEquals("approval", task.getCategory());
 			Map<String, Object> taskVariables = new HashMap<String, Object>();
 			taskVariables.put("outcome", "approve");
-			taskService.complete(task.getId(), taskVariables);
+			taskService.complete(task.getId(), taskVariables, true);
 		}
 		
 		// After completion, the task category should be changed in the script listener working on the delegate task

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPUserManager.java
Patch:
@@ -237,7 +237,8 @@ public void setUserPicture(String userId, Picture picture) {
   
   @Override
   public Picture getUserPicture(String userId) {
-  	throw new ActivitiException("LDAP user manager doesn't support user pictures");
+  	logger.debug("LDAP user manager doesn't support user pictures. Returning null");
+  	return null;
   }
 
   @Override

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionVariableCollectionResource.java
Patch:
@@ -115,7 +115,7 @@ protected Object createExecutionVariable(Representation representation, boolean
         
         RestVariable[] restVariables = getConverterService().toObject(representation, RestVariable[].class, this);
         if(restVariables == null || restVariables.length == 0) {
-          throw new ActivitiIllegalArgumentException("Request didn't cantain a list of variables to create.");
+          throw new ActivitiIllegalArgumentException("Request didn't contain a list of variables to create.");
         }
         
         RestVariableScope sharedScope = null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskVariableCollectionResource.java
Patch:
@@ -86,7 +86,7 @@ public Object createTaskVariable(Representation representation) {
         
         RestVariable[] restVariables = getConverterService().toObject(representation, RestVariable[].class, this);
         if(restVariables == null || restVariables.length == 0) {
-          throw new ActivitiIllegalArgumentException("Request didn't cantain a list of variables to create.");
+          throw new ActivitiIllegalArgumentException("Request didn't contain a list of variables to create.");
         }
         
         RestVariableScope sharedScope = null;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceVariablesCollectionResourceTest.java
Patch:
@@ -257,7 +257,7 @@ public void testCreateSingleProcessVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
       
       // Test passing in object instead of array
@@ -267,7 +267,7 @@ public void testCreateSingleProcessVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
   }
   

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskVariablesCollectionResourceTest.java
Patch:
@@ -400,7 +400,7 @@ public void testCreateSingleTaskVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
       
       // Test passing in object instead of array
@@ -410,7 +410,7 @@ public void testCreateSingleTaskVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
     } finally {
       // Clean adhoc-tasks even if test fails

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionVariableCollectionResource.java
Patch:
@@ -115,7 +115,7 @@ protected Object createExecutionVariable(Representation representation, boolean
         
         RestVariable[] restVariables = getConverterService().toObject(representation, RestVariable[].class, this);
         if(restVariables == null || restVariables.length == 0) {
-          throw new ActivitiIllegalArgumentException("Request didn't cantain a list of variables to create.");
+          throw new ActivitiIllegalArgumentException("Request didn't contain a list of variables to create.");
         }
         
         RestVariableScope sharedScope = null;

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskVariableCollectionResource.java
Patch:
@@ -86,7 +86,7 @@ public Object createTaskVariable(Representation representation) {
         
         RestVariable[] restVariables = getConverterService().toObject(representation, RestVariable[].class, this);
         if(restVariables == null || restVariables.length == 0) {
-          throw new ActivitiIllegalArgumentException("Request didn't cantain a list of variables to create.");
+          throw new ActivitiIllegalArgumentException("Request didn't contain a list of variables to create.");
         }
         
         RestVariableScope sharedScope = null;

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceVariablesCollectionResourceTest.java
Patch:
@@ -257,7 +257,7 @@ public void testCreateSingleProcessVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
       
       // Test passing in object instead of array
@@ -267,7 +267,7 @@ public void testCreateSingleProcessVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
   }
   

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskVariablesCollectionResourceTest.java
Patch:
@@ -400,7 +400,7 @@ public void testCreateSingleTaskVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
       
       // Test passing in object instead of array
@@ -410,7 +410,7 @@ public void testCreateSingleTaskVariableEdgeCases() throws Exception {
         fail("Exception expected");
       } catch (ResourceException expected) {
         assertEquals(Status.CLIENT_ERROR_BAD_REQUEST, expected.getStatus());
-        assertEquals("Request didn't cantain a list of variables to create.", expected.getStatus().getDescription());
+        assertEquals("Request didn't contain a list of variables to create.", expected.getStatus().getDescription());
       }
     } finally {
       // Clean adhoc-tasks even if test fails

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/SendTaskXMLConverter.java
Patch:
@@ -68,9 +68,10 @@ protected void writeAdditionalAttributes(BaseElement element, XMLStreamWriter xt
   }
   
   @Override
-  protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter xtw) throws Exception {
+  protected boolean writeExtensionChildElements(BaseElement element, boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {
     SendTask sendTask = (SendTask) element;
     didWriteExtensionStartElement = FieldExtensionExport.writeFieldExtensions(sendTask.getFieldExtensions(), didWriteExtensionStartElement, xtw);
+    return didWriteExtensionStartElement;
   }
   
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ServiceTaskXMLConverter.java
Patch:
@@ -101,7 +101,7 @@ protected void writeAdditionalAttributes(BaseElement element, XMLStreamWriter xt
   }
   
   @Override
-  protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter xtw) throws Exception {
+  protected boolean writeExtensionChildElements(BaseElement element, boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {
     ServiceTask serviceTask = (ServiceTask) element;
     
     if (serviceTask.getCustomProperties().size() > 0) {
@@ -131,6 +131,8 @@ protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter
     } else {
       didWriteExtensionStartElement = FieldExtensionExport.writeFieldExtensions(serviceTask.getFieldExtensions(), didWriteExtensionStartElement, xtw);
     }
+    
+    return didWriteExtensionStartElement;
   }
   
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/StartEventXMLConverter.java
Patch:
@@ -73,9 +73,10 @@ protected void writeAdditionalAttributes(BaseElement element, XMLStreamWriter xt
   }
   
   @Override
-  protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter xtw) throws Exception {
+  protected boolean writeExtensionChildElements(BaseElement element, boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {
     StartEvent startEvent = (StartEvent) element;
-    writeFormProperties(startEvent, xtw);
+    didWriteExtensionStartElement = writeFormProperties(startEvent, didWriteExtensionStartElement, xtw);
+    return didWriteExtensionStartElement;
   }
   
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/UserTaskXMLConverter.java
Patch:
@@ -125,9 +125,10 @@ protected void writeAdditionalAttributes(BaseElement element, XMLStreamWriter xt
   }
   
   @Override
-  protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter xtw) throws Exception {
+  protected boolean writeExtensionChildElements(BaseElement element, boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {
     UserTask userTask = (UserTask) element;
-    writeFormProperties(userTask, xtw);
+    didWriteExtensionStartElement = writeFormProperties(userTask, didWriteExtensionStartElement, xtw);
+    return didWriteExtensionStartElement;
   }
 
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/ActivitiListenerExport.java
Patch:
@@ -30,16 +30,16 @@
 public class ActivitiListenerExport implements BpmnXMLConstants {
 
   public static boolean writeListeners(BaseElement element, boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {
-    if(element instanceof HasExecutionListeners) {
+    if (element instanceof HasExecutionListeners) {
       didWriteExtensionStartElement = writeListeners(ELEMENT_EXECUTION_LISTENER, ((HasExecutionListeners) element).getExecutionListeners(), didWriteExtensionStartElement, xtw);
     }
     // In case of a usertaks, also add task-listeners
-    if(element instanceof UserTask) {
+    if (element instanceof UserTask) {
       didWriteExtensionStartElement = writeListeners(ELEMENT_TASK_LISTENER, ((UserTask) element).getTaskListeners(), didWriteExtensionStartElement, xtw);
     }
     
     // In case of a process-element, write the event-listeners
-    if(element instanceof Process) {
+    if (element instanceof Process) {
     	didWriteExtensionStartElement = writeEventListeners(((Process) element).getEventListeners(), didWriteExtensionStartElement, xtw);
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngine.java
Patch:
@@ -49,7 +49,7 @@
 public interface ProcessEngine extends EngineServices {
 
   /** the version of the activiti library */
-  public static String VERSION = "5.16-SNAPSHOT";
+  public static String VERSION = "5.15.1-SNAPSHOT";
 
   /** The name as specified in 'process-engine-name' in 
    * the activiti.cfg.xml configuration file.

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -165,7 +165,7 @@ public abstract class ProcessEngineConfiguration implements EngineServices {
    * prefix. This is relevant for checking if Activiti-tables exist, the databaseTablePrefix will not be used here
    * - since the schema is taken into account already, adding a prefix for the table-check will result in wrong table-names.
    * 
-   *  @since 5.16-SNAPSHOT
+   *  @since 5.15
    */
   protected boolean tablePrefixIsSchema = false;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -89,6 +89,7 @@ protected void scheduleEventAsync(Serializable payload) {
     MessageEntity message = new MessageEntity();
     message.setJobHandlerType(ProcessEventJobHandler.TYPE);
     message.setJobHandlerConfiguration(id);
+    message.setTenantId(getTenantId());
 
     // TODO: support payload
 //    if(payload != null) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ActivitiEventListenerParser.java
Patch:
@@ -51,10 +51,8 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
     		listener.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_THROW_ERROR_EVENT);
     		listener.setImplementation(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_THROW_ERROR_EVENT_CODE));
     	} else {
-    		model.addProblem("Unsupported value of 'throwEvent' attribute: " + eventType, xtr);
+    		listener.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_INVALID_THROW_EVENT);
     	}
-    } else {
-      model.addProblem("Element 'class', 'delegateExpression' or 'throwEvent' is mandatory on eventListener", xtr);
     }
     listener.setEvents(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_EVENTS));
     listener.setEntityType(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_ENTITY_TYPE));

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ActivitiListenerParser.java
Patch:
@@ -39,8 +39,6 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
     } else if (StringUtils.isNotEmpty(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_DELEGATEEXPRESSION))) {
       listener.setImplementation(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_DELEGATEEXPRESSION));
       listener.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION);
-    } else {
-      model.addProblem("Element 'class' or 'expression' is mandatory on executionListener", xtr);
     }
     listener.setEvent(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_EVENT));
     addListenerToParent(listener, parentElement);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/DefinitionsRootExport.java
Patch:
@@ -26,7 +26,7 @@ public class DefinitionsRootExport implements BpmnXMLConstants {
 
   /** default namespaces for definitions */
   protected static final Set<String> defaultNamespaces = new HashSet<String>(
-      Arrays.asList(XSI_PREFIX, ACTIVITI_EXTENSIONS_PREFIX, BPMNDI_PREFIX, OMGDC_PREFIX, OMGDI_PREFIX));
+      Arrays.asList(XSI_PREFIX, XSD_PREFIX, ACTIVITI_EXTENSIONS_PREFIX, BPMNDI_PREFIX, OMGDC_PREFIX, OMGDI_PREFIX));
 
   public static void writeRootElement(BpmnModel model, XMLStreamWriter xtw, String encoding) throws Exception {
     xtw.writeStartDocument(encoding, "1.0");
@@ -36,6 +36,7 @@ public static void writeRootElement(BpmnModel model, XMLStreamWriter xtw, String
     xtw.setDefaultNamespace(BPMN2_NAMESPACE);
     xtw.writeDefaultNamespace(BPMN2_NAMESPACE);
     xtw.writeNamespace(XSI_PREFIX, XSI_NAMESPACE);
+    xtw.writeNamespace(XSD_PREFIX, SCHEMA_NAMESPACE);
     xtw.writeNamespace(ACTIVITI_EXTENSIONS_PREFIX, ACTIVITI_EXTENSIONS_NAMESPACE);
     xtw.writeNamespace(BPMNDI_PREFIX, BPMNDI_NAMESPACE);
     xtw.writeNamespace(OMGDC_PREFIX, OMGDC_NAMESPACE);

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ImplementationType.java
Patch:
@@ -23,4 +23,6 @@ public class ImplementationType {
   public static String IMPLEMENTATION_TYPE_THROW_ERROR_EVENT = "throwErrorEvent";
   public static String IMPLEMENTATION_TYPE_WEBSERVICE = "##WebService";
   
+  public static String IMPLEMENTATION_TYPE_INVALID_THROW_EVENT = "invalidThrowEvent";
+  
 }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/CdiActivitiTestCase.java
Patch:
@@ -84,6 +84,7 @@ public void setUp() throws Exception {
     beanManager = ProgrammaticBeanLookup.lookup(BeanManager.class);
     processEngine = ProgrammaticBeanLookup.lookup(ProcessEngine.class);
     processEngineConfiguration = ((ProcessEngineImpl)ProcessEngineLookupForTestsuite.processEngine).getProcessEngineConfiguration();
+    activitiRule.setProcessEngineConfiguration(processEngineConfiguration);
     formService = processEngine.getFormService();
     historyService = processEngine.getHistoryService();
     identityService = processEngine.getIdentityService();

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/ExecutionListener.java
Patch:
@@ -16,6 +16,7 @@
 
 
 
+
 /** Callback interface to be notified of execution events like starting a process instance,
  * ending an activity instance or taking a transition.
  *  

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/Expression.java
Patch:
@@ -17,6 +17,7 @@
 
 
 
+
 /**
  * @author Frederik Heremans
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TaskListener.java
Patch:
@@ -18,6 +18,7 @@
 
 
 
+
 /**
  * @author Tom Baeyens
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryProperty.java
Patch:
@@ -38,6 +38,8 @@ public class HistoricProcessInstanceQueryProperty implements QueryProperty {
   public static final HistoricProcessInstanceQueryProperty DURATION = new HistoricProcessInstanceQueryProperty("RES.DURATION_");
   public static final HistoricProcessInstanceQueryProperty TENANT_ID = new HistoricProcessInstanceQueryProperty("RES.TENANT_ID_");
   
+  public static final HistoricProcessInstanceQueryProperty INCLUDED_VARIABLE_TIME = new HistoricProcessInstanceQueryProperty("VAR.LAST_UPDATED_TIME_");
+  
   private String name;
 
   public HistoricProcessInstanceQueryProperty(String name) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -44,6 +44,8 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_PRIORITY = new HistoricTaskInstanceQueryProperty("RES.PRIORITY_");
   public static final HistoricTaskInstanceQueryProperty TASK_DUE_DATE = new HistoricTaskInstanceQueryProperty("RES.DUE_DATE_");
   public static final HistoricTaskInstanceQueryProperty TENANT_ID_ = new HistoricTaskInstanceQueryProperty("RES.TENANT_ID_");
+  
+  public static final HistoricTaskInstanceQueryProperty INCLUDED_VARIABLE_TIME = new HistoricTaskInstanceQueryProperty("VAR.LAST_UPDATED_TIME_");
 
   private String name;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/JobQueryImpl.java
Patch:
@@ -18,9 +18,9 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.JobQuery;
 
@@ -251,7 +251,7 @@ public boolean getExecutable() {
     return executable;
   }
   public Date getNow() {
-    return ClockUtil.getCurrentTime();
+    return Context.getProcessEngineConfiguration().getClock().getCurrentTime();
   }
   public boolean isWithException() {
     return withException;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/QueryVariableValue.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.activiti.engine.impl.variable.ByteArrayType;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateThrowSignalEventActivityBehavior.java
Patch:
@@ -51,7 +51,7 @@ public void execute(ActivityExecution execution) throws Exception {
     } else {
       subscriptionEntities = commandContext
               .getEventSubscriptionEntityManager()
-              .findSignalEventSubscriptionsByEventName(signalDefinition.getEventName());
+              .findSignalEventSubscriptionsByEventName(signalDefinition.getEventName(), execution.getTenantId());
     }
     
     for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : subscriptionEntities) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/CompensateEventDefinition.java
Patch:
@@ -15,13 +15,12 @@
 
 import java.io.Serializable;
 
+
 /**
  * @author Daniel Meyer
  */
 public class CompensateEventDefinition implements Serializable {
 
-  private static final long serialVersionUID = 1L;
-  
   protected String activityRef;
   protected boolean waitForCompletion;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/MessageEventDefinitionParseHandler.java
Patch:
@@ -37,9 +37,6 @@ protected void executeParse(BpmnParse bpmnParse, MessageEventDefinition messageD
     
     if (bpmnParse.getBpmnModel().containsMessageId(messageDefinition.getMessageRef())) {
       String messageName = bpmnParse.getBpmnModel().getMessage(messageDefinition.getMessageRef()).getName();
-      if (StringUtils.isEmpty(messageName)) {
-        bpmnParse.getBpmnModel().addProblem("messageName is required for a message event", messageDefinition);
-      }
       messageDefinition.setMessageRef(messageName);
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/handler/UserTaskParseHandler.java
Patch:
@@ -115,8 +115,6 @@ protected TaskListener createTaskListener(BpmnParse bpmnParse, ActivitiListener
       taskListener = bpmnParse.getListenerFactory().createExpressionTaskListener(activitiListener);
     } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {
       taskListener = bpmnParse.getListenerFactory().createDelegateExpressionTaskListener(activitiListener);
-    } else {
-      bpmnParse.getBpmnModel().addProblem("Element 'class', 'expression' or 'delegateExpression' is mandatory on taskListener for task", activitiListener);
     }
     return taskListener;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DefaultBusinessCalendar.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
-import org.activiti.engine.impl.util.ClockUtil;
+import org.activiti.engine.impl.context.Context;
 
 
 /**
@@ -47,7 +47,7 @@ public class DefaultBusinessCalendar implements BusinessCalendar {
   }
   
   public Date resolveDuedate(String duedate) {
-    Date resolvedDuedate = ClockUtil.getCurrentTime();
+    Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
     
     String[] tokens = duedate.split(" and ");
     for (String token : tokens) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireJobsCmd.java
Patch:
@@ -18,12 +18,12 @@
 import java.util.List;
 
 import org.activiti.engine.impl.Page;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.AcquiredJobs;
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
-import org.activiti.engine.impl.util.ClockUtil;
 
 
 /**
@@ -79,7 +79,7 @@ public AcquiredJobs execute(CommandContext commandContext) {
   protected void lockJob(JobEntity job, String lockOwner, int lockTimeInMillis) {    
     job.setLockOwner(lockOwner);
     GregorianCalendar gregorianCalendar = new GregorianCalendar();
-    gregorianCalendar.setTime(ClockUtil.getCurrentTime());
+    gregorianCalendar.setTime(Context.getProcessEngineConfiguration().getClock().getCurrentTime());
     gregorianCalendar.add(Calendar.MILLISECOND, lockTimeInMillis);
     job.setLockExpirationTime(gregorianCalendar.getTime());    
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AddCommentCmd.java
Patch:
@@ -22,7 +22,6 @@
 import org.activiti.engine.impl.persistence.entity.CommentEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.task.Comment;
 import org.activiti.engine.task.Event;
@@ -83,7 +82,7 @@ public Comment execute(CommandContext commandContext) {
     CommentEntity comment = new CommentEntity();
     comment.setUserId(userId);
     comment.setType( (type == null)? CommentEntity.TYPE_COMMENT : type );
-    comment.setTime(ClockUtil.getCurrentTime());
+    comment.setTime(Context.getProcessEngineConfiguration().getClock().getCurrentTime());
     comment.setTaskId(taskId);
     comment.setProcessInstanceId(processInstanceId);
     comment.setAction(Event.ACTION_ADD_COMMENT);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ChangeDeploymentTenantIdCmd.java
Patch:
@@ -44,14 +44,13 @@ public Void execute(CommandContext commandContext) {
       throw new ActivitiIllegalArgumentException("deploymentId is null");
     }
     
-    // Impl note: tenant id is allowed to be null, no check needed
-    
     // Update all entities
     
     DeploymentEntity deployment = commandContext.getDeploymentEntityManager().findDeploymentById(deploymentId);
     if (deployment == null) {
     	throw new ActivitiObjectNotFoundException("Could not find deployment with id " + deploymentId, Deployment.class);
     }
+    String oldTenantId = deployment.getTenantId();
     deployment.setTenantId(newTenantId);
     
     
@@ -60,6 +59,7 @@ public Void execute(CommandContext commandContext) {
     commandContext.getExecutionEntityManager().updateExecutionTenantIdForDeployment(deploymentId, newTenantId);
     commandContext.getTaskEntityManager().updateTaskTenantIdForDeployment(deploymentId, newTenantId);
     commandContext.getJobEntityManager().updateJobTenantIdForDeployment(deploymentId, newTenantId);
+    commandContext.getEventSubscriptionEntityManager().updateEventSubscriptionTenantId(oldTenantId, newTenantId);
     
     // Doing process definitions in memory, cause we need to clear the process definition cache
     List<ProcessDefinition> processDefinitions = commandContext.getDbSqlSession()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetUserPictureCmd.java
Patch:
@@ -21,7 +21,6 @@
 import org.activiti.engine.identity.User;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.persistence.entity.UserEntity;
 
 
 /**
@@ -40,13 +39,13 @@ public Picture execute(CommandContext commandContext) {
     if(userId == null) {
       throw new ActivitiIllegalArgumentException("userId is null");
     }
-    UserEntity user = (UserEntity) commandContext
+    User user = commandContext
       .getUserIdentityManager()
       .findUserById(userId);
     if(user == null) {
       throw new ActivitiObjectNotFoundException("user "+userId+" doesn't exist", User.class);
     }
-    return user.getPicture();
+    return commandContext.getUserIdentityManager().getUserPicture(userId);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetUserPictureCmd.java
Patch:
@@ -21,7 +21,6 @@
 import org.activiti.engine.identity.User;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.persistence.entity.UserEntity;
 
 
 /**
@@ -43,13 +42,13 @@ public Object execute(CommandContext commandContext) {
     if(userId == null) {
       throw new ActivitiIllegalArgumentException("userId is null");
     }
-    UserEntity user = (UserEntity) commandContext
+    User user = commandContext
       .getUserIdentityManager()
       .findUserById(userId);
     if(user == null) {
       throw new ActivitiObjectNotFoundException("user "+userId+" doesn't exist", User.class);
     }
-    user.setPicture(picture);
+    commandContext.getUserIdentityManager().setUserPicture(userId, picture);
     return null;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -90,7 +90,9 @@ public ProcessInstance execute(CommandContext commandContext) {
 
     // Start the process instance
     ExecutionEntity processInstance = processDefinition.createProcessInstance(businessKey);
-    if (variables!=null) {
+
+    // now set the variables passed into the start command
+    if (variables != null) {
       processInstance.setVariables(variables);
     }
     processInstance.start();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/FormHandler.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.activiti.engine.impl.form;
 
-import java.util.List;
 import java.io.Serializable;
+import java.util.List;
 import java.util.Map;
 
 import org.activiti.bpmn.model.FormProperty;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AcquireJobsRunnable.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.activiti.engine.ActivitiOptimisticLockingException;
 import org.activiti.engine.impl.Page;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.persistence.entity.TimerEntity;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -70,11 +70,11 @@ public synchronized void run() {
           isJobAdded = false;
           
           // check if the next timer should fire before the normal sleep time is over
-          Date duedate = new Date(ClockUtil.getCurrentTime().getTime() + millisToWait);
+          Date duedate = new Date(jobExecutor.getCurrentTime().getTime() + millisToWait);
           List<TimerEntity> nextTimers = commandExecutor.execute(new GetUnlockedTimersByDuedateCmd(duedate, new Page(0, 1)));
           
           if (!nextTimers.isEmpty()) {
-          long millisTillNextTimer = nextTimers.get(0).getDuedate().getTime() - ClockUtil.getCurrentTime().getTime();
+          long millisTillNextTimer = nextTimers.get(0).getDuedate().getTime() - jobExecutor.getCurrentTime().getTime();
             if (millisTillNextTimer < millisToWait) {
               millisToWait = millisTillNextTimer;
             }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/GroupIdentityManager.java
Patch:
@@ -30,7 +30,7 @@ public interface GroupIdentityManager {
 
   void insertGroup(Group group);
 
-  void updateGroup(GroupEntity updatedGroup);
+  void updateGroup(Group updatedGroup);
 
   void deleteGroup(String groupId);
 
@@ -45,5 +45,7 @@ public interface GroupIdentityManager {
   List<Group> findGroupsByNativeQuery(Map<String, Object> parameterMap, int firstResult, int maxResults);
 
   long findGroupCountByNativeQuery(Map<String, Object> parameterMap);
+  
+  boolean isNewGroup(Group group);
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -17,7 +17,6 @@
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 import org.apache.commons.lang3.StringUtils;
@@ -50,7 +49,7 @@ public static HistoricDetailVariableInstanceUpdateEntity copyAndInsert(VariableI
     historicVariableUpdate.processInstanceId = variableInstance.getProcessInstanceId();
     historicVariableUpdate.executionId = variableInstance.getExecutionId();
     historicVariableUpdate.taskId = variableInstance.getTaskId();
-    historicVariableUpdate.time = ClockUtil.getCurrentTime();
+    historicVariableUpdate.time = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
     historicVariableUpdate.revision = variableInstance.getRevision();
     historicVariableUpdate.name = variableInstance.getName();
     historicVariableUpdate.variableType = variableInstance.getType();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricFormPropertyEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import org.activiti.engine.history.HistoricFormProperty;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.util.ClockUtil;
 
 /**
  * @author Tom Baeyens
@@ -40,7 +39,7 @@ public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId,
     this.taskId = taskId;
     this.propertyId = propertyId;
     this.propertyValue = propertyValue;
-    this.time = ClockUtil.getCurrentTime();
+    this.time = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
 
     HistoricActivityInstanceEntity historicActivityInstance = Context.getCommandContext().getHistoryManager().findActivityInstance(execution);
     if (historicActivityInstance!=null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntity.java
Patch:
@@ -22,7 +22,6 @@
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.identity.Authentication;
-import org.activiti.engine.impl.util.ClockUtil;
 
 /**
  * @author Tom Baeyens
@@ -49,7 +48,7 @@ public HistoricProcessInstanceEntity(ExecutionEntity processInstance) {
     processInstanceId = processInstance.getId();
     businessKey = processInstance.getBusinessKey();
     processDefinitionId = processInstance.getProcessDefinitionId();
-    startTime = ClockUtil.getCurrentTime();
+    startTime = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
     startUserId = Authentication.getAuthenticatedUserId();
     startActivityId = processInstance.getActivityId();
     superProcessInstanceId = processInstance.getSuperExecution() != null ? processInstance.getSuperExecution().getProcessInstanceId() : null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntity.java
Patch:
@@ -22,7 +22,6 @@
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.PersistentObject;
-import org.activiti.engine.impl.util.ClockUtil;
 
 
 /**
@@ -63,7 +62,7 @@ public HistoricTaskInstanceEntity(TaskEntity task, ExecutionEntity execution) {
     this.description = task.getDescription();
     this.owner = task.getOwner();
     this.assignee = task.getAssignee();
-    this.startTime = ClockUtil.getCurrentTime();
+    this.startTime = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
     this.taskDefinitionKey = task.getTaskDefinitionKey();
     
     this.setPriority(task.getPriority());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -21,7 +21,6 @@
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 import org.apache.commons.lang3.StringUtils;
@@ -71,7 +70,7 @@ public static HistoricVariableInstanceEntity copyAndInsert(VariableInstanceEntit
     
     historicVariableInstance.copyValue(variableInstance);
     
-    Date time = ClockUtil.getCurrentTime();
+    Date time = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
     historicVariableInstance.setCreateTime(time);
     historicVariableInstance.setLastUpdatedTime(time);
     
@@ -93,7 +92,7 @@ public void copyValue(VariableInstanceEntity variableInstance) {
       setByteArrayValue(variableInstance.getByteArrayValue().getBytes());
     }
     
-    this.lastUpdatedTime = ClockUtil.getCurrentTime();
+    this.lastUpdatedTime = Context.getProcessEngineConfiguration().getClock().getCurrentTime();
   }
 
   public void delete() {
@@ -288,6 +287,7 @@ public String toString() {
     sb.append("HistoricVariableInstanceEntity[");
     sb.append("id=").append(id);
     sb.append(", name=").append(name);
+    sb.append(", revision=").append(revision);
     sb.append(", type=").append(variableType != null ? variableType.getTypeName() : "null");
     if (longValue != null) {
       sb.append(", longValue=").append(longValue);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -39,7 +39,7 @@
  * @author Dave Syer
  * @author Frederik Heremans
  */
-public abstract class JobEntity implements Serializable, Job, PersistentObject, HasRevision {
+public abstract class JobEntity implements Job, PersistentObject, HasRevision, Serializable {
 
   public static final boolean DEFAULT_EXCLUSIVE = true;
   public static final int DEFAULT_RETRIES = 3;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/MembershipEntity.java
Patch:
@@ -21,7 +21,7 @@
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public class MembershipEntity implements Serializable, PersistentObject {
+public class MembershipEntity implements PersistentObject, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ModelEntity.java
Patch:
@@ -28,7 +28,7 @@
  * @author Tijs Rademakers
  * @author Joram Barrez
  */
-public class ModelEntity implements Serializable, Model, HasRevision, PersistentObject {
+public class ModelEntity implements Model, HasRevision, PersistentObject, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ResourceEntity.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Tom Baeyens
  */
-public class ResourceEntity implements Serializable, PersistentObject {
+public class ResourceEntity implements PersistentObject, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/SignalEventSubscriptionEntity.java
Patch:
@@ -21,6 +21,7 @@
 
 /**
  * @author Daniel Meyer
+ * @author Joram Barrez
  */
 public class SignalEventSubscriptionEntity extends EventSubscriptionEntity {
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/rules/RulesDeployer.java
Patch:
@@ -37,7 +37,7 @@ public class RulesDeployer implements Deployer {
   
   private static Logger log = LoggerFactory.getLogger(RulesDeployer.class);
 
-  public void deploy(DeploymentEntity deployment) {
+  public void deploy(DeploymentEntity deployment, Map<String, Object> deploymentSettings) {
     KnowledgeBuilder knowledgeBuilder = null;
 
     DeploymentManager deploymentManager = Context

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/JobEventsTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.ActivitiEntityEvent;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
@@ -67,7 +66,7 @@ public void testJobEntityEvents() throws Exception {
 		// Force timer to fire
 		Calendar tomorrow = Calendar.getInstance();
 		tomorrow.add(Calendar.DAY_OF_YEAR, 1);
-		ClockUtil.setCurrentTime(tomorrow.getTime());
+		processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());
 		waitForJobExecutorToProcessAllJobs(2000, 100);
 		
 		// Check delete-event has been dispatched
@@ -106,7 +105,7 @@ public void testJobEntityEventsException() throws Exception {
 		// Force timer to fire
 		Calendar tomorrow = Calendar.getInstance();
 		tomorrow.add(Calendar.DAY_OF_YEAR, 1);
-		ClockUtil.setCurrentTime(tomorrow.getTime());
+		processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());
 		waitForJobExecutorToProcessAllJobs(2000, 100);
 		
 		// Check delete-event has been dispatched

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.management.TableMetaData;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.runtime.ProcessInstance;
@@ -218,13 +217,13 @@ public void testDeleteJobDeletion() {
   
   @Deployment(resources = { "org/activiti/engine/test/api/mgmt/timerOnTask.bpmn20.xml" })
   public void testDeleteJobThatWasAlreadyAcquired() {
-    ClockUtil.setCurrentTime(new Date());
+    processEngineConfiguration.getClock().setCurrentTime(new Date());
     
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("timerOnTask");
     Job timerJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();
     
     // We need to move time at least one hour to make the timer executable
-    ClockUtil.setCurrentTime(new Date(ClockUtil.getCurrentTime().getTime() + 7200000L));
+    processEngineConfiguration.getClock().setCurrentTime(new Date(processEngineConfiguration.getClock().getCurrentTime().getTime() + 7200000L));
 
     // Acquire job by running the acquire command manually
     ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) processEngine;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.RepositoryServiceImpl;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.repository.Model;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.test.Deployment;
@@ -150,7 +149,7 @@ public void testFindDeploymentResourceNamesNullDeploymentId() {
   public void testDeploymentWithDelayedProcessDefinitionActivation() {
     
     Date startTime = new Date();
-    ClockUtil.setCurrentTime(startTime);
+    processEngineConfiguration.getClock().setCurrentTime(startTime);
     Date inThreeDays = new Date(startTime.getTime() + (3 * 24 * 60 * 60 * 1000));
     
     // Deploy process, but activate after three days
@@ -175,7 +174,7 @@ public void testDeploymentWithDelayedProcessDefinitionActivation() {
     
     // Move time four days forward, the timer will fire and the process definitions will be active
     Date inFourDays = new Date(startTime.getTime() + (4 * 24 * 60 * 60 * 1000));
-    ClockUtil.setCurrentTime(inFourDays);
+    processEngineConfiguration.getClock().setCurrentTime(inFourDays);
     waitForJobExecutorToProcessAllJobs(5000L, 50L);
     
     assertEquals(1, repositoryService.createDeploymentQuery().count());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceSuspensionTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.ProcessInstance;
@@ -571,7 +570,7 @@ public void testTaskOperationsFailAfterProcessInstanceSuspend() {
   public void testJobNotExecutedAfterProcessInstanceSuspend() {
     
     Date now = new Date();
-    ClockUtil.setCurrentTime(now);
+    processEngineConfiguration.getClock().setCurrentTime(now);
     
     // Suspending the process instance should also stop the execution of jobs for that process instance
     ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();
@@ -581,7 +580,7 @@ public void testJobNotExecutedAfterProcessInstanceSuspend() {
     assertEquals(1, managementService.createJobQuery().count());
     
     // The jobs should not be executed now
-    ClockUtil.setCurrentTime(new Date(now.getTime() + (60 * 60 * 1000))); // Timer is set to fire on 5 minutes
+    processEngineConfiguration.getClock().setCurrentTime(new Date(now.getTime() + (60 * 60 * 1000))); // Timer is set to fire on 5 minutes
     waitForJobExecutorToProcessAllJobs(1000L, 100L);
     assertEquals(1, managementService.createJobQuery().count());
     

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceUpdateBusinessKeyTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
@@ -63,7 +64,7 @@ public static class UpdateBusinessKeyExecutionListener implements ExecutionListe
     private static final long serialVersionUID = 1L;
 
     public void notify(DelegateExecution delegateExecution) {
-      delegateExecution.updateProcessBusinessKey("bzKey");
+      ((ExecutionEntity) delegateExecution).updateProcessBusinessKey("bzKey");
     }
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskAndVariablesQueryTest.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Map;
 
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.Deployment;
 
@@ -193,7 +192,7 @@ private List<String> generateTestTasks() throws Exception {
 
     SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");
     // 2 tasks for kermit
-    ClockUtil.setCurrentTime(sdf.parse("01/01/2001 01:01:01.000"));
+    processEngineConfiguration.getClock().setCurrentTime(sdf.parse("01/01/2001 01:01:01.000"));
     for (int i = 0; i < 2; i++) {
       Task task = taskService.newTask();
       task.setName("testTask");
@@ -206,7 +205,7 @@ private List<String> generateTestTasks() throws Exception {
       taskService.addCandidateUser(task.getId(), "kermit");
     }
 
-    ClockUtil.setCurrentTime(sdf.parse("02/02/2002 02:02:02.000"));
+    processEngineConfiguration.getClock().setCurrentTime(sdf.parse("02/02/2002 02:02:02.000"));
     // 1 task for gonzo
     Task task = taskService.newTask();
     task.setName("gonzoTask");

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/async/AsyncTaskTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package org.activiti.engine.test.bpmn.async;
 
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.persistence.entity.MessageEntity;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.runtime.Execution;
 import org.activiti.engine.runtime.Job;
 import org.activiti.engine.test.Deployment;
@@ -142,7 +142,7 @@ public void FAILING_testFailingAsycServiceTimer() {
     assertEquals(2, managementService.createJobQuery().count());    
       
     // now the timer triggers:
-    ClockUtil.setCurrentTime(new Date(System.currentTimeMillis()+10000));
+    Context.getProcessEngineConfiguration().getClock().setCurrentTime(new Date(System.currentTimeMillis() + 10000));
     waitForJobExecutorToProcessAllJobs(10000L, 25L);
     
     // and we are done:

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.history.HistoryLevel;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
 import org.activiti.engine.task.TaskQuery;
@@ -234,7 +233,7 @@ public void testCallSequentialSubProcessWithExpressions() {
     "org/activiti/engine/test/bpmn/callactivity/CallActivity.testTimerOnCallActivity.bpmn20.xml",
     "org/activiti/engine/test/bpmn/callactivity/simpleSubProcess.bpmn20.xml"})
   public void testTimerOnCallActivity() {
-    Date startTime = ClockUtil.getCurrentTime();
+    Date startTime = processEngineConfiguration.getClock().getCurrentTime();
     
     // After process start, the task in the subprocess should be active
     runtimeService.startProcessInstanceByKey("timerOnCallActivity");
@@ -243,7 +242,7 @@ public void testTimerOnCallActivity() {
     assertEquals("Task in subprocess", taskInSubProcess.getName());
     
     // When the timer on the subprocess is fired, the complete subprocess is destroyed
-    ClockUtil.setCurrentTime(new Date(startTime.getTime() + (6 * 60 * 1000))); // + 6 minutes, timer fires on 5 minutes
+    processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + (6 * 60 * 1000))); // + 6 minutes, timer fires on 5 minutes
     waitForJobExecutorToProcessAllJobs(10000, 5000L);
     
     Task escalatedTask = taskQuery.singleResult();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageBoundaryEventTest.java
Patch:
@@ -83,7 +83,6 @@ public void testDoubleBoundaryMessageEventSameMessageId() {
         .deploy();
       fail("Deployment should fail because Activiti cannot handle two boundary message events with same messageId.");
     } catch (Exception e) {
-      assertTextPresent("Cannot have more than one message event subscription with name 'messageName' for scope 'task'", e.getMessage());
       assertEquals(0, repositoryService.createDeploymentQuery().count());
     }
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageStartEventTest.java
Patch:
@@ -72,9 +72,9 @@ public void testSameMessageNameInSameProcessFails() {
         .createDeployment()
         .addClasspathResource("org/activiti/engine/test/bpmn/event/message/testSameMessageNameInSameProcessFails.bpmn20.xml")
         .deploy();
-      fail("exception expected");
+      fail("exception expected: Cannot have more than one message event subscription with name 'newInvoiceMessage' for scope");
     }catch (ActivitiException e) {
-      assertTrue(e.getMessage().contains("Cannot have more than one message event subscription with name 'newInvoiceMessage' for scope"));
+      e.printStackTrace();
     }        
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/exclusive/ExclusiveTimerEventTest.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.test.bpmn.exclusive;
 
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.runtime.JobQuery;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.test.Deployment;
@@ -35,7 +34,7 @@ public void testCatchingTimerEvent() throws Exception {
     assertEquals(3, jobQuery.count());
 
     // After setting the clock to time '50minutes and 5 seconds', the timers should fire
-    ClockUtil.setCurrentTime(new Date(startTime.getTime() + ((50 * 60 * 1000) + 5000)));
+    processEngineConfiguration.getClock().setCurrentTime(new Date(startTime.getTime() + ((50 * 60 * 1000) + 5000)));
     waitForJobExecutorToProcessAllJobs(5000L, 100L);
 
     assertEquals(0, jobQuery.count());
@@ -45,4 +44,4 @@ public void testCatchingTimerEvent() throws Exception {
   }
 
 
-}
\ No newline at end of file
+}

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorCmdHappyTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
 import org.activiti.engine.impl.persistence.entity.MessageEntity;
 import org.activiti.engine.impl.persistence.entity.TimerEntity;
-import org.activiti.engine.impl.util.ClockUtil;
 
 /**
  * @author Tom Baeyens
@@ -67,7 +66,7 @@ public String execute(CommandContext commandContext) {
 
   public void testJobCommandsWithTimer() {
     // clock gets automatically reset in LogTestCase.runTest
-    ClockUtil.setCurrentTime(new Date(SOME_TIME));
+    processEngineConfiguration.getClock().setCurrentTime(new Date(SOME_TIME));
 
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutor();
     JobExecutor jobExecutor = processEngineConfiguration.getJobExecutor();
@@ -87,7 +86,7 @@ public String execute(CommandContext commandContext) {
 
     List<String> expectedJobIds = new ArrayList<String>();
 
-    ClockUtil.setCurrentTime(new Date(SOME_TIME + (20 * SECOND)));
+    processEngineConfiguration.getClock().setCurrentTime(new Date(SOME_TIME + (20 * SECOND)));
 
     acquiredJobs = commandExecutor.execute(new AcquireJobsCmd(jobExecutor));
     jobIdsList = acquiredJobs.getJobIdBatches();

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.activiti.engine.history.HistoricVariableInstanceQuery;
 import org.activiti.engine.history.HistoricVariableUpdate;
 import org.activiti.engine.impl.test.ResourceActivitiTestCase;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.impl.variable.EntityManagerSession;
 import org.activiti.engine.impl.variable.EntityManagerSessionFactory;
 import org.activiti.engine.repository.ProcessDefinition;
@@ -326,7 +325,7 @@ public void testHistoricVariableUpdatesAllTypes() throws Exception {
     // In the javaDelegate, the current time is manipulated
     Date updatedDate = sdf.parse("01/01/2001 01:23:46 000");
     
-    ClockUtil.setCurrentTime(startedDate);
+    processEngineConfiguration.getClock().setCurrentTime(startedDate);
     
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("HistoricVariableUpdateProcess", variables);
     
@@ -460,7 +459,7 @@ public void testHistoricVariableUpdatesAllTypes() throws Exception {
   public void testHistoricFormProperties() throws Exception {
     Date startedDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss SSS").parse("01/01/2001 01:23:46 000");
     
-    ClockUtil.setCurrentTime(startedDate);
+    processEngineConfiguration.getClock().setCurrentTime(startedDate);
     
     Map<String, String> formProperties = new HashMap<String, String>();
     formProperties.put("formProp1", "Activiti rocks");

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/VariableSetter.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
-import org.activiti.engine.impl.util.ClockUtil;
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.test.history.SerializableVariable;
 
 
@@ -32,7 +32,7 @@ public void execute(DelegateExecution execution) throws Exception {
     SimpleDateFormat sdf =  new SimpleDateFormat("dd/MM/yyyy hh:mm:ss SSS");
     // We set the time to check of the updated time is picked up in the history
     Date updatedDate = sdf.parse("01/01/2001 01:23:46 000");
-    ClockUtil.setCurrentTime(updatedDate);
+    Context.getProcessEngineConfiguration().getClock().setCurrentTime(updatedDate);
     
     
     execution.setVariable("aVariable", "updated value");

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPGroupManagerFactory.java
Patch:
@@ -16,6 +16,7 @@
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.interceptor.SessionFactory;
 import org.activiti.engine.impl.persistence.entity.GroupIdentityManager;
+import org.activiti.engine.runtime.ClockReader;
 import org.activiti.ldap.LDAPGroupCache.LDAPGroupCacheListener;
 
 /**
@@ -31,11 +32,11 @@ public class LDAPGroupManagerFactory implements SessionFactory {
   protected LDAPGroupCache ldapGroupCache;
   protected LDAPGroupCacheListener ldapCacheListener;
   
-	public LDAPGroupManagerFactory(LDAPConfigurator ldapConfigurator) {
+	public LDAPGroupManagerFactory(LDAPConfigurator ldapConfigurator, ClockReader clockReader) {
     this.ldapConfigurator = ldapConfigurator;
     
     if (ldapConfigurator.getGroupCacheSize() > 0) {
-      ldapGroupCache = new LDAPGroupCache(ldapConfigurator.getGroupCacheSize(), ldapConfigurator.getGroupCacheExpirationTime());
+      ldapGroupCache = new LDAPGroupCache(ldapConfigurator.getGroupCacheSize(), ldapConfigurator.getGroupCacheExpirationTime(), clockReader);
       if (ldapCacheListener != null) {
         ldapGroupCache.setLdapCacheListener(ldapCacheListener);
       }

File: modules/activiti-ldap/src/test/java/org/activiti/test/ldap/LdapGroupCacheTest.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Date;
 
 import org.activiti.engine.impl.persistence.entity.GroupIdentityManager;
-import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.test.Deployment;
 import org.activiti.ldap.LDAPGroupCache;
 import org.activiti.ldap.LDAPGroupCache.LDAPGroupCacheListener;
@@ -81,14 +80,14 @@ public void testLdapGroupCacheExpiration() {
 
     // Test the expiration time of the cache
     Date now = new Date();
-    ClockUtil.setCurrentTime(now);
+    processEngineConfiguration.getClock().setCurrentTime(now);
     
     assertEquals(0, taskService.createTaskQuery().taskCandidateUser("fozzie").count());
     assertEquals("fozzie", cacheListener.getLastCacheMiss());
     assertEquals("pepe", cacheListener.getLastCacheEviction()); 
     
     // Moving the clock forward two 45 minues should trigger cache eviction (configured to 30 mins)
-    ClockUtil.setCurrentTime(new Date(now.getTime() + (45 * 60 * 1000)));
+    processEngineConfiguration.getClock().setCurrentTime(new Date(now.getTime() + (45 * 60 * 1000)));
     assertEquals(0, taskService.createTaskQuery().taskCandidateUser("fozzie").count());
     assertEquals("fozzie", cacheListener.getLastCacheExpiration());
     assertEquals("fozzie", cacheListener.getLastCacheEviction());

File: modules/activiti-osgi/src/test/java/org/activiti/osgi/blueprint/BlueprintBasicTest.java
Patch:
@@ -81,6 +81,7 @@ public Option[] createConfiguration() {
     Option[] coreBundles = options(
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-model").version("5.15-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-bpmn-converter").version("5.15-SNAPSHOT"),
+        mavenBundle().groupId("org.activiti").artifactId("activiti-process-validation").version("5.15-SNAPSHOT"),
         mavenBundle().groupId("org.activiti").artifactId("activiti-engine").version("5.15-SNAPSHOT"),
         mavenBundle().groupId("org.apache.commons").artifactId("commons-lang3").version("3.1"),
         mavenBundle().groupId("org.codehaus.jackson").artifactId("jackson-core-asl").version("1.9.9"),

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -211,6 +211,7 @@ public String getMssqlOrDB2OrderBy() {
     String specialOrderBy = super.getOrderBy();
     if (specialOrderBy != null && specialOrderBy.length() > 0) {
       specialOrderBy = specialOrderBy.replace("RES.", "TEMPRES_");
+      specialOrderBy = specialOrderBy.replace("VAR.", "TEMPVAR_");
     }
     return specialOrderBy;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryImpl.java
Patch:
@@ -599,6 +599,7 @@ public String getMssqlOrDB2OrderBy() {
     String specialOrderBy = super.getOrderBy();
     if (specialOrderBy != null && specialOrderBy.length() > 0) {
       specialOrderBy = specialOrderBy.replace("RES.", "TEMPRES_");
+      specialOrderBy = specialOrderBy.replace("VAR.", "TEMPVAR_");
     }
     return specialOrderBy;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -717,6 +717,7 @@ protected void initSessionFactories() {
       dbSqlSessionFactory.setDbIdentityUsed(isDbIdentityUsed);
       dbSqlSessionFactory.setDbHistoryUsed(isDbHistoryUsed);
       dbSqlSessionFactory.setDatabaseTablePrefix(databaseTablePrefix);
+      dbSqlSessionFactory.setTablePrefixIsSchema(tablePrefixIsSchema);
       dbSqlSessionFactory.setDatabaseSchema(databaseSchema);
       addSessionFactory(dbSqlSessionFactory);
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryProperty.java
Patch:
@@ -38,6 +38,8 @@ public class HistoricProcessInstanceQueryProperty implements QueryProperty {
   public static final HistoricProcessInstanceQueryProperty DURATION = new HistoricProcessInstanceQueryProperty("RES.DURATION_");
   public static final HistoricProcessInstanceQueryProperty TENANT_ID = new HistoricProcessInstanceQueryProperty("RES.TENANT_ID_");
   
+  public static final HistoricProcessInstanceQueryProperty INCLUDED_VARIABLE_TIME = new HistoricProcessInstanceQueryProperty("VAR.LAST_UPDATED_TIME_");
+  
   private String name;
 
   public HistoricProcessInstanceQueryProperty(String name) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -44,6 +44,8 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_PRIORITY = new HistoricTaskInstanceQueryProperty("RES.PRIORITY_");
   public static final HistoricTaskInstanceQueryProperty TASK_DUE_DATE = new HistoricTaskInstanceQueryProperty("RES.DUE_DATE_");
   public static final HistoricTaskInstanceQueryProperty TENANT_ID_ = new HistoricTaskInstanceQueryProperty("RES.TENANT_ID_");
+  
+  public static final HistoricTaskInstanceQueryProperty INCLUDED_VARIABLE_TIME = new HistoricTaskInstanceQueryProperty("VAR.LAST_UPDATED_TIME_");
 
   private String name;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -287,6 +287,7 @@ public String toString() {
     sb.append("HistoricVariableInstanceEntity[");
     sb.append("id=").append(id);
     sb.append(", name=").append(name);
+    sb.append(", revision=").append(revision);
     sb.append(", type=").append(variableType != null ? variableType.getTypeName() : "null");
     if (longValue != null) {
       sb.append(", longValue=").append(longValue);

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/BaseEntityEventListener.java
Patch:
@@ -58,7 +58,7 @@ public final void onEvent(ActivitiEvent event) {
 			// Check if this event
 			if (event.getType() == ActivitiEventType.ENTITY_CREATED) {
 				onCreate(event);
-			}if (event.getType() == ActivitiEventType.ENTITY_INITIALIZED) {
+			} else if (event.getType() == ActivitiEventType.ENTITY_INITIALIZED) {
 				onInitialized(event);
 			} else if (event.getType() == ActivitiEventType.ENTITY_DELETED) {
 				onDelete(event);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ActivitiEventDispatcherTest.java
Patch:
@@ -147,6 +147,7 @@ public void testBaseEntityEventListener() throws Exception {
 		assertTrue(listener.isCreateReceived());
 		assertFalse(listener.isUpdateReceived());
 		assertFalse(listener.isCustomReceived());
+		assertFalse(listener.isInitializeReceived());
 		assertFalse(listener.isDeleteReceived());
 		listener.reset();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/event/BaseEntityEventListener.java
Patch:
@@ -58,7 +58,7 @@ public final void onEvent(ActivitiEvent event) {
 			// Check if this event
 			if (event.getType() == ActivitiEventType.ENTITY_CREATED) {
 				onCreate(event);
-			}if (event.getType() == ActivitiEventType.ENTITY_CREATED) {
+			}if (event.getType() == ActivitiEventType.ENTITY_INITIALIZED) {
 				onInitialized(event);
 			} else if (event.getType() == ActivitiEventType.ENTITY_DELETED) {
 				onDelete(event);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -82,7 +82,7 @@ public class TaskQueryImpl extends AbstractVariableQueryImpl<TaskQuery, Task> im
   protected boolean includeTaskLocalVariables = false;
   protected boolean includeProcessVariables = false;
   protected String userIdForCandidateAndAssignee;
-  protected boolean bothCandidateAndAssigneed = false;
+  protected boolean bothCandidateAndAssigned = false;
 
   public TaskQueryImpl() {
   }
@@ -248,7 +248,7 @@ public TaskQueryImpl taskCandidateGroup(String candidateGroup) {
   }
 
   @Override
-  public TaskQuery taskCandidateOrAssigneed(String userIdForCandidateAndAssignee) {
+  public TaskQuery taskCandidateOrAssigned(String userIdForCandidateAndAssignee) {
     if (candidateGroup != null) {
       throw new ActivitiIllegalArgumentException("Invalid query usage: cannot set candidateGroup");
     }
@@ -258,7 +258,7 @@ public TaskQuery taskCandidateOrAssigneed(String userIdForCandidateAndAssignee)
     if (candidateGroups != null) {
       throw new ActivitiIllegalArgumentException("Invalid query usage: cannot set both candidateGroup and candidateGroupIn");
     }
-    bothCandidateAndAssigneed = true;
+    bothCandidateAndAssigned = true;
     this.userIdForCandidateAndAssignee = userIdForCandidateAndAssignee;
     return this;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/TaskQuery.java
Patch:
@@ -97,8 +97,8 @@ public interface TaskQuery extends Query<TaskQuery, Task>{
   /** Only select tasks for which users in the given group are candidates. */
   TaskQuery taskCandidateGroup(String candidateGroup);
 
-  /** Select tasks that has been claimed or assignee to user or waiting to claim by user (candidate user or groups) */
-  TaskQuery taskCandidateOrAssigneed(String userIdForCandidateAndAssignee);
+  /** Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups) */
+  TaskQuery taskCandidateOrAssigned(String userIdForCandidateAndAssignee);
   
   /** 
    * Only select tasks for which the 'candidateGroup' is one of the given groups.

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPQueryBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import javax.naming.directory.InitialDirContext;
 import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
+import javax.naming.ldap.Rdn;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.slf4j.Logger;
@@ -73,7 +74,7 @@ public String executeInContext(InitialDirContext initialDirContext) {
         
       });
       
-      searchExpression = MessageFormat.format(ldapConfigurator.getQueryGroupsForUser(), userDn);
+      searchExpression = MessageFormat.format(ldapConfigurator.getQueryGroupsForUser(), Rdn.escapeValue(userDn));
       
     } else {
       searchExpression = userId;

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPQueryBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import javax.naming.directory.InitialDirContext;
 import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
+import javax.naming.ldap.Rdn;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.slf4j.Logger;
@@ -73,7 +74,7 @@ public String executeInContext(InitialDirContext initialDirContext) {
         
       });
       
-      searchExpression = MessageFormat.format(ldapConfigurator.getQueryGroupsForUser(), userDn);
+      searchExpression = MessageFormat.format(ldapConfigurator.getQueryGroupsForUser(), Rdn.escapeValue(userDn));
       
     } else {
       searchExpression = userId;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DoubleFormType.java
Patch:
@@ -23,7 +23,7 @@
 public class DoubleFormType extends AbstractFormType {
 
   public String getName() {
-    return "long";
+    return "double";
   }
 
   public String getMimeType() {
@@ -34,7 +34,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
     if (propertyValue==null || "".equals(propertyValue)) {
       return null;
     }
-    return new Long(propertyValue);
+    return new Double(propertyValue);
   }
 
   public String convertModelValueToFormValue(Object modelValue) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/LongFormType.java
Patch:
@@ -23,7 +23,7 @@
 public class LongFormType extends AbstractFormType {
 
   public String getName() {
-    return "double";
+    return "long";
   }
 
   public String getMimeType() {
@@ -34,7 +34,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
     if (propertyValue==null || "".equals(propertyValue)) {
       return null;
     }
-    return new Double(propertyValue);
+    return new Long(propertyValue);
   }
 
   public String convertModelValueToFormValue(Object modelValue) {

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/BaseElement.java
Patch:
@@ -84,7 +84,7 @@ public String getAttributeValue(String namespace, String name) {
     List<ExtensionAttribute> attributes = getAttributes().get(name);
     if (attributes != null && !attributes.isEmpty()) {
       for (ExtensionAttribute attribute : attributes) {
-        if ( namespace == attribute.getNamespace())
+        if ( namespace.equals(attribute.getNamespace()))
           return attribute.getValue();
       }
     }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/BaseElement.java
Patch:
@@ -84,7 +84,7 @@ public String getAttributeValue(String namespace, String name) {
     List<ExtensionAttribute> attributes = getAttributes().get(name);
     if (attributes != null && !attributes.isEmpty()) {
       for (ExtensionAttribute attribute : attributes) {
-        if ( namespace == attribute.getNamespace())
+        if ( namespace.equals(attribute.getNamespace()))
           return attribute.getValue();
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ExecuteJobsRunnable implements Runnable
 {
-    private static Logger log = LoggerFactory.getLogger(AcquireJobsRunnable.class);
+    private static Logger log = LoggerFactory.getLogger(ExecuteJobsRunnable.class);
 
     private final List<String> jobIds;
     private final JobExecutor jobExecutor;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/TaskXMLConverter.java
Patch:
@@ -18,6 +18,7 @@
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.ManualTask;
+import org.activiti.bpmn.model.Task;
 
 /**
  * @author Tijs Rademakers
@@ -29,7 +30,7 @@ public static String getXMLType() {
   }
   
   public static Class<? extends BaseElement> getBpmnElementType() {
-    return ManualTask.class;
+    return Task.class;
   }
   
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/AssociationXMLConverter.java
Patch:
@@ -52,7 +52,9 @@ protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception
     if(StringUtils.isEmpty(association.getTargetRef())) {
       model.addProblem("association element missing attribute 'targetRef'", xtr);
     }
-    
+
+    parseChildElements(getXMLElementName(), association,xtr);
+
     return association;
   }
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/history/HistoricTaskInstanceBaseResource.java
Patch:
@@ -53,6 +53,9 @@ public class HistoricTaskInstanceBaseResource extends SecuredResource {
     allowedSortProperties.put("owner", HistoricTaskInstanceQueryProperty.TASK_OWNER);
     allowedSortProperties.put("priority", HistoricTaskInstanceQueryProperty.TASK_PRIORITY);
     allowedSortProperties.put("tenantId", HistoricTaskInstanceQueryProperty.TENANT_ID_);
+    
+    // Duplicate usage of HistoricTaskInstanceQueryProperty.START, to keep naming consistent and keep backwards-compatibility
+    allowedSortProperties.put("startTime", HistoricTaskInstanceQueryProperty.START);
   }
 
   protected DataResponse getQueryResponse(HistoricTaskInstanceQueryRequest queryRequest, Form urlQuery) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -127,7 +127,8 @@ public List<ProcessInstance> findProcessInstanceAndVariablesByQueryCriteria(Proc
     executionQuery.setMaxResults(20000);
     executionQuery.setFirstResult(0);
     
-    List<ProcessInstance> instanceList = getDbSqlSession().selectList("selectProcessInstanceWithVariablesByQueryCriteria", executionQuery);
+    List<ProcessInstance> instanceList = getDbSqlSession().selectListWithRawParameterWithoutFilter("selectProcessInstanceWithVariablesByQueryCriteria", 
+        executionQuery, executionQuery.getFirstResult(), executionQuery.getMaxResults());
     
     if (instanceList != null && instanceList.size() > 0) {
       if (firstResult > 0) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntityManager.java
Patch:
@@ -117,7 +117,8 @@ public List<HistoricProcessInstance> findHistoricProcessInstancesAndVariablesByQ
       historicProcessInstanceQuery.setMaxResults(20000);
       historicProcessInstanceQuery.setFirstResult(0);
       
-      List<HistoricProcessInstance> instanceList = getDbSqlSession().selectList("selectHistoricProcessInstancesWithVariablesByQueryCriteria", historicProcessInstanceQuery);
+      List<HistoricProcessInstance> instanceList = getDbSqlSession().selectListWithRawParameterWithoutFilter("selectHistoricProcessInstancesWithVariablesByQueryCriteria", 
+          historicProcessInstanceQuery, historicProcessInstanceQuery.getFirstResult(), historicProcessInstanceQuery.getMaxResults());
       
       if (instanceList != null && instanceList.size() > 0) {
         if (firstResult > 0) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntityManager.java
Patch:
@@ -71,7 +71,8 @@ public List<HistoricTaskInstance> findHistoricTaskInstancesAndVariablesByQueryCr
       historicTaskInstanceQuery.setMaxResults(20000);
       historicTaskInstanceQuery.setFirstResult(0);
       
-      List<HistoricTaskInstance> instanceList = getDbSqlSession().selectList("selectHistoricTaskInstancesWithVariablesByQueryCriteria", historicTaskInstanceQuery);
+      List<HistoricTaskInstance> instanceList = getDbSqlSession().selectListWithRawParameterWithoutFilter("selectHistoricTaskInstancesWithVariablesByQueryCriteria", 
+          historicTaskInstanceQuery, historicTaskInstanceQuery.getFirstResult(), historicTaskInstanceQuery.getMaxResults());
       
       if (instanceList != null && instanceList.size() > 0) {
         if (firstResult > 0) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManager.java
Patch:
@@ -136,7 +136,7 @@ public List<Task> findTasksAndVariablesByQueryCriteria(TaskQueryImpl taskQuery)
     taskQuery.setMaxResults(20000);
     taskQuery.setFirstResult(0);
     
-    List<Task> instanceList = getDbSqlSession().selectList(query, taskQuery);
+    List<Task> instanceList = getDbSqlSession().selectListWithRawParameterWithoutFilter(query, taskQuery, taskQuery.getFirstResult(), taskQuery.getMaxResults());
     
     if (instanceList != null && instanceList.size() > 0) {
       if (firstResult > 0) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/AssociationXMLConverter.java
Patch:
@@ -52,7 +52,9 @@ protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception
     if(StringUtils.isEmpty(association.getTargetRef())) {
       model.addProblem("association element missing attribute 'targetRef'", xtr);
     }
-    
+
+    parseChildElements(getXMLElementName(), association,xtr);
+
     return association;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -174,12 +174,13 @@ public void deploy(DeploymentEntity deployment) {
         dbSqlSession.insert(processDefinition);
         addAuthorizations(processDefinition);
 
-        scheduleTimers(timers);
-        
         if(commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
         	commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
         			ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, processDefinition));
         }
+
+        scheduleTimers(timers);
+
       } else {
         String deploymentId = deployment.getId();
         processDefinition.setDeploymentId(deploymentId);

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/RestResponseFactory.java
Patch:
@@ -377,7 +377,7 @@ public CommentResponse createCommentResponse(SecuredResource securedResource, St
     if(taskId != null) {
       result.setUrl(securedResource.createFullResourceUrl(RestUrls.URL_TASK_COMMENT, taskId, commentId));
     } else if(processInstanceId != null) {
-      result.setUrl(securedResource.createFullResourceUrl(RestUrls.URL_PROCESS_INSTANCE_COMMENT, processInstanceId, commentId));
+      result.setUrl(securedResource.createFullResourceUrl(RestUrls.URL_HISTORIC_PROCESS_INSTANCE_COMMENT, processInstanceId, commentId));
     }
     return result;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -114,6 +114,7 @@
 import org.activiti.engine.impl.event.SignalEventHandler;
 import org.activiti.engine.impl.form.BooleanFormType;
 import org.activiti.engine.impl.form.DateFormType;
+import org.activiti.engine.impl.form.DoubleFormType;
 import org.activiti.engine.impl.form.FormEngine;
 import org.activiti.engine.impl.form.FormTypes;
 import org.activiti.engine.impl.form.JuelFormEngine;
@@ -1135,6 +1136,7 @@ protected void initFormTypes() {
       formTypes.addFormType(new LongFormType());
       formTypes.addFormType(new DateFormType("dd/MM/yyyy"));
       formTypes.addFormType(new BooleanFormType());
+      formTypes.addFormType(new DoubleFormType());
     }
     if (customFormTypes!=null) {
       for (AbstractFormType customFormType: customFormTypes) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/LongFormType.java
Patch:
@@ -23,7 +23,7 @@
 public class LongFormType extends AbstractFormType {
 
   public String getName() {
-    return "long";
+    return "double";
   }
 
   public String getMimeType() {
@@ -34,7 +34,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
     if (propertyValue==null || "".equals(propertyValue)) {
       return null;
     }
-    return new Long(propertyValue);
+    return new Double(propertyValue);
   }
 
   public String convertModelValueToFormValue(Object modelValue) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -19,6 +19,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -67,12 +68,12 @@ public ProcessInstance execute(CommandContext commandContext) {
       if (processDefinition == null) {
         throw new ActivitiObjectNotFoundException("No process definition found for id = '" + processDefinitionId + "'", ProcessDefinition.class);
       }
-    } else if(processDefinitionKey != null && tenantId == null){
+    } else if(processDefinitionKey != null && (tenantId == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId))){
       processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKey(processDefinitionKey);
       if (processDefinition == null) {
         throw new ActivitiObjectNotFoundException("No process definition found for key '" + processDefinitionKey +"'", ProcessDefinition.class);
       }
-    } else if (processDefinitionKey != null && tenantId != null) {
+    } else if (processDefinitionKey != null && tenantId != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId)) {
     	 processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(processDefinitionKey, tenantId);
        if (processDefinition == null) {
          throw new ActivitiObjectNotFoundException("No process definition found for key '" + processDefinitionKey +"' for tenant identifier " + tenantId, ProcessDefinition.class);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -174,12 +174,13 @@ public void deploy(DeploymentEntity deployment) {
         dbSqlSession.insert(processDefinition);
         addAuthorizations(processDefinition);
 
-        scheduleTimers(timers);
-        
         if(commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {
         	commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
         			ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, processDefinition));
         }
+
+        scheduleTimers(timers);
+
       } else {
         String deploymentId = deployment.getId();
         processDefinition.setDeploymentId(deploymentId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java
Patch:
@@ -13,6 +13,7 @@
 package org.activiti.engine.impl.jobexecutor;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.cmd.StartProcessInstanceCmd;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -40,7 +41,7 @@ public void execute(JobEntity job, String configuration, ExecutionEntity executi
             .getDeploymentManager();
     
     ProcessDefinition processDefinition = null;
-    if (job.getTenantId() == null) {
+    if (job.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(job.getTenantId())) {
     		processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKey(configuration);
     } else {
     	processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(configuration, job.getTenantId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -185,7 +185,7 @@ public void deploy(DeploymentEntity deployment) {
         processDefinition.setDeploymentId(deploymentId);
         
         ProcessDefinitionEntity persistedProcessDefinition = null; 
-        if (processDefinition.getTenantId() == null) {
+        if (processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {
         	persistedProcessDefinition = processDefinitionManager.findProcessDefinitionByDeploymentAndKey(deploymentId, processDefinition.getKey());
         } else {
         	persistedProcessDefinition = processDefinitionManager.findProcessDefinitionByDeploymentAndKeyAndTenantId(deploymentId, processDefinition.getKey(), processDefinition.getTenantId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -90,6 +90,9 @@ public abstract class ProcessEngineConfiguration implements EngineServices {
   /** Upon building of the process engine, a check is performed and 
    * an update of the schema is performed if it is necessary. */
   public static final String DB_SCHEMA_UPDATE_TRUE = "true";
+  
+  /** The tenant id indicating 'no tenant' */
+  public static final String NO_TENANT_ID = "";
 
   protected String processEngineName = ProcessEngines.NAME_DEFAULT;
   protected int idBlockSize = 100;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Set;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
@@ -136,7 +137,7 @@ public void deploy(DeploymentEntity deployment) {
         int processDefinitionVersion;
 
         ProcessDefinitionEntity latestProcessDefinition = null;
-        if (processDefinition.getTenantId() != null) {
+        if (processDefinition.getTenantId() != null && !ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())) {
         	latestProcessDefinition = processDefinitionManager
         			.findLatestProcessDefinitionByKeyAndTenantId(processDefinition.getKey(), processDefinition.getTenantId());
         } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.repository.Deployment;
@@ -35,7 +36,7 @@ public class DeploymentEntity implements Serializable, Deployment, PersistentObj
   protected String id;
   protected String name;
   protected String category;
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   protected Map<String, ResourceEntity> resources;
   protected Date deploymentTime;
   protected boolean isNew;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.activiti.engine.EngineServices;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior;
@@ -108,7 +109,7 @@ public class ExecutionEntity extends VariableScopeImpl implements ActivityExecut
   protected StartingExecution startingExecution;
   
   /** The tenant identifier (if any) */
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   
   // state/type of execution ////////////////////////////////////////////////// 
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricActivityInstanceEntity.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.history.HistoricActivityInstance;
 
 /**
@@ -35,7 +36,7 @@ public class HistoricActivityInstanceEntity extends HistoricScopeInstanceEntity
   protected String assignee;
   protected String taskId;
   protected String calledProcessInstanceId;
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   
   public Object getPersistentState() {
     Map<String, Object> persistentState = (Map<String, Object>) new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntity.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.identity.Authentication;
@@ -37,7 +38,7 @@ public class HistoricProcessInstanceEntity extends HistoricScopeInstanceEntity i
   protected String startUserId;
   protected String startActivityId;
   protected String superProcessInstanceId;
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   protected List<HistoricVariableInstanceEntity> queryVariables;
 
   public HistoricProcessInstanceEntity() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntity.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.PersistentObject;
@@ -44,7 +45,7 @@ public class HistoricTaskInstanceEntity extends HistoricScopeInstanceEntity impl
   protected Date dueDate;
   protected Date claimTime;
   protected String category;
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   protected List<HistoricVariableInstanceEntity> queryVariables;
 
   public HistoricTaskInstanceEntity() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.event.ActivitiEventType;
 import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;
 import org.activiti.engine.impl.context.Context;
@@ -69,7 +70,7 @@ public abstract class JobEntity implements Serializable, Job, PersistentObject,
   
   protected String exceptionMessage;
   
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
 
   public void execute(CommandContext commandContext) {
     ExecutionEntity execution = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ModelEntity.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.repository.Model;
@@ -43,7 +44,7 @@ public class ModelEntity implements Serializable, Model, HasRevision, Persistent
   protected String deploymentId;
   protected String editorSourceValueId;
   protected String editorSourceExtraValueId;
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
 
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.event.impl.ActivitiEventSupport;
 import org.activiti.engine.impl.bpmn.parser.BpmnParse;
@@ -49,7 +50,7 @@ public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements Pr
   protected String category;
   protected String deploymentId;
   protected String resourceName;
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   protected Integer historyLevel;
   protected StartFormHandler startFormHandler;
   protected String diagramResourceName;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Set;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.DelegateTask;
 import org.activiti.engine.delegate.TaskListener;
@@ -91,7 +92,7 @@ public class TaskEntity extends VariableScopeImpl implements Task, DelegateTask,
   
   protected String eventName;
   
-  protected String tenantId = "";
+  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;
   
   protected List<VariableInstanceEntity> queryVariables;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -35,7 +35,7 @@ public class DeploymentEntity implements Serializable, Deployment, PersistentObj
   protected String id;
   protected String name;
   protected String category;
-  protected String tenantId;
+  protected String tenantId = "";
   protected Map<String, ResourceEntity> resources;
   protected Date deploymentTime;
   protected boolean isNew;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -108,7 +108,7 @@ public class ExecutionEntity extends VariableScopeImpl implements ActivityExecut
   protected StartingExecution startingExecution;
   
   /** The tenant identifier (if any) */
-  protected String tenantId;
+  protected String tenantId = "";
   
   // state/type of execution ////////////////////////////////////////////////// 
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricActivityInstanceEntity.java
Patch:
@@ -35,7 +35,7 @@ public class HistoricActivityInstanceEntity extends HistoricScopeInstanceEntity
   protected String assignee;
   protected String taskId;
   protected String calledProcessInstanceId;
-  protected String tenantId;
+  protected String tenantId = "";
   
   public Object getPersistentState() {
     Map<String, Object> persistentState = (Map<String, Object>) new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceEntity.java
Patch:
@@ -37,7 +37,7 @@ public class HistoricProcessInstanceEntity extends HistoricScopeInstanceEntity i
   protected String startUserId;
   protected String startActivityId;
   protected String superProcessInstanceId;
-  protected String tenantId;
+  protected String tenantId = "";
   protected List<HistoricVariableInstanceEntity> queryVariables;
 
   public HistoricProcessInstanceEntity() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntity.java
Patch:
@@ -44,7 +44,7 @@ public class HistoricTaskInstanceEntity extends HistoricScopeInstanceEntity impl
   protected Date dueDate;
   protected Date claimTime;
   protected String category;
-  protected String tenantId;
+  protected String tenantId = "";
   protected List<HistoricVariableInstanceEntity> queryVariables;
 
   public HistoricTaskInstanceEntity() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -69,7 +69,7 @@ public abstract class JobEntity implements Serializable, Job, PersistentObject,
   
   protected String exceptionMessage;
   
-  protected String tenantId;
+  protected String tenantId = "";
 
   public void execute(CommandContext commandContext) {
     ExecutionEntity execution = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ModelEntity.java
Patch:
@@ -43,7 +43,7 @@ public class ModelEntity implements Serializable, Model, HasRevision, Persistent
   protected String deploymentId;
   protected String editorSourceValueId;
   protected String editorSourceExtraValueId;
-  protected String tenantId;
+  protected String tenantId = "";
 
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -49,7 +49,7 @@ public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements Pr
   protected String category;
   protected String deploymentId;
   protected String resourceName;
-  protected String tenantId;
+  protected String tenantId = "";
   protected Integer historyLevel;
   protected StartFormHandler startFormHandler;
   protected String diagramResourceName;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -91,7 +91,7 @@ public class TaskEntity extends VariableScopeImpl implements Task, DelegateTask,
   
   protected String eventName;
   
-  protected String tenantId;
+  protected String tenantId = "";
   
   protected List<VariableInstanceEntity> queryVariables;
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ProcessDefinitionEventsTest.java
Patch:
@@ -74,7 +74,7 @@ public void testProcessDefinitionEvents() throws Exception {
 			
 		  // Check delete event when category is updated
 			repositoryService.deleteDeployment(processDefinition.getDeploymentId(), true);
-			deploymentId = null;
+			deploymentIdFromDeploymentAnnotation = null;
 			
 			assertEquals(1, listener.getEventsReceived().size());
 			assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/event/ProcessDefinitionScopedEventListenerTest.java
Patch:
@@ -38,11 +38,11 @@ public class ProcessDefinitionScopedEventListenerTest extends PluggableActivitiT
 	@Deployment(resources = { "org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml",
 	    "org/activiti/engine/test/api/event/simpleProcess.bpmn20.xml" })
 	public void testProcessDefinitionScopedListener() throws Exception {
-		ProcessDefinition firstDefinition = repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId)
+		ProcessDefinition firstDefinition = repositoryService.createProcessDefinitionQuery().deploymentId(deploymentIdFromDeploymentAnnotation)
 		    .processDefinitionKey("oneTaskProcess").singleResult();
 		assertNotNull(firstDefinition);
 
-		ProcessDefinition secondDefinition = repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId)
+		ProcessDefinition secondDefinition = repositoryService.createProcessDefinitionQuery().deploymentId(deploymentIdFromDeploymentAnnotation)
 		    .processDefinitionKey("simpleProcess").singleResult();
 		assertNotNull(firstDefinition);
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/form/FormServiceTest.java
Patch:
@@ -119,7 +119,7 @@ public void testTaskFormPropertyDefaultsAndFormRendering() {
     String procDefId = repositoryService.createProcessDefinitionQuery().singleResult().getId();
     StartFormData startForm = formService.getStartFormData(procDefId);
     assertNotNull(startForm);
-    assertEquals(deploymentId, startForm.getDeploymentId());
+    assertEquals(deploymentIdFromDeploymentAnnotation, startForm.getDeploymentId());
     assertEquals("org/activiti/engine/test/api/form/start.form", startForm.getFormKey());
     assertEquals(new ArrayList<FormProperty>(), startForm.getFormProperties());
     assertEquals(procDefId, startForm.getProcessDefinition().getId());
@@ -142,7 +142,7 @@ public void testTaskFormPropertyDefaultsAndFormRendering() {
     Task task = taskService.createTaskQuery().singleResult();
     String taskId = task.getId();
     TaskFormData taskForm = formService.getTaskFormData(taskId);
-    assertEquals(deploymentId, taskForm.getDeploymentId());
+    assertEquals(deploymentIdFromDeploymentAnnotation, taskForm.getDeploymentId());
     assertEquals("org/activiti/engine/test/api/form/task.form", taskForm.getFormKey());
     assertEquals(new ArrayList<FormProperty>(), taskForm.getFormProperties());
     assertEquals(taskId, taskForm.getTask().getId());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/deployment/BpmnDeploymentTest.java
Patch:
@@ -181,7 +181,7 @@ public void testProcessDiagramResource() {
     String diagramResourceName = processDefinition.getDiagramResourceName();
     assertEquals("org/activiti/engine/test/bpmn/deployment/BpmnDeploymentTest.testProcessDiagramResource.jpg", diagramResourceName);
     
-    InputStream diagramStream = repositoryService.getResourceAsStream(deploymentId, "org/activiti/engine/test/bpmn/deployment/BpmnDeploymentTest.testProcessDiagramResource.jpg");
+    InputStream diagramStream = repositoryService.getResourceAsStream(deploymentIdFromDeploymentAnnotation, "org/activiti/engine/test/bpmn/deployment/BpmnDeploymentTest.testProcessDiagramResource.jpg");
     byte[] diagramBytes = IoUtil.readInputStream(diagramStream, "diagram stream");
     assertEquals(33343, diagramBytes.length);
   }

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/management/JobResourceTest.java
Patch:
@@ -52,7 +52,7 @@ public void testGetJob() throws Exception {
     assertEquals(timerJob.getProcessInstanceId(), responseNode.get("processInstanceId").getTextValue());
     assertEquals(timerJob.getRetries(), responseNode.get("retries").getIntValue());
     assertEquals(timerJob.getDuedate(), getDateFromISOString(responseNode.get("dueDate").getTextValue()));
-    assertTrue(responseNode.get("tenantId").isNull());
+    assertEquals(responseNode.get("tenantId").getTextValue(), "");
     response.release();
     
     // Set tenant on deployment

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/repository/DeploymentResourceTest.java
Patch:
@@ -52,7 +52,7 @@ public void testPostNewDeploymentBPMNFile() throws Exception {
       String url = responseNode.get("url").getTextValue();
       String tenantId = responseNode.get("tenantId").getTextValue();
       
-      assertNull(tenantId);
+      assertEquals("", tenantId);
       
       assertNotNull(deploymentId);
       assertEquals(1L, repositoryService.createDeploymentQuery().deploymentId(deploymentId).count());
@@ -123,7 +123,7 @@ public void testPostNewDeploymentBarFile() throws Exception {
       String url = responseNode.get("url").getTextValue();
       String tenantId = responseNode.get("tenantId").getTextValue();
       
-      assertNull(tenantId);
+      assertTrue(tenantId.equals(""));
       assertNotNull(deploymentId);
       assertEquals(1L, repositoryService.createDeploymentQuery().deploymentId(deploymentId).count());
       
@@ -243,7 +243,7 @@ public void testGetDeployment() throws Exception {
     String url = responseNode.get("url").getTextValue();
     String tenantId = responseNode.get("tenantId").getTextValue();
     
-    assertNull(tenantId);
+    assertEquals("", tenantId);
     assertNotNull(deploymentId);
     assertEquals(existingDeployment.getId(), deploymentId);
     

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/repository/ModelResourceTest.java
Patch:
@@ -270,7 +270,7 @@ public void testUpdateModelOverrideWithNull() throws Exception {
       assertNull(model.getCategory());
       assertNull(model.getMetaInfo());
       assertNull(model.getDeploymentId());
-      assertNull(model.getTenantId());
+      assertEquals("", model.getTenantId());
       
     } finally
     {

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/ProcessInstanceResourceTest.java
Patch:
@@ -49,7 +49,7 @@ public void testGetProcessInstance() throws Exception {
     assertEquals("myBusinessKey", responseNode.get("businessKey").getTextValue());
     assertEquals("processTask", responseNode.get("activityId").getTextValue());
     assertFalse(responseNode.get("suspended").getBooleanValue());
-    assertTrue(responseNode.get("tenantId").isNull());
+    assertEquals("", responseNode.get("tenantId").getTextValue());
     
     assertTrue(responseNode.get("url").asText().endsWith(
             RestUrls.createRelativeResourceUrl(RestUrls.URL_PROCESS_INSTANCE, processInstance.getId())));

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/runtime/TaskResourceTest.java
Patch:
@@ -75,7 +75,7 @@ public void testGetProcessTask() throws Exception {
     assertEquals(task.getPriority(), responseNode.get("priority").asInt());
     assertTrue(responseNode.get("parentTaskId").isNull());
     assertTrue(responseNode.get("delegationState").isNull());
-    assertTrue(responseNode.get("tenantId").isNull());
+    assertEquals("", responseNode.get("tenantId").getTextValue());
     
     assertTrue(responseNode.get("executionUrl").asText().endsWith(
             RestUrls.createRelativeResourceUrl(RestUrls.URL_EXECUTION, task.getExecutionId())));
@@ -137,7 +137,7 @@ public void testGetProcessAdhoc() throws Exception {
       assertTrue(responseNode.get("executionId").isNull());
       assertTrue(responseNode.get("processInstanceId").isNull());
       assertTrue(responseNode.get("processDefinitionId").isNull());
-      assertTrue(responseNode.get("tenantId").isNull());
+      assertEquals("", responseNode.get("tenantId").getTextValue());
       
       assertTrue(responseNode.get("parentTaskUrl").asText().endsWith(
               RestUrls.createRelativeResourceUrl(RestUrls.URL_TASK, parentTask.getId())));

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/scope/Delegate1.java
Patch:
@@ -23,7 +23,6 @@ public class Delegate1 implements JavaDelegate, InitializingBean {
     private StatefulObject statefulObject;
 
 
-
     public void execute(DelegateExecution execution) throws Exception {
 
         String pid = this.processInstance.getId();

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/scope/EnableActivitiAnnotationProcessScopeTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.activiti.spring.annotations.AbstractActivitiConfigurer;
 import org.activiti.spring.annotations.ActivitiConfigurer;
 import org.h2.Driver;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -21,6 +22,7 @@
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration
+@Ignore // Ignored for the moment. Josh is working on this.
 public class EnableActivitiAnnotationProcessScopeTest {
 
     private ProcessScopeTestEngine processScopeTestEngine;

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/scope/XmlNamespaceProcessScopeTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.activiti.engine.repository.Deployment;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,6 +19,7 @@
  */
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration("classpath:org/activiti/spring/test/components/ScopingTests-context.xml")
+@Ignore // Ignored for the moment. Josh is working on this.
 public class XmlNamespaceProcessScopeTest {
 
     private ProcessScopeTestEngine processScopeTestEngine;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java
Patch:
@@ -186,7 +186,9 @@ public void exception(Throwable exception) {
     if (this.exception == null) {
       this.exception = exception;
     } else {
-    	LogMDC.putMDCExecution(Context.getExecutionContext().getExecution());    	    
+      if (Context.isExecutionContextActive()) {
+        LogMDC.putMDCExecution(Context.getExecutionContext().getExecution());
+      }
     	log.error("masked exception in command context. for root cause, see below as it will be rethrown later.", exception);    	
     	LogMDC.clear();
     }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/FormValue.java
Patch:
@@ -35,6 +35,7 @@ public FormValue clone() {
   }
   
   public void setValues(FormValue otherValue) {
+    super.setValues(otherValue);
     setName(otherValue.getName());
   }
 }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/data/HistoricTaskWrapper.java
Patch:
@@ -49,7 +49,7 @@ public HistoricTaskWrapper(HistoricTaskInstance historicTaskInstance) {
     setOwner(historicTaskInstance.getOwner());
     setAssignee(historicTaskInstance.getAssignee());
     
-    // TODO: add tenant id
+    setTenantId(historicTaskInstance.getTenantId());
   }
 
   public String getId() {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/DuplicateVariableInsertTest.java
Patch:
@@ -74,7 +74,6 @@ public void run() {
 		
 		// One of the 2 threads should get an optimistic lock exception
 		assertEquals(1, exceptions.size());
-		assertTrue(exceptions.get(0) instanceof ActivitiOptimisticLockingException);
 		
 		// One variable should be set
 		Map<String, Object> variables = runtimeService.getVariables(processInstance.getId());

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/DuplicateVariableInsertTest.java
Patch:
@@ -35,7 +35,7 @@ public class DuplicateVariableInsertTest extends PluggableActivitiTestCase {
 	 * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.
 	 */
 	public void testDuplicateVariableInsertOnExecution() throws Exception {
-		String processDefinitionId = deployOneTaskProcess();
+		String processDefinitionId = deployOneTaskTestProcess();
 		final ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);
 		
 		final CyclicBarrier startBarrier = new CyclicBarrier(2);
@@ -88,7 +88,7 @@ public void run() {
 	 * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.
 	 */
 	public void testDuplicateVariableInsertOnTask() throws Exception {
-		String processDefinitionId = deployOneTaskProcess();
+		String processDefinitionId = deployOneTaskTestProcess();
 		final ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);
 		final Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
 		

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetExecutionVariablesCmd.java
Patch:
@@ -42,6 +42,9 @@ protected Object execute(CommandContext commandContext, ExecutionEntity executio
       execution.setVariables(variables);
     }
     
+    // ACT-1887: Force an update of the execution's revision to prevent simultaneous inserts of the same
+    // variable. If not, duplicate variables may occur since optimistic locking doesn't work on inserts
+    execution.forceUpdate();
     return null;
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetTaskVariablesCmd.java
Patch:
@@ -45,6 +45,9 @@ protected Object execute(CommandContext commandContext, TaskEntity task) {
       task.setVariables(variables);
     }
     
+    // ACT-1887: Force an update of the task's revision to prevent simultaneous inserts of the same
+    // variable. If not, duplicate variables may occur since optimistic locking doesn't work on inserts
+    task.forceUpdate();
     return null;
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -297,6 +297,7 @@ public void initialize() {
 
     // initialize the lists of referenced objects (prevents db queries)
     variableInstances = new HashMap<String, VariableInstanceEntity>();
+    variableInstanceList  = new ArrayList<VariableInstanceEntity>();
     eventSubscriptions = new ArrayList<EventSubscriptionEntity>();
     jobs = new ArrayList<JobEntity>();
     tasks = new ArrayList<TaskEntity>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -150,6 +150,7 @@ public List<ExecutionEntity> findEventScopeExecutionsByActivityId(String activit
     Map<String, String> parameters = new HashMap<String, String>();
     parameters.put("activityId", activityRef);
     parameters.put("parentExecutionId", parentExecutionId);
+    
     return getDbSqlSession().selectList("selectExecutionsByParentExecutionId", parameters);
   }
 
@@ -171,7 +172,7 @@ public void updateExecutionTenantIdForDeployment(String deploymentId, String new
   	HashMap<String, Object> params = new HashMap<String, Object>();
   	params.put("deploymentId", deploymentId);
   	params.put("tenantId", newTenantId);
-  	getDbSqlSession().getSqlSession().update("updateExecutionTenantIdForDeployment", params);
+  	getDbSqlSession().update("updateExecutionTenantIdForDeployment", params);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntityManager.java
Patch:
@@ -152,7 +152,7 @@ public void updateJobTenantIdForDeployment(String deploymentId, String newTenant
   	HashMap<String, Object> params = new HashMap<String, Object>();
   	params.put("deploymentId", deploymentId);
   	params.put("tenantId", newTenantId);
-  	getDbSqlSession().getSqlSession().update("updateJobTenantIdForDeployment", params);
+  	getDbSqlSession().update("updateJobTenantIdForDeployment", params);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntityManager.java
Patch:
@@ -102,7 +102,7 @@ public void updateProcessDefinitionTenantIdForDeployment(String deploymentId, St
   	HashMap<String, Object> params = new HashMap<String, Object>();
   	params.put("deploymentId", deploymentId);
   	params.put("tenantId", newTenantId);
-  	getDbSqlSession().getSqlSession().update("updateProcessDefinitionTenantIdForDeploymentId", params);
+  	getDbSqlSession().update("updateProcessDefinitionTenantIdForDeploymentId", params);
   }
  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManager.java
Patch:
@@ -197,7 +197,7 @@ public void updateTaskTenantIdForDeployment(String deploymentId, String newTenan
   	HashMap<String, Object> params = new HashMap<String, Object>();
   	params.put("deploymentId", deploymentId);
   	params.put("tenantId", newTenantId);
-  	getDbSqlSession().getSqlSession().update("updateTaskTenantIdForDeployment", params);
+  	getDbSqlSession().update("updateTaskTenantIdForDeployment", params);
   }
   
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -61,6 +61,9 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("mysql", "selectDeploymentsByQueryCriteria", "selectDeploymentsByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectDeploymentCountByQueryCriteria", "selectDeploymentCountByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectModelCountByQueryCriteria", "selectModelCountByQueryCriteria_mysql");
+    addDatabaseSpecificStatement("mysql", "updateExecutionTenantIdForDeployment", "updateExecutionTenantIdForDeployment_mysql");
+    addDatabaseSpecificStatement("mysql", "updateTaskTenantIdForDeployment", "updateTaskTenantIdForDeployment_mysql");
+    addDatabaseSpecificStatement("mysql", "updateJobTenantIdForDeployment", "updateJobTenantIdForDeployment_mysql");
     
     //postgres specific
     databaseSpecificLimitBeforeStatements.put("postgres", "");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -141,7 +141,7 @@ else if (dueDateValue instanceof Date) {
       timer.setProcessDefinitionId(executionEntity.getProcessDefinitionId());
       
       // Inherit tenant identifier (if applicable)
-      if (executionEntity.getTenantId() != null) {
+      if (executionEntity != null && executionEntity.getTenantId() != null) {
       	timer.setTenantId(executionEntity.getTenantId());
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -75,6 +75,7 @@ public Map<String, ResourceEntity> getResources() {
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();
     persistentState.put("category", this.category);
+    persistentState.put("tenantId", tenantId);
     return persistentState;
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -96,7 +96,7 @@ public void insert() {
       execution.addJob(this);
       
       // Inherit tenant if (if applicable)
-      if (execution.getTenantId() != null) {
+      if (execution != null && execution.getTenantId() != null) {
       	setTenantId(execution.getTenantId());
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -115,7 +115,7 @@ public void insert(ExecutionEntity execution) {
     dbSqlSession.insert(this);
     
     // Inherit tenant id (if applicable)
-    if (execution.getTenantId() != null) {
+    if (execution != null && execution.getTenantId() != null) {
     	setTenantId(execution.getTenantId());
     }
     

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetTableMetaData() {
     
     TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix+"ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
-    assertEquals(17, tableMetaData.getColumnNames().size());
+    assertEquals(18, tableMetaData.getColumnNames().size());
 
     int assigneeIndex = tableMetaData.getColumnNames().indexOf("ASSIGNEE_");
     int createTimeIndex = tableMetaData.getColumnNames().indexOf("CREATE_TIME_");

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BaseBpmnXMLConverter.java
Patch:
@@ -73,6 +73,7 @@ public abstract class BaseBpmnXMLConverter implements BpmnXMLConstants {
   protected static final List<ExtensionAttribute> defaultActivityAttributes = Arrays.asList(
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_ACTIVITY_ASYNCHRONOUS), 
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_ACTIVITY_EXCLUSIVE), 
+      new ExtensionAttribute(ATTRIBUTE_DEFAULT), 
       new ExtensionAttribute(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_ACTIVITY_ISFORCOMPENSATION)
   );
   

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/ActivitiContextUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.activiti.spring.components;
 
-import org.activiti.spring.components.config.StateHandlerAnnotationBeanFactoryPostProcessor;
+import org.activiti.spring.components.support.StateHandlerBeanFactoryPostProcessor;
 
 /**
  * @author Josh Long
@@ -24,7 +24,7 @@
 public class ActivitiContextUtils {
 
 	public static final String ANNOTATION_STATE_HANDLER_BEAN_FACTORY_POST_PROCESSOR_BEAN_NAME
-            = StateHandlerAnnotationBeanFactoryPostProcessor.class.getName() ;
+            = StateHandlerBeanFactoryPostProcessor.class.getName() ;
 	/**
 	 * the name of the default registry used to store all state handling components
 	 */

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/support/ProcessStartingBeanPostProcessor.java
Patch:
@@ -13,7 +13,7 @@
  *     See the License for the specific language governing permissions and
  *     limitations under the License.
  */
-package org.activiti.spring.components.aop;
+package org.activiti.spring.components.support;
 
 import org.activiti.engine.ProcessEngine;
 import org.activiti.spring.annotations.ProcessVariable;

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/support/ProcessStartingMethodInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.spring.components.aop;
+package org.activiti.spring.components.support;
 
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.RuntimeService;

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/support/StateHandlerBeanPostProcessor.java
Patch:
@@ -13,7 +13,7 @@
  *     See the License for the specific language governing permissions and
  *     limitations under the License.
  */
-package org.activiti.spring.components.aop;
+package org.activiti.spring.components.support;
 
 import org.activiti.spring.annotations.*;
 import org.activiti.spring.components.registry.StateHandlerRegistration;

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/support/util/MetaAnnotationMatchingPointcut.java
Patch:
@@ -13,7 +13,7 @@
  *     See the License for the specific language governing permissions and
  *     limitations under the License.
  */
-package org.activiti.spring.components.aop.util;
+package org.activiti.spring.components.support.util;
 
 import org.springframework.aop.ClassFilter;
 import org.springframework.aop.MethodMatcher;

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/support/util/MetaAnnotationMethodMatcher.java
Patch:
@@ -13,7 +13,7 @@
  *     See the License for the specific language governing permissions and
  *     limitations under the License.
  */
-package org.activiti.spring.components.aop.util;
+package org.activiti.spring.components.support.util;
 
 import org.springframework.aop.support.AopUtils;
 import org.springframework.aop.support.annotation.AnnotationMethodMatcher;

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/support/util/Scopifier.java
Patch:
@@ -13,7 +13,7 @@
  *     See the License for the specific language governing permissions and
  *     limitations under the License.
  */
-package org.activiti.spring.components.aop.util;
+package org.activiti.spring.components.support.util;
 
 import org.springframework.aop.scope.ScopedProxyUtils;
 import org.springframework.beans.factory.config.BeanDefinition;

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/ScopedCustomer.java
Patch:
@@ -1,14 +1,13 @@
 package org.activiti.spring.test.components;
 
-import org.activiti.spring.components.scope.ProcessScope;
+import org.activiti.spring.components.support.ProcessScopeBeanFactoryPostProcessor;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Component;
 
 import java.io.Serializable;
 
 
-@Scope(ProcessScope.PROCESS_SCOPE_NAME)
+@Scope(ProcessScopeBeanFactoryPostProcessor.PROCESS_SCOPE_NAME)
 public class ScopedCustomer implements Serializable, InitializingBean{
 	public ScopedCustomer() {
 	}

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/components/registry/HandlerRegistryTest.java
Patch:
@@ -10,7 +10,7 @@
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration
-public class HanderARegistryTest {
+public class HandlerRegistryTest {
 
     @Configuration
     public static class ActivitiConfiguration {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateThrowSignalEventActivityBehavior.java
Patch:
@@ -57,8 +57,8 @@ public void execute(ActivityExecution execution) throws Exception {
     for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : subscriptionEntities) {
       signalEventSubscriptionEntity.eventReceived(null, signalDefinition.isAsync());
     }
-    if (execution.getActivity() != null)
-    leave(execution);        
+    if (execution.getActivity() != null)  // dont continue if process has already finished
+       leave(execution);
   }
  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/IntermediateThrowSignalEventActivityBehavior.java
Patch:
@@ -57,7 +57,7 @@ public void execute(ActivityExecution execution) throws Exception {
     for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : subscriptionEntities) {
       signalEventSubscriptionEntity.eventReceived(null, signalDefinition.isAsync());
     }
-    
+    if (execution.getActivity() != null)
     leave(execution);        
   }
  

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskAttachmentCollectionResource.java
Patch:
@@ -88,7 +88,7 @@ protected AttachmentResponse createSimpleAttachment(Representation representatio
       throw new ActivitiIllegalArgumentException("Attachment name is required.");
     }
 
-    Attachment createdAttachment = ActivitiUtil.getTaskService().createAttachment(req.getType(), task.getId(), null, req.getName(),
+    Attachment createdAttachment = ActivitiUtil.getTaskService().createAttachment(req.getType(), task.getId(), task.getProcessInstanceId(), req.getName(),
             req.getDescription(), req.getExternalUrl());
 
     return getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory().createAttachmentResponse(this, createdAttachment);
@@ -125,7 +125,7 @@ protected AttachmentResponse createBinaryAttachment(Representation representatio
       throw new ActivitiIllegalArgumentException("Attachment content is required.");
     }
     
-    Attachment createdAttachment = ActivitiUtil.getTaskService().createAttachment(type, task.getId(), null, name,
+    Attachment createdAttachment = ActivitiUtil.getTaskService().createAttachment(type, task.getId(), task.getProcessInstanceId(), name,
             description, uploadItem.getInputStream());
     
     setStatus(Status.SUCCESS_CREATED);

File: modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskResource.java
Patch:
@@ -147,9 +147,6 @@ protected void delegateTask(Task task, TaskActionRequest actionRequest) {
   }
 
   protected void claimTask(Task task, TaskActionRequest actionRequest) {
-    if(actionRequest.getAssignee() == null) {
-      throw new ActivitiIllegalArgumentException("An assignee is required when claiming a task.");
-    }
     // In case the task is already claimed, a ActivitiTaskAlreadyClaimedException is thown and converted to
     // a CONFLICT response by the StatusService
     ActivitiUtil.getTaskService().claim(task.getId(), actionRequest.getAssignee());

File: modules/activiti-rest/src/test/java/org/activiti/rest/service/api/identity/UserCollectionResourceTest.java
Patch:
@@ -119,6 +119,7 @@ public void testCreateUser() throws Exception {
       requestNode.put("id", "testuser");
       requestNode.put("firstName", "Frederik");
       requestNode.put("lastName", "Heremans");
+      requestNode.put("password", "test");
       requestNode.put("email", "no-reply@activiti.org");
       
       ClientResource client = getAuthenticatedClient(RestUrls.createRelativeResourceUrl(RestUrls.URL_USER_COLLECTION, "testuser"));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntity.java
Patch:
@@ -81,6 +81,7 @@ public Object getPersistentState() {
     persistentState.put("taskDefinitionKey", taskDefinitionKey);
     persistentState.put("formKey", formKey);
     persistentState.put("priority", priority);
+    persistentState.put("category", category);
     if(parentTaskId != null) {
       persistentState.put("parentTaskId", parentTaskId);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/task/TaskDefinition.java
Patch:
@@ -165,6 +165,7 @@ public void addTaskListener(String eventName, TaskListener taskListener) {
       this.addTaskListener(TaskListener.EVENTNAME_CREATE, taskListener);
       this.addTaskListener(TaskListener.EVENTNAME_ASSIGNMENT, taskListener);
       this.addTaskListener(TaskListener.EVENTNAME_COMPLETE, taskListener);
+      this.addTaskListener(TaskListener.EVENTNAME_DELETE, taskListener);
       
     } else {
       List<TaskListener> taskEventListeners = taskListeners.get(eventName);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/task/TaskDefinition.java
Patch:
@@ -165,6 +165,7 @@ public void addTaskListener(String eventName, TaskListener taskListener) {
       this.addTaskListener(TaskListener.EVENTNAME_CREATE, taskListener);
       this.addTaskListener(TaskListener.EVENTNAME_ASSIGNMENT, taskListener);
       this.addTaskListener(TaskListener.EVENTNAME_COMPLETE, taskListener);
+      this.addTaskListener(TaskListener.EVENTNAME_DELETE, taskListener);
       
     } else {
       List<TaskListener> taskEventListeners = taskListeners.get(eventName);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BaseBpmnXMLConverter.java
Patch:
@@ -209,6 +209,7 @@ protected void parseChildElements(String elementName, BaseElement parentElement,
     BpmnXMLUtil.parseChildElements(elementName, parentElement, xtr, childParsers, model);
   }
   
+  @SuppressWarnings("unchecked")
   protected ExtensionElement parseExtensionElement(XMLStreamReader xtr) throws Exception {
     ExtensionElement extensionElement = new ExtensionElement();
     extensionElement.setName(xtr.getLocalName());
@@ -219,7 +220,7 @@ protected ExtensionElement parseExtensionElement(XMLStreamReader xtr) throws Exc
       extensionElement.setNamespacePrefix(xtr.getPrefix());
     }
 
-    BpmnXMLUtil.addCustomAttributes(xtr, extensionElement, null);
+    BpmnXMLUtil.addCustomAttributes(xtr, extensionElement, defaultElementAttributes);
 
     boolean readyWithExtensionElement = false;
     while (readyWithExtensionElement == false && xtr.hasNext()) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/util/BpmnXMLUtil.java
Patch:
@@ -308,8 +308,7 @@ public static String convertToDelimitedString(List<String> stringList) {
    * @param element
    * @param blackList
    */
-  @SuppressWarnings("unchecked")
-  public static void addCustomAttributes(XMLStreamReader xtr, BaseElement element, List<ExtensionAttribute> blackList) {
+  public static void addCustomAttributes(XMLStreamReader xtr, BaseElement element, List<ExtensionAttribute>... blackLists) {
     for (int i = 0; i < xtr.getAttributeCount(); i++) {
       ExtensionAttribute extensionAttribute = new ExtensionAttribute();
       extensionAttribute.setName(xtr.getAttributeLocalName(i));
@@ -318,7 +317,7 @@ public static void addCustomAttributes(XMLStreamReader xtr, BaseElement element,
       if (StringUtils.isNotEmpty(xtr.getAttributePrefix(i))) {
         extensionAttribute.setNamespacePrefix(xtr.getAttributePrefix(i));
       }
-      if (!isBlacklisted(extensionAttribute, blackList))
+      if (!isBlacklisted(extensionAttribute, blackLists))
         element.addAttribute(extensionAttribute);
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/TestActivityBehaviorFactory.java
Patch:
@@ -129,7 +129,7 @@ public NoneStartEventActivityBehavior createNoneStartEventActivityBehavior(Start
 
 	@Override
 	public EventSubProcessStartEventActivityBehavior createEventSubProcessStartEventActivityBehavior(StartEvent startEvent, String activityId) {
-		return createEventSubProcessStartEventActivityBehavior(startEvent, activityId);
+		return wrappedActivityBehaviorFactory.createEventSubProcessStartEventActivityBehavior(startEvent, activityId);
 	}
 
 	@Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java
Patch:
@@ -137,7 +137,7 @@ public void close() {
               // reduce log level, as normally we're not interested in logging this exception
               log.debug("Optimistic locking exception : " + exception);
             } else {
-              log.error("Error while closing command context", exception);
+              log.debug("Error while closing command context", exception);
             }
 
             transactionContext.rollback();

File: modules/activiti-simple-workflow-alfresco/src/main/java/org/activiti/workflow/simple/alfresco/conversion/AlfrescoEmailStepConverter.java
Patch:
@@ -63,7 +63,7 @@ protected void addMailActionParameter(String name, String value, ScriptServiceTa
 	
 	protected String getSafeScriptLiteral(String value) {
 		if(value != null) {
-			return value.replace("\n", "\\\n");
+			return value.replace("\n", "\\n\\\n");
 		} else {
 			return "";
 		}

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -1290,8 +1290,10 @@ public void testReadJpaVariableValueFromHistoricVariableUpdate() {
     manager.getTransaction().commit();
     manager.close();
     
+    Task task = taskService.createTaskQuery().processInstanceId(executionId).taskName("my task").singleResult();
+    
     runtimeService.setVariable(executionId, variableName, entity);
-    runtimeService.signal(executionId);
+    taskService.complete(task.getId());
     
     List<HistoricDetail> variableUpdates = historyService.createHistoricDetailQuery().processInstanceId(executionId).variableUpdates().list();
     

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/ExtensionElementsParser.java
Patch:
@@ -44,7 +44,7 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
       xtr.next();
       if (xtr.isStartElement()) {
         if (ELEMENT_EXECUTION_LISTENER.equals(xtr.getLocalName())) {
-          new ExecutionListenerParser().parseChildElement(xtr, activeProcess, model);
+          new ExecutionListenerParser().parseChildElement(xtr, parentElement, model);
         } else {
           ExtensionElement extensionElement = BpmnXMLUtil.parseExtensionElement(xtr);
           parentElement.addExtensionElement(extensionElement);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/ExtensionElementsParser.java
Patch:
@@ -44,7 +44,7 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
       xtr.next();
       if (xtr.isStartElement()) {
         if (ELEMENT_EXECUTION_LISTENER.equals(xtr.getLocalName())) {
-          new ExecutionListenerParser().parseChildElement(xtr, activeProcess, model);
+          new ExecutionListenerParser().parseChildElement(xtr, parentElement, model);
         } else {
           ExtensionElement extensionElement = BpmnXMLUtil.parseExtensionElement(xtr);
           parentElement.addExtensionElement(extensionElement);

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -1290,8 +1290,10 @@ public void testReadJpaVariableValueFromHistoricVariableUpdate() {
     manager.getTransaction().commit();
     manager.close();
     
+    Task task = taskService.createTaskQuery().processInstanceId(executionId).taskName("my task").singleResult();
+    
     runtimeService.setVariable(executionId, variableName, entity);
-    runtimeService.signal(executionId);
+    taskService.complete(task.getId());
     
     List<HistoricDetail> variableUpdates = historyService.createHistoricDetailQuery().processInstanceId(executionId).variableUpdates().list();
     

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/ChoiceStepsDefinitionConverter.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.workflow.simple.definition.ConditionDefinition;
 import org.activiti.workflow.simple.definition.ListConditionStepDefinition;
 import org.activiti.workflow.simple.definition.StepDefinition;
-import org.activiti.workflow.simple.util.BpmnModelUtil;
 
 /**
  * {@link StepDefinitionConverter} for converting a {@link ChoiceStepsDefinition} to the following BPMN 2.0 structure:

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/ListConditionStepDefinition.java
Patch:
@@ -18,12 +18,14 @@
 import java.util.Map;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
+import org.codehaus.jackson.annotate.JsonTypeName;
 
 
 /**
  * @author Tijs Rademakers
  */
 @SuppressWarnings("unchecked")
+@JsonTypeName("list")
 public class ListConditionStepDefinition<T> extends AbstractStepDefinitionContainer<ListConditionStepDefinition<T>> implements StepDefinition {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/ListStepDefinition.java
Patch:
@@ -17,12 +17,14 @@
 import java.util.Map;
 
 import org.activiti.workflow.simple.exception.SimpleWorkflowException;
+import org.codehaus.jackson.annotate.JsonTypeName;
 
 
 /**
  * @author Tijs Rademakers
  */
 @SuppressWarnings("unchecked")
+@JsonTypeName("list")
 public class ListStepDefinition<T> extends AbstractStepDefinitionContainer<ListStepDefinition<T>> implements StepDefinition {
 
   private static final long serialVersionUID = 1L;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayRef.java
Patch:
@@ -71,7 +71,7 @@ public ByteArrayEntity getEntity() {
   }
 
   public void delete() {
-    if (!deleted) {
+    if (!deleted && id != null) {
       if (entity != null) {
         // if the entity has been loaded already,
         // we might as well use the safer optimistic locking delete.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -298,7 +298,7 @@ public void deleteIdentityLink(String userId, String groupId, String type) {
     List<IdentityLinkEntity> removedIdentityLinkEntities = new ArrayList<IdentityLinkEntity>();
     for (IdentityLinkEntity identityLinkEntity : this.getIdentityLinks()) {
       if (IdentityLinkType.CANDIDATE.equals(identityLinkEntity.getType())) {
-        if ((userId != null && identityLinkEntity.getUserId().equals(userId))
+        if ((userId != null && userId.equals(identityLinkEntity.getUserId()))
           || (groupId != null && identityLinkEntity.getGroupId().equals(groupId))) {
           Context
             .getCommandContext()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -298,7 +298,7 @@ public void deleteIdentityLink(String userId, String groupId, String type) {
     List<IdentityLinkEntity> removedIdentityLinkEntities = new ArrayList<IdentityLinkEntity>();
     for (IdentityLinkEntity identityLinkEntity : this.getIdentityLinks()) {
       if (IdentityLinkType.CANDIDATE.equals(identityLinkEntity.getType())) {
-        if ((userId != null && identityLinkEntity.getUserId().equals(userId))
+        if ((userId != null && userId.equals(identityLinkEntity.getUserId()))
           || (groupId != null && identityLinkEntity.getGroupId().equals(groupId))) {
           Context
             .getCommandContext()

File: modules/activiti-simple-workflow-alfresco/src/test/java/org/activiti/workflow/simple/alfresco/test/WorkflowDefinitionConversionTest.java
Patch:
@@ -75,7 +75,7 @@ public void testEmptyWorkflowDefinitionConversion() {
 		boolean startTaskFound = false;
 		for(FlowElement element : process.getFlowElements()) {
 			if(element instanceof StartEvent) {
-				assertEquals("bpm:activitiStartTask", ((StartEvent) element).getFormKey());
+				assertEquals("bpm:startTask", ((StartEvent) element).getFormKey());
 				startTaskFound = true;
 			}
 		}

File: modules/activiti-simple-workflow-alfresco/src/main/java/org/activiti/workflow/simple/alfresco/conversion/form/AlfrescoFormCreator.java
Patch:
@@ -42,6 +42,7 @@ public AlfrescoFormCreator() {
 		registerConverter(new AlfrescoDatePropertyConverter());
 		registerConverter(new AlfrescoNumberPropertyConverter());
 		registerConverter(new AlfrescoListPropertyConverter());
+		registerConverter(new AlfrescoReferencePropertyConverter());
   }
 	
 	public void createForm(M2Type contentType, Form formConfig, FormDefinition formDefinition, WorkflowDefinitionConversion conversion) {

File: modules/activiti-simple-workflow-alfresco/src/main/java/org/activiti/workflow/simple/alfresco/model/M2PropertyOverride.java
Patch:
@@ -34,7 +34,7 @@ public class M2PropertyOverride {
 	@XmlElement(namespace="http://www.alfresco.org/model/dictionary/1.0")
 	private M2Mandatory mandatory;
 	
-	@XmlElement(namespace="http://www.alfresco.org/model/dictionary/1.0")
+	@XmlElement(namespace="http://www.alfresco.org/model/dictionary/1.0", name="default")
 	private String defaultValue;
 	
 	@XmlElement(name="constraint", namespace="http://www.alfresco.org/model/dictionary/1.0")

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BpmnXMLConverter.java
Patch:
@@ -447,7 +447,7 @@ public byte[] convertToXML(BpmnModel model, String encoding) {
       XMLStreamWriter writer = xof.createXMLStreamWriter(out);
       XMLStreamWriter xtw = new IndentingXMLStreamWriter(writer);
 
-      DefinitionsRootExport.writeRootElement(model, xtw);
+      DefinitionsRootExport.writeRootElement(model, xtw, encoding);
       SignalAndMessageDefinitionExport.writeSignalsAndMessages(model, xtw);
       PoolExport.writePools(model, xtw);
       

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/DefinitionsRootExport.java
Patch:
@@ -14,7 +14,6 @@
 
 import javax.xml.stream.XMLStreamWriter;
 
-import com.sun.org.apache.xml.internal.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode;
 import org.activiti.bpmn.constants.BpmnXMLConstants;
 import org.activiti.bpmn.model.BpmnModel;
 import org.apache.commons.lang3.StringUtils;
@@ -29,8 +28,8 @@ public class DefinitionsRootExport implements BpmnXMLConstants {
   protected static final Set<String> defaultNamespaces = new HashSet<String>(
       Arrays.asList(XSI_PREFIX, ACTIVITI_EXTENSIONS_PREFIX, BPMNDI_PREFIX, OMGDC_PREFIX, OMGDI_PREFIX));
 
-  public static void writeRootElement(BpmnModel model, XMLStreamWriter xtw) throws Exception {
-    xtw.writeStartDocument("UTF-8", "1.0");
+  public static void writeRootElement(BpmnModel model, XMLStreamWriter xtw, String encoding) throws Exception {
+    xtw.writeStartDocument(encoding, "1.0");
 
     // start definitions root element
     xtw.writeStartElement(ELEMENT_DEFINITIONS);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/CompensateEventDefinitionParser.java
Patch:
@@ -40,6 +40,8 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
       eventDefinition.setWaitForCompletion(Boolean.parseBoolean(xtr.getAttributeValue(null, ATTRIBUTE_COMPENSATE_WAITFORCOMPLETION)));
     }
     
+    BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_COMPENSATEDEFINITION, eventDefinition, xtr, model);
+    
     ((Event) parentElement).getEventDefinitions().add(eventDefinition);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ErrorEventDefinitionParser.java
Patch:
@@ -41,6 +41,8 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
       model.addProblem("errorRef is required for an error event", xtr);
     }
     
+    BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_ERRORDEFINITION, eventDefinition, xtr, model);
+    
     ((Event) parentElement).getEventDefinitions().add(eventDefinition);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/MessageEventDefinitionParser.java
Patch:
@@ -54,6 +54,9 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
         model.addProblem("Invalid 'messageRef': no message with id '" + eventDefinition.getMessageRef() + "' found.", xtr);
       }
     }
+    
+    BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_MESSAGEDEFINITION, eventDefinition, xtr, model);
+    
     ((Event) parentElement).getEventDefinitions().add(eventDefinition);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/SignalEventDefinitionParser.java
Patch:
@@ -44,6 +44,8 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
       model.addProblem("signalEventDefinition does not have required property 'signalRef'", xtr);
     }
     
+    BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_SIGNALDEFINITION, eventDefinition, xtr, model);
+    
     ((Event) parentElement).getEventDefinitions().add(eventDefinition);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/TerminateEventDefinitionParser.java
Patch:
@@ -35,6 +35,9 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
     
     TerminateEventDefinition eventDefinition = new TerminateEventDefinition();
     BpmnXMLUtil.addXMLLocation(eventDefinition, xtr);
+    
+    BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_TERMINATEDEFINITION, eventDefinition, xtr, model);
+    
     ((Event) parentElement).getEventDefinitions().add(eventDefinition);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/ItemDefinitionParser.java
Patch:
@@ -45,6 +45,7 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
         
         item.setStructureRef(structureRef);
         item.setItemKind(xtr.getAttributeValue(null, ATTRIBUTE_ITEM_KIND));
+        BpmnXMLUtil.parseChildElements(ELEMENT_ITEM_DEFINITION, item, xtr, model);
         model.addItemDefinition(itemDefinitionId, item);
       }
     }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/MessageParser.java
Patch:
@@ -32,6 +32,7 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
       String itemRef = parseItemRef(xtr.getAttributeValue(null, ATTRIBUTE_ITEM_REF), model);
       Message message = new Message(messageId, messageName, itemRef);
       BpmnXMLUtil.addXMLLocation(message, xtr);
+      BpmnXMLUtil.parseChildElements(ELEMENT_MESSAGE, message, xtr, model);
       model.addMessage(message);
     }
   }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/SignalParser.java
Patch:
@@ -52,6 +52,7 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
       }
       
       BpmnXMLUtil.addXMLLocation(signal, xtr);
+      BpmnXMLUtil.parseChildElements(ELEMENT_SIGNAL, signal, xtr, model);
       model.addSignal(signal);
     }
   }

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/InCompleteSignalConverterTest.java
Patch:
@@ -33,6 +33,5 @@ private void validateModel(BpmnModel model) {
     List<Problem> problems = model.getProblems();
     assertNotNull(problems);
     assertEquals(1, problems.size());
-    System.out.println(problems.get(0));
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/BPMNDIExport.java
Patch:
@@ -53,8 +53,8 @@ public static void writeBPMNDI(BpmnModel model, XMLStreamWriter xtw) throws Exce
         
         GraphicInfo graphicInfo = model.getGraphicInfo(elementId);
         FlowElement flowElement = model.getFlowElement(elementId);
-        if (flowElement != null && flowElement instanceof SubProcess) {
-          xtw.writeAttribute(ATTRIBUTE_DI_IS_EXPANDED, String.valueOf(graphicInfo.isExpanded()));
+        if (flowElement != null && flowElement instanceof SubProcess && graphicInfo.getExpanded() != null) {
+          xtw.writeAttribute(ATTRIBUTE_DI_IS_EXPANDED, String.valueOf(graphicInfo.getExpanded()));
         }
         
         xtw.writeStartElement(OMGDC_PREFIX, ELEMENT_DI_BOUNDS, OMGDC_NAMESPACE);

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/GraphicInfo.java
Patch:
@@ -23,7 +23,7 @@ public class GraphicInfo {
   protected double height;
   protected double width;
   protected FlowElement element;
-  protected boolean expanded;
+  protected Boolean expanded;
   protected int xmlRowNumber;
   protected int xmlColumnNumber;
   public double getX() {
@@ -50,10 +50,10 @@ public double getWidth() {
   public void setWidth(double width) {
     this.width = width;
   }
-  public boolean isExpanded() {
+  public Boolean getExpanded() {
     return expanded;
   }
-  public void setExpanded(boolean expanded) {
+  public void setExpanded(Boolean expanded) {
     this.expanded = expanded;
   }
   public FlowElement getElement() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/diagram/ProcessDiagramGenerator.java
Patch:
@@ -276,7 +276,7 @@ public void draw(ProcessDiagramCanvas processDiagramCanvas, BpmnModel bpmnModel,
 
       public void draw(ProcessDiagramCanvas processDiagramCanvas, BpmnModel bpmnModel, FlowNode flowNode) {
         GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(flowNode.getId());
-        if (!graphicInfo.isExpanded()) {
+        if (graphicInfo.getExpanded() != null && graphicInfo.getExpanded() == false) {
           processDiagramCanvas.drawCollapsedSubProcess(flowNode.getName(), (int) graphicInfo.getX(), 
                   (int) graphicInfo.getY(), (int) graphicInfo.getWidth(), (int) graphicInfo.getHeight(), false);
         } else {
@@ -291,7 +291,7 @@ public void draw(ProcessDiagramCanvas processDiagramCanvas, BpmnModel bpmnModel,
 
       public void draw(ProcessDiagramCanvas processDiagramCanvas, BpmnModel bpmnModel, FlowNode flowNode) {
         GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(flowNode.getId());
-        if (!graphicInfo.isExpanded()) {
+        if (graphicInfo.getExpanded() != null && graphicInfo.getExpanded() == false) {
           processDiagramCanvas.drawCollapsedSubProcess(flowNode.getName(), (int) graphicInfo.getX(), 
                   (int) graphicInfo.getY(), (int) graphicInfo.getWidth(), (int) graphicInfo.getHeight(), true);
         } else {
@@ -389,7 +389,7 @@ protected static void drawActivity(ProcessDiagramCanvas processDiagramCanvas, Bp
       // Gather info on the collapsed marker
       GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(flowNode.getId()); 
       if (flowNode instanceof SubProcess) {
-        collapsed = !graphicInfo.isExpanded();
+        collapsed = graphicInfo.getExpanded() != null && graphicInfo.getExpanded() == false;
       } else if (flowNode instanceof CallActivity) {
         collapsed = true;
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -20,6 +20,8 @@
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
 /**
  * Implementation of the Parallel Gateway/AND gateway as definined in the BPMN
@@ -65,7 +67,7 @@ public void execute(ActivityExecution execution) throws Exception {
     List<ActivityExecution> joinedExecutions = execution.findInactiveConcurrentExecutions(activity);
     int nbrOfExecutionsToJoin = execution.getActivity().getIncomingTransitions().size();
     int nbrOfExecutionsJoined = joinedExecutions.size();
-    
+    Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) execution);
     if (nbrOfExecutionsJoined==nbrOfExecutionsToJoin) {
       
       // Fork

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/navigation/NavigatorManager.java
Patch:
@@ -70,6 +70,8 @@ public void afterPropertiesSet() throws Exception {
     addNavigator(new MyProcessesNavigator());
     addNavigator(new SavedReportNavigator());
     addNavigator(new ReportNavigator());
+    addNavigator(new ActiveProcessDefinitionNavigator());
+    addNavigator(new SuspendedProcessDefinitionNavigator());
   }
 
 }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/navigation/SuspendedProcessDefinitionNavigator.java
Patch:
@@ -31,9 +31,9 @@ public void handleManagementNavigation(UriFragment uriFragment) {
     String processDefinitionId = uriFragment.getUriPart(1);
     
     if(processDefinitionId != null) {
-      ExplorerApp.get().getViewManager().showActiveProcessDefinitionsPage(processDefinitionId);
+      ExplorerApp.get().getViewManager().showSuspendedProcessDefinitionsPage(processDefinitionId);
     } else {
-      ExplorerApp.get().getViewManager().showActiveProcessDefinitionsPage();
+      ExplorerApp.get().getViewManager().showSuspendedProcessDefinitionsPage();
     }
   }
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processdefinition/SuspendedProcessDefinitionPage.java
Patch:
@@ -15,7 +15,6 @@
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.data.LazyLoadingContainer;
 import org.activiti.explorer.data.LazyLoadingQuery;
-import org.activiti.explorer.navigation.ActiveProcessDefinitionNavigator;
 import org.activiti.explorer.navigation.SuspendedProcessDefinitionNavigator;
 import org.activiti.explorer.navigation.UriFragment;
 import org.activiti.explorer.ui.management.ManagementPage;
@@ -80,12 +79,12 @@ public void valueChange(ValueChangeEvent event) {
           
           // Update URL
           ExplorerApp.get().setCurrentUriFragment(
-                  new UriFragment(ActiveProcessDefinitionNavigator.ACTIVE_PROC_DEF_URI_PART, processDefinitionId));
+                  new UriFragment(SuspendedProcessDefinitionNavigator.SUSPENDED_PROC_DEF_URI_PART, processDefinitionId));
           
         } else {
           // Nothing selected
           setDetailComponent(null);
-          ExplorerApp.get().setCurrentUriFragment(new UriFragment(ActiveProcessDefinitionNavigator.ACTIVE_PROC_DEF_URI_PART));
+          ExplorerApp.get().setCurrentUriFragment(new UriFragment(SuspendedProcessDefinitionNavigator.SUSPENDED_PROC_DEF_URI_PART));
         }
       }
       

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ActivitiListenerParser.java
Patch:
@@ -43,7 +43,7 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
       model.addProblem("Element 'class' or 'expression' is mandatory on executionListener", xtr);
     }
     listener.setEvent(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_EVENT));
-    
+    addListenerToParent(listener, parentElement);
     parseChildElements(xtr, listener, model, new FieldExtensionParser());
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -82,7 +82,6 @@ public class DbSqlSession implements Session {
   protected SqlSession sqlSession;
   protected DbSqlSessionFactory dbSqlSessionFactory;
   protected List<PersistentObject> insertedObjects = new ArrayList<PersistentObject>();
-  protected List<PersistentObject> updatedObjects = new ArrayList<PersistentObject>();
   protected Map<Class<?>, Map<String, CachedObject>> cachedObjects = new HashMap<Class<?>, Map<String,CachedObject>>();
   protected List<DeleteOperation> deleteOperations = new ArrayList<DeleteOperation>();
   protected List<DeserializedObject> deserializedObjects = new ArrayList<DeserializedObject>();
@@ -119,7 +118,6 @@ public void insert(PersistentObject persistentObject) {
   // update ///////////////////////////////////////////////////////////////////
   
   public void update(PersistentObject persistentObject) {
-    updatedObjects.add(persistentObject);
     cachePut(persistentObject, false);
   }
   

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ActivitiListenerParser.java
Patch:
@@ -26,11 +26,9 @@
  */
 public abstract class ActivitiListenerParser extends BaseChildElementParser {
   
-	protected ActivitiListener listener;
-	
   public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
     
-    listener = new ActivitiListener();
+    ActivitiListener listener = new ActivitiListener();
     BpmnXMLUtil.addXMLLocation(listener, xtr);
     if (StringUtils.isNotEmpty(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_CLASS))) {
       listener.setImplementation(xtr.getAttributeValue(null, ATTRIBUTE_LISTENER_CLASS));
@@ -48,4 +46,6 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
     
     parseChildElements(xtr, listener, model, new FieldExtensionParser());
   }
+  
+  public abstract void addListenerToParent(ActivitiListener listener, BaseElement parentElement);
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/BaseChildElementParser.java
Patch:
@@ -28,14 +28,11 @@ public abstract class BaseChildElementParser implements BpmnXMLConstants {
   
   protected static final Logger LOGGER = LoggerFactory.getLogger(BaseChildElementParser.class);
 
-  protected BaseElement parentElement;
-  
   public abstract String getElementName();
   
   public abstract void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception;
   
   protected void parseChildElements(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model, BaseChildElementParser parser) throws Exception {
-  	this.parentElement = parentElement;
     boolean readyWithChildElements = false;
     while (readyWithChildElements == false && xtr.hasNext()) {
       xtr.next();

File: modules/activiti-engine/src/test/java/org/activiti/standalone/testing/ActivitiRuleJunit4Test.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.engine.task.Task;
 import org.activiti.engine.test.ActivitiRule;
 import org.activiti.engine.test.Deployment;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -20,6 +20,8 @@
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 
 /**
  * Implementation of the Parallel Gateway/AND gateway as definined in the BPMN
@@ -65,7 +67,7 @@ public void execute(ActivityExecution execution) throws Exception {
     List<ActivityExecution> joinedExecutions = execution.findInactiveConcurrentExecutions(activity);
     int nbrOfExecutionsToJoin = execution.getActivity().getIncomingTransitions().size();
     int nbrOfExecutionsJoined = joinedExecutions.size();
-    
+    Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity) execution);
     if (nbrOfExecutionsJoined==nbrOfExecutionsToJoin) {
       
       // Fork

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Lane.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti.bpmn.model;
 
+import org.codehaus.jackson.annotate.JsonBackReference;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -32,6 +34,7 @@ public void setName(String name) {
     this.name = name;
   }
 
+  @JsonBackReference
   public Process getParentProcess() {
     return parentProcess;
   }

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/Lane.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti.bpmn.model;
 
+import org.codehaus.jackson.annotate.JsonBackReference;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -32,6 +34,7 @@ public void setName(String name) {
     this.name = name;
   }
 
+  @JsonBackReference
   public Process getParentProcess() {
     return parentProcess;
   }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/UserTaskXMLConverter.java
Patch:
@@ -154,7 +154,6 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
       if (StringUtils.isNotEmpty(resourceElement) && "resourceAssignmentExpression".equals(resourceElement)) {
         String expression = XMLStreamReaderUtil.moveDown(xtr);
         if (StringUtils.isNotEmpty(expression) && "formalExpression".equals(expression)) {
-           new ArrayList<String>();
           
           List<String> assignmentList = CommaSplitter.splitCommas(xtr.getElementText());
           

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/usertask/taskcandidate/TaskCandidateTest.java
Patch:
@@ -196,8 +196,8 @@ public void testCandidateExpressionTwoParams() {
 	  params.put("testBean", new TestBean());
 	  
     runtimeService.startProcessInstanceByKey("candidateWithExpression", params);
-    assertEquals(1, taskService.createTaskQuery().taskCandidateUser(KERMIT).list().size());
-     
+    assertEquals(1, taskService.createTaskQuery().taskCandidateUser(KERMIT).count());
+    assertEquals(1, taskService.createTaskQuery().taskCandidateGroup("sales").count());
   }
 
 }

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/management/JobCollectionResourceTest.java
Patch:
@@ -75,7 +75,7 @@ public void testGetJobs() throws Exception {
     
     // Fetch using processDefinitionId
     url = RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + "?processDefinitionId=" + processInstance.getProcessDefinitionId();
-    assertResultsPresentInDataResponse(url, timerJob.getId());
+    assertResultsPresentInDataResponse(url, asyncJob.getId(), timerJob.getId());
     
     url = RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + "?processDefinitionId=unexisting";
     assertResultsPresentInDataResponse(url);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -113,6 +113,7 @@ public void delete() {
   public void setExecution(ExecutionEntity execution) {
     executionId = execution.getId();
     processInstanceId = execution.getProcessInstanceId();
+    processDefinitionId = execution.getProcessDefinitionId();
     execution.addJob(this);
   }
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/history/HistoricTaskInstanceBaseResource.java
Patch:
@@ -47,7 +47,7 @@ public class HistoricTaskInstanceBaseResource extends SecuredResource {
     allowedSortProperties.put("start", HistoricTaskInstanceQueryProperty.START);
     allowedSortProperties.put("assignee", HistoricTaskInstanceQueryProperty.TASK_ASSIGNEE);
     allowedSortProperties.put("taskDefinitionKey", HistoricTaskInstanceQueryProperty.TASK_DEFINITION_KEY);
-    allowedSortProperties.put("descriptipn", HistoricTaskInstanceQueryProperty.TASK_DESCRIPTION);
+    allowedSortProperties.put("description", HistoricTaskInstanceQueryProperty.TASK_DESCRIPTION);
     allowedSortProperties.put("dueDate", HistoricTaskInstanceQueryProperty.TASK_DUE_DATE);
     allowedSortProperties.put("name", HistoricTaskInstanceQueryProperty.TASK_NAME);
     allowedSortProperties.put("owner", HistoricTaskInstanceQueryProperty.TASK_OWNER);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/StartEventJsonConverter.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.bpmn.model.SignalEventDefinition;
 import org.activiti.bpmn.model.StartEvent;
 import org.activiti.bpmn.model.TimerEventDefinition;
-import org.apache.commons.lang3.StringUtils;
 import org.codehaus.jackson.JsonNode;
 import org.codehaus.jackson.node.ObjectNode;
 

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/impl/event/CdiTaskListener.java
Patch:
@@ -36,7 +36,7 @@
  * Generic {@link TaskListener} publishing events using the cdi event
  * infrastructure.
  * 
- * @author Daniel Meyer
+ * @author Dimitris Mandalidis 
  */
 public class CdiTaskListener implements TaskListener, Serializable {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/history/HistoricVariableInstanceQuery.java
Patch:
@@ -40,6 +40,9 @@ public interface HistoricVariableInstanceQuery extends Query<HistoricVariableIns
   
   /** Only select historic process variables which were not set task-local. */
   HistoricVariableInstanceQuery excludeTaskVariables();
+  
+  /** Don't initialize variable values. This is foremost a way to deal with variable delete queries */
+  HistoricVariableInstanceQuery excludeVariableInitialization();
 
   /**
    * only select historic process variables with the given name and value

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntityManager.java
Patch:
@@ -36,6 +36,7 @@ public void deleteHistoricVariableInstanceByProcessInstanceId(String historicPro
       List<HistoricVariableInstanceEntity> historicProcessVariables = (List) getDbSqlSession()
         .createHistoricVariableInstanceQuery()
         .processInstanceId(historicProcessInstanceId)
+        .excludeVariableInitialization()
         .list();
       for (HistoricVariableInstanceEntity historicProcessVariable : historicProcessVariables) {
         historicProcessVariable.delete();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/JPAEntityVariableType.java
Patch:
@@ -23,7 +23,7 @@
  * 
  * @author Frederik Heremans
  */
-public class JPAEntityVariableType implements VariableType {
+public class JPAEntityVariableType implements VariableType, CacheableVariable {
 
   public static final String TYPE_NAME = "jpa-entity";
   

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/RestUrls.java
Patch:
@@ -155,7 +155,7 @@ public final class RestUrls {
   public static final String[] URL_MODEL_SOURCE_EXTRA = {SEGMENT_REPOSITORY_RESOURCES, SEGMENT_MODEL_RESOURCE, "{0}", SEGMENT_SOURCE_EXTRA};
   
   /**
-   * URL template for task collection: <i>runtime/tasks/{0:taskId}</i>
+   * URL template for task collection: <i>runtime/tasks</i>
    */
   public static final String[] URL_TASK_COLLECTION = {SEGMENT_RUNTIME_RESOURCES, SEGMENT_TASK_RESOURCE};
   

File: modules/activiti-rest/src/test/java/org/activiti/rest/BaseRestTestCase.java
Patch:
@@ -122,7 +122,7 @@ public void runBare() throws Throwable {
       
       super.runBare();
 
-    }  catch (AssertionFailedError e) {
+    } catch (AssertionFailedError e) {
       log.error(EMPTY_LINE);
       log.error("ASSERTION FAILED: {}", e, e);
       exception = e;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AcquireJobsRunnable.java
Patch:
@@ -93,7 +93,7 @@ public synchronized void run() {
           		"You can ignore this message if you indeed have multiple job executor acquisition threads running against the same database. " +
           		"Exception message: {}", optimisticLockingException.getMessage());
         }
-      } catch (Exception e) {
+      } catch (Throwable e) {
         log.error("exception during job acquisition: {}", e.getMessage(), e);          
         millisToWait *= waitIncreaseFactor;
         if (millisToWait > maxWait) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -381,7 +381,7 @@ private ProcessInstance startProcessInstanceWithFailingJob() {
       managementService.executeJob(timerJob.getId());
       fail("RuntimeException from within the script task expected");
     } catch(RuntimeException re) {
-      assertTextPresent(EXCEPTION_MESSAGE, re.getMessage());
+      assertTextPresent(EXCEPTION_MESSAGE, re.getCause().getMessage());
     }
     return processInstance;
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -89,7 +89,7 @@ public void testGetJobExceptionStacktrace() {
       managementService.executeJob(timerJob.getId());
       fail("RuntimeException from within the script task expected");
     } catch(RuntimeException re) {
-      assertTextPresent("This is an exception thrown from scriptTask", re.getMessage());
+      assertTextPresent("This is an exception thrown from scriptTask", re.getCause().getMessage());
     }
     
     // Fetch the task to see that the exception that occurred is persisted

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/task/TaskAttachmentCollectionResource.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
+import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.task.Attachment;
 import org.activiti.engine.task.Task;
 import org.activiti.rest.api.ActivitiUtil;
@@ -49,7 +50,7 @@ public List<AttachmentResponse> getAttachments() {
     
     List<AttachmentResponse> result = new ArrayList<AttachmentResponse>();
     RestResponseFactory responseFactory = getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory();
-    Task task = getTaskFromRequest();
+    HistoricTaskInstance task = getHistoricTaskFromRequest();
     
     for(Attachment attachment : ActivitiUtil.getTaskService().getTaskAttachments(task.getId())) {
       result.add(responseFactory.createAttachmentResponse(this, attachment));

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/task/TaskAttachmentContentResource.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
+import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.task.Attachment;
-import org.activiti.engine.task.Task;
 import org.activiti.rest.api.ActivitiUtil;
 import org.restlet.data.MediaType;
 import org.restlet.representation.InputRepresentation;
@@ -35,7 +35,7 @@ public InputRepresentation getAttachmentContent() {
     if(!authenticate())
       return null;
     
-    Task task = getTaskFromRequest();
+    HistoricTaskInstance task = getHistoricTaskFromRequest();
     
     String attachmentId = getAttribute("attachmentId");
     if(attachmentId == null) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/task/TaskAttachmentResource.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
+import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.task.Attachment;
 import org.activiti.engine.task.Comment;
 import org.activiti.engine.task.Task;
@@ -36,7 +37,7 @@ public AttachmentResponse getAttachment() {
     if(!authenticate())
       return null;
     
-    Task task = getTaskFromRequest();
+    HistoricTaskInstance task = getHistoricTaskFromRequest();
     
     String attachmentId = getAttribute("attachmentId");
     if(attachmentId == null) {
@@ -53,7 +54,7 @@ public AttachmentResponse getAttachment() {
   }
   
   @Delete
-  public void delegteAttachment() {
+  public void deleteAttachment() {
     if(!authenticate())
       return;
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/task/TaskCommentCollectionResource.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
+import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.task.Comment;
 import org.activiti.engine.task.Task;
 import org.activiti.rest.api.ActivitiUtil;
@@ -40,7 +41,7 @@ public List<CommentResponse> getComments() {
     
     List<CommentResponse> result = new ArrayList<CommentResponse>();
     RestResponseFactory responseFactory = getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory();
-    Task task = getTaskFromRequest();
+    HistoricTaskInstance task = getHistoricTaskFromRequest();
     
     for(Comment comment : ActivitiUtil.getTaskService().getTaskComments(task.getId())) {
       result.add(responseFactory.createRestComment(this, comment));

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/task/TaskCommentResource.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
+import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.task.Comment;
 import org.activiti.engine.task.Task;
 import org.activiti.rest.api.ActivitiUtil;
@@ -35,7 +36,7 @@ public CommentResponse getComment() {
     if(!authenticate())
       return null;
     
-    Task task = getTaskFromRequest();
+    HistoricTaskInstance task = getHistoricTaskFromRequest();
     
     String commentId = getAttribute("commentId");
     if(commentId == null) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/task/TaskEventCollectionResource.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.task.Event;
-import org.activiti.engine.task.Task;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.RestResponseFactory;
 import org.activiti.rest.api.engine.EventResponse;
@@ -37,7 +37,7 @@ public List<EventResponse> getEvents() {
     
     List<EventResponse> result = new ArrayList<EventResponse>();
     RestResponseFactory responseFactory = getApplication(ActivitiRestServicesApplication.class).getRestResponseFactory();
-    Task task = getTaskFromRequest();
+    HistoricTaskInstance task = getHistoricTaskFromRequest();
     
     for(Event event : ActivitiUtil.getTaskService().getTaskEvents(task.getId())) {
       result.add(responseFactory.createEventResponse(this, event));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -172,6 +172,8 @@ public String getMssqlOrDB2OrderBy() {
     String specialOrderBy = super.getOrderBy();
     if (specialOrderBy != null && specialOrderBy.length() > 0) {
       specialOrderBy = specialOrderBy.replace("RES.", "TEMPRES_");
+      specialOrderBy = specialOrderBy.replace("ProcessDefinitionKey", "TEMPP_KEY_");
+      specialOrderBy = specialOrderBy.replace("ProcessDefinitionId", "TEMPP_ID_");
     }
     return specialOrderBy;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -83,6 +83,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectComment", "selectComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectCommentsByType", "selectCommentsByType_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskIdAndType", "selectCommentsByTaskIdAndType_postgres");
     addDatabaseSpecificStatement("postgres", "selectEventsByTaskId", "selectEventsByTaskId_postgres");
         

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -80,6 +80,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectIdentityInfoByUserId", "selectIdentityInfoByUserId_postgres");
     addDatabaseSpecificStatement("postgres", "selectIdentityInfoDetails", "selectIdentityInfoDetails_postgres");
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
+    addDatabaseSpecificStatement("postgres", "selectComment", "selectComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskIdAndType", "selectCommentsByTaskIdAndType_postgres");

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPGroupManager.java
Patch:
@@ -116,7 +116,8 @@ public List<Group> executeInContext(InitialDirContext initialDirContext) {
         
         List<Group> groups = new ArrayList<Group>();
         try {
-          NamingEnumeration< ? > namingEnum = initialDirContext.search(ldapConfigurator.getBaseDn(), searchExpression, createSearchControls());
+          String baseDn = ldapConfigurator.getGroupBaseDn() != null ? ldapConfigurator.getGroupBaseDn() : ldapConfigurator.getBaseDn();
+          NamingEnumeration< ? > namingEnum = initialDirContext.search(baseDn, searchExpression, createSearchControls());
           while (namingEnum.hasMore()) { // Should be only one
             SearchResult result = (SearchResult) namingEnum.next();
             

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPQueryBuilder.java
Patch:
@@ -58,7 +58,8 @@ public String executeInContext(InitialDirContext initialDirContext) {
           
           String userDnSearch = buildQueryByUserId(ldapConfigurator, userId);
           try {
-            NamingEnumeration< ? > namingEnum = initialDirContext.search(ldapConfigurator.getBaseDn(), userDnSearch, createSearchControls(ldapConfigurator));
+        	String baseDn = ldapConfigurator.getUserBaseDn() != null ? ldapConfigurator.getUserBaseDn() : ldapConfigurator.getBaseDn();
+            NamingEnumeration< ? > namingEnum = initialDirContext.search(baseDn, userDnSearch, createSearchControls(ldapConfigurator));
             while (namingEnum.hasMore()) { // Should be only one
               SearchResult result = (SearchResult) namingEnum.next();
               return result.getNameInNamespace();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -82,6 +82,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectCommentsByTaskIdAndType", "selectCommentsByTaskIdAndType_postgres");
     addDatabaseSpecificStatement("postgres", "selectEventsByTaskId", "selectEventsByTaskId_postgres");
         
     // oracle

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -186,8 +186,6 @@ public void testCustomTaskComments() {
       
       List<Comment> taskTypeComments = taskService.getTaskComments(taskId, customType1);
       assertEquals(2, taskTypeComments.size());
-      assertEquals("This is another Type1 comment", taskTypeComments.get(0).getFullMessage());
-      assertEquals("This is a custom comment of type Type1", taskTypeComments.get(1).getFullMessage());
       
       // Clean up
       taskService.deleteTask(taskId, true);

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/Comment.java
Patch:
@@ -39,6 +39,9 @@ public interface Comment {
 
   /** reference to the process instance on which this comment was made */ 
   String getProcessInstanceId();
+  
+  /** reference to the type given to the comment */
+  String getType();
 
   /** the full comment message the user had related to the task and/or process instance
    * @see TaskService#getTaskComments(String) */ 

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/Comment.java
Patch:
@@ -39,6 +39,9 @@ public interface Comment {
 
   /** reference to the process instance on which this comment was made */ 
   String getProcessInstanceId();
+  
+  /** reference to the type given to the comment */
+  String getType();
 
   /** the full comment message the user had related to the task and/or process instance
    * @see TaskService#getTaskComments(String) */ 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandConfig.java
Patch:
@@ -15,7 +15,7 @@ public class CommandConfig {
   private TransactionPropagation propagation;
   
   public CommandConfig() {
-    this.contextReusePossible = false;
+    this.contextReusePossible = true;
     this.propagation = TransactionPropagation.REQUIRED;
   }
   
@@ -46,12 +46,14 @@ public CommandConfig transactionRequired() {
 
   public CommandConfig transactionRequiresNew() {
     CommandConfig config = new CommandConfig(this);
+    config.contextReusePossible = false;
     config.propagation = TransactionPropagation.REQUIRES_NEW;
     return config;
   }
 
   public CommandConfig transactionNotSupported() {
     CommandConfig config = new CommandConfig(this);
+    config.contextReusePossible = false;
     config.propagation = TransactionPropagation.NOT_SUPPORTED;
     return config;
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/CallServiceInServiceTaskTest.java
Patch:
@@ -55,6 +55,7 @@ public void testRollBackOnException() {
     Exception expectedException = null;
     try {
       runtimeService.startProcessInstanceByKey("startProcessFromDelegate");
+      fail("expected exception");
     } catch (Exception e) {
       expectedException = e;
     }

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPGroupManager.java
Patch:
@@ -77,7 +77,7 @@ public void deleteGroup(String groupId) {
 
   @Override
   public GroupQuery createNewGroupQuery() {
-    return new GroupQueryImpl(Context.getProcessEngineConfiguration().getCommandExecutorTxRequired());
+    return new GroupQueryImpl(Context.getProcessEngineConfiguration().getCommandExecutor());
   }
 
   @Override

File: modules/activiti-ldap/src/main/java/org/activiti/ldap/LDAPUserManager.java
Patch:
@@ -182,7 +182,7 @@ public List<Group> findGroupsByUser(String userId) {
 
   @Override
   public UserQuery createNewUserQuery() {
-    return new UserQueryImpl(Context.getProcessEngineConfiguration().getCommandExecutorTxRequired());
+    return new UserQueryImpl(Context.getProcessEngineConfiguration().getCommandExecutor());
   }
 
 

File: modules/activiti-cxf/src/test/java/org/activiti/engine/test/bpmn/sendtask/WebServiceUELTest.java
Patch:
@@ -36,7 +36,7 @@ public void testAsyncInvocationWithDataFlowUEL() throws Exception {
     assertEquals(-1, counter.getCount());
 
     ProcessDefinitionEntity processDefinition = processEngineConfiguration
-      .getCommandExecutorTxRequiresNew()
+      .getCommandExecutor()
       .execute(new Command<ProcessDefinitionEntity>() {
         public ProcessDefinitionEntity execute(CommandContext commandContext) {
           return Context

File: modules/activiti-cxf/src/test/java/org/activiti/engine/test/bpmn/servicetask/WebServiceUELTest.java
Patch:
@@ -33,7 +33,7 @@ public class WebServiceUELTest extends AbstractWebServiceTaskTest {
   @Deployment
   public void testWebServiceInvocationWithDataFlowUEL() throws Exception {
     ProcessDefinitionEntity processDefinition = processEngineConfiguration
-      .getCommandExecutorTxRequiresNew()
+      .getCommandExecutor()
       .execute(new Command<ProcessDefinitionEntity>() {
         public ProcessDefinitionEntity execute(CommandContext commandContext) {
           return Context

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/VariableScope.java
Patch:
@@ -28,7 +28,7 @@ public interface VariableScope {
 
   Object getVariable(String variableName);
 
-  Object getVariableLocal(Object variableName);
+  Object getVariableLocal(String variableName);
 
   Set<String> getVariableNames();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/StartProcessVariableScope.java
Patch:
@@ -55,7 +55,7 @@ public Object getVariable(String variableName) {
     return null;
   }
 
-  public Object getVariableLocal(Object variableName) {
+  public Object getVariableLocal(String variableName) {
     return null;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -93,7 +93,7 @@ public Object getVariable(String variableName) {
     return null;
   }
   
-  public Object getVariableLocal(Object variableName) {
+  public Object getVariableLocal(String variableName) {
     ensureVariableInstancesInitialized();
     VariableInstanceEntity variableInstance = variableInstances.get(variableName);
     if (variableInstance!=null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -513,6 +513,7 @@ public void takeAll(List<PvmTransition> transitions, List<ActivityExecution> rec
          && (concurrentActiveExecutions.isEmpty())
        ) {
 
+      @SuppressWarnings("rawtypes")
       List<ExecutionImpl> recyclableExecutionImpls = (List) recyclableExecutions;
       for (ExecutionImpl prunedExecution: recyclableExecutionImpls) {
         // End the pruned executions if necessary.
@@ -797,7 +798,7 @@ public void createVariableLocal(String variableName, Object value) {
   public void createVariablesLocal(Map<String, ? extends Object> variables) {
   }
 
-  public Object getVariableLocal(Object variableName) {
+  public Object getVariableLocal(String variableName) {
     return null;
   }
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/custom/UploadComponent.java
Patch:
@@ -104,6 +104,7 @@ public void setDescription(String description) {
   }
   
   public void setReceiver(Receiver receiver) {
+  	this.receiver = receiver;
     upload.setReceiver(receiver);
   }
 

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/SubProcessJsonConverter.java
Patch:
@@ -53,7 +53,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowE
     ArrayNode subProcessShapesArrayNode = objectMapper.createArrayNode();
     GraphicInfo graphicInfo = model.getGraphicInfo(flowElement.getId());
     processor.processFlowElements(subProcess.getFlowElements(), model, subProcessShapesArrayNode, 
-        graphicInfo.getX() + subProcessX, graphicInfo.getY() + subProcessY);
+    		graphicInfo.getX(), graphicInfo.getY());
     flowElementNode.put("childShapes", subProcessShapesArrayNode);
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -188,6 +188,7 @@
 import org.activiti.engine.impl.variable.SerializableType;
 import org.activiti.engine.impl.variable.ShortType;
 import org.activiti.engine.impl.variable.StringType;
+import org.activiti.engine.impl.variable.UUIDType;
 import org.activiti.engine.impl.variable.VariableType;
 import org.activiti.engine.impl.variable.VariableTypes;
 import org.activiti.engine.parse.BpmnParseHandler;
@@ -1008,6 +1009,7 @@ protected void initVariableTypes() {
       variableTypes.addType(new LongType());
       variableTypes.addType(new DateType());
       variableTypes.addType(new DoubleType());
+      variableTypes.addType(new UUIDType());
       variableTypes.addType(new ByteArrayType());
       variableTypes.addType(new SerializableType());
       variableTypes.addType(new CustomObjectType("item", ItemInstance.class));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/FormServiceImpl.java
Patch:
@@ -79,7 +79,6 @@ public String getTaskFormKey(String processDefinitionId, String taskDefinitionKe
   }
   
   public void saveFormData(String taskId, Map<String, String> properties) {
-	commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties, false));
+    commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties, false));
   }
-
 }

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionDetailPanel.java
Patch:
@@ -243,7 +243,7 @@ public DownloadStream getStream() {
               filename = workflowDefinition.getName();
               WorkflowDefinitionConversion conversion = 
                       ExplorerApp.get().getWorkflowDefinitionConversionFactory().createWorkflowDefinitionConversion(workflowDefinition);
-              bpmnBytes = conversion.getbpm20Xml().getBytes("utf-8");
+              bpmnBytes = conversion.getBpmn20Xml().getBytes("utf-8");
             } else {
             	JsonNode editorNode = new ObjectMapper().readTree(repositoryService.getModelEditorSource(modelData.getId()));
               BpmnJsonConverter jsonConverter = new BpmnJsonConverter();
@@ -309,7 +309,7 @@ public void buttonClick(ClickEvent event) {
         // Deploy to database
         byte[] bpmnBytes = null;
         try {
-          bpmnBytes = conversion.getbpm20Xml().getBytes("utf-8");
+          bpmnBytes = conversion.getBpmn20Xml().getBytes("utf-8");
           
           String processName = modelData.getName() + ".bpmn20.xml";
           Deployment deployment = repositoryService.createDeployment()

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/reporting/ReportingUtil.java
Patch:
@@ -114,7 +114,7 @@ public static void generateTaskDurationReport(String processDefinitionId) {
     // Deploy
     repositoryService.createDeployment()
       .name(processDefinition.getName() + " - task duration report")
-      .addString(conversion.getProcess().getId() + ".bpmn20.xml", conversion.getbpm20Xml())
+      .addString(conversion.getProcess().getId() + ".bpmn20.xml", conversion.getBpmn20Xml())
       .deploy();
   }
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/HistoricTaskDetailPanel.java
Patch:
@@ -312,7 +312,6 @@ protected void initRelatedContent() {
     List<Attachment> attachments = new ArrayList<Attachment>();
     attachments.addAll(taskService.getTaskAttachments(historicTask.getId()));
     if (historicTask.getProcessInstanceId() != null) {
-      System.out.println("BIEP : " + taskService.getProcessInstanceAttachments(historicTask.getProcessInstanceId()).size());
       attachments.addAll(taskService.getProcessInstanceAttachments(historicTask.getProcessInstanceId()));
     }
     

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/DeleteCandidateTaskListener.java
Patch:
@@ -5,7 +5,7 @@
 import org.activiti.engine.delegate.TaskListener;
 
 public class DeleteCandidateTaskListener implements TaskListener {
-	public void notify(DelegateTask delegateTask) {
-		delegateTask.deleteCandidateUser("admin");
-	}
+  public void notify(DelegateTask delegateTask) {
+    delegateTask.deleteCandidateUser("admin");
+  }
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -119,7 +119,7 @@ public void testHistoricTaskInstanceQuery() throws Exception {
     
     // First instance is finished
     ProcessInstance finishedInstance = runtimeService.startProcessInstanceByKey("HistoricTaskQueryTest", "myBusinessKey");
-    ClockUtil.setCurrentTime(null);
+    ClockUtil.reset();
     
     // Set priority to non-default value
     Task task = taskService.createTaskQuery().processInstanceId(finishedInstance.getId()).singleResult();

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/BpmnModel.java
Patch:
@@ -56,7 +56,7 @@ public Process getProcess(String poolRef) {
 	  for (Process process : processes) {
 	    boolean foundPool = false;
 	    for (Pool pool : pools) {
-        if(pool.getProcessRef().equalsIgnoreCase(process.getId())) {
+        if (StringUtils.isNotEmpty(pool.getProcessRef()) && pool.getProcessRef().equalsIgnoreCase(process.getId())) {
           
           if(poolRef != null) {
             if(pool.getId().equalsIgnoreCase(poolRef)) {

File: modules/activiti-camel/src/test/java/org/activiti/camel/EmptyProcessTest.java
Patch:
@@ -60,6 +60,6 @@ public void testObjectAsStringVariable() throws Exception {
     assertProcessEnded(instanceId);
     HistoricVariableInstance var = processEngine.getHistoryService().createHistoricVariableInstanceQuery().variableName("camelBody").singleResult();
     assertNotNull(var);
-    assertEquals(expectedObj.toString(), var.getValue());
+    assertEquals(expectedObj.toString(), var.getValue().toString());
   }
 }

File: modules/activiti-engine/src/test/java/org/activiti/standalone/jta/CloseXADataSourceLifecycleListener.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Used in JPA-tests to close the XA-datasource after engine is closed, due to internal caching
- * of datasource, independant of process-enging/spring-context.
+ * of datasource, independent of process-engine/spring-context.
  * 
  * @author Frederik Heremans
  */

File: modules/activiti-spring/src/main/java/org/activiti/spring/components/scope/ProcessScope.java
Patch:
@@ -104,7 +104,7 @@ public Object get(String name, ObjectFactory<?> objectFactory) {
 			}
 			return createDirtyCheckingProxy(name, scopedObject);
 		} catch (Throwable th) {
-			logger.warn("couldn't return value from process scope! {}",ExceptionUtils.getFullStackTrace(th));
+			logger.warn("couldn't return value from process scope! {}", ExceptionUtils.getStackTrace(th));
 		} finally {
 			if (executionEntity != null) {
 				logger.debug("set variable '{}' on executionEntity#{}", name, executionEntity.getId());

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BoundaryEventJsonConverter.java
Patch:
@@ -85,6 +85,7 @@ protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelN
     String stencilId = BpmnJsonConverterUtil.getStencilId(elementNode);
     if (STENCIL_EVENT_BOUNDARY_TIMER.equals(stencilId)) {
       convertJsonToTimerDefinition(elementNode, boundaryEvent);
+      boundaryEvent.setCancelActivity(getPropertyValueAsBoolean(PROPERTY_CANCEL_ACTIVITY, elementNode));
     } else if (STENCIL_EVENT_BOUNDARY_ERROR.equals(stencilId)) {
       convertJsonToErrorDefinition(elementNode, boundaryEvent);
     } else if (STENCIL_EVENT_BOUNDARY_SIGNAL.equals(stencilId)) {

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -311,7 +311,7 @@ public BpmnModel convertToBpmnModel(JsonNode modelNode) {
       }
       
       JsonNode processDocumentationNode = modelNode.get(EDITOR_SHAPE_PROPERTIES).get(PROPERTY_DOCUMENTATION);
-      if (processDocumentationNode !- null && StringUtils.isNotEmpty(processDocumentationNode.asText())) {
+      if (processDocumentationNode != null && StringUtils.isNotEmpty(processDocumentationNode.asText())) {
         process.setDocumentation(processDocumentationNode.asText());
       }
       

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/process/ProcessInstanceCollectionResource.java
Patch:
@@ -83,7 +83,7 @@ public DataResponse getProcessInstances() {
     }
     
     if(getQueryParameter("includeProcessVariables", urlQuery) != null) {
-      queryRequest.setIncludeProcessVariables(getQueryParameterAsBoolean("excludeSubprocesses", urlQuery));
+      queryRequest.setIncludeProcessVariables(getQueryParameterAsBoolean("includeProcessVariables", urlQuery));
     }
     
     return getQueryResponse(queryRequest, urlQuery);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -71,6 +71,7 @@ public void copyValue(VariableInstanceEntity variableInstance) {
     this.textValue2 = variableInstance.getTextValue2();
     this.doubleValue = variableInstance.getDoubleValue();
     this.longValue = variableInstance.getLongValue();
+    this.variableType = variableInstance.getType();
     if (variableInstance.getByteArrayValueId()!=null) {
       setByteArrayValue(variableInstance.getByteArrayValue().getBytes());
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/DeserializedObject.java
Patch:
@@ -34,7 +34,7 @@ public DeserializedObject(Object deserializedObject, byte[] serializedBytes, Var
 
   public void flush() {
     // this first check verifies if the variable value was not overwritten with another object
-    if (deserializedObject==variableInstanceEntity.getCachedValue()) {
+    if (deserializedObject==variableInstanceEntity.getCachedValue() && !variableInstanceEntity.isDeleted()) {
       byte[] bytes = SerializableType.serialize(deserializedObject, variableInstanceEntity);
       if (!Arrays.equals(originalBytes, bytes)) {
         variableInstanceEntity.setBytes(bytes);

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngines.java
Patch:
@@ -148,7 +148,7 @@ public static void unregister(ProcessEngine processEngine) {
   }
 
   private static ProcessEngineInfo initProcessEnginFromResource(URL resourceUrl) {
-    ProcessEngineInfo processEngineInfo = processEngineInfosByResourceUrl.get(resourceUrl);
+    ProcessEngineInfo processEngineInfo = processEngineInfosByResourceUrl.get(resourceUrl.toString());
     // if there is an existing process engine info
     if (processEngineInfo!=null) {
       // remove that process engine from the member fields

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/history/HistoricProcessInstanceBaseResource.java
Patch:
@@ -68,6 +68,9 @@ protected DataResponse getQueryResponse(HistoricProcessInstanceQueryRequest quer
     if (queryRequest.getSuperProcessInstanceId() != null) {
       query.superProcessInstanceId(queryRequest.getSuperProcessInstanceId());
     }
+    if (queryRequest.getExcludeSubprocesses() != null) {
+      query.excludeSubprocesses(queryRequest.getExcludeSubprocesses());
+    }
     if (queryRequest.getFinishedAfter() != null) {
       query.finishedAfter(queryRequest.getFinishedAfter());
     }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/runtime/process/BaseProcessInstanceResource.java
Patch:
@@ -77,6 +77,9 @@ protected DataResponse getQueryResponse(ProcessInstanceQueryRequest queryRequest
     if (queryRequest.getSuperProcessInstanceId() != null) {
       query.superProcessInstanceId(queryRequest.getSuperProcessInstanceId());
     }
+    if (queryRequest.getExcludeSubprocesses() != null) {
+      query.excludeSubprocesses(queryRequest.getExcludeSubprocesses());
+    }
     if (queryRequest.getIncludeProcessVariables() != null) {
       if (queryRequest.getIncludeProcessVariables()) {
         query.includeProcessVariables();

File: modules/activiti-ldap/src/test/java/org/activiti/test/ldap/LdapIntegrationTest.java
Patch:
@@ -30,7 +30,7 @@ public void testAuthenticationThroughLdap() {
   public void testCandidateGroupFetchedThroughLdap() {
     runtimeService.startProcessInstanceByKey("testCandidateGroup");
     assertEquals(1, taskService.createTaskQuery().count());
-    assertEquals(1, taskService.createTaskQuery().taskCandidateGroup("Sales").count());
+    assertEquals(1, taskService.createTaskQuery().taskCandidateGroup("sales").count());
 
     // Pepe is a member of the candidate group and should be able to find the task
     assertEquals(1, taskService.createTaskQuery().taskCandidateUser("pepe").count());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/ReadOnlyProcessDefinition.java
Patch:
@@ -22,6 +22,8 @@ public interface ReadOnlyProcessDefinition extends PvmScope {
   
   String getName();
   
+  String getKey();
+  
   String getDescription();
 
   PvmActivity getInitial();

File: modules/activiti-spring/src/main/java/org/activiti/spring/SpringProcessEngineConfiguration.java
Patch:
@@ -23,10 +23,10 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngine;
+import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration;
-import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContextInterceptor;
 import org.activiti.engine.impl.interceptor.CommandInterceptor;
 import org.activiti.engine.impl.interceptor.LogInterceptor;
@@ -150,7 +150,7 @@ protected void autoDeployResources(ProcessEngine processEngine) {
   }
   
   @Override
-  public ProcessEngineConfigurationImpl setDataSource(DataSource dataSource) {
+  public ProcessEngineConfiguration setDataSource(DataSource dataSource) {
     if(dataSource instanceof TransactionAwareDataSourceProxy) {
       return super.setDataSource(dataSource);
     } else {

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/BoundaryEvent.java
Patch:
@@ -12,11 +12,14 @@
  */
 package org.activiti.bpmn.model;
 
+import org.codehaus.jackson.annotate.JsonIgnore;
+
 /**
  * @author Tijs Rademakers
  */
 public class BoundaryEvent extends Event {
 
+  @JsonIgnore
   protected Activity attachedToRef;
   protected String attachedToRefId;
   protected boolean cancelActivity = true;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AbstractSetProcessInstanceStateCmd.java
Patch:
@@ -50,7 +50,7 @@ public Void execute(CommandContext commandContext) {
     if(executionEntity == null) {
       throw new ActivitiObjectNotFoundException("Cannot find processInstance for id '"+executionId+"'.", Execution.class);
     }
-    if(!executionEntity.isProcessInstance()) {
+    if(!executionEntity.isProcessInstanceType()) {
       throw new ActivitiException("Cannot set suspension state for execution '"+executionId+"': not a process instance.");
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -85,7 +85,7 @@ public Void execute(CommandContext commandContext) {
     ExecutionEntity processInstance = executionManager.findExecutionById(processInstanceId);
     if (processInstance == null) {
       throw new ActivitiObjectNotFoundException("No process instance found for id = '" + processInstanceId + "'.", ProcessInstance.class);
-    } else if (!processInstance.isProcessInstance()) {
+    } else if (!processInstance.isProcessInstanceType()) {
       throw new ActivitiIllegalArgumentException(
         "A process instance id is required, but the provided id " +
         "'"+processInstanceId+"' " +

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -103,7 +103,7 @@ public interface ActivityExecution extends DelegateExecution {
   /**
    * returns whether this execution is a process instance or not.
    */
-  boolean isProcessInstance();
+  boolean isProcessInstanceType();
 
   /**
    * Inactivates this execution.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationActivityEnd.java
Patch:
@@ -50,7 +50,7 @@ protected void eventNotificationsCompleted(InterpretableExecution execution) {
       execution.setActivity(parentActivity);
       execution.performOperation(ACTIVITY_END);
       
-    } else if (execution.isProcessInstance()) {
+    } else if (execution.isProcessInstanceType()) {
       execution.performOperation(PROCESS_END);
     
     } else if (execution.isScope()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -418,7 +418,7 @@ public void setScope(boolean isScope) {
   // process instance start implementation ////////////////////////////////////
 
   public void start() {
-    if(startingExecution == null && isProcessInstance()) {
+    if(startingExecution == null && isProcessInstanceType()) {
       startingExecution = new StartingExecution(processDefinition.getInitial());
     }
     performOperation(AtomicOperation.PROCESS_START);
@@ -683,7 +683,7 @@ public EngineServices getEngineServices() {
   // toString /////////////////////////////////////////////////////////////////
   
   public String toString() {
-    if (isProcessInstance()) {
+    if (isProcessInstanceType()) {
       return "ProcessInstance["+getToStringIdentity()+"]";
     } else {
       return (isEventScope? "EventScope":"")+(isConcurrent? "Concurrent" : "")+(isScope() ? "Scope" : "")+"Execution["+getToStringIdentity()+"]";
@@ -696,7 +696,7 @@ protected String getToStringIdentity() {
   
   // customized getters and setters ///////////////////////////////////////////
 
-  public boolean isProcessInstance() {
+  public boolean isProcessInstanceType() {
     ensureParentInitialized();
     return parent==null;
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1272,7 +1272,7 @@ public void testExecutionQueryWithProcessVariable() {
     List<Execution> concurrentExecutions = runtimeService.createExecutionQuery().processInstanceId(pi.getId()).list();
     assertEquals(3, concurrentExecutions.size());
     for (Execution execution : concurrentExecutions) {
-      if (!((ExecutionEntity)execution).isProcessInstance()) {
+      if (!((ExecutionEntity)execution).isProcessInstanceType()) {
         // only the concurrent executions, not the root one, would be cooler to query that directly, see http://jira.codehaus.org/browse/ACT-1373        
         runtimeService.setVariableLocal(execution.getId(), "x", "child");
         runtimeService.setVariableLocal(execution.getId(), "xIgnoreCase", "ChILD");

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/identity/LoggedInUserImpl.java
Patch:
@@ -92,6 +92,9 @@ public void addSecurityRoleGroup(Group securityRoleGroup) {
   public List<Group> getSecurityRoles() {
     return securityRoles;
   }
+  public List<Group> getGroups() {
+    return groups;
+  }
   public void addGroup(Group group) {
     groups.add(group);
   }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/form/SelectUserField.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.Collection;
 
+import org.activiti.engine.ProcessEngines;
 import org.activiti.engine.identity.User;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
@@ -173,8 +174,7 @@ public void setValue(Object newValue) throws ReadOnlyException, ConversionExcept
     // Update label
     if(newValue != null) {
       if(selectedUser == null || !selectedUser.getId().equals(newValue)) {
-        // fetch selected user based on id
-         selectedUser = ExplorerApp.get().getUserCache().findUser((String) newValue);
+        selectedUser = ProcessEngines.getDefaultProcessEngine().getIdentityService().createUserQuery().userId((String) newValue).singleResult();
       }
       selectedUserLabel.setValue(getSelectedUserLabel());
       selectedUserLabel.addStyleName(ExplorerLayout.STYLE_FORM_USER_SELECTED);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/table/TaskTable.java
Patch:
@@ -139,7 +139,7 @@ protected Object addTaskRow(Object previousTaskItemId, String taskName, String t
     } else {
       groupComboBox.setValue(taskGroups);
     }
-    for (Group group : ProcessEngines.getDefaultProcessEngine().getIdentityService().createGroupQuery().groupType("assignment").orderByGroupName().asc().list()) {
+    for (Group group : ProcessEngines.getDefaultProcessEngine().getIdentityService().createGroupQuery().orderByGroupName().asc().list()) {
       groupComboBox.addItem(group.getId());
       groupComboBox.setItemCaption(group.getId(), group.getName());
     }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/profile/ProfilePanel.java
Patch:
@@ -323,9 +323,6 @@ public void buttonClick(ClickEvent event) {
         editable = false;
         loadProfileData();
         initUi();
-        
-        // Update user cache
-        ExplorerApp.get().getUserCache().notifyUserDataChanged(user.getId());
       }
     });
     return saveProfileButton;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/SignalAndMessageDefinitionExport.java
Patch:
@@ -54,7 +54,7 @@ public static void writeSignalsAndMessages(BpmnModel model, XMLStreamWriter xtw)
       xtw.writeStartElement(ELEMENT_MESSAGE);
       String messageId = message.getId();
       // remove the namespace from the message id if set
-      if (messageId.startsWith(model.getTargetNamespace())) {
+      if (model.getTargetNamespace() != null && messageId.startsWith(model.getTargetNamespace())) {
         messageId = messageId.replace(model.getTargetNamespace(), "");
         messageId = messageId.replaceFirst(":", "");
       } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -280,7 +280,7 @@ protected ExecutionEntity newExecution() {
   public void initialize() {
     log.debug("initializing {}", this);
 
-    ScopeImpl scope = getScope();
+    ScopeImpl scope = getScopeObject();
     ensureParentInitialized();
 
     // initialize the lists of referenced objects (prevents db queries)
@@ -792,7 +792,7 @@ protected void ensureSubProcessInstanceInitialized() {
   
   // scopes ///////////////////////////////////////////////////////////////////
   
-  protected ScopeImpl getScope() {
+  protected ScopeImpl getScopeObject() {
     ScopeImpl scope = null;
     if (isProcessInstance()) {
       scope = getProcessDefinition();

File: modules/activiti-ldap/src/test/java/org/activiti/test/ldap/LdapIntegrationTest.java
Patch:
@@ -13,12 +13,11 @@
 package org.activiti.test.ldap;
 
 import org.activiti.engine.test.Deployment;
-import org.activiti.spring.impl.test.SpringActivitiTestCase;
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration("classpath:activiti-context.xml")
-public class LdapIntegrationTest extends SpringActivitiTestCase {
-
+public class LdapIntegrationTest extends LDAPTestCase {
+  
   public void testAuthenticationThroughLdap() {
     assertTrue(identityService.checkPassword("kermit", "pass"));
     assertFalse(identityService.checkPassword("kermit", "blah"));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
Patch:
@@ -209,10 +209,11 @@ public void deleteVariablesInstanceForLeavingScope() {
       ensureVariableInstancesInitialized();
       VariableInstanceEntity variableInstance = variableInstances.remove(variableName);
       if (variableInstance != null) {
-        variableInstance.delete();
-
+        
         Context.getCommandContext().getHistoryManager()
           .recordVariableUpdate(variableInstance);
+        
+        variableInstance.delete();
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -110,7 +110,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     // mssql
     databaseSpecificLimitBeforeStatements.put("mssql", "SELECT * FROM (");
     databaseSpecificLimitAfterStatements.put("mssql", ") as RES WHERE rnk >= #{firstRow} AND rnk < #{lastRow}");
-    databaseSpecificLimitBetweenStatements.put("mssql", ", row_number() over (ORDER BY ${orderBy}) rnk ");
+    databaseSpecificLimitBetweenStatements.put("mssql", ", row_number() over (ORDER BY ${orderBy}) as rnk ");
     databaseSpecificOrderByStatements.put("mssql", "");
     databaseSpecificLimitBeforeNativeQueryStatements.put("mssql", "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${orderBy}) rnk FROM (");
     addDatabaseSpecificStatement("mssql", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -126,7 +126,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("mssql", "selectModelByNativeQuery", "selectModelByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement("mssql", "selectHistoricDetailByNativeQuery", "selectHistoricDetailByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement("mssql", "selectHistoricVariableInstanceByNativeQuery", "selectHistoricVariableInstanceByNativeQuery_mssql_or_db2");
-    
+    addDatabaseSpecificStatement("mssql", "selectTaskWithVariablesByQueryCriteria", "selectTaskWithVariablesByQueryCriteriaMSSQL");
   }
   
   protected String databaseType;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricDetailQueryImpl.java
Patch:
@@ -109,11 +109,12 @@ public List<HistoricDetail> executeList(CommandContext commandContext, Page page
           varUpdate = (HistoricDetailVariableInstanceUpdateEntity)historicDetail;
           
           // Touch byte-array to ensure initialized inside context
-          varUpdate.getByteArrayValue();
+          // TODO there should be a generic way to initialize variable values
+          varUpdate.getBytes();
           
           // ACT-863: EntityManagerFactorySession instance needed for fetching value, touch while inside context to store
           // cached value
-          if(varUpdate.getVariableType() instanceof JPAEntityVariableType) {
+          if (varUpdate.getVariableType() instanceof JPAEntityVariableType) {
             // Use HistoricJPAEntityVariableType to force caching of value to return from query
             varUpdate.setVariableType(HistoricJPAEntityVariableType.getSharedInstance());
             varUpdate.getValue();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/ByteArrayRefTypeHandler.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * MyBatis TypeHandler for {@link ByteArrayRef}.
  * 
- * @author Marcus Klimstra
+ * @author Marcus Klimstra (CGI)
  */
 public class ByteArrayRefTypeHandler extends TypeReference<ByteArrayRef> implements TypeHandler<ByteArrayRef> {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * @author Tom Baeyens
- * @author Marcus Klimstra
+ * @author Marcus Klimstra (CGI)
  */
 public class VariableInstanceEntity implements ValueFields, PersistentObject, HasRevision, Serializable {
 

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/SignalAndMessageDefinitionExport.java
Patch:
@@ -54,7 +54,7 @@ public static void writeSignalsAndMessages(BpmnModel model, XMLStreamWriter xtw)
       xtw.writeStartElement(ELEMENT_MESSAGE);
       String messageId = message.getId();
       // remove the namespace from the message id if set
-      if (messageId.startsWith(model.getTargetNamespace())) {
+      if (model.getTargetNamespace() != null && messageId.startsWith(model.getTargetNamespace())) {
         messageId = messageId.replace(model.getTargetNamespace(), "");
         messageId = messageId.replaceFirst(":", "");
       } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/PluggableActivitiTestCase.java
Patch:
@@ -32,7 +32,7 @@
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public class PluggableActivitiTestCase extends AbstractActivitiTestCase {
+public abstract class PluggableActivitiTestCase extends AbstractActivitiTestCase {
   
   private static Logger pluggableActivitiTestCaseLogger = LoggerFactory.getLogger(PluggableActivitiTestCase.class);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/PvmTestCase.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author Tom Baeyens
  */
-public class PvmTestCase extends TestCase {
+public abstract class PvmTestCase extends TestCase {
 
   protected static final String EMPTY_LINE = "                                                                                           ";
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/ResourceActivitiTestCase.java
Patch:
@@ -21,7 +21,7 @@
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public class ResourceActivitiTestCase extends AbstractActivitiTestCase {
+public abstract class ResourceActivitiTestCase extends AbstractActivitiTestCase {
   
   protected String activitiConfigurationResource;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ActivitiTestCase.java
Patch:
@@ -56,7 +56,7 @@
  *  
  * @author Tom Baeyens
  */
-public class ActivitiTestCase extends TestCase {
+public abstract class ActivitiTestCase extends TestCase {
 
   protected String configurationResource = "activiti.cfg.xml";
   protected String deploymentId = null;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailTestCase.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * @author Joram Barrez
  */
-public class EmailTestCase extends PluggableActivitiTestCase {
+public abstract class EmailTestCase extends PluggableActivitiTestCase {
   
   protected Wiser wiser;
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorTestCase.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Tom Baeyens
  */
-public class JobExecutorTestCase extends PluggableActivitiTestCase {
+public abstract class JobExecutorTestCase extends PluggableActivitiTestCase {
 
   protected TweetHandler tweetHandler = new TweetHandler();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -161,6 +161,7 @@ public String toString() {
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();  
     persistentState.put("suspensionState", this.suspensionState);
+    persistentState.put("category", this.category);
     return persistentState;
   }
   

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/FeedbackStepDefinitionConverter.java
Patch:
@@ -144,7 +144,7 @@ protected UserTask createSelectPeopleUserTask(FeedbackStepDefinition feedbackSte
       scriptField.setFieldName("script");
       
       StringBuilder script = new StringBuilder();
-      script.append("var feedbackProviders = new java.util.ArrayList();" + System.getProperty("line.separator"));
+      script.append("importPackage (java.util); var feedbackProviders = new ArrayList();" + System.getProperty("line.separator"));
       for (String feedbackProvider : feedbackStepDefinition.getFeedbackProviders()) {
         script.append("feedbackProviders.add('" + feedbackProvider + "');" + System.getProperty("line.separator"));
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -187,6 +187,7 @@ protected void addTimerDeclarations(ProcessDefinitionEntity processDefinition) {
     if (timerDeclarations!=null) {
       for (TimerDeclarationImpl timerDeclaration : timerDeclarations) {
         TimerEntity timer = timerDeclaration.prepareTimerEntity(null);
+        timer.setProcessDefinitionId(processDefinition.getId());
         Context
           .getCommandContext()
           .getJobEntityManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -138,6 +138,7 @@ else if (dueDateValue instanceof Date) {
     timer.setDuedate(duedate);
     if (executionEntity != null) {
       timer.setExecution(executionEntity);
+      timer.setProcessDefinitionId(executionEntity.getProcessDefinitionId());
     }
     
     if (type == TimerDeclarationType.CYCLE) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BpmnXMLConverter.java
Patch:
@@ -364,7 +364,7 @@ public BpmnModel convertToBpmnModel(XMLStreamReader xtr) {
 						new MultiInstanceParser().parseChildElement(xtr, activeSubProcessList.get(activeSubProcessList.size() - 1), model);
 					  
 					} else if (convertersToBpmnMap.containsKey(xtr.getLocalName())) {
-					  if (activeProcess.isExecutable()) {
+					  if (activeProcess != null && activeProcess.isExecutable()) {
   					  Class<? extends BaseBpmnXMLConverter> converterClass = convertersToBpmnMap.get(xtr.getLocalName());
   					  BaseBpmnXMLConverter converter = converterClass.newInstance();
   					  if (userTaskFormTypes != null && ELEMENT_TASK_USER.equals(xtr.getLocalName())) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -191,6 +191,7 @@
 import org.activiti.engine.impl.variable.VariableType;
 import org.activiti.engine.impl.variable.VariableTypes;
 import org.activiti.engine.parse.BpmnParseHandler;
+import org.apache.commons.lang.ObjectUtils;
 import org.apache.ibatis.builder.xml.XMLConfigBuilder;
 import org.apache.ibatis.datasource.pooled.PooledDataSource;
 import org.apache.ibatis.mapping.Environment;
@@ -640,6 +641,7 @@ protected void initSqlSessionFactory() {
           properties.put("limitAfter" , DbSqlSessionFactory.databaseSpecificLimitAfterStatements.get(databaseType));
           properties.put("limitBetween" , DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
           properties.put("orderBy" , DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
+          properties.put("limitBeforeNativeQuery" , ObjectUtils.toString(DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType)));
         }
         XMLConfigBuilder parser = new XMLConfigBuilder(reader,"", properties);
         Configuration configuration = parser.getConfiguration();
@@ -1978,4 +1980,4 @@ public void setEnableSafeBpmnXml(boolean enableSafeBpmnXml) {
     this.enableSafeBpmnXml = enableSafeBpmnXml;
   }
   
-}
\ No newline at end of file
+}

File: modules/activiti-engine/src/main/java/org/activiti/engine/query/NativeQuery.java
Patch:
@@ -51,4 +51,7 @@ public interface NativeQuery<T extends NativeQuery< ? , ? >, U extends Object> {
 
   /** Executes the query and get a list of entities as the result. */
   List<U> list();
+  
+  /** Executes the query and get a list of entities as the result. */
+  List<U> listPage(int firstResult, int maxResults);
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -485,20 +485,23 @@ public void testNativeHistoricProcessInstanceTest() {
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
+//    assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testNativeHistoricTaskInstanceTest() {    
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
+    assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testNativeHistoricActivityInstanceTest() {    
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
+    assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -377,7 +377,7 @@ public void setExecutionVariables(Map<String, Object> parameters) {
   }
   
   public String toString() {
-    return "Task["+id+"]";
+    return "Task[id=" + id + ", name=" + name + "]";
   }
   
   // special setters //////////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -377,7 +377,7 @@ public void setExecutionVariables(Map<String, Object> parameters) {
   }
   
   public String toString() {
-    return "Task["+id+"]";
+    return "Task[id=" + id + ", name=" + name + "]";
   }
   
   // special setters //////////////////////////////////////////////////////////

File: modules/activiti-common-rest/src/main/java/org/activiti/rest/api/SecuredResource.java
Patch:
@@ -145,6 +145,8 @@ protected Date getQueryParameterAsDate(String name, Form query) {
         result = isoFormatter.parse(stringValue);
       } catch (ParseException e) {
         throw new ActivitiIllegalArgumentException("The given value for query-parameter '" + name + "' is not a valid date: " + stringValue, e);
+      } catch (IllegalArgumentException e) {
+        throw new ActivitiIllegalArgumentException("The given value for query-parameter '" + name + "' is not a valid date: " + stringValue, e);
       }
     }
     return result;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/engine/variable/DateRestVariableConverter.java
Patch:
@@ -44,7 +44,7 @@ public Object getVariableValue(RestVariable result) {
         throw new ActivitiIllegalArgumentException("Converter can only convert string to date");
       }
       try {
-        result.setValue(isoFormatter.parse((String) result.getValue()));
+        return isoFormatter.parse((String) result.getValue());
       } catch (ParseException e) {
         throw new ActivitiIllegalArgumentException("The given variable value is not a date: '" + result.getValue() + "'", e);
       }

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/runtime/TaskVariablesCollectionResourceTest.java
Patch:
@@ -40,7 +40,7 @@ public class TaskVariablesCollectionResourceTest extends BaseRestTestCase {
    * GET runtime/tasks/{taskId}/variables
    */
   @Deployment
-  public void testGetTaskvariables() throws Exception {
+  public void testGetTaskVariables() throws Exception {
    
     Calendar cal = Calendar.getInstance();
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskBasedResource.java
Patch:
@@ -260,7 +260,7 @@ protected void addTaskvariables(TaskQuery taskQuery, List<QueryVariable> variabl
     }
   }
   
-protected void addProcessvariables(TaskQuery taskQuery, List<QueryVariable> variables) {
+  protected void addProcessvariables(TaskQuery taskQuery, List<QueryVariable> variables) {
     
     for(QueryVariable variable : variables) {
       if(variable.getVariableOperation() == null) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/application/RestServicesInit.java
Patch:
@@ -58,6 +58,7 @@
 import org.activiti.rest.api.task.TaskCollectionResource;
 import org.activiti.rest.api.task.TaskQueryResource;
 import org.activiti.rest.api.task.TaskResource;
+import org.activiti.rest.api.task.TaskVariableCollectionResource;
 import org.restlet.routing.Router;
 
 @SuppressWarnings("deprecation")
@@ -76,6 +77,7 @@ public static void attachResources(Router router) {
     router.attach("/repository/process-definitions/{processDefinitionId}", ProcessDefinitionResource.class);
     
     router.attach("/runtime/tasks/{taskId}", TaskResource.class);
+    router.attach("/runtime/tasks/{taskId}/variables", TaskVariableCollectionResource.class);
     router.attach("/runtime/tasks", TaskCollectionResource.class);
     router.attach("/query/tasks", TaskQueryResource.class);
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskBasedResource.java
Patch:
@@ -173,13 +173,13 @@ protected DataResponse getTasksFromQueryRequest(TaskQueryRequest request) {
       taskQuery.taskDefinitionKey(request.getTaskDefinitionKey());
     }
     taskQuery.taskDefinitionKeyLike(request.getTaskDefinitionKeyLike());
-    if(request.getTaskDefinitionKey() != null) {
+    if(request.getDueDate() != null) {
       taskQuery.dueDate(request.getDueDate());
     }
-    if(request.getTaskDefinitionKey() != null) {
+    if(request.getDueBefore() != null) {
       taskQuery.dueBefore(request.getDueBefore());
     }
-    if(request.getTaskDefinitionKey() != null) {
+    if(request.getDueAfter() != null) {
       taskQuery.dueAfter(request.getDueAfter());
     }
     

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/SimpleTableEditor.java
Patch:
@@ -27,7 +27,6 @@
 import org.activiti.explorer.ui.custom.ToolBar;
 import org.activiti.explorer.ui.custom.ToolbarEntry.ToolbarCommand;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
-import org.activiti.explorer.ui.process.simple.editor.listener.AddTaskClickListener;
 import org.activiti.explorer.ui.process.simple.editor.table.TaskTable;
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 import org.activiti.workflow.simple.converter.json.JsonConverter;

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/ConversionConstants.java
Patch:
@@ -21,5 +21,6 @@ public interface ConversionConstants {
   String GATEWAY_ID_PREFIX = "gateway";
   String EVENT_ID_PREFIX = "event";
   String BOUNDARY_ID_PREFIX = "boundaryEvent";
+  String SCRIPT_TASK_ID_PREFIX = "scriptTask";
 
 }

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/WorkflowDefinitionConversionFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.activiti.workflow.simple.converter.step.FeedbackStepDefinitionConverter;
 import org.activiti.workflow.simple.converter.step.HumanStepDefinitionConverter;
 import org.activiti.workflow.simple.converter.step.ParallelStepsDefinitionConverter;
+import org.activiti.workflow.simple.converter.step.ScriptStepDefinitionConverter;
 import org.activiti.workflow.simple.converter.step.StepDefinitionConverter;
 import org.activiti.workflow.simple.definition.StepDefinition;
 import org.activiti.workflow.simple.definition.WorkflowDefinition;
@@ -57,6 +58,7 @@ protected void initDefaultStepConverters() {
     converters.add(new ParallelStepsDefinitionConverter());
     converters.add(new HumanStepDefinitionConverter());
     converters.add(new FeedbackStepDefinitionConverter());
+    converters.add(new ScriptStepDefinitionConverter());
     setDefaultStepDefinitionConverters(converters);
   }
   

File: modules/activiti-camel/src/test/java/org/activiti/camel/error/route/InboundErrorRoute.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.camel.route;
+package org.activiti.camel.error.route;
 
 import org.activiti.camel.util.TimeConsumingService;
 import org.apache.camel.LoggingLevel;

File: modules/activiti-camel/src/test/java/org/activiti/camel/error/route/OutboundErrorRoute.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.camel.route;
+package org.activiti.camel.error.route;
 
 import org.apache.camel.LoggingLevel;
 import org.apache.camel.builder.RouteBuilder;

File: modules/activiti-camel/src/test/java/org/activiti/camel/util/InitDelegate.java
Patch:
@@ -1,5 +1,6 @@
-package org.activiti.camel;
+package org.activiti.camel.util;
 
+import org.activiti.camel.ActivitiProducer;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
 

File: modules/activiti-camel/src/test/java/org/activiti/camel/util/SleepBean.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.camel;
+package org.activiti.camel.util;
 
 import org.apache.camel.Exchange;
 

File: modules/activiti-camel/src/test/java/org/activiti/camel/util/TestJoinDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.camel;
+package org.activiti.camel.util;
 
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/repository/DeploymentResourceResourceTest.java
Patch:
@@ -49,6 +49,8 @@ public void testGetDeploymentResource() throws Exception {
               RestUrls.URL_DEPLOYMENT_RESOURCE, deployment.getId(), encodedResourceId)));
       assertTrue(responseNode.get("contentUrl").getTextValue().endsWith(RestUrls.createRelativeResourceUrl(
               RestUrls.URL_DEPLOYMENT_RESOURCE_CONTENT, deployment.getId(), encodedResourceId)));
+      assertEquals("text/xml", responseNode.get("mediaType").getTextValue());
+      assertEquals("processDefinition", responseNode.get("type").getTextValue());
       
     } finally {
       // Always cleanup any created deployments, even if the test failed

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/repository/DeploymentResourcesResourceTest.java
Patch:
@@ -57,6 +57,8 @@ public void testGetDeploymentResources() throws Exception {
               RestUrls.URL_DEPLOYMENT_RESOURCE, deployment.getId(), "test.txt")));
       assertTrue(txtNode.get("contentUrl").getTextValue().endsWith(RestUrls.createRelativeResourceUrl(
               RestUrls.URL_DEPLOYMENT_RESOURCE_CONTENT, deployment.getId(), "test.txt")));
+      assertTrue(txtNode.get("mediaType").isNull());
+      assertEquals("resource", txtNode.get("type").getTextValue());
       
     } finally {
       // Always cleanup any created deployments, even if the test failed

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AcquireJobsCmd.java
Patch:
@@ -32,8 +32,6 @@
  */
 public class AcquireJobsCmd implements Command<AcquiredJobs> {
 
-  private static final long serialVersionUID = 1L;
-  
   private final JobExecutor jobExecutor;
 
   public AcquireJobsCmd(JobExecutor jobExecutor) {
@@ -53,7 +51,6 @@ public AcquiredJobs execute(CommandContext commandContext) {
 
     for (JobEntity job: jobs) {
       List<String> jobIds = new ArrayList<String>();
-
       if (job != null && !acquiredJobs.contains(job.getId())) {
         if (job.isExclusive() && job.getProcessInstanceId() != null) {
           // acquire all exclusive jobs in the same process instance

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -44,13 +44,15 @@ public ExecuteJobsCmd(String jobId) {
   }
 
   public Object execute(CommandContext commandContext) {
+    
     if(jobId == null) {
       throw new ActivitiIllegalArgumentException("jobId is null");
     }
     
     if (log.isDebugEnabled()) {
       log.debug("Executing job {}", jobId);
     }
+    
     JobEntity job = commandContext
       .getJobEntityManager()
       .findJobById(jobId);
@@ -64,7 +66,7 @@ public Object execute(CommandContext commandContext) {
       jobExecutorContext.setCurrentJob(job);
     }
     
-    try { 
+    try {
       job.execute(commandContext);
     } catch (RuntimeException exception) {
       // When transaction is rolled back, decrement retries

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/DefaultJobExecutor.java
Patch:
@@ -80,7 +80,7 @@ protected void stopExecutingJobs() {
   public void executeJobs(List<String> jobIds) {
     try {
       threadPoolExecutor.execute(new ExecuteJobsRunnable(this, jobIds));
-    }catch (RejectedExecutionException e) {
+    } catch (RejectedExecutionException e) {
       rejectedJobsHandler.jobsRejected(this, jobIds);
     }
   }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processinstance/ProcessInstanceDetailPanel.java
Patch:
@@ -193,8 +193,8 @@ protected void addProcessImage() {
             imagePanel.addStyleName(Reindeer.PANEL_LIGHT);
             imagePanel.setWidth(100, UNITS_PERCENTAGE);
             imagePanel.setHeight(100, UNITS_PERCENTAGE);
-          
-            URL url = new URL(ExplorerApp.get().getURL().toString().replace("/ui", "") + 
+            URL explorerURL = ExplorerApp.get().getURL();
+            URL url = new URL(explorerURL.getProtocol(), explorerURL.getHost(), explorerURL.getPort(), explorerURL.getPath().replace("/ui", "") +
                 "diagram-viewer/index.html?processDefinitionId=" + processDefinition.getId() + "&processInstanceId=" + processInstance.getId());
             Embedded browserPanel = new Embedded("", new ExternalResource(url));
             browserPanel.setType(Embedded.TYPE_BROWSER);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -18,10 +18,8 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
@@ -889,7 +887,7 @@ public void testSetDueDate() {
 
     // Fetch task to check if the due date was persisted
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
-    assertEquals(now, task.getDueDate());
+    assertNotNull(task.getDueDate());
 
     //Set the due date to null
     taskService.setDueDate(task.getId(), null);

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -351,6 +351,9 @@ public interface TaskService {
 
   /** Add a comment to a task and/or process instance. */
   void addComment(String taskId, String processInstanceId, String message);
+  
+  /** Removes all comments from the provided task and/or process instance*/
+  void deleteComments(String taskId, String processInstanceId);
 
   /** The comments related to the given task. */
   List<Comment> getTaskComments(String taskId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.TaskService;
 import org.activiti.engine.impl.cmd.AddCommentCmd;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionImageStreamResourceBuilder.java
Patch:
@@ -75,7 +75,7 @@ public StreamResource buildStreamResource(ProcessInstance processInstance, Repos
     if (processDefinition != null && processDefinition.isGraphicalNotationDefined()) {
       try {
         
-        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getId());
+        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());
         InputStream definitionImageStream = ProcessDiagramGenerator.generateDiagram(bpmnModel, "png", 
                 runtimeService.getActiveActivityIds(processInstance.getId()));
               

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ScriptTask.java
Patch:
@@ -21,7 +21,7 @@ public class ScriptTask extends Task {
   protected String scriptFormat;
   protected String script;
   protected String resultVariable;
-  protected boolean autoStoreVariables = true; // 'true' for backwards compatibility
+  protected boolean autoStoreVariables = false; // see http://jira.codehaus.org/browse/ACT-1626
 
   public String getScriptFormat() {
     return scriptFormat;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -40,7 +40,7 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {
   protected String script;
   protected String language;
   protected String resultVariable;
-  protected boolean storeScriptVariables = true; // 'true' for backwards compatibility
+  protected boolean storeScriptVariables = false; // see http://jira.codehaus.org/browse/ACT-1626
 
   public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {
     this.script = script;

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/MailTaskJsonConverter.java
Patch:
@@ -75,7 +75,7 @@ protected void addField(String name, JsonNode elementNode, ServiceTask task) {
       } else {
         field.setStringValue(value);
       }
+      task.getFieldExtensions().add(field);
     }
-    task.getFieldExtensions().add(field);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BaseBpmnXMLConverter.java
Patch:
@@ -204,13 +204,14 @@ public void convertToXML(XMLStreamWriter xtw, BaseElement baseElement, BpmnModel
     if (didWriteExtensionStartElement) {
       xtw.writeEndElement();
     }
-    writeAdditionalChildElements(baseElement, xtw);
     
     if (baseElement instanceof Activity) {
       final Activity activity = (Activity) baseElement;
       MultiInstanceExport.writeMultiInstance(activity, xtw);
     }
     
+    writeAdditionalChildElements(baseElement, xtw);
+    
     xtw.writeEndElement();
   }
   

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/TaskListenerParser.java
Patch:
@@ -31,6 +31,8 @@ public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, Bp
     
     super.parseChildElement(xtr, parentElement, model);
     
-    ((UserTask) parentElement).getTaskListeners().add(listener);
+    if (parentElement instanceof UserTask) {
+      ((UserTask) parentElement).getTaskListeners().add(listener);
+    }
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/BPMNDIExport.java
Patch:
@@ -70,7 +70,7 @@ public static void writeBPMNDI(BpmnModel model, XMLStreamWriter xtw) throws Exce
     
     for (String elementId : model.getFlowLocationMap().keySet()) {
       
-      if (model.getFlowElement(elementId) != null) {
+      if (model.getFlowElement(elementId) != null || model.getArtifact(elementId) != null) {
       
         xtw.writeStartElement(BPMNDI_PREFIX, ELEMENT_DI_EDGE, BPMNDI_NAMESPACE);
         xtw.writeAttribute(ATTRIBUTE_DI_BPMNELEMENT, elementId);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/ProcessExport.java
Patch:
@@ -49,12 +49,12 @@ public static void writeProcess(Process process, XMLStreamWriter xtw) throws Exc
       xtw.writeEndElement();
     }
     
-    LaneExport.writeLanes(process, xtw);
-    
     boolean wroteListener = ActivitiListenerExport.writeListeners(process, false, xtw);
     if (wroteListener) {
       // closing extensions element
       xtw.writeEndElement();
     }
+    
+    LaneExport.writeLanes(process, xtw);
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/BpmnEdgeParser.java
Patch:
@@ -42,6 +42,8 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
 					  BpmnXMLUtil.addXMLLocation(graphicInfo, xtr);
             graphicInfo.setX(Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_X)).intValue());
             graphicInfo.setY(Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_Y)).intValue());
+            graphicInfo.setWidth(Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_WIDTH)).intValue());
+            graphicInfo.setHeight(Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_HEIGHT)).intValue());
 					  model.addLabelGraphicInfo(id, graphicInfo);
 					  break;
           } else if(xtr.isEndElement() && ELEMENT_DI_LABEL.equalsIgnoreCase(xtr.getLocalName())) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetBpmnModelCmd.java
Patch:
@@ -69,7 +69,7 @@ public BpmnModel execute(CommandContext commandContext) {
     
     // Convert the bpmn 2.0 xml to a bpmn model
     BpmnXMLConverter bpmnXMLConverter = new BpmnXMLConverter();
-    return bpmnXMLConverter.convertToBpmnModel(new BytesStreamSource(resource.getBytes()), false); // no need to validate schema, it was already validated on deploy
+    return bpmnXMLConverter.convertToBpmnModel(new BytesStreamSource(resource.getBytes()), false, false); // no need to validate schema, it was already validated on deploy
   }
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/java/EventJavaTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.activiti.bpmn.model.TimerEventDefinition;
 import org.activiti.bpmn.model.UserTask;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti.engine.impl.util.io.InputStreamSource;
 import org.activiti.engine.repository.Deployment;
 
 
@@ -69,7 +70,7 @@ public void testStartEventWithExecutionListener() throws Exception {
     byte[] xml = new BpmnXMLConverter().convertToXML(bpmnModel);
     
     XMLInputFactory xif = XMLInputFactory.newInstance();
-    new BpmnXMLConverter().validateModel(xif.createXMLStreamReader(new ByteArrayInputStream(xml)));
+    new BpmnXMLConverter().validateModel(new InputStreamSource(new ByteArrayInputStream(xml)));
     
     Deployment deployment = repositoryService.createDeployment().name("test").addString("test.bpmn20.xml", new String(xml)).deploy();
     repositoryService.deleteDeployment(deployment.getId());

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/DefaultFormPropertyTypes.java
Patch:
@@ -17,7 +17,7 @@
  */
 public interface DefaultFormPropertyTypes {
 
-  String TEXT = "string";
+  String TEXT = "text";
   
   String NUMBER = "number";
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/reporting/ReportingUtil.java
Patch:
@@ -21,8 +21,6 @@
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.repository.ProcessDefinition;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 
 /**

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -485,23 +485,20 @@ public void testNativeHistoricProcessInstanceTest() {
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
-    assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testNativeHistoricTaskInstanceTest() {    
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
-    assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testNativeHistoricActivityInstanceTest() {    
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
-    assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
 }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/reports/ChartComponent.java
Patch:
@@ -54,8 +54,9 @@ public void addChart(String description, Component chart, String errorMessage) {
     if (chart != null) {
       if (chart instanceof DCharts) {
         // DCharts doesn't know how to size itself
-        chart.setWidth(500, UNITS_PIXELS);
+        chart.setWidth(600, UNITS_PIXELS);
         chart.setHeight(450, UNITS_PIXELS);
+        ((DCharts) chart).show();
       }
       addComponent(chart);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoEntity.java
Patch:
@@ -19,17 +19,15 @@
 
 import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
-import org.activiti.engine.impl.identity.Account;
 
 
 /**
  * @author Tom Baeyens
  */
-public class IdentityInfoEntity implements PersistentObject, HasRevision, Account, Serializable {
+public class IdentityInfoEntity implements PersistentObject, HasRevision, Serializable {
   
   private static final long serialVersionUID = 1L;
   
-  public static final String TYPE_USERACCOUNT = "account";
   public static final String TYPE_USERINFO = "userinfo";
   
   protected String id;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -103,6 +103,9 @@ public Object getPersistentState() {
     if (textValue != null) {
       persistentState.put("textValue", textValue);
     }
+    if (textValue2 != null) {
+      persistentState.put("textValue2", textValue2);
+    }
     if (byteArrayValueId != null) {
       persistentState.put("byteArrayValueId", byteArrayValueId);
     }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/demo/DemoDataGenerator.java
Patch:
@@ -184,7 +184,7 @@ protected void initProcessDefinitions() {
     deploymentList = repositoryService.createDeploymentQuery().deploymentName(reportDeploymentName).list();
     if (deploymentList == null || deploymentList.size() == 0) {
       repositoryService.createDeployment()
-        .name(deploymentName)
+        .name(reportDeploymentName)
         .addClasspathResource("org/activiti/explorer/demo/process/reports/taskDurationForProcessDefinition.bpmn20.xml")
         .deploy();
     }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/file/ImageAttachmentRenderer.java
Patch:
@@ -69,7 +69,7 @@ public Component getDetailComponent(Attachment attachment) {
     
     String mimeType = extractMineType(attachment.getType());
     
-    InputStream imageStream = ImageUtil.smallify(taskService.getAttachmentContent(attachment.getId()), mimeType, 900, 550);
+    InputStream imageStream = ImageUtil.resizeImage(taskService.getAttachmentContent(attachment.getId()), mimeType, 900, 550);
     Resource resource = new StreamResource(new InputStreamStreamSource(imageStream),
             attachment.getName() + extractExtention(attachment.getType()),ExplorerApp.get());
     Embedded image = new Embedded(null, resource);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/util/ImageUtil.java
Patch:
@@ -41,7 +41,7 @@ public class ImageUtil {
    * If the image is smaller then the given maximum width or height, the image
    * will be proportionally resized.
    */
-  public static InputStream smallify(InputStream imageInputStream, String mimeType, int maxWidth, int maxHeight) {
+  public static InputStream resizeImage(InputStream imageInputStream, String mimeType, int maxWidth, int maxHeight) {
     try {
       BufferedImage image = ImageIO.read(imageInputStream);
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/query/NativeQuery.java
Patch:
@@ -51,5 +51,8 @@ public interface NativeQuery<T extends NativeQuery< ? , ? >, U extends Object> {
 
   /** Executes the query and get a list of entities as the result. */
   List<U> list();
+  
+  /** Executes the query and get a list of entities as the result. */
+  List<U> listPage(int firstResult, int maxResults);
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -487,20 +487,23 @@ public void testNativeHistoricProcessInstanceTest() {
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
+//    assertEquals(1, historyService.createNativeHistoricProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testNativeHistoricTaskInstanceTest() {    
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
+    assertEquals(1, historyService.createNativeHistoricTaskInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
   @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })
   public void testNativeHistoricActivityInstanceTest() {    
     runtimeService.startProcessInstanceByKey("oneTaskProcess");    
     assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(HistoricProcessInstance.class)).count());
     assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).list().size());
+    assertEquals(1, historyService.createNativeHistoricActivityInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(HistoricProcessInstance.class)).listPage(0, 1).size());
   }
   
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -103,6 +103,9 @@ public Object getPersistentState() {
     if (textValue != null) {
       persistentState.put("textValue", textValue);
     }
+    if (textValue2 != null) {
+      persistentState.put("textValue2", textValue2);
+    }
     if (byteArrayValueId != null) {
       persistentState.put("byteArrayValueId", byteArrayValueId);
     }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/util/ProgrammaticBeanLookupTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsEqual.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.junit.Assert.*;
 
 import javax.enterprise.inject.Alternative;
 import javax.inject.Named;
@@ -73,7 +73,7 @@ public static JavaArchive createDeploymentWithSpecialization() {
 	public void testLookupBean() {
 		deployer.deploy("normal");
 		Object lookup = ProgrammaticBeanLookup.lookup("testOnly");
-		assertThat(lookup.getClass(), is(TestBean.class.getClass()));
+		assertTrue(lookup.getClass().isAssignableFrom(TestBean.class));
 		deployer.undeploy("normal");
 	}
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/form/FormProperty.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.engine.form;
 
+import java.io.Serializable;
+
 import org.activiti.engine.FormService;
 
 
@@ -21,7 +23,7 @@
  * 
  * @author Tom Baeyens
  */
-public interface FormProperty {
+public interface FormProperty extends Serializable {
   
   /** The key used to submit the property in {@link FormService#submitStartFormData(String, java.util.Map)} 
    * or {@link FormService#submitTaskFormData(String, java.util.Map)} */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/Condition.java
Patch:
@@ -12,14 +12,16 @@
  */
 package org.activiti.engine.impl;
 
+import java.io.Serializable;
+
 import org.activiti.engine.delegate.DelegateExecution;
 
 
 
 /**
  * @author Tom Baeyens
  */
-public interface Condition {
+public interface Condition extends Serializable {
 
   boolean evaluate(DelegateExecution execution);
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/Event.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.engine.task;
 
+import java.io.Serializable;
 import java.util.Date;
 import java.util.List;
 
@@ -24,7 +25,7 @@
  * @see {@link TaskService#getTaskEvents(String)
  * @author Tom Baeyens
  */
-public interface Event {
+public interface Event extends Serializable {
   
   /** A user identity link was added with following message parts:
    * [0] userId

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ConvertProcessDefinitionPopupWindow.java
Patch:
@@ -54,10 +54,11 @@ public class ConvertProcessDefinitionPopupWindow extends PopupWindow implements
   
   private static final long serialVersionUID = 1L;
   
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RuntimeService runtimeService = ProcessEngines.getDefaultProcessEngine().getRuntimeService();
+  
   protected I18nManager i18nManager;
   protected NotificationManager notificationManager;
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
-  protected RuntimeService runtimeService = ProcessEngines.getDefaultProcessEngine().getRuntimeService();
   protected VerticalLayout windowLayout;
   protected ProcessDefinition processDefinition;
   

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/CopyModelPopupWindow.java
Patch:
@@ -53,7 +53,7 @@ public class CopyModelPopupWindow extends PopupWindow implements ModelDataJsonCo
   protected TextField nameTextField;
   protected TextArea descriptionTextArea;
   
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
   
   public CopyModelPopupWindow(Model model) {
     this.modelData = model;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/DeleteModelPopupWindow.java
Patch:
@@ -42,7 +42,7 @@ public class DeleteModelPopupWindow extends PopupWindow implements ModelDataJson
   protected VerticalLayout windowLayout;
   protected Model modelData;
   
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
   
   public DeleteModelPopupWindow(Model model) {
     this.modelData = model;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionDetailPanel.java
Patch:
@@ -90,7 +90,7 @@ public class EditorProcessDefinitionDetailPanel extends DetailPanel {
   protected FormPropertiesForm processDefinitionStartForm;
   protected EditorProcessDefinitionInfoComponent definitionInfoComponent;
   
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
   
   public EditorProcessDefinitionDetailPanel(String modelId, EditorProcessDefinitionPage processDefinitionPage) {
     this.i18nManager = ExplorerApp.get().getI18nManager();

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionInfoComponent.java
Patch:
@@ -45,7 +45,7 @@ public class EditorProcessDefinitionInfoComponent extends VerticalLayout {
   private static final long serialVersionUID = 1L;
 
   // Services
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   protected I18nManager i18nManager;
   
   // Members

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionPage.java
Patch:
@@ -46,7 +46,7 @@ public class EditorProcessDefinitionPage extends AbstractTablePage {
   private static final long serialVersionUID = 1L;
   
   // Services
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
   
   // UI
   protected String modelId;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ImportUploadReceiver.java
Patch:
@@ -49,7 +49,7 @@ public class ImportUploadReceiver implements Receiver, FinishedListener, ModelDa
 
   private static final long serialVersionUID = 1L;
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   protected I18nManager i18nManager;
   protected NotificationManager notificationManager;
   protected ViewManager viewManager;

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/NewModelPopupWindow.java
Patch:
@@ -58,7 +58,7 @@ public class NewModelPopupWindow extends PopupWindow implements ModelDataJsonCon
   protected TextArea descriptionTextArea;
   protected SelectEditorComponent selectEditorComponent;
   
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
   
   public NewModelPopupWindow() {
     this.windowLayout = (VerticalLayout) getContent();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ViewManager.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.explorer;
 
-import org.activiti.engine.repository.Model;
 import org.activiti.workflow.simple.definition.WorkflowDefinition;
 
 import com.vaadin.ui.Window;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ViewManagerFactoryBean.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer;
 
+import java.io.Serializable;
+
 import org.activiti.explorer.ui.MainWindow;
 import org.activiti.explorer.ui.alfresco.AlfrescoViewManager;
 import org.springframework.beans.factory.FactoryBean;
@@ -21,7 +23,7 @@
 /**
  * @author Joram Barrez
  */
-public class ViewManagerFactoryBean implements FactoryBean<ViewManager> {
+public class ViewManagerFactoryBean implements FactoryBean<ViewManager>, Serializable {
 
   protected String environment;
   protected MainWindow mainWindow;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/cache/TrieBasedUserCache.java
Patch:
@@ -49,7 +49,7 @@ public class TrieBasedUserCache implements UserCache {
   
   private static final Logger LOGGER = LoggerFactory.getLogger(TrieBasedUserCache.class);
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected RadixTree<List<User>> userTrie = new RadixTreeImpl<List<User>>();
   protected Map<String, List<String>> keyCache = new HashMap<String, List<String>>();
   protected Map<String, User> userCache = new HashMap<String, User>();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/data/LazyLoadingQuery.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.explorer.data;
 
+import java.io.Serializable;
 import java.util.List;
 
 import com.vaadin.data.Item;
@@ -23,7 +24,7 @@
  * 
  * @author Joram Barrez
  */
-public interface LazyLoadingQuery {
+public interface LazyLoadingQuery extends Serializable {
   
   int size();
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/demo/DemoDataGenerator.java
Patch:
@@ -41,9 +41,9 @@ public class DemoDataGenerator implements ModelDataJsonConstants {
   
   protected static final Logger LOGGER = LoggerFactory.getLogger(DemoDataGenerator.class);
 
-  protected ProcessEngine processEngine;
-  protected IdentityService identityService;
-  protected RepositoryService repositoryService;
+  protected transient ProcessEngine processEngine;
+  protected transient IdentityService identityService;
+  protected transient RepositoryService repositoryService;
   
   protected boolean createDemoUsersAndGroups;
   protected boolean createDemoProcessDefinitions;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/navigation/Navigator.java
Patch:
@@ -13,14 +13,16 @@
 
 package org.activiti.explorer.navigation;
 
+import java.io.Serializable;
+
 
 
 /**
  * Handler class for responding on navigation requests.
  * 
  * @author Frederik Heremans
  */
-public interface Navigator {
+public interface Navigator extends Serializable {
 
   /**
    * Gets the string that triggers this handler to be used

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/navigation/TaskNavigator.java
Patch:
@@ -43,9 +43,9 @@ public class TaskNavigator implements Navigator {
   public static final String PARAMETER_CATEGORY = "category";
   public static final String PARAMETER_GROUP = "group";
   
-  protected TaskService taskService;
-  protected HistoryService historyService;
-  protected IdentityService identityService;
+  protected transient TaskService taskService;
+  protected transient HistoryService historyService;
+  protected transient IdentityService identityService;
   
   public TaskNavigator() {
     this.taskService = ProcessEngines.getDefaultProcessEngine().getTaskService();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/navigation/UriFragment.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.navigation;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedHashMap;
@@ -27,7 +28,7 @@
  * 
  * @author Frederik Heremans
  */
-public class UriFragment {
+public class UriFragment implements Serializable {
 
   private List<String> uriParts;
   private Map<String, String> parameters;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/ComponentFactory.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti.explorer.ui;
 
+import java.io.Serializable;
+
 import com.vaadin.ui.Component;
 
 
@@ -21,7 +23,7 @@
  * 
  * @author Joram Barrez
  */
-public interface ComponentFactory<T> {
+public interface ComponentFactory<T> extends Serializable {
   
   void initialise(String environment);
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/alfresco/ProcessInstanceTableLazyQuery.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class ProcessInstanceTableLazyQuery extends AbstractLazyLoadingQuery {
   
-  protected RuntimeService runtimeService;
+  protected transient RuntimeService runtimeService;
   protected String processDefinitionId;
   
   public ProcessInstanceTableLazyQuery() {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/AttachmentEditor.java
Patch:
@@ -13,13 +13,15 @@
 
 package org.activiti.explorer.ui.content;
 
+import java.io.Serializable;
+
 import org.activiti.engine.task.Attachment;
 import org.activiti.explorer.I18nManager;
 
 import com.vaadin.terminal.Resource;
 
 
-public interface AttachmentEditor {
+public interface AttachmentEditor extends Serializable {
   
   /**
    * Get the name of this editor. Only one editor with the same name can e used.

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/AttachmentRenderer.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer.ui.content;
 
+import java.io.Serializable;
+
 import org.activiti.engine.task.Attachment;
 import org.activiti.explorer.I18nManager;
 
@@ -26,7 +28,7 @@
  * 
  * @author Frederik Heremans
  */
-public interface AttachmentRenderer {
+public interface AttachmentRenderer extends Serializable {
 
   /**
    * Returns true if this renderer is capable of rendering attachments of the given type.

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/CreateAttachmentPopupWindow.java
Patch:
@@ -51,7 +51,7 @@ public class CreateAttachmentPopupWindow extends PopupWindow {
 
   protected I18nManager i18nManager;
   protected AttachmentRendererManager attachmentRendererManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
 
   protected HorizontalLayout layout;
   protected GridLayout detailLayout;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/email/EmailDetailPanel.java
Patch:
@@ -43,7 +43,7 @@ public class EmailDetailPanel extends Panel {
   private static final long serialVersionUID = 1L;
 
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   protected Label content;
   protected Attachment attachment;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/file/FileAttachmentEditorComponent.java
Patch:
@@ -58,7 +58,7 @@ public class FileAttachmentEditorComponent extends VerticalLayout implements Att
   protected boolean fileUploaded = false;
   
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   protected Form form;
   protected UploadComponent uploadComponent;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/content/url/UrlAttachmentEditorComponent.java
Patch:
@@ -39,7 +39,7 @@ public class UrlAttachmentEditorComponent extends Form implements AttachmentEdit
   protected String processInstanceId;
   
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   public UrlAttachmentEditorComponent(String taskId, String processInstanceId) {
     this(null, taskId, processInstanceId);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/custom/TaskListHeader.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
 import org.activiti.explorer.Messages;
-import org.activiti.explorer.ViewManager;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 
 import com.vaadin.event.Action;
@@ -47,7 +46,7 @@ public class TaskListHeader extends Panel {
   private static final long serialVersionUID = 1L;
 
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   protected HorizontalLayout layout;
   protected TextField inputField;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/custom/ToolbarEntry.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer.ui.custom;
 
+import java.io.Serializable;
+
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 
 import com.vaadin.ui.Alignment;
@@ -121,7 +123,7 @@ protected void initCountComponent() {
     layout.setComponentAlignment(countButton, Alignment.MIDDLE_LEFT);
   }
   
-  public interface ToolbarCommand {
+  public interface ToolbarCommand extends Serializable {
     void toolBarItemSelected();
   }
 }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/form/FormPropertiesForm.java
Patch:
@@ -47,7 +47,7 @@ public class FormPropertiesForm extends VerticalLayout {
   private static final long serialVersionUID = -3197331726904715949L;
 
   // Services
-  protected FormService formService;
+  protected transient FormService formService;
   protected I18nManager i18nManager;
 
   // UI

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/form/FormPropertyRenderer.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer.ui.form;
 
+import java.io.Serializable;
+
 import org.activiti.engine.form.FormProperty;
 import org.activiti.engine.form.FormType;
 
@@ -24,7 +26,7 @@
  * 
  * @author Frederik Heremans
  */
-public interface FormPropertyRenderer {
+public interface FormPropertyRenderer extends Serializable {
 
   /**
    * The form type this renderer should be used for.

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/login/DefaultLoginHandler.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class DefaultLoginHandler implements LoginHandler {
 
-  private IdentityService identityService;
+  private transient IdentityService identityService;
 
   public LoggedInUserImpl authenticate(String userName, String password) {
     LoggedInUserImpl loggedInUser = null;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/login/ExplorerLoginForm.java
Patch:
@@ -18,7 +18,6 @@
 import org.activiti.explorer.I18nManager;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
-import org.apache.commons.lang.StringUtils;
 import org.springframework.web.util.HtmlUtils;
 
 import com.vaadin.ui.LoginForm;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/login/LoginHandler.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer.ui.login;
 
+import java.io.Serializable;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
@@ -24,7 +26,7 @@
  * 
  * @author Frederik Heremans
  */
-public interface LoginHandler {
+public interface LoginHandler extends Serializable {
 
   /**
    * Authenticate the user with the given username and given password.

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/login/LoginPage.java
Patch:
@@ -37,7 +37,7 @@ public class LoginPage extends CustomLayout {
   
   private static final long serialVersionUID = 1L;
   
-  protected IdentityService identityService = ProcessEngines.getDefaultProcessEngine().getIdentityService();
+  protected transient IdentityService identityService = ProcessEngines.getDefaultProcessEngine().getIdentityService();
   
   protected I18nManager i18nManager;
   protected ViewManager viewManager;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/admin/AdminDatabaseSettingsPanel.java
Patch:
@@ -38,7 +38,7 @@ public class AdminDatabaseSettingsPanel extends DetailPanel {
 
   private static final long serialVersionUID = 1L;
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
 
   protected ProcessEngineConfigurationImpl engineConfiguration; 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/db/DatabaseDetailPanel.java
Patch:
@@ -39,7 +39,7 @@ public class DatabaseDetailPanel extends DetailPanel {
   
   private static final long serialVersionUID = 1L;
   
-  protected ManagementService managementService;
+  protected transient ManagementService managementService;
   protected I18nManager i18nManager;
   
   protected String tableName;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/db/DatabasePage.java
Patch:
@@ -37,7 +37,7 @@ public class DatabasePage extends ManagementPage {
 
   private static final long serialVersionUID = 1L;
   
-  protected ManagementService managementService = ProcessEngines.getDefaultProcessEngine().getManagementService();
+  protected transient ManagementService managementService = ProcessEngines.getDefaultProcessEngine().getManagementService();
   protected String tableName;
   
   public DatabasePage() {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/db/TableDataQuery.java
Patch:
@@ -33,7 +33,7 @@
 public class TableDataQuery extends AbstractLazyLoadingQuery {
   
   protected String tableName;
-  protected ManagementService managementService;
+  protected transient ManagementService managementService;
   protected Object[] sortPropertyIds;
   protected boolean[] sortPropertyIdsAscending;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/deployment/DeleteDeploymentPopupWindow.java
Patch:
@@ -43,9 +43,9 @@ public class DeleteDeploymentPopupWindow extends PopupWindow {
   
   private static final long serialVersionUID = 1L;
   
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RuntimeService runtimeService = ProcessEngines.getDefaultProcessEngine().getRuntimeService();
   protected I18nManager i18nManager;
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
-  protected RuntimeService runtimeService = ProcessEngines.getDefaultProcessEngine().getRuntimeService();
   protected DeploymentPage deploymentPage;
   protected VerticalLayout windowLayout;
   protected Deployment deployment;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/deployment/DeploymentDetailPanel.java
Patch:
@@ -50,7 +50,7 @@ public class DeploymentDetailPanel extends DetailPanel {
 
   private static final long serialVersionUID = 1L;
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   protected ViewManager viewManager;
   protected I18nManager i18nManager;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/deployment/DeploymentListQuery.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class DeploymentListQuery extends AbstractLazyLoadingQuery {
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   protected DeploymentFilter deploymentFilter;
   
   public DeploymentListQuery(DeploymentFilter deploymentFilter) {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/deployment/DeploymentUploadReceiver.java
Patch:
@@ -41,7 +41,7 @@ public class DeploymentUploadReceiver implements Receiver, FinishedListener {
 
   private static final long serialVersionUID = 1L;
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   protected I18nManager i18nManager;
   protected NotificationManager notificationManager;
   protected ViewManager viewManager;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/DeleteMembershipListener.java
Patch:
@@ -32,7 +32,7 @@
 public class DeleteMembershipListener implements ClickListener {
   
   private static final long serialVersionUID = 1L;
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected String userId;
   protected String groupId;
   protected MemberShipChangeListener membershipChangeListener;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupDetailPanel.java
Patch:
@@ -59,7 +59,7 @@ public class GroupDetailPanel extends DetailPanel implements MemberShipChangeLis
 
   private static final long serialVersionUID = 1L;
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
 
   protected GroupPage groupPage;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupListQuery.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class GroupListQuery extends AbstractLazyLoadingQuery {
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   
   public GroupListQuery() {
     this.identityService = ProcessEngines.getDefaultProcessEngine().getIdentityService();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupMembersQuery.java
Patch:
@@ -43,9 +43,10 @@
  */
 public class GroupMembersQuery extends AbstractLazyLoadingQuery {
   
+  protected transient IdentityService identityService;
+
   protected String groupId;
   protected MemberShipChangeListener memberShipChangeListener;
-  protected IdentityService identityService;
   protected String sortby;
   protected boolean ascending;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupSelectionPopupWindow.java
Patch:
@@ -43,7 +43,7 @@
 public class GroupSelectionPopupWindow extends PopupWindow {
   
   private static final long serialVersionUID = 1L;
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
   protected String userId;
   protected Table groupTable;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupSelectionQuery.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class GroupSelectionQuery extends AbstractLazyLoadingQuery {
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected String userId;
   
   public GroupSelectionQuery(IdentityService identityService, String userId) {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupsForUserQuery.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class GroupsForUserQuery extends AbstractLazyLoadingQuery {
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected String userId;
   protected UserDetailPanel userDetailPanel;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/NewGroupPopupWindow.java
Patch:
@@ -47,7 +47,7 @@
 public class NewGroupPopupWindow extends PopupWindow {
   
   private static final long serialVersionUID = 1L;
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
   protected Form form;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/NewUserPopupWindow.java
Patch:
@@ -35,7 +35,6 @@
 import com.vaadin.ui.HorizontalLayout;
 import com.vaadin.ui.PasswordField;
 import com.vaadin.ui.TextField;
-import com.vaadin.ui.VerticalLayout;
 import com.vaadin.ui.themes.Reindeer;
 
 
@@ -47,7 +46,7 @@
 public class NewUserPopupWindow extends PopupWindow {
   
   private static final long serialVersionUID = 1L;
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
   protected Form form;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/UserDetailPanel.java
Patch:
@@ -59,8 +59,8 @@ public class UserDetailPanel extends DetailPanel implements MemberShipChangeList
 
   private static final long serialVersionUID = 1L;
   
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
-  protected IdentityService identityService;
   
   protected UserPage userPage;
   protected User user;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/UserListQuery.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class UserListQuery extends AbstractLazyLoadingQuery {
   
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   
   public UserListQuery() {
     this.identityService = ProcessEngines.getDefaultProcessEngine().getIdentityService();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/job/JobDetailPanel.java
Patch:
@@ -50,7 +50,7 @@ public class JobDetailPanel extends DetailPanel {
 
   private static final long serialVersionUID = 1L;
   
-  protected ManagementService managementService;
+  protected transient ManagementService managementService;
   protected I18nManager i18nManager;
   protected NotificationManager notificationManager;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processdefinition/ActiveProcessDefinitionListQuery.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class ActiveProcessDefinitionListQuery extends AbstractLazyLoadingQuery {
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   
   public ActiveProcessDefinitionListQuery() {
     this.repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processdefinition/SuspendedProcessDefinitionListQuery.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class SuspendedProcessDefinitionListQuery extends AbstractLazyLoadingQuery {
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   
   public SuspendedProcessDefinitionListQuery() {
     this.repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processinstance/ProcessInstanceListQuery.java
Patch:
@@ -34,8 +34,8 @@
  */
 public class ProcessInstanceListQuery extends AbstractLazyLoadingQuery {
   
-  protected RuntimeService runtimeService;
-  protected RepositoryService repositoryService;
+  protected transient RuntimeService runtimeService;
+  protected transient RepositoryService repositoryService;
   
   protected Map<String, String> cachedProcessDefinitionNames = new HashMap<String, String>();
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/AbstractProcessDefinitionDetailPanel.java
Patch:
@@ -53,9 +53,9 @@ public abstract class AbstractProcessDefinitionDetailPanel extends DetailPanel {
   protected AbstractPage parentPage;
   
   // Services
-  protected RepositoryService repositoryService;
-  protected ManagementService managementService;
-  protected FormService formService; 
+  protected transient RepositoryService repositoryService;
+  protected transient ManagementService managementService;
+  protected transient FormService formService; 
   protected I18nManager i18nManager;
   
   // UI

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/DefaultProcessDefinitionFilter.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer.ui.process;
 
+import java.io.Serializable;
+
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.repository.ProcessDefinitionQuery;
@@ -23,7 +25,7 @@
 /**
  * @author Frederik Heremans
  */
-public class DefaultProcessDefinitionFilter implements ProcessDefinitionFilter {
+public class DefaultProcessDefinitionFilter implements ProcessDefinitionFilter, Serializable {
 
   protected static final String PROPERTY_ID = "id";
   protected static final String PROPERTY_NAME = "name";

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/MyProcessInstancesListQuery.java
Patch:
@@ -34,8 +34,8 @@
  */
 public class MyProcessInstancesListQuery extends AbstractLazyLoadingQuery {
   
-  protected HistoryService historyService;
-  protected RepositoryService repositoryService;
+  protected transient HistoryService historyService;
+  protected transient RepositoryService repositoryService;
   
   protected Map<String, ProcessDefinition> cachedProcessDefinitions;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/MyProcessInstancesPage.java
Patch:
@@ -30,8 +30,8 @@ public class MyProcessInstancesPage extends ProcessInstancePage {
 
   protected String processInstanceId;
   
-  protected RepositoryService repositoryService;
-  protected HistoryService historyService;
+  protected transient RepositoryService repositoryService;
+  protected transient HistoryService historyService;
   
   public MyProcessInstancesPage() {
     historyService = ProcessEngines.getDefaultProcessEngine().getHistoryService();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionInfoComponent.java
Patch:
@@ -63,8 +63,8 @@ public class ProcessDefinitionInfoComponent extends VerticalLayout {
   protected static final Logger LOGGER = LoggerFactory.getLogger(ProcessDefinitionInfoComponent.class);
 
   // Services
-  protected RepositoryService repositoryService;
-  protected ManagementService managementService;
+  protected transient RepositoryService repositoryService;
+  protected transient ManagementService managementService;
   protected I18nManager i18nManager;
   
   // Members

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionListQuery.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class ProcessDefinitionListQuery extends AbstractLazyLoadingQuery {
   
-  protected RepositoryService repositoryService;
+  protected transient RepositoryService repositoryService;
   
   protected ProcessDefinitionFilter filter;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionPage.java
Patch:
@@ -42,7 +42,7 @@ public class ProcessDefinitionPage extends AbstractTablePage {
   private static final long serialVersionUID = 1L;
   
   // Services
-  protected RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
+  protected transient RepositoryService repositoryService = ProcessEngines.getDefaultProcessEngine().getRepositoryService();
   
   // UI
   protected String processDefinitionId;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/listener/StartProcessInstanceClickListener.java
Patch:
@@ -40,9 +40,9 @@ public class StartProcessInstanceClickListener implements ClickListener {
 
   private static final long serialVersionUID = 1L;
   
-  protected RuntimeService runtimeService;
-  protected TaskService taskService;
-  protected FormService formService;
+  protected transient RuntimeService runtimeService;
+  protected transient TaskService taskService;
+  protected transient FormService formService;
   protected NotificationManager notificationManager;
   
   protected ProcessDefinition processDefinition;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/listener/TaskFormModelListener.java
Patch:
@@ -12,10 +12,12 @@
  */
 package org.activiti.explorer.ui.process.simple.editor.listener;
 
+import java.io.Serializable;
+
 /**
  * @author Joram Barrez
  */
-public interface TaskFormModelListener {
+public interface TaskFormModelListener extends Serializable {
 
   void formAdded(Object taskItemId);
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/table/TaskFormModel.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.explorer.ui.process.simple.editor.table;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -23,7 +24,7 @@
 /**
  * @author Joram Barrez
  */
-public class TaskFormModel {
+public class TaskFormModel implements Serializable {
 
   protected List<TaskFormModelListener> formModelListeners = new ArrayList<TaskFormModelListener>();
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/profile/ChangePasswordPopupWindow.java
Patch:
@@ -43,7 +43,8 @@
 public class ChangePasswordPopupWindow extends PopupWindow {
   
   private static final long serialVersionUID = 1L;
-  protected IdentityService identityService;
+  
+  protected transient IdentityService identityService;
   protected LoggedInUser currentUser;
   protected I18nManager i18nManager;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/profile/ProfilePanel.java
Patch:
@@ -62,7 +62,7 @@ public class ProfilePanel extends Panel {
   private static final long serialVersionUID = -4274649964206760400L;
   
   // services
-  protected IdentityService identityService;
+  protected transient IdentityService identityService;
   protected I18nManager i18nManager;
   protected ViewManager viewManager;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/DescriptionComponent.java
Patch:
@@ -39,7 +39,7 @@ public class DescriptionComponent extends CssLayout {
   
   protected Task task;
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   protected Label descriptionLabel;
   protected VerticalLayout editLayout;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/DueDateComponent.java
Patch:
@@ -39,7 +39,7 @@ public class DueDateComponent extends CssLayout {
   private static final long serialVersionUID = 1L;
   protected Task task;
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   protected Label dueDateLabel;
   protected DateField dueDateField;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/HistoricTaskDetailPanel.java
Patch:
@@ -61,9 +61,9 @@ public class HistoricTaskDetailPanel extends DetailPanel {
   protected HistoricTaskInstance historicTask;
   
   // Services
-  protected HistoryService historyService;
-  protected TaskService taskService;
-  protected ViewManager viewManager;
+  protected transient HistoryService historyService;
+  protected transient TaskService taskService;
+  protected transient ViewManager viewManager;
   protected I18nManager i18nManager;
   protected NotificationManager notificationManager;
   protected AttachmentRendererManager attachmentRendererManager;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/NewCasePopupWindow.java
Patch:
@@ -50,7 +50,7 @@ public class NewCasePopupWindow extends PopupWindow {
 
   private static final long serialVersionUID = 1L;
   
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   protected I18nManager i18nManager;
   
 //  protected HorizontalLayout layout;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/PriorityComponent.java
Patch:
@@ -32,7 +32,7 @@ public class PriorityComponent extends CssLayout {
   
   protected Task task;
   protected I18nManager i18nManager;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   protected PriorityLabel priorityLabel;
   protected PriorityComboBox priorityComboBox;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/SubTaskComponent.java
Patch:
@@ -56,8 +56,8 @@ public class SubTaskComponent extends CustomComponent {
   private static final long serialVersionUID = 1L;
   
   protected I18nManager i18nManager;
-  protected TaskService taskService;
-  protected HistoryService historyService;
+  protected transient TaskService taskService;
+  protected transient HistoryService historyService;
   
   protected Task parentTask;
   protected TaskDetailPanel taskDetailPanel;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/TaskDetailPanel.java
Patch:
@@ -64,9 +64,9 @@ public class TaskDetailPanel extends DetailPanel {
   protected Task task;
   
   // Services
-  protected TaskService taskService;
-  protected FormService formService;
-  protected RepositoryService repositoryService;
+  protected transient TaskService taskService;
+  protected transient FormService formService;
+  protected transient RepositoryService repositoryService;
   protected ViewManager viewManager;
   protected I18nManager i18nManager;
   protected NotificationManager notificationManager;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/TaskEventsPanel.java
Patch:
@@ -57,8 +57,8 @@ public class TaskEventsPanel extends Panel {
   
   private static final long serialVersionUID = 1L;
   
-  protected IdentityService identityService;
-  protected TaskService taskService; 
+  protected transient IdentityService identityService;
+  protected transient TaskService taskService; 
   protected I18nManager i18nManager;
   protected ViewManager viewManager;
   protected TaskEventTextResolver taskEventTextResolver;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/TaskInvolvedPeopleComponent.java
Patch:
@@ -52,9 +52,9 @@ public class TaskInvolvedPeopleComponent extends CustomComponent {
 
   private static final long serialVersionUID = 1L;
   
+  protected transient TaskService taskService;
   protected I18nManager i18nManager;
   protected ViewManager viewManager;
-  protected TaskService taskService;
   
   protected Task task;
   protected TaskDetailPanel taskDetailPanel;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/TaskPage.java
Patch:
@@ -45,8 +45,9 @@ public abstract class TaskPage extends AbstractTablePage {
   
   private static final long serialVersionUID = 1L;
 
+  protected transient TaskService taskService;
+
   protected String taskId;
-  protected TaskService taskService;
   protected Table taskTable;
   protected LazyLoadingContainer taskListContainer;
   protected LazyLoadingQuery lazyLoadingQuery;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/TaskRelatedContentComponent.java
Patch:
@@ -60,7 +60,7 @@ public class TaskRelatedContentComponent extends VerticalLayout implements Relat
 
   private static final long serialVersionUID = 1L;
   
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   protected I18nManager i18nManager;
   protected AttachmentRendererManager attachmentRendererManager;
   

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/UserDetailsComponent.java
Patch:
@@ -45,7 +45,7 @@ public class UserDetailsComponent extends HorizontalLayout {
     
     private static final long serialVersionUID = 1L;
     
-    protected IdentityService identityService;
+    protected transient IdentityService identityService;
     protected ViewManager viewManager;
     
     protected User user;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/data/AbstractTaskListQuery.java
Patch:
@@ -31,7 +31,7 @@
 public abstract class AbstractTaskListQuery extends AbstractLazyLoadingQuery {
   
   protected String userId;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   public AbstractTaskListQuery() {
     this.userId = ExplorerApp.get().getLoggedInUser().getId();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/data/ArchivedListQuery.java
Patch:
@@ -34,7 +34,7 @@
 public class ArchivedListQuery extends AbstractLazyLoadingQuery {
 
   protected String userId;
-  protected HistoryService historyService;
+  protected transient HistoryService historyService;
   
   public ArchivedListQuery() {
     this.userId = ExplorerApp.get().getLoggedInUser().getId();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/data/QueuedListQuery.java
Patch:
@@ -23,7 +23,7 @@
 public class QueuedListQuery extends AbstractTaskListQuery {
   
   protected String groupId;
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   
   public QueuedListQuery(String groupId) {
     this.groupId = groupId;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/task/listener/ClaimTaskClickListener.java
Patch:
@@ -36,7 +36,7 @@ public class ClaimTaskClickListener implements ClickListener {
   
   protected String taskId;
 
-  protected TaskService taskService;
+  protected transient TaskService taskService;
   protected I18nManager i18nManager;
   protected ViewManager viewManager;
   protected NotificationManager notificationManager;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/util/InputStreamStreamSource.java
Patch:
@@ -27,7 +27,7 @@ public class InputStreamStreamSource implements StreamSource {
 
   private static final long serialVersionUID = -860417435916179985L;
   
-  protected InputStream inputStream;
+  protected transient InputStream inputStream;
   
   public InputStreamStreamSource(InputStream inputStream) {
     this.inputStream = inputStream;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/variable/VariableRendererConfigurer.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.explorer.ui.variable;
 
+import java.io.Serializable;
+
 import org.springframework.beans.factory.InitializingBean;
 
 /**
@@ -21,7 +23,7 @@
  * 
  * @author Frederik Heremans
  */
-public class VariableRendererConfigurer implements InitializingBean {
+public class VariableRendererConfigurer implements InitializingBean, Serializable {
 
   private VariableRenderer renderer;
   private VariableRendererManager variableRendererManager;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/variable/VariableRendererManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.ui.variable;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -22,7 +23,7 @@
  * 
  * @author Frederik Heremans
  */
-public class VariableRendererManager {
+public class VariableRendererManager implements Serializable {
 
   private Map<Class<?>, VariableRenderer> renderers = new HashMap<Class<?>, VariableRenderer>();
   

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/listener/WorkflowDefinitionConversionListener.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti.workflow.simple.converter.listener;
 
+import java.io.Serializable;
+
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversionFactory;
 import org.activiti.workflow.simple.converter.step.StepDefinitionConverter;
@@ -26,7 +28,7 @@
  * 
  * @author Joram Barrez
  */
-public interface WorkflowDefinitionConversionListener {
+public interface WorkflowDefinitionConversionListener extends Serializable {
 
   /**
    * Called when the {@link WorkflowDefinitionConversion} is initialized,

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/StepDefinitionConverter.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti.workflow.simple.converter.step;
 
+import java.io.Serializable;
+
 import org.activiti.workflow.simple.converter.WorkflowDefinitionConversion;
 import org.activiti.workflow.simple.definition.StepDefinition;
 
@@ -28,7 +30,7 @@
  * 
  * @author Frederik Heremans
  */
-public interface StepDefinitionConverter {
+public interface StepDefinitionConverter extends Serializable {
 
   /**
    * @return class that this converter is capable of handling.

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/StepDefinition.java
Patch:
@@ -12,11 +12,13 @@
  */
 package org.activiti.workflow.simple.definition;
 
+import java.io.Serializable;
+
 /**
  * Marker interface for all 'patterns' that are known by the simple workflow API.
  * 
  * @author Joram Barrez
  */
-public interface StepDefinition {
+public interface StepDefinition extends Serializable {
   
 }

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/definition/StepDefinitionContainer.java
Patch:
@@ -12,13 +12,14 @@
  */
 package org.activiti.workflow.simple.definition;
 
+import java.io.Serializable;
 import java.util.List;
 
 
 /**
  * @author Joram Barrez
  */
-public interface StepDefinitionContainer<T> {
+public interface StepDefinitionContainer<T> extends Serializable {
   
   List<StepDefinition> getSteps();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetBpmnModelCmd.java
Patch:
@@ -17,13 +17,13 @@
 
 import org.activiti.bpmn.converter.BpmnXMLConverter;
 import org.activiti.bpmn.model.BpmnModel;
-import org.activiti.bpmn.util.BytesStreamSource;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.engine.impl.persistence.entity.ResourceEntity;
+import org.activiti.engine.impl.util.io.BytesStreamSource;
 import org.activiti.engine.repository.Deployment;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/io/BytesStreamSource.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.bpmn.util;
+package org.activiti.engine.impl.util.io;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/io/StringStreamSource.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.bpmn.util;
+package org.activiti.engine.impl.util.io;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.activiti.engine.query.NativeQuery;
 import org.activiti.engine.task.Attachment;
 import org.activiti.engine.task.Comment;
 import org.activiti.engine.task.DelegationState;
@@ -280,7 +281,7 @@ public interface TaskService {
   TaskQuery createTaskQuery();
   
   /**
-   * Returns a new 
+   * Returns a new {@link NativeQuery} for tasks.
    */
   NativeTaskQuery createNativeTaskQuery();
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -899,8 +899,8 @@ public void testNativeQuery() {
     assertEquals(144, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM ACT_RU_TASK T1, ACT_RU_TASK T2").count());
     
     // join task and variable instances
-    assertEquals(1, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").count());    
-    List<Task> tasks = taskService.createNativeTaskQuery().sql("SELECT * FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").list();    
+    assertEquals(1, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class) + " T1, " + managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").count());    
+    List<Task> tasks = taskService.createNativeTaskQuery().sql("SELECT * FROM " + managementService.getTableName(Task.class) + " T1, " + managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").list();    
     assertEquals(1, tasks.size());
     assertEquals("gonzoTask", tasks.get(0).getName());    
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/TaskFormHandler.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.engine.impl.form;
 
+import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.form.TaskFormData;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
 
@@ -23,4 +24,6 @@
 public interface TaskFormHandler extends FormHandler {
 
   TaskFormData createTaskForm(TaskEntity task);
+  
+  Expression getFormKey();
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/form/FormServiceTest.java
Patch:
@@ -184,6 +184,8 @@ public void testFormPropertyHandling() {
     Address address = new Address();
     address.setStreet("broadway");
     runtimeService.setVariable(processInstanceId, "address", address);
+    
+    runtimeService.signal(runtimeService.createExecutionQuery().processInstanceId(processInstanceId).singleResult().getId());
 
     String taskId = taskService.createTaskQuery().singleResult().getId();
     TaskFormData taskFormData = formService.getTaskFormData(taskId);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricTaskInstanceTest.java
Patch:
@@ -168,7 +168,7 @@ public void testHistoricTaskInstanceQuery() throws Exception {
     // Form key
     HistoricTaskInstance historicTask = historyService.createHistoricTaskInstanceQuery()
         .processInstanceId(finishedInstance.getId()).singleResult();
-    assertEquals("formKeyTest", historicTask.getFormKey());
+    assertEquals("testFormKey", historicTask.getFormKey());
     
     // Assignee
     assertEquals(1, historyService.createHistoricTaskInstanceQuery().taskAssignee("kermit").count());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -132,6 +132,9 @@ protected int resolveNrOfInstances(ActivityExecution execution) {
       nrOfInstances = ((Collection) obj).size();
     } else if (collectionVariable != null) {
       Object obj = execution.getVariable(collectionVariable);
+      if (obj == null) {
+        throw new ActivitiIllegalArgumentException("Variable " + collectionVariable + " is not found");
+      }
       if (!(obj instanceof Collection)) {
         throw new ActivitiIllegalArgumentException("Variable " + collectionVariable+"' is not a Collection");
       }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/DeployInvalidXmlTest.java
Patch:
@@ -26,7 +26,7 @@ public void testDeployNonSchemaConformantXml() {
     try {
       repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/api/repository/nonSchemaConformantXml.bpmn20.xml").deploy().getId();
     } catch (ActivitiException e) {
-      assertTextPresent("Could not validate XML with BPMN 2.0 XSD", e.getMessage());
+      assertTextPresent("Could not validate XML with BPMN 2.0 XSD", e.getCause().getMessage());
     }
     
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -43,9 +43,7 @@ public void testInvalidProcessDefinition() {
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
       fail();
     } catch (ActivitiException e) {
-      assertTextPresent("cvc-complex-type.3.2.2:", e.getCause().getMessage());
-      assertTextPresent("invalidAttribute", e.getCause().getMessage());
-      assertTextPresent("process", e.getCause().getMessage());
+      assertTextPresent("Could not validate XML with BPMN 2.0 XSD", e.getCause().getMessage());
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/io/StringStreamSource.java
Patch:
@@ -12,12 +12,14 @@
  */
 package org.activiti.engine.impl.util.io;
 
+import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class StringStreamSource implements StreamSource {
   
@@ -28,7 +30,7 @@ public StringStreamSource(String string) {
   }
 
   public InputStream getInputStream() {
-    return new ByteArrayInputStream(string.getBytes());
+    return new BufferedInputStream(new ByteArrayInputStream(string.getBytes()));
   }
 
   public String toString() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/io/UrlStreamSource.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.activiti.engine.impl.util.io;
 
+import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 
 
@@ -33,7 +33,7 @@ public UrlStreamSource(URL url) {
 
   public InputStream getInputStream() {
     try {
-      return url.openStream();
+      return new BufferedInputStream(url.openStream());
     } catch (IOException e) {
       throw new ActivitiIllegalArgumentException("couldn't open url '"+url+"'", e);
     }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/identity/GroupSelectionQuery.java
Patch:
@@ -53,7 +53,7 @@ public List<Item> loadItems(int start, int count) {
     
     int nrFound = 0;
     int tries = 0;
-    while (nrFound == 0) { // must stop at some point in time, as otherwise size() would be reached
+    while (nrFound < count && tries < 5) { // must stop at some point in time, as otherwise size() would be reached
       
       List<Group> groups = identityService.createGroupQuery()
         .orderByGroupType().asc()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/FormPropertyHandler.java
Patch:
@@ -81,9 +81,10 @@ public void submitFormProperty(ExecutionEntity execution, Map<String, String> pr
     if (isRequired && !properties.containsKey(id) && defaultExpression == null) {
       throw new ActivitiException("form property '"+id+"' is required");
     }
-    
+    boolean propertyExits = false;
     Object modelValue = null;
     if (properties.containsKey(id)) {
+    	propertyExits = true;
       final String propertyValue = properties.remove(id);
       if (type != null) {
         modelValue = type.convertFormValueToModelValue(propertyValue);
@@ -100,8 +101,7 @@ public void submitFormProperty(ExecutionEntity execution, Map<String, String> pr
         throw new ActivitiException("form property '"+id+"' is required");
       }
     }
-    
-    if (modelValue != null) {
+    if (propertyExits || (modelValue != null)) {
       if (variableName != null) {
         execution.setVariable(variableName, modelValue);
       } else if (variableExpression != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/FormPropertyHandler.java
Patch:
@@ -81,9 +81,10 @@ public void submitFormProperty(ExecutionEntity execution, Map<String, String> pr
     if (isRequired && !properties.containsKey(id) && defaultExpression == null) {
       throw new ActivitiException("form property '"+id+"' is required");
     }
-    
+    boolean propertyExits = false;
     Object modelValue = null;
     if (properties.containsKey(id)) {
+    	propertyExits = true;
       final String propertyValue = properties.remove(id);
       if (type != null) {
         modelValue = type.convertFormValueToModelValue(propertyValue);
@@ -100,8 +101,7 @@ public void submitFormProperty(ExecutionEntity execution, Map<String, String> pr
         throw new ActivitiException("form property '"+id+"' is required");
       }
     }
-    
-    if (modelValue != null) {
+    if (propertyExits || (modelValue != null)) {
       if (variableName != null) {
         execution.setVariable(variableName, modelValue);
       } else if (variableExpression != null) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/constants/BpmnXMLConstants.java
Patch:
@@ -38,6 +38,7 @@ public interface BpmnXMLConstants {
   public static final String ATTRIBUTE_ID = "id";
   public static final String ATTRIBUTE_NAME = "name";
   public static final String ATTRIBUTE_TYPE = "type";
+  public static final String ATTRIBUTE_DEFAULT = "default";
   public static final String ATTRIBUTE_ITEM_REF = "itemRef";
   public static final String ELEMENT_DEFINITIONS = "definitions";
   public static final String ELEMENT_DOCUMENTATION = "documentation";
@@ -75,7 +76,6 @@ public interface BpmnXMLConstants {
   
   public static final String ATTRIBUTE_ACTIVITY_ASYNCHRONOUS = "async";
   public static final String ATTRIBUTE_ACTIVITY_EXCLUSIVE = "exclusive";
-  public static final String ATTRIBUTE_ACTIVITY_DEFAULT = "default";
   public static final String ATTRIBUTE_ACTIVITY_ISFORCOMPENSATION = "isForCompensation";
   
   public static final String ELEMENT_IMPORT = "import";

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/SubProcessParser.java
Patch:
@@ -58,8 +58,8 @@ public void parse(XMLStreamReader xtr, List<SubProcess> activeSubProcessList, Pr
 		
 		subProcess.setAsynchronous(async);
 		subProcess.setNotExclusive(notExclusive);
-    if(StringUtils.isNotEmpty(xtr.getAttributeValue(null, ATTRIBUTE_ACTIVITY_DEFAULT))) {
-      subProcess.setDefaultFlow(xtr.getAttributeValue(null, ATTRIBUTE_ACTIVITY_DEFAULT));
+    if(StringUtils.isNotEmpty(xtr.getAttributeValue(null, ATTRIBUTE_DEFAULT))) {
+      subProcess.setDefaultFlow(xtr.getAttributeValue(null, ATTRIBUTE_DEFAULT));
     }
     
     if(activeSubProcessList.size() > 1) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -65,6 +65,7 @@
 import org.activiti.engine.impl.bpmn.parser.handler.EndEventParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.ErrorEventDefinitionParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.EventBasedGatewayParseHandler;
+import org.activiti.engine.impl.bpmn.parser.handler.EventSubProcessParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.ExclusiveGatewayParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.InclusiveGatewayParseHandler;
 import org.activiti.engine.impl.bpmn.parser.handler.IntermediateCatchEventParseHandler;
@@ -813,6 +814,7 @@ protected List<BpmnParseHandler> getDefaultBpmnParseHandlers() {
     bpmnParserHandlers.add(new SignalEventDefinitionParseHandler());
     bpmnParserHandlers.add(new StartEventParseHandler());
     bpmnParserHandlers.add(new SubProcessParseHandler());
+    bpmnParserHandlers.add(new EventSubProcessParseHandler());
     bpmnParserHandlers.add(new TaskParseHandler());
     bpmnParserHandlers.add(new TimerEventDefinitionParseHandler());
     bpmnParserHandlers.add(new TransactionParseHandler());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/parse/FlowNodeHistoryParseHandler.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.bpmn.model.CallActivity;
 import org.activiti.bpmn.model.EndEvent;
 import org.activiti.bpmn.model.EventGateway;
-import org.activiti.bpmn.model.EventSubProcess;
 import org.activiti.bpmn.model.ExclusiveGateway;
 import org.activiti.bpmn.model.InclusiveGateway;
 import org.activiti.bpmn.model.IntermediateCatchEvent;
@@ -72,7 +71,6 @@ public class FlowNodeHistoryParseHandler implements BpmnParseHandler {
     
     supportedElementClasses.add(CallActivity.class);
     supportedElementClasses.add(SubProcess.class);
-    supportedElementClasses.add(EventSubProcess.class);
   }
   
   public Set<Class< ? extends BaseElement>> getHandledTypes() {

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/impl/event/CdiEventSupportBpmnParseHandler.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.bpmn.model.EndEvent;
 import org.activiti.bpmn.model.ErrorEventDefinition;
 import org.activiti.bpmn.model.EventGateway;
+import org.activiti.bpmn.model.EventSubProcess;
 import org.activiti.bpmn.model.ExclusiveGateway;
 import org.activiti.bpmn.model.InclusiveGateway;
 import org.activiti.bpmn.model.ManualTask;
@@ -70,6 +71,7 @@ public class CdiEventSupportBpmnParseHandler implements BpmnParseHandler {
     supportedTypes.add(UserTask.class);
     supportedTypes.add(EndEvent.class);
     supportedTypes.add(SubProcess.class);
+    supportedTypes.add(EventSubProcess.class);
     supportedTypes.add(CallActivity.class);
     supportedTypes.add(SendTask.class);
     supportedTypes.add(ReceiveTask.class);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/parse/FlowNodeHistoryParseHandler.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.bpmn.model.CallActivity;
 import org.activiti.bpmn.model.EndEvent;
 import org.activiti.bpmn.model.EventGateway;
+import org.activiti.bpmn.model.EventSubProcess;
 import org.activiti.bpmn.model.ExclusiveGateway;
 import org.activiti.bpmn.model.InclusiveGateway;
 import org.activiti.bpmn.model.IntermediateCatchEvent;
@@ -71,6 +72,7 @@ public class FlowNodeHistoryParseHandler implements BpmnParseHandler {
     
     supportedElementClasses.add(CallActivity.class);
     supportedElementClasses.add(SubProcess.class);
+    supportedElementClasses.add(EventSubProcess.class);
   }
   
   public Set<Class< ? extends BaseElement>> getHandledTypes() {

File: modules/activiti-engine/src/test/java/org/activiti/standalone/parsing/BPMNParseHandlerTest.java
Patch:
@@ -20,9 +20,9 @@
  * @author Frederik Heremans
  * @author Joram Barrez
  */
-public class BPMNParseListenerTest extends ResourceActivitiTestCase {
+public class BPMNParseHandlerTest extends ResourceActivitiTestCase {
   
-  public BPMNParseListenerTest() {
+  public BPMNParseHandlerTest() {
     super("org/activiti/standalone/parsing/bpmn.parse.listener.activiti.cfg.xml");
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -103,6 +103,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("mssql", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
     
     TypeConverterFactory.getInstance().register(new ActivitiDb2TypeConverter());
+    TypeConverterFactory.getInstance().register(new ActivitiH2TypeConverter());
     TypeConverterFactory.getInstance().register(new ActivitiMySQLTypeConverter());
     TypeConverterFactory.getInstance().register(new ActivitiMSSQLTypeConverter());
     TypeConverterFactory.getInstance().register(new ActivitiOracleTypeConverter());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -103,6 +103,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("mssql", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
     
     TypeConverterFactory.getInstance().register(new ActivitiDb2TypeConverter());
+    TypeConverterFactory.getInstance().register(new ActivitiMySQLTypeConverter());
     TypeConverterFactory.getInstance().register(new ActivitiOracleTypeConverter());
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -102,6 +102,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificOrderByStatements.put("mssql", "");
     addDatabaseSpecificStatement("mssql", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
     
+    TypeConverterFactory.getInstance().register(new ActivitiDb2TypeConverter());
     TypeConverterFactory.getInstance().register(new ActivitiOracleTypeConverter());
   }
   

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/SecuredResource.java
Patch:
@@ -26,6 +26,7 @@
 
 /**
  * @author Tijs Rademakers
+ * @author Frederik Heremans
  */
 public class SecuredResource extends ServerResource {
 
@@ -92,5 +93,4 @@ protected Map<String, Object> retrieveVariables(JsonNode jsonNode) {
     }
     return variables;
   }
-
 }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupCreateResource.java
Patch:
@@ -13,13 +13,14 @@
 
 package org.activiti.rest.api.identity;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.IdentityService;
 import org.activiti.engine.identity.Group;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
+import org.restlet.data.Status;
 import org.restlet.resource.Put;
+import org.restlet.resource.ResourceException;
 
 /**
  * @author Ernesto Revilla
@@ -48,7 +49,7 @@ public StateResponse createGroup(GroupInfo groupInfo) {
       }
       identityService.saveGroup(group);
     } else {
-      throw new ActivitiException("group id must be unique");
+      throw new ResourceException(Status.CLIENT_ERROR_CONFLICT, "group id must be unique");
     }
     return new StateResponse().setSuccess(true);
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupResource.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.rest.api.identity;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.Group;
 import org.activiti.rest.api.ActivitiUtil;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupUsersResource.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.IdentityService;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserCreateResource.java
Patch:
@@ -13,13 +13,14 @@
 
 package org.activiti.rest.api.identity;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.IdentityService;
 import org.activiti.engine.identity.User;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
+import org.restlet.data.Status;
 import org.restlet.resource.Put;
+import org.restlet.resource.ResourceException;
 
 /**
  * @author Tijs Rademakers
@@ -43,7 +44,7 @@ public StateResponse createUser(UserInfoWithPassword userInfo){
        user.setEmail(userInfo.getEmail());
        identityService.saveUser(user);
     } else  {
-      throw new ActivitiException("user id must be unique");
+      throw new ResourceException(Status.CLIENT_ERROR_CONFLICT, "user id must be unique");
     }
     return new StateResponse().setSuccess(true);
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserGroupsResource.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.IdentityService;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserPictureResource.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.rest.api.identity;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.Picture;
 import org.activiti.rest.api.ActivitiUtil;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserResource.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.rest.api.identity;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
 import org.activiti.rest.api.ActivitiUtil;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserSearchResource.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
 import org.activiti.rest.api.ActivitiUtil;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/management/TableResource.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.rest.api.management;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.management.TableMetaData;
 import org.activiti.rest.api.ActivitiUtil;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionDiagramResource.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.InputStream;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.RepositoryService;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceResource.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.history.HistoricDetail;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceSignalExecutionResource.java
Patch:
@@ -71,6 +71,9 @@ public ObjectNode completeReceiveTask(Representation entity) {
 			responseJSON.put("success", true);
 			return responseJSON;
 		} catch (Exception e) {
+		  if(e instanceof ActivitiException) {
+		    throw (ActivitiException) e;
+		  }
 			throw new ActivitiException("Failed to signal receive task for process instance id " + processInstanceId, e);
 		}
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceTaskResource.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.TaskQueryProperty;
 import org.activiti.engine.query.QueryProperty;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/StartProcessInstanceResource.java
Patch:
@@ -63,6 +63,9 @@ public StartProcessInstanceResponse startProcessInstance(Representation entity)
       return response;
       
     } catch (Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException("Failed to retrieve the process definition parameters", e);
     }
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentArtifactResource.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.InputStream;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentArtifactsResource.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.rest.api.ActivitiUtil;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentUploadResource.java
Patch:
@@ -62,6 +62,9 @@ public DeploymentResponse uploadDeployment(Representation entity) {
       return new DeploymentResponse(deployment);
       
     } catch (Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException(e.getMessage(), e);
     }
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentsDeleteResource.java
Patch:
@@ -49,6 +49,9 @@ public ObjectNode deleteDeployments(Representation entity) {
       successNode.put("success", true);
       return successNode;
     } catch(Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException("Failed to delete deployments", e);
     }
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskAddResource.java
Patch:
@@ -85,6 +85,9 @@ public TaskResponse addTask(Representation entity) {
       return response;
       
     } catch (Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException("Failed to add new task", e);
     }
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskAttachmentAddResource.java
Patch:
@@ -55,6 +55,9 @@ public AttachmentResponse addAttachment(Representation entity) {
       return new AttachmentResponse(attachment);
       
     } catch(Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException("Unable to add new attachment to task " + taskId);
     }
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskAttachmentResource.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.InputStream;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.task.Attachment;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskFormResource.java
Patch:
@@ -19,8 +19,10 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
+import org.restlet.data.Status;
 import org.restlet.representation.InputRepresentation;
 import org.restlet.resource.Get;
+import org.restlet.resource.ResourceException;
 
 /**
  * @author Tijs Rademakers
@@ -48,7 +50,7 @@ else if (form != null && form instanceof InputStream) {
       throw new ActivitiException("The form for task '" + taskId + "' cannot be rendered using the rest api.");
     
     } else {
-      throw new ActivitiException("There is no form for task '" + taskId + "'.");
+      throw new ResourceException(Status.CLIENT_ERROR_NOT_FOUND, "There is no form for task '" + taskId + "'.");
     }
   }
 }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskResource.java
Patch:
@@ -137,6 +137,9 @@ public TaskResponse updateTask(Representation entity) {
       return response;
       
     } catch (Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException("Failed to update task " + taskId, e);
     }
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskUrlAddResource.java
Patch:
@@ -62,6 +62,9 @@ public AttachmentResponse addUrl(Representation entity) {
       return new AttachmentResponse(attachment);
       
     } catch(Exception e) {
+      if(e instanceof ActivitiException) {
+        throw (ActivitiException) e;
+      }
       throw new ActivitiException("Unable to add new attachment to task " + taskId);
     }
   }

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/process/SignalEventSubscriptionResourceTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.codehaus.jackson.JsonNode;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.node.ObjectNode;
+import org.restlet.data.Status;
 import org.restlet.representation.Representation;
 import org.restlet.resource.ClientResource;
 
@@ -31,7 +32,7 @@ public void testSignalEvent() throws Exception {
     instanceList = runtimeService.createProcessInstanceQuery().list();
     assertEquals(0, instanceList.size());
   }
-  
+    
   @Deployment
   public void testSignalEventWithVariables() throws Exception {
     ProcessInstance instance = runtimeService.startProcessInstanceByKey("signalEvent");

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -25,6 +25,7 @@
 import org.activiti.cdi.annotation.BusinessProcessScoped;
 import org.activiti.cdi.impl.context.ContextAssociationManager;
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.TaskService;
@@ -204,7 +205,7 @@ public ProcessInstance startProcessByName(String string) {
     
     ProcessDefinition definition = processEngine.getRepositoryService().createProcessDefinitionQuery().processDefinitionName(string).singleResult();
     if (definition == null) {
-      throw new ActivitiException("No process definition found for name: " + string);
+      throw new ActivitiObjectNotFoundException("No process definition found for name: " + string, ProcessDefinition.class);
     }
     ProcessInstance instance = processEngine.getRuntimeService().startProcessInstanceById(definition.getId(), getAndClearCachedVariables());
     setExecution(instance);
@@ -220,7 +221,7 @@ public ProcessInstance startProcessByName(String string, Map<String, Object> var
     
     ProcessDefinition definition = processEngine.getRepositoryService().createProcessDefinitionQuery().processDefinitionName(string).singleResult();
     if (definition == null) {
-      throw new ActivitiException("No process definition found for name: " + string);
+      throw new ActivitiObjectNotFoundException("No process definition found for name: " + string, ProcessDefinition.class);
     }
     Map<String, Object> cachedVariables = getAndClearCachedVariables();
     cachedVariables.putAll(variables);

File: modules/activiti-engine/src/main/java/org/activiti/engine/IdentityService.java
Patch:
@@ -111,12 +111,12 @@ public interface IdentityService {
   void setAuthenticatedUserId(String authenticatedUserId);
   
   /** Sets the picture for a given user.
-   * @throws ActivitiException if the user doesn't exist.
+   * @throws ActivitiObjectNotFoundException if the user doesn't exist.
    * @param picture can be null to delete the picture. */
   void setUserPicture(String userId, Picture picture);
 
   /** Retrieves the picture for a given user.
-   * @throws ActivitiException if the user doesn't exist.
+   * @throws ActivitiObjectNotFoundException if the user doesn't exist.
    * @returns null if the user doesn't have a picture. */
   Picture getUserPicture(String userId);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/ManagementService.java
Patch:
@@ -70,14 +70,14 @@ public interface ManagementService {
    * is in suspended state.
    * 
    * @param jobId id of the job to execute, cannot be null.
-   * @throws ActivitiException when there is no job with the given id. 
+   * @throws ActivitiObjectNotFoundException when there is no job with the given id. 
    */
   void executeJob(String jobId);
   
   /** 
    * Delete the job with the provided id.
    * @param jobId id of the job to execute, cannot be null.
-   * @throws ActivitiException when there is no job with the given id. 
+   * @throws ActivitiObjectNotFoundException when there is no job with the given id. 
    */
   void deleteJob(String jobId);
 
@@ -97,7 +97,7 @@ public interface ManagementService {
    * with the given id was last executed. Returns null when the job has no
    * exception stacktrace.
    * @param jobId id of the job, cannot be null.
-   * @throws ActivitiException when no job exists with the given id.
+   * @throws ActivitiObjectNotFoundException when no job exists with the given id.
    */
   String getJobExceptionStacktrace(String jobId);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/BpmnError.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.engine.delegate;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.bpmn.parser.Error;
 
 
@@ -48,10 +49,10 @@ public BpmnError(String errorCode, String message) {
 
   protected void setErrorCode(String errorCode) {
     if (errorCode == null) {
-      throw new ActivitiException("Error Code must not be null.");
+      throw new ActivitiIllegalArgumentException("Error Code must not be null.");
     }
     if (errorCode.length() < 1) {
-      throw new ActivitiException("Error Code must not be empty.");
+      throw new ActivitiIllegalArgumentException("Error Code must not be empty.");
     }
     this.errorCode = errorCode;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.ListQueryParameterObject;
 import org.activiti.engine.impl.interceptor.Command;
@@ -83,7 +84,7 @@ public T desc() {
   @SuppressWarnings("unchecked")
   public T direction(Direction direction) {
     if (orderProperty==null) {
-      throw new ActivitiException("You should call any of the orderBy methods first before specifying a direction");
+      throw new ActivitiIllegalArgumentException("You should call any of the orderBy methods first before specifying a direction");
     }
     addOrder(orderProperty.getName(), direction.getName());
     orderProperty = null;
@@ -92,7 +93,7 @@ public T direction(Direction direction) {
   
   protected void checkQueryOk() {
     if (orderProperty != null) {
-      throw new ActivitiException("Invalid query: call asc() or desc() after using orderByXX()");
+      throw new ActivitiIllegalArgumentException("Invalid query: call asc() or desc() after using orderByXX()");
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Set;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.history.HistoricProcessInstanceQuery;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -66,10 +67,10 @@ public HistoricProcessInstanceQueryImpl processInstanceId(String processInstance
 
   public HistoricProcessInstanceQuery processInstanceIds(Set<String> processInstanceIds) {
     if (processInstanceIds == null) {
-      throw new ActivitiException("Set of process instance ids is null");
+      throw new ActivitiIllegalArgumentException("Set of process instance ids is null");
     }
     if (processInstanceIds.isEmpty()) {
-      throw new ActivitiException("Set of process instance ids is empty");
+      throw new ActivitiIllegalArgumentException("Set of process instance ids is empty");
     }
     this.processInstanceIds = processInstanceIds;
     return this;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/QueryVariableValue.java
Patch:
@@ -16,6 +16,7 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.activiti.engine.impl.variable.ByteArrayType;
 import org.activiti.engine.impl.variable.JPAEntityVariableType;
@@ -48,9 +49,9 @@ public void initialize(VariableTypes types) {
     if(variableInstanceEntity == null) {
       VariableType type = types.findVariableType(value);
       if(type instanceof ByteArrayType) {
-        throw new ActivitiException("Variables of type ByteArray cannot be used to query");
+        throw new ActivitiIllegalArgumentException("Variables of type ByteArray cannot be used to query");
       } else if(type instanceof JPAEntityVariableType && operator != QueryOperator.EQUALS) {
-        throw new ActivitiException("JPA entity variables can only be used in 'variableValueEquals'");
+        throw new ActivitiIllegalArgumentException("JPA entity variables can only be used in 'variableValueEquals'");
       } else {
         // Type implementation determines which fields are set on the entity
         variableInstanceEntity = VariableInstanceEntity.create(name, type, value);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.form.FormData;
 import org.activiti.engine.impl.cmd.ActivateProcessInstanceCmd;
@@ -121,7 +122,7 @@ public Object getVariableLocal(String executionId, String variableName) {
   
   public void setVariable(String executionId, String variableName, Object value) {
     if(variableName == null) {
-      throw new ActivitiException("variableName is null");
+      throw new ActivitiIllegalArgumentException("variableName is null");
     }
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put(variableName, value);
@@ -130,7 +131,7 @@ public void setVariable(String executionId, String variableName, Object value) {
   
   public void setVariableLocal(String executionId, String variableName, Object value) {
     if(variableName == null) {
-      throw new ActivitiException("variableName is null");
+      throw new ActivitiIllegalArgumentException("variableName is null");
     }
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put(variableName, value);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.TaskService;
 import org.activiti.engine.impl.cmd.AddCommentCmd;
 import org.activiti.engine.impl.cmd.AddIdentityLinkCmd;
@@ -212,7 +213,7 @@ public Object getVariableLocal(String executionId, String variableName) {
   
   public void setVariable(String executionId, String variableName, Object value) {
     if(variableName == null) {
-      throw new ActivitiException("variableName is null");
+      throw new ActivitiIllegalArgumentException("variableName is null");
     }
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put(variableName, value);
@@ -221,7 +222,7 @@ public void setVariable(String executionId, String variableName, Object value) {
   
   public void setVariableLocal(String executionId, String variableName, Object value) {
     if(variableName == null) {
-      throw new ActivitiException("variableName is null");
+      throw new ActivitiIllegalArgumentException("variableName is null");
     }
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put(variableName, value);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.engine.impl.bpmn.behavior;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -75,7 +76,7 @@ protected Email createEmail(String text, String html) {
     } else if (text != null) {
       return createTextOnlyEmail(text);
     } else {
-      throw new ActivitiException("'html' or 'text' is required to be defined when using the mail activity");
+      throw new ActivitiIllegalArgumentException("'html' or 'text' is required to be defined when using the mail activity");
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
@@ -38,7 +38,7 @@ public ParallelMultiInstanceBehavior(ActivityImpl activity, AbstractBpmnActivity
    protected void createInstances(ActivityExecution execution) throws Exception {
     int nrOfInstances = resolveNrOfInstances(execution);
     if (nrOfInstances <= 0) {
-      throw new ActivitiException("Invalid number of instances: must be positive integer value" 
+      throw new ActivitiIllegalArgumentException("Invalid number of instances: must be positive integer value" 
               + ", but was " + nrOfInstances);
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -13,6 +13,7 @@
 package org.activiti.engine.impl.bpmn.behavior;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
@@ -36,7 +37,7 @@ public SequentialMultiInstanceBehavior(ActivityImpl activity, AbstractBpmnActivi
   protected void createInstances(ActivityExecution execution) throws Exception {
     int nrOfInstances = resolveNrOfInstances(execution);
     if (nrOfInstances <= 0) {
-      throw new ActivitiException("Invalid number of instances: must be positive integer value" 
+      throw new ActivitiIllegalArgumentException("Invalid number of instances: must be positive integer value" 
               + ", but was " + nrOfInstances);
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ServiceTaskDelegateExpressionActivityBehavior.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.JavaDelegate;
@@ -77,7 +77,7 @@ public void execute(ActivityExecution execution) throws Exception {
         leave(execution);
 
       } else {
-        throw new ActivitiException("Delegate expression " + expression
+        throw new ActivitiIllegalArgumentException("Delegate expression " + expression
                 + " did neither resolve to an implementation of " + ActivityBehavior.class
                 + " nor " + JavaDelegate.class);
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ClassDelegateUtil.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;
 import org.activiti.engine.impl.util.ReflectUtil;
 
@@ -61,11 +62,11 @@ public static void applyFieldDeclaration(FieldDeclaration declaration, Object ta
     } else {
       Field field = ReflectUtil.getField(declaration.getName(), target);
       if(field == null) {
-        throw new ActivitiException("Field definition uses unexisting field '" + declaration.getName() + "' on class " + target.getClass().getName());
+        throw new ActivitiIllegalArgumentException("Field definition uses unexisting field '" + declaration.getName() + "' on class " + target.getClass().getName());
       }
       // Check if the delegate field's type is correct
      if(!fieldTypeCompatible(declaration, field)) {
-       throw new ActivitiException("Incompatible type set on field declaration '" + declaration.getName() 
+       throw new ActivitiIllegalArgumentException("Incompatible type set on field declaration '" + declaration.getName() 
           + "' for class " + target.getClass().getName() 
           + ". Declared value has type " + declaration.getValue().getClass().getName() 
           + ", while expecting " + field.getType().getName());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/listener/DelegateExpressionExecutionListener.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.Expression;
@@ -54,7 +54,7 @@ public void notify(DelegateExecution execution) throws Exception {
         .getDelegateInterceptor()
         .handleInvocation(new JavaDelegateInvocation((JavaDelegate) delegate, execution));
     } else {
-      throw new ActivitiException("Delegate expression " + expression 
+      throw new ActivitiIllegalArgumentException("Delegate expression " + expression 
               + " did not resolve to an implementation of " + ExecutionListener.class 
               + " nor " + JavaDelegate.class);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/listener/DelegateExpressionTaskListener.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.DelegateTask;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.TaskListener;
@@ -52,7 +53,7 @@ public void notify(DelegateTask delegateTask) {
         throw new ActivitiException("Exception while invoking TaskListener: "+e.getMessage(), e);
       }
     } else {
-      throw new ActivitiException("Delegate expression " + expression 
+      throw new ActivitiIllegalArgumentException("Delegate expression " + expression 
               + " did not resolve to an implementation of " + TaskListener.class );
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/EventSubscriptionDeclaration.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;
@@ -82,7 +82,7 @@ public EventSubscriptionEntity prepareEventSubscriptionEntity(ExecutionEntity ex
     }else  if(eventType.equals("signal")) {
       eventSubscriptionEntity = new SignalEventSubscriptionEntity(execution);
     }else {
-      throw new ActivitiException("Found event definition of unknown type: "+eventType);
+      throw new ActivitiIllegalArgumentException("Found event definition of unknown type: "+eventType);
     }
     
     eventSubscriptionEntity.setEventName(eventName);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DefaultBusinessCalendar.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.util.ClockUtil;
 
 
@@ -60,7 +60,7 @@ public Date resolveDuedate(String duedate) {
   protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {
     int spaceIndex = singleUnitQuantity.indexOf(" ");
     if (spaceIndex==-1 || singleUnitQuantity.length() < spaceIndex+1) {
-      throw new ActivitiException("invalid duedate format: "+singleUnitQuantity);
+      throw new ActivitiIllegalArgumentException("invalid duedate format: "+singleUnitQuantity);
     }
     
     String quantityText = singleUnitQuantity.substring(0, spaceIndex);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/calendar/DurationHelper.java
Patch:
@@ -23,7 +23,7 @@
 import javax.xml.datatype.DatatypeFactory;
 import javax.xml.datatype.Duration;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.joda.time.DateTime;
 
@@ -49,7 +49,7 @@ public DurationHelper(String expressionS) throws Exception {
     datatypeFactory = DatatypeFactory.newInstance();
 
     if (expression.size() > 3 || expression.isEmpty()) {
-      throw new ActivitiException("Cannot parse duration");
+      throw new ActivitiIllegalArgumentException("Cannot parse duration");
     }
     if (expression.get(0).startsWith("R")) {
       isRepeat = true;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateGroupCmd.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.Group;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -32,7 +32,7 @@ public class CreateGroupCmd implements Command<Group>, Serializable {
   
   public CreateGroupCmd(String groupId) {
     if(groupId == null) {
-      throw new ActivitiException("groupId is null");
+      throw new ActivitiIllegalArgumentException("groupId is null");
     }
     this.groupId = groupId;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateMembershipCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -36,10 +36,10 @@ public CreateMembershipCmd(String userId, String groupId) {
 
   public Object execute(CommandContext commandContext) {
     if(userId == null) {
-      throw new ActivitiException("userId is null");
+      throw new ActivitiIllegalArgumentException("userId is null");
     }
     if(groupId == null) {
-      throw new ActivitiException("groupId is null");
+      throw new ActivitiIllegalArgumentException("groupId is null");
     }
     commandContext
       .getMembershipEntityManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateUserCmd.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -32,7 +32,7 @@ public class CreateUserCmd implements Command<User>, Serializable {
   
   public CreateUserCmd(String userId) {
     if(userId == null) {
-      throw new ActivitiException("userId is null");
+      throw new ActivitiIllegalArgumentException("userId is null");
     }
     this.userId = userId;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteDeploymentCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -35,7 +35,7 @@ public DeleteDeploymentCmd(String deploymentId, boolean cascade) {
 
   public Void execute(CommandContext commandContext) {
     if(deploymentId == null) {
-      throw new ActivitiException("deploymentId is null");
+      throw new ActivitiIllegalArgumentException("deploymentId is null");
     }
     
     // Remove process definitions from cache:

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteGroupCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -33,7 +33,7 @@ public DeleteGroupCmd(String groupId) {
   
   public Void execute(CommandContext commandContext) {
     if(groupId == null) {
-      throw new ActivitiException("groupId is null");
+      throw new ActivitiIllegalArgumentException("groupId is null");
     }
     commandContext
       .getGroupEntityManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteHistoricTaskInstanceCmd.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -34,7 +34,7 @@ public DeleteHistoricTaskInstanceCmd(String taskId) {
   public Object execute(CommandContext commandContext) {
 
     if (taskId == null) {
-      throw new ActivitiException("taskId is null");
+      throw new ActivitiIllegalArgumentException("taskId is null");
     }
     commandContext
       .getHistoricTaskInstanceEntityManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteMembershipCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -35,10 +35,10 @@ public DeleteMembershipCmd(String userId, String groupId) {
   
   public Void execute(CommandContext commandContext) {
     if(userId == null) {
-      throw new ActivitiException("userId is null");
+      throw new ActivitiIllegalArgumentException("userId is null");
     }
     if(groupId == null) {
-      throw new ActivitiException("groupId is null");
+      throw new ActivitiIllegalArgumentException("groupId is null");
     }
     
     commandContext

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteModelCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -33,7 +33,7 @@ public DeleteModelCmd(String modelId) {
   
   public Void execute(CommandContext commandContext) {
     if(modelId == null) {
-      throw new ActivitiException("modelId is null");
+      throw new ActivitiIllegalArgumentException("modelId is null");
     }
     commandContext.getModelEntityManager().deleteModel(modelId);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteProcessInstanceCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -35,7 +35,7 @@ public DeleteProcessInstanceCmd(String processInstanceId, String deleteReason) {
 
   public Void execute(CommandContext commandContext) { 
     if(processInstanceId == null) {
-      throw new ActivitiException("processInstanceId is null");
+      throw new ActivitiIllegalArgumentException("processInstanceId is null");
     }
     
     commandContext

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteTaskCmd.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.Serializable;
 import java.util.Collection;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -52,7 +52,7 @@ public Void execute(CommandContext commandContext) {
           deleteTask(taskId);
         }   
     } else {
-      throw new ActivitiException("taskId and taskIds are null");
+      throw new ActivitiIllegalArgumentException("taskId and taskIds are null");
     }
     
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteUserCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -33,7 +33,7 @@ public DeleteUserCmd(String userId) {
 
   public Void execute(CommandContext commandContext) {
     if(userId == null) {
-      throw new ActivitiException("userId is null");
+      throw new ActivitiIllegalArgumentException("userId is null");
     }
     commandContext
       .getUserEntityManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.JobNotFoundException;
 import org.activiti.engine.impl.cfg.TransactionState;
 import org.activiti.engine.impl.context.Context;
@@ -45,7 +45,7 @@ public ExecuteJobsCmd(String jobId) {
 
   public Object execute(CommandContext commandContext) {
     if(jobId == null) {
-      throw new ActivitiException("jobId is null");
+      throw new ActivitiIllegalArgumentException("jobId is null");
     }
     
     if (log.isDebugEnabled()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDeploymentProcessDiagramCmd.java
Patch:
@@ -16,7 +16,7 @@
 import java.io.InputStream;
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -40,7 +40,7 @@ public class GetDeploymentProcessDiagramCmd implements Command<InputStream>, Ser
 
   public GetDeploymentProcessDiagramCmd(String processDefinitionId) {
     if (processDefinitionId == null || processDefinitionId.length() < 1) {
-      throw new ActivitiException("The process definition id is mandatory, but '" + processDefinitionId + "' has been provided.");
+      throw new ActivitiIllegalArgumentException("The process definition id is mandatory, but '" + processDefinitionId + "' has been provided.");
     }
     this.processDefinitionId = processDefinitionId;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDeploymentProcessModelCmd.java
Patch:
@@ -16,7 +16,7 @@
 import java.io.InputStream;
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -36,7 +36,7 @@ public class GetDeploymentProcessModelCmd implements Command<InputStream>, Seria
 
   public GetDeploymentProcessModelCmd(String processDefinitionId) {
     if (processDefinitionId == null || processDefinitionId.length() < 1) {
-      throw new ActivitiException("The process definition id is mandatory, but '" + processDefinitionId + "' has been provided.");
+      throw new ActivitiIllegalArgumentException("The process definition id is mandatory, but '" + processDefinitionId + "' has been provided.");
     }
     this.processDefinitionId = processDefinitionId;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDeploymentResourceNamesCmd.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.Serializable;
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -36,7 +36,7 @@ public GetDeploymentResourceNamesCmd(String deploymentId) {
   
   public List execute(CommandContext commandContext) {
     if (deploymentId == null) {
-      throw new ActivitiException("deploymentId is null");
+      throw new ActivitiIllegalArgumentException("deploymentId is null");
     }
     
     return Context

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetFormKeyCmd.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.engine.impl.cmd;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.form.DefaultFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
@@ -45,14 +45,14 @@ public GetFormKeyCmd(String processDefinitionId) {
   public GetFormKeyCmd(String processDefinitionId, String taskDefinitionKey) {
     setProcessDefinitionId(processDefinitionId);
     if (taskDefinitionKey == null || taskDefinitionKey.length() < 1) {
-      throw new ActivitiException("The task definition key is mandatory, but '" + taskDefinitionKey + "' has been provided.");
+      throw new ActivitiIllegalArgumentException("The task definition key is mandatory, but '" + taskDefinitionKey + "' has been provided.");
     }
     this.taskDefinitionKey = taskDefinitionKey;
   }
 
   protected void setProcessDefinitionId(String processDefinitionId) {
     if (processDefinitionId == null || processDefinitionId.length() < 1) {
-      throw new ActivitiException("The process definition id is mandatory, but '" + processDefinitionId + "' has been provided.");
+      throw new ActivitiIllegalArgumentException("The process definition id is mandatory, but '" + processDefinitionId + "' has been provided.");
     }
     this.processDefinitionId = processDefinitionId;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetIdentityLinksForProcessDefinitionCmd.java
Patch:
@@ -16,10 +16,12 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.task.IdentityLink;
 
 
@@ -43,7 +45,7 @@ public List<IdentityLink> execute(CommandContext commandContext) {
         .findLatestProcessDefinitionById(processDefinitionId);
       
     if (processDefinition == null) {
-      throw new ActivitiException("Cannot find process definition with id " + processDefinitionId);
+      throw new ActivitiObjectNotFoundException("Cannot find process definition with id " + processDefinitionId, ProcessDefinition.class);
     }
     
     List<IdentityLink> identityLinks = (List) processDefinition.getIdentityLinks();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetModelEditorSourceCmd.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -33,7 +34,7 @@ public GetModelEditorSourceCmd(String modelId) {
 
   public byte[] execute(CommandContext commandContext) {
     if (modelId == null) {
-      throw new ActivitiException("modelId is null");
+      throw new ActivitiIllegalArgumentException("modelId is null");
     }
     
     byte[] bytes = commandContext

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetModelEditorSourceExtraCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -33,7 +33,7 @@ public GetModelEditorSourceExtraCmd(String modelId) {
 
   public byte[] execute(CommandContext commandContext) {
     if (modelId == null) {
-      throw new ActivitiException("modelId is null");
+      throw new ActivitiIllegalArgumentException("modelId is null");
     }
     
     byte[] bytes = commandContext

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetRenderedStartFormCmd.java
Patch:
@@ -15,13 +15,15 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.form.StartFormData;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.form.FormEngine;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.activiti.engine.repository.ProcessDefinition;
 
 
 /**
@@ -45,7 +47,7 @@ public Object execute(CommandContext commandContext) {
       .getDeploymentManager()
       .findDeployedProcessDefinitionById(processDefinitionId);
     if (processDefinition == null) {
-      throw new ActivitiException("Process Definition '" + processDefinitionId +"' not found");
+      throw new ActivitiObjectNotFoundException("Process Definition '" + processDefinitionId +"' not found", ProcessDefinition.class);
     }
     StartFormHandler startFormHandler = processDefinition.getStartFormHandler();
     if (startFormHandler == null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetRenderedTaskFormCmd.java
Patch:
@@ -16,13 +16,15 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.form.TaskFormData;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.form.FormEngine;
 import org.activiti.engine.impl.form.TaskFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
+import org.activiti.engine.task.Task;
 
 
 /**
@@ -46,7 +48,7 @@ public Object execute(CommandContext commandContext) {
       .getTaskEntityManager()
       .findTaskById(taskId);
     if (task == null) {
-      throw new ActivitiException("Task '" + taskId +"' not found");
+      throw new ActivitiObjectNotFoundException("Task '" + taskId +"' not found", Task.class);
     }
     
     if (task.getTaskDefinition() == null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetStartFormCmd.java
Patch:
@@ -16,12 +16,14 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.form.StartFormData;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.activiti.engine.repository.ProcessDefinition;
 
 
 /**
@@ -42,7 +44,7 @@ public StartFormData execute(CommandContext commandContext) {
       .getDeploymentManager()
       .findDeployedProcessDefinitionById(processDefinitionId);
     if (processDefinition == null) {
-      throw new ActivitiException("No process definition found for id '" + processDefinitionId +"'");
+      throw new ActivitiObjectNotFoundException("No process definition found for id '" + processDefinitionId +"'", ProcessDefinition.class);
     }
     
     StartFormHandler startFormHandler = processDefinition.getStartFormHandler();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTableMetaDataCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.management.TableMetaData;
@@ -34,7 +34,7 @@ public GetTableMetaDataCmd(String tableName) {
   
   public TableMetaData execute(CommandContext commandContext) {
     if(tableName == null) {
-      throw new ActivitiException("tableName is null");
+      throw new ActivitiIllegalArgumentException("tableName is null");
     }
     return commandContext
       .getTableDataManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTableNameCmd.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 
@@ -19,7 +20,7 @@ public GetTableNameCmd(Class< ? > entityClass) {
 
   public String execute(CommandContext commandContext) {
     if(entityClass == null) {
-      throw new ActivitiException("entityClass is null");
+      throw new ActivitiIllegalArgumentException("entityClass is null");
     }
     return commandContext
       .getTableDataManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskFormCmd.java
Patch:
@@ -16,12 +16,14 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.form.TaskFormData;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.form.TaskFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
+import org.activiti.engine.task.Task;
 
 
 /**
@@ -42,7 +44,7 @@ public TaskFormData execute(CommandContext commandContext) {
       .getTaskEntityManager()
       .findTaskById(taskId);
     if (task == null) {
-      throw new ActivitiException("No task found for taskId '" + taskId +"'");
+      throw new ActivitiObjectNotFoundException("No task found for taskId '" + taskId +"'", Task.class);
     }
     
     if(task.getTaskDefinition() != null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/MessageEventReceivedCmd.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.event.MessageEventHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntity;
@@ -43,7 +44,7 @@ public MessageEventReceivedCmd(String messageName, String executionId, Map<Strin
 
   protected Void execute(CommandContext commandContext, ExecutionEntity execution) {
     if(messageName == null) {
-      throw new ActivitiException("messageName cannot be null");
+      throw new ActivitiIllegalArgumentException("messageName cannot be null");
     }
     
     List<EventSubscriptionEntity> eventSubscriptions = commandContext.getEventSubscriptionEntityManager()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/NeedsActiveProcessDefinitionCmd.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -41,7 +42,7 @@ public T execute(CommandContext commandContext) {
             .findDeployedProcessDefinitionById(processDefinitionId);
 
     if (processDefinition == null) {
-      throw new ActivitiException("No process definition found for id = '" + processDefinitionId + "'");
+      throw new ActivitiObjectNotFoundException("No process definition found for id = '" + processDefinitionId + "'", ProcessDefinition.class);
     }
     
     if (processDefinition.isSuspended()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.GroupEntity;
@@ -34,7 +34,7 @@ public SaveGroupCmd(GroupEntity group) {
   
   public Void execute(CommandContext commandContext) {
     if(group == null) {
-      throw new ActivitiException("group is null");
+      throw new ActivitiIllegalArgumentException("group is null");
     }
     if (group.getRevision()==0) {
       commandContext

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveModelCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ModelEntity;
@@ -34,7 +34,7 @@ public SaveModelCmd(ModelEntity model) {
   
   public Void execute(CommandContext commandContext) {
     if(model == null) {
-      throw new ActivitiException("model is null");
+      throw new ActivitiIllegalArgumentException("model is null");
     }
     if (model.getId() == null) {
       commandContext.getModelEntityManager().insertModel(model);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveTaskCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
@@ -35,7 +35,7 @@ public SaveTaskCmd(Task task) {
 	
 	public Void execute(CommandContext commandContext) {
 	  if(task == null) {
-	    throw new ActivitiException("task is null");
+	    throw new ActivitiIllegalArgumentException("task is null");
 	  }
 	  
     if (task.getRevision()==0) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -35,7 +35,7 @@ public SaveUserCmd(User user) {
   
   public Void execute(CommandContext commandContext) {
     if(user == null) {
-      throw new ActivitiException("user is null");
+      throw new ActivitiIllegalArgumentException("user is null");
     }
     if (user.getRevision()==0) {
       commandContext

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SignalEventReceivedCmd.java
Patch:
@@ -18,10 +18,12 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.SignalEventSubscriptionEntity;
+import org.activiti.engine.runtime.Execution;
 
 
 /**
@@ -52,7 +54,7 @@ public Void execute(CommandContext commandContext) {
       ExecutionEntity execution = commandContext.getExecutionEntityManager().findExecutionById(executionId);
       
       if (execution == null) {
-        throw new ActivitiException("Cannot find execution with id '" + executionId + "'");
+        throw new ActivitiObjectNotFoundException("Cannot find execution with id '" + executionId + "'", Execution.class);
       }
       
       if (execution.isSuspended()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/FixedValue.java
Patch:
@@ -24,6 +24,7 @@
  */
 public class FixedValue implements Expression {
 
+  private static final long serialVersionUID = 1L;
   private Object value;
 
   public FixedValue(Object value) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/BooleanFormType.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.engine.impl.form;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.form.AbstractFormType;
 
 /**
@@ -46,6 +46,6 @@ public String convertModelValueToFormValue(Object modelValue) {
             || boolean.class.isAssignableFrom(modelValue.getClass())) {
       return modelValue.toString();      
     }
-    throw new ActivitiException("Model value is not of type boolean, but of type " + modelValue.getClass().getName());
+    throw new ActivitiIllegalArgumentException("Model value is not of type boolean, but of type " + modelValue.getClass().getName());
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DateFormType.java
Patch:
@@ -18,6 +18,7 @@
 import java.text.SimpleDateFormat;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.form.AbstractFormType;
 import org.apache.commons.lang.StringUtils;
 
@@ -53,7 +54,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
     try {
       return dateFormat.parseObject(propertyValue);
     } catch (ParseException e) {
-      throw new ActivitiException("invalid date value "+propertyValue);
+      throw new ActivitiIllegalArgumentException("invalid date value "+propertyValue);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/EnumFormType.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.form.AbstractFormType;
 
 
@@ -52,7 +52,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
   public String convertModelValueToFormValue(Object modelValue) {
     if(modelValue != null) {
       if(!(modelValue instanceof String)) {
-        throw new ActivitiException("Model value should be a String");
+        throw new ActivitiIllegalArgumentException("Model value should be a String");
       }
       validateValue((String) modelValue);
     }
@@ -62,7 +62,7 @@ public String convertModelValueToFormValue(Object modelValue) {
   protected void validateValue(String value) {
     if(value != null) {
       if(values != null && !values.containsKey(value)) {
-        throw new ActivitiException("Invalid value for enum form property: " + value);
+        throw new ActivitiIllegalArgumentException("Invalid value for enum form property: " + value);
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/FormTypes.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.activiti.bpmn.model.FormProperty;
 import org.activiti.bpmn.model.FormValue;
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.form.AbstractFormType;
 import org.apache.commons.lang.StringUtils;
 
@@ -52,7 +52,7 @@ public AbstractFormType parseFormPropertyType(FormProperty formProperty) {
     } else if (StringUtils.isNotEmpty(formProperty.getType())) {
       formType = formTypes.get(formProperty.getType());
       if (formType == null) {
-        throw new ActivitiException("unknown type '" + formProperty.getType() + "' " + formProperty.getId());
+        throw new ActivitiIllegalArgumentException("unknown type '" + formProperty.getType() + "' " + formProperty.getId());
       }
     }
     return formType;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/JuelFormEngine.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.UnsupportedEncodingException;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.form.FormData;
 import org.activiti.engine.form.StartFormData;
 import org.activiti.engine.form.TaskFormData;
@@ -61,7 +62,7 @@ protected String getFormTemplateString(FormData formInstance, String formKey) {
       .findResourceByDeploymentIdAndResourceName(deploymentId, formKey);
     
     if (resourceStream == null) {
-      throw new ActivitiException("Form with formKey '"+formKey+"' does not exist");
+      throw new ActivitiObjectNotFoundException("Form with formKey '"+formKey+"' does not exist", String.class);
     }
     
     byte[] resourceBytes = resourceStream.getBytes();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryLevel.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.engine.impl.history;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 
 /**
  * Enum that contains all possible history-levels. 
@@ -44,7 +45,7 @@ public static HistoryLevel getHistoryLevelForKey(String key) {
         return level;
       }
     }
-    throw new ActivitiException("Illegal value for history-level: " + key);
+    throw new ActivitiIllegalArgumentException("Illegal value for history-level: " + key);
   }
 
   /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Date;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.calendar.BusinessCalendar;
@@ -105,7 +106,7 @@ public TimerEntity prepareTimerEntity(ExecutionEntity executionEntity) {
     
     if (description==null) {
       // Prevent NPE from happening in the next line
-      throw new ActivitiException("Timer '"+executionEntity.getActivityId()+"' was not configured with a valid duration/time");
+      throw new ActivitiIllegalArgumentException("Timer '"+executionEntity.getActivityId()+"' was not configured with a valid duration/time");
     }
     
     String dueDateString = null;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntityManager.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.AbstractVariableQueryImpl;
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.context.Context;
@@ -57,7 +58,7 @@ public void deleteProcessInstance(String processInstanceId, String deleteReason,
     ExecutionEntity execution = findExecutionById(processInstanceId);
     
     if(execution == null) {
-      throw new ActivitiException("No process instance found for id '" + processInstanceId + "'");
+      throw new ActivitiObjectNotFoundException("No process instance found for id '" + processInstanceId + "'", ProcessInstance.class);
     }
     
     CommandContext commandContext = Context.getCommandContext();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceEntityManager.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.impl.HistoricTaskInstanceQueryImpl;
 import org.activiti.engine.impl.Page;
@@ -59,7 +59,7 @@ public List<HistoricTaskInstance> findHistoricTaskInstancesByQueryCriteria(Histo
   
   public HistoricTaskInstanceEntity findHistoricTaskInstanceById(String taskId) {
     if (taskId == null) {
-      throw new ActivitiException("Invalid historic task id : null");
+      throw new ActivitiIllegalArgumentException("Invalid historic task id : null");
     }
     if (getHistoryManager().isHistoryEnabled()) {
       return (HistoricTaskInstanceEntity) getDbSqlSession().selectOne("selectHistoricTaskInstance", taskId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntityManager.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.JobQueryImpl;
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.cfg.TransactionListener;
@@ -47,7 +47,7 @@ public void send(MessageEntity message) {
   public void schedule(TimerEntity timer) {
     Date duedate = timer.getDuedate();
     if (duedate==null) {
-      throw new ActivitiException("duedate is null");
+      throw new ActivitiIllegalArgumentException("duedate is null");
     }
 
     timer.insert();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -259,8 +259,6 @@ public void setExecution(DelegateExecution execution) {
       this.executionId = null;
       this.processInstanceId = null;
       this.processDefinitionId = null;
-      
-      throw new ActivitiException("huh?");
     }
   }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntityManager.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.TaskQueryImpl;
 import org.activiti.engine.impl.context.Context;
@@ -81,7 +82,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade) {
 
   public TaskEntity findTaskById(String id) {
     if (id == null) {
-      throw new ActivitiException("Invalid task id : null");
+      throw new ActivitiIllegalArgumentException("Invalid task id : null");
     }
     return (TaskEntity) getDbSqlSession().selectById(TaskEntity.class, id);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/rules/RulesHelper.java
Patch:
@@ -14,9 +14,11 @@
 package org.activiti.engine.impl.rules;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.persistence.deploy.DeploymentCache;
 import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
+import org.activiti.engine.repository.Deployment;
 import org.drools.KnowledgeBase;
 
 
@@ -38,7 +40,7 @@ public static KnowledgeBase findKnowledgeBaseByDeploymentId(String deploymentId)
         .getDeploymentEntityManager()
         .findDeploymentById(deploymentId);
       if (deployment==null) {
-        throw new ActivitiException("no deployment with id "+deploymentId);
+        throw new ActivitiObjectNotFoundException("no deployment with id "+deploymentId, Deployment.class);
       }
       Context
         .getProcessEngineConfiguration()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/scripting/VariableScopeResolver.java
Patch:
@@ -13,6 +13,7 @@
 package org.activiti.engine.impl.scripting;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.TaskEntity;
@@ -32,7 +33,7 @@ public class VariableScopeResolver implements Resolver {
   
   public VariableScopeResolver(VariableScope variableScope) {
     if (variableScope==null) {
-      throw new ActivitiException("variableScope cannot be null");
+      throw new ActivitiIllegalArgumentException("variableScope cannot be null");
     }
     if (variableScope instanceof ExecutionEntity) {
       variableScopeKey = "execution";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/CollectionUtil.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 
 /**
  * helper/convience methods for working with collections.
@@ -49,7 +49,7 @@ public static Map<String, Object> singletonMap(String key, Object value) {
   public static Map<String, Object> map(Object...objects) {
     
     if (objects.length % 2 != 0) {
-      throw new ActivitiException("The input should always be even since we expect a list of key-value pairs!");
+      throw new ActivitiIllegalArgumentException("The input should always be even since we expect a list of key-value pairs!");
     }
     
     Map<String, Object> map = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/io/ResourceStreamSource.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.InputStream;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.util.ReflectUtil;
 
 
@@ -43,7 +43,7 @@ public InputStream getInputStream() {
       classLoader.getResourceAsStream(resource);
     }
     if (inputStream==null) {
-      throw new ActivitiException("resource '"+resource+"' doesn't exist");
+      throw new ActivitiIllegalArgumentException("resource '"+resource+"' doesn't exist");
     }
     return inputStream;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/io/UrlStreamSource.java
Patch:
@@ -17,6 +17,7 @@
 import java.net.URL;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 
 
 /**
@@ -34,7 +35,7 @@ public InputStream getInputStream() {
     try {
       return url.openStream();
     } catch (IOException e) {
-      throw new ActivitiException("couldn't open url '"+url+"'", e);
+      throw new ActivitiIllegalArgumentException("couldn't open url '"+url+"'", e);
     }
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/xml/Parse.java
Patch:
@@ -22,6 +22,7 @@
 import javax.xml.parsers.SAXParserFactory;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.util.io.InputStreamSource;
 import org.activiti.engine.impl.util.io.ResourceStreamSource;
 import org.activiti.engine.impl.util.io.StreamSource;
@@ -87,7 +88,7 @@ public Parse sourceUrl(String url) {
     try {
       return sourceUrl(new URL(url));
     } catch (MalformedURLException e) {
-      throw new ActivitiException("malformed url: "+url, e);
+      throw new ActivitiIllegalArgumentException("malformed url: "+url, e);
     }
   }
   
@@ -109,7 +110,7 @@ public Parse sourceString(String string) {
 
   protected void setStreamSource(StreamSource streamSource) {
     if (this.streamSource!=null) {
-      throw new ActivitiException("invalid: multiple sources "+this.streamSource+" and "+streamSource);
+      throw new ActivitiIllegalArgumentException("invalid: multiple sources "+this.streamSource+" and "+streamSource);
     }
     this.streamSource = streamSource;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/EntityManagerSessionFactory.java
Patch:
@@ -15,7 +15,7 @@
 
 import javax.persistence.EntityManagerFactory;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.interceptor.SessionFactory;
 
@@ -30,10 +30,10 @@ public class EntityManagerSessionFactory implements SessionFactory {
 
   public EntityManagerSessionFactory(Object entityManagerFactory, boolean handleTransactions, boolean closeEntityManager) {
     if(entityManagerFactory == null) {
-      throw new ActivitiException("entityManagerFactory is null");
+      throw new ActivitiIllegalArgumentException("entityManagerFactory is null");
     }
     if(!(entityManagerFactory instanceof EntityManagerFactory)) {
-      throw new ActivitiException("EntityManagerFactory must implement 'javax.persistence.EntityManagerFactory'");
+      throw new ActivitiIllegalArgumentException("EntityManagerFactory must implement 'javax.persistence.EntityManagerFactory'");
     }
     
     this.entityManagerFactory = (EntityManagerFactory) entityManagerFactory;

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinitionQuery.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.engine.repository;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.query.Query;
 
 /**
@@ -82,7 +83,7 @@ public interface ProcessDefinitionQuery extends Query<ProcessDefinitionQuery, Pr
    * Can also be used without any other criteria (ie. query.latest().list()), which
    * will then give all the latest versions of all the deployed process definitions.
    * 
-   * @throws ActivitiException if used in combination with  {@link #groupId(string)}, {@link #processDefinitionVersion(int)}
+   * @throws ActivitiIllegalArgumentException if used in combination with  {@link #groupId(string)}, {@link #processDefinitionVersion(int)}
    *                           or {@link #deploymentId(String)}
    */
   ProcessDefinitionQuery latestVersion();

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/TaskQuery.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.query.Query;
 
 /**
@@ -84,7 +85,7 @@ public interface TaskQuery extends Query<TaskQuery, Task>{
   /** 
    * Only select tasks for which the 'candidateGroup' is one of the given groups.
    * 
-   * @throws ActivitiException 
+   * @throws ActivitiIllegalArgumentException 
    *   When query is executed and {@link #taskCandidateGroup(String)} or 
    *     {@link #taskCandidateUser(String)} has been executed on the query instance. 
    *   When passed group list is empty or <code>null</code>. 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/compensate/helper/GetVariablesDelegate.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.engine.test.bpmn.event.compensate.helper;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
 
@@ -28,7 +28,7 @@ public void execute(DelegateExecution execution) throws Exception {
     Integer variable = SetVariablesDelegate.variablesMap.get(nrOfCompletedInstances);
     Object variableLocal = execution.getVariable("variable");
     if(!variableLocal.equals(variable)) {
-      throw new ActivitiException("wrong variable passed in to compensation handler");
+      throw new ActivitiIllegalArgumentException("wrong variable passed in to compensation handler");
     }
   }
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/form/UserFormType.java
Patch:
@@ -13,9 +13,10 @@
 
 package org.activiti.explorer.form;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.ProcessEngines;
 import org.activiti.engine.form.AbstractFormType;
+import org.activiti.engine.identity.User;
 
 
 /**
@@ -42,7 +43,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
       .userId(propertyValue).count();
       
       if(count == 0) {
-        throw new ActivitiException("User " + propertyValue + " does not exist");
+        throw new ActivitiObjectNotFoundException("User " + propertyValue + " does not exist", User.class);
       }
       return propertyValue;
     }

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/form/FormPropertyRendererManager.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.form.FormType;
 
 
@@ -53,7 +54,7 @@ public FormPropertyRenderer getPropertyRendererForType(FormType formType) {
     FormPropertyRenderer renderer = propertyRenderers.get(clazz);
     
     if(renderer == null) {
-      throw new ActivitiException("No property renderer found for type: " + 
+      throw new ActivitiIllegalArgumentException("No property renderer found for type: " + 
         formType.getName() + ", " + formType.getClass());
     }
     return renderer;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/AbstractPaginateList.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.AbstractQuery;
 import org.activiti.engine.query.Query;
 import org.activiti.engine.query.QueryProperty;
@@ -57,7 +57,7 @@ public DataResponse paginateList(Form form, Query query,
     if (sort != null && properties.size() > 0) {
       QueryProperty qp = properties.get(sort);
       if (qp == null) {
-        throw new ActivitiException("Value for param 'sort' is not valid, '" + sort + "' is not a valid property");
+        throw new ActivitiIllegalArgumentException("Value for param 'sort' is not valid, '" + sort + "' is not a valid property");
       }
       ((AbstractQuery) query).orderBy(qp);
       if (order.equals("asc")) {
@@ -67,7 +67,7 @@ else if (order.equals("desc")) {
         query.desc();
       }
       else {
-        throw new ActivitiException("Value for param 'order' is not valid : '" + order + "', must be 'asc' or 'desc'");
+        throw new ActivitiIllegalArgumentException("Value for param 'order' is not valid : '" + order + "', must be 'asc' or 'desc'");
       }
     }
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/RequestUtil.java
Patch:
@@ -16,7 +16,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.restlet.data.Form;
 
 /**
@@ -64,7 +64,7 @@ public static Date getDate(Form form, String name) {
       try {
         value = longDateFormat.parse(input);
       } catch(Exception e) {
-        throw new ActivitiException("Failed to parse date " + input);
+        throw new ActivitiIllegalArgumentException("Failed to parse date " + input);
       }
     }
     return value;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupCreateResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.identity;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.IdentityService;
 import org.activiti.engine.identity.Group;
 import org.activiti.rest.api.ActivitiUtil;
@@ -32,7 +33,7 @@ public StateResponse createGroup(GroupInfo groupInfo) {
 
     IdentityService identityService = ActivitiUtil.getIdentityService();
     if (groupInfo == null || groupInfo.getId() == null) {
-      throw new ActivitiException("No group id supplied");
+      throw new ActivitiIllegalArgumentException("No group id supplied");
     }
     if (groupInfo.getName() == null || groupInfo.getName().equals(""))
       groupInfo.setName(groupInfo.getId());

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.identity;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.Group;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
@@ -33,7 +34,7 @@ public Group getGroup() {
 
     String groupId = (String) getRequest().getAttributes().get("groupId");
     if (groupId == null) {
-      throw new ActivitiException("No groupId provided");
+      throw new ActivitiIllegalArgumentException("No groupId provided");
     }
     Group group = ActivitiUtil.getIdentityService().createGroupQuery()
         .groupId(groupId).singleResult();

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserCreateResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.identity;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.IdentityService;
 import org.activiti.engine.identity.User;
 import org.activiti.rest.api.ActivitiUtil;
@@ -31,7 +32,7 @@ public StateResponse createUser(UserInfoWithPassword userInfo){
     
     IdentityService identityService = ActivitiUtil.getIdentityService();
     if(userInfo == null || userInfo.getId() == null) {
-      throw new ActivitiException("No user id supplied");
+      throw new ActivitiIllegalArgumentException("No user id supplied");
     }
 
     if (identityService.createUserQuery().userId(userInfo.getId()).count() == 0) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserPictureResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.identity;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.Picture;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
@@ -33,7 +34,7 @@ public InputRepresentation getPicture() {
     
     String userId = (String) getRequest().getAttributes().get("userId");
     if(userId == null) {
-      throw new ActivitiException("No userId provided");
+      throw new ActivitiIllegalArgumentException("No userId provided");
     }
     Picture picture = ActivitiUtil.getIdentityService().getUserPicture(userId);
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.identity;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
@@ -30,7 +31,7 @@ public UserInfo getUser() {
     
     String userId = (String) getRequest().getAttributes().get("userId");
     if(userId == null) {
-      throw new ActivitiException("No userId provided");
+      throw new ActivitiIllegalArgumentException("No userId provided");
     }
     User user = ActivitiUtil.getIdentityService().createUserQuery().userId(userId).singleResult();
     UserInfo response = new UserInfo(user);

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserSearchResource.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.identity.User;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.DataResponse;
@@ -38,7 +39,7 @@ public DataResponse searchUsers() {
     
     String searchText = (String) getQuery().getValues("searchText");
     if(searchText == null) {
-      throw new ActivitiException("No searchText provided");
+      throw new ActivitiIllegalArgumentException("No searchText provided");
     }
     searchText = "%" + searchText + "%";
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/management/TableResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.management;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.management.TableMetaData;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
@@ -30,7 +31,7 @@ public TableMetaData getTableMetaData() {
     
     String tableName = (String) getRequest().getAttributes().get("tableName");
     if(tableName == null) {
-      throw new ActivitiException("table name is required");
+      throw new ActivitiIllegalArgumentException("table name is required");
     }
     return ActivitiUtil.getManagementService().getTableMetaData(tableName);
   }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceResource.java
Patch:
@@ -17,11 +17,13 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
 import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.history.HistoricDetail;
 import org.activiti.engine.history.HistoricProcessInstance;
 import org.activiti.engine.history.HistoricTaskInstance;
 import org.activiti.engine.history.HistoricVariableUpdate;
+import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.RequestUtil;
 import org.activiti.rest.api.SecuredResource;
@@ -47,7 +49,7 @@ public ObjectNode getProcessInstance() {
         .singleResult();
     
     if(instance == null) {
-      throw new ActivitiException("Process instance not found for id " + processInstanceId);
+      throw new ActivitiObjectNotFoundException("Process instance not found for id " + processInstanceId, ProcessInstance.class);
     }
     
     ObjectNode responseJSON = new ObjectMapper().createObjectNode();

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceSignalExecutionResource.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.runtime.Execution;
 import org.activiti.rest.api.ActivitiUtil;
@@ -28,7 +29,7 @@ public ObjectNode completeReceiveTask(Representation entity) {
 		String processInstanceId = (String) getRequest().getAttributes().get("processInstanceId");
 
     if (processInstanceId == null) {
-      throw new ActivitiException("No process instance is provided");
+      throw new ActivitiIllegalArgumentException("No process instance is provided");
     }
 		
 		try {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceTaskResource.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.TaskQueryProperty;
 import org.activiti.engine.query.QueryProperty;
 import org.activiti.engine.task.TaskQuery;
@@ -48,7 +49,7 @@ public DataResponse getTasks() {
 		String processInstanceId = (String) getRequest().getAttributes().get("processInstanceId");
 
 		if (processInstanceId == null) {
-			throw new ActivitiException("No process instance id provided");
+			throw new ActivitiIllegalArgumentException("No process instance id provided");
 		}
 
 		TaskQuery taskQuery = ActivitiUtil.getTaskService().createTaskQuery().processInstanceId(processInstanceId);

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/SignalEventSubscriptionResource.java
Patch:
@@ -72,6 +72,9 @@ public ObjectNode signalEventSubscription(Representation entity) {
 			responseJSON.put("success", true);
 			return responseJSON;
 		} catch (Exception e) {
+		  if(e instanceof ActivitiException) {
+		    throw (ActivitiException) e;
+		  }
 			throw new ActivitiException("Failed to signal receive task for process instance id " + processInstanceId, e);
 		}
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentArtifactsResource.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.RequestUtil;
@@ -37,7 +38,7 @@ public ObjectNode getDeploymentArtifacts() {
     String deploymentId = (String) getRequest().getAttributes().get("deploymentId");
     
     if(deploymentId == null) {
-      throw new ActivitiException("No deployment id provided");
+      throw new ActivitiIllegalArgumentException("No deployment id provided");
     }
 
     Deployment deployment = ActivitiUtil.getRepositoryService().createDeploymentQuery().deploymentId(deploymentId).singleResult();

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentUploadResource.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.zip.ZipInputStream;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.repository.DeploymentBuilder;
 import org.activiti.rest.api.ActivitiUtil;
@@ -54,7 +55,7 @@ public DeploymentResponse uploadDeployment(Representation entity) {
       } else if (fileName.toLowerCase().endsWith(".bar") || fileName.toLowerCase().endsWith(".zip")) {
         deploymentBuilder.addZipInputStream(new ZipInputStream(uploadItem.getInputStream()));
       } else {
-        throw new ActivitiException("File must be of type .bpmn20.xml, .bpmn, .bar or .zip");
+        throw new ActivitiIllegalArgumentException("File must be of type .bpmn20.xml, .bpmn, .bar or .zip");
       }
       deploymentBuilder.name(fileName);
       Deployment deployment = deploymentBuilder.deploy();

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TaskUrlAddResource.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.rest.api.task;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.task.Attachment;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
@@ -33,7 +34,7 @@ public AttachmentResponse addUrl(Representation entity) {
     
     String taskId = (String) getRequest().getAttributes().get("taskId");
     if(taskId == null || taskId.length() == 0) {
-      throw new ActivitiException("No taskId provided");
+      throw new ActivitiIllegalArgumentException("No taskId provided");
     }
     
     try {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TasksResource.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.TaskQueryProperty;
 import org.activiti.engine.query.QueryProperty;
 import org.activiti.engine.task.TaskQuery;
@@ -73,7 +73,7 @@ public DataResponse getTasks() {
     } else if (candidateGroupId != null) {
       taskQuery.taskCandidateGroup(candidateGroupId);
     } else {
-      throw new ActivitiException("Tasks must be filtered with 'assignee', 'owner', 'involved', 'candidate' or 'candidate-group'");
+      throw new ActivitiIllegalArgumentException("Tasks must be filtered with 'assignee', 'owner', 'involved', 'candidate' or 'candidate-group'");
     }
     
     if (strPriority != null) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/task/TasksSummaryResource.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.List;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.TaskService;
 import org.activiti.engine.identity.Group;
 import org.activiti.engine.identity.GroupQuery;
@@ -36,7 +36,7 @@ public ObjectNode getTasksSummary() {
     
     String user = getQuery().getValues("user");
     if(user == null) {
-      throw new ActivitiException("No user provided");
+      throw new ActivitiIllegalArgumentException("No user provided");
     }
     
     TaskService ts = ActivitiUtil.getTaskService();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationTransitionDestroyScope.java
Patch:
@@ -76,7 +76,7 @@ public void execute(InterpretableExecution execution) {
             
             // We can't just merge the data of the lastConcurrent into the concurrentRoot.
             // This is because the concurrent root might be in a takeAll-loop.  So the 
-            // concurrent execution is the one that will be receiveing the take
+            // concurrent execution is the one that will be receiving the take
             concurrentRoot.setActivity((ActivityImpl) lastConcurrent.getActivity());
             concurrentRoot.setActive(lastConcurrent.isActive());
             lastConcurrent.setReplacedBy(concurrentRoot);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/AtomicOperationTransitionDestroyScope.java
Patch:
@@ -76,7 +76,7 @@ public void execute(InterpretableExecution execution) {
             
             // We can't just merge the data of the lastConcurrent into the concurrentRoot.
             // This is because the concurrent root might be in a takeAll-loop.  So the 
-            // concurrent execution is the one that will be receiveing the take
+            // concurrent execution is the one that will be receiving the take
             concurrentRoot.setActivity((ActivityImpl) lastConcurrent.getActivity());
             concurrentRoot.setActive(lastConcurrent.isActive());
             lastConcurrent.setReplacedBy(concurrentRoot);

File: modules/activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/CxfWSDLImporter.java
Patch:
@@ -32,6 +32,7 @@
 import org.activiti.engine.impl.util.ReflectUtil;
 import org.apache.cxf.Bus;
 import org.apache.cxf.BusFactory;
+import org.apache.cxf.endpoint.dynamic.DynamicClientFactory;
 import org.apache.cxf.service.model.EndpointInfo;
 import org.apache.cxf.service.model.OperationInfo;
 import org.apache.cxf.service.model.ServiceInfo;
@@ -93,7 +94,8 @@ public void importFrom(String url) {
 
     try {
       Bus bus = BusFactory.getDefaultBus();
-      WSDLManager wsdlManager = bus.getExtension(WSDLManager.class);
+      DynamicClientFactory.newInstance(bus).createClient(url);
+      WSDLManager wsdlManager = bus.getExtension(WSDLManager.class);  
       Definition def = wsdlManager.getDefinition(url);
       WSDLServiceBuilder builder = new WSDLServiceBuilder(bus);
       List<ServiceInfo> services = builder.buildServices(def);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -538,6 +538,9 @@ public void testSetAssignee() {
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
     assertEquals(user.getId(), task.getAssignee());
     
+    // Set assignee to null
+    taskService.setAssignee(task.getId(), null);
+    
     identityService.deleteUser(user.getId());
     taskService.deleteTask(task.getId(), true);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -143,7 +143,7 @@ protected boolean isReachable(PvmActivity srcActivity, PvmActivity targetActivit
      // if source has no outputs, it is the end of the process, and its parent process should be checked.	  
 	if (srcActivity.getOutgoingTransitions().size() == 0) {
 		visitedActivities.add(srcActivity);
-		if (srcActivity.getParent() == null)
+		if (srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity) )
 			return false;
 		srcActivity = (PvmActivity) srcActivity.getParent();
 	}

File: modules/activiti-simple-workflow/src/main/java/org/activiti/workflow/simple/converter/step/BaseStepDefinitionConverter.java
Patch:
@@ -37,7 +37,7 @@ public abstract class BaseStepDefinitionConverter<U extends StepDefinition, T> i
   public void convertStepDefinition(StepDefinition stepDefinition, WorkflowDefinitionConversion conversion) {
     U typedStepDefinition = (U) stepDefinition;
     T processArtifact = createProcessArtifact(typedStepDefinition, conversion);
-    createAdditionalArtifacts(processArtifact);
+    createAdditionalArtifacts(conversion, typedStepDefinition, processArtifact);
   }
   
   /**
@@ -49,7 +49,7 @@ public void convertStepDefinition(StepDefinition stepDefinition, WorkflowDefinit
    * Subclasses should override this method if they want to create additional artifacts
    * for this specific step. The default generated process artifact is passed as parameter.
    */
-  protected void createAdditionalArtifacts(T defaultGeneratedArtifact) {
+  protected void createAdditionalArtifacts(WorkflowDefinitionConversion conversion, U stepDefinition, T defaultGeneratedArtifact) {
   }
 
   /**

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/SendTaskXMLConverter.java
Patch:
@@ -15,8 +15,8 @@
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
 
+import org.activiti.bpmn.converter.export.FieldExtensionExport;
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
-import org.activiti.bpmn.converter.util.FieldExtensionUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.ImplementationType;
@@ -70,7 +70,7 @@ protected void writeAdditionalAttributes(BaseElement element, XMLStreamWriter xt
   @Override
   protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter xtw) throws Exception {
     SendTask sendTask = (SendTask) element;
-    didWriteExtensionStartElement = FieldExtensionUtil.writeFieldExtensions(sendTask.getFieldExtensions(), didWriteExtensionStartElement, xtw);
+    didWriteExtensionStartElement = FieldExtensionExport.writeFieldExtensions(sendTask.getFieldExtensions(), didWriteExtensionStartElement, xtw);
   }
   
   @Override

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ServiceTaskXMLConverter.java
Patch:
@@ -15,8 +15,8 @@
 import javax.xml.stream.XMLStreamReader;
 import javax.xml.stream.XMLStreamWriter;
 
+import org.activiti.bpmn.converter.export.FieldExtensionExport;
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
-import org.activiti.bpmn.converter.util.FieldExtensionUtil;
 import org.activiti.bpmn.model.BaseElement;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.CustomProperty;
@@ -135,7 +135,7 @@ protected void writeExtensionChildElements(BaseElement element, XMLStreamWriter
         xtw.writeEndElement();
       }
     } else {
-      didWriteExtensionStartElement = FieldExtensionUtil.writeFieldExtensions(serviceTask.getFieldExtensions(), didWriteExtensionStartElement, xtw);
+      didWriteExtensionStartElement = FieldExtensionExport.writeFieldExtensions(serviceTask.getFieldExtensions(), didWriteExtensionStartElement, xtw);
     }
   }
   

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/FieldExtensionExport.java
Patch:
@@ -1,14 +1,15 @@
-package org.activiti.bpmn.converter.util;
+package org.activiti.bpmn.converter.export;
 
 import java.util.List;
 
 import javax.xml.stream.XMLStreamWriter;
 
 import org.activiti.bpmn.constants.BpmnXMLConstants;
+import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.FieldExtension;
 import org.apache.commons.lang.StringUtils;
 
-public class FieldExtensionUtil implements BpmnXMLConstants {
+public class FieldExtensionExport implements BpmnXMLConstants {
 
   public static boolean writeFieldExtensions(List<FieldExtension> fieldExtensionList, 
       boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/ProcessExport.java
Patch:
@@ -3,7 +3,6 @@
 import javax.xml.stream.XMLStreamWriter;
 
 import org.activiti.bpmn.constants.BpmnXMLConstants;
-import org.activiti.bpmn.converter.util.ActivitiListenerUtil;
 import org.activiti.bpmn.converter.util.BpmnXMLUtil;
 import org.activiti.bpmn.model.Process;
 import org.apache.commons.lang.StringUtils;
@@ -40,7 +39,7 @@ public static void writeProcess(Process process, XMLStreamWriter xtw) throws Exc
     
     LaneExport.writeLanes(process, xtw);
     
-    boolean wroteListener = ActivitiListenerUtil.writeListeners(process, false, xtw);
+    boolean wroteListener = ActivitiListenerExport.writeListeners(process, false, xtw);
     if (wroteListener) {
       // closing extensions element
       xtw.writeEndElement();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/cache/UserCache.java
Patch:
@@ -10,7 +10,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.activiti.explorer.cache;
 
 import java.util.List;
@@ -26,8 +25,6 @@
  * eg. 'Th' -> Kermit The Frog
  * eg 'be' -> Fozzie Bear
  * 
- * TODO: Should this functionality be moved to the engine?
- * 
  * @author Joram Barrez
  */
 public interface UserCache {

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/SimpleTableEditor.java
Patch:
@@ -181,6 +181,7 @@ protected void initButtons(GridLayout layout) {
 		toolBar.addButton(saveButton);
 		
 		saveButton.addListener(new ClickListener() {
+      private static final long serialVersionUID = 1L;
       public void buttonClick(ClickEvent event) {
         saveBpmnModel();
       }
@@ -227,7 +228,6 @@ public InputStream getStream() {
     imagePanel.setScrollable(true);
     imagePanel.addStyleName(Reindeer.PANEL_LIGHT);
     imagePanel.setWidth(100, UNITS_PERCENTAGE);
-//    imagePanel.setHeight(400, UNITS_PIXELS);
     imagePanel.setHeight("100%");
     mainLayout.addComponent(imagePanel);
     

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/processinstance/ProcessInstanceDetailPanel.java
Patch:
@@ -166,7 +166,7 @@ protected void addProcessImage() {
         imagePanel.setScrollable(true);
         imagePanel.addStyleName(Reindeer.PANEL_LIGHT);
         imagePanel.setWidth(100, UNITS_PERCENTAGE);
-        imagePanel.setHeight(400, UNITS_PIXELS);
+        imagePanel.setHeight(100, UNITS_PERCENTAGE);
         
         HorizontalLayout panelLayoutT = new HorizontalLayout();
         panelLayoutT.setSizeUndefined();

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/ProcessDefinitionInfoComponent.java
Patch:
@@ -140,7 +140,7 @@ protected void initImage() {
       Panel imagePanel = new Panel(); // using panel for scrollbars
       imagePanel.addStyleName(Reindeer.PANEL_LIGHT);
       imagePanel.setWidth(100, UNITS_PERCENTAGE);
-      imagePanel.setHeight(400, UNITS_PIXELS);
+      imagePanel.setHeight(100, UNITS_PERCENTAGE);
       HorizontalLayout panelLayout = new HorizontalLayout();
       panelLayout.setSizeUndefined();
       imagePanel.setContent(panelLayout);

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/EditorProcessDefinitionDetailPanel.java
Patch:
@@ -253,8 +253,6 @@ protected void deployModel() {
       BpmnModel model = new BpmnJsonConverter().convertToBpmnModel(modelNode);
       byte[] bpmnBytes = new BpmnXMLConverter().convertToXML(model);
       
-      System.out.println("OUT ----> " + new String(bpmnBytes));
-
       String processName = modelData.getName() + ".bpmn20.xml";
       Deployment deployment = repositoryService.createDeployment().name(modelData.getName()).addString(processName, new String(bpmnBytes)).deploy();
 

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/simple/editor/table/TaskTable.java
Patch:
@@ -158,7 +158,7 @@ public List<HumanStepDefinition> getSteps() {
       humanStepDefinition.setAssignee((String) item.getItemProperty("assignee").getValue());
 //      humanStepDefinition.setGroups((String) item.getItemProperty("groups").getValue());
       humanStepDefinition.setDescription((String) ((TextField) item.getItemProperty("description").getValue()).getValue());
-//      humanStepDefinition.setStartWithPrevious((boolean) ((CheckBox) item.getItemProperty("startWithPrevious").getValue()).booleanValue());
+      humanStepDefinition.setStartsWithPrevious((boolean) ((CheckBox) item.getItemProperty("startWithPrevious").getValue()).booleanValue());
       humanStepDefinition.setForm(taskFormModel.getForm(itemId));
 
       steps.add(humanStepDefinition);

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/UserTaskConverterTest.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.util.List;
 
+import org.activiti.bpmn.converter.BpmnXMLConverter;
 import org.activiti.bpmn.model.ActivitiListener;
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.FlowElement;
@@ -29,6 +30,7 @@ public void connvertJsonToModel() throws Exception {
   public void doubleConversionValidation() throws Exception {
     BpmnModel bpmnModel = readJsonFile();
     bpmnModel = convertToJsonAndBack(bpmnModel);
+    System.out.println("xml " + new String(new BpmnXMLConverter().convertToXML(bpmnModel), "utf-8"));
     validateModel(bpmnModel);
   }
   

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/ConvertProcessDefinitionPopupWindow.java
Patch:
@@ -151,7 +151,7 @@ public void buttonClick(ClickEvent event) {
               close();
               ExplorerApp.get().getViewManager().showEditorProcessDefinitionPage(modelData.getId());
               ExplorerApp.get().getMainWindow().open(new ExternalResource(
-                  ExplorerApp.get().getURL().toString() + "service/editor?id=" + modelData.getId()));
+                  ExplorerApp.get().getURL().toString().replace("/ui", "") + "service/editor?id=" + modelData.getId()));
             }
           }
           

File: modules/activiti-explorer/src/main/java/org/activiti/editor/ui/NewModelPopupWindow.java
Patch:
@@ -157,7 +157,7 @@ public void buttonClick(ClickEvent event) {
           close();
           ExplorerApp.get().getViewManager().showEditorProcessDefinitionPage(modelData.getId());
           ExplorerApp.get().getMainWindow().open(new ExternalResource(
-              ExplorerApp.get().getURL().toString() + "service/editor?id=" + modelData.getId()));
+              ExplorerApp.get().getURL().toString().replace("/ui", "") + "service/editor?id=" + modelData.getId()));
           
         } catch(Exception e) {
           notificationManager.showErrorNotification("error", e);

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/process/listener/EditModelClickListener.java
Patch:
@@ -26,6 +26,6 @@ public EditModelClickListener(String modelId) {
 
   public void buttonClick(ClickEvent event) {
     ExplorerApp.get().getMainWindow().open(new ExternalResource(
-        ExplorerApp.get().getURL().toString() + "service/editor?id=" + modelId));
+        ExplorerApp.get().getURL().toString().replace("/ui", "") + "service/editor?id=" + modelId));
   }
 }

File: modules/activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/CxfWSDLImporter.java
Patch:
@@ -103,7 +103,9 @@ public void importFrom(String url) {
         this.wsServices.put(this.namespace + wsService.getName(), wsService);
       }
       
-      this.importTypes(def.getTypes());
+      if(def != null && def.getTypes() != null) {
+        this.importTypes(def.getTypes());
+      }
     } catch (WSDLException e) {
       e.printStackTrace();
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DateFormType.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.form.AbstractFormType;
-import org.drools.core.util.StringUtils;
+import org.apache.commons.lang.StringUtils;
 
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -68,7 +68,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectByteArray", "selectByteArray_postgres");
     addDatabaseSpecificStatement("postgres", "selectResourceByDeploymentIdAndResourceName", "selectResourceByDeploymentIdAndResourceName_postgres");
     addDatabaseSpecificStatement("postgres", "selectResourcesByDeploymentId", "selectResourcesByDeploymentId_postgres");
-    addDatabaseSpecificStatement("postgres", "selectHistoricDetailsByQueryCriteria", "selectHistoricDetailsByQueryCriteria_postgres");
     addDatabaseSpecificStatement("postgres", "insertIdentityInfo", "insertIdentityInfo_postgres");
     addDatabaseSpecificStatement("postgres", "updateIdentityInfo", "updateIdentityInfo_postgres");
     addDatabaseSpecificStatement("postgres", "selectIdentityInfoById", "selectIdentityInfoById_postgres");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/ExpressionManager.java
Patch:
@@ -70,7 +70,7 @@ public ExpressionManager(Map<Object, Object> beans) {
  
   
   public Expression createExpression(String expression) {
-    ValueExpression valueExpression = expressionFactory.createValueExpression(parsingElContext, expression, Object.class);
+    ValueExpression valueExpression = expressionFactory.createValueExpression(parsingElContext, expression.trim(), Object.class);
     return new JuelExpression(valueExpression, expression);
   }
 

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BpmnXMLConverter.java
Patch:
@@ -334,7 +334,7 @@ public byte[] convertToXML(BpmnModel model) {
       XMLStreamWriter writer = xof.createXMLStreamWriter(out);
       XMLStreamWriter xtw = new IndentingXMLStreamWriter(writer);
 
-      DefinitionsRootExport.writeRootElement(xtw);
+      DefinitionsRootExport.writeRootElement(model, xtw);
       SignalAndMessageDefinitionExport.writeSignalsAndMessages(model, xtw);
       PoolExport.writePools(model, xtw);
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -474,7 +474,7 @@ public ProcessDefinitionEntity transformProcess(Process process) {
      */
     processDefinition.setKey(process.getId());
     processDefinition.setName(process.getName());
-    processDefinition.setCategory(process.getTargetNamespace());
+    processDefinition.setCategory(bpmnModel.getTargetNamespace());
     processDefinition.setDescription(process.getDocumentation()); 
     processDefinition.setProperty(PROPERTYNAME_DOCUMENTATION, process.getDocumentation()); // Kept for backwards compatibility. See ACT-1020
     processDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/BPMNDIExport.java
Patch:
@@ -66,7 +66,6 @@ public static void writeBPMNDI(BpmnModel model, XMLStreamWriter xtw) throws Exce
         xtw.writeAttribute(ATTRIBUTE_DI_Y, "" + labelGraphicInfo.y);
         xtw.writeEndElement();
         xtw.writeEndElement();
-        break;
       }
       
       xtw.writeEndElement();

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/BoundaryEventXMLConverter.java
Patch:
@@ -40,13 +40,13 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     BoundaryEvent boundaryEvent = new BoundaryEvent();
     
     if (StringUtils.isNotEmpty(xtr.getAttributeValue(null, ATTRIBUTE_BOUNDARY_CANCELACTIVITY))) {
       String cancelActivity = xtr.getAttributeValue(null, ATTRIBUTE_BOUNDARY_CANCELACTIVITY);
-      if (ATTRIBUTE_VALUE_TRUE.equalsIgnoreCase(cancelActivity)) {
-        boundaryEvent.setCancelActivity(true);
+      if (ATTRIBUTE_VALUE_FALSE.equalsIgnoreCase(cancelActivity)) {
+        boundaryEvent.setCancelActivity(false);
       }
     }
     boundaryEvent.setAttachedToRefId(xtr.getAttributeValue(null, ATTRIBUTE_BOUNDARY_ATTACHEDTOREF));

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/CallActivityXMLConverter.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.activiti.bpmn.converter.child.BaseChildElementParser;
 import org.activiti.bpmn.model.BaseElement;
+import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.CallActivity;
 import org.activiti.bpmn.model.IOParameter;
 import org.apache.commons.lang.StringUtils;
@@ -101,7 +102,7 @@ public String getElementName() {
       return ELEMENT_CALL_ACTIVITY_IN_PARAMETERS;
     }
 
-    public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement) throws Exception {
+    public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
       String source = xtr.getAttributeValue(null, ATTRIBUTE_IOPARAMETER_SOURCE);
       String sourceExpression = xtr.getAttributeValue(null, ATTRIBUTE_IOPARAMETER_SOURCE_EXPRESSION);
       String target = xtr.getAttributeValue(null, ATTRIBUTE_IOPARAMETER_TARGET);
@@ -127,7 +128,7 @@ public String getElementName() {
       return ELEMENT_CALL_ACTIVITY_OUT_PARAMETERS;
     }
 
-    public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement) throws Exception {
+    public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
       String source = xtr.getAttributeValue(null, ATTRIBUTE_IOPARAMETER_SOURCE);
       String sourceExpression = xtr.getAttributeValue(null, ATTRIBUTE_IOPARAMETER_SOURCE_EXPRESSION);
       String target = xtr.getAttributeValue(null, ATTRIBUTE_IOPARAMETER_TARGET);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/CatchEventXMLConverter.java
Patch:
@@ -37,7 +37,7 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     IntermediateCatchEvent catchEvent = new IntermediateCatchEvent();
     parseChildElements(getXMLElementName(), catchEvent, xtr);
     return catchEvent;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/EndEventXMLConverter.java
Patch:
@@ -37,7 +37,7 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     EndEvent endEvent = new EndEvent();
     parseChildElements(getXMLElementName(), endEvent, xtr);
     return endEvent;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/SequenceFlowXMLConverter.java
Patch:
@@ -42,7 +42,6 @@ protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception
     SequenceFlow sequenceFlow = new SequenceFlow();
     sequenceFlow.setSourceRef(xtr.getAttributeValue(null, ATTRIBUTE_FLOW_SOURCE_REF));
     sequenceFlow.setTargetRef(xtr.getAttributeValue(null, ATTRIBUTE_FLOW_TARGET_REF));
-    sequenceFlow.setId(xtr.getAttributeValue(null, ATTRIBUTE_ID));
     sequenceFlow.setName(xtr.getAttributeValue(null, ATTRIBUTE_NAME));
     
     parseChildElements(getXMLElementName(), sequenceFlow, xtr);

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/StartEventXMLConverter.java
Patch:
@@ -44,7 +44,7 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     String formKey = xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE, ATTRIBUTE_FORM_FORMKEY);
     StartEvent startEvent = null;
     if (StringUtils.isNotEmpty(formKey)) {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/ThrowEventXMLConverter.java
Patch:
@@ -37,7 +37,7 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     ThrowEvent throwEvent = new ThrowEvent();
     parseChildElements(getXMLElementName(), throwEvent, xtr);
     return throwEvent;

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/alfresco/AlfrescoStartEventXMLConverter.java
Patch:
@@ -38,7 +38,7 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     return super.convertXMLToElement(xtr);
   }
   

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/alfresco/AlfrescoUserTaskXMLConverter.java
Patch:
@@ -38,7 +38,7 @@ protected String getXMLElementName() {
   }
   
   @Override
-  protected BaseElement convertXMLToElement(XMLStreamReader xtr) {
+  protected BaseElement convertXMLToElement(XMLStreamReader xtr) throws Exception {
     return super.convertXMLToElement(xtr);
   }
   

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ConditionExpressionParser.java
Patch:
@@ -15,6 +15,7 @@
 import javax.xml.stream.XMLStreamReader;
 
 import org.activiti.bpmn.model.BaseElement;
+import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.SequenceFlow;
 
 /**
@@ -26,9 +27,9 @@ public String getElementName() {
     return ELEMENT_FLOW_CONDITION;
   }
   
-  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement) throws Exception {
+  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
     if (parentElement instanceof SequenceFlow == false) return;
     
-    ((SequenceFlow) parentElement).setConditionExpression(xtr.getElementText());
+    ((SequenceFlow) parentElement).setConditionExpression(xtr.getElementText().trim());
   }
 }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ScriptTextParser.java
Patch:
@@ -15,6 +15,7 @@
 import javax.xml.stream.XMLStreamReader;
 
 import org.activiti.bpmn.model.BaseElement;
+import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.ScriptTask;
 
 /**
@@ -26,7 +27,7 @@ public String getElementName() {
     return ATTRIBUTE_TASK_SCRIPT_TEXT;
   }
   
-  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement) throws Exception {
+  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
     if (parentElement instanceof ScriptTask == false) return;
     
     ((ScriptTask) parentElement).setScript(xtr.getElementText());

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/TextAnnotationTextParser.java
Patch:
@@ -15,6 +15,7 @@
 import javax.xml.stream.XMLStreamReader;
 
 import org.activiti.bpmn.model.BaseElement;
+import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.TextAnnotation;
 
 /**
@@ -26,7 +27,7 @@ public String getElementName() {
     return ELEMENT_TEXT_ANNOTATION_TEXT;
   }
   
-  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement) throws Exception {
+  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {
     if (parentElement instanceof TextAnnotation == false) return;
     
     ((TextAnnotation) parentElement).setText(xtr.getElementText());

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/export/SignalAndMessageDefinitionExport.java
Patch:
@@ -32,7 +32,7 @@ public static void writeSignalsAndMessages(BpmnModel model, XMLStreamWriter xtw)
             } else if (eventDefinition instanceof MessageEventDefinition) {
               MessageEventDefinition messageEvent = (MessageEventDefinition) eventDefinition;
               if (model.containsMessageId(messageEvent.getMessageRef()) == false) {
-                model.addMessage(messageEvent.getMessageRef(), messageEvent.getMessageRef());
+                model.addMessage(messageEvent.getMessageRef(), messageEvent.getMessageRef(), null);
               }
             }
           }

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/BpmnShapeParser.java
Patch:
@@ -36,13 +36,13 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
 				graphicInfo.x = Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_X)).intValue();
 				graphicInfo.y = Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_Y)).intValue();
 				FlowElement flowElement = model.getFlowElement(id);
-				if (flowElement instanceof Event) {
+				/*if (flowElement instanceof Event) {
 				  graphicInfo.width = 30;
 				  graphicInfo.height = 30;
-				} else {
+				} else {*/
 				  graphicInfo.width = Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_WIDTH)).intValue();
 				  graphicInfo.height = Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_HEIGHT)).intValue();
-				}
+				//}
 				
 				model.addGraphicInfo(id, graphicInfo);
 				break;

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/CallActivityConverterTest.java
Patch:
@@ -33,7 +33,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("callactivity");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("callactivity");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof CallActivity);
     CallActivity callActivity = (CallActivity) flowElement;

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ScopedConverterTest.java
Patch:
@@ -34,7 +34,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("outerSubProcess");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("outerSubProcess");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SubProcess);
     assertEquals("outerSubProcess", flowElement.getId());

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/ServiceTaskConverterTest.java
Patch:
@@ -35,7 +35,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("servicetask");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("servicetask");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof ServiceTask);
     assertEquals("servicetask", flowElement.getId());

File: modules/activiti-bpmn-converter/src/test/java/org/activiti/editor/language/xml/UserTaskConverterTest.java
Patch:
@@ -36,7 +36,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("usertask");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("usertask");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof UserTask);
     assertEquals("usertask", flowElement.getId());

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/BoundaryEvent.java
Patch:
@@ -19,7 +19,7 @@ public class BoundaryEvent extends Event {
 
   protected Activity attachedToRef;
   protected String attachedToRefId;
-  protected boolean cancelActivity;
+  protected boolean cancelActivity = true;
 
   public Activity getAttachedToRef() {
     return attachedToRef;

File: modules/activiti-bpmn-model/src/main/java/org/activiti/bpmn/model/ImplementationType.java
Patch:
@@ -5,5 +5,6 @@ public class ImplementationType {
   public static String IMPLEMENTATION_TYPE_CLASS = "class";
   public static String IMPLEMENTATION_TYPE_EXPRESSION = "expression";
   public static String IMPLEMENTATION_TYPE_DELEGATEEXPRESSION = "delegateExpression";
+  public static String IMPLEMENTATION_TYPE_WEBSERVICE = "##WebService";
   
 }

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/CdiActivitiTestCase.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.concurrent.Callable;
-import java.util.logging.Logger;
 
 import javax.enterprise.inject.spi.BeanManager;
 
@@ -42,6 +41,8 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Abstract base class for executing activiti-cdi tests in a Java SE
@@ -52,7 +53,7 @@
 @RunWith(Arquillian.class)
 public abstract class CdiActivitiTestCase {
 
-  protected Logger logger = Logger.getLogger(getClass().getName());
+  protected Logger logger = LoggerFactory.getLogger(getClass().getName());
     
   @Deployment
   public static JavaArchive createDeployment() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/ExecutionListener.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.activiti.engine.delegate;
 
+import java.io.Serializable;
+
 
 
 /** Callback interface to be notified of execution events like starting a process instance,
@@ -20,7 +22,7 @@
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public interface ExecutionListener {
+public interface ExecutionListener extends Serializable {
 
   String EVENTNAME_START = "start";
   String EVENTNAME_END = "end";

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/Expression.java
Patch:
@@ -13,12 +13,14 @@
 
 package org.activiti.engine.delegate;
 
+import java.io.Serializable;
+
 
 
 /**
  * @author Frederik Heremans
  */
-public interface Expression {
+public interface Expression extends Serializable {
 
    Object getValue(VariableScope variableScope);
    

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TaskListener.java
Patch:
@@ -13,13 +13,15 @@
 
 package org.activiti.engine.delegate;
 
+import java.io.Serializable;
+
 
 
 
 /**
  * @author Tom Baeyens
  */
-public interface TaskListener {
+public interface TaskListener extends Serializable {
 
   String EVENTNAME_CREATE = "create";
   String EVENTNAME_ASSIGNMENT = "assignment";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.logging.Logger;
 
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.pvm.PvmTransition;
@@ -28,8 +27,6 @@
  */
 public class BoundaryEventActivityBehavior extends FlowNodeActivityBehavior {
   
-  private static Logger log = Logger.getLogger(BoundaryEventActivityBehavior.class.getName());
-  
   protected boolean interrupting;
   protected String activityId;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/AbstractBpmnParseListener.java
Patch:
@@ -15,7 +15,7 @@
  * 
  * @author ruecker
  */
-public class AbstractBpmnParseListener implements BpmnParseListener {
+public class AbstractBpmnParseListener { //implements BpmnParseListener {
 
   public void parseProcess(Element processElement, ProcessDefinitionEntity processDefinition) {
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/XMLImporter.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.parser;
 
-import org.activiti.engine.impl.util.xml.Element;
+import org.activiti.bpmn.model.Import;
 
 /**
  * A XML importer
@@ -27,5 +27,5 @@ public interface XMLImporter {
    * @param element the declarations to be imported
    * @param parse the parse who called this importer
    */
-  void importFrom(Element element, BpmnParse parse);
+  void importFrom(Import theImport, BpmnParse parse);
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetDeploymentProcessDiagramCmd.java
Patch:
@@ -15,13 +15,14 @@
 
 import java.io.InputStream;
 import java.io.Serializable;
-import java.util.logging.Logger;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -33,7 +34,7 @@
 public class GetDeploymentProcessDiagramCmd implements Command<InputStream>, Serializable {
 
   private static final long serialVersionUID = 1L;
-  private static Logger log = Logger.getLogger(GetDeploymentProcessDiagramCmd.class.getName());
+  private static Logger log = LoggerFactory.getLogger(GetDeploymentProcessDiagramCmd.class);
   
   protected String processDefinitionId;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.engine.impl.cfg.IdGenerator;
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.interceptor.SessionFactory;
-import org.activiti.engine.impl.util.ClassNameUtil;
 import org.apache.ibatis.session.SqlSessionFactory;
 
 
@@ -153,7 +152,7 @@ private String getStatement(Class<?> persistentObjectClass, Map<Class<?>,String>
     if (statement!=null) {
       return statement;
     }
-    statement = prefix+ClassNameUtil.getClassNameWithoutPackage(persistentObjectClass);
+    statement = prefix + persistentObjectClass.getSimpleName();
     statement = statement.substring(0, statement.length()-6);
     cachedStatements.put(persistentObjectClass, statement);
     return statement;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/ExpressionManager.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine.impl.el;
 
+import java.io.Serializable;
 import java.util.Map;
 
 import org.activiti.engine.delegate.Expression;
@@ -50,7 +51,6 @@
  */
 public class ExpressionManager {
 
-
   protected ExpressionFactory expressionFactory;
   // Default implementation (does nothing)
   protected ELContext parsingElContext = new ParsingElContext();
@@ -71,7 +71,7 @@ public ExpressionManager(Map<Object, Object> beans) {
   
   public Expression createExpression(String expression) {
     ValueExpression valueExpression = expressionFactory.createValueExpression(parsingElContext, expression, Object.class);
-    return new JuelExpression(valueExpression, this, expression);
+    return new JuelExpression(valueExpression, expression);
   }
 
   public void setExpressionFactory(ExpressionFactory expressionFactory) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/AbstractEventHandler.java
Patch:
@@ -14,7 +14,6 @@
 package org.activiti.engine.impl.event;
 
 import java.util.Map;
-import java.util.logging.Logger;
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
@@ -31,8 +30,6 @@
  */
 public abstract class AbstractEventHandler implements EventHandler {
 
-  private static Logger log = Logger.getLogger(AbstractEventHandler.class.getName());
-  
   public void handleEvent(EventSubscriptionEntity eventSubscription, Object payload, CommandContext commandContext) {
 
     ExecutionEntity execution = eventSubscription.getExecution();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DateFormType.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.form.AbstractFormType;
+import org.drools.core.util.StringUtils;
 
 
 /**
@@ -46,7 +47,7 @@ public Object getInformation(String key) {
   }
 
   public Object convertFormValueToModelValue(String propertyValue) {
-    if (propertyValue==null || "".equals(propertyValue)) {
+    if (StringUtils.isEmpty(propertyValue)) {
       return null;
     }
     try {
@@ -57,7 +58,7 @@ public Object convertFormValueToModelValue(String propertyValue) {
   }
 
   public String convertModelValueToFormValue(Object modelValue) {
-    if (modelValue==null) {
+    if (modelValue == null) {
       return null;
     }
     return dateFormat.format(modelValue);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/delegate/ActivityBehavior.java
Patch:
@@ -12,11 +12,13 @@
  */
 package org.activiti.engine.impl.pvm.delegate;
 
+import java.io.Serializable;
+
 
 /**
  * @author Tom Baeyens
  */
-public interface ActivityBehavior {
+public interface ActivityBehavior extends Serializable {
 
   void execute(ActivityExecution execution) throws Exception;
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/process/Lane.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.engine.impl.pvm.process;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -22,8 +23,9 @@
 * 
 * @author Frederik Heremans
 */
-public class Lane implements HasDIBounds {
+public class Lane implements HasDIBounds, Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected String id;
   protected String name;
   protected List<String> flowNodeIds;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/scripting/ScriptingEngines.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.scripting;
 
 import java.util.List;
-import java.util.logging.Logger;
 
 import javax.script.Bindings;
 import javax.script.ScriptEngine;
@@ -29,7 +28,6 @@
  */
 public class ScriptingEngines {
 
-  private static Logger log = Logger.getLogger(ScriptingEngines.class.getName());
   public static final String DEFAULT_SCRIPTING_LANGUAGE = "juel";
 
   private final ScriptEngineManager scriptEngineManager;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/PluggableActivitiTestCase.java
Patch:
@@ -13,11 +13,11 @@
 
 package org.activiti.engine.impl.test;
 
-import java.util.logging.Logger;
-
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.ProcessEngines;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /** Base class for the activiti test cases.
@@ -34,7 +34,7 @@
  */
 public class PluggableActivitiTestCase extends AbstractActivitiTestCase {
   
-  private static Logger pluggableActivitiTestCaseLogger = Logger.getLogger(PluggableActivitiTestCase.class.getName());
+  private static Logger pluggableActivitiTestCaseLogger = LoggerFactory.getLogger(PluggableActivitiTestCase.class);
   
   protected static ProcessEngine cachedProcessEngine;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/DeploymentBuilder.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Builder for creating new deployments.
  * 
- * A builder instance can be obtained through {@link org.activiti.engine.RuntimeService#createDeployment()}.
+ * A builder instance can be obtained through {@link org.activiti.engine.RepositoryService#createDeployment()}.
  * 
  * Multiple resources can be added to one deployment before calling the {@link #deploy()}
  * operation.

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -200,7 +200,7 @@ public void testHistoricVariableInstancesOnParallelExecution() {
     for (Task task : tasks) {      
       Map<String, Object> variables = new HashMap<String, Object>();
       // set token local variable
-      log.fine("setting variables on task "+task.getId()+", execution "+task.getExecutionId());
+      log.debug("setting variables on task {}, execution {}", task.getId(), task.getExecutionId());
       runtimeService.setVariableLocal(task.getExecutionId(), "parallelValue1", task.getName());
       runtimeService.setVariableLocal(task.getExecutionId(), "parallelValue2", "test");
       taskService.complete(task.getId(), variables);      

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -283,7 +283,7 @@ public void testSubProcessWithDataInputOutput() {
   }
   
   /**
-   * Test case for handing over process variables to a sub process
+   * Test case for deleting a sub process
    */
   @Deployment(resources = {
     "org/activiti/engine/test/bpmn/callactivity/CallActivity.testTwoSubProcesses.bpmn20.xml", 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/deployment/BpmnDeploymentTest.java
Patch:
@@ -222,7 +222,7 @@ public void testDeployInvalidExpression() {
     catch(ActivitiException expected) {
       // Check if no deployments are made
       assertEquals(0, repositoryService.createDeploymentQuery().count());
-      assertTrue(expected.getMessage().startsWith("Error while parsing process: "));
+      assertTrue(expected.getMessage().startsWith("Error parsing XML"));
     }
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -53,7 +53,7 @@ public void testThrowErrorWithoutErrorCode() {
         .deploy();
       fail("ActivitiException expected");
     } catch (ActivitiException re) {
-      assertTextPresent("'errorCode' is mandatory on errors referenced by throwing error event definitions", re.getMessage());
+      assertTextPresent("errorCode is required for an error event", re.getMessage());
     }
   }
 
@@ -64,7 +64,7 @@ public void testThrowErrorWithEmptyErrorCode() {
         .deploy();
       fail("ActivitiException expected");
     } catch (ActivitiException re) {
-      assertTextPresent("'errorCode' is mandatory on errors referenced by throwing error event definitions", re.getMessage());
+      assertTextPresent("errorCode is required for an error event", re.getMessage());
     }
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/EventBasedGatewayTest.java
Patch:
@@ -152,7 +152,7 @@ public void testInvalidSequenceFlow() {
         .deploy();
       fail("exception expected");
     } catch (Exception e) {
-      if(!e.getMessage().contains("Invalid incoming sequenceflow for intermediateCatchEvent")) {
+      if(!e.getMessage().contains("Invalid incoming sequenceflow")) {
         fail("different exception expected");
       }
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -185,7 +185,7 @@ public void testInvalidProcessDefinition() {
       fail("Could deploy a process definition with a sequence flow out of a XOR Gateway without condition with is not the default flow.");
     }
     catch (ActivitiException ex) {
-      assertTrue( ex.getMessage().startsWith("Exclusive Gateway 'exclusiveGw' has outgoing sequence flow 'flow3' without condition which is not the default flow."));
+      assertTrue(ex.getMessage().contains("Exclusive Gateway 'exclusiveGw' has outgoing sequence flow 'flow3' without condition which is not the default flow."));
     }
     
     String defaultFlowWithCondition = "<?xml version='1.0' encoding='UTF-8'?>" +
@@ -211,7 +211,7 @@ public void testInvalidProcessDefinition() {
       fail("Could deploy a process definition with a sequence flow out of a XOR Gateway without condition with is not the default flow.");
     }
     catch (ActivitiException ex) {
-      assertTrue( ex.getMessage().startsWith("Exclusive Gateway 'exclusiveGw' has outgoing sequence flow 'flow3' which is the default flow but has a condition too."));
+      assertTrue(ex.getMessage().contains("Exclusive Gateway 'exclusiveGw' has outgoing sequence flow 'flow3' which is the default flow but has a condition too."));
     }
 
     String noOutgoingFlow = "<?xml version='1.0' encoding='UTF-8'?>" +
@@ -228,7 +228,7 @@ public void testInvalidProcessDefinition() {
     }
     catch (ActivitiException ex) {
       ex.printStackTrace();
-      assertTrue( ex.getMessage().startsWith("Exclusive Gateway 'exclusiveGw' has no outgoing sequence flows."));
+      assertTrue( ex.getMessage().contains("Exclusive Gateway 'exclusiveGw' has no outgoing sequence flows."));
     }
 
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -37,7 +37,8 @@
  */
 public class BpmnParseTest extends PluggableActivitiTestCase {
   
-  public void testInvalidProcessDefinition() {
+  // Do we want this to fail?
+  /*public void testInvalidProcessDefinition() {
     try {
       String resource = TestHelper.getBpmnProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
@@ -47,7 +48,7 @@ public void testInvalidProcessDefinition() {
       assertTextPresent("invalidAttribute", e.getMessage());
       assertTextPresent("process", e.getMessage());
     }
-  }
+  }*/
   
   public void testParseWithBpmnNamespacePrefix() {
       repositoryService.createDeployment()

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/TweetExceptionHandler.java
Patch:
@@ -12,20 +12,20 @@
  */
 package org.activiti.engine.test.jobexecutor;
 
-import java.util.logging.Logger;
-
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
  * @author Tom Baeyens
  */
 public class TweetExceptionHandler implements JobHandler {
   
-  private static Logger log = Logger.getLogger(TweetExceptionHandler.class.getName());
+  private static Logger log = LoggerFactory.getLogger(TweetExceptionHandler.class);
   
   protected int exceptionsRemaining = 2;
 

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/CallActivityConverterTest.java
Patch:
@@ -32,7 +32,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("callactivity");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("callactivity");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof CallActivity);
     CallActivity callActivity = (CallActivity) flowElement;

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ScopedConverterTest.java
Patch:
@@ -33,7 +33,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("outerSubProcess");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("outerSubProcess");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof SubProcess);
     assertEquals("outerSubProcess", flowElement.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/ServiceTaskConverterTest.java
Patch:
@@ -34,7 +34,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("servicetask");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("servicetask");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof ServiceTask);
     assertEquals("servicetask", flowElement.getId());

File: modules/activiti-json-converter/src/test/java/org/activiti/editor/language/UserTaskConverterTest.java
Patch:
@@ -35,7 +35,7 @@ protected String getResource() {
   }
   
   private void validateModel(BpmnModel model) {
-    FlowElement flowElement = model.getMainProcess().getFlowElementMap().get("usertask");
+    FlowElement flowElement = model.getMainProcess().getFlowElement("usertask");
     assertNotNull(flowElement);
     assertTrue(flowElement instanceof UserTask);
     assertEquals("usertask", flowElement.getId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/DeploymentBuilder.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Builder for creating new deployments.
  * 
- * A builder instance can be obtained through {@link org.activiti.engine.RuntimeService#createDeployment()}.
+ * A builder instance can be obtained through {@link org.activiti.engine.RepositoryService#createDeployment()}.
  * 
  * Multiple resources can be added to one deployment before calling the {@link #deploy()}
  * operation.

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/child/ScriptTextParser.java
Patch:
@@ -23,7 +23,7 @@
 public class ScriptTextParser extends BaseChildElementParser {
 	
   public String getElementName() {
-    return "script";
+    return ATTRIBUTE_TASK_SCRIPT_TEXT;
   }
   
   public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement) throws Exception {

File: modules/activiti-bpmn-converter/src/main/java/org/activiti/bpmn/converter/parser/BpmnEdgeParser.java
Patch:
@@ -33,7 +33,7 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
 		List<GraphicInfo> wayPointList = new ArrayList<GraphicInfo>();
 		while (xtr.hasNext()) {
 			xtr.next();
-			if (xtr.isStartElement() && "BPMNLabel".equalsIgnoreCase(xtr.getLocalName())) {
+			if (xtr.isStartElement() && ELEMENT_DI_LABEL.equalsIgnoreCase(xtr.getLocalName())) {
 			  
 			  while (xtr.hasNext()) {
           xtr.next();
@@ -43,7 +43,7 @@ public void parse(XMLStreamReader xtr, BpmnModel model) throws Exception {
             graphicInfo.y = Double.valueOf(xtr.getAttributeValue(null, ATTRIBUTE_DI_Y)).intValue();
 					  model.addLabelGraphicInfo(id, graphicInfo);
 					  break;
-          } else if(xtr.isEndElement() && "BPMNLabel".equalsIgnoreCase(xtr.getLocalName())) {
+          } else if(xtr.isEndElement() && ELEMENT_DI_LABEL.equalsIgnoreCase(xtr.getLocalName())) {
             break;
           }
 			  }

File: modules/activiti-upgrade/src/main/java/org/activiti/upgrade/DatabaseFormatterOracle.java
Patch:
@@ -24,7 +24,7 @@ public String formatDate(Date date) {
     StringBuffer sb = new StringBuffer();
     sb.append("to_timestamp('");
     sb.append(oracleDateFormat.format(date));
-    sb.append("', 'YYYY-MM-DD HH:MI:SS.FF')");
+    sb.append("', 'YYYY-MM-DD HH24:MI:SS.FF')");
     return sb.toString();
   }
 

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/test/SuspendAndActivateFunctionalityTest.java
Patch:
@@ -29,8 +29,8 @@ public class SuspendAndActivateFunctionalityTest extends UpgradeTestCase {
   
   public void testSuspendProcessDefinition() {
     
-    // Test makes only sense on 5.11
-    if (UpgradeUtil.getProcessEngineVersion(processEngine) == 11) {
+    // Test makes only sense on 5.10 -> 5.11
+    if (UpgradeUtil.getProcessEngineVersion(processEngine) == 11 && isTestRunningInUpgrade("5.10", "5.11")) {
       
       ProcessDefinition processDefinition = processEngine.getRepositoryService()
               .createProcessDefinitionQuery().processDefinitionKey("suspendAndActivate").singleResult();
@@ -70,7 +70,7 @@ public void testSuspendProcessDefinition() {
   public void testSuspendProcessInstance() {
     
     // Test makes only sense on 5.11
-    if (UpgradeUtil.getProcessEngineVersion(processEngine) == 11) {
+    if (UpgradeUtil.getProcessEngineVersion(processEngine) == 11 && isTestRunningInUpgrade("5.10", "5.11")) {
       
       ProcessDefinition processDefinition = processEngine.getRepositoryService()
               .createProcessDefinitionQuery().processDefinitionKey("suspendAndActivate").singleResult();

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/test/VerifyProcessDefinitionDescriptionTest.java
Patch:
@@ -26,7 +26,7 @@ public class VerifyProcessDefinitionDescriptionTest extends UpgradeTestCase {
   public void testProcessDefinitionDescription() {
     
     // Test makes only sense on 5.11
-    if (UpgradeUtil.getProcessEngineVersion(processEngine) == 11) {
+    if (UpgradeUtil.getProcessEngineVersion(processEngine) == 11 && isTestRunningInUpgrade("5.10", "5.11")) {
       
       // We don't upgrade the process definition description, we only add the column.
       // So we'll just verify if the process definition description is null and if 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserGroupsResource.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.engine.query.QueryProperty;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.DataResponse;
-import org.activiti.rest.api.DefaultPaginateList;
 import org.activiti.rest.api.SecuredResource;
 import org.restlet.resource.Get;
 import org.restlet.resource.Post;
@@ -51,7 +50,7 @@ public DataResponse getGroups() {
       throw new ActivitiException("No userId provided");
     }
 
-    DataResponse dataResponse = new DefaultPaginateList().paginateList(
+    DataResponse dataResponse = new UserGroupsPaginateList().paginateList(
         getQuery(), ActivitiUtil.getIdentityService().createGroupQuery()
             .groupMember(userId), "id", properties);
     return dataResponse;

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentArtifactsResource.java
Patch:
@@ -47,6 +47,7 @@ public ObjectNode getDeploymentArtifacts() {
     responseJSON.put("id", deployment.getId());
     responseJSON.put("name", deployment.getName());
     responseJSON.put("deploymentTime", RequestUtil.dateToString(deployment.getDeploymentTime()));
+    responseJSON.put("category", deployment.getCategory());
     
     ArrayNode resourceArray = new ObjectMapper().createArrayNode();
     

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/repository/DeploymentUploadResource.java
Patch:
@@ -49,12 +49,12 @@ public DeploymentResponse uploadDeployment(Representation entity) {
       
       DeploymentBuilder deploymentBuilder = ActivitiUtil.getRepositoryService().createDeployment();
       String fileName = uploadItem.getName();
-      if (fileName.endsWith(".bpmn20.xml")) {
+      if (fileName.endsWith(".bpmn20.xml") || fileName.endsWith(".bpmn")) {
         deploymentBuilder.addInputStream(fileName, uploadItem.getInputStream());
       } else if (fileName.toLowerCase().endsWith(".bar") || fileName.toLowerCase().endsWith(".zip")) {
         deploymentBuilder.addZipInputStream(new ZipInputStream(uploadItem.getInputStream()));
       } else {
-        throw new ActivitiException("File must be of type .bpmn20.xml, .bar or .zip");
+        throw new ActivitiException("File must be of type .bpmn20.xml, .bpmn, .bar or .zip");
       }
       deploymentBuilder.name(fileName);
       Deployment deployment = deploymentBuilder.deploy();

File: modules/activiti-rest/src/main/java/org/activiti/rest/application/ActivitiRestApplication.java
Patch:
@@ -122,7 +122,7 @@ protected boolean authenticate(Request request, Response response) {
     router.attach("/group", GroupCreateResource.class);
     router.attach("/group/{groupId}", GroupResource.class);
     router.attach("/group/{groupId}/users/{userId}", UserGroupsDeleteResource.class);
-    router.attach("/groups/{groupId}/users", GroupUsersResource.class);
+    router.attach("/group/{groupId}/users", GroupUsersResource.class);
     router.attach("/groups", GroupSearchResource.class);
     
     router.attach("/process-definitions", ProcessDefinitionsResource.class);

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/DatabaseFormatterPostgres.java
Patch:
@@ -18,9 +18,9 @@ public class DatabaseFormatterPostgres extends DatabaseFormatter {
   @Override
   public String formatBinary(byte[] bytes) {
     StringBuffer sb = new StringBuffer();
-    sb.append("E'\\\\x");
+    sb.append("decode('");
     appendBytesInHex(sb, bytes);
-    sb.append("'");
+    sb.append("', 'hex')");
     return sb.toString();
   }
 

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/UpgradeTestCase.java
Patch:
@@ -87,7 +87,7 @@ public static void setProcessEngine(ProcessEngine processEngine) {
 
   public abstract void runInTheOldVersion();
 
-  public static ProcessEngineConfigurationImpl createProcessEngineConfiguration(String database) throws IOException, FileNotFoundException {
+  public static ProcessEngineConfigurationImpl createProcessEngineConfiguration(String database) throws Exception {
     ProcessEngineConfigurationImpl processEngineConfiguration;
     processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
             .createStandaloneProcessEngineConfiguration()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoryLevel.java
Patch:
@@ -23,8 +23,8 @@
 public enum HistoryLevel {
   
   NONE("none"),
-  ACTIVITY("audit"),
-  AUDIT("activity"),
+  ACTIVITY("activity"),
+  AUDIT("audit"),
   FULL("full");
   
   private String key;

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/DatabaseFormatterPostgres.java
Patch:
@@ -6,9 +6,9 @@ public class DatabaseFormatterPostgres extends DatabaseFormatter {
   @Override
   public String formatBinary(byte[] bytes) {
     StringBuffer sb = new StringBuffer();
-    sb.append("decode('");
+    sb.append("E'\\\\x");
     appendBytesInHex(sb, bytes);
-    sb.append("', 'hex')");
+    sb.append("'");
     return sb.toString();
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -78,6 +78,7 @@
 import org.activiti.engine.impl.bpmn.listener.DelegateExpressionTaskListener;
 import org.activiti.engine.impl.bpmn.listener.ExpressionExecutionListener;
 import org.activiti.engine.impl.bpmn.listener.ExpressionTaskListener;
+import org.activiti.engine.impl.bpmn.parser.BpmnParseListener;
 import org.activiti.engine.impl.bpmn.webservice.BpmnInterface;
 import org.activiti.engine.impl.bpmn.webservice.BpmnInterfaceImplementation;
 import org.activiti.engine.impl.bpmn.webservice.MessageDefinition;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/deployment/DeploymentUploadReceiver.java
Patch:
@@ -78,7 +78,7 @@ protected void deployUploadedFile() {
     DeploymentBuilder deploymentBuilder = repositoryService.createDeployment().name(fileName);
     try {
       try {
-        if (fileName.endsWith(".bpmn20.xml")) {
+        if (fileName.endsWith(".bpmn20.xml") || fileName.endsWith(".bpmn")) {
           validFile = true;
           deployment = deploymentBuilder
             .addInputStream(fileName, new ByteArrayInputStream(outputStream.toByteArray()))

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -117,6 +117,7 @@ public class BpmnJsonConverter implements EditorJsonConstants, StencilConstants,
     DI_CIRCLES.add(STENCIL_EVENT_THROW_SIGNAL);
     
     DI_CIRCLES.add(STENCIL_EVENT_END_NONE);
+    DI_CIRCLES.add(STENCIL_EVENT_END_ERROR);
     
     DI_RECTANGLES.add(STENCIL_CALL_ACTIVITY);
     DI_RECTANGLES.add(STENCIL_SUB_PROCESS);

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyDriver.java
Patch:
@@ -50,9 +50,9 @@ public static void setUrl(String url) {
     } else if (url.startsWith("jdbc:sqlserver")) {
       databaseFormatter = new DatabaseFormatterMsSqlServer();
     } else if (url.startsWith("jdbc:db2")) {
-      databaseFormatter = new DatabaseFormatterOracle();
+      databaseFormatter = new DatabaseFormatterDb2();
     } else if (url.startsWith("jdbc:postgresql")) {
-      databaseFormatter = new DatabaseFormatterOracle();
+      databaseFormatter = new DatabaseFormatterPostgres();
     } 
   }
 

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyStatement.java
Patch:
@@ -538,11 +538,10 @@ public ParameterMetaData getParameterMetaData() throws SQLException {
   }
 
   public void closeOnCompletion() throws SQLException {
-    preparedStatement.closeOnCompletion();
+    throw new RuntimeException("buzz");
   }
 
   public boolean isCloseOnCompletion() throws SQLException {
-    return preparedStatement.isCloseOnCompletion();
+    throw new RuntimeException("buzz");
   }
-
 }

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/UpgradeDataGenerator.java
Patch:
@@ -59,7 +59,7 @@ public static void main(String[] args) {
       processEngineConfiguration = UpgradeTestCase.createProcessEngineConfiguration(database);
 
       // install the jdbc proxy driver
-      log.fine("installing jdbc proxy driver...");
+      log.fine("installing jdbc proxy driver delegating to "+processEngineConfiguration.getJdbcUrl());
       ProxyDriver.setUrl(processEngineConfiguration.getJdbcUrl());
       processEngineConfiguration.setJdbcUrl("proxy");
       DriverManager.registerDriver(new ProxyDriver());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/DefaultStartFormHandler.java
Patch:
@@ -38,7 +38,9 @@ public void parseConfiguration(Element activityElement, DeploymentEntity deploym
 
   public StartFormData createStartFormData(ProcessDefinitionEntity processDefinition) {
     StartFormDataImpl startFormData = new StartFormDataImpl();
-    startFormData.setFormKey(formKey);
+    if (formKey != null) {
+      startFormData.setFormKey(formKey.getExpressionText());
+    }
     startFormData.setDeploymentId(deploymentId);
     startFormData.setProcessDefinition(processDefinition);
     initializeFormProperties(startFormData, null);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1738,14 +1738,14 @@ public ActivityImpl parseBusinessRuleTask(Element businessRuleTaskElement, Scope
       }
   
       if (ruleVariableInputString != null) {
-        String[] ruleVariableInputObjects = ruleVariableInputString.split(",");
+        List<String> ruleVariableInputObjects = parseCommaSeparatedList(ruleVariableInputString);
         for (String ruleVariableInputObject : ruleVariableInputObjects) {
           ruleActivity.addRuleVariableInputIdExpression(expressionManager.createExpression(ruleVariableInputObject.trim()));
         }
       }
   
       if (rulesString != null) {
-        String[] rules = rulesString.split(",");
+        List<String> rules = parseCommaSeparatedList(rulesString);
         for (String rule : rules) {
           ruleActivity.addRuleIdExpression(expressionManager.createExpression(rule.trim()));
         }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/EventBasedGatewayActivityBehavior.java
Patch:
@@ -24,6 +24,7 @@ public class EventBasedGatewayActivityBehavior extends FlowNodeActivityBehavior
   @Override
   public void execute(ActivityExecution execution) throws Exception {
     // the event based gateway doesn't really do anything
+    // ignoring outgoing sequence flows (they're only parsed for the diagram)
   }
   
 }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserSearchResource.java
Patch:
@@ -36,14 +36,13 @@ public class UserSearchResource extends SecuredResource {
   public DataResponse searchUsers() {
     if(authenticate() == false) return null;
     
-    String searchText = (String) getRequest().getAttributes().get("searchText");
+    String searchText = (String) getQuery().getValues("searchText");
     if(searchText == null) {
       throw new ActivitiException("No searchText provided");
     }
     searchText = "%" + searchText + "%";
     
     List<User> firstNameMatchList = ActivitiUtil.getIdentityService().createUserQuery().userFirstNameLike(searchText).list();
-    
     List<User> lastNameMatchList = ActivitiUtil.getIdentityService().createUserQuery().userLastNameLike(searchText).list();
     
     Map<String, UserInfo> userMap = new HashMap<String, UserInfo>();

File: modules/activiti-rest/src/main/java/org/activiti/rest/application/ActivitiRestApplication.java
Patch:
@@ -117,13 +117,13 @@ protected boolean authenticate(Request request, Response response) {
     router.attach("/user/{userId}/groups", UserGroupsResource.class);
     router.attach("/user/{userId}/groups/{groupId}", UserGroupsDeleteResource.class);
     router.attach("/user/{userId}/picture", UserPictureResource.class);
-    router.attach("/users/{searchText}", UserSearchResource.class);
+    router.attach("/users", UserSearchResource.class);
 
     router.attach("/group", GroupCreateResource.class);
     router.attach("/group/{groupId}", GroupResource.class);
     router.attach("/group/{groupId}/users/{userId}", UserGroupsDeleteResource.class);
     router.attach("/groups/{groupId}/users", GroupUsersResource.class);
-    router.attach("/groups/{searchText}", GroupSearchResource.class);
+    router.attach("/groups", GroupSearchResource.class);
     
     router.attach("/process-definitions", ProcessDefinitionsResource.class);
     router.attach("/process-instances", ProcessInstancesResource.class);

File: modules/activiti-rest/src/test/java/org/activiti/rest/BaseRestTestCase.java
Patch:
@@ -131,10 +131,13 @@ public void runBare() throws Throwable {
   protected void createUsers() {
     IdentityService identityService = processEngine.getIdentityService();
     User user = identityService.newUser("kermit");
+    user.setFirstName("Kermit");
+    user.setLastName("the Frog");
     user.setPassword("kermit");
     identityService.saveUser(user);
     
     Group group = identityService.newGroup("admin");
+    group.setName("Administrators");
     identityService.saveGroup(group);
     
     identityService.createMembership(user.getId(), group.getId());

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstanceResource.java
Patch:
@@ -109,6 +109,7 @@ private void addTaskList(String processInstanceId, ObjectNode responseJSON) {
       for (HistoricTaskInstance historicTaskInstance : taskList) {
         ObjectNode taskJSON = new ObjectMapper().createObjectNode();
         taskJSON.put("taskId", historicTaskInstance.getId());
+        taskJSON.put("taskDefinitionKey", historicTaskInstance.getTaskDefinitionKey());
         if (historicTaskInstance.getName() != null) {
           taskJSON.put("taskName", historicTaskInstance.getName());
         } else {

File: modules/activiti-rest/src/test/java/org/activiti/rest/api/process/StartProcessInstanceResourceTest.java
Patch:
@@ -23,7 +23,7 @@ public void testStartInstance() throws Exception {
     JsonNode responseNode = objectMapper.readTree(response.getStream());
     assertNotNull(responseNode);
     
-    String processInstanceId = responseNode.get("processInstanceId").getValueAsText();
+    String processInstanceId = responseNode.get("processInstanceId").asText();
     assertNotNull(processInstanceId);
     
     List<ProcessInstance> instanceList = runtimeService.createProcessInstanceQuery().list();
@@ -52,7 +52,7 @@ public void testStartInstanceWithVariables() throws Exception {
     JsonNode responseNode = objectMapper.readTree(response.getStream());
     assertNotNull(responseNode);
     
-    String processInstanceId = responseNode.get("processInstanceId").getValueAsText();
+    String processInstanceId = responseNode.get("processInstanceId").asText();
     assertNotNull(processInstanceId);
     
     List<ProcessInstance> instanceList = runtimeService.createProcessInstanceQuery().list();

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/UpgradeTestCase.java
Patch:
@@ -70,6 +70,8 @@ protected void setUp() throws Exception {
     
     if (processEngine==null) {
       String database = System.getProperty("database");
+      UpgradeDataGenerator.log.fine("Configuration properties...");
+      UpgradeDataGenerator.log.fine("database.....:"+database);
       setProcessEngine(createProcessEngineConfiguration(database).buildProcessEngine());
     }
   }
@@ -94,8 +96,7 @@ public static ProcessEngineConfigurationImpl createProcessEngineConfiguration(St
             .setJobExecutorActivate(false);
   
     // loading properties
-    UpgradeDataGenerator.log.fine("loading properties...");
-    String propertiesFileName = System.getProperty("user.home")+System.getProperty("file.separator")+".activiti"+System.getProperty("file.separator")+"jdbc"+System.getProperty("file.separator")+"build."+database+".properties";
+    String propertiesFileName = System.getProperty("user.home")+System.getProperty("file.separator")+".activiti"+System.getProperty("file.separator")+"upgrade"+System.getProperty("file.separator")+"build."+database+".properties";
     Properties properties = new Properties();
     properties.load(new FileInputStream(propertiesFileName));
     UpgradeDataGenerator.log.fine("jdbc url.....: "+processEngineConfiguration.getJdbcUrl());

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/BpmnJsonConverter.java
Patch:
@@ -67,6 +67,7 @@ public class BpmnJsonConverter implements EditorJsonConstants, StencilConstants,
     SequenceFlowJsonConverter.fillTypes(convertersToBpmnMap, convertersToJsonMap);
     
     // task types
+    BusinessRuleTaskJsonConverter.fillTypes(convertersToBpmnMap, convertersToJsonMap);
     ManualTaskJsonConverter.fillTypes(convertersToBpmnMap, convertersToJsonMap);
     ReceiveTaskJsonConverter.fillTypes(convertersToBpmnMap, convertersToJsonMap);
     ScriptTaskJsonConverter.fillTypes(convertersToBpmnMap, convertersToJsonMap);

File: modules/activiti-json-converter/src/main/java/org/activiti/editor/language/json/converter/ScriptTaskJsonConverter.java
Patch:
@@ -53,7 +53,7 @@ protected void convertElementToJson(ObjectNode propertiesNode, FlowElement flowE
   protected FlowElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {
     ScriptTask task = new ScriptTask();
     task.setScriptFormat(getPropertyValueAsString(PROPERTY_SCRIPT_FORMAT, elementNode));
-    task.setScriptFormat(getPropertyValueAsString(PROPERTY_SCRIPT_TEXT, elementNode));
+    task.setScript(getPropertyValueAsString(PROPERTY_SCRIPT_TEXT, elementNode));
     return task;
   }
 }

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/UpgradeDataGenerator.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.activiti.upgrade;
 
-import java.io.FileOutputStream;
-import java.io.FileWriter;
 import java.io.PrintWriter;
 import java.sql.DriverManager;
 import java.util.logging.Logger;

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyStatement.java
Patch:
@@ -180,7 +180,7 @@ void setInputStreamParameter(int parameterIndex, InputStream x) {
     byte[] bytes = IoUtil.readInputStream(x, "jdbc variable bytes");
     StringBuffer sb = new StringBuffer();
     for (byte b : bytes) {
-      sb.append(Integer.toHexString((int) (b & 0xff)));
+      sb.append(String.format("%02X", b));
     }
     parameters.put(parameterIndex, "0x"+sb.toString());
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -173,6 +173,7 @@ protected void setMailServerProperties(Email email) {
     int port = processEngineConfiguration.getMailServerPort();
     email.setSmtpPort(port);
 
+    email.setSSL(processEngineConfiguration.getMailServerUseSSL());
     email.setTLS(processEngineConfiguration.getMailServerUseTLS());
 
     String user = processEngineConfiguration.getMailServerUsername();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryProperty.java
Patch:
@@ -32,7 +32,7 @@ public class ExecutionQueryProperty implements QueryProperty {
 
   public static final ExecutionQueryProperty PROCESS_INSTANCE_ID = new ExecutionQueryProperty("RES.ID_");
   public static final ExecutionQueryProperty PROCESS_DEFINITION_KEY = new ExecutionQueryProperty("ProcessDefinitionKey");
-  public static final ExecutionQueryProperty PROCESS_DEFINITION_ID = new ExecutionQueryProperty("RES.ID_");
+  public static final ExecutionQueryProperty PROCESS_DEFINITION_ID = new ExecutionQueryProperty("ProcessDefinitionId");
   
   private String name;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryProperty.java
Patch:
@@ -32,8 +32,8 @@ public class ProcessInstanceQueryProperty implements QueryProperty {
   private static final Map<String, ProcessInstanceQueryProperty> properties = new HashMap<String, ProcessInstanceQueryProperty>();
 
   public static final ProcessInstanceQueryProperty PROCESS_INSTANCE_ID = new ProcessInstanceQueryProperty("RES.ID_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("P.KEY_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("P.ID_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("ProcessDefinitionKey");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("ProcessDefinitionId");
   
   private String name;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -95,7 +95,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     // db2
     databaseSpecificLimitBeforeStatements.put("db2", "SELECT SUB.* FROM (");
     databaseSpecificLimitAfterStatements.put("db2", ")RES ) SUB WHERE SUB.rnk >= #{firstRow} AND SUB.rnk < #{lastRow}");
-    databaseSpecificLimitBetweenStatements.put("db2", ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select distinct RES.* ");
+    databaseSpecificLimitBetweenStatements.put("db2", ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select RES.* ");
     databaseSpecificOrderByStatements.put("db2", "");
     addDatabaseSpecificStatement("db2", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -57,7 +57,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("mysql", "selectProcessDefinitionCountByQueryCriteria", "selectProcessDefinitionCountByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectDeploymentsByQueryCriteria", "selectDeploymentsByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectDeploymentCountByQueryCriteria", "selectDeploymentCountByQueryCriteria_mysql");
-    addDatabaseSpecificStatement("mysql", "selectModelsByQueryCriteria", "selectModelsByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectModelCountByQueryCriteria", "selectModelCountByQueryCriteria_mysql");
     
     //postgres specific
@@ -106,6 +105,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitBetweenStatements.put("mssql", ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select distinct RES.* ");
     databaseSpecificOrderByStatements.put("mssql", "");
     addDatabaseSpecificStatement("mssql", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_integerBoolean");
+    addDatabaseSpecificStatement("mssql", "selectModelsByQueryCriteria", "selectModelsByQueryCriteria_mssql");
   }
   
   protected String databaseType;

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/Messages.java
Patch:
@@ -208,6 +208,7 @@ public interface Messages {
   static final String PROCESS_START_TIME = "process.start.time";
   static final String PROCESS_STARTED_NOTIFICATION = "process.started.notification";
   static final String PROCESS_INSTANCE_STARTED_ON = "process.instance.started.on";
+  static final String PROCESS_INSTANCE_STARTED = "process.instance.started";
   static final String PROCESS_INSTANCE_HEADER_TASKS = "process.instance.header.tasks";
   static final String PROCESS_INSTANCE_NO_TASKS = "process.instance.no.tasks";
   static final String PROCESS_INSTANCE_HEADER_VARIABLES = "process.instance.header.variables";

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/admin/AdminCompletedInstancesPanel.java
Patch:
@@ -232,7 +232,7 @@ protected void initInstancesTable() {
     instancesTable.addContainerProperty("business key", String.class, null, i18nManager.getMessage(Messages.PROCESS_INSTANCE_BUSINESSKEY), null, Table.ALIGN_LEFT);
     instancesTable.addContainerProperty("start user id", String.class, null, i18nManager.getMessage(Messages.ADMIN_STARTED_BY), null, Table.ALIGN_LEFT);
     instancesTable.addContainerProperty("start activity id", String.class, null, i18nManager.getMessage(Messages.ADMIN_START_ACTIVITY), null, Table.ALIGN_LEFT);
-    instancesTable.addContainerProperty("start time", String.class, null, i18nManager.getMessage(Messages.PROCESS_INSTANCE_STARTED_ON), null, Table.ALIGN_LEFT);
+    instancesTable.addContainerProperty("start time", String.class, null, i18nManager.getMessage(Messages.PROCESS_INSTANCE_STARTED), null, Table.ALIGN_LEFT);
     instancesTable.addContainerProperty("end time", String.class, null, i18nManager.getMessage(Messages.TASK_COMPLETE_TIME), null, Table.ALIGN_LEFT);
     instancesTable.addContainerProperty("duration", String.class, null, i18nManager.getMessage(Messages.TASK_DURATION), null, Table.ALIGN_LEFT);
     

File: modules/activiti-explorer/src/main/java/org/activiti/explorer/ui/management/admin/AdminRunningInstancesPanel.java
Patch:
@@ -233,7 +233,7 @@ protected void initInstancesTable() {
     instancesTable.addContainerProperty("business key", String.class, null, i18nManager.getMessage(Messages.PROCESS_INSTANCE_BUSINESSKEY), null, Table.ALIGN_LEFT);
     instancesTable.addContainerProperty("start user id", String.class, null, i18nManager.getMessage(Messages.ADMIN_STARTED_BY), null, Table.ALIGN_LEFT);
     instancesTable.addContainerProperty("start activity id", String.class, null, i18nManager.getMessage(Messages.ADMIN_START_ACTIVITY), null, Table.ALIGN_LEFT);
-    instancesTable.addContainerProperty("start time", String.class, null, i18nManager.getMessage(Messages.PROCESS_INSTANCE_STARTED_ON), null, Table.ALIGN_LEFT);
+    instancesTable.addContainerProperty("start time", String.class, null, i18nManager.getMessage(Messages.PROCESS_INSTANCE_STARTED), null, Table.ALIGN_LEFT);
     
     instancesTable.addListener(new Property.ValueChangeListener() {
       private static final long serialVersionUID = 1L;

File: modules/activiti-osgi/src/main/java/org/activiti/osgi/Activator.java
Patch:
@@ -79,6 +79,7 @@ private static Dictionary<String,String> props(String... args) {
         return props;
     }
 
+    @SuppressWarnings({ "rawtypes" })
     private static class Service implements Runnable {
 
         private final ServiceRegistration registration;

File: modules/activiti-osgi/src/main/java/org/activiti/osgi/blueprint/BlueprintELResolver.java
Patch:
@@ -33,13 +33,15 @@ public Object getValue(ELContext context, Object base, Object property) {
 		return null;
 	}
 	
+	@SuppressWarnings("rawtypes")
 	public void bindService(JavaDelegate delegate, Map props) {
     String name = (String) props.get("osgi.service.blueprint.compname");
     delegateMap.put(name, delegate);
     LOGGER.info("added Activiti service to delegate cache " + name);
 	}
 
-	public void unbindService(JavaDelegate delegate, Map props) {
+	@SuppressWarnings("rawtypes")
+  public void unbindService(JavaDelegate delegate, Map props) {
 		String name = (String) props.get("osgi.service.blueprint.compname");
     if(delegateMap.containsKey(name)) {
     	delegateMap.remove(name);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -75,6 +75,7 @@ public class TableDataManager extends AbstractManager {
     // repository
     persistentObjectToTableNameMap.put(DeploymentEntity.class, "ACT_RE_DEPLOYMENT");
     persistentObjectToTableNameMap.put(ProcessDefinitionEntity.class, "ACT_RE_PROCDEF");
+    persistentObjectToTableNameMap.put(ModelEntity.class, "ACT_RE_MODEL");
     
     // history
     persistentObjectToTableNameMap.put(CommentEntity.class, "ACT_HI_COMMENT");

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyConnection.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.upgrade.test;
+package org.activiti.upgrade;
 
 import java.sql.Array;
 import java.sql.Blob;

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyDriver.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.upgrade.test;
+package org.activiti.upgrade;
 
 import java.sql.Connection;
 import java.sql.Driver;

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/ProxyStatement.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.upgrade.test;
+package org.activiti.upgrade;
 
 import java.io.InputStream;
 import java.io.Reader;

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/UpgradeDataGenerator.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.upgrade.test;
+package org.activiti.upgrade;
 
 import java.io.FileInputStream;
 import java.sql.DriverManager;
@@ -26,6 +26,8 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.util.ClassNameUtil;
 import org.activiti.engine.impl.util.LogUtil;
+import org.activiti.upgrade.test.UpgradeTaskOneTest;
+import org.activiti.upgrade.test.UpgradeTaskTwoTest;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/test/UpgradeTaskOneTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.activiti.engine.RuntimeService;
 import org.activiti.engine.TaskService;
 import org.activiti.engine.task.Task;
+import org.activiti.upgrade.UpgradeTestCase;
 
 
 public class UpgradeTaskOneTest extends UpgradeTestCase {

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/test/UpgradeTaskTwoTest.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import org.activiti.engine.task.Task;
+import org.activiti.upgrade.UpgradeTestCase;
 
 
 public class UpgradeTaskTwoTest extends UpgradeTestCase {
@@ -16,7 +17,7 @@ public void runInTheOldVersion() {
     processEngine.getRepositoryService()
       .createDeployment()
       .name("simpleTaskProcess")
-      .addClasspathResource("org/activiti/upgrade/test/UserTaskBeforeTest.testTaskWithExecutionVariablesTask.bpmn20.xml")
+      .addClasspathResource("org/activiti/upgrade/test/UserTaskBeforeTest.testTaskWithExecutionVariables.bpmn20.xml")
       .deploy();
 
     Map<String, Object> variables = new HashMap<String, Object>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -66,6 +66,8 @@ public class BpmnDeployer implements Deployer {
   protected IdGenerator idGenerator;
 
   public void deploy(DeploymentEntity deployment) {
+    LOG.info("Processing deployment " + deployment.getName());
+    
     List<ProcessDefinitionEntity> processDefinitions = new ArrayList<ProcessDefinitionEntity>();
     Map<String, ResourceEntity> resources = deployment.getResources();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/SerializableType.java
Patch:
@@ -57,7 +57,7 @@ public Object getValue(ValueFields valueFields) {
       }
       
     } catch (Exception e) {
-      throw new ActivitiException("coudn't deserialize object in variable '"+valueFields.getName()+"'", e);
+      throw new ActivitiException("Couldn't deserialize object in variable '"+valueFields.getName()+"'", e);
     } finally {
       IoUtil.closeSilently(bais);
     }
@@ -90,7 +90,7 @@ public static byte[] serialize(Object value, ValueFields valueFields) {
       ois = new ObjectOutputStream(baos);
       ois.writeObject(value);
     } catch (Exception e) {
-      throw new ActivitiException("coudn't serialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
+      throw new ActivitiException("Couldn't serialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
     } finally {
       IoUtil.closeSilently(ois);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/Deployment.java
Patch:
@@ -38,4 +38,6 @@ public interface Deployment {
   
   Date getDeploymentTime();
   
+  String getCategory();
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -78,6 +78,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectEventsByTaskId", "selectEventsByTaskId_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -102,6 +102,7 @@
 import org.activiti.engine.impl.persistence.deploy.Deployer;
 import org.activiti.engine.impl.persistence.deploy.DeploymentCache;
 import org.activiti.engine.impl.persistence.entity.AttachmentManager;
+import org.activiti.engine.impl.persistence.entity.ByteArrayManager;
 import org.activiti.engine.impl.persistence.entity.CommentManager;
 import org.activiti.engine.impl.persistence.entity.DeploymentManager;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionManager;
@@ -623,6 +624,7 @@ protected void initSessionFactories() {
       addSessionFactory(new GenericManagerFactory(ProcessDefinitionManager.class));
       addSessionFactory(new GenericManagerFactory(PropertyManager.class));
       addSessionFactory(new GenericManagerFactory(ResourceManager.class));
+      addSessionFactory(new GenericManagerFactory(ByteArrayManager.class));
       addSessionFactory(new GenericManagerFactory(TableDataManager.class));
       addSessionFactory(new GenericManagerFactory(TaskManager.class));
       addSessionFactory(new GenericManagerFactory(UserManager.class));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteAttachmentCmd.java
Patch:
@@ -44,7 +44,7 @@ public Object execute(CommandContext commandContext) {
 
     commandContext
       .getDbSqlSession()
-      .delete(AttachmentEntity.class, attachmentId);
+      .delete(attachment);
     
     if (attachment.getTaskId()!=null) {
       CommentManager commentManager = commandContext.getCommentManager();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentManager.java
Patch:
@@ -43,9 +43,9 @@ public void deleteAttachmentsByTaskId(String taskId) {
     for (AttachmentEntity attachment: attachments) {
       String contentId = attachment.getContentId();
       if (contentId!=null) {
-        getDbSqlSession().delete(ByteArrayEntity.class, contentId);
+        getByteArrayManager().deleteByteArrayById(contentId);
       }
-      getDbSqlSession().delete(AttachmentEntity.class, attachment.getId());
+      getDbSqlSession().delete(attachment);
     }
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionManager.java
Patch:
@@ -41,7 +41,7 @@ public void insert(EventSubscriptionEntity persistentObject) {
   }
   
   public void deleteEventSubscription(EventSubscriptionEntity persistentObject) {
-    getDbSqlSession().delete(persistentObject.getClass(), persistentObject.getId());
+    getDbSqlSession().delete(persistentObject);
     if(persistentObject instanceof SignalEventSubscriptionEntity) {
       createdSignalSubscriptions.remove(persistentObject);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -854,7 +854,7 @@ public void remove() {
     // finally delete this execution
     Context.getCommandContext()
       .getDbSqlSession()
-      .delete(ExecutionEntity.class, id);
+      .delete(this);
   }
 
   public void destroyScope(String reason) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/GroupManager.java
Patch:
@@ -50,8 +50,9 @@ public void updateGroup(GroupEntity updatedGroup) {
   }
 
   public void deleteGroup(String groupId) {
+    GroupEntity group = getDbSqlSession().selectById(GroupEntity.class, groupId);
     getDbSqlSession().delete("deleteMembershipsByGroupId", groupId);
-    getDbSqlSession().delete("deleteGroup", groupId);
+    getDbSqlSession().delete(group);
   }
 
   public GroupQuery createNewGroupQuery() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailEntity.java
Patch:
@@ -46,7 +46,7 @@ public void delete() {
       .getCommandContext()
       .getDbSqlSession();
 
-    dbSqlSession.delete(HistoricDetailEntity.class, id);
+    dbSqlSession.delete(this);
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -54,6 +54,7 @@ public void deleteHistoricProcessInstanceByProcessDefinitionId(String processDef
   public void deleteHistoricProcessInstanceById(String historicProcessInstanceId) {
     if (historyLevel>ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       CommandContext commandContext = Context.getCommandContext();
+      HistoricProcessInstanceEntity historicProcessInstance = findHistoricProcessInstance(historicProcessInstanceId);
       
       commandContext
         .getHistoricDetailManager()
@@ -71,7 +72,7 @@ public void deleteHistoricProcessInstanceById(String historicProcessInstanceId)
         .getHistoricTaskInstanceManager()
         .deleteHistoricTaskInstancesByProcessInstanceId(historicProcessInstanceId);
 
-      getDbSqlSession().delete(HistoricProcessInstanceEntity.class, historicProcessInstanceId);
+      getDbSqlSession().delete(historicProcessInstance);
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceManager.java
Patch:
@@ -90,7 +90,7 @@ public void deleteHistoricTaskInstanceById(String taskId) {
           .getAttachmentManager()
           .deleteAttachmentsByTaskId(taskId);
       
-        getDbSqlSession().delete(HistoricTaskInstanceEntity.class, taskId);
+        getDbSqlSession().delete(historicTaskInstance);
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoManager.java
Patch:
@@ -36,10 +36,10 @@ public void deleteUserInfoByUserIdAndKey(String userId, String key) {
   }
 
   public void deleteIdentityInfo(IdentityInfoEntity identityInfo) {
-    getDbSqlSession().delete(IdentityInfoEntity.class, identityInfo.getId());
+    getDbSqlSession().delete(identityInfo);
     if (IdentityInfoEntity.TYPE_USERACCOUNT.equals(identityInfo.getType())) {
       for (IdentityInfoEntity identityInfoDetail: findIdentityInfoDetails(identityInfo.getId())) {
-        getDbSqlSession().delete(IdentityInfoEntity.class, identityInfoDetail.getId());
+        getDbSqlSession().delete(identityInfoDetail);
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityLinkManager.java
Patch:
@@ -27,7 +27,7 @@
 public class IdentityLinkManager extends AbstractManager {
 
   public void deleteIdentityLink(IdentityLinkEntity identityLink) {
-    getDbSqlSession().delete(IdentityLinkEntity.class, identityLink.getId());
+    getDbSqlSession().delete(identityLink);
   }
   
   @SuppressWarnings("unchecked")

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -100,11 +100,11 @@ public void delete() {
       .getCommandContext()
       .getDbSqlSession();
 
-    dbSqlSession.delete(getClass(), id);
+    dbSqlSession.delete(this);
 
     // Also delete the job's exception byte array
     if (exceptionByteArrayId != null) {
-      dbSqlSession.delete(ByteArrayEntity.class, exceptionByteArrayId);
+      Context.getCommandContext().getByteArrayManager().deleteByteArrayById(exceptionByteArrayId);
     }
     
     // remove link to execution

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -168,7 +168,7 @@ public void deleteIdentityLink(String userId, String groupId) {
       Context
         .getCommandContext()
         .getDbSqlSession()
-        .delete(IdentityLinkEntity.class, identityLink.getId());
+        .delete(identityLink);
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -294,7 +294,7 @@ public void deleteIdentityLink(String userId, String groupId, String type) {
       Context
         .getCommandContext()
         .getDbSqlSession()
-        .delete(IdentityLinkEntity.class, identityLink.getId());
+        .delete(identityLink);
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -74,7 +74,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade) {
           .markTaskInstanceEnded(taskId, deleteReason);
       }
         
-      getDbSqlSession().delete(TaskEntity.class, task.getId());
+      getDbSqlSession().delete(task);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/UserEntity.java
Patch:
@@ -73,8 +73,8 @@ public void setPicture(Picture picture) {
     if (pictureByteArrayId!=null) {
       Context
         .getCommandContext()
-        .getDbSqlSession()
-        .delete(ByteArrayEntity.class, pictureByteArrayId);
+        .getByteArrayManager()
+        .deleteByteArrayById(pictureByteArrayId);
     }
     if (picture!=null) {
       pictureByteArray = new ByteArrayEntity(picture.getMimeType(), picture.getBytes());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/UserManager.java
Patch:
@@ -59,14 +59,14 @@ public void deleteUser(String userId) {
     UserEntity user = findUserById(userId);
     if (user!=null) {
       if (user.getPictureByteArrayId()!=null) {
-        getDbSqlSession().delete(ByteArrayEntity.class, user.getPictureByteArrayId());
+        getByteArrayManager().deleteByteArrayById(user.getPictureByteArrayId());
       }
       List<IdentityInfoEntity> identityInfos = getDbSqlSession().selectList("selectIdentityInfoByUserId", userId);
       for (IdentityInfoEntity identityInfo: identityInfos) {
         getIdentityInfoManager().deleteIdentityInfo(identityInfo);
       }
       getDbSqlSession().delete("deleteMembershipsByUserId", userId);
-      getDbSqlSession().delete("deleteUser", userId);
+      getDbSqlSession().delete(user);
     }
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/IntermediateTimerEventTest.java
Patch:
@@ -55,7 +55,7 @@ public void testExpression() {
     variables1.put("dueDate", new Date());
     
     HashMap<String, Object> variables2 = new HashMap<String, Object>();
-    variables2.put("dueDate", new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss").format(new Date()));
+    variables2.put("dueDate", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date()));
     
     // After process start, there should be timer created    
     ProcessInstance pi1 = runtimeService.startProcessInstanceByKey("intermediateTimerEventExample", variables1);
@@ -66,6 +66,7 @@ public void testExpression() {
 
     // After setting the clock to one second in the future the timers should fire
     List<Job> jobs = managementService.createJobQuery().executable().list();
+    assertEquals(2, jobs.size());
     for (Job job : jobs) {
       managementService.executeJob(job.getId());
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbIdGenerator.java
Patch:
@@ -38,7 +38,6 @@ public synchronized String getNextId() {
   }
 
   protected synchronized void getNewBlock() {
-    // TODO http://jira.codehaus.org/browse/ACT-45 use a separate 'requiresNew' command executor
     IdBlock idBlock = commandExecutor.execute(new GetNextIdBlockCmd(idBlockSize));
     this.nextId = idBlock.getNextId();
     this.lastId = idBlock.getLastId();

File: modules/activiti-spring/src/main/java/org/activiti/spring/SpringProcessEngineConfiguration.java
Patch:
@@ -71,6 +71,7 @@ public ProcessEngine buildProcessEngine() {
     defaultCommandInterceptorsTxRequired.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequired.add(new SpringTransactionInterceptor(transactionManager, TransactionTemplate.PROPAGATION_REQUIRED));
     CommandContextInterceptor commandContextInterceptor = new CommandContextInterceptor(commandContextFactory, this);
+    commandContextInterceptor.setContextReusePossible(true);
     defaultCommandInterceptorsTxRequired.add(commandContextInterceptor);
     return defaultCommandInterceptorsTxRequired;
   }
@@ -80,6 +81,7 @@ public ProcessEngine buildProcessEngine() {
     defaultCommandInterceptorsTxRequiresNew.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequiresNew.add(new SpringTransactionInterceptor(transactionManager, TransactionTemplate.PROPAGATION_REQUIRES_NEW));
     CommandContextInterceptor commandContextInterceptor = new CommandContextInterceptor(commandContextFactory, this);
+    commandContextInterceptor.setContextReusePossible(false);
     defaultCommandInterceptorsTxRequiresNew.add(commandContextInterceptor);
     return defaultCommandInterceptorsTxRequiresNew;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngines.java
Patch:
@@ -94,6 +94,7 @@ public synchronized static void init() {
       }
       for (Iterator<URL> iterator = configUrls.iterator(); iterator.hasNext();) {
         URL resource = iterator.next();
+        log.info("Initializing process engine using configuration '" + resource.toString() + "'");
         initProcessEnginFromResource(resource);
       }
       
@@ -104,6 +105,7 @@ public synchronized static void init() {
       }
       while (resources.hasMoreElements()) {
         URL resource = resources.nextElement();
+        log.info("Initializing process engine using Spring configuration '" + resource.toString() + "'");
         initProcessEngineFromSpringResource(resource);
       }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/identity/Account.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * @author Tom Baeyens
+ * 
+ * @deprecated Will be removed in Activiti 5.12
  */
 public interface Account {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/DefaultJobExecutor.java
Patch:
@@ -57,7 +57,7 @@ protected void startExecutingJobs() {
   }
     
   protected void stopExecutingJobs() {
-	stopJobAcquisitionThread();
+    stopJobAcquisitionThread();
     
     // Ask the thread pool to finish and exit
     threadPoolExecutor.shutdown();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -17,14 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.task.Attachment;
 
 
 /**
  * @author Tom Baeyens
  */
-public class AttachmentEntity implements Attachment, PersistentObject, Serializable {
+public class AttachmentEntity implements Attachment, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -14,12 +14,13 @@
 
 import java.io.Serializable;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 
 /**
  * @author Tom Baeyens
  */
-public class ByteArrayEntity implements Serializable, PersistentObject {
+public class ByteArrayEntity implements Serializable, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CommentEntity.java
Patch:
@@ -35,6 +35,9 @@ public class CommentEntity implements Comment, Event, PersistentObject, Serializ
   public static final String TYPE_COMMENT = "comment";
   
   protected String id;
+  
+  // If comments would be removeable, revision needs to be added!
+  
   protected String type;
   protected String userId;
   protected Date time;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.event.EventHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -30,7 +31,7 @@
 /**
  * @author Daniel Meyer
  */
-public abstract class EventSubscriptionEntity implements PersistentObject, Serializable {
+public abstract class EventSubscriptionEntity implements PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.history.handler.ActivityInstanceEndHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -61,7 +62,7 @@
  * @author Daniel Meyer
  * @author Falko Menge
  */
-public class ExecutionEntity extends VariableScopeImpl implements ActivityExecution, ExecutionListenerExecution, Execution, PvmExecution, ProcessInstance, InterpretableExecution, PersistentObject {
+public class ExecutionEntity extends VariableScopeImpl implements ActivityExecution, ExecutionListenerExecution, Execution, PvmExecution, ProcessInstance, InterpretableExecution, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -18,17 +18,16 @@
 import java.util.List;
 
 import org.activiti.engine.history.HistoricVariableInstance;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 
 /**
  * @author Christian Lipphardt (camunda)
  */
-public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, Serializable {
+public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoEntity.java
Patch:
@@ -17,14 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.identity.Account;
 
 
 /**
  * @author Tom Baeyens
  */
-public class IdentityInfoEntity implements PersistentObject, Account, Serializable {
+public class IdentityInfoEntity implements PersistentObject, HasRevision, Account, Serializable {
   
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
@@ -35,7 +36,7 @@
  * @author Dave Syer
  * @author Frederik Heremans
  */
-public abstract class JobEntity implements Serializable, Job, PersistentObject {
+public abstract class JobEntity implements Serializable, Job, PersistentObject, HasRevision {
 
   public static final boolean DEFAULT_EXCLUSIVE = true;
   public static final int DEFAULT_RETRIES = 3;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.identity.Authentication;
@@ -43,7 +44,7 @@
  * @author Tom Baeyens
  * @author Daniel Meyer
  */
-public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject {
+public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/PropertyEntity.java
Patch:
@@ -15,14 +15,15 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 
 
 
 /**
  * @author Tom Baeyens
  */
-public class PropertyEntity implements PersistentObject, Serializable {
+public class PropertyEntity implements PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -16,17 +16,16 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 
 /**
  * @author Tom Baeyens
  */
-public class VariableInstanceEntity implements ValueFields, PersistentObject, Serializable {
+public class VariableInstanceEntity implements ValueFields, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailTestCase.java
Patch:
@@ -37,7 +37,7 @@ protected void setUp() throws Exception {
         wiser.start();
         serverUpAndRunning = true;
       } catch (RuntimeException e) { // Fix for slow port-closing Jenkins
-        if (e.getMessage().toLowerCase().contains("BindException")) {
+        if (e.getMessage().toLowerCase().contains("bindexception")) {
           Thread.sleep(250L);
         }
       }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/RepeatingServiceTaskTest.java
Patch:
@@ -25,10 +25,10 @@
 public class RepeatingServiceTaskTest extends PluggableActivitiTestCase {
   
 //  @Deployment
-//  public void testMultipleInvocationsInSameTransation() {
+  public void testMultipleInvocationsInSameTransation() {
 //    ProcessInstance processInstance = 
 //        runtimeService.startProcessInstanceByKey("repeating", CollectionUtil.singletonMap("count", 0));
 //    assertTrue(processInstance.isEnded());
-//  }
+  }
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -46,5 +46,5 @@ public void testTaskPropertiesNotNull() {
       assertEquals(0, taskService.getTaskEvents(task.getId()).size());
     }
   }
-
+  
 }

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/servicetask/BoundaryErrorEventSpringTest.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * @see http://jira.codehaus.org/browse/ACT-1166
- * @author Angel López Cima
+ * @author Angel Lopez Cima
  * @author Falko Menge
  */
 @ContextConfiguration("classpath:org/activiti/spring/test/servicetask/serviceraskSpringTestCatchError-context.xml")

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskInvolvedPeopleComponent.java
Patch:
@@ -183,7 +183,8 @@ protected void initInvolvedPeople() {
     List<IdentityLink> identityLinks = taskService.getIdentityLinksForTask(task.getId());
     for (final IdentityLink identityLink : identityLinks) { 
       if (identityLink.getUserId() != null) { // only user identity links, ignoring the group ids
-        if (!IdentityLinkType.ASSIGNEE.equals(identityLink.getType())) {
+        if (!IdentityLinkType.ASSIGNEE.equals(identityLink.getType())
+                && !IdentityLinkType.OWNER.equals(identityLink.getType())) {
           UserDetailsComponent involvedDetails = new UserDetailsComponent(
                   identityLink.getUserId(), 
                   identityLink.getType(),

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/identity/Account.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * @author Tom Baeyens
+ * 
+ * @deprecated Will be removed in Activiti 5.12
  */
 public interface Account {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AcquireJobsRunnable.java
Patch:
@@ -92,7 +92,7 @@ public synchronized void run() {
           log.fine("Optimistic locking exception during job acquisition. If you have multiple job executors running against the same database, " +
           		"this exception means that this thread tried to acquire a job, which already was acquired by another job executor acquisition thread." +
           		"This is expected behavior in a clustered environment. " +
-          		"You can ignore this message if you indeed have multiple job executor acquisiation threads running against the same database. " +
+          		"You can ignore this message if you indeed have multiple job executor acquisition threads running against the same database. " +
           		"Exception message: " + optimisticLockingException.getMessage());
         }
       } catch (Exception e) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -17,14 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.task.Attachment;
 
 
 /**
  * @author Tom Baeyens
  */
-public class AttachmentEntity implements Attachment, PersistentObject, Serializable {
+public class AttachmentEntity implements Attachment, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -14,12 +14,13 @@
 
 import java.io.Serializable;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 
 /**
  * @author Tom Baeyens
  */
-public class ByteArrayEntity implements Serializable, PersistentObject {
+public class ByteArrayEntity implements Serializable, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CommentEntity.java
Patch:
@@ -35,6 +35,9 @@ public class CommentEntity implements Comment, Event, PersistentObject, Serializ
   public static final String TYPE_COMMENT = "comment";
   
   protected String id;
+  
+  // If comments would be removeable, revision needs to be added!
+  
   protected String type;
   protected String userId;
   protected Date time;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.event.EventHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -30,7 +31,7 @@
 /**
  * @author Daniel Meyer
  */
-public abstract class EventSubscriptionEntity implements PersistentObject, Serializable {
+public abstract class EventSubscriptionEntity implements PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.history.handler.ActivityInstanceEndHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -61,7 +62,7 @@
  * @author Daniel Meyer
  * @author Falko Menge
  */
-public class ExecutionEntity extends VariableScopeImpl implements ActivityExecution, ExecutionListenerExecution, Execution, PvmExecution, ProcessInstance, InterpretableExecution, PersistentObject {
+public class ExecutionEntity extends VariableScopeImpl implements ActivityExecution, ExecutionListenerExecution, Execution, PvmExecution, ProcessInstance, InterpretableExecution, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -18,17 +18,16 @@
 import java.util.List;
 
 import org.activiti.engine.history.HistoricVariableInstance;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 
 /**
  * @author Christian Lipphardt (camunda)
  */
-public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, Serializable {
+public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoEntity.java
Patch:
@@ -17,14 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.identity.Account;
 
 
 /**
  * @author Tom Baeyens
  */
-public class IdentityInfoEntity implements PersistentObject, Account, Serializable {
+public class IdentityInfoEntity implements PersistentObject, HasRevision, Account, Serializable {
   
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
@@ -35,7 +36,7 @@
  * @author Dave Syer
  * @author Frederik Heremans
  */
-public abstract class JobEntity implements Serializable, Job, PersistentObject {
+public abstract class JobEntity implements Serializable, Job, PersistentObject, HasRevision {
 
   public static final boolean DEFAULT_EXCLUSIVE = true;
   public static final int DEFAULT_RETRIES = 3;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.identity.Authentication;
@@ -43,7 +44,7 @@
  * @author Tom Baeyens
  * @author Daniel Meyer
  */
-public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject {
+public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/PropertyEntity.java
Patch:
@@ -15,14 +15,15 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 
 
 
 /**
  * @author Tom Baeyens
  */
-public class PropertyEntity implements PersistentObject, Serializable {
+public class PropertyEntity implements PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -16,17 +16,16 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 
 /**
  * @author Tom Baeyens
  */
-public class VariableInstanceEntity implements ValueFields, PersistentObject, Serializable {
+public class VariableInstanceEntity implements ValueFields, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -46,5 +46,5 @@ public void testTaskPropertiesNotNull() {
       assertEquals(0, taskService.getTaskEvents(task.getId()).size());
     }
   }
-
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/DefaultJobExecutor.java
Patch:
@@ -57,7 +57,7 @@ protected void startExecutingJobs() {
   }
     
   protected void stopExecutingJobs() {
-	stopJobAcquisitionThread();
+    stopJobAcquisitionThread();
     
     // Ask the thread pool to finish and exit
     threadPoolExecutor.shutdown();

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/servicetask/BoundaryErrorEventSpringTest.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * @see http://jira.codehaus.org/browse/ACT-1166
- * @author Angel López Cima
+ * @author Angel Lopez Cima
  * @author Falko Menge
  */
 @ContextConfiguration("classpath:org/activiti/spring/test/servicetask/serviceraskSpringTestCatchError-context.xml")

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngines.java
Patch:
@@ -94,6 +94,7 @@ public synchronized static void init() {
       }
       for (Iterator<URL> iterator = configUrls.iterator(); iterator.hasNext();) {
         URL resource = iterator.next();
+        log.info("Initializing process engine using configuration '" + resource.toString() + "'");
         initProcessEnginFromResource(resource);
       }
       
@@ -104,6 +105,7 @@ public synchronized static void init() {
       }
       while (resources.hasMoreElements()) {
         URL resource = resources.nextElement();
+        log.info("Initializing process engine using Spring configuration '" + resource.toString() + "'");
         initProcessEngineFromSpringResource(resource);
       }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailTestCase.java
Patch:
@@ -37,7 +37,7 @@ protected void setUp() throws Exception {
         wiser.start();
         serverUpAndRunning = true;
       } catch (RuntimeException e) { // Fix for slow port-closing Jenkins
-        if (e.getMessage().toLowerCase().contains("BindException")) {
+        if (e.getMessage().toLowerCase().contains("bindexception")) {
           Thread.sleep(250L);
         }
       }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -47,10 +47,9 @@ public void testDurationStartTimerEvent() throws Exception {
 
     List<ProcessInstance> pi = runtimeService.createProcessInstanceQuery().processDefinitionKey("startTimerEventExample")
         .list();
-    assertEquals(99, managementService.createJobQuery().singleResult().getRetries());
     assertEquals(1, pi.size());
 
-    
+    assertEquals(0, jobQuery.count());
 
 
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -47,9 +47,10 @@ public void testDurationStartTimerEvent() throws Exception {
 
     List<ProcessInstance> pi = runtimeService.createProcessInstanceQuery().processDefinitionKey("startTimerEventExample")
         .list();
+    assertEquals(99, managementService.createJobQuery().singleResult().getRetries());
     assertEquals(1, pi.size());
 
-    assertEquals(0, jobQuery.count());
+    
 
 
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryProperty.java
Patch:
@@ -32,8 +32,8 @@ public class ProcessInstanceQueryProperty implements QueryProperty {
   private static final Map<String, ProcessInstanceQueryProperty> properties = new HashMap<String, ProcessInstanceQueryProperty>();
 
   public static final ProcessInstanceQueryProperty PROCESS_INSTANCE_ID = new ProcessInstanceQueryProperty("RES.ID_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("RES.KEY_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("RES.ID_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("P.KEY_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("P.ID_");
   
   private String name;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.impl.db;
 
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -77,7 +76,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
-    addDatabaseSpecificStatement("postgres", "selectHistoricVariableInstanceByQueryCriteria", "selectHistoricVariableInstanceByQueryCriteria_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -117,7 +117,6 @@
 import org.activiti.engine.impl.util.xml.Parse;
 import org.activiti.engine.impl.variable.VariableDeclaration;
 import org.activiti.engine.repository.ProcessDefinition;
-import org.drools.core.util.StringUtils;
 
 /**
  * Specific parsing of one BPMN 2.0 XML file, created by the {@link BpmnParser}.
@@ -846,7 +845,7 @@ protected AbstractDataAssociation parseDataInputAssociation(Element dataAssociat
       targetRef = targetElement.getText();
     }
     
-    if (StringUtils.isEmpty(targetRef)) {
+    if (targetRef != null && targetRef.equals("")) {
       addError("targetRef is required", dataAssociationElement);
     }
     

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -406,7 +406,7 @@ public void setVariable(String variableName, Object value) {
   // ----------------------------------- Getters / Setters
 
   /*
-   * Note that Producers should go into {@link BusinessProcessProducers} in
+   * Note that Producers should go into {@link CurrentProcessInstance} in
    * order to allow for specializing {@link BusinessProcess}.
    */
 

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/ProcessVariables.java
Patch:
@@ -25,8 +25,8 @@
 import org.activiti.cdi.impl.ProcessVariableMap;
 
 /**
- * Allows to access the process variables of the managed process instance. A
- * process instnace cyn be managed, using the {@link BusinessProcess}-bean.
+ * Allows to access the process variables of a managed process instance.
+ * A process instance can be managed, using the {@link BusinessProcess}-bean.
  * 
  * @author Daniel Meyer
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -40,7 +40,7 @@ public void execute(ActivityExecution execution) throws Exception {
   }
   
   
-  // If we use this implementation, we run into trouble in the DbSqlSession
+  // If we use this implementation, we run into trouble in the DbSqlSession, see ACT-1382
   
 //  public void execute(ActivityExecution execution) throws Exception {
 //    

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -100,7 +100,7 @@ public TimerEntity prepareTimerEntity(ExecutionEntity executionEntity) {
     BusinessCalendar businessCalendar = Context
         .getProcessEngineConfiguration()
         .getBusinessCalendarManager()
-        .getBusinessCalendar(type.caledarName);
+        .getBusinessCalendar(type.calendarName);
     
     if (description==null) {
       // Prefent NPE from happening in the next line

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationType.java
Patch:
@@ -17,14 +17,13 @@
 import org.activiti.engine.impl.calendar.CycleBusinessCalendar;
 import org.activiti.engine.impl.calendar.DueDateBusinessCalendar;
 import org.activiti.engine.impl.calendar.DurationBusinessCalendar;
-import org.activiti.engine.impl.calendar.DurationHelper;
 
 public enum TimerDeclarationType {
   DATE(DueDateBusinessCalendar.NAME),DURATION(DurationBusinessCalendar.NAME),CYCLE(CycleBusinessCalendar.NAME);
 
-  public final String caledarName;
+  public final String calendarName;
 
   TimerDeclarationType(String caledarName) {
-    this.caledarName = caledarName;
+    this.calendarName = caledarName;
   }
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1106,7 +1106,7 @@ public void testNativeQuery() {
     long piCount = runtimeService.createProcessInstanceQuery().count();
     
     assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(ProcessInstance.class)).list().size());
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*= FROM " + managementService.getTableName(ProcessInstance.class)).count());
+    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(ProcessInstance.class)).count());
   }  
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -794,7 +794,7 @@ public void testNativeQuery() {
     assertEquals(12, taskService.createNativeTaskQuery().sql("SELECT * FROM " + managementService.getTableName(Task.class)).list().size());
     assertEquals(12, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class)).count());
     
-    assertEquals(144, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM ACT_RU_TASK T1, ACT_RU_TASK T1").count());
+    assertEquals(144, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM ACT_RU_TASK T1, ACT_RU_TASK T2").count());
     
     // join task and variable instances
     assertEquals(1, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").count());    

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1058,8 +1058,8 @@ public void testNativeQuery() {
     
     long executionCount = runtimeService.createExecutionQuery().count();
     
-    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().from(managementService.getTableName(Execution.class)).list().size());
-    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().from(managementService.getTableName(Execution.class)).count());
+    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().sql("SELECT * FROM " + managementService.getTableName(Execution.class)).list().size());
+    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Execution.class)).count());
   }
 
   @Deployment(resources={"org/activiti/engine/test/api/runtime/concurrentExecution.bpmn20.xml"})

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1105,8 +1105,8 @@ public void testNativeQuery() {
     
     long piCount = runtimeService.createProcessInstanceQuery().count();
     
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().from(managementService.getTableName(ProcessInstance.class)).list().size());
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().from(managementService.getTableName(ProcessInstance.class)).count());
+    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(ProcessInstance.class)).list().size());
+    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*= FROM " + managementService.getTableName(ProcessInstance.class)).count());
   }  
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/form/EnumFormType.java
Patch:
@@ -55,7 +55,7 @@ public String convertModelValueToFormValue(Object modelValue) {
       }
       validateValue((String) modelValue);
     }
-    return null;
+    return (String) modelValue;
   }
   
   protected void validateValue(String value) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/VariableType.java
Patch:
@@ -20,7 +20,7 @@
 public interface VariableType {
 
   /**
-   * name of variable type (limited to 25 characters length)
+   * name of variable type (limited to 100 characters length)
    */
   String getTypeName();
   boolean isCachable();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/VariableType.java
Patch:
@@ -19,6 +19,9 @@
  */
 public interface VariableType {
 
+  /**
+   * name of variable type (limited to 25 characters length)
+   */
   String getTypeName();
   boolean isCachable();
   boolean isAbleToStore(Object value);

File: modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/api/task/TaskOperationResource.java
Patch:
@@ -40,8 +40,8 @@ public ObjectNode executeTaskOperation(Representation entity) {
     String operation = (String) getRequest().getAttributes().get("operation");
     try {
       Map<String, Object> variables = new HashMap<String, Object>();
-      if (entity != null && StringUtils.isNotEmpty(entity.getText())) {
-        String startParams = entity.getText();
+      String startParams = entity.getText();
+      if (StringUtils.isNotEmpty(startParams)) {
         JsonNode startJSON = new ObjectMapper().readTree(startParams);
         Iterator<String> itName = startJSON.getFieldNames();
         while(itName.hasNext()) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -209,8 +209,9 @@ public List selectList(String statement, ListQueryParameterObject parameter) {
     }
     List loadedObjects = null;
     String databaseType = dbSqlSessionFactory.databaseType;
-    if(databaseType.equals("mssql") || databaseType.equals("db2")) {
+    if(databaseType.equals("mssql")) {
       // use mybatis paging (native database paging not yet implemented)
+      log.log(Level.FINE, "Using mybatis paging (native database paging not yet implemented for mssql)");
       loadedObjects = sqlSession.selectList(statement, parameter, new RowBounds(parameter.getFirstResult(), parameter.getMaxResults()));
     } else {
       // use native database paging

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/JuelExpression.java
Patch:
@@ -56,9 +56,9 @@ public Object getValue(VariableScope variableScope) {
     } catch (MethodNotFoundException mnfe) {
       throw new ActivitiException("Unknown method used in expression", mnfe);
     } catch(ELException ele) {
-      throw new ActivitiException("Error while evalutaing expression", ele);
+      throw new ActivitiException("Error while evaluating expression", ele);
     } catch (Exception e) {
-      throw new ActivitiException("Error while evalutaing expression", e);
+      throw new ActivitiException("Error while evaluating expression", e);
     }
   }
   
@@ -70,7 +70,7 @@ public void setValue(Object value, VariableScope variableScope) {
         .getDelegateInterceptor()
         .handleInvocation(invocation);
     }catch (Exception e) {
-      throw new ActivitiException("Error while evalutaing expression", e);
+      throw new ActivitiException("Error while evaluating expression", e);
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/history/HistoricProcessVariableQuery.java
Patch:
@@ -35,7 +35,7 @@ public interface HistoricProcessVariableQuery extends Query<HistoricProcessVaria
   /**
    * only select historic process variables with the given name and value
    */
-  HistoricProcessVariableQuery variableEquals(String variableName, Object variableValue);
+  HistoricProcessVariableQuery variableValueEquals(String variableName, Object variableValue);
 
   HistoricProcessVariableQuery orderByProcessInstanceId();
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessVariableQueryImpl.java
Patch:
@@ -78,7 +78,7 @@ public HistoricProcessVariableQuery variableName(String variableName) {
     return this;
   }
 
-  public HistoricProcessVariableQuery variableEquals(String variableName, Object variableValue) {
+  public HistoricProcessVariableQuery variableValueEquals(String variableName, Object variableValue) {
     if (variableName == null) {
       throw new ActivitiException("variableName is null");
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/HistoryParseListener.java
Patch:
@@ -60,6 +60,9 @@ public void parseProcess(Element processElement, ProcessDefinitionEntity process
     if (activityHistoryEnabled(processDefinition, historyLevel)) {
       processDefinition.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, new ProcessInstanceEndHandler());
     }
+    if (variableHistoryEnabled(processDefinition, historyLevel)) {
+      processDefinition.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, HISTORIC_PROCESS_VARIABLE_HANDLER);
+    }
   }
 
   public void parseExclusiveGateway(Element exclusiveGwElement, ScopeImpl scope, ActivityImpl activity) {
@@ -124,9 +127,6 @@ public void parseSendTask(Element sendTaskElement, ScopeImpl scope, ActivityImpl
 
   public void parseEndEvent(Element endEventElement, ScopeImpl scope, ActivityImpl activity) {
     addActivityHandlers(activity);
-    if (variableHistoryEnabled(activity,historyLevel)) {
-      activity.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, HISTORIC_PROCESS_VARIABLE_HANDLER, -1);
-    }
   }
 
   public void parseParallelGateway(Element parallelGwElement, ScopeImpl scope, ActivityImpl activity) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -67,6 +67,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectHistoricProcessVariableByQueryCriteria", "selectHistoricProcessVariableByQueryCriteria_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -810,6 +810,7 @@ private void executeSchemaResource(String operation, String component, String re
             throw new ActivitiException("database update java class '"+upgradestepClassName+"' can't be instantiated: "+e.getMessage(), e);
           }
           try {
+            log.fine("executing upgrade step java class "+upgradestepClassName);
             dbUpgradeStep.execute(this);
           } catch (Exception e) {
             throw new ActivitiException("error while executing database update java class '"+upgradestepClassName+"': "+e.getMessage(), e);
@@ -822,6 +823,7 @@ private void executeSchemaResource(String operation, String component, String re
             Statement jdbcStatement = connection.createStatement();
             try {
               // no logging needed as the connection will log it
+              log.fine("SQL: "+sqlStatement);
               jdbcStatement.execute(sqlStatement);
               jdbcStatement.close();
             } catch (Exception e) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/AbstractEventHandler.java
Patch:
@@ -41,7 +41,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
               + "no activity associated with event subscription");
     }
 
-    if (!execution.getActivity().equals(activity)) {
+    if (!activity.equals( execution.getActivity() )) {
       execution.setActivity(activity);
     }
 

File: modules/activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -626,7 +626,7 @@ public void testDeleteHistoricProcessInstance() {
     taskService.complete(task.getId());
     
     assertEquals(1, historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
-    assertEquals(2, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count());
+    assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count());
     assertEquals(4, historyService.createHistoricDetailQuery().processInstanceId(processInstance.getId()).count());
     assertEquals(1, historyService.createHistoricTaskInstanceQuery().processInstanceId(processInstance.getId()).count());
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/HistoryParseListener.java
Patch:
@@ -105,7 +105,7 @@ public void parseSubProcess(Element subProcessElement, ScopeImpl scope, Activity
   }
 
   public void parseStartEvent(Element startEventElement, ScopeImpl scope, ActivityImpl activity) {
-    if (fullHistoryEnabled(historyLevel)) {
+    if (activityHistoryEnabled(activity, historyLevel)) {
       activity.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, START_EVENT_END_HANDLER);
     }
   }

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -169,7 +169,7 @@ public ProcessInstance startProcessByKey(String key, String businessKey, Map<Str
     return instance;
   }
 
-  public ProcessInstance startProcessInstanceByMessage(String messageName) { 
+  public ProcessInstance startProcessByMessage(String messageName) { 
     validateValidUsage();
     
     Map<String, Object> cachedVariables = getAndClearCachedVariables();
@@ -178,7 +178,7 @@ public ProcessInstance startProcessInstanceByMessage(String messageName) {
     return processInstance;
   }
 
-  public ProcessInstance startProcessInstanceByMessage(String messageName, Map<String, Object> processVariables) { 
+  public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) { 
     validateValidUsage();
     
     Map<String, Object> cachedVariables = getAndClearCachedVariables();
@@ -188,7 +188,7 @@ public ProcessInstance startProcessInstanceByMessage(String messageName, Map<Str
     return processInstance;
   }
 
-  public ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey, Map<String, Object> processVariables) { 
+  public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) { 
     validateValidUsage();
     
     Map<String, Object> cachedVariables = getAndClearCachedVariables();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2618,7 +2618,7 @@ public ActivityImpl parseCallActivity(Element callActivityElement, ScopeImpl sco
 
     CallActivityBehavior callActivityBehaviour = null;
     String expressionRegex = "\\$+\\{+.+\\}";
-    if (calledElement.matches(expressionRegex)) {
+    if (calledElement != null && calledElement.matches(expressionRegex)) {
       callActivityBehaviour = new CallActivityBehavior(expressionManager.createExpression(calledElement));
     } else {
       callActivityBehaviour = new CallActivityBehavior(calledElement);

File: modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/api/process/ProcessInstanceDiagramResource.java
Patch:
@@ -22,6 +22,7 @@
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
+import org.restlet.data.MediaType;
 import org.restlet.representation.InputRepresentation;
 import org.restlet.resource.Get;
 
@@ -53,7 +54,7 @@ public InputRepresentation getInstanceDiagram() {
     if (pde != null && pde.isGraphicalNotationDefined()) {
       InputStream resource = ProcessDiagramGenerator.generateDiagram(pde, "png", ActivitiUtil.getRuntimeService().getActiveActivityIds(processInstanceId));
 
-      InputRepresentation output = new InputRepresentation(resource);
+      InputRepresentation output = new InputRepresentation(resource, MediaType.IMAGE_PNG);
       return output;
       
     } else {

File: modules/activiti-spring/src/main/java/org/activiti/spring/ProcessEngineFactoryBean.java
Patch:
@@ -59,9 +59,9 @@ public ProcessEngine getObject() throws Exception {
   }
 
   protected void initializeExpressionManager() {
-    if (applicationContext != null) {
+    if (processEngineConfiguration.getExpressionManager() == null && applicationContext != null) {
       processEngineConfiguration.setExpressionManager(
-        new SpringExpressionManager(applicationContext, processEngineConfiguration.getBeans()));
+          new SpringExpressionManager(applicationContext, processEngineConfiguration.getBeans()));
     }
   }
   

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/form/BooleanFormPropertyRenderer.java
Patch:
@@ -36,7 +36,8 @@ public Field getPropertyField(FormProperty formProperty) {
     checkBox.setEnabled(formProperty.isWritable());
 
     if (formProperty.getValue() != null) {
-      checkBox.setValue(formProperty.getValue());
+      Boolean value = new Boolean(Boolean.parseBoolean(formProperty.getValue()));
+      checkBox.setValue(value); 
     }
 
     return checkBox;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -36,7 +36,7 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_DESCRIPTION = new HistoricTaskInstanceQueryProperty("DESCRIPTION_");
   public static final HistoricTaskInstanceQueryProperty TASK_ASSIGNEE = new HistoricTaskInstanceQueryProperty("ASSIGNEE_");
   public static final HistoricTaskInstanceQueryProperty TASK_OWNER = new HistoricTaskInstanceQueryProperty("OWNER_");
-  public static final HistoricTaskInstanceQueryProperty TASK_DEFINITION_KEY = new HistoricTaskInstanceQueryProperty("TASK_DEF_ID_");
+  public static final HistoricTaskInstanceQueryProperty TASK_DEFINITION_KEY = new HistoricTaskInstanceQueryProperty("TASK_DEF_KEY_");
   public static final HistoricTaskInstanceQueryProperty DELETE_REASON = new HistoricTaskInstanceQueryProperty("DELETE_REASON_");
   public static final HistoricTaskInstanceQueryProperty START = new HistoricTaskInstanceQueryProperty("HTI.START_TIME_");
   public static final HistoricTaskInstanceQueryProperty END = new HistoricTaskInstanceQueryProperty("HTI.END_TIME_");

File: modules/activiti-cdi/src/test/java/org/activiti/cdi/test/impl/bpmn/SignalEventTest.java
Patch:
@@ -78,8 +78,8 @@ public void execute(DelegateExecution execution) throws Exception {
   }
 
   @Test
-  @Deployment(resources = {"org/activiti/cdi/test/bpmn/SignalEventTests.catchAlertSignalBoundaryWithReceiveTask.bpmn20.xml", 
-                          "org/activiti/cdi/test/bpmn/SignalEventTests.throwAlertSignalWithDelegate.bpmn20.xml"})
+  @Deployment(resources = {"org/activiti/cdi/test/impl/bpmn/SignalEventTests.catchAlertSignalBoundaryWithReceiveTask.bpmn20.xml", 
+                          "org/activiti/cdi/test/impl/bpmn/SignalEventTests.throwAlertSignalWithDelegate.bpmn20.xml"})
   public void testSignalCatchBoundaryWithVariables() throws InterruptedException {
     HashMap<String, Object> variables1 = new HashMap<String, Object>();
     variables1.put("processName", "catchSignal");

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageStartEventTest.java
Patch:
@@ -216,7 +216,7 @@ public void testMultipleMessageStartEvents() {
       runtimeService.startProcessInstanceByKey("testProcess");
       fail("exception expected");
     }catch (ActivitiException e) {
-      assertTrue("different exception expected", e.getMessage().contains("Cannot start process instance, initial is null"));
+      assertTrue("different exception expected, not " + e.getMessage(), e.getMessage().contains("has no default start activity"));
     }
     
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/SerializableType.java
Patch:
@@ -90,7 +90,7 @@ public static byte[] serialize(Object value, ValueFields valueFields) {
       ois = new ObjectOutputStream(baos);
       ois.writeObject(value);
     } catch (Exception e) {
-      throw new ActivitiException("coudn't deserialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
+      throw new ActivitiException("coudn't serialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
     } finally {
       IoUtil.closeSilently(ois);
     }

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/impl/context/ContextAssociationManager.java
Patch:
@@ -69,7 +69,7 @@ public interface ContextAssociationManager {
   /**
    * get a process variable
    */
-  public <T> T getVariable(String variableName);
+  public Object getVariable(String variableName);
 
   /**  
    * @return a map of process variables cached between flushes

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/impl/context/DefaultContextAssociationManager.java
Patch:
@@ -195,12 +195,12 @@ public Execution getExecution() {
   }
 
   @Override
-  public <T> T getVariable(String variableName) {
+  public Object getVariable(String variableName) {
     ExecutionEntity execution = getExecutionFromContext();
     if(execution != null) {
-      return (T) execution.getVariable(variableName);
+      return execution.getVariable(variableName);
     } else {
-      return (T) getScopedAssociation().getVariable(variableName);  
+      return getScopedAssociation().getVariable(variableName);  
     }
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -46,6 +46,8 @@ public interface TaskService {
 	/**
 	 * Saves the given task to the persistent data store. If the task is already
 	 * present in the persistent store, it is updated.
+	 * After a new task has been saved, the task instance passed into this method
+	 * is updated with the id of the newly created task.
 	 * @param task the task, cannot be null.
 	 */
 	void saveTask(Task task);

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -83,11 +83,12 @@ public interface TaskService {
 	 /**
    * Claim responsibility for a task: the given user is made assignee for the task.
    * The difference with {@link #setAssignee(String, String)} is that here 
-   * a check is done if the provided user is known by the identity component.
+   * a check is done if the task already has a user assigned to it.
+   * No check is done whether the user is known by the identity component.
    * @param taskId task to claim, cannot be null.
    * @param userId user that claims the task. When userId is null the task is unclaimed,
    * assigned to no one.
-   * @throws ActivitiException when the user or task doesn't exist or when the task
+   * @throws ActivitiException when the task doesn't exist or when the task
    * is already claimed by another user.
    */
   void claim(String taskId, String userId);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/ServiceTaskVariablesTest.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author Daniel Meyer
  */
-public class ServiceTaskVariablesTest extends PluggableActivitiTestCase {
+public abstract class ServiceTaskVariablesTest extends PluggableActivitiTestCase {
   
   static boolean isNullInDelegate2;
   static boolean isNullInDelegate3;
@@ -112,6 +112,6 @@ public void FAILING_testSerializedVariablesThirdAsync() {
     }
     
   }
-  
+
 }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/multiinstance/MultiInstanceTest.java
Patch:
@@ -575,7 +575,7 @@ public void testParallelSubProcessWithTimer() {
   @Deployment
   public void testParallelSubProcessCompletionCondition() {
     String procId = runtimeService.startProcessInstanceByKey("miParallelSubprocessCompletionCondition").getId();
-    List<Task> tasks = taskService.createTaskQuery().orderByTaskId().asc().list();
+    List<Task> tasks = taskService.createTaskQuery().orderByExecutionId().asc().list();
     assertEquals(4, tasks.size());
     
     for (int i=0; i<2; i++) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -38,8 +38,8 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_OWNER = new HistoricTaskInstanceQueryProperty("OWNER_");
   public static final HistoricTaskInstanceQueryProperty TASK_DEFINITION_KEY = new HistoricTaskInstanceQueryProperty("TASK_DEF_ID_");
   public static final HistoricTaskInstanceQueryProperty DELETE_REASON = new HistoricTaskInstanceQueryProperty("DELETE_REASON_");
-  public static final HistoricTaskInstanceQueryProperty START = new HistoricTaskInstanceQueryProperty("START_TIME_");
-  public static final HistoricTaskInstanceQueryProperty END = new HistoricTaskInstanceQueryProperty("END_TIME_");
+  public static final HistoricTaskInstanceQueryProperty START = new HistoricTaskInstanceQueryProperty("HTI.START_TIME_");
+  public static final HistoricTaskInstanceQueryProperty END = new HistoricTaskInstanceQueryProperty("HTI.END_TIME_");
   public static final HistoricTaskInstanceQueryProperty DURATION = new HistoricTaskInstanceQueryProperty("DURATION_");
   public static final HistoricTaskInstanceQueryProperty TASK_PRIORITY = new HistoricTaskInstanceQueryProperty("PRIORITY_");
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/diagram/ProcessDiagramCanvas.java
Patch:
@@ -492,9 +492,9 @@ public void drawActivityMarkers(int x, int y, int width, int height, boolean mul
       }
     } else {
       if (multiInstanceSequential) {
-        drawMultiInstanceMarker(false, x, y, width, height);
-      } else if (multiInstanceParallel) {
         drawMultiInstanceMarker(true, x, y, width, height);
+      } else if (multiInstanceParallel) {
+        drawMultiInstanceMarker(false, x, y, width, height);
       }
     }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2166,7 +2166,7 @@ protected TaskListener parseTaskListener(Element taskListenerElement) {
     } else if (delegateExpression != null) {
       taskListener = new DelegateExpressionTaskListener(expressionManager.createExpression(delegateExpression));
     } else {
-      addError("Element 'class' or 'expression' is mandatory on taskListener", taskListenerElement);
+      addError("Element 'class', 'expression' or 'delegateExpression' is mandatory on taskListener", taskListenerElement);
     }
     return taskListener;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2143,7 +2143,7 @@ protected void parseTaskListeners(Element userTaskElement, TaskDefinition taskDe
             TaskListener taskListener = parseTaskListener(taskListenerElement);
             taskDefinition.addTaskListener(eventName, taskListener);
           } else {
-            addError("Invalid eventName for taskListener: choose 'create' |'assignment'", userTaskElement);
+            addError("Invalid eventName for taskListener: choose 'create' | 'assignment' | 'complete'", userTaskElement);
           }
         } else {
           addError("Event is mandatory on taskListener", userTaskElement);

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/authorization/StartAuthorizationTest.java
Patch:
@@ -270,15 +270,15 @@ public void testProcessDefinitionList() throws Exception {
               .createProcessDefinitionQuery().processDefinitionKey("process2")
               .singleResult();      
       List<Group> authorizedGroups =  ProcessEngines.getDefaultProcessEngine().getIdentityService()
-          .createGroupQuery().potentialStarter(latestProcessDef.getId()).orderByGroupId().asc().list();
+          .createGroupQuery().potentialStarter(latestProcessDef.getId()).list();
       assertEquals(0, authorizedGroups.size());
       
       // Process 3 has 3 groups as authorized starter groups
       latestProcessDef = repositoryService
               .createProcessDefinitionQuery().processDefinitionKey("process4")
               .singleResult();      
       authorizedGroups =  ProcessEngines.getDefaultProcessEngine().getIdentityService()
-          .createGroupQuery().potentialStarter(latestProcessDef.getId()).list();
+          .createGroupQuery().potentialStarter(latestProcessDef.getId()).orderByGroupId().asc().list();
       assertEquals(3, authorizedGroups.size());
       assertEquals("group1", authorizedGroups.get(0).getId());
       assertEquals("group2", authorizedGroups.get(1).getId());

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/authorization/StartAuthorizationTest.java
Patch:
@@ -270,7 +270,7 @@ public void testProcessDefinitionList() throws Exception {
               .createProcessDefinitionQuery().processDefinitionKey("process2")
               .singleResult();      
       List<Group> authorizedGroups =  ProcessEngines.getDefaultProcessEngine().getIdentityService()
-          .createGroupQuery().potentialStarter(latestProcessDef.getId()).list();
+          .createGroupQuery().potentialStarter(latestProcessDef.getId()).orderByGroupId().asc().list();
       assertEquals(0, authorizedGroups.size());
       
       // Process 3 has 3 groups as authorized starter groups

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2188,7 +2188,7 @@ public void parseBoundaryEvents(Element parentElement, ScopeImpl scopeElement) {
       boolean interrupting = cancelActivity.equals("true") ? true : false;
 
       // Catch event behavior is the same for most types
-      ActivityBehavior behavior = new BoundaryEventActivityBehavior(interrupting);
+      ActivityBehavior behavior = new BoundaryEventActivityBehavior(interrupting, nestedActivity.getId());
 
       // Depending on the sub-element definition, the correct activityBehavior
       // parsing is selected

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -43,7 +43,6 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
     }
 
     try {
-      execution.setActivity(borderEventActivity);
       
       borderEventActivity
         .getActivityBehavior()

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParseListener.java
Patch:
@@ -63,5 +63,7 @@ public interface BpmnParseListener {
   void parseTransaction(Element transactionElement, ScopeImpl scope, ActivityImpl activity);
   void parseCompensateEventDefinition(Element compensateEventDefinition, ActivityImpl compensationActivity);
   void parseIntermediateThrowEvent(Element intermediateEventElement, ScopeImpl scope, ActivityImpl activity);
+  void parseIntermediateCatchEvent(Element intermediateEventElement, ScopeImpl scope, ActivityImpl activity);
+  void parseBoundaryEvent(Element boundaryEventElement, ScopeImpl scopeElement, ActivityImpl nestedActivity);
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
-import org.activiti.engine.impl.jobexecutor.DecrementJobRetriesListener;
+import org.activiti.engine.impl.jobexecutor.FailedJobListener;
 import org.activiti.engine.impl.jobexecutor.JobExecutorContext;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 
@@ -73,7 +73,7 @@ public Object execute(CommandContext commandContext) {
       
       commandContext.getTransactionContext().addTransactionListener(
         TransactionState.ROLLED_BACK, 
-        new DecrementJobRetriesListener(commandExecutor, jobId, exception));
+        new FailedJobListener(commandExecutor, jobId, exception));
        
       // throw the original exception to indicate the ExecuteJobCmd failed
       throw exception;

File: modules/activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -434,7 +434,8 @@ public void setExecutionId(String executionId) {
    * @see #getExecution()
    */
   @Produces @Named public String getExecutionId() {
-    return associationManager.getExecutionId();
+    Execution e = getExecution();
+    return e != null ? e.getId() : null;
   }
 
   /**

File: modules/activiti-webapp-explorer2/src/test/java/org/activiti/explorer/util/time/HumanTimeTest.java
Patch:
@@ -33,6 +33,7 @@ public void testHumanTime() {
     I18nManager i18nManager = new DummyI18nManager();
     
     Calendar now = Calendar.getInstance();
+    now.setTime(new Date(293840293840L));
     HumanTime humanTime = new HumanTime(now.getTime(), i18nManager);
     
     // Edge cases

File: modules/activiti-engine/src/test/java/org/activiti/examples/processdefinitions/ProcessDefinitionsTest.java
Patch:
@@ -110,7 +110,7 @@ public void testDeployIdenticalProcessDefinitions() {
   }
   
   private String deployProcessString(String processString) {
-    String resourceName = "xmlString." + BpmnDeployer.BPMN_RESOURCE_SUFFIX;
+    String resourceName = "xmlString." + BpmnDeployer.BPMN_RESOURCE_SUFFIXES[0];
     return repositoryService.createDeployment().addString(resourceName, processString).deploy().getId();
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -54,6 +54,7 @@ public class BpmnDeployer implements Deployer {
 
   private static final Logger LOG = Logger.getLogger(BpmnDeployer.class.getName());;
 
+  //TODO: Add suffix .bpmn as well, since that is "normal" in the BPMN world (Eclipde Designer, Signavio, jBPM 5)
   public static final String BPMN_RESOURCE_SUFFIX = "bpmn20.xml";
   public static final String[] DIAGRAM_SUFFIXES = new String[]{"png", "jpg", "gif", "svg"};
 

File: modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/api/SecuredResource.java
Patch:
@@ -42,6 +42,7 @@ protected boolean authenticate(String group) {
       return false;
     
     } else if(group == null) {
+      ActivitiUtil.getIdentityService().setAuthenticatedUserId(loggedInUser);
       return true;
     
     } else {
@@ -51,6 +52,7 @@ protected boolean authenticate(String group) {
         for (Group groupObject : groupList) {
           if(groupObject.getId().equals(group)) {
             allowed = true;
+            ActivitiUtil.getIdentityService().setAuthenticatedUserId(loggedInUser);
             break;
           }
         }

File: modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/api/process/StartProcessInstanceResource.java
Patch:
@@ -59,7 +59,6 @@ public StartProcessInstanceResponse startProcessInstance(Representation entity)
       variables.remove("processDefinitionKey");
       variables.remove("businessKey");
       
-      ActivitiUtil.getIdentityService().setAuthenticatedUserId(loggedInUser);
       ProcessInstance processInstance = null;
       if (processDefinitionKey != null) {
         processInstance = ActivitiUtil.getRuntimeService().startProcessInstanceByKey(processDefinitionKey, businessKey, variables);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -47,6 +47,7 @@ public static void propagateError(BpmnError error, ActivityExecution execution)
       // search for error handler with same error code as thrown Error
       for (PvmActivity activity : scope.getActivities()) {
         if (((ActivityImpl) activity).getActivityBehavior() instanceof BoundaryEventActivityBehavior
+                && "boundaryError".equals(activity.getProperty("type"))
                 && error.getErrorCode().equals(activity.getProperty("errorCode"))) {
           errorEventHandler = activity;
           break;
@@ -56,6 +57,7 @@ public static void propagateError(BpmnError error, ActivityExecution execution)
       if (errorEventHandler == null) {
         for (PvmActivity activity : scope.getActivities()) {
           if (((ActivityImpl) activity).getActivityBehavior() instanceof BoundaryEventActivityBehavior
+                  && "boundaryError".equals(activity.getProperty("type"))
                   && (activity.getProperty("errorCode") == null || "".equals(activity.getProperty("errorCode")))) {
             errorEventHandler = activity;
             break;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -137,8 +137,7 @@ protected static void executeCatchInSuperProcess(String errorCode, ActivityExecu
       if (superSuperExecution != null) {
         executeCatchInSuperProcess(errorCode, superSuperExecution);
       } else {
-        // TODO maybe throw BpmnError?
-        throw new ActivitiException("No catching boundary event found for error with errorCode '" 
+        throw new BpmnError(errorCode, "No catching boundary event found for error with errorCode '" 
                 + errorCode + "', neither in same process nor in parent process");
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/BpmnError.java
Patch:
@@ -11,10 +11,9 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.impl.bpmn.event;
+package org.activiti.engine.delegate;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.impl.bpmn.parser.Error;
 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.behavior;
 
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
+import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.logging.Logger;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.Expression;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
+import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ExecutionListenerInvocation;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
@@ -45,6 +45,7 @@
  * to delegate to the {@link MultiInstanceActivityBehavior} if needed.
  * 
  * @author Joram Barrez
+ * @author Falko Menge
  */
 public abstract class MultiInstanceActivityBehavior extends FlowNodeActivityBehavior  
   implements CompositeActivityBehavior, SubProcessActivityBehavior {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -15,8 +15,8 @@
 import javax.script.ScriptException;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
+import org.activiti.engine.delegate.BpmnError;
+import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.scripting.ScriptingEngines;
@@ -27,6 +27,7 @@
  * 
  * @author Joram Barrez
  * @author Christian Stettler
+ * @author Falko Menge
  */
 public class ScriptTaskActivityBehavior extends TaskActivityBehavior {
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -13,14 +13,15 @@
 package org.activiti.engine.impl.bpmn.behavior;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
 
 
 /**
  * @author Joram Barrez
+ * @author Falko Menge
  */
 public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavior {
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -19,15 +19,14 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.DelegateTask;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.delegate.TaskListener;
 import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.ServiceTaskJavaDelegateActivityBehavior;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
 import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ExecutionListenerInvocation;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -11,11 +11,12 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.impl.bpmn.event;
+package org.activiti.engine.impl.bpmn.helper;
 
 import java.util.logging.Logger;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.ErrorEndEventActivityBehavior;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/Error.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.parser;
 
-import org.activiti.engine.impl.bpmn.event.BpmnError;
+import org.activiti.engine.delegate.BpmnError;
 
 
 /**

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/ThrowBpmnErrorDelegate.java
Patch:
@@ -13,9 +13,9 @@
 
 package org.activiti.engine.test.bpmn.event.error;
 
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
 
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -84,7 +84,7 @@ public void execute(ActivityExecution execution) throws Exception {
       try {
         createInstances(execution);
       } catch (BpmnError error) {
-        ErrorPropagation.propagateError(execution, error);
+        ErrorPropagation.propagateError(error, execution);
       }
     } else {
         innerActivityBehavior.execute(execution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -115,7 +115,7 @@ public void execute(ActivityExecution execution) throws Exception {
     try {
       activityBehaviorInstance.execute(execution);
     } catch (BpmnError error) {
-      ErrorPropagation.propagateError(execution, error);
+      ErrorPropagation.propagateError(error, execution);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -50,7 +50,7 @@ public void execute(ActivityExecution execution) throws Exception {
       if (superExecution != null) {
         executeCatchInSuperProcess(superExecution);
       } else {
-        // TODO Shouldn't this be an exception as in executeCatchInSuperProcess()?
+        // TODO Shouldn't this be an exception as in executeCatchInSuperProcess() or is this dead code?
         LOG.info(execution.getActivity().getId() + " throws error event with errorCode '"
                 + errorCode + "', but no catching boundary event was defined. "
                 +   "Execution will simply be ended (none end event semantics).");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -69,7 +69,8 @@ protected void executeCatchInSuperProcess(ActivityExecution superExecution) {
       if (outgoingExecution != null && catchingActivity != null) {
         for (ActivityImpl nestedActivity : catchingActivity.getActivities()) {
           if ("boundaryError".equals(nestedActivity.getProperty("type"))
-                  && errorCode.equals(nestedActivity.getProperty("errorCode"))) {
+                  && (nestedActivity.getProperty("errorCode") == null 
+                      || errorCode.equals(nestedActivity.getProperty("errorCode")))) {
             found = true;
             catchingActivity = nestedActivity;
           }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -58,7 +58,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
     
     // oracle
-    addDatabaseSpecificStatement("oracle", "selectNextJobsToExecute", "selectNextJobsToExecute_oracle");
+    addDatabaseSpecificStatement("oracle", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_oracle");
   }
   
   protected String databaseType;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -56,6 +56,9 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    
+    // oracle
+    addDatabaseSpecificStatement("oracle", "selectNextJobsToExecute", "selectNextJobsToExecute_oracle");
   }
   
   protected String databaseType;

File: modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/application/ActivitiRestApplication.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.rest.api.identity.GroupUsersResource;
 import org.activiti.rest.api.identity.LoginResource;
 import org.activiti.rest.api.identity.UserGroupsResource;
+import org.activiti.rest.api.identity.UserPictureResource;
 import org.activiti.rest.api.identity.UserResource;
 import org.activiti.rest.api.management.JobExecuteResource;
 import org.activiti.rest.api.management.JobResource;
@@ -100,6 +101,8 @@ protected boolean authenticate(Request request, Response response) {
     
     router.attach("/user/{userId}", UserResource.class);
     router.attach("/user/{userId}/groups", UserGroupsResource.class);
+    router.attach("/user/{userId}/picture", UserPictureResource.class);
+    
     router.attach("/group/{groupId}", GroupResource.class);
     router.attach("/groups/{groupId}/users", GroupUsersResource.class);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetPropertiesCmd.java
Patch:
@@ -34,7 +34,7 @@ public class GetPropertiesCmd implements Command<Map<String, String>>, Serializa
   public Map<String, String> execute(CommandContext commandContext) {
     List<PropertyEntity> propertyEntities = commandContext
       .getDbSqlSession()
-      .selectList("org.activiti.persistence.selectProperties");
+      .selectList("selectProperties");
     
     Map<String, String> properties = new HashMap<String, String>();
     for (PropertyEntity propertyEntity: propertyEntities) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -110,7 +110,7 @@ public List<TimerEntity> findTimersByExecutionId(String executionId) {
 
   @SuppressWarnings("unchecked")
   public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page) {
-    final String query = "org.activiti.persistence.selectJobByQueryCriteria";
+    final String query = "selectJobByQueryCriteria";
     return getDbSqlSession().selectList(query, jobQuery, page);
   }
 
@@ -119,11 +119,11 @@ public List<Job> findJobsByConfiguration(String jobHandlerType, String jobHandle
     Map<String, String> params = new HashMap<String, String>();
     params.put("handlerType", jobHandlerType);
     params.put("handlerConfiguration", jobHandlerConfiguration);
-    return getDbSqlSession().selectList("org.activiti.persistence.selectJobsByConfiguration", params);
+    return getDbSqlSession().selectList("selectJobsByConfiguration", params);
   }
 
   public long findJobCountByQueryCriteria(JobQueryImpl jobQuery) {
-    return (Long) getDbSqlSession().selectOne("org.activiti.persistence.selectJobCountByQueryCriteria", jobQuery);
+    return (Long) getDbSqlSession().selectOne("selectJobCountByQueryCriteria", jobQuery);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ManagementServiceImpl.java
Patch:
@@ -67,7 +67,7 @@ public Map<String, String> getProperties() {
   public String databaseSchemaUpgrade(final Connection connection, final String catalog, final String schema) {
     return commandExecutor.execute(new Command<String>(){
       public String execute(CommandContext commandContext) {
-        DbSqlSessionFactory dbSqlSessionFactory = (DbSqlSessionFactory) commandContext.getSessionFactories().get(DbSqlSessionFactory.class);
+        DbSqlSessionFactory dbSqlSessionFactory = (DbSqlSessionFactory) commandContext.getSessionFactories().get(DbSqlSession.class);
         DbSqlSession dbSqlSession = new DbSqlSession(dbSqlSessionFactory, connection, catalog, schema);
         commandContext.getSessions().put(DbSqlSession.class, dbSqlSession);
         return dbSqlSession.dbSchemaUpdate();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParseListener.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.engine.impl.bpmn.parser;
 
+import java.util.List;
+
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
 import org.activiti.engine.impl.pvm.process.ScopeImpl;
@@ -48,4 +50,5 @@ public interface BpmnParseListener {
   void parseSendTask(Element sendTaskElement, ScopeImpl scope, ActivityImpl activity);
   void parseMultiInstanceLoopCharacteristics(Element activityElement, Element multiInstanceLoopCharacteristicsElement, ActivityImpl activity);
   void parseIntermediateTimerEventDefinition(Element timerEventDefinition, ActivityImpl timerActivity);
+  void parseRootElement(Element rootElement, List<ProcessDefinitionEntity> processDefinitions);
 }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/deployment/DeploymentListQuery.java
Patch:
@@ -72,11 +72,11 @@ class DeploymentListitem extends PropertysetItem implements Comparable<Deploymen
     private static final long serialVersionUID = 1L;
     
     public DeploymentListitem(Deployment deployment) {
-      addItemProperty("id", new ObjectProperty<String>(deployment.getId()));
+      addItemProperty("id", new ObjectProperty<String>(deployment.getId(), String.class));
       if(deployment.getName() != null) {
-        addItemProperty("name", new ObjectProperty<String>(deployment.getName()));
+        addItemProperty("name", new ObjectProperty<String>(deployment.getName(), String.class));
       } else {
-        addItemProperty("name", new ObjectProperty<String>(ExplorerApp.get().getI18nManager().getMessage(Messages.DEPLOYMENT_NO_NAME)));
+        addItemProperty("name", new ObjectProperty<String>(ExplorerApp.get().getI18nManager().getMessage(Messages.DEPLOYMENT_NO_NAME), String.class));
       }
     }
 

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/GroupListQuery.java
Patch:
@@ -66,12 +66,12 @@ class GroupListItem extends PropertysetItem implements Comparable<GroupListItem>
     private static final long serialVersionUID = 1L;
     
     public GroupListItem(Group group) {
-      addItemProperty("id", new ObjectProperty<String>(group.getId()));
+      addItemProperty("id", new ObjectProperty<String>(group.getId(), String.class));
       if (group.getName() != null) {
         addItemProperty("name", new ObjectProperty<String>(group.getName()
-                + " (" + group.getName() + ")"));
+                + " (" + group.getName() + ")", String.class));
       } else {
-        addItemProperty("name", new ObjectProperty<String>("(" + group.getId() + ")"));
+        addItemProperty("name", new ObjectProperty<String>("(" + group.getId() + ")", String.class));
       }
     }
 

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/GroupSelectionQuery.java
Patch:
@@ -96,12 +96,12 @@ class GroupSelectionItem extends PropertysetItem {
     private static final long serialVersionUID = 1L;
 
     public GroupSelectionItem(Group group) {
-      addItemProperty("id", new ObjectProperty<String>(group.getId()));
+      addItemProperty("id", new ObjectProperty<String>(group.getId(), String.class));
       if (group.getName() != null) {
-        addItemProperty("name", new ObjectProperty<String>(group.getName()));
+        addItemProperty("name", new ObjectProperty<String>(group.getName(), String.class));
       }
       if (group.getType() != null) {
-        addItemProperty("type", new ObjectProperty<String>(group.getType()));
+        addItemProperty("type", new ObjectProperty<String>(group.getType(), String.class));
       }
     }
     

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/UserListQuery.java
Patch:
@@ -68,9 +68,9 @@ class UserListItem extends PropertysetItem implements Comparable<UserListItem> {
     private static final long serialVersionUID = 1L;
 
     public UserListItem(User user) {
-      addItemProperty("id", new ObjectProperty<String>(user.getId()));
+      addItemProperty("id", new ObjectProperty<String>(user.getId(), String.class));
       addItemProperty("name", new ObjectProperty<String>(user.getFirstName() 
-              + " " + user.getLastName() + " (" + user.getId() + ")"));
+              + " " + user.getLastName() + " (" + user.getId() + ")", String.class));
     }
 
     public int compareTo(UserListItem other) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/job/JobListQuery.java
Patch:
@@ -74,9 +74,9 @@ class JobListItem extends PropertysetItem implements Comparable<JobListItem> {
     
     
     public JobListItem(Job job) {
-      addItemProperty("id", new ObjectProperty<String>(job.getId()));
-      addItemProperty("dueDate", new ObjectProperty<Date>(job.getDuedate()));
-      addItemProperty("name", new ObjectProperty<String>(getName(job)));
+      addItemProperty("id", new ObjectProperty<String>(job.getId(), String.class));
+      addItemProperty("dueDate", new ObjectProperty<Date>(job.getDuedate(), Date.class));
+      addItemProperty("name", new ObjectProperty<String>(getName(job), String.class));
     }
     
     private String getName(Job theJob) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/process/ProcessInstanceListItem.java
Patch:
@@ -28,8 +28,8 @@ class ProcessInstanceListItem extends PropertysetItem implements Comparable<Proc
   public static final String PROPERTY_NAME = "name";
   
   public ProcessInstanceListItem(final ProcessInstance processInstance, final String processDefinitionName) {
-    addItemProperty(PROPERTY_ID, new ObjectProperty<String>(processInstance.getId()));
-    addItemProperty(PROPERTY_NAME, new ObjectProperty<String>(processDefinitionName + " (id=" + processInstance.getId() +")"));
+    addItemProperty(PROPERTY_ID, new ObjectProperty<String>(processInstance.getId(), String.class));
+    addItemProperty(PROPERTY_NAME, new ObjectProperty<String>(processDefinitionName + " (id=" + processInstance.getId() +")", String.class));
   }
 
   public int compareTo(ProcessInstanceListItem other) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/process/ProcessInstanceItem.java
Patch:
@@ -29,8 +29,8 @@ public ProcessInstanceItem() {
   }
   
   public ProcessInstanceItem(ProcessInstance processInstance) {
-    addItemProperty("id", new ObjectProperty<String>(processInstance.getId()));
-    addItemProperty("businessKey", new ObjectProperty<String>(processInstance.getBusinessKey()));
+    addItemProperty("id", new ObjectProperty<String>(processInstance.getId(), String.class));
+    addItemProperty("businessKey", new ObjectProperty<String>(processInstance.getBusinessKey(), String.class));
   }
 
   public int compareTo(ProcessInstanceItem other) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/test/AbstractActivitiTestCase.java
Patch:
@@ -170,7 +170,7 @@ public void assertProcessEnded(final String processInstanceId) {
       .singleResult();
     
     if (processInstance!=null) {
-      throw new AssertionFailedError("expected finished process instance '"+processInstanceId+"' but it was still in the db"); 
+      throw new AssertionFailedError("Expected finished process instance '"+processInstanceId+"' but it was still in the db"); 
     }
   }
 

File: modules/activiti-webapp-rest2/src/main/java/org/activiti/rest/api/task/TaskOperationResource.java
Patch:
@@ -50,9 +50,9 @@ public void executeTaskOperation(Representation entity) {
           variables.put(name, valueNode.getTextValue());
         }
       }
-      String currentUserId = "kermit";
+      
       if ("claim".equals(operation)) {
-        ActivitiUtil.getTaskService().claim(taskId, currentUserId);
+        ActivitiUtil.getTaskService().claim(taskId, loggedInUser);
       } else if ("complete".equals(operation)) {
         variables.remove("taskId");
         ActivitiUtil.getTaskService().complete(taskId, variables);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/IdGenerator.java
Patch:
@@ -26,6 +26,6 @@
  */
 public interface IdGenerator {
 
-  long getNextId();
+  String getNextId();
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbIdGenerator.java
Patch:
@@ -29,11 +29,12 @@ public class DbIdGenerator implements IdGenerator {
   
   protected CommandExecutor commandExecutor;
   
-  public synchronized long getNextId() {
+  public synchronized String getNextId() {
     if (lastId<nextId) {
       getNewBlock();
     }
-    return nextId++;
+    long _nextId = nextId++;
+    return Long.toString(_nextId);
   }
 
   protected synchronized void getNewBlock() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -101,8 +101,7 @@ public DbSqlSession(DbSqlSessionFactory dbSqlSessionFactory, Connection connecti
   
   public void insert(PersistentObject persistentObject) {
     if (persistentObject.getId()==null) {
-      long nextId = dbSqlSessionFactory.getIdGenerator().getNextId();
-      String id = Long.toString(nextId);
+      String id = dbSqlSessionFactory.getIdGenerator().getNextId();  
       persistentObject.setId(id);
     }
     insertedObjects.add(persistentObject);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceStartHandler.java
Patch:
@@ -36,7 +36,7 @@ public void notify(DelegateExecution execution) {
     String executionId = execution.getId();
 
     HistoricActivityInstanceEntity historicActivityInstance = new HistoricActivityInstanceEntity();
-    historicActivityInstance.setId(Long.toString(idGenerator.getNextId()));
+    historicActivityInstance.setId(idGenerator.getNextId());
     historicActivityInstance.setProcessDefinitionId(processDefinitionId);
     historicActivityInstance.setProcessInstanceId(processInstanceId);
     historicActivityInstance.setExecutionId(executionId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -94,7 +94,7 @@ public ExecutionEntity createProcessInstance(String businessKey) {
       String executionId = processInstance.getId();
 
       HistoricActivityInstanceEntity historicActivityInstance = new HistoricActivityInstanceEntity();
-      historicActivityInstance.setId(Long.toString(idGenerator.getNextId()));
+      historicActivityInstance.setId(idGenerator.getNextId());
       historicActivityInstance.setProcessDefinitionId(processDefinitionId);
       historicActivityInstance.setProcessInstanceId(processInstanceId);
       historicActivityInstance.setExecutionId(executionId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BusinessRuleTaskActivityBehavior.java
Patch:
@@ -63,7 +63,7 @@ public void execute(ActivityExecution execution) throws Exception {
         Expression ruleName = itRuleNames.next();
         filter.addSuffic(ruleName.getValue(execution).toString());
       }
-      filter.setAccept(exclude);
+      filter.setAccept(!exclude);
       ksession.fireAllRules(filter);
       
     } else {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Messages.java
Patch:
@@ -241,6 +241,7 @@ public interface Messages {
   static final String DEPLOYMENT_HEADER_RESOURCES = "deployment.header.resources";
   static final String DEPLOYMENT_UPLOAD = "deployment.upload";
   static final String DEPLOYMENT_UPLOAD_DESCRIPTION = "deployment.upload.description";
+  static final String DEPLOYMENT_UPLOAD_FAILED = "deployment.upload.failed";
   static final String DEPLOYMENT_UPLOAD_INVALID_FILE = "deployment.upload.invalid.file";
   static final String DEPLOYMENT_UPLOAD_INVALID_FILE_EXPLANATION = "deployment.upload.invalid.file.explanation";
   static final String DEPLOYMENT_UPLOAD_SERVER_ERROR = "deployment.upload.server.error";

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/ProcessDefinitionQueryTest.java
Patch:
@@ -117,7 +117,7 @@ public void testQueryByInvalidName() {
   }
   
   public void testQueryByNameLike() {
-    ProcessDefinitionQuery query = repositoryService.createProcessDefinitionQuery().processDefinitionNameLike("%o%");
+    ProcessDefinitionQuery query = repositoryService.createProcessDefinitionQuery().processDefinitionNameLike("%w%");
     verifyQueryResults(query, 1);
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -29,7 +29,7 @@ public class ManagementServiceTest extends PluggableActivitiTestCase {
 
   public void testTableCount() {
     Map<String, Long> tableCount = managementService.getTableCount();
-
+    
     assertEquals(new Long(4), tableCount.get("ACT_GE_PROPERTY"));
     assertEquals(new Long(0), tableCount.get("ACT_GE_BYTEARRAY"));
     assertEquals(new Long(0), tableCount.get("ACT_RE_DEPLOYMENT"));
@@ -53,8 +53,8 @@ public void testGetTableMetaData() {
     assertTrue(assigneeIndex >= 0);
     assertTrue(createTimeIndex >= 0);
     
-    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar"}, tableMetaData.getColumnTypes().get(assigneeIndex));
-    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime"}, tableMetaData.getColumnTypes().get(createTimeIndex));
+    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar", "NVARCHAR"}, tableMetaData.getColumnTypes().get(assigneeIndex));
+    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime", "DATETIME"}, tableMetaData.getColumnTypes().get(createTimeIndex));
   }
   
   private void assertOneOf(String[] possibleValues, String currentValue) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ExplorerApp.java
Patch:
@@ -71,7 +71,7 @@ public void init() {
 //  public Window getWindow(String name) {
 //    Window window = super.getWindow(name);
 //    if (window == null) {
-//      window = new Window("Explorer - The Next generation");
+//      window = new Window("Activiti Explorer");
 //      window.setName(name);
 //      addWindow(window);
 //      window.open(new ExternalResource(window.getURL()));

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/db/DatabasePage.java
Patch:
@@ -26,7 +26,6 @@
 import com.vaadin.data.Property;
 import com.vaadin.data.Property.ValueChangeEvent;
 import com.vaadin.terminal.Resource;
-import com.vaadin.ui.Component;
 import com.vaadin.ui.Embedded;
 import com.vaadin.ui.Table;
 
@@ -103,14 +102,14 @@ protected Embedded determineTableIcon(String tableName) {
       Resource image = null;
       if (tableName.startsWith("ACT_HI")) {
         image = Images.DATABASE_HISTORY;
-      } else if (tableName.startsWith("ACT_GE")) {
-        image = Images.DATABASE_22;
       } else if (tableName.startsWith("ACT_RU")) {
         image = Images.DATABASE_RUNTIME;
       } else if (tableName.startsWith("ACT_RE")) {
         image = Images.DATABASE_REPOSITORY;
       } else if (tableName.startsWith("ACT_ID")) {
         image = Images.DATABASE_IDENTITY;
+      } else {
+        image = Images.DATABASE_22;
       }
       return new Embedded(null, image);
     }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ExplorerApp.java
Patch:
@@ -172,13 +172,12 @@ public void onRequestStart(HttpServletRequest request, HttpServletResponse respo
 
     if(user != null) {
       Authentication.setAuthenticatedUserId(user.getId());
-      
       if (mainWindow != null && mainWindow.isShowingLoginPage()) {
         viewManager.showDefaultPage();
       }
     }
     
- // Callback to the login handler
+    // Callback to the login handler
     loginHandler.onRequestStart(request, response);
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailTestCase.java
Patch:
@@ -37,9 +37,7 @@ protected void tearDown() throws Exception {
     wiser.stop();
     
     // Fix for slow Jenkins
-    while (wiser.getServer().isRunning()) {
-      Thread.sleep(100L);
-    }
+    Thread.sleep(250L);
     
     super.tearDown();
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/service/CycleConfigurationService.java
Patch:
@@ -125,7 +125,7 @@ public interface CycleConfigurationService {
   public void setConfigurationValue(String groupId, String key, String value);
 
   /**
-   * set a global configuration value, providing a default value
+   * get a global configuration value, providing a default value
    */
   public String getConfigurationValue(String groupId, String key, String defaultValue);
 
@@ -136,7 +136,7 @@ public interface CycleConfigurationService {
 
   /**
    * @param groupId
-   *          the groupId to retreive the configuration values for.
+   *          the groupId to retrieve the configuration values for.
    * @return an map of configuration Key/Value pairs for the provided groupid
    */
   public Map<String, String> getConfigurationValuesForGroup(String groupId);

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ExplorerApp.java
Patch:
@@ -18,6 +18,8 @@
 import org.activiti.engine.impl.identity.Authentication;
 import org.activiti.engine.impl.util.LogUtil;
 import org.activiti.explorer.cache.UserCache;
+import org.activiti.explorer.identity.LoggedInUser;
+import org.activiti.explorer.identity.LoggedInUserImpl;
 import org.activiti.explorer.navigation.UriFragment;
 import org.activiti.explorer.ui.ComponentFactory;
 import org.activiti.explorer.ui.MainWindow;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/alfresco/AlfrescoMainMenuBar.java
Patch:
@@ -34,8 +34,8 @@ public synchronized void setMainNavigation(String navigation) {
   }
   
   @Override
-  protected void initProfileButton() {
-    // No profile button is needed
+  protected boolean useProfile() {
+    // Only show logout button, profile is not used in alfresco
+    return false;
   }
-
 }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/custom/SelectUsersPopupWindow.java
Patch:
@@ -21,9 +21,9 @@
 import org.activiti.engine.identity.User;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.cache.UserCache;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.event.SubmitEvent;
 import org.activiti.explorer.ui.event.SubmitEventListener;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/login/LoginHandler.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.explorer.ui.login;
 
-import org.activiti.explorer.LoggedInUser;
+import org.activiti.explorer.identity.LoggedInUser;
 
 
 /**

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/login/LoginPage.java
Patch:
@@ -19,10 +19,10 @@
 import org.activiti.engine.ProcessEngines;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.NotificationManager;
 import org.activiti.explorer.ViewManager;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 
 import com.vaadin.ui.CustomLayout;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/SubTaskComponent.java
Patch:
@@ -21,8 +21,8 @@
 import org.activiti.engine.task.Task;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 import org.activiti.explorer.ui.task.listener.DeleteSubTaskClickListener;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskMenuBar.java
Patch:
@@ -20,9 +20,9 @@
 import org.activiti.engine.identity.Group;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.ViewManager;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.custom.ToolBar;
 import org.activiti.explorer.ui.custom.ToolbarEntry;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/custom/InMemoryUploadReceiver.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.NotificationManager;
-import org.activiti.explorer.ui.util.StringUtil;
+import org.activiti.explorer.util.StringUtil;
 
 import com.vaadin.ui.Upload;
 import com.vaadin.ui.Upload.ProgressListener;

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/TagsGet.java
Patch:
@@ -29,7 +29,7 @@ public class TagsGet extends ActivitiCycleWebScript {
   void execute(ActivitiRequest req, Status status, Cache cache, Map<String, Object> model) {
 
     String connectorId = req.getString("connectorId");
-    String repositoryNodeId = req.getString("repositoryNodeId");
+    String repositoryNodeId = req.getString("nodeId");
     String tag = req.getString("tag");
 
     List<String> tags;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -60,7 +60,7 @@ protected void leave(ActivityExecution execution) {
       PvmTransition seqFlow = transitionIterator.next();
       
       Condition condition = (Condition) seqFlow.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
-      if ( (condition == null && !seqFlow.getId().equals(defaultSequenceFlow)) 
+      if ( (condition == null && (defaultSequenceFlow == null || !defaultSequenceFlow.equals(seqFlow.getId())) ) 
               || (condition != null && condition.evaluate(execution)) ) {
         if (log.isLoggable(Level.FINE)) {
           log.fine("Sequence flow '" + seqFlow.getId() + " '"

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Messages.java
Patch:
@@ -51,6 +51,7 @@ public interface Messages {
   static final String MAIN_MENU_FLOWS = "main.menu.flows";
   static final String MAIN_MENU_MANAGEMENT = "main.menu.management";
   static final String MAIN_MENU_REPORTS = "main.menu.reports";
+  static final String MAIN_MENU_REPOSITOTIES = "main.menu.repositories";
   
   // Password
   static final String PASSWORD_CHANGE = "password.change";

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/Images.java
Patch:
@@ -37,6 +37,7 @@ public class Images {
   public static final Resource MAIN_MENU_FLOWS = new ThemeResource("img/mm-flows.png");
   public static final Resource MAIN_MENU_MANAGE = new ThemeResource("img/mm-manage.png");
   public static final Resource MAIN_MENU_REPORTS = new ThemeResource("img/mm-reports.png");
+  public static final Resource MAIN_MENU_REPOSITORIES = new ThemeResource("img/mm-repository.png");
   
   // Task
   public static final Resource TASK_16 =  new ThemeResource("img/task-16.png");;
@@ -87,4 +88,5 @@ public class Images {
   // Flows
   public static final Resource FLOW_50 = new ThemeResource("img/flow-50.png");
   public static final Resource FLOW_22 = new ThemeResource("img/flow-22.png");
+  
 }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/flow/ProcessInstancePage.java
Patch:
@@ -17,7 +17,7 @@
 import org.activiti.explorer.data.LazyLoadingContainer;
 import org.activiti.explorer.data.LazyLoadingQuery;
 import org.activiti.explorer.navigation.UriFragment;
-import org.activiti.explorer.ui.AbstractPage;
+import org.activiti.explorer.ui.AbstractTablePage;
 import org.activiti.explorer.ui.ExplorerLayout;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.custom.ToolBar;
@@ -32,7 +32,7 @@
 /**
  * @author Frederik Heremans
  */
-public abstract class ProcessInstancePage extends AbstractPage {
+public abstract class ProcessInstancePage extends AbstractTablePage {
 
   private static final long serialVersionUID = 1L;
 

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/ManagementPage.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.activiti.explorer.ui.management;
 
-import org.activiti.explorer.ui.AbstractPage;
+import org.activiti.explorer.ui.AbstractTablePage;
 import org.activiti.explorer.ui.custom.ToolBar;
 
 
 /**
  * @author Joram Barrez
  */
-public abstract class ManagementPage extends AbstractPage {
+public abstract class ManagementPage extends AbstractTablePage {
   
   private static final long serialVersionUID = 1L;
   

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/deployment/DeleteDeploymentPopupWindow.java
Patch:
@@ -118,7 +118,7 @@ public void buttonClick(ClickEvent event) {
         // Delete deployment, close popup window and refresh deployment list
         repositoryService.deleteDeployment(deployment.getId(), true);
         close();
-        deploymentPage.refreshListSelectNext();
+        deploymentPage.refreshSelectNext();
       }
     });
     

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/GroupDetailPanel.java
Patch:
@@ -269,7 +269,7 @@ protected void confirmed(ConfirmationEvent event) {
             identityService.deleteGroup(group.getId());
 
             // Update ui
-            groupPage.refreshListSelectNext();
+            groupPage.refreshSelectNext();
           }
         });
         

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/UserDetailPanel.java
Patch:
@@ -315,7 +315,7 @@ protected void confirmed(ConfirmationEvent event) {
             identityService.deleteUser(user.getId());
 
             // Update ui
-            userPage.refreshListSelectNext();
+            userPage.refreshSelectNext();
             
             // Update user cache
             ExplorerApp.get().getUserCache().notifyUserDataChanged(user.getId());

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskDetailPanel.java
Patch:
@@ -309,7 +309,7 @@ protected void handleFormSubmit(FormPropertiesEvent event) {
           Map<String, String> properties = event.getFormProperties();
           formService.submitTaskFormData(task.getId(), properties);
           notificationManager.showInformationNotification(Messages.TASK_COMPLETED, task.getName());
-          taskPage.refreshListSelectNext();
+          taskPage.refreshSelectNext();
         }
         
         @Override
@@ -347,7 +347,7 @@ public void buttonClick(ClickEvent event) {
           
           taskService.complete(task.getId());     
           notificationManager.showInformationNotification(Messages.TASK_COMPLETED, task.getName());
-          taskPage.refreshListSelectNext();
+          taskPage.refreshSelectNext();
         }
       });
       

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -665,4 +665,7 @@ public void setDeleted(boolean isDeleted) {
   public String getParentTaskId() {
     return parentTaskId;
   }
+  public Map<String, VariableInstanceEntity> getVariableInstances() {
+    return variableInstances;
+  }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -59,7 +59,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade) {
 
       commandContext
         .getVariableInstanceManager()
-        .deleteVariableInstanceByTaskId(taskId);
+        .deleteVariableInstanceByTask(task);
 
       if (cascade) {
         commandContext

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/tasklistener/TaskCompleteListener.java
Patch:
@@ -28,6 +28,8 @@ public class TaskCompleteListener implements TaskListener {
   public void notify(DelegateTask delegateTask) {
     delegateTask.getExecution().setVariable("greeting", "Hello from " + greeter.getValue(delegateTask.getExecution()));
     delegateTask.getExecution().setVariable("shortName", shortName.getValue(delegateTask.getExecution()));
+    
+    delegateTask.setVariableLocal("myTaskVariable", "test");
   }
 
 }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/ArchivedPage.java
Patch:
@@ -52,6 +52,7 @@ protected LazyLoadingQuery createLazyLoadingQuery() {
   protected Component createDetailComponent(String id) {
     HistoryService historyService = ProcessEngines.getDefaultProcessEngine().getHistoryService();
     HistoricTaskInstance historicTaskInstance = historyService.createHistoricTaskInstanceQuery().taskId(id).singleResult();
+    taskEventPanel.setTaskId(historicTaskInstance.getId());
     return new HistoricTaskDetailPanel(historicTaskInstance, this);
   }
 

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskPage.java
Patch:
@@ -129,7 +129,7 @@ public void valueChange(ValueChangeEvent event) {
   protected Component createDetailComponent(String id) {
     Task task = taskService.createTaskQuery().taskId(id).singleResult();
     Component detailComponent = new TaskDetailPanel(task, TaskPage.this);
-    taskEventPanel.setTask(task);
+    taskEventPanel.setTaskId(task.getId());
     return detailComponent;
   }
   
@@ -140,7 +140,7 @@ protected Component getEventComponent() {
   
   public TaskEventsPanel getTaskEventPanel() {
     if(taskEventPanel == null) {
-      taskEventPanel = new TaskEventsPanel(null);
+      taskEventPanel = new TaskEventsPanel();
     }
     return taskEventPanel;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/mail/MailScanCmd.java
Patch:
@@ -92,14 +92,14 @@ public Object execute(CommandContext commandContext) {
       throw new ActivitiException("couldn't scan mail for user "+userId+": "+e.getMessage(), e);
       
     } finally {
-      if (toDoInActivitiFolder!=null) {
+      if (toDoInActivitiFolder!=null && toDoInActivitiFolder.isOpen()) {
         try {
           toDoInActivitiFolder.close(false);
         } catch (MessagingException e) {
           e.printStackTrace();
         }
       }
-      if (toDoFolder!=null) {
+      if (toDoFolder!=null && toDoFolder.isOpen()) {
         try {
           toDoFolder.close(true); // true means that all messages that are flagged for deletion are permanently removed 
         } catch (Exception e) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/ExplorerLayout.java
Patch:
@@ -77,6 +77,8 @@ public interface ExplorerLayout {
   
   //Forms
   static final String STYLE_FORM_PROPERTIES = "formprops";
+  static final String STYLE_FORM_USER_SELECTED = "formprop-user-selected";
+  static final String STYLE_FORM_NO_USER_SELECTED = "formprop-no-user-selected";
   
   // Login page
   static final String STYLE_LOGIN_PAGE = "login-general";

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/flow/ProcessInstanceDetailPanel.java
Patch:
@@ -156,9 +156,9 @@ protected void addTaskItem(HistoricTaskInstance task, Table taskTable) {
     Item item = taskTable.addItem(task.getId());
     
     if(task.getEndTime() != null) {
-      item.getItemProperty("finished").setValue(new Embedded(null, Images.TASK_22));
-    } else {
       item.getItemProperty("finished").setValue(new Embedded(null, Images.TASK_FINISHED_22));
+    } else {
+      item.getItemProperty("finished").setValue(new Embedded(null, Images.TASK_22));
     }
     
     item.getItemProperty("name").setValue(task.getName());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -65,6 +65,7 @@
 import org.activiti.engine.impl.db.IbatisVariableTypeHandler;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.activiti.engine.impl.form.AbstractFormType;
+import org.activiti.engine.impl.form.BooleanFormType;
 import org.activiti.engine.impl.form.DateFormType;
 import org.activiti.engine.impl.form.FormEngine;
 import org.activiti.engine.impl.form.FormTypes;
@@ -739,6 +740,7 @@ protected void initFormTypes() {
       formTypes.addFormType(new StringFormType());
       formTypes.addFormType(new LongFormType());
       formTypes.addFormType(new DateFormType("dd/MM/yyyy"));
+      formTypes.addFormType(new BooleanFormType());
     }
     if (customFormTypes!=null) {
       for (AbstractFormType customFormType: customFormTypes) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/I18nManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer;
 
+import java.io.Serializable;
 import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.ResourceBundle;
@@ -26,8 +27,9 @@
  */
 @Component
 @Scope(value="session")
-public class I18nManager {
+public class I18nManager implements Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected ResourceBundle messages;
   
   public String getMessage(String key) {

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/navigation/NavigatorManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.navigation;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -24,8 +25,9 @@
  * @author Joram Barrez
  */
 @Component
-public class NavigatorManager implements InitializingBean {
+public class NavigatorManager implements InitializingBean, Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected Map<String, Navigator> navigationHandlers = new HashMap<String, Navigator>();
   protected Navigator defaultHandler;
 

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/MainMenuBar.java
Patch:
@@ -176,7 +176,7 @@ public void menuSelected(MenuItem selectedItem) {
   private class ShowTasksClickListener implements ClickListener {
 
     public void buttonClick(ClickEvent event) {
-      ExplorerApp.get().getViewManager().showInboxPage();
+      ExplorerApp.get().getViewManager().showCasesPage();
     }
   }
   

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/AttachmentRendererManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.ui.content;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -34,8 +35,9 @@
  * @author Joram Barrez
  */
 @Component
-public class AttachmentRendererManager implements InitializingBean {
+public class AttachmentRendererManager implements InitializingBean, Serializable {
 
+  private static final long serialVersionUID = 1L;
   private final List<AttachmentRenderer> renderers = new ArrayList<AttachmentRenderer>();
   private final List<AttachmentEditor> editors = new ArrayList<AttachmentEditor>();
   

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/form/FormPropertyRendererManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.ui.form;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -28,8 +29,9 @@
  * Note: NOT configured by @Component, but in Spring XML config, to make it
  * easy for users to extends with custom renderers.
  */
-public class FormPropertyRendererManager {
+public class FormPropertyRendererManager implements Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected Map<Class<? extends FormType>, FormPropertyRenderer> propertyRenderers = new HashMap<Class<? extends FormType>, FormPropertyRenderer>();
   protected FormPropertyRenderer noTypePropertyRenderer;
   

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/profile/ProfilePanel.java
Patch:
@@ -384,8 +384,7 @@ protected void initContactSection() {
       skypeIdLabel.setSizeUndefined();
       skypeLayout.addComponent(skypeIdLabel);
       
-      Label skypeImage = new SkypeLabel(skypeId);
-      skypeImage.setSizeUndefined();
+      Component skypeImage = new SkypeLabel(skypeId);
       skypeLayout.addComponent(skypeImage);
       
       addProfileEntry(contactLayout, i18nManager.getMessage(Messages.PROFILE_SKYPE), skypeLayout);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -179,6 +179,7 @@ public void testTaskAttachments() {
       taskService.deleteTask(taskId);
       
       assertEquals(0, taskService.getTaskComments(taskId).size());
+      assertEquals(1, historyService.createHistoricTaskInstanceQuery().taskId(taskId).list().size());
 
       taskService.deleteTask(taskId, true);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/Task.java
Patch:
@@ -22,7 +22,9 @@
  */
 public interface Task {
   
-  int PRIORITY_NORMAL = 50; 
+  int PRIORITY_MINIUM = 0; 
+  int PRIORITY_NORMAL = 50;
+  int PRIORITY_MAXIMUM = 100;
 	
   /** DB id of the task. */
 	String getId();

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Constants.java
Patch:
@@ -59,12 +59,12 @@ public class Constants {
    MIMETYPE_EXTENSION_MAPPING = Collections.unmodifiableMap(mapping);
  }
  
- // User INFO
+ // User Info
  public static final String USER_INFO_BIRTH_DATE = "birthDate";
  public static final String USER_INFO_JOB_TITLE = "jobTitle";
  public static final String USER_INFO_LOCATION = "location";
  public static final String USER_INFO_PHONE = "phone";
  public static final String USER_INFO_TWITTER = "twitterName";
  public static final String USER_INFO_SKYPE = "skype";
-
+ 
 }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/AttachmentDetailPopupWindow.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  * @author Frederik Heremans
+ * @author Joram Barrez
  */
 public class AttachmentDetailPopupWindow extends PopupWindow {
 
@@ -33,9 +34,6 @@ public AttachmentDetailPopupWindow(Attachment attachment) {
     super(attachment.getName());
     
     addStyleName(Reindeer.PANEL_LIGHT);
-    
-    setWidth(50, UNITS_PERCENTAGE);
-    setHeight(50, UNITS_PERCENTAGE);
     center();
     
     AttachmentRenderer renderer = ExplorerApp.get().getAttachmentRendererManager().getRenderer(attachment.getType());
@@ -46,5 +44,7 @@ public AttachmentDetailPopupWindow(Attachment attachment) {
     } else {
       addComponent(detail);
     }
+    getContent().setSizeUndefined();
   }
+  
 }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/CreateAttachmentPopupWindow.java
Patch:
@@ -65,8 +65,8 @@ public CreateAttachmentPopupWindow() {
     this.taskService = ProcessEngines.getDefaultProcessEngine().getTaskService();
 
     setCaption(i18nManager.getMessage(Messages.RELATED_CONTENT_ADD));
-    setWidth(50, UNITS_PERCENTAGE);
-    setHeight(50, UNITS_PERCENTAGE);
+    setWidth(700, UNITS_PIXELS);
+    setHeight(430, UNITS_PIXELS);
     center();
     setModal(true);
     addStyleName(Reindeer.WINDOW_LIGHT);

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/file/FileAttachmentEditorComponent.java
Patch:
@@ -74,8 +74,6 @@ public FileAttachmentEditorComponent(Attachment attachment, String taskId, Strin
     this.i18nManager = ExplorerApp.get().getI18nManager();
     taskService = ProcessEngines.getDefaultProcessEngine().getTaskService();
     
-    setSizeFull();
-    
     form = new Form();
     form.setDescription(i18nManager.getMessage(Messages.RELATED_CONTENT_TYPE_FILE_HELP));
     setSizeFull();
@@ -146,7 +144,7 @@ protected String getFriendlyName(String name) {
   protected void initDescription() {
     TextArea descriptionField = new TextArea(i18nManager.getMessage(Messages.RELATED_CONTENT_DESCRIPTION));
     descriptionField.setWidth(100, UNITS_PERCENTAGE);
-    descriptionField.setHeight(100, UNITS_PIXELS);
+    descriptionField.setHeight(50, UNITS_PIXELS);
     form.addField("description", descriptionField);
   }
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -706,7 +706,7 @@ protected RepositoryArtifact createArtifactFromJSON(String parentFolderId, Strin
       sendRequest(jsonRequest);
 
       // TODO: return the object
-      return getRepositoryArtifact(id);
+      return getRepositoryArtifact("/"+id);
     } catch (Exception je) {
       throw new RepositoryException("Unable to create model '" + artifactName + "' in parent folder '" + parentFolderId + "'", je);
     }

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/demo/DemoDataGenerator.java
Patch:
@@ -35,6 +35,7 @@
 import org.activiti.explorer.navigation.MyFlowsNavigationHandler;
 import org.activiti.explorer.navigation.NavigationHandlers;
 import org.activiti.explorer.navigation.TaskNavigationHandler;
+import org.activiti.explorer.navigation.UserNavigationHandler;
 import org.activiti.explorer.ui.content.AttachmentRenderers;
 import org.activiti.explorer.ui.content.file.FileAttachmentEditor;
 import org.activiti.explorer.ui.content.file.ImageAttachmentRenderer;
@@ -110,6 +111,7 @@ protected void initUriNavigation() {
     NavigationHandlers.addNavigationHandler(new DeploymentNavigationHandler());
     NavigationHandlers.addNavigationHandler(new DataBaseNavigationHandler());
     NavigationHandlers.addNavigationHandler(new JobNavigationHandler());
+    NavigationHandlers.addNavigationHandler(new UserNavigationHandler());
     NavigationHandlers.addNavigationHandler(new MyFlowsNavigationHandler());
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -432,6 +432,7 @@ protected static Properties getDefaultDatabaseTypeMappings() {
     databaseTypeMappings.setProperty("DB2 UDP","db2");
     databaseTypeMappings.setProperty("DB2/LINUX","db2");
     databaseTypeMappings.setProperty("DB2/LINUX390","db2");
+    databaseTypeMappings.setProperty("DB2/LINUXZ64","db2");
     databaseTypeMappings.setProperty("DB2/400 SQL","db2");
     databaseTypeMappings.setProperty("DB2/6000","db2");
     databaseTypeMappings.setProperty("DB2 UDB iSeries","db2");

File: modules/activiti-mule/src/test/java/org/activiti/engine/test/bpmn/servicetask/WebServiceUELTest.java
Patch:
@@ -37,7 +37,7 @@ public ProcessDefinitionEntity execute(CommandContext commandContext) {
           return Context
             .getProcessEngineConfiguration()
             .getDeploymentCache()
-            .findDeployedLatestProcessDefinitionByKey("asyncWebServiceInvocationWithDataFlowUEL");
+            .findDeployedLatestProcessDefinitionByKey("webServiceInvocationWithDataFlowUEL");
         }
       });
   

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ActivitiCycleWebScript.java
Patch:
@@ -79,7 +79,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
 
     } finally {
       // close the CycleHttpSession
-      CycleHttpSession.closeSession();
+      CycleHttpSession.closeSession(req);
     }
   }
 

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -87,7 +87,7 @@ protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse
       getContent(req, res);
     } finally {
       // close the CycleHttpSession
-      CycleHttpSession.closeSession();
+      CycleHttpSession.closeSession(req);
     }
   }
 

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskPage.java
Patch:
@@ -18,7 +18,6 @@
 import org.activiti.explorer.ExplorerApplication;
 import org.activiti.explorer.data.LazyLoadingContainer;
 import org.activiti.explorer.data.LazyLoadingQuery;
-import org.activiti.explorer.navigation.TaskNavigationHandler;
 import org.activiti.explorer.navigation.UriFragment;
 import org.activiti.explorer.ui.AbstractPage;
 import org.activiti.explorer.ui.ExplorerLayout;
@@ -69,7 +68,7 @@ public void valueChange(ValueChangeEvent event) {
         } else {
           // Nothing is selected
           splitPanel.removeComponent(splitPanel.getSecondComponent());
-          ExplorerApplication.getCurrent().setCurrentUriFragment(new UriFragment(TaskNavigationHandler.TASK_URI_PART));
+          ExplorerApplication.getCurrent().setCurrentUriFragment(getUriFragment(null));
         }
       }
     });

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/ParameterizedActionImpl.java
Patch:
@@ -38,20 +38,20 @@ public ParameterizedActionImpl(String actionId) {
    */
   public abstract String getFormAsHtml();
 
-  public Object getParameter(Map<String, Object> parameters, String name, boolean required, Object defaultValue, Class expectedClass) {
+  public <T> T getParameter(Map<String, Object> parameters, String name, boolean required, Object defaultValue, Class<T> expectedClass) {
     Object value = parameters.get(name);
     if (value == null || (value instanceof String && ((String) value).length() == 0)) {
       if (required) {
         throw new RepositoryException("Required parameter '" + name + "' not set while executing action '" + getId() + "'");
       } else {
-        return defaultValue;
+        return (T) defaultValue;
       }
     }
     if (expectedClass != null && !expectedClass.isAssignableFrom(value.getClass())) {
       throw new RepositoryException("Parameter '" + name + "' with value '" + value + "' has wrong type " + value.getClass() + " instead of " + expectedClass
               + " not set while executing action '" + getId() + "'");
     }
-    return value;
+    return (T) value;
   }
   
   @Override

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/SelectDiffTargetAction.java
Patch:
@@ -32,8 +32,8 @@ public SelectDiffTargetAction() {
   public void execute(RepositoryConnector connector, RepositoryArtifact artifact, Map<String, Object> parameters) throws Exception {
     // TODO: Check with Nils that we get the object instead of the string in
     // here!
-    String targetNodeId = (String) getParameter(parameters, PARAM_TARGET_ARTIFACT, true, null, String.class);
-    RepositoryConnector targetConnector = (RepositoryConnector) getParameter(parameters, PARAM_TARGET_CONNECTOR, true, null, RepositoryConnector.class);
+    String targetNodeId = getParameter(parameters, PARAM_TARGET_ARTIFACT, true, null, String.class);
+    RepositoryConnector targetConnector = getParameter(parameters, PARAM_TARGET_CONNECTOR, true, null, RepositoryConnector.class);
     RepositoryArtifact targetArtifact = targetConnector.getRepositoryArtifact(targetNodeId);
 
     // yeah, that is pretty hacky! Especially with multiple users. But as a

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -537,11 +537,11 @@ public void testTaskDueDate() throws Exception {
     Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     
     // Set due-date on task
-    Calendar dueDateCal = Calendar.getInstance();
-    task.setDueDate(dueDateCal.getTime());
+    Date dueDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").parse("01/02/2003 01:12:13");
+    task.setDueDate(dueDate);
     taskService.saveTask(task);
 
-    assertEquals(1, taskService.createTaskQuery().dueDate(dueDateCal.getTime()).count());
+    assertEquals(1, taskService.createTaskQuery().dueDate(dueDate).count());
     
     Calendar otherDate = Calendar.getInstance();
     otherDate.add(Calendar.YEAR, 1);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/FixedValue.java
Patch:
@@ -14,7 +14,6 @@
 package org.activiti.engine.impl.el;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/JuelExpression.java
Patch:
@@ -14,7 +14,6 @@
 package org.activiti.engine.impl.el;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.javax.el.ELContext;
 import org.activiti.engine.impl.javax.el.ELException;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Constants.java
Patch:
@@ -65,6 +65,9 @@ public class Constants {
 
   public static final String STYLE_PROCESS_DEFINITION_LIST = "proc-def-list";
   
+  public static final String STYLE_DATABASE_DETAILS = "database-details";
+  public static final String STYLE_DATABASE_TABLE_ROW = "database-table-row";
+  
   
   // Date formatting
   public static final DateFormat DEFAULT_DATE_FORMATTER = new SimpleDateFormat("dd MMM yyyy - hh:mm");

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/servlet/BootProcessEngineContextListener.java
Patch:
@@ -108,7 +108,7 @@ protected void initRandomUsers(ProcessEngine processEngine) {
   
   protected void initTasks(ProcessEngine processEngine) {
     TaskService taskService = processEngine.getTaskService();
-    for (int i=0; i<30; i++) {
+    for (int i=0; i<500; i++) {
       Task task = taskService.newTask();
       task.setAssignee("kermit");
       task.setDescription("This is task nr " + i + ", please do it asap!");

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/ThemeImageColumnGenerator.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.activiti.explorer.ui;
 
-import javax.persistence.Embeddable;
-
 import com.vaadin.terminal.Resource;
 import com.vaadin.terminal.ThemeResource;
 import com.vaadin.ui.Component;

File: modules/activiti-webapp-explorer2/src/main/java/org/activiti/explorer/servlet/BootProcessEngineContextListener.java
Patch:
@@ -71,8 +71,8 @@ protected void initKermit(ProcessEngine processEngine) {
     identityService.setUserInfo("kermit", "skype", "kermit.frog");
     
     // Accounts
-    identityService.setUserAccount("kermit", "google", "kermit.frog@gmail.com", "kermit123");
-    identityService.setUserAccount("kermit", "alfresco", "kermit_alf", "kermit_alf_123");
+    identityService.setUserAccount("kermit", "kermit", "google", "kermit.frog@gmail.com", "kermit123", null);
+    identityService.setUserAccount("kermit", "kermit", "alfresco", "kermit_alf", "kermit_alf_123", null);
     
     // Picture
     byte[] pictureBytes = IoUtil.readInputStream(this.getClass().getClassLoader().getResourceAsStream("org/activiti/explorer/images/kermit.jpg"), null);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -45,6 +45,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectByteArrayById", "selectByteArrayById_postgres");
     addDatabaseSpecificStatement("postgres", "selectResourceByDeploymentIdAndResourceName", "selectResourceByDeploymentIdAndResourceName_postgres");
     addDatabaseSpecificStatement("postgres", "selectResourcesByDeploymentId", "selectResourcesByDeploymentId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectHistoricDetailsByQueryCriteria", "selectHistoricDetailsByQueryCriteria_postgres");
   }
   
   protected String databaseType;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/action/fom/FormHandler.java
Patch:
@@ -11,8 +11,8 @@
 import org.activiti.cycle.annotations.CycleComponent;
 import org.activiti.cycle.context.CycleContext;
 import org.activiti.cycle.context.CycleContextType;
+import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
-import org.activiti.engine.impl.el.Expression;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;

File: modules/activiti-cactus/src/main/java/org/activiti/test/cactus/ActivitiServletTestCase.java
Patch:
@@ -102,7 +102,7 @@ private static void addTestToSuite(String classname, ServletTestSuite suite) {
     } else if (Test.class.isAssignableFrom(testClass)) {
       // Test case, should be wrapped in TestSuite to have all
       // test-methods turned into a single Test
-      TestSuite testSuite = new TestSuite(testClass);
+      ServletTestSuite testSuite = new ServletTestSuite(testClass);
       suite.addTest(testSuite);
     } else {
       throw new RuntimeException("Class " + classname + " is not a TestCase nor a TestSuite");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/diagram/ProcessDiagramCanvas.java
Patch:
@@ -156,6 +156,7 @@ public InputStream generateImage(String imageType) {
     
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     try {
+      // Try to remove white space
       minX = (minX <= 5) ? 5 : minX;
       minY = (minY <= 5) ? 5 : minY;
       BufferedImage imageToSerialize = processDiagram;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/pvm/ReadOnlyProcessDefinition.java
Patch:
@@ -16,10 +16,13 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public interface ReadOnlyProcessDefinition extends PvmScope {
   
   String getName();
+  
+  String getDescription();
 
   PvmActivity getInitial();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinition.java
Patch:
@@ -16,7 +16,7 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.runtime.ProcessInstance;
 
-/** Is an object structure representing an executable process composed of 
+/** An object structure representing an executable process composed of 
  * activities and transitions.
  * 
  * Business processes are often created with graphical editors that store the
@@ -54,7 +54,7 @@ public interface ProcessDefinition {
   /** The deployment in which this process definition is contained. */
   String getDeploymentId();
   
-  /** The resource name in the deployment of the diagram image. */
+  /** The resource name in the deployment of the diagram image (if any). */
   String getDiagramResourceName();
 
   /** Does this process definition has a {@link FormService#getStartFormData(String) start form key}. */

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/form/Address.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.forms;
+package org.activiti.engine.test.api.form;
 
 import java.io.Serializable;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -29,7 +29,7 @@
  * @author Joram Barrez
  * @author Frederik Heremans
  */
-public class MailActivityBehavior implements ActivityBehavior {
+public class MailActivityBehavior extends FlowNodeActivityBehavior {
 
   private Expression to;
   private Expression from;
@@ -62,6 +62,7 @@ public void execute(ActivityExecution execution) {
     } catch (EmailException e) {
       throw new ActivitiException("Could not send e-mail", e);
     }
+    leave(execution);
   }
 
   protected Email createEmail(String text, String html) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -56,14 +56,15 @@ protected void tearDown() throws Exception {
   
   @Deployment
   public void testSimpleTextMail() throws Exception {
-    runtimeService.startProcessInstanceByKey("simpleTextOnly");
+    String procId = runtimeService.startProcessInstanceByKey("simpleTextOnly").getId();
     
     List<WiserMessage> messages = wiser.getMessages();
     assertEquals(1, messages.size());
     
     WiserMessage message = messages.get(0);
     assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost",
             Arrays.asList("kermit@activiti.org"), null);
+    assertProcessEnded(procId);
   }
   
   @Deployment

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/OkReturningService.java
Patch:
@@ -7,6 +7,8 @@
  */
 public class OkReturningService implements Serializable {
 
+  private static final long serialVersionUID = 1L;
+
   public String invoke() {
     return "ok";
   }

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/ValueBean.java
Patch:
@@ -7,6 +7,8 @@
  */
 public class ValueBean implements Serializable {
 
+  private static final long serialVersionUID = 1L;
+  
   private final String value;
 
   public ValueBean(String value) {

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
-import org.activiti.engine.task.TaskQuery;
 
 
 /**

File: modules/activiti-webapp-kickstart/src/main/java/org/activiti/kickstart/ui/panel/KickstartWorkflowPanel.java
Patch:
@@ -86,6 +86,9 @@ protected void initUi() {
     initTitle();
 
     GridLayout layout = new GridLayout(2, 7);
+    layout.setSizeFull();
+    layout.setColumnExpandRatio(0, 1.0f);
+    layout.setColumnExpandRatio(1, 9.0f);
     layout.setSpacing(true);
     addComponent(layout);
 

File: modules/activiti-webapp-kickstart/src/main/java/org/activiti/kickstart/ui/table/TaskTable.java
Patch:
@@ -48,6 +48,7 @@ public TaskTable(ViewManager viewManager) {
     setEditable(true);
     setColumnReorderingAllowed(true);
 
+    setSizeFull();
     setPageLength(0);
 
     addContainerProperty("name", String.class, null);

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.ActivitiClassLoadingException;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.impl.util.CollectionUtil;
@@ -77,6 +78,8 @@ public void testUnexistingClassDelegation() {
       fail();
     } catch (ActivitiException e) {
       assertTrue(e.getMessage().contains("couldn't instantiate class org.activiti.BogusClass"));
+      assertNotNull(e.getCause());
+      assertTrue(e.getCause() instanceof ActivitiClassLoadingException);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.logging.Logger;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.runtime.ExecutionEntity;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -73,7 +73,9 @@ protected void createInstances(ActivityExecution execution) throws Exception {
       ActivityExecution concurrentExecution = concurrentExecutions.get(loopCounter);
       // executions can be inactive, if instances are all automatics (no-waitstate)
       // and completionCondition has been met in the meantime
-      if (concurrentExecution.isActive() && concurrentExecution.getParent().isActive()) { 
+      if (concurrentExecution.isActive() && !concurrentExecution.isEnded() 
+              && concurrentExecution.getParent().isActive() 
+              && !concurrentExecution.getParent().isEnded()) { 
         setLoopVariable(concurrentExecution, LOOP_COUNTER, loopCounter);
         executeOriginalBehavior(concurrentExecution, loopCounter);
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -694,6 +694,7 @@ public void parseMultiInstanceLoopCharacteristics(Element activityElement, Activ
         miActivityBehavior = new ParallelMultiInstanceBehavior(activity, (AbstractBpmnActivityBehavior) activity.getActivityBehavior());
       }
       activity.setScope(true);
+      activity.setProperty("multiInstance", isSequential ? "sequential" : "parallel");
       activity.setActivityBehavior(miActivityBehavior);
       
       // loopCardinality

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/Bpmn20Provider.java
Patch:
@@ -43,8 +43,8 @@ public Content getContent(RepositoryArtifact artifact) {
       // use the bpmn2_0_serialization export servlet to provide bpmn20 xml
       // by doing this, we can support different signavio versions instead of
       // the commercial Signavio only
-      Response jsonResponse = getJsonResponse(signavioConnector, artifact, "/json");
-      JSONObject jsonData = new JSONObject(jsonResponse.getEntity().getText());
+      String jsonResponse = getJsonResponse(signavioConnector, artifact, "/json");
+      JSONObject jsonData = new JSONObject(jsonResponse);
       String result = signavioConnector.transformJsonToBpmn20Xml(jsonData.toString());
 
       // This would have been the alternative that works only for signavio but

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/Jpdl4Provider.java
Patch:
@@ -27,7 +27,7 @@
 import org.activiti.cycle.impl.connector.signavio.repositoryartifacttype.SignavioJpdl4ArtifactType;
 import org.activiti.cycle.impl.mimetype.XmlMimeType;
 import org.activiti.cycle.impl.transform.XmlToTextTransformation;
-import org.restlet.Response;
+import org.restlet.ext.json.JsonRepresentation;
 import org.restlet.ext.xml.DomRepresentation;
 
 @CycleComponent(context = CycleContextType.APPLICATION)
@@ -42,8 +42,8 @@ public Content getContent(RepositoryArtifact artifact) {
       SignavioConnectorInterface signavioConnector = (SignavioConnectorInterface) CycleSessionContext.get(RuntimeConnectorList.class).getConnectorById(artifact.getConnectorId());
       Content content = new Content();
 
-      Response jpdlResponse = getJsonResponse(signavioConnector, artifact, "/jpdl4");
-      DomRepresentation xmlData = new DomRepresentation(jpdlResponse.getEntity());
+      String jpdlResponse = getJsonResponse(signavioConnector, artifact, "/jpdl4");
+      DomRepresentation xmlData = new DomRepresentation(new JsonRepresentation( jpdlResponse ));
       XmlToTextTransformation transformation = CycleApplicationContext.get(XmlToTextTransformation.class);
       String jpdl4AsString = transformation.getXmlAsString(xmlData.getDomSource());
       // log.finest("JPDL4 String: " + jpdl4AsString);

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/JsonProvider.java
Patch:
@@ -38,9 +38,7 @@ public Content getContent(RepositoryArtifact artifact) {
     try {
       SignavioConnectorInterface signavioConnector = (SignavioConnectorInterface) CycleSessionContext.get(RuntimeConnectorList.class).getConnectorById(artifact.getConnectorId());
       Content content = new Content();
-      Response jsonResponse = getJsonResponse(signavioConnector, artifact, "/json");
-
-      String jsonString = jsonResponse.getEntity().getText();
+      String jsonString = getJsonResponse(signavioConnector, artifact, "/json");
       JSONObject jsonObj = new JSONObject(jsonString);
       content.setValue(jsonObj.toString(2));
       return content;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/SignavioContentRepresentationProvider.java
Patch:
@@ -17,13 +17,12 @@
 import org.activiti.cycle.ContentRepresentation;
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.impl.connector.signavio.SignavioConnectorInterface;
-import org.restlet.Response;
 
 public abstract class SignavioContentRepresentationProvider implements ContentRepresentation {
 
   private static final long serialVersionUID = 1L;
 
-  public static Response getJsonResponse(SignavioConnectorInterface connector, RepositoryArtifact artifact, String urlSuffix) throws IOException {
+  public static String getJsonResponse(SignavioConnectorInterface connector, RepositoryArtifact artifact, String urlSuffix) throws IOException {
     String url = connector.getModelUrl(artifact) + urlSuffix;
     return connector.getJsonResponse(url);
   }

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/ToUpperCaseSetterInjected.java
Patch:
@@ -13,10 +13,9 @@
  */
 package org.activiti.examples.bpmn.servicetask;
 
-import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.impl.el.Expression;
-import org.junit.Assert;
 
 
 /**
@@ -30,7 +29,7 @@ public class ToUpperCaseSetterInjected implements JavaDelegate {
   public void execute(DelegateExecution execution) {
     
     if(!setterInvoked) {
-      Assert.fail("Setter was not invoked");
+      throw new RuntimeException("Setter was not invoked");
     }
     execution.setVariable("setterVar", ((String)text.getValue(execution)).toUpperCase());
   }

File: modules/activiti-spring/src/main/java/org/activiti/spring/SpringExpressionManager.java
Patch:
@@ -58,7 +58,7 @@ protected ELResolver createElResolver(VariableScope variableScope) {
     
     if(beans != null) {
       // Only expose limited set of beans in expressions
-      compositeElResolver.add(new ReadonlyMapELResolver(beans));
+      compositeElResolver.add(new ReadOnlyMapELResolver(beans));
     } else {
       // Expose full application-context in expressions
       compositeElResolver.add(new ApplicationContextElResolver(applicationContext));

File: modules/activiti-spring/src/main/java/org/activiti/spring/ReadOnlyMapELResolver.java
Patch:
@@ -28,11 +28,11 @@
  * 
  * @author Frederik Heremans
  */
-public class ReadonlyMapELResolver extends ELResolver {
+public class ReadOnlyMapELResolver extends ELResolver {
 
   protected Map<Object, Object> wrappedMap;
   
-  public ReadonlyMapELResolver(Map<Object, Object> map) {
+  public ReadOnlyMapELResolver(Map<Object, Object> map) {
     this.wrappedMap = map;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -801,7 +801,7 @@ protected String addSqlStatementPiece(String sqlStatement, String line) {
     if (sqlStatement==null) {
       return line;
     }
-    return sqlStatement + " "+ System.getProperty("line.separator") + line;
+    return sqlStatement + " " + line;
   }
   
   protected String readNextTrimmedLine(BufferedReader reader) throws IOException {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -801,7 +801,7 @@ protected String addSqlStatementPiece(String sqlStatement, String line) {
     if (sqlStatement==null) {
       return line;
     }
-    return sqlStatement + " \n" + line;
+    return sqlStatement + " "+ System.getProperty("line.separator") + line;
   }
   
   protected String readNextTrimmedLine(BufferedReader reader) throws IOException {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/DeploymentQueryImpl.java
Patch:
@@ -32,7 +32,8 @@ public class DeploymentQueryImpl extends AbstractQuery<DeploymentQuery, Deployme
   protected String name;
   protected String nameLike;
 
-  public DeploymentQueryImpl() {
+  public DeploymentQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public DeploymentQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -40,7 +40,8 @@ public class ExecutionQueryImpl extends ExecutionVariableQueryImpl<ExecutionQuer
   
   protected CommandExecutor commandExecutor;
   
-  public ExecutionQueryImpl() {
+  public ExecutionQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public ExecutionQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionVariableQueryImpl.java
Patch:
@@ -33,7 +33,8 @@ public abstract class ExecutionVariableQueryImpl<T extends Query<?,?>, U> extend
 
   protected List<QueryVariableValue> queryVariableValues = new ArrayList<QueryVariableValue>();
   
-  public ExecutionVariableQueryImpl() {
+  public ExecutionVariableQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public ExecutionVariableQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricActivityInstanceQueryImpl.java
Patch:
@@ -38,7 +38,8 @@ public class HistoricActivityInstanceQueryImpl extends AbstractQuery<HistoricAct
   protected boolean finished;
   protected boolean unfinished;
 
-  public HistoricActivityInstanceQueryImpl() {
+  public HistoricActivityInstanceQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public HistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricDetailQueryImpl.java
Patch:
@@ -32,7 +32,8 @@ public class HistoricDetailQueryImpl extends AbstractQuery<HistoricDetailQuery,
   protected String activityInstanceId;
   protected String type;
 
-  public HistoricDetailQueryImpl() {
+  public HistoricDetailQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public HistoricDetailQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -32,7 +32,8 @@ public class HistoricProcessInstanceQueryImpl extends AbstractQuery<HistoricProc
   protected boolean finished = false;
   protected boolean unfinished = false;
   
-  public HistoricProcessInstanceQueryImpl() {
+  public HistoricProcessInstanceQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public HistoricProcessInstanceQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/JobQueryImpl.java
Patch:
@@ -42,7 +42,8 @@ public class JobQueryImpl extends AbstractQuery<JobQuery, Job> implements JobQue
   protected Date duedateHigherThenOrEqual;
   protected Date duedateLowerThenOrEqual;
   
-  public JobQueryImpl() {
+  public JobQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public JobQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessDefinitionQueryImpl.java
Patch:
@@ -42,7 +42,8 @@ public class ProcessDefinitionQueryImpl extends AbstractQuery<ProcessDefinitionQ
   protected Integer version;
   protected boolean latest = false;
 
-  public ProcessDefinitionQueryImpl() {
+  public ProcessDefinitionQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public ProcessDefinitionQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -41,7 +41,8 @@ public class ProcessInstanceQueryImpl extends ExecutionVariableQueryImpl<Process
   
   protected CommandExecutor commandExecutor;
   
-  public ProcessInstanceQueryImpl() {
+  public ProcessInstanceQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public ProcessInstanceQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -51,7 +51,8 @@ public class TaskQueryImpl extends AbstractQuery<TaskQuery, Task> implements Tas
   protected String keyLike;
   protected List<QueryVariableValue> variables = new ArrayList<QueryVariableValue>();
   
-  public TaskQueryImpl() {
+  public TaskQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public TaskQueryImpl(CommandExecutor commandExecutor) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.behavior;
 
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.scripting.ScriptingEngines;
@@ -36,9 +37,8 @@ public ScriptTaskActivityBehavior(String script, String language, String resultV
   }
   
   public void execute(ActivityExecution execution) throws Exception {
-    ScriptingEngines scriptingEngines = CommandContext
-      .getCurrent()
-      .getProcessEngineConfiguration()
+    ScriptingEngines scriptingEngines = Context
+      .getProcessEngineContext()
       .getScriptingEngines();
 
     Object result = scriptingEngines.evaluate(script, language, execution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/IdentitySession.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.engine.identity.User;
 import org.activiti.engine.identity.UserQuery;
 import org.activiti.engine.impl.Page;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**
@@ -36,7 +35,7 @@ public interface IdentitySession {
   User findUserById(String userId);
   List<User> findUsersByGroupId(String groupId);
   boolean isValidUser(String userId);
-  UserQuery createNewUserQuery(CommandExecutor commandExecutor);
+  UserQuery createNewUserQuery();
   List<User> findUserByQueryCriteria(Object query, Page page);
   long findUserCountByQueryCriteria(Object query);
   
@@ -47,7 +46,7 @@ public interface IdentitySession {
   void deleteGroup(String groupId);
   Group findGroupById(String groupId);
   List<Group> findGroupsByUser(String userId);
-  GroupQuery createNewGroupQuery(CommandExecutor commandExecutor);
+  GroupQuery createNewGroupQuery();
   List<Group> findGroupByQueryCriteria(Object query, Page page);
   long findGroupCountByQueryCriteria(Object query);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateGroupQueryCmd.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.identity.GroupQuery;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**
@@ -25,10 +24,9 @@
 public class CreateGroupQueryCmd implements Command<GroupQuery> {
 
   public GroupQuery execute(CommandContext commandContext) {
-    CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutorTxRequired();
     return commandContext
       .getIdentitySession()
-      .createNewGroupQuery(commandExecutor);
+      .createNewGroupQuery();
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateUserQueryCmd.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.identity.UserQuery;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**
@@ -25,10 +24,9 @@
 public class CreateUserQueryCmd implements Command<UserQuery> {
   
   public UserQuery execute(CommandContext commandContext) {
-    CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutorTxRequired();
     return commandContext
       .getIdentitySession()
-      .createNewUserQuery(commandExecutor);
+      .createNewUserQuery();
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskFormCmd.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.impl.form.TaskFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.task.TaskEntity;
 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.cmd;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.identity.Group;
 import org.activiti.engine.impl.identity.GroupEntity;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbHistorySession.java
Patch:
@@ -48,9 +48,9 @@ public void insertHistoricProcessInstance(HistoricProcessInstanceEntity historic
   public void deleteHistoricProcessInstance(String historicProcessInstanceId) {
     int historyLevel = Context.getProcessEngineContext().getHistoryLevel();
     if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
-      List<HistoricDetailEntity> historicDetails = (List) new HistoricDetailQueryImpl()
+      List<HistoricDetailEntity> historicDetails = (List) new HistoricDetailQueryImpl(CommandContext.getCurrent())
         .processInstanceId(historicProcessInstanceId)
-        .executeList(CommandContext.getCurrent(), null);
+        .list();
       for (HistoricDetailEntity historicDetail: historicDetails) {
         historicDetail.delete();
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbRuntimeSession.java
Patch:
@@ -53,9 +53,9 @@ public void deleteProcessInstance(String processInstanceId, String deleteReason)
       throw new ActivitiException("No process instance found for id '" + processInstanceId + "'");
     }
     
-    List<TaskEntity> tasks = (List) new TaskQueryImpl()
+    List<TaskEntity> tasks = (List) new TaskQueryImpl(CommandContext.getCurrent())
       .processInstanceId(processInstanceId)
-      .executeList(CommandContext.getCurrent(), null);
+      .list();
     for (TaskEntity task: tasks) {
       task.delete(TaskEntity.DELETE_REASON_DELETED);
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoricTaskInstanceEntity.java
Patch:
@@ -75,9 +75,9 @@ public void delete() {
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
     if (historyLevel >= ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
       HistoricDetailQueryImpl variableQuery = 
-        (HistoricDetailQueryImpl) new HistoricDetailQueryImpl().taskId(id);
+        (HistoricDetailQueryImpl) new HistoricDetailQueryImpl(commandContext).taskId(id);
       
-      List<HistoricDetail> details = variableQuery.executeList(commandContext, null);
+      List<HistoricDetail> details = variableQuery.list();
       for(HistoricDetail detail : details) {
         ((HistoricDetailEntity) detail).delete();
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceEndHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.impl.HistoricActivityInstanceQueryImpl;
-import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.history.HistoricActivityInstanceEntity;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -63,11 +62,11 @@ public static HistoricActivityInstanceEntity findActivityInstance(ExecutionEntit
       }
     }
     
-    List<HistoricActivityInstance> historicActivityInstances = new HistoricActivityInstanceQueryImpl()
+    List<HistoricActivityInstance> historicActivityInstances = new HistoricActivityInstanceQueryImpl(commandContext)
       .executionId(executionId)
       .activityId(activityId)
       .unfinished()
-      .executeList(commandContext, new Page(0, 1));
+      .listPage(0, 1);
     
     if (!historicActivityInstances.isEmpty()) {
       return (HistoricActivityInstanceEntity) historicActivityInstances.get(0);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/rules/RulesHelper.java
Patch:
@@ -57,11 +57,11 @@ public static KnowledgeBase findKnowledgeBaseByDeploymentId(String deploymentId)
   }
 
   public static KnowledgeBase findLatestKnowledgeBaseByDeploymentName(String deploymentName) {
-    DeploymentQueryImpl deploymentQuery = new DeploymentQueryImpl();
+    DeploymentQueryImpl deploymentQuery = new DeploymentQueryImpl(CommandContext.getCurrent());
     deploymentQuery
       .deploymentName(deploymentName)
       .orderByDeploymenTime().asc();
-    List<Deployment> deployments = deploymentQuery.executeList(CommandContext.getCurrent(), new Page(0, 1));
+    List<Deployment> deployments = deploymentQuery.listPage(0, 1);
     if (deployments.isEmpty()) {
       throw new ActivitiException("no deployments with name "+deploymentName);
     }

File: modules/activiti-engine/src/test/java/org/activiti/standalone/cfg/identity/CustomIdentitySession.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.cfg.IdentitySession;
 import org.activiti.engine.impl.identity.UserEntity;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.interceptor.Session;
 
 /**
@@ -48,7 +47,7 @@ public Group createNewGroup(String groupId) {
     return null;
   }
 
-  public GroupQuery createNewGroupQuery(CommandExecutor commandExecutor) {
+  public GroupQuery createNewGroupQuery() {
     trace(Thread.currentThread().getStackTrace());
     return null;
   }
@@ -58,7 +57,7 @@ public User createNewUser(String userId) {
     return new UserEntity(userId);
   }
 
-  public UserQuery createNewUserQuery(CommandExecutor commandExecutor) {
+  public UserQuery createNewUserQuery() {
     trace(Thread.currentThread().getStackTrace());
     return null;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/context/ProcessEngineContext.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.engine.impl.context;
 
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.activiti.engine.impl.scripting.ScriptingEngines;
 import org.activiti.engine.impl.variable.VariableTypes;
 
 import java.util.Map;
@@ -27,6 +28,7 @@ public class ProcessEngineContext {
   protected int historyLevel;
   protected Map<Object, Object> beans;
   protected VariableTypes variableTypes;
+  protected ScriptingEngines scriptingEngines;
   protected String mailServerDefaultFrom;
   protected String mailServerHost;
   protected int mailServerPort;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbManagementSession.java
Patch:
@@ -129,8 +129,8 @@ public TableMetaData getTableMetaData(String tableName) {
 
       ResultSet resultSet = metaData.getColumns(null, null, tableName, null);
       while(resultSet.next()) {
-        String name = resultSet.getString("COLUMN_NAME");
-        String type = resultSet.getString("TYPE_NAME");
+        String name = resultSet.getString("COLUMN_NAME").toUpperCase();
+        String type = resultSet.getString("TYPE_NAME").toUpperCase();
         result.addColumnMetaData(name, type);
       }
       

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -40,7 +40,6 @@ public void testTableCount() {
     assertEquals(new Long(0), tableCount.get("ACT_RE_PROCDEF"));
     assertEquals(new Long(0), tableCount.get("ACT_RU_TASK"));
     assertEquals(new Long(0), tableCount.get("ACT_RU_IDENTITYLINK"));
-    ;
   }
 
   public void testGetTableMetaData() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.StringTokenizer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbManagementSession.java
Patch:
@@ -71,7 +71,7 @@ public List<String> getTablesPresentInDatabase() {
         tables = databaseMetaData.getTables(null, null, "ACT_%", DbSqlSession.JDBC_METADATA_TABLE_TYPES);
         while (tables.next()) {
           String tableName = tables.getString("TABLE_NAME");
-          tableNames.add(tableName);
+          tableNames.add(tableName.toUpperCase());
         }
       } finally {
         tables.close();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/db/CycleConfigurationDao.java
Patch:
@@ -17,8 +17,10 @@ public interface CycleConfigurationDao {
 
   public List<CycleConfigEntity> selectCycleConfigByGroup(String group);
 
-  public List<CycleConfigEntity> selectCycleConfigById(String id);
+  public CycleConfigEntity selectCycleConfigById(String id);
   
   public List<String> selectCycleConfigurationGroups();
+  
+  public void deleteCycleConfigurationEntry(String id);
 
 }

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/ActivitiCycleDbAwareTest.java
Patch:
@@ -31,8 +31,8 @@ protected void ensureCycleDbCreated() {
 
       public Object execute(CommandContext commandContext) {
         DbSqlSession session = commandContext.getSession(DbSqlSession.class);
-        session.executeSchemaResourceOperation("cycle/drop", "drop");
-        session.executeSchemaResourceOperation("cycle/create", "create");
+//        session.executeSchemaResourceOperation("cycle/drop", "drop");
+//        session.executeSchemaResourceOperation("cycle/create", "create");
         return null;
       }
     });
@@ -44,7 +44,7 @@ protected void ensureCycleDbDropped() {
 
       public Object execute(CommandContext commandContext) {
         DbSqlSession session = commandContext.getSession(DbSqlSession.class);
-        session.executeSchemaResourceOperation("cycle/drop", "drop");
+//        session.executeSchemaResourceOperation("cycle/drop", "drop");
         return null;
       }
     });

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -117,7 +117,7 @@ public abstract class ProcessEngineConfiguration {
   protected int mailServerPort = 25;
   protected String mailServerDefaultFrom = "activiti@localhost";
 
-  protected String databaseType = "h2";
+  protected String databaseType;
   protected String databaseSchemaUpdate = DB_SCHEMA_UPDATE_FALSE;
   protected String jdbcDriver = "org.h2.Driver";
   protected String jdbcUrl = "jdbc:h2:tcp://localhost/activiti";

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -133,7 +133,7 @@ public class BpmnParse extends Parse {
    * that this map doesn't need to be re-initialized for each new process
    * definition.
    */
-  protected Map<String, MessageDefinition> messages;
+  protected Map<String, MessageDefinition> messages = new HashMap<String, MessageDefinition>();
   protected Map<String, StructureDefinition> structures = new HashMap<String, StructureDefinition>();
   protected Map<String, BpmnInterfaceImplementation> interfaceImplementations = new HashMap<String, BpmnInterfaceImplementation>();
   protected Map<String, OperationImplementation> operationImplementations = new HashMap<String, OperationImplementation>();

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionsGet.java
Patch:
@@ -65,9 +65,9 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
         StartFormData startFormData = getFormService().getStartFormData(p.getId());
         if (startFormData != null) {
           restProcessDefinition.setStartFormResourceKey(startFormData.getFormKey());
-          restProcessDefinition.setGraphicNotationDefined(isGraphicNotationDefined(p.getId()));
-
         }
+        
+        restProcessDefinition.setGraphicNotationDefined(isGraphicNotationDefined(p.getId()));
         processDefinitionTasks.add(restProcessDefinition);
       }
       // Add the list of wrapped Tasks to the model

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetPropertiesCmd.java
Patch:
@@ -28,7 +28,6 @@
 public class GetPropertiesCmd implements Command<Map<String, String>> {
 
   @SuppressWarnings("unchecked")
-  @Override
   public Map<String, String> execute(CommandContext commandContext) {
     List<PropertyEntity> propertyEntities = commandContext
       .getDbSqlSession()

File: modules/activiti-upgrade/src/test/java/org/activiti/upgrade/test/UserTaskBeforeTest.java
Patch:
@@ -33,11 +33,9 @@ public void testSimplestTask() {
 
   @Deployment
   public void testTaskWithExecutionVariables() {
-    runtimeService.startProcessInstanceByKey("taskWithExecutionVariablesProcess");
-
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("instrument", "trumpet");
     variables.put("player", "gonzo");
-    runtimeService.startProcessInstanceByKey("userTaskProcess", variables);
+    runtimeService.startProcessInstanceByKey("taskWithExecutionVariablesProcess", variables);
   }
 }

File: modules/activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/WSDLImporter.java
Patch:
@@ -196,7 +196,7 @@ private S2JJAXBModel compileModel(Types types, SchemaCompiler compiler, Element
   }
 
   private void createDefaultStructures(Element rootTypes) {
-    NodeList complexTypes = rootTypes.getElementsByTagName("xs:complexType");
+    NodeList complexTypes = rootTypes.getElementsByTagNameNS("http://www.w3.org/2001/XMLSchema", "complexType");
     for (int i = 0; i < complexTypes.getLength(); i++) {
       Element element = (Element) complexTypes.item(i);
       String structureName = this.namespace + element.getAttribute("name");
@@ -212,7 +212,7 @@ private Element getRootTypes() {
       Document doc = parser.getDocument();
       Element root = (Element) doc.getFirstChild();
       Element typesElement = (Element) root.getElementsByTagName("wsdl:types").item(0);
-      return (Element) typesElement.getElementsByTagName("xs:schema").item(0);
+      return (Element) typesElement.getElementsByTagNameNS("http://www.w3.org/2001/XMLSchema", "schema").item(0);
     } catch (SAXException e) {
       throw new ActivitiException(e.getMessage(), e);
     } catch (IOException e) {

File: modules/activiti-jbpm-migration/src/main/java/org/activiti/migration/ProcessDataMigration.java
Patch:
@@ -43,7 +43,7 @@ public class ProcessDataMigration {
   }
   
   protected static final Logger LOGGER = Logger.getLogger(ProcessConversion.class.getName());
-  protected static final DateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss");
+  protected static final DateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
   
   protected ServiceFactory serviceFactory;
   protected String workingDir;

File: modules/activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionService.java
Patch:
@@ -70,7 +70,7 @@ public interface ProcessConversionService {
   
   Element convertTransition(Document processDefinitionDocument, Transition transition);
   
-  Document createEmptyBpmn20Document(String processName);
+  Document createEmptyBpmn20Document(String processName, int version);
   
   void close();
   

File: modules/activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionServiceImpl.java
Patch:
@@ -63,13 +63,13 @@ public Map<String, Document> convertAllProcessDefinitions() {
                 + "', version " + processDefinition.getVersion());
       }
       Document processDefinitionDocument = convertProcessDefinition(processDefinition);
-      processDefinitionMap.put(processDefinition.getName(), processDefinitionDocument);
+      processDefinitionMap.put(processDefinition.getName() + "-" + processDefinition.getVersion(), processDefinitionDocument);
     }
     return processDefinitionMap;
   }
   
   public Document convertProcessDefinition(ProcessDefinition processDefinition) {
-    Document processDefinitionXml = createEmptyBpmn20Document(processDefinition.getName());
+    Document processDefinitionXml = createEmptyBpmn20Document(processDefinition.getName(), processDefinition.getVersion());
     Element processElement = getProcessElement(processDefinitionXml);
     
     for (Node node : jbpm3Dao.getNodes(processDefinition)) {
@@ -207,7 +207,7 @@ public Element convertTransition(Document processDefinitionDocument, Transition
     return sequenceFlowElement;
   }
   
-  public Document createEmptyBpmn20Document(String processName) {
+  public Document createEmptyBpmn20Document(String processName, int version) {
     try {
       DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
       factory.setNamespaceAware(true);

File: modules/activiti-jbpm-migration/src/test/java/org/activiti/migration/test/MigrationTestCase.java
Patch:
@@ -117,7 +117,7 @@ protected ServiceFactory createServiceFactory() throws IOException {
     return ServiceFactory.configureFromProperties(jbpm3DbProperties, activitiDbProperties);
   }
   
-  protected String convertProcess(String processName) {
+  protected String getConvertedProcess(String processName) {
     Map<String, Document> migratedProcessDefinitions = processConversionService.convertAllProcessDefinitions();
     return xmlTransformationService.convertToString(migratedProcessDefinitions.get(processName));
   }

File: modules/activiti-jbpm-migration/src/test/java/org/activiti/migration/test/process/conversion/SimplestProcessDefinitionConversionTest.java
Patch:
@@ -32,7 +32,7 @@ protected void setUp() throws Exception {
   }
   
   public void testStartProcessInstanceOfMigratedProcess() throws Exception {
-    String migratedBpmn20Xml = convertProcess("simplest");
+    String migratedBpmn20Xml = getConvertedProcess("simplest-1");
     String deployId = repositoryService.createDeployment()
       .addString("simplest.bpmn20.xml", migratedBpmn20Xml)
       .deploy()

File: modules/activiti-jbpm-migration/src/test/java/org/activiti/migration/test/process/conversion/TaskNodeConversionTest.java
Patch:
@@ -29,7 +29,7 @@ protected void setUp() throws Exception {
   }
   
   public void testActorIdToAssigneeConversion() {
-    String migratedBpmn20Xml = convertProcess("actorIdProcess");
+    String migratedBpmn20Xml = getConvertedProcess("actorIdProcess-1");
     String deployId = repositoryService.createDeployment()
       .addString("actorIdProcess.bpmn20.xml", migratedBpmn20Xml) .deploy().getId();
     
@@ -44,7 +44,7 @@ public void testActorIdToAssigneeConversion() {
   }
   
   public void testPooledActorsConversion() {
-    String migratedBpmn20Xml = convertProcess("pooledActorsProcess");
+    String migratedBpmn20Xml = getConvertedProcess("pooledActorsProcess-1");
     String deployId = repositoryService.createDeployment()
       .addString("pooledActorsProcess.bpmn20.xml", migratedBpmn20Xml).deploy().getId();
     

File: modules/activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.migration.process;
+package org.activiti.migration.service;
 
 import java.util.List;
 import java.util.Map;

File: modules/activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.migration.process;
+package org.activiti.migration.service;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -59,7 +59,8 @@ public Map<String, Document> convertAllProcessDefinitions() {
     List<ProcessDefinition> processDefinitions = jbpm3Dao.getAllProcessDefinitions();
     for (ProcessDefinition processDefinition : processDefinitions) {
       if (LOGGER.isLoggable(Level.INFO)) {
-        LOGGER.info("Converting process definition '" + processDefinition.getName() + "'");
+        LOGGER.info("Converting process definition '" + processDefinition.getName() 
+                + "', version " + processDefinition.getVersion());
       }
       Document processDefinitionDocument = convertProcessDefinition(processDefinition);
       processDefinitionMap.put(processDefinition.getName(), processDefinitionDocument);

File: modules/activiti-jbpm-migration/src/main/java/org/activiti/migration/util/ZipUtil.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import java.util.Map;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -301,6 +301,7 @@ private RepositoryArtifact getArtifactInfoFromFile(String id, JSONObject json) t
     String parent = json.optString("parent");
     if (parent != null) {
       String parentId = getConfiguration().getModelIdFromUrl(parent);
+      parentId = parentId.replace("/directory", "");      
       fileInfo.getMetadata().setParentFolderId(parentId);
     }
 
@@ -772,7 +773,7 @@ protected void validateConfiguration() {
       path = path + "/";
     }
     setConfigValue(CONFIG_KEY_SIGNAVIO_BASE_URL, path);
-    String type = getConfigValue(CONFIG_KEY_TYPE,String.class);
+    String type = getConfigValue(CONFIG_KEY_TYPE, String.class);
     if ("oryx".equals(type)) {
       configuration = new OryxConnectorConfiguration(this);
     } else {

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -54,8 +54,8 @@ public void testGetTableMetaData() {
     assertTrue(assigneeIndex >= 0);
     assertTrue(createTimeIndex >= 0);
     
-    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2"}, tableMetaData.getColumnTypes().get(assigneeIndex));
-    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)"}, tableMetaData.getColumnTypes().get(createTimeIndex));
+    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar"}, tableMetaData.getColumnTypes().get(assigneeIndex));
+    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime"}, tableMetaData.getColumnTypes().get(createTimeIndex));
   }
   
   private void assertOneOf(String[] possibleValues, String currentValue) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -98,7 +98,6 @@ public void testCallParallelSubProcess() {
     // Completing the first task should not end the subprocess
     taskService.complete(taskA.getId());
     assertEquals(1, taskQuery.list().size());
-    assertEquals(2, runtimeService.createExecutionQuery().count());
     
     // Completing the second task should end the subprocess and end the whole process instance
     taskService.complete(taskB.getId());

File: modules/activiti-spring/src/test/java/org/activiti/spring/test/taskListener/TaskListenerSpringTest.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Joram Barrez
  */
-@ContextConfiguration("classpath:org/activiti/spring/test/tasklistener/TaskListenerDelegateExpressionTest-context.xml")
+@ContextConfiguration("classpath:org/activiti/spring/test/taskListener/TaskListenerDelegateExpressionTest-context.xml")
 public class TaskListenerSpringTest extends SpringActivitiTestCase {
   
   @Deployment

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/AbstractBpmnActivity.java
Patch:
@@ -52,5 +52,5 @@ public void signal(ActivityExecution execution, String signalName, Object signal
     // concrete activity behaviours that do accept signals should override this method;
     throw new ActivitiException("this activity doesn't accept signals");
   }
-
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ReceiveTaskActivity.java
Patch:
@@ -29,6 +29,7 @@ public class ReceiveTaskActivity extends TaskActivity {
 
   public void execute(ActivityExecution execution) throws Exception {
     // Do nothing: waitstate behavior
+    System.out.println("iep");
   }
   
   public void signal(ActivityExecution execution, String signalName, Object data) throws Exception {

File: modules/activiti-camel/src/main/java/org/activiti/camel/ContextProvider.java
Patch:
@@ -17,7 +17,6 @@
 
 public interface ContextProvider {
 
-    CamelContext getContext(String processName); 
-
+  CamelContext getContext(String processName);
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParseListener.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * @author Tom Baeyens
  * @author Falko Menge
+ * @author Joram Barrez
  */
 public interface BpmnParseListener {
 
@@ -39,6 +40,7 @@ public interface BpmnParseListener {
   void parseUserTask(Element userTaskElement, ScopeImpl scope, ActivityImpl activity);
   void parseEndEvent(Element endEventElement, ScopeImpl scope, ActivityImpl activity);
   void parseBoundaryTimerEventDefinition(Element timerEventDefinition, boolean interrupting, ActivityImpl timerActivity);
+  void parseBoundaryErrorEventDefinition(Element errorEventDefinition, boolean interrupting, ActivityImpl activity, ActivityImpl nestedErrorEventActivity);
   void parseSubProcess(Element subProcessElement, ScopeImpl scope, ActivityImpl activity);
   void parseCallActivity(Element callActivityElement, ScopeImpl scope, ActivityImpl activity);
   void parseProperty(Element propertyElement, VariableDeclaration variableDeclaration, ActivityImpl activity);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/HistoryParseListener.java
Patch:
@@ -112,6 +112,9 @@ public void parseParallelGateway(Element parallelGwElement, ScopeImpl scope, Act
 
   public void parseBoundaryTimerEventDefinition(Element timerEventDefinition, boolean interrupting, ActivityImpl timerActivity) {
   }
+  
+  public void parseBoundaryErrorEventDefinition(Element errorEventDefinition, boolean interrupting, ActivityImpl activity, ActivityImpl nestedErrorEventActivity) {
+  }
 
   public void parseProperty(Element propertyElement, VariableDeclaration variableDeclaration, ActivityImpl activity) {
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/repository/ProcessDefinitionEntity.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Date;
 import java.util.Map;
 
+import org.activiti.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti.engine.impl.cfg.IdGenerator;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
@@ -76,7 +77,7 @@ public ExecutionEntity createProcessInstance(String businessKey) {
 	    // reset the process instance in order to have the db-generated process instance id available
 	    processInstance.setProcessInstance(processInstance);
 	    
-	    String initiatorVariableName = (String) getProperty("initiatorVariableName");
+	    String initiatorVariableName = (String) getProperty(BpmnParse.PROPERTYNAME_INITIATOR_VARIABLE_NAME);
 	    if (initiatorVariableName!=null) {
 	      String authenticatedUserId = Authentication.getAuthenticatedUserId();
 	      processInstance.setVariable(initiatorVariableName, authenticatedUserId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/delegate/DelegateExecution.java
Patch:
@@ -24,4 +24,6 @@ public interface DelegateExecution extends VariableScope {
 
   String getId();
   
+  String getProcessInstanceId();
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/NoneEndEventActivity.java
Patch:
@@ -21,9 +21,7 @@
 public class NoneEndEventActivity extends AbstractBpmnActivity {
   
   public void execute(ActivityExecution execution) throws Exception {
-    
     execution.end();
-    
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ProcessInstanceEndHandler.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.activiti.engine.impl.history.HistoricProcessInstanceEntity;
 import org.activiti.engine.impl.interceptor.CommandContext;
+import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.delegate.ExecutionListener;
 import org.activiti.engine.impl.pvm.delegate.ExecutionListenerExecution;
 import org.activiti.engine.impl.runtime.ExecutionEntity;
@@ -29,7 +30,7 @@ public void notify(ExecutionListenerExecution execution) {
     HistoricProcessInstanceEntity historicProcessInstance = CommandContext
       .getCurrent()
       .getHistorySession()
-      .findHistoricProcessInstance(execution.getId());
+      .findHistoricProcessInstance(execution.getProcessInstanceId());
     
     String deleteReason = ((ExecutionEntity)execution).getDeleteReason();
     historicProcessInstance.markEnded(deleteReason);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/GatewayActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * @author Joram Barrez
  */
-public abstract class GatewayActivity extends AbstractBpmnActivity {
+public abstract class GatewayActivityBehavior extends AbstractBpmnActivity {
   
   // TODO: implement diverging/converging 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ParallelGatewayActivity.java
Patch:
@@ -49,7 +49,7 @@
  * @author Joram Barrez
  * @author Tom Baeyens
  */
-public class ParallelGatewayActivity extends GatewayActivity {
+public class ParallelGatewayActivity extends GatewayActivityBehavior {
   
   private static Logger log = Logger.getLogger(ParallelGatewayActivity.class.getName());
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -23,6 +23,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class TimerExecuteNestedActivityJobHandler implements JobHandler {
   
@@ -35,8 +36,7 @@ public String getType() {
   }
 
   public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
-    ActivityImpl activity = execution.getActivity();
-    ActivityImpl borderEventActivity = activity.getProcessDefinition().findActivity(configuration);
+    ActivityImpl borderEventActivity = execution.getProcessDefinition().findActivity(configuration);
 
     if (borderEventActivity == null) {
       throw new ActivitiException("Error while firing timer: border event activity " + configuration + " not found");

File: modules/activiti-mule/src/test/java/org/activiti/engine/test/bpmn/sendtask/WebServiceUELTest.java
Patch:
@@ -34,7 +34,9 @@ public void testAsyncInvocationWithDataFlowUEL() throws Exception {
 
     DbRepositorySessionFactory dbRepositorySessionFactory = (DbRepositorySessionFactory) 
       this.processEngineConfiguration.getSessionFactories().get(RepositorySession.class);
-    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get("asyncWebServiceInvocationWithDataFlowUEL:1");
+    
+    String processDefinitionId = repositoryService.createProcessDefinitionQuery().processDefinitionKey("asyncWebServiceInvocationWithDataFlowUEL").singleResult().getId();
+    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get(processDefinitionId);
     ItemDefinition itemDefinition = processDefinition.getIoSpecification().getDataInputs().get(0).getDefinition();
 
     ItemInstance itemInstance = itemDefinition.createInstance();

File: modules/activiti-mule/src/test/java/org/activiti/engine/test/bpmn/servicetask/WebServiceUELTest.java
Patch:
@@ -31,7 +31,8 @@ public class WebServiceUELTest extends AbstractWebServiceTaskTest {
   public void testWebServiceInvocationWithDataFlowUEL() throws Exception {
     DbRepositorySessionFactory dbRepositorySessionFactory = (DbRepositorySessionFactory) 
       this.processEngineConfiguration.getSessionFactories().get(RepositorySession.class);
-    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get("webServiceInvocationWithDataFlowUEL:1");
+    String processDefinitionId = repositoryService.createProcessDefinitionQuery().processDefinitionKey("webServiceInvocationWithDataFlowUEL").singleResult().getId();
+    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get(processDefinitionId);
     ItemDefinition itemDefinition = processDefinition.getIoSpecification().getDataInputs().get(0).getDefinition();
 
     ItemInstance itemInstance = itemDefinition.createInstance();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceEndHandler.java
Patch:
@@ -52,7 +52,8 @@ public static HistoricActivityInstanceEntity findActivityInstance(ExecutionEntit
     DbSqlSession dbSqlSession = commandContext.getDbSqlSession();
     List<HistoricActivityInstanceEntity> cachedHistoricActivityInstances = dbSqlSession.findInCache(HistoricActivityInstanceEntity.class);
     for (HistoricActivityInstanceEntity cachedHistoricActivityInstance: cachedHistoricActivityInstances) {
-      if ( executionId.equals(cachedHistoricActivityInstance.getExecutionId())
+      if (executionId.equals(cachedHistoricActivityInstance.getExecutionId())
+           && activityId != null
            && (activityId.equals(cachedHistoricActivityInstance.getActivityId()))
            && (cachedHistoricActivityInstance.getEndTime()==null)
          ) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -236,10 +236,10 @@ protected void init() {
     initTransactionContextFactory();
     initCommandExecutors();
     initServices();
+    initIdGenerator();
     initDeployers();
     initJobExecutor();
     initDataSource();
-    initIdGenerator();
     initTransactionFactory();
     initSqlSessionFactory();
     initSessionFactories();
@@ -455,6 +455,7 @@ protected void initDeployers() {
 
     BpmnDeployer bpmnDeployer = new BpmnDeployer();
     bpmnDeployer.setExpressionManager(expressionManager);
+    bpmnDeployer.setIdGenerator(idGenerator);
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     
     if(preParseListeners != null) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/repository/ProcessDefinitionQueryTest.java
Patch:
@@ -67,19 +67,19 @@ public void testProcessDefinitionProperties() {
     ProcessDefinition processDefinition = processDefinitions.get(0);
     assertEquals("one", processDefinition.getKey());
     assertEquals("One", processDefinition.getName());
-    assertEquals("one:1", processDefinition.getId());
+    assertTrue(processDefinition.getId().startsWith("one:1"));
     assertEquals("Examples", processDefinition.getCategory());
 
     processDefinition = processDefinitions.get(1);
     assertEquals("one", processDefinition.getKey());
     assertEquals("One", processDefinition.getName());
-    assertEquals("one:2", processDefinition.getId());
+    assertTrue(processDefinition.getId().startsWith("one:2"));
     assertEquals("Examples", processDefinition.getCategory());
 
     processDefinition = processDefinitions.get(2);
     assertEquals("two", processDefinition.getKey());
     assertEquals("Two", processDefinition.getName());
-    assertEquals("two:1", processDefinition.getId());
+    assertTrue(processDefinition.getId().startsWith("two:1"));
     assertEquals("Examples", processDefinition.getCategory());
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/ProcessDefinitionPersistenceTest.java
Patch:
@@ -54,9 +54,10 @@ public void testProcessDefinitionIntrospection() {
       .deploy()
       .getId();
   
-    ReadOnlyProcessDefinition processDefinition = ((RepositoryServiceImpl)repositoryService).getDeployedProcessDefinition("processOne:1");
+    String procDefId = repositoryService.createProcessDefinitionQuery().singleResult().getId();
+    ReadOnlyProcessDefinition processDefinition = ((RepositoryServiceImpl)repositoryService).getDeployedProcessDefinition(procDefId);
     
-    assertEquals("processOne:1", processDefinition.getId());
+    assertEquals(procDefId, processDefinition.getId());
     assertEquals("Process One", processDefinition.getName());
     assertEquals("the first process", processDefinition.getProperty("documentation"));
     

File: modules/activiti-engine/src/test/java/org/activiti/standalone/rules/RulesDeployerTest.java
Patch:
@@ -43,7 +43,7 @@ public void testRulesDeployment() {
     
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("rulesDeployment", variableMap);
     assertNotNull(processInstance);
-    assertEquals("rulesDeployment:1", processInstance.getProcessDefinitionId());
+    assertTrue(processInstance.getProcessDefinitionId().startsWith("rulesDeployment:1"));
     
     Collection<Object> ruleOutputList = (Collection<Object>)
         runtimeService.getVariable(processInstance.getId(), "rulesOutput");

File: modules/activiti-webapp-kickstart/src/main/java/org/activiti/kickstart/dto/FormDto.java
Patch:
@@ -57,8 +57,8 @@ public void addFormProperty(FormPropertyDto formProperty) {
 
   public String toString() {
     StringBuilder strb = new StringBuilder();
-    strb.append(title + ",");
-    strb.append(description + ",");
+    strb.append(title + "___");
+    strb.append(description + "___");
     for (FormPropertyDto property : formProperties) {
       strb.append(property.getProperty() + ";");
       strb.append(property.getType() + ";");
@@ -99,7 +99,7 @@ public String convertToHtml() {
   }
 
   public static FormDto createFromSerialized(String serialized) {
-    String[] content = serialized.split(",");
+    String[] content = serialized.split("___");
 
     FormDto form = new FormDto();
     form.setTitle(content[0].trim());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/ProcessDiagramCanvas.java
Patch:
@@ -114,7 +114,7 @@ public ProcessDiagramCanvas(int width, int height) {
     g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
     g.setPaint(Color.black);
     
-    Font font = new Font("Arial",Font.BOLD, 12);
+    Font font = new Font("Arial",Font.BOLD, 10);
     g.setFont(font);
     this.fontMetrics = g.getFontMetrics();
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/BPMN12.java
Patch:
@@ -29,6 +29,7 @@ public class BPMN12 {
   public static String MULTIPLE_START_EVENT = "StartMultipleEvent";
 
   public static String NONE_INTERMEDIATE_EVENT = "IntermediateEvent";
+  public static String ERROR_INTERMEDIATE_EVENT = "IntermediateErrorEvent";
 
   public static boolean isStartEvent(Shape shape) {
     return isStartEvent(shape.getStencilId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -79,7 +79,7 @@ public List<ProcessDefinitionEntity> deploy(DeploymentEntity deployment) {
             } catch (Exception e) { // if anything goes wrong, we don't store the image (the process will still be executable).
               LOG.log(Level.WARNING, "Error while generating process diagram, image will not be stored in repository", e);
             }
-          }
+          } 
           
           processDefinition.setDiagramResourceName(diagramResourceName);
           processDefinitions.add(processDefinition);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/ProcessDiagramCanvas.java
Patch:
@@ -149,6 +149,8 @@ public InputStream generateImage(String imageType) {
     
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     try {
+      minX = (minX <= 5) ? 5 : minX;
+      minY = (minY <= 5) ? 5 : minY;
       BufferedImage imageToSerialize = processDiagram;
       if (minX >= 0 && minY >= 0) {
         imageToSerialize = processDiagram.getSubimage(minX - 5, minY - 5, 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/VariableScopeImpl.java
Patch:
@@ -34,6 +34,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public abstract class VariableScopeImpl implements Serializable, VariableScope {
   

File: modules/activiti-engine/src/test/java/org/activiti/examples/bpmn/tasklistener/TaskListenerTest.java
Patch:
@@ -54,7 +54,7 @@ public void testTaskListenerWithExpression() {
     Task task = taskService.createTaskQuery().singleResult();
     taskService.complete(task.getId());
     
-    assertEquals("Hello from second task", runtimeService.getVariable(processInstance.getId(), "greeting2"));
+    assertEquals("Write meeting notes", runtimeService.getVariable(processInstance.getId(), "greeting2"));
   }
 
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/db/impl/CycleDaoMyBatisImpl.java
Patch:
@@ -237,12 +237,12 @@ public void deleteComment(String id) {
   }
   
   @SuppressWarnings("unchecked")
-  public List<RepositoryNodeCommentEntity> getCommentsForNode(String connectorId, String artifactId) {
+  public List<RepositoryNodeCommentEntity> getCommentsForNode(String connectorId, String nodeId) {
     SqlSession session = openSession();
     try {
       HashMap<String, Object> parameters = new HashMap<String, Object>();
       parameters.put("connectorId", connectorId);
-      parameters.put("artifactId", artifactId);
+      parameters.put("nodeId", nodeId);
 
       return session.selectList("selectCycleCommentForSourceArtifact", parameters);
     } finally {

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ActivitiCycleWebScript.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Map;
 
 import org.activiti.cycle.RepositoryAuthenticationException;
+import org.activiti.cycle.service.CycleCommentService;
 import org.activiti.cycle.service.CycleConfigurationService;
 import org.activiti.cycle.service.CycleContentService;
 import org.activiti.cycle.service.CyclePluginService;
@@ -35,6 +36,7 @@ public abstract class ActivitiCycleWebScript extends ActivitiWebScript {
 
   protected CycleRepositoryService repositoryService;
   protected CycleTagService tagService;
+  protected CycleCommentService commentService;
   protected CycleConfigurationService configurationService;
   protected CycleContentService contentService;
   protected CyclePluginService pluginService;
@@ -43,6 +45,7 @@ public ActivitiCycleWebScript() {
     configurationService = CycleServiceFactory.getConfigurationService();
     repositoryService = CycleServiceFactory.getRepositoryService();
     tagService = CycleServiceFactory.getTagService();
+    commentService = CycleServiceFactory.getCommentService();
     contentService = CycleServiceFactory.getContentService();
     pluginService = CycleServiceFactory.getCyclePluginService();
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/annotations/CycleComponent.java
Patch:
@@ -1,6 +1,5 @@
 package org.activiti.cycle.annotations;
 
-import java.awt.Desktop.Action;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -11,6 +10,7 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.RepositoryConnector;
+import org.activiti.cycle.action.Action;
 import org.activiti.cycle.action.CreateUrlAction;
 import org.activiti.cycle.action.DownloadContentAction;
 import org.activiti.cycle.action.ParameterizedAction;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/TagConnector.java
Patch:
@@ -49,7 +49,7 @@ public boolean login(String username, String password) {
   }
   
   /**
-   * only operation making sense, since the tag connector "just" introduces tga
+   * only operation making sense, since the tag connector "just" introduces tag
    * folders
    */
   public RepositoryNodeCollection getChildren(String id) throws RepositoryNodeNotFoundException {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/annotations/CycleComponent.java
Patch:
@@ -22,7 +22,7 @@
   String name() default "";
 
   /**
-   * optional parameter: if a {@link CycleContextType} is set, cycle will store
+   * Optional parameter: if a {@link CycleContextType} is set, cycle will store
    * instances of the corresponding component in the corresponding context.
    */
   CycleContextType context() default CycleContextType.NONE;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/artifacttype/AbstractBPMN20ProcessModel.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.cycle.impl.repositoryartifacttype;
+package org.activiti.cycle.impl.artifacttype;
 
 import org.activiti.cycle.RepositoryArtifactType;
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/artifacttype/AbstractProcessModel.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.cycle.impl.repositoryartifacttype;
+package org.activiti.cycle.impl.artifacttype;
 
 import org.activiti.cycle.RepositoryArtifactType;
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioBpmn20ArtifactType.java
Patch:
@@ -5,8 +5,8 @@
 import org.activiti.cycle.annotations.CycleComponent;
 import org.activiti.cycle.context.CycleApplicationContext;
 import org.activiti.cycle.context.CycleContextType;
+import org.activiti.cycle.impl.artifacttype.AbstractBPMN20ProcessModel;
 import org.activiti.cycle.impl.mimetype.XmlMimeType;
-import org.activiti.cycle.impl.repositoryartifacttype.AbstractBPMN20ProcessModel;
 
 /**
  * {@link RepositoryArtifactType} for representing Signavio (or Oryx/Activiti

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioDefaultArtifactType.java
Patch:
@@ -5,8 +5,8 @@
 import org.activiti.cycle.context.CycleApplicationContext;
 import org.activiti.cycle.context.CycleContextType;
 import org.activiti.cycle.context.CycleSessionContext;
+import org.activiti.cycle.impl.artifacttype.AbstractRepositoryArtifactType;
 import org.activiti.cycle.impl.mimetype.JsonMimeType;
-import org.activiti.cycle.impl.repositoryartifacttype.AbstractRepositoryArtifactType;
 
 /**
  * Artifact type for Signavio Artifact, which are not

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioJpdl4ArtifactType.java
Patch:
@@ -3,8 +3,8 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.annotations.CycleComponent;
+import org.activiti.cycle.impl.artifacttype.AbstractProcessModel;
 import org.activiti.cycle.impl.mimetype.UnknownMimeType;
-import org.activiti.cycle.impl.repositoryartifacttype.AbstractProcessModel;
 
 /**
  * {@link RepositoryArtifactType} for representing Signavio jBPM 4 models

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/representation/ContentRepresentations.java
Patch:
@@ -54,4 +54,5 @@ public Set<ContentRepresentation> getContentRepresentations(RepositoryArtifactTy
     }
     return representations;
   }
+
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/service/CycleContentServiceImpl.java
Patch:
@@ -13,9 +13,9 @@
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.context.CycleApplicationContext;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.connector.signavio.provider.AbstractPngProvider;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.representation.ContentRepresentations;
 import org.activiti.cycle.impl.transform.Transformations;
 import org.activiti.cycle.service.CycleContentService;
@@ -67,6 +67,7 @@ private void sortContentReprsentations(List<ContentRepresentation> sortedList) {
     // for the moment: sort alphabetically and make sure that "PNG" is the first
     // tab:
     Collections.sort(sortedList, new Comparator<ContentRepresentation>() {
+
       public int compare(ContentRepresentation o1, ContentRepresentation o2) {
         if (o1.equals(o2)) {
           return 0;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/service/CycleRepositoryServiceImpl.java
Patch:
@@ -22,12 +22,12 @@
 import org.activiti.cycle.context.CycleSessionContext;
 import org.activiti.cycle.impl.RepositoryFolderImpl;
 import org.activiti.cycle.impl.RepositoryNodeCollectionImpl;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.conf.PasswordEnabledRepositoryConnectorConfiguration;
 import org.activiti.cycle.impl.connector.util.TransactionalConnectorUtils;
 import org.activiti.cycle.impl.db.CycleLinkDao;
 import org.activiti.cycle.impl.db.entity.RepositoryArtifactLinkEntity;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.transform.Transformations;
 import org.activiti.cycle.service.CycleRepositoryService;
 import org.activiti.cycle.transform.ContentTransformationException;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/service/CycleContentService.java
Patch:
@@ -8,7 +8,7 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryArtifactType;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.transform.ContentTransformationException;
 
 /**

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/service/CycleRepositoryService.java
Patch:
@@ -27,8 +27,8 @@
 import org.activiti.cycle.RepositoryFolder;
 import org.activiti.cycle.RepositoryNodeCollection;
 import org.activiti.cycle.RepositoryNodeNotFoundException;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.transform.ContentTransformationException;
 
 /**

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/SubProcessExpansionTest.java
Patch:
@@ -35,7 +35,8 @@ public void testTransform() throws FileNotFoundException, IOException, JSONExcep
     String input = IoUtils.readText(new FileInputStream(inputFileName));
     String expected = IoUtils.readText(new FileInputStream(expectedFileName));
 
-    FileSystemConnector repositoryConnector = new SignavioFileSystemConnector(new FileSystemConnectorConfiguration("filesystem", new File(path)));
+    FileSystemConnector repositoryConnector = new SignavioFileSystemConnector();
+    repositoryConnector.setConfiguration(new FileSystemConnectorConfiguration("filesystem", new File(path)));
 
     JsonTransformer jsonTransformer = new JsonTransformer();
     jsonTransformer.addJsonTransformation(new SubProcessExpansion(repositoryConnector));

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ChildNodesGet.java
Patch:
@@ -52,7 +52,6 @@ protected void execute(ActivitiRequest req, Status status, Cache cache, Map<Stri
       // throwing a HTTP 500 here will cause the tree to load the node for ever.
       // throw new WebScriptException(Status.STATUS_INTERNAL_SERVER_ERROR,
       // "exception.message");
-
     }
 
     // provide empty list as default

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/MimeType.java
Patch:
@@ -22,6 +22,8 @@
 public interface MimeType {
 
   public String getName();
+  
+  public String getContentType();
 
   public String[] getCommonFileExtensions();
 

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -65,7 +65,7 @@ protected void execute(ActivitiRequest req, Status status, Cache cache, Map<Stri
       try {
         String url = restProxyUri + "content?connectorId=" + URLEncoder.encode(connectorId, "UTF-8") + "&artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
                 + "&contentRepresentationId=" + URLEncoder.encode(action.getContentRepresentation().getId(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getRepositoryArtifactType().getMimeType().getName(), action
+        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getRepositoryArtifactType().getMimeType().getContentType(), action
                 .getContentRepresentation().getId()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -156,14 +156,14 @@ private void getContent(ActivitiRequest req, WebScriptResponse res) throws IOExc
       if (etag.equals(requestEtag)) {
         throw new WebScriptException(HttpServletResponse.SC_NOT_MODIFIED, "");
       } else {
-        streamResponse(res, contentInputStream, new Date(0), etag, attach, attachmentFileName, contentType.getName());
+        streamResponse(res, contentInputStream, new Date(0), etag, attach, attachmentFileName, contentType.getContentType());
       }
 
     } catch (TransformationException e) {
       // Stream the contents of the exception as HTML, this is a workaround to
       // display exceptions that occur during content transformations
       streamResponse(res, new ByteArrayInputStream(e.getRenderContent().getBytes()), new Date(0), "", false, null,
-              CycleApplicationContext.get(HtmlMimeType.class).getName());
+              CycleApplicationContext.get(HtmlMimeType.class).getContentType());
     } catch (NoSuchAlgorithmException e) {
       // This should never be reached... MessageDigest throws an exception if it
       // is being instantiated with a wrong algorithm, but we know that MD5

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -60,12 +60,12 @@ protected void execute(ActivitiRequest req, Status status, Cache cache, Map<Stri
       }
       model.put("renderInfo", contentRepresentation.getRenderInfo().name());
       model.put("contentRepresentationId", contentRepresentation.getId());
-      model.put("contentType", contentRepresentation.getRepresentationMimeType().getName());
+      model.put("contentType", contentRepresentation.getRepresentationMimeType().getContentType());
     } catch (TransformationException e) {
       // Show errors that occur during transformations as HTML in the UI
       model.put("renderInfo", RenderInfo.HTML);
       model.put("contentRepresentationId", representationId);
-      model.put("contentType", CycleApplicationContext.get(HtmlMimeType.class).getName());
+      model.put("contentType", CycleApplicationContext.get(HtmlMimeType.class).getContentType());
     } 
   }
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioBpmn20ArtifactType.java
Patch:
@@ -3,6 +3,7 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.annotations.CycleComponent;
+import org.activiti.cycle.context.CycleApplicationContext;
 import org.activiti.cycle.context.CycleContextType;
 import org.activiti.cycle.impl.mimetype.XmlMimeType;
 import org.activiti.cycle.impl.repositoryartifacttype.AbstractBPMN20ProcessModel;
@@ -21,7 +22,7 @@ public class SignavioBpmn20ArtifactType extends AbstractBPMN20ProcessModel {
 
   public MimeType getMimeType() {
     // TODO: which mimetype is this?
-    return new XmlMimeType();
+    return CycleApplicationContext.get(XmlMimeType.class);
   }
 
   public String[] getCommonFileExtensions() {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/service/CycleContentServiceImpl.java
Patch:
@@ -13,7 +13,7 @@
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.context.CycleApplicationContext;
-import org.activiti.cycle.impl.connector.signavio.provider.PngProvider;
+import org.activiti.cycle.impl.connector.signavio.provider.AbstractPngProvider;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
 import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.representation.ContentRepresentations;
@@ -71,10 +71,10 @@ public int compare(ContentRepresentation o1, ContentRepresentation o2) {
         if (o1.equals(o2)) {
           return 0;
         }
-        if (o1.getClass().equals(PngProvider.class)) {
+        if (AbstractPngProvider.class.isAssignableFrom(o1.getClass())) {
           return -1;
         }
-        if (o2.getClass().equals(PngProvider.class)) {
+        if (AbstractPngProvider.class.isAssignableFrom(o2.getClass())) {
           return 1;
         }
         return o1.getId().compareTo(o2.getId());

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -112,8 +112,8 @@ public abstract class ProcessEngineConfiguration {
   protected boolean jobExecutorActivate;
 
   protected String mailServerHost = "localhost";
-  protected String mailServerUsername = "activiti";
-  protected String mailServerPassword = "activiti";
+  protected String mailServerUsername; // by default no name and password are provided, which 
+  protected String mailServerPassword; // means no authentication for mail server
   protected int mailServerPort = 25;
   protected String mailServerDefaultFrom = "activiti@localhost";
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/ConnectorLoginInterceptor.java
Patch:
@@ -22,6 +22,7 @@ public void interceptMethodCall(Method m, Object object, Object... args) {
       return;
     }
     if ("login".equals(m.getName())) {
+      // TODO: Why always return true? When is it really logged in?
       return;
     }
     if (!connector.isLoggedIn()) {

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/builder/process/ProcessDefinitionJSONConverter.java
Patch:
@@ -35,6 +35,7 @@ public JSONObject getJSONObject(ProcessDefinition processDefinition) throws JSON
     JSONUtil.putRetainNull(json, "version", processDefinition.getVersion());
     JSONUtil.putRetainNull(json, "deploymentId", processDefinition.getDeploymentId());
     JSONUtil.putRetainNull(json, "resourceName", processDefinition.getResourceName());
+    JSONUtil.putRetainNull(json, "diagramResourceName", processDefinition.getDiagramResourceName());
     // TODO: custom handling, review when ACT-160 is fixed
     if(processDefinition instanceof RestProcessDefinition) {      
       JSONUtil.putRetainNull(json, "startFormResourceKey", ((RestProcessDefinition) processDefinition).getStartFormResourceKey());

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/model/RestProcessDefinition.java
Patch:
@@ -32,6 +32,7 @@ public RestProcessDefinition(ProcessDefinitionEntity processDefinition) {
     this.setVersion(processDefinition.getVersion());
     this.setDeploymentId(processDefinition.getDeploymentId());
     this.setResourceName(processDefinition.getResourceName());
+    this.setDiagramResourceName(processDefinition.getDiagramResourceName());
   }
 
   protected String startFormResourceKey;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ContentProvider.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.cycle;
 
+
 /**
  * A content provider can create content, normaly nevessary for a
  * {@link ContentRepresentation} for a special {@link RepositoryArtifact}

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/CycleTagContent.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+
 /**
  * Returns a tag with the tagged contents
  * 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/MimeType.java
Patch:
@@ -16,12 +16,13 @@
  * Provides a simple interface to retrieve the content-type of artifacts and
  * their content representations.
  * 
- * See {@link CycleDefaultMimeType} for a list of standard mime-types.
  * 
  * @author nils.preusker@camunda.com
  */
 public interface MimeType {
 
-  public String getContentType();
+  public String getName();
+
+  public String[] getCommonFileExtensions();
 
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/RepositoryNodeCollection.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+
 public interface RepositoryNodeCollection {
 
   /**

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/action/ArtifactAwareParameterizedAction.java
Patch:
@@ -1,4 +1,6 @@
-package org.activiti.cycle;
+package org.activiti.cycle.action;
+
+import org.activiti.cycle.RepositoryArtifact;
 
 /**
  * {@link ParameterizedAction} allowing indicating whether it is applicable to a

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/action/RepositoryArtifactOpenLinkAction.java
Patch:
@@ -1,7 +1,9 @@
-package org.activiti.cycle;
+package org.activiti.cycle.action;
 
 import java.net.URL;
 
+import org.activiti.cycle.RepositoryArtifact;
+
 /**
  * Action to open an external URl for an {@link RepositoryArtifact}, for example
  * opening the Signavio modeler for a BPMN model

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/ParameterizedActionImpl.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.Map;
 
-import org.activiti.cycle.ParameterizedAction;
 import org.activiti.cycle.RepositoryException;
+import org.activiti.cycle.action.ParameterizedAction;
 
 /**
  * Base class for actions requiring paremeters which must be displayed in an own

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/action/CreateUrlActionImpl.java
Patch:
@@ -1,8 +1,9 @@
-package org.activiti.cycle.impl;
+package org.activiti.cycle.impl.action;
 
 import java.net.URL;
 
-import org.activiti.cycle.CreateUrlAction;
+import org.activiti.cycle.action.CreateUrlAction;
+import org.activiti.cycle.impl.AbstractArtifactActionImpl;
 
 /**
  * Base class for actions to open {@link URL}s in the GUI (e.g. download files,

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/SignavioFileSystemConnector.java
Patch:
@@ -38,9 +38,9 @@ public SignavioFileSystemConnector(FileSystemConnectorConfiguration conf) {
    * Takes a Signavio model id and obtains an according JSON file from the file
    * system.
    */
-  public Content getContent(String artifactId, String representationName) throws RepositoryNodeNotFoundException {
+  public Content getContent(String artifactId) throws RepositoryNodeNotFoundException {
     artifactId = (String) artifactId.subSequence(15, artifactId.lastIndexOf(".signavio.xml"));
-    artifactId = "/" + artifactId + "." + representationName.toLowerCase();
-    return super.getContent(artifactId, representationName);
+    artifactId = "/" + artifactId + ".json";
+    return super.getContent(artifactId);
   }
 }
\ No newline at end of file

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/AbstractTechnicalBpmnXmlAction.java
Patch:
@@ -37,5 +37,7 @@ public String getProcessName(RepositoryArtifact artifact) {
   public String getFormResourceName() {
     return getDefaultFormName();
   }
+  
+  
 
 }

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/SubProcessExpansionTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.activiti.cycle.impl.connector.fs.FileSystemConnector;
 import org.activiti.cycle.impl.connector.fs.FileSystemConnectorConfiguration;
 import org.activiti.cycle.impl.connector.fs.SignavioFileSystemConnector;
-import org.activiti.cycle.impl.plugin.PluginFinder;
 import org.activiti.cycle.impl.connector.signavio.transform.JsonTransformer;
 import org.activiti.cycle.impl.util.IoUtils;
 import org.json.JSONException;
@@ -36,7 +35,6 @@ public void testTransform() throws FileNotFoundException, IOException, JSONExcep
     String input = IoUtils.readText(new FileInputStream(inputFileName));
     String expected = IoUtils.readText(new FileInputStream(expectedFileName));
 
-    PluginFinder.checkPluginInitialization(); // needed for registering artifact types
     FileSystemConnector repositoryConnector = new SignavioFileSystemConnector(new FileSystemConnectorConfiguration("filesystem", new File(path)));
 
     JsonTransformer jsonTransformer = new JsonTransformer();

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/session/CycleHttpSession.java
Patch:
@@ -12,12 +12,13 @@
 import org.activiti.cycle.components.RuntimeConnectorList;
 import org.activiti.cycle.context.CycleSessionContext;
 import org.activiti.cycle.impl.conf.PasswordEnabledRepositoryConnectorConfiguration;
-import org.activiti.cycle.impl.plugin.PluginFinder;
 import org.activiti.cycle.service.CycleServiceFactory;
 import org.activiti.rest.util.ActivitiRequest;
 
 /**
- * Initializes the Cycle Http-Session.
+ * Initializes the Cycle Http-Session. 
+ * 
+ * TODO: find a better place for this, a ServletFilter?
  * 
  * @author daniel.meyer@camunda.com
  */
@@ -39,7 +40,6 @@ public static void openSession(ActivitiRequest req) {
     String cuid = req.getCurrentUserId();
 
     // TODO: find a better place for this ?
-    PluginFinder.registerServletContext(httpSession.getServletContext());
     CycleComponentFactory.registerServletContext(httpSession.getServletContext());
 
     // Makes the HttpSession available as CycleSessionContext

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/conf/CycleDbSqlSessionFactory.java
Patch:
@@ -92,9 +92,9 @@ public static void executeSchemaResource(String operation, String databaseName,
     } finally {
       IoUtil.closeSilently(inputStream);
       if (success) {
-        sqlSession.commit(true);
+        sqlSession.commit();
       } else {
-        sqlSession.rollback(true);
+        sqlSession.rollback();
       }
       sqlSession.close();
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -50,7 +50,7 @@
 import org.activiti.engine.impl.calendar.BusinessCalendarManager;
 import org.activiti.engine.impl.calendar.DurationBusinessCalendar;
 import org.activiti.engine.impl.calendar.MapBusinessCalendarManager;
-import org.activiti.engine.impl.cfg.standalone.StandaloneIbatisTransactionContextFactory;
+import org.activiti.engine.impl.cfg.standalone.StandaloneMybatisTransactionContextFactory;
 import org.activiti.engine.impl.db.DbHistorySessionFactory;
 import org.activiti.engine.impl.db.DbIdGenerator;
 import org.activiti.engine.impl.db.DbIdentitySessionFactory;
@@ -509,7 +509,7 @@ protected void initCommandContextFactory() {
 
   protected void initTransactionContextFactory() {
     if (transactionContextFactory==null) {
-      transactionContextFactory = new StandaloneIbatisTransactionContextFactory();
+      transactionContextFactory = new StandaloneMybatisTransactionContextFactory();
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/standalone/StandaloneMybatisTransactionContext.java
Patch:
@@ -28,14 +28,14 @@
 /**
  * @author Tom Baeyens
  */
-public class StandaloneIbatisTransactionContext implements TransactionContext {
+public class StandaloneMybatisTransactionContext implements TransactionContext {
   
-  private static Logger log = Logger.getLogger(StandaloneIbatisTransactionContext.class.getName());
+  private static Logger log = Logger.getLogger(StandaloneMybatisTransactionContext.class.getName());
 
   protected CommandContext commandContext;
   protected Map<TransactionState,List<TransactionListener>> stateTransactionListeners = null;
   
-  public StandaloneIbatisTransactionContext(CommandContext commandContext) {
+  public StandaloneMybatisTransactionContext(CommandContext commandContext) {
     this.commandContext = commandContext;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/standalone/StandaloneMybatisTransactionContextFactory.java
Patch:
@@ -20,9 +20,9 @@
 /**
  * @author Tom Baeyens
  */
-public class StandaloneIbatisTransactionContextFactory implements TransactionContextFactory {
+public class StandaloneMybatisTransactionContextFactory implements TransactionContextFactory {
 
   public TransactionContext openTransactionContext(CommandContext commandContext) {
-    return new StandaloneIbatisTransactionContext(commandContext);
+    return new StandaloneMybatisTransactionContext(commandContext);
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -237,9 +237,9 @@ public static void executeSchemaResource(String directory, String operation, Str
 
     } finally {
       if (success) {
-        sqlSession.commit(true);
+        sqlSession.commit();
       } else {
-        sqlSession.rollback(true);
+        sqlSession.rollback();
       }
       sqlSession.close();
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/EntityManagerSessionFactory.java
Patch:
@@ -24,9 +24,9 @@
  */
 public class EntityManagerSessionFactory implements SessionFactory {
 
-  private EntityManagerFactory entityManagerFactory;
-  private boolean handleTransactions;
-  private boolean closeEntityManager;
+  protected EntityManagerFactory entityManagerFactory;
+  protected boolean handleTransactions;
+  protected boolean closeEntityManager;
 
   public EntityManagerSessionFactory(Object entityManagerFactory, boolean handleTransactions, boolean closeEntityManager) {
     if(entityManagerFactory == null) {

File: modules/activiti-engine/src/test/java/org/activiti/standalone/initialization/ProcessEngineInitializationTest.java
Patch:
@@ -68,9 +68,9 @@ public void testVersionMismatch() {
       throw new ActivitiException("couldn't update db schema version", e);
     } finally {
       if (success) {
-        sqlSession.commit(true);
+        sqlSession.commit();
       } else {
-        sqlSession.rollback(true);
+        sqlSession.rollback();
       }
       sqlSession.close();
     }

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/AdjustShapeNamesForXmlNCNameTest.java
Patch:
@@ -10,7 +10,7 @@ public class AdjustShapeNamesForXmlNCNameTest {
   @Test
   public void testAdjustNamesForEngine() {
     assertEquals("Send_rejection_e-mail", AdjustShapeNamesForXmlNCName.adjustForXmlNCName("Send rejection e-mail"));
-    assertEquals("_15__everything_mine__-_", AdjustShapeNamesForXmlNCName.adjustForXmlNCName("�15: everything mine :-)"));
+    assertEquals("______________________________-_", AdjustShapeNamesForXmlNCName.adjustForXmlNCName("<!\"§$%&/()=?{[]}\\´`.,_;#+*~> :-)"));
   }
 
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioPluginDefinition.java
Patch:
@@ -71,7 +71,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_BPMN_20_DEVELOPER, CycleDefaultMimeType.XML, RenderInfo.CODE),
             new ActivitiCompliantBpmn20Provider());
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_BPMN_20_RAW, CycleDefaultMimeType.XML, RenderInfo.CODE), new Bpmn20Provider());
-    artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.XML, RenderInfo.CODE), new JsonProvider());
+    artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.JSON, RenderInfo.CODE), new JsonProvider());
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_SVGAPI, CycleDefaultMimeType.HTML, RenderInfo.HTML), new SvgApiProvider());
     // artifactType1.addContentRepresentation(new
     // ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_DIFF,
@@ -93,7 +93,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_FOR_JPDL4, CycleDefaultMimeType.XML);
     artifactType2.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, CycleDefaultMimeType.PNG, RenderInfo.IMAGE), new PngProvider());
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JPDL4, CycleDefaultMimeType.XML, RenderInfo.CODE), new Jpdl4Provider());
-    artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.XML, RenderInfo.CODE), new JsonProvider());
+    artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.JSON, RenderInfo.CODE), new JsonProvider());
 
     artifactType2.addOpenUrlAction(new OpenModelerAction());
     artifactType2.addDownloadContentAction(CONTENT_REPRESENTATION_ID_JPDL4);

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/BpmnPoolExtraction.java
Patch:
@@ -9,6 +9,8 @@
 
 public class BpmnPoolExtraction extends OryxTransformation {
 
+  public static final String DEFAULT_ENGINE_POOL_NAME = "Process Engine";
+  
   protected final String poolName;
 
   public BpmnPoolExtraction(String poolName) {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/SignavioTransformationHelper.java
Patch:
@@ -22,7 +22,7 @@ public class SignavioTransformationHelper {
     // TODO: How to register JSON-Transformations
 
     // example with cutting out just the Engine Pool
-    addTransformation(new BpmnPoolExtraction("Process Engine"));
+    addTransformation(new BpmnPoolExtraction(BpmnPoolExtraction.DEFAULT_ENGINE_POOL_NAME));
     addTransformation(new ReplaceEmptyShapeNamesWithTypes());
     addTransformation(new ExchangeSignavioUuidWithName());
   }

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorTest.java
Patch:
@@ -67,7 +67,7 @@ public void testTransformation() throws IOException, JSONException {
   public void testSignavioTransformations() throws IOException, JSONException, ParserConfigurationException, SAXException {
     // define transformations
     List<JsonTransformation> transformations = new ArrayList<JsonTransformation>();
-    transformations.add(new BpmnPoolExtraction("Process Engine"));
+    transformations.add(new BpmnPoolExtraction(BpmnPoolExtraction.DEFAULT_ENGINE_POOL_NAME));
     transformations.add(new ReplaceEmptyShapeNamesWithTypes());
     transformations.add(new ExchangeSignavioUuidWithName());
     
@@ -112,7 +112,7 @@ public void testSignavioTransformations() throws IOException, JSONException, Par
   public void testActivitiCompliantBpmn20() throws Exception {
     // define transformations
     List<JsonTransformation> transformations = new ArrayList<JsonTransformation>();
-    transformations.add(new BpmnPoolExtraction("Process Engine"));
+    transformations.add(new BpmnPoolExtraction(BpmnPoolExtraction.DEFAULT_ENGINE_POOL_NAME));
     transformations.add(new AdjustShapeNamesTransformation());
 //    transformations.add(new ExchangeSignavioUuidWithName());
     

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/service/CycleConfigurationService.java
Patch:
@@ -24,7 +24,7 @@
  * String-based interface.
  * <p />
  * Retreive an instance of this Service by
- * {@link CycleService#getConfigurationService()}
+ * {@link CycleServiceFactory#getConfigurationService()}
  * 
  * @see CycleService
  * @author daniel.meyer@camunda.com

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/service/CycleRepositoryService.java
Patch:
@@ -30,12 +30,11 @@
  * Cycle service used for accessing repositories.
  * <p />
  * Get an instance of this service by
- * {@link CycleService#getRepositoryService()}
+ * {@link CycleServiceFactory#getRepositoryService()}
  * 
- *  @see CycleService 
  */
 public interface CycleRepositoryService {
-  
+
   public static class RuntimeConnectorList implements Serializable {
 
     private static final long serialVersionUID = 1L;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/service/CycleTagService.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Cycle service used for managing tags.
  * <p />
- * Get an instance of this service by {@link CycleService#getCycleTagService()}
+ * Get an instance of this service by {@link CycleServiceFactory#getCycleTagService()}
  * 
  * @see CycleService
  */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -658,8 +658,7 @@ public void parseActivities(Element parentElement, ScopeImpl scopeElement) {
         parseSubProcess(activityElement, scopeElement);
       } else if (activityElement.getTagName().equals("callActivity")) {
         parseCallActivity(activityElement, scopeElement);
-      } else if (activityElement.getTagName().equals("sendTask")
-              || activityElement.getTagName().equals("adHocSubProcess")
+      } else if (activityElement.getTagName().equals("adHocSubProcess")
               || activityElement.getTagName().equals("businessRuleTask")
               || activityElement.getTagName().equals("complexGateway")
               || activityElement.getTagName().equals("eventBasedGateway")

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
Patch:
@@ -16,14 +16,11 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.RepositorySession;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.history.HistoricFormPropertyEntity;
-import org.activiti.engine.impl.history.HistoricProcessInstanceEntity;
-import org.activiti.engine.impl.identity.Authentication;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.repository.ProcessDefinitionEntity;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoricFormPropertyEntity.java
Patch:
@@ -29,9 +29,9 @@ public class HistoricFormPropertyEntity extends HistoricDetailEntity implements
   public HistoricFormPropertyEntity() {
   }
 
-  public HistoricFormPropertyEntity(ExecutionEntity processInstance, String propertyId, String propertyValue) {
-    this.processInstanceId = processInstance.getId();
-    this.executionId = processInstance.getId();
+  public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId, String propertyValue) {
+    this.processInstanceId = execution.getProcessInstanceId();
+    this.executionId = execution.getId();
     this.propertyId = propertyId;
     this.propertyValue = propertyValue;
     this.time = ClockUtil.getCurrentTime();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbMetaDataHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public interface DbMetaDataHandler {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/PostgresDbMetaDataHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class PostgresDbMetaDataHandler extends StdDbMetaDataHandler implements DbMetaDataHandler {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/StdDbMetaDataHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class StdDbMetaDataHandler implements DbMetaDataHandler {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/TableMetaDataCache.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class TableMetaDataCache extends HashMap<String, TableMetaData> {
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/TableMetaDataCacheHandler.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.SQLException;
 
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class TableMetaDataCacheHandler {
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/query/Query.java
Patch:
@@ -40,7 +40,7 @@ public interface Query<T extends Query< ? , ? >, U extends Object> {
   /**
    * Executes the query and returns the resulting entity.
    * @throws ActivitiException when the query results in more than one
-   * entities.. �
+   * entities.
    */
   U singleResult();
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/CustomProperty.java
Patch:
@@ -22,14 +22,15 @@
 public enum CustomProperty {
 
 	ORIGINAL_NAME("Original Name"),
-	ORIGINAL_ID("Original ID");
+	ORIGINAL_ID("Original ID"),
+	ORIGINAL_TYPE("Original Type");
 
 	private final String name;
 	private final Pattern pattern;
 
 	private CustomProperty(String name) {
 		this.name = name;
-		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")+)\")(.*)", Pattern.DOTALL);
+		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")*)\")(.*)", Pattern.DOTALL);
 	}
 
   public String getValue(String propertyContainer) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngines.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.ProcessEngineInfoImpl;
 import org.activiti.engine.impl.util.IoUtil;
 import org.activiti.engine.impl.util.ReflectUtil;
 
 
+
 /** Helper for initializing and closing process engines in server environments.
  * <br>
  * All created {@link ProcessEngine}s will be registered with this class.
@@ -100,7 +100,7 @@ public static void registerProcessEngine(ProcessEngine processEngine) {
   /**
    * Unregisters the given process engine.
    */
-  public static void unregister(ProcessEngineImpl processEngine) {
+  public static void unregister(ProcessEngine processEngine) {
     processEngines.remove(processEngine.getName());
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/history/HistoricVariableUpdate.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.history;
 
-import org.activiti.engine.impl.variable.VariableType;
 
 
 /** Update of a process variable.  This is only available if history 
@@ -24,7 +23,7 @@
 public interface HistoricVariableUpdate extends HistoricDetail {
 
   String getVariableName();
-  VariableType getVariableType();
+  String getVariableTypeName();
   Object getValue();
   int getRevision();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinition.java
Patch:
@@ -14,8 +14,6 @@
 
 import org.activiti.engine.FormService;
 import org.activiti.engine.RepositoryService;
-import org.activiti.engine.form.FormData;
-import org.activiti.engine.impl.bpmn.IOSpecification;
 import org.activiti.engine.runtime.ProcessInstance;
 
 /** Is an object structure representing an executable process composed of 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/transform/util/CustomProperty.java
Patch:
@@ -29,7 +29,7 @@ public enum CustomProperty {
 
 	private CustomProperty(String name) {
 		this.name = name;
-		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")+)\")(.*)");
+		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")+)\")(.*)", Pattern.DOTALL);
 	}
 
   public String getValue(String propertyContainer) {

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/transform/util/CustomPropertyTest.java
Patch:
@@ -17,7 +17,7 @@ public void testGetValue() {
 
     propertyContainer = "Original Name: \"Do\\n\"\"Something\"\"\"\nOriginal ID: \"sid-910BF305-8A75-4319-A3A9-23C5B2828944\"";
     actual = CustomProperty.ORIGINAL_NAME.getValue(propertyContainer);
-    // FIXME assertEquals(expected, actual);
+    assertEquals(expected, actual);
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngineConfiguration;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.RepositorySession;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.form.StartFormHandler;
@@ -54,10 +55,10 @@ public ProcessInstance execute(CommandContext commandContext) {
     processInstance = processDefinition.createProcessInstance();
 
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY) {
+    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       DbSqlSession dbSqlSession = commandContext.getSession(DbSqlSession.class);
 
-      if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_AUDIT) {
+      if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
         for (String propertyId: properties.keySet()) {
           String propertyValue = properties.get(propertyId);
           HistoricFormPropertyEntity historicFormProperty = new HistoricFormPropertyEntity(processInstance, propertyId, propertyValue);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbRepositorySession.java
Patch:
@@ -25,6 +25,7 @@
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.ProcessDefinitionQueryImpl;
 import org.activiti.engine.impl.ProcessInstanceQueryImpl;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.RepositorySession;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.Session;
@@ -115,7 +116,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
         .executeList(commandContext, null);
 
       int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-      boolean isHistoryEnabled = historyLevel >= ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY;
+      boolean isHistoryEnabled = historyLevel >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY;
       
       for (ProcessDefinition processDefinition: processDefinitions) {
         if (isHistoryEnabled) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/repository/ProcessDefinitionEntity.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ProcessEngineConfiguration;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.form.StartFormHandler;
@@ -82,7 +83,7 @@ public ExecutionEntity createProcessInstance(String businessKey) {
 	    processInstance.setVariables(variableMap);
 
 	    int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-	    if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY) {
+	    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
 	      DbSqlSession dbSqlSession = commandContext.getSession(DbSqlSession.class);
 	      HistoricProcessInstanceEntity historicProcessInstance = new HistoricProcessInstanceEntity(processInstance);
 	      dbSqlSession.insert(historicProcessInstance);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/ExecutionEntity.java
Patch:
@@ -27,6 +27,7 @@
 import org.activiti.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti.engine.impl.calendar.BusinessCalendar;
 import org.activiti.engine.impl.calendar.DurationBusinessCalendar;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.history.HistoricActivityInstanceEntity;
@@ -119,7 +120,7 @@ public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processD
     
     CommandContext commandContext = CommandContext.getCurrent();
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY) {
+    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       DbSqlSession dbSqlSession = commandContext.getSession(DbSqlSession.class);
       HistoricProcessInstanceEntity historicProcessInstance = new HistoricProcessInstanceEntity((ExecutionEntity) subProcessInstance);
       dbSqlSession.insert(historicProcessInstance);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/VariableMap.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngineConfiguration;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.history.HistoricVariableUpdateEntity;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -116,7 +117,7 @@ public Object put(String key, Object value) {
     variableInstance.setValue(value);
     
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel==ProcessEngineConfiguration.HISTORYLEVEL_FULL) {
+    if (historyLevel==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
       DbSqlSession dbSqlSession = commandContext.getDbSqlSession();
       HistoricVariableUpdateEntity historicVariableUpdate = new HistoricVariableUpdateEntity(variableInstance, dbSqlSession);
       dbSqlSession.insert(historicVariableUpdate);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -56,6 +56,5 @@ public void testHistoricProcessInstanceUserIdAndActivityId() {
     
     historicProcessInstance = historyService.createHistoricProcessInstanceQuery().singleResult();
     assertEquals("theEnd", historicProcessInstance.getEndActivityId());
-    
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/JtaProcessEngineConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public class JtaProcessEngineConfiguration extends ProcessEngineConfigurationImp
     List<CommandInterceptor> defaultCommandInterceptorsTxRequired = new ArrayList<CommandInterceptor>();
     defaultCommandInterceptorsTxRequired.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequired.add(new JtaTransactionInterceptor(transactionManager, false));
-    defaultCommandInterceptorsTxRequired.add(new CommandContextInterceptor());
+    defaultCommandInterceptorsTxRequired.add(new CommandContextInterceptor(commandContextFactory));
     defaultCommandInterceptorsTxRequired.add(new CommandExecutorImpl());
     return defaultCommandInterceptorsTxRequired;
   }
@@ -48,7 +48,7 @@ public class JtaProcessEngineConfiguration extends ProcessEngineConfigurationImp
     List<CommandInterceptor> defaultCommandInterceptorsTxRequiresNew = new ArrayList<CommandInterceptor>();
     defaultCommandInterceptorsTxRequiresNew.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequiresNew.add(new JtaTransactionInterceptor(transactionManager, true));
-    defaultCommandInterceptorsTxRequiresNew.add(new CommandContextInterceptor());
+    defaultCommandInterceptorsTxRequiresNew.add(new CommandContextInterceptor(commandContextFactory));
     defaultCommandInterceptorsTxRequiresNew.add(new CommandExecutorImpl());
     return defaultCommandInterceptorsTxRequiresNew;
   }

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorTest.java
Patch:
@@ -175,7 +175,7 @@ public void testGetFolderInfo() throws IOException, JSONException {
     SignavioConnector connector = (SignavioConnector) conf.createConnector();
     connector.login(conf.getUser(), conf.getPassword());
     
-    RepositoryFolder folder = connector.getRepositoryFolder(conf.getDirectoryUrl("/407c45d65cad48548f7b2dac5cfde5fe"));
+    RepositoryFolder folder = connector.getRepositoryFolder("/407c45d65cad48548f7b2dac5cfde5fe");
     Assert.assertNotNull(folder);
     System.out.println(folder);
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/incubator/connector/svn/SvnConnectorConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public void setTemporaryFileStore(String temporaryFileStore) {
   }
 
   public ArtifactType getDefaultArtifactType() {
-    return getArtifactType(SvnConnectorPluginDefinition.ARTIFACT_TYPE_DEFAULT);
+    return SvnConnectorPluginDefinition.artifactTypeDefault;
   }
 
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/incubator/connector/svn/SvnConnectorPluginDefinition.java
Patch:
@@ -40,14 +40,15 @@ public class SvnConnectorPluginDefinition implements ActivitiCyclePluginDefiniti
   public static final String CONTENT_REPRESENTATION_ID_BINARY = "Binary";
   public static final String CONTENT_REPRESENTATION_ID_HTML = "HTML";
   public static final String CONTENT_REPRESENTATION_ID_HTML_SOURCE = "HTML source";
+  public static ArtifactTypeImpl artifactTypeDefault;
 
   // public static final String CONTENT_REPRESENTATION_ID_MS_WORD_X = "docx";
   // public static final String CONTENT_REPRESENTATION_ID_MS_PP = "ppt";
   // public static final String CONTENT_REPRESENTATION_ID_MS_PP_X = "pptx";
   // public static final String CONTENT_REPRESENTATION_ID_PDF = "pdf";
 
   public void addArtifactTypes(List<ArtifactType> types) {
-    ArtifactTypeImpl artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT, CycleDefaultMimeType.TEXT);
+     artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT, CycleDefaultMimeType.TEXT);
     artifactTypeDefault.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_TEXT, CycleDefaultMimeType.TEXT,
             RenderInfo.TEXT_PLAIN), new SvnTextFileContentProvider());
     artifactTypeDefault.addDownloadContentAction(CONTENT_REPRESENTATION_ID_TEXT);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -148,7 +148,7 @@ public void dbSchemaCheckVersion() {
     } catch (Exception e) {
       if (isMissingTablesException(e)) {
         throw new ActivitiException(
-                "no activiti tables in db.  set schema-strategy='create-drop' in activiti.cfg.xml for automatic schema creation", e);
+                "no activiti tables in db.  set databaseSchemaUpdate to 'true' or 'create-drop' in activiti.cfg.xml for automatic schema creation", e);
       } else {
         if (e instanceof RuntimeException) {
           throw (RuntimeException) e;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/CycleService.java
Patch:
@@ -112,6 +112,8 @@ public RepositoryArtifact createArtifactFromContentRepresentation(String connect
   public void addArtifactLink(RepositoryArtifactLink link);
 
   public List<RepositoryArtifactLink> getArtifactLinks(String sourceConnectorId, String sourceArtifactId);
+  
+  public List<RepositoryArtifactLink> getIncomingArtifactLinks(String targetConnectorId, String targetArtifactId);
 
   public void deleteLink(String linkId);
 

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/util/ActivitiRequestObject.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.rest.util;
 
+import java.io.InputStream;
 import java.util.List;
 import java.util.Map;
 

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/util/MultipartRequestObject.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import org.springframework.extensions.webscripts.WebScriptRequest;
+import org.springframework.extensions.webscripts.servlet.FormData;
 import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 /**

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/CycleServiceImpl.java
Patch:
@@ -82,8 +82,9 @@ public CycleServiceImpl(List<RepositoryConnector> repositoryConnectors) {
       }
     }
 
-    // add tag connector hard coded for the moment
-    this.repositoryConnectors.add(new TagConnectorConfiguration(this).createConnector());
+    // add tag connector hard coded for the moment (at the first node in the
+    // tree)
+    this.repositoryConnectors.add(0, new TagConnectorConfiguration(this).createConnector());
   }
 
   // bootstrapping for cycle

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -407,9 +407,6 @@ public String getModelUrl(RepositoryArtifact artifact) {
     return getConfiguration().getModelUrl(artifact.getNodeId());
   }
 
-  public void commitPendingChanges(String comment) {
-  }
-
   public void moveModel(String targetFolderId, String modelId) throws IOException {
     try {
       Form bodyForm = new Form();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/ValidateActivitiDeployment.java
Patch:
@@ -5,6 +5,7 @@
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryConnector;
 import org.activiti.cycle.impl.connector.signavio.SignavioConnector;
+import org.activiti.cycle.impl.connector.signavio.provider.ActivitiCompliantBpmn20Provider;
 import org.activiti.engine.ProcessEngines;
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.bpmn.parser.BpmnParser;
@@ -34,7 +35,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
             .getProcessEngineConfiguration();
     ExpressionManager expressionManager = processEngineConfiguration.getExpressionManager();
     
-    String bpmnXml = createBpmnXml((SignavioConnector) connector, artifact); 
+    String bpmnXml = ActivitiCompliantBpmn20Provider.createBpmnXml((SignavioConnector) connector, artifact); 
     
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/SignavioSvgApiBuilder.java
Patch:
@@ -28,7 +28,8 @@ public class SignavioSvgApiBuilder {
   private String authToken;
   private String clickFunction;
 
-  private boolean useLocalScripts = false;
+  // TODO: Remove the hard coded urls anyway!
+  private boolean useLocalScripts = true;
   private static String svgApiScript = "";
   
   /**

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/TagConnector.java
Patch:
@@ -121,6 +121,9 @@ public void updateContent(String artifactId, Content content) throws RepositoryN
 
   public void updateContent(String artifactId, String contentRepresentationName, Content content) throws RepositoryNodeNotFoundException {
     throw new UnsupportedOperationException("Cannot update content in TagConnector, use real RepositoryConnector istead.");    
+  }
+
+  public void beginTransaction(String folderId, String lockComment, boolean autocommit) {
   } 
   
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/incubator/connector/svn/SvnRepositoryConnector.java
Patch:
@@ -649,7 +649,7 @@ public void cancelTransaction() {
 		}
 	}
 
-	public void beginTransaction(String onFolderId, String lockComment, boolean autocommit) throws RepositoryNodeNotFoundException {
+  public void beginTransaction(boolean autocommit) {
 
 		synchronized (transaction_lock) {
 			if (transactionActive == true) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -444,7 +444,7 @@ public ProcessDefinitionEntity parseProcess(Element processElement) {
     processDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());
     processDefinition.setDeploymentId(deployment.getId());
     
-    String historyLevelText = processElement.attribute("history");
+    String historyLevelText = processElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS, "history");
     if (historyLevelText!=null) {
       processDefinition.setHistoryLevel(ProcessEngineConfiguration.parseHistoryLevel(historyLevelText));
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -229,10 +229,9 @@ private void parseDefinitionsAttributes() {
       }
     }
     
-    
     if (expressionLanguage != null) {
       if(expressionLanguage.contains("XPath")) {
-        LOG.info("XPath currently not supported as typeLanguage");
+        LOG.info("XPath currently not supported as expressionLanguage");
       }
     }
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/DataInputAssociation.java
Patch:
@@ -18,19 +18,19 @@
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 
 /**
- * A data association between a source and a target
+ * A data input association between a source and a target
  * 
  * @author Esteban Robles Luna
  */
-public class DataAssociation {
+public class DataInputAssociation {
 
   protected String source;
   
   protected String target;
   
   protected List<Assignment> assignments;
   
-  public DataAssociation(String source, String target) {
+  public DataInputAssociation(String source, String target) {
     this.source = source;
     this.target = target;
     this.assignments = new ArrayList<Assignment>();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/repository/ProcessDefinitionEntity.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
+import org.activiti.engine.impl.bpmn.IOSpecification;
 import org.activiti.engine.impl.cfg.ProcessEngineConfiguration;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.db.PersistentObject;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/variable/DefaultVariableTypes.java
Patch:
@@ -40,6 +40,7 @@ public DefaultVariableTypes() {
     addType(new DoubleType());
     addType(new ByteArrayType());
     addType(new SerializableType());
+    addType(new ItemType());
   }
 
   public DefaultVariableTypes addType(VariableType type) {

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/auth/ActivitiBasicHttpAuthenticatorFactory.java
Patch:
@@ -16,6 +16,7 @@
 import org.activiti.engine.identity.Group;
 import org.activiti.engine.identity.GroupQuery;
 import org.activiti.rest.Config;
+import org.springframework.extensions.webscripts.AbstractBasicHttpAuthenticatorFactory;
 import org.springframework.extensions.webscripts.Description;
 
 import java.util.ArrayList;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/SignavioDiffProvider.java
Patch:
@@ -95,7 +95,7 @@ public void addValueToContent(Content content, SignavioConnector connector, Repo
     htmlContent += "Changes from " + artifact.getMetadata().getName() + " in " + diffTarget.getMetadata().getName();
     htmlContent += script2;
 
-    String html = SignavioSvgApiBuilder.buildHtml(htmlContent, 200, 600);
+    String html = SignavioSvgApiBuilder.buildHtml(htmlContent, "", 200, 600);
     content.setValue(html);
     
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -359,7 +359,7 @@ public RepositoryFolder createFolder(String parentFolderId, String name) throws
       Form createFolderForm = new Form();
       createFolderForm.add("name", name);
       createFolderForm.add("description", ""); // TODO: what should we use here?
-      createFolderForm.add("parent", "/directory/" + parentFolderId);
+      createFolderForm.add("parent", "/directory" + parentFolderId);
       Representation createFolderRep = createFolderForm.getWebRepresentation();
 
       Request jsonRequest = new Request(Method.POST, new Reference(getConfiguration().getDirectoryRootUrl()), createFolderRep);

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/FolderPost.java
Patch:
@@ -43,6 +43,7 @@ void execute(ActivitiRequest req, Status status, Cache cache, Map<String, Object
       model.put("result", true);
     } catch (Exception e) {
       model.put("result", false);
+      throw new RuntimeException(e);
     }
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/BpmnActivityBehavior.java
Patch:
@@ -23,8 +23,8 @@
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 
 /**
- * helper class for implementing BPMN 2.0 activities, offering convience methods
- * specific to BPMN 2.0.
+ * helper class for implementing BPMN 2.0 activities, offering convenience
+ * methods specific to BPMN 2.0.
  * 
  * This class can be used by inheritance or aggregation.
  * 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -502,7 +502,8 @@ public RepositoryArtifact createArtifactFromJSON(String containingFolderId, Stri
       // this ID ourself.
       // But anyway, then we don't know the id and cannot load the artifact down
       // to return it correctly, so we generate one ourself
-      String id = UUID.randomUUID().toString();
+      // Christian: We need to remove the hypen in the generated uuid, otherwise signavio is unable to create a model
+      String id = UUID.randomUUID().toString().replace("-", "");
       modelForm.add("id", id);
       
       // modelForm.add("views", new JSONArray().toString());

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/FileSystemConnector.java
Patch:
@@ -104,9 +104,9 @@ public void deleteArtifact(String artifactId) throws RepositoryNodeNotFoundExcep
   }
 
   public RepositoryFolder createFolder(String parentFolderId, String name) throws RepositoryNodeNotFoundException {
-    File newSubFolder = new File(getFileFromId(parentFolderId), parentFolderId);
+    File newSubFolder = new File(getFileFromId(parentFolderId), name);
     if (!newSubFolder.mkdir()) {
-      throw new RepositoryException("Unable to create subfolder " + parentFolderId + " in parentfolder " + parentFolderId);
+      throw new RepositoryException("Unable to create subfolder '" + name + "' in parentfolder '" + parentFolderId + "'");
     }
     
     return getRepositoryFolder(getRepositoryNodeId(parentFolderId, name));

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioPluginDefinition.java
Patch:
@@ -9,6 +9,7 @@
 import org.activiti.cycle.impl.ContentRepresentationImpl;
 import org.activiti.cycle.impl.conf.RepositoryConnectorConfiguration;
 import org.activiti.cycle.impl.connector.signavio.action.CopySignavioModelAction;
+import org.activiti.cycle.impl.connector.signavio.action.CreateMavenProjectAction;
 import org.activiti.cycle.impl.connector.signavio.action.CreateTechnicalBpmnXmlAction;
 import org.activiti.cycle.impl.connector.signavio.action.OpenModelerAction;
 import org.activiti.cycle.impl.connector.signavio.action.SelectDiffTargetAction;
@@ -80,6 +81,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     artifactType1.addParameterizedAction(new ValidateActivitiDeployment());
     artifactType1.addParameterizedAction(new CopySignavioModelAction());
     artifactType1.addParameterizedAction(new SelectDiffTargetAction());
+    artifactType1.addParameterizedAction(new CreateMavenProjectAction());
     artifactType1.addOpenUrlAction(new OpenModelerAction());
     artifactType1.addDownloadContentAction(CONTENT_REPRESENTATION_ID_BPMN_20_DEVELOPER);
     artifactType1.addDownloadContentAction(CONTENT_REPRESENTATION_ID_BPMN_20_RAW);

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/ValidateActivitiDeployment.java
Patch:
@@ -34,9 +34,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
             .getProcessEngineConfiguration();
     ExpressionManager expressionManager = processEngineConfiguration.getExpressionManager();
     
-    String sourceJson = getBpmn20Json((SignavioConnector) connector, artifact);
-    String transformedJson = applyJsonTransformations(sourceJson);
-    String bpmnXml = transformToBpmn20((SignavioConnector) connector, transformedJson); 
+    String bpmnXml = createBpmnXml((SignavioConnector) connector, artifact); 
     
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1338,10 +1338,10 @@ public void parseSequenceFlow(Element processElement, ScopeImpl scope) {
       ActivityImpl destinationActivity = scope.findActivity(destinationRef);
 
       if (sourceActivity == null) {
-        addError("Invalid source of sequence flow '" + id + "'", sequenceFlowElement);
+        addError("Invalid source '" + sourceRef + "' of sequence flow '" + id + "'", sequenceFlowElement);
       }
       if (destinationActivity == null) {
-        addError("Invalid destination of sequence flow '" + id + "'", sequenceFlowElement);
+        addError("Invalid destination '" + destinationRef + "' of sequence flow '" + id + "'", sequenceFlowElement);
       }
 
       TransitionImpl transition = sourceActivity.createOutgoingTransition(id);

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/SignavioDiffProvider.java
Patch:
@@ -98,7 +98,7 @@ public void addValueToContent(Content content, SignavioConnector connector, Repo
       htmlContent += "Changes from " + artifact.getMetadata().getName() + " in " + diffTarget.getMetadata().getName();
       htmlContent += script2;
       
-      String html = SignavioSvgApiBuilder.buildHtml(htmlContent, 200);
+      String html = SignavioSvgApiBuilder.buildHtml(htmlContent, 200, 600);
       content.setValue(html);
     } catch (JSONException e) {
       throw new RepositoryException("Could not show DIFF due to exception in SvgApi", e);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/Automatic.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/EmbeddedSubProcess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/End.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/ParallelGateway.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import java.util.List;
 import java.util.logging.Level;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/ReusableSubProcess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import java.util.List;
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/WaitState.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/While.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;

File: modules/activiti-spring/src/main/java/org/activiti/spring/ProcessEngineFactoryBean.java
Patch:
@@ -210,7 +210,7 @@ public void setJobExecutor(JobExecutor jobExecutor) {
     processEngineConfiguration.setJobExecutor(jobExecutor);
   }
 
-  public void setJobExecutorAutoActivate(boolean jobExecutorAutoActivate) {
+  public void setJobExecutorActivate(boolean jobExecutorAutoActivate) {
     processEngineConfiguration.setJobExecutorActivate(jobExecutorAutoActivate);
   }
 

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -42,7 +42,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     String processDefinitionId = req.getMandatoryString(obj, "processDefinitionId");
     Map<String, Object> variables = req.getFormVariables();
     variables.remove("processDefinitionId");
-    model.put("instance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
+    model.put("processInstance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
   }
 
 }

File: modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -37,9 +37,9 @@ public void testTableCount() {
     assertEquals(new Long(0), tableCount.get("ACT_ID_GROUP"));
     assertEquals(new Long(0), tableCount.get("ACT_ID_MEMBERSHIP"));
     assertEquals(new Long(0), tableCount.get("ACT_ID_USER"));
-    assertEquals(new Long(0), tableCount.get("ACT_RE_PROC_DEF"));
+    assertEquals(new Long(0), tableCount.get("ACT_RE_PROCDEF"));
     assertEquals(new Long(0), tableCount.get("ACT_RU_TASK"));
-    assertEquals(new Long(0), tableCount.get("ACT_RU_IDENTITY_LINK"));
+    assertEquals(new Long(0), tableCount.get("ACT_RU_IDENTITYLINK"));
     ;
   }
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/ArtifactTypeImpl.java
Patch:
@@ -315,7 +315,8 @@ public void addDownloadContentAction(String contentRepresentationId) {
   public List<RepositoryArtifactOpenLinkAction> createOpenLinkActions(RepositoryConnector connector, RepositoryArtifact artifact) {
     ArrayList<RepositoryArtifactOpenLinkAction> list = new ArrayList<RepositoryArtifactOpenLinkAction>();
     for (CreateUrlAction action : getCreateUrlActions()) {
-      RepositoryArtifactOpenLinkAction link = new RepositoryArtifactOpenLinkAction(action.getId(), action.getUrl(connector, artifact));
+      // TODO: Think about id
+      RepositoryArtifactOpenLinkAction link = new RepositoryArtifactOpenLinkAction("Open " + action.getId(), action.getUrl(connector, artifact));
       list.add(link);
     }
     return list;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/OpenModelerAction.java
Patch:
@@ -32,7 +32,7 @@ public class OpenModelerAction extends CreateUrlActionImpl {
   
   public OpenModelerAction() {
     // TODO: remove when real labels are introduced in the GUI
-    super("Open modeler action");
+    super("modeler");
   }
 
   public URL getUrl(RepositoryConnector connector, RepositoryArtifact artifact) {

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -86,7 +86,6 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
       // Show errors that occur during transformations as HTML in the UI
       model.put("renderInfo", RenderInfo.HTML);
       model.put("contentRepresentationId", representationId);
-      model.put("content", e.getRenderContent());
       model.put("contentType", CycleDefaultMimeType.HTML.getContentType());
     } catch (Exception ex) {
       log.log(Level.WARNING, "Exception while loading content representation", ex);

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/demo/DemoConnectorTest.java
Patch:
@@ -104,7 +104,7 @@ public void testFirstPlay() throws Exception {
     parameters.put("targetConnectorId", "demo");
     parameters.put("targetFolderId", "/minutes");
 
-    cycleService.executeParameterizedAction("demo", file1.getNodeId(), CopyArtifactAction.class.getName(), parameters);
+    cycleService.executeParameterizedAction("demo", file1.getNodeId(), new CopyArtifactAction().getId(), parameters);
 
     List<RepositoryNode> nodes = DemoConnector.nodes;
     assertEquals(8, DemoConnector.nodes.size());

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -85,7 +85,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     } catch (TransformationException e) {
       // Show errors that occur during transformations as HTML in the UI
       model.put("renderInfo", RenderInfo.HTML);
-      model.put("contentRepresentationId", "Exception");
+      model.put("contentRepresentationId", representationId);
       model.put("content", e.getRenderContent());
       model.put("contentType", CycleDefaultMimeType.HTML.getContentType());
     } catch (Exception ex) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbRepositorySession.java
Patch:
@@ -209,6 +209,9 @@ public ProcessDefinitionEntity findDeployedLatestProcessDefinitionByKey(String p
   }
 
   public ProcessDefinitionEntity findDeployedProcessDefinitionById(String processDefinitionId) {
+    if (processDefinitionId == null) {
+      throw new ActivitiException("Invalid process definition id : null");
+    }
     ProcessDefinitionEntity processDefinition = (ProcessDefinitionEntity) dbSqlSession.selectOne("selectProcessDefinitionById", processDefinitionId);
     if(processDefinition == null) {
       throw new ActivitiException("no deployed process definition found with id '" + processDefinitionId + "'");

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ArtifactType.java
Patch:
@@ -46,7 +46,7 @@ public interface ArtifactType {
   
   public ParameterizedAction getParameterizedAction(String name);
 
-  public List<RepositoryArtifactOutgoingLink> createLinks(RepositoryConnector connector, RepositoryArtifact artifact);
+  public List<RepositoryArtifactOpenLinkAction> createOpenLinkActions(RepositoryConnector connector, RepositoryArtifact artifact);
 
   public List<DownloadContentAction> getDownloadContentActions();
   

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/RepositoryArtifact.java
Patch:
@@ -25,5 +25,5 @@ public interface RepositoryArtifact extends RepositoryNode {
   
   public ArtifactType getArtifactType();
   
-  public List<RepositoryArtifactOutgoingLink> getOutgoingLinks();
+  public List<RepositoryArtifactOpenLinkAction> getOpenLinkActions();
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/ContentProviderImpl.java
Patch:
@@ -35,7 +35,7 @@ public Content createContent(RepositoryConnector connector, RepositoryArtifact a
 
     addValueToContent(c, connector, artifact);
     if (c.isNull()) {
-      throw new RepositoryException("No content created for artifact " + artifact.getId() + " ' by provider '" + this.getClass().getName()
+      throw new RepositoryException("No content created for artifact " + artifact.getGlobalUniqueId() + " ' by provider '" + this.getClass().getName()
               + "' (was null). Please check provider or artifact.");
     }
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/RepositoryFolderImpl.java
Patch:
@@ -23,8 +23,8 @@ public class RepositoryFolderImpl extends RepositoryNodeImpl implements Reposito
 
   private static final long serialVersionUID = 1L;
 
-  public RepositoryFolderImpl(String id) {
-    super(id);
+  public RepositoryFolderImpl(String connectorId, String nodeId) {
+    super(connectorId, nodeId);
   }
 
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/DemoConnectorConfiguration.java
Patch:
@@ -7,6 +7,7 @@ public class DemoConnectorConfiguration extends RepositoryConnectorConfiguration
   
   public DemoConnectorConfiguration(String name) {
     setName(name);
+    setId(name);
   }
 
   @Override

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/action/CopyArtifactAction.java
Patch:
@@ -58,7 +58,7 @@ private void copyArtifact(RepositoryConnector sourceConnector, RepositoryConnect
     // targetName;
     // }
 
-    Content content = sourceConnector.getContent(artifact.getId(), artifact.getArtifactType().getDefaultContentRepresentation().getId());
+    Content content = sourceConnector.getContent(artifact.getOriginalNodeId(), artifact.getArtifactType().getDefaultContentRepresentation().getId());
     targetConnector.createArtifact(targetFolder, targetName, artifact.getArtifactType().getId(), content);
   }
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/provider/DemoProvider.java
Patch:
@@ -25,12 +25,12 @@ public String toString() {
 
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    Map<String, byte[]> map = DemoConnector.content.get(artifact.getId());
+    Map<String, byte[]> map = DemoConnector.content.get(artifact.getOriginalNodeId());
     if (map != null) {
       content.setValue(map.get(contentRepresentationName));
       return;
     }
-    throw new RepositoryException("Couldn't find content representation '" + contentRepresentationName + "' for artifact " + artifact.getId());
+    throw new RepositoryException("Couldn't find content representation '" + contentRepresentationName + "' for artifact " + artifact.getOriginalNodeId());
   }
 
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/FileSystemConnector.java
Patch:
@@ -160,7 +160,7 @@ private RepositoryArtifact getArtifactInfo(File file) throws IOException {
     // TODO: We should have an extension to ArtifactType mapping somewhere
     ArtifactType artifactType = getConfiguration().getArtifactType(mimeType);
 
-    RepositoryArtifactImpl artifact = new RepositoryArtifactImpl(id, artifactType, this);
+    RepositoryArtifactImpl artifact = new RepositoryArtifactImpl(getConfiguration().getId(), id, artifactType, this);
     artifact.getMetadata().setName(file.getName());
         
     // TODO: CHECK Implementation
@@ -202,7 +202,7 @@ private RepositoryFolder getFolderInfo(File file) throws IOException {
       // root folder is again a special case
       id = "/";
     }
-    RepositoryFolderImpl folder = new RepositoryFolderImpl(id);
+    RepositoryFolderImpl folder = new RepositoryFolderImpl(getConfiguration().getId(), id);
     folder.getMetadata().setName(file.getName());
     // TODO: Implement
     // folder.getMetadata().setParentFolderId();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/provider/FileBinaryContentProvider.java
Patch:
@@ -17,7 +17,7 @@
 public class FileBinaryContentProvider extends ContentProviderImpl {
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getId();
+    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getOriginalNodeId();
     File file = new File(fileName);
     FileInputStream fis = null;
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/provider/TextFileContentProvider.java
Patch:
@@ -15,7 +15,7 @@ public class TextFileContentProvider extends ContentProviderImpl {
 
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getId();
+    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getOriginalNodeId();
     File file = new File(fileName);
     try{
     	content.setValue(new FileInputStream(file));

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/provider/XmlFileContentProvider.java
Patch:
@@ -18,7 +18,7 @@ public class XmlFileContentProvider extends ContentProviderImpl {
 
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getId();
+    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getOriginalNodeId();
     File file = new File(fileName);
 
     try {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -86,7 +86,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
   }
 
   protected String getBpmn20Json(RepositoryConnector connector, RepositoryArtifact artifact) {
-    return connector.getContent(artifact.getId(), SignavioPluginDefinition.CONTENT_REPRESENTATION_ID_JSON).asString();
+    return connector.getContent(artifact.getOriginalNodeId(), SignavioPluginDefinition.CONTENT_REPRESENTATION_ID_JSON).asString();
   }
 
   protected String applyJsonTransformations(String sourceJson) {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/OpenModelerAction.java
Patch:
@@ -37,7 +37,7 @@ public OpenModelerAction() {
 
   public URL getUrl(RepositoryConnector connector, RepositoryArtifact artifact) {
     try {
-      return new URL(((SignavioConnector) connector).getConfiguration().getEditorUrl(artifact.getId()));
+      return new URL(((SignavioConnector) connector).getConfiguration().getEditorUrl(artifact.getOriginalNodeId()));
     } catch (MalformedURLException ex) {
       throw new RepositoryException("Error while creating URL for opening Signavio modeler", ex);
     }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/ValidateActivitiDeployment.java
Patch:
@@ -39,7 +39,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
     
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     // parse to validate
-    bpmnParser.createParse().sourceString(bpmnXml).name(artifact.getId()).execute();    
+    bpmnParser.createParse().sourceString(bpmnXml).name(artifact.getOriginalNodeId()).execute();    
     // That's it, now we get an exception is the file is invalid
   }
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/EmbeddableModelProvider.java
Patch:
@@ -60,7 +60,7 @@ public JSONArray getEmbeddedModel(SignavioConnector connector, RepositoryArtifac
     embeddedModelForm.add("label", "");
     embeddedModelForm.add("mails", "");
     embeddedModelForm.add("message", "");
-    embeddedModelForm.add("sbo", artifact.getId());
+    embeddedModelForm.add("sbo", artifact.getOriginalNodeId());
     embeddedModelForm.add("type", "png");
     Representation embeddedModelRep = embeddedModelForm.getWebRepresentation();
 
@@ -171,7 +171,7 @@ public String getHmtlSnippet(SignavioConnector connector, RepositoryArtifact art
     // Creating the JSON Object for the Snippet
     JSONObject resultJsonObject = new JSONObject();
 
-    resultJsonObject.put("url", connector.getConfiguration().getModelUrl(artifact.getId()));
+    resultJsonObject.put("url", connector.getConfiguration().getModelUrl(artifact.getOriginalNodeId()));
     resultJsonObject.put("overflowX", "fit");
     resultJsonObject.put("overflowY", "fit");
     resultJsonObject.put("zoomSlider", true);
@@ -237,7 +237,7 @@ public void deleteEmbeddedModel(SignavioConnector connector, RepositoryArtifact
     try {
       Client client = connector.initClient();
 
-      Reference embeddedModelRef = new Reference(connector.getConfiguration().getSignavioUrl() + "purl/" + artifact.getId() + "/info/");
+      Reference embeddedModelRef = new Reference(connector.getConfiguration().getSignavioUrl() + "purl/" + artifact.getOriginalNodeId() + "/info/");
 
       Request embeddedModelRequest = new Request(Method.DELETE, embeddedModelRef);
 

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/PngProvider.java
Patch:
@@ -25,7 +25,7 @@ public class PngProvider extends SignavioContentRepresentationProvider {
   @Override
   public void addValueToContent(Content content, SignavioConnector connector, RepositoryArtifact artifact) {
     try {
-      String modelAsPngUrl = connector.getConfiguration().getPngUrl(artifact.getId(), connector.getSecurityToken());
+      String modelAsPngUrl = connector.getConfiguration().getPngUrl(artifact.getOriginalNodeId(), connector.getSecurityToken());
       InputStream is = new URL(modelAsPngUrl).openStream();
       content.setValue(is);
     } catch (Exception ex) {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/util/RepositoryLogHelper.java
Patch:
@@ -45,7 +45,7 @@ public static void printNodes(RepositoryConnector connector, List<RepositoryNode
   public static void logFolder(RepositoryConnector connector, String intend, RepositoryNodeCollection folder) {
     log.log(Level.INFO, intend + folder);
     for (RepositoryFolder subFolder : folder.getFolderList()) {
-      printFolder(connector, intend + "   ", connector.getChildren(subFolder.getId()));
+      printFolder(connector, intend + "   ", connector.getChildren(subFolder.getOriginalNodeId()));
     }
     for (RepositoryArtifact file : folder.getArtifactList()) {
       log.log(Level.INFO, intend + "-" + file);
@@ -60,7 +60,7 @@ public static void printFolder(RepositoryConnector connector, String intend, Rep
   public static void printNodes(RepositoryConnector connector, String intend, List<RepositoryNode> nodes) {    
     for (RepositoryNode node : nodes) {
       if (node instanceof RepositoryFolder) {
-        printFolder(connector, intend + "   ", connector.getChildren(node.getId()));
+        printFolder(connector, intend + "   ", connector.getChildren(node.getOriginalNodeId()));
       } else {
         printArtifact(intend, (RepositoryArtifact) node);
       }

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/fs/FileSystemConnectorTest.java
Patch:
@@ -51,7 +51,7 @@ public void testFileSystemConnector() {
 
         Collection<ContentRepresentation> contentRepresentations = artifact.getArtifactType().getContentRepresentations();
         for (ContentRepresentation contentRepresentation : contentRepresentations) {
-          System.out.println(contentRepresentation.getId() + " -> " + conn.getContent(artifact.getId(), contentRepresentation.getId()).asString());
+          System.out.println(contentRepresentation.getId() + " -> " + conn.getContent(artifact.getOriginalNodeId(), contentRepresentation.getId()).asString());
         }
       }
     }

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -86,7 +86,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     }
 
     model.put("downloads", downloads);
-    model.put("links", artifact.getOutgoingLinks());
-    model.put("artifactId", artifact.getId());
+    model.put("links", artifact.getOpenLinkActions());
+    model.put("artifactId", artifact.getCurrentPath());
   }
 }

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -18,9 +18,9 @@
 import javax.servlet.http.HttpSession;
 
 import org.activiti.cycle.ContentRepresentation;
+import org.activiti.cycle.CycleDefaultMimeType;
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryConnector;
-import org.activiti.cycle.CycleDefaultMimeType;
 import org.activiti.cycle.impl.db.CycleServiceDbXStreamImpl;
 import org.activiti.rest.util.ActivitiRequest;
 import org.activiti.rest.util.ActivitiStreamingWebScript;
@@ -83,7 +83,7 @@ protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse
     }
 
     // TODO: what is a good way to determine the etag? Using a fake one...
-    streamResponse(res, repositoryConnector.getContent(artifact.getId(), contentRepresentation.getId()).asInputStream(), new Date(0),
+    streamResponse(res, repositoryConnector.getContent(artifact.getCurrentPath(), contentRepresentation.getId()).asInputStream(), new Date(0),
             "W/\"647-1281077702000\"", attach, attachmentFileName, contentType);
 
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfiguration.java
Patch:
@@ -123,11 +123,11 @@ public static Integer parseHistoryLevel(String historyLevelText) {
 
   protected String processEngineName;
 
-  /** the configurable list which will be {@link #initializeInterceptorChain(List, ProcessEngineConfiguration) processed} to build the {@link #commandExecutorTxRequired} */
+  /** the configurable list which will be {@link #initializeInterceptorChain(List) processed} to build the {@link #commandExecutorTxRequired} */
   protected List<CommandInterceptor> commandInterceptorsTxRequired;
   /** this will be initialized during the configurationComplete() */
   protected CommandExecutor commandExecutorTxRequired;
-  /** the configurable list which will be {@link #initializeInterceptorChain(List, ProcessEngineConfiguration) processed} to build the {@link #commandExecutorTxRequiresNew} */
+  /** the configurable list which will be {@link #initializeInterceptorChain(List) processed} to build the {@link #commandExecutorTxRequiresNew} */
   protected List<CommandInterceptor> commandInterceptorsTxRequiresNew;
   /** this will be initialized during the configurationComplete() */
   protected CommandExecutor commandExecutorTxRequiresNew;

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/activity/ActivityExecution.java
Patch:
@@ -29,7 +29,7 @@ public interface ActivityExecution extends DelegateExecution {
   /* Process instance/activity/transition retrieval */
 
   /**
-   * returns the current {@link Activity} of the execution.
+   * returns the current {@link PvmActivity} of the execution.
    */
   PvmActivity getActivity();
   
@@ -51,7 +51,7 @@ public interface ActivityExecution extends DelegateExecution {
    * creates a new sub process instance.
    * The current execution will be the super execution of the created execution.
    * 
-   * @param processDefinition The {@link ProcessDefinition} of the subprocess.
+   * @param processDefinition The {@link PvmProcessDefinition} of the subprocess.
    */
   PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition);
   

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -62,6 +62,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
         model.put("content", content);
       }
 
+      model.put("artifactId", artifactId);
       model.put("renderInfo", contentRepresentation.getRenderInfo().name());
       model.put("contentRepresentationId", contentRepresentation.getId());
       model.put("contentType", contentRepresentation.getMimeType().getContentType());

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/RootConnector.java
Patch:
@@ -94,7 +94,7 @@ public void commitPendingChanges(String comment) {
   private String getIdWithRepoName(RepositoryConnector connector, RepositoryNode repositoryNode) {
     String repositoryName = connector.getConfiguration().getName();
     if (!repositoryNode.getId().startsWith("/")) {
-      throw new RepositoryException("RepositoryNode id doesn't start with a slash, which is copnsidered invalid: '" + repositoryNode.getId()
+      throw new RepositoryException("RepositoryNode id doesn't start with a slash, which is considered invalid: '" + repositoryNode.getId()
               + "' in repository '" + repositoryName + "'");
     } else {
       return getRepositoryPrefix(repositoryName) + repositoryNode.getId();

File: modules/activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/demo/DemoConnectorTest.java
Patch:
@@ -101,6 +101,9 @@ public void testFirstPlay() throws Exception {
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("targetName", "xxx.txt");
     parameters.put("copyCount", 2);
+    parameters.put("targetFolderConnector", conn);
+    parameters.put("targetFolder", "/demo/minutes");
+    
     conn.executeParameterizedAction(file1.getId(), CopyArtifactAction.class.getName(), parameters);
     
     List<RepositoryNode> nodes = DemoConnector.nodes;

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ContentRepresentation.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * Data structure for link to content, including the URL to the content, the
- * type (see {@link StandardMimeType}) and a name (which is shown in the GUI).
+ * type (see {@link CycleDefaultMimeType}) and a name (which is shown in the GUI).
  * 
  * The client URL should be normally set by the infrastructure, so a
  * {@link ContentRepresentationProvider} can concentrate on really providing the

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/MimeType.java
Patch:
@@ -16,7 +16,7 @@
  * Provides a simple interface to retrieve the content-type of artifacts and
  * their content representations.
  * 
- * See {@link StandardMimeType} for a list of standard mime-types.
+ * See {@link CycleDefaultMimeType} for a list of standard mime-types.
  * 
  * @author nils.preusker@camunda.com
  */

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/ArtifactTypeImpl.java
Patch:
@@ -28,7 +28,7 @@
 import org.activiti.cycle.RepositoryArtifactOutgoingLink;
 import org.activiti.cycle.RepositoryConnector;
 import org.activiti.cycle.RepositoryException;
-import org.activiti.cycle.StandardMimeType;
+import org.activiti.cycle.CycleDefaultMimeType;
 
 /**
  * The type specifies the type of an artifact, e.g. Signavio model, jpdl process
@@ -67,7 +67,7 @@ public class ArtifactTypeImpl implements ArtifactType {
 
   private List<DownloadContentAction> downloadContentActions; 
 
-  public ArtifactTypeImpl(String id, StandardMimeType mimeType) {
+  public ArtifactTypeImpl(String id, CycleDefaultMimeType mimeType) {
     this.id = id;
     this.mimeType = mimeType;
     this.contentRepresentationList = new ArrayList<ContentRepresentation>();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/ContentRepresentationImpl.java
Patch:
@@ -3,13 +3,13 @@
 import java.io.Serializable;
 
 import org.activiti.cycle.RenderInfo;
-import org.activiti.cycle.StandardMimeType;
+import org.activiti.cycle.CycleDefaultMimeType;
 import org.activiti.cycle.ContentRepresentation;
 import org.activiti.cycle.MimeType;
 
 /**
  * Data structure for link to content, including the URL to the content, the
- * type (see {@link StandardMimeType}) and a name (which is shown in the GUI).
+ * type (see {@link CycleDefaultMimeType}) and a name (which is shown in the GUI).
  * 
  * The client URL should be normally set by the infrastructure, so a
  * {@link ContentRepresentationProvider} can concentrate on really providing the

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/RootConnector.java
Patch:
@@ -245,7 +245,7 @@ public void executeParameterizedAction(String artifactId, String actionId, Map<S
     RepositoryConnector connector = getConnectorFromUrl(artifactId);
     String repoPartOfId = getRepositoryPartOfUrl(artifactId);
     for (Entry<String, Object> parameter : new HashSet<Entry<String, Object>>(parameters.entrySet())) {
-      if (parameter.getKey().equals("targetFolderId")) {
+      if (parameter.getKey().equals("treeTarget")) {
           String targetFolderId = (String) parameter.getValue();
           parameters.put("targetFolderConnector", getConnectorFromUrl(targetFolderId));
           parameters.put("targetFolder", getRepositoryPartOfUrl(targetFolderId));

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ArtifactType.java
Patch:
@@ -29,14 +29,14 @@ public interface ArtifactType {
 
   public String getId();
   
-  public ContentType getContentType();
+  public MimeType getMimeType();
 
   /**
    * list of {@link ContentRepresentation} in the configured order
    */
   public List<ContentRepresentation> getContentRepresentations();
 
-  // public ContentRepresentation getContentRepresentation(String id);
+  public ContentRepresentation getContentRepresentation(String id);
 
   public ContentRepresentation getDefaultContentRepresentation();  
 

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -67,9 +67,9 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     List<DownloadActionView> downloads = new ArrayList<DownloadActionView>();
     for (DownloadContentAction action : artifact.getArtifactType().getDownloadContentActions()) {
       try {
-        String url = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
-                + URLEncoder.encode(action.getContentRepresentation().getContentType().getName(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getContentType().name(), action.getContentRepresentation().getId()));
+        String url = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&contentRepresentationId="
+                + URLEncoder.encode(action.getContentRepresentation().getId(), "UTF-8");
+        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getMimeType().getContentType(), action.getContentRepresentation().getId()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in
         // java on all platforms

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/xml/ParseHandler.java
Patch:
@@ -56,10 +56,10 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
   }
 
   public void error(SAXParseException e) {
-    parse.addProblem(e);
+    parse.addError(e);
   }
   public void fatalError(SAXParseException e) {
-    parse.addProblem(e);
+    parse.addError(e);
   }
   public void warning(SAXParseException e) {
     log.warning(e.toString());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/xml/Problem.java
Patch:
@@ -17,6 +17,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class Problem {
 
@@ -35,6 +36,7 @@ public Problem(SAXParseException e, String resource) {
       }
       exception = exception.getCause();
     }
+    this.resource = resource;
     this.line = e.getLineNumber();
     this.column = e.getColumnNumber();
   }
@@ -47,7 +49,7 @@ public Problem(String errorMessage, String resourceName, Element element) {
       this.column = element.getColumn();
     }
   }
-
+  
   public String toString() {
     return errorMessage+(resource!=null ? " | "+resource : "")+" | line "+line+" | column "+column;
   }

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/identity/UserGet.java
Patch:
@@ -23,8 +23,7 @@
  *
  * @author Erik Winlof
  */
-public class UserGet extends ActivitiWebScript
-{
+public class UserGet extends ActivitiWebScript {
 
   /**
    * Collects details about a user for the webscript template.

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -68,8 +68,8 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     for (DownloadContentAction action : artifact.getArtifactType().getDownloadContentActions()) {
       try {
         String url = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
-                + URLEncoder.encode(action.getContentRepresentation().getMimeType(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getMimeType(), action.getContentRepresentation().getId()));
+                + URLEncoder.encode(action.getContentRepresentation().getContentType().getName(), "UTF-8");
+        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getContentType().name(), action.getContentRepresentation().getId()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in
         // java on all platforms

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -48,7 +48,7 @@ protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse
 
     Collection<ContentRepresentation> representations = artifact.getArtifactType().getContentRepresentations();
     for (ContentRepresentation representation : representations) {
-      if (representation.getMimeType().equals(contentType)) {
+      if (representation.getContentType().getName().equals(contentType)) {
 
         // assuming we want to create an attachment for binary data...
         boolean attach = contentType.startsWith("application/") ? true : false;

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -40,9 +40,9 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     try {
       for (ContentRepresentation contentRepresentation : artifact.getArtifactType().getContentRepresentations()) {
         if (contentRepresentation.getId().equals(representationId)) {
-          if (contentRepresentation.getMimeType().startsWith("image/")) {
+          if (contentRepresentation.getContentType().getName().startsWith("image/")) {
             String imageUrl = restProxyUri + "/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
-                    + "&content-type=" + URLEncoder.encode(contentRepresentation.getMimeType(), "UTF-8");
+                    + "&content-type=" + URLEncoder.encode(contentRepresentation.getContentType().getName(), "UTF-8");
             model.put("imageUrl", imageUrl);
           } else {
             String content = conn.getContent(artifactId, contentRepresentation.getId()).asString();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ArtifactType.java
Patch:
@@ -28,6 +28,8 @@
 public interface ArtifactType {
 
   public String getId();
+  
+  public ContentType getContentType();
 
   /**
    * list of {@link ContentRepresentation} in the configured order

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ContentRepresentation.java
Patch:
@@ -25,10 +25,10 @@ public interface ContentRepresentation extends Serializable {
 	public String getId();
 
 	/**
-   * type of content as normally indicated by {@link ContentType} (e.g. text
-   * file, image, ...). Information for the client to render it correctly.
+   * Type of content (e.g. text file, image, ...). Information for the client 
+   * to render the content correctly.
    */
-  public String getMimeType();
+  public ContentType getContentType();
 	// TODO: Think about that, maybe as annotation in the Plugin-Config
   // public boolean isDownloadable();
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/DemoConnectorPluginDefinition.java
Patch:
@@ -27,7 +27,7 @@ public class DemoConnectorPluginDefinition implements ActivitiCyclePluginDefinit
   public static final String CONTENT_REPRESENTATION_ID_XML = "XML";
 
   public void addArtifactTypes(List<ArtifactType> types) {
-    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_TEXT);
+    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_TEXT, ContentType.TEXT);
     artifactType1.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_TEXT, ContentType.TEXT), new DemoProvider(
             CONTENT_REPRESENTATION_ID_TEXT));
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_EXCEPTION, ContentType.TEXT), new ExceptionProvider());
@@ -36,14 +36,14 @@ public void addArtifactTypes(List<ArtifactType> types) {
     artifactType1.addDownloadContentAction(CONTENT_REPRESENTATION_ID_TEXT);
     types.add(artifactType1);
 
-    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_MINDMAP);
+    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_MINDMAP, ContentType.XML);
     artifactType2.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_TEXT, ContentType.TEXT), new DemoProvider(
             CONTENT_REPRESENTATION_ID_TEXT));
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new DemoProvider(
             CONTENT_REPRESENTATION_ID_PNG));
     types.add(artifactType2);
 
-    ArtifactTypeImpl artifactType3 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20);
+    ArtifactTypeImpl artifactType3 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20, ContentType.XML);
     artifactType3.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_XML, ContentType.TEXT), new DemoProvider(
             CONTENT_REPRESENTATION_ID_XML));
     artifactType3.addParameterizedAction(new CopyArtifactAction());

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioPluginDefinition.java
Patch:
@@ -59,7 +59,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     // SignavioConnector.SIGNAVIO_NAMESPACE_FOR_BPMN_JBPM4));
 
    
-    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20);
+    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20, ContentType.XML);
     artifactType1.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new PngProvider());
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_BPMN_20_DEVELOPER, ContentType.XML),
             new ActivitiCompliantBpmn20Provider());
@@ -75,7 +75,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     types.add(artifactType1);
    
    
-    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_FOR_JPDL4);
+    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_FOR_JPDL4, ContentType.XML);
     artifactType2.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new PngProvider());
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JPDL4, ContentType.XML), new Jpdl4Provider());
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, ContentType.XML), new JsonProvider());
@@ -89,7 +89,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     // initialize RepositoryRegistry with supported formats?
 
     // TODO: Check if really any artifact in Signavio has a PNG?
-    ArtifactTypeImpl artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT);
+    ArtifactTypeImpl artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT, ContentType.XML);
     artifactTypeDefault.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new PngProvider());
     types.add(artifactTypeDefault);
   }

File: modules/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -32,6 +32,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
 
     String artifactId = req.getString("artifactId");
     String representationId = req.getString("representationId");
+    String restProxyUri = req.getString("restProxyUri");
 
     RepositoryArtifact artifact = conn.getRepositoryArtifact(artifactId);
 
@@ -40,7 +41,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
       for (ContentRepresentation contentRepresentation : artifact.getArtifactType().getContentRepresentations()) {
         if (contentRepresentation.getId().equals(representationId)) {
           if (contentRepresentation.getMimeType().startsWith("image/")) {
-            String imageUrl = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
+            String imageUrl = restProxyUri + "/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
                     + "&content-type=" + URLEncoder.encode(contentRepresentation.getMimeType(), "UTF-8");
             model.put("imageUrl", imageUrl);
           } else {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/el/ExpressionManagerTest.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author Frederik Heremans
  */
-public class ELTest extends ActivitiInternalTestCase {
+public class ExpressionManagerTest extends ActivitiInternalTestCase {
   
   @Override
   protected void setUp() throws Exception {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeployCmd.java
Patch:
@@ -58,18 +58,18 @@ protected boolean deploymentsDiffer(DeploymentEntity deployment, DeploymentEntit
     Map<String, ResourceEntity> resources = deployment.getResources();
     Map<String, ResourceEntity> savedResources = saved.getResources();
     if (!resources.keySet().equals(savedResources.keySet())) {
-      return false;
+      return true;
     }
     for (String resourceName: resources.keySet()) {
       ResourceEntity resource = resources.get(resourceName);
       byte[] bytes = resource.getBytes();
       ResourceEntity savedResource = savedResources.get(resourceName);
       byte[] savedBytes = savedResource.getBytes();
       if (!Arrays.equals(bytes, savedBytes)) {
-        return false;
+        return true;
       }
     }
-    return true;
+    return false;
   }
 
 //  private boolean resourcesDiffer(ByteArrayEntity value, ByteArrayEntity other) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -61,6 +61,7 @@
 import org.activiti.engine.impl.util.xml.Element;
 import org.activiti.engine.impl.util.xml.Parse;
 import org.activiti.engine.impl.variable.VariableDeclaration;
+import org.activiti.engine.impl.webservice.WSDLImporter;
 import org.activiti.pvm.activity.ActivityBehavior;
 import org.activiti.pvm.impl.process.ActivityImpl;
 import org.activiti.pvm.impl.process.ProcessDefinitionImpl;
@@ -160,7 +161,7 @@ public class BpmnParse extends Parse {
     this.parseListeners = parser.getParseListeners();
     setSchemaResource(BpmnParser.SCHEMA_RESOURCE);
     
-   // this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
+    this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
   }
 
   @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/webservice/WSDLImporter.java
Patch:
@@ -37,6 +37,7 @@
 import org.activiti.engine.impl.bpmn.Structure;
 import org.activiti.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti.engine.impl.bpmn.parser.XMLImporter;
+import org.apache.xerces.parsers.DOMParser;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.NodeList;
@@ -49,7 +50,6 @@
 import com.sun.tools.xjc.api.Mapping;
 import com.sun.tools.xjc.api.S2JJAXBModel;
 import com.sun.tools.xjc.api.SchemaCompiler;
-import com.sun.tools.xjc.api.TypeAndAnnotation;
 import com.sun.tools.xjc.api.XJC;
 
 /**
@@ -203,7 +203,7 @@ private void createDefaultStructures(Element rootTypes) {
 
   private Element getRootTypes() {
     try {
-      com.sun.org.apache.xerces.internal.parsers.DOMParser parser = new com.sun.org.apache.xerces.internal.parsers.DOMParser();
+      DOMParser parser = new DOMParser();
       parser.parse(this.wsdlLocation);
       Document doc = parser.getDocument();
       Element root = (Element) doc.getFirstChild();

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/ActionExecutionPut.java
Patch:
@@ -9,8 +9,6 @@
 import org.activiti.rest.util.ActivitiWebScript;
 import org.springframework.extensions.webscripts.Cache;
 import org.springframework.extensions.webscripts.Status;
-import org.springframework.extensions.webscripts.WebScriptRequest;
-import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 public class ActionExecutionPut extends ActivitiWebScript {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactActionFormGet.java
Patch:
@@ -12,8 +12,6 @@
 import org.springframework.extensions.webscripts.Cache;
 import org.springframework.extensions.webscripts.Status;
 import org.springframework.extensions.webscripts.WebScriptException;
-import org.springframework.extensions.webscripts.WebScriptRequest;
-import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 public class ArtifactActionFormGet extends ActivitiWebScript {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/TreeGet.java
Patch:
@@ -28,8 +28,6 @@
 import org.activiti.rest.util.ActivitiWebScript;
 import org.springframework.extensions.webscripts.Cache;
 import org.springframework.extensions.webscripts.Status;
-import org.springframework.extensions.webscripts.WebScriptRequest;
-import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 /**
  * @author Nils Preusker

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/dto/ContentView.java
Patch:
@@ -15,6 +15,7 @@
 /**
  * @author Nils Preusker
  */
+@Deprecated
 public class ContentView {
 
   private String key;

File: modules/activiti-rest/src/main/java/org/activiti/rest/util/ActivitiStreamingWebScript.java
Patch:
@@ -71,7 +71,7 @@ public void execute(WebScriptRequest req, WebScriptResponse res) throws IOExcept
    * @param req The activiti request
    * @param res The webscript response
    */
-  protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse res) {
+  protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse res) throws IOException {
     // Override to make something useful
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -61,7 +61,6 @@
 import org.activiti.engine.impl.util.xml.Element;
 import org.activiti.engine.impl.util.xml.Parse;
 import org.activiti.engine.impl.variable.VariableDeclaration;
-import org.activiti.engine.impl.webservice.WSDLImporter;
 import org.activiti.pvm.activity.ActivityBehavior;
 import org.activiti.pvm.impl.process.ActivityImpl;
 import org.activiti.pvm.impl.process.ProcessDefinitionImpl;
@@ -160,7 +159,7 @@ public class BpmnParse extends Parse {
     this.parseListeners = parser.getParseListeners();
     setSchemaResource(BpmnParser.SCHEMA_RESOURCE);
     
-    this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
+   // this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
   }
 
   @Override

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -143,7 +143,7 @@ public void testQueryByInvalidSubProcessInstanceId() {
   }
   
   // Nested subprocess make the query complexer, hence this test
-  @Deployment(resources = {"org/activiti/engine/test/api/runtime/nestedSuperProcess.bpmn20.xml",
+  @Deployment(resources = {"org/activiti/engine/test/api/runtime/superProcessWithNestedSubProcess.bpmn20.xml",
                            "org/activiti/engine/test/api/runtime/nestedSubProcess.bpmn20.xml",
                            "org/activiti/engine/test/api/runtime/subProcess.bpmn20.xml"})
   public void testQueryBySuperProcessInstanceIdNested() {
@@ -157,7 +157,7 @@ public void testQueryBySuperProcessInstanceIdNested() {
   }
   
   //Nested subprocess make the query complexer, hence this test
-  @Deployment(resources = {"org/activiti/engine/test/api/runtime/nestedSuperProcess.bpmn20.xml",
+  @Deployment(resources = {"org/activiti/engine/test/api/runtime/superProcessWithNestedSubProcess.bpmn20.xml",
           "org/activiti/engine/test/api/runtime/nestedSubProcess.bpmn20.xml",
           "org/activiti/engine/test/api/runtime/subProcess.bpmn20.xml"})
   public void testQueryBySubProcessInstanceIdNested() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/task/TaskEntity.java
Patch:
@@ -45,7 +45,7 @@ public class TaskEntity implements Task, Serializable, PersistentObject {
   protected String name;
   protected String description;
   protected String formResourceKey;
-  protected Integer priority;
+  protected int priority = Task.PRIORITY_NORMAL;
   protected Date createTime; // The time when the task has been created
   protected boolean isTaskInvolvementsInitialized = false;
   protected List<TaskInvolvementEntity> taskInvolvementEntities = new ArrayList<TaskInvolvementEntity>(); 
@@ -276,11 +276,11 @@ public void setDescription(String description) {
     this.description = description;
   }
 
-  public Integer getPriority() {
+  public int getPriority() {
     return priority;
   }
 
-  public void setPriority(Integer priority) {
+  public void setPriority(int priority) {
     this.priority = priority;
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -43,7 +43,7 @@ public void testSaveTaskUpdate() {
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
     assertEquals("description", task.getDescription());
     assertEquals("taskname", task.getName());
-    assertEquals(0, task.getPriority().intValue());
+    assertEquals(0, task.getPriority());
 
     task.setDescription("updateddescription");
     task.setName("updatedtaskname");
@@ -53,7 +53,7 @@ public void testSaveTaskUpdate() {
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
     assertEquals("updateddescription", task.getDescription());
     assertEquals("updatedtaskname", task.getName());
-    assertEquals(1, task.getPriority().intValue());
+    assertEquals(1, task.getPriority());
 
     // Finally, delete task
     taskService.deleteTask(task.getId());
@@ -565,7 +565,7 @@ public void testSetPriority() {
     
     // Fetch task again to check if the priority is set
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
-    assertEquals(12345, task.getPriority().intValue());
+    assertEquals(12345, task.getPriority());
     
     taskService.deleteTask(task.getId());
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessEngineBuilder.java
Patch:
@@ -24,7 +24,7 @@
  * To build a ProcessEngine that's using a h2 database over a TCP connection:
  * 
  * <pre>
- * ProcessEngine processEngine = DbProcessEngineBuilder
+ * ProcessEngine processEngine = ProcessEngineBuilder
  *   .setDatabaseName(&quot;h2&quot;)
  *   .setJdbcDriver(&quot;org.h2.Driver&quot;)
  *   .setJdbcUrl(&quot;jdbc:h2:tcp://localhost/activiti&quot;)
@@ -37,7 +37,7 @@
  * To build a ProcessEngine that's using a h2 in memory database:
  * 
  * <pre>
- * ProcessEngine processEngine = DbProcessEngineBuilder
+ * ProcessEngine processEngine = ProcessEngineBuilder
  *   .setDatabaseName(&quot;h2&quot;)
  *   .setJdbcDriver(&quot;org.h2.Driver&quot;)
  *   .setJdbcUrl(&quot;jdbc:h2:mem:activiti&quot;)

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -260,6 +260,9 @@ private ArtifactType getArtifactTypeForSignavioArtifact(JSONObject json) throws
       if (SignavioPluginDefinition.ORYX_TYPE_ATTRIBUTE_FOR_BPMN_20.equals(type)) {
         artifactTypeID = SignavioPluginDefinition.ARTIFACT_TYPE_BPMN_20;
       }
+      else if (SignavioPluginDefinition.SIGNAVIO_NAMESPACE_FOR_BPMN_2_0.equals(type)) {
+        artifactTypeID = SignavioPluginDefinition.ARTIFACT_TYPE_BPMN_20;
+      }
     }
     return getConfiguration().getArtifactType(artifactTypeID);
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/CustomizedViewConnector.java
Patch:
@@ -245,6 +245,7 @@ public void executeParameterizedAction(String artifactId, String actionId, Map<S
           // folder id, I think the best for the moment.
           String targetFolderId = (String) parameter.getValue();
           parameters.put("targetFolderConnector", getConnectorFromUrl(targetFolderId));
+          parameters.put("targetFolder", getRepositoryPartOfUrl(targetFolderId));
           
         } else if (parameter.getValue() instanceof RepositoryFolder) {
           throw new IllegalStateException("TArget Folder shouldn't be resolved by GUI any more");

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/transform/signavio/ExchangeSignavioUuidWithNameTransformation.java
Patch:
@@ -49,8 +49,6 @@ private void adjustShapeNames(List<Shape> shapes, Set<String> existingNames) {
             counter++;
           }
           newName = newName + "_" + counter;
-        } else {
-          System.out.println(shape);
         }
   
         existingNames.add(newName);

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/FileSystemConnector.java
Patch:
@@ -180,6 +180,7 @@ private String getMimeType(File file) {
     String extension = MimeUtil.getExtension(file);
     
     // so we overwrite it with a temporary hack
+    // But this cannot recognize *.bpmn20.xml :-/
     String name = file.getName();
     if (name.indexOf(".") > 0) {
       return name.substring(name.lastIndexOf(".") + 1);

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -58,7 +58,7 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
         if (representation.getMimeType().equals(ContentType.TEXT) || representation.getMimeType().equals(ContentType.XML)
                 || representation.getMimeType().equals(ContentType.HTML)) {
           String content = conn.getContent(artifactId, representation.getId()).asString();
-          contentViews.add(new ContentView(representation.getMimeType(), representation.getMimeType(), content));
+          contentViews.add(new ContentView(representation.getMimeType(), representation.getId(), content));
         } else if (representation.getMimeType().startsWith("image/")) {
           String url = req.getServerPath() + req.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
                   + URLEncoder.encode(representation.getMimeType(), "UTF-8");

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/TreeGet.java
Patch:
@@ -53,6 +53,7 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
 
         model.put("files", children.getArtifactList());
         model.put("folders", children.getFolderList());
+        return;
 
       } catch (RepositoryException e) {
         log.log(Level.SEVERE, "Cannot load children for id '" + id + "'", e);

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -294,7 +294,8 @@ public List<RepositoryNode> getChildNodes(String parentId) {
 
   private ArrayList<RepositoryNode> getModelsFromOryxBackend() throws IOException, JSONException {
     ArrayList<RepositoryNode> nodes = new ArrayList<RepositoryNode>();
-    Response filterResponse = getJsonResponse(getConfiguration().getRepositoryBackendUrl() + "filter?sort=rating");
+    // extracts only BPMN 2.0 models, since everything else is more or less unsupported
+    Response filterResponse = getJsonResponse(getConfiguration().getRepositoryBackendUrl() + "filter?type=http%3A%2F%2Fb3mn.org%2Fstencilset%2Fbpmn2.0%23&sort=rating");
     JsonRepresentation jsonRepresentation = new JsonRepresentation(filterResponse.getEntity());
     JSONArray modelRefs = jsonRepresentation.toJsonArray();
     for (int i = 0; i < modelRefs.length(); i++) {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorConfiguration.java
Patch:
@@ -38,12 +38,12 @@ public class SignavioConnectorConfiguration extends PasswordEnabledRepositoryCon
   private boolean loginRequired = false;
 
   // these values differ between Oryx and Signavio
-  private static String REPOSITORY_BACKEND_URL_SUFFIX = "p/";
+  protected static String REPOSITORY_BACKEND_URL_SUFFIX = "p/";
   protected static String EDITOR_BACKEND_URL_SUFFIX = "editor/";
+  protected static String EDITOR_URL_SUFFIX = "editor?id=";
 
   public static String REGISTRATION_URL_SUFFIX = "register/";
   public static String LOGIN_URL_SUFFIX = "login/";
-  public static String EDITOR_URL_SUFFIX = "editor?id=";
   public static String EXPLORER_URL_SUFFIX = "explorer/";
   public static String MODEL_URL_SUFFIX = "model";
   public static String DIRECTORY_URL_SUFFIX = "directory";

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/OryxConnectorConfiguration.java
Patch:
@@ -22,10 +22,12 @@ public OryxConnectorConfiguration(String name, String signavioBaseUrl) {
     super(name, signavioBaseUrl);
   }
 
-  public static String getRepositoryBackendUrlSuffix() {
+  @Override
+  public String getRepositoryBackendUrlSuffix() {
     return REPOSITORY_BACKEND_URL_SUFFIX;
   }
 
+  @Override
   public String getEditorBackendUrlSuffix() {
     return EDITOR_BACKEND_URL_SUFFIX;
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorConfiguration.java
Patch:
@@ -209,7 +209,7 @@ public String getModelInfoUrl(String modelId) {
     return getModelUrl(modelId) + "/" + MODEL_INFO_URL_SUFFIX;
   }
 
-  public static String getRepositoryBackendUrlSuffix() {
+  public String getRepositoryBackendUrlSuffix() {
     return REPOSITORY_BACKEND_URL_SUFFIX;
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.impl.task.TaskInvolvementType;
 import org.activiti.engine.task.Task;
+import org.activiti.engine.task.TaskInvolvementType;
 import org.activiti.engine.task.TaskQuery;
 
 /** provides access to {@link Task} related operations.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -28,8 +28,8 @@
 import org.activiti.engine.impl.cmd.SetTaskPriorityCmd;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.task.TaskEntity;
-import org.activiti.engine.impl.task.TaskInvolvementType;
 import org.activiti.engine.task.Task;
+import org.activiti.engine.task.TaskInvolvementType;
 import org.activiti.engine.task.TaskQuery;
 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AddTaskInvolvementCmd.java
Patch:
@@ -18,7 +18,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.task.TaskEntity;
 import org.activiti.engine.impl.task.TaskInvolvementEntity;
-import org.activiti.engine.impl.task.TaskInvolvementType;
+import org.activiti.engine.task.TaskInvolvementType;
 
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/scripting/ScriptCondition.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.impl.bpmn.Condition;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.pvm.delegate.DelegateExecution;
-import org.activiti.pvm.impl.runtime.ExecutionImpl;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/task/TaskEntity.java
Patch:
@@ -27,6 +27,7 @@
 import org.activiti.engine.impl.runtime.ExecutionEntity;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.task.Task;
+import org.activiti.engine.task.TaskInvolvementType;
 import org.activiti.pvm.delegate.DelegateExecution;
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/task/TaskInvolvementType.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.impl.task;
+package org.activiti.engine.task;
 
 
 /**

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -33,11 +33,11 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
         model.put("form", processDefinitionForm);
       }
       else {
-        throw new WebScriptException(Status.STATUS_NOT_IMPLEMENTED, "The form for process definitionForm '" + processDefinitionForm + "' cannot be rendered using the rest api.");
+        throw new WebScriptException(Status.STATUS_NOT_IMPLEMENTED, "The form for process definition '" + processDefinitionId + "' cannot be rendered using the rest api.");
       }
     }
     else {
-      throw new WebScriptException(Status.STATUS_NOT_FOUND, "There is no form for process definitionForm '" + processDefinitionForm + "'.");
+      throw new WebScriptException(Status.STATUS_NOT_FOUND, "There is no form for process definition '" + processDefinitionId + "'.");
     }
   }
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -85,7 +85,7 @@ protected String applyJsonTransformations(String sourceJson) {
       JSONObject jsonObject = new JSONObject(sourceJson);
 
       for (JsonTransformation trafo : registeredTransformations) {
-        trafo.transform(jsonObject);
+        jsonObject = trafo.transform(jsonObject);
       }
 
       return jsonObject.toString();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -45,7 +45,7 @@ public class CreateTechnicalBpmnXmlAction extends ParametrizedFreemakerTemplateA
      // TODO: How to register JSON-Transformations
 
     // example with cutting out just the Engine Pool
-    addTransformation(new BpmnPoolExtraction("Engine Pool"));
+    addTransformation(new BpmnPoolExtraction("Process Engine"));
     addTransformation(new ExchangeSignavioUuidWithNameTransformation());
     addTransformation(new AdjustShapeNamesTransformation());
   }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/ActivitiCompliantBpmn20Provider.java
Patch:
@@ -39,7 +39,7 @@ public void addValueToContent(Content content, RepositoryArtifact artifact) {
       Response jsonResponse = getJsonResponse(artifact, "/json");
       JSONObject jsonData = new JSONObject(jsonResponse.getEntity().getText());
 
-      jsonData = new BpmnPoolExtraction("Engine Pool").transform(jsonData);
+      jsonData = new BpmnPoolExtraction("Process Engine").transform(jsonData);
       jsonData = new AdjustShapeNamesTransformation().transform(jsonData);
       jsonData = new ExchangeSignavioUuidWithNameTransformation().transform(jsonData);
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/SortOrder.java
Patch:
@@ -18,6 +18,8 @@
  */
 public enum SortOrder {
 
+  // TODO fix the sort ordering http://jira.codehaus.org/browse/ACT-100
+
   ASC,
   DESC;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TablePageQueryImpl.java
Patch:
@@ -61,8 +61,11 @@ public String getTableName() {
   }
 
   protected void addOrder(String column, String sortOrder) {
+    
+    // TODO fix the sort ordering http://jira.codehaus.org/browse/ACT-100
     this.sortColumn = column;
     this.sortOrder = sortOrder;
+    
     if (orderBy==null) {
       orderBy = "";
     } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/db/DbManagementSession.java
Patch:
@@ -100,6 +100,8 @@ public TablePage getTablePage(TablePageQueryImpl tablePageQuery, int firstResult
     tablePage.setRows(tableData);
     tablePage.setFirstResult(firstResult);
     tablePage.setSort(tablePageQuery.getSortColumn());
+
+    // TODO fix the sort ordering http://jira.codehaus.org/browse/ACT-100
     String sortOrderString = tablePageQuery.getSortOrder();
     if (AbstractQuery.SORTORDER_ASC.equals(sortOrderString)) {
       tablePage.setOrder(SortOrder.ASC);

File: modules/activiti-engine/src/main/java/org/activiti/engine/TablePage.java
Patch:
@@ -30,7 +30,7 @@ public class TablePage {
   /**
    * The total number of rows in the table.
    */
-  protected long total = -1;;
+  protected long total = -1;
   
   /**
    * Identifies the index of the first result stored in this TablePage. 
@@ -40,7 +40,7 @@ public class TablePage {
   protected long firstResult;
   
   /**
-   * Indicates the key or column on which the signalData is sorted.
+   * Indicates the key or column on which the rows are sorted.
    */
   protected String sort;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -28,8 +28,8 @@
  */
 public abstract class AbstractQuery<T> implements Command<Object>{
   
-  protected static final String SORTORDER_ASC = "asc";
-  protected static final String SORTORDER_DESC = "desc";
+  public static final String SORTORDER_ASC = "asc";
+  public static final String SORTORDER_DESC = "desc";
   
   private static enum ResultType {
     LIST, LIST_PAGE, SINGLE_RESULT, COUNT

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -57,7 +57,7 @@ public class ProcessEngineTestCase extends PvmTestCase {
   private static Logger log = Logger.getLogger(ProcessEngineTestCase.class.getName());
 
   private static final List<String> TABLENAMES_EXCLUDED_FROM_DB_CLEAN_CHECK = Arrays.asList(
-    "ACT_PROPERTY"
+    "ACT_GE_PROPERTY"
   );
 
   static final String DEFAULT_CONFIGURATION_RESOURCE = "activiti.properties";

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -70,7 +70,7 @@ public void execute(Map<String, Object> parameters) throws Exception {
     String sourceJson = getBpmn20Json();
     String transformedJson = applyJsonTransformations(sourceJson);
     String bpmnXml = transformToBpmn20(transformedJson);
-    createTargetArtifact(targetFolder, targetName + ".bpmn.xml", bpmnXml, SignavioConnector.BPMN_2_0_XML);
+    createTargetArtifact(targetFolder, targetName + ".bpmn20.xml", bpmnXml, SignavioConnector.BPMN_2_0_XML);
 
     // TODO: Think about that more, does it make sense like this?
     targetFolder.getConnector().commitPendingChanges(comment);

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -77,7 +77,7 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
       try {
         String url = req.getServerPath() + req.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
                 + URLEncoder.encode(action.getDefiniton().getType(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getLabel(), url, action.getDefiniton().getType()));
+        downloads.add(new DownloadActionView(action.getLabel(), url, action.getDefiniton().getType(), action.getDefiniton().getName()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in
         // java on all platforms

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -26,7 +26,7 @@ public class ProcessDefinitionFormGet extends ActivitiWebScript {
   @Override
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
-    String processDefinitionId = getMandatoryPathParameter(req, "processInstanceId");
+    String processDefinitionId = getMandatoryPathParameter(req, "processDefinitionId");
     Object processDefinitionForm = getRepositoryService().getStartFormById(processDefinitionId);
     if (processDefinitionForm != null) {
       if (processDefinitionForm instanceof String) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -40,9 +40,9 @@ public class ProcessInstancePost extends ActivitiWebScript
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
     ActivitiWebScriptBody body = getBody(req);
-    String processDefinitionId = getMandatoryString(body, "processInstanceId");
+    String processDefinitionId = getMandatoryString(body, "processDefinitionId");
     Map<String, Object> variables = getFormVariables(body);
-    variables.remove("processInstanceId");
+    variables.remove("processDefinitionId");
     model.put("instance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ManagementServiceImpl.java
Patch:
@@ -14,15 +14,13 @@
 
 import java.util.Map;
 
-import org.activiti.engine.Job;
 import org.activiti.engine.JobQuery;
 import org.activiti.engine.ManagementService;
 import org.activiti.engine.TableMetaData;
 import org.activiti.engine.TablePageQuery;
 import org.activiti.engine.impl.cmd.ExecuteJobCmd;
 import org.activiti.engine.impl.cmd.GetTableCountCmd;
 import org.activiti.engine.impl.cmd.GetTableMetaDataCmd;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -26,7 +26,6 @@
 import org.activiti.engine.impl.cmd.FindDeploymentResourceNamesCmd;
 import org.activiti.engine.impl.cmd.FindDeploymentsCmd;
 import org.activiti.engine.impl.cmd.FindProcessDefinitionCmd;
-import org.activiti.engine.impl.cmd.FindProcessDefinitionsCmd;
 import org.activiti.engine.impl.cmd.GetDeploymentResourceCmd;
 import org.activiti.engine.impl.cmd.GetFormCmd;
 import org.activiti.engine.impl.persistence.repository.DeploymentBuilderImpl;

File: modules/activiti-pvm/src/test/java/org/activiti/test/pvm/activities/EmbeddedSubProcess.java
Patch:
@@ -41,9 +41,10 @@ public void execute(ActivityExecution execution) throws Exception {
     }
   }
 
+  @SuppressWarnings("unchecked")
   public void lastExecutionEnded(ActivityExecution execution) {
     List<PvmTransition> outgoingTransitions = execution.getActivity().getOutgoingTransitions();
-    execution.takeAll(outgoingTransitions, new ArrayList<ActivityExecution>());
+    execution.takeAll(outgoingTransitions, Collections.EMPTY_LIST);
   }
 
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/ManagementService.java
Patch:
@@ -50,4 +50,7 @@ public interface ManagementService {
    */
   JobQuery createJobQuery();
   
+  /** forced synchronous execution of a job for testing purposes. */
+  void executeJob(String jobId);
+  
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/BoundaryTimerEventActivity.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.activiti.pvm.activity.ActivityExecution;
@@ -39,7 +40,7 @@ public void execute(ActivityExecution execution) throws Exception {
         executionImpl.getSubProcessInstance().deleteCascade(executionImpl.getDeleteReason());
       }
       
-      interruptedExecutions = executionImpl.getExecutions();
+      interruptedExecutions = new ArrayList<ExecutionImpl>(executionImpl.getExecutions());
       for (ExecutionImpl interruptedExecution: interruptedExecutions) {
         interruptedExecution.deleteCascade("interrupting timer event '"+execution.getActivity().getId()+"' fired");
       }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/JobExecutor.java
Patch:
@@ -39,7 +39,6 @@ public class JobExecutor implements ProcessEngineConfigurationAware {
   private static Logger log = Logger.getLogger(JobExecutor.class.getName());
 
   protected CommandExecutor commandExecutor;
-  protected JobHandlers jobHandlers;
   protected boolean isAutoActivate = false;
 
   protected int maxJobsPerAcquisition = 3;
@@ -57,7 +56,6 @@ public class JobExecutor implements ProcessEngineConfigurationAware {
 
   public void configurationCompleted(ProcessEngineConfiguration processEngineConfiguration) {
     this.commandExecutor = processEngineConfiguration.getCommandExecutor();
-    this.jobHandlers = processEngineConfiguration.getJobHandlers();
     this.isAutoActivate = processEngineConfiguration.isJobExecutorAutoActivate();
   }
 
@@ -132,7 +130,7 @@ public void jobWasAdded() {
   
   public void executeJobs(List<String> jobIds) {
     // TODO: RejectedExecutionException handling!
-    threadPoolExecutor.execute(new ExecuteJobsRunnable(commandExecutor, jobIds, jobHandlers, this));
+    threadPoolExecutor.execute(new ExecuteJobsRunnable(commandExecutor, jobIds, this));
   }
 
   // getters and setters ////////////////////////////////////////////////////// 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/runtime/MessageEntity.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Map;
 
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.jobexecutor.JobHandler;
 
 
 /**
@@ -28,8 +27,8 @@ public class MessageEntity extends JobEntity {
   private String repeat = null;
   
   @Override
-  public void execute(JobHandler jobHandler, CommandContext commandContext) {
-    super.execute(jobHandler, commandContext);
+  public void execute(CommandContext commandContext) {
+    super.execute(commandContext);
     commandContext
       .getDbSqlSession()
       .delete(JobEntity.class, id);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/runtime/TimerEntity.java
Patch:
@@ -43,9 +43,9 @@ public TimerEntity(TimerDeclarationImpl timerDeclaration) {
   }
 
   @Override
-  public void execute(JobHandler jobHandler, CommandContext commandContext) {
+  public void execute(CommandContext commandContext) {
 
-    super.execute(jobHandler, commandContext);
+    super.execute(commandContext);
 
     if (repeat==null){
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -777,6 +777,7 @@ protected void addVariableDeclaration(ScopeImpl scope, VariableDeclaration varia
    */
   public void parseSubProcess(Element subProcessElement, ScopeImpl scopeElement) {
     ActivityImpl activity = parseAndCreateActivityOnScopeElement(subProcessElement, scopeElement);
+    activity.setScope(true);
     activity.setActivityBehavior(new SubProcessActivity());
     parseScope(subProcessElement, activity);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -162,7 +162,7 @@ private void initializeProcessEngine() {
    * After a test method executed, this method scans all tables to see if the DB is completely clean. 
    * It throws AssertionFailed in case the DB is not clean.
    * If the DB is not clean, it is cleaned by performing a create a drop. */
-  private void assertAndEnsureCleanDb() throws Throwable {
+  protected void assertAndEnsureCleanDb() throws Throwable {
     log.fine("verifying that db is clean after test");
     Map<String, Long> tableCounts = processEngine.getManagementService().getTableCount();
     StringBuilder outputMessage = new StringBuilder();

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/compatibility/BpmnBetaCompatibilityTest.java
Patch:
@@ -48,7 +48,7 @@ public void testScriptTask() {
       .startProcessInstanceByKey("scriptTask", CollectionUtil.singletonMap("numbers", Arrays.asList(1,2,3)));
 
     Task task = taskService.createTaskQuery()
-      .processInstance(processInstance.getId())
+      .processInstanceId(processInstance.getId())
       .singleResult();
     assertEquals("Human task", task.getName());
     

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -32,7 +32,7 @@ public void testDivergingExclusiveGateway() {
     for (int i = 1; i <= 3; i++) {
       ProcessInstance pi = runtimeService.startProcessInstanceByKey("exclusiveGwDiverging", CollectionUtil.singletonMap("input", i));
       assertEquals("Task " + i, taskService.createTaskQuery().singleResult().getName());
-      runtimeService.deleteProcessInstance(pi.getId());
+      runtimeService.deleteProcessInstance(pi.getId(), "testing deletion");
     }
   }
 
@@ -102,7 +102,7 @@ public void testDecideBasedOnListOrArrayOfBeans() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey(
             "decisionBasedOnListOrArrayOfBeans", CollectionUtil.singletonMap("orders", orders));
     
-    Task task = taskService.createTaskQuery().processInstance(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertNotNull(task);
     assertEquals("Gold Member service", task.getName());
     
@@ -113,7 +113,7 @@ public void testDecideBasedOnListOrArrayOfBeans() {
     pi = runtimeService.startProcessInstanceByKey(
             "decisionBasedOnListOrArrayOfBeans", CollectionUtil.singletonMap("orders", orderArray));
     
-    task = taskService.createTaskQuery().processInstance(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertNotNull(task);
     assertEquals("Basic service", task.getName());
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/parse/InvalidProcessTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.test.ProcessEngineTestCase;
-import org.activiti.test.ProcessDeployer;
 
 /**
  * Test case for verifying if the parser throws validation exceptions when a
@@ -26,7 +25,7 @@ public class InvalidProcessTest extends ProcessEngineTestCase {
 
   public void testInvalidProcessDefinition() {
     try {
-      String resource = ProcessDeployer.getBpmnProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
+      String resource = getBpmnProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
       fail();
     } catch (ActivitiException e) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/sequenceflow/ConditionalSequenceFlowTest.java
Patch:
@@ -29,7 +29,7 @@ public class ConditionalSequenceFlowTest extends ProcessEngineTestCase {
   public void testUelValueExpression() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey(
             "condSeqFlowUelValueExpr", CollectionUtil.singletonMap("input", "right"));
-    Task task = taskService.createTaskQuery().processInstance(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("task right", task.getName());
   }
   

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/TaskAssignmentExtensionsTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.TaskQuery;
 import org.activiti.engine.test.Deployment;
 import org.activiti.engine.test.ProcessEngineTestCase;
-import org.activiti.test.ProcessDeployer;
 
 /**
  * Testcase for the non-spec extensions to the task candidate use case.
@@ -59,7 +58,7 @@ public void testAssigneeExtension() {
 
   public void testDuplicateAssigneeDeclaration() {
     try {
-      String resource = ProcessDeployer.getBpmnProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
+      String resource = getBpmnProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
       repositoryService.createDeployment().addClasspathResource(resource).deploy();
       fail("Invalid BPMN 2.0 process should not parse, but it gets parsed sucessfully");
     } catch (ActivitiException e) {

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -8,13 +8,12 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.persistence.runtime.MessageEntity;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
-import org.junit.Test;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Tom Baeyens
  */
-public class JobExecutorCmdExceptionTest extends ProcessEngineImplTestCase {
+public class JobExecutorCmdExceptionTest extends ProcessEngineTestCase {
 
   protected TweetExceptionHandler tweetExceptionHandler = new TweetExceptionHandler();
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorTestCase.java
Patch:
@@ -16,12 +16,12 @@
 
 import org.activiti.engine.impl.persistence.runtime.MessageEntity;
 import org.activiti.engine.impl.persistence.runtime.TimerEntity;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Tom Baeyens
  */
-public class JobExecutorTestCase extends ProcessEngineImplTestCase {
+public class JobExecutorTestCase extends ProcessEngineTestCase {
 
   protected TweetHandler tweetHandler = new TweetHandler();
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/TweetExceptionHandler.java
Patch:
@@ -16,8 +16,7 @@
 
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
-import org.activiti.engine.impl.persistence.runtime.ActivityInstanceEntity;
-import org.activiti.engine.impl.persistence.runtime.ProcessInstanceEntity;
+import org.activiti.engine.impl.persistence.runtime.ExecutionEntity;
 
 
 /**
@@ -33,7 +32,7 @@ public String getType() {
     return "tweet-exception";
   }
 
-  public void execute(String configuration, ProcessInstanceEntity processInstance, ActivityInstanceEntity activityInstance, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
     if (exceptionsRemaining>0) {
       exceptionsRemaining--;
       throw new RuntimeException("exception remaining: "+exceptionsRemaining);

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/TweetHandler.java
Patch:
@@ -17,8 +17,7 @@
 
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
-import org.activiti.engine.impl.persistence.runtime.ActivityInstanceEntity;
-import org.activiti.engine.impl.persistence.runtime.ProcessInstanceEntity;
+import org.activiti.engine.impl.persistence.runtime.ExecutionEntity;
 import org.junit.Assert;
 
 public class TweetHandler implements JobHandler {
@@ -29,7 +28,7 @@ public String getType() {
     return "tweet";
   }
 
-  public void execute(String configuration, ProcessInstanceEntity processInstance, ActivityInstanceEntity activityInstance, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
     messages.add(configuration);
     Assert.assertNotNull(commandContext);
   }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/service/HistoricDataServiceTest.java
Patch:
@@ -22,12 +22,12 @@
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.test.Deployment;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Christian Stettler
  */
-public class HistoricDataServiceTest extends ProcessEngineImplTestCase {
+public class HistoricDataServiceTest extends ProcessEngineTestCase {
 
   @Deployment(resources = {"oneTaskProcess.bpmn20.xml"})
   public void testHistoricDataCreatedForProcessExecution() {
@@ -45,7 +45,7 @@ public void testHistoricDataCreatedForProcessExecution() {
 
       // TODO: check for HistoricActivityInstance created once events get fired
 
-      List<Task> tasks = taskService.createTaskQuery().processInstance(processInstance.getId()).list();
+      List<Task> tasks = taskService.createTaskQuery().processInstanceId(processInstance.getId()).list();
 
       assertEquals(1, tasks.size());
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/service/ProcessServiceTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.ProcessInstance;
 import org.activiti.engine.test.Deployment;
 import org.activiti.engine.test.ProcessEngineTestCase;
-import org.junit.Test;
 
 /**
  * @author Joram Barrez
@@ -28,7 +27,7 @@ public class ProcessServiceTest extends ProcessEngineTestCase {
 
   @Deployment(resources = {"oneTaskProcess.bpmn20.xml"})
   public void testStartProcessInstanceById() {
-    List<ProcessDefinition> processDefinitions = repositoryService.findProcessDefinitions();
+    List<ProcessDefinition> processDefinitions = repositoryService.createProcessDefinitionQuery().list();
     assertEquals(1, processDefinitions.size());
 
     ProcessDefinition processDefinition = processDefinitions.get(0);
@@ -42,7 +41,7 @@ public void testStartProcessInstanceById() {
 
   @Deployment(resources={"oneTaskProcess.bpmn20.xml"})
   public void testFindProcessDefinitionById() {
-    List<ProcessDefinition> definitions = repositoryService.findProcessDefinitions();
+    List<ProcessDefinition> definitions = repositoryService.createProcessDefinitionQuery().list();
     assertEquals(1, definitions.size());
 
     ProcessDefinition processDefinition = repositoryService.findProcessDefinitionById(definitions.get(0).getId());

File: modules/activiti-engine-test-cfg/src/test/java/org/activiti/test/db/ProcessEngineInitializationTest.java
Patch:
@@ -86,7 +86,7 @@ public void testVersionMismatch() {
       fail("expected exception");
     } catch (ActivitiWrongDbException e) {
       assertTextPresent("version mismatch", e.getMessage());
-      assertEquals(25.7, e.getDbVersion());
+      assertEquals("25.7", e.getDbVersion());
       assertEquals(ProcessEngine.VERSION, e.getLibraryVersion());
     }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/UserTaskActivity.java
Patch:
@@ -72,7 +72,7 @@ protected void handleAssignments(TaskEntity task, ActivityExecution execution) {
   }
 
   protected String evaluateExpression(String expr, ActivityExecution execution) {
-    // TODO move parsing of value expression to bpmn parser and only keep evaluation here
+    // TODO http://jira.codehaus.org/browse/ACT-84 move parsing of value expression to bpmn parser and only keep evaluation here
     return (String) expressionManager.createValueExpression(expr).getValue(execution);
   }
 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -21,12 +21,12 @@
 import org.activiti.engine.TaskQuery;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.test.Deployment;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Joram Barrez
  */
-public class CallActivityAdvancedTest extends ProcessEngineImplTestCase {
+public class CallActivityAdvancedTest extends ProcessEngineTestCase {
 
   @Deployment(resources = {
     "org/activiti/engine/test/bpmn/callactivity/CallActivity.testCallSimpleSubProcess.bpmn20.xml", 

File: modules/activiti-engine/src/test/java/org/activiti/impl/interceptor/CommandContextTest.java
Patch:
@@ -15,13 +15,13 @@
 
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 
 /**
  * @author Tom Baeyens
  */
-public class CommandContextTest extends ProcessEngineImplTestCase {
+public class CommandContextTest extends ProcessEngineTestCase {
 
   public void testCommandContextGetCurrentAfterException() {
     try {

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/FinancialReportProcessTest.java
Patch:
@@ -28,7 +28,8 @@ public void tearDown() throws Exception {
     identityService.deleteGroup("management");
   }
   
-  @Deployment(resources={"FinancialReportProcess.bpmn20.xml"})
+  @Deployment(resources={
+    "org/activiti/examples/bpmn/usertask/FinancialReportProcess.bpmn20.xml"})
   public void testProcess() {
     
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("financialReport");

File: modules/activiti-engine/src/main/java/org/activiti/engine/ExecutionQuery.java
Patch:
@@ -22,10 +22,11 @@
  */
 public interface ExecutionQuery {
   
-  ExecutionQuery processInstanceId(String processInstanceId);
-  ExecutionQuery activityId(String activityId);
   ExecutionQuery processDefinitionKey(String processDefinitionKey);
   ExecutionQuery processDefinitionId(String processDefinitionId);
+  ExecutionQuery processInstanceId(String processInstanceId);
+  ExecutionQuery executionId(String executionId);
+  ExecutionQuery activityId(String activityId);
   
   List<Execution> list();
   List<Execution> listPage(int start, int maxResults);

File: modules/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
Patch:
@@ -41,6 +41,8 @@ public interface RuntimeService {
   /** creates a new {@link ExecutionQuery} instance, 
    * that can be used to query the executions and process instances. */
   ExecutionQuery createExecutionQuery();
+  
+  Execution findExecutionById(String executionId);
 
   ProcessInstanceQuery createProcessInstanceQuery();
 

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/delegate/DelegateExecution.java
Patch:
@@ -21,6 +21,8 @@
  */
 public interface DelegateExecution {
 
+  String getId();
+  
   boolean hasVariable(String variableName);
   void setVariable(String variableName, Object value);
   Object getVariable(String variableName);

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/callactivity/CallActivityTest.java
Patch:
@@ -32,12 +32,12 @@ public void testOrderProcessWithCallActivity() {
     // After the process has started, the 'verify credit history' task should be active
     runtimeService.startProcessInstanceByKey("orderProcess");
     TaskQuery taskQuery = taskService.createTaskQuery();
-    Task verifyCreditTask = taskQuery.listPage();
+    Task verifyCreditTask = taskQuery.singleResult();
     assertEquals("Verify credit history", verifyCreditTask.getName());
     
     // Completing the task with approval, will end the subprocess and continue the original process
     taskService.complete(verifyCreditTask.getId(), CollectionUtil.singletonMap("creditApproved", true));
-    Task prepareAndShipTask = taskQuery.listPage();
+    Task prepareAndShipTask = taskQuery.singleResult();
     assertEquals("Prepare and Ship", prepareAndShipTask.getName());
   }
 }

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -34,15 +34,15 @@ public void testInterruptingTimerDuration() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("interruptingBoundaryTimer");
 
     // There should be one task, with a timer : first line support
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("First line support", task.getName());
 
     // Set clock to the future such that the timer can fire
     ClockUtil.setCurrentTime(new Date(startTime.getTime() + (5 * 60 * 60 * 1000)));
     waitForJobExecutorToProcessAllJobs(10000L, 250L);
 
     // The timer has fired, and the second task (secondlinesupport) now exists
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Second line support", task.getName());
   }
 

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/expression/UelExpressionTest.java
Patch:
@@ -31,14 +31,14 @@ public void testValueAndMethodExpression() {
     UelExpressionTestOrder order = new UelExpressionTestOrder(150);
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("uelExpressions", 
             CollectionUtil.singletonMap("order",  order));
-    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     assertEquals("Standard service", task.getName());
     
     // While an order of 300, gives us a premium service (goes through an UEL method expression)
     order = new UelExpressionTestOrder(300);
     processInstance = runtimeService.startProcessInstanceByKey("uelExpressions",
             CollectionUtil.singletonMap("order",  order));
-    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     assertEquals("Premium service", task.getName());
     
   }

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -41,19 +41,19 @@ public void testDecisionFunctionality() {
     // Test with input == 1
     variables.put("input", 1);
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Send e-mail for more information", task.getName());
 
     // Test with input == 2
     variables.put("input", 2);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Check account balance", task.getName());
 
     // Test with input == 3
     variables.put("input", 3);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Call customer", task.getName());
 
     // Test with input == 4

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/receivetask/ReceiveTaskTest.java
Patch:
@@ -30,7 +30,7 @@ public void testWaitStateBehavior() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .listPage();
+      .singleResult();
     assertNotNull(execution);
     
     runtimeService.signal(execution.getId());

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public void testJavaServiceDelegation() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .listPage();
+      .singleResult();
     assertEquals("ACTIVITI BPM ENGINE", runtimeService.getVariable(execution.getId(), "input"));
   }
 

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/taskforms/TaskFormsTest.java
Patch:
@@ -51,7 +51,7 @@ public void testTaskFormsWithVacationRequestProcess() {
     runtimeService.startProcessInstanceByKey("vacationRequest", parameters);
 
     // Management should now have a task assigned to them
-    Task task = taskService.createTaskQuery().candidateGroup("management").listPage();
+    Task task = taskService.createTaskQuery().candidateGroup("management").singleResult();
     assertEquals("Vacation request by kermit", task.getDescription());
     Object taskForm = taskService.getTaskForm(task.getId());
     assertNotNull(taskForm);
@@ -63,7 +63,7 @@ public void testTaskFormUnavailable() {
     assertNull(repositoryService.getStartFormByKey("noStartOrTaskForm"));
 
     runtimeService.startProcessInstanceByKey("noStartOrTaskForm");
-    Task task = taskService.createTaskQuery().listPage();
+    Task task = taskService.createTaskQuery().singleResult();
     assertNull(taskService.getTaskForm(task.getId()));
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/ExecutionQuery.java
Patch:
@@ -29,6 +29,6 @@ public interface ExecutionQuery {
   
   List<Execution> list();
   List<Execution> listPage(int start, int maxResults);
-  Execution listPage();
+  Execution singleResult();
   long count();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/JobQuery.java
Patch:
@@ -31,7 +31,7 @@ public interface JobQuery {
   
   long count();
   
-  Job listPage();
+  Job singleResult();
   
   List<Job> list();
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessDefinitionQuery.java
Patch:
@@ -33,7 +33,7 @@ public interface ProcessDefinitionQuery {
 
   long count();
   
-  ProcessDefinition listPage();
+  ProcessDefinition singleResult();
   
   List<ProcessDefinition> list();
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessInstanceQuery.java
Patch:
@@ -27,6 +27,6 @@ public interface ProcessInstanceQuery {
   
   List<ProcessInstance> list();
   List<ProcessInstance> listPage(int start, int maxResults);
-  ProcessInstance listPage();
+  ProcessInstance singleResult();
   long count();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskQuery.java
Patch:
@@ -42,7 +42,7 @@ public interface TaskQuery {
   
   long count();
   
-  Task listPage();
+  Task singleResult();
   
   List<Task> list();
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -50,7 +50,7 @@ protected AbstractQuery(CommandExecutor commandExecutor) {
   }
 
   @SuppressWarnings("unchecked")
-  public T listPage() {
+  public T singleResult() {
     this.resultType = ResultType.SINGLE_RESULT;
     return (T) commandExecutor.execute(this);
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -98,7 +98,7 @@ public void assertProcessEnded(final String processInstanceId) {
       .getRuntimeService()
       .createProcessInstanceQuery()
       .processInstanceId(processInstanceId)
-      .listPage();
+      .singleResult();
     
     if (processInstance!=null) {
       throw new AssertionFailedError("expected finished process instance '"+processInstanceId+"' but it was still in the db"); 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/EngineRebootProcessDefinitionCacheTest.java
Patch:
@@ -93,7 +93,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .listPage();
+       .singleResult();
      
      assertNotNull(processInstance);
      
@@ -111,7 +111,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .listPage();
+       .singleResult();
 
      assertNull(processInstance);
      

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/callactivity/CallActivityTest.java
Patch:
@@ -32,12 +32,12 @@ public void testOrderProcessWithCallActivity() {
     // After the process has started, the 'verify credit history' task should be active
     runtimeService.startProcessInstanceByKey("orderProcess");
     TaskQuery taskQuery = taskService.createTaskQuery();
-    Task verifyCreditTask = taskQuery.singleResult();
+    Task verifyCreditTask = taskQuery.listPage();
     assertEquals("Verify credit history", verifyCreditTask.getName());
     
     // Completing the task with approval, will end the subprocess and continue the original process
     taskService.complete(verifyCreditTask.getId(), CollectionUtil.singletonMap("creditApproved", true));
-    Task prepareAndShipTask = taskQuery.singleResult();
+    Task prepareAndShipTask = taskQuery.listPage();
     assertEquals("Prepare and Ship", prepareAndShipTask.getName());
   }
 }

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -34,15 +34,15 @@ public void testInterruptingTimerDuration() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("interruptingBoundaryTimer");
 
     // There should be one task, with a timer : first line support
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("First line support", task.getName());
 
     // Set clock to the future such that the timer can fire
     ClockUtil.setCurrentTime(new Date(startTime.getTime() + (5 * 60 * 60 * 1000)));
     waitForJobExecutorToProcessAllJobs(10000L, 250L);
 
     // The timer has fired, and the second task (secondlinesupport) now exists
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Second line support", task.getName());
   }
 

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/expression/UelExpressionTest.java
Patch:
@@ -31,14 +31,14 @@ public void testValueAndMethodExpression() {
     UelExpressionTestOrder order = new UelExpressionTestOrder(150);
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("uelExpressions", 
             CollectionUtil.singletonMap("order",  order));
-    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
     assertEquals("Standard service", task.getName());
     
     // While an order of 300, gives us a premium service (goes through an UEL method expression)
     order = new UelExpressionTestOrder(300);
     processInstance = runtimeService.startProcessInstanceByKey("uelExpressions",
             CollectionUtil.singletonMap("order",  order));
-    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
     assertEquals("Premium service", task.getName());
     
   }

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -41,19 +41,19 @@ public void testDecisionFunctionality() {
     // Test with input == 1
     variables.put("input", 1);
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Send e-mail for more information", task.getName());
 
     // Test with input == 2
     variables.put("input", 2);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Check account balance", task.getName());
 
     // Test with input == 3
     variables.put("input", 3);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Call customer", task.getName());
 
     // Test with input == 4

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/receivetask/ReceiveTaskTest.java
Patch:
@@ -30,7 +30,7 @@ public void testWaitStateBehavior() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .singleResult();
+      .listPage();
     assertNotNull(execution);
     
     runtimeService.signal(execution.getId());

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public void testJavaServiceDelegation() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .singleResult();
+      .listPage();
     assertEquals("ACTIVITI BPM ENGINE", runtimeService.getVariable(execution.getId(), "input"));
   }
 

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -50,7 +50,7 @@ public void testSimpleSubProcess() {
     // Completing boith the tasks finishes the subprocess and enables the task after the subprocess
     taskService.complete(investigateHardwareTask.getId());
     taskService.complete(investigateSoftwareTask.getId());
-    Task writeReportTask = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    Task writeReportTask = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Write report", writeReportTask.getName());
     
     // Clean up

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/taskforms/TaskFormsTest.java
Patch:
@@ -51,7 +51,7 @@ public void testTaskFormsWithVacationRequestProcess() {
     runtimeService.startProcessInstanceByKey("vacationRequest", parameters);
 
     // Management should now have a task assigned to them
-    Task task = taskService.createTaskQuery().candidateGroup("management").singleResult();
+    Task task = taskService.createTaskQuery().candidateGroup("management").listPage();
     assertEquals("Vacation request by kermit", task.getDescription());
     Object taskForm = taskService.getTaskForm(task.getId());
     assertNotNull(taskForm);
@@ -63,7 +63,7 @@ public void testTaskFormUnavailable() {
     assertNull(repositoryService.getStartFormByKey("noStartOrTaskForm"));
 
     runtimeService.startProcessInstanceByKey("noStartOrTaskForm");
-    Task task = taskService.createTaskQuery().singleResult();
+    Task task = taskService.createTaskQuery().listPage();
     assertNull(taskService.getTaskForm(task.getId()));
   }
 

File: modules/activiti-engine-test-cfg/src/test/java/org/activiti/test/processengines/ProcessEnginesTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.mgmt;
+package org.activiti.test.processengines;
 
 import java.util.List;
 
@@ -19,6 +19,7 @@
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.ProcessEngineInfo;
 import org.activiti.engine.ProcessEngines;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Tom Baeyens
@@ -28,6 +29,7 @@ public class ProcessEnginesTest extends TestCase {
   @Override
   protected void setUp() throws Exception {
     super.setUp();
+    ProcessEngineTestCase.closeProcessEngines();
     ProcessEngines.init();
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/ExecutionQuery.java
Patch:
@@ -28,7 +28,7 @@ public interface ExecutionQuery {
   ExecutionQuery processDefinitionId(String processDefinitionId);
   
   List<Execution> list();
-  List<Execution> paginatedList(int start, int maxResults);
-  Execution singleResult();
+  List<Execution> listPage(int start, int maxResults);
+  Execution listPage();
   long count();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/JobQuery.java
Patch:
@@ -31,10 +31,10 @@ public interface JobQuery {
   
   long count();
   
-  Job singleResult();
+  Job listPage();
   
   List<Job> list();
   
-  List<Job> paginatedList(int start, int size);
+  List<Job> listPage(int start, int size);
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessDefinitionQuery.java
Patch:
@@ -33,9 +33,9 @@ public interface ProcessDefinitionQuery {
 
   long count();
   
-  ProcessDefinition singleResult();
+  ProcessDefinition listPage();
   
   List<ProcessDefinition> list();
   
-  List<ProcessDefinition> paginatedList(int start, int size);
+  List<ProcessDefinition> listPage(int start, int size);
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessInstanceQuery.java
Patch:
@@ -26,7 +26,7 @@ public interface ProcessInstanceQuery {
   ProcessInstanceQuery processDefinitionKey(String processDefinitionKey);
   
   List<ProcessInstance> list();
-  List<ProcessInstance> paginatedList(int start, int maxResults);
-  ProcessInstance singleResult();
+  List<ProcessInstance> listPage(int start, int maxResults);
+  ProcessInstance listPage();
   long count();
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskQuery.java
Patch:
@@ -42,10 +42,10 @@ public interface TaskQuery {
   
   long count();
   
-  Task singleResult();
+  Task listPage();
   
   List<Task> list();
   
-  List<Task> paginatedList(int start, int size);
+  List<Task> listPage(int start, int size);
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -84,7 +84,7 @@ public long executeCount(CommandContext commandContext) {
   public List<Execution> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByQueryCriteria(this);
+      .findExecutionsByQueryCriteria(this, page);
   }
   
   public String getProcessDefinitionKey() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -85,7 +85,7 @@ public long executeCount(CommandContext commandContext) {
   public List<ProcessInstance> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByQueryCriteria(this);
+      .findExecutionsByQueryCriteria(this, page);
   }
   
   public String getProcessDefinitionKey() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -70,7 +70,7 @@ public List<Task> findAssignedTasks(String assignee) {
   public List<Task> findAssignedTasks(String assignee, Page page) {
     TaskQuery query = createTaskQuery().assignee(assignee);
     if (page != null) {
-      return query.paginatedList(page.getOffset(), page.getMaxResults());
+      return query.listPage(page.getFirstResult(), page.getMaxResults());
     } else {
       return query.list();
     }
@@ -83,7 +83,7 @@ public List<Task> findUnassignedTasks(String userId) {
   public List<Task> findUnassignedTasks(String userId, Page page) {
     TaskQuery query = createTaskQuery().candidateUser(userId);
     if (page != null) {
-      return query.paginatedList(page.getOffset(), page.getMaxResults());
+      return query.listPage(page.getFirstResult(), page.getMaxResults());
     } else {
       return query.list();
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -38,9 +38,11 @@ public class BpmnDeployer implements Deployer, ProcessEngineConfigurationAware {
   public static final String BPMN_RESOURCE_SUFFIX = "bpmn20.xml";
 
   protected ExpressionManager expressionManager;
+  protected BpmnParser bpmnParser;
 
   public void configurationCompleted(ProcessEngineConfiguration processEngineConfiguration) {
     this.expressionManager = processEngineConfiguration.getExpressionManager();
+    this.bpmnParser = new BpmnParser(expressionManager);
   }
 
   public List<ProcessDefinitionEntity> deploy(DeploymentEntity deployment) {
@@ -54,7 +56,7 @@ public List<ProcessDefinitionEntity> deploy(DeploymentEntity deployment) {
         ResourceEntity resource = resources.get(resourceName);
         byte[] bytes = resource.getBytes();
         ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
-        BpmnParse bpmnParse = new BpmnParser(expressionManager)
+        BpmnParse bpmnParse = bpmnParser
           .createParse()
           .sourceInputStream(inputStream)
           .name(resourceName)

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ManagementSession.java
Patch:
@@ -15,9 +15,9 @@
 
 import java.util.Map;
 
-import org.activiti.engine.SortOrder;
 import org.activiti.engine.TableMetaData;
 import org.activiti.engine.TablePage;
+import org.activiti.engine.impl.TablePageQueryImpl;
 import org.activiti.engine.impl.persistence.db.IdBlock;
 
 
@@ -28,7 +28,7 @@ public interface ManagementSession {
 
   /* Management */
   Map<String, Long> getTableCount();
-  TablePage getTablePage(String tableName, int offset, int maxResults, String sortColumn, SortOrder sortOrder);
+  TablePage getTablePage(TablePageQueryImpl tablePageQuery, int firstResult, int maxResults);
   TableMetaData getTableMetaData(String tableName);
 
   IdBlock getNextIdBlock();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -34,7 +34,7 @@ public interface RuntimeSession {
   void deleteProcessInstance(String processInstanceId, String deleteReason);
   ExecutionEntity findSubProcessInstanceBySuperExecutionId(String superExecutionId);
   long findExecutionCountByQueryCriteria(Object executionQuery);
-  List<ExecutionEntity> findExecutionsByQueryCriteria(Object executionQuery);
+  List<ExecutionEntity> findExecutionsByQueryCriteria(Object executionQuery, Page page);
   List<ExecutionEntity> findChildExecutionsByParentExecutionId(String executionId);
   ExecutionEntity findExecutionById(String activityInstanceId);
   
@@ -46,9 +46,9 @@ public interface RuntimeSession {
 
   JobEntity findJobById(String jobId);
   List<JobEntity> findJobs();
-  List<JobEntity> findNextJobsToExecute(int maxNrOfJobs);
+  List<JobEntity> findNextJobsToExecute(Page page);
   List<JobEntity> findLockedJobs();
-  List<TimerEntity> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
+  List<TimerEntity> findUnlockedTimersByDuedate(Date duedate, Page page);
   List<TimerEntity> findTimersByExecutionId(String executionId);
   List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page);
   long findJobCountByQueryCriteria(JobQueryImpl jobQuery);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AcquireJobsCmd.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 
+import org.activiti.engine.Page;
 import org.activiti.engine.impl.cfg.RuntimeSession;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -44,7 +45,7 @@ public AcquiredJobs execute(CommandContext commandContext) {
     
     
     AcquiredJobs acquiredJobs = new AcquiredJobs();
-    List<JobEntity> jobs = runtimeSession.findNextJobsToExecute(maxJobsPerAcquisition);
+    List<JobEntity> jobs = runtimeSession.findNextJobsToExecute(new Page(0, maxJobsPerAcquisition));
     for (JobEntity job: jobs) {
       List<String> jobIds = new ArrayList<String>();
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/JobAcquisitionThread.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import org.activiti.engine.Page;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.persistence.runtime.TimerEntity;
 import org.activiti.engine.impl.util.ClockUtil;
@@ -73,7 +74,7 @@ public void run() {
           
           // check if the next timer should fire before the normal sleep time is over
           Date duedate = new Date(ClockUtil.getCurrentTime().getTime() + millisToWait);
-          List<TimerEntity> nextTimers = commandExecutor.execute(new GetUnlockedTimersByDuedateCmd(duedate, 1));
+          List<TimerEntity> nextTimers = commandExecutor.execute(new GetUnlockedTimersByDuedateCmd(duedate, new Page(0, 1)));
           
           if (!nextTimers.isEmpty()) {
         	long millisTillNextTimer = nextTimers.get(0).getDuedate().getTime() - ClockUtil.getCurrentTime().getTime();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -43,6 +43,8 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
     }
 
     try {
+      execution.setActivity(borderEventActivity);
+      
       borderEventActivity
         .getActivityBehavior()
         .execute(execution);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/scripting/ActivityContextBindings.java
Patch:
@@ -93,6 +93,9 @@ public void putAll(Map< ? extends String, ? extends Object> toMerge) {
   }
 
   public Object remove(Object key) {
+    if (UNSTORED_KEYS.contains(key)) {
+      return null;
+    }
     throw new UnsupportedOperationException();
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -98,7 +98,7 @@ public void assertProcessEnded(final String processInstanceId) {
       .getRuntimeService()
       .createProcessInstanceQuery()
       .processInstanceId(processInstanceId)
-      .singleResult();
+      .listPage();
     
     if (processInstance!=null) {
       throw new AssertionFailedError("expected finished process instance '"+processInstanceId+"' but it was still in the db"); 

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/db/EngineRebootProcessDefinitionCacheTest.java
Patch:
@@ -93,7 +93,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .singleResult();
+       .listPage();
      
      assertNotNull(processInstance);
      
@@ -111,7 +111,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .singleResult();
+       .listPage();
 
      assertNull(processInstance);
      

File: modules/activiti-engine/src/test/java/org/activiti/impl/interceptor/CommandContextTest.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class CommandContextTest extends ProcessEngineImplTestCase {
 
-  public void testOne() {
+  public void testCommandContextGetCurrentAfterException() {
     try {
       processEngineConfiguration.getCommandExecutor().execute(new Command<Object>() {
         public Object execute(CommandContext commandContext) {

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ExecutionImpl.java
Patch:
@@ -560,7 +560,9 @@ protected void collectVariables(Map<String, Object> collectedVariables) {
       parent.collectVariables(collectedVariables);
     }
     ensureVariablesInitialized();
-    collectedVariables.putAll(variables);
+    for (String variableName: variables.keySet()) {
+      collectedVariables.put(variableName, variables.get(variableName));
+    }
   }
 
   public void setVariables(Map<String, Object> variables) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/tasks/TasksGet.java
Patch:
@@ -55,7 +55,7 @@ else if (candidateGroupId != null) {
     else {
       throw new WebScriptException(Status.STATUS_BAD_REQUEST, "Tasks must be filtered with 'assignee', 'candidate' or 'candidate-group'");
     }
-    model.put("tasks", tq.paginatedList(start, size));
+    model.put("tasks", tq.listPage(start, size));
     model.put("start", start);
     model.put("total", tq.count());
     model.put("size", size);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -96,7 +96,7 @@ public Object execute(CommandContext commandContext) {
   public abstract List<T> executeList(CommandContext commandContext, Page page);
   
   public T executeSingleResult(CommandContext commandContext) {
-    List<T> results = list();
+    List<T> results = executeList(commandContext, null);
     if (results.size() == 1) {
       return results.get(0);
     } else if (results.size() > 1) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -15,10 +15,10 @@
 
 import java.util.Date;
 import java.util.List;
-import java.util.Map;
 
 import org.activiti.engine.Job;
 import org.activiti.engine.Page;
+import org.activiti.engine.impl.JobQueryImpl;
 import org.activiti.engine.impl.persistence.runtime.ByteArrayEntity;
 import org.activiti.engine.impl.persistence.runtime.ExecutionEntity;
 import org.activiti.engine.impl.persistence.runtime.JobEntity;
@@ -50,6 +50,6 @@ public interface RuntimeSession {
   List<JobEntity> findLockedJobs();
   List<TimerEntity> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
   List<TimerEntity> findTimersByExecutionId(String executionId);
-  List<Job> dynamicFindJobs(Map<String, Object> params, Page page);
-  long dynamicJobCount(Map<String, Object> params);
+  List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page);
+  long findJobCountByQueryCriteria(JobQueryImpl jobQuery);
 }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -118,7 +118,7 @@ public void testTimerOnCallActivity() {
     
     // When the timer on the subprocess is fired, the complete subprocess is destroyed
     ClockUtil.setCurrentTime(new Date(startTime.getTime() + (6 * 60 * 1000))); // + 6 minutes, timer fires on 5 minutes
-    waitForJobExecutorToProcessAllJobs(10000, 100);
+    waitForJobExecutorToProcessAllJobs(10000000, 1000000);
     
     Task escalatedTask = taskQuery.singleResult();
     assertEquals("Escalated Task", escalatedTask.getName());

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/process/ProcessDefinitionImpl.java
Patch:
@@ -49,7 +49,9 @@ public PvmProcessInstance createProcessInstance() {
       if (initialActivity.isScope()) {
         scopeInstance = scopeInstance.createExecution();
         scopeInstance.setActivity(initialActivity);
-        scopeInstance.initialize();
+        if (initialActivity.isScope()) {
+          scopeInstance.initialize();
+        }
       }
     }
     

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationTransitionCreateScope.java
Patch:
@@ -35,7 +35,7 @@ public void execute(ExecutionImpl execution) {
         execution.setTransition(null);
         execution.setActivity(null);
         execution.setActive(false);
-        log.fine("create scope: parent scope "+execution+" continues as scoped execution "+propagatingExecution);
+        log.fine("create scope: parent "+execution+" continues as execution "+propagatingExecution);
         propagatingExecution.initialize();
 
       } else {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ServiceInvocationActivityBehaviour.java
Patch:
@@ -69,7 +69,5 @@ public void signal(ActivityExecution execution, String signalName, Object signal
       throw new ActivitiException("Service " + object + " is used in a serviceTask, but does not" + " implement the "
               + SignallableActivityBehavior.class.getCanonicalName() + " interface");
     }
-}
-
-
+  }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/task/TaskEntity.java
Patch:
@@ -117,6 +117,9 @@ public Object getPersistentState() {
     persistentState.put("assignee", this.assignee);
     persistentState.put("name", this.name);
     persistentState.put("priority", this.priority);
+    if (executionId!=null) {
+      persistentState.put("executionId", this.executionId);
+    }
     if (createTime!=null) {
       persistentState.put("createTime", this.createTime);
     }

File: modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCallParallelSubProcess() {
     Task taskB = tasks.get(1);
     assertEquals("Task A", taskA.getName());
     assertEquals("Task B", taskB.getName());
-    
+
     // Completing the first task should not end the subprocess
     taskService.complete(taskA.getId());
     assertEquals(1, taskQuery.list().size());

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationActivityEnd.java
Patch:
@@ -99,8 +99,8 @@ protected void eventNotificationsCompleted(ExecutionImpl execution) {
         if (concurrentRoot.getExecutions().size()==1) {
           ExecutionImpl lastConcurrent = concurrentRoot.getExecutions().get(0);
           concurrentRoot.setActivity(lastConcurrent.getActivity());
-          lastConcurrent.remove();
           lastConcurrent.setReplacedBy(concurrentRoot);
+          lastConcurrent.remove();
         
         } else if (concurrentRoot.getExecutions().isEmpty()) {
           ActivityBehavior parentActivityBehavior = parentActivity.getActivityBehavior();

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationTransitionDestroyScope.java
Patch:
@@ -66,7 +66,7 @@ public void execute(ExecutionImpl execution) {
             lastConcurrent.setConcurrent(false);
             
           } else {
-            log.fine("replacing concurrent root "+concurrentRoot+" with last concurrent "+lastConcurrent);
+            log.fine("merging last concurrent "+lastConcurrent+" into concurrent root "+concurrentRoot);
             
             // We can't just merge the data of the lastConcurrent into the concurrentRoot.
             // This is because the concurrent root might be in a takeAll-loop.  So the 

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ExecutionImpl.java
Patch:
@@ -183,6 +183,7 @@ public void destroy() {
   }
   
   public void remove() {
+    ensureParentInitialized();
     if (parent!=null) {
       parent.ensureExecutionsInitialized();
       parent.executions.remove(this);
@@ -375,6 +376,7 @@ public void start() {
   // methods that translate to operations /////////////////////////////////////
 
   public void signal(String signalName, Object signalData) {
+    ensureActivityInitialized();
     SignallableActivityBehavior activityBehavior = (SignallableActivityBehavior) activity.getActivityBehavior();
     try {
       activityBehavior.signal(this, signalName, signalData);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -67,14 +67,14 @@ public ExecutionQueryImpl activityId(String activityId) {
   public long executeCount(CommandContext commandContext) {
     return commandContext
       .getRuntimeSession()
-      .findExecutionCountByDynamicCriteria(this);
+      .findExecutionCountByQueryCriteria(this);
   }
 
   @SuppressWarnings("unchecked")
   public List<Execution> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByDynamicCriteria(this);
+      .findExecutionsByQueryCriteria(this);
   }
   
   public String getProcessDefinitionKey() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -68,14 +68,14 @@ public ProcessInstanceQueryImpl activityId(String activityId) {
   public long executeCount(CommandContext commandContext) {
     return commandContext
       .getRuntimeSession()
-      .findExecutionCountByDynamicCriteria(this);
+      .findExecutionCountByQueryCriteria(this);
   }
 
   @SuppressWarnings("unchecked")
   public List<ProcessInstance> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByDynamicCriteria(this);
+      .findExecutionsByQueryCriteria(this);
   }
   
   public String getProcessDefinitionKey() {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.impl.cmd.DeleteDeploymentCmd;
 import org.activiti.engine.impl.cmd.DeployCmd;
-import org.activiti.engine.impl.cmd.FindDeploymentResourcesCmd;
+import org.activiti.engine.impl.cmd.FindDeploymentResourceNamesCmd;
 import org.activiti.engine.impl.cmd.FindDeploymentsCmd;
 import org.activiti.engine.impl.cmd.FindProcessDefinitionCmd;
 import org.activiti.engine.impl.cmd.FindProcessDefinitionsCmd;
@@ -68,7 +68,7 @@ public List<Deployment> findDeployments() {
 
   @SuppressWarnings("unchecked")
   public List<String> findDeploymentResourceNames(String deploymentId) {
-    return commandExecutor.execute(new FindDeploymentResourcesCmd(deploymentId));
+    return commandExecutor.execute(new FindDeploymentResourceNamesCmd(deploymentId));
   }
 
   public InputStream getResourceAsStream(String deploymentId, String resourceName) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -33,8 +33,8 @@ public interface RuntimeSession {
   
   void endProcessInstance(String processInstanceId, String nonCompletionReason);
   ExecutionEntity findSubProcessInstanceBySuperExecutionId(String superExecutionId);
-  long findExecutionCountByDynamicCriteria(Object executionQuery);
-  List<ExecutionEntity> findExecutionsByDynamicCriteria(Object executionQuery);
+  long findExecutionCountByQueryCriteria(Object executionQuery);
+  List<ExecutionEntity> findExecutionsByQueryCriteria(Object executionQuery);
   List<ExecutionEntity> findChildExecutionsByParentExecutionId(String executionId);
   ExecutionEntity findExecutionById(String activityInstanceId);
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/FindDeploymentResourceNamesCmd.java
Patch:
@@ -23,11 +23,11 @@
  * @author Joram Barrez
  */
 @SuppressWarnings("unchecked")
-public class FindDeploymentResourcesCmd implements Command<List> {
+public class FindDeploymentResourceNamesCmd implements Command<List> {
   
   protected String deploymentId;
   
-  public FindDeploymentResourcesCmd(String deploymentId) {
+  public FindDeploymentResourceNamesCmd(String deploymentId) {
     this.deploymentId = deploymentId;
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRepositorySession.java
Patch:
@@ -124,7 +124,7 @@ public List<ResourceEntity> findResourcesByDeploymentId(String deploymentId) {
   
   @SuppressWarnings("unchecked")
   public List<String> findDeploymentResourceNames(String deploymentId) {
-    return dbSqlSession.selectList("selectResourceNamesByDeploymentId", deploymentId);
+    return dbSqlSession.getSqlSession().selectList("selectResourceNamesByDeploymentId", deploymentId);
   }
 
   @SuppressWarnings("unchecked")

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -289,5 +289,6 @@ public static void closeProcessEngines() {
     for (ProcessEngine processEngine: processEngines.values()) {
       processEngine.close();
     }
+    processEngines.clear();
   }
 }

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationProcessEnd.java
Patch:
@@ -41,6 +41,7 @@ public void execute(ExecutionImpl execution) {
       execution.setEventListenerIndex(0);
       execution.setEventName(null);
       execution.setEventSource(null);
+      execution.remove();
     }
   }
 

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationTransitionDestroyScope.java
Patch:
@@ -41,7 +41,7 @@ public void execute(ExecutionImpl execution) {
         parentScopeInstance = execution.getParent().getParent();
 
         log.fine("moving concurrent "+execution+" one scope up under "+parentScopeInstance);
-        concurrentRoot.removeExecution(execution);
+        concurrentRoot.getExecutions().remove(execution);
         parentScopeInstance.getExecutions().add(execution);
         execution.setParent(parentScopeInstance);
         execution.setActivity(activity);

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -25,8 +25,7 @@ public class JavaServiceTaskTest extends ProcessEngineTestCase {
 
   @Deployment
   public void testJavaServiceDelegation() {
-    ProcessInstance pi = runtimeService.startProcessInstanceByKey("javaServiceDelegation", 
-            CollectionUtil.singletonMap("input", "Activiti BPM Engine"));
+    ProcessInstance pi = runtimeService.startProcessInstanceByKey("javaServiceDelegation", CollectionUtil.singletonMap("input", "Activiti BPM Engine"));
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/identity/IdentityTest.java
Patch:
@@ -71,6 +71,7 @@ public void testFindGroupsByUserAndType() {
     List<Group> groups = identityService.findGroupsByUserAndType("johndoe", "security-role");
     Set<String> groupIds = getGroupIds(groups);
     Set<String> expectedGroupIds = new HashSet<String>();
+    expectedGroupIds.add("sales");
     expectedGroupIds.add("user");
     expectedGroupIds.add("admin");
     assertEquals(expectedGroupIds, groupIds);

File: modules/activiti-engine/src/main/java/org/activiti/engine/SortOrder.java
Patch:
@@ -18,7 +18,7 @@
  */
 public enum SortOrder {
 
-  ASCENDING,
-  DESCENDING;
+  ASC,
+  DESC;
   
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TablePageQueryImpl.java
Patch:
@@ -58,7 +58,7 @@ public TablePageQuery orderAsc(String column) {
     if (sortColumn != null) {
       throw new ActivitiException("Invalid usage: cannot use both orderAsc and orderDesc in same query");
     }
-    this.sortOrder = SortOrder.ASCENDING;
+    this.sortOrder = SortOrder.ASC;
     this.sortColumn = column;
     return this;
   }
@@ -67,7 +67,7 @@ public TablePageQuery orderDesc(String column) {
     if (sortColumn != null) {
       throw new ActivitiException("Invalid usage: cannot use both orderAsc and orderDesc in same query");
     }
-    this.sortOrder = SortOrder.DESCENDING;
+    this.sortOrder = SortOrder.DESC;
     this.sortColumn = column;
     return this;
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/CallActivityBehaviour.java
Patch:
@@ -44,7 +44,7 @@ public void execute(ActivityExecution execution) throws Exception {
     processInstance.start();
   }
   
-  public void event(ActivityExecution execution, String signalEvent, Object signalData) throws Exception {
+  public void signal(ActivityExecution execution, String signalEvent, Object signalData) throws Exception {
     leave(execution);
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/TaskSession.java
Patch:
@@ -14,10 +14,10 @@
 package org.activiti.engine.impl.cfg;
 
 import java.util.List;
-import java.util.Map;
 
 import org.activiti.engine.Page;
 import org.activiti.engine.Task;
+import org.activiti.engine.impl.TaskQueryImpl;
 import org.activiti.engine.impl.persistence.task.TaskEntity;
 import org.activiti.engine.impl.persistence.task.TaskInvolvementEntity;
 
@@ -35,8 +35,8 @@ public interface TaskSession {
   List<Task> findTasksByAssignee(String assignee);
   List<Task> findCandidateTasks(String userId, List<String> groupIds);
   
-  List<Task> dynamicFindTasks(Map<String, Object> params, Page page);
-  long dynamicFindTaskCount(Map<String, Object> params);
+  List<Task> findTasksByQueryCriteria(TaskQueryImpl taskQuery, Page page);
+  long findTaskCountByQueryCriteria(TaskQueryImpl taskQuery);
 
   /* TaskInvolvementEntity */
   void deleteTaskInvolvement(TaskInvolvementEntity taskInvolvement);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -28,7 +28,7 @@ public SaveGroupCmd(GroupEntity group) {
   }
   
   public void executeVoid(CommandContext commandContext) {
-    if (group.getId()==null) {
+    if (group.getRevision()==0) {
       commandContext
         .getIdentitySession()
         .insertGroup(group);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -29,7 +29,7 @@ public SaveUserCmd(User user) {
   }
   
   public void executeVoid(CommandContext commandContext) {
-    if (user.getId()==null) {
+    if (user.getRevision()==0) {
       commandContext
         .getIdentitySession()
         .insertUser(user);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbManagementSession.java
Patch:
@@ -93,7 +93,7 @@ public TablePage getTablePage(String tableName, int offset, int maxResults,
     params.put("tableName", tableName);
     if (sortColumn != null) {
       params.put("sortColumn", sortColumn);
-      if (sortOrder.equals(SortOrder.ASCENDING)) {
+      if (sortOrder.equals(SortOrder.ASC)) {
         params.put("sortOrder", "asc");
       } else {
         params.put("sortOrder", "desc");

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbSqlSessionFactory.java
Patch:
@@ -62,7 +62,7 @@ public class DbSqlSessionFactory implements SessionFactory, ProcessEngineConfigu
   protected static final Map<String, Map<String, String>> databaseSpecificStatements = new HashMap<String, Map<String,String>>();
 
   static {
-    addDatabaseSpecificStatement("mysql", "selectTaskByDynamicCriteria", "selectTaskByDynamicCriteria_mysql");
+    addDatabaseSpecificStatement("mysql", "selectTaskByQueryCriteria", "selectTaskByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectNextJobsToExecute", "selectNextJobsToExecute_mysql");
   }
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/runtime/ExecutionEntity.java
Patch:
@@ -106,6 +106,8 @@ public ExecutionEntity(ProcessDefinitionEntity processDefinition) {
 
     // reset the process instance in order to have the db-generated process instance id available
     setProcessInstance(this);
+    
+    this.variables = VariableMap.createNewInitialized(id, processInstanceId);
   }
 
   @Override

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -40,7 +40,6 @@
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.bpmn.deployer.BpmnDeployer;
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
-import org.activiti.engine.impl.persistence.db.DbSqlSessionFactory;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.pvm.impl.util.ClassNameUtil;
 import org.activiti.pvm.impl.util.LogUtil.ThreadLogMode;
@@ -226,7 +225,7 @@ public static String getBpmnProcessDefinitionResource(Class< ? > type, String na
   protected void annotationDeploymentAfter() {
     for (String deploymentId: deploymentsToDeleteAfterTestMethod) {
       log.fine("annotation @Deployment deletes deployment for "+ClassNameUtil.getClassNameWithoutPackage(this)+"."+getName());
-      repositoryService.deleteDeployment(deploymentId);
+      repositoryService.deleteDeploymentCascade(deploymentId);
     }
   }
 

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ExecutionImpl.java
Patch:
@@ -236,6 +236,7 @@ public void end() {
     // if there is a parent 
     ensureParentInitialized();
     if (parent!=null) {
+      ensureActivityInitialized();
       activity = activity.getParentActivity();
       while(activity!=null && !activity.isScope()) {
         // TODO add destroy scope if activity is scope

File: modules/activiti-engine-test-cfg/src/test/java/org/activiti/test/cfg/spring/SpringTest.java
Patch:
@@ -84,7 +84,7 @@ public void testProcessExecutionWithTaskAssignedFromExpression() {
     List<Task> tasks = processEngine.getTaskService().findAssignedTasks("kermit");
     assertEquals(before + 1, tasks.size());
 
-    processEngine.getRuntimeService().deleteProcessInstance(processInstance.getId());
+    processEngine.getRuntimeService().endProcessInstance(processInstance.getId());
     
   }
 
@@ -95,7 +95,7 @@ public void testJavaServiceDelegation() {
             CollectionUtil.singletonMap("input", "Activiti BPM Engine"));
     ActivityInstance activityInstance = runtimeService.findActivityInstanceByProcessInstanceIdAndActivityId(pi.getId(), "waitState");
     assertEquals("ACTIVITI BPM ENGINE", runtimeService.getVariable(activityInstance.getId(), "input"));
-    processEngine.getRuntimeService().deleteProcessInstance(activityInstance.getId());
+    processEngine.getRuntimeService().endProcessInstance(activityInstance.getId());
   }
 
   @Test

File: modules/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
Patch:
@@ -36,7 +36,7 @@ public interface RuntimeService {
   ProcessInstance startProcessInstanceById(String processDefinitionId, Map<String, Object> variables);
   
   /** delete an existing runtime process instance */
-  void deleteProcessInstance(String processInstanceId);
+  void endProcessInstance(String processInstanceId, String nonCompletionReason);
   
   /** gets the details of a process instance 
    * @return the process instance or null if no process instance could be found with the given id. */

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.engine.ProcessInstance;
 import org.activiti.engine.ProcessInstanceQuery;
 import org.activiti.engine.RuntimeService;
-import org.activiti.engine.impl.cmd.DeleteProcessInstanceCmd;
+import org.activiti.engine.impl.cmd.EndProcessInstanceCmd;
 import org.activiti.engine.impl.cmd.FindActivitiyInstanceCmd;
 import org.activiti.engine.impl.cmd.FindActivityInstanceInActivityCmd;
 import org.activiti.engine.impl.cmd.FindProcessInstanceCmd;
@@ -38,8 +38,8 @@ public ActivityInstance findActivityInstanceById(String activityInstanceId) {
     return commandExecutor.execute(new FindActivitiyInstanceCmd(activityInstanceId));
   }
 
-  public void deleteProcessInstance(String processInstanceId) {
-    commandExecutor.execute(new DeleteProcessInstanceCmd(processInstanceId));
+  public void endProcessInstance(String processInstanceId, String nonCompletionReason) {
+    commandExecutor.execute(new EndProcessInstanceCmd(processInstanceId, nonCompletionReason));
   }
 
   public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/BpmnActivityBehavior.java
Patch:
@@ -98,7 +98,7 @@ protected void performOutgoingBehavior(ActivityContext activityContext, boolean
           log.fine("No outgoing sequence flow found for " + activityContext.getActivity().getId() 
                   + ". Ending execution.");
         }
-        activityContext.end();
+        activityContext.endActivityInstance();
         
       }
   }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/NoneEndEventActivity.java
Patch:
@@ -22,7 +22,7 @@ public class NoneEndEventActivity extends AbstractBpmnActivity {
   
   public void start(ActivityContext activityContext) throws Exception {
     
-    activityContext.end();
+    activityContext.endActivityInstance();
     
 //    // TODO: needs cleanup!
 //    ActivityImpl currentActivity = (ActivityImpl) activityContext.getActivity();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -34,7 +34,7 @@
  */
 public interface RuntimeSession {
   
-  void deleteProcessInstance(String processInstanceId);
+  void endProcessInstance(String processInstanceId, String nonCompletionReason);
   ProcessInstanceEntity findProcessInstanceById(String processInstanceId);
   List<ProcessInstanceEntity> findProcessInstancesByProcessDefintionId(String processDefinitionId);
   ProcessInstanceEntity findSubProcessInstance(String superExecutionId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRepositorySession.java
Patch:
@@ -96,7 +96,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
         for (ProcessInstance processInstance: processInstances) {
           commandContext
             .getRuntimeSession()
-            .deleteProcessInstance(processInstance.getId());
+            .endProcessInstance(processInstance.getId());
         }
       }
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRuntimeSession.java
Patch:
@@ -43,8 +43,8 @@ public DbRuntimeSession() {
     this.dbSqlSession = CommandContext.getCurrentSession(DbSqlSession.class);
   }
 
-  public void deleteProcessInstance(String processInstanceId) {
-    findProcessInstanceById(processInstanceId).delete();
+  public void endProcessInstance(String processInstanceId, String nonCompletionReason) {
+    findProcessInstanceById(processInstanceId).end();
   }
 
   public ProcessInstanceEntity findProcessInstanceById(String processInstanceId) {

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/process/ActivityImpl.java
Patch:
@@ -30,6 +30,7 @@
  */
 public class ActivityImpl extends ScopeImpl implements PvmActivity {
 
+  private static final long serialVersionUID = 1L;
   protected List<TransitionImpl> outgoingTransitions = new ArrayList<TransitionImpl>();
   protected Map<String, TransitionImpl> namedOutgoingTransitions = new HashMap<String, TransitionImpl>();
   protected List<TransitionImpl> incomingTransitions = new ArrayList<TransitionImpl>();

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/process/TransitionImpl.java
Patch:
@@ -23,6 +23,8 @@
  */
 public class TransitionImpl extends ProcessElementImpl implements PvmTransition {
 
+  private static final long serialVersionUID = 1L;
+  
   protected ActivityImpl source;
   protected ActivityImpl destination;
 

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ProcessInstanceImpl.java
Patch:
@@ -25,6 +25,8 @@
  */
 public class ProcessInstanceImpl extends ScopeInstanceImpl implements PvmProcessInstance {
   
+  private static final long serialVersionUID = 1L;
+
   protected ProcessInstanceImpl() {
   }
   
@@ -36,7 +38,7 @@ public void start() {
     ExecutionContextImpl.startProcessInstance(this);
   }
   
-  public void remove() {
+  public void destroy() {
   }
 
   public List<String> findActivityIds() {

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/process/PvmProcessDefinition.java
Patch:
@@ -19,10 +19,10 @@
 /**
  * @author Tom Baeyens
  */
-public interface PvmProcessDefinition {
+public interface PvmProcessDefinition extends PvmScope {
 
   PvmProcessInstance createProcessInstance();
 
-  Object getProperty(String name);
+  PvmActivity getInitial();
 
 }

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/runtime/PvmScopeInstance.java
Patch:
@@ -13,13 +13,14 @@
 
 package org.activiti.pvm.runtime;
 
+import java.io.Serializable;
 import java.util.Map;
 
 
 /**
  * @author Tom Baeyens
  */
-public interface PvmScopeInstance {
+public interface PvmScopeInstance extends Serializable {
 
   boolean hasVariable(String variableName);
 

File: modules/activiti-pvm/src/test/java/org/activiti/pvm/test/PvmConcurrencyTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.pvm.runtime.PvmActivityInstance;
 import org.activiti.pvm.runtime.PvmProcessInstance;
 import org.activiti.test.pvm.activities.Automatic;
+import org.activiti.test.pvm.activities.End;
 import org.activiti.test.pvm.activities.ParallelGateway;
 import org.activiti.test.pvm.activities.WaitState;
 import org.junit.Test;
@@ -56,14 +57,14 @@ public void testSimpleAutmaticConcurrency() {
         .transition("end")
       .endActivity()
       .createActivity("end")
-        .behavior(new WaitState())
+        .behavior(new End())
       .endActivity()
     .buildProcessDefinition();
     
     PvmProcessInstance processInstance = processDefinition.createProcessInstance(); 
     processInstance.start();
     
-    assertNotNull(processInstance.findActivityInstance("end"));
+    assertTrue(processInstance.isEnded());
   }
 
   @Test

File: modules/activiti-pvm/src/test/java/org/activiti/test/pvm/activities/Automatic.java
Patch:
@@ -24,7 +24,7 @@
 public class Automatic implements ActivityBehavior {
 
   public void start(ActivityContext activityExecutionContext) {
-    PvmTransition transition = activityExecutionContext.getOutgoingTransitions().get(0);
+    PvmTransition transition = activityExecutionContext.getActivity().getOutgoingTransitions().get(0);
     activityExecutionContext.take(transition);
   }
 

File: modules/activiti-pvm/src/test/java/org/activiti/test/pvm/activities/End.java
Patch:
@@ -23,7 +23,7 @@
 public class End implements ActivityBehavior {
 
   public void start(ActivityContext activityContext) throws Exception {
-    activityContext.end();
+    activityContext.endActivityInstance();
   }
 
 }

File: modules/activiti-pvm/src/test/java/org/activiti/test/pvm/activities/WaitState.java
Patch:
@@ -27,7 +27,7 @@ public void start(ActivityContext activityExecutionContext) {
   }
   
   public void signal(ActivityContext activityExecutionContext, String signal, Object signalData) {
-    PvmTransition transition = activityExecutionContext.getOutgoingTransitions().get(0);
+    PvmTransition transition = activityExecutionContext.getActivity().getOutgoingTransitions().get(0);
     activityExecutionContext.take(transition);
   }
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRuntimeSession.java
Patch:
@@ -44,12 +44,11 @@ public DbRuntimeSession() {
   }
 
   public void deleteProcessInstance(String processInstanceId) {
-    findProcessInstanceById(processInstanceId)
-      .delete();
+    findProcessInstanceById(processInstanceId).delete();
   }
 
   public ProcessInstanceEntity findProcessInstanceById(String processInstanceId) {
-    throw new UnsupportedOperationException("please implement me");
+    return (ProcessInstanceEntity) dbSqlSession.selectOne("selectProcessInstanceById", processInstanceId);
   }
 
   @SuppressWarnings("unchecked")

File: modules/activiti-engine-test-cfg/src/test/java/org/activiti/test/cfg/spring/SpringTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.activiti.engine.impl.persistence.runtime.ProcessInstanceEntity;
 import org.activiti.engine.impl.persistence.task.TaskDefinition;
 import org.activiti.engine.impl.util.CollectionUtil;
-import org.activiti.engine.impl.util.LogUtil;
 import org.activiti.pvm.impl.process.ActivityImpl;
 import org.activiti.pvm.impl.runtime.ActivityInstanceImpl;
+import org.activiti.pvm.impl.util.LogUtil;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: modules/activiti-engine/src/main/java/org/activiti/engine/ProcessInstanceQuery.java
Patch:
@@ -22,6 +22,7 @@
  */
 public interface ProcessInstanceQuery {
   
+  ProcessInstanceQuery processInstanceId(String processInstanceId);
   ProcessInstanceQuery processDefinitionKey(String processDefinitionKey);
   
   long count();
@@ -31,5 +32,4 @@ public interface ProcessInstanceQuery {
   List<ProcessInstance> paginatedList(int start, int maxResults);
   
   ProcessInstance singleResult();
-
 }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/JobQueryImpl.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author jbarrez
  */
-public class JobQueryImpl extends AbstractListQuery<Job> implements JobQuery {
+public class JobQueryImpl extends AbstractQuery<Job> implements JobQuery {
   
   protected String processInstanceId;
   
@@ -40,13 +40,13 @@ public JobQueryImpl(CommandExecutor commandExecutor) {
     super(commandExecutor);
   }
 
-  protected long executeCount(CommandContext commandContext) {
+  public long executeCount(CommandContext commandContext) {
     return commandContext
       .getRuntimeSession()
       .dynamicJobCount(createParamMap());
   }
 
-  protected List<Job> executeList(CommandContext commandContext, Page page) {
+  public List<Job> executeList(CommandContext commandContext, Page page) {
     return commandContext
       .getRuntimeSession()
       .dynamicFindJobs(createParamMap(), page);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * @author Tom Baeyens
  */
-public class ProcessServiceImpl extends ServiceImpl implements RuntimeService {
+public class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {
 
   public ActivityInstance findActivityInstanceById(String activityInstanceId) {
     return commandExecutor.execute(new FindActivitiyInstanceCmd(activityInstanceId));

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * @author Joram Barrez
  */
-public class TaskQueryImpl extends AbstractListQuery<Task> implements TaskQuery {
+public class TaskQueryImpl extends AbstractQuery<Task> implements TaskQuery {
   
   protected String name;
   
@@ -99,13 +99,13 @@ public TaskQuery orderDesc(String column) {
     return this;
   }
   
-  protected List<Task> executeList(CommandContext commandContext, Page page) {
+  public List<Task> executeList(CommandContext commandContext, Page page) {
     return commandContext
       .getTaskSession()
       .dynamicFindTasks(createParamMap(), page);
   }
   
-  protected long executeCount(CommandContext commandContext) {
+  public long executeCount(CommandContext commandContext) {
     return commandContext
       .getTaskSession()
       .dynamicFindTaskCount(createParamMap());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/ant/DeployBarTask.java
Patch:
@@ -23,7 +23,7 @@
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.ProcessEngines;
 import org.activiti.engine.RepositoryService;
-import org.activiti.engine.impl.util.LogUtil;
+import org.activiti.pvm.impl.util.LogUtil;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Task;

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/UserTaskActivity.java
Patch:
@@ -50,7 +50,7 @@ public void start(ActivityContext activityContext) throws Exception {
     handleAssignments(task, activityContext);
   }
 
-  public void event(ActivityContext activityContext, Object event) throws Exception {
+  public void signal(ActivityContext activityContext, String signalName, Object signalData) throws Exception {
     leave(activityContext);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 import org.activiti.engine.impl.IdentityServiceImpl;
 import org.activiti.engine.impl.ManagementServiceImpl;
 import org.activiti.engine.impl.ProcessEngineImpl;
-import org.activiti.engine.impl.ProcessServiceImpl;
+import org.activiti.engine.impl.RuntimeServiceImpl;
 import org.activiti.engine.impl.RepositoryServiceImpl;
 import org.activiti.engine.impl.TaskServiceImpl;
 import org.activiti.engine.impl.bpmn.deployer.BpmnDeployer;
@@ -125,7 +125,7 @@ public ProcessEngineConfiguration() {
     transactionContextFactory = new StandaloneIbatisTransactionContextFactory();
 
     repositoryService = new RepositoryServiceImpl();
-    runtimeService = new ProcessServiceImpl();
+    runtimeService = new RuntimeServiceImpl();
     taskService = new TaskServiceImpl();
     managementService = new ManagementServiceImpl();
     identityService = new IdentityServiceImpl();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RepositorySession.java
Patch:
@@ -34,7 +34,7 @@ public interface RepositorySession {
   
   /** deletes the deployment and cascades deletion to the contained resources
    * and process definitions */
-  void deleteDeployment(String deploymentId);
+  void deleteDeployment(String deploymentId, boolean cascade);
   
   // TODO replace with query api
   List<DeploymentEntity> findDeployments();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.engine.Job;
 import org.activiti.engine.Page;
 import org.activiti.engine.ProcessInstance;
+import org.activiti.engine.impl.ProcessInstanceQueryImpl;
 import org.activiti.engine.impl.persistence.runtime.ActivityInstanceEntity;
 import org.activiti.engine.impl.persistence.runtime.ByteArrayEntity;
 import org.activiti.engine.impl.persistence.runtime.JobEntity;
@@ -33,13 +34,12 @@
  */
 public interface RuntimeSession {
   
-  void insertProcessInstance(ProcessInstanceEntity processInstance);
   void deleteProcessInstance(String processInstanceId);
   ProcessInstanceEntity findProcessInstanceById(String processInstanceId);
   List<ProcessInstanceEntity> findProcessInstancesByProcessDefintionId(String processDefinitionId);
   ProcessInstanceEntity findSubProcessInstance(String superExecutionId);
-  long findProcessInstanceCountByDynamicCriteria(Map<String, Object> params);
-  List<ProcessInstance> findProcessInstancesByDynamicCriteria(Map<String, Object> params);
+  long findProcessInstanceCountByDynamicCriteria(ProcessInstanceQueryImpl processInstanceQuery);
+  List<ProcessInstance> findProcessInstancesByDynamicCriteria(ProcessInstanceQueryImpl processInstanceQuery);
 
   void insertActivityInstance(ActivityInstanceEntity activityInstance);
   void deleteActivityInstance(String activityInstanceId);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/DefaultCommandExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.cfg.ProcessEngineConfiguration;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationAware;
-import org.activiti.engine.impl.util.ClassNameUtil;
+import org.activiti.pvm.impl.util.ClassNameUtil;
 
 /**
  * @author Tom Baeyens

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbSqlSession.java
Patch:
@@ -24,8 +24,8 @@
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.persistence.PersistentObject;
 import org.activiti.engine.impl.persistence.runtime.VariableInstanceEntity;
-import org.activiti.engine.impl.util.ClassNameUtil;
 import org.activiti.engine.impl.variable.DeserializedObject;
+import org.activiti.pvm.impl.util.ClassNameUtil;
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.session.SqlSession;
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbSqlSessionFactory.java
Patch:
@@ -36,9 +36,9 @@
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.interceptor.SessionFactory;
 import org.activiti.engine.impl.persistence.PersistentObject;
-import org.activiti.engine.impl.util.ClassNameUtil;
 import org.activiti.engine.impl.util.IoUtil;
 import org.activiti.engine.impl.variable.Type;
+import org.activiti.pvm.impl.util.ClassNameUtil;
 import org.apache.ibatis.builder.xml.XMLConfigBuilder;
 import org.apache.ibatis.datasource.pooled.PooledDataSource;
 import org.apache.ibatis.mapping.Environment;
@@ -158,6 +158,7 @@ private String getStatement(Class<?> persistentObjectClass, Map<Class<?>,String>
       return statement;
     }
     statement = prefix+ClassNameUtil.getClassNameWithoutPackage(persistentObjectClass);
+    statement = statement.substring(0, statement.length()-6);
     cachedStatements.put(persistentObjectClass, statement);
     return statement;
   }
@@ -252,7 +253,7 @@ public static void executeSchemaResource(String operation, String databaseName,
         if (!ddlStatement.startsWith("#")) {
           Statement jdbcStatement = connection.createStatement();
           try {
-            log.fine("\n" + ddlStatement);
+            log.finest("\n" + ddlStatement);
             jdbcStatement.execute(ddlStatement);
             jdbcStatement.close();
           } catch (Exception e) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineImplTestCase.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.cfg.ProcessEngineConfiguration;
-import org.activiti.engine.impl.util.LogUtil.ThreadLogMode;
+import org.activiti.pvm.impl.util.LogUtil.ThreadLogMode;
 
 
 /** JUnit 3 style base class that also exposes selected implementation 

File: modules/activiti-engine/src/main/java/org/activiti/impl/event/AbstractProcessInstanceEvent.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractProcessInstanceEvent<T> extends AbstractProcessEve
    * Standard constructor used to create a new process event based on the given
    * relations.
    *
-   * @param processDefinitionId the id of the process definition this event is
+   * @param processInstanceId the id of the process definition this event is
    * related to (must not be <code>null</code>)
    * @param processInstanceId the id of the process instance this event is
    * related to (must not be <code>null</code>)

File: modules/activiti-engine/src/main/java/org/activiti/test/LogInitializer.java
Patch:
@@ -18,8 +18,8 @@
 import junit.framework.AssertionFailedError;
 
 import org.activiti.engine.impl.util.ClockUtil;
-import org.activiti.engine.impl.util.LogUtil;
-import org.activiti.engine.impl.util.LogUtil.ThreadLogMode;
+import org.activiti.pvm.impl.util.LogUtil;
+import org.activiti.pvm.impl.util.LogUtil.ThreadLogMode;
 import org.junit.rules.MethodRule;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/util/LogUtil.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.impl.util;
+package org.activiti.pvm.impl.util;
 
 import java.io.InputStream;
 import java.io.PrintWriter;
@@ -25,7 +25,7 @@
 import java.util.logging.LogManager;
 import java.util.logging.LogRecord;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.pvm.PvmException;
 
 /**
  * @author Tom Baeyens
@@ -65,7 +65,7 @@ public static void readJavaUtilLoggingConfigFromClasspath() {
         inputStream.close();
       }
     } catch (Exception e) {
-      throw new ActivitiException("couldn't initialize logging properly", e);
+      throw new PvmException("couldn't initialize logging properly", e);
     }
   }
 

File: modules/activiti-pvm/src/test/java/org/activiti/pvm/test/PvmTest.java
Patch:
@@ -1,8 +1,6 @@
 package org.activiti.pvm.test;
 import java.util.ArrayList;
 
-import junit.framework.TestCase;
-
 import org.activiti.pvm.ProcessDefinitionBuilder;
 import org.activiti.pvm.process.PvmProcessDefinition;
 import org.activiti.pvm.runtime.PvmActivityInstance;
@@ -28,7 +26,7 @@
 /**
  * @author Tom Baeyens
  */
-public class PvmTest extends TestCase {
+public class PvmTest extends PvmTestCase {
 
   public void testBasicLinearActivities() {
     PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()

File: modules/activiti-pvm/src/test/java/org/activiti/pvm/test/PvmVariablesTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.activiti.pvm.test;
 
-import static org.junit.Assert.*;
-
 import java.util.HashMap;
 import java.util.Map;
 
@@ -28,7 +26,7 @@
 /**
  * @author Tom Baeyens
  */
-public class PvmVariablesTest {
+public class PvmVariablesTest extends PvmTestCase {
 
   @Test
   public void testVariables() {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -26,7 +26,7 @@ public class ProcessDefinitionFormGet extends ActivitiWebScript {
   @Override
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
-    String processDefinitionId = getMandatoryPathParameter(req, "processDefinitionId");
+    String processDefinitionId = getMandatoryPathParameter(req, "processInstanceId");
     Object processDefinitionForm = getRepositoryService().getStartFormById(processDefinitionId);
     if (processDefinitionForm != null) {
       if (processDefinitionForm instanceof String) {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionGet.java
Patch:
@@ -26,7 +26,7 @@ public class ProcessDefinitionGet extends ActivitiWebScript
   @Override
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
-    String processDefinitionId = getMandatoryPathParameter(req, "processDefinitionId");
+    String processDefinitionId = getMandatoryPathParameter(req, "processInstanceId");
     model.put("processDefinition", getRepositoryService().findProcessDefinitionById(processDefinitionId));
   }
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -40,9 +40,9 @@ public class ProcessInstancePost extends ActivitiWebScript
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
     ActivitiWebScriptBody body = getBody(req);
-    String processDefinitionId = getMandatoryString(body, "processDefinitionId");
+    String processDefinitionId = getMandatoryString(body, "processInstanceId");
     Map<String, Object> variables = getFormVariables(body);
-    variables.remove("processDefinitionId");
+    variables.remove("processInstanceId");
     model.put("instance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/ActivitiOptimisticLockingException.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * is thrown when an optimistic locking occurs in the datastore 
- * caused by concurrent access of the same data entry. 
+ * caused by concurrent access of the same signalData entry. 
  * 
  * @author Tom Baeyens
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/ManagementService.java
Patch:
@@ -40,7 +40,7 @@ public interface ManagementService {
  
   /**
    * creates a {@link TablePageQuery} that can be used to fetch {@link TablePage}
-   * containing specific sections of table row data.
+   * containing specific sections of table row signalData.
    */
   TablePageQuery createTablePageQuery();
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/TableMetaData.java
Patch:
@@ -17,7 +17,7 @@
 
 
 /**
- * data structure containing meta data (column names, column types, etc.) 
+ * signalData structure containing meta signalData (column names, column types, etc.) 
  * about a certain database table.
  * 
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/TablePage.java
Patch:
@@ -40,7 +40,7 @@ public class TablePage {
   protected long start;
   
   /**
-   * Indicates the key or column on which the data is sorted.
+   * Indicates the key or column on which the signalData is sorted.
    */
   protected String sort;
   

File: modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -36,7 +36,7 @@ public interface TaskService {
   Task newTask(String taskId);
 	
 	/**
-	 * Saves the given task to the persistent data store.
+	 * Saves the given task to the persistent signalData store.
 	 */
 	void saveTask(Task task);
 	

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricDataServiceImpl.java
Patch:
@@ -22,7 +22,7 @@
  * @author Tom Baeyens
  * @author Christian Stettler
  */
-// TODO: define/implement semantics of historic data: only completed processes vs. also ongoing ones
+// TODO: define/implement semantics of historic signalData: only completed processes vs. also ongoing ones
 public class HistoricDataServiceImpl extends ServiceImpl implements HistoricDataService {
 
   public HistoricActivityInstance findHistoricActivityInstance(String activityId, String processInstanceId) {
@@ -41,7 +41,7 @@ public HistoricProcessInstance findHistoricProcessInstance(String processInstanc
 //  }
 //
 //  public void registerEventConsumers(ProcessEventBus processEventBus) {
-//    // TODO: where/how to register historic data service with event bus?
+//    // TODO: where/how to register historic signalData service with event bus?
 //    
 //    processEventBus.subscribe(new ProcessInstanceStartedEventConsumer(), ProcessInstanceStartedEvent.class);
 //    processEventBus.subscribe(new ProcessInstanceEndedEventConsumer(), ProcessInstanceEndedEvent.class);

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ExclusiveGatewayActivity.java
Patch:
@@ -23,7 +23,7 @@
 
 
 /**
- * implementation of the Exclusive Gateway/XOR gateway/exclusive data=based gateway
+ * implementation of the Exclusive Gateway/XOR gateway/exclusive signalData=based gateway
  * as defined in the BPMN specification.
  * 
  * @author Joram Barrez

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -216,7 +216,7 @@ public Operation parseOperation(Element operationElement, BpmnInterface bpmnInte
    *          The root element of the XML file.
    */
   public void parseProcessDefinitions(Element definitionsElement) {
-    // TODO: parse specific definitions data (id, imports, etc)
+    // TODO: parse specific definitions signalData (id, imports, etc)
     for (Element processElement : definitionsElement.elements("process")) {
       processDefinitions.add(parseProcess(processElement));
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/identity/UserEntity.java
Patch:
@@ -41,7 +41,7 @@ public UserEntity(String id) {
     this.id = id;
   }
   
-  /** update this user by copying all the given user's data into this user.
+  /** update this user by copying all the given user's signalData into this user.
    * @see SaveUserCmd */
   public void update(UserEntity user) {
     this.firstName = user.getFirstName();

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/json/CDL.java
Patch:
@@ -27,10 +27,10 @@ of this software and associated documentation files (the "Software"), to deal
 /**
  * This provides static methods to convert comma delimited text into a
  * JSONArray, and to covert a JSONArray into comma delimited text. Comma
- * delimited text is a very popular format for data interchange. It is
+ * delimited text is a very popular format for signalData interchange. It is
  * understood by most database, spreadsheet, and organizer programs.
  * <p>
- * Each row of text represents a row in a table or a data record. Each row
+ * Each row of text represents a row in a table or a signalData record. Each row
  * ends with a NEWLINE character. Each row contains one or more values.
  * Values are separated by commas. A value can contain any character except
  * for comma, unless is is wrapped in single quotes or double quotes.

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/json/XML.java
Patch:
@@ -284,15 +284,15 @@ private static boolean parse(XMLTokener x, JSONObject context,
     /**
      * Convert a well-formed (but not necessarily valid) XML string into a
      * JSONObject. Some information may be lost in this transformation
-     * because JSON is a data format and XML is a document format. XML uses
+     * because JSON is a signalData format and XML is a document format. XML uses
      * elements, attributes, and content text, while JSON uses unordered
      * collections of name/value pairs and arrays of values. JSON does not
      * does not like to distinguish between elements and attributes.
      * Sequences of similar elements are represented as JSONArrays. Content
      * text may be placed in a "content" member. Comments, prologs, DTDs, and
      * <code>&lt;[ [ ]]></code> are ignored.
      * @param string The source string.
-     * @return A JSONObject containing the structured data from the XML string.
+     * @return A JSONObject containing the structured signalData from the XML string.
      * @throws JSONException
      */
     public static JSONObject toJSONObject(String string) throws JSONException {

File: modules/activiti-engine/src/main/java/org/activiti/test/ProcessDeployer.java
Patch:
@@ -166,7 +166,7 @@ private DeploymentBuilder getDeploymentBuilderProxy(final DeploymentBuilder buil
   }
 
   /**
-   * Registers the given deployment for post-test clean up. All the related data
+   * Registers the given deployment for post-test clean up. All the related signalData
    * such as process instances, tasks, etc will be deleted when the test case
    * has run.
    */

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ScopeInstanceImpl.java
Patch:
@@ -57,7 +57,7 @@ public void removeActivityInstance(ActivityInstanceImpl activityInstance) {
     activityInstances.remove(activityInstance);
     activityInstance.setParent(null);
   }
-  
+
   public List<ActivityInstanceImpl> findActivityInstances(String activityId) {
     List<ActivityInstanceImpl> foundActivityInstances = new ArrayList<ActivityInstanceImpl>();
     collectActivityInstances(foundActivityInstances, activityId);
@@ -210,4 +210,5 @@ public boolean isEnded() {
   public void setEnded(boolean isEnded) {
     this.isEnded = isEnded;
   }
+
 }

File: modules/activiti-pvm/src/main/java/org/activiti/pvm/runtime/PvmScopeInstance.java
Patch:
@@ -30,4 +30,6 @@ public interface PvmScopeInstance {
   Map<String, Object> getVariables();
 
   PvmScopeInstance getParent();
+  
+  boolean isEnded();
 }

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/management/TableDataGet.java
Patch:
@@ -21,15 +21,15 @@
 import java.util.Map;
 
 /**
- * Returns data, metadata and paging info about a table.
+ * Returns signalData, metadata and paging info about a table.
  *
  * @author Erik Winl�f
  */
 public class TableDataGet extends ActivitiWebScript
 {
 
   /**
-   * Prepares data, metadata and paging info about a table for the webscript template.
+   * Prepares signalData, metadata and paging info about a table for the webscript template.
    *
    * @param req The webscripts request
    * @param status The webscripts status

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/management/TableGet.java
Patch:
@@ -20,15 +20,15 @@
 import org.springframework.extensions.webscripts.WebScriptRequest;
 
 /**
- * Returns data, metadata and paging info about a table.
+ * Returns signalData, metadata and paging info about a table.
  *
  * @author Erik Winl�f
  */
 public class TableGet extends ActivitiWebScript
 {
 
   /**
-   * Prepares data, metadata and paging info about a table for the webscript template.
+   * Prepares signalData, metadata and paging info about a table for the webscript template.
    *
    * @param req The webscripts request
    * @param status The webscripts status

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfiguration.java
Patch:
@@ -55,6 +55,7 @@
 import org.activiti.engine.impl.persistence.db.DbIdentitySessionFactory;
 import org.activiti.engine.impl.persistence.db.DbManagementSessionFactory;
 import org.activiti.engine.impl.persistence.db.DbRepositorySessionFactory;
+import org.activiti.engine.impl.persistence.db.DbRuntimeSessionFactory;
 import org.activiti.engine.impl.persistence.db.DbSqlSession;
 import org.activiti.engine.impl.persistence.db.DbSqlSessionFactory;
 import org.activiti.engine.impl.persistence.db.DbTaskSessionFactory;
@@ -132,7 +133,7 @@ public ProcessEngineConfiguration() {
 
     sessionFactories = new HashMap<Class<?>, SessionFactory>();
     sessionFactories.put(RepositorySession.class, new DbRepositorySessionFactory());
-    sessionFactories.put(RuntimeSession.class, new DbRepositorySessionFactory());
+    sessionFactories.put(RuntimeSession.class, new DbRuntimeSessionFactory());
     sessionFactories.put(TaskSession.class, new DbTaskSessionFactory());
     sessionFactories.put(IdentitySession.class, new DbIdentitySessionFactory());
     sessionFactories.put(ManagementSession.class, new DbManagementSessionFactory());

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbManagementSession.java
Patch:
@@ -44,7 +44,8 @@ public class DbManagementSession implements ManagementSession, Session {
     "ACT_PROPERTY",
     "ACT_BYTEARRAY",
     "ACT_DEPLOYMENT",
-    "ACT_EXECUTION",
+    "ACT_RNT_PROCESSINSTANCE",
+    "ACT_RNT_ACTIVITYINSTANCE",
     "ACT_ID_GROUP",
     "ACT_ID_MEMBERSHIP",
     "ACT_ID_USER",

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/history/HistoricActivityInstanceEntity.java
Patch:
@@ -21,17 +21,17 @@
 /**
  * @author Christian Stettler
  */
-public class HistoricActivityInstanceImpl extends HistoricScopeInstanceImpl implements HistoricActivityInstance {
+public class HistoricActivityInstanceEntity extends HistoricScopeInstanceEntity implements HistoricActivityInstance {
 
   private String activityId;
   private String activityName;
   private String activityType;
 
-  protected HistoricActivityInstanceImpl() {
+  protected HistoricActivityInstanceEntity() {
     // for ibatis
   }
 
-  public HistoricActivityInstanceImpl(String activityId, String activityName, String activityType, String processInstanceId, String processDefinitionId, Date startTime) {
+  public HistoricActivityInstanceEntity(String activityId, String activityName, String activityType, String processInstanceId, String processDefinitionId, Date startTime) {
     super(processInstanceId, processDefinitionId, startTime);
 
     if (activityId == null) {

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/history/HistoricProcessInstanceEntity.java
Patch:
@@ -22,15 +22,15 @@
 /**
  * @author Christian Stettler
  */
-public class HistoricProcessInstanceImpl extends HistoricScopeInstanceImpl implements HistoricProcessInstance {
+public class HistoricProcessInstanceEntity extends HistoricScopeInstanceEntity implements HistoricProcessInstance {
 
   private String endStateName;
 
-  protected HistoricProcessInstanceImpl() {
+  protected HistoricProcessInstanceEntity() {
     // for ibatis
   }
 
-  public HistoricProcessInstanceImpl(String processInstanceId, String processDefinitionId, Date startTime) {
+  public HistoricProcessInstanceEntity(String processInstanceId, String processDefinitionId, Date startTime) {
     super(processInstanceId, processDefinitionId, startTime);
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/history/HistoricScopeInstanceEntity.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Christian Stettler
  */
-public abstract class HistoricScopeInstanceImpl implements PersistentObject {
+public abstract class HistoricScopeInstanceEntity implements PersistentObject {
 
   private String id;
   protected String processInstanceId;
@@ -32,11 +32,11 @@ public abstract class HistoricScopeInstanceImpl implements PersistentObject {
   protected Date endTime;
   protected Long durationInMillis;
 
-  protected HistoricScopeInstanceImpl() {
+  protected HistoricScopeInstanceEntity() {
     // for ibatis
   }
 
-  protected HistoricScopeInstanceImpl(String processInstanceId, String processDefinitionId, Date startTime) {
+  protected HistoricScopeInstanceEntity(String processInstanceId, String processDefinitionId, Date startTime) {
     if (processInstanceId == null) {
       throw new IllegalArgumentException("Process instance id must not be null");
     }

File: modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/task/TaskEntity.java
Patch:
@@ -298,6 +298,7 @@ public void setRevision(int revision) {
     this.revision = revision;
   }
 
+  @SuppressWarnings("unchecked")
   public Map<String, Object> getActivityInstanceVariables() {
     if (activityInstance!=null) {
       return activityInstance.getVariables();

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/ContentRepresentation.java
Patch:
@@ -76,7 +76,7 @@ public byte[] getContent() {
   }
   
   public String getContentAsString() {
-    return content.toString();
+    return new String(content);
   }
 
   public void setContent(String text) {

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/RepositoryNodeMetadata.java
Patch:
@@ -33,7 +33,7 @@ public class RepositoryNodeMetadata {
 	
 	private String lastAuthor;
 	
-	private int version;
+	private String version;
 	 // ...?
 
 	/**
@@ -109,11 +109,11 @@ public void setLastAuthor(String lastAuthor) {
 		this.lastAuthor = lastAuthor;
 	}
 
-	public int getVersion() {
+	public String getVersion() {
 		return version;
 	}
 
-	public void setVersion(int version) {
+	public void setVersion(String version) {
 		this.version = version;
 	}
 }

File: modules/activiti-cycle/src/main/java/org/activiti/cycle/RepositoryNode.java
Patch:
@@ -75,7 +75,7 @@ public RepositoryConnector getConnector() {
   }
 
   public String toString() {
-    return this.getClass() + " [id=" + id + ";metadata=" + metadata + "]";
+    return this.getClass().getSimpleName() + " [id=" + id + ";metadata=" + metadata + "]";
   }
 
   public boolean isDetailsFetched() {

File: modules/activiti-engine/src/main/java/org/activiti/impl/interceptor/CommandContext.java
Patch:
@@ -105,7 +105,6 @@ public void close() {
           }
 
           if (exception != null) {
-            exception.printStackTrace();
             transactionContext.rollback();
           }
         }
@@ -152,7 +151,7 @@ public void exception(Throwable exception) {
     if (this.exception == null) {
       this.exception = exception;
     } else {
-      log.log(Level.SEVERE, "exception in command context", exception);
+      log.log(Level.SEVERE, "masked exception in command context. for root cause, see below as it will be rethrown later.", exception);
     }
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/impl/interceptor/DefaultCommandContext.java
Patch:
@@ -86,6 +86,7 @@ public void close() {
           }
 
           if (exception != null) {
+            exception.printStackTrace();
             transactionContext.rollback();
           }
         }

File: modules/activiti-engine/src/main/java/org/activiti/impl/jobexecutor/JobExecutor.java
Patch:
@@ -77,6 +77,7 @@ public synchronized void start() {
       }
       if (threadPoolExecutor==null) {
         threadPoolExecutor = new ThreadPoolExecutor(corePoolSize, maxPoolSize, 0L, TimeUnit.MILLISECONDS, threadPoolQueue);
+        threadPoolExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
       }
       
       // Create our pending jobs fetcher

File: modules/activiti-engine/src/main/java/org/activiti/impl/jobexecutor/JobExecutor.java
Patch:
@@ -130,6 +130,7 @@ public void jobWasAdded() {
   }
   
   public void executeJobs(List<String> jobIds) {
+    // TODO: RejectedExecutionException handling!
     threadPoolExecutor.execute(new ExecuteJobsRunnable(commandExecutor, jobIds, jobHandlers, this));
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisPersistenceSessionFactory.java
Patch:
@@ -91,6 +91,7 @@ public class IbatisPersistenceSessionFactory implements PersistenceSessionFactor
     statements.add("selectJobs");
     statements.add("selectNextJobsToExecute");
     statements.add("selectUnlockedTimersByDuedate");
+    statements.add("selectLockedJobs");
     statements.add("selectTimersByExecutionId");
     statements.add("selectUser");
     statements.add("selectUsersByGroup");

File: modules/activiti-engine/src/main/java/org/activiti/impl/persistence/PersistenceSession.java
Patch:
@@ -103,9 +103,10 @@ public interface PersistenceSession extends Session {
   /* Job */
   JobImpl findJobById(String jobId);
   List<JobImpl> findJobs();
-  List<JobImpl> findNextJobsToExecute(int maxJobsPerAcquisition);
+  List<JobImpl> findNextJobsToExecute(int maxNrOfJobs);
   List<TimerImpl> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
   List<TimerImpl> findTimersByExecutionId(String executionId);
+  List<JobImpl> findLockedJobs();
   
   List<Job> dynamicFindJobs(Map<String, Object> params, Page page);
   long dynamicJobCount(Map<String, Object> params);

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -39,6 +39,8 @@ public class BoundaryTimerEventTest {
   @Test
   @ProcessDeclared
   public void testInterruptingTimerDuration() {
+    
+    Date startTime = new Date();
 
     // Start process instance
     ProcessInstance pi = deployer.getProcessService().startProcessInstanceByKey("interruptingBoundaryTimer");
@@ -48,7 +50,7 @@ public void testInterruptingTimerDuration() {
     assertEquals("First line support", task.getName());
 
     // Set clock to the future such that the timer can fire
-    Clock.setCurrentTime(new Date(System.currentTimeMillis() + (5 * 60 * 60 * 1000)));
+    Clock.setCurrentTime(new Date(startTime.getTime() + (5 * 60 * 60 * 1000)));
     new JobExecutorPoller(deployer.getJobExecutor(), deployer.getCommandExecutor()).waitForJobExecutorToProcessAllJobs(10000L, 250);
 
     // The timer has fired, and the second task (secondlinesupport) now exists

File: modules/activiti-engine/src/main/java/org/activiti/impl/definition/ActivityImpl.java
Patch:
@@ -85,7 +85,7 @@ public ActivityImpl getParentActivity() {
   }
 
   public String toString() {
-    return "activity[" + getId() + "]";
+    return "activity(" + getId() + ")";
   }
 
   // public getters and setters

File: modules/activiti-engine/src/main/java/org/activiti/impl/execution/ExeOpTransitionNotifyListenerTake.java
Patch:
@@ -45,7 +45,7 @@ public void execute(ExecutionImpl execution) {
     } else {
       execution.setEventListenerIndex(0);
       ActivityImpl activity = execution.getActivity();
-      ActivityImpl nextScope = findNextScope(activity, transition.getDestination());
+      ActivityImpl nextScope = findNextScope(activity.getParent(), transition.getDestination());
       execution.setActivity(nextScope);
       execution.performOperation(TRANSITION_CREATE_SCOPE);
     }

File: modules/activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisPersistenceSessionFactory.java
Patch:
@@ -152,6 +152,7 @@ public class IbatisPersistenceSessionFactory implements PersistenceSessionFactor
     // e.g. addDatabaseSpecificStatement("oracle", "selectExecution",
     // "selectExecution_oracle");
     addDatabaseSpecificStatement("mysql", "selectTaskByDynamicCriteria", "selectTaskByDynamicCriteria_mysql");
+    addDatabaseSpecificStatement("mysql", "selectNextJobsToExecute", "selectNextJobsToExecute_mysql");
   }
 
   protected static void addDatabaseSpecificStatement(String databaseName, String activitiStatement, String ibatisStatement) {

File: modules/activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisPersistenceSessionFactory.java
Patch:
@@ -89,7 +89,7 @@ public class IbatisPersistenceSessionFactory implements PersistenceSessionFactor
     statements.add("selectJob");
     statements.add("selectJobs");
     statements.add("selectNextJobsToExecute");
-    statements.add("selectFirstTimer");
+    statements.add("selectUnlockedTimersByDuedate");
     statements.add("selectTimersByExecutionId");
     statements.add("selectUser");
     statements.add("selectUsersByGroup");

File: modules/activiti-engine/src/main/java/org/activiti/impl/persistence/PersistenceSession.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.impl.persistence;
 
+import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -102,7 +103,7 @@ public interface PersistenceSession extends Session {
   JobImpl findJobById(String jobId);
   List<JobImpl> findJobs();
   List<JobImpl> findNextJobsToExecute(int maxJobsPerAcquisition);
-  TimerImpl findFirstTimer();
+  List<TimerImpl> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
   List<TimerImpl> findTimersByExecutionId(String executionId);
   
   List<Job> dynamicFindJobs(Map<String, Object> params, Page page);

File: modules/activiti-engine/src/main/java/org/activiti/test/JobExecutorPoller.java
Patch:
@@ -65,7 +65,7 @@ public void waitForJobExecutorToProcessAllJobs(long maxMillisToWait, long interv
   }
 
   private boolean areJobsAvailable() {
-     Boolean areJobsAvailable = commandExecutor.execute(new Command<Boolean>() {
+    Boolean areJobsAvailable = commandExecutor.execute(new Command<Boolean>() {
       public Boolean execute(CommandContext commandContext) {
         return !commandContext.getPersistenceSession().findNextJobsToExecute(1).isEmpty();
       }

File: modules/activiti-engine-test-cfg/src/test/java/org/activiti/test/cfg/spring/SpringTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.transaction.PlatformTransactionManager;
@@ -84,6 +85,7 @@ public Object doInTransaction(TransactionStatus status) {
   }
 
   @Test
+  @DirtiesContext
   public void testSaveDeployment() {
 
     String resource = ClassUtils.addResourcePathToPackagePath(getClass(), "testProcess.bpmn20.xml");

File: modules/activiti-engine/src/main/java/org/activiti/DbProcessEngineBuilder.java
Patch:
@@ -241,7 +241,7 @@ public ProcessEngine buildProcessEngine() {
     
 
     persistenceSessionFactory = new IbatisPersistenceSessionFactory(processEngineConfiguration.getVariableTypes(), idGenerator, databaseName, jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);
-    persistenceSessionFactory = new CachingPersistenceSessionFactory(persistenceSessionFactory, Thread.currentThread().getContextClassLoader());
+    persistenceSessionFactory = new CachingPersistenceSessionFactory(persistenceSessionFactory, processEngineConfiguration.getDeployerManager(), Thread.currentThread().getContextClassLoader());
     processEngineConfiguration.setPersistenceSessionFactory(persistenceSessionFactory);
 
     return processEngineConfiguration.buildProcessEngine();

File: modules/activiti-engine/src/main/java/org/activiti/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -39,15 +39,15 @@ public StartProcessInstanceCmd(String processDefinitionKey, String processDefini
   }
   
   public ProcessInstance execute(CommandContext commandContext) {
-    PersistenceSession processCache = commandContext.getPersistenceSession();
+    PersistenceSession persistenceSession = commandContext.getPersistenceSession();
     ProcessDefinitionImpl processDefinition = null;
     if (processDefinitionId!=null) {
-      processDefinition = processCache.findProcessDefinitionById(processDefinitionId);
+      processDefinition = persistenceSession.findProcessDefinitionById(processDefinitionId);
       if (processDefinition == null) {
         throw new ActivitiException("No process definition found for id = '" + processDefinitionId + "'");
       }
     } else {
-      processDefinition = processCache.findLatestProcessDefinitionByKey(processDefinitionKey);
+      processDefinition = persistenceSession.findLatestProcessDefinitionByKey(processDefinitionKey);
       if (processDefinition == null) {
         throw new ActivitiException("No process definition found for key '" + processDefinitionKey +"'");
       }

File: modules/activiti-engine/src/main/java/org/activiti/impl/db/execution/DbExecutionImpl.java
Patch:
@@ -97,11 +97,8 @@ public class DbExecutionImpl extends ExecutionImpl implements PersistentObject {
 
   public static DbExecutionImpl createAndInsert(ProcessDefinitionDbImpl processDefinition) {
     DbExecutionImpl processInstance = new DbExecutionImpl(processDefinition);
-
     CommandContext.getCurrent().getPersistenceSession().insert(processInstance);
-
     processInstance.setProcessInstance(processInstance);
-
     return processInstance;
   }
 

File: modules/activiti-engine-test-cfg/src/test/java/org/activiti/test/db/ProcessEngineInitializationTest.java
Patch:
@@ -57,7 +57,7 @@ public void testNoTables() {
   public void testVersionMismatch() {
     // first create the schema
     ProcessEngineImpl processEngine = (ProcessEngineImpl) new DbProcessEngineBuilder().configureFromPropertiesResource(
-            "org/activiti/test/db/activiti.properties").setDbSchemaStrategy(DbSchemaStrategy.CREATE_DROP).buildProcessEngine();
+            "org/activiti/test/db/activiti.properties").setDbSchemaStrategy(DbSchemaStrategy.DROP_CREATE).buildProcessEngine();
 
     // then update the version to something that is different to the library
     // version

File: modules/activiti-engine-test-api/src/test/java/org/activiti/test/bpmn/sequenceflow/ConditionalSequenceFlowTest.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * @author Joram Barrez
  */
-public class ConditionalSequenceflowTest {
+public class ConditionalSequenceFlowTest {
   
   @Rule
   public LogInitializer logSetup = new LogInitializer();

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/FinancialReportProcessTest.java
Patch:
@@ -64,7 +64,7 @@ public void testProcess() {
     assertEquals(1, tasks.size());
     assertEquals("Verify monthly financial report", tasks.get(0).getName());
     deployer.getTaskService().complete(tasks.get(0).getId());
-    
+
     deployer.assertProcessEnded(processInstance.getId());
   }
 

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/taskassignee/TaskAssigneeTest.java
Patch:
@@ -54,6 +54,7 @@ public void testTaskAssignee() {
 
     // Complete task. Process is now finished
     deployer.getTaskService().complete(myTask.getId());
+    // assert if the process instance completed
     deployer.assertProcessEnded(processInstance.getId());
   }
 

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/FinancialReportProcessTest.java
Patch:
@@ -47,7 +47,6 @@ public void tearDown() throws Exception {
   public void testProcess() {
     
     ProcessInstance processInstance = deployer.getProcessService().startProcessInstanceByKey("financialReport");
-    deployer.assertProcessEnded(processInstance.getId());
     
     List<Task> tasks = deployer.getTaskService().findUnassignedTasks("fozzie");
     assertEquals(1, tasks.size());
@@ -65,6 +64,8 @@ public void testProcess() {
     assertEquals(1, tasks.size());
     assertEquals("Verify monthly financial report", tasks.get(0).getName());
     deployer.getTaskService().complete(tasks.get(0).getId());
+    
+    deployer.assertProcessEnded(processInstance.getId());
   }
 
 }

File: modules/activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/taskassignee/TaskAssigneeTest.java
Patch:
@@ -45,9 +45,6 @@ public void testTaskAssignee() {
     // Start process instance
     ProcessInstance processInstance = deployer.getProcessService().startProcessInstanceByKey("taskAssigneeProcess");
 
-    // assert if the process instance completed
-    deployer.assertProcessEnded(processInstance.getId());
-
     // Get task list
     List<Task> tasks = deployer.getTaskService().findAssignedTasks("kermit");
     assertEquals(1, tasks.size());
@@ -57,6 +54,7 @@ public void testTaskAssignee() {
 
     // Complete task. Process is now finished
     deployer.getTaskService().complete(myTask.getId());
+    deployer.assertProcessEnded(processInstance.getId());
   }
 
 }

File: modules/activiti-rest/src/main/java/org/activiti/rest/Config.java
Patch:
@@ -13,7 +13,7 @@
 package org.activiti.rest;
 
 /**
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class Config {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/engine/ProcessEngineGet.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Returns details about the process engine.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessEngineGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns details about a user.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class GroupGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupUsersGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns info about a groups's users.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class GroupUsersGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/LoginPost.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Authenticates username and password..
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class LoginPost extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/identity/UserGroupsGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns details about a user's groups.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class UserGroupsGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/management/TablesGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns details about all of the process engine's database tables.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TablesGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Returns a process definition's form.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessDefinitionFormGet extends ActivitiWebScript {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionGet.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Returns details about a process definition.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessDefinitionGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionsGet.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Returns details about the process definitions.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessDefinitionsGet extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Creates a new process instance base on a process definition id and returns details about the new process instance.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessInstancePost extends ActivitiWebScript
 {

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/tasks/TaskFormGet.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Returns a task's form.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TaskFormGet extends ActivitiWebScript {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/tasks/TaskGet.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Returns info about a task.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TaskGet extends ActivitiWebScript {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/api/tasks/TasksSummaryGet.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Creates a summary of a users tasks.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TasksSummaryGet extends ActivitiWebScript {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/auth/AbstractBasicHttpAuthenticatorFactory.java
Patch:
@@ -32,7 +32,7 @@
  * Extend this class and implement doAuthenticate and doAuthorize to authenticate and authorize against a specific
  * user store.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public abstract class AbstractBasicHttpAuthenticatorFactory implements ServletAuthenticatorFactory
 {
@@ -73,7 +73,7 @@ public Authenticator create(WebScriptServletRequest req, WebScriptServletRespons
   /**
    * HTTP Basic Authentication
    *
-   * @author Erik Winl�f
+   * @author Erik Winlöf
    */
   public class BasicHttpAuthenticator implements Authenticator {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/auth/ActivitiBasicHttpAuthenticatorFactory.java
Patch:
@@ -24,7 +24,7 @@
  * This class performs the authentication and authorization to make sure that the user that accesses the webscripts
  * has the right to do so.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiBasicHttpAuthenticatorFactory extends AbstractBasicHttpAuthenticatorFactory {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/auth/AuthenticationException.java
Patch:
@@ -13,7 +13,7 @@
 package org.activiti.rest.auth;
 
 /**
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class AuthenticationException extends RuntimeException {
 

File: modules/activiti-rest/src/main/java/org/activiti/rest/util/ActivitiWebScript.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Helper class for all activiti webscripts.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiWebScript extends DeclarativeWebScript {
 

File: modules/activiti-webapp/src/main/java/org/activiti/surf/ActivitiRESTAuthenticator.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Connects to a activiti rest endpoint's login webscript using json format.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiRESTAuthenticator extends AbstractAuthenticator
 {

File: modules/activiti-webapp/src/main/java/org/activiti/surf/ActivitiUser.java
Patch:
@@ -21,7 +21,7 @@
  * The Activiti user object that, besides the base user info, contains the users
  * security role groups and assignment groups.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiUser extends User {
 

File: modules/activiti-webapp/src/main/java/org/activiti/surf/ActivitiUserFactory.java
Patch:
@@ -34,7 +34,7 @@
  * The user is stored in the request context and can be fetched using context.getUser().
  * The user is also available in the root of the a script component context as 'user'.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiUserFactory extends AbstractUserFactory
 {

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/UserTaskActivity.java
Patch:
@@ -71,7 +71,7 @@ protected void handleAssignments(TaskImpl task, ActivityExecution execution) {
   protected String evaluateExpression(String expr, ActivityExecution execution) {
     ScriptingEngines scriptingEngines = CommandContext.getCurrent().getScriptingEngines();
     return (String) scriptingEngines.evaluate(expr, 
-            ScriptingEngines.DEFAULT_EXPRESSION_LANGUAGE, (ExecutionImpl) execution);
+            ScriptingEngines.DEFAULT_SCRIPTING_LANGUAGE, (ExecutionImpl) execution);
   }
 
   public void setTaskDefinition(TaskDefinition taskDefinition) {

File: modules/activiti-engine/src/main/java/org/activiti/impl/scripting/ScriptingEngines.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class ScriptingEngines {
   
-  public static final String DEFAULT_EXPRESSION_LANGUAGE =  "juel"; 
+  public static final String DEFAULT_SCRIPTING_LANGUAGE =  "juel"; 
 
   static ScriptingEngines defaultScriptingEngines = new ScriptingEngines(
     new ScriptEngineFactory[]{

File: modules/activiti-engine/src/test/java/org/activiti/test/pvm/activities/Join.java
Patch:
@@ -34,6 +34,7 @@ public void execute(ActivityExecution execution) {
     
     Activity joinActivity = execution.getActivity();
     List<ActivityExecution> joinedExecutions = new ArrayList<ActivityExecution>();
+    
     ExecutionController executionController = execution.getExecutionController();
     List<? extends ActivityExecution> concurrentExecutions = executionController.getExecutions();
     for (ActivityExecution concurrentExecution: concurrentExecutions) {

File: modules/activiti-engine/src/main/java/org/activiti/impl/jobexecutor/AcquireJobsCmd.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.impl.interceptor.CommandContext;
 import org.activiti.impl.job.JobImpl;
 import org.activiti.impl.persistence.PersistenceSession;
+import org.activiti.impl.time.Clock;
 
 
 /**
@@ -46,6 +47,7 @@ public AcquiredJobs execute(CommandContext commandContext) {
       if (job != null) {
         job.setLockOwner(lockOwner);
         GregorianCalendar gregorianCalendar = new GregorianCalendar();
+        gregorianCalendar.setTime(Clock.getCurrentTime());
         gregorianCalendar.add(Calendar.MILLISECOND, lockTimeInMillis);
         job.setLockExpirationTime(gregorianCalendar.getTime());
         jobIds.add(job.getId());

File: modules/activiti-engine/src/main/java/org/activiti/impl/time/Clock.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class Clock {
   
-  protected static Date CURRENT_TIME = null;
+  private volatile static Date CURRENT_TIME = null;
   
   public static void setCurrentTime(Date currentTime) {
     Clock.CURRENT_TIME = currentTime;

File: modules/activiti-engine/src/main/java/org/activiti/DbProcessEngineBuilder.java
Patch:
@@ -244,6 +244,7 @@ public ProcessEngine buildProcessEngine() {
     if (jdbcPassword == null) {
       throw new ActivitiException("no jdbc password specified");
     }
+    
 
     persistenceSessionFactory = new IbatisPersistenceSessionFactory(idGenerator, databaseName, jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);
     processEngineConfiguration.setPersistenceSessionFactory(persistenceSessionFactory);

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/BoundaryTimerEventActivity.java
Patch:
@@ -33,7 +33,7 @@ public void execute(ActivityExecution execution) throws Exception {
       throw new ActivitiException("Non-interrupting boundary timer event not yet implemented");
     }
     
-    leave(execution, true);
+    leave(execution);
   }
 
   public boolean isInterrupting() {

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/NoneEndEventActivity.java
Patch:
@@ -21,7 +21,7 @@
 public class NoneEndEventActivity extends BpmnActivity {
   
   public void execute(ActivityExecution execution) throws Exception {
-    execution.end(); // todo: implement for subprocesses / on the border etc.
+    execution.getExecutionController().end(); // todo: implement for subprocesses / on the border etc.
   }
 
 }

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/ScriptTaskActivity.java
Patch:
@@ -39,7 +39,7 @@ public ScriptTaskActivity(String script, String language) {
   
   public void execute(ActivityExecution execution) throws Exception {
     ScriptingEngines.getScriptingEngines().evaluate(script, language, (ExecutionImpl) execution);
-    leave(execution, true);
+    leave(execution);
   }
 
   public void setScript(String script) {

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/UserTaskActivity.java
Patch:
@@ -47,7 +47,7 @@ public void execute(ActivityExecution execution) throws Exception {
   }
   
   public void event(ActivityExecution execution, Object event) throws Exception {
-    leave(execution, true);
+    leave(execution);
   }
   
   protected void handleAssignments(TaskImpl task, ActivityExecution execution) {

File: modules/activiti-engine/src/main/java/org/activiti/pvm/EventActivityBehavior.java
Patch:
@@ -19,4 +19,5 @@
 public interface EventActivityBehavior extends ActivityBehavior {
 
   void event(ActivityExecution execution, Object event) throws Exception;
+  
 }

File: modules/activiti-engine/src/test/java/org/activiti/test/pvm/activities/Fork.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.pvm.ActivityBehavior;
 import org.activiti.pvm.ActivityExecution;
-import org.activiti.pvm.ConcurrencyController;
+import org.activiti.pvm.ExecutionController;
 import org.activiti.pvm.Transition;
 
 
@@ -24,9 +24,9 @@
 public class Fork implements ActivityBehavior {
 
   public void execute(ActivityExecution execution) {
-    execution.end();
+    execution.getExecutionController().end();
 
-    ConcurrencyController scopeInstance = execution.getConcurrencyController();
+    ExecutionController scopeInstance = execution.getExecutionController();
     for (Transition transition: execution.getOutgoingTransitions()) {
       ActivityExecution concurrentExecution = scopeInstance.createExecution();
       concurrentExecution.take(transition);

File: modules/activiti-engine/src/main/java/org/activiti/DbProcessEngineBuilder.java
Patch:
@@ -181,6 +181,8 @@ public DbProcessEngineBuilder configureFromProperties(Properties configurationPr
     if (dbSchemaStrategy!=null) {
       if ("create-drop".equals(dbSchemaStrategy)) {
         this.dbSchemaStrategy = DbSchemaStrategy.CREATE_DROP;
+      } else if ("create".equals(dbSchemaStrategy)) { 
+        this.dbSchemaStrategy = DbSchemaStrategy.CREATE;
       } else if ("check-version".equals(dbSchemaStrategy)) {
         this.dbSchemaStrategy = DbSchemaStrategy.CHECK_VERSION;
       } else {

File: modules/activiti-engine/src/main/java/org/activiti/impl/ProcessEngineImpl.java
Patch:
@@ -52,7 +52,8 @@ public ProcessEngineImpl(ProcessEngineConfiguration processEngineConfiguration)
     this.jobExecutor = processEngineConfiguration.getJobExecutor();
     this.persistenceSessionFactory = processEngineConfiguration.getPersistenceSessionFactory();
 
-    if (DbSchemaStrategy.CREATE_DROP==dbSchemaStrategy) {
+    if (DbSchemaStrategy.CREATE_DROP==dbSchemaStrategy 
+            || DbSchemaStrategy.CREATE==dbSchemaStrategy) {
       persistenceSessionFactory.dbSchemaCreate();
     } else if (DbSchemaStrategy.CHECK_VERSION==dbSchemaStrategy) {
       persistenceSessionFactory.dbSchemaCheckVersion();

File: modules/activiti-engine-test-api/src/test/java/org/activiti/test/jobexecutor/JobExecutorCmdHappyTest.java
Patch:
@@ -37,7 +37,7 @@ public class JobExecutorCmdHappyTest extends JobExecutorTestCase {
 
   @Test
   public void testJobCommandsWithMessage() {
-    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) processEngineBuilder.getProcessEngine();
+    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) deployer.getProcessEngine();
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutor();
     String jobId = commandExecutor.execute(new Command<String>() {
 
@@ -74,7 +74,7 @@ public void testJobCommandsWithTimer() {
     // clock gets automatically reset in LogTestCase.runTest
     Clock.setCurrentTime(new Date(SOME_TIME));
 
-    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) processEngineBuilder.getProcessEngine();
+    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) deployer.getProcessEngine();
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutor();
     String jobId = commandExecutor.execute(new Command<String>() {
 

File: modules/activiti-engine-test-api/src/test/java/org/activiti/test/jobexecutor/JobExecutorTest.java
Patch:
@@ -36,7 +36,7 @@ public class JobExecutorTest extends JobExecutorTestCase {
 
   @Test
   public void testBasicJobExecutorOperation() throws Exception {
-    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl)processEngineBuilder.getProcessEngine();
+    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl)deployer.getProcessEngine();
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutor();
     commandExecutor.execute(new Command<Void>() {
       public Void execute(CommandContext commandContext) {
@@ -53,7 +53,7 @@ public Void execute(CommandContext commandContext) {
       }
     });
     
-    new JobExecutorPoller(processEngineBuilder.getProcessEngine()).waitForJobExecutorToProcessAllJobs(8000, 200);
+    new JobExecutorPoller(deployer.getProcessEngine()).waitForJobExecutorToProcessAllJobs(8000, 200);
     
     Set<String> messages = new HashSet<String>(tweetHandler.getMessages());
     Set<String> expectedMessages = new HashSet<String>();

File: modules/activiti-engine-test-api/src/test/java/org/activiti/test/bpmn/parse/InvalidProcessTest.java
Patch:
@@ -33,7 +33,7 @@ public class InvalidProcessTest extends ActivitiTestCase {
   public void testInvalidProcessDefinition() {
     exception.expect(ActivitiException.class);
     exception.expectMessage("Attribute 'invalidAttribute' is not allowed to appear in element 'process'");
-    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
+    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), getClass().getSimpleName()+".testInvalidProcessDefinition.bpmn20.xml");
     processEngine.getProcessService().createDeployment().name(resource).addClasspathResource(resource).deploy();
   }
 

File: modules/activiti-engine-test-api/src/test/java/org/activiti/test/bpmn/usertask/TaskAssignmentExtensionsTest.java
Patch:
@@ -73,7 +73,7 @@ public void testAssigneeExtension() {
   public void testDuplicateAssigneeDeclaration() {
     exception.expect(ActivitiException.class);
     exception.expectMessage("duplicate assignee declaration for task");
-    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
+    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), getClass().getSimpleName()+".testDuplicateAssigneeDeclaration.bpmn20.xml");
     processEngine.getProcessService().createDeployment().name(resource).addClasspathResource(resource).deploy();
   }
 

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/BpmnActivity.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.logging.Logger;
 
 import org.activiti.pvm.ActivityExecution;
-import org.activiti.pvm.ConcurrencyScope;
+import org.activiti.pvm.ConcurrencyController;
 import org.activiti.pvm.EventActivityBehavior;
 import org.activiti.pvm.Transition;
 
@@ -68,13 +68,13 @@ protected void leave(ActivityExecution execution, boolean checkConditions) {
 
       Map<ActivityExecution, Transition> childExecutionMapping 
           = new LinkedHashMap<ActivityExecution, Transition>(); // Linked? -> order is important
-      ConcurrencyScope scopeInstance = execution.getConcurrencyScope();
+      ConcurrencyController concurrencyController = execution.getConcurrencyController();
       
       for (Transition outSeqFlow: outgoingSequenceFlow) {
         if (outSeqFlow.getCondition() == null 
                 || !checkConditions 
                 || outSeqFlow.getCondition().evaluate(execution)) {
-          ActivityExecution concurrentExecution = scopeInstance.createExecution();
+          ActivityExecution concurrentExecution = concurrencyController.createExecution();
           childExecutionMapping.put(concurrentExecution, outSeqFlow);
         }
       }

File: modules/activiti-engine/src/main/java/org/activiti/impl/bpmn/ParallelGatewayActivity.java
Patch:
@@ -62,7 +62,7 @@ public void execute(ActivityExecution execution) throws Exception {
       Activity joinActivity = execution.getActivity();
       List<ActivityExecution> joinedExecutions = new ArrayList<ActivityExecution>();
       
-      List<? extends ActivityExecution> concurrentExecutions = execution.getConcurrencyScope().getExecutions();
+      List<? extends ActivityExecution> concurrentExecutions = execution.getConcurrencyController().getExecutions();
       for (ActivityExecution concurrentExecution: concurrentExecutions) {
         if (concurrentExecution.getActivity().equals(joinActivity)) {
           joinedExecutions.add(concurrentExecution);
@@ -90,7 +90,7 @@ protected void fork(ActivityExecution execution) {
   }
   
   protected ActivityExecution join(ActivityExecution execution, List<ActivityExecution> joinedExecutions) {
-    ActivityExecution outgoingExecution = execution.getConcurrencyScope().createExecution();
+    ActivityExecution outgoingExecution = execution.getConcurrencyController().createExecution();
     outgoingExecution.setActivity(execution.getActivity());
     
     for (ActivityExecution joinedExecution: joinedExecutions) {

