File: main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java
Patch:
@@ -72,12 +72,12 @@ public static MultiValuedCellSplitOperation deserialize(
             @JsonProperty("separator") String separator,
             @JsonProperty("regex") boolean regex,
             @JsonProperty("fieldLengths") int[] fieldLengths) {
-        if ("separator".equals(mode)) {
+        if ("separator".equals(mode) || "plain".equals(mode) || "regex".equals(mode)) {
             return new MultiValuedCellSplitOperation(
                     columnName,
                     keyColumnName,
                     separator,
-                    regex);
+                    regex || "regex".equals(mode));
         } else {
             return new MultiValuedCellSplitOperation(
                     columnName,

File: main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java
Patch:
@@ -195,6 +195,6 @@ public boolean visit(Project project, int rowIndex, Row row) {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return OperationDescription.recon_copy_across_columns_brief(_fromColumnName, StringUtils.join(_toColumnNames));
+        return OperationDescription.recon_copy_across_columns_brief(_fromColumnName, StringUtils.join(_toColumnNames, ", "));
     }
 }

File: main/tests/server/src/com/google/refine/operations/cell/BlankDownTests.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
@@ -51,6 +52,7 @@
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -122,7 +124,7 @@ public void tearDown() {
     @Test
     public void serializeBlankDownOperation() throws Exception {
         String json = "{\"op\":\"core/blank-down\","
-                + "\"description\":\"Blank down cells in column my column\","
+                + "\"description\":" + new TextNode(OperationDescription.cell_blank_down_brief("my column")).toString() + ","
                 + "\"engineConfig\":{\"mode\":\"record-based\",\"facets\":[]},"
                 + "\"columnName\":\"my column\"}";
         AbstractOperation op = ParsingUtilities.mapper.readValue(json, BlankDownOperation.class);

File: main/tests/server/src/com/google/refine/operations/cell/FillDownTests.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
@@ -51,6 +52,7 @@
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -110,7 +112,7 @@ public void tearDown() {
     @Test
     public void serializeFillDownOperation() throws Exception {
         String json = "{\"op\":\"core/fill-down\","
-                + "\"description\":\"Fill down cells in column my key\","
+                + "\"description\":" + new TextNode(OperationDescription.cell_fill_down_brief("my key")).toString() + ","
                 + "\"engineConfig\":{\"mode\":\"record-based\",\"facets\":[]},"
                 + "\"columnName\":\"my key\"}";
         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, FillDownOperation.class), json);

File: main/tests/server/src/com/google/refine/operations/cell/MassOperationTests.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.List;
 
 import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -50,6 +51,7 @@
 import com.google.refine.expr.MetaParser;
 import com.google.refine.grel.Parser;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.cell.MassEditOperation.Edit;
 import com.google.refine.util.ParsingUtilities;
@@ -78,7 +80,7 @@ public void setUp() {
     @Test
     public void serializeMassEditOperation() throws Exception {
         String json = "{\"op\":\"core/mass-edit\","
-                + "\"description\":\"Mass edit cells in column my column\","
+                + "\"description\":" + new TextNode(OperationDescription.cell_mass_edit_brief("my column")).toString() + ","
                 + "\"engineConfig\":{\"mode\":\"record-based\",\"facets\":[]},"
                 + "\"columnName\":\"my column\",\"expression\":\"value\","
                 + "\"edits\":[{\"fromBlank\":false,\"fromError\":false,\"from\":[\"String\"],\"to\":\"newString\"}]}";

File: main/tests/server/src/com/google/refine/operations/cell/MultiValuedCellJoinOperationTests.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.io.Serializable;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.slf4j.LoggerFactory;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
@@ -46,6 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -90,7 +92,7 @@ public void createProject() {
     @Test
     public void serializeMultiValuedCellJoinOperation() throws Exception {
         String json = "{\"op\":\"core/multivalued-cell-join\","
-                + "\"description\":\"Join multi-valued cells in column value column\","
+                + "\"description\":" + new TextNode(OperationDescription.cell_multivalued_cell_join_brief("value column")).toString() + ","
                 + "\"columnName\":\"value column\","
                 + "\"keyColumnName\":\"key column\","
                 + "\"separator\":\",\"}";

File: main/tests/server/src/com/google/refine/operations/column/ColumnMoveOperationTests.java
Patch:
@@ -29,13 +29,15 @@
 
 import java.io.Serializable;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -65,7 +67,7 @@ public void setUp() {
     @Test
     public void serializeColumnMoveOperation() throws Exception {
         String json = "{\"op\":\"core/column-move\","
-                + "\"description\":\"Move column my column to position 3\","
+                + "\"description\":" + new TextNode(OperationDescription.column_move_brief("my column", 3)).toString() + ","
                 + "\"columnName\":\"my column\","
                 + "\"index\":3}";
         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnMoveOperation.class), json);

File: main/tests/server/src/com/google/refine/operations/column/ColumnRemovalOperationTests.java
Patch:
@@ -29,13 +29,15 @@
 
 import java.io.Serializable;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -65,7 +67,7 @@ public void setUp() {
     @Test
     public void serializeColumnRemovalOperation() throws Exception {
         String json = "{\"op\":\"core/column-removal\","
-                + "\"description\":\"Remove column my column\","
+                + "\"description\":" + new TextNode(OperationDescription.column_removal_brief("my column")).toString() + ","
                 + "\"columnName\":\"my column\"}";
         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnRemovalOperation.class), json);
     }

File: main/tests/server/src/com/google/refine/operations/column/ColumnRenameOperationTests.java
Patch:
@@ -29,6 +29,7 @@
 
 import java.io.Serializable;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
@@ -37,6 +38,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -66,7 +68,7 @@ public void setUp() {
     @Test
     public void serializeColumnRenameOperation() throws Exception {
         String json = "{\"op\":\"core/column-rename\","
-                + "\"description\":\"Rename column old name to new name\","
+                + "\"description\":" + new TextNode(OperationDescription.column_rename_brief("old name", "new name")).toString() + ","
                 + "\"oldColumnName\":\"old name\","
                 + "\"newColumnName\":\"new name\"}";
         AbstractOperation op = ParsingUtilities.mapper.readValue(json, AbstractOperation.class);

File: main/tests/server/src/com/google/refine/operations/column/ColumnReorderOperationTests.java
Patch:
@@ -30,6 +30,7 @@
 import java.io.Serializable;
 import java.util.Arrays;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
@@ -38,6 +39,7 @@
 import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.TestUtils;
 
@@ -64,7 +66,7 @@ public void createProject() {
     public void serializeColumnReorderOperation() {
         AbstractOperation op = new ColumnReorderOperation(Arrays.asList("b", "c", "a"));
         TestUtils.isSerializedTo(op, "{\"op\":\"core/column-reorder\","
-                + "\"description\":\"Reorder columns\","
+                + "\"description\":" + new TextNode(OperationDescription.column_reorder_brief()).toString() + ","
                 + "\"columnNames\":[\"b\",\"c\",\"a\"]}");
     }
 

File: main/tests/server/src/com/google/refine/operations/recon/ReconUseValuesAsIdsOperationTests.java
Patch:
@@ -32,12 +32,14 @@
 
 import java.io.Serializable;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
 import com.google.refine.model.recon.StandardReconConfig;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -46,7 +48,7 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {
 
     String json = "{"
             + "\"op\":\"core/recon-use-values-as-identifiers\","
-            + "\"description\":\"Use values as reconciliation identifiers in column ids\","
+            + "\"description\":" + new TextNode(OperationDescription.recon_use_values_as_identifiers_brief("ids")).toString() + ","
             + "\"columnName\":\"ids\","
             + "\"engineConfig\":{\"mode\":\"row-based\",\"facets\":[]},"
             + "\"service\":\"http://localhost:8080/api\","

File: main/tests/server/src/com/google/refine/operations/row/RowAdditionOperationTests.java
Patch:
@@ -35,6 +35,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.slf4j.LoggerFactory;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
@@ -43,6 +44,7 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.model.Row;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -62,7 +64,7 @@ public void setUp() {
                 + "\"op\":\"core/row-addition\","
                 + "\"rows\":[{\"starred\":false,\"flagged\":false,\"cells\":[]},{\"starred\":false,\"flagged\":false,\"cells\":[]}],"
                 + "\"index\":0,"
-                + "\"description\":\"Add rows\"}";
+                + "\"description\":" + new TextNode(OperationDescription.row_addition_brief()).toString() + "}";
     }
 
     @Override

File: main/tests/server/src/com/google/refine/operations/row/RowFlagOperationTests.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -46,6 +47,7 @@
 import com.google.refine.expr.MetaParser;
 import com.google.refine.grel.Parser;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -91,7 +93,7 @@ public void createProject() {
     public void serializeRowFlagOperation() throws Exception {
         String json = "{"
                 + "\"op\":\"core/row-flag\","
-                + "\"description\":\"Flag rows\","
+                + "\"description\":" + new TextNode(OperationDescription.row_flag_brief()).toString() + ","
                 + "\"flagged\":true,"
                 + "\"engineConfig\":{\"mode\":\"row-based\",\"facets\":[]}}";
         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowFlagOperation.class), json);

File: main/tests/server/src/com/google/refine/operations/row/RowRemovalOperationTests.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.Arrays;
 import java.util.Properties;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;
@@ -56,6 +57,7 @@
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
 import com.google.refine.operations.EngineDependentOperation;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -90,7 +92,7 @@ public void init() {
     public void serializeRowRemovalOperation() throws IOException {
         String json = "{"
                 + "\"op\":\"core/row-removal\","
-                + "\"description\":\"Remove rows\","
+                + "\"description\":" + new TextNode(OperationDescription.row_removal_brief()).toString() + ","
                 + "\"engineConfig\":{\"mode\":\"row-based\",\"facets\":[]}}";
         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowRemovalOperation.class), json);
     }

File: main/tests/server/src/com/google/refine/operations/row/RowReorderOperationTests.java
Patch:
@@ -29,6 +29,7 @@
 
 import java.io.Serializable;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeSuite;
@@ -40,6 +41,7 @@
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.sorting.SortingConfig;
 import com.google.refine.util.ParsingUtilities;
@@ -146,7 +148,7 @@ public void testStringSort() throws Exception {
     public void serializeRowReorderOperation() throws Exception {
         String json = "  {\n" +
                 "    \"op\": \"core/row-reorder\",\n" +
-                "    \"description\": \"Reorder rows\",\n" +
+                "    \"description\": " + new TextNode(OperationDescription.row_reorder_brief()).toString() + ",\n" +
                 "    \"mode\": \"record-based\",\n" +
                 "    \"sorting\": {\n" +
                 "      \"criteria\": [\n" +

File: main/tests/server/src/com/google/refine/operations/row/RowStarOperationTests.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
+import com.fasterxml.jackson.databind.node.TextNode;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -46,6 +47,7 @@
 import com.google.refine.expr.MetaParser;
 import com.google.refine.grel.Parser;
 import com.google.refine.model.Project;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -91,7 +93,7 @@ public void createProject() {
     public void serializeRowStarOperation() throws Exception {
         String json = "{"
                 + "\"op\":\"core/row-star\","
-                + "\"description\":\"Star rows\","
+                + "\"description\":" + new TextNode(OperationDescription.row_star_brief()).toString() + ","
                 + "\"starred\":true,"
                 + "\"engineConfig\":{\"mode\":\"row-based\",\"facets\":[]}}";
         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowStarOperation.class), json);

File: modules/grel/src/test/java/com/google/refine/expr/functions/CrossTests.java
Patch:
@@ -43,6 +43,7 @@
 import com.google.refine.expr.HasFieldsListImpl;
 import com.google.refine.expr.WrappedCell;
 import com.google.refine.expr.WrappedRow;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.GrelTestBase;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
@@ -53,7 +54,7 @@
  */
 public class CrossTests extends GrelTestBase {
 
-    private static final String ERROR_MSG = "cross expects a cell or value, a project name to look up (optional), and a column name in that project (optional)";
+    private static final String ERROR_MSG = EvalErrorMessage.fun_cross_expects_value_project_column("cross");
     private static final OffsetDateTime dateTimeValue = OffsetDateTime.parse("2017-05-12T05:45:00+00:00",
             DateTimeFormatter.ISO_OFFSET_DATE_TIME);
 

File: modules/grel/src/test/java/com/google/refine/expr/functions/html/InnerHtmlTests.java
Patch:
@@ -31,6 +31,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.GrelTestBase;
 
 public class InnerHtmlTests extends GrelTestBase {
@@ -41,8 +42,7 @@ public void testInnerHtml() {
         Assert.assertTrue(invoke("innerHtml", "test") instanceof EvalError);
 
         EvalError evalError = (EvalError) invoke("innerHtml", "test");
-        Assert.assertEquals(evalError.toString(),
-                "innerHtml() cannot work with this \'string\'. The first parameter is not an HTML Element. Please first use parseHtml(string) and select(query) prior to using this function");
+        Assert.assertEquals(evalError.toString(), EvalErrorMessage.html_cannot_work_with_this_use_parse_html("innerHtml", "string"));
     }
 
 }

File: modules/grel/src/test/java/com/google/refine/expr/functions/xml/WholeTextTests.java
Patch:
@@ -31,6 +31,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.GrelTestBase;
 
 public class WholeTextTests extends GrelTestBase {
@@ -41,7 +42,6 @@ public void testWholeText() {
         Assert.assertTrue(invoke("wholeText", "test") instanceof EvalError);
 
         EvalError evalError = (EvalError) invoke("wholeText", "test");
-        Assert.assertEquals(evalError.toString(),
-                "wholeText() cannot work with this \'string\' and failed as the first parameter is not an XML or HTML Element.  Please first use parseXml() or parseHtml() and select(query) prior to using this function");
+        Assert.assertEquals(evalError.toString(), EvalErrorMessage.xml_text_cannot_work_with_and_failed("wholeText", "string"));
     }
 }

File: modules/grel/src/main/java/com/google/refine/grel/ast/VariableExpr.java
Patch:
@@ -38,12 +38,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.Set;
 
-import com.google.refine.expr.Evaluable;
-
 /**
  * An abstract syntax tree node encapsulating the retrieval of a variable's content.
  */
-public class VariableExpr implements Evaluable {
+public class VariableExpr extends GrelExpr {
 
     final protected String _name;
 
@@ -88,4 +86,5 @@ public boolean equals(Object other) {
     public int hashCode() {
         return _name.hashCode();
     }
+
 }

File: extensions/wikibase/tests/src/org/openrefine/wikibase/operations/PerformWikibaseEditsOperationTest.java
Patch:
@@ -62,13 +62,13 @@ public String getJson()
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testConstructor() {
-        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "", 5, "", 60, "tag", "editing results");
+        new PerformWikibaseEditsOperation(EngineConfig.defaultRowBased(), "", 5, "", 60, "tag", "editing results");
     }
 
     @Test
     public void testGetTagCandidates() {
         PerformWikibaseEditsOperation operation = new PerformWikibaseEditsOperation(
-                EngineConfig.reconstruct("{}"), "my summary", 5, "", 60, "openrefine-${version}", null);
+                EngineConfig.defaultRowBased(), "my summary", 5, "", 60, "openrefine-${version}", null);
         List<String> candidates = operation.getTagCandidates("3.4");
 
         assertEquals(candidates, Arrays.asList("openrefine-3.4", "openrefine"));

File: extensions/wikibase/tests/src/org/openrefine/wikibase/schema/WikibaseSchemaTest.java
Patch:
@@ -209,7 +209,7 @@ public void testEvaluateRespectsFacets()
         assertTrue(validation.getValidationErrors().isEmpty());
 
         Engine engine = new Engine(project);
-        EngineConfig engineConfig = EngineConfig.reconstruct("{\n"
+        EngineConfig engineConfig = EngineConfig.deserialize("{\n"
                 + "      \"mode\": \"row-based\",\n"
                 + "      \"facets\": [\n"
                 + "        {\n"

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -123,7 +123,7 @@ public void initOperation() {
 
     // dependencies
     private Project project;
-    private EngineConfig engine_config = EngineConfig.reconstruct(ENGINE_JSON_URLS);
+    private EngineConfig engine_config = EngineConfig.deserialize(ENGINE_JSON_URLS);
 
     @BeforeMethod
     public void SetUp() throws IOException, ModelException {

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionOperationTests.java
Patch:
@@ -95,7 +95,7 @@ public void serializeColumnAdditionOperation() throws Exception {
     @Test
     public void testAddColumnRowsMode() throws Exception {
         ColumnAdditionOperation operation = new ColumnAdditionOperation(
-                EngineConfig.reconstruct("{\"mode\":\"row-based\",\"facets\":[]}"),
+                EngineConfig.deserialize("{\"mode\":\"row-based\",\"facets\":[]}"),
                 "bar",
                 "grel:cells[\"foo\"].value+'_'+value",
                 OnError.SetToBlank,
@@ -151,7 +151,7 @@ public void testAddColumnRowsModeWithFacet() throws Exception {
     @Test
     public void testAddColumnRecordsMode() throws Exception {
         ColumnAdditionOperation operation = new ColumnAdditionOperation(
-                EngineConfig.reconstruct("{\"mode\":\"record-based\",\"facets\":[]}"),
+                EngineConfig.deserialize("{\"mode\":\"record-based\",\"facets\":[]}"),
                 "bar",
                 "grel:length(row.record.cells['hello'])",
                 OnError.SetToBlank,

File: main/tests/server/src/com/google/refine/operations/recon/ExtendDataOperationTests.java
Patch:
@@ -163,7 +163,7 @@ public void SetUp() throws IOException, ModelException {
 
         options = mock(Properties.class);
         engine = new Engine(project);
-        engine_config = EngineConfig.reconstruct(ENGINE_JSON_URLS);
+        engine_config = EngineConfig.deserialize(ENGINE_JSON_URLS);
         engine.initializeFromConfig(engine_config);
         engine.setMode(Engine.Mode.RowBased);
 

File: main/tests/server/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperationTests.java
Patch:
@@ -56,7 +56,7 @@
 
 public class ReconJudgeSimilarCellsOperationTests extends RefineTest {
 
-    static final EngineConfig ENGINE_CONFIG = EngineConfig.reconstruct("{\"mode\":\"row-based\"}}");
+    static final EngineConfig ENGINE_CONFIG = EngineConfig.defaultRowBased();
 
     Project project;
     ReconConfig reconConfig;

File: main/tests/server/src/com/google/refine/operations/row/RowRemovalOperationTests.java
Patch:
@@ -109,7 +109,7 @@ public void SetUp() throws IOException, ModelException {
                 });
 
         engine = new Engine(projectIssue567);
-        engine_config = EngineConfig.reconstruct(ENGINE_JSON_DUPLICATES);
+        engine_config = EngineConfig.deserialize(ENGINE_JSON_DUPLICATES);
         engine.initializeFromConfig(engine_config);
         engine.setMode(Engine.Mode.RowBased);
 

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -160,6 +160,7 @@ public void parseOneFile(
             CsvFormat format = settings.getFormat();
             format.setDelimiter(sep);
             format.setQuote(quote);
+            settings.setMaxColumns(MAX_COLUMNS);
             settings.setLineSeparatorDetectionEnabled(true);
             settings.setIgnoreLeadingWhitespaces(false);
             settings.setIgnoreTrailingWhitespaces(false);

File: extensions/database/src/com/google/refine/extension/database/mariadb/MariaDBConnectionManager.java
Patch:
@@ -105,7 +105,7 @@ public boolean testConnection(DatabaseConfiguration databaseConfiguration) throw
 
         } catch (SQLException e) {
             logger.error("Test connection Failed!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
 
     }
@@ -149,7 +149,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration, boo
             throw new DatabaseServiceException(e.getMessage());
         } catch (SQLException e) {
             logger.error("SQLException::Couldn't get a Connection!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
     }
 

File: extensions/database/src/com/google/refine/extension/database/mysql/MySQLConnectionManager.java
Patch:
@@ -105,7 +105,7 @@ public boolean testConnection(DatabaseConfiguration databaseConfiguration) throw
 
         } catch (SQLException e) {
             logger.error("Test connection Failed!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
 
     }
@@ -150,7 +150,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration, boo
             throw new DatabaseServiceException(e.getMessage());
         } catch (SQLException e) {
             logger.error("SQLException::Couldn't get a Connection!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
     }
 

File: extensions/database/src/com/google/refine/extension/database/pgsql/PgSQLConnectionManager.java
Patch:
@@ -108,7 +108,7 @@ public boolean testConnection(DatabaseConfiguration databaseConfiguration) throw
 
         } catch (SQLException e) {
             logger.error("Test connection Failed!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
 
     }
@@ -149,7 +149,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration, boo
             throw new DatabaseServiceException(e.getMessage());
         } catch (SQLException e) {
             logger.error("SQLException::Couldn't get a Connection!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
     }
 

File: extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java
Patch:
@@ -119,7 +119,7 @@ public boolean testConnection(DatabaseConfiguration dbConfig) throws DatabaseSer
             return connResult;
         } catch (SQLException e) {
             logger.error("Test connection Failed!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
     }
 
@@ -146,7 +146,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration) thr
             throw new DatabaseServiceException(e.getMessage());
         } catch (SQLException e) {
             logger.error("SQLException::Couldn't get a Connection!", e);
-            throw new DatabaseServiceException(true, e.getSQLState(), e.getErrorCode(), e.getMessage());
+            throw new DatabaseServiceException(e);
         }
     }
 

File: main/src/com/google/refine/commands/history/ApplyOperationsCommand.java
Patch:
@@ -86,6 +86,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
     protected void reconstructOperation(Project project, ObjectNode obj) throws IOException {
         AbstractOperation operation = ParsingUtilities.mapper.convertValue(obj, AbstractOperation.class);
         if (operation != null && !(operation instanceof UnknownOperation)) {
+            operation.validate();
             try {
                 Process process = operation.createProcess(project, new Properties());
 

File: modules/grel/src/main/java/com/google/refine/expr/functions/ToString.java
Patch:
@@ -35,8 +35,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
+import java.util.IllegalFormatException;
 import java.util.Properties;
-import java.util.UnknownFormatConversionException;
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
@@ -59,7 +59,7 @@ public Object call(Properties bindings, Object[] args) {
                 } else if (o1 instanceof Number) {
                     try {
                         return String.format((String) o2, o1);
-                    } catch (UnknownFormatConversionException e) {
+                    } catch (IllegalFormatException e) {
                         return new EvalError(EvalErrorMessage.unknown_format_conversion(e.getMessage()));
                     }
                 }

File: modules/grel/src/test/java/com/google/refine/expr/functions/ToStringTests.java
Patch:
@@ -59,6 +59,7 @@ public void testToString() throws CalendarParserException {
         assertTrue(invoke("toString", 100L, "%") instanceof EvalError);
         assertTrue(invoke("toString", 100L, "%.") instanceof EvalError);
         assertTrue(invoke("toString", 100L, "%0") instanceof EvalError);
+        assertTrue(invoke("toString", 12L, "%2.2f") instanceof EvalError);
 
         // test with large number
         assertEquals(invoke("toString", 1000000000000000000L, "%d"), "1000000000000000000");

File: extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java
Patch:
@@ -61,7 +61,7 @@ public class DBExtensionTests {
     protected final String DEFAULT_MARIADB_NAME = "testdb";
 
     protected final String SQLITE_DB_NAME = "sqlite";
-    protected final String DEFAULT_SQLITE_DB_NAME = "extension_test_db.sqlite";
+    protected final String DEFAULT_SQLITE_DB_NAME = "tests/resources/test_db.sqlite";
 
     protected final String DEFAULT_TEST_TABLE = "test_data";
 

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/ItemRequiresScrutinizerTest.java
Patch:
@@ -61,7 +61,7 @@ public void testExistingItemTrigger() {
         setFetcher(fetcher);
 
         scrutinize(updateA);
-        assertWarningsRaised(ItemRequiresScrutinizer.existingItemRequirePropertyType);
+        assertWarningsRaised(ItemRequiresScrutinizer.existingItemRequireValueswithSuggestedValueType);
     }
 
     @Test
@@ -87,7 +87,7 @@ public void testWrongValue() {
         setFetcher(fetcher);
 
         scrutinize(updateA);
-        assertWarningsRaised(ItemRequiresScrutinizer.existingItemRequireValuesType);
+        assertWarningsRaised(ItemRequiresScrutinizer.existingItemRequireValueswithSuggestedValueType);
     }
 
     @Test
@@ -136,7 +136,7 @@ public void testNewItemTrigger() {
         setFetcher(fetcher);
 
         scrutinize(updateA);
-        assertWarningsRaised(ItemRequiresScrutinizer.newItemRequirePropertyType);
+        assertWarningsRaised(ItemRequiresScrutinizer.newItemRequireValueswithSuggestedValueType);
     }
 
     @Test

File: main/src/com/google/refine/commands/row/GetRowsCommand.java
Patch:
@@ -189,6 +189,7 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
             throws ServletException, IOException {
 
         try {
+            checkJSONP(request); // We used to support JSONP, but don't anymore
             Project project = null;
 
             // This command also supports retrieving rows for an importing job.
@@ -292,6 +293,8 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
                     rwv.totalRows, start, end, limit, pool, previousPageEnd, nextPageStart);
 
             respondJSON(response, result);
+        } catch (IllegalJsonpException e2) {
+            respondNoJsonpException(request, response);
         } catch (Exception e) {
             respondException(response, e);
         }

File: modules/core/src/main/java/com/google/refine/importers/ImporterUtilities.java
Patch:
@@ -152,7 +152,7 @@ static public Column getOrAllocateColumn(Project project, List<String> currentFi
                 } else {
                     column = new Column(project.columnModel.allocateNewCellIndex(), columnName);
                     try {
-                        project.columnModel.addColumn(project.columnModel.columns.size(), column, false);
+                        project.columnModel.addColumn(-1, column, false);
                     } catch (ModelException e) {
                         // Ignore: shouldn't get in here since we just checked for duplicate names.
                     }
@@ -189,12 +189,13 @@ static public void setupColumns(Project project, List<String> columnNames) {
             if (project.columnModel.getColumnByName(cell) == null) {
                 Column column = new Column(project.columnModel.allocateNewCellIndex(), cell);
                 try {
-                    project.columnModel.addColumn(project.columnModel.columns.size(), column, false);
+                    project.columnModel.addColumn(-1, column, false);
                 } catch (ModelException e) {
                     // Ignore: shouldn't get in here since we just checked for duplicate names.
                 }
             }
         }
+        project.columnModel.update();
     }
 
     static public interface MultiFileReadingProgress {

File: modules/core/src/main/java/com/google/refine/importing/EncodingGuesser.java
Patch:
@@ -18,7 +18,7 @@
  * This class tries to find the correct encoding based on https://github.com/albfernandez/juniversalchardet which is a
  * Java port of Mozilla's universalchardet library
  * https://hg.mozilla.org/mozilla-central/file/tip/extensions/universalchardet/
- * 
+ *
  * @author <a href="mailto:kontakt@stundzig.de">Steffen Stundzig</a>
  */
 public final class EncodingGuesser {

File: modules/core/src/main/java/com/google/refine/exporters/Exporter.java
Patch:
@@ -45,7 +45,7 @@ public interface Exporter {
     String getContentType();
 
     /**
-     * Helper to create legacy {@link Properties} from modern {@link Map<String, String>}
+     * Helper to create legacy {@link Properties} from modern {@link Map}
      * 
      * @param options
      *            a map of the option key/values to be remapped

File: modules/core/src/main/java/com/google/refine/browsing/FilteredRows.java
Patch:
@@ -47,5 +47,5 @@ public interface FilteredRows {
      * @param project
      * @param visitor
      */
-    public void accept(Project project, RowVisitor visitor);
+    void accept(Project project, RowVisitor visitor);
 }

File: modules/core/src/main/java/com/google/refine/commands/HttpUtilities.java
Patch:
@@ -150,8 +150,8 @@ static public void redirect(HttpServletResponse response, String url) throws IOE
     }
 
     /**
-     * @deprecated deprecated for v3.8. No internal uses. There is an implementation in the {@link Command} class for
-     *             commands which need it.
+     * @deprecated deprecated for v3.8. No internal uses. There is an implementation in
+     *             {@link Command#getIntegerParameter(HttpServletRequest, String, int)} for commands which need it.
      */
     @Deprecated
     static public int getIntegerParameter(HttpServletRequest request, String name, int def) {

File: modules/core/src/main/java/com/google/refine/model/Project.java
Patch:
@@ -61,6 +61,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.Pool;
 
+/**
+ * Project with all its associated metadata and data
+ */
 public class Project {
 
     final static protected Map<String, Class<? extends OverlayModel>> s_overlayModelClasses = new HashMap<String, Class<? extends OverlayModel>>();

File: modules/grel/src/main/java/com/google/refine/expr/functions/strings/ToTitlecase.java
Patch:
@@ -71,7 +71,7 @@ public String getDescription() {
 
     @Override
     public String getParams() {
-        return "string s";
+        return "string s, string delimiters (optional)";
     }
 
     @Override

File: extensions/wikibase/src/org/openrefine/wikibase/qa/scrutinizers/CommonDescriptionScrutinizer.java
Patch:
@@ -13,7 +13,7 @@
  */
 public class CommonDescriptionScrutinizer extends DescriptionScrutinizer {
 
-    public static final String descTooLongType = "description-too-long";
+    public static final String descTooLongType = "item-description-too-long";
     public static final String descIdenticalWithLabel = "description-identical-with-label";
 
     @Override

File: extensions/wikibase/src/org/openrefine/wikibase/qa/EditInspector.java
Patch:
@@ -51,6 +51,7 @@
 import org.openrefine.wikibase.qa.scrutinizers.FormatScrutinizer;
 import org.openrefine.wikibase.qa.scrutinizers.InverseConstraintScrutinizer;
 import org.openrefine.wikibase.qa.scrutinizers.ItemRequiresScrutinizer;
+import org.openrefine.wikibase.qa.scrutinizers.LabelScrutinizer;
 import org.openrefine.wikibase.qa.scrutinizers.MultiValueScrutinizer;
 import org.openrefine.wikibase.qa.scrutinizers.NewEntityScrutinizer;
 import org.openrefine.wikibase.qa.scrutinizers.NoEditsMadeScrutinizer;
@@ -136,6 +137,7 @@ public EditInspector(QAWarningStore warningStore, Manifest manifest, boolean slo
         register(new ItemRequiresScrutinizer());
         register(new UseAsQualifierScrutinizer());
         register(new FileNameScrutinizer());
+        register(new LabelScrutinizer());
     }
 
     /**

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/EditInspectorTest.java
Patch:
@@ -11,8 +11,8 @@
 
 public class EditInspectorTest {
 
-    private static final int scrutinizerCount = 23;
-    private static final int scrutinizerNotDependingOnPropertyConstraintCount = 8;
+    private static final int scrutinizerCount = 24;
+    private static final int scrutinizerNotDependingOnPropertyConstraintCount = 9;
 
     @Test
     public void testNoScrutinizerSkipped() throws Exception {

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -151,6 +151,7 @@ public void parseOneFile(
             TsvParserSettings settings = new TsvParserSettings();
             settings.setMaxCharsPerColumn(MAX_CHARACTERS_PER_CELL);
             settings.setMaxColumns(MAX_COLUMNS);
+            settings.setLineSeparatorDetectionEnabled(true);
             settings.setIgnoreLeadingWhitespaces(false);
             settings.setIgnoreTrailingWhitespaces(false);
             parser = new TsvParser(settings);
@@ -159,7 +160,7 @@ public void parseOneFile(
             CsvFormat format = settings.getFormat();
             format.setDelimiter(sep);
             format.setQuote(quote);
-            format.setLineSeparator("\n");
+            settings.setLineSeparatorDetectionEnabled(true);
             settings.setIgnoreLeadingWhitespaces(false);
             settings.setIgnoreTrailingWhitespaces(false);
             if (strictQuotes) {

File: extensions/wikibase/src/org/openrefine/wikibase/editing/EditBatchProcessor.java
Patch:
@@ -193,7 +193,7 @@ public EditResult performEdit()
                 newEntityUrl = createdDocId.getSiteIri() + createdDocId.getId();
             } else {
                 // Existing entities
-                EntityUpdate entityUpdate;
+                EntityUpdate entityUpdate = null;
                 if (update.requiresFetchingExistingState()) {
                     String entityId = update.getEntityId().getId();
                     if (currentDocs.get(entityId) != null) {
@@ -202,7 +202,7 @@ public EditResult performEdit()
                         logger.warn(String.format("Skipping editing of %s as it could not be retrieved", entityId));
                         entityUpdate = null;
                     }
-                } else {
+                } else if (!update.isEmpty()) {
                     entityUpdate = update.toEntityUpdate(null);
                 }
 

File: main/src/com/google/refine/clustering/binning/UserDefinedKeyer.java
Patch:
@@ -63,6 +63,6 @@ public String key(String s, Object... o) {
 
         Object result = eval.evaluate(bindings);
 
-        return result.toString();
+        return result == null ? "null" : result.toString();
     }
 }

File: main/src/com/google/refine/clustering/knn/UserDefinedDistance.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.MetaParser;
 import com.google.refine.expr.ParsingException;
@@ -77,6 +78,8 @@ public static double convertToDouble(Object obj) {
 
         if (obj instanceof Number) {
             return ((Number) obj).doubleValue();
+        } else if (obj instanceof EvalError) {
+            throw new IllegalArgumentException(((EvalError) obj).message);
         } else if (obj instanceof String) {
             try {
                 return Double.parseDouble((String) obj);

File: main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java
Patch:
@@ -77,7 +77,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 
             if (params.has("expression")) {
                 String expression = params.getString("expression");
-                if (jsonObject.getString("function") == "UserDefinedKeyer") {
+                if ("UserDefinedKeyer".equals(jsonObject.getString("function"))) {
                     KeyerFactory.put("userdefinedkeyer", new UserDefinedKeyer(expression));
                 } else {
                     DistanceFactory.put("userdefineddistance", new UserDefinedDistance(expression));

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -57,6 +57,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.arrays.Reverse;
 import com.google.refine.expr.functions.arrays.Sort;
 import com.google.refine.expr.functions.arrays.Uniques;
+import com.google.refine.expr.functions.arrays.Zip;
 import com.google.refine.expr.functions.booleans.And;
 import com.google.refine.expr.functions.booleans.Not;
 import com.google.refine.expr.functions.booleans.Or;
@@ -294,6 +295,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("sort", new Sort());
         registerFunction("uniques", new Uniques());
         registerFunction("inArray", new InArray());
+        registerFunction("zip", new Zip());
 
         registerFunction("now", new Now());
         registerFunction("inc", new Inc());

File: main/src/com/google/refine/importers/LineBasedFormatGuesser.java
Patch:
@@ -35,7 +35,7 @@ public class LineBasedFormatGuesser implements FormatGuesser {
 
     @Override
     public String guess(File file, String encoding, String seedFormat) {
-        SeparatorBasedImporter.Separator sep = SeparatorBasedImporter.guessSeparator(file, encoding);
+        SeparatorBasedImporter.Separator sep = SeparatorBasedImporter.guessSeparator(file, encoding, true);
         if (sep != null) {
             return "text/line-based/*sv";
         }

File: extensions/wikibase/tests/src/org/openrefine/wikibase/manifests/ManifestTest.java
Patch:
@@ -3,6 +3,7 @@
 
 import static org.testng.Assert.assertFalse;
 import static org.testng.Assert.assertNull;
+// The version below has parameter order backwards from the standard TestNG assertEquals we use everywhere else
 import static org.testng.AssertJUnit.assertEquals;
 
 import java.io.IOException;

File: main/tests/server/src/com/google/refine/ProjectManagerTests.java
Patch:
@@ -41,7 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
-import static org.testng.AssertJUnit.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.lang.reflect.Field;
 import java.time.Instant;
@@ -238,8 +238,8 @@ protected void registerProject(Project proj, ProjectMetadata meta) {
     }
 
     protected void AssertProjectRegistered() {
-        Assert.assertEquals(SUT.getProject(project.id), project);
-        Assert.assertEquals(SUT.getProjectMetadata(project.id), metadata);
+        assertEquals(SUT.getProject(project.id), project);
+        assertEquals(SUT.getProjectMetadata(project.id), metadata);
     }
 
     protected void whenGetSaveTimes(Project proj, ProjectMetadata meta) {

File: main/tests/server/src/com/google/refine/importers/XmlImporterTests.java
Patch:
@@ -33,8 +33,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.importers;
 
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.testng.Assert.assertNotEquals;
+import static org.testng.Assert.assertNotNull;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -112,6 +112,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.strings.Fingerprint;
 import com.google.refine.expr.functions.strings.IndexOf;
 import com.google.refine.expr.functions.strings.LastIndexOf;
+import com.google.refine.expr.functions.strings.LevenshteinDistance;
 import com.google.refine.expr.functions.strings.MD5;
 import com.google.refine.expr.functions.strings.Match;
 import com.google.refine.expr.functions.strings.NGram;
@@ -265,6 +266,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("ngram", new NGram());
         registerFunction("match", new Match());
         registerFunction("find", new Find());
+        registerFunction("levenshteinDistance", new LevenshteinDistance());
 
         registerFunction("parseUri", new ParseUri());
 

File: extensions/wikibase/src/org/openrefine/wikibase/updates/MediaInfoEdit.java
Patch:
@@ -65,7 +65,7 @@ public class MediaInfoEdit extends LabeledStatementEntityEdit {
      * @param overrideWikitext
      *            whether the supplied wikitext should override any existing one
      * @param contributingRowIds
-     *           the rowIds of the rows that will be contributed for this edit
+     *            the rowIds of the rows that will be contributed for this edit
      */
     public MediaInfoEdit(
             EntityIdValue id,

File: extensions/wikibase/tests/src/org/openrefine/wikibase/editing/NewEntityLibraryTest.java
Patch:
@@ -62,7 +62,7 @@ public void testUpdateReconciledCells() {
         Project project = createProject(TestingData.inceptionColumns,
                 TestingData.inceptionProjectGridWithNewItem);
         StandardReconConfig config = new StandardReconConfig("http://my.endpoint",
-                "http://my.schema", "http://my.schema", "Q5", "human", true, 10, Collections.emptyList());
+                "http://my.schema", "http://my.schema", "Q5", "human", true, Collections.emptyList());
         project.columnModel.columns.get(0).setReconConfig(config);
 
         project.rows.get(0).cells.set(0, TestingData.makeNewItemCell(3289L, "University of Ljubljana"));

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -774,7 +774,6 @@ private StandardReconConfig getReconConfig(String url) {
                 "",
                 "entity",
                 true,
-                10,
                 new ArrayList<ColumnDetail>(),
                 1);
         return cfg;

File: main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java
Patch:
@@ -130,7 +130,6 @@ protected ReconConfig getNewReconConfig(Column column) {
                         _schemaSpace,
                         null,
                         false,
-                        10,
                         Collections.emptyList(),
                         0);
     }

File: main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java
Patch:
@@ -74,7 +74,7 @@ public ReconUseValuesAsIdentifiersOperation(
         this.service = service;
         this.identifierSpace = identifierSpace;
         this.schemaSpace = schemaSpace;
-        this.reconConfig = new StandardReconConfig(service, identifierSpace, schemaSpace, null, null, true, 10, Collections.emptyList());
+        this.reconConfig = new StandardReconConfig(service, identifierSpace, schemaSpace, null, null, true, Collections.emptyList());
     }
 
     @Override

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -66,6 +66,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.FilterProvider;
 import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
 import org.apache.commons.codec.DecoderException;
 import org.apache.commons.codec.net.URLCodec;
 import org.apache.commons.io.IOUtils;
@@ -90,6 +91,7 @@ public class ParsingUtilities {
         module.addDeserializer(Instant.class, new SerializationFilters.InstantDeserializer());
 
         mapper.registerModule(module);
+        mapper.registerModule(new Jdk8Module()/* .configureAbsentsAsNulls(true) */);
         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
         mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
     }

File: main/tests/server/src/com/google/refine/commands/recon/ReconJudgeOneCellCommandTest.java
Patch:
@@ -76,7 +76,7 @@ public void setUp() throws IOException {
                 "http://my.recon.service/rdf/schema",
                 "type3894",
                 "octopus",
-                true, 10,
+                true,
                 Collections.emptyList(),
                 5);
         reconciled.setReconConfig(config);

File: main/tests/server/src/com/google/refine/model/ColumnTests.java
Patch:
@@ -54,7 +54,6 @@ public void serializeColumn() throws Exception {
                 + "   \"schemaSpace\":\"http://www.wikidata.org/prop/direct/\","
                 + "   \"type\":{\"id\":\"Q43229\",\"name\":\"organization\"},"
                 + "   \"autoMatch\":true,"
-                + "   \"batchSize\":10,"
                 + "   \"columnDetails\":["
                 + "      {\"column\":\"organization_country\",\"propertyName\":\"SPARQL: P17/P297\",\"propertyID\":\"P17/P297\"},"
                 + "      {\"column\":\"organization_id\",\"propertyName\":\"SPARQL: P3500|P2427\",\"propertyID\":\"P3500|P2427\"}"

File: main/tests/server/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperationTests.java
Patch:
@@ -78,7 +78,6 @@ public void setupInitialState() throws Exception {
                 schemaSpace,
                 null,
                 true,
-                10,
                 Collections.emptyList(),
                 5);
         project = createProject(
@@ -134,7 +133,8 @@ public void testMarkNewTopics() throws Exception {
                 "http://my.database/schema/",
                 null,
                 null,
-                true, 10, Collections.emptyList());
+                true,
+                Collections.emptyList());
         column.setReconConfig(config);
 
         AbstractOperation op = new ReconJudgeSimilarCellsOperation(

File: main/tests/server/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperationTests.java
Patch:
@@ -113,7 +113,7 @@ public void testPreviouslyReconciled() throws Exception {
                 "http://foo.com/identifierSpace",
                 "http://foo.com/schemaSpace",
                 null,
-                false, 10,
+                false,
                 Collections.emptyList(),
                 0);
 

File: main/tests/server/src/com/google/refine/operations/recon/ReconOperationTests.java
Patch:
@@ -87,7 +87,6 @@ public class ReconOperationTests extends RefineTest {
             + "   \"schemaSpace\":\"http://www.wikidata.org/prop/direct/\","
             + "   \"type\":{\"id\":\"Q5\",\"name\":\"human\"},"
             + "   \"autoMatch\":true,"
-            + "   \"batchSize\":10,"
             + "   \"columnDetails\":[],"
             + "   \"limit\":0"
             + "},"
@@ -174,6 +173,7 @@ public void setUpDependencies() {
         recon3.judgment = Judgment.Matched;
 
         reconConfig = mock(StandardReconConfig.class, withSettings().serializable());
+        doReturn(2).when(reconConfig).getBatchSize();
         doReturn(2).when(reconConfig).getBatchSize(anyInt());
         // mock identifierSpace, service and schemaSpace
         when(reconConfig.batchRecon(eq(Arrays.asList(job1, job2)), anyLong())).thenReturn(Arrays.asList(recon1, recon2));
@@ -236,6 +236,7 @@ public void testFailingRecon() throws Exception {
         List<Recon> reconList = Arrays.asList((Recon) null, (Recon) null, (Recon) null);
         ReconJob reconJob = mock(ReconJob.class);
         when(reconConfig.batchRecon(Mockito.any(), Mockito.anyLong())).thenReturn(reconList);
+        when(reconConfig.getBatchSize()).thenReturn(10);
         when(reconConfig.getBatchSize(project.rows.size())).thenReturn(10);
         when(reconConfig.createJob(Mockito.eq(project), Mockito.anyInt(), Mockito.any(), Mockito.any(), Mockito.any()))
                 .thenReturn(reconJob);

File: main/tests/server/src/com/google/refine/commands/expr/ExpressionCommandTestBase.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.io.UncheckedIOException;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -92,7 +93,7 @@ public void initWorkspace(String jsonData) {
             FileProjectManager.initialize(workspaceDir);
 
         } catch (IOException e) {
-            e.printStackTrace();
+            throw new UncheckedIOException(e);
         }
     }
 

File: main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java
Patch:
@@ -557,6 +557,7 @@ public boolean isCanceled() {
                     return false;
                 }
             };
+
             try {
                 ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, dummyProgress);
                 fail("No Exception was thrown");

File: main/src/com/google/refine/grel/controls/Filter.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
 
+import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.util.JsonValueConverter;
@@ -67,7 +68,7 @@ public Object call(Properties bindings, Evaluable[] args) {
         if (ExpressionUtils.isError(o)) {
             return o;
         } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof ArrayNode)) {
-            return ControlEvalError.filter();
+            return new EvalError(ControlEvalError.expects_first_arg_array(ControlFunctionRegistry.getControlName(this)));
         }
 
         String name = ((VariableExpr) args[1]).getName();

File: extensions/wikibase/src/org/openrefine/wikibase/commands/PerformWikibaseEditsCommand.java
Patch:
@@ -45,7 +45,9 @@ protected AbstractOperation createOperation(Project project, HttpServletRequest
         Integer maxEditsPerMinute = maxEditsPerMinuteStr == null ? null : Integer.parseInt(maxEditsPerMinuteStr);
         String tag = request.getParameter("tag");
         String editGroupsUrlSchema = request.getParameter("editGroupsUrlSchema");
-        return new PerformWikibaseEditsOperation(engineConfig, summary, maxlag, editGroupsUrlSchema, maxEditsPerMinute, tag);
+        String resultsColumnName = request.getParameter("resultsColumnName");
+        return new PerformWikibaseEditsOperation(engineConfig, summary, maxlag, editGroupsUrlSchema, maxEditsPerMinute, tag,
+                resultsColumnName);
     }
 
 }

File: extensions/wikibase/src/org/openrefine/wikibase/editing/ReconEntityRewriter.java
Patch:
@@ -187,15 +187,16 @@ public EntityEdit rewrite(EntityEdit edit) throws NewEntityNotCreatedYetExceptio
                 Set<MonolingualTextValue> aliases = update.getAliases().stream().map(l -> copy(l)).collect(Collectors.toSet());
                 List<StatementEdit> statements = update.getStatementEdits().stream().map(l -> copy(l))
                         .collect(Collectors.toList());
-                return new ItemEdit(subject, statements, labels, labelsIfNew, descriptions, descriptionsIfNew, aliases);
+                return new ItemEdit(subject, statements, labels, labelsIfNew, descriptions, descriptionsIfNew, aliases,
+                        edit.getContributingRowIds());
             } else if (edit instanceof MediaInfoEdit) {
                 MediaInfoEdit update = (MediaInfoEdit) edit;
                 Set<MonolingualTextValue> labels = update.getLabels().stream().map(l -> copy(l)).collect(Collectors.toSet());
                 Set<MonolingualTextValue> labelsIfNew = update.getLabelsIfNew().stream().map(l -> copy(l)).collect(Collectors.toSet());
                 List<StatementEdit> statements = update.getStatementEdits().stream().map(l -> copy(l))
                         .collect(Collectors.toList());
                 return new MediaInfoEdit(subject, statements, labels, labelsIfNew, update.getFilePath(),
-                        update.getFileName(), update.getWikitext(), update.isOverridingWikitext());
+                        update.getFileName(), update.getWikitext(), update.isOverridingWikitext(), edit.getContributingRowIds());
             } else {
                 throw new IllegalStateException(
                         "Rewriting of entities of this type (for subject id " + edit.getEntityId() + ") not supported yet");

File: extensions/wikibase/src/org/openrefine/wikibase/schema/WbItemEditExpr.java
Patch:
@@ -132,7 +132,7 @@ public ItemEdit evaluate(ExpressionContext ctxt)
         for (WbNameDescExpr expr : getNameDescs()) {
             expr.contributeTo(update, ctxt);
         }
-        return update.build();
+        return update.addContributingRowId(ctxt.getRowId()).build();
     }
 
     @JsonProperty("subject")

File: extensions/wikibase/src/org/openrefine/wikibase/schema/WbMediaInfoEditExpr.java
Patch:
@@ -121,7 +121,8 @@ public MediaInfoEdit evaluate(ExpressionContext ctxt) throws SkipSchemaExpressio
             warning.setProperty("example", subjectId.getId());
             throw new QAWarningException(warning);
         }
-        MediaInfoEditBuilder update = new MediaInfoEditBuilder(subjectId);
+        MediaInfoEditBuilder update = new MediaInfoEditBuilder(subjectId)
+                .addContributingRowId(ctxt.getRowId());
         for (WbStatementGroupExpr expr : getStatementGroups()) {
             try {
                 StatementGroupEdit statementGroupUpdate = expr.evaluate(ctxt, subjectId);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/editing/MediaFileUtilsTest.java
Patch:
@@ -253,14 +253,15 @@ public void testEditPage() throws IOException, MediaWikiApiErrorException {
         uploadParams.put("token", csrfToken);
         uploadParams.put("bot", "true");
         JsonNode editJsonResponse = ParsingUtilities.mapper.readTree(successfulEditResponse);
-        when(connection.sendJsonRequest("POST", uploadParams, Collections.emptyMap())).thenReturn(editJsonResponse);
+        when(connection.sendJsonRequest("POST", uploadParams)).thenReturn(editJsonResponse);
 
         MediaFileUtils mediaFileUtils = new MediaFileUtils(connection);
         // For this test, assume the CSRF token has already been fetched
         mediaFileUtils.fetchCsrfToken();
 
-        mediaFileUtils.editPage(12345L, "my new wikitext", "my summary", Collections.emptyList());
+        long revisionId = mediaFileUtils.editPage(12345L, "my new wikitext", "my summary", Collections.emptyList());
 
+        assertEquals(revisionId, 371707L);
         // check the requests were done as expected
         InOrder inOrder = Mockito.inOrder(connection);
         Map<String, String> tokenParams = new HashMap<>();

File: extensions/wikibase/tests/src/org/openrefine/wikibase/operations/PerformWikibaseEditsOperationTest.java
Patch:
@@ -62,13 +62,13 @@ public String getJson()
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testConstructor() {
-        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "", 5, "", 60, "tag");
+        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "", 5, "", 60, "tag", "editing results");
     }
 
     @Test
     public void testGetTagCandidates() {
         PerformWikibaseEditsOperation operation = new PerformWikibaseEditsOperation(
-                EngineConfig.reconstruct("{}"), "my summary", 5, "", 60, "openrefine-${version}");
+                EngineConfig.reconstruct("{}"), "my summary", 5, "", 60, "openrefine-${version}", null);
         List<String> candidates = operation.getTagCandidates("3.4");
 
         assertEquals(candidates, Arrays.asList("openrefine-3.4", "openrefine"));

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/DifferenceWithinScrutinizerTest.java
Patch:
@@ -61,6 +61,7 @@ public void testTrigger() {
         TermedStatementEntityEdit updateA = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
+                .addContributingRowId(123)
                 .build();
 
         Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);
@@ -91,6 +92,7 @@ public void testNoIssue() {
         TermedStatementEntityEdit updateA = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
+                .addContributingRowId(123)
                 .build();
 
         Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/DistinctValuesScrutinizerTest.java
Patch:
@@ -70,6 +70,7 @@ public void testTrigger() {
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
+                .addContributingRowId(123)
                 .build();
 
         List<SnakGroup> constraintQualifiers = new ArrayList<>();
@@ -93,6 +94,7 @@ public void testDeletedStatement() {
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(delete(statement1))
                 .addStatement(delete(statement2))
+                .addContributingRowId(123)
                 .build();
 
         List<SnakGroup> constraintQualifiers = new ArrayList<>();
@@ -117,6 +119,7 @@ public void testNoIssue() {
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
+                .addContributingRowId(123)
                 .build();
 
         List<SnakGroup> constraintQualifiers = new ArrayList<>();

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/EntityTypeScrutinizerTest.java
Patch:
@@ -51,6 +51,7 @@ public void testAllowed() {
 
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(itemParameterPID, allowedValue);
@@ -76,6 +77,7 @@ public void testDisallowed() {
 
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(itemParameterPID, itemValue);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/InverseConstraintScrutinizerTest.java
Patch:
@@ -72,6 +72,7 @@ public void testTrigger() {
         Statement statement = new StatementImpl("P25", mainSnak, idA);
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(propertyParameter, inversePropertyID);
@@ -94,6 +95,7 @@ public void testSymmetric() {
         Statement statement = new StatementImpl("P3373", mainSnak, idA);
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(symmetricPropertyID, symmetricEntityIdValue);
@@ -116,6 +118,7 @@ public void testNoSymmetricClosure() {
         Statement statement = new StatementImpl("P25", mainSnak, idA);
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(propertyParameter, inverseEntityIdValue);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/NoEditsMadeScrutinizerTest.java
Patch:
@@ -44,13 +44,13 @@ public void testTrigger() {
 
     @Test
     public void testNonNull() {
-        scrutinize(new ItemEditBuilder(TestingData.newIdA).build());
+        scrutinize(new ItemEditBuilder(TestingData.newIdA).addContributingRowId(123).build());
         assertNoWarningRaised();
     }
 
     @Test
     public void testNull() {
-        scrutinize(new ItemEditBuilder(TestingData.existingId).build());
+        scrutinize(new ItemEditBuilder(TestingData.existingId).addContributingRowId(123).build());
         assertWarningsRaised(NoEditsMadeScrutinizer.type);
     }
 }

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/QualifierCompatibilityScrutinizerTest.java
Patch:
@@ -76,6 +76,7 @@ public void testDisallowedQualifier() {
         Statement statement = makeStatement(mainSnak, qualifierSnak);
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak constraintQualifierSnak = Datamodel.makeValueSnak(propertyParameterPID, propertyParameterValue);
@@ -99,6 +100,7 @@ public void testMissingQualifier() {
         Statement statement = makeStatement(mainSnak);
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak constraintQualifierSnak = Datamodel.makeValueSnak(propertyParameterPID, propertyParameterValue);
@@ -123,6 +125,7 @@ public void testGoodEdit() {
         Statement statement = makeStatement(mainSnak, qualifierSnak);
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
+                .addContributingRowId(123)
                 .build();
 
         Snak constraintQualifierSnak = Datamodel.makeValueSnak(propertyParameterPID, propertyParameterValue);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/SingleValueScrutinizerTest.java
Patch:
@@ -69,6 +69,7 @@ public void testTrigger() {
         TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
+                .addContributingRowId(123)
                 .build();
 
         List<Statement> statementList = constraintParameterStatementList(entityIdValue, new ArrayList<>());
@@ -87,6 +88,7 @@ public void testNoIssue() {
         Statement statement1 = new StatementImpl("P21", snak1, idA);
         TermedStatementEntityEdit updateA = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
+                .addContributingRowId(123)
                 .build();
 
         List<Statement> statementList = constraintParameterStatementList(entityIdValue, new ArrayList<>());

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/StatementScrutinizerTest.java
Patch:
@@ -34,7 +34,7 @@ public abstract class StatementScrutinizerTest extends ScrutinizerTest {
 
     public void scrutinize(Statement statement) {
         TermedStatementEntityEdit update = new ItemEditBuilder((ItemIdValue) statement.getClaim().getSubject())
-                .addStatement(add(statement)).build();
+                .addStatement(add(statement)).addContributingRowId(123).build();
         scrutinize(update);
     }
 

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/UnsourcedScrutinizerTest.java
Patch:
@@ -74,7 +74,8 @@ public void testTrigger() {
         ItemIdValue id = TestingData.existingId;
         Snak mainSnak = Datamodel.makeSomeValueSnak(propertyIdValue);
         Statement statement = new StatementImpl("P172", mainSnak, id);
-        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).addContributingRowId(123)
+                .addContributingRowId(123).build();
 
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, Collections.emptyList());
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);
@@ -92,7 +93,7 @@ public void testNoIssue() {
         List<SnakGroup> constraintQualifiers = makeSnakGroupList(referenceSnak);
         List<Statement> itemStatementList = constraintParameterStatementList(entityIdValue, constraintQualifiers);
         Statement statement = itemStatementList.get(0);
-        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).addContributingRowId(123).build();
 
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, Collections.emptyList());
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/UseAsQualifierScrutinizerTest.java
Patch:
@@ -48,7 +48,7 @@ public void testTrigger() {
         List<SnakGroup> qualifierList = makeSnakGroupList(statementQualifier);
         List<Statement> statementList = constraintParameterStatementList(useAsQualifierEntityId, qualifierList);
         Statement statement = statementList.get(0);
-        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).addContributingRowId(123).build();
 
         Snak qualifierSnak1 = Datamodel.makeValueSnak(qualifierPID, qualifierPropertyValue);
         Snak qualifierSnak2 = Datamodel.makeValueSnak(itemParameterPID, qualifierAllowedValue);
@@ -69,7 +69,7 @@ public void testNoIssue() {
         List<SnakGroup> qualifierList = makeSnakGroupList(statementQualifier);
         List<Statement> statementList = constraintParameterStatementList(useAsQualifierEntityId, qualifierList);
         Statement statement = statementList.get(0);
-        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).addContributingRowId(123).build();
 
         Snak qualifierSnak1 = Datamodel.makeValueSnak(qualifierPID, qualifierPropertyValue);
         Snak qualifierSnak2 = Datamodel.makeValueSnak(itemParameterPID, qualifierAllowedValue);
@@ -88,7 +88,7 @@ public void testNoQualifier() {
         ItemIdValue id = TestingData.existingId;
         List<Statement> statementList = constraintParameterStatementList(useAsQualifierEntityId, new ArrayList<>());
         Statement statement = statementList.get(0);
-        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).addContributingRowId(123).build();
 
         Snak qualifierSnak1 = Datamodel.makeValueSnak(qualifierPID, qualifierPropertyValue);
         Snak qualifierSnak2 = Datamodel.makeValueSnak(itemParameterPID, qualifierAllowedValue);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/ValueScrutinizerTest.java
Patch:
@@ -45,6 +45,6 @@ public void scrutinize(PropertyIdValue pid, Value value) {
     }
 
     public void scrutinizeLabel(MonolingualTextValue text) {
-        scrutinize(new ItemEditBuilder(TestingData.existingId).addLabel(text, true).build());
+        scrutinize(new ItemEditBuilder(TestingData.existingId).addLabel(text, true).addContributingRowId(123).build());
     }
 }

File: extensions/wikibase/tests/src/org/openrefine/wikibase/schema/WbExpressionTest.java
Patch:
@@ -226,7 +226,8 @@ public void setRow(Object... rowValues) {
                 row.cells.add(cell);
             }
         }
-        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", Collections.emptyMap(), server.url("/w/api.php").toString(), 0, row,
+        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", Collections.emptyMap(), server.url("/w/api.php").toString(), 123,
+                row,
                 project.columnModel, warningStore);
     }
 

File: extensions/wikibase/tests/src/org/openrefine/wikibase/schema/WikibaseSchemaTest.java
Patch:
@@ -154,9 +154,9 @@ public void testEvaluate()
         Engine engine = new Engine(project);
         List<EntityEdit> updates = schema.evaluate(project, engine);
         List<EntityEdit> expected = new ArrayList<>();
-        TermedStatementEntityEdit update1 = new ItemEditBuilder(qid1).addStatement(statementUpdate1).build();
+        TermedStatementEntityEdit update1 = new ItemEditBuilder(qid1).addStatement(statementUpdate1).addContributingRowId(123).build();
         expected.add(update1);
-        TermedStatementEntityEdit update2 = new ItemEditBuilder(qid2).addStatement(statementUpdate2).build();
+        TermedStatementEntityEdit update2 = new ItemEditBuilder(qid2).addStatement(statementUpdate2).addContributingRowId(123).build();
         expected.add(update2);
         assertEquals(expected, updates);
     }
@@ -226,7 +226,7 @@ public void testEvaluateRespectsFacets()
         engine.initializeFromConfig(engineConfig);
         List<EntityEdit> updates = schema.evaluate(project, engine);
         List<EntityEdit> expected = new ArrayList<>();
-        EntityEdit update1 = new ItemEditBuilder(qid1).addStatement(statementUpdate1).build();
+        EntityEdit update1 = new ItemEditBuilder(qid1).addStatement(statementUpdate1).addContributingRowId(123).build();
         expected.add(update1);
         assertEquals(expected, updates);
     }

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -117,6 +117,7 @@ public void parseOneFile(
             final MultiFileReadingProgress progress) throws IOException {
         final File file = ImportingUtilities.getFile(job, fileRecord);
         final String fileSource = ImportingUtilities.getFileSource(fileRecord);
+        final String fileName = ImportingUtilities.getFileName(fileRecord);
         final String archiveFileName = ImportingUtilities.getArchiveFileName(fileRecord);
         int filenameColumnIndex = -1;
         int archiveColumnIndex = -1;
@@ -136,7 +137,7 @@ public void parseOneFile(
                 }
 
                 if (useInputStream) {
-                    parseOneFile(project, metadata, job, fileSource, inputStream, limit, options, exceptions);
+                    parseOneFile(project, metadata, job, fileName, inputStream, limit, options, exceptions);
                 } else {
                     // Although this is called "common" encoding, it may represent the user's override of the encoding
                     String commonEncoding = JSONUtilities.getString(options, "encoding", null);
@@ -147,7 +148,7 @@ public void parseOneFile(
                     Reader reader = ImportingUtilities.getReaderFromStream(
                             inputStream, fileRecord, commonEncoding);
 
-                    parseOneFile(project, metadata, job, fileSource, reader, limit, options, exceptions);
+                    parseOneFile(project, metadata, job, fileName, reader, limit, options, exceptions);
                 }
 
                 // Fill in filename and archive name column for all rows added from this file

File: main/tests/server/src/com/google/refine/expr/functions/arrays/JoinTests.java
Patch:
@@ -59,9 +59,9 @@ public void joinArray() throws ParsingException {
         parseEval(bindings, new String[] { "['','',''].join('|')", "||" });
 
         // Tests for JSON array
-        // Both of the following tests throw NPEs. First is desired behavior, second is current array behavior
+        // First test below is desired behavior, second is current array behavior
 //        parseEval(bindings, new String[] { "'[null,null,null]'.parseJson().join('|')", "||" } );
-//        parseEval(bindings, new String[] { "'[null,null,null]'.parseJson().join('|')", "" } );
+        parseEval(bindings, new String[] { "'[null,null,null]'.parseJson().join('|')", "" });
         parseEval(bindings, new String[] { "'[\"\",2,3]'.parseJson().join('|')", "|2|3" });
         parseEval(bindings, new String[] { "'[1,2,\"\"]'.parseJson().join('|')", "1|2|" });
         parseEval(bindings, new String[] { "'[\"\",\"\",\"\"]'.parseJson().join('|')", "||" });

File: server/src/com/google/refine/Refine.java
Patch:
@@ -174,7 +174,7 @@ private static ThreadPool createThreadPool() {
 
     public void init(String iface, int port, String host) throws Exception {
         logger.info("Java runtime version {} from java.home: {}", Runtime.version().toString(), System.getProperty("java.home", ""));
-        logger.info("Java VM: {} {} {}", System.getProperty("java.vm.vendor", ""), System.getProperty("java.vm.name", ""),
+        logger.info("Java VM: {} {} {} {}", System.getProperty("java.vm.vendor", ""), System.getProperty("java.vm.name", ""),
                 System.getProperty("java.vm.version", ""), System.getProperty("java.vm.info", ""));
         logger.info("Starting Server bound to '{}:{}'", iface, port);
         logger.info("refine.memory size: {} JVM Max heap: {} MBytes", Configurations.get("refine.memory", "<default>"),
@@ -518,7 +518,7 @@ private void openBrowserFallback() throws IOException {
         } else if (SystemUtils.IS_OS_LINUX) {
             rt.exec(new String[] { "xdg-open", String.valueOf(uri) });
         } else {
-            logger.warn("Java Desktop class not supported on this platform. Please open %s in your browser", uri.toString());
+            logger.warn("Java Desktop class not supported on this platform. Please open {} in your browser", uri.toString());
         }
     }
 }

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -88,7 +88,7 @@ public ObjectNode createParserUIInitializationData(ImportingJob job,
         JSONUtilities.safePut(options, "guessCellValueTypes", false);
         JSONUtilities.safePut(options, "processQuotes", !nonNullSeparator.equals("\\t"));
         JSONUtilities.safePut(options, "quoteCharacter", String.valueOf(DEFAULT_QUOTE_CHAR));
-        JSONUtilities.safePut(options, "trimStrings", true); // FIXME: ignored?
+        JSONUtilities.safePut(options, "trimStrings", true);
 
         return options;
     }
@@ -146,6 +146,8 @@ public void parseOneFile(
         if (tsv) {
             TsvParserSettings settings = new TsvParserSettings();
             settings.setMaxCharsPerColumn(256 * 1024); // TODO: Perhaps use a lower default and make user configurable?
+            settings.setIgnoreLeadingWhitespaces(false);
+            settings.setIgnoreTrailingWhitespaces(false);
             parser = new TsvParser(settings);
         } else {
             CsvParserSettings settings = new CsvParserSettings();

File: main/tests/server/src/com/google/refine/importers/SeparatorBasedImporterTests.java
Patch:
@@ -240,7 +240,7 @@ public void readDoesNotTrimLeadingTrailingWhitespaceOnNoTrimStrings(String sep)
         String input = " data1 " + inputSeparator + " 3.4 " + inputSeparator + " data3 ";
 
         try {
-            prepareOptions(sep, -1, 0, 0, 0, false, false, false);
+            prepareOptions(sep, -1, 0, 0, 0, false, true, false);
             parseOneFile(SUT, new StringReader(input));
         } catch (Exception e) {
             Assert.fail("Exception during file parse", e);

File: extensions/wikibase/src/org/openrefine/wikibase/manifests/Manifest.java
Patch:
@@ -16,7 +16,7 @@ public interface Manifest {
     public static final String PROPERTY_TYPE = "property";
     public static final String MEDIAINFO_TYPE = "mediainfo";
     public static final int DEFAULT_MAX_EDITS_PER_MINUTE = 60;
-    public static final String DEFAULT_TAG_TEMPLATE = "openrefine-${version}";
+    public static final String DEFAULT_TAG_TEMPLATE = "openrefine";
 
     /**
      * The version of the manifest object, which determines its JSON format.

File: main/tests/server/src/com/google/refine/expr/functions/JsonizeTests.java
Patch:
@@ -32,11 +32,11 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.util.CalendarParserException;
+import com.google.refine.grel.GrelTestBase;
 
-public class JsonizeTests extends RefineTest {
+public class JsonizeTests extends GrelTestBase {
 
     @Test
     public void testToString() throws CalendarParserException {

File: main/tests/server/src/com/google/refine/expr/functions/ToDateTests.java
Patch:
@@ -35,12 +35,12 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.util.CalendarParser;
 import com.google.refine.expr.util.CalendarParserException;
+import com.google.refine.grel.GrelTestBase;
 
-public class ToDateTests extends RefineTest {
+public class ToDateTests extends GrelTestBase {
 
     @Test
     public void testToDate() throws CalendarParserException {

File: main/tests/server/src/com/google/refine/expr/functions/ToNumberTests.java
Patch:
@@ -34,11 +34,11 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.GrelTestBase;
 
-public class ToNumberTests extends RefineTest {
+public class ToNumberTests extends GrelTestBase {
 
     private static final Double EPSILON = 0.000001;
     static Properties bindings = new Properties();

File: main/tests/server/src/com/google/refine/expr/functions/ToStringTests.java
Patch:
@@ -32,12 +32,12 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.util.CalendarParser;
 import com.google.refine.expr.util.CalendarParserException;
+import com.google.refine.grel.GrelTestBase;
 
-public class ToStringTests extends RefineTest {
+public class ToStringTests extends GrelTestBase {
 
     @Test
     public void testToString() throws CalendarParserException {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/InArrayTests.java
Patch:
@@ -36,10 +36,10 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class InArrayTests extends RefineTest {
+public class InArrayTests extends GrelTestBase {
 
     static Properties bindings;
     static final List<String> listArray = Arrays.asList("v1", "v2", "v3");

File: main/tests/server/src/com/google/refine/expr/functions/arrays/JoinTests.java
Patch:
@@ -29,10 +29,10 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 
-public class JoinTests extends RefineTest {
+public class JoinTests extends GrelTestBase {
 
     @Test
     public void joinArray() throws ParsingException {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/ReverseTests.java
Patch:
@@ -29,10 +29,10 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 
-public class ReverseTests extends RefineTest {
+public class ReverseTests extends GrelTestBase {
 
     @Test
     public void reverseJsonArray() throws ParsingException {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/SortTests.java
Patch:
@@ -29,11 +29,11 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 
-public class SortTests extends RefineTest {
+public class SortTests extends GrelTestBase {
 
     @Test
     public void sortJsonArray() throws ParsingException {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/UniquesTests.java
Patch:
@@ -29,10 +29,10 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 
-public class UniquesTests extends RefineTest {
+public class UniquesTests extends GrelTestBase {
 
     @Test
     public void uniquesJsonArray() throws ParsingException {

File: main/tests/server/src/com/google/refine/expr/functions/booleans/BooleanTests.java
Patch:
@@ -38,10 +38,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class BooleanTests extends RefineTest {
+public class BooleanTests extends GrelTestBase {
 
     private static String TRUTH_TABLE[][] = {
             { "and", "true", "true", "true", "true" },

File: main/tests/server/src/com/google/refine/expr/functions/date/DatePartTests.java
Patch:
@@ -39,9 +39,9 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class DatePartTests extends RefineTest {
+public class DatePartTests extends GrelTestBase {
 
     static Properties bindings;
 

File: main/tests/server/src/com/google/refine/expr/functions/date/IncTests.java
Patch:
@@ -36,10 +36,10 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class IncTests extends RefineTest {
+public class IncTests extends GrelTestBase {
 
     private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd-HH:mm:ss.SSSSSSSSSX");
 

File: main/tests/server/src/com/google/refine/expr/functions/date/NowTests.java
Patch:
@@ -35,9 +35,9 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class NowTests extends RefineTest {
+public class NowTests extends GrelTestBase {
 
     private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd-HH:mm:ss.SSSSSSSSSX");
 

File: main/tests/server/src/com/google/refine/expr/functions/html/ParseHtmlTests.java
Patch:
@@ -35,10 +35,10 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class ParseHtmlTests extends RefineTest {
+public class ParseHtmlTests extends GrelTestBase {
 
     static Properties bindings;
     static String h = "<html>\n" +

File: main/tests/server/src/com/google/refine/expr/functions/strings/ChompTests.java
Patch:
@@ -31,9 +31,9 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class ChompTests extends RefineTest {
+public class ChompTests extends GrelTestBase {
 
     @Test
     public void testChomp() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/DecodeTest.java
Patch:
@@ -4,10 +4,10 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class DecodeTest extends RefineTest {
+public class DecodeTest extends GrelTestBase {
 
     @Test
     public void testDecode() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/EncodeTest.java
Patch:
@@ -4,10 +4,10 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class EncodeTest extends RefineTest {
+public class EncodeTest extends GrelTestBase {
 
     @Test
     public void testEncode() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/EndsWithTests.java
Patch:
@@ -32,9 +32,9 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class EndsWithTests extends RefineTest {
+public class EndsWithTests extends GrelTestBase {
 
     @Test
     public void testStartsWith() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/EscapeTests.java
Patch:
@@ -32,9 +32,9 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class EscapeTests extends RefineTest {
+public class EscapeTests extends GrelTestBase {
 
     @Test
     public void testEscape() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/FindTests.java
Patch:
@@ -36,12 +36,12 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineServlet;
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
 /**
  * Test cases for find function.
  */
-public class FindTests extends RefineTest {
+public class FindTests extends GrelTestBase {
 
     static Properties bindings;
 

File: main/tests/server/src/com/google/refine/expr/functions/strings/ParseUriTest.java
Patch:
@@ -7,11 +7,11 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 import com.google.refine.util.ParsingUtilities;
 
-public class ParseUriTest extends RefineTest {
+public class ParseUriTest extends GrelTestBase {
 
     private String sampleUri;
 

File: main/tests/server/src/com/google/refine/expr/functions/strings/PhoneticTests.java
Patch:
@@ -33,13 +33,13 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.clustering.binning.ColognePhoneticKeyer;
 import com.google.refine.clustering.binning.KeyerFactory;
 import com.google.refine.clustering.binning.Metaphone3Keyer;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class PhoneticTests extends RefineTest {
+public class PhoneticTests extends GrelTestBase {
 
     @BeforeTest
     public void registerKeyers() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/RangeTests.java
Patch:
@@ -32,13 +32,13 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
 /**
  * Tests for the range function.
  */
-public class RangeTests extends RefineTest {
+public class RangeTests extends GrelTestBase {
 
     private static final Integer[] EMPTY_ARRAY = new Integer[0];
 

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReplaceTests.java
Patch:
@@ -32,10 +32,10 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class ReplaceTests extends RefineTest {
+public class ReplaceTests extends GrelTestBase {
 
     @Test
     public void testReplace() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/SplitTests.java
Patch:
@@ -34,10 +34,10 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class SplitTests extends RefineTest {
+public class SplitTests extends GrelTestBase {
 
     @Test
     public void testSplit() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/StartsWithTests.java
Patch:
@@ -32,9 +32,9 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class StartsWithTests extends RefineTest {
+public class StartsWithTests extends GrelTestBase {
 
     @Test
     public void testStartsWith() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToLowercaseTests.java
Patch:
@@ -30,10 +30,10 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class ToLowercaseTests extends RefineTest {
+public class ToLowercaseTests extends GrelTestBase {
 
     @Test
     public void testtoLowercaseInvalidParams() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToTitlecaseTests.java
Patch:
@@ -30,10 +30,10 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class ToTitlecaseTests extends RefineTest {
+public class ToTitlecaseTests extends GrelTestBase {
 
     @Test
     public void testToTitlecaseInvalidParams() {

File: main/tests/server/src/com/google/refine/expr/functions/strings/TrimTests.java
Patch:
@@ -32,10 +32,10 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class TrimTests extends RefineTest {
+public class TrimTests extends GrelTestBase {
 
     private static String NBSP = "\u00A0";
     private static String ENQUAD = "\u2000";

File: main/tests/server/src/com/google/refine/expr/functions/strings/UnescapeTests.java
Patch:
@@ -31,9 +31,9 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
+import com.google.refine.grel.GrelTestBase;
 
-public class UnescapeTests extends RefineTest {
+public class UnescapeTests extends GrelTestBase {
 
     @Test
     public void testUnescape() {

File: main/tests/server/src/com/google/refine/expr/functions/xml/ParseXmlTests.java
Patch:
@@ -36,10 +36,10 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.GrelTestBase;
 
-public class ParseXmlTests extends RefineTest {
+public class ParseXmlTests extends GrelTestBase {
 
     static Properties bindings;
     static String x = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +

File: main/tests/server/src/com/google/refine/grel/controls/ForEachIndexTests.java
Patch:
@@ -33,12 +33,12 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.MetaParser;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 import com.google.refine.util.TestUtils;
 
-public class ForEachIndexTests extends RefineTest {
+public class ForEachIndexTests extends GrelTestBase {
 
     @Test
     public void serializeForEachIndex() {

File: main/tests/server/src/com/google/refine/grel/controls/ForEachTests.java
Patch:
@@ -34,14 +34,14 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.MetaParser;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 import com.google.refine.util.TestUtils;
 
-public class ForEachTests extends RefineTest {
+public class ForEachTests extends GrelTestBase {
 
     @Test
     public void serializeForEach() {

File: main/tests/server/src/com/google/refine/grel/controls/ForRangeTests.java
Patch:
@@ -34,14 +34,14 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.MetaParser;
 import com.google.refine.expr.ParsingException;
+import com.google.refine.grel.GrelTestBase;
 import com.google.refine.util.TestUtils;
 
-public class ForRangeTests extends RefineTest {
+public class ForRangeTests extends GrelTestBase {
 
     @Test
     public void serializeForRange() {

File: main/src/com/google/refine/LookupCacheManager.java
Patch:
@@ -37,7 +37,6 @@
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.HasFieldsListImpl;
 import com.google.refine.expr.WrappedRow;
-import com.google.refine.expr.functions.Cross;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
@@ -50,6 +49,8 @@
  */
 public class LookupCacheManager {
 
+    public static final String INDEX_COLUMN_NAME = "_OpenRefine_Index_Column_Name_";
+
     protected final Map<String, ProjectLookup> _lookups = new HashMap<>();
 
     /**
@@ -111,7 +112,7 @@ protected void computeLookup(ProjectLookup lookup) throws LookupException {
         }
 
         // if this is a lookup on the index column
-        if (lookup.targetColumnName.equals(Cross.INDEX_COLUMN_NAME)) {
+        if (INDEX_COLUMN_NAME.equals(lookup.targetColumnName)) {
             for (int r = 0; r < targetProject.rows.size(); r++) {
                 lookup.valueToRowIndices.put(String.valueOf(r), Collections.singletonList(r));
             }

File: main/tests/server/src/com/google/refine/RefineTest.java
Patch:
@@ -67,6 +67,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ParsingException;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.Parser;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
@@ -118,6 +119,7 @@ public void init() {
         }
         // This just keeps track of any failed test, for cleanupWorkspace
         testFailed = false;
+        MetaParser.registerLanguageParser("grel", "GREL", Parser.grelParser, "value");
     }
 
     @BeforeMethod

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -101,9 +101,8 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {
             "    \"status\" : \"pending\"\n" +
             " }";
 
-    @Override
     @BeforeTest
-    public void init() {
+    public void initOperation() {
         logger = LoggerFactory.getLogger(this.getClass());
         OperationRegistry.registerOperation(getCoreModule(), "column-addition-by-fetching-urls",
                 ColumnAdditionByFetchingURLsOperation.class);

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -27,11 +27,12 @@
 
 package com.google.refine.importers;
 
+import static com.google.refine.importing.ImportingUtilities.getInputStreamReader;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
@@ -184,7 +185,7 @@ static private ArrayList<Object> getCells(String line, int[] widths) {
     static public int[] guessColumnWidths(File file, String encoding) {
         try {
             InputStream is = new FileInputStream(file);
-            Reader reader = (encoding != null) ? new InputStreamReader(is, encoding) : new InputStreamReader(is);
+            Reader reader = getInputStreamReader(is, encoding);
             LineNumberReader lineNumberReader = new LineNumberReader(reader);
 
             try {

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -138,6 +138,7 @@ public void parseOneFile(
                 if (useInputStream) {
                     parseOneFile(project, metadata, job, fileSource, inputStream, limit, options, exceptions);
                 } else {
+                    // Although this is called "common" encoding, it may represent the user's override of the encoding
                     String commonEncoding = JSONUtilities.getString(options, "encoding", null);
                     if (commonEncoding != null && commonEncoding.isEmpty()) {
                         commonEncoding = null;

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -37,7 +37,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
@@ -242,7 +241,7 @@ static public class Separator {
 
     static public CsvFormat guessFormat(File file, String encoding) {
         try (InputStream is = new FileInputStream(file);
-                Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);
+                Reader reader = ImportingUtilities.getInputStreamReader(is, encoding);
                 LineNumberReader lineNumberReader = new LineNumberReader(reader)) {
             CsvParserSettings settings = new CsvParserSettings();
             // We could provide a set of delimiters to consider below if we wanted to restrict this
@@ -265,7 +264,7 @@ static public Separator guessSeparator(File file, String encoding) {
     static public Separator guessSeparator(File file, String encoding, boolean handleQuotes) {
         try {
             try (InputStream is = new FileInputStream(file);
-                    Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);
+                    Reader reader = ImportingUtilities.getInputStreamReader(is, encoding);
                     LineNumberReader lineNumberReader = new LineNumberReader(reader)) {
 
                 List<Separator> separators = new ArrayList<>();

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -32,7 +32,6 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 
 import com.google.common.base.CharMatcher;
@@ -56,8 +55,7 @@ public String guess(File file, String encoding, String seedFormat) {
             }
 
             InputStream bis = new BoundedInputStream(fis, 64 * 1024); // TODO: This seems like a lot
-            try (BufferedReader reader = new BufferedReader(
-                    encoding != null ? new InputStreamReader(bis, encoding) : new InputStreamReader(bis))) {
+            try (BufferedReader reader = new BufferedReader(ImportingUtilities.getInputStreamReader(bis, encoding))) {
                 int totalChars = 0;
                 long openBraces = 0;
                 int closeBraces = 0;

File: main/src/com/google/refine/io/FileHistoryEntryManager.java
Patch:
@@ -92,7 +92,7 @@ protected void loadChange(HistoryEntry historyEntry, File file) throws Exception
             Pool pool = new Pool();
             ZipEntry poolEntry = zipFile.getEntry("pool.txt");
             if (poolEntry != null) {
-                pool.load(new InputStreamReader(
+                pool.load(new InputStreamReader( // TODO: Missing encoding here
                         zipFile.getInputStream(poolEntry)));
             } // else, it's a legacy project file
 

File: main/tests/server/src/com/google/refine/importers/ImporterTest.java
Patch:
@@ -175,7 +175,7 @@ protected void parseOneInputStreamAsReader(
         ImportColumnGroup rootColumnGroup = new ImportColumnGroup();
         List<Exception> exceptions = new ArrayList<Exception>();
 
-        Reader reader = new InputStreamReader(inputStream);
+        Reader reader = new InputStreamReader(inputStream); // FIXME: Why no encoding here
         parser.parseOneFile(
                 project,
                 metadata,

File: main/tests/server/src/com/google/refine/importing/EncodingGuesserTests.java
Patch:
@@ -52,6 +52,8 @@ public void testEncodingGuesser() throws IOException {
 
         checkEncoding("example-latin1.tsv", "windows-1252"); // close enough - these overlap a lot
         checkEncoding("example-utf8.tsv", "utf-8");
+        checkEncoding("example-utf16le-bom.tsv", "utf-16le");
+        checkEncoding("example-utf16be-bom.tsv", "utf-16be");
         checkEncoding("csv-with-bom.csv", "utf-8-bom");
     }
 

File: main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java
Patch:
@@ -481,7 +481,7 @@ public void testImportCompressedFiles() throws IOException, URISyntaxException {
             InputStream is = ImportingUtilities.tryOpenAsCompressedFile(tmp, null, null);
             Assert.assertNotNull(is, "Failed to open compressed file: " + filename);
 
-            reader = new InputStreamReader(is);
+            reader = new InputStreamReader(is); // TODO: This needs an encoding
             Iterable<CSVRecord> records = CSVFormat.DEFAULT.parse(reader);
 
             Assert.assertEquals(StreamSupport.stream(records.spliterator(), false).count(), LINES * 2,

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -53,7 +53,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
-import org.apache.poi.util.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -190,7 +189,7 @@ protected void untar(File destDir, InputStream inputStream) throws IOException {
             } else {
                 FileOutputStream fout = new FileOutputStream(destEntry);
                 try {
-                    IOUtils.copy(tin, fout);
+                    tin.transferTo(fout);
                 } finally {
                     fout.close();
                 }

File: main/src/com/google/refine/history/History.java
Patch:
@@ -291,7 +291,7 @@ synchronized public void save(Writer writer, Properties options) throws IOExcept
         writer.write("/e/\n");
     }
 
-    synchronized public void load(Project project, LineNumberReader reader) throws Exception {
+    synchronized public void load(Project project, LineNumberReader reader) throws IOException {
         String line;
         while ((line = reader.readLine()) != null && !"/e/".equals(line)) {
             int equal = line.indexOf('=');

File: main/src/com/google/refine/io/FileHistoryEntryManager.java
Patch:
@@ -52,6 +52,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 public class FileHistoryEntryManager implements HistoryEntryManager {
 
+    public static final String HISTORY_DIR = "history";
+
     @Override
     public void delete(HistoryEntry historyEntry) {
         File file = getChangeFile(historyEntry);
@@ -141,7 +143,7 @@ protected File getChangeFile(HistoryEntry historyEntry) {
     protected File getHistoryDir(HistoryEntry historyEntry) {
         File dir = new File(((FileProjectManager) ProjectManager.singleton)
                 .getProjectDir(historyEntry.projectID),
-                "history");
+                HISTORY_DIR);
         dir.mkdirs();
 
         return dir;

File: main/src/com/google/refine/model/Column.java
Patch:
@@ -153,7 +153,7 @@ public void save(Writer writer) {
         }
     }
 
-    static public Column load(String s) throws Exception {
+    static public Column load(String s) throws IOException {
         return ParsingUtilities.mapper.readValue(s, Column.class);
     }
 

File: main/src/com/google/refine/model/ColumnModel.java
Patch:
@@ -222,7 +222,7 @@ synchronized public void save(Writer writer, Properties options) throws IOExcept
         writer.write("/e/\n");
     }
 
-    synchronized public void load(LineNumberReader reader) throws Exception {
+    synchronized public void load(LineNumberReader reader) throws IOException {
         String line;
         while ((line = reader.readLine()) != null && !"/e/".equals(line)) {
             int equal = line.indexOf('=');

File: main/src/com/google/refine/model/Recon.java
Patch:
@@ -33,6 +33,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.model;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -388,7 +389,7 @@ public Integer getMatchRank() {
         return null;
     }
 
-    static public Recon loadStreaming(String s) throws Exception {
+    static public Recon loadStreaming(String s) throws IOException {
         return ParsingUtilities.mapper.readValue(s, Recon.class);
     }
 

File: main/src/com/google/refine/model/ReconCandidate.java
Patch:
@@ -33,6 +33,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.model;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -89,12 +90,12 @@ public boolean fieldAlsoHasFields(String name) {
         return false;
     }
 
-    static public ReconCandidate loadStreaming(String s) throws Exception {
+    static public ReconCandidate loadStreaming(String s) throws IOException {
         return ParsingUtilities.mapper.readValue(s, ReconCandidate.class);
     }
 
     @Deprecated
-    static public ReconCandidate loadStreaming(JsonParser jp) throws Exception {
+    static public ReconCandidate loadStreaming(JsonParser jp) throws IOException {
         JsonToken t = jp.getCurrentToken();
         if (t == JsonToken.VALUE_NULL || t != JsonToken.START_OBJECT) {
             return null;

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -203,7 +203,7 @@ public void save(Writer writer, Properties options) {
         }
     }
 
-    static public Row load(String s, Pool pool) throws Exception {
+    static public Row load(String s, Pool pool) throws IOException {
         return s.length() == 0 ? null : loadStreaming(s, pool);
     }
 
@@ -218,7 +218,7 @@ static public Row deserialize(
         return new Row(cells, flagged, starred);
     }
 
-    static public Row loadStreaming(String s, Pool pool) throws Exception {
+    static public Row loadStreaming(String s, Pool pool) throws IOException {
         InjectableValues injectableValues = new InjectableValues.Std()
                 .addValue("pool", pool);
         return ParsingUtilities.mapper.setInjectableValues(injectableValues)

File: main/tests/server/src/com/google/refine/expr/functions/CrossTests.java
Patch:
@@ -127,7 +127,7 @@ public void crossFunctionMissingProject() throws Exception {
     public void crossFunctionMultipleProjects() throws Exception {
         String duplicateProjectName = "Duplicate";
         assertEquals(((EvalError) invoke("cross", "Anne", duplicateProjectName, "friend")).message,
-                "2 projects found with name: " + duplicateProjectName);
+                "Multiple (2) projects found with name: " + duplicateProjectName);
     }
 
     @Test

File: server/src/com/google/util/logging/IndentingLayout.java
Patch:
@@ -37,7 +37,7 @@
 import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.Node;

File: main/src/com/google/refine/commands/GetVersionCommand.java
Patch:
@@ -62,10 +62,11 @@ protected class VersionResponse {
         @JsonProperty("java_runtime_name")
         public String java_runtime_name = System.getProperty("java.runtime.name", "?");
         @JsonProperty("java_runtime_version")
-        // public String java_runtime_version = Runtime.getRuntime().version(); // Java 9 or later
-        public String java_runtime_version = System.getProperty("java.runtime.version", "?");
+        public String java_runtime_version = Runtime.getRuntime().version().toString();
         @JsonProperty("display_new_version_notice")
         public String display_new_version_notice = System.getProperty("refine.display.new.version.notice");
+        @JsonProperty("module_names")
+        public String[] modules = servlet.getModuleNames();
     }
 
     @Override

File: main/src/com/google/refine/model/Cell.java
Patch:
@@ -60,8 +60,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.util.Pool;
 import com.google.refine.util.StringUtils;
 
-public class Cell implements HasFields {
+public class Cell implements HasFields, Serializable {
 
+    private static final long serialVersionUID = 7456683757764146620L;
     @JsonIgnore
     final public Serializable value;
     @JsonIgnore

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -246,8 +246,8 @@ protected boolean hasValidCSRFTokenAsGET(HttpServletRequest request) {
         if (request == null) {
             throw new IllegalArgumentException("parameter 'request' should not be null");
         }
-        Properties options = ParsingUtilities.parseUrlParameters(request);
-        String token = options.getProperty("csrf_token");
+        Map<String, String> options = ParsingUtilities.parseParameters(request);
+        String token = options.get("csrf_token");
         return token != null && csrfFactory.validToken(token);
     }
 

File: main/src/com/google/refine/commands/importing/ImportingControllerCommand.java
Patch:
@@ -34,7 +34,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 package com.google.refine.commands.importing;
 
 import java.io.IOException;
-import java.util.Properties;
+import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
@@ -95,8 +95,8 @@ private ImportingController getController(HttpServletRequest request) {
          * will get read and we won't have a chance to parse the body ourselves. This is why we have to parse the URL
          * for parameters ourselves. Don't call request.getParameter() before calling internalImport().
          */
-        Properties options = ParsingUtilities.parseUrlParameters(request);
-        String name = options.getProperty("controller");
+        Map<String, String> options = ParsingUtilities.parseParameters(request);
+        String name = options.get("controller");
         if (name != null) {
             return ImportingManager.controllers.get(name);
         }

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -123,7 +123,7 @@ public void init() throws ServletException {
         FULL_VERSION = VERSION + " [" + REVISION + "]";
         FULLNAME += FULL_VERSION;
 
-        logger.info("Starting " + FULLNAME + "...");
+        logger.info("Starting {} ...", FULLNAME);
 
         s_singleton = this;
 
@@ -134,8 +134,7 @@ public void init() throws ServletException {
         if (data == null) {
             throw new ServletException("can't find servlet init config 'refine.data', I have to give up initializing");
         }
-        logger.error("initializing FileProjectManager with dir");
-        logger.error(data);
+        logger.info("Initializing FileProjectManager with data dir: {}", data);
         s_dataDir = new File(data);
         FileProjectManager.initialize(s_dataDir);
         ImportingManager.initialize(this);

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -123,10 +123,13 @@ public ObjectNode createParserUIInitializationData(
                 }
             }
         } catch (IOException e) {
+            JSONUtilities.safePut(options, "error", e.toString());
             logger.error("Error generating parser UI initialization data for Excel file", e);
         } catch (IllegalArgumentException e) {
+            JSONUtilities.safePut(options, "error", e.toString());
             logger.error("Error generating parser UI initialization data for Excel file (only Excel 97 & later supported)", e);
         } catch (POIXMLException | InvalidFormatException e) {
+            JSONUtilities.safePut(options, "error", e.toString());
             logger.error("Error generating parser UI initialization data for Excel file - invalid XML", e);
         }
 

File: main/src/com/google/refine/grel/Scanner.java
Patch:
@@ -255,7 +255,7 @@ public Token next(boolean regexPossible) {
                 } else {
                     sb.append(c);
                 }
-                _index++;
+                if (_index < _limit) _index++; // index should be incremented only if it is less than limit
             }
 
             detail = "Regex not properly closed";

File: main/tests/server/src/com/google/refine/grel/GrelTests.java
Patch:
@@ -244,5 +244,4 @@ public void testCrossFunctionEval() {
             Assert.fail("Unexpected parse failure for cross function: " + test);
         }
     }
-
 }

File: main/src/com/google/refine/importers/ImporterUtilities.java
Patch:
@@ -68,6 +68,7 @@ static public Serializable parseCellValue(String text) {
 
                 try {
                     double d = Double.parseDouble(text2);
+                    // FIXME: Why do we skip Infinities and NaNs?
                     if (!Double.isInfinite(d) && !Double.isNaN(d)) {
                         return d;
                     }

File: main/tests/server/src/com/google/refine/exporters/TsvExporterTests.java
Patch:
@@ -137,7 +137,7 @@ public void exportTsvWithLineBreaks() {
 
         assertEqualsSystemLineEnding(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                 "row0cell0\trow0cell1\trow0cell2\n" +
-                "row1cell0\t\"line\n\n\nbreak\"\trow1cell2\n" +
+                "row1cell0\tline\\n\\n\\nbreak\trow1cell2\n" +
                 "row2cell0\trow2cell1\trow2cell2\n");
     }
 
@@ -154,7 +154,7 @@ public void exportTsvWithComma() {
 
         assertEqualsSystemLineEnding(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                 "row0cell0\trow0cell1\trow0cell2\n" +
-                "row1cell0\t\"with\t tab\"\trow1cell2\n" +
+                "row1cell0\twith\\t tab\trow1cell2\n" +
                 "row2cell0\trow2cell1\trow2cell2\n");
     }
 
@@ -171,7 +171,7 @@ public void exportTsvWithQuote() {
 
         assertEqualsSystemLineEnding(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                 "row0cell0\trow0cell1\trow0cell2\n" +
-                "row1cell0\t\"line has \"\"quote\"\"\"\trow1cell2\n" +
+                "row1cell0\tline has \"quote\"\trow1cell2\n" +
                 "row2cell0\trow2cell1\trow2cell2\n");
     }
 

File: extensions/wikibase/tests/src/org/openrefine/wikibase/commands/CommandTest.java
Patch:
@@ -54,7 +54,8 @@ public abstract class CommandTest extends WikidataRefineTest {
 
     @BeforeMethod(alwaysRun = true)
     public void setUpProject() {
-        project = createCSVProject(TestingData.inceptionWithNewCsv);
+        project = createProject(TestingData.inceptionColumns,
+                TestingData.inceptionProjectGridWithNewItem);
         TestingData.reconcileInceptionCells(project);
         request = mock(HttpServletRequest.class);
         response = mock(HttpServletResponse.class);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/editing/NewEntityLibraryTest.java
Patch:
@@ -59,7 +59,8 @@ public void testRetrieveItem() {
 
     @Test
     public void testUpdateReconciledCells() {
-        Project project = createCSVProject(TestingData.inceptionWithNewCsv);
+        Project project = createProject(TestingData.inceptionColumns,
+                TestingData.inceptionProjectGridWithNewItem);
         StandardReconConfig config = new StandardReconConfig("http://my.endpoint",
                 "http://my.schema", "http://my.schema", "Q5", "human", true, 10, Collections.emptyList());
         project.columnModel.columns.get(0).setReconConfig(config);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/schema/WikibaseSchemaTest.java
Patch:
@@ -108,7 +108,8 @@ public class WikibaseSchemaTest extends WikidataRefineTest {
 
     @BeforeMethod
     public void setUpProject() {
-        project = this.createCSVProject(TestingData.inceptionCsv);
+        project = this.createProject(TestingData.inceptionColumns,
+                TestingData.inceptionProjectGrid);
         project.rows.get(0).cells.set(0, TestingData.makeMatchedCell("Q1377", "University of Ljubljana"));
         project.rows.get(1).cells.set(0, TestingData.makeMatchedCell("Q865528", "University of Warwick"));
     }

File: main/tests/server/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommandTests.java
Patch:
@@ -48,7 +48,7 @@ public void setUp() {
     @Test
     public void testJsonResponse() throws ServletException, IOException {
 
-        initWorkspace(null, null);
+        initWorkspace(null, null, null);
 
         command.doGet(request, response);
         String jsonResponse = writer.toString();

File: main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java
Patch:
@@ -131,6 +131,7 @@ public ColumnAdditionByFetchingURLsOperation(
         if (_httpHeadersJson != null) {
             for (HttpHeader header : _httpHeadersJson) {
                 if (!isNullOrEmpty(header.name) && !isNullOrEmpty(header.value)) {
+                    // TODO: Should we be checking headers against a whitelist here?
                     headers.add(new BasicHeader(header.name, header.value));
                 }
             }

File: extensions/wikibase/src/org/openrefine/wikibase/qa/scrutinizers/QuantityScrutinizer.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Scrutinizer checking for units and bounds in quantities.
- * 
+ *
  * @author Antonin Delpeuch
  *
  */
@@ -95,7 +95,7 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
             if (value.getUnitItemId() != null) {
                 currentUnit = value.getUnitItemId();
             }
-            if (allowedUnits != null &&
+            if (allowedUnits != null && (currentUnit != null || !allowedUnits.isEmpty()) &&
                     !allowedUnits.contains(currentUnit)) {
                 String issueType = currentUnit == null ? noUnitProvidedType : invalidUnitType;
                 QAWarning issue = new QAWarning(issueType, pid.getId(), QAWarning.Severity.IMPORTANT, 1);

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -274,7 +274,7 @@ public void update(long bytesRead, long contentLength, int itemCount) {
                     clipboardCount++;
 
                 } else if (name.equals("download")) {
-                    String urlString = Streams.asString(stream);
+                    String urlString = Streams.asString(stream).trim();
                     URL url = new URL(urlString);
 
                     if (!allowedProtocols.contains(url.getProtocol().toLowerCase())) {

File: main/src/com/google/refine/grel/Parser.java
Patch:
@@ -90,6 +90,8 @@ protected Evaluable parseExpression() throws ParsingException {
 
         while (_token != null &&
                 _token.type == TokenType.Operator &&
+                // FIXME: This filters the <> operator which is returned from the Scanner. Fix one or the other
+                // so that they agree with each other on whether it's an operator or not.
                 ">=<==!=".indexOf(_token.text) >= 0) {
 
             String op = _token.text;

File: main/src/com/google/refine/grel/Scanner.java
Patch:
@@ -286,6 +286,8 @@ public Token next(boolean regexPossible) {
         } else if (c == '<') {
             if (_index < _limit - 1 &&
                     (_text.charAt(_index + 1) == '=' ||
+                    // FIXME: Although this will scan <> as an operator, it will get filtered out in the
+                    // Parser without generating an error
                             _text.charAt(_index + 1) == '>')) {
 
                 _index += 2;

File: main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java
Patch:
@@ -222,8 +222,10 @@ public boolean visit(Project project, int rowIndex, Row row) {
                                     recon.judgment = Recon.Judgment.New;
                                     recon.match = null;
                                 } else if (_judgment == Judgment.None) {
-                                    recon.judgment = Recon.Judgment.None;
+                                    recon.judgment = recon.error == null ? Recon.Judgment.None : Recon.Judgment.Error;
                                     recon.match = null;
+                                } else if (_judgment == Judgment.Error) {
+                                    throw new IllegalArgumentException("Cannot manually set judgment to 'error'");
                                 }
 
                                 _dupReconMap.put(cell.recon.id, recon);

File: main/tests/server/src/com/google/refine/model/ColumnTests.java
Patch:
@@ -76,7 +76,8 @@ public void serializeColumn() throws Exception {
                 + "\"reconStats\":{"
                 + "    \"nonBlanks\":299,"
                 + "    \"newTopics\":0,"
-                + "    \"matchedTopics\":222"
+                + "    \"matchedTopics\":222,"
+                + "    \"errorTopics\":0"
                 + "}}";
         TestUtils.isSerializedTo(Column.load(json), json);
     }

File: main/tests/server/src/com/google/refine/model/ReconStatsTests.java
Patch:
@@ -35,7 +35,7 @@ public class ReconStatsTests {
 
     @Test
     public void serializeReconStats() {
-        ReconStats rs = new ReconStats(3, 1, 2);
-        TestUtils.isSerializedTo(rs, "{\"nonBlanks\":3,\"newTopics\":1,\"matchedTopics\":2}");
+        ReconStats rs = new ReconStats(3, 1, 2, 0);
+        TestUtils.isSerializedTo(rs, "{\"nonBlanks\":3,\"newTopics\":1,\"matchedTopics\":2,\"errorTopics\":0}");
     }
 }

File: main/tests/server/src/com/google/refine/model/recon/StandardReconConfigTests.java
Patch:
@@ -298,6 +298,7 @@ public void reconNonJsonTest() throws Exception {
             Cell cell = row.cells.get(1);
             assertNotNull(cell.value);
             assertNotNull(cell.recon.error);
+            assertEquals(cell.recon.judgment, Recon.Judgment.Error);
             // the recon object has error attribute
         }
     }

File: main/src/com/google/refine/operations/recon/ReconOperation.java
Patch:
@@ -298,6 +298,8 @@ public void run() {
                             // TODO add EvalError instead? That is not so convenient
                             // for users because they would lose the cell contents.
                             // Better leave the cell unreconciled so they can be reconciled again later.
+                            Cell oldCell = entry.cell;
+                            logger.warn("We have a null recon here" + " " + oldCell + " " + entry.rowIndex);
                             continue;
                         }
                         Cell oldCell = entry.cell;

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -276,9 +276,9 @@ static protected void performProcessAndRespond(
 
         HistoryEntry historyEntry = project.processManager.queueProcess(process);
         if (historyEntry != null) {
-            Writer w = response.getWriter();
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");
+            Writer w = response.getWriter();
             ParsingUtilities.defaultWriter.writeValue(w, new HistoryEntryResponse(historyEntry));
 
             w.flush();
@@ -307,7 +307,7 @@ static protected void respond(HttpServletResponse response, String content)
 
     static protected void respond(HttpServletResponse response, String status, String message)
             throws IOException {
-
+        response.setCharacterEncoding("UTF-8");
         Writer w = response.getWriter();
         JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);
         writer.writeStartObject();

File: main/tests/server/src/com/google/refine/importers/ImporterUtilitiesTests.java
Patch:
@@ -48,6 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
+import com.google.refine.messages.OpenRefineMessage;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
@@ -173,8 +174,8 @@ public void testGetOrAllocateColumn() {
         List<String> newColumnNames = new ArrayList<String>();
         Column c0 = ImporterUtilities.getOrAllocateColumn(project, newColumnNames, 0, false);
         Column c1 = ImporterUtilities.getOrAllocateColumn(project, newColumnNames, 1, false);
-        Assert.assertEquals(c0.getName(), "Column 1");
-        Assert.assertEquals(c1.getName(), "Column 2");
+        Assert.assertEquals(c0.getName(), OpenRefineMessage.importer_utilities_column() + " 1");
+        Assert.assertEquals(c1.getName(), OpenRefineMessage.importer_utilities_column() + " 2");
         Assert.assertEquals(newColumnNames.size(), 2);
     }
 }

File: extensions/wikibase/src/org/openrefine/wikibase/qa/scrutinizers/FileNameScrutinizer.java
Patch:
@@ -22,7 +22,7 @@ public class FileNameScrutinizer extends EditScrutinizer {
     // see https://commons.wikimedia.org/wiki/Commons:File_naming
     public static final int maxFileNameBytes = 240;
     public static final Pattern forbiddenFileNameChars = Pattern.compile(
-            ".*([^ %!\"$&'()*,\\-./\\d:;=?@\\p{L}\\p{Mc}\\\\^_`~\\x80-\\xFF+]|%[0-9A-Fa-f]{2}|&[A-Za-z0-9\\x80-\\xff]+;|&#[0-9]+;|&#x[0-9A-Fa-f]+;).*");
+            ".*([^ %!\"$&'()*,\\-./\\d:;=?@\\p{L}\\p{M}\\p{N}\\\\^_`~\\x80-\\xFF+]|%[0-9A-Fa-f]{2}|&[A-Za-z0-9\\x80-\\xff]+;|&#[0-9]+;|&#x[0-9A-Fa-f]+;).*");
 
     public static final String duplicateFileNamesInBatchType = "duplicate-file-names-in-batch";
     public static final String fileNamesAlreadyExistOnWikiType = "file-names-already-exist-on-wiki";
@@ -98,7 +98,7 @@ public void scrutinize(MediaInfoEdit edit) {
             // Invalid characters
             Matcher matcher = forbiddenFileNameChars.matcher(fileName);
             if (matcher.matches()) {
-                QAWarning issue = new QAWarning(invalidCharactersInFileNameType, null, QAWarning.Severity.CRITICAL,
+                QAWarning issue = new QAWarning(invalidCharactersInFileNameType, null, QAWarning.Severity.IMPORTANT,
                         1);
                 issue.setProperty("example_filename", fileName);
                 issue.setProperty("invalid_character", matcher.group(1));

File: main/src/com/google/refine/commands/project/RenameProjectCommand.java
Patch:
@@ -58,7 +58,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 
             pm.setName(name);
 
-            respond(response, "{ \"code\" : \"ok\" }");
+            respond(response, "{\"code\":\"ok\"}");
         } catch (Exception e) {
             respondException(response, e);
         }

File: main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java
Patch:
@@ -54,7 +54,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         ProjectMetadata meta = null;
 
         if (project == null) {
-            respond(response, "{ \"code\" : \"error\", \"message\" : \"Project cannot be found\" }");
+            respond(response, "{\"code\":\"error\",\"message\":\"Project cannot be found\"}");
             return;
         }
 

File: main/src/com/google/refine/commands/workspace/GetAllProjectTagsCommand.java
Patch:
@@ -55,7 +55,7 @@ protected AllProjectsTags(Set<String> tags) {
     public void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
 
-        Map<String, Integer> tagMap = ProjectManager.singleton.getAllProjectTags();
+        Map<String, Integer> tagMap = ProjectManager.singleton.getAllProjectsTags();
         Set<String> tags = tagMap == null ? Collections.emptySet() : tagMap.keySet();
         respondJSON(response, new AllProjectsTags(tags));
     }

File: main/tests/server/src/com/google/refine/io/FileProjectManagerTests.java
Patch:
@@ -66,7 +66,6 @@ protected class FileProjectManagerStub extends FileProjectManager {
         protected FileProjectManagerStub(File dir) {
             super(dir);
             _projectsMetadata.put(5555L, mock(ProjectMetadata.class));
-
         }
     }
 
@@ -115,6 +114,7 @@ public void saveReloadMultinationalCharacter() throws IOException {
     public void deleteProjectAndSaveWorkspace() throws IOException {
         FileProjectManager manager = new FileProjectManagerStub(workspaceDir);
         manager.saveWorkspace();
+        // TODO: Test tag updating on project deletion
         manager.deleteProject(5555);
         manager.saveWorkspace();
 

File: main/tests/server/src/com/google/refine/commands/recon/GuessTypesOfColumnCommandTests.java
Patch:
@@ -13,7 +13,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
@@ -150,7 +149,7 @@ public void testGuessTypes() throws IOException, ServletException, InterruptedEx
             TestUtils.assertEqualsAsJson(guessedTypes, writer.toString());
 
             RecordedRequest request = server.takeRequest(5, TimeUnit.SECONDS);
-            Assert.assertEquals(request.getBody().readUtf8(), expectedQuery);
+            TestUtils.assertEqualAsQueries(request.getBody().readUtf8(), expectedQuery);
         }
     }
 }

File: main/tests/server/src/com/google/refine/model/recon/StandardReconConfigTests.java
Patch:
@@ -410,7 +410,7 @@ public void reconTest() throws Exception {
             String expected = "queries=" + URLEncoder.encode(
                     "{\"q0\":{\"query\":\"david lynch\",\"type\":\"Q11424\",\"properties\":[{\"pid\":\"P57\",\"v\":\"david lynch\"}],\"type_strict\":\"should\"}}",
                     "UTF-8");
-            assertEquals(query, expected);
+            TestUtils.assertEqualAsQueries(query, expected);
 
             Row row = project.rows.get(0);
             Cell cell = row.cells.get(1);

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -54,7 +54,6 @@ public String guess(File file, String encoding, String seedFormat) {
             if (ImportingUtilities.isCompressed(file)) {
                 return "binary";
             }
-            ;
 
             InputStream bis = new BoundedInputStream(fis, 64 * 1024); // TODO: This seems like a lot
             try (BufferedReader reader = new BufferedReader(

File: main/src/com/google/refine/operations/recon/ReconOperation.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Map;
 import java.util.Properties;
 
+import com.google.refine.expr.EvalError;
 import com.google.refine.messages.OpenRefineMessage;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: main/tests/server/src/com/google/refine/importers/SeparatorBasedImporterTests.java
Patch:
@@ -505,7 +505,7 @@ public void ignoreQuotes(String sep) {
         Assert.assertEquals(project.rows.size(), 1);
         Assert.assertEquals(project.rows.get(0).cells.size(), 4);
         Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
+        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2\"");
         Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
     }
 
@@ -637,7 +637,7 @@ public void readCsvWithPropertiesIgnoreQuotes() {
         Assert.assertEquals(project.rows.size(), 1);
         Assert.assertEquals(project.rows.get(0).cells.size(), 4);
         Assert.assertEquals((String) project.rows.get(0).cells.get(0).value, "data1");
-        Assert.assertEquals((String) project.rows.get(0).cells.get(1).value, "data2");
+        Assert.assertEquals((String) project.rows.get(0).cells.get(1).value, "data2\"");
         Assert.assertEquals((String) project.rows.get(0).cells.get(2).value, "data3");
         Assert.assertEquals((String) project.rows.get(0).cells.get(3).value, "data4");
     }

File: main/tests/server/src/com/google/refine/commands/recon/GuessTypesOfColumnCommandTests.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
+import java.util.concurrent.TimeUnit;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
@@ -148,7 +149,7 @@ public void testGuessTypes() throws IOException, ServletException, InterruptedEx
 
             TestUtils.assertEqualsAsJson(guessedTypes, writer.toString());
 
-            RecordedRequest request = server.takeRequest();
+            RecordedRequest request = server.takeRequest(5, TimeUnit.SECONDS);
             Assert.assertEquals(request.getBody().readUtf8(), expectedQuery);
         }
     }

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Properties;
 import java.util.Random;
+import java.util.concurrent.TimeUnit;
 
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
@@ -255,7 +256,7 @@ public void testHttpHeaders() throws Exception {
 
             runAndWait(op, 3000);
 
-            RecordedRequest request = server.takeRequest();
+            RecordedRequest request = server.takeRequest(5, TimeUnit.SECONDS);
             Assert.assertEquals(request.getHeader("user-agent"), userAgentValue);
             Assert.assertEquals(request.getHeader("authorization"), authorizationValue);
             Assert.assertEquals(request.getHeader("accept"), acceptValue);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/schema/strategies/QualifiersStatementMergerTests.java
Patch:
@@ -33,6 +33,7 @@ public class QualifiersStatementMergerTests {
     PropertyIdValue otherPid = Datamodel.makeWikidataPropertyIdValue("P898");
     PropertyIdValue otherPid2 = Datamodel.makeWikidataPropertyIdValue("P33333");
     Snak mainSnak = Datamodel.makeValueSnak(otherPid, qidA);
+    Snak otherMainSnak = Datamodel.makeValueSnak(otherPid, qidB);
     SnakGroup discriminatingQualifier1 = Datamodel.makeSnakGroup(
             Collections.singletonList(Datamodel.makeValueSnak(discrimatingQualifierPid, qidA)));
     SnakGroup discriminatingQualifier2 = Datamodel.makeSnakGroup(
@@ -53,6 +54,7 @@ public class QualifiersStatementMergerTests {
     Statement statementD = statement(Datamodel.makeClaim(qidA, mainSnak, Arrays.asList(
             nonDiscriminatingQualifier2, discriminatingQualifier1, nonDiscriminatingQualifier3)));
     Statement statementE = statement(Datamodel.makeClaim(qidA, mainSnak, Collections.emptyList()));
+    Statement statementF = statement(Datamodel.makeClaim(qidA, otherMainSnak, Collections.singletonList(discriminatingQualifier1)));
 
     @Test
     public void testMatchNoPids() {
@@ -74,6 +76,7 @@ public void testMatchWithPids() {
         assertTrue(SUTwithPids.match(statementA, statementD));
         assertFalse(SUTwithPids.match(statementA, statementE));
         assertTrue(SUTwithPids.match(statementC, statementD));
+        assertFalse(SUTwithPids.match(statementA, statementF));
     }
 
     @Test

File: server/src/com/google/refine/Refine.java
Patch:
@@ -44,6 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
@@ -218,7 +219,7 @@ public void init(String iface, int port, String host) throws Exception {
         this.addBean(handler);
         // Tell the server we want to try and shutdown gracefully
         // this means that the server will stop accepting new connections
-        // right away but it will continue to process the ones that
+        // right away, but it will continue to process the ones that
         // are in execution for the given timeout before attempting to stop
         // NOTE: this is *not* a blocking method, it just sets a parameter
         // that _server.stop() will rely on
@@ -284,7 +285,7 @@ static private void scanForUpdates(final File contextRoot, final WebAppContext c
         scanner.addListener(new Scanner.BulkListener() {
 
             @Override
-            public void filesChanged(@SuppressWarnings("rawtypes") List changedFiles) {
+            public void filesChanged(Set<String> set) {
                 try {
                     logger.info("Stopping context: " + contextRoot.getAbsolutePath());
                     context.stop();

File: server/src/com/google/refine/Refine.java
Patch:
@@ -487,7 +487,7 @@ public void actionPerformed(ActionEvent e) {
     }
 
     private void openBrowser() {
-        if (!Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
+        if (!Desktop.getDesktop().isSupported(Desktop.Action.BROWSE) || System.getenv("SNAP") != null) {
             try {
                 openBrowserFallback();
             } catch (IOException e) {

File: main/src/com/google/refine/ProjectMetadata.java
Patch:
@@ -137,6 +137,7 @@ public ProjectMetadata() {
 
     public ProjectMetadata(Instant created, Instant modified, String name) {
         this(created);
+        _modified = modified;
         _name = name;
     }
 

File: main/src/com/google/refine/sorting/StringCriterion.java
Patch:
@@ -54,11 +54,11 @@ public StringCriterion() {
         super();
         collator = Collator.getInstance();
         collator.setDecomposition(Collator.FULL_DECOMPOSITION);
-        collator.setStrength(Collator.SECONDARY);
     }
 
     @Override
     public KeyMaker createKeyMaker() {
+        collator.setStrength(caseSensitive ? Collator.IDENTICAL : Collator.SECONDARY);
         return new KeyMaker() {
 
             @Override

File: main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java
Patch:
@@ -56,7 +56,6 @@
 import org.apache.hc.client5.http.entity.mime.StringBody;
 import org.apache.hc.core5.http.ContentType;
 import org.apache.hc.core5.http.HttpEntity;
-import org.checkerframework.checker.units.qual.A;
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -110,7 +109,7 @@ public void testAllocateFileDeduplication() throws IOException {
         File dirA = new File(tempDir, "a");
         dirA.mkdir();
         File conflicting = new File(dirA, "dummy");
-        conflicting.createNewFile();
+        Assert.assertTrue(conflicting.createNewFile());
 
         File allocated = ImportingUtilities.allocateFile(dirA, ".././a/dummy");
         Assert.assertEquals(allocated, new File(dirA, "dummy-2"));

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -80,7 +80,7 @@ protected Row(List<Cell> cells, boolean flagged, boolean starred) {
 
     /**
      * Copy a row and return the copy. Note that this is a shallow copy, so if the contents of cells are changed in the
-     * original, they will be be changed in the duplicate.
+     * original, they will be changed in the duplicate.
      * 
      * @return the duplicated row
      */

File: main/src/com/google/refine/model/changes/MassRowChange.java
Patch:
@@ -46,6 +46,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 import com.google.refine.util.Pool;
 
+// TODO: This replaces all rows in the project with a new set of rows, but if only a small percentage of the rows
+// are being changed, it'd be much more efficient to apply a change list of new/modified rows.
 public class MassRowChange implements Change {
 
     final protected List<Row> _newRows;

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -169,6 +169,9 @@ protected void untar(File destDir, InputStream inputStream) throws IOException {
 
         while ((tarEntry = tin.getNextTarEntry()) != null) {
             File destEntry = new File(destDir, tarEntry.getName());
+            if (!destEntry.toPath().normalize().startsWith(destDir.toPath().normalize())) {
+                throw new IllegalArgumentException("Zip archives with files escaping their root directory are not allowed.");
+            }
             File parent = destEntry.getParentFile();
 
             if (!parent.exists()) {

File: main/src/com/google/refine/util/PatternSyntaxExceptionParser.java
Patch:
@@ -80,6 +80,7 @@ public String getUserMessage() {
                 msg = "The regular expression has a '*','+' or '?' in the wrong place.";
                 break;
             case "Unexpected internal error":
+            case "Unescaped trailing backslash":
                 msg = "The regular expression has a backslash '\\' at the end.";
                 break;
             case "Unclosed counted closure":

File: main/src/com/google/refine/operations/cell/TransposeColumnsIntoRowsOperation.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Cell;
@@ -282,7 +283,7 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
                 } else if (c == startColumnIndex || c < startColumnIndex + columnCount) {
                     if (_combinedColumnName != null) {
                         Cell newCell;
-                        if (cell == null || cell.value == null) {
+                        if (cell == null || !ExpressionUtils.isNonBlankData(cell.value)) {
                             if (_prependColumnName && !_ignoreBlankCells) {
                                 newCell = new Cell(column.getName() + _separator, null);
                             } else {
@@ -305,7 +306,7 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
 
                         transposedCells++;
                     } else {
-                        if (_ignoreBlankCells && (cell == null || cell.value == null)) {
+                        if (_ignoreBlankCells && (cell == null || !ExpressionUtils.isNonBlankData(cell.value))) {
                             continue;
                         }
 

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -73,10 +73,11 @@ public ObjectNode createParserUIInitializationData(ImportingJob job,
         ObjectNode options = super.createParserUIInitializationData(job, fileRecords, format);
 
         String separator = guessSeparator(job, fileRecords);
-        JSONUtilities.safePut(options, "separator", separator != null ? separator : "\\t");
+        String nonNullSeparator = separator != null ? separator : "\\t";
+        JSONUtilities.safePut(options, "separator", nonNullSeparator);
 
         JSONUtilities.safePut(options, "guessCellValueTypes", false);
-        JSONUtilities.safePut(options, "processQuotes", true);
+        JSONUtilities.safePut(options, "processQuotes", !nonNullSeparator.equals("\\t"));
         JSONUtilities.safePut(options, "quoteCharacter", String.valueOf(CSVParser.DEFAULT_QUOTE_CHARACTER));
         JSONUtilities.safePut(options, "trimStrings", true);
 

File: extensions/wikibase/src/org/openrefine/wikibase/commands/PreviewResults.java
Patch:
@@ -6,7 +6,6 @@
 import org.openrefine.wikibase.qa.QAWarning;
 import org.openrefine.wikibase.qa.QAWarning.Severity;
 import org.openrefine.wikibase.updates.EntityEdit;
-import org.openrefine.wikibase.updates.TermedStatementEntityEdit;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.JsonProcessingException;

File: extensions/wikibase/src/org/openrefine/wikibase/editing/MediaFileUtils.java
Patch:
@@ -7,8 +7,6 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
-import com.fasterxml.jackson.databind.node.ArrayNode;
-import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;
@@ -20,7 +18,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/wikibase/src/org/openrefine/wikibase/schema/strategies/SnakOnlyStatementMerger.java
Patch:
@@ -19,8 +19,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
 import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
-import org.wikidata.wdtk.datamodel.implementation.SomeValueSnakImpl;
-import org.wikidata.wdtk.datamodel.implementation.NoValueSnakImpl;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/FileNameScrutinizerTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.wikidata.wdtk.wikibaseapi.apierrors.MediaWikiApiErrorException;
 
 import java.io.IOException;
-import java.util.regex.Pattern;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verifyNoInteractions;

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/scrutinizers/NewEntityScrutinizerTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.openrefine.wikibase.updates.ItemEditBuilder;
 import org.openrefine.wikibase.updates.MediaInfoEdit;
 import org.openrefine.wikibase.updates.MediaInfoEditBuilder;
-import org.testng.Assert;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.Claim;

File: main/src/com/google/refine/commands/SetPreferenceCommand.java
Patch:
@@ -35,7 +35,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.io.IOException;
 import java.util.Collections;
-import java.util.Locale;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;

File: main/src/com/google/refine/expr/functions/Jsonize.java
Patch:
@@ -36,7 +36,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.IOException;
 import java.util.Properties;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;

File: main/src/com/google/refine/expr/functions/html/ParseHtml.java
Patch:
@@ -36,7 +36,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.expr.EvalError;
-import com.google.refine.expr.functions.Type;
 import com.google.refine.expr.functions.xml.ParseXml;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.EvalErrorMessage;

File: main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java
Patch:
@@ -36,7 +36,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.expr.EvalError;
-import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;

File: main/src/com/google/refine/expr/functions/strings/DetectLanguage.java
Patch:
@@ -9,11 +9,8 @@
 import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.DetectLanguageUtils;
 import com.optimaize.langdetect.i18n.LdLocale;
-import com.optimaize.langdetect.profiles.LanguageProfile;
-import com.optimaize.langdetect.profiles.LanguageProfileReader;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.Properties;
 
 public class DetectLanguage implements Function {

File: main/src/com/google/refine/expr/functions/xml/ParseXml.java
Patch:
@@ -35,7 +35,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
-import com.google.refine.expr.functions.Type;
 import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.jsoup.Jsoup;

File: main/src/com/google/refine/grel/controls/Filter.java
Patch:
@@ -39,7 +39,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
-import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.util.JsonValueConverter;

File: main/src/com/google/refine/grel/controls/ForEachIndex.java
Patch:
@@ -38,7 +38,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
-import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.util.JsonValueConverter;

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -41,7 +41,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.OutputStream;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Locale;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.stream.Collectors;

File: main/src/com/google/refine/model/Column.java
Patch:
@@ -35,16 +35,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.io.IOException;
 import java.io.Writer;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.refine.model.recon.ReconConfig;
 import com.google.refine.util.ParsingUtilities;
 

File: main/src/com/google/refine/preference/PreferenceStore.java
Patch:
@@ -37,7 +37,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
-import java.util.logging.Logger;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;

File: main/src/com/google/refine/util/HttpClient.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
-import java.util.regex.Matcher;
 
 import org.apache.hc.client5.http.ClientProtocolException;
 import org.apache.hc.client5.http.classic.methods.HttpGet;

File: main/tests/server/src/com/google/refine/HistoryEntryManagerStub.java
Patch:
@@ -37,7 +37,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.Writer;
 import java.util.Properties;
 
-import com.google.refine.ProjectManager;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.io.FileProjectManager;

File: main/tests/server/src/com/google/refine/ProjectManagerStub.java
Patch:
@@ -38,8 +38,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 
-import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
 

File: main/tests/server/src/com/google/refine/ProjectManagerTests.java
Patch:
@@ -37,7 +37,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import static org.mockito.Mockito.*;
 
 import java.lang.reflect.Field;
-import java.time.LocalDateTime;
 import java.util.ArrayList;
 
 import com.google.refine.model.Row;

File: main/tests/server/src/com/google/refine/browsing/EngineTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/exporters/OdsExporterTests.java
Patch:
@@ -57,13 +57,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.StringWriter;
 import java.time.OffsetDateTime;
 import java.util.List;
 import java.util.Properties;
 
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 public class OdsExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/expr/EvalErrorTests.java
Patch:
@@ -32,7 +32,6 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.EvalError;
 import com.google.refine.RefineTest;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperationTests.java
Patch:
@@ -43,9 +43,7 @@
 import java.util.Collections;
 import java.util.Properties;
 
-import static org.mockito.Mockito.mock;
 import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNull;
 
 public class ReconMarkNewTopicsOperationTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/operations/recon/ReconOperationTests.java
Patch:
@@ -35,10 +35,8 @@
 import java.util.Properties;
 
 import org.mockito.Mockito;
-import org.mockito.stubbing.OngoingStubbing;
 import org.testng.Assert;
 import org.testng.annotations.BeforeSuite;
-import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;

File: main/tests/server/src/com/google/refine/util/HttpClientTests.java
Patch:
@@ -3,9 +3,7 @@
 
 import org.testng.Assert;
 import org.testng.annotations.Test;
-import java.time.OffsetDateTime;
 import java.util.regex.Pattern;
-import java.util.regex.Matcher;
 
 public class HttpClientTests {
 

File: server/src/com/google/refine/Refine.java
Patch:
@@ -65,8 +65,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.Configurations;
-
 /**
  * Main class for Refine server application. Starts an instance of the Jetty HTTP server / servlet container (inner
  * class Refine Server).

File: main/src/com/google/refine/model/changes/MassRowChange.java
Patch:
@@ -75,6 +75,9 @@ public void revert(Project project) {
             project.rows.clear();
             project.rows.addAll(_oldRows);
 
+            project.columnModel.clearPrecomputes();
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(project.id);
+
             project.update();
         }
     }

File: main/src/com/google/refine/model/changes/RowRemovalChange.java
Patch:
@@ -91,6 +91,9 @@ public void revert(Project project) {
                 project.rows.add(index, row);
             }
 
+            project.columnModel.clearPrecomputes();
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(project.id);
+
             project.update();
         }
     }

File: main/src/com/google/refine/io/ProjectMetadataUtilities.java
Patch:
@@ -80,7 +80,7 @@ public static void save(ProjectMetadata projectMeta, File projectDir) throws IOE
                 file.delete();
             }
         }
-
+        projectMeta.setLastSave();
         tempFile.renameTo(file);
     }
 
@@ -132,7 +132,6 @@ private static ProjectMetadata loadMetaDataIfExist(File projectDir, String fileN
      *            the project directory
      * @param id
      *            the project id
-     * @return
      */
     static public ProjectMetadata recover(File projectDir, long id) {
         ProjectMetadata pm = null;

File: main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java
Patch:
@@ -180,9 +180,9 @@ public String getInsertSQL() {
         }
 
         boolean trimColNames = options == null ? false : JSONUtilities.getBoolean(options, "trimColumnNames", false);
-        String colNamesWithSep = columns.stream().map(col -> SqlCreateBuilder.addQuotes(col.replaceAll("[^a-zA-Z0-9_]", "_"))).collect(Collectors.joining(","));
+        String colNamesWithSep = columns.stream().map(col -> col.replaceAll("[^a-zA-Z0-9_]", "_")).collect(Collectors.joining(","));
         if (!trimColNames) {
-            colNamesWithSep = columns.stream().map(col -> SqlCreateBuilder.addQuotes(col)).collect(Collectors.joining(","));
+            colNamesWithSep = columns.stream().collect(Collectors.joining(","));
         }
 
         String valuesString = values.toString();

File: main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java
Patch:
@@ -180,9 +180,9 @@ public String getInsertSQL() {
         }
 
         boolean trimColNames = options == null ? false : JSONUtilities.getBoolean(options, "trimColumnNames", false);
-        String colNamesWithSep = columns.stream().map(col -> col.replaceAll("[^a-zA-Z0-9_]", "_")).collect(Collectors.joining(","));
+        String colNamesWithSep = columns.stream().map(col -> SqlCreateBuilder.addQuotes(col.replaceAll("[^a-zA-Z0-9_]", "_"))).collect(Collectors.joining(","));
         if (!trimColNames) {
-            colNamesWithSep = columns.stream().collect(Collectors.joining(","));
+            colNamesWithSep = columns.stream().map(col -> SqlCreateBuilder.addQuotes(col)).collect(Collectors.joining(","));
         }
 
         String valuesString = values.toString();

File: main/src/com/google/refine/ProjectMetadata.java
Patch:
@@ -382,6 +382,7 @@ public void setAnyField(String metaName, String valueString) {
             updateUserMetadata(metaName, valueString);
         } catch (SecurityException | IllegalArgumentException | IllegalAccessException e) {
             logger.error(ExceptionUtils.getFullStackTrace(e));
+            throw new RuntimeException(e);
         }
     }
 }

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -130,10 +130,12 @@ public void dispose() {
      */
     public void registerProject(Project project, ProjectMetadata projectMetadata) {
         synchronized (this) {
+            // Row count is duplicated in metadata, so make sure it is up-to-date
+            projectMetadata.setRowCount(project.rows.size());
             _projects.put(project.id, project);
             _projectsMetadata.put(project.id, projectMetadata);
             if (_projectsTags == null)
-                _projectsTags = new HashMap<String, Integer>();
+                _projectsTags = new HashMap<>();
             String[] tags = projectMetadata.getTags();
             if (tags != null) {
                 for (String tag : tags) {

File: main/tests/server/src/com/google/refine/RefineTest.java
Patch:
@@ -178,8 +178,8 @@ protected Project createCSVProject(String projectName, String input) {
 
         List<Exception> exceptions = new ArrayList<Exception>();
         importer.parseOneFile(project, metadata, job, "filesource", new StringReader(input), -1, options, exceptions);
-        project.update();
         ProjectManager.singleton.registerProject(project, metadata);
+        project.update();
 
         projects.add(project);
         importingJobs.add(job);

File: main/src/com/google/refine/expr/functions/math/FactN.java
Patch:
@@ -61,7 +61,7 @@ public Object call(Properties bindings, Object[] args) {
 
     }
 
-    /*
+    /**
      * Calculates the factorial of an integer, i, for a decreasing step of n. e.g. A double factorial would have a step
      * of 2. Returns 1 for zero and negative integers.
      */

File: main/tests/server/src/com/google/refine/importers/ExcelImporterTests.java
Patch:
@@ -281,8 +281,8 @@ public void readXlsxAsText() throws IOException {
         assertEquals(project.rows.get(1).getCellValue(7), "1");
         assertEquals(project.rows.get(2).getCellValue(7), "2");
 
-        assertEquals(project.rows.get(1).getCellValue(8), "100.00%");
-        assertEquals(project.rows.get(2).getCellValue(8), "200.00%");
+        assertEquals(project.rows.get(1).getCellValue(8), String.format("%.2f", 100.0) + "%");
+        assertEquals(project.rows.get(2).getCellValue(8), String.format("%.2f", 200.0) + "%");
 
         assertEquals(project.rows.get(1).getCellValue(9), "0001");
         assertEquals(project.rows.get(2).getCellValue(9), "0002");
@@ -291,7 +291,7 @@ public void readXlsxAsText() throws IOException {
 
         assertEquals(project.rows.get(ROWS - 1).getCellValue(11), NOW_STRING.substring(0, 10)); // date only
 
-        assertEquals(project.rows.get(ROWS - 1).getCellValue(12), "$1,234.56");
+        assertEquals(project.rows.get(ROWS - 1).getCellValue(12), "$" + NUMBER_FORMAT.format(1234.56));
 
         verify(options, times(1)).get("ignoreLines");
         verify(options, times(1)).get("headerLines");

File: main/src/com/google/refine/importing/ImportingJob.java
Patch:
@@ -121,7 +121,7 @@ public void setProgress(int percent, String message) {
             }
             JSONUtilities.safePut(progress, "message", message);
             JSONUtilities.safePut(progress, "percent", percent);
-            JSONUtilities.safePut(progress, "memory", Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() / 1048576);
+            JSONUtilities.safePut(progress, "memory", (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1048576);
             JSONUtilities.safePut(progress, "maxmemory", Runtime.getRuntime().maxMemory() / 1048576);
         }
     }

File: main/src/com/google/refine/expr/functions/Cross.java
Patch:
@@ -59,13 +59,13 @@ public Object call(Properties bindings, Object[] args) {
             // if 2nd argument is omitted or set to "", use the current project name
             Object targetProjectName = "";
             boolean isCurrentProject = false;
-            if (args.length < 2 || args[1].equals("")) {
+            if (args.length < 2 || "".equals(args[1])) {
                 isCurrentProject = true;
             } else {
                 targetProjectName = args[1];
             }
             // if 3rd argument is omitted or set to "", use the index column
-            Object targetColumnName = args.length < 3 || args[2].equals("") ? INDEX_COLUMN_NAME : args[2];
+            Object targetColumnName = args.length < 3 || "".equals(args[2]) ? INDEX_COLUMN_NAME : args[2];
 
             long targetProjectID;
             ProjectLookup lookup;

File: server/src/com/google/refine/Refine.java
Patch:
@@ -173,7 +173,7 @@ public void init(String iface, int port, String host) throws Exception {
 
         String memory = Configurations.get("refine.memory");
         if (memory != null) {
-            logger.info("refine.memory size: " + memory + " JVM Max heap: " + Runtime.getRuntime().maxMemory());
+            logger.info("refine.memory size: " + memory + " JVM Max heap: " + Runtime.getRuntime().maxMemory() + " bytes");
         }
 
         HttpConfiguration httpConfig = new HttpConfiguration();

File: server/src/com/google/refine/Refine.java
Patch:
@@ -516,11 +516,11 @@ private void openBrowserFallback() throws IOException {
         Runtime rt = Runtime.getRuntime();
 
         if (SystemUtils.IS_OS_WINDOWS) {
-            rt.exec("rundll32 url.dll,FileProtocolHandler " + uri);
+            rt.exec(new String[] { "rundll32 ", "url.dll,FileProtocolHandler ", String.valueOf(uri) });
         } else if (SystemUtils.IS_OS_MAC_OSX) {
-            rt.exec("open " + uri);
+            rt.exec(new String[] { "open ", String.valueOf(uri) });
         } else if (SystemUtils.IS_OS_LINUX) {
-            rt.exec("xdg-open " + uri);
+            rt.exec(new String[] { "xdg-open", String.valueOf(uri) });
         } else {
             logger.warn("Java Desktop class not supported on this platform. Please open %s in your browser", uri.toString());
         }

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -477,7 +477,7 @@ public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
                         }
                     } else {
                         // TODO: better error reporting
-                        logger.warn("Service error for text: " + text + "\n  Job code: " + job.code);
+                        logger.warn("Service error for text: " + text + "\n  Job code: " + job.code + "\n  Response: " + o.toString());
                     }
 
                     if (recon != null) {

File: main/src/com/google/refine/expr/functions/xml/SelectXml.java
Patch:
@@ -71,7 +71,7 @@ public String getDescription() {
 
     @Override
     public String getParams() {
-        return "string s, element e";
+        return "element e, string s";
     }
 
     @Override

File: extensions/wikibase/src/org/openrefine/wikibase/schema/WbExpression.java
Patch:
@@ -26,6 +26,8 @@
 
 import org.openrefine.wikibase.schema.exceptions.QAWarningException;
 import org.openrefine.wikibase.schema.exceptions.SkipSchemaExpressionException;
+import org.openrefine.wikibase.schema.exceptions.SpecialValueNoValueException;
+import org.openrefine.wikibase.schema.exceptions.SpecialValueSomeValueException;
 import org.openrefine.wikibase.schema.validation.ValidationState;
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;
@@ -64,7 +66,7 @@ public interface WbExpression<T> {
      * error in the validation state.
      */
     public T evaluate(ExpressionContext ctxt)
-            throws SkipSchemaExpressionException, QAWarningException;
+            throws SkipSchemaExpressionException, QAWarningException, SpecialValueNoValueException, SpecialValueSomeValueException;
 
     /**
      * Check that this expression is fully formed and ready to be evaluated.

File: main/src/com/google/refine/expr/functions/TimeSinceUnixEpochToDate.java
Patch:
@@ -32,11 +32,11 @@ public Object call(Properties bindings, Object[] args) {
                     date = OffsetDateTime.ofInstant(instant, zoneId);
                     return date;
                 } else if (unit.equals("millisecond")) {
-                    instant = Instant.ofEpochSecond(epoch / 1000);
+                    instant = Instant.ofEpochMilli(epoch);
                     date = OffsetDateTime.ofInstant(instant, zoneId);
                     return date;
                 } else if (unit.equals("microsecond")) {
-                    instant = Instant.ofEpochSecond(epoch / 1000000);
+                    instant = Instant.ofEpochSecond(epoch / 1000000, epoch % 1000000 * 1000);
                     date = OffsetDateTime.ofInstant(instant, zoneId);
                     return date;
                 }

File: main/src/com/google/refine/exporters/OdsExporter.java
Patch:
@@ -79,7 +79,7 @@ public void startFile(JsonNode options) {
                 table = OdfTable.newTable(odfDoc);
                 String tableName = ProjectManager.singleton.getProjectMetadata(project.id).getName();
 
-                // the ODF document might already contain some other tables
+                // the ODF document might already contain some other tables
                 try {
                     table.setTableName(tableName);
                 } catch (IllegalArgumentException e) {

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -146,7 +146,7 @@ private Locale getLocale(List<String> formats) {
                     }
                 }
             } catch (IllformedLocaleException e) {
-                // We ignore this. It PROBABLY means we got a date format string, not a language code
+                // We ignore this. It PROBABLY means we got a date format string, not a language code,
                 // although it could be a malformed language tag like zh_TW instead of zh-TW
             }
         }

File: extensions/wikibase/src/org/openrefine/wikibase/editing/MediaFileUtils.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.google.refine.util.ParsingUtilities;
 
@@ -271,7 +272,8 @@ public static class MediaUploadResponse {
          */
         public void checkForErrors() throws MediaWikiApiErrorException {
             if (!"Success".equals(result)) {
-                throw new MediaWikiApiErrorException(result, "The file upload action returned the '" + result + "' error code");
+                throw new MediaWikiApiErrorException(result,
+                        "The file upload action returned the '" + result + "' error code. Warnings are: " + Objects.toString(warnings));
             }
             if (filename == null) {
                 throw new MediaWikiApiErrorException(result, "The MediaWiki API did not return any filename for the uploaded file");

File: extensions/wikibase/src/org/openrefine/wikibase/updates/MediaInfoEdit.java
Patch:
@@ -246,6 +246,8 @@ public MediaInfoIdValue uploadNewFile(WikibaseDataEditor editor, MediaFileUtils
             response = mediaFileUtils.uploadRemoteFile(url, fileName, wikitext, summary, tags);
         }
 
+        response.checkForErrors();
+
         // Upload the structured data
         ReconEntityIdValue reconEntityIdValue = (ReconEntityIdValue) id;
         MediaInfoIdValue mid = response.getMid(mediaFileUtils.getApiConnection(), reconEntityIdValue.getRecon().identifierSpace);

File: extensions/wikibase/tests/src/org/openrefine/wikibase/qa/EditInspectorTest.java
Patch:
@@ -10,8 +10,8 @@
 
 public class EditInspectorTest {
 
-    private static final int scrutinizerCount = 22;
-    private static final int scrutinizerNotDependingOnPropertyConstraintCount = 7;
+    private static final int scrutinizerCount = 23;
+    private static final int scrutinizerNotDependingOnPropertyConstraintCount = 8;
 
     @Test
     public void testNoScrutinizerSkipped() throws Exception {

File: main/src/com/google/refine/ProjectMetadata.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Map;
 
+import com.google.common.base.CharMatcher;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -199,7 +200,7 @@ public void setTags(String[] tags) {
             List<String> tmpTags = new ArrayList<String>(tags.length);
             for (String tag : tags) {
                 if (tag != null) {
-                    String trimmedTag = tag.trim();
+                    String trimmedTag = CharMatcher.whitespace().trimFrom(tag);
 
                     if (!trimmedTag.isEmpty()) {
                         tmpTags.add(trimmedTag);

File: main/src/com/google/refine/clustering/binning/FingerprintKeyer.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
+import com.google.common.base.CharMatcher;
 import com.google.common.collect.ImmutableMap;
 
 /**
@@ -101,7 +102,7 @@ protected String normalize(String s) {
 
     protected String normalize(String s, boolean strong) {
         if (strong) {
-            s = s.trim(); // first off, remove whitespace around the string
+            s = CharMatcher.whitespace().trimFrom(s); // first off, remove whitespace around the string
             s = s.toLowerCase(); // TODO: This is using the default locale. Is that what we want?
         }
         s = stripDiacritics(s);

File: main/src/com/google/refine/commands/project/SetProjectTagsCommand.java
Patch:
@@ -34,6 +34,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import com.google.common.base.CharMatcher;
 import com.google.refine.ProjectManager;
 import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
@@ -84,7 +85,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         String[] newTags = newT.split(" |\\,");
         List<String> polishedTags = new ArrayList<String>(newTags.length);
         for (String tag : newTags) {
-            tag = tag.trim();
+            tag = CharMatcher.whitespace().trimFrom(tag);
 
             if (!tag.isEmpty()) {
                 if (allProjectTags != null) {

File: main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java
Patch:
@@ -55,6 +55,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.google.common.base.CharMatcher;
 import com.google.refine.commands.Command;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.model.Column;
@@ -151,7 +152,7 @@ protected List<TypeGroup> guessTypes(Project project, Column column, String serv
         for (Row row : project.rows) {
             Object value = row.getCellValue(cellIndex);
             if (ExpressionUtils.isNonBlankData(value)) {
-                String s = value.toString().trim();
+                String s = CharMatcher.whitespace().trimFrom(value.toString());
                 if (!sampleSet.contains(s)) {
                     samples.add(s);
                     sampleSet.add(s);

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -47,6 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.TimeZone;
 
+import com.google.common.base.CharMatcher;
 import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
@@ -77,7 +78,7 @@ public Object call(Properties bindings, Object[] args) {
                 return arg0;
             } else if (arg0 instanceof Long) {
                 o1 = ((Long) arg0).toString(); // treat integers as years
-            } else if (arg0 instanceof String && arg0.toString().trim().length() > 0) {
+            } else if (arg0 instanceof String && CharMatcher.whitespace().trimFrom(arg0.toString()).length() > 0) {
                 o1 = (String) arg0;
             } else {
                 // ignore cell values that aren't Date, Calendar, Long or String

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -40,6 +40,7 @@
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.google.common.base.CharMatcher;
 import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
@@ -97,7 +98,7 @@ public void parseOneFile(
             if (strings.length > 0) {
                 retrievedColumnNames = new ArrayList<Object>();
                 for (String s : strings) {
-                    s = s.trim();
+                    s = CharMatcher.whitespace().trimFrom(s);
                     if (!s.isEmpty()) {
                         retrievedColumnNames.add(s);
                     }

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -75,7 +75,7 @@ public String guess(File file, String encoding, String seedFormat) {
 
                 String line;
                 while ((line = reader.readLine()) != null && controls < CONTROLS_THRESHOLD) {
-                    line = line.trim();
+                    line = CharMatcher.whitespace().trimFrom(line);
                     controls += CharMatcher.javaIsoControl().and(CharMatcher.whitespace().negate()).countIn(line);
                     openBraces += line.chars().filter(ch -> ch == '{').count();
                     closeBraces += StringUtils.countMatches(line, "}");

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import com.google.common.base.CharMatcher;
 import org.sweble.wikitext.parser.ParserConfig;
 import org.sweble.wikitext.parser.WikitextEncodingValidator;
 import org.sweble.wikitext.parser.WikitextParser;
@@ -308,7 +309,7 @@ public String renderCellAsString(WtNode e) {
             if (value == null) {
                 value = "";
             }
-            value = value.trim();
+            value = CharMatcher.whitespace().trimFrom(value);
             cellStringBuilder = null;
             return value;
         }

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.InjectableValues;
+import com.google.common.base.CharMatcher;
 import com.google.refine.expr.CellTuple;
 import com.google.refine.expr.HasFields;
 import com.google.refine.util.ParsingUtilities;
@@ -144,7 +145,7 @@ public boolean isCellBlank(int cellIndex) {
     }
 
     protected boolean isValueBlank(Object value) {
-        return value == null || (value instanceof String && ((String) value).trim().length() == 0);
+        return value == null || (value instanceof String && CharMatcher.whitespace().trimFrom((String) value).length() == 0);
     }
 
     public void setCell(int cellIndex, Cell cell) {

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java
Patch:
@@ -56,4 +56,5 @@ public void testInvalidSchema()
 
         assertEquals("error", ParsingUtilities.mapper.readTree(writer.toString()).get("code").asText());
     }
+
 }

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -346,6 +346,7 @@ static protected void respondException(HttpServletResponse response, Exception e
             throws IOException, ServletException {
 
         logger.warn("Exception caught", e);
+        e.printStackTrace();
 
         if (response == null) {
             throw new ServletException("Response object can't be null");

File: extensions/wikidata/src/org/openrefine/wikidata/updates/MediaInfoEdit.java
Patch:
@@ -291,7 +291,7 @@ public boolean requiresFetchingExistingState() {
          * If all the Wikibase-related fields are empty, then we can skip fetching the current entity from the wiki.
          * This makes it possible to use the wikitext editing feature for Wikibases which do not use MediaInfo.
          */
-        return !(statements.isEmpty() &&
+        return !isNew() && !(statements.isEmpty() &&
                 labels.isEmpty() &&
                 labelsIfNew.isEmpty());
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/MediaInfoEditTest.java
Patch:
@@ -138,7 +138,7 @@ public void testUploadNewFile() throws MediaWikiApiErrorException, IOException {
                 .addFilePath(url)
                 .addWikitext("{{wikitext}}")
                 .build();
-        assertTrue(edit.requiresFetchingExistingState());
+        assertFalse(edit.requiresFetchingExistingState()); // new entities do not require fetching existing state
 
         // set up dependencies
         WikibaseDataEditor editor = mock(WikibaseDataEditor.class);

File: main/src/com/google/refine/importers/ImporterUtilities.java
Patch:
@@ -46,6 +46,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
+import com.google.refine.messages.OpenRefineMessage;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
@@ -129,7 +130,7 @@ static public Column getOrAllocateColumn(Project project, List<String> currentFi
         if (index < currentFileColumnNames.size()) {
             return project.columnModel.getColumnByName(currentFileColumnNames.get(index));
         } else if (index >= currentFileColumnNames.size()) {
-            String prefix = "Column ";
+            String prefix = OpenRefineMessage.importer_utilities_column() + " ";
             int i = index + 1;
             while (true) {
                 String columnName = prefix + i;

File: main/src/com/google/refine/operations/recon/ReconOperation.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Map;
 import java.util.Properties;
 
+import com.google.refine.messages.OpenRefineMessage;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -144,7 +145,7 @@ public class ReconProcess extends LongRunningProcess implements Runnable {
                 "  \"columnName\" : \"" + _columnName + "\",\n" +
                 "  \"expression\" : \"forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \\\"(unreconciled)\\\", \\\"(blank)\\\"))\",\n"
                 +
-                "    \"name\" : \"" + _columnName + ": judgment\"\n" +
+                "    \"name\" : \"" + _columnName + ": " + OpenRefineMessage.recon_operation_judgement_facet_name() + "\"\n" +
                 "    },\n" +
                 "    \"facetOptions\" : {\n" +
                 "      \"scroll\" : false\n" +
@@ -157,7 +158,7 @@ public class ReconProcess extends LongRunningProcess implements Runnable {
                 "    \"columnName\" : \"" + _columnName + "\",\n" +
                 "    \"expression\" : \"cell.recon.best.score\",\n" +
                 "    \"mode\" : \"range\",\n" +
-                "    \"name\" : \"" + _columnName + ": best candidate's score\"\n" +
+                "    \"name\" : \"" + _columnName + ": " + OpenRefineMessage.recon_operation_score_facet_name() + "\"\n" +
                 "         },\n" +
                 "         \"facetType\" : \"range\"\n" +
                 "}";

File: extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java
Patch:
@@ -70,6 +70,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             schema.validate(validation);
             if (!validation.getValidationErrors().isEmpty()) {
                 Map<String, Object> json = new HashMap<>();
+                json.put("code", "error");
                 json.put("reason", "invalid-schema");
                 json.put("message", "Invalid Wikibase schema");
                 json.put("errors", validation.getValidationErrors());

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbMediaInfoEditExpr.java
Patch:
@@ -80,7 +80,7 @@ public void validate(ValidationState validation) {
             } else if (!(nde.getType() == NameDescType.LABEL || nde.getType() == NameDescType.LABEL_IF_NEW)) {
                 validation.addError("Invalid term type for MediaInfo entity: " + nde.getType());
             } else {
-                validation.enter(new PathElement(nde.getPathElementType()));
+                validation.enter(new PathElement(nde.getPathElementType(), nde.getStaticLanguage()));
                 nde.validate(validation);
                 validation.leave();
             }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommandTest.java
Patch:
@@ -95,6 +95,7 @@ public void testIncompleteSchema() throws IOException, ServletException {
         command.doPost(request, response);
 
         String expectedError = "{"
+                + "\"code\":\"error\","
                 + "\"reason\":\"invalid-schema\","
                 + "\"message\":\"Invalid Wikibase schema\","
                 + "\"errors\":["
@@ -111,7 +112,7 @@ public void testIncompleteSchema() throws IOException, ServletException {
                 + "{\"type\":\"value\",\"position\":-1,\"name\":\"retrieved (P813)\"}"
                 + "],\"message\":\"Empty date field\"}]}";
 
-        assertEquals(writer.toString(), expectedError);
+        TestUtils.assertEqualsAsJson(writer.toString(), expectedError);
     }
 
     @Test
@@ -120,6 +121,6 @@ public void testCsrfProtection() throws ServletException, IOException {
         when(request.getParameter("schema")).thenReturn(schemaJson);
 
         command.doPost(request, response);
-        TestUtils.assertEqualAsJson("{\"code\":\"error\",\"message\":\"Missing or invalid csrf_token parameter\"}", writer.toString());
+        TestUtils.assertEqualsAsJson("{\"code\":\"error\",\"message\":\"Missing or invalid csrf_token parameter\"}", writer.toString());
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbNameDescExprTest.java
Patch:
@@ -95,8 +95,9 @@ public void testSkipped() throws QAWarningException {
     public void testGetters() {
         WbMonolingualExpr monolingualExpr = TestingData.getTestMonolingualExpr("en", "English", "not sure what");
         WbNameDescExpr aliasExpr = new WbNameDescExpr(WbNameDescExpr.NameDescType.ALIAS, monolingualExpr);
-        assertEquals(WbNameDescExpr.NameDescType.ALIAS, aliasExpr.getType());
-        assertEquals(monolingualExpr, aliasExpr.getValue());
+        assertEquals(aliasExpr.getType(), WbNameDescExpr.NameDescType.ALIAS);
+        assertEquals(aliasExpr.getValue(), monolingualExpr);
+        assertEquals(aliasExpr.getStaticLanguage(), "English");
     }
 
     @Test

File: extensions/wikidata/src/org/openrefine/wikidata/updates/MediaInfoEdit.java
Patch:
@@ -160,7 +160,9 @@ public FullMediaInfoUpdate toEntityUpdate(EntityDocument entityDocument) {
         StatementUpdate statementUpdate = toStatementUpdate(mediaInfoDocument);
 
         return new FullMediaInfoUpdate(
-                (MediaInfoIdValue) id,
+                // important: use the id from the document, not from the update, as
+                // they might not be the same if a redirect has happened
+                mediaInfoDocument.getEntityId(),
                 entityDocument.getRevisionId(),
                 labelUpdate,
                 statementUpdate,

File: extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java
Patch:
@@ -177,7 +177,9 @@ public void inspect(List<EntityEdit> editBatch, WikibaseSchema schema) throws Ex
         }
 
         if (warningStore.getNbWarnings() == 0) {
-            warningStore.addWarning(new QAWarning("no-issue-detected", null, QAWarning.Severity.INFO, 0));
+            QAWarning warning = new QAWarning("no-issue-detected", null, QAWarning.Severity.INFO, 0);
+            warning.setFacetable(false);
+            warningStore.addWarning(warning);
         }
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/QAWarning.java
Patch:
@@ -103,6 +103,7 @@ public QAWarning aggregate(QAWarning other) {
             newSeverity = other.getSeverity();
         }
         QAWarning merged = new QAWarning(getType(), getBucketId(), newSeverity, newCount);
+        merged.setFacetable(facetable && other.isFacetable());
         for (Entry<String, Object> entry : properties.entrySet()) {
             merged.setProperty(entry.getKey(), entry.getValue());
         }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java
Patch:
@@ -68,7 +68,9 @@ public void testValidSchema() throws Exception {
 
         ObjectNode response = ParsingUtilities.evaluateJsonStringToObjectNode(writer.toString());
         ArrayNode edits = (ArrayNode) response.get("edits_preview");
-        assertEquals(3, edits.size());
+        assertEquals(edits.size(), 3);
+        ArrayNode issues = (ArrayNode) response.get("warnings");
+        assertEquals(issues.size(), 4);
     }
 
     @Test

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/QAWarningTest.java
Patch:
@@ -25,6 +25,7 @@
 package org.openrefine.wikidata.qa;
 
 import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertFalse;
 
 import org.openrefine.wikidata.testing.JacksonSerializationTest;
 import org.testng.annotations.Test;
@@ -47,13 +48,15 @@ public void testAggregate() {
         QAWarning firstWarning = new QAWarning("add-statements-with-invalid-format", "P2427", QAWarning.Severity.INFO,
                 1);
         firstWarning.setProperty("foo", "bar");
+        firstWarning.setFacetable(false);
         assertEquals(exampleWarning.getAggregationId(), firstWarning.getAggregationId());
         QAWarning merged = firstWarning.aggregate(exampleWarning);
         assertEquals(2, merged.getCount());
         assertEquals(exampleWarning.getAggregationId(), merged.getAggregationId());
         assertEquals(exampleWarning.getType(), merged.getType());
         assertEquals(exampleWarning.getSeverity(), merged.getSeverity());
         assertEquals("bar", merged.getProperties().get("foo"));
+        assertFalse(merged.isFacetable());
     }
 
     @Test

File: main/src/com/google/refine/expr/functions/Coalesce.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -54,7 +55,7 @@ public Object call(Properties bindings, Object[] args) {
             }
             return null;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects at least two arguments");
+        return new EvalError(EvalErrorMessage.expects_at_least_two_args(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/Cross.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.WrappedCell;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 import com.google.refine.model.Project;
@@ -91,8 +92,8 @@ public Object call(Properties bindings, Object[] args) {
             }
         }
 
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this)
-                + " expects a cell or value, a project name to look up (optional), and a column name in that project (optional)");
+        // name to look up (optional), and a column name in that project (optional)");
+        return new EvalError(EvalErrorMessage.fun_cross_expects_value_project_column(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/Jsonize.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.FunctionDescription;
@@ -54,8 +55,7 @@ public Object call(Properties bindings, Object[] args) {
                 throw new RuntimeException(e);
             }
         }
-        String errorMessage = " accepts a single argument";
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + errorMessage);
+        return new EvalError(EvalErrorMessage.expects_one_arg(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/Length.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.HasFieldsList;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -66,7 +67,7 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array or a string");
+        return new EvalError(EvalErrorMessage.expects_one_array_or_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/TimeSinceUnixEpochToDate.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Properties;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -41,8 +42,8 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this)
-                + " accepts a number and an optional second argument containing a string specifying the units");
+        // + " accepts a number and an optional second argument containing a string specifying the units");
+        return new EvalError(EvalErrorMessage.fun_time_since_unix_epoch_to_date(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/ToNumber.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -66,10 +67,10 @@ public Object call(Properties bindings, Object[] args) {
                     } catch (NumberFormatException e) {
                     }
                 }
-                return new EvalError("Unable to parse as number");
+                return new EvalError(EvalErrorMessage.unable_to_parse_as_number());
             }
         } else {
-            return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects one non-null argument");
+            return new EvalError(EvalErrorMessage.expects_one_non_null_arg(ControlFunctionRegistry.getFunctionName(this)));
         }
     }
 

File: main/src/com/google/refine/expr/functions/Type.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -68,7 +69,7 @@ public Object call(Properties bindings, Object[] args) {
             }
             return "undefined";
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects one argument");
+        return new EvalError(EvalErrorMessage.expects_one_arg(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Join.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.util.JsonValueConverter;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -91,7 +92,7 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array and a string");
+        return new EvalError(EvalErrorMessage.expects_one_array_and_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Reverse.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.JSONUtilities;
@@ -75,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array");
+        return new EvalError(EvalErrorMessage.expects_one_array(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Uniques.java
Patch:
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.JSONUtilities;
@@ -69,7 +70,7 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array");
+        return new EvalError(EvalErrorMessage.expects_one_array(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/booleans/And.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
             }
             return true;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two or more booleans");
+        return new EvalError(EvalErrorMessage.expects_two_or_more_bool(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/booleans/Not.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Boolean) {
             return !objectToBoolean(args[0]);
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a boolean");
+        return new EvalError(EvalErrorMessage.expects_one_bool(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     public static boolean objectToBoolean(Object o) {

File: main/src/com/google/refine/expr/functions/booleans/Or.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
             }
             return false;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two or more booleans");
+        return new EvalError(EvalErrorMessage.expects_two_or_more_bool(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/booleans/Xor.java
Patch:
@@ -29,6 +29,7 @@ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -39,7 +40,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length >= 2 && args[0] instanceof Boolean && args[1] instanceof Boolean) {
             return (Boolean) args[0] ^ (Boolean) args[1];
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 or more booleans");
+        return new EvalError(EvalErrorMessage.expects_two_or_more_bool(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/date/Inc.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -58,7 +59,8 @@ public Object call(Properties bindings, Object[] args) {
 
             return date.plus(amount, getField(unit));
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a date, a number and a string");
+        // string");
+        return new EvalError(EvalErrorMessage.expects_date_number_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     private TemporalUnit getField(String unit) {

File: main/src/com/google/refine/expr/functions/html/ParseHtml.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.Type;
 import com.google.refine.expr.functions.xml.ParseXml;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -52,7 +53,8 @@ public Object call(Properties bindings, Object[] args) {
                 return new ParseXml().call(bindings, args, "html");
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a single String as an argument");
+        // argument");
+        return new EvalError(EvalErrorMessage.expects_single_string_as_arg(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/ACos.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.acos(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/ASin.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.asin(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/ATan.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.atan(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/ATan2.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -48,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
                 && args[1] instanceof Number) {
             return Math.atan2(((Number) args[0]).doubleValue(), ((Number) args[1]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Abs.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.abs(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Ceil.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return (long) Math.ceil(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Cos.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.cos(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Cosh.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return StrictMath.cosh(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Degrees.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.toDegrees(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Even.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Even.roundUpToEven(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     public static double roundUpToEven(double d) {

File: main/src/com/google/refine/expr/functions/math/Exp.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.exp(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Fact.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return FactN.factorial(((Number) args[0]).intValue(), 1);
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Floor.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return (long) Math.floor(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -48,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
                 && args[1] instanceof Number) {
             return GreatestCommonDenominator.GCD(((Number) args[0]).doubleValue(), ((Number) args[1]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(this));
     }
 
     public static double GCD(double a, double b) {

File: main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -49,7 +50,7 @@ public Object call(Properties bindings, Object[] args) {
                 && args[1] instanceof Number) {
             return LeastCommonMultiple.LCM(((Number) args[0]).doubleValue(), ((Number) args[1]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     public static double LCM(double a, double b) {

File: main/src/com/google/refine/expr/functions/math/Ln.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.log(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Log.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.log10(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Max.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                     ((Number) args[0]).doubleValue(),
                     ((Number) args[1]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Min.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                     ((Number) args[0]).doubleValue(),
                     ((Number) args[1]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Mod.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
 
             return a % b;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Odd.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Odd.roundUpToOdd(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     public static double roundUpToOdd(double d) {

File: main/src/com/google/refine/expr/functions/math/Pow.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -49,7 +50,7 @@ public Object call(Properties bindings, Object[] args) {
                     ((Number) args[0]).doubleValue(),
                     ((Number) args[1]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Quotient.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -48,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
                 && args[1] instanceof Number) {
             return Math.floor((((Number) args[0]).doubleValue() / ((Number) args[1]).doubleValue()));
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
+        return new EvalError(EvalErrorMessage.expects_two_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Radians.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.toRadians(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/RandomNumber.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -64,8 +65,8 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this)
-                + " expects no arguments or two numbers, the first must be less than the second");
+        // the first must be less than the second");
+        return new EvalError(EvalErrorMessage.expects_no_arg_or_two_numbers_asc(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Round.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.round(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Sin.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.sin(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Sinh.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return StrictMath.sinh(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Sum.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -74,7 +75,7 @@ public Object call(Properties bindings, Object[] args) {
                 return total;
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array of numbers");
+        return new EvalError(EvalErrorMessage.expects_array_of_numbers(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Tan.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.tan(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Tanh.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -47,7 +48,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return StrictMath.tanh(((Number) args[0]).doubleValue());
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
+        return new EvalError(EvalErrorMessage.expects_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/DetectLanguage.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.base.Optional;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.DetectLanguageUtils;
@@ -38,15 +39,15 @@ public Object call(Properties bindings, Object[] args) {
                         if (lang.isPresent()) { // if the language is detected
                             return lang.get().getLanguage(); // return the language code
                         } else { // if the language is not detected
-                            return new EvalError("Language detection failed"); // return an error
+                            return new EvalError(EvalErrorMessage.language_detect_failed(ControlFunctionRegistry.getFunctionName(this)));
                         }
                     } catch (IOException e) { // if the language detection failed
                         e.printStackTrace(); // print the stack trace
                     }
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " requires one argument");
+        return new EvalError(EvalErrorMessage.expects_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/EndsWith.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                 return ((String) s1).endsWith((String) s2);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
+        return new EvalError(EvalErrorMessage.expects_two_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Escape.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.net.URLEncoder;
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.text.StringEscapeUtils;
 
@@ -77,7 +78,8 @@ public Object call(Properties bindings, Object[] args) {
                     } catch (UnsupportedEncodingException e) {
                     }
                 } else {
-                    return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " does not recognize mode '" + mode + "'.");
+                    // + mode + "'.");
+                    return new EvalError(EvalErrorMessage.unrecognized_mode(ControlFunctionRegistry.getFunctionName(this), mode));
                 }
             }
         }

File: main/src/com/google/refine/expr/functions/strings/Find.java
Patch:
@@ -35,6 +35,7 @@
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -67,7 +68,7 @@ public Object call(Properties bindings, Object[] args) {
 
             return allMatches.toArray(new String[0]);
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string or a regex");
+        return new EvalError(EvalErrorMessage.expects_one_string_or_regex(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/IndexOf.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                 return ((String) s1).indexOf((String) s2);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
+        return new EvalError(EvalErrorMessage.expects_two_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/LastIndexOf.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                 return ((String) s1).lastIndexOf((String) s2);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
+        return new EvalError(EvalErrorMessage.expects_two_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/MD5.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.codec.digest.DigestUtils;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
             String s = (o instanceof String) ? (String) o : o.toString();
             return DigestUtils.md5Hex(s);
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
+        return new EvalError(EvalErrorMessage.expects_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Match.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -72,7 +73,7 @@ public Object call(Properties bindings, Object[] args) {
 
             return null;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects regex");
+        return new EvalError(EvalErrorMessage.expects_one_regex(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/NGram.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
@@ -74,7 +75,7 @@ public Object call(Properties bindings, Object[] args) {
 
             return null;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string and a number");
+        return new EvalError(EvalErrorMessage.expects_one_string_and_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.clustering.binning.NGramFingerprintKeyer;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
             }
             return null;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects at least a string");
+        return new EvalError(EvalErrorMessage.expects_at_least_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     protected TreeSet<String> ngram_split(String s, int size) {

File: main/src/com/google/refine/expr/functions/strings/ParseJson.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.ParsingUtilities;
@@ -52,7 +53,8 @@ public Object call(Properties bindings, Object[] args) {
                 try {
                     return ParsingUtilities.mapper.readTree(o1.toString());
                 } catch (IOException e) {
-                    return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " failed: " + e.getMessage());
+                    // e.getMessage());
+                    return new EvalError(EvalErrorMessage.failed(ControlFunctionRegistry.getFunctionName(this), e.getMessage()));
                 }
             }
         }

File: main/src/com/google/refine/expr/functions/strings/Replace.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -60,7 +61,8 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 3 strings, or 1 string, 1 regex, and 1 string");
+        // regex, and 1 string");
+        return new EvalError(EvalErrorMessage.expects_three_strings_as_string_regex_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/ReplaceChars.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
                 return StringUtils.replaceChars(str, (String) o2, (String) o3);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 3 strings");
+        return new EvalError(EvalErrorMessage.expects_three_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/SHA1.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.codec.digest.DigestUtils;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
             String s = (o instanceof String) ? (String) o : o.toString();
             return DigestUtils.sha1Hex(s);
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
+        return new EvalError(EvalErrorMessage.expects_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/SmartSplit.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 
 import au.com.bytecode.opencsv.CSVParser;
@@ -92,10 +93,10 @@ public Object call(Properties bindings, Object[] args) {
             try {
                 return parser.parseLine(s);
             } catch (IOException e) {
-                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " error: " + e.getMessage());
+                return new EvalError(EvalErrorMessage.error(ControlFunctionRegistry.getFunctionName(this), e.getMessage()));
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 1 or 2 strings");
+        return new EvalError(EvalErrorMessage.expects_one_or_two_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Split.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.regex.Pattern;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
@@ -70,8 +71,8 @@ public Object call(Properties bindings, Object[] args) {
                 }
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this)
-                + " expects 2 strings, or 1 string and 1 regex, followed by an optional boolean");
+        // regex, followed by an optional boolean");
+        return new EvalError(EvalErrorMessage.expects_two_strings_as_string_regex_opt_bool(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/SplitByCharType.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
@@ -53,7 +54,7 @@ public Object call(Properties bindings, Object[] args) {
                 return StringUtils.splitByCharacterType(s);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
+        return new EvalError(EvalErrorMessage.expects_two_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/SplitByLengths.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -66,7 +67,8 @@ public Object call(Properties bindings, Object[] args) {
 
             return results;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 1 string and 1 or more numbers");
+        // numbers");
+        return new EvalError(EvalErrorMessage.expects_one_string_and_at_least_one_number(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/StartsWith.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                 return ((String) s1).startsWith((String) s2);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
+        return new EvalError(EvalErrorMessage.expects_two_strings(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/ToLowercase.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -48,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
             Object o = args[0];
             return (o instanceof String ? (String) o : o.toString()).toLowerCase();
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
+        return new EvalError(EvalErrorMessage.expects_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/ToTitlecase.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.text.WordUtils;
 
@@ -59,7 +60,7 @@ public Object call(Properties bindings, Object[] args) {
             String delims = o instanceof String ? (String) o : o.toString();
             return WordUtils.capitalizeFully(s, delims.toCharArray());
         } else {
-            return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a one or two strings");
+            return new EvalError(EvalErrorMessage.expects_one_or_two_strings(ControlFunctionRegistry.getFunctionName(this)));
         }
     }
 

File: main/src/com/google/refine/expr/functions/strings/ToUppercase.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -48,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
             Object o = args[0];
             return (o instanceof String ? (String) o : o.toString()).toUpperCase();
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
+        return new EvalError(EvalErrorMessage.expects_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -37,6 +37,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.common.base.CharMatcher;
 import com.google.refine.expr.EvalError;
+import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.FunctionDescription;
 
@@ -50,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
                 return CharMatcher.whitespace().trimFrom((String) s1);
             }
         }
-        return new EvalError("Invalid parameters");
+        return new EvalError(EvalErrorMessage.expects_one_string(ControlFunctionRegistry.getFunctionName(this)));
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Unescape.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.net.URLDecoder;
 import java.util.Properties;
 
+import com.google.refine.grel.EvalErrorMessage;
 import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.text.StringEscapeUtils;
 
@@ -68,7 +69,8 @@ public Object call(Properties bindings, Object[] args) {
                     } catch (UnsupportedEncodingException e) {
                     }
                 } else {
-                    return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " does not recognize mode '" + mode + "'.");
+                    // + mode + "'.");
+                    return new EvalError(EvalErrorMessage.unrecognized_mode(ControlFunctionRegistry.getFunctionName(this), mode));
                 }
             }
         }

File: main/tests/server/src/com/google/refine/expr/EvalErrorTests.java
Patch:
@@ -57,7 +57,7 @@ public void testInnerHtml() {
 
         EvalError evalError = (EvalError) invoke("innerHtml", "test");
         Assert.assertEquals(evalError.toString(),
-                "innerHtml() cannot work with this \'string\'. The first parameter is not an HTML Element.  Please first use parseHtml(string) and select(query) prior to using this function");
+                "innerHtml() cannot work with this \'string\'. The first parameter is not an HTML Element. Please first use parseHtml(string) and select(query) prior to using this function");
     }
 
     @Test

File: main/src/com/google/refine/operations/cell/BlankDownOperation.java
Patch:
@@ -47,6 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.CellChange;
 import com.google.refine.operations.EngineDependentMassCellOperation;
+import com.google.refine.operations.OperationDescription;
 
 public class BlankDownOperation extends EngineDependentMassCellOperation {
 
@@ -59,15 +60,14 @@ public BlankDownOperation(
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Blank down cells in column " + _columnName;
+        return OperationDescription.cell_blank_down_brief(_columnName);
     }
 
     @Override
     protected String createDescription(Column column,
             List<CellChange> cellChanges) {
 
-        return "Blank down " + cellChanges.size() +
-                " cells in column " + column.getName();
+        return OperationDescription.cell_blank_down_desc(cellChanges.size(), column.getName());
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/FillDownOperation.java
Patch:
@@ -48,6 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.CellChange;
 import com.google.refine.operations.EngineDependentMassCellOperation;
+import com.google.refine.operations.OperationDescription;
 
 public class FillDownOperation extends EngineDependentMassCellOperation {
 
@@ -60,15 +61,14 @@ public FillDownOperation(
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Fill down cells in column " + _columnName;
+        return OperationDescription.cell_fill_down_brief(_columnName);
     }
 
     @Override
     protected String createDescription(Column column,
             List<CellChange> cellChanges) {
 
-        return "Fill down " + cellChanges.size() +
-                " cells in column " + column.getName();
+        return OperationDescription.cell_fill_down_desc(cellChanges.size(), column.getName());
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java
Patch:
@@ -48,6 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.MassRowColumnChange;
+import com.google.refine.operations.OperationDescription;
 
 public class KeyValueColumnizeOperation extends AbstractOperation {
 
@@ -82,9 +83,8 @@ public String getNoteColumnName() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Columnize by key column " +
-                _keyColumnName + " and value column " + _valueColumnName +
-                (_noteColumnName != null ? (" with note column " + _noteColumnName) : "");
+        return _noteColumnName == null ? OperationDescription.cell_key_value_columnize_brief(_keyColumnName, _valueColumnName)
+                : OperationDescription.cell_key_value_columnize_note_column_brief(_keyColumnName, _valueColumnName, _noteColumnName);
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/MassEditOperation.java
Patch:
@@ -53,6 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.CellChange;
 import com.google.refine.operations.EngineDependentMassCellOperation;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.StringUtils;
 
@@ -122,15 +123,14 @@ public List<Edit> getEdits() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Mass edit cells in column " + _columnName;
+        return OperationDescription.cell_mass_edit_brief(_columnName);
     }
 
     @Override
     protected String createDescription(Column column,
             List<CellChange> cellChanges) {
 
-        return "Mass edit " + cellChanges.size() +
-                " cells in column " + column.getName();
+        return OperationDescription.cell_mass_edit_desc(cellChanges.size(), column.getName());
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java
Patch:
@@ -46,6 +46,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.MassRowChange;
+import com.google.refine.operations.OperationDescription;
 
 public class MultiValuedCellJoinOperation extends AbstractOperation {
 
@@ -80,7 +81,7 @@ public String getSeparator() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Join multi-valued cells in column " + _columnName;
+        return OperationDescription.cell_multivalued_cell_join_brief(_columnName);
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.regex.Pattern;
 
+import com.google.refine.operations.OperationDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
@@ -146,7 +147,7 @@ public int[] getFieldLengths() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Split multi-valued cells in column " + _columnName;
+        return OperationDescription.cell_multivalued_cell_split_brief(_columnName);
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/TextTransformOperation.java
Patch:
@@ -52,6 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.changes.CellChange;
 import com.google.refine.operations.EngineDependentMassCellOperation;
 import com.google.refine.operations.OnError;
+import com.google.refine.operations.OperationDescription;
 
 public class TextTransformOperation extends EngineDependentMassCellOperation {
 
@@ -101,15 +102,14 @@ public TextTransformOperation(
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Text transform on cells in column " + _columnName + " using expression " + _expression;
+        return OperationDescription.cell_text_transform_brief(_columnName, _expression);
     }
 
     @Override
     protected String createDescription(Column column,
             List<CellChange> cellChanges) {
 
-        return "Text transform on " + cellChanges.size() +
-                " cells in column " + column.getName() + ": " + _expression;
+        return OperationDescription.cell_text_transform_desc(cellChanges.size(), column.getName(), _expression);
     }
 
     @Override

File: main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.MassRowColumnChange;
+import com.google.refine.operations.OperationDescription;
 
 public class TransposeRowsIntoColumnsOperation extends AbstractOperation {
 
@@ -71,7 +72,7 @@ public String getColumnName() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Transpose every " + _rowCount + " cells in column " + _columnName + " into separate columns";
+        return OperationDescription.cell_transpose_rows_into_columns_brief(_rowCount, _columnName);
     }
 
     @Override

File: main/src/com/google/refine/operations/column/ColumnMoveOperation.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.model.changes.ColumnMoveChange;
+import com.google.refine.operations.OperationDescription;
 
 public class ColumnMoveOperation extends AbstractOperation {
 
@@ -66,7 +67,7 @@ public int getIndex() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Move column " + _columnName + " to position " + _index;
+        return OperationDescription.column_move_brief(_columnName, _index);
     }
 
     @Override

File: main/src/com/google/refine/operations/column/ColumnRemovalOperation.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.changes.ColumnRemovalChange;
+import com.google.refine.operations.OperationDescription;
 
 public class ColumnRemovalOperation extends AbstractOperation {
 
@@ -59,7 +60,7 @@ public String getColumnName() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Remove column " + _columnName;
+        return OperationDescription.column_removal_brief(_columnName);
     }
 
     @Override
@@ -69,7 +70,7 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
             throw new Exception("No column named " + _columnName);
         }
 
-        String description = "Remove column " + column.getName();
+        String description = getBriefDescription(project);
 
         Change change = new ColumnRemovalChange(project.columnModel.columns.indexOf(column));
 

File: main/src/com/google/refine/operations/column/ColumnRenameOperation.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.model.changes.ColumnRenameChange;
+import com.google.refine.operations.OperationDescription;
 
 public class ColumnRenameOperation extends AbstractOperation {
 
@@ -66,7 +67,7 @@ public String getNewColumnName() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Rename column " + _oldColumnName + " to " + _newColumnName;
+        return OperationDescription.column_rename_brief(_oldColumnName, _newColumnName);
     }
 
     @Override

File: main/src/com/google/refine/operations/column/ColumnReorderOperation.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.model.changes.ColumnReorderChange;
+import com.google.refine.operations.OperationDescription;
 
 public class ColumnReorderOperation extends AbstractOperation {
 
@@ -59,15 +60,15 @@ public List<String> getColumnNames() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Reorder columns";
+        return OperationDescription.column_reorder_brief();
     }
 
     @Override
     protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
         return new HistoryEntry(
                 historyEntryID,
                 project,
-                "Reorder columns",
+                getBriefDescription(null),
                 this,
                 new ColumnReorderChange(_columnNames));
     }

File: main/src/com/google/refine/operations/column/ColumnSplitOperation.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.regex.Pattern;
 
+import com.google.refine.operations.OperationDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
@@ -189,8 +190,8 @@ public int[] getFieldLengths() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Split column " + _columnName +
-                ("separator".equals(_mode) ? " by separator" : " by field lengths");
+        return ("separator".equals(_mode)) ? OperationDescription.column_split_separator_brief(_columnName)
+                : OperationDescription.column_split_brief(_columnName);
     }
 
     @Override

File: main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java
Patch:
@@ -52,6 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.changes.CellChange;
 import com.google.refine.model.changes.ReconChange;
 import com.google.refine.operations.EngineDependentMassCellOperation;
+import com.google.refine.operations.OperationDescription;
 
 public class ReconMatchBestCandidatesOperation extends EngineDependentMassCellOperation {
 
@@ -69,15 +70,14 @@ public String getColumnName() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Match each cell to its best recon candidate in column " + _columnName;
+        return OperationDescription.recon_match_best_candidates_brief(_columnName);
     }
 
     @Override
     protected String createDescription(Column column,
             List<CellChange> cellChanges) {
 
-        return "Match each of " + cellChanges.size() +
-                " cells to its best candidate in column " + column.getName();
+        return OperationDescription.recon_match_best_candidates_desc(cellChanges.size(), column.getName());
     }
 
     @Override

File: main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java
Patch:
@@ -48,6 +48,7 @@
 import com.google.refine.model.changes.ReconChange;
 import com.google.refine.model.recon.StandardReconConfig;
 import com.google.refine.operations.EngineDependentMassCellOperation;
+import com.google.refine.operations.OperationDescription;
 
 public class ReconUseValuesAsIdentifiersOperation extends EngineDependentMassCellOperation {
 
@@ -77,7 +78,7 @@ public ReconUseValuesAsIdentifiersOperation(
 
     @Override
     public String getBriefDescription(Project project) {
-        return "Use values as reconciliation identifiers in column " + _columnName;
+        return OperationDescription.recon_use_values_as_identifiers_brief(_columnName);
     }
 
     @Override
@@ -140,8 +141,7 @@ public boolean visit(Project project, int rowIndex, Row row) {
 
     @Override
     protected String createDescription(Column column, List<CellChange> cellChanges) {
-        return "Use values as reconciliation identifiers for " + cellChanges.size() +
-                " cells in column " + column.getName();
+        return OperationDescription.recon_use_values_as_identifiers_desc(cellChanges.size(), column.getName());
     }
 
     @Override

File: main/src/com/google/refine/operations/row/DenormalizeOperation.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.RecordModel.RowDependency;
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.MassRowChange;
+import com.google.refine.operations.OperationDescription;
 
 public class DenormalizeOperation extends AbstractOperation {
 
@@ -54,7 +55,7 @@ public DenormalizeOperation() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Denormalize";
+        return OperationDescription.row_denormalize_brief();
     }
 
     @Override

File: main/src/com/google/refine/operations/row/RowRemovalOperation.java
Patch:
@@ -47,6 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.RowRemovalChange;
 import com.google.refine.operations.EngineDependentOperation;
+import com.google.refine.operations.OperationDescription;
 
 public class RowRemovalOperation extends EngineDependentOperation {
 
@@ -58,7 +59,7 @@ public RowRemovalOperation(
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Remove rows";
+        return OperationDescription.row_removal_brief();
     }
 
     @Override

File: main/src/com/google/refine/operations/row/RowReorderOperation.java
Patch:
@@ -48,6 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Record;
 import com.google.refine.model.Row;
 import com.google.refine.model.changes.RowReorderChange;
+import com.google.refine.operations.OperationDescription;
 import com.google.refine.sorting.SortingConfig;
 import com.google.refine.sorting.SortingRecordVisitor;
 import com.google.refine.sorting.SortingRowVisitor;
@@ -77,7 +78,7 @@ public SortingConfig getSortingConfig() {
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Reorder rows";
+        return OperationDescription.row_reorder_brief();
     }
 
     @Override
@@ -115,7 +116,7 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
         return new HistoryEntry(
                 historyEntryID,
                 project,
-                "Reorder rows",
+                getBriefDescription(null),
                 this,
                 new RowReorderChange(rowIndices));
     }

File: main/src/com/google/refine/grel/controls/IsBlank.java
Patch:
@@ -34,12 +34,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 package com.google.refine.grel.controls;
 
 import com.google.refine.expr.ExpressionUtils;
+import com.google.refine.grel.ControlDescription;
 
 public class IsBlank extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o is null or an empty string";
+        return ControlDescription.is_blank_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsEmptyString.java
Patch:
@@ -27,11 +27,13 @@
 
 package com.google.refine.grel.controls;
 
+import com.google.refine.grel.ControlDescription;
+
 public class IsEmptyString extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o is an empty string";
+        return ControlDescription.isempty_string_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsError.java
Patch:
@@ -34,12 +34,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 package com.google.refine.grel.controls;
 
 import com.google.refine.expr.ExpressionUtils;
+import com.google.refine.grel.ControlDescription;
 
 public class IsError extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o is an error";
+        return ControlDescription.is_error_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsNonBlank.java
Patch:
@@ -34,12 +34,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 package com.google.refine.grel.controls;
 
 import com.google.refine.expr.ExpressionUtils;
+import com.google.refine.grel.ControlDescription;
 
 public class IsNonBlank extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o is not null and not an empty string";
+        return ControlDescription.is_non_blank_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsNotNull.java
Patch:
@@ -33,11 +33,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.grel.controls;
 
+import com.google.refine.grel.ControlDescription;
+
 public class IsNotNull extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o is not null";
+        return ControlDescription.is_not_null_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsNull.java
Patch:
@@ -33,11 +33,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.grel.controls;
 
+import com.google.refine.grel.ControlDescription;
+
 public class IsNull extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o is null";
+        return ControlDescription.is_null_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsNumeric.java
Patch:
@@ -33,13 +33,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.grel.controls;
 
+import com.google.refine.grel.ControlDescription;
 import org.apache.commons.lang.StringUtils;
 
 public class IsNumeric extends IsTest {
 
     @Override
     public String getDescription() {
-        return "Returns whether o can represent a number";
+        return ControlDescription.is_numeric_desc();
     }
 
     @Override

File: main/src/com/google/refine/grel/controls/IsTest.java
Patch:
@@ -38,14 +38,15 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.grel.Control;
+import com.google.refine.grel.ControlEvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 
 abstract class IsTest implements Control {
 
     @Override
     public String checkArguments(Evaluable[] args) {
         if (args.length != 1) {
-            return ControlFunctionRegistry.getControlName(this) + " expects one argument";
+            return ControlEvalError.expects_one_arg(ControlFunctionRegistry.getControlName(this));
         }
         return null;
     }

File: extensions/gdata/src/com/google/refine/extension/gdata/TokenCookie.java
Patch:
@@ -1,3 +1,4 @@
+
 package com.google.refine.extension.gdata;
 
 import javax.servlet.http.Cookie;
@@ -7,6 +8,7 @@
 import com.google.refine.util.CookiesUtilities;
 
 public class TokenCookie {
+
     private static final String COOKIE_NAME = "oauth2_token";
 
     public static String getToken(HttpServletRequest request) {
@@ -16,7 +18,7 @@ public static String getToken(HttpServletRequest request) {
 
     public static void setToken(HttpServletRequest request,
             HttpServletResponse response, String token, String expiresInSeconds) {
-        CookiesUtilities.setCookie(request, response, COOKIE_NAME, token, 
+        CookiesUtilities.setCookie(request, response, COOKIE_NAME, token,
                 Integer.parseInt(expiresInSeconds));
     }
 

File: extensions/jython/src/com/google/refine/jython/JythonHasFieldsWrapper.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.HasFields;
 
 public class JythonHasFieldsWrapper extends PyObject {
+
     private static final long serialVersionUID = -1275353513262385099L;
 
     public HasFields _obj;

File: extensions/jython/src/com/google/refine/jython/JythonObjectWrapper.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.python.core.PyObject;
 
 public class JythonObjectWrapper extends PyObject {
+
     private static final long serialVersionUID = -6608115027151667441L;
 
     public Object _obj;

File: extensions/phonetic/src/org/openrefine/phonetic/keyers/DaitchMokotoffKeyer.java
Patch:
@@ -1,10 +1,11 @@
+
 package org.openrefine.phonetic.keyers;
 
 import com.google.refine.clustering.binning.Keyer;
 import org.apache.commons.codec.language.DaitchMokotoffSoundex;
 
 public class DaitchMokotoffKeyer extends Keyer {
-    
+
     protected DaitchMokotoffSoundex encoder = new DaitchMokotoffSoundex();
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PerformWikibaseEditsCommand.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.commands;
 
 import javax.servlet.http.HttpServletRequest;

File: extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestException.java
Patch:
@@ -1,3 +1,4 @@
+
 package org.openrefine.wikidata.manifests;
 
 public class ManifestException extends Exception {

File: extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.operations;
 
 import java.io.IOException;
@@ -49,8 +50,7 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {
 
     @JsonCreator
     public SaveWikibaseSchemaOperation(
-    		@JsonProperty("schema")
-    		WikibaseSchema schema) {
+            @JsonProperty("schema") WikibaseSchema schema) {
         this._schema = schema;
 
     }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/QAWarningStore.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.qa;
 
 import java.util.ArrayList;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/CommonDescriptionScrutinizer.java
Patch:
@@ -1,3 +1,4 @@
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DescriptionScrutinizer.java
Patch:
@@ -1,3 +1,4 @@
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import java.util.Set;
@@ -29,10 +30,10 @@ public void scrutinize(ItemEdit update) {
             scrutinize(update, descText, description.getLanguageCode());
         }
     }
-    
+
     @Override
     public void scrutinize(MediaInfoEdit update) {
-    	// no descriptions to scrutinize: do nothing
+        // no descriptions to scrutinize: do nothing
     }
 
     public abstract void scrutinize(LabeledStatementEntityEdit update, String descText, String lang);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
@@ -36,8 +37,7 @@
 import java.util.Map;
 
 /**
- * A scrutinizer that checks for properties using the same value on different
- * entities.
+ * A scrutinizer that checks for properties using the same value on different entities.
  * 
  * @author Antonin Delpeuch
  *
@@ -69,7 +69,7 @@ public void scrutinize(Statement statement, EntityIdValue entityId, boolean adde
         PropertyIdValue pid = mainSnak.getPropertyId();
         List<Statement> statementList = _fetcher.getConstraintsByType(pid, distinctValuesConstraintQid);
         if (!statementList.isEmpty() && mainSnak instanceof ValueSnak) {
-            Value mainSnakValue = ((ValueSnak)mainSnak).getValue();
+            Value mainSnakValue = ((ValueSnak) mainSnak).getValue();
             Map<Value, EntityIdValue> seen = _seenValues.get(pid);
             if (seen == null) {
                 seen = new HashMap<Value, EntityIdValue>();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EnglishDescriptionScrutinizer.java
Patch:
@@ -1,3 +1,4 @@
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizer.java
Patch:
@@ -1,3 +1,4 @@
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
@@ -10,9 +11,8 @@
 
 import java.util.List;
 
-
 public class EntityTypeScrutinizer extends SnakScrutinizer {
-    
+
     public final static String type = "invalid-entity-type";
     public String allowedEntityTypesQid;
     public String wikibaseItemQid;
@@ -25,7 +25,7 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
         }
         PropertyIdValue pid = snak.getPropertyId();
         List<Statement> statementList = _fetcher.getConstraintsByType(pid, allowedEntityTypesQid);
-        if(!statementList.isEmpty()) {
+        if (!statementList.isEmpty()) {
             List<SnakGroup> constraint = statementList.get(0).getClaim().getQualifiers();
             boolean isUsable = true;
             if (constraint != null) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SelfReferentialScrutinizer.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
@@ -29,8 +30,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
- * A scrutinizer that checks for self-referential statements. These statements
- * are flagged by Wikibase as suspicious.
+ * A scrutinizer that checks for self-referential statements. These statements are flagged by Wikibase as suspicious.
  * 
  * @author Antonin Delpeuch
  *
@@ -44,7 +44,7 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
         if (!added) {
             return;
         }
-        if (snak instanceof ValueSnak && entityId.equals(((ValueSnak)snak).getValue())) {
+        if (snak instanceof ValueSnak && entityId.equals(((ValueSnak) snak).getValue())) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
             issue.setProperty("example_entity", entityId);
             addIssue(issue);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SnakScrutinizer.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import java.util.Iterator;
@@ -31,8 +32,8 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 /**
- * A scrutinizer that inspects snaks individually, no matter whether they appear
- * as main snaks, qualifiers or references.
+ * A scrutinizer that inspects snaks individually, no matter whether they appear as main snaks, qualifiers or
+ * references.
  * 
  * @author Antonin Delpeuch
  *

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/WhitespaceScrutinizer.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.schema;
 
 import java.text.ParseException;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedItemIdValue.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.schema.entityvalues;
 
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedMediaInfoIdValue.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.schema.entityvalues;
 
 import org.wikidata.wdtk.datamodel.helpers.ToString;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedPropertyIdValue.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.schema.entityvalues;
 
 import org.wikidata.wdtk.datamodel.helpers.ToString;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/exceptions/InvalidSchemaException.java
Patch:
@@ -21,6 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.schema.exceptions;
 
 public class InvalidSchemaException extends Exception {

File: extensions/wikidata/src/org/openrefine/wikidata/schema/exceptions/SkipSchemaExpressionException.java
Patch:
@@ -21,12 +21,12 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  ******************************************************************************/
+
 package org.openrefine.wikidata.schema.exceptions;
 
 /**
- * Exception thrown to indicate that the expression currently being
- * evaluated should be skipped (for instance because the underlying
- * data it was generated from is blank or unreconciled)
+ * Exception thrown to indicate that the expression currently being evaluated should be skipped (for instance because
+ * the underlying data it was generated from is blank or unreconciled)
  */
 public class SkipSchemaExpressionException extends Exception {
 

File: extensions/wikidata/src/org/openrefine/wikidata/utils/SnakUtils.java
Patch:
@@ -1,3 +1,4 @@
+
 package org.openrefine.wikidata.utils;
 
 import java.util.ArrayList;
@@ -14,8 +15,7 @@
 public class SnakUtils {
 
     /**
-     * Groups snaks into a list of snak groups.
-     * The order of the first snaks in each group is preserved.
+     * Groups snaks into a list of snak groups. The order of the first snaks in each group is preserved.
      * 
      * @param snaks
      * @return
@@ -25,7 +25,7 @@ public static List<SnakGroup> groupSnaks(List<Snak> snaks) {
         List<PropertyIdValue> propertyOrder = new ArrayList<PropertyIdValue>();
         for (Snak snak : snaks) {
             List<Snak> existingSnaks = snakGroups.get(snak.getPropertyId());
-            if(existingSnaks == null) {
+            if (existingSnaks == null) {
                 existingSnaks = new ArrayList<Snak>();
                 snakGroups.put(snak.getPropertyId(), existingSnaks);
                 propertyOrder.add(snak.getPropertyId());

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java
Patch:
@@ -81,6 +81,9 @@ public void scrutinize(Statement statement, EntityIdValue entityId, boolean adde
                 issue.setProperty("property_entity", pid);
                 issue.setProperty("item1_entity", entityId);
                 issue.setProperty("item2_entity", otherId);
+                // we disable faceting for this issue because the distinct values are likely
+                // coming from different rows, and our current faceting mechanism is not able to detect those.
+                issue.setFacetable(false);
                 addIssue(issue);
             } else {
                 seen.put(mainSnakValue, entityId);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NoEditsMadeScrutinizer.java
Patch:
@@ -55,7 +55,7 @@ public void scrutinize(MediaInfoEdit edit) {
     @Override
     public void batchIsFinished() {
         if(!nonNullUpdateSeen) {
-            info(type);
+            infoNotFacetable(type);
         }
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java
Patch:
@@ -78,6 +78,9 @@ public void scrutinizeStatementEdit(StatementEntityEdit update) {
                 QAWarning issue = new QAWarning(type, pid.getId(), QAWarning.Severity.WARNING, 1);
                 issue.setProperty("property_entity", pid);
                 issue.setProperty("example_entity", update.getEntityId());
+                // disable faceting for this one since multiple values are likely coming from different rows.
+                // if they are not, then this should already be clear from the schema.
+                issue.setFacetable(false);
                 addIssue(issue);
             } else if (!constraintStatementList1.isEmpty() || !constraintStatementList2.isEmpty()){
                 seenSingleProperties.add(pid);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/QAWarningStoreTest.java
Patch:
@@ -33,9 +33,9 @@
 public class QAWarningStoreTest {
 
     public static String exampleJson = "{\"max_severity\":\"CRITICAL\",\"nb_warnings\":5,"
-            + "\"warnings\":[{\"type\":\"new-item-without-label\",\"bucketId\":null,"
-            + "\"severity\":\"CRITICAL\",\"count\":3},{\"type\":\"add-statements-with-invalid-format\","
-            + "\"bucketId\":\"P2427\",\"severity\":\"IMPORTANT\",\"count\":2}]}";
+            + "\"warnings\":[{\"type\":\"new-item-without-label\",\"bucketId\":null,\"aggregationId\":\"new-item-without-label\","
+            + "\"severity\":\"CRITICAL\",\"count\":3,\"facetable\":true},{\"type\":\"add-statements-with-invalid-format\","
+            + "\"bucketId\":\"P2427\",\"aggregationId\":\"add-statements-with-invalid-format_P2427\",\"severity\":\"IMPORTANT\",\"count\":2,\"facetable\":true}]}";
 
     private QAWarningStore store;
     private QAWarning otherWarning;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/QAWarningTest.java
Patch:
@@ -34,7 +34,8 @@ public class QAWarningTest {
     public static QAWarning exampleWarning = new QAWarning("add-statements-with-invalid-format", "P2427",
             QAWarning.Severity.IMPORTANT, 1);
     public static String exampleJson = "{\"severity\":\"IMPORTANT\","
-            + "\"count\":1,\"bucketId\":\"P2427\",\"type\":\"add-statements-with-invalid-format\"}";
+            + "\"count\":1,\"bucketId\":\"P2427\",\"type\":\"add-statements-with-invalid-format\","
+            + "\"aggregationId\":\"add-statements-with-invalid-format_P2427\",\"facetable\":true}";
 
     @Test
     public void testSerialize() {

File: extensions/wikidata/src/org/openrefine/wikidata/editing/ReconEntityRewriter.java
Patch:
@@ -197,7 +197,8 @@ public EntityEdit rewrite(EntityEdit edit) throws NewEntityNotCreatedYetExceptio
 				Set<MonolingualTextValue> labelsIfNew = update.getLabelsIfNew().stream().map(l -> copy(l)).collect(Collectors.toSet());
 				List<StatementEdit> statements = update.getStatementEdits().stream().map(l -> copy(l))
 						.collect(Collectors.toList());
-				return new MediaInfoEdit(subject, statements, labels, labelsIfNew, update.getFilePath(), update.getFileName(), update.getWikitext());
+				return new MediaInfoEdit(subject, statements, labels, labelsIfNew, update.getFilePath(),
+						update.getFileName(), update.getWikitext(), update.isOverridingWikitext());
 			} else {
 				throw new IllegalStateException("Rewriting of entities of this type (for subject id "+edit.getEntityId()+") not supported yet");
 			}

File: extensions/wikidata/src/org/openrefine/wikidata/updates/scheduler/WikibaseAPIUpdateScheduler.java
Patch:
@@ -156,6 +156,7 @@ protected void splitUpdate(EntityEdit edit) {
     				.addFileName(update.getFileName())
     				.addFilePath(update.getFilePath())
     				.addWikitext(update.getWikitext())
+    				.setOverrideWikitext(update.isOverridingWikitext())
 	        		.addLabels(update.getLabels(), true)
 	        		.addLabels(update.getLabelsIfNew(), false);
 	        MediaInfoEditBuilder pointerFullBuilder = new MediaInfoEditBuilder(update.getEntityId());

File: main/src/com/google/refine/expr/functions/Coalesce.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Coalesce implements Function {
 
@@ -58,7 +59,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the first non-null from a series of objects (meaning any data type - string, date, number, boolean, etc.).";
+        return FunctionDescription.fun_coalesce();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/FacetCount.java
Patch:
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ParsingException;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 
@@ -85,7 +86,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the facet count corresponding to the given choice value, by looking for the facetExpression in the choiceValue in columnName.";
+        return FunctionDescription.fun_facet_count();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/HasField.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.expr.HasFields;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class HasField implements Function {
 
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a boolean indicating whether o has a member field called name.";
+        return FunctionDescription.fun_has_field();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/Jsonize.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.Function;
 import com.google.refine.grel.ControlFunctionRegistry;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.ParsingUtilities;
 
 public class Jsonize implements Function {
@@ -60,7 +61,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Quotes a value as a JSON literal value";
+        return FunctionDescription.fun_jsonize();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/Length.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.HasFieldsList;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Length implements Function {
 
@@ -70,7 +71,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the length of string s as a number, or the size of array a, meaning the number of objects inside it. Arrays can be empty, in which case length() will return 0.";
+        return FunctionDescription.fun_length();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/Slice.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.HasFieldsList;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Slice implements Function {
 
@@ -124,7 +125,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Given a string, returns the substring starting from character index from, and up to character index to. If the to argument is omitted, will output to the end of s. Remember character indices start from zero. Given an array, returns a sub-array from the first index provided up to and including the last index provided. If the to value is omitted, it is understood to be the end of the array. Slice only.";
+        return FunctionDescription.fun_slice();
 
     }
     

File: main/src/com/google/refine/expr/functions/TimeSinceUnixEpochToDate.java
Patch:
@@ -8,6 +8,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class TimeSinceUnixEpochToDate implements Function {
 
@@ -46,7 +47,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a number converted to a date based on Unix Epoch Time. The number can be Unix Epoch Time in one of the following supported units: second, millisecond, microsecond. Defaults to 'second'.";
+        return FunctionDescription.fun_time_since_unix_epoch_to_date();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -47,6 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.TimeZone;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.expr.EvalError;
@@ -196,7 +197,7 @@ private OffsetDateTime parse(String o1, DateFormat formatter) {
     
     @Override
     public String getDescription() {
-        return "Returns the inputted object converted to a date object. Without arguments, it returns the ISO 8601 extended format. With arguments, you can control the output format. With monthFirst: set false if the date is formatted with the day before the month. With formatN: attempt to parse the date using an ordered list of possible formats. Supply formats based on the SimpleDateFormat syntax: <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\">SimpleDateFormat</a>";
+        return FunctionDescription.fun_to_date();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/ToNumber.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ToNumber implements Function {
 
@@ -74,7 +75,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a string converted to a number. Will attempt to convert other formats into a string, then into a number. If the value is already a number, it will return the number.";
+        return FunctionDescription.fun_to_number();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/ToString.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.StringUtils;
 
 public class ToString implements Function {
@@ -75,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Takes any value type (string, number, date, boolean, error, null) and gives a string version of that value. You can convert numbers to strings with rounding, using an optional string format. See https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html. You can also convert dates to strings using date parsing syntax. See https://docs.openrefine.org/manual/grelfunctions/#date-functions.";
+        return FunctionDescription.fun_to_string();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/Type.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Type implements Function {
 
@@ -72,7 +73,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a string with the data type of o, such as undefined, string, number, boolean, etc.";
+        return FunctionDescription.fun_type();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ArgsToArray implements Function {
 
@@ -46,7 +47,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns all arguments passed to it as an array";
+        return FunctionDescription.arr_args_to_array();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/arrays/InArray.java
Patch:
@@ -42,6 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.JSONUtilities;
 
 public class InArray implements Function {
@@ -74,7 +75,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns true if the array contains the desired string, and false otherwise. Will not convert data types.";
+        return FunctionDescription.arr_in_array();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Join.java
Patch:
@@ -42,6 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.util.JsonValueConverter;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Join implements Function {
 
@@ -95,7 +96,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Joins the items in the array with sep, and returns it all as a string.";
+        return FunctionDescription.arr_join();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Reverse.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.JSONUtilities;
 
 public class Reverse implements Function {
@@ -81,7 +82,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Reverses array a.";
+        return FunctionDescription.arr_reverse();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Sort.java
Patch:
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.JSONUtilities;
 
 public class Sort implements Function {
@@ -85,7 +86,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Sorts the array in ascending order. Sorting is case-sensitive, uppercase first and lowercase second.";
+        return FunctionDescription.arr_sort();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/arrays/Uniques.java
Patch:
@@ -44,6 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.JSONUtilities;
 
 public class Uniques implements Function {
@@ -73,7 +74,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the array with duplicates removed. Case-sensitive.";
+        return FunctionDescription.arr_uniques();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/booleans/And.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class And implements Function {
 
@@ -56,7 +57,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-    	return "Uses the logical operator AND on two or more booleans to output a boolean. Evaluates multiple statements into booleans, then returns true if all of the statements are true. For example, (1 < 3).and(1 < 0) returns false because one condition is true and one is false.";
+    	return FunctionDescription.bool_and();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/booleans/Not.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Not implements Function {
 
@@ -56,7 +57,7 @@ public static boolean objectToBoolean(Object o) {
     
     @Override
     public String getDescription() {
-        return "Uses the logical operator NOT on a boolean to output a boolean. For example, not(1 > 7) returns true because 1 > 7 itself is false.";
+        return FunctionDescription.bool_not();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/booleans/Or.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Or implements Function {
 
@@ -56,7 +57,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Uses the logical operator OR on two or more booleans to output a boolean. For example, (1 < 3).or(1 > 7) returns true because at least one of the conditions (the first one) is true.";
+        return FunctionDescription.bool_or();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/booleans/Xor.java
Patch:
@@ -30,6 +30,7 @@ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Xor implements Function {
 
@@ -43,7 +44,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-    	return "Uses the logical operator XOR (exclusive-or) on two or more booleans to output a boolean. Evaluates multiple statements, then returns true if only one of them is true. For example, (1 < 3).xor(1 < 7) returns false because more than one of the conditions is true.";
+    	return FunctionDescription.bool_xor();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/date/DatePart.java
Patch:
@@ -46,6 +46,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class DatePart implements Function {
 
@@ -139,7 +140,7 @@ private Object getPart(Calendar c, String part) {
     
     @Override
     public String getDescription() {
-    	return "Returns part of a date. The data type returned depends on the unit. See https://docs.openrefine.org/manual/grelfunctions/#datepartd-s-timeunit, https://docs.openrefine.org/manual/grelfunctions#date-functions for a table. ";
+    	return FunctionDescription.date_part();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/date/Inc.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Inc implements Function {
 
@@ -86,7 +87,7 @@ private TemporalUnit getField(String unit) {
     
     @Override
     public String getDescription() {
-    	return "Returns a date changed by the given amount in the given unit of time, in quotes. See https://docs.openrefine.org/manual/grelfunctions/#incd-n-s-timeunit for a table. The default unit is 'hour'. A positive value increases the date, and a negative value moves it back in time.";
+    	return FunctionDescription.date_inc();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/date/Now.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Now implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the current time according to your system clock, in the ISO 8601 extended format (converted to UTC). For example, 10:53am (and 00 seconds) on November 26th 2020 in EST returns [date 2020-11-26T15:53:00Z].";
+        return FunctionDescription.date_now();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/html/InnerHtml.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the inner HTML of an HTML element. This will include text and children elements within the element selected. Use it in conjunction with parseHtml() and select() to provide an element.";
+        return FunctionDescription.html_inner_html();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/html/ParseHtml.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.xml.ParseXml;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ParseHtml implements Function {
 
@@ -57,7 +58,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Given a cell full of HTML-formatted text, parseHtml() simplifies HTML tags (such as by removing ' /' at the end of self-closing tags), closes any unclosed tags, and inserts linebreaks and indents for cleaner code. A cell cannot store the output of parseHtml() unless you convert it with toString(): for example, value.parseHtml().toString().";
+        return FunctionDescription.html_parse_html();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/ACos.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ACos implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the arc cosine of an angle, in the range 0 through PI.";
+        return FunctionDescription.math_acos();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/ASin.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ASin implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the arc sine of an angle in the range of -PI/2 through PI/2.";
+        return FunctionDescription.math_asin();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/ATan.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ATan implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the arc tangent of an angle in the range of -PI/2 through PI/2.";
+        return FunctionDescription.math_atan();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/ATan2.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ATan2 implements Function {
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Converts rectangular coordinates (n1, n2) to polar (r, theta). Returns number theta.";
+        return FunctionDescription.math_atan2();
     }
     
     @Override
@@ -64,4 +65,4 @@ public String getParams() {
     public String getReturns() {
         return "number theta";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Abs.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Abs implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the absolute value of a number.";
+        return FunctionDescription.math_abs();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Ceil.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Ceil implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the ceiling of a number.";
+        return FunctionDescription.math_ceil();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Combin.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Combin implements Function {
 
@@ -85,7 +86,7 @@ public static long combination(int n, int k) {
 
     @Override
     public String getDescription() {
-        return "Returns the number of combinations for n2 elements as divided into n1.";
+        return FunctionDescription.math_ceil();
     }
     
     @Override
@@ -97,4 +98,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Cos.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Cos implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the trigonometric cosine of an angle.";
+        return FunctionDescription.math_cos();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Cosh.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Cosh implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the hyperbolic cosine of a value.";
+        return FunctionDescription.math_cosh();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Degrees.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Degrees implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Converts an angle from radians to degrees.";
+        return FunctionDescription.math_degrees();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Even.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Even implements Function {
 
@@ -56,7 +57,7 @@ public static double roundUpToEven(double d){
 
     @Override
     public String getDescription() {
-        return "Rounds the number up to the nearest even integer.";
+        return FunctionDescription.math_even();
     }
     
     @Override
@@ -68,4 +69,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Exp.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Exp implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns e to the power of n.";
+        return FunctionDescription.math_exp();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Fact.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Fact implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the factorial of a number, starting from 1.";
+        return FunctionDescription.math_fact();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/FactN.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class FactN implements Function {
 
@@ -78,7 +79,7 @@ public static long factorial(long i, long step){
 
     @Override
     public String getDescription() {
-        return "Returns the factorial of n1, starting from n2.";
+        return FunctionDescription.math_factn();
     }
     
     @Override
@@ -90,4 +91,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Floor.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Floor implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the floor of a number.";
+        return FunctionDescription.math_floor();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class GreatestCommonDenominator implements Function {
 
@@ -56,7 +57,7 @@ public static double GCD(double a, double b){
 
     @Override
     public String getDescription() {
-        return "Returns the greatest common denominator of two numbers.";
+        return FunctionDescription.math_gcd();
     }
     
     @Override
@@ -68,4 +69,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class LeastCommonMultiple implements Function {
 
@@ -68,7 +69,7 @@ public static double LCM(double a, double b){
 
     @Override
     public String getDescription() {
-        return "Returns the greatest common denominator of two numbers.";
+        return FunctionDescription.math_lcm();
     }
     
     @Override
@@ -80,4 +81,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Ln.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Ln implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the natural logarithm of n.";
+        return FunctionDescription.math_ln();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Log.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Log implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the base 10 logarithm of n.";
+        return FunctionDescription.math_log();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Max.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Max implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the greater of two numbers.";
+        return FunctionDescription.math_max();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Min.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Min implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the smaller of two numbers.";
+        return FunctionDescription.math_min();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Mod.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Mod implements Function {
 
@@ -56,7 +57,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns n1 modulus n2.";
+        return FunctionDescription.math_mod();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Multinomial.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Multinomial implements Function {
 
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Calculates the multinomial of one number or a series of numbers.";
+        return FunctionDescription.math_multinomial();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Odd.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Odd implements Function {
 
@@ -56,7 +57,7 @@ public static double roundUpToOdd(double d){
 
     @Override
     public String getDescription() {
-        return "Rounds the number up to the nearest odd integer.";
+        return FunctionDescription.math_odd();
     }
     
     @Override
@@ -68,4 +69,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Pow.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Pow implements Function {
 
@@ -54,7 +55,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns n1 raised to the power of n2.";
+        return FunctionDescription.math_pow();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Quotient.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Quotient implements Function {
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the integer portion of a division (truncated, not rounded), when supplied with a numerator and denominator.";
+        return FunctionDescription.math_quotient();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Radians.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Radians implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Converts an angle in degrees to radians.";
+        return FunctionDescription.math_radians();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/RandomNumber.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class RandomNumber implements Function {
 
@@ -68,7 +69,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a random integer in the interval between the lower and upper bounds (inclusively). Will output a different random number in each cell in a column.";
+        return FunctionDescription.math_random_number();
     }
     
     @Override
@@ -81,4 +82,4 @@ public String getReturns() {
         return "number";
     }
     
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Round.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Round implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Rounds a number to the nearest integer.";
+        return FunctionDescription.math_round();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Sin.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Sin implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the trigonometric sine of an angle.";
+        return FunctionDescription.math_sin();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Sinh.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Sinh implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the hyperbolic sine of an angle.";
+        return FunctionDescription.math_sinh();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Sum.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Sum implements Function {
 
@@ -80,7 +81,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Return the sum of the numbers in the array. Ignores non-number items. Returns 0 if the array does not contain numbers.";
+        return FunctionDescription.math_sum();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/math/Tan.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Tan implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the trigonometric tangent of an angle.";
+        return FunctionDescription.math_tan();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/math/Tanh.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Tanh implements Function {
 
@@ -51,7 +52,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the hyperbolic tangent of an angle.";
+        return FunctionDescription.math_tanh();
     }
     
     @Override
@@ -63,4 +64,4 @@ public String getParams() {
     public String getReturns() {
         return "number";
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/expr/functions/strings/Chomp.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.grel.Function;
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns a copy of string s with string sep remoed from the end if s ends with sep; otherwies, returns s.";
+        return FunctionDescription.str_chomp();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Contains.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.regex.Pattern;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Contains implements Function {
 
@@ -62,7 +63,7 @@ public Object call(Properties bindings, Object[] args) {
     }
     @Override
     public String getDescription() {
-        return "Returns a boolean indicating whether s contains sub, which is either a substring or a regex pattern. For example, \"food\".contains(\"oo\") returns true.";
+        return FunctionDescription.str_contains();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Decode.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 import java.util.Properties;
 
@@ -42,7 +43,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Decodes a string using the specified encoding. Encodings include Base16, Base32Hex, Base32, Base64, and Base64Url.";
+        return FunctionDescription.str_decode();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/DetectLanguage.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.DetectLanguageUtils;
 import com.optimaize.langdetect.i18n.LdLocale;
 import com.optimaize.langdetect.profiles.LanguageProfile;
@@ -45,7 +46,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Detects the language of the given string and provides the language code.";
+        return FunctionDescription.str_detect_language();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Diff.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.time.temporal.ChronoUnit;
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.expr.EvalError;
@@ -99,7 +100,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "For strings, takes two strings and compares them, returning a string. Returns the remainder of o2 starting with the first character where they differ. For dates, returns the difference in given time units. See the time unit table at https://docs.openrefine.org/manual/grelfunctions/#datepartd-s-timeunit.";
+        return FunctionDescription.str_diff();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Encode.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 import java.util.Properties;
 
@@ -45,7 +46,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Encodes a string using the specified encoding. Encodings include Base16, Base32Hex, Base32, Base64, and Base64Url.";
+        return FunctionDescription.str_encode();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/EndsWith.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class EndsWith implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a boolean indicating whether s ends with sub. For example, \"food\".endsWith(\"ood\") returns true, whereas \"food\".endsWith(\"odd\") returns false.";
+        return FunctionDescription.str_ends_with();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Escape.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.net.URLEncoder;
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.text.StringEscapeUtils;
 
 import com.google.refine.expr.EvalError;
@@ -84,7 +85,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Escapes s in the given escaping mode. The mode can be one of: 'html', 'xml', csv', 'url', 'javascript'. Note that quotes are required around your mode.";
+        return FunctionDescription.str_escape();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Find.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Find implements Function {
 
@@ -70,7 +71,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Outputs an array of all consecutive substrings inside string s that match the substring or regex pattern p. You can supply a substring by putting it in quotes.";
+        return FunctionDescription.str_find();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Fingerprint.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.clustering.binning.FingerprintKeyer;
 import com.google.refine.clustering.binning.Keyer;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Fingerprint implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the fingerprint of s, a string that is the first step in fingerprint clustering methods: it will trim whitespaces, convert all characters to lowercase, remove punctuation, sort words alphabetically, etc.";
+        return FunctionDescription.str_fingerprint();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/IndexOf.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class IndexOf implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the first character index of sub as it first occurs in s; or, returns -1 if s does not contain sub. For example, \"internationalization\".indexOf(\"nation\") returns 5.";
+        return FunctionDescription.str_index_of();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/LastIndexOf.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class LastIndexOf implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the first character index of sub as it last occurs in s; or, returns -1 if s does not contain sub. For example, \"parallel\".lastIndexOf(\"a\") returns 3 (pointing at the second 'a').";
+        return FunctionDescription.str_last_index_of();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/MD5.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.codec.digest.DigestUtils;
 
 import com.google.refine.expr.EvalError;
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the MD5 hash of an object. If fed something other than a string (array, number, date, etc.), md5() will convert it to a string and deliver the hash of the string.";
+        return FunctionDescription.str_md5();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Match.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Match implements Function {
 
@@ -76,7 +77,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Attempts to match the string s in its entirety against the regex pattern p and, if the pattern is found, outputs an array of all capturing groups (found in order).";
+        return FunctionDescription.str_match();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/NGram.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.expr.EvalError;
@@ -78,7 +79,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns an array of the word n-grams of s. That is, it lists all the possible consecutive combinations of n words in the string.";
+        return FunctionDescription.str_ngram();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class NGramFingerprint implements Function {
 
@@ -74,7 +75,7 @@ protected TreeSet<String> ngram_split(String s, int size) {
     
     @Override
     public String getDescription() {
-        return "Returns the n-gram fingerprint of s.";
+        return FunctionDescription.str_ngram_fingerprint();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ParseJson.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.ParsingUtilities;
 
 public class ParseJson implements Function {
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Parses a string as JSON.";
+        return FunctionDescription.str_parse_json();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ParseUri.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.util.ParsingUtilities;
 
 import java.net.MalformedURLException;
@@ -68,7 +69,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Parses a URI and extracts its components.";
+        return FunctionDescription.str_parse_uri();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/Partition.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.regex.Pattern;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Partition implements Function {
 
@@ -99,8 +100,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return 
-            "Returns an array of strings [ a, fragment, z ] where a is the substring within s before the first occurrence of fragment, and z is the substring after fragment. Fragment can be a string or a regex. If omitFragment is true, frag is not returned.";
+        return FunctionDescription.str_partition();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Phonetic.java
Patch:
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Phonetic implements Function {
 
@@ -101,7 +102,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns a phonetic encoding of a string, based on an available phonetic algorithm. Can be one of the following supported phonetic methods: metaphone, doublemetaphone, metaphone3, soundex, cologne. Defaults to 'metaphone3'.";
+        return FunctionDescription.str_phonetic();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/RPartition.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.regex.Pattern;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class RPartition implements Function {
 
@@ -100,8 +101,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return 
-            "Returns an array of strings [ a, fragment, z ] where a is the substring within s before the last occurrence of fragment, and z is the substring after the last instance of fragment. If omitFragment is true, frag is not returned.";
+        return FunctionDescription.str_rpartition();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Range.java
Patch:
@@ -33,6 +33,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 /**
  * Implements the logic behind the range function.
@@ -319,8 +320,7 @@ private static Object createRange(int start, int stop, int step) {
 
     @Override
     public String getDescription() {
-        return 
-                "Returns an array where a and b are the start and the end of the range respectively and c is the step (increment).";
+        return FunctionDescription.str_range();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Reinterpret.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import com.google.refine.model.Project;
 
 public class Reinterpret implements Function {
@@ -97,7 +98,7 @@ private Object reinterpret(String str, String decoder, String encoder) {
     
     @Override
     public String getDescription() {
-        return "Returns s reinterpreted through the given character encoders. You must supply one of the supported encodings for each of the original source and the target output: https://docs.oracle.com/javase/1.5.0/docs/guide/intl/encoding.doc.html. Note that quotes are required around character encoders.";
+        return FunctionDescription.str_reinterpret();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ReplaceChars.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.expr.EvalError;
@@ -60,7 +61,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the string obtained by replacing a character in s, identified by find, with the corresponding character identified in replace. You cannot use this to replace a single character with more than one character.";
+        return FunctionDescription.str_replace_chars();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ReplaceEach.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang.StringUtils;
 
 import java.util.Arrays;
@@ -49,7 +50,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Replace each occurrence of a substring in a string with another substring.";
+        return FunctionDescription.str_replace_each();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/strings/SHA1.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.codec.digest.DigestUtils;
 
 import com.google.refine.expr.EvalError;
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the SHA-1 hash of an object. If fed something other than a string (array, number, date, etc.), sha1() will convert it to a string and deliver the hash of the string.";
+        return FunctionDescription.str_sha1();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/SmartSplit.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.Function;
 
 import au.com.bytecode.opencsv.CSVParser;
+import com.google.refine.grel.FunctionDescription;
 
 public class SmartSplit implements Function {
 
@@ -102,7 +103,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the array of strings obtained by splitting s by sep, or by guessing either tab or comma separation if there is no sep given. Handles quotes properly and understands cancelled characters. The separator can be either a string or a regex pattern.";
+        return FunctionDescription.str_smart_split();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Split.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.regex.Pattern;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.expr.EvalError;
@@ -75,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the array of strings obtained by splitting s by sep. The separator can be either a string or a regex pattern. If preserveTokens is true, empty segments are preserved.";
+        return FunctionDescription.str_split();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/SplitByCharType.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.lang3.StringUtils;
 
 import com.google.refine.expr.EvalError;
@@ -57,7 +58,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns an array of strings obtained by splitting s into groups of consecutive characters each time the characters change Unicode categories.";
+        return FunctionDescription.str_split_by_char_type();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/SplitByLengths.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class SplitByLengths implements Function {
     @Override
@@ -69,7 +70,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the array of strings obtained by splitting s into substrings with the given lengths. For example, \"internationalization\".splitByLengths(5, 6, 3) returns an array of 3 strings: [ \"inter\", \"nation\", \"ali\" ]. Excess characters are discarded from the output array.";
+        return FunctionDescription.str_split_by_lengths();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/StartsWith.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class StartsWith implements Function {
 
@@ -54,7 +55,7 @@ public Object call(Properties bindings, Object[] args) {
     }
     @Override
     public String getDescription() {
-        return "Returns a boolean indicating whether s starts with sub. For example, \"food\".startsWith(\"foo\") returns true, whereas \"food\".startsWith(\"bar\") returns false.";
+        return FunctionDescription.str_starts_with();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ToLowercase.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ToLowercase implements Function {
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns string s converted to all lowercase characters.";
+        return FunctionDescription.str_to_lowercase();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ToTitlecase.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.text.WordUtils;
 
 import com.google.refine.expr.EvalError;
@@ -63,7 +64,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns string s converted into titlecase: a capital letter starting each word, and the rest of the letters lowercase. For example, 'Once upon a midnight DREARY'.toTitlecase() returns the string 'Once Upon A Midnight Dreary'.";
+        return FunctionDescription.str_to_title_case();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ToUppercase.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class ToUppercase implements Function {
 
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns string s converted to all uppercase characters.";
+        return FunctionDescription.str_to_uppercase();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.common.base.CharMatcher;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Trim implements Function {
 
@@ -53,7 +54,7 @@ public Object call(Properties bindings, Object[] args) {
     }
     @Override
     public String getDescription() {
-        return "Returns a copy of string s with leading and trailing whitespace removed.";
+        return FunctionDescription.str_trim();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Unescape.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.net.URLDecoder;
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.apache.commons.text.StringEscapeUtils;
 
 import com.google.refine.expr.EvalError;
@@ -75,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Unescapes s in the given escaping mode. The mode can be one of: 'html', 'xml', 'csv', 'url', 'javascript'. Note that quotes are required around your mode. ";
+        return FunctionDescription.str_unescape();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/Unicode.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class Unicode implements Function {
 
@@ -55,7 +56,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns an array of strings describing each character of s in their full unicode notation.";
+        return FunctionDescription.str_unicode();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/UnicodeType.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.grel.Function;
+import com.google.refine.grel.FunctionDescription;
 
 public class UnicodeType implements Function {
 
@@ -92,7 +93,7 @@ private String translateType(int type) {
 
     @Override
     public String getDescription() {
-        return "Returns an array of strings describing each character of s by their unicode type.";
+        return FunctionDescription.str_unicode_type();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/InnerXml.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -70,7 +71,7 @@ public Object call(Properties bindings, Object[] args, String mode) {
 
     @Override
     public String getDescription() {
-    	return "Returns the inner XML elements of an XML element. Does not return the text directly inside your chosen XML element - only the contents of its children. Use it in conjunction with parseXml() and select() to provide an element.";
+    	return FunctionDescription.xml_innerxml();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/OwnText.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the text directly inside the selected XML or HTML element only, ignoring text inside children elements (for this, use innerXml()). Use it in conjunction with a parser and select() to provide an element.";
+        return FunctionDescription.xml_owntext();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/Parent.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -68,7 +69,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the parent node or null if no parent. Use it in conjunction with parseHtml() and select() to provide an element.";
+        return FunctionDescription.xml_parent();
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/xml/ParseXml.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.expr.functions.Type;
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.Jsoup;
 import org.jsoup.parser.Parser;
 
@@ -69,7 +70,7 @@ public Object call(Properties bindings, Object[] args, String mode) {
 
     @Override
     public String getDescription() {
-    	return "Given a cell full of XML-formatted text, parseXml() returns a full XML document and adds any missing closing tags.";
+    	return FunctionDescription.xml_parsexml();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/SelectXml.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -63,7 +64,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns an array of all the desired elements from an HTML or XML document, if the element exists. Elements are identified using the Jsoup selector syntax: https://jsoup.org/apidocs/org/jsoup/select/Selector.html.";
+        return FunctionDescription.xml_selectxml();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/WholeText.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import com.google.refine.expr.functions.Type;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -61,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Selects the (unencoded) text of an element and its children, including any new lines and spaces, and returns a string of unencoded, un-normalized text. Use it in conjunction with parseHtml() and select() to provide an element.";
+        return FunctionDescription.xml_wholetext();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/XmlAttr.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
@@ -63,7 +64,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a string from an attribute on an XML or HTML element. Use it in conjunction with parseHtml() or parseXml() to point to an element first.";
+        return FunctionDescription.xml_xmlattr();
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/xml/XmlText.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.grel.FunctionDescription;
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.functions.Type;
@@ -62,7 +63,7 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns a string of the text from within an HTML or XML element (including all child elements), removing tags and line breaks inside the string. Use it in conjunction with parseHtml() or parseXml() and select() to provide an element.";
+        return FunctionDescription.xml_xmltext();
     }
     
     @Override

File: main/tests/server/src/com/google/refine/expr/functions/html/ParseHtmlTests.java
Patch:
@@ -82,7 +82,7 @@ public void testParseHtml() {
         Assert.assertEquals(invoke("ownText", Jsoup.parse(h).select("p").first()), "para1");
         Assert.assertTrue(invoke("wholeText", Jsoup.parse(h).select("div.commentthread_comment_text").first()) instanceof String);
         Assert.assertEquals(invoke("wholeText", Jsoup.parse(h).select("div.commentthread_comment_text").first()),
-                "\n  Me : Make a 2nd game ?\n Dev : Nah man , too much work.\n Me : So what's it gonna be ?\n Dev : REMASTER !!!!\n ");
+                "\n  Me : Make a 2nd game ?\n \nDev : Nah man , too much work.\n \nMe : So what's it gonna be ?\n \nDev : REMASTER !!!!\n \n");
         Assert.assertEquals(invoke("parent", Jsoup.parse(h).select("p[type*=child]").first()).toString(),
                 "<div>\n <p type=\"child\">childtext</p>\n</div>");
         Assert.assertEquals(invoke("scriptText", Jsoup.parse(h).select("script").first()), "One Two");

File: main/tests/server/src/com/google/refine/exporters/OdsExporterTests.java
Patch:
@@ -126,8 +126,8 @@ public void exportSimpleOds() throws IOException {
         try {
             OdfDocument odfDoc = OdfDocument.loadDocument(new ByteArrayInputStream(stream.toByteArray()));
             List<OdfTable> tables = odfDoc.getTableList();
-            Assert.assertEquals(tables.size(), 2); // don't know how the first sheet generate yet
-            OdfTable odfTab = tables.get(1);
+            Assert.assertEquals(tables.size(), 1); // we deleted the first sheet generated by default
+            OdfTable odfTab = tables.get(0);
             Assert.assertEquals(odfTab.getTableName(), "ods exporter test project");
             Assert.assertEquals(odfTab.getRowCount(), 3); // first row is header
             Assert.assertEquals(odfTab.getRowByIndex(1).getCellByIndex(0).getStringValue(), "row0cell0");

File: extensions/jython/src/com/google/refine/jython/JythonEvaluable.java
Patch:
@@ -130,7 +130,7 @@ public Object evaluate(Properties bindings) {
 
             return unwrap(result);
         } catch (PyException e) {
-            return new EvalError(e.toString());
+            return new EvalError(e.getMessage());
         }
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java
Patch:
@@ -56,7 +56,7 @@ public WbStringVariable(String columnName) {
     @Override
     public StringValue fromCell(Cell cell, ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
-        if (cell != null && !cell.value.toString().isEmpty()) {
+        if (cell != null && cell.value != null && !cell.value.toString().isEmpty()) {
         	String stringValue = cell.value.toString();
         	if (cell.value instanceof Double && ((Double)cell.value) % 1 == 0) {
         		stringValue = Long.toString(((Double)cell.value).longValue());

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStringVariableTest.java
Patch:
@@ -46,10 +46,12 @@ public void testEmpty() {
      * This should not normally happen: cell values should never be null (only whole cells can be null). But better safe
      * than sorry!
      */
+    @Test
     public void testNullStringValue() {
         isSkipped((String) null);
     }
 
+    @Test
     public void testNullCell() {
         isSkipped((Cell) null);
     }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbExpression.java
Patch:
@@ -23,6 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;
@@ -60,5 +61,5 @@ public interface WbExpression<T> {
      * suitable to be the target of a claim.
      */
     public T evaluate(ExpressionContext ctxt)
-            throws SkipSchemaExpressionException;
+            throws SkipSchemaExpressionException, QAWarningException;
 }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbMonolingualExpr.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.commons.lang.Validate;
 import org.openrefine.wikidata.qa.QAWarning;
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
@@ -49,7 +50,7 @@ public WbMonolingualExpr(@JsonProperty("language") WbExpression<? extends String
 
     @Override
     public MonolingualTextValue evaluate(ExpressionContext ctxt)
-            throws SkipSchemaExpressionException {
+            throws SkipSchemaExpressionException, QAWarningException {
         String text = getValueExpr().evaluate(ctxt).getString();
         try {
             String lang = getLanguageExpr().evaluate(ctxt);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbQuantityExpr.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.apache.commons.lang.Validate;
 import org.openrefine.wikidata.qa.QAWarning;
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
@@ -60,7 +61,7 @@ public WbQuantityExpr(@JsonProperty("amount") WbExpression<? extends StringValue
 
     @Override
     public QuantityValue evaluate(ExpressionContext ctxt)
-            throws SkipSchemaExpressionException {
+            throws SkipSchemaExpressionException, QAWarningException {
         StringValue amount = getAmountExpr().evaluate(ctxt);
         // we know the amount is nonnull, nonempty here
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbReferenceExpr.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 
 import org.apache.commons.lang.Validate;
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.Reference;
@@ -59,7 +60,7 @@ public WbReferenceExpr(@JsonProperty("snaks") List<WbSnakExpr> snakExprs) {
 
     @Override
     public Reference evaluate(ExpressionContext ctxt)
-            throws SkipSchemaExpressionException {
+            throws SkipSchemaExpressionException, QAWarningException {
         List<Snak> snakList = new ArrayList<Snak>();
         for (WbSnakExpr expr : getSnaks()) {
             try {

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.entityvalues.FullyPropertySerializingValueSnak;
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
@@ -59,7 +60,7 @@ public WbSnakExpr(@JsonProperty("prop") WbExpression<? extends PropertyIdValue>
 
     @Override
     public Snak evaluate(ExpressionContext ctxt)
-            throws SkipSchemaExpressionException {
+            throws SkipSchemaExpressionException, QAWarningException {
         PropertyIdValue propertyId = getProp().evaluate(ctxt);
         Value evaluatedValue = value.evaluate(ctxt);
         return new FullyPropertySerializingValueSnak(propertyId, evaluatedValue);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStatementExpr.java
Patch:
@@ -33,6 +33,7 @@
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.qa.QAWarning;
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.openrefine.wikidata.schema.strategies.PropertyOnlyStatementMerger;
 import org.openrefine.wikidata.schema.strategies.StatementEditingMode;
@@ -111,7 +112,7 @@ public static List<SnakGroup> groupSnaks(List<Snak> snaks) {
     }
 
     public StatementEdit evaluate(ExpressionContext ctxt, EntityIdValue subject, PropertyIdValue propertyId)
-            throws SkipSchemaExpressionException {
+            throws SkipSchemaExpressionException, QAWarningException {
         Snak mainSnak = null;
         if (mainSnakValueExpr != null) {
             Value mainSnakValue = mainSnakValueExpr.evaluate(ctxt);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStatementGroupExpr.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 
 import org.jsoup.helper.Validate;
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.openrefine.wikidata.updates.StatementGroupEdit;
 import org.openrefine.wikidata.updates.StatementEdit;
@@ -55,7 +56,7 @@ public WbStatementGroupExpr(@JsonProperty("property") WbExpression<? extends Pro
     }
 
     public StatementGroupEdit evaluate(ExpressionContext ctxt, EntityIdValue subject)
-            throws SkipSchemaExpressionException {
+            throws SkipSchemaExpressionException, QAWarningException {
         PropertyIdValue propertyId = propertyExpr.evaluate(ctxt);
         List<StatementEdit> statements = new ArrayList<>(statementExprs.size());
         for (WbStatementExpr expr : statementExprs) {

File: extensions/wikidata/src/org/openrefine/wikidata/updates/MediaInfoEdit.java
Patch:
@@ -13,7 +13,6 @@
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.EntityDocument;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.EntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.MediaInfoDocument;
 import org.wikidata.wdtk.datamodel.interfaces.MediaInfoIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.MediaInfoUpdate;
@@ -45,6 +44,7 @@ public class MediaInfoEdit extends LabeledStatementEntityEdit {
 	public MediaInfoEdit(EntityIdValue id, List<StatementEdit> statements, Set<MonolingualTextValue> labels,
 			Set<MonolingualTextValue> labelsIfNew) {
 		super(id, statements, labels, labelsIfNew);
+    	Validate.isTrue(id instanceof MediaInfoIdValue, "the entity id must be an ItemIdValue");
 	}
 	
     /**

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.math.BigDecimal;
 
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
@@ -85,7 +86,7 @@ public void testInvalidUnitWithAmount()
 
     // for issue #341: https://github.com/Wikidata/Wikidata-Toolkit/issues/341
     @Test
-    public void testExponent() throws SkipSchemaExpressionException, JsonProcessingException {
+    public void testExponent() throws SkipSchemaExpressionException, JsonProcessingException, QAWarningException {
         setRow("38.4E+3", recon("Q42"));
         QuantityValue val = exprWithUnit.evaluate(ctxt);
         assertEquals("38400", val.getNumericValue().toString());

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStatementExprTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.openrefine.wikidata.schema.strategies.PropertyOnlyStatementMerger;
 import org.openrefine.wikidata.schema.strategies.StatementEditingMode;
@@ -122,7 +123,7 @@ public Wrapper(WbStatementExpr e) {
 
         @Override
         public StatementEdit evaluate(ExpressionContext ctxt)
-                throws SkipSchemaExpressionException {
+                throws SkipSchemaExpressionException, QAWarningException {
             return expr.evaluate(ctxt, subject, property);
         }
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStatementGroupExprTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.util.Collections;
 
+import org.openrefine.wikidata.schema.exceptions.QAWarningException;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.openrefine.wikidata.testing.JacksonSerializationTest;
 import org.openrefine.wikidata.updates.StatementGroupEdit;
@@ -54,7 +55,7 @@ public Wrapper(WbStatementGroupExpr e) {
 
         @Override
         public StatementGroupEdit evaluate(ExpressionContext ctxt)
-                throws SkipSchemaExpressionException {
+                throws SkipSchemaExpressionException, QAWarningException {
             return expr.evaluate(ctxt, subject);
         }
     }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java
Patch:
@@ -130,7 +130,7 @@ public void register(EditScrutinizer scrutinizer) {
             String key = scrutinizer.getClass().getName();
             scrutinizers.put(key, scrutinizer);
         } else {
-            logger.info("scrutinizer [" + scrutinizer.getClass().getSimpleName() + "] is skipped " +
+            logger.debug("scrutinizer [" + scrutinizer.getClass().getSimpleName() + "] is skipped " +
                     "due to missing necessary constraint configurations in the Wikibase manifest");
         }
     }

File: extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java
Patch:
@@ -35,7 +35,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java
Patch:
@@ -35,7 +35,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java
Patch:
@@ -38,7 +38,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java
Patch:
@@ -35,7 +35,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java
Patch:
@@ -35,7 +35,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extensions/database/tests/src/com/google/refine/extension/database/cmd/SavedConnectionCommandTest.java
Patch:
@@ -16,7 +16,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.testng.Assert;

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -50,7 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/src/com/google/refine/commands/project/ExportRowsCommand.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/tests/server/src/com/google/refine/RefineServletTests.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.http.HttpStatus;
+import org.apache.hc.core5.http.HttpStatus;
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;

File: main/src/com/google/refine/expr/functions/strings/SplitByLengths.java
Patch:
@@ -69,7 +69,7 @@ public Object call(Properties bindings, Object[] args) {
     
     @Override
     public String getDescription() {
-        return "Returns the array of strings obtained by splitting s into substrings with the given lengths. For example, \"internationalization\".splitByLengths(5, 6, 3) returns an array of 3 strings: [ \"inter\", \"nation\", \"ali\" ]. Excess characters are discarded.";
+        return "Returns the array of strings obtained by splitting s into substrings with the given lengths. For example, \"internationalization\".splitByLengths(5, 6, 3) returns an array of 3 strings: [ \"inter\", \"nation\", \"ali\" ]. Excess characters are discarded from the output array.";
     }
     
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java
Patch:
@@ -41,6 +41,7 @@
 import org.openrefine.wikidata.editing.NewEntityLibrary;
 import org.openrefine.wikidata.manifests.Manifest;
 import org.openrefine.wikidata.schema.WikibaseSchema;
+import org.openrefine.wikidata.updates.EntityEdit;
 import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -247,7 +248,7 @@ public void run() {
             }
 
             // Evaluate the schema
-            List<TermedStatementEntityEdit> entityDocuments = _schema.evaluate(_project, _engine);
+            List<EntityEdit> entityDocuments = _schema.evaluate(_project, _engine);
 
             // Prepare the edits
             NewEntityLibrary newEntityLibrary = new NewEntityLibrary();

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbExpression.java
Patch:
@@ -50,7 +50,9 @@
         @Type(value = WbEntityIdValueConstant.class, name = "wbentityidvalueconstant"),
         @Type(value = WbLanguageConstant.class, name = "wblanguageconstant"),
         @Type(value = WbLanguageVariable.class, name = "wblanguagevariable"),
-        @Type(value = WbQuantityExpr.class, name = "wbquantityexpr"), })
+        @Type(value = WbQuantityExpr.class, name = "wbquantityexpr"),
+        @Type(value = WbItemEditExpr.class, name = "wbitemeditexpr"),
+        @Type(value = WbMediaInfoEditExpr.class, name = "wbmediainfoeditexpr"),})
 public interface WbExpression<T> {
 
     /**

File: extensions/wikidata/src/org/openrefine/wikidata/updates/scheduler/UpdateScheduler.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
+import org.openrefine.wikidata.updates.EntityEdit;
 
 /**
  * A scheduling strategy for entity updates. Given a list of initial updates, the
@@ -48,6 +48,6 @@ public interface UpdateScheduler {
      * @throws ImpossibleSchedulingException
      *             when the scheduler cannot cope with a particular edit plan.
      */
-    public List<TermedStatementEntityEdit> schedule(List<TermedStatementEntityEdit> updates)
+    public List<EntityEdit> schedule(List<EntityEdit> updates)
             throws ImpossibleSchedulingException;
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java
Patch:
@@ -19,12 +19,13 @@ public class SchemaExporterTest extends WikidataRefineTest {
     @Test
     public void testNoSchema()
             throws IOException {
+        // TODO instead of returning an empty (and invalid) schema, we should just return an error
         Project project = this.createCSVProject("a,b\nc,d");
         Engine engine = new Engine(project);
         StringWriter writer = new StringWriter();
         Properties properties = new Properties();
         exporter.export(project, properties, engine, writer);
-        TestUtils.assertEqualAsJson("{\"itemDocuments\":[],\"siteIri\":null,\"mediaWikiApiEndpoint\":null,\"entityTypeSiteIRI\":{}}",
+        TestUtils.assertEqualAsJson("{\"entityEdits\":[],\"siteIri\":null,\"mediaWikiApiEndpoint\":null,\"entityTypeSiteIRI\":{}}",
                 writer.toString());
     }
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
 import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.implementation.StatementImpl;
@@ -57,7 +57,7 @@ public void testTrigger() {
         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);
         Statement statement1 = new StatementImpl("P569", value1, idA);
         Statement statement2 = new StatementImpl("P570", value2, idA);
-        TermedStatementEntityEdit updateA = new TermedStatementEntityEditBuilder(idA)
+        TermedStatementEntityEdit updateA = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
                 .build();
@@ -87,7 +87,7 @@ public void testNoIssue() {
         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);
         Statement statement1 = new StatementImpl("P569", value1, idA);
         Statement statement2 = new StatementImpl("P570", value2, idA);
-        TermedStatementEntityEdit updateA = new TermedStatementEntityEditBuilder(idA)
+        TermedStatementEntityEdit updateA = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
                 .build();

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizerTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
 import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.implementation.StatementImpl;
@@ -48,7 +48,7 @@ public void testAllowed() {
         ValueSnak mainValueSnak = Datamodel.makeValueSnak(propertyIdValue, propertyValue);
         Statement statement = new StatementImpl("P2302", mainValueSnak, idA);
 
-        TermedStatementEntityEdit update = new TermedStatementEntityEditBuilder(idA)
+        TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
                 .build();
 
@@ -73,7 +73,7 @@ public void testDisallowed() {
         ValueSnak mainValueSnak = Datamodel.makeValueSnak(propertyIdValue, propertyValue);
         Statement statement = new StatementImpl("P2302", mainValueSnak, idA);
 
-        TermedStatementEntityEdit update = new TermedStatementEntityEditBuilder(idA)
+        TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement))
                 .build();
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/NoEditsMadeScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.testng.annotations.Test;
 
 public class NoEditsMadeScrutinizerTest extends ScrutinizerTest {
@@ -43,13 +43,13 @@ public void testTrigger() {
 
     @Test
     public void testNonNull() {
-        scrutinize(new TermedStatementEntityEditBuilder(TestingData.newIdA).build());
+        scrutinize(new ItemEditBuilder(TestingData.newIdA).build());
         assertNoWarningRaised();
     }
 
     @Test
     public void testNull() {
-        scrutinize(new TermedStatementEntityEditBuilder(TestingData.existingId).build());
+        scrutinize(new ItemEditBuilder(TestingData.existingId).build());
         assertWarningsRaised(NoEditsMadeScrutinizer.type);
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java
Patch:
@@ -46,8 +46,8 @@
 import org.openrefine.wikidata.schema.strategies.StatementEditingMode;
 import org.openrefine.wikidata.schema.strategies.StatementMerger;
 import org.openrefine.wikidata.testing.TestingData;
+import org.openrefine.wikidata.updates.EntityEdit;
 import org.openrefine.wikidata.updates.StatementEdit;
-import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.testng.annotations.BeforeMethod;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.Claim;
@@ -86,9 +86,9 @@ public void setUp() {
         scrutinizer.prepareDependencies();
     }
 
-    public void scrutinize(TermedStatementEntityEdit... updates) {
+    public void scrutinize(EntityEdit... updates) {
         scrutinizer.batchIsBeginning();
-        for (TermedStatementEntityEdit update : Arrays.asList(updates)) {
+        for (EntityEdit update : Arrays.asList(updates)) {
             if (!update.isNull()) {
                 scrutinizer.scrutinize(update);
             }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
 import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.implementation.StatementImpl;
@@ -65,7 +65,7 @@ public void testTrigger() {
         Snak snak2 = Datamodel.makeValueSnak(propertyIdValue, value2);
         Statement statement1 = new StatementImpl("P21", snak1, idA);
         Statement statement2 = new StatementImpl("P21", snak2, idA);
-        TermedStatementEntityEdit update = new TermedStatementEntityEditBuilder(idA)
+        TermedStatementEntityEdit update = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .addStatement(add(statement2))
                 .build();
@@ -84,7 +84,7 @@ public void testNoIssue() {
         ItemIdValue idA = TestingData.existingId;
         Snak snak1 = Datamodel.makeValueSnak(propertyIdValue, value1);
         Statement statement1 = new StatementImpl("P21", snak1, idA);
-        TermedStatementEntityEdit updateA = new TermedStatementEntityEditBuilder(idA)
+        TermedStatementEntityEdit updateA = new ItemEditBuilder(idA)
                 .addStatement(add(statement1))
                 .build();
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/StatementScrutinizerTest.java
Patch:
@@ -25,14 +25,14 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 public abstract class StatementScrutinizerTest extends ScrutinizerTest {
 
     public void scrutinize(Statement statement) {
-        TermedStatementEntityEdit update = new TermedStatementEntityEditBuilder((ItemIdValue) statement.getClaim().getSubject())
+        TermedStatementEntityEdit update = new ItemEditBuilder((ItemIdValue) statement.getClaim().getSubject())
                 .addStatement(add(statement)).build();
         scrutinize(update);
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/UnsourcedScrutinizerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
 import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.implementation.StatementImpl;
@@ -73,7 +73,7 @@ public void testTrigger() {
         ItemIdValue id = TestingData.existingId;
         Snak mainSnak = Datamodel.makeSomeValueSnak(propertyIdValue);
         Statement statement = new StatementImpl("P172", mainSnak, id);
-        TermedStatementEntityEdit update = new TermedStatementEntityEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
 
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, Collections.emptyList());
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);
@@ -91,7 +91,7 @@ public void testNoIssue() {
         List<SnakGroup> constraintQualifiers = makeSnakGroupList(referenceSnak);
         List<Statement> itemStatementList = constraintParameterStatementList(entityIdValue, constraintQualifiers);
         Statement statement = itemStatementList.get(0);
-        TermedStatementEntityEdit update = new TermedStatementEntityEditBuilder(id).addStatement(add(statement)).build();
+        TermedStatementEntityEdit update = new ItemEditBuilder(id).addStatement(add(statement)).build();
 
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, Collections.emptyList());
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
+import org.openrefine.wikidata.updates.ItemEditBuilder;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
@@ -44,6 +44,6 @@ public void scrutinize(PropertyIdValue pid, Value value) {
     }
 
     public void scrutinizeLabel(MonolingualTextValue text) {
-        scrutinize(new TermedStatementEntityEditBuilder(TestingData.existingId).addLabel(text, true).build());
+        scrutinize(new ItemEditBuilder(TestingData.existingId).addLabel(text, true).build());
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbExpressionTest.java
Patch:
@@ -137,7 +137,7 @@ public void setRow(Object... rowValues) {
                 row.cells.add(cell);
             }
         }
-        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", null, server.url("/w/api.php").toString(), 0, row,
+        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", Collections.emptyMap(), server.url("/w/api.php").toString(), 0, row,
                 project.columnModel, warningStore);
     }
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/StatementGroupEditTest.java
Patch:
@@ -1,10 +1,10 @@
 
 package org.openrefine.wikidata.updates;
 
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNotEquals;
 
 import java.io.IOException;
 import java.util.Arrays;

File: main/src/com/google/refine/expr/functions/math/ACos.java
Patch:
@@ -43,7 +43,7 @@ public class ACos implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.acos(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/ASin.java
Patch:
@@ -43,7 +43,7 @@ public class ASin implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.asin(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/ATan.java
Patch:
@@ -43,7 +43,7 @@ public class ATan implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.atan(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/ATan2.java
Patch:
@@ -43,8 +43,8 @@ public class ATan2 implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 2 && args[0] != null && args[0] instanceof Number
-                && args[1] != null && args[1] instanceof Number) {
+        if (args.length == 2 && args[0] instanceof Number
+                && args[1] instanceof Number) {
             return Math.atan2(((Number) args[0]).doubleValue(),((Number) args[1]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Abs.java
Patch:
@@ -43,7 +43,7 @@ public class Abs implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.abs(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Ceil.java
Patch:
@@ -43,7 +43,7 @@ public class Ceil implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return (long) Math.ceil(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Combin.java
Patch:
@@ -46,10 +46,10 @@ public Object call(Properties bindings, Object[] args) {
         if(args.length != 2) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
         }
-        if(args[0] == null || !(args[0] instanceof Number)) {
+        if(!(args[0] instanceof Number)) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the first argument to be a number");
         }
-        if(args[1] == null || !(args[1] instanceof Number)) {
+        if(!(args[1] instanceof Number)) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the second argument to be a number");
         }
 

File: main/src/com/google/refine/expr/functions/math/Cos.java
Patch:
@@ -43,7 +43,7 @@ public class Cos implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.cos(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Cosh.java
Patch:
@@ -43,7 +43,7 @@ public class Cosh implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return StrictMath.cosh(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Degrees.java
Patch:
@@ -43,7 +43,7 @@ public class Degrees implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.toDegrees(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Even.java
Patch:
@@ -43,7 +43,7 @@ public class Even implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Even.roundUpToEven(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Exp.java
Patch:
@@ -35,6 +35,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.expr.EvalError;
+import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 
 public class Exp implements Function {
@@ -44,7 +46,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] instanceof Number) {
             return Math.exp(((Number) args[0]).doubleValue());
         }
-        return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Fact.java
Patch:
@@ -43,7 +43,7 @@ public class Fact implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return FactN.factorial(((Number) args[0]).intValue(), 1);
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/FactN.java
Patch:
@@ -46,10 +46,10 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length != 2) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
         }
-        if (args[0] == null || !(args[0] instanceof Number)) {
+        if (!(args[0] instanceof Number)) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the first parameter to be a number");
         }
-        if (args[1] == null || !(args[1] instanceof Number)) {
+        if (!(args[1] instanceof Number)) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the second parameter to be a number");
         }
 

File: main/src/com/google/refine/expr/functions/math/Floor.java
Patch:
@@ -43,7 +43,7 @@ public class Floor implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return (long) Math.floor(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java
Patch:
@@ -43,8 +43,8 @@ public class GreatestCommonDenominator implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 2 && args[0] != null && args[0] instanceof Number
-                && args[1] != null && args[1] instanceof Number) {
+        if (args.length == 2 && args[0] instanceof Number
+                && args[1] instanceof Number) {
             return GreatestCommonDenominator.GCD(((Number) args[0]).doubleValue(), ((Number) args[1]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");

File: main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java
Patch:
@@ -44,8 +44,8 @@ public class LeastCommonMultiple implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 2
-                && args[0] != null && args[0] instanceof Number
-                && args[1] != null && args[1] instanceof Number) {
+                && args[0] instanceof Number
+                && args[1] instanceof Number) {
             return LeastCommonMultiple.LCM(((Number) args[0]).doubleValue(), ((Number) args[1]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");

File: main/src/com/google/refine/expr/functions/math/Ln.java
Patch:
@@ -43,7 +43,7 @@ public class Ln implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.log(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Log.java
Patch:
@@ -43,7 +43,7 @@ public class Log implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.log10(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Max.java
Patch:
@@ -43,9 +43,9 @@ public class Max implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 2 && 
-                args[0] != null && args[0] instanceof Number &&
-                args[1] != null && args[1] instanceof Number) {
+        if (args.length == 2 &&
+                args[0] instanceof Number &&
+                args[1] instanceof Number) {
             return Math.max(
                 ((Number) args[0]).doubleValue(),
                 ((Number) args[1]).doubleValue());

File: main/src/com/google/refine/expr/functions/math/Min.java
Patch:
@@ -44,8 +44,8 @@ public class Min implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 2 && 
-                args[0] != null && args[0] instanceof Number && 
-                args[1] != null && args[1] instanceof Number) {
+                args[0] instanceof Number &&
+                args[1] instanceof Number) {
             return Math.min(
                 ((Number) args[0]).doubleValue(),
                 ((Number) args[1]).doubleValue());

File: main/src/com/google/refine/expr/functions/math/Mod.java
Patch:
@@ -44,8 +44,8 @@ public class Mod implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 2 && 
-                args[0] != null && args[0] instanceof Number && 
-                args[1] != null && args[1] instanceof Number) {
+                args[0] instanceof Number &&
+                args[1] instanceof Number) {
             int a = ((Number) args[0]).intValue();
             int b = ((Number) args[1]).intValue();
             

File: main/src/com/google/refine/expr/functions/math/Multinomial.java
Patch:
@@ -49,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
         int sum = 0;
         int product = 1;
         for (int i = 0; i < args.length; i++){
-            if (args[i] == null || !(args[i] instanceof Number)) {
+            if (!(args[i] instanceof Number)) {
                 return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects parameter " + (i + 1) + " to be a number");
             }
             int num = ((Number) args[i]).intValue();

File: main/src/com/google/refine/expr/functions/math/Odd.java
Patch:
@@ -43,7 +43,7 @@ public class Odd implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Odd.roundUpToOdd(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Pow.java
Patch:
@@ -35,6 +35,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.expr.EvalError;
+import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 
 public class Pow implements Function {
@@ -47,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
                 ((Number) args[1]).doubleValue()
             );
         }
-        return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
     }
 
     @Override

File: main/src/com/google/refine/expr/functions/math/Quotient.java
Patch:
@@ -43,8 +43,8 @@ public class Quotient implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 2 && args[0] != null && args[0] instanceof Number
-                && args[1] != null && args[1] instanceof Number) {
+        if (args.length == 2 && args[0] instanceof Number
+                && args[1] instanceof Number) {
             return Math.floor((((Number) args[0]).doubleValue() / ((Number) args[1]).doubleValue()));
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");

File: main/src/com/google/refine/expr/functions/math/Radians.java
Patch:
@@ -43,7 +43,7 @@ public class Radians implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.toRadians(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/RandomNumber.java
Patch:
@@ -45,8 +45,8 @@ public class RandomNumber implements Function {
     
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 2 && args[0] != null && args[0] instanceof Number
-                && args[1] != null && args[1] instanceof Number && ((Number) args[0]).intValue()<((Number) args[1]).intValue()) {
+        if (args.length == 2 && args[0] instanceof Number
+                && args[1] instanceof Number && ((Number) args[0]).intValue()<((Number) args[1]).intValue()) {
             int randomNum = ThreadLocalRandom.current().nextInt(((Number) args[0]).intValue(), ((Number) args[1]).intValue()+1);
             return randomNum;
         }

File: main/src/com/google/refine/expr/functions/math/Round.java
Patch:
@@ -43,7 +43,7 @@ public class Round implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.round(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Sin.java
Patch:
@@ -43,7 +43,7 @@ public class Sin implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.sin(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Sinh.java
Patch:
@@ -43,7 +43,7 @@ public class Sinh implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return StrictMath.sinh(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Tan.java
Patch:
@@ -43,7 +43,7 @@ public class Tan implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return Math.tan(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/expr/functions/math/Tanh.java
Patch:
@@ -43,7 +43,7 @@ public class Tanh implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
+        if (args.length == 1 && args[0] instanceof Number) {
             return StrictMath.tanh(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -276,6 +276,8 @@ static protected void performProcessAndRespond(
         HistoryEntry historyEntry = project.processManager.queueProcess(process);
         if (historyEntry != null) {
             Writer w = response.getWriter();
+            response.setCharacterEncoding("UTF-8");
+            response.setHeader("Content-Type", "application/json");
             ParsingUtilities.defaultWriter.writeValue(w, new HistoryEntryResponse(historyEntry));
 
             w.flush();

File: main/src/com/google/refine/expr/functions/ToString.java
Patch:
@@ -64,7 +64,7 @@ public Object call(Properties bindings, Object[] args) {
                 } 
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " accepts an object and an optional second argument containing a date format string");
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " accepts an object and an optional second argument containing a Date or Number format string");
     }
 
     

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -274,7 +274,9 @@ protected void saveWorkspace() {
                 logger.warn("Failed to save workspace");
                 return;
             }
-
+            // set the workspace to owner-only readable, because it can contain credentials
+            tempFile.setReadable(false, false);
+            tempFile.setReadable(true, true);
             File file = new File(_workspaceDir, "workspace.json");
             File oldFile = new File(_workspaceDir, "workspace.old.json");
 

File: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java
Patch:
@@ -39,7 +39,7 @@
 import org.openrefine.wikidata.editing.EditBatchProcessor;
 import org.openrefine.wikidata.editing.NewEntityLibrary;
 import org.openrefine.wikidata.schema.WikibaseSchema;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.wikidata.wdtk.util.WebResourceFetcherImpl;
@@ -231,7 +231,7 @@ public void run() {
             }
 
             // Evaluate the schema
-            List<TermedStatementEntityUpdate> entityDocuments = _schema.evaluate(_project, _engine);
+            List<TermedStatementEntityEdit> entityDocuments = _schema.evaluate(_project, _engine);
 
             // Prepare the edits
             NewEntityLibrary newEntityLibrary = new NewEntityLibrary();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
@@ -56,7 +56,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         Map<PropertyIdValue, Set<Value>> propertyIdValueValueMap = new HashMap<>();
         for (Statement statement : update.getAddedStatements()){
             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DescriptionScrutinizer.java
Patch:
@@ -1,6 +1,6 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 
 import java.util.Set;
@@ -11,7 +11,7 @@
 public abstract class DescriptionScrutinizer extends EditScrutinizer {
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         Set<MonolingualTextValue> descriptions = update.getDescriptions();
         descriptions.addAll(update.getDescriptionsIfNew()); // merge
         for (MonolingualTextValue description : descriptions) {
@@ -28,6 +28,6 @@ public void scrutinize(TermedStatementEntityUpdate update) {
         }
     }
 
-    public abstract void scrutinize(TermedStatementEntityUpdate update, String descText, String lang);
+    public abstract void scrutinize(TermedStatementEntityEdit update, String descText, String lang);
 
 }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.*;
 
 import java.util.HashMap;
@@ -50,7 +50,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();
         for (Statement statement : update.getAddedStatements()){
             Snak mainSnak = statement.getClaim().getMainSnak();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java
Patch:
@@ -28,7 +28,7 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.openrefine.wikidata.qa.QAWarning.Severity;
 import org.openrefine.wikidata.qa.QAWarningStore;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
@@ -89,7 +89,7 @@ public void batchIsBeginning() {
      * @param edit:
      *            the list of TermedStatementEntityUpdates to scrutinize
      */
-    public abstract void scrutinize(TermedStatementEntityUpdate edit);
+    public abstract void scrutinize(TermedStatementEntityEdit edit);
     
     /**
      * Method called once the edit batch has been read entirely

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizer.java
Patch:
@@ -20,6 +20,9 @@ public class EntityTypeScrutinizer extends SnakScrutinizer {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+        if (!added) {
+            return;
+        }
         PropertyIdValue pid = snak.getPropertyId();
         List<Statement> statementList = _fetcher.getConstraintsByType(pid, allowedEntityTypesQid);
         if(!statementList.isEmpty()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ItemRequiresScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
@@ -61,7 +61,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         Map<PropertyIdValue, Set<Value>> propertyIdValueValueMap = new HashMap<>();
         for (Statement statement : update.getAddedStatements()) {
             Snak mainSnak = statement.getClaim().getMainSnak();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
@@ -22,7 +22,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         Map<PropertyIdValue, Integer> propertyCount = new HashMap<>();
 
         for (Statement statement : update.getAddedStatements()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NoEditsMadeScrutinizer.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 
 public class NoEditsMadeScrutinizer extends EditScrutinizer {
 
@@ -42,7 +42,7 @@ public void batchIsBeginning() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate edit) {
+    public void scrutinize(TermedStatementEntityEdit edit) {
         nonNullUpdateSeen = true;
     }
     

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QuantityScrutinizer.java
Patch:
@@ -59,6 +59,9 @@ class AllowedUnitsConstraint {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+        if (!added) {
+            return;
+        }
         if (snak instanceof ValueSnak && ((ValueSnak)snak).getValue() instanceof QuantityValue && added) {
             PropertyIdValue pid = snak.getPropertyId();
             QuantityValue value = (QuantityValue)((ValueSnak)snak).getValue();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java
Patch:
@@ -57,6 +57,9 @@ class DisallowedValueConstraint {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+        if (!added) {
+            return;
+        }
         PropertyIdValue pid = snak.getPropertyId();
         Value value = null;
         if (snak instanceof ValueSnak) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SelfReferentialScrutinizer.java
Patch:
@@ -41,6 +41,9 @@ public class SelfReferentialScrutinizer extends SnakScrutinizer {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+        if (!added) {
+            return;
+        }
         if (snak instanceof ValueSnak && entityId.equals(((ValueSnak)snak).getValue())) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
             issue.setProperty("example_entity", entityId);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java
Patch:
@@ -24,7 +24,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
@@ -56,7 +56,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         Set<PropertyIdValue> seenSingleProperties = new HashSet<>();
 
         for (Statement statement : update.getAddedStatements()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/StatementScrutinizer.java
Patch:
@@ -23,14 +23,14 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 public abstract class StatementScrutinizer extends EditScrutinizer {
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         EntityIdValue currentEntityId = update.getEntityId();
         for (Statement statement : update.getAddedStatements()) {
             scrutinize(statement, currentEntityId, true);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UnsourcedScrutinizer.java
Patch:
@@ -24,7 +24,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Reference;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
@@ -44,7 +44,7 @@ public class UnsourcedScrutinizer extends EditScrutinizer {
     public static final String constraintItemType = "no-references-provided";
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         for (Statement statement : update.getAddedStatements()) {
             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();
             List<Statement> constraintDefinitions = _fetcher.getConstraintsByType(pid, citationNeededConstraintQid);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
@@ -55,7 +55,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(TermedStatementEntityUpdate update) {
+    public void scrutinize(TermedStatementEntityEdit update) {
         for (Statement statement : update.getAddedStatements()) {
             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();
             Map<PropertyIdValue, List<Value>> qualifiersMap = new HashMap<>();

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbNameDescExpr.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdateBuilder;
+import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
@@ -35,7 +35,7 @@
 /**
  * An expression that represent a term (label, description or alias). The
  * structure is slightly different from other expressions because we need to
- * call different methods on {@link TermedStatementEntityUpdateBuilder}.
+ * call different methods on {@link TermedStatementEntityEditBuilder}.
  * 
  * @author Antonin Delpeuch
  *
@@ -67,7 +67,7 @@ public WbNameDescExpr(@JsonProperty("name_type") NameDescType type,
      * @param ctxt
      *            the evaluation context for the expression
      */
-    public void contributeTo(TermedStatementEntityUpdateBuilder entity, ExpressionContext ctxt) {
+    public void contributeTo(TermedStatementEntityEditBuilder entity, ExpressionContext ctxt) {
         try {
             MonolingualTextValue val = getValue().evaluate(ctxt);
             switch (getType()) {

File: extensions/wikidata/src/org/openrefine/wikidata/updates/scheduler/UpdateScheduler.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityEdit;
 
 /**
  * A scheduling strategy for entity updates. Given a list of initial updates, the
@@ -48,6 +48,6 @@ public interface UpdateScheduler {
      * @throws ImpossibleSchedulingException
      *             when the scheduler cannot cope with a particular edit plan.
      */
-    public List<TermedStatementEntityUpdate> schedule(List<TermedStatementEntityUpdate> updates)
+    public List<TermedStatementEntityEdit> schedule(List<TermedStatementEntityEdit> updates)
             throws ImpossibleSchedulingException;
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/NoEditsMadeScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdateBuilder;
+import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
 import org.testng.annotations.Test;
 
 public class NoEditsMadeScrutinizerTest extends ScrutinizerTest {
@@ -43,13 +43,13 @@ public void testTrigger() {
 
     @Test
     public void testNonNull() {
-        scrutinize(new TermedStatementEntityUpdateBuilder(TestingData.newIdA).build());
+        scrutinize(new TermedStatementEntityEditBuilder(TestingData.newIdA).build());
         assertNoWarningRaised();
     }
 
     @Test
     public void testNull() {
-        scrutinize(new TermedStatementEntityUpdateBuilder(TestingData.existingId).build());
+        scrutinize(new TermedStatementEntityEditBuilder(TestingData.existingId).build());
         assertWarningsRaised(NoEditsMadeScrutinizer.type);
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.TermedStatementEntityUpdateBuilder;
+import org.openrefine.wikidata.updates.TermedStatementEntityEditBuilder;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
@@ -44,6 +44,6 @@ public void scrutinize(PropertyIdValue pid, Value value) {
     }
 
     public void scrutinizeLabel(MonolingualTextValue text) {
-        scrutinize(new TermedStatementEntityUpdateBuilder(TestingData.existingId).addLabel(text, true).build());
+        scrutinize(new TermedStatementEntityEditBuilder(TestingData.existingId).addLabel(text, true).build());
     }
 }

File: main/src/com/google/refine/expr/functions/xml/ScriptText.java
Patch:
@@ -68,9 +68,10 @@ public Object call(Properties bindings, Object[] args) {
 
     @Override
     public String getDescription() {
-        return "Returns the combined data of an HTML/XML Element. Data is e.g. the inside of a <script> tag.\n"
+        // the description needs to be valid HTML.
+        return "Returns the combined data of an HTML/XML Element. Data is e.g. the inside of a &lt;script&gt; tag.\n"
                 + "Note that data is NOT the text of the element.\n"
-                + "Use htmlText() to get the text that would be visible to a user, and scriptText() for the contents of <script>, <style>, etc.\n"
+                + "Use htmlText() to get the text that would be visible to a user, and scriptText() for the contents of &lt;script&gt;, &lt;style&gt;, etc.\n"
                 + "Use scriptText() in conjunction with parseHtml() and select().";
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java
Patch:
@@ -73,7 +73,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
                 try {
                     schema = WikibaseSchema.reconstruct(schemaJson);
                 } catch (IOException e) {
-                    respondError(response, "Wikibase schema could not be parsed.");
+                    respondError(response, "Wikibase schema could not be parsed. Error message: "+e.getMessage());
                     return;
                 }
             } else {

File: extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java
Patch:
@@ -71,7 +71,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             // We do not use respondException here because this is an expected
             // exception which happens every time a user tries to save an incomplete
             // schema - the exception should not be logged.
-            respondError(response, "Wikibase schema could not be parsed.");
+            respondError(response, String.format("Wikibase schema could not be parsed: ", e.getMessage()));
         } catch (Exception e) {
             // This is an unexpected exception, so we log it.
             respondException(response, e);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbExpression.java
Patch:
@@ -47,6 +47,7 @@
         @Type(value = WbDateVariable.class, name = "wbdatevariable"),
         @Type(value = WbMonolingualExpr.class, name = "wbmonolingualexpr"),
         @Type(value = WbPropConstant.class, name = "wbpropconstant"),
+        @Type(value = WbEntityIdValueConstant.class, name = "wbentityidvalueconstant"),
         @Type(value = WbLanguageConstant.class, name = "wblanguageconstant"),
         @Type(value = WbLanguageVariable.class, name = "wblanguagevariable"),
         @Type(value = WbQuantityExpr.class, name = "wbquantityexpr"), })

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java
Patch:
@@ -23,7 +23,7 @@ public void testNoSchema()
         StringWriter writer = new StringWriter();
         Properties properties = new Properties();
         exporter.export(project, properties, engine, writer);
-        TestUtils.assertEqualAsJson("{\"itemDocuments\":[],\"siteIri\":null,\"mediaWikiApiEndpoint\":null}", writer.toString());
+        TestUtils.assertEqualAsJson("{\"itemDocuments\":[],\"siteIri\":null,\"mediaWikiApiEndpoint\":null,\"entityTypeSiteIRI\":{}}", writer.toString());
     }
 
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/ExpressionContextTest.java
Patch:
@@ -43,19 +43,19 @@ public void setUp() {
 
     @Test
     public void testGetCellByColumnName() {
-        ExpressionContext ctxt = new ExpressionContext("foo:", "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
+        ExpressionContext ctxt = new ExpressionContext("foo:", null, "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
         assertEquals("e", ctxt.getCellByName("b").value);
     }
 
     @Test
     public void testNonExistentColumn() {
-        ExpressionContext ctxt = new ExpressionContext("foo:", "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
+        ExpressionContext ctxt = new ExpressionContext("foo:", null, "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
         assertNull(ctxt.getCellByName("auie"));
     }
 
     @Test
     public void testGetRowId() {
-        ExpressionContext ctxt = new ExpressionContext("foo:", "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
+        ExpressionContext ctxt = new ExpressionContext("foo:", null, "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
         assertEquals(1, ctxt.getRowId());
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbEntityVariableTest.java
Patch:
@@ -98,6 +98,7 @@ public void testInvalidSpace() {
         recon.identifierSpace = "http://my.own.wikiba.se/";
         recon.candidates = Collections.singletonList(new ReconCandidate("Q123", "some item", null, 100.0));
         recon.judgment = Recon.Judgment.Matched;
+        recon.match = recon.candidates.get(0);
         Cell cell = new Cell("some value", recon);
         isSkipped(cell);
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbExpressionTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.IOException;
 import java.io.Serializable;
+import java.util.Collections;
 
 import okhttp3.mockwebserver.Dispatcher;
 import okhttp3.mockwebserver.MockResponse;
@@ -81,7 +82,7 @@ public void createProject()
                 "column A,column B,column C,column D,column E\n" + "value A,value B,value C,value D,value E");
         warningStore = new QAWarningStore();
         row = project.rows.get(0);
-        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", server.url("/w/api.php").toString(), 0, row, project.columnModel, warningStore);
+        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", Collections.emptyMap(), server.url("/w/api.php").toString(), 0, row, project.columnModel, warningStore);
     }
 
     /**
@@ -133,7 +134,7 @@ public void setRow(Object... rowValues) {
                 row.cells.add(cell);
             }
         }
-        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", server.url("/w/api.php").toString(), 0, row, project.columnModel, warningStore);
+        ctxt = new ExpressionContext("http://www.wikidata.org/entity/", null, server.url("/w/api.php").toString(), 0, row, project.columnModel, warningStore);
     }
 
     /**

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -138,6 +138,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.xml.ParseXml;
 import com.google.refine.expr.functions.xml.SelectXml;
 import com.google.refine.expr.functions.xml.WholeText;
+import com.google.refine.expr.functions.xml.ScriptText;
 import com.google.refine.expr.functions.xml.XmlAttr;
 import com.google.refine.expr.functions.xml.XmlText;
 import com.google.refine.expr.functions.xml.Parent;
@@ -260,6 +261,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("ownText", new OwnText());
         registerFunction("wholeText", new WholeText());
         registerFunction("parent", new Parent());
+        registerFunction("scriptText", new ScriptText());
 
         registerFunction("indexOf", new IndexOf());
         registerFunction("lastIndexOf", new LastIndexOf());

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -140,6 +140,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.xml.WholeText;
 import com.google.refine.expr.functions.xml.XmlAttr;
 import com.google.refine.expr.functions.xml.XmlText;
+import com.google.refine.expr.functions.xml.Parent;
 import com.google.refine.grel.controls.Filter;
 import com.google.refine.grel.controls.ForEach;
 import com.google.refine.grel.controls.ForEachIndex;
@@ -258,6 +259,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("innerHtml", new InnerHtml());
         registerFunction("ownText", new OwnText());
         registerFunction("wholeText", new WholeText());
+        registerFunction("parent", new Parent());
 
         registerFunction("indexOf", new IndexOf());
         registerFunction("lastIndexOf", new LastIndexOf());

File: main/tests/server/src/com/google/refine/expr/functions/html/ParseHtmlTests.java
Patch:
@@ -58,6 +58,7 @@ public class ParseHtmlTests extends RefineTest  {
                                  " <br>Dev : REMASTER !!!!\n" +
                                  " <br>" +
                                  "</div>" +
+                                 "<div><p type=\"child\">childtext</p></div>" +
                         "    </body>\n" +
                         "</html>";
     
@@ -79,6 +80,7 @@ public void testParseHtml() {
         Assert.assertEquals(invoke("ownText",Jsoup.parse(h).select("p").first()),"para1");
         Assert.assertTrue(invoke("wholeText",Jsoup.parse(h).select("div.commentthread_comment_text").first()) instanceof String);
         Assert.assertEquals(invoke("wholeText",Jsoup.parse(h).select("div.commentthread_comment_text").first()),"\n  Me : Make a 2nd game ?\n Dev : Nah man , too much work.\n Me : So what's it gonna be ?\n Dev : REMASTER !!!!\n ");
+        Assert.assertEquals(invoke("parent",Jsoup.parse(h).select("p[type*=child]").first()).toString(),"<div>\n <p type=\"child\">childtext</p>\n</div>");
     }
 }
 

File: main/tests/server/src/com/google/refine/grel/FunctionTests.java
Patch:
@@ -109,7 +109,7 @@ void testZeroArgs() {
         Set<String> valid0args = new HashSet<>(Arrays.asList("now")); // valid 0-arg returns datetype
         // Not sure which, if any, of these are intended, but fixing them may break existing scripts
         Set<String> returnsNull = new HashSet<>(Arrays.asList("chomp", "contains", "escape", "unescape", "exp",
-                "fingerprint", "get", "jsonize", "parseJson", "partition", "pow", "rpartition",
+                "fingerprint", "get", "parseJson", "partition", "pow", "rpartition",
                 "slice", "substring", // synonyms for Slice
                 "unicode", "unicodeType"
                 ));

File: main/src/com/google/refine/grel/Parser.java
Patch:
@@ -248,7 +248,9 @@ protected Evaluable parseFactor() throws ParsingException {
         }
 
         while (_token != null) {
-            if (_token.type == TokenType.Operator && _token.text.equals(".")) {
+        	if (_token.type == TokenType.Error) {
+        		throw makeException("Unknown function or control named" + _token.text);
+        	} else if (_token.type == TokenType.Operator && _token.text.equals(".")) {
                 next(false); // swallow .
 
                 if (_token == null || _token.type != TokenType.Identifier) {

File: main/tests/server/src/com/google/refine/grel/GrelTests.java
Patch:
@@ -82,6 +82,9 @@ public void testInvalidSyntax() {
                 "",
                 "1-1-",
                 "2**3",
+                "value{datePart()",
+                "value}datePart()",
+                "value.datePart{}",
 //                "2^3" // TODO: Should this generate an error?
                 };
         for (String test : tests) {

File: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java
Patch:
@@ -39,7 +39,7 @@
 import org.openrefine.wikidata.editing.EditBatchProcessor;
 import org.openrefine.wikidata.editing.NewItemLibrary;
 import org.openrefine.wikidata.schema.WikibaseSchema;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.wikidata.wdtk.util.WebResourceFetcherImpl;
@@ -231,7 +231,7 @@ public void run() {
             }
 
             // Evaluate the schema
-            List<ItemUpdate> itemDocuments = _schema.evaluate(_project, _engine);
+            List<TermedStatementEntityUpdate> itemDocuments = _schema.evaluate(_project, _engine);
 
             // Prepare the edits
             NewItemLibrary newItemLibrary = new NewItemLibrary();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
@@ -56,7 +56,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         Map<PropertyIdValue, Set<Value>> propertyIdValueValueMap = new HashMap<>();
         for (Statement statement : update.getAddedStatements()){
             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DescriptionScrutinizer.java
Patch:
@@ -1,6 +1,6 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 
 import java.util.Set;
@@ -11,7 +11,7 @@
 public abstract class DescriptionScrutinizer extends EditScrutinizer {
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         Set<MonolingualTextValue> descriptions = update.getDescriptions();
         descriptions.addAll(update.getDescriptionsIfNew()); // merge
         for (MonolingualTextValue description : descriptions) {
@@ -28,6 +28,6 @@ public void scrutinize(ItemUpdate update) {
         }
     }
 
-    public abstract void scrutinize(ItemUpdate update, String descText, String lang);
+    public abstract void scrutinize(TermedStatementEntityUpdate update, String descText, String lang);
 
 }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.*;
 
 import java.util.HashMap;
@@ -50,7 +50,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();
         for (Statement statement : update.getAddedStatements()){
             Snak mainSnak = statement.getClaim().getMainSnak();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java
Patch:
@@ -28,7 +28,7 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.openrefine.wikidata.qa.QAWarning.Severity;
 import org.openrefine.wikidata.qa.QAWarningStore;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
@@ -89,7 +89,7 @@ public void batchIsBeginning() {
      * @param edit:
      *            the list of ItemUpdates to scrutinize
      */
-    public abstract void scrutinize(ItemUpdate edit);
+    public abstract void scrutinize(TermedStatementEntityUpdate edit);
     
     /**
      * Method called once the edit batch has been read entirely

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ItemRequiresScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
@@ -61,7 +61,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         Map<PropertyIdValue, Set<Value>> propertyIdValueValueMap = new HashMap<>();
         for (Statement statement : update.getAddedStatements()) {
             Snak mainSnak = statement.getClaim().getMainSnak();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
@@ -22,7 +22,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         Map<PropertyIdValue, Integer> propertyCount = new HashMap<>();
 
         for (Statement statement : update.getAddedStatements()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NewItemScrutinizer.java
Patch:
@@ -24,7 +24,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.StatementGroup;
 
 /**
@@ -46,7 +46,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         if (update.isNew()) {
             info(newItemType);
 

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NoEditsMadeScrutinizer.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 
 public class NoEditsMadeScrutinizer extends EditScrutinizer {
 
@@ -42,7 +42,7 @@ public void batchIsBeginning() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate edit) {
+    public void scrutinize(TermedStatementEntityUpdate edit) {
         nonNullUpdateSeen = true;
     }
     

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java
Patch:
@@ -24,7 +24,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
@@ -56,7 +56,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         Set<PropertyIdValue> seenSingleProperties = new HashSet<>();
 
         for (Statement statement : update.getAddedStatements()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/StatementScrutinizer.java
Patch:
@@ -23,14 +23,14 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 public abstract class StatementScrutinizer extends EditScrutinizer {
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         EntityIdValue currentEntityId = update.getItemId();
         for (Statement statement : update.getAddedStatements()) {
             scrutinize(statement, currentEntityId, true);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UnsourcedScrutinizer.java
Patch:
@@ -24,7 +24,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Reference;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
@@ -44,7 +44,7 @@ public class UnsourcedScrutinizer extends EditScrutinizer {
     public static final String constraintItemType = "no-references-provided";
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         for (Statement statement : update.getAddedStatements()) {
             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();
             List<Statement> constraintDefinitions = _fetcher.getConstraintsByType(pid, citationNeededConstraintQid);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/UseAsQualifierScrutinizer.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
@@ -55,7 +55,7 @@ public boolean prepareDependencies() {
     }
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         for (Statement statement : update.getAddedStatements()) {
             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();
             Map<PropertyIdValue, List<Value>> qualifiersMap = new HashMap<>();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizer.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
@@ -39,7 +39,7 @@
 public abstract class ValueScrutinizer extends SnakScrutinizer {
 
     @Override
-    public void scrutinize(ItemUpdate update) {
+    public void scrutinize(TermedStatementEntityUpdate update) {
         super.scrutinize(update);
 
         for (MonolingualTextValue label : update.getLabels()) {

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemDocumentExpr.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
@@ -47,7 +47,7 @@
  */
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)
-public class WbItemDocumentExpr implements WbExpression<ItemUpdate> {
+public class WbItemDocumentExpr implements WbExpression<TermedStatementEntityUpdate> {
 
     private WbExpression<? extends ItemIdValue> subject;
     private List<WbNameDescExpr> nameDescs;
@@ -70,7 +70,7 @@ public WbItemDocumentExpr(@JsonProperty("subject") WbExpression<? extends ItemId
     }
 
     @Override
-    public ItemUpdate evaluate(ExpressionContext ctxt)
+    public TermedStatementEntityUpdate evaluate(ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
         ItemIdValue subjectId = getSubject().evaluate(ctxt);
         ItemUpdateBuilder update = new ItemUpdateBuilder(subjectId);

File: extensions/wikidata/src/org/openrefine/wikidata/updates/scheduler/UpdateScheduler.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 
 /**
  * A scheduling strategy for item updates. Given a list of initial updates, the
@@ -48,6 +48,6 @@ public interface UpdateScheduler {
      * @throws ImpossibleSchedulingException
      *             when the scheduler cannot cope with a particular edit plan.
      */
-    public List<ItemUpdate> schedule(List<ItemUpdate> updates)
+    public List<TermedStatementEntityUpdate> schedule(List<TermedStatementEntityUpdate> updates)
             throws ImpossibleSchedulingException;
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java
Patch:
@@ -39,7 +39,7 @@
 
 import org.openrefine.wikidata.testing.TestingData;
 import org.openrefine.wikidata.testing.WikidataRefineTest;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -74,7 +74,7 @@ public void setUp() {
     @Test
     public void testNewItem()
             throws InterruptedException, MediaWikiApiErrorException, IOException {
-        List<ItemUpdate> batch = new ArrayList<>();
+        List<TermedStatementEntityUpdate> batch = new ArrayList<>();
         batch.add(new ItemUpdateBuilder(TestingData.existingId)
                 .addAlias(Datamodel.makeMonolingualTextValue("my new alias", "en"))
                 .addStatement(TestingData.generateStatement(TestingData.existingId, TestingData.newIdA)).build());
@@ -122,7 +122,7 @@ public void testMultipleBatches()
         }
         List<ItemIdValue> qids = ids.stream().map(e -> Datamodel.makeWikidataItemIdValue(e))
                 .collect(Collectors.toList());
-        List<ItemUpdate> batch = qids.stream()
+        List<TermedStatementEntityUpdate> batch = qids.stream()
                 .map(qid -> new ItemUpdateBuilder(qid).addDescription(description, true).build())
                 .collect(Collectors.toList());
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
@@ -54,7 +54,7 @@ public void testTrigger() {
         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);
         Statement statement1 = new StatementImpl("P569", value1,idA);
         Statement statement2 = new StatementImpl("P570", value2,idA);
-        ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
+        TermedStatementEntityUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
 
         Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);
         Snak minValueQualifier = Datamodel.makeValueSnak(minimumValuePID, minValue);
@@ -79,7 +79,7 @@ public void testNoIssue() {
         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);
         Statement statement1 = new StatementImpl("P569", value1,idA);
         Statement statement2 = new StatementImpl("P570", value2,idA);
-        ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
+        TermedStatementEntityUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
 
         Snak propertyQualifier = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);
         Snak minValueQualifier = Datamodel.makeValueSnak(minimumValuePID, minValue);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
@@ -65,7 +65,7 @@ public void testTrigger() {
         Statement statement1 = new StatementImpl("P163", mainSnak, idA);
         Statement statement2 = new StatementImpl("P163", mainSnak, idA);
 
-        ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
 
         List<SnakGroup> constraintQualifiers = new ArrayList<>();
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, constraintQualifiers);
@@ -86,7 +86,7 @@ public void testNoIssue() {
         Statement statement1 = new StatementImpl("P163", snak1, idA);
         Statement statement2 = new StatementImpl("P163", snak2, idA);
 
-        ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
 
         List<SnakGroup> constraintQualifiers = new ArrayList<>();
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, constraintQualifiers);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
@@ -49,7 +49,7 @@ public void testAllowed() {
         ValueSnak mainValueSnak = Datamodel.makeValueSnak(propertyIdValue, propertyValue);
         Statement statement = new StatementImpl("P2302", mainValueSnak, idA);
 
-        ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(statement).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(idA).addStatement(statement).build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(itemParameterPID, allowedValue);
         List<Snak> qualifierSnakList = Collections.singletonList(qualifierSnak);
@@ -72,7 +72,7 @@ public void testDisallowed() {
         ValueSnak mainValueSnak = Datamodel.makeValueSnak(propertyIdValue, propertyValue);
         Statement statement = new StatementImpl("P2302", mainValueSnak, idA);
 
-        ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(statement).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(idA).addStatement(statement).build();
 
         Snak qualifierSnak = Datamodel.makeValueSnak(itemParameterPID, itemValue);
         List<Snak> qualifierSnakList = Collections.singletonList(qualifierSnak);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.openrefine.wikidata.qa.QAWarningStore;
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.testng.annotations.BeforeMethod;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.Claim;
@@ -82,9 +82,9 @@ public void setUp() {
         scrutinizer.prepareDependencies();
     }
 
-    public void scrutinize(ItemUpdate... updates) {
+    public void scrutinize(TermedStatementEntityUpdate... updates) {
         scrutinizer.batchIsBeginning();
-        for(ItemUpdate update : Arrays.asList(updates)) {
+        for(TermedStatementEntityUpdate update : Arrays.asList(updates)) {
             if(!update.isNull()) {
                 scrutinizer.scrutinize(update);
             }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
@@ -64,7 +64,7 @@ public void testTrigger() {
         Snak snak2 = Datamodel.makeValueSnak(propertyIdValue, value2);
         Statement statement1 = new StatementImpl("P21", snak1, idA);
         Statement statement2 = new StatementImpl("P21", snak2, idA);
-        ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();
 
         List<Statement> statementList = constraintParameterStatementList(entityIdValue, new ArrayList<>());
 
@@ -80,7 +80,7 @@ public void testNoIssue() {
         ItemIdValue idA = TestingData.existingId;
         Snak snak1 = Datamodel.makeValueSnak(propertyIdValue, value1);
         Statement statement1 = new StatementImpl("P21", snak1, idA);
-        ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).build();
+        TermedStatementEntityUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).build();
 
         List<Statement> statementList = constraintParameterStatementList(entityIdValue, new ArrayList<>());
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/StatementScrutinizerTest.java
Patch:
@@ -23,15 +23,15 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 public abstract class StatementScrutinizerTest extends ScrutinizerTest {
 
     public void scrutinize(Statement statement) {
-        ItemUpdate update = new ItemUpdateBuilder((ItemIdValue) statement.getClaim().getSubject())
+    	TermedStatementEntityUpdate update = new ItemUpdateBuilder((ItemIdValue) statement.getClaim().getSubject())
                 .addStatement(statement).build();
         scrutinize(update);
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/UnsourcedScrutinizerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.testing.TestingData;
-import org.openrefine.wikidata.updates.ItemUpdate;
+import org.openrefine.wikidata.updates.TermedStatementEntityUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.Test;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
@@ -72,7 +72,7 @@ public void testTrigger() {
         ItemIdValue id = TestingData.existingId;
         Snak mainSnak = Datamodel.makeSomeValueSnak(propertyIdValue);
         Statement statement = new StatementImpl("P172", mainSnak, id);
-        ItemUpdate update = new ItemUpdateBuilder(id).addStatement(statement).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(id).addStatement(statement).build();
 
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, Collections.emptyList());
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);
@@ -90,7 +90,7 @@ public void testNoIssue() {
         List<SnakGroup> constraintQualifiers = makeSnakGroupList(referenceSnak);
         List<Statement> itemStatementList = constraintParameterStatementList(entityIdValue, constraintQualifiers);
         Statement statement = itemStatementList.get(0);
-        ItemUpdate update = new ItemUpdateBuilder(id).addStatement(statement).build();
+        TermedStatementEntityUpdate update = new ItemUpdateBuilder(id).addStatement(statement).build();
 
         List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, Collections.emptyList());
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);

File: main/src/com/google/refine/expr/functions/html/InnerHtml.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.jsoup.nodes.Element;
 
 import com.google.refine.expr.EvalError;
+import com.google.refine.expr.functions.Type;
 import com.google.refine.expr.functions.xml.InnerXml;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
@@ -51,10 +52,10 @@ public Object call(Properties bindings, Object[] args) {
             if (o1 != null && o1 instanceof Element) {
                 return new InnerXml().call(bindings, args, "html");
             }else{
-                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " failed as the first parameter is not an HTML Element.  Please first use parseHtml(string) and select(query) prior to using this function");
+                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + "() cannot work with this '" + new Type().call(bindings, args) + "'. The first parameter is not an HTML Element.  Please first use parseHtml(string) and select(query) prior to using this function");
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a single String as an argument");
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + "() cannot work with this '" + new Type().call(bindings, args) + "' and expects a single String as an argument");
     }
 
 

File: main/src/com/google/refine/expr/functions/html/ParseHtml.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 
 import com.google.refine.expr.EvalError;
+import com.google.refine.expr.functions.Type;
 import com.google.refine.expr.functions.xml.ParseXml;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;

File: main/src/com/google/refine/expr/functions/xml/ParseXml.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.google.refine.expr.functions.Type;
 import org.jsoup.Jsoup;
 import org.jsoup.parser.Parser;
 

File: main/src/com/google/refine/expr/functions/xml/WholeText.java
Patch:
@@ -34,6 +34,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 package com.google.refine.expr.functions.xml;
 
 import java.util.Properties;
+import com.google.refine.expr.functions.Type;
 
 import org.jsoup.nodes.Element;
 
@@ -52,13 +53,12 @@ public Object call(Properties bindings, Object[] args) {
                 return e1.wholeText();
 
             }else{
-                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " failed as the first parameter is not an XML or HTML Element.  Please first use parseXml() or parseHtml() and select(query) prior to using this function");
+                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + "() cannot work with this '" + new Type().call(bindings, args) + "' and failed as the first parameter is not an XML or HTML Element.  Please first use parseXml() or parseHtml() and select(query) prior to using this function");
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a single XML or HTML element as an argument");
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + "() cannot work with this '" + new Type().call(bindings, args) + "' and expects a single XML or HTML element as an argument");
     }
 
-
     @Override
     public String getDescription() {
         return "Selects the (unencoded) text of an element and its children, including any new lines and spaces, and returns a string of unencoded, un-normalized text. Use it in conjunction with parseHtml() and select() to provide an element.";

File: main/src/com/google/refine/expr/functions/xml/XmlText.java
Patch:
@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import org.jsoup.nodes.Element;
 
+import com.google.refine.expr.functions.Type;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
@@ -52,10 +53,10 @@ public Object call(Properties bindings, Object[] args) {
                 return e1.text();
 
             }else{
-                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " failed as the first parameter is not an XML or HTML Element.  Please first use parseXml() or parseHtml() and select(query) prior to using this function");
+                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + "() cannot work with this '" + new Type().call(bindings, args) + "' and failed as the first parameter is not an XML or HTML Element.  Please first use parseXml() or parseHtml() and select(query) prior to using this function");
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a single XML or HTML element as an argument");
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + "() cannot work with this '" + new Type().call(bindings, args) + "' and expects a single XML or HTML element as an argument");
     }
 
 

File: extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java
Patch:
@@ -239,7 +239,7 @@ protected void prepareNewBatch()
                 Thread.sleep(sleepTime);
             }
         }
-        if (currentDocs == null) {
+        if (currentDocs == null && !qidsToFetch.isEmpty()) {
             logger.warn("Giving up on fetching documents to edit. Skipping "+remainingEdits()+" remaining edits.");
             globalCursor = scheduled.size();
         }

File: extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.api.client.http.HttpTransport;
 import com.google.api.client.http.javanet.NetHttpTransport;
 import com.google.api.client.json.JsonFactory;
-import com.google.api.client.json.jackson2.JacksonFactory;
+import com.google.api.client.json.gson.GsonFactory;
 import com.google.api.services.drive.Drive;
 import com.google.api.services.drive.DriveScopes;
 import com.google.api.services.sheets.v4.Sheets;
@@ -46,7 +46,7 @@ abstract public class GoogleAPIExtension {
     protected static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
 
     /** Global instance of the JSON factory. */
-    protected static final JsonFactory JSON_FACTORY = new JacksonFactory();
+    protected static final JsonFactory JSON_FACTORY = new GsonFactory();
 
     private static final String[] SCOPES = {DriveScopes.DRIVE, SheetsScopes.SPREADSHEETS};
     

File: main/tests/server/src/com/google/refine/expr/functions/xml/ParseXmlTests.java
Patch:
@@ -72,7 +72,7 @@ public void testParseXml() {
         Assert.assertTrue(invoke("parseXml") instanceof EvalError);
         Assert.assertTrue(invoke("parseXml","x") instanceof org.jsoup.nodes.Document);
         Assert.assertTrue(invoke("select",Jsoup.parse(x,"",Parser.xmlParser()),"foaf|Person") instanceof org.jsoup.select.Elements);
-        Assert.assertEquals(invoke("innerXml",Jsoup.parse(x,"",Parser.xmlParser()).select("foaf|Person").first()),"<foaf:name>\n John Doe\n</foaf:name>\n<head>\n head1\n</head>\n<head>\n head2\n</head>\n<BODY>\n body1\n</BODY>\n<foaf:homepage rdf:resource=\"http://www.example.com\" />");
+        Assert.assertEquals(invoke("innerXml",Jsoup.parse(x,"",Parser.xmlParser()).select("foaf|Person").first()),"<foaf:name>John Doe</foaf:name>\n<head>head1</head>\n<head>head2</head>\n<BODY>body1</BODY>\n<foaf:homepage rdf:resource=\"http://www.example.com\" />");
         Assert.assertEquals(invoke("xmlAttr",Jsoup.parse(x,"",Parser.xmlParser()).select("foaf|homepage").first(),"rdf:resource"),"http://www.example.com");
         Assert.assertEquals(invoke("ownText",Jsoup.parse(x,"",Parser.xmlParser()).select("BODY").first()),"body1");
         Assert.assertEquals(invoke("xmlText",Jsoup.parse(x,"",Parser.xmlParser()).select("foaf|Person").first()),"John Doe head1 head2 body1");

File: extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java
Patch:
@@ -223,7 +223,7 @@ protected void prepareNewBatch()
         int backoff = 2;
         int sleepTime = 5000;
         // TODO: remove currentDocs.isEmpty() once https://github.com/Wikidata/Wikidata-Toolkit/issues/402 is solved
-        while ((currentDocs == null || currentDocs.isEmpty()) && retries > 0) {
+        while ((currentDocs == null || currentDocs.isEmpty()) && retries > 0 && !qidsToFetch.isEmpty()) {
             try {
                 currentDocs = fetcher.getEntityDocuments(qidsToFetch);
             } catch (MediaWikiApiErrorException e) {
@@ -234,7 +234,7 @@ protected void prepareNewBatch()
 			}
             retries--;
             sleepTime *= backoff;
-            if ((currentDocs == null || currentDocs.isEmpty()) && retries > 0) {
+            if ((currentDocs == null || currentDocs.isEmpty()) && retries > 0 && !qidsToFetch.isEmpty()) {
                 logger.warn("Retrying in " + sleepTime + " ms");
                 Thread.sleep(sleepTime);
             }

File: main/src/com/google/refine/model/Recon.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.Random;
 
 import com.fasterxml.jackson.annotation.JsonFilter;
 import com.fasterxml.jackson.annotation.JsonIgnore;
@@ -61,6 +62,7 @@ public class Recon implements HasFields {
     
     private static final String WIKIDATA_SCHEMA_SPACE = "http://www.wikidata.org/prop/direct/";
     private static final String WIKIDATA_IDENTIFIER_SPACE = "http://www.wikidata.org/entity/";
+    private static final Random idGenerator = new Random();
 
     static public enum Judgment {
         @JsonProperty("none")
@@ -151,7 +153,7 @@ static public Recon makeWikidataRecon(long judgmentHistoryEntry) {
     }
     
     public Recon(long judgmentHistoryEntry, String identifierSpace, String schemaSpace) {
-        id = System.currentTimeMillis() * 1000000 + Math.round(Math.random() * 1000000);
+        id = idGenerator.nextLong();
         this.judgmentHistoryEntry = judgmentHistoryEntry;
         this.identifierSpace = identifierSpace;
         this.schemaSpace = schemaSpace;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/FormatScrutinizer.java
Patch:
@@ -33,6 +33,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -118,8 +119,8 @@ protected Set<Pattern> getPattern(PropertyIdValue pid) {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
-        if (snak.getValue() instanceof StringValue) {
-            String value = ((StringValue) snak.getValue()).getString();
+        if (snak instanceof ValueSnak && ((ValueSnak)snak).getValue() instanceof StringValue) {
+            String value = ((StringValue) ((ValueSnak)snak).getValue()).getString();
             PropertyIdValue pid = snak.getPropertyId();
             Set<Pattern> patterns = getPattern(pid);
             for (Pattern pattern : patterns) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QuantityScrutinizer.java
Patch:
@@ -9,6 +9,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 import java.util.List;
 import java.util.Set;
@@ -58,9 +59,9 @@ class AllowedUnitsConstraint {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
-        if (snak.getValue() instanceof QuantityValue && added) {
+        if (snak instanceof ValueSnak && ((ValueSnak)snak).getValue() instanceof QuantityValue && added) {
             PropertyIdValue pid = snak.getPropertyId();
-            QuantityValue value = (QuantityValue)snak.getValue();
+            QuantityValue value = (QuantityValue)((ValueSnak)snak).getValue();
 
             if(!_fetcher.getConstraintsByType(pid, noBoundsConstraintQid).isEmpty() && (value.getUpperBound() != null || value.getLowerBound() != null)) {
                 QAWarning issue = new QAWarning(boundsDisallowedType, pid.getId(), QAWarning.Severity.IMPORTANT, 1);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SelfReferentialScrutinizer.java
Patch:
@@ -26,6 +26,7 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that checks for self-referential statements. These statements
@@ -40,7 +41,7 @@ public class SelfReferentialScrutinizer extends SnakScrutinizer {
 
     @Override
     public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
-        if (entityId.equals(snak.getValue())) {
+        if (snak instanceof ValueSnak && entityId.equals(((ValueSnak)snak).getValue())) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
             issue.setProperty("example_entity", entityId);
             addIssue(issue);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbQuantityExpr.java
Patch:
@@ -92,7 +92,7 @@ public QuantityValue evaluate(ExpressionContext ctxt)
 
         if (getUnitExpr() != null) {
             ItemIdValue unit = getUnitExpr().evaluate(ctxt);
-            return Datamodel.makeQuantityValue(parsedAmount, lowerBound, upperBound, unit.getIri());
+            return Datamodel.makeQuantityValue(parsedAmount, lowerBound, upperBound, unit);
         }
 
         return Datamodel.makeQuantityValue(parsedAmount, lowerBound, upperBound);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/QuantityScrutinizerTest.java
Patch:
@@ -45,7 +45,7 @@ public class QuantityScrutinizerTest extends ValueScrutinizerTest{
             new BigDecimal("1.545"));
     
     private QuantityValue wrongUnitValue = Datamodel.makeQuantityValue(
-            new BigDecimal("1.234"), "Q346721");
+            new BigDecimal("1.234"), Datamodel.makeWikidataItemIdValue("Q346721"));
     
     private QuantityValue goodUnitValue = Datamodel.makeQuantityValue(
             new BigDecimal("1.234"), (ItemIdValue) allowedUnit);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java
Patch:
@@ -44,13 +44,13 @@ public class WbQuantityExprTest extends WbExpressionTest<QuantityValue> {
     public void testWithoutUnit()
             throws SkipSchemaExpressionException {
         setRow("4.00");
-        evaluatesTo(Datamodel.makeQuantityValue(new BigDecimal("4.00"), null, null, "1"), exprWithoutUnit);
+        evaluatesTo(Datamodel.makeQuantityValue(new BigDecimal("4.00")), exprWithoutUnit);
     }
     
     @Test
     public void testOverflow() {
     	setRow(14341937500d);
-    	evaluatesTo(Datamodel.makeQuantityValue(new BigDecimal("14341937500"), null, null, "1"), exprWithoutUnit);
+    	evaluatesTo(Datamodel.makeQuantityValue(new BigDecimal("14341937500")), exprWithoutUnit);
     }
 
     @Test
@@ -64,7 +64,7 @@ public void testWithUnit()
             throws SkipSchemaExpressionException {
         setRow("56.094", recon("Q42"));
         evaluatesTo(
-                Datamodel.makeQuantityValue(new BigDecimal("56.094"), null, null, "http://www.wikidata.org/entity/Q42"),
+                Datamodel.makeQuantityValue(new BigDecimal("56.094"), Datamodel.makeWikidataItemIdValue("Q42")),
                 exprWithUnit);
     }
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/PointerExtractorTest.java
Patch:
@@ -73,7 +73,7 @@ public void testExtractDatavalues() {
         assertEmpty(Datamodel.makeMonolingualTextValue("srtu", "en"));
         assertEmpty(Datamodel.makeWikidataPropertyIdValue("P78"));
         assertEmpty(Datamodel.makeQuantityValue(new BigDecimal("898")));
-        assertEmpty(Datamodel.makeQuantityValue(new BigDecimal("7.87"), "http://www.wikidata.org/entity/Q34"));
+        assertEmpty(Datamodel.makeQuantityValue(new BigDecimal("7.87"), Datamodel.makeWikidataItemIdValue("Q34")));
         assertEmpty(Datamodel.makeTimeValue(1898, (byte) 2, (byte) 3, TimeValue.CM_GREGORIAN_PRO));
         assertEmpty(mock(UnsupportedValue.class));
     }

File: extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java
Patch:
@@ -163,7 +163,7 @@ static private String getParamValue(URL url, String key) {
     public static Sheets getSheetsService(String token) throws IOException {
         final Credential credential;
         if (token != null) {
-            credential =  new Credential.Builder(null).build().setAccessToken(token);
+            credential =  new Credential.Builder(BearerToken.authorizationHeaderAccessMethod()).build().setAccessToken(token);
         } else {
             credential = null;
         }

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -224,7 +224,7 @@ protected static int addFilenameColumn(Project project, boolean archiveColumnAdd
         return addColumn(project, fileNameColumnName, columnId);
     }
 
-    private static int addArchiveColumn(Project project) {
+    protected static int addArchiveColumn(Project project) {
         String columnName = "Archive"; // TODO: Localize?
         return addColumn(project, columnName, 0);
     }

File: main/src/com/google/refine/importers/OdsImporter.java
Patch:
@@ -40,9 +40,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.InputStream;
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.TimeZone;
 
 import org.odftoolkit.odfdom.doc.OdfDocument;
 import org.odftoolkit.odfdom.doc.table.OdfTable;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbDateVariableTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class WbDateVariableTest extends WbVariableTest<TimeValue> {
 
-    private TimeValue year = Datamodel.makeTimeValue(2018, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
+    private TimeValue year = Datamodel.makeTimeValue(2018, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
             0, 0, 0, TimeValue.CM_GREGORIAN_PRO);
     private TimeValue day = Datamodel.makeTimeValue(2018, (byte) 2, (byte) 27, (byte) 0, (byte) 0, (byte) 0, (byte) 11,
             0, 0, 0,  TimeValue.CM_GREGORIAN_PRO);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -58,9 +58,9 @@ public class WikibaseSchemaTest extends WikidataRefineTest {
 
     private ItemIdValue qid1 = Datamodel.makeWikidataItemIdValue("Q1377");
     private ItemIdValue qid2 = Datamodel.makeWikidataItemIdValue("Q865528");
-    private TimeValue date1 = Datamodel.makeTimeValue(1919, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
+    private TimeValue date1 = Datamodel.makeTimeValue(1919, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
             (byte) 0, (byte) 0, (byte) 0, TimeValue.CM_GREGORIAN_PRO);
-    private TimeValue date2 = Datamodel.makeTimeValue(1965, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
+    private TimeValue date2 = Datamodel.makeTimeValue(1965, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
             (byte) 0, (byte) 0, (byte) 0, TimeValue.CM_GREGORIAN_PRO);
     private StringValue url = Datamodel.makeStringValue("http://www.ljubljana-slovenia.com/university-ljubljana");
     private PropertyIdValue inceptionPid = Datamodel.makeWikidataPropertyIdValue("P571");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java
Patch:
@@ -52,10 +52,10 @@ public class TestingData {
     public static final String inceptionWithNewCsv = "subject,inception,reference\n"
             + "Q1377,1919,http://www.ljubljana-slovenia.com/university-ljubljana\n" + "Q865528,1965,\n"
             + "new uni,2016,http://new-uni.com/";
-    public static final String inceptionWithNewQS = "Q1377\tP571\t+1919-01-01T00:00:00Z/9"
+    public static final String inceptionWithNewQS = "Q1377\tP571\t+1919-00-00T00:00:00Z/9"
             + "\tS854\t\"http://www.ljubljana-slovenia.com/university-ljubljana\""
-            + "\tS813\t+2018-02-28T00:00:00Z/11\n" + "Q865528\tP571\t+1965-01-01T00:00:00Z/9"
-            + "\tS813\t+2018-02-28T00:00:00Z/11\n" + "CREATE\n" + "LAST\tP571\t+2016-01-01T00:00:00Z/9"
+            + "\tS813\t+2018-02-28T00:00:00Z/11\n" + "Q865528\tP571\t+1965-00-00T00:00:00Z/9"
+            + "\tS813\t+2018-02-28T00:00:00Z/11\n" + "CREATE\n" + "LAST\tP571\t+2016-00-00T00:00:00Z/9"
             + "\tS854\t\"http://new-uni.com/\"" + "\tS813\t+2018-02-28T00:00:00Z/11\n";
 
     public static ItemIdValue newIdA = makeNewItemIdValue(1234L, "new item A");

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PerformWikibaseEditsCommand.java
Patch:
@@ -40,7 +40,8 @@ protected AbstractOperation createOperation(Project project, HttpServletRequest
         String summary = request.getParameter("summary");
         String maxlagStr = request.getParameter("maxlag");
         int maxlag = maxlagStr == null ? 5 : Integer.parseInt(maxlagStr);
-        return new PerformWikibaseEditsOperation(engineConfig, summary, maxlag);
+        String editGroupsUrlSchema = request.getParameter("editGroupsUrlSchema");
+        return new PerformWikibaseEditsOperation(engineConfig, summary, maxlag, editGroupsUrlSchema);
     }
 
 }

File: extensions/wikidata/src/org/openrefine/wikidata/manifests/Manifest.java
Patch:
@@ -20,4 +20,5 @@ public interface Manifest {
 
     String getConstraintsRelatedId(String name);
 
+    String getEditGroupsUrlSchema();
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestV1Test.java
Patch:
@@ -23,6 +23,7 @@ public void testGetters() throws IOException, ManifestException {
         assertEquals("https://wdreconcile.toolforge.org/${lang}/api", manifest.getReconServiceEndpoint());
         assertEquals("P2302", manifest.getConstraintsRelatedId("property_constraint_pid"));
         assertEquals("Q19474404", manifest.getConstraintsRelatedId("single_value_constraint_qid"));
+        assertEquals("([[:toollabs:editgroups/b/OR/${batch_id}|details]])", manifest.getEditGroupsUrlSchema());
     }
 
     @Test

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java
Patch:
@@ -58,7 +58,7 @@ public String getJson()
     
     @Test(expectedExceptions=IllegalArgumentException.class)
     public void testConstructor() {
-        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "", 5);
+        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "", 5, "");
     }
 
     @Test

File: main/tests/server/src/com/google/refine/model/recon/StandardReconConfigTests.java
Patch:
@@ -91,7 +91,7 @@ public double wordDistanceTest(String s1, String s2) {
             return wordDistance(s1, s2);
         }
         
-        protected Recon createReconServiceResults(String text, ArrayNode resultsList, long historyEntryID) throws IOException {
+        protected Recon createReconServiceResults(String text, ArrayNode resultsList, long historyEntryID) {
         	return super.createReconServiceResults(text, resultsList, historyEntryID);
         }
     }

File: extensions/database/tests/src/com/google/refine/extension/database/DatabaseTestConfig.java
Patch:
@@ -21,7 +21,7 @@ public class DatabaseTestConfig extends DBExtensionTests {
     @BeforeSuite
     @Parameters({ "mySqlDbName", "mySqlDbHost", "mySqlDbPort", "mySqlDbUser", "mySqlDbPassword", "mySqlTestTable",
                   "pgSqlDbName", "pgSqlDbHost", "pgSqlDbPort", "pgSqlDbUser", "pgSqlDbPassword", "pgSqlTestTable",
-                  "mariadbDbName", "mariadbDbHost", "mariadbDbPort", "mariadbyDbUser", "mariadbDbPassword", "mariadbTestTable",
+                  "mariadbDbName", "mariadbDbHost", "mariadbDbPort", "mariadbDbUser", "mariadbDbPassword", "mariadbTestTable",
                   "sqliteDbName", "sqliteTestTable"})
     public void beforeSuite(
             @Optional(DEFAULT_MYSQL_DB_NAME)   String mySqlDbName,     @Optional(DEFAULT_MYSQL_HOST)  String mySqlDbHost, 
@@ -33,7 +33,7 @@ public void beforeSuite(
             @Optional(DEFAULT_PGSQL_PASSWORD)  String pgSqlDbPassword, @Optional(DEFAULT_TEST_TABLE)  String pgSqlTestTable,
             
             @Optional(DEFAULT_MARIADB_NAME)      String mariadbDbName,     @Optional(DEFAULT_MARIADB_HOST)  String mariadbDbHost, 
-            @Optional(DEFAULT_MARIADB_PORT)      String mariadbDbPort,     @Optional(DEFAULT_MARIADB_USER)  String mariadbyDbUser,
+            @Optional(DEFAULT_MARIADB_PORT)      String mariadbDbPort,     @Optional(DEFAULT_MARIADB_USER)  String mariadbDbUser,
             @Optional(DEFAULT_MARIADB_PASSWORD)  String mariadbDbPassword, @Optional(DEFAULT_TEST_TABLE)    String mariadbTestTable,
 
             @Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName, @Optional(DEFAULT_TEST_TABLE) String sqliteTestTable)
@@ -64,7 +64,7 @@ public void beforeSuite(
         mariadbDbConfig.setDatabasePassword(mariadbDbPassword);
         mariadbDbConfig.setDatabasePort(Integer.parseInt(mariadbDbPort));
         mariadbDbConfig.setDatabaseType(MariaDBDatabaseService.DB_NAME);
-        mariadbDbConfig.setDatabaseUser(mariadbyDbUser);
+        mariadbDbConfig.setDatabaseUser(mariadbDbUser);
         mariadbDbConfig.setUseSSL(false);
 
         sqliteDbConfig = new DatabaseConfiguration();

File: extensions/database/tests/src/com/google/refine/extension/database/mariadb/MariaDBConnectionManagerTest.java
Patch:
@@ -24,7 +24,7 @@ public class MariaDBConnectionManagerTest extends DBExtensionTests {
    
     
     @BeforeTest
-    @Parameters({ "mariaDbName", "mariaDbHost", "mariaDbPort", "mariaDbUser", "mariaDbPassword", "mariaDbTestTable"})
+    @Parameters({ "mariadbDbName", "mariadbDbHost", "mariadbDbPort", "mariadbDbUser", "mariadbDbPassword", "mariaTestTable"})
     public void beforeTest(@Optional(DEFAULT_MARIADB_NAME) String mariaDbName,  @Optional(DEFAULT_MARIADB_HOST) String mariaDbHost, 
            @Optional(DEFAULT_MARIADB_PORT)    String mariaDbPort,     @Optional(DEFAULT_MARIADB_USER) String mariaDbUser,
            @Optional(DEFAULT_MARIADB_PASSWORD)  String mariaDbPassword, @Optional(DEFAULT_TEST_TABLE)  String mariaDbTestTable) {

File: extensions/database/tests/src/com/google/refine/extension/database/mariadb/MariaDBDatabaseServiceTest.java
Patch:
@@ -30,7 +30,7 @@ public class MariaDBDatabaseServiceTest extends DBExtensionTests{
    
     
     @BeforeTest
-    @Parameters({ "mariaDbName", "mariaDbHost", "mariaDbPort", "mariaDbUser", "mariaDbPassword", "mariaDbTestTable"})
+    @Parameters({ "mariadbDbName", "mariadbDbHost", "mariadbDbPort", "mariadbDbUser", "mariadbDbPassword", "mariadbTestTable"})
     public void beforeTest(@Optional(DEFAULT_MARIADB_NAME) String mariaDbName,  @Optional(DEFAULT_MARIADB_HOST) String mariaDbHost, 
            @Optional(DEFAULT_MARIADB_PORT)    String mariaDbPort,     @Optional(DEFAULT_MARIADB_USER) String mariaDbUser,
            @Optional(DEFAULT_MARIADB_PASSWORD)  String mariaDbPassword, @Optional(DEFAULT_TEST_TABLE)  String mariaDbTestTable) {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReinterpretTests.java
Patch:
@@ -33,7 +33,7 @@
 public class ReinterpretTests {
     @Test
     public void serializeReinterpret() {
-        String json = "{\"description\":\"Returns s reinterpreted thru the given encoder.\",\"params\":\"string s, string encoder\",\"returns\":\"string\"}";
+        String json = "{\"description\":\"Returns s reinterpreted using a target encoding and optional source encoding.\",\"params\":\"string s, string target encoding, string source encoding\",\"returns\":\"string\"}";
         TestUtils.isSerializedTo(new Reinterpret(), json);
     }
 }

File: main/src/com/google/refine/clustering/binning/NGramFingerprintKeyer.java
Patch:
@@ -64,8 +64,8 @@ public String key(String s, Object... o) {
     /**
      * Generate a stream of sorted unique character N-grams from a string
      * 
-     * @param String to generate N-grams from
-     * @param number of characters per N-gram
+     * @param s String to generate N-grams from
+     * @param size number of characters per N-gram
      * @return a stream of sorted unique N-gram Strings
      */
     protected Stream<String> sorted_ngrams(String s, int size) {

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java
Patch:
@@ -107,8 +107,8 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 
             // Inspect the edits and generate warnings
             EditInspector inspector = new EditInspector(warningStore, manifest);
-            inspector.inspect(editBatch);
-
+            inspector.inspect(editBatch, schema);
+            
             // Dump the first 10 edits, scheduled with the default scheduler
             WikibaseAPIUpdateScheduler scheduler = new WikibaseAPIUpdateScheduler();
             List<ItemUpdate> nonNullEdits = scheduler.schedule(editBatch).stream()

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -46,7 +46,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1) {
             Object s1 = args[0];
             if (s1 != null && s1 instanceof String) {
-                return CharMatcher.WHITESPACE.trimFrom((String) s1);
+                return CharMatcher.whitespace().trimFrom((String) s1);
             }
         }
         return new EvalError("Invalid parameters");

File: main/tests/server/src/com/google/refine/commands/CommandStub.java
Patch:
@@ -38,7 +38,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
-import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
 
 /**

File: main/tests/server/src/com/google/refine/commands/OpenWorkspaceDirCommandTests.java
Patch:
@@ -1,5 +1,5 @@
 package com.google.refine.commands;
-import com.google.refine.commands.CommandTestBase;
+
 import java.io.IOException;
 
 import javax.servlet.ServletException;

File: main/tests/server/src/com/google/refine/commands/SetPreferenceCommandTests.java
Patch:
@@ -1,6 +1,5 @@
 package com.google.refine.commands;
 
-import com.google.refine.commands.CommandTestBase;
 import java.io.IOException;
 
 import javax.servlet.ServletException;

File: main/tests/server/src/com/google/refine/commands/browsing/ScatterplotDrawCommandTests.java
Patch:
@@ -18,7 +18,6 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.google.refine.browsing.facets.ScatterplotFacet;
 import com.google.refine.commands.Command;
-import com.google.refine.commands.browsing.GetScatterplotCommand;
 import com.google.refine.util.ParsingUtilities;
 
 public class ScatterplotDrawCommandTests {

File: main/tests/server/src/com/google/refine/commands/cell/JoinMultiValueCellsCommandTests.java
Patch:
@@ -8,7 +8,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.commands.CommandTestBase;
-import com.google.refine.commands.cell.JoinMultiValueCellsCommand;
 
 public class JoinMultiValueCellsCommandTests extends CommandTestBase {
 	

File: main/tests/server/src/com/google/refine/commands/expr/GetExpressionHistoryCommandTests.java
Patch:
@@ -33,8 +33,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.commands.expr.GetExpressionHistoryCommand;
-
 public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase {
     
     @BeforeMethod

File: main/tests/server/src/com/google/refine/commands/expr/GetStarredExpressionsCommandTests.java
Patch:
@@ -33,8 +33,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.commands.expr.GetStarredExpressionsCommand;
-
 public class GetStarredExpressionsCommandTests extends ExpressionCommandTestBase {
 
     @BeforeMethod

File: main/tests/server/src/com/google/refine/commands/expr/LogExpressionCommandTests.java
Patch:
@@ -3,7 +3,6 @@
 import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.mock;
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectManagerStub;
 import com.google.refine.commands.Command;
 import com.google.refine.commands.CommandTestBase;
 import com.google.refine.preference.PreferenceStore;

File: main/tests/server/src/com/google/refine/commands/project/SetProjectMetadataCommandTests.java
Patch:
@@ -59,7 +59,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineTest;
 import com.google.refine.commands.Command;
-import com.google.refine.commands.project.SetProjectMetadataCommand;
 import com.google.refine.model.Project;
 import com.google.refine.util.ParsingUtilities;
 

File: main/tests/server/src/com/google/refine/exporters/CsvExporterTests.java
Patch:
@@ -51,7 +51,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
-import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;

File: main/tests/server/src/com/google/refine/exporters/HtmlExporterTests.java
Patch:
@@ -54,8 +54,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
-import com.google.refine.exporters.HtmlTableExporter;
-import com.google.refine.exporters.WriterExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;

File: main/tests/server/src/com/google/refine/exporters/TemplatingExporterTests.java
Patch:
@@ -52,8 +52,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
-import com.google.refine.exporters.TemplatingExporter;
-import com.google.refine.exporters.WriterExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;

File: main/tests/server/src/com/google/refine/exporters/TsvExporterTests.java
Patch:
@@ -51,7 +51,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
-import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;

File: main/tests/server/src/com/google/refine/exporters/XlsExporterTests.java
Patch:
@@ -58,8 +58,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
-import com.google.refine.exporters.StreamExporter;
-import com.google.refine.exporters.XlsExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;

File: main/tests/server/src/com/google/refine/exporters/XlsxExporterTests.java
Patch:
@@ -61,8 +61,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
-import com.google.refine.exporters.StreamExporter;
-import com.google.refine.exporters.XlsExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;

File: main/tests/server/src/com/google/refine/expr/EvalErrorTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.EvalError;
 import com.google.refine.util.TestUtils;
 
 public class EvalErrorTests {

File: main/tests/server/src/com/google/refine/expr/ExpressionUtilsTests.java
Patch:
@@ -40,7 +40,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.expr.ExpressionUtils;
 
 
 public class ExpressionUtilsTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/FacetCountTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.FacetCount;
 import com.google.refine.util.TestUtils;
 
 public class FacetCountTests {

File: main/tests/server/src/com/google/refine/expr/functions/GetTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.Get;
 import com.google.refine.util.TestUtils;
 
 public class GetTests {

File: main/tests/server/src/com/google/refine/expr/functions/HasFieldTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.HasField;
 import com.google.refine.util.TestUtils;
 
 public class HasFieldTests {

File: main/tests/server/src/com/google/refine/expr/functions/JsonizeTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.Jsonize;
 import com.google.refine.util.TestUtils;
 
 public class JsonizeTests {

File: main/tests/server/src/com/google/refine/expr/functions/LengthTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.Length;
 import com.google.refine.util.TestUtils;
 
 public class LengthTests {

File: main/tests/server/src/com/google/refine/expr/functions/SliceTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.Slice;
 import com.google.refine.util.TestUtils;
 
 public class SliceTests {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/JoinTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.arrays.Join;
 import com.google.refine.util.TestUtils;
 
 public class JoinTests {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/ReverseTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.arrays.Reverse;
 import com.google.refine.util.TestUtils;
 
 public class ReverseTests {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/SortTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.arrays.Sort;
 import com.google.refine.util.TestUtils;
 
 public class SortTests {

File: main/tests/server/src/com/google/refine/expr/functions/arrays/UniquesTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.arrays.Uniques;
 import com.google.refine.util.TestUtils;
 
 public class UniquesTests {

File: main/tests/server/src/com/google/refine/expr/functions/booleans/AndTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.booleans.And;
 import com.google.refine.util.TestUtils;
 
 public class AndTests {

File: main/tests/server/src/com/google/refine/expr/functions/booleans/NotTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.booleans.Not;
 import com.google.refine.util.TestUtils;
 
 public class NotTests {

File: main/tests/server/src/com/google/refine/expr/functions/booleans/OrTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.booleans.Or;
 import com.google.refine.util.TestUtils;
 
 public class OrTests {

File: main/tests/server/src/com/google/refine/expr/functions/booleans/XorTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.booleans.Xor;
 import com.google.refine.util.TestUtils;
 
 public class XorTests {

File: main/tests/server/src/com/google/refine/expr/functions/html/InnerHtmlTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.html.InnerHtml;
 import com.google.refine.util.TestUtils;
 
 public class InnerHtmlTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/ACosTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.ACos;
 import com.google.refine.util.TestUtils;
 
 public class ACosTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/ASinTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.ASin;
 import com.google.refine.util.TestUtils;
 
 public class ASinTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/ATan2Tests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.ATan2;
 import com.google.refine.util.TestUtils;
 
 public class ATan2Tests {

File: main/tests/server/src/com/google/refine/expr/functions/math/ATanTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.ATan;
 import com.google.refine.util.TestUtils;
 
 public class ATanTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/AbsTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Abs;
 import com.google.refine.util.TestUtils;
 
 public class AbsTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/CeilTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Ceil;
 import com.google.refine.util.TestUtils;
 
 public class CeilTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/CombinTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Combin;
 import com.google.refine.util.TestUtils;
 
 public class CombinTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/CosTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Cos;
 import com.google.refine.util.TestUtils;
 
 public class CosTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/CoshTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Cosh;
 import com.google.refine.util.TestUtils;
 
 public class CoshTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/DegreesTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Degrees;
 import com.google.refine.util.TestUtils;
 
 public class DegreesTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/EvenTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Even;
 import com.google.refine.util.TestUtils;
 
 public class EvenTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/ExpTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Exp;
 import com.google.refine.util.TestUtils;
 
 public class ExpTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/FactNTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.FactN;
 import com.google.refine.util.TestUtils;
 
 public class FactNTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/FactTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Fact;
 import com.google.refine.util.TestUtils;
 
 public class FactTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/FloorTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Floor;
 import com.google.refine.util.TestUtils;
 
 public class FloorTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/GreatestCommonDenominatorTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.GreatestCommonDenominator;
 import com.google.refine.util.TestUtils;
 
 public class GreatestCommonDenominatorTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/LeastCommonMultipleTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.LeastCommonMultiple;
 import com.google.refine.util.TestUtils;
 
 public class LeastCommonMultipleTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/LnTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Ln;
 import com.google.refine.util.TestUtils;
 
 public class LnTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/LogTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Log;
 import com.google.refine.util.TestUtils;
 
 public class LogTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/MaxTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Max;
 import com.google.refine.util.TestUtils;
 
 public class MaxTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/MinTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Min;
 import com.google.refine.util.TestUtils;
 
 public class MinTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/ModTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Mod;
 import com.google.refine.util.TestUtils;
 
 public class ModTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/MultinomialTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Multinomial;
 import com.google.refine.util.TestUtils;
 
 public class MultinomialTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/OddTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Odd;
 import com.google.refine.util.TestUtils;
 
 public class OddTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/PowTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Pow;
 import com.google.refine.util.TestUtils;
 
 public class PowTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/QuotientTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Quotient;
 import com.google.refine.util.TestUtils;
 
 public class QuotientTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/RadiansTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Radians;
 import com.google.refine.util.TestUtils;
 
 public class RadiansTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/RoundTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Round;
 import com.google.refine.util.TestUtils;
 
 public class RoundTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/SinTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Sin;
 import com.google.refine.util.TestUtils;
 
 public class SinTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/SinhTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Sinh;
 import com.google.refine.util.TestUtils;
 
 public class SinhTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/SumTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Sum;
 import com.google.refine.util.TestUtils;
 
 public class SumTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/TanTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Tan;
 import com.google.refine.util.TestUtils;
 
 public class TanTests {

File: main/tests/server/src/com/google/refine/expr/functions/math/TanhTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.math.Tanh;
 import com.google.refine.util.TestUtils;
 
 public class TanhTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/IndexOfTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.IndexOf;
 import com.google.refine.util.TestUtils;
 
 public class IndexOfTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/LastIndexOfTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.LastIndexOf;
 import com.google.refine.util.TestUtils;
 
 public class LastIndexOfTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/MD5Tests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.MD5;
 import com.google.refine.util.TestUtils;
 
 public class MD5Tests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/MatchTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.Match;
 import com.google.refine.util.TestUtils;
 
 public class MatchTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/NGramFingerprintTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.NGramFingerprint;
 import com.google.refine.util.TestUtils;
 
 public class NGramFingerprintTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/NGramTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.NGram;
 import com.google.refine.util.TestUtils;
 
 public class NGramTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ParseJsonTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.ParseJson;
 import com.google.refine.util.TestUtils;
 
 public class ParseJsonTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/PartitionTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.Partition;
 import com.google.refine.util.TestUtils;
 
 public class PartitionTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/PhoneticTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.Phonetic;
 import com.google.refine.util.TestUtils;
 
 public class PhoneticTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/RPartitionTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.RPartition;
 import com.google.refine.util.TestUtils;
 
 public class RPartitionTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReinterpretTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.Reinterpret;
 import com.google.refine.util.TestUtils;
 
 public class ReinterpretTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReplaceCharsTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.ReplaceChars;
 import com.google.refine.util.TestUtils;
 
 public class ReplaceCharsTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/SHA1Tests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.SHA1;
 import com.google.refine.util.TestUtils;
 
 public class SHA1Tests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/SplitByCharTypeTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.SplitByCharType;
 import com.google.refine.util.TestUtils;
 
 public class SplitByCharTypeTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/SplitByLengthsTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.SplitByLengths;
 import com.google.refine.util.TestUtils;
 
 public class SplitByLengthsTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToUppercaseTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.ToUppercase;
 import com.google.refine.util.TestUtils;
 
 public class ToUppercaseTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/UnicodeTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.Unicode;
 import com.google.refine.util.TestUtils;
 
 public class UnicodeTests {

File: main/tests/server/src/com/google/refine/expr/functions/strings/UnicodeTypeTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.strings.UnicodeType;
 import com.google.refine.util.TestUtils;
 
 public class UnicodeTypeTests {

File: main/tests/server/src/com/google/refine/expr/functions/xml/InnerXmlTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.xml.InnerXml;
 import com.google.refine.util.TestUtils;
 
 public class InnerXmlTests {

File: main/tests/server/src/com/google/refine/expr/functions/xml/OwnTextTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.xml.OwnText;
 import com.google.refine.util.TestUtils;
 
 public class OwnTextTests {

File: main/tests/server/src/com/google/refine/expr/functions/xml/SelectXmlTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.xml.SelectXml;
 import com.google.refine.util.TestUtils;
 
 public class SelectXmlTests {

File: main/tests/server/src/com/google/refine/expr/functions/xml/xmlAttrTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.xml.XmlAttr;
 import com.google.refine.util.TestUtils;
 
 public class xmlAttrTests {

File: main/tests/server/src/com/google/refine/expr/functions/xml/xmlTextTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.xml.XmlText;
 import com.google.refine.util.TestUtils;
 
 public class xmlTextTests {

File: main/tests/server/src/com/google/refine/grel/ast/LiteralExprTest.java
Patch:
@@ -30,8 +30,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.ast.LiteralExpr;
-
 public class LiteralExprTest {
 	@Test
 	public void intLiteralToString() {

File: main/tests/server/src/com/google/refine/grel/controls/FilterTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.Filter;
 import com.google.refine.util.TestUtils;
 
 public class FilterTests {

File: main/tests/server/src/com/google/refine/grel/controls/ForEachIndexTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.ForEachIndex;
 import com.google.refine.util.TestUtils;
 
 public class ForEachIndexTests {

File: main/tests/server/src/com/google/refine/grel/controls/ForEachTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.ForEach;
 import com.google.refine.util.TestUtils;
 
 public class ForEachTests {

File: main/tests/server/src/com/google/refine/grel/controls/ForNonBlankTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.ForNonBlank;
 import com.google.refine.util.TestUtils;
 
 public class ForNonBlankTests {

File: main/tests/server/src/com/google/refine/grel/controls/ForRangeTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.ForRange;
 import com.google.refine.util.TestUtils;
 
 public class ForRangeTests {

File: main/tests/server/src/com/google/refine/grel/controls/IfTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.If;
 import com.google.refine.util.TestUtils;
 
 public class IfTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsBlankTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsBlank;
 import com.google.refine.util.TestUtils;
 
 public class IsBlankTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsEmptyStringTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsEmptyString;
 import com.google.refine.util.TestUtils;
 
 public class IsEmptyStringTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsErrorTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsError;
 import com.google.refine.util.TestUtils;
 
 public class IsErrorTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsNonBlankTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsNonBlank;
 import com.google.refine.util.TestUtils;
 
 public class IsNonBlankTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsNotNullTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsNotNull;
 import com.google.refine.util.TestUtils;
 
 public class IsNotNullTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsNullTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsNull;
 import com.google.refine.util.TestUtils;
 
 public class IsNullTests {

File: main/tests/server/src/com/google/refine/grel/controls/IsNumericTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.IsNumeric;
 import com.google.refine.util.TestUtils;
 
 public class IsNumericTests {

File: main/tests/server/src/com/google/refine/grel/controls/WithTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.grel.controls.With;
 import com.google.refine.util.TestUtils;
 
 public class WithTests {

File: main/tests/server/src/com/google/refine/history/FileHistoryEntryManagerTests.java
Patch:
@@ -10,7 +10,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.history.HistoryEntry;
 import com.google.refine.io.FileHistoryEntryManager;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;

File: main/tests/server/src/com/google/refine/history/HistoryEntryTests.java
Patch:
@@ -35,7 +35,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnAdditionOperation;

File: main/tests/server/src/com/google/refine/importers/ImporterUtilitiesTests.java
Patch:
@@ -48,7 +48,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.importers.ImporterUtilities;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;

File: main/tests/server/src/com/google/refine/importers/WikitextImporterTests.java
Patch:
@@ -45,7 +45,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;
@@ -58,7 +57,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.recon.ReconJob;
 import com.google.refine.model.recon.StandardReconConfig;
 
-@PrepareForTest(WikitextImporter.class)
+
 public class WikitextImporterTests extends ImporterTest {
 
     private WikitextImporter importer = null;

File: main/tests/server/src/com/google/refine/importers/XmlImportUtilitiesTests.java
Patch:
@@ -49,7 +49,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.importers.JsonImporter;
 import com.google.refine.importers.JsonImporter.JSONTreeReader;
 import com.google.refine.importers.XmlImporter.XmlParser;
 import com.google.refine.importers.tree.ImportColumn;

File: main/tests/server/src/com/google/refine/io/FileProjectManagerTests.java
Patch:
@@ -35,7 +35,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.io.FileProjectManager;
 import com.google.refine.util.TestUtils;
 import com.google.refine.ProjectMetadata;
 

File: main/tests/server/src/com/google/refine/model/CellTests.java
Patch:
@@ -38,8 +38,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.EvalError;
-import com.google.refine.model.Cell;
-import com.google.refine.model.Recon;
 import com.google.refine.util.Pool;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/model/ColumnGroupTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.model.ColumnGroup;
 import com.google.refine.util.TestUtils;
 
 public class ColumnGroupTests {

File: main/tests/server/src/com/google/refine/model/ColumnModelTests.java
Patch:
@@ -29,8 +29,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.model.ColumnModel;
-import com.google.refine.model.Project;
 import com.google.refine.util.TestUtils;
 
 public class ColumnModelTests extends RefineTest {

File: main/tests/server/src/com/google/refine/model/ColumnTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.model.Column;
 import com.google.refine.model.recon.ReconConfig;
 import com.google.refine.model.recon.StandardReconConfig;
 import com.google.refine.util.TestUtils;

File: main/tests/server/src/com/google/refine/model/ProjectStub.java
Patch:
@@ -33,8 +33,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.model;
 
-import com.google.refine.model.Project;
-
 
 public class ProjectStub extends Project {
     public ProjectStub(long id){

File: main/tests/server/src/com/google/refine/model/ReconCandidateTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.TestUtils;
 
 public class ReconCandidateTests {

File: main/tests/server/src/com/google/refine/model/ReconStatsTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.model.ReconStats;
 import com.google.refine.util.TestUtils;
 
 public class ReconStatsTests {

File: main/tests/server/src/com/google/refine/model/ReconTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/model/ReconTypeTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.model.ReconType;
 import com.google.refine.util.TestUtils;
 
 public class ReconTypeTest {

File: main/tests/server/src/com/google/refine/model/RecordModelTests.java
Patch:
@@ -29,7 +29,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.model.Project;
 import com.google.refine.util.TestUtils;
 
 public class RecordModelTests extends RefineTest {

File: main/tests/server/src/com/google/refine/model/RowTests.java
Patch:
@@ -47,7 +47,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-
 import com.google.refine.util.Pool;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/model/changes/DataExtensionChangeTest.java
Patch:
@@ -42,7 +42,6 @@
 import com.google.refine.history.Change;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.changes.DataExtensionChange;
 import com.google.refine.util.Pool;
 
 

File: main/tests/server/src/com/google/refine/model/changes/MassChangeTests.java
Patch:
@@ -41,9 +41,6 @@
 import com.google.refine.history.Change;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.changes.CellAtRow;
-import com.google.refine.model.changes.ColumnAdditionChange;
-import com.google.refine.model.changes.MassChange;
 
 public class MassChangeTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/operations/cell/BlankDownTests.java
Patch:
@@ -44,8 +44,6 @@
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.BlankDownOperation;
-import com.google.refine.operations.cell.FillDownOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;

File: main/tests/server/src/com/google/refine/operations/cell/FillDownTests.java
Patch:
@@ -44,7 +44,6 @@
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.FillDownOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;

File: main/tests/server/src/com/google/refine/operations/cell/JoinMultiValuedCellsTests.java
Patch:
@@ -46,7 +46,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.MultiValuedCellJoinOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;

File: main/tests/server/src/com/google/refine/operations/cell/MassOperationTests.java
Patch:
@@ -35,7 +35,6 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.MassEditOperation;
 import com.google.refine.operations.cell.MassEditOperation.Edit;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;

File: main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java
Patch:
@@ -46,7 +46,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.MultiValuedCellSplitOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;

File: main/tests/server/src/com/google/refine/operations/cell/TransposeTests.java
Patch:
@@ -39,7 +39,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.TransposeRowsIntoColumnsOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -56,7 +56,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.operations.EngineDependentOperation;
 import com.google.refine.operations.OnError;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation;
 import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation.HttpHeader;
 import com.google.refine.process.Process;
 import com.google.refine.process.ProcessManager;

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnAdditionOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnMoveOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnMoveOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnRemovalOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnRemovalOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnRenameOperationTests.java
Patch:
@@ -32,7 +32,6 @@
 import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnRenameOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnReorderOperationTests.java
Patch:
@@ -38,7 +38,6 @@
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnReorderOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnSplitOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.column.ColumnSplitOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/row/DenormalizeOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.row.DenormalizeOperation;
 import com.google.refine.util.TestUtils;
 
 

File: main/tests/server/src/com/google/refine/operations/row/RowFlagOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.row.RowFlagOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/row/RowRemovalOperationTests.java
Patch:
@@ -33,7 +33,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.row.RowRemovalOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/operations/row/RowReorderOperationTests.java
Patch:
@@ -41,7 +41,6 @@
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.row.RowReorderOperation;
 import com.google.refine.process.Process;
 import com.google.refine.sorting.SortingConfig;
 import com.google.refine.util.ParsingUtilities;

File: main/tests/server/src/com/google/refine/operations/row/RowStarOperationTests.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.row.RowStarOperation;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/preference/PreferenceStoreTests.java
Patch:
@@ -35,7 +35,6 @@
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
-import com.google.refine.preference.PreferenceStore;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/preference/TopListTests.java
Patch:
@@ -33,8 +33,6 @@
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
-import com.google.refine.preference.PreferenceValue;
-import com.google.refine.preference.TopList;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/process/LongRunningProcessTests.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.process.LongRunningProcess;
 import com.google.refine.util.TestUtils;
 
 public class LongRunningProcessTests {

File: main/tests/server/src/com/google/refine/process/ProcessManagerTests.java
Patch:
@@ -29,8 +29,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.process.Process;
-import com.google.refine.process.ProcessManager;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/process/QuickHistoryEntryProcessTests.java
Patch:
@@ -32,8 +32,6 @@
 
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
-import com.google.refine.process.Process;
-import com.google.refine.process.QuickHistoryEntryProcess;
 import com.google.refine.util.TestUtils;
 
 public class QuickHistoryEntryProcessTests {

File: main/tests/server/src/com/google/refine/sorting/BooleanCriterionTest.java
Patch:
@@ -30,7 +30,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.sorting.Criterion;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/sorting/DateCriterionTest.java
Patch:
@@ -30,7 +30,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.sorting.Criterion;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/sorting/NumberCriterionTest.java
Patch:
@@ -30,7 +30,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.sorting.Criterion;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
 

File: main/tests/server/src/com/google/refine/sorting/SortingConfigTests.java
Patch:
@@ -30,7 +30,6 @@
 
 import org.testng.annotations.Test;
 
-import com.google.refine.sorting.SortingConfig;
 import com.google.refine.util.TestUtils;
 
 public class SortingConfigTests {

File: main/tests/server/src/com/google/refine/util/PatternSyntaxExceptionParserTests.java
Patch:
@@ -42,7 +42,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
-import com.google.refine.util.PatternSyntaxExceptionParser;
 
 public class PatternSyntaxExceptionParserTests extends RefineTest {
     

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PerformWikibaseEditsCommand.java
Patch:
@@ -38,7 +38,9 @@ public class PerformWikibaseEditsCommand extends EngineDependentCommand {
     protected AbstractOperation createOperation(Project project, HttpServletRequest request, EngineConfig engineConfig)
             throws Exception {
         String summary = request.getParameter("summary");
-        return new PerformWikibaseEditsOperation(engineConfig, summary);
+        String maxlagStr = request.getParameter("maxlag");
+        int maxlag = maxlagStr == null ? 5 : Integer.parseInt(maxlagStr);
+        return new PerformWikibaseEditsOperation(engineConfig, summary, maxlag);
     }
 
 }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java
Patch:
@@ -62,7 +62,7 @@ public ItemIdValue fromCell(Cell cell, ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
         if (cell.recon != null
                 && (Judgment.Matched.equals(cell.recon.judgment) || Judgment.New.equals(cell.recon.judgment))) {
-            if (cell.recon.identifierSpace == null || !cell.recon.identifierSpace.equals(Datamodel.SITE_WIKIDATA)) {
+            if (cell.recon.identifierSpace == null || !cell.recon.identifierSpace.equals(ctxt.getBaseIRI())) {
                 QAWarning warning = new QAWarning("invalid-identifier-space", null, QAWarning.Severity.INFO, 1);
                 warning.setProperty("example_cell", cell.value.toString());
                 ctxt.addWarning(warning);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java
Patch:
@@ -56,7 +56,8 @@ public String fromCell(Cell cell, ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
         if (cell.value != null && !cell.value.toString().isEmpty()) {
             String code = cell.value.toString().trim();
-            String normalized = WbLanguageConstant.normalizeLanguageCode(code);
+            String mediaWikiApiEndpoint = ctxt.getMediaWikiApiEndpoint();
+            String normalized = WbLanguageConstant.normalizeLanguageCode(code, mediaWikiApiEndpoint);
             if (normalized != null) {
                 return normalized;
             } else {

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommandTest.java
Patch:
@@ -62,7 +62,7 @@ public void testInvalidSchema() throws ServletException, IOException {
     	when(request.getParameter("csrf_token")).thenReturn(Command.csrfFactory.getFreshToken());
     	
         String schemaJson = "{\"itemDocuments\":[{\"statementGroups\":[{\"statements\":[]}],"
-                +"\"nameDescs\":[]}],\"wikibasePrefix\":\"http://www.wikidata.org/entity/\"}";
+                +"\"nameDescs\":[]}],\"siteIri\":\"http://www.wikidata.org/entity/\"}";
         
         when(request.getParameter("schema")).thenReturn(schemaJson);
         command.doPost(request, response);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java
Patch:
@@ -23,7 +23,7 @@ public void testNoSchema()
         StringWriter writer = new StringWriter();
         Properties properties = new Properties();
         exporter.export(project, properties, engine, writer);
-        TestUtils.assertEqualAsJson("{\"itemDocuments\":[]}", writer.toString());
+        TestUtils.assertEqualAsJson("{\"itemDocuments\":[],\"siteIri\":null,\"mediaWikiApiEndpoint\":null}", writer.toString());
     }
 
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java
Patch:
@@ -58,7 +58,7 @@ public String getJson()
     
     @Test(expectedExceptions=IllegalArgumentException.class)
     public void testConstructor() {
-        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "");
+        new PerformWikibaseEditsOperation(EngineConfig.reconstruct("{}"), "", 5);
     }
 
     @Test

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/ConstraintTest.java
Patch:
@@ -23,10 +23,11 @@
 
 import static org.openrefine.wikidata.qa.Constraint.CONSTRAINT_EXCEPTIONS;
 import static org.openrefine.wikidata.qa.Constraint.CONSTRAINT_STATUS;
-import static org.openrefine.wikidata.qa.scrutinizers.SingleValueScrutinizer.SINGLE_VALUE_CONSTRAINT_QID;
 
 public class ConstraintTest {
 
+    public static final String SINGLE_VALUE_CONSTRAINT_QID = "Q19474404";
+
     public static ItemIdValue itemIdValue = Datamodel.makeWikidataItemIdValue(SINGLE_VALUE_CONSTRAINT_QID);
     public static PropertyIdValue constraintException = Datamodel.makeWikidataPropertyIdValue(CONSTRAINT_EXCEPTIONS);
     public static Value exceptionValue = Datamodel.makeWikidataItemIdValue("Q7409772");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizerTest.java
Patch:
@@ -42,10 +42,11 @@
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.openrefine.wikidata.qa.scrutinizers.DistinctValuesScrutinizer.DISTINCT_VALUES_CONSTRAINT_QID;
 
 public class DistinctValuesScrutinizerTest extends StatementScrutinizerTest {
 
+    public static String DISTINCT_VALUES_CONSTRAINT_QID = "Q21502410";
+
     public static PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue("P163");
     public static Value value1 = Datamodel.makeWikidataItemIdValue("Q41673");
     public static Value value2 = Datamodel.makeWikidataItemIdValue("Q43175");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/FormatScrutinizerTest.java
Patch:
@@ -43,11 +43,12 @@
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.openrefine.wikidata.qa.scrutinizers.FormatScrutinizer.FORMAT_CONSTRAINT_QID;
-import static org.openrefine.wikidata.qa.scrutinizers.FormatScrutinizer.FORMAT_REGEX_PID;
 
 public class FormatScrutinizerTest extends ScrutinizerTest {
 
+    public static final String FORMAT_CONSTRAINT_QID = "Q21502404";
+    public static final String FORMAT_REGEX_PID = "P1793";
+
     public static PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue("P18");
     public static Value completeMatchValue = Datamodel.makeStringValue("image.png");
     public static Value noMatchValue = Datamodel.makeStringValue("image");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizerTest.java
Patch:
@@ -18,10 +18,11 @@
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.openrefine.wikidata.qa.scrutinizers.MultiValueScrutinizer.MULTI_VALUE_CONSTRAINT_QID;
 
 public class MultiValueScrutinizerTest extends ScrutinizerTest {
 
+    public static final String MULTI_VALUE_CONSTRAINT_QID = "Q21510857";
+
     public static PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue("P1963");
     public static Value valueSnak = Datamodel.makeWikidataItemIdValue("Q5");
     public static ItemIdValue entityIdValue = Datamodel.makeWikidataItemIdValue(MULTI_VALUE_CONSTRAINT_QID);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizerTest.java
Patch:
@@ -41,10 +41,11 @@
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.openrefine.wikidata.qa.scrutinizers.SingleValueScrutinizer.SINGLE_VALUE_CONSTRAINT_QID;
 
 public class SingleValueScrutinizerTest extends ScrutinizerTest {
 
+    public static final String SINGLE_VALUE_CONSTRAINT_QID = "Q19474404";
+
     public static PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue("P21");
     public static Value value1 = Datamodel.makeWikidataItemIdValue("Q6581072");
     public static Value value2 = Datamodel.makeWikidataItemIdValue("Q6581097");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/UnsourcedScrutinizerTest.java
Patch:
@@ -43,10 +43,11 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.openrefine.wikidata.qa.scrutinizers.UnsourcedScrutinizer.CITATION_NEEDED_QID;
 
 public class UnsourcedScrutinizerTest extends StatementScrutinizerTest {
 
+    private static final String CITATION_NEEDED_QID = "Q54554025";
+
     public static PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue("P2302");
     public static PropertyIdValue referenceProperty = Datamodel.makeWikidataPropertyIdValue("P143");
     public static ItemIdValue referenceValue = Datamodel.makeWikidataItemIdValue("Q348");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/ExpressionContextTest.java
Patch:
@@ -43,19 +43,19 @@ public void setUp() {
 
     @Test
     public void testGetCellByColumnName() {
-        ExpressionContext ctxt = new ExpressionContext("foo:", 1, project.rows.get(1), project.columnModel, null);
+        ExpressionContext ctxt = new ExpressionContext("foo:", "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
         assertEquals("e", ctxt.getCellByName("b").value);
     }
 
     @Test
     public void testNonExistentColumn() {
-        ExpressionContext ctxt = new ExpressionContext("foo:", 1, project.rows.get(1), project.columnModel, null);
+        ExpressionContext ctxt = new ExpressionContext("foo:", "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
         assertNull(ctxt.getCellByName("auie"));
     }
 
     @Test
     public void testGetRowId() {
-        ExpressionContext ctxt = new ExpressionContext("foo:", 1, project.rows.get(1), project.columnModel, null);
+        ExpressionContext ctxt = new ExpressionContext("foo:", "https://www.wikidata.org/w/api.php", 1, project.rows.get(1), project.columnModel, null);
         assertEquals(1, ctxt.getRowId());
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -127,7 +127,7 @@ public void testEvaluate()
     @Test(expectedExceptions = IOException.class)
     public void testDeserializeEmpty() throws IOException {
         String schemaJson = "{\"itemDocuments\":[{\"statementGroups\":[{\"statements\":[]}],"
-                +"\"nameDescs\":[]}],\"wikibasePrefix\":\"http://www.wikidata.org/entity/\"}";
+                +"\"nameDescs\":[]}],\"siteIri\":\"http://www.wikidata.org/entity/\"}";
         WikibaseSchema.reconstruct(schemaJson);
     }
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/utils/EntityCacheStub.java
Patch:
@@ -22,7 +22,7 @@ public class EntityCacheStub extends EntityCache {
 	private ObjectMapper mapper =  new DatamodelMapper(Datamodel.SITE_WIKIDATA);
 	
 	public EntityCacheStub() {
-		super(BasicApiConnection.getWikidataApiConnection());
+		super(null, null);
 	}
 	
 	@Override

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -74,7 +74,7 @@ public String guess(File file, String encoding, String seedFormat) {
                 String line;
                 while ((line = reader.readLine()) != null && controls < CONTROLS_THRESHOLD) {
                     line = line.trim();
-                    controls += CharMatcher.javaIsoControl().countIn(line);
+                    controls += CharMatcher.javaIsoControl().and(CharMatcher.whitespace().negate()).countIn(line);
                     openBraces += line.chars().filter(ch -> ch == '{').count();
                     closeBraces += StringUtils.countMatches(line, "}");
                     openAngleBrackets += StringUtils.countMatches(line, "<");

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemDocumentExpr.java
Patch:
@@ -96,12 +96,12 @@ public WbExpression<? extends ItemIdValue> getSubject() {
 
     @JsonProperty("nameDescs")
     public List<WbNameDescExpr> getNameDescs() {
-        return nameDescs;
+        return Collections.unmodifiableList(nameDescs);
     }
 
     @JsonProperty("statementGroups")
     public List<WbStatementGroupExpr> getStatementGroups() {
-        return statementGroups;
+        return Collections.unmodifiableList(statementGroups);
     }
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbReferenceExpr.java
Patch:
@@ -24,6 +24,7 @@
 package org.openrefine.wikidata.schema;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.apache.commons.lang.Validate;
@@ -77,7 +78,7 @@ public Reference evaluate(ExpressionContext ctxt)
 
     @JsonProperty("snaks")
     public List<WbSnakExpr> getSnaks() {
-        return snakExprs;
+        return Collections.unmodifiableList(snakExprs);
     }
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStatementExpr.java
Patch:
@@ -134,12 +134,12 @@ public WbExpression<? extends Value> getMainsnak() {
 
     @JsonProperty("qualifiers")
     public List<WbSnakExpr> getQualifiers() {
-        return qualifierExprs;
+        return Collections.unmodifiableList(qualifierExprs);
     }
 
     @JsonProperty("references")
     public List<WbReferenceExpr> getReferences() {
-        return referenceExprs;
+        return Collections.unmodifiableList(referenceExprs);
     }
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStatementGroupExpr.java
Patch:
@@ -24,6 +24,7 @@
 package org.openrefine.wikidata.schema;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.jsoup.helper.Validate;
@@ -79,7 +80,7 @@ public WbExpression<? extends PropertyIdValue> getProperty() {
 
     @JsonProperty("statements")
     public List<WbStatementExpr> getStatements() {
-        return statementExprs;
+        return Collections.unmodifiableList(statementExprs);
     }
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.openrefine.wikidata.qa.QAWarningStore;
@@ -90,7 +91,7 @@ public String getBaseIri() {
      */
     @JsonIgnore
     public List<WbItemDocumentExpr> getItemDocumentExpressions() {
-        return itemDocumentExprs;
+        return Collections.unmodifiableList(itemDocumentExprs);
     }
     
     public void setItemDocumentExpressions(List<WbItemDocumentExpr> exprs) {

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -182,7 +182,7 @@ static public String dateToString(OffsetDateTime d) {
     static public String localDateToString(LocalDateTime d) {
       OffsetDateTime odt = OffsetDateTime.of(d,
                 OffsetDateTime.now().getOffset());
-      
+      // FIXME: A LocalDate has no timezone, by definition.
       return odt.withOffsetSameInstant(ZoneOffset.of("Z")).format(ISO8601);
     }
 

File: extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java
Patch:
@@ -285,7 +285,6 @@ private static void parsePreview(
                 job,
                 new DBQueryResultPreviewReader(job, databaseService, querySource, columns, dbQueryInfo, 100),
                 querySource,
-                "", // archivefilename
                 limit,
                 options,
                 exceptions
@@ -415,7 +414,6 @@ private static void parseCreate(
                 job,
                 new DBQueryResultImportReader(job, databaseService, querySource, columns, dbQueryInfo, getCreateBatchSize()),
                 querySource,
-                "", //archivefilename,
                 limit,
                 options,
                 exceptions

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -142,7 +142,6 @@ static public void parseOneWorkSheet(
                 job,
                 new WorksheetBatchRowReader(job, fileSource, service, spreadsheetId, worksheetEntry),
                 fileSource,
-                "", //archivefilename
                 limit,
                 options,
                 exceptions

File: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/WikidataRefineTest.java
Patch:
@@ -46,7 +46,7 @@ protected Project createCSVProject(String projectName, String input) {
         SeparatorBasedImporter importer = new SeparatorBasedImporter();
         
         List<Exception> exceptions = new ArrayList<Exception>();
-        importer.parseOneFile(project, metadata, job, "filesource", "archivefile", new StringReader(input), -1, options, exceptions);
+        importer.parseOneFile(project, metadata, job, "filesource", new StringReader(input), -1, options, exceptions);
         project.update();
         ProjectManager.singleton.registerProject(project, metadata);
         

File: main/src/com/google/refine/importers/MarcImporter.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.List;
 
 import org.marc4j.MarcPermissiveStreamReader;
 import org.marc4j.MarcWriter;
@@ -57,7 +58,7 @@ public MarcImporter() {
     }
     
     @Override
-    public ObjectNode createParserUIInitializationData(ImportingJob job, java.util.List<ObjectNode> fileRecords, String format) {
+    public ObjectNode createParserUIInitializationData(ImportingJob job, List<ObjectNode> fileRecords, String format) {
         if (fileRecords.size() > 0) {
             ObjectNode firstFileRecord = fileRecords.get(0);
             File file = ImportingUtilities.getFile(job, firstFileRecord);

File: main/src/com/google/refine/importers/RdfTripleImporter.java
Patch:
@@ -76,7 +76,8 @@ public RdfTripleImporter(Mode mode) {
         this.mode = mode;
     }
 
-    public void parseOneFile(Project project, ProjectMetadata metadata, ImportingJob job, String fileSource, String archiveFileName,
+    @Override
+    public void parseOneFile(Project project, ProjectMetadata metadata, ImportingJob job, String fileSource,
             InputStream input, int limit, ObjectNode options, List<Exception> exceptions) {
         // create an empty model
         Model model = ModelFactory.createDefaultModel();
@@ -164,7 +165,5 @@ public void parseOneFile(Project project, ProjectMetadata metadata, ImportingJob
       } catch (ModelException e) {
           exceptions.add(e);
       } 
-      
-      super.parseOneFile(project, metadata, job, fileSource, archiveFileName, input, limit, options, exceptions);
     }
 }

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -393,6 +393,7 @@ public void update(long bytesRead, long contentLength, int itemCount) {
                         calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));
                     
                     JSONUtilities.safePut(fileRecord, "size", saveStreamToFile(stream, file, null));
+                    // TODO: This needs to be refactored to be able to test import from archives
                     if (postProcessRetrievedFile(rawDataDir, file, fileRecord, fileRecords, progress)) {
                         archiveCount++;
                     }
@@ -641,6 +642,7 @@ static public InputStream tryOpenAsArchive(File file, String mimeType, String co
         return null;
     }
     
+    // FIXME: This is wasteful of space and time. We should try to process on the fly
     static public boolean explodeArchive(
         File rawDataDir,
         InputStream archiveIS,

File: main/tests/server/src/com/google/refine/importers/JsonImporterTests.java
Patch:
@@ -52,7 +52,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.google.refine.importers.JsonImporter;
 import com.google.refine.importers.JsonImporter.JSONTreeReader;
 import com.google.refine.importers.tree.TreeImportingParserBase;
 import com.google.refine.importers.tree.TreeReader.Token;
@@ -135,7 +134,6 @@ public void canThrowError(){
                 metadata,
                 job,
                 "file-source",
-                "archive-file",
                 inputStream,
                 rootColumnGroup,
                 -1,

File: main/tests/server/src/com/google/refine/importers/RdfTripleImporterTests.java
Patch:
@@ -44,7 +44,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.importers.RdfTripleImporter;
 import com.google.refine.util.JSONUtilities;
 
 public class RdfTripleImporterTests extends ImporterTest {

File: main/tests/server/src/com/google/refine/operations/cell/KeyValueColumnizeTests.java
Patch:
@@ -63,7 +63,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.TestUtils;
@@ -202,7 +201,7 @@ public void testKeyValueColumnize() throws Exception {
 		+ "price,3.1\n";
 	prepareOptions(",", 20, 0, 0, 1, false, false);
         List<Exception> exceptions = new ArrayList<Exception>();
-        importer.parseOneFile(project, pm, job, "filesource", "archivefile", new StringReader(csv), -1, options, exceptions);
+        importer.parseOneFile(project, pm, job, "filesource", new StringReader(csv), -1, options, exceptions);
         project.update();
         ProjectManager.singleton.registerProject(project, pm);
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/QuantityScrutinizerTest.java
Patch:
@@ -205,8 +205,8 @@ public void testGoodUnit() {
 
         Snak qualifierSnak = Datamodel.makeValueSnak(itemParameterPID, allowedUnit);
         List<Snak> qualifierSnakList = Collections.singletonList(qualifierSnak);
-        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(qualifierSnakList);
-        List<SnakGroup> constraintQualifiers = Collections.singletonList(snakGroup1);
+        SnakGroup qualifierSnakGroup = Datamodel.makeSnakGroup(qualifierSnakList);
+        List<SnakGroup> constraintQualifiers = Collections.singletonList(qualifierSnakGroup);
         List<Statement> constraintDefinitions = constraintParameterStatementList(allowedUnitEntity, constraintQualifiers);
         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);
         when(fetcher.getConstraintsByType(propertyIdValue, ALLOWED_UNITS_CONSTRAINT_QID)).thenReturn(constraintDefinitions);

File: main/tests/server/src/com/google/refine/importers/JsonImporterTests.java
Patch:
@@ -81,12 +81,12 @@ public void init() {
     public void setUp(Method method){
         super.setUp();
         SUT = new JsonImporter();
-        logger.info("About to run test method: " + method.getName());
+        logger.debug("About to run test method: " + method.getName());
     }
 
     @AfterMethod
     public void tearDown(ITestResult result) {
-//        logger.info("Finished test method: " + result.getMethod().getMethodName());
+        logger.debug("Finished test method: " + result.getMethod().getMethodName());
         SUT = null;
         if (inputStream != null) {
             try {

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -202,4 +202,5 @@ public String getParams() {
     public String getReturns() {
         return "date";
     }
+
 }

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -34,7 +34,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 package com.google.refine.importers;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -249,7 +248,7 @@ static protected Cell extractCell(org.apache.poi.ss.usermodel.Cell cell) {
             double d = cell.getNumericCellValue();
             
             if (DateUtil.isCellDateFormatted(cell)) {
-                value = DateUtil.getJavaDate(d);
+                value = ParsingUtilities.toDate(DateUtil.getJavaDate(d));
                 // TODO: If we had a time datatype, we could use something like the following
                 // to distinguish times from dates (although Excel doesn't really make the distinction)
                 // Another alternative would be to look for values < 0.60

File: main/src/com/google/refine/importers/OdsImporter.java
Patch:
@@ -217,7 +217,7 @@ static protected Serializable extractCell(OdfTableCell cell) {
         } else if ("float".equals(cellType)) {
             value = cell.getDoubleValue();
         } else if ("date".equals(cellType)) {
-            value = cell.getDateValue().toInstant().atOffset(ZoneOffset.UTC);
+            value = ParsingUtilities.toDate(cell.getDateValue());
         } else if ("currency".equals(cellType)) {
             value = cell.getCurrencyValue();
         } else if ("percentage".equals(cellType)) {
@@ -289,5 +289,4 @@ static protected Cell extractCell(OdfTableCell cell, Map<String, Recon> reconMap
             return null;
         }
     }
-
-} 
\ No newline at end of file
+}
\ No newline at end of file

File: main/src/com/google/refine/clustering/binning/NGramFingerprintKeyer.java
Patch:
@@ -49,13 +49,14 @@ public String key(String s, Object... o) {
         }
         s = s.toLowerCase(); // then lowercase it
         s = alphanum.matcher(s).replaceAll(""); // then remove all punctuation and control chars
+        s = asciify(s); // find ASCII equivalent to characters
         TreeSet<String> set = ngram_split(s,ngram_size);
         StringBuffer b = new StringBuffer();
         Iterator<String> i = set.iterator();
         while (i.hasNext()) { // join ordered fragments back together
             b.append(i.next());
         }
-        return asciify(b.toString()); // find ASCII equivalent to characters 
+        return b.toString();
     }
 
     protected TreeSet<String> ngram_split(String s, int size) {

File: main/tests/server/src/com/google/refine/clustering/binning/KeyerTests.java
Patch:
@@ -62,9 +62,10 @@ public class KeyerTests extends RefineTest {
     
     private static final String[][] testNGramStrings = {
         {"abcdefg","abbccddeeffg"},
+        {" a,b.c d\te!f?g ","abbccddeeffg"},
+        {"écÉCec","ceec"},
         {"",""}, //TODO: add more test cases
         {"",""},
-        {"",""},
     };
     
     @Override

File: main/src/com/google/refine/importers/OdsImporter.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Serializable;
+import java.time.ZoneOffset;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -216,7 +217,7 @@ static protected Serializable extractCell(OdfTableCell cell) {
         } else if ("float".equals(cellType)) {
             value = cell.getDoubleValue();
         } else if ("date".equals(cellType)) {
-            value = cell.getDateValue();
+            value = cell.getDateValue().toInstant().atOffset(ZoneOffset.UTC);
         } else if ("currency".equals(cellType)) {
             value = cell.getCurrencyValue();
         } else if ("percentage".equals(cellType)) {

File: main/tests/server/src/com/google/refine/importers/OdsImporterTests.java
Patch:
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.time.OffsetDateTime;
 
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
@@ -109,8 +110,7 @@ public void readOds() throws FileNotFoundException, IOException{
         Row row = project.rows.get(0);
         assertEquals(row.cells.size(), COLUMNS);
         assertEquals((String)row.getCellValue(1),"2 Days In New York");
-        // FIXME: Dates are currently broken
-//        assertEquals(((OffsetDateTime)row.getCellValue(3)).toString().substring(0, 10),"2012-03-28");
+        assertEquals(((OffsetDateTime)row.getCellValue(3)).toString().substring(0, 10),"2012-03-28");
         assertEquals(((Number)row.getCellValue(5)).doubleValue(), 4.5, EPSILON);
 
         assertFalse((Boolean)row.getCellValue(7));

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -263,7 +263,7 @@ public void testHttpHeaders() throws Exception {
                 true,
                 headers);
 
-            runAndWait(op, 1000);
+            runAndWait(op, 3000);
 
             RecordedRequest request = server.takeRequest();
             Assert.assertEquals(request.getHeader("user-agent"), userAgentValue);

File: extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java
Patch:
@@ -167,10 +167,10 @@ private String uploadOpenRefineProject(Project project, String token,
             contentHints.setThumbnail(tn); 
 
             File fileMetadata = new File();
-            fileMetadata.setName(name)
+            fileMetadata.setName(name + ".tar.gz")
                 .setDescription(METADATA_DESCRIPTION)
                 .setContentHints(contentHints);
-            FileContent projectContent = new FileContent("application/zip", filePath);
+            FileContent projectContent = new FileContent("application/x-gzip", filePath);
             File file = GoogleAPIExtension.getDriveService(token)
                     .files().create(fileMetadata, projectContent)
                 .setFields("id")

File: main/tests/server/src/com/google/refine/RefineTest.java
Patch:
@@ -95,7 +95,8 @@ public void init() {
             FileUtils.writeStringToFile(jsonPath, "{\"projectIDs\":[]\n" + 
                     ",\"preferences\":{\"entries\":{\"scripting.starred-expressions\":" +
                     "{\"class\":\"com.google.refine.preference.TopList\",\"top\":2147483647," +
-                    "\"list\":[]},\"scripting.expressions\":{\"class\":\"com.google.refine.preference.TopList\",\"top\":100,\"list\":[]}}}}");
+                    "\"list\":[]},\"scripting.expressions\":{\"class\":\"com.google.refine.preference.TopList\",\"top\":100,\"list\":[]}}}}",
+                    "UTF-8"); // JSON is always UTF-8
             FileProjectManager.initialize(workspaceDir);
             
 

File: main/tests/server/src/com/google/refine/importers/JsonImporterTests.java
Patch:
@@ -639,7 +639,7 @@ private void RunTest(String testString, ObjectNode options) {
     private String getComplexJSON(String fileName) throws IOException {
         InputStream in = this.getClass().getClassLoader()
                 .getResourceAsStream(fileName);
-        String content = org.apache.commons.io.IOUtils.toString(in);
+        String content = org.apache.commons.io.IOUtils.toString(in, "UTF-8");
         
         return content;
     }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java
Patch:
@@ -293,7 +293,7 @@ protected List<SnakGroup> getSingleConstraint(PropertyIdValue pid, String qid) {
 
     /**
      * Gets the list of constraints of a particular type for a property
-     * 
+     *
      * @param pid
      *            the property to retrieve the constraints for
      * @param qid
@@ -336,7 +336,8 @@ protected List<Statement> getConstraintStatements(PropertyIdValue pid) {
      *            the property to filter on
      * @return
      */
-    protected List<Value> findValues(List<SnakGroup> groups, String pid) {
+    @Override
+    public List<Value> findValues(List<SnakGroup> groups, String pid) {
         List<Value> results = new ArrayList<>();
         for (SnakGroup group : groups) {
             if (group.getProperty().getId().equals(pid)) {

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -151,7 +151,7 @@ static public void readTable(
                         ImporterUtilities.setupColumns(project, columnNames);
                     }
                 } else { // data lines
-                    Row row = new Row(columnNames.size());
+                    Row row = new Row(cells.size());
 
                     if (storeBlankRows) {
                         rowsWithData++;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java
Patch:
@@ -29,8 +29,8 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
 
+import java.util.List;
 import java.util.Set;
-import java.util.stream.Stream;
 
 /**
  * An object that fetches constraints about properties.
@@ -150,9 +150,9 @@ public interface ConstraintFetcher {
      *            the property to retrieve the constraints for
      * @param qid
      *            the type of the constraints
-     * @return the stream of matching constraint statements
+     * @return the list of matching constraint statements
      */
-    Stream<Statement> getConstraintsByType(PropertyIdValue pid, String qid);
+    List<Statement> getConstraintsByType(PropertyIdValue pid, String qid);
 
     /**
      * Retrieves the lower bound of the range

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java
Patch:
@@ -14,7 +14,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 public class ConflictsWithScrutinizer extends EditScrutinizer {
 
@@ -65,7 +64,7 @@ public void scrutinize(ItemUpdate update) {
         }
 
         for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){
-            List<Statement> statementList = _fetcher.getConstraintsByType(propertyId, CONFLICTS_WITH_CONSTRAINT_QID).collect(Collectors.toList());
+            List<Statement> statementList = _fetcher.getConstraintsByType(propertyId, CONFLICTS_WITH_CONSTRAINT_QID);
             for (Statement statement : statementList) {
                 ConflictsWithConstraint constraint = new ConflictsWithConstraint(statement);
                 PropertyIdValue conflictingPid = constraint.conflictingPid;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java
Patch:
@@ -44,7 +44,6 @@
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
@@ -96,7 +95,7 @@ public void setFetcher(ConstraintFetcher fetcher) {
         scrutinizer.setFetcher(fetcher);
     }
 
-    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {
+    public List<Statement> constraintParameterStatementList(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {
         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue("P2302");
         Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);
 
@@ -108,7 +107,7 @@ public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdVa
         Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL, "P2302$77BD7FE4-C051-4776-855C-543F0CE697D0");
         List<Statement> statements = Collections.singletonList(statement);
 
-        return statements.stream();
+        return statements;
     }
 
 }

File: extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java
Patch:
@@ -11,6 +11,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 import com.google.api.client.auth.oauth2.AuthorizationCodeResponseUrl;
+import com.google.api.client.auth.oauth2.BearerToken;
 import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl;
 import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest;
 import com.google.api.client.auth.oauth2.Credential;
@@ -110,7 +111,7 @@ static public String getTokenFromCode(ButterflyModule module, HttpServletRequest
       }
     
     static public Drive getDriveService(String token) {
-        Credential credential =  new Credential.Builder(null).build().setAccessToken(token);
+        Credential credential =  new Credential.Builder(BearerToken.authorizationHeaderAccessMethod()).build().setAccessToken(token);
 
         return new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential).setHttpRequestInitializer(new HttpRequestInitializer() {
             @Override

File: extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java
Patch:
@@ -195,6 +195,7 @@ static private String uploadSpreadsheet(
         try {
             File body = new File();
             body.setName(name);
+            // TODO: Internationalize (i18n)
             body.setDescription("Spreadsheet uploaded from OpenRefine project: " + name);
             body.setMimeType("application/vnd.google-apps.spreadsheet");
 

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.ImporterUtilities.MultiFileReadingProgress;
+import com.google.refine.importing.EncodingGuesser;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingParser;
 import com.google.refine.importing.ImportingUtilities;
@@ -72,7 +73,7 @@ public ObjectNode createParserUIInitializationData(ImportingJob job,
         ObjectNode options = ParsingUtilities.mapper.createObjectNode();
         JSONUtilities.safePut(options, "includeFileSources", fileRecords.size() > 1);
         JSONUtilities.safePut(options, "includeArchiveFileName", ImportingUtilities.hasArchiveFileField(fileRecords));
-
+        EncodingGuesser.guessInitialEncoding(fileRecords, options);
         return options;
     }
     

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -145,6 +145,8 @@ public boolean isCanceled() {
         ArrayNode fileSelectionIndexes = ParsingUtilities.mapper.createArrayNode();
         JSONUtilities.safePut(config, "fileSelection", fileSelectionIndexes);
         
+        EncodingGuesser.guess(job);
+        
         String bestFormat = ImportingUtilities.autoSelectFiles(job, retrievalRecord, fileSelectionIndexes);
         bestFormat = ImportingUtilities.guessBetterFormat(job, bestFormat);
         

File: extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java
Patch:
@@ -6,6 +6,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import com.fasterxml.jackson.core.JsonGenerator;
+import com.google.refine.commands.Command;
 import com.google.refine.util.ParsingUtilities;
 
 public class CommandUtilities {

File: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.regex.Pattern;
 
 import org.apache.commons.lang.Validate;
-import org.openrefine.wikidata.editing.ConnectionManager;
+import org.openrefine.wikidata.commands.ConnectionManager;
 import org.openrefine.wikidata.editing.EditBatchProcessor;
 import org.openrefine.wikidata.editing.NewItemLibrary;
 import org.openrefine.wikidata.schema.WikibaseSchema;

File: main/src/com/google/refine/exporters/TemplatingExporter.java
Patch:
@@ -57,7 +57,7 @@ public class TemplatingExporter implements WriterExporter {
 
     @Override
     public String getContentType() {
-        return "application/x-unknown";
+        return "text/plain";
     }
     
     protected static class TemplateConfig {

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -737,7 +737,7 @@ public void parseOneFile(
             String wikiUrl = JSONUtilities.getString(options, "wikiUrl", null);
             // Wikidata reconciliation endpoint, hardcoded because the user might not have it in its services
             String reconUrl = JSONUtilities.getString(options, "reconService",
-                  "https://tools.wmflabs.org/openrefine-wikidata/en/api");
+                  "https://wdreconcile.toolforge.org/en/api");
             StandardReconConfig cfg = getReconConfig(reconUrl);
 
             if (wikiUrl != null) {

File: main/src/com/google/refine/importers/tree/XmlImportUtilities.java
Patch:
@@ -47,8 +47,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.fasterxml.jackson.core.JsonParseException;
-
 import com.google.refine.importers.tree.TreeReader.Token;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;

File: main/src/com/google/refine/importing/DefaultImportingController.java
Patch:
@@ -47,7 +47,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.RefineServlet;

File: main/src/com/google/refine/importers/JsonImporter.java
Patch:
@@ -90,6 +90,7 @@ public ObjectNode createParserUIInitializationData(ImportingJob job,
                 File file = ImportingUtilities.getFile(job, firstFileRecord);
                 JsonFactory factory = new JsonFactory();
                 JsonParser parser = factory.createParser(file);
+                parser.enable(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS);
 
                 PreviewParsingState state = new PreviewParsingState();
                 JsonNode rootValue = parseForPreview(parser, state);
@@ -224,6 +225,7 @@ static public class JSONTreeReader implements TreeReader {
         public JSONTreeReader(InputStream is) {
             try {
                 parser = factory.createParser(is);
+                parser.enable(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS);
                 current = null;
                 next  = parser.nextToken(); 
             } catch (IOException e) {

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -46,7 +46,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Map;
 import java.util.Map.Entry;
 
-import org.apache.tools.tar.TarOutputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -178,7 +178,7 @@ public void registerProject(Project project, ProjectMetadata projectMetadata) {
      * @param tos
      * @throws IOException
      */
-    public abstract void exportProject(long projectId, TarOutputStream tos) throws IOException;
+    public abstract void exportProject(long projectId, TarArchiveOutputStream tos) throws IOException;
 
 
     /**

File: main/tests/server/src/com/google/refine/ProjectManagerStub.java
Patch:
@@ -36,7 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.apache.tools.tar.TarOutputStream;
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 
 import com.google.refine.ProjectManager;
 import com.google.refine.ProjectMetadata;
@@ -56,7 +56,7 @@ public void deleteProject(long projectID) {
     }
 
     @Override
-    public void exportProject(long projectId, TarOutputStream tos) throws IOException {
+    public void exportProject(long projectId, TarArchiveOutputStream tos) throws IOException {
         // empty
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java
Patch:
@@ -144,7 +144,6 @@ public interface ConstraintFetcher {
     boolean usableOnItems(PropertyIdValue pid);
 
     /**
-<<<<<<< HEAD
      * Retrieves the lower bound of the range
      * required in difference-within-range constraint
      *

File: extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java
Patch:
@@ -144,7 +144,6 @@ public interface ConstraintFetcher {
     boolean usableOnItems(PropertyIdValue pid);
 
     /**
-<<<<<<< HEAD
      * Retrieves the lower bound of the range
      * required in difference-within-range constraint
      *

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizer.java
Patch:
@@ -15,6 +15,7 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
         PropertyIdValue pid = snak.getPropertyId();
         if(!_fetcher.usableOnItems(pid)) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
+            issue.setProperty("property_entity", pid);
             issue.setProperty("example_entity", entityId);
             addIssue(issue);
         }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizer.java
Patch:
@@ -15,6 +15,7 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
         PropertyIdValue pid = snak.getPropertyId();
         if(!_fetcher.usableOnItems(pid)) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
+            issue.setProperty("property_entity", pid);
             issue.setProperty("example_entity", entityId);
             addIssue(issue);
         }

File: main/src/com/google/refine/model/Cell.java
Patch:
@@ -73,7 +73,7 @@ public Object getField(String name, Properties bindings) {
             return value;
         } else if ("recon".equals(name)) {
             return recon;
-        } else if ("error".equals(name)) {
+        } else if ("errorMessage".equals(name)) {
             return getErrorMessage();
         }
         return null;

File: main/tests/server/src/com/google/refine/model/CellTests.java
Patch:
@@ -101,7 +101,7 @@ public void getMessageFromErrorCell() throws Exception {
         String errorMessage = "Sample error message";
         EvalError err = new EvalError(errorMessage);
         Cell c = new Cell(err, null);
-        assertEquals(c.getField("error", null), errorMessage);
+        assertEquals(c.getField("errorMessage", null), errorMessage);
         assertEquals(c.getField("value", null), err);
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java
Patch:
@@ -70,7 +70,7 @@ public class EditBatchProcessor {
     private int globalCursor;
     private Map<String, EntityDocument> currentDocs;
     private int batchSize;
-    protected static final String MAX_LAG_KEY = "wikibase:upload:maxLag";
+    protected static final String MAX_LAG_KEY = "wikibase.upload.maxLag";
     protected static final int MAX_LAG_DEFAULT = 5;      // 5 second default maxLag
     protected PreferenceStore prefStore = ProjectManager.singleton.getPreferenceStore();
 

File: main/src/com/google/refine/exporters/XlsExporter.java
Patch:
@@ -65,7 +65,7 @@ public XlsExporter(boolean xml) {
     
     @Override
     public String getContentType() {
-        return xml ? "application/xlsx" : "application/xls";
+        return xml ? "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : "application/vnd.ms-excel";
     }
 
     @Override

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -71,9 +71,6 @@ public class RefineServlet extends Butterfly {
     static public String FULL_VERSION = "";
     static public String FULLNAME = "OpenRefine ";
 
-
-    static public final String AGENT_ID = "/en/google_refine"; // TODO: Unused?  Freebase ID
-    
     static final long serialVersionUID = 2386057901503517403L;
 
     static private final String JAVAX_SERVLET_CONTEXT_TEMPDIR = "javax.servlet.context.tempdir";

File: main/src/com/google/refine/importers/JsonImporter.java
Patch:
@@ -357,6 +357,8 @@ public Token next() throws TreeReaderException {
                     }
                 }
                 next = parser.nextToken();
+            } catch (JsonParseException e) {
+                throw new TreeReaderException(e.getOriginalMessage());
             } catch (IOException e) {
                 throw new TreeReaderException(e);
             }

File: main/src/com/google/refine/importing/DefaultImportingController.java
Patch:
@@ -47,6 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.RefineServlet;

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -147,7 +147,7 @@ static public void readTable(
                     }
                 } else { // data lines
                     Row row = new Row(columnNames.size());
-                    
+
                     if (storeBlankRows) {
                         rowsWithData++;
                     } else if (cells.size() > 0) {

File: main/src/com/google/refine/model/Column.java
Patch:
@@ -45,7 +45,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;
-import com.google.refine.InterProjectModel;
 import com.google.refine.model.recon.ReconConfig;
 import com.google.refine.util.ParsingUtilities;
 
@@ -122,8 +121,8 @@ public ReconStats getReconStats() {
      * <p>
      * If you are modifying something that requires this to be called, you
      * probably also need to call
-     * {@link InterProjectModel#flushJoinsInvolvingProjectColumn(long, String)}.
-     * e.g. ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, column.getName())
+     * {@link com.google.refine.LookupCacheManager#flushLookupsInvolvingProjectColumn(long, String)}
+     * e.g. ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, column.getName())
      */
     public void clearPrecomputes() {
         if (_precomputes != null) {

File: main/src/com/google/refine/model/Project.java
Patch:
@@ -105,7 +105,7 @@ public void dispose() {
                 logger.warn("Error signaling overlay model before disposing", e);
             }
         }
-        ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProject(this.id);
+        ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(this.id);
         // The rest of the project should get garbage collected when we return.
     }
 

File: main/src/com/google/refine/model/changes/CellChange.java
Patch:
@@ -64,7 +64,7 @@ public void apply(Project project) {
         
         Column column = project.columnModel.getColumnByCellIndex(cellIndex);
         column.clearPrecomputes();
-        ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, column.getName());
+        ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, column.getName());
     }
 
     @Override
@@ -73,7 +73,7 @@ public void revert(Project project) {
         
         Column column = project.columnModel.getColumnByCellIndex(cellIndex);
         column.clearPrecomputes();
-        ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, column.getName());
+        ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, column.getName());
     }
     
     @Override

File: main/src/com/google/refine/model/changes/ColumnRenameChange.java
Patch:
@@ -55,7 +55,7 @@ public ColumnRenameChange(String oldColumnName, String newColumnName) {
     @Override
     public void apply(Project project) {
         synchronized (project) {
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _oldColumnName);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _oldColumnName);
             project.columnModel.getColumnByName(_oldColumnName).setName(_newColumnName);
             project.columnModel.update();
         }
@@ -64,7 +64,7 @@ public void apply(Project project) {
     @Override
     public void revert(Project project) {
         synchronized (project) {
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _newColumnName);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _newColumnName);
             project.columnModel.getColumnByName(_newColumnName).setName(_oldColumnName);
             project.columnModel.update();
         }

File: main/src/com/google/refine/model/changes/ColumnSplitChange.java
Patch:
@@ -125,7 +125,7 @@ public void apply(Project project) {
                     project.columnModel.allocateNewCellIndex();
                 }
                 
-                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _columnName);
+                ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _columnName);
                 _column = project.columnModel.getColumnByName(_columnName);
                 _columnIndex = project.columnModel.getColumnIndexByName(_columnName);
                 
@@ -240,7 +240,7 @@ public void revert(Project project) {
             
             for (int i = 0; i < _columnNames.size(); i++) {
                 project.columnModel.columns.remove(_columnIndex + 1);
-                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _columnNames.get(i));
+                ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _columnNames.get(i));
             }
             
             project.columnModel.columnGroups.clear();

File: main/src/com/google/refine/model/changes/MassCellChange.java
Patch:
@@ -94,7 +94,7 @@ public void apply(Project project) {
             if (_commonColumnName != null) {
                 Column column = project.columnModel.getColumnByName(_commonColumnName);
                 column.clearPrecomputes();
-                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
+                ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _commonColumnName);
             }
             
             if (_updateRowContextDependencies) {
@@ -115,7 +115,7 @@ public void revert(Project project) {
             if (_commonColumnName != null) {
                 Column column = project.columnModel.getColumnByName(_commonColumnName);
                 column.clearPrecomputes();
-                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
+                ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _commonColumnName);
             }
             
             if (_updateRowContextDependencies) {

File: main/src/com/google/refine/model/changes/MassReconChange.java
Patch:
@@ -82,7 +82,7 @@ protected void switchRecons(Project project, Map<Long, Recon> reconMap) {
                             // skip the flushing if already done
                             String columnName = project.columnModel.getColumnByCellIndex(c).getName();
                             if (!flushedColumn.contains(columnName)) {
-                                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, 
+                                ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id,
                                     columnName);
                                 flushedColumn.add(columnName);
                             }

File: main/src/com/google/refine/model/changes/MassRowChange.java
Patch:
@@ -62,7 +62,7 @@ public void apply(Project project) {
             project.rows.addAll(_newRows);
             
             project.columnModel.clearPrecomputes();
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProject(project.id);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(project.id);
             
             project.update();
         }

File: main/src/com/google/refine/model/changes/MassRowColumnChange.java
Patch:
@@ -81,7 +81,7 @@ public void apply(Project project) {
             project.rows.clear();
             project.rows.addAll(_newRows);
             
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProject(project.id);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(project.id);
             
             project.update();
         }
@@ -99,7 +99,7 @@ public void revert(Project project) {
             project.rows.clear();
             project.rows.addAll(_oldRows);
             
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProject(project.id);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(project.id);
             
             project.update();
         }

File: main/src/com/google/refine/model/changes/ReconChange.java
Patch:
@@ -109,7 +109,7 @@ public void apply(Project project) {
             column.setReconStats(_newReconStats);
             
             column.clearPrecomputes();
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _commonColumnName);
         }
     }
     
@@ -123,7 +123,7 @@ public void revert(Project project) {
             column.setReconStats(_oldReconStats);
             
             column.clearPrecomputes();
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProjectColumn(project.id, _commonColumnName);
         }
     }
     

File: main/src/com/google/refine/model/changes/RowRemovalChange.java
Patch:
@@ -72,7 +72,7 @@ public void apply(Project project) {
             }
             
             project.columnModel.clearPrecomputes();
-            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProject(project.id);
+            ProjectManager.singleton.getLookupCacheManager().flushLookupsInvolvingProject(project.id);
             
             project.update();
         }

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -76,6 +76,7 @@ public ObjectNode createParserUIInitializationData(ImportingJob job,
         JSONUtilities.safePut(options, "guessCellValueTypes", false);
         JSONUtilities.safePut(options, "processQuotes", true);
         JSONUtilities.safePut(options, "quoteCharacter", String.valueOf(CSVParser.DEFAULT_QUOTE_CHARACTER));
+        JSONUtilities.safePut(options, "trimStrings", true);
 
         return options;
     }

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -161,12 +161,14 @@ private void doInitializeParserUI(
             
             List<Sheet> worksheetEntries =
                     getWorksheetEntriesForDoc(token, spreadSheetId);
+            int workSheetIndex = 0;
             for (Sheet sheet : worksheetEntries) {
                 ObjectNode worksheetO = ParsingUtilities.mapper.createObjectNode();
                 JSONUtilities.safePut(worksheetO, "name", sheet.getProperties().getTitle());
                 JSONUtilities.safePut(worksheetO, "rows", sheet.getProperties().getGridProperties().getRowCount());
                 JSONUtilities.safePut(worksheetO, "link", 
                         "https://sheets.googleapis.com/v4/spreadsheets/" + spreadSheetId + "/values/" + sheet.getProperties().getTitle());
+                JSONUtilities.safePut(worksheetO, "worksheetIndex", workSheetIndex++);
                 
                 JSONUtilities.append(worksheets, worksheetO);
             }

File: main/src/com/google/refine/importers/tree/XmlImportUtilities.java
Patch:
@@ -506,6 +506,9 @@ static protected void processSubRecord(
                 String colName = parser.getFieldName();
                 if (value instanceof String) {
                     String text = (String) value;
+                    if(parameter.trimStrings) {
+                        text = text.trim();
+                    }
                     addCell(project, thisColumnGroup, record, colName, text, 
                             parameter.storeEmptyStrings, parameter.guessDataType);
                 } else {

File: extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java
Patch:
@@ -183,7 +183,7 @@ public static String extractSpreadSheetId(String url)
          throws IllegalArgumentException {
       URL urlAsUrl;
       
-      Matcher matcher = Pattern.compile("(?<=\\/d\\/).*(?=\\/.*)").matcher(url);
+      Matcher matcher = Pattern.compile("(?<=/d/).*?(?=[/?#]|$)").matcher(url);
       if (matcher.find()) {
           return matcher.group(0);
       }

File: main/src/com/google/refine/model/Cell.java
Patch:
@@ -73,6 +73,8 @@ public Object getField(String name, Properties bindings) {
             return value;
         } else if ("recon".equals(name)) {
             return recon;
+        } else if ("error".equals(name)) {
+            return getErrorMessage();
         }
         return null;
     }

File: extensions/database/src/com/google/refine/extension/database/DatabaseService.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.google.refine.extension.database.sqlite.SQLiteDatabaseService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -57,6 +58,7 @@ public static class DBType {
                 DatabaseService.DBType.registerDatabase(MySQLDatabaseService.DB_NAME, MySQLDatabaseService.getInstance());
                 DatabaseService.DBType.registerDatabase(PgSQLDatabaseService.DB_NAME, PgSQLDatabaseService.getInstance());
                 DatabaseService.DBType.registerDatabase(MariaDBDatabaseService.DB_NAME, MariaDBDatabaseService.getInstance());
+                DatabaseService.DBType.registerDatabase(SQLiteDatabaseService.DB_NAME, SQLiteDatabaseService.getInstance());
 
             } catch (Exception e) {
                 logger.error("Exception occurred while trying to prepare databases!", e);

File: extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java
Patch:
@@ -60,6 +60,9 @@ public class DBExtensionTests {
     protected final String DEFAULT_MARIADB_USER = "root";
     protected final String DEFAULT_MARIADB_PASSWORD = "secret";
     protected final String DEFAULT_MARIADB_NAME = "testdb";
+
+    protected final String SQLITE_DB_NAME = "sqlite";
+    protected final String DEFAULT_SQLITE_DB_NAME = "extension_test_db.sqlite";
     
     protected final String DEFAULT_TEST_TABLE = "test_data";
     

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbDateConstantTest.java
Patch:
@@ -94,8 +94,8 @@ public void testToday() {
     	Calendar calendar = Calendar.getInstance();
     	TimeValue expectedDate = Datamodel.makeTimeValue(
     			calendar.get(Calendar.YEAR),
-    			(byte)calendar.get(Calendar.MONTH),
-    			(byte)(calendar.get(Calendar.DAY_OF_MONTH)+1),
+    			(byte)(calendar.get(Calendar.MONTH)+1),
+    			(byte)calendar.get(Calendar.DAY_OF_MONTH),
     			(byte)0, (byte)0, (byte)0, (byte)11, 0,0,0, TimeValue.CM_GREGORIAN_PRO);
     	evaluatesTo(expectedDate, new WbDateConstant("TODAY"));
     }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java
Patch:
@@ -112,7 +112,7 @@ public static TimeValue parse(String datestamp)
 	        Calendar calendar = Calendar.getInstance();
 	    	TimeValue todaysDate = Datamodel.makeTimeValue(
 	    			calendar.get(Calendar.YEAR),
-	    			(byte)calendar.get(Calendar.MONTH),
+	    			(byte)(calendar.get(Calendar.MONTH)+1),
 	    			(byte)calendar.get(Calendar.DAY_OF_MONTH),
 	    			(byte)0, (byte)0, (byte)0, (byte)11, 0,0,0, TimeValue.CM_GREGORIAN_PRO);
 	    	return todaysDate;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbDateConstantTest.java
Patch:
@@ -95,7 +95,7 @@ public void testToday() {
     	TimeValue expectedDate = Datamodel.makeTimeValue(
     			calendar.get(Calendar.YEAR),
     			(byte)calendar.get(Calendar.MONTH),
-    			(byte)calendar.get(Calendar.DAY_OF_MONTH),
+    			(byte)(calendar.get(Calendar.DAY_OF_MONTH)+1),
     			(byte)0, (byte)0, (byte)0, (byte)11, 0,0,0, TimeValue.CM_GREGORIAN_PRO);
     	evaluatesTo(expectedDate, new WbDateConstant("TODAY"));
     }

File: main/src/com/google/refine/commands/expr/GetStarredExpressionsCommand.java
Patch:
@@ -27,6 +27,7 @@
 package com.google.refine.commands.expr;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -59,7 +60,8 @@ protected ExpressionList(List<Expression> e) {
     }
     
     public static ExpressionList getExpressionsList() {
-        List<String> starredExpressions = ((TopList)ProjectManager.singleton.getPreferenceStore().get("scripting.starred-expressions")).getList();
+        TopList topList = (TopList)ProjectManager.singleton.getPreferenceStore().get("scripting.starred-expressions");
+		List<String> starredExpressions = topList == null ? Collections.emptyList() : topList.getList();
         return new ExpressionList(starredExpressions.stream().map(e -> new Expression(e)).collect(Collectors.toList()));
     }
     

File: extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java
Patch:
@@ -117,7 +117,7 @@ private void sendBatch(List<RowData> rows) {
     }
     
     public String getUrl() throws UnsupportedEncodingException {
-        String urlString= "https://docs.google.com/spreadsheets/d/" + spreadsheetId + "/edit#gid=0";
-        return URLEncoder.encode(urlString, "UTF-8");
+        String urlString = "https://docs.google.com/spreadsheets/d/" + spreadsheetId + "/edit#gid=0";
+        return urlString;
     }
 }

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -68,7 +68,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  */
 public abstract class ProjectManager {
     // last n expressions used across all projects
-    static protected final int s_expressionHistoryMax = 100;
+    static public final int EXPRESSION_HISTORY_MAX = 100;
 
     // If a project has been idle this long, flush it from memory
     static protected final int PROJECT_FLUSH_DELAY = 1000 * 60 * 15; // 15 minutes
@@ -610,7 +610,7 @@ public void addLatestExpression(String s) {
     * @param ps
     */
    static protected void preparePreferenceStore(PreferenceStore ps) {
-       ps.put("scripting.expressions", new TopList(s_expressionHistoryMax));
+       ps.put("scripting.expressions", new TopList(EXPRESSION_HISTORY_MAX));
        ps.put("scripting.starred-expressions", new TopList(Integer.MAX_VALUE));
    }
 }

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -68,7 +68,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  */
 public abstract class ProjectManager {
     // last n expressions used across all projects
-    static protected final int s_expressionHistoryMax = 100;
+    static public final int EXPRESSION_HISTORY_MAX = 100;
 
     // If a project has been idle this long, flush it from memory
     static protected final int PROJECT_FLUSH_DELAY = 1000 * 60 * 15; // 15 minutes
@@ -610,7 +610,7 @@ public void addLatestExpression(String s) {
     * @param ps
     */
    static protected void preparePreferenceStore(PreferenceStore ps) {
-       ps.put("scripting.expressions", new TopList(s_expressionHistoryMax));
+       ps.put("scripting.expressions", new TopList(EXPRESSION_HISTORY_MAX));
        ps.put("scripting.starred-expressions", new TopList(Integer.MAX_VALUE));
    }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbQuantityExpr.java
Patch:
@@ -61,7 +61,7 @@ public WbQuantityExpr(@JsonProperty("amount") WbExpression<? extends StringValue
     @Override
     public QuantityValue evaluate(ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
-        StringValue amount = getLanguageExpr().evaluate(ctxt);
+        StringValue amount = getAmountExpr().evaluate(ctxt);
         // we know the amount is nonnull, nonempty here
 
         BigDecimal parsedAmount = null;
@@ -99,7 +99,7 @@ public QuantityValue evaluate(ExpressionContext ctxt)
     }
 
     @JsonProperty("amount")
-    public WbExpression<? extends StringValue> getLanguageExpr() {
+    public WbExpression<? extends StringValue> getAmountExpr() {
         return amountExpr;
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java
Patch:
@@ -59,7 +59,7 @@ public StringValue fromCell(Cell cell, ExpressionContext ctxt)
         if (!cell.value.toString().isEmpty()) {
         	String stringValue = cell.value.toString();
         	if (cell.value instanceof Double && ((Double)cell.value) % 1 == 0) {
-        		stringValue = Integer.toString(((Double)cell.value).intValue());
+        		stringValue = Long.toString(((Double)cell.value).longValue());
         	}
             return Datamodel.makeStringValue(stringValue.trim());
         }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbQuantityExpr.java
Patch:
@@ -61,7 +61,7 @@ public WbQuantityExpr(@JsonProperty("amount") WbExpression<? extends StringValue
     @Override
     public QuantityValue evaluate(ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
-        StringValue amount = getLanguageExpr().evaluate(ctxt);
+        StringValue amount = getAmountExpr().evaluate(ctxt);
         // we know the amount is nonnull, nonempty here
 
         BigDecimal parsedAmount = null;
@@ -99,7 +99,7 @@ public QuantityValue evaluate(ExpressionContext ctxt)
     }
 
     @JsonProperty("amount")
-    public WbExpression<? extends StringValue> getLanguageExpr() {
+    public WbExpression<? extends StringValue> getAmountExpr() {
         return amountExpr;
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java
Patch:
@@ -59,7 +59,7 @@ public StringValue fromCell(Cell cell, ExpressionContext ctxt)
         if (!cell.value.toString().isEmpty()) {
         	String stringValue = cell.value.toString();
         	if (cell.value instanceof Double && ((Double)cell.value) % 1 == 0) {
-        		stringValue = Integer.toString(((Double)cell.value).intValue());
+        		stringValue = Long.toString(((Double)cell.value).longValue());
         	}
             return Datamodel.makeStringValue(stringValue.trim());
         }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QuantityScrutinizer.java
Patch:
@@ -1,10 +1,8 @@
 package org.openrefine.wikidata.qa.scrutinizers;
 
 import java.util.Set;
-import java.util.stream.Collectors;
 
 import org.openrefine.wikidata.qa.QAWarning;
-import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStatementGroupExpr.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
-import org.openrefine.wikidata.utils.StatementGroupJson;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;

File: extensions/wikidata/src/org/openrefine/wikidata/updates/ItemUpdate.java
Patch:
@@ -32,12 +32,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.function.Function;
 import java.util.stream.Collectors;
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.utils.StatementGroupJson;
-import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.implementation.StatementGroupImpl;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;

File: extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java
Patch:
@@ -29,6 +29,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.EntityDocument;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.wikibaseapi.ApiConnection;
+import org.wikidata.wdtk.wikibaseapi.BasicApiConnection;
 import org.wikidata.wdtk.wikibaseapi.WikibaseDataFetcher;
 import org.wikidata.wdtk.wikibaseapi.apierrors.MediaWikiApiErrorException;
 
@@ -44,7 +45,7 @@ public class EntityCache {
     private WikibaseDataFetcher _fetcher;
 
     private EntityCache() {
-        ApiConnection connection = ApiConnection.getWikidataApiConnection();
+        ApiConnection connection = BasicApiConnection.getWikidataApiConnection();
         _fetcher = new WikibaseDataFetcher(connection, Datamodel.SITE_WIKIDATA);
 
         _cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)

File: extensions/wikidata/src/org/openrefine/wikidata/utils/StatementGroupJson.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.List;
 
-import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.openrefine.wikidata.commands;
 
-import static org.testng.Assert.assertEquals;
 import static org.mockito.Mockito.when;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java
Patch:
@@ -23,9 +23,9 @@
  ******************************************************************************/
 package org.openrefine.wikidata.commands;
 
-import static org.testng.Assert.assertEquals;
 import static org.mockito.Mockito.when;
 import static org.openrefine.wikidata.testing.TestingData.jsonFromFile;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommandTest.java
Patch:
@@ -23,9 +23,9 @@
  ******************************************************************************/
 package org.openrefine.wikidata.commands;
 
-import static org.testng.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 import static org.openrefine.wikidata.testing.TestingData.jsonFromFile;
+import static org.testng.Assert.assertTrue;
 
 import java.io.IOException;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java
Patch:
@@ -23,8 +23,8 @@
  ******************************************************************************/
 package org.openrefine.wikidata.commands;
 
-import static org.testng.Assert.assertEquals;
 import static org.mockito.Mockito.when;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/NewItemLibraryTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java
Patch:
@@ -45,7 +45,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.StatementRank;
 
-import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
 import com.google.refine.util.TestUtils;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/PointerExtractorTest.java
Patch:
@@ -23,6 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.updates.scheduler;
 
+import static org.mockito.Mockito.mock;
 import static org.testng.Assert.assertEquals;
 
 import java.math.BigDecimal;
@@ -41,6 +42,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
 import org.wikidata.wdtk.datamodel.interfaces.StatementRank;
 import org.wikidata.wdtk.datamodel.interfaces.TimeValue;
+import org.wikidata.wdtk.datamodel.interfaces.UnsupportedValue;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
 
 public class PointerExtractorTest {
@@ -73,6 +75,7 @@ public void testExtractDatavalues() {
         assertEmpty(Datamodel.makeQuantityValue(new BigDecimal("898")));
         assertEmpty(Datamodel.makeQuantityValue(new BigDecimal("7.87"), "http://www.wikidata.org/entity/Q34"));
         assertEmpty(Datamodel.makeTimeValue(1898, (byte) 2, (byte) 3, TimeValue.CM_GREGORIAN_PRO));
+        assertEmpty(mock(UnsupportedValue.class));
     }
 
     @Test

File: main/tests/server/src/com/google/refine/commands/lang/LoadLanguageCommandTests.java
Patch:
@@ -58,7 +58,7 @@ public void testLoadUnknownLanguage() throws ServletException, IOException {
 		
 		JsonNode response = ParsingUtilities.mapper.readValue(writer.toString(), JsonNode.class);
 		assertTrue(response.has("dictionary"));
-		ssertEquals(response.get("lang").asText(), "foobar");
+		assertEquals(response.get("lang").asText(), "foobar");
 	}
 		
 	

File: extensions/wikidata/src/org/openrefine/wikidata/editing/ReconEntityRewriter.java
Patch:
@@ -89,6 +89,7 @@ public ItemIdValue copy(ItemIdValue value) {
     }
 
     public ItemUpdate rewrite(ItemUpdate update) {
+    	ItemIdValue subject = copy(update.getItemId());
         Set<MonolingualTextValue> labels = update.getLabels().stream().map(l -> copy(l)).collect(Collectors.toSet());
         Set<MonolingualTextValue> labelsIfNew = update.getLabelsIfNew().stream().map(l -> copy(l)).collect(Collectors.toSet());
         Set<MonolingualTextValue> descriptions = update.getDescriptions().stream().map(l -> copy(l))
@@ -100,6 +101,6 @@ public ItemUpdate rewrite(ItemUpdate update) {
                 .collect(Collectors.toList());
         Set<Statement> deletedStatements = update.getDeletedStatements().stream().map(l -> copy(l))
                 .collect(Collectors.toSet());
-        return new ItemUpdate(update.getItemId(), addedStatements, deletedStatements, labels, labelsIfNew, descriptions, descriptionsIfNew, aliases);
+        return new ItemUpdate(subject, addedStatements, deletedStatements, labels, labelsIfNew, descriptions, descriptionsIfNew, aliases);
     }
 }

File: main/src/com/google/refine/importing/DefaultImportingController.java
Patch:
@@ -50,6 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.RefineServlet;
+import com.google.refine.commands.Command;
 import com.google.refine.commands.HttpUtilities;
 import com.google.refine.importing.ImportingManager.Format;
 import com.google.refine.util.JSONUtilities;
@@ -218,7 +219,7 @@ private void doInitializeParserUI(HttpServletRequest request, HttpServletRespons
             JSONUtilities.safePut(result, "status", "ok");
             JSONUtilities.safePut(result, "options", options);
             
-            HttpUtilities.respond(response, result.toString());
+            Command.respondJSON(response, result);
         } else {
             HttpUtilities.respond(response, "error", "Unrecognized format or format has no parser");
         }

File: main/tests/server/src/com/google/refine/commands/project/SetProjectMetadataCommandTests.java
Patch:
@@ -58,6 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineTest;
+import com.google.refine.commands.Command;
 import com.google.refine.commands.project.SetProjectMetadataCommand;
 import com.google.refine.model.Project;
 import com.google.refine.util.ParsingUtilities;
@@ -101,6 +102,7 @@ public void SetUp() throws IOException {
         
         // mock dependencies
         when(request.getParameter("project")).thenReturn(PROJECT_ID);
+        when(request.getParameter("csrf_token")).thenReturn(Command.csrfFactory.getFreshToken());
         when(projMan.getProject(anyLong())).thenReturn(proj);
         when(proj.getMetadata()).thenReturn(metadata);
         

File: main/tests/server/src/com/google/refine/commands/recon/ReconJudgeOneCellCommandTest.java
Patch:
@@ -82,6 +82,7 @@ public void setUp() {
         response = mock(HttpServletResponse.class);
         
         when(request.getParameter("project")).thenReturn(String.valueOf(project.id));
+        when(request.getParameter("csrf_token")).thenReturn(Command.csrfFactory.getFreshToken());
         
         writer = mock(PrintWriter.class);
         try {

File: main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java
Patch:
@@ -184,7 +184,7 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
             String s = value instanceof String ? ((String) value) : value.toString();
             String[] values = null;
             if("lengths".equals(_mode)) {
-                if (_fieldLengths.length >= 0 && _fieldLengths[0] > 0) {
+                if (_fieldLengths.length > 0 && _fieldLengths[0] > 0) {
                     values = new String[_fieldLengths.length];
                     
                     int lastIndex = 0;

File: main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java
Patch:
@@ -184,7 +184,7 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
             String s = value instanceof String ? ((String) value) : value.toString();
             String[] values = null;
             if("lengths".equals(_mode)) {
-                if (_fieldLengths.length >= 0 && _fieldLengths[0] > 0) {
+                if (_fieldLengths.length > 0 && _fieldLengths[0] > 0) {
                     values = new String[_fieldLengths.length];
                     
                     int lastIndex = 0;

File: main/src/com/google/refine/clustering/binning/BinningClusterer.java
Patch:
@@ -242,6 +242,7 @@ protected static Map<String,Object> entryToMap(Entry<String,Integer> entry) {
     public List<List<ClusteredEntry>> getJsonRepresentation() {
         EntriesComparator c = new EntriesComparator();
         return _clusters.stream()
+        		.filter(m -> m.size() > 1)
                 .map(m -> m.entrySet().stream()
                         .sorted(c)
                         .map(e -> new ClusteredEntry(e.getKey(), e.getValue()))

File: main/src/com/google/refine/browsing/facets/ScatterplotFacet.java
Patch:
@@ -104,7 +104,7 @@ public static class ScatterplotFacetConfig implements FacetConfig {
         protected int rotation;
     
         @JsonIgnore
-        protected double l;
+        protected double l = 1.;
         @JsonProperty(DOT)
         protected double dot;
     

File: main/src/com/google/refine/browsing/facets/ScatterplotFacet.java
Patch:
@@ -104,7 +104,7 @@ public static class ScatterplotFacetConfig implements FacetConfig {
         protected int rotation;
     
         @JsonIgnore
-        protected double l;
+        protected double l = 1.;
         @JsonProperty(DOT)
         protected double dot;
     

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java
Patch:
@@ -34,21 +34,22 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.openrefine.wikidata.testing.TestingData;
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 
-import com.google.refine.RefineTest;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
 
-public abstract class CommandTest extends RefineTest {
+public abstract class CommandTest extends WikidataRefineTest {
 
     protected Project project = null;
     protected HttpServletRequest request = null;
     protected HttpServletResponse response = null;
     protected StringWriter writer = null;
 
     protected Command command = null;
+   
 
     @BeforeMethod(alwaysRun = true)
     public void setUpProject() {

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/NewItemLibraryTest.java
Patch:
@@ -30,6 +30,7 @@
 
 import org.openrefine.wikidata.testing.JacksonSerializationTest;
 import org.openrefine.wikidata.testing.TestingData;
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
@@ -39,7 +40,7 @@
 import com.google.refine.model.Recon;
 import com.google.refine.model.recon.StandardReconConfig;
 
-public class NewItemLibraryTest extends RefineTest {
+public class NewItemLibraryTest extends WikidataRefineTest {
 
     private NewItemLibrary library;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java
Patch:
@@ -33,6 +33,7 @@
 
 import org.openrefine.wikidata.schema.WikibaseSchema;
 import org.openrefine.wikidata.testing.TestingData;
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.openrefine.wikidata.updates.ItemUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.Test;
@@ -48,7 +49,7 @@
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
 
-public class QuickStatementsExporterTest extends RefineTest {
+public class QuickStatementsExporterTest extends WikidataRefineTest {
 
     private QuickStatementsExporter exporter = new QuickStatementsExporter();
     private ItemIdValue newIdA = TestingData.newIdA;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java
Patch:
@@ -4,14 +4,15 @@
 import java.io.StringWriter;
 import java.util.Properties;
 
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.annotations.Test;
 
 import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
 import com.google.refine.util.TestUtils;
 
-public class SchemaExporterTest extends RefineTest {
+public class SchemaExporterTest extends WikidataRefineTest {
 	
 	private SchemaExporter exporter = new SchemaExporter();
 	

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java
Patch:
@@ -32,10 +32,10 @@
 import java.io.StringWriter;
 import java.util.Properties;
 
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.history.Change;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
@@ -46,7 +46,7 @@
 
 import edu.mit.simile.butterfly.ButterflyModule;
 
-public abstract class OperationTest extends RefineTest {
+public abstract class OperationTest extends WikidataRefineTest {
 
     protected Project project = null;
     protected ButterflyModule module = null;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/ExpressionContextTest.java
Patch:
@@ -26,13 +26,13 @@
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNull;
 
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
 
-public class ExpressionContextTest extends RefineTest {
+public class ExpressionContextTest extends WikidataRefineTest {
 
     Project project = null;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbExpressionTest.java
Patch:
@@ -29,17 +29,17 @@
 import org.openrefine.wikidata.qa.QAWarningStore;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
 import org.openrefine.wikidata.testing.TestingData;
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 
-import com.google.refine.RefineTest;
 import com.google.refine.model.Cell;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Row;
 
-public class WbExpressionTest<T> extends RefineTest {
+public class WbExpressionTest<T> extends WikidataRefineTest {
 
     protected Project project;
     protected Row row;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.List;
 
 import org.openrefine.wikidata.testing.TestingData;
+import org.openrefine.wikidata.testing.WikidataRefineTest;
 import org.openrefine.wikidata.updates.ItemUpdate;
 import org.openrefine.wikidata.updates.ItemUpdateBuilder;
 import org.testng.annotations.BeforeMethod;
@@ -47,13 +48,12 @@
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.TimeValue;
 
-import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Project;
 import com.google.refine.util.TestUtils;
 
-public class WikibaseSchemaTest extends RefineTest {
+public class WikibaseSchemaTest extends WikidataRefineTest {
 
     private ItemIdValue qid1 = Datamodel.makeWikidataItemIdValue("Q1377");
     private ItemIdValue qid2 = Datamodel.makeWikidataItemIdValue("Q865528");

File: main/tests/server/src/com/google/refine/RefineTest.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 
 import org.apache.commons.io.FileUtils;
+import org.powermock.modules.testng.PowerMockTestCase;
 import org.slf4j.Logger;
 import org.testng.Assert;
 import org.testng.annotations.AfterMethod;
@@ -75,7 +76,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 /**
  * A base class containing various utilities to help testing Refine.
  */
-public class RefineTest {
+public class RefineTest extends PowerMockTestCase {
 
     protected Logger logger;
     
@@ -194,7 +195,7 @@ protected Project createCSVProject(String projectName, String input) {
      * @param guessValueType
      * @param ignoreQuotes
      */
-    private void prepareImportOptions(ObjectNode options,
+    public static void prepareImportOptions(ObjectNode options,
             String sep, int limit, int skip, int ignoreLines,
             int headerLines, boolean guessValueType, boolean ignoreQuotes) {
             

File: extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import org.openrefine.wikidata.qa.scrutinizers.CalendarScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.DistinctValuesScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.EditScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.EntityTypeScrutinizer;
@@ -79,6 +80,7 @@ public EditInspector(QAWarningStore warningStore) {
         register(new QuantityScrutinizer());
         register(new RestrictedValuesScrutinizer());
         register(new EntityTypeScrutinizer());
+        register(new CalendarScrutinizer());
     }
 
     /**

File: main/src/com/google/refine/clustering/binning/BinningClusterer.java
Patch:
@@ -242,6 +242,7 @@ protected static Map<String,Object> entryToMap(Entry<String,Integer> entry) {
     public List<List<ClusteredEntry>> getJsonRepresentation() {
         EntriesComparator c = new EntriesComparator();
         return _clusters.stream()
+        		.filter(m -> m.size() > 1)
                 .map(m -> m.entrySet().stream()
                         .sorted(c)
                         .map(e -> new ClusteredEntry(e.getKey(), e.getValue()))

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java
Patch:
@@ -37,9 +37,9 @@
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 
+import com.google.refine.RefineTest;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
 
 public abstract class CommandTest extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.openrefine.wikidata.commands;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.commands;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 import static org.mockito.Mockito.when;
 import static org.openrefine.wikidata.testing.TestingData.jsonFromFile;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommandTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.commands;
 
-import static org.junit.Assert.assertTrue;
+import static org.testng.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 import static org.openrefine.wikidata.testing.TestingData.jsonFromFile;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.commands;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 import static org.mockito.Mockito.when;
 
 import java.io.IOException;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.editing;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -51,7 +51,7 @@
 import org.wikidata.wdtk.wikibaseapi.WikibaseDataFetcher;
 import org.wikidata.wdtk.wikibaseapi.apierrors.MediaWikiApiErrorException;
 
-import com.google.refine.tests.RefineTest;
+import com.google.refine.RefineTest;
 
 public class EditBatchProcessorTest extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/NewItemLibraryTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.editing;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 
 import java.util.Collections;
@@ -33,11 +33,11 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.recon.StandardReconConfig;
-import com.google.refine.tests.RefineTest;
 
 public class NewItemLibraryTest extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/ReconEntityRewriterTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.editing;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import org.openrefine.wikidata.testing.TestingData;
 import org.openrefine.wikidata.updates.ItemUpdate;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QSValuePrinterTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.exporters;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.math.BigDecimal;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.exporters;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 import java.io.StringWriter;
@@ -44,9 +44,9 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.StatementRank;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
 
 public class QuickStatementsExporterTest extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java
Patch:
@@ -6,10 +6,10 @@
 
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SchemaExporterTest extends RefineTest {
 	

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java
Patch:
@@ -35,14 +35,14 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.history.Change;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.Pool;
+import com.google.refine.util.TestUtils;
 
 import edu.mit.simile.butterfly.ButterflyModule;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.operations;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.LineNumberReader;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java
Patch:
@@ -23,8 +23,8 @@
  ******************************************************************************/
 package org.openrefine.wikidata.operations;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNull;
 
 import java.io.LineNumberReader;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/QAWarningStoreTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import org.openrefine.wikidata.testing.JacksonSerializationTest;
 import org.testng.annotations.BeforeMethod;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/QAWarningTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import org.openrefine.wikidata.testing.JacksonSerializationTest;
 import org.testng.annotations.Test;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java
Patch:
@@ -23,8 +23,8 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
 
 import java.util.Arrays;
 import java.util.Set;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/ExpressionContextTest.java
Patch:
@@ -23,14 +23,14 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNull;
 
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
 
 public class ExpressionContextTest extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbExpressionTest.java
Patch:
@@ -32,12 +32,12 @@
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Cell;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 public class WbExpressionTest<T> extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbLanguageConstantTest.java
Patch:
@@ -23,8 +23,8 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNull;
 
 import org.openrefine.wikidata.testing.JacksonSerializationTest;
 import org.testng.annotations.Test;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbLocationConstantTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.text.ParseException;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbNameDescExprTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.util.Collections;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.math.BigDecimal;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStatementExprTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 import java.util.Arrays;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.schema;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -47,11 +47,11 @@
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.TimeValue;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class WikibaseSchemaTest extends RefineTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java
Patch:
@@ -23,16 +23,16 @@
  ******************************************************************************/
 package org.openrefine.wikidata.testing;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 
 import org.testng.Assert;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class JacksonSerializationTest {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/PointerExtractorTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.updates.scheduler;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.math.BigDecimal;
 import java.util.Collections;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/QuickStatementsUpdateSchedulerTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.updates.scheduler;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.util.Arrays;
 import java.util.List;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/UpdateSchedulerTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.updates.scheduler;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.util.Arrays;
 import java.util.Collections;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/WikibaseAPIUpdateSchedulerTest.java
Patch:
@@ -23,7 +23,7 @@
  ******************************************************************************/
 package org.openrefine.wikidata.updates.scheduler;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.util.Arrays;
 import java.util.List;

File: main/tests/server/src/com/google/refine/HistoryEntryManagerStub.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests;
+package com.google.refine;
 
 import java.io.File;
 import java.io.Writer;

File: main/tests/server/src/com/google/refine/ProjectManagerStub.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests;
+package com.google.refine;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 
 /**
- * Stub used to make protected methods public for testing
+ * Stub used to avoid saves and stub HistoryEntryManager
  *
  */
 public class ProjectManagerStub extends ProjectManager {

File: main/tests/server/src/com/google/refine/ProjectManagerTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests;
+package com.google.refine;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -53,8 +53,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectMetadata;
 import com.google.refine.model.Project;
+import com.google.refine.model.ProjectStub;
 import com.google.refine.process.ProcessManager;
-import com.google.refine.tests.model.ProjectStub;
 
 public class ProjectManagerTests extends RefineTest {
     ProjectManagerStub pm;

File: main/tests/server/src/com/google/refine/RefineServletStub.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests;
+package com.google.refine;
 
 import java.io.File;
 import java.io.IOException;

File: main/tests/server/src/com/google/refine/RefineServletTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests;
+package com.google.refine;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;

File: main/tests/server/src/com/google/refine/RefineTest.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests;
+package com.google.refine;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -68,7 +68,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 import edu.mit.simile.butterfly.ButterflyModule;
 

File: main/tests/server/src/com/google/refine/browsing/DecoratedValueTests.java
Patch:
@@ -24,14 +24,14 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing;
+package com.google.refine.browsing;
 
 import java.time.OffsetDateTime;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.browsing.DecoratedValue;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class DecoratedValueTests {
     @Test

File: main/tests/server/src/com/google/refine/browsing/EngineConfigTests.java
Patch:
@@ -24,14 +24,14 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing;
 
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
 import com.google.refine.browsing.Engine.Mode;
+import com.google.refine.util.TestUtils;
 import com.google.refine.browsing.EngineConfig;
-import com.google.refine.tests.util.TestUtils;
 
 public class EngineConfigTests {
     

File: main/tests/server/src/com/google/refine/browsing/EngineTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing;
+package com.google.refine.browsing;
 
 import static org.mockito.Mockito.mock;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.browsing.Engine;
 import com.google.refine.model.Project;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class EngineTests {

File: main/tests/server/src/com/google/refine/browsing/facets/ListFacetTests.java
Patch:
@@ -24,21 +24,21 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.facets.Facet;
 import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ListFacetTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/browsing/facets/NominalFacetChoiceTests.java
Patch:
@@ -24,13 +24,13 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.browsing.DecoratedValue;
 import com.google.refine.browsing.facets.NominalFacetChoice;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class NominalFacetChoiceTests {
     @Test

File: main/tests/server/src/com/google/refine/browsing/facets/RangeFacetTests.java
Patch:
@@ -24,22 +24,22 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.facets.RangeFacet;
 import com.google.refine.browsing.facets.RangeFacet.RangeFacetConfig;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class RangeFacetTests extends RefineTest {
     public static String configJson = "{\n" + 

File: main/tests/server/src/com/google/refine/browsing/facets/ScatterplotFacetTests.java
Patch:
@@ -24,22 +24,22 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.facets.ScatterplotFacet;
 import com.google.refine.browsing.facets.ScatterplotFacet.ScatterplotFacetConfig;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ScatterplotFacetTests extends RefineTest {
     public static String configJson = "{\n" + 

File: main/tests/server/src/com/google/refine/browsing/facets/TextSearchFacetTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import java.io.IOException;
 
@@ -45,12 +45,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.RowFilter;
 import com.google.refine.browsing.facets.TextSearchFacet;
 import com.google.refine.browsing.facets.TextSearchFacet.TextSearchFacetConfig;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class TextSearchFacetTests extends RefineTest {

File: main/tests/server/src/com/google/refine/browsing/facets/TimeRangeFacetTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import java.io.IOException;
 import java.time.OffsetDateTime;
@@ -33,14 +33,14 @@
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.facets.TimeRangeFacet;
 import com.google.refine.browsing.facets.TimeRangeFacet.TimeRangeFacetConfig;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class TimeRangeFacetTests extends RefineTest {

File: main/tests/server/src/com/google/refine/browsing/util/ExpressionNominalValueGrouperTests.java
Patch:
@@ -28,7 +28,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.browsing.util;
+package com.google.refine.browsing.util;
 
 import java.io.IOException;
 import java.time.OffsetDateTime;
@@ -42,14 +42,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.util.ExpressionNominalValueGrouper;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.MetaParser;
 import com.google.refine.model.Cell;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 
 public class ExpressionNominalValueGrouperTests extends RefineTest {

File: main/tests/server/src/com/google/refine/clustering/binning/BinningClustererTests.java
Patch:
@@ -24,21 +24,21 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.clustering;
+package com.google.refine.clustering.binning;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.clustering.binning.BinningClusterer;
 import com.google.refine.clustering.binning.BinningClusterer.BinningClustererConfig;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class BinningClustererTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/clustering/binning/KeyerTests.java
Patch:
@@ -29,7 +29,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-package com.google.refine.tests.clustering.binning;
+package com.google.refine.clustering.binning;
 
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
@@ -38,10 +38,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.clustering.binning.FingerprintKeyer;
 import com.google.refine.clustering.binning.Keyer;
 import com.google.refine.clustering.binning.NGramFingerprintKeyer;
-import com.google.refine.tests.RefineTest;
 
 
 public class KeyerTests extends RefineTest {

File: main/tests/server/src/com/google/refine/clustering/knn/kNNClustererTests.java
Patch:
@@ -24,21 +24,21 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.clustering;
+package com.google.refine.clustering.knn;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.clustering.knn.kNNClusterer;
 import com.google.refine.clustering.knn.kNNClusterer.kNNClustererConfig;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class kNNClustererTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/commands/CommandStub.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.commands;
+package com.google.refine.commands;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;

File: main/tests/server/src/com/google/refine/commands/CommandTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.commands;
+package com.google.refine.commands;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -49,11 +49,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.Engine.Mode;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
 
 public class CommandTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java
Patch:
@@ -25,7 +25,7 @@
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
 
-package com.google.refine.tests.commands.browsing;
+package com.google.refine.commands.browsing;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: main/tests/server/src/com/google/refine/commands/expr/ExpressionCommandTestBase.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.expr;
+package com.google.refine.commands.expr;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -44,7 +44,7 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.google.refine.commands.Command;
 import com.google.refine.io.FileProjectManager;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ExpressionCommandTestBase {
     protected HttpServletRequest request = null;

File: main/tests/server/src/com/google/refine/commands/expr/GetExpressionHistoryCommandTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.expr;
+package com.google.refine.commands.expr;
 
 import java.io.IOException;
 

File: main/tests/server/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommandTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.expr;
+package com.google.refine.commands.expr;
 
 import java.io.IOException;
 
@@ -35,8 +35,8 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.google.refine.commands.expr.GetExpressionLanguageInfoCommand;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class GetExpressionLanguageInfoCommandTests extends ExpressionCommandTestBase {
 

File: main/tests/server/src/com/google/refine/commands/expr/GetStarredExpressionsCommandTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.expr;
+package com.google.refine.commands.expr;
 
 import java.io.IOException;
 

File: main/tests/server/src/com/google/refine/commands/expr/PreviewExpressionCommandTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.expr;
+package com.google.refine.commands.expr;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -40,11 +40,11 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.commands.Command;
 import com.google.refine.commands.expr.PreviewExpressionCommand;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class PreviewExpressionCommandTests extends RefineTest {
     protected Project project = null;

File: main/tests/server/src/com/google/refine/commands/expr/ToggleStarredExpressionCommandTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.expr;
+package com.google.refine.commands.expr;
 
 import static org.mockito.Mockito.when;
 

File: main/tests/server/src/com/google/refine/commands/project/SetProjectMetadataCommandTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.commands.project;
+package com.google.refine.commands.project;
 
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
@@ -57,9 +57,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.ProjectManager;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.RefineTest;
 import com.google.refine.commands.project.SetProjectMetadataCommand;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
 import com.google.refine.util.ParsingUtilities;
 
 public class SetProjectMetadataCommandTests extends RefineTest {

File: main/tests/server/src/com/google/refine/commands/recon/ReconJudgeOneCellCommandTest.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.recon;
+package com.google.refine.commands.recon;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -42,6 +42,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.RefineTest;
 import com.google.refine.commands.Command;
 import com.google.refine.commands.recon.ReconJudgeOneCellCommand;
 import com.google.refine.model.Cell;
@@ -50,7 +51,6 @@
 import com.google.refine.model.Recon;
 import com.google.refine.model.recon.ReconConfig;
 import com.google.refine.model.recon.StandardReconConfig;
-import com.google.refine.tests.RefineTest;
 
 public class ReconJudgeOneCellCommandTest extends RefineTest {
         

File: main/tests/server/src/com/google/refine/commands/row/GetRowsCommandTest.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.commands.row;
+package com.google.refine.commands.row;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -40,11 +40,11 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.commands.Command;
 import com.google.refine.commands.row.GetRowsCommand;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class GetRowsCommandTest extends RefineTest {
     

File: main/tests/server/src/com/google/refine/commands/util/CancelProcessesCommandTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.commands.util;
+package com.google.refine.commands.util;
 
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.mock;
@@ -55,11 +55,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.RefineTest;
 import com.google.refine.commands.history.CancelProcessesCommand;
 import com.google.refine.model.Project;
 import com.google.refine.process.ProcessManager;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class CancelProcessesCommandTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/exporters/CsvExporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.exporters;
+package com.google.refine.exporters;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -49,14 +49,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 public class CsvExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/exporters/HtmlExporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.exporters;
+package com.google.refine.exporters;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -50,7 +50,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.ProjectManagerStub;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.HtmlTableExporter;
 import com.google.refine.exporters.WriterExporter;
@@ -59,8 +61,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.ProjectManagerStub;
-import com.google.refine.tests.RefineTest;
 
 public class HtmlExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/exporters/TemplatingExporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.exporters;
+package com.google.refine.exporters;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -48,7 +48,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.ProjectManagerStub;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.TemplatingExporter;
 import com.google.refine.exporters.WriterExporter;
@@ -57,8 +59,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.ProjectManagerStub;
-import com.google.refine.tests.RefineTest;
 
 public class TemplatingExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/exporters/TsvExporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.exporters;
+package com.google.refine.exporters;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -49,14 +49,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 public class TsvExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/exporters/XlsExporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.exporters;
+package com.google.refine.exporters;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -51,7 +51,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.ProjectManagerStub;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.StreamExporter;
 import com.google.refine.exporters.XlsExporter;
@@ -60,8 +62,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.ProjectManagerStub;
-import com.google.refine.tests.RefineTest;
 
 public class XlsExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/exporters/XlsxExporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.exporters;
+package com.google.refine.exporters;
 
 import java.io.ByteArrayInputStream;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
@@ -54,7 +54,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.ProjectManagerStub;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.StreamExporter;
 import com.google.refine.exporters.XlsExporter;
@@ -63,8 +65,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.ProjectManagerStub;
-import com.google.refine.tests.RefineTest;
 
 public class XlsxExporterTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/expr/EvalErrorTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr;
+package com.google.refine.expr;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.EvalError;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class EvalErrorTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/ExpressionUtilsTests.java
Patch:
@@ -31,16 +31,16 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
  
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr;
 
 
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.ExpressionUtils;
-import com.google.refine.tests.RefineTest;
 
 
 public class ExpressionUtilsTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/CoalesceTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
 
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import java.util.Properties;
 
@@ -42,12 +42,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.Coalesce;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class CoalesceTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/FacetCountTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.FacetCount;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class FacetCountTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/GetTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.Get;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class GetTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/HasFieldTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.HasField;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class HasFieldTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/JsonizeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.Jsonize;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class JsonizeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/LengthTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.Length;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class LengthTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/SliceTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.Slice;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SliceTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/ToDateTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.ToDate;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ToDateTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/ToNumberTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.ToNumber;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ToNumberTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/ToStringTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.ToString;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ToStringTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/TypeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions;
+package com.google.refine.expr.functions;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.Type;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class TypeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/arrays/JoinTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.arrays;
+package com.google.refine.expr.functions.arrays;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.arrays.Join;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class JoinTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/arrays/ReverseTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.arrays;
+package com.google.refine.expr.functions.arrays;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.arrays.Reverse;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReverseTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/arrays/SortTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.arrays;
+package com.google.refine.expr.functions.arrays;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.arrays.Sort;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SortTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/arrays/UniquesTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.arrays;
+package com.google.refine.expr.functions.arrays;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.arrays.Uniques;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class UniquesTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/booleans/AndTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.booleans.And;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class AndTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/booleans/BooleanTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
 
-package com.google.refine.tests.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import java.io.IOException;
 import java.util.Properties;
@@ -43,14 +43,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 import com.google.refine.model.Cell;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 
 public class BooleanTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/booleans/NotTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.booleans.Not;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class NotTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/booleans/OrTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.booleans.Or;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class OrTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/booleans/XorTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.booleans.Xor;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class XorTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/date/DatePartTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.date;
+package com.google.refine.expr.functions.date;
 
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
@@ -40,11 +40,11 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.functions.date.DatePart;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class DatePartTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/date/IncTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.date;
+package com.google.refine.expr.functions.date;
 
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
@@ -38,12 +38,12 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.date.Inc;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class IncTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/date/NowTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.date;
+package com.google.refine.expr.functions.date;
 
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
@@ -37,11 +37,11 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.functions.date.Now;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class NowTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/html/InnerHtmlTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.html;
+package com.google.refine.expr.functions.html;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.html.InnerHtml;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class InnerHtmlTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/html/ParseHtmlTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.html;
+package com.google.refine.expr.functions.html;
 
 import org.jsoup.Jsoup;
 import org.testng.annotations.Test;
@@ -37,12 +37,12 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeTest;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.html.ParseHtml;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ParseHtmlTests extends RefineTest  {
     

File: main/tests/server/src/com/google/refine/expr/functions/math/ACosTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.ACos;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ACosTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/ASinTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.ASin;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ASinTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/ATan2Tests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.ATan2;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ATan2Tests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/ATanTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.ATan;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ATanTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/AbsTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Abs;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class AbsTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/CeilTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Ceil;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class CeilTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/CombinTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Combin;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class CombinTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/CosTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Cos;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class CosTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/CoshTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Cosh;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class CoshTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/DegreesTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Degrees;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class DegreesTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/EvenTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Even;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class EvenTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/ExpTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Exp;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ExpTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/FactNTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.FactN;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class FactNTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/FactTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Fact;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class FactTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/FloorTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Floor;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class FloorTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/GreatestCommonDenominatorTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.GreatestCommonDenominator;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class GreatestCommonDenominatorTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/LeastCommonMultipleTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.LeastCommonMultiple;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class LeastCommonMultipleTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/LnTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Ln;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class LnTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/LogTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Log;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class LogTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/MaxTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Max;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class MaxTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/MinTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Min;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class MinTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/ModTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Mod;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ModTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/MultinomialTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Multinomial;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class MultinomialTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/OddTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Odd;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class OddTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/PowTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Pow;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class PowTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/QuotientTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Quotient;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class QuotientTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/RadiansTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Radians;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class RadiansTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/RandomNumberTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import java.util.Properties;
 
@@ -34,12 +34,12 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.RandomNumber;
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.arrays.InArray;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class RandomNumberTests extends RefineTest {
     static Properties bindings;

File: main/tests/server/src/com/google/refine/expr/functions/math/RoundTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Round;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class RoundTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/SinTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Sin;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SinTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/SinhTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Sinh;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SinhTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/SumTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Sum;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SumTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/TanTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Tan;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class TanTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/math/TanhTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.math.Tanh;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class TanhTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/ChompTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Chomp;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ChompTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/DiffTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
@@ -38,12 +38,12 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.strings.Diff;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class DiffTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/strings/EndsWithTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.EndsWith;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class EndsWithTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/EscapeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Escape;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class EscapeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/FingerprintTests.java
Patch:
@@ -29,7 +29,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
@@ -40,11 +40,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.functions.strings.Fingerprint;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class FingerprintTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/strings/IndexOfTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.IndexOf;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IndexOfTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/LastIndexOfTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.LastIndexOf;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class LastIndexOfTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/MD5Tests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.MD5;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class MD5Tests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/MatchTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Match;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class MatchTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/NGramFingerprintTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.NGramFingerprint;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class NGramFingerprintTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/NGramTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.NGram;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class NGramTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/ParseJsonTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.ParseJson;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ParseJsonTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/PartitionTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Partition;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class PartitionTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/PhoneticTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Phonetic;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class PhoneticTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/RPartitionTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.RPartition;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class RPartitionTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/RangeTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
@@ -35,12 +35,12 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.strings.Range;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 /**
  * Tests for the range function.

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReinterpretTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Reinterpret;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReinterpretTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReplaceCharsTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.ReplaceChars;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReplaceCharsTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/ReplaceTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Replace;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReplaceTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/SHA1Tests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.SHA1;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SHA1Tests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/SplitByCharTypeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.SplitByCharType;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SplitByCharTypeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/SplitByLengthsTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.SplitByLengths;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SplitByLengthsTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/SplitTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Split;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SplitTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/StartsWithTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.StartsWith;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class StartsWithTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/StringCaseTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
 
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
@@ -42,10 +42,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
 
 
 /**

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToFromConversionTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
 
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.time.OffsetDateTime;
 import java.util.Properties;
@@ -44,12 +44,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.util.CalendarParser;
 import com.google.refine.expr.util.CalendarParserException;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
 import com.google.refine.util.ParsingUtilities;
 
 

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToLowercaseTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.ToLowercase;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ToLowercaseTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToTitlecaseTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.ToTitlecase;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ToTitlecaseTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/ToUppercaseTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.ToUppercase;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ToUppercaseTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/TrimTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
@@ -35,12 +35,12 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.strings.Trim;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class TrimTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/strings/UnescapeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Unescape;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class UnescapeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/UnicodeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.Unicode;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class UnicodeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/strings/UnicodeTypeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.strings.UnicodeType;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class UnicodeTypeTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/xml/InnerXmlTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.xml;
+package com.google.refine.expr.functions.xml;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.xml.InnerXml;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class InnerXmlTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/xml/OwnTextTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.xml;
+package com.google.refine.expr.functions.xml;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.xml.OwnText;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class OwnTextTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/xml/ParseXmlTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.xml;
+package com.google.refine.expr.functions.xml;
 
 import org.jsoup.parser.Parser;
 import org.jsoup.Jsoup;
@@ -38,12 +38,12 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.BeforeTest;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.functions.xml.ParseXml;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class ParseXmlTests extends RefineTest {

File: main/tests/server/src/com/google/refine/expr/functions/xml/SelectXmlTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.xml;
+package com.google.refine.expr.functions.xml;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.xml.SelectXml;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SelectXmlTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/xml/xmlAttrTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.xml;
+package com.google.refine.expr.functions.xml;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.xml.XmlAttr;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class xmlAttrTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/functions/xml/xmlTextTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.functions.xml;
+package com.google.refine.expr.functions.xml;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.expr.functions.xml.XmlText;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class xmlTextTests {
     @Test

File: main/tests/server/src/com/google/refine/expr/util/JsonValueConverterTests.java
Patch:
@@ -24,17 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.expr.util;
+package com.google.refine.expr.util;
 
 import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
-import java.util.Arrays;
 
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.google.refine.expr.util.JsonValueConverter;
 import com.google.refine.util.ParsingUtilities;
 
 public class JsonValueConverterTests {

File: main/tests/server/src/com/google/refine/grel/FunctionTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
  
-package com.google.refine.tests.expr.functions;
+package com.google.refine.grel;
 
 import java.io.IOException;
 import java.util.Properties;
@@ -43,6 +43,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
@@ -51,7 +52,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 
 public class FunctionTests extends RefineTest {

File: main/tests/server/src/com/google/refine/grel/GrelTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.grel;
+package com.google.refine.grel;
 
 import java.util.Properties;
 
@@ -42,13 +42,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.Evaluable;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.expr.MetaParser;
 import com.google.refine.expr.ParsingException;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
 
 public class GrelTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/grel/ast/LiteralExprTest.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.ast;
+package com.google.refine.grel.ast;
 
 import static org.testng.Assert.assertEquals;
 

File: main/tests/server/src/com/google/refine/grel/controls/FilterTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.Filter;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class FilterTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/ForEachIndexTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.ForEachIndex;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ForEachIndexTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/ForEachTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.ForEach;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ForEachTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/ForNonBlankTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.ForNonBlank;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ForNonBlankTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/ForRangeTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.ForRange;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ForRangeTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IfTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.If;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IfTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsBlankTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsBlank;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsBlankTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsEmptyStringTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsEmptyString;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsEmptyStringTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsErrorTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsError;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsErrorTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsNonBlankTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsNonBlank;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsNonBlankTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsNotNullTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsNotNull;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsNotNullTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsNullTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsNull;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsNullTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/IsNumericTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.IsNumeric;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class IsNumericTests {
     @Test

File: main/tests/server/src/com/google/refine/grel/controls/WithTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.grel.controls;
+package com.google.refine.grel.controls;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.grel.controls.With;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class WithTests {
     @Test

File: main/tests/server/src/com/google/refine/history/FileHistoryEntryManagerTests.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.tests.history;
+package com.google.refine.history;
 
 import static org.mockito.Mockito.mock;
 
@@ -9,13 +9,13 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.io.FileHistoryEntryManager;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnAdditionOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class FileHistoryEntryManagerTests extends RefineTest {
 	

File: main/tests/server/src/com/google/refine/history/HistoryEntryTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.history;
+package com.google.refine.history;
 
 import static org.mockito.Mockito.mock;
 
@@ -34,12 +34,12 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnAdditionOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class HistoryEntryTests extends RefineTest {
 	

File: main/tests/server/src/com/google/refine/history/HistoryTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.history;
+package com.google.refine.history;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -49,12 +49,12 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.history.Change;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.RefineTest;
 import com.google.refine.history.History;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class HistoryTests extends RefineTest {

File: main/tests/server/src/com/google/refine/importers/ExcelImporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 
 import static org.mockito.Mockito.times;

File: main/tests/server/src/com/google/refine/importers/FixedWidthImporterTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 
 import java.io.StringReader;

File: main/tests/server/src/com/google/refine/importers/ImporterTest.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import static org.mockito.Mockito.when;
 
@@ -40,15 +40,15 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineServlet;
+import com.google.refine.RefineServletStub;
+import com.google.refine.RefineTest;
 import com.google.refine.importers.ImportingParserBase;
 import com.google.refine.importers.tree.ImportColumnGroup;
 import com.google.refine.importers.tree.TreeImportingParserBase;
 import com.google.refine.importers.tree.XmlImportUtilities;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineServletStub;
-import com.google.refine.tests.RefineTest;
 import com.google.refine.util.ParsingUtilities;
 
 public abstract class ImporterTest extends RefineTest {

File: main/tests/server/src/com/google/refine/importers/ImporterUtilitiesTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -47,11 +47,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.importers.ImporterUtilities;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 public class ImporterUtilitiesTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/importers/JsonImporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: main/tests/server/src/com/google/refine/importers/RdfTripleImporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;

File: main/tests/server/src/com/google/refine/importers/TsvCsvImporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import java.io.StringReader;
 

File: main/tests/server/src/com/google/refine/importers/WikitextImporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 
 import java.io.StringReader;

File: main/tests/server/src/com/google/refine/importers/XmlImportUtilitiesStub.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import java.io.Serializable;
 import java.util.List;

File: main/tests/server/src/com/google/refine/importers/XmlImportUtilitiesTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -48,6 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.importers.JsonImporter;
 import com.google.refine.importers.JsonImporter.JSONTreeReader;
 import com.google.refine.importers.XmlImporter.XmlParser;
@@ -59,7 +60,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importers.tree.TreeReaderException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
 
 
 public class XmlImportUtilitiesTests extends RefineTest {

File: main/tests/server/src/com/google/refine/importers/XmlImporterTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.importers;
+package com.google.refine.importers;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.importing;
+package com.google.refine.importing;
 
 import java.io.File;
 import java.io.IOException;
@@ -37,13 +37,13 @@
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.refine.ProjectMetadata;
+import com.google.refine.importers.ImporterTest;
 import com.google.refine.importers.tree.TreeImportingParserBase;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
-import com.google.refine.tests.importers.ImporterTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ImportingUtilitiesTests extends ImporterTest {
 

File: main/tests/server/src/com/google/refine/io/FileProjectManagerTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.io;
+package com.google.refine.io;
 
 import static org.mockito.Mockito.mock;
 
@@ -35,7 +35,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.io.FileProjectManager;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 import com.google.refine.ProjectMetadata;
 
 public class FileProjectManagerTests  {

File: main/tests/server/src/com/google/refine/io/ProjectMetadataTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.io;
+package com.google.refine.io;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -33,8 +33,9 @@
 import org.apache.commons.io.IOUtils;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
-import com.google.refine.tests.util.TestUtils;
+
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.google.refine.ProjectMetadata;

File: main/tests/server/src/com/google/refine/model/CacheTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.model;
 import java.io.IOException;
 import java.util.Properties;
 
@@ -42,6 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.browsing.RowVisitor;
@@ -53,7 +54,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 import com.google.refine.operations.EngineDependentOperation;
 import com.google.refine.operations.row.RowRemovalOperation;
-import com.google.refine.tests.RefineTest;
 
 
 public class CacheTests extends RefineTest {

File: main/tests/server/src/com/google/refine/model/CellTests.java
Patch:
@@ -24,22 +24,22 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import java.time.format.DateTimeFormatter;
 import java.time.LocalDateTime;
 import java.time.OffsetDateTime;
 
-import static org.junit.Assert.assertNull;
+import static org.testng.Assert.assertNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.model.Cell;
 import com.google.refine.model.Recon;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.Pool;
+import com.google.refine.util.TestUtils;
 
 public class CellTests {
     

File: main/tests/server/src/com/google/refine/model/ColumnGroupTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.model.ColumnGroup;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ColumnGroupTests {
     

File: main/tests/server/src/com/google/refine/model/ColumnModelTests.java
Patch:
@@ -24,14 +24,14 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.ColumnModel;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ColumnModelTests extends RefineTest {
     @Test

File: main/tests/server/src/com/google/refine/model/ColumnTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -34,7 +34,7 @@
 import com.google.refine.model.Column;
 import com.google.refine.model.recon.ReconConfig;
 import com.google.refine.model.recon.StandardReconConfig;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 import edu.mit.simile.butterfly.ButterflyModule;
 

File: main/tests/server/src/com/google/refine/model/ProjectStub.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import com.google.refine.model.Project;
 

File: main/tests/server/src/com/google/refine/model/ReconCandidateTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.model.ReconCandidate;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReconCandidateTests {
     @Test

File: main/tests/server/src/com/google/refine/model/ReconStatsTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.model.ReconStats;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReconStatsTests {
     

File: main/tests/server/src/com/google/refine/model/ReconTests.java
Patch:
@@ -24,13 +24,13 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReconTests {
     

File: main/tests/server/src/com/google/refine/model/ReconTypeTest.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import java.io.IOException;
 
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
 import com.google.refine.model.ReconType;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class ReconTypeTest {
     @Test

File: main/tests/server/src/com/google/refine/model/RecordModelTests.java
Patch:
@@ -24,13 +24,13 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class RecordModelTests extends RefineTest {
     @Test

File: main/tests/server/src/com/google/refine/model/RowTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.model;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -46,13 +46,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Row;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.Pool;
+import com.google.refine.util.TestUtils;
 
 public class RowTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/model/changes/DataExtensionChangeTest.java
Patch:
@@ -24,9 +24,9 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model.changes;
+package com.google.refine.model.changes;
 
-import static org.junit.Assert.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -38,11 +38,11 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.history.Change;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.changes.DataExtensionChange;
-import com.google.refine.tests.RefineTest;
 import com.google.refine.util.Pool;
 
 

File: main/tests/server/src/com/google/refine/model/changes/MassChangeTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model.changes;
+package com.google.refine.model.changes;
 
 import static org.testng.AssertJUnit.assertTrue;
 
@@ -37,13 +37,13 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.history.Change;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.changes.CellAtRow;
 import com.google.refine.model.changes.ColumnAdditionChange;
 import com.google.refine.model.changes.MassChange;
-import com.google.refine.tests.RefineTest;
 
 public class MassChangeTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/model/recon/StandardReconConfigTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.model.recon;
+package com.google.refine.model.recon;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
@@ -43,6 +43,7 @@
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Row;
@@ -53,9 +54,8 @@
 import com.google.refine.model.recon.StandardReconConfig.ReconResult;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class StandardReconConfigTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/operations/cell/BlankDownTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.cell;
+package com.google.refine.operations.cell;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -37,6 +37,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Column;
@@ -46,9 +47,8 @@
 import com.google.refine.operations.cell.BlankDownOperation;
 import com.google.refine.operations.cell.FillDownOperation;
 import com.google.refine.process.Process;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class BlankDownTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/operations/cell/FillDownTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.cell;
+package com.google.refine.operations.cell;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -37,6 +37,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Column;
@@ -45,9 +46,8 @@
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.cell.FillDownOperation;
 import com.google.refine.process.Process;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class FillDownTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/operations/cell/JoinMultiValuedCellsTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.operations.cell;
+package com.google.refine.operations.cell;
 
 import java.util.Properties;
 
@@ -42,14 +42,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.cell.MultiValuedCellJoinOperation;
 import com.google.refine.process.Process;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class JoinMultiValuedCellsTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/cell/MassOperationTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.cell;
+package com.google.refine.operations.cell;
 
 import java.util.List;
 
@@ -33,12 +33,12 @@
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.core.type.TypeReference;
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.cell.MassEditOperation;
 import com.google.refine.operations.cell.MassEditOperation.Edit;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class MassOperationTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/operations/cell/SplitMultiValuedCellsTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.operations.cell;
+package com.google.refine.operations.cell;
 
 
 import java.util.Properties;
@@ -42,14 +42,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.cell.MultiValuedCellSplitOperation;
 import com.google.refine.process.Process;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class SplitMultiValuedCellsTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/cell/TransposeTests.java
Patch:
@@ -31,17 +31,17 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.operations.cell;
+package com.google.refine.operations.cell;
 
 import org.slf4j.LoggerFactory;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.cell.TransposeRowsIntoColumnsOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class TransposeTests extends RefineTest {
 

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -46,6 +46,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.model.AbstractOperation;
@@ -60,9 +61,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation.HttpHeader;
 import com.google.refine.process.Process;
 import com.google.refine.process.ProcessManager;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/column/ColumnAdditionOperationTests.java
Patch:
@@ -24,16 +24,16 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnAdditionOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ColumnAdditionOperationTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/operations/column/ColumnMoveOperationTests.java
Patch:
@@ -24,16 +24,16 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnMoveOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ColumnMoveOperationTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/operations/column/ColumnRemovalOperationTests.java
Patch:
@@ -24,16 +24,16 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnRemovalOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class ColumnRemovalOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/column/ColumnRenameOperationTests.java
Patch:
@@ -24,17 +24,17 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnRenameOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class ColumnRenameOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/column/ColumnReorderOperationTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import java.util.Arrays;
 import java.util.Properties;
@@ -34,13 +34,13 @@
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnReorderOperation;
 import com.google.refine.process.Process;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class ColumnReorderOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/column/ColumnSplitOperationTests.java
Patch:
@@ -24,16 +24,16 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.column;
+package com.google.refine.operations.column;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.column.ColumnSplitOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ColumnSplitOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ExtendDataOperationTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 
 import static org.mockito.Mockito.mock;
 
@@ -50,6 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Cell;
@@ -65,9 +66,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.operations.recon.ExtendDataOperation;
 import com.google.refine.process.Process;
 import com.google.refine.process.ProcessManager;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class ExtendDataOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconClearSimilarCellsOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconClearSimilarCellsOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconCopyAcrossColumnsOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconCopyAcrossColumnsOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconDiscardJudgmentsOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconDiscardJudgmentsOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconJudgeSimilarCellsOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconJudgeSimilarCellsOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconMarkNewTopicsOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconMarkNewTopicsOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconMatchBestCandidatesOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconMatchBestCandidatesOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconMatchSpecificTopicOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ReconMatchSpecificTopicOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/recon/ReconOperationTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 
 import static org.mockito.Mockito.mock;
 
@@ -33,14 +33,14 @@
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
 import com.google.refine.model.recon.ReconConfig;
 import com.google.refine.model.recon.StandardReconConfig;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class ReconOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/recon/ReconUseValuesAsIdsOperationTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.recon;
+package com.google.refine.operations.recon;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNull;
@@ -34,13 +34,13 @@
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.model.Project;
 import com.google.refine.model.recon.StandardReconConfig;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.recon.ReconUseValuesAsIdentifiersOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 
 public class ReconUseValuesAsIdsOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/row/DenormalizeOperationTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.row;
+package com.google.refine.operations.row;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.row.DenormalizeOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 
 public class DenormalizeOperationTests extends RefineTest {

File: main/tests/server/src/com/google/refine/operations/row/RowFlagOperationTests.java
Patch:
@@ -24,16 +24,16 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.row;
+package com.google.refine.operations.row;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.row.RowFlagOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class RowFlagOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/row/RowRemovalOperationTests.java
Patch:
@@ -24,18 +24,18 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.row;
+package com.google.refine.operations.row;
 
 import java.io.IOException;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.row.RowRemovalOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class RowRemovalOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/operations/row/RowReorderOperationTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.row;
+package com.google.refine.operations.row;
 
 import java.util.Properties;
 
@@ -35,6 +35,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
+import com.google.refine.RefineTest;
 import com.google.refine.browsing.Engine.Mode;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Cell;
@@ -43,9 +44,8 @@
 import com.google.refine.operations.row.RowReorderOperation;
 import com.google.refine.process.Process;
 import com.google.refine.sorting.SortingConfig;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class RowReorderOperationTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/operations/row/RowStarOperationTests.java
Patch:
@@ -24,16 +24,16 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.operations.row;
+package com.google.refine.operations.row;
 
 import org.testng.annotations.BeforeSuite;
 import org.testng.annotations.Test;
 
+import com.google.refine.RefineTest;
 import com.google.refine.operations.OperationRegistry;
 import com.google.refine.operations.row.RowStarOperation;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class RowStarOperationTests extends RefineTest {
     @BeforeSuite

File: main/tests/server/src/com/google/refine/preference/PreferenceStoreTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.preference;
+package com.google.refine.preference;
 
 import static org.testng.Assert.assertFalse;
 import static org.testng.Assert.assertTrue;
@@ -36,8 +36,8 @@
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.google.refine.preference.PreferenceStore;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class PreferenceStoreTests {
     public static String json = "{"

File: main/tests/server/src/com/google/refine/preference/TopListTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.preference;
+package com.google.refine.preference;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -35,8 +35,8 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.google.refine.preference.PreferenceValue;
 import com.google.refine.preference.TopList;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class TopListTests {
     @Test

File: main/tests/server/src/com/google/refine/process/HistoryProcessTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.process;
+package com.google.refine.process;
 
 import static org.mockito.Mockito.mock;
 
@@ -37,9 +37,9 @@
 import com.google.refine.history.HistoryProcess;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.util.TestUtils;
 import com.google.refine.ProjectMetadata;
-import com.google.refine.tests.RefineTest;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.RefineTest;
 
 public class HistoryProcessTests extends RefineTest {
     

File: main/tests/server/src/com/google/refine/process/LongRunningProcessTests.java
Patch:
@@ -24,12 +24,12 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.process;
+package com.google.refine.process;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.process.LongRunningProcess;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class LongRunningProcessTests {
     

File: main/tests/server/src/com/google/refine/process/ProcessManagerTests.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.process;
+package com.google.refine.process;
 
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 import com.google.refine.process.Process;
 import com.google.refine.process.ProcessManager;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class ProcessManagerTests {
     

File: main/tests/server/src/com/google/refine/process/QuickHistoryEntryProcessTests.java
Patch:
@@ -24,7 +24,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.process;
+package com.google.refine.process;
 
 import static org.mockito.Mockito.mock;
 
@@ -34,7 +34,7 @@
 import com.google.refine.model.Project;
 import com.google.refine.process.Process;
 import com.google.refine.process.QuickHistoryEntryProcess;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class QuickHistoryEntryProcessTests {
     public static class QuickHistoryEntryProcessStub extends QuickHistoryEntryProcess {

File: main/tests/server/src/com/google/refine/sorting/BooleanCriterionTest.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.sorting;
+package com.google.refine.sorting;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.sorting.Criterion;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class BooleanCriterionTest {
     @Test

File: main/tests/server/src/com/google/refine/sorting/DateCriterionTest.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.sorting;
+package com.google.refine.sorting;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.sorting.Criterion;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class DateCriterionTest {
     @Test

File: main/tests/server/src/com/google/refine/sorting/NumberCriterionTest.java
Patch:
@@ -24,15 +24,15 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.sorting;
+package com.google.refine.sorting;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.sorting.Criterion;
-import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.ParsingUtilities;
+import com.google.refine.util.TestUtils;
 
 public class NumberCriterionTest {
     @Test

File: main/tests/server/src/com/google/refine/sorting/SortingConfigTests.java
Patch:
@@ -24,14 +24,14 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  ******************************************************************************/
-package com.google.refine.tests.sorting;
+package com.google.refine.sorting;
 
 import java.io.IOException;
 
 import org.testng.annotations.Test;
 
 import com.google.refine.sorting.SortingConfig;
-import com.google.refine.tests.util.TestUtils;
+import com.google.refine.util.TestUtils;
 
 public class SortingConfigTests {
     @Test

File: main/tests/server/src/com/google/refine/util/ParsingUtilitiesTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.util;
+package com.google.refine.util;
 
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
@@ -45,7 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.tests.RefineTest;
+import com.google.refine.RefineTest;
 import com.google.refine.util.ParsingUtilities;
 
 public class ParsingUtilitiesTests extends RefineTest {

File: main/tests/server/src/com/google/refine/util/PatternSyntaxExceptionParserTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.util;
+package com.google.refine.util;
 
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
@@ -41,7 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
-import com.google.refine.tests.RefineTest;
+import com.google.refine.RefineTest;
 import com.google.refine.util.PatternSyntaxExceptionParser;
 
 public class PatternSyntaxExceptionParserTests extends RefineTest {

File: main/src/com/google/refine/expr/functions/strings/Match.java
Patch:
@@ -71,7 +71,7 @@ public Object call(Properties bindings, Object[] args) {
             
             return null;
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string or a regexp");
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a regexp");
     }
     
     @Override
@@ -81,7 +81,7 @@ public String getDescription() {
     
     @Override
     public String getParams() {
-        return "string or regexp";
+        return "regexp";
     }
     
     @Override

File: main/tests/server/src/com/google/refine/tests/expr/functions/strings/MatchTests.java
Patch:
@@ -34,7 +34,7 @@
 public class MatchTests {
     @Test
     public void serializeMatch() {
-        String json = "{\"description\":\"Returns an array of the groups matching the given regular expression\",\"params\":\"string or regexp\",\"returns\":\"array of strings\"}";
+        String json = "{\"description\":\"Returns an array of the groups matching the given regular expression\",\"params\":\"regexp\",\"returns\":\"array of strings\"}";
         TestUtils.isSerializedTo(new Match(), json);
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStatementGroupExpr.java
Patch:
@@ -28,6 +28,7 @@
 
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
+import org.openrefine.wikidata.utils.StatementGroupJson;
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/PointerExtractorTest.java
Patch:
@@ -66,7 +66,6 @@ public void testExtractEntityId() {
 
     @Test
     public void testExtractDatavalues() {
-        assertEmpty(Datamodel.makeDatatypeIdValue("string"));
         assertEmpty(Datamodel.makeGlobeCoordinatesValue(1.34, 2.354, 0.1, GlobeCoordinatesValue.GLOBE_EARTH));
         assertEmpty(Datamodel.makeStringValue("est"));
         assertEmpty(Datamodel.makeMonolingualTextValue("srtu", "en"));

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -567,7 +567,7 @@ public int compare(ReconResult a, ReconResult b) {
      * 	    the cell value to compare the reconciliation data to
      */
     public void computeFeatures(Recon recon, String text) {
-        if (recon.candidates != null && !recon.candidates.isEmpty()) {
+        if (recon.candidates != null && !recon.candidates.isEmpty() && text != null) {
             ReconCandidate candidate = recon.candidates.get(0);
             
             recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.name));

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -567,7 +567,7 @@ public int compare(ReconResult a, ReconResult b) {
      * 	    the cell value to compare the reconciliation data to
      */
     public void computeFeatures(Recon recon, String text) {
-        if (recon.candidates != null && !recon.candidates.isEmpty()) {
+        if (recon.candidates != null && !recon.candidates.isEmpty() && text != null) {
             ReconCandidate candidate = recon.candidates.get(0);
             
             recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.name));

File: main/src/com/google/refine/browsing/facets/FacetConfig.java
Patch:
@@ -26,7 +26,7 @@
  ******************************************************************************/
 package com.google.refine.browsing.facets;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
@@ -63,6 +63,6 @@ public interface FacetConfig  {
     /**
      * The facet type as stored in json.
      */
-    @JsonProperty("type")
+    @JsonIgnore // already included by @JsonTypeInfo
     public String getJsonType();
 }

File: main/src/com/google/refine/clustering/ClustererConfig.java
Patch:
@@ -26,6 +26,7 @@
  ******************************************************************************/
 package com.google.refine.clustering;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
@@ -70,6 +71,6 @@ public void setColumnName(String name) {
     /**
      * Type string used in Json serialization
      */
-    @JsonProperty("type")
+    @JsonIgnore // already added by @JsonTypeInfo
     public abstract String getType();
 }

File: main/src/com/google/refine/model/AbstractOperation.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
@@ -72,7 +73,7 @@ protected String getBriefDescription(Project project) {
         throw new UnsupportedOperationException();
     }
     
-    @JsonProperty("op")
+    @JsonIgnore // the operation id is already added as "op" by the JsonTypeInfo annotation
     public String getOperationId() {
         return OperationRegistry.s_opClassToName.get(this.getClass());
     }

File: main/src/com/google/refine/preference/PreferenceValue.java
Patch:
@@ -26,8 +26,8 @@
  ******************************************************************************/
 package com.google.refine.preference;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonProperty;
 
 /**
  * Interface to be extended by all objects stored 
@@ -40,7 +40,7 @@
 
 @JsonTypeInfo(
         use=JsonTypeInfo.Id.CLASS,
-        include=JsonTypeInfo.As.PROPERTY,
+        include=JsonTypeInfo.As.EXISTING_PROPERTY,
         property="class")
 public interface PreferenceValue {
 	

File: main/src/com/google/refine/sorting/Criterion.java
Patch:
@@ -70,7 +70,7 @@ abstract public class Criterion  {
     @JsonProperty("reverse")
     public boolean reverse = false;
 
-    @JsonProperty("valueType")
+    @JsonIgnore // already added by @JsonTypeInfo
     public abstract String getValueType();
     
     // Returns a cached cell index

File: extensions/wikidata/src/org/openrefine/wikidata/exporters/QuickStatementsExporter.java
Patch:
@@ -131,7 +131,9 @@ protected void translateItem(ItemUpdate item, Writer writer)
         }
 
         translateNameDescr(qid, item.getLabels(), "L", item.getItemId(), writer);
+        translateNameDescr(qid, item.getLabelsIfNew(), "L", item.getItemId(), writer);
         translateNameDescr(qid, item.getDescriptions(), "D", item.getItemId(), writer);
+        translateNameDescr(qid, item.getDescriptionsIfNew(), "D", item.getItemId(), writer);
         translateNameDescr(qid, item.getAliases(), "A", item.getItemId(), writer);
 
         for (Statement s : item.getAddedStatements()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NewItemScrutinizer.java
Patch:
@@ -45,13 +45,13 @@ public void scrutinize(ItemUpdate update) {
         if (update.isNew()) {
             info(newItemType);
 
-            if (update.getLabels().isEmpty() && update.getAliases().isEmpty()) {
+            if (update.getLabels().isEmpty() && update.getLabelsIfNew().isEmpty() && update.getAliases().isEmpty()) {
                 QAWarning issue = new QAWarning(noLabelType, null, QAWarning.Severity.CRITICAL, 1);
                 issue.setProperty("example_entity", update.getItemId());
                 addIssue(issue);
             }
 
-            if (update.getDescriptions().isEmpty()) {
+            if (update.getDescriptions().isEmpty() && update.getDescriptionsIfNew().isEmpty()) {
                 QAWarning issue = new QAWarning(noDescType, null, QAWarning.Severity.WARNING, 1);
                 issue.setProperty("example_entity", update.getItemId());
                 addIssue(issue);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java
Patch:
@@ -120,7 +120,7 @@ public void testMultipleBatches()
         List<ItemIdValue> qids = ids.stream().map(e -> Datamodel.makeWikidataItemIdValue(e))
                 .collect(Collectors.toList());
         List<ItemUpdate> batch = qids.stream()
-                .map(qid -> new ItemUpdateBuilder(qid).addDescription(description).build())
+                .map(qid -> new ItemUpdateBuilder(qid).addDescription(description, true).build())
                 .collect(Collectors.toList());
 
         int batchSize = 50;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizerTest.java
Patch:
@@ -43,6 +43,6 @@ public void scrutinize(PropertyIdValue pid, Value value) {
     }
 
     public void scrutinizeLabel(MonolingualTextValue text) {
-        scrutinize(new ItemUpdateBuilder(TestingData.existingId).addLabel(text).build());
+        scrutinize(new ItemUpdateBuilder(TestingData.existingId).addLabel(text, true).build());
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbItemDocumentExprTest.java
Patch:
@@ -45,7 +45,7 @@ public class WbItemDocumentExprTest extends WbExpressionTest<ItemUpdate> {
 
     public WbItemDocumentExprTest() {
         WbStatementGroupExprTest sgt = new WbStatementGroupExprTest();
-        WbNameDescExpr nde = new WbNameDescExpr(WbNameDescExpr.NameDescrType.ALIAS,
+        WbNameDescExpr nde = new WbNameDescExpr(WbNameDescExpr.NameDescType.ALIAS,
                 new WbMonolingualExpr(new WbLanguageConstant("en", "English"), new WbStringVariable("column D")));
         WbItemVariable subjectExpr = new WbItemVariable("column E");
         expr = new WbItemDocumentExpr(subjectExpr, Collections.singletonList(nde), Collections.singletonList(sgt.expr));

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/UpdateSchedulerTest.java
Patch:
@@ -87,17 +87,17 @@ public void testMerge()
             throws ImpossibleSchedulingException {
         ItemUpdate update1 = new ItemUpdateBuilder(existingIdA).addStatement(sAtoB).build();
         ItemUpdate update2 = new ItemUpdateBuilder(existingIdA)
-                .addLabel(Datamodel.makeMonolingualTextValue("hello", "fr")).addStatement(sAtoB).build();
+                .addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"), true).addStatement(sAtoB).build();
         ItemUpdate merged = update1.merge(update2);
         assertEquals(Collections.singletonList(merged), schedule(update1, update2));
     }
 
     @Test
     public void testMergeNew()
             throws ImpossibleSchedulingException {
-        ItemUpdate update1 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"))
+        ItemUpdate update1 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"), true)
                 .addStatement(sNewAtoB).build();
-        ItemUpdate update2 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"))
+        ItemUpdate update2 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"), true)
                 .build();
         ItemUpdate merged = update1.merge(update2);
         assertEquals(Collections.singletonList(merged), schedule(update1, update2));

File: main/src/com/google/refine/ProjectMetadata.java
Patch:
@@ -114,7 +114,7 @@ public class ProjectMetadata {
     private ArrayNode _userMetadata = ParsingUtilities.mapper.createArrayNode();
     
     @JsonProperty("customMetadata")
-    private Map<String, Serializable>   _customMetadata = new HashMap<String, Serializable>();
+    private Map<String, Object>   _customMetadata = new HashMap<>();
     @JsonProperty("preferences")
     @JsonView(JsonViews.SaveMode.class)
     private PreferenceStore             _preferenceStore = new PreferenceStore();
@@ -247,7 +247,7 @@ public PreferenceStore getPreferenceStore() {
 
     @JsonIgnore
     public Serializable getCustomMetadata(String key) {
-        return _customMetadata.get(key);
+        return (Serializable)_customMetadata.get(key);
     }
 
     public void setCustomMetadata(String key, Serializable value) {

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbLanguageConstantTest.java
Patch:
@@ -50,6 +50,7 @@ public void testNormalizeLanguageCode() {
         assertEquals("de", WbLanguageConstant.normalizeLanguageCode("de"));
         assertEquals("nb", WbLanguageConstant.normalizeLanguageCode("no"));
         assertEquals("nb", WbLanguageConstant.normalizeLanguageCode("nb"));
+        assertEquals("mul", WbLanguageConstant.normalizeLanguageCode("mul"));
         assertNull(WbLanguageConstant.normalizeLanguageCode("non-existent language code"));
         assertNull(WbLanguageConstant.normalizeLanguageCode(null));
     }

File: extensions/wikidata/src/org/openrefine/wikidata/exporters/QuickStatementsExporter.java
Patch:
@@ -131,7 +131,9 @@ protected void translateItem(ItemUpdate item, Writer writer)
         }
 
         translateNameDescr(qid, item.getLabels(), "L", item.getItemId(), writer);
+        translateNameDescr(qid, item.getLabelsIfNew(), "L", item.getItemId(), writer);
         translateNameDescr(qid, item.getDescriptions(), "D", item.getItemId(), writer);
+        translateNameDescr(qid, item.getDescriptionsIfNew(), "D", item.getItemId(), writer);
         translateNameDescr(qid, item.getAliases(), "A", item.getItemId(), writer);
 
         for (Statement s : item.getAddedStatements()) {

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NewItemScrutinizer.java
Patch:
@@ -45,13 +45,13 @@ public void scrutinize(ItemUpdate update) {
         if (update.isNew()) {
             info(newItemType);
 
-            if (update.getLabels().isEmpty() && update.getAliases().isEmpty()) {
+            if (update.getLabels().isEmpty() && update.getLabelsIfNew().isEmpty() && update.getAliases().isEmpty()) {
                 QAWarning issue = new QAWarning(noLabelType, null, QAWarning.Severity.CRITICAL, 1);
                 issue.setProperty("example_entity", update.getItemId());
                 addIssue(issue);
             }
 
-            if (update.getDescriptions().isEmpty()) {
+            if (update.getDescriptions().isEmpty() && update.getDescriptionsIfNew().isEmpty()) {
                 QAWarning issue = new QAWarning(noDescType, null, QAWarning.Severity.WARNING, 1);
                 issue.setProperty("example_entity", update.getItemId());
                 addIssue(issue);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java
Patch:
@@ -120,7 +120,7 @@ public void testMultipleBatches()
         List<ItemIdValue> qids = ids.stream().map(e -> Datamodel.makeWikidataItemIdValue(e))
                 .collect(Collectors.toList());
         List<ItemUpdate> batch = qids.stream()
-                .map(qid -> new ItemUpdateBuilder(qid).addDescription(description).build())
+                .map(qid -> new ItemUpdateBuilder(qid).addDescription(description, true).build())
                 .collect(Collectors.toList());
 
         int batchSize = 50;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizerTest.java
Patch:
@@ -43,6 +43,6 @@ public void scrutinize(PropertyIdValue pid, Value value) {
     }
 
     public void scrutinizeLabel(MonolingualTextValue text) {
-        scrutinize(new ItemUpdateBuilder(TestingData.existingId).addLabel(text).build());
+        scrutinize(new ItemUpdateBuilder(TestingData.existingId).addLabel(text, true).build());
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbItemDocumentExprTest.java
Patch:
@@ -45,7 +45,7 @@ public class WbItemDocumentExprTest extends WbExpressionTest<ItemUpdate> {
 
     public WbItemDocumentExprTest() {
         WbStatementGroupExprTest sgt = new WbStatementGroupExprTest();
-        WbNameDescExpr nde = new WbNameDescExpr(WbNameDescExpr.NameDescrType.ALIAS,
+        WbNameDescExpr nde = new WbNameDescExpr(WbNameDescExpr.NameDescType.ALIAS,
                 new WbMonolingualExpr(new WbLanguageConstant("en", "English"), new WbStringVariable("column D")));
         WbItemVariable subjectExpr = new WbItemVariable("column E");
         expr = new WbItemDocumentExpr(subjectExpr, Collections.singletonList(nde), Collections.singletonList(sgt.expr));

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/UpdateSchedulerTest.java
Patch:
@@ -87,17 +87,17 @@ public void testMerge()
             throws ImpossibleSchedulingException {
         ItemUpdate update1 = new ItemUpdateBuilder(existingIdA).addStatement(sAtoB).build();
         ItemUpdate update2 = new ItemUpdateBuilder(existingIdA)
-                .addLabel(Datamodel.makeMonolingualTextValue("hello", "fr")).addStatement(sAtoB).build();
+                .addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"), true).addStatement(sAtoB).build();
         ItemUpdate merged = update1.merge(update2);
         assertEquals(Collections.singletonList(merged), schedule(update1, update2));
     }
 
     @Test
     public void testMergeNew()
             throws ImpossibleSchedulingException {
-        ItemUpdate update1 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"))
+        ItemUpdate update1 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"), true)
                 .addStatement(sNewAtoB).build();
-        ItemUpdate update2 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"))
+        ItemUpdate update2 = new ItemUpdateBuilder(newIdA).addLabel(Datamodel.makeMonolingualTextValue("hello", "fr"), true)
                 .build();
         ItemUpdate merged = update1.merge(update2);
         assertEquals(Collections.singletonList(merged), schedule(update1, update2));

File: main/tests/server/src/com/google/refine/tests/exporters/XlsxExporterTests.java
Patch:
@@ -149,7 +149,7 @@ public void exportXlsxDateType() throws IOException{
             XSSFSheet ws = wb.getSheetAt(0);
             XSSFRow row1 = ws.getRow(1);
             XSSFCell cell0 = row1.getCell(0);
-            Assert.assertEquals(cell0.toString(),"09-Apr-2019");
+            Assert.assertTrue(cell0.toString().contains("2019"));
             wb.close();
         } catch (IOException e) {
             Assert.fail();

File: main/src/com/google/refine/commands/history/ApplyOperationsCommand.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.commands.Command;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.operations.UnknownOperation;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 
@@ -79,7 +80,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
     
     protected void reconstructOperation(Project project, ObjectNode obj) throws IOException {
         AbstractOperation operation = ParsingUtilities.mapper.convertValue(obj, AbstractOperation.class);
-        if (operation != null) {
+        if (operation != null && !(operation instanceof UnknownOperation)) {
             try {
                 Process process = operation.createProcess(project, new Properties());
                 

File: main/src/com/google/refine/model/AbstractOperation.java
Patch:
@@ -51,7 +51,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 @JsonTypeInfo(
         use=JsonTypeInfo.Id.CUSTOM,
         include=JsonTypeInfo.As.PROPERTY,
-        property="op")
+        property="op",
+        visible=true) // for UnknownOperation, which needs to read its own id
 @JsonTypeIdResolver(OperationResolver.class)
 abstract public class AbstractOperation  {
     public Process createProcess(Project project, Properties options) throws Exception {

File: main/src/com/google/refine/model/AbstractOperation.java
Patch:
@@ -51,7 +51,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 @JsonTypeInfo(
         use=JsonTypeInfo.Id.CUSTOM,
         include=JsonTypeInfo.As.PROPERTY,
-        property="op")
+        property="op",
+        visible=true) // for UnknownOperation, which needs to read its own id
 @JsonTypeIdResolver(OperationResolver.class)
 abstract public class AbstractOperation  {
     public Process createProcess(Project project, Properties options) throws Exception {

File: main/src/com/google/refine/exporters/XlsExporter.java
Patch:
@@ -142,6 +142,7 @@ public void addRow(List<CellData> cells, boolean isHeader) {
         
         wb.write(outputStream);
         outputStream.flush();
+        wb.close();
     }
 
 }

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -87,7 +87,7 @@ public String guess(File file, String encoding, String seedFormat) {
                         return "text/json";
                     } else if (openAngleBrackets >= 5 && closeAngleBrackets >= 5) {
                         if (trailingPeriods > 0) {
-                            return "text/rdf+n3";
+                            return "text/rdf/n3";
                         } else if (firstChar == '<') {
                             return "text/xml";
                         }

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -87,7 +87,7 @@ public String guess(File file, String encoding, String seedFormat) {
                         return "text/json";
                     } else if (openAngleBrackets >= 5 && closeAngleBrackets >= 5) {
                         if (trailingPeriods > 0) {
-                            return "text/rdf+n3";
+                            return "text/rdf/n3";
                         } else if (firstChar == '<') {
                             return "text/xml";
                         }

File: extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java
Patch:
@@ -134,7 +134,9 @@ public void updateReconciledCells(Project project, boolean reset) {
 	                ReconConfig config = column.getReconConfig();
 	                if (config instanceof StandardReconConfig) {
 	                	StandardReconConfig stdConfig = (StandardReconConfig)config;
-	                	stdConfig.computeFeatures(recon, cell.getValueAsString());
+										if (cell.getValue() instanceof String) {
+	                		stdConfig.computeFeatures(recon, (String) cell.getValue());
+										}
 	                }
                 }
             }

File: main/src/com/google/refine/model/Cell.java
Patch:
@@ -102,7 +102,7 @@ public String getTypeString() {
     
     @JsonProperty("v")
     @JsonInclude(Include.NON_NULL)
-    public String getValueAsString() {
+    public Object getValue() {
         if (value != null && !ExpressionUtils.isError(value)) {
             Instant instant = null;
             if (value instanceof OffsetDateTime) {
@@ -119,8 +119,9 @@ public String getValueAsString() {
                  return ((Double)value).toString();
             } else if (value instanceof Float
                     && (((Float)value).isNaN() || ((Float)value).isInfinite())) {
-                // TODO: Skip?  Write as string?
                 return ((Float)value).toString();
+            } else if (value instanceof Boolean || value instanceof Number){
+                return value;
             } else {
                 return value.toString();
             }

File: extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java
Patch:
@@ -227,6 +227,6 @@ public static String extractSpreadSheetId(String url)
         }    
       }
       
-      throw new IllegalArgumentException("Uknown URL format.");
+      throw new IllegalArgumentException("Unknown URL format.");
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java
Patch:
@@ -86,7 +86,7 @@ public T evaluate(ExpressionContext ctxt)
 
     /**
      * Method that should be implemented by subclasses, converting an OpenRefine
-     * cell to a Wikibase value. Access to other values and emiting warnings is
+     * cell to a Wikibase value. Access to other values and emitting warnings is
      * possible via the supplied EvaluationContext object.
      * 
      * @param cell

File: extensions/wikidata/src/org/openrefine/wikidata/updates/scheduler/WikibaseAPIUpdateScheduler.java
Patch:
@@ -36,7 +36,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 /**
- * A simple scheduler for batches commited via the Wikibase API.
+ * A simple scheduler for batches committed via the Wikibase API.
  * 
  * The strategy is quite simple and makes at most two edits per touched item
  * (which is not minimal though). Each update is split between statements making

File: extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java
Patch:
@@ -227,6 +227,6 @@ public static String extractSpreadSheetId(String url)
         }    
       }
       
-      throw new IllegalArgumentException("Uknown URL format.");
+      throw new IllegalArgumentException("Unknown URL format.");
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java
Patch:
@@ -86,7 +86,7 @@ public T evaluate(ExpressionContext ctxt)
 
     /**
      * Method that should be implemented by subclasses, converting an OpenRefine
-     * cell to a Wikibase value. Access to other values and emiting warnings is
+     * cell to a Wikibase value. Access to other values and emitting warnings is
      * possible via the supplied EvaluationContext object.
      * 
      * @param cell

File: extensions/wikidata/src/org/openrefine/wikidata/updates/scheduler/WikibaseAPIUpdateScheduler.java
Patch:
@@ -36,7 +36,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 
 /**
- * A simple scheduler for batches commited via the Wikibase API.
+ * A simple scheduler for batches committed via the Wikibase API.
  * 
  * The strategy is quite simple and makes at most two edits per touched item
  * (which is not minimal though). Each update is split between statements making

File: main/src/com/google/refine/model/changes/DataExtensionChange.java
Patch:
@@ -221,8 +221,9 @@ public void apply(Project project) {
                         _identifierSpace,
                         _schemaSpace,
                         columnType));
-                if (columnType != null) {
-                        column.setReconStats(ReconStats.create(project, cellIndex));
+                ReconStats reconStats = ReconStats.create(project, cellIndex);
+                if (reconStats.matchedTopics > 0) {
+                    column.setReconStats(reconStats);
                 }
                 
                 try {

File: main/tests/server/src/com/google/refine/tests/model/CacheTests.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 public class CacheTests extends RefineTest {
     
     // Equivalent to duplicate facet on Column A with true selected
-    static private final String ENGINE_JSON_DUPLICATES = "{\"facets\":[{\"type\":\"list\",\"name\":\"facet A\",\"columnName\":\"Column A\",\"expression\":\"(facetCount(value, 'value', 'Column A') > 1).toString()\",\"omitBlank\":false,\"omitError\":false,\"selection\":[{\"v\":{\"v\":\"true\",\"l\":\"true\"}}],\"selectBlank\":false,\"selectError\":false,\"invert\":false}],\"mode\":\"row-based\"}}";
+    static final String ENGINE_JSON_DUPLICATES = "{\"facets\":[{\"type\":\"list\",\"name\":\"facet A\",\"columnName\":\"Column A\",\"expression\":\"facetCount(value, 'value', 'Column A') > 1\",\"omitBlank\":false,\"omitError\":false,\"selection\":[{\"v\":{\"v\":true,\"l\":\"true\"}}],\"selectBlank\":false,\"selectError\":false,\"invert\":false}],\"mode\":\"row-based\"}}";
 
     @Override
     @BeforeTest

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -566,8 +566,8 @@ public int compare(ReconResult a, ReconResult b) {
      * @param text
      * 	    the cell value to compare the reconciliation data to
      */
-	public void computeFeatures(Recon recon, String text) {
-        if (!recon.candidates.isEmpty()) {
+    public void computeFeatures(Recon recon, String text) {
+        if (recon.candidates != null && !recon.candidates.isEmpty()) {
             ReconCandidate candidate = recon.candidates.get(0);
             
             recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.name));
@@ -587,7 +587,7 @@ public void computeFeatures(Recon recon, String text) {
         } else {
         	recon.features = new Object[Recon.Feature_max];
         }
-	}
+    }
     
     static protected double wordDistance(String s1, String s2) {
         Set<String> words1 = breakWords(s1);

File: main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java
Patch:
@@ -116,6 +116,9 @@ public boolean visit(Project project, int rowIndex, Row row) {
                 Cell cell = row.getCell(cellIndex);
                 if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                     String id = cell.value.toString();
+                    if(id.startsWith(identifierSpace)) {
+                    	id = id.substring(identifierSpace.length());
+                    }
                     
                     ReconCandidate match = new ReconCandidate(id, id, new String[0], 100);
                     Recon newRecon = reconConfig.createNewRecon(historyEntryID);

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -566,8 +566,8 @@ public int compare(ReconResult a, ReconResult b) {
      * @param text
      * 	    the cell value to compare the reconciliation data to
      */
-	public void computeFeatures(Recon recon, String text) {
-        if (!recon.candidates.isEmpty()) {
+    public void computeFeatures(Recon recon, String text) {
+        if (recon.candidates != null && !recon.candidates.isEmpty()) {
             ReconCandidate candidate = recon.candidates.get(0);
             
             recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.name));
@@ -587,7 +587,7 @@ public void computeFeatures(Recon recon, String text) {
         } else {
         	recon.features = new Object[Recon.Feature_max];
         }
-	}
+    }
     
     static protected double wordDistance(String s1, String s2) {
         Set<String> words1 = breakWords(s1);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java
Patch:
@@ -54,7 +54,7 @@ public WbDateVariable(String columnName) {
     public TimeValue fromCell(Cell cell, ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
         try {
-            // TODO accept parsed dates (without converting them to strings)
+            // parsed dates are accepted by converting them to strings
             return WbDateConstant.parse(cell.value.toString());
         } catch (ParseException e) {
             if(!cell.value.toString().isEmpty()) {

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbDateVariableTest.java
Patch:
@@ -36,7 +36,7 @@ public class WbDateVariableTest extends WbVariableTest<TimeValue> {
             0, 0, 0, TimeValue.CM_GREGORIAN_PRO);
     private TimeValue day = Datamodel.makeTimeValue(2018, (byte) 2, (byte) 27, (byte) 0, (byte) 0, (byte) 0, (byte) 11,
             0, 0, 0,  TimeValue.CM_GREGORIAN_PRO);
-    private TimeValue minute = Datamodel.makeTimeValue(2001, (byte) 2, (byte) 3, (byte)4, (byte)5, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, TimeValue.CM_GREGORIAN_PRO);
+    private TimeValue minute = Datamodel.makeTimeValue(2001, (byte) 2, (byte) 3, (byte)0, (byte)0, (byte)0, (byte)11, (byte)0, (byte)0, (byte)0, TimeValue.CM_GREGORIAN_PRO);
 
     
     @Override
@@ -71,6 +71,7 @@ public void testNumber() {
     
     @Test
     public void testMinutesISO() {
+    	// Wikidata currently only supports up to day precision
         evaluatesTo(minute, "2001-02-03T04:05Z");
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java
Patch:
@@ -54,7 +54,7 @@ public WbDateVariable(String columnName) {
     public TimeValue fromCell(Cell cell, ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
         try {
-            // TODO accept parsed dates (without converting them to strings)
+            // parsed dates are accepted by converting them to strings
             return WbDateConstant.parse(cell.value.toString());
         } catch (ParseException e) {
             if(!cell.value.toString().isEmpty()) {

File: main/src/com/google/refine/importers/XmlImporter.java
Patch:
@@ -321,6 +321,7 @@ final static private XMLStreamReader createXMLStreamReader(InputStream inputStre
         XMLInputFactory factory = XMLInputFactory.newInstance();
         factory.setProperty(XMLInputFactory.IS_COALESCING, true);
         factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);
+        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
         
         return factory.createXMLStreamReader(wrapPrefixRemovingInputStream(inputStream));
     }

File: main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java
Patch:
@@ -74,7 +74,7 @@ public void setUp() {
 	public void testGetFunctionsAndKeyers() throws ServletException, IOException {
     	command.doGet(request, response);
     	ObjectNode result = ParsingUtilities.mapper.readValue(writer.toString(), ObjectNode.class);
-    	assertTrue(Arrays.asList(JSONUtilities.getStringArray(result, "keyers")).contains("metaphone"));
+    	assertTrue(Arrays.asList(JSONUtilities.getStringArray(result, "keyers")).contains("metaphone3"));
     	assertTrue(Arrays.asList(JSONUtilities.getStringArray(result, "distances")).contains("levenshtein"));
 	}
 }

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -334,7 +334,7 @@ public static class ReconResult {
     	public String name;
     	@JsonProperty("id")
     	public String id;
-    	@JsonProperty("types")
+    	@JsonProperty("type")
 		public List<ReconType> types = Collections.emptyList();
     	@JsonProperty("score")
     	public double score;

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -229,7 +229,8 @@ static public LocalDateTime stringToLocalDate(String s) {
         if (parsed == null) {
             return null;
         }
-        return parsed.toLocalDateTime();
+        return parsed.withOffsetSameInstant(OffsetDateTime.now().getOffset())
+        		.toLocalDateTime();
     }
     
     static public String instantToString(Instant instant) {

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -229,7 +229,8 @@ static public LocalDateTime stringToLocalDate(String s) {
         if (parsed == null) {
             return null;
         }
-        return parsed.toLocalDateTime();
+        return parsed.withOffsetSameInstant(OffsetDateTime.now().getOffset())
+        		.toLocalDateTime();
     }
     
     static public String instantToString(Instant instant) {

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -334,7 +334,7 @@ public static class ReconResult {
     	public String name;
     	@JsonProperty("id")
     	public String id;
-    	@JsonProperty("types")
+    	@JsonProperty("type")
 		public List<ReconType> types = Collections.emptyList();
     	@JsonProperty("score")
     	public double score;

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -33,8 +33,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.model.recon;
 
-import static org.testng.Assert.assertNotNull;
-
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.InputStream;

File: main/src/com/google/refine/expr/functions/arrays/Join.java
Patch:
@@ -41,6 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.ExpressionUtils;
+import com.google.refine.expr.util.JsonValueConverter;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 
@@ -75,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
                                 sb.append(separator);
                             }
                             try {
-                                sb.append(a.get(i).toString());
+                                sb.append(JsonValueConverter.convert(a.get(i)).toString());
                             } catch (JSONException e) {
                                 return new EvalError(ControlFunctionRegistry.getFunctionName(this) + 
                                     " cannot retrieve element " + i + " of array");

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -49,8 +49,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.TimeValue;
 
-import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
-
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Project;
@@ -100,7 +98,7 @@ public void testSerialize()
             throws JSONException, IOException {
         JSONObject serialized = TestingData.jsonFromFile("schema/history_of_medicine.json");
         WikibaseSchema parsed = WikibaseSchema.reconstruct(serialized);
-        TestUtils.isSerializedTo(parsed, TestingData.jsonFromFile("data/schema/history_of_medicine_normalized.json").toString());
+        TestUtils.isSerializedTo(parsed, TestingData.jsonFromFile("schema/history_of_medicine_normalized.json").toString());
     }
 
     @Test

File: main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java
Patch:
@@ -93,7 +93,7 @@ public void testReconstructEditNumber() throws Exception {
     public void testReconstructEditDate() throws Exception {
       editsString = "[{\"from\":[\"2018-10-04T00:00:00Z\"],\"to\":\"newString\",\"type\":\"text\"}]";
 
-      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});
+      editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});
 
       Assert.assertEquals(editList.get(0).from.get(0), "2018-10-04T00:00:00Z");
       Assert.assertEquals(editList.get(0).to,"newString" );
@@ -105,7 +105,7 @@ public void testReconstructEditDate() throws Exception {
     public void testReconstructEditEmpty() throws Exception {
       editsString = "[{\"from\":[\"\"],\"to\":\"newString\",\"type\":\"text\"}]";
 
-      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});
+      editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});
 
       Assert.assertEquals(editList.get(0).from.size(), 1);
       Assert.assertEquals(editList.get(0).from.get(0), "");

File: main/src/com/google/refine/model/Column.java
Patch:
@@ -36,6 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.IOException;
 import java.io.Writer;
 import java.lang.reflect.Method;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -67,7 +68,7 @@ public class Column  {
     private String format = Field.FIELD_FORMAT_DEFAULT;
     private String title = "";
     private String description = "";
-    private Map<String, Object> constraints = null;
+    private Map<String, Object> constraints = Collections.emptyMap();
     
     transient protected Map<String, Object> _precomputes;
     

File: main/tests/server/src/com/google/refine/tests/browsing/EngineTests.java
Patch:
@@ -13,6 +13,6 @@ public class EngineTests {
     public void serializeEngine() {
         Project project = mock(Project.class);
         Engine engine = new Engine(project);
-        TestUtils.isSerializedTo(engine, "{\"mode\":\"row-based\",\"facets\":[]}");
+        TestUtils.isSerializedTo(engine, "{\"engine-mode\":\"row-based\",\"facets\":[]}");
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java
Patch:
@@ -88,7 +88,7 @@ static public AbstractOperation reconstruct(Project project, JSONObject obj)
 
     @Override
     protected String getBriefDescription(Project project) {
-        return "Peform edits on Wikidata";
+        return "Peform Wikibase edits";
     }
 
     @Override

File: main/src/com/google/refine/preference/PreferenceStore.java
Patch:
@@ -79,7 +79,7 @@ public void put(String key, Object value) {
     
     private Object wrapJSONArray(Object value) {
         ObjectMapper mapper = new ObjectMapper();
-        if(value != null && value instanceof JSONArray) {
+        if(value != null && (value instanceof JSONArray || value instanceof JSONObject)) {
             try {
                 return mapper.readValue(value.toString(), JsonNode.class);
             } catch (IOException e) {

File: main/src/com/google/refine/util/Pool.java
Patch:
@@ -107,6 +107,7 @@ public void save(Writer writer) throws IOException {
         
         for (Recon recon : recons2) {
             ParsingUtilities.saveWriter.writeValue(writer, recon);
+            writer.write('\n');
         }
     }
     

File: main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java
Patch:
@@ -33,7 +33,7 @@ public class ListFacetTests extends RefineTest {
             + "\"expression\":\"value+\\\"bar\\\"\","
             + "\"columnName\":\"Column A\","
             + "\"invert\":false,"
-            + "\"error\":\"No column named Column A\"}\" are not equal as JSON strings.\n" + 
+            + "\"error\":\"No column named Column A\"" + 
             "}";
     
     private static String jsonFacet = "{"

File: main/tests/server/src/com/google/refine/tests/expr/EvalErrorTests.java
Patch:
@@ -1,7 +1,8 @@
-package com.google.refine.expr;
+package com.google.refine.tests.expr;
 
 import org.testng.annotations.Test;
 
+import com.google.refine.expr.EvalError;
 import com.google.refine.tests.util.TestUtils;
 
 public class EvalErrorTests {

File: main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java
Patch:
@@ -121,7 +121,7 @@ public String getInsertSQL(){
                         handleNullField(allowNullChkBox, defaultValue, nullValueNull, val.getColumnName(), rowValue, true);
                         
                     }else {
-                        rowValue.append("'" + val.getText() + "'"); 
+                        rowValue.append("'" + val.getText().replace("'","''") + "'"); 
                         
                     }
                  

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java
Patch:
@@ -55,6 +55,9 @@ public class WbDateConstant implements WbExpression<TimeValue> {
      * precision it induces (an integer according to Wikibase's data model).
      */
     public static Map<SimpleDateFormat, Integer> acceptedFormats = ImmutableMap.<SimpleDateFormat, Integer> builder()
+            .put(new SimpleDateFormat("yyyy'M'"), 6)
+            .put(new SimpleDateFormat("yyyy'C'"), 7)
+            .put(new SimpleDateFormat("yyyy'D'"), 8)
             .put(new SimpleDateFormat("yyyy"), 9)
             .put(new SimpleDateFormat("yyyy-MM"), 10)
             .put(new SimpleDateFormat("yyyy-MM-dd"), 11)

File: main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java
Patch:
@@ -121,7 +121,7 @@ public String getInsertSQL(){
                         handleNullField(allowNullChkBox, defaultValue, nullValueNull, val.getColumnName(), rowValue, true);
                         
                     }else {
-                        rowValue.append("'" + val.getText() + "'"); 
+                        rowValue.append("'" + val.getText().replace("'","''") + "'"); 
                         
                     }
                  

File: extensions/database/tests/src/com/google/refine/extension/database/DatabaseServiceTest.java
Patch:
@@ -119,10 +119,8 @@ public void testExecuteQuery() throws DatabaseServiceException {
     public void testBuildLimitQuery() {
         DatabaseService dbService = DatabaseService.get(testDbConfig.getDatabaseType());
         String limitQuery = dbService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
-
         Assert.assertNotNull(limitQuery);
-
-        Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
+        Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
     }
 
     @Test(groups = {"requiresMySQL"})

File: extensions/database/tests/src/com/google/refine/extension/database/mariadb/MariaDBDatabaseServiceTest.java
Patch:
@@ -99,9 +99,7 @@ public void testBuildLimitQuery() {
          MariaDBDatabaseService pgSqlService = (MariaDBDatabaseService) DatabaseService.get(MariaDBDatabaseService.DB_NAME);
          String limitQuery = pgSqlService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
          Assert.assertNotNull(limitQuery);
-
-         Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
-
+         Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
      }
 
      @Test

File: extensions/database/tests/src/com/google/refine/extension/database/mysql/MySQLDatabaseServiceTest.java
Patch:
@@ -99,9 +99,7 @@ public void testBuildLimitQuery() {
          MySQLDatabaseService pgSqlService = (MySQLDatabaseService) DatabaseService.get(MySQLDatabaseService.DB_NAME);
          String limitQuery = pgSqlService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
          Assert.assertNotNull(limitQuery);
-
-         Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
-
+         Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
      }
 
      @Test

File: extensions/database/tests/src/com/google/refine/extension/database/pgsql/PgSQLDatabaseServiceTest.java
Patch:
@@ -100,9 +100,7 @@ public void testBuildLimitQuery() {
         PgSQLDatabaseService pgSqlService = (PgSQLDatabaseService) DatabaseService.get(PgSQLDatabaseService.DB_NAME);
         String limitQuery = pgSqlService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
         Assert.assertNotNull(limitQuery);
-
-        Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
-
+        Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
     }
 
     @Test

File: extensions/database/tests/src/com/google/refine/extension/database/DatabaseServiceTest.java
Patch:
@@ -119,10 +119,8 @@ public void testExecuteQuery() throws DatabaseServiceException {
     public void testBuildLimitQuery() {
         DatabaseService dbService = DatabaseService.get(testDbConfig.getDatabaseType());
         String limitQuery = dbService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
-
         Assert.assertNotNull(limitQuery);
-
-        Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
+        Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
     }
 
     @Test(groups = {"requiresMySQL"})

File: main/src/com/google/refine/commands/project/CreateProjectCommand.java
Patch:
@@ -106,7 +106,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             }
             
             JSONObject optionObj = null;
-            String optionsString = request.getParameter("options");
+            String optionsString = parameters.getProperty("options");
             if (optionsString != null && !optionsString.isEmpty()) {
                 optionObj = ParsingUtilities.evaluateJsonStringToObject(optionsString);
             } else {

File: main/tests/server/src/com/google/refine/tests/expr/functions/xml/OwnTextTests.java
Patch:
@@ -1,14 +1,14 @@
-package com.google.refine.tests.expr.functions.html;
+package com.google.refine.tests.expr.functions.xml;
 
 import org.testng.annotations.Test;
 
-import com.google.refine.expr.functions.html.OwnText;
+import com.google.refine.expr.functions.xml.OwnText;
 import com.google.refine.tests.util.TestUtils;
 
 public class OwnTextTests {
     @Test
     public void serializeOwnText() {
-        String json = "{\"description\":\"Gets the text owned by this HTML element only; does not get the combined text of all children.\",\"params\":\"Element e\",\"returns\":\"String ownText\"}";
+        String json = "{\"description\":\"Gets the text owned by this XML/HTML element only; does not get the combined text of all children.\",\"params\":\"Element e\",\"returns\":\"String ownText\"}";
         TestUtils.isSerializedTo(new OwnText(), json);
     }
 }

File: main/tests/server/src/com/google/refine/tests/model/CacheTests.java
Patch:
@@ -62,7 +62,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 public class CacheTests extends RefineTest {
     
     // Equivalent to duplicate facet on Column A with true selected
-    static final String ENGINE_JSON_DUPLICATES = "{\"facets\":[{\"type\":\"list\",\"name\":\"facet A\",\"columnName\":\"Column A\",\"expression\":\"facetCount(value, 'value', 'Column A') > 1\",\"omitBlank\":false,\"omitError\":false,\"selection\":[{\"v\":{\"v\":true,\"l\":\"true\"}}],\"selectBlank\":false,\"selectError\":false,\"invert\":false}],\"mode\":\"row-based\"}}";
+    static private final String ENGINE_JSON_DUPLICATES = "{\"facets\":[{\"type\":\"list\",\"name\":\"facet A\",\"columnName\":\"Column A\",\"expression\":\"(facetCount(value, 'value', 'Column A') > 1).toString()\",\"omitBlank\":false,\"omitError\":false,\"selection\":[{\"v\":{\"v\":\"true\",\"l\":\"true\"}}],\"selectBlank\":false,\"selectError\":false,\"invert\":false}],\"mode\":\"row-based\"}}";
 
     @Override
     @BeforeTest

File: extensions/database/tests/src/com/google/refine/extension/database/mariadb/MariaDBDatabaseServiceTest.java
Patch:
@@ -99,9 +99,7 @@ public void testBuildLimitQuery() {
          MariaDBDatabaseService pgSqlService = (MariaDBDatabaseService) DatabaseService.get(MariaDBDatabaseService.DB_NAME);
          String limitQuery = pgSqlService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
          Assert.assertNotNull(limitQuery);
-
-         Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
-
+         Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
      }
 
      @Test

File: extensions/database/tests/src/com/google/refine/extension/database/mysql/MySQLDatabaseServiceTest.java
Patch:
@@ -99,9 +99,7 @@ public void testBuildLimitQuery() {
          MySQLDatabaseService pgSqlService = (MySQLDatabaseService) DatabaseService.get(MySQLDatabaseService.DB_NAME);
          String limitQuery = pgSqlService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
          Assert.assertNotNull(limitQuery);
-
-         Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
-
+         Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
      }
 
      @Test

File: extensions/database/tests/src/com/google/refine/extension/database/pgsql/PgSQLDatabaseServiceTest.java
Patch:
@@ -100,9 +100,7 @@ public void testBuildLimitQuery() {
         PgSQLDatabaseService pgSqlService = (PgSQLDatabaseService) DatabaseService.get(PgSQLDatabaseService.DB_NAME);
         String limitQuery = pgSqlService.buildLimitQuery(100, 0, "SELECT * FROM " + testTable);
         Assert.assertNotNull(limitQuery);
-
-        Assert.assertEquals(limitQuery, "SELECT * FROM " + testTable + " LIMIT " + 100 + " OFFSET " + 0 + ";");
-
+        Assert.assertEquals(limitQuery, "SELECT * FROM (SELECT * FROM " + testTable + ") data LIMIT " + 100 + " OFFSET " + 0 + ";");
     }
 
     @Test

File: main/src/com/google/refine/commands/project/CreateProjectCommand.java
Patch:
@@ -106,7 +106,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             }
             
             JSONObject optionObj = null;
-            String optionsString = request.getParameter("options");
+            String optionsString = parameters.getProperty("options");
             if (optionsString != null && !optionsString.isEmpty()) {
                 optionObj = ParsingUtilities.evaluateJsonStringToObject(optionsString);
             } else {

File: main/src/com/google/refine/browsing/facets/ListFacet.java
Patch:
@@ -205,7 +205,7 @@ public void write(JSONWriter writer, Properties options)
             if (_config.selectBoolean || _booleanCount > 0) {
                 writer.key("booleanChoice");
                 writer.object();
-                writer.key("s"); writer.value(_configselectBoolean);
+                writer.key("s"); writer.value(_config.selectBoolean);
                 writer.key("c"); writer.value(_booleanCount);
                 writer.endObject();
             }
@@ -270,7 +270,7 @@ public RowFilter getRowFilter(Project project) {
         return 
             _eval == null || 
             _errorMessage != null ||
-            (_config.selection.size() == 0 && !_config.selectBlank && !_config.selectError) ? 
+            (_config.selection.size() == 0 && !_config.selectBlank && !_config.selectError && !_config.selectNumber && !_config.selectDateTime && !_config.selectBoolean) ? 
                 null :
                 new ExpressionEqualRowFilter(
                     _eval, 

File: main/src/com/google/refine/browsing/facets/ListFacet.java
Patch:
@@ -305,6 +305,7 @@ protected void postProcessGrouper(ExpressionNominalValueGrouper grouper) {
                  */
                 NominalFacetChoice choice = new NominalFacetChoice(decoratedValue);
                 choice.count = 0;
+                choice.selected = true;
                 _choices.add(choice);
             }
         }

File: main/src/com/google/refine/browsing/facets/ListFacet.java
Patch:
@@ -305,6 +305,7 @@ protected void postProcessGrouper(ExpressionNominalValueGrouper grouper) {
                  */
                 NominalFacetChoice choice = new NominalFacetChoice(decoratedValue);
                 choice.count = 0;
+                choice.selected = true;
                 _choices.add(choice);
             }
         }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbMonolingualExpr.java
Patch:
@@ -53,7 +53,7 @@ public MonolingualTextValue evaluate(ExpressionContext ctxt)
         String text = getValueExpr().evaluate(ctxt).getString();
         try {
             String lang = getLanguageExpr().evaluate(ctxt);
-            return Datamodel.makeMonolingualTextValue(text, lang);
+            return Datamodel.makeMonolingualTextValue(text.trim(), lang);
 
         } catch (SkipSchemaExpressionException e) {
             QAWarning warning = new QAWarning("monolingual-text-without-language", null, QAWarning.Severity.WARNING, 1);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringConstant.java
Patch:
@@ -39,7 +39,7 @@ public WbStringConstant(@JsonProperty("value") String value) {
         Validate.notNull(value);
         Validate.isTrue(!value.isEmpty()); // for now we don't accept empty strings
         // because in the variable counterpart of this expression, they are skipped
-        this.value = value;
+        this.value = value.trim();
     }
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java
Patch:
@@ -62,7 +62,7 @@ public StringValue fromCell(Cell cell, ExpressionContext ctxt)
         	if (cell.value instanceof Double && ((Double)cell.value) % 1 == 0) {
         		stringValue = Integer.toString(((Double)cell.value).intValue());
         	}
-            return Datamodel.makeStringValue(stringValue);
+            return Datamodel.makeStringValue(stringValue.trim());
         }
         throw new SkipSchemaExpressionException();
     }

File: extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java
Patch:
@@ -31,6 +31,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.wikidata.wdtk.wikibaseapi.ApiConnection;
+import org.wikidata.wdtk.wikibaseapi.BasicApiConnection;
 import org.wikidata.wdtk.wikibaseapi.LoginFailedException;
 
 import com.google.refine.ProjectManager;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizer.java
Patch:
@@ -3,15 +3,15 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 
 public class EntityTypeScrutinizer extends SnakScrutinizer {
     
     public final static String type = "invalid-entity-type";
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         PropertyIdValue pid = snak.getPropertyId();
         if(!_fetcher.usableOnItems(pid)) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/FormatScrutinizer.java
Patch:
@@ -30,8 +30,8 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that detects incorrect formats in text values (mostly
@@ -73,7 +73,7 @@ protected Pattern getPattern(PropertyIdValue pid) {
     }
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         if (StringValue.class.isInstance(snak.getValue())) {
             String value = ((StringValue) snak.getValue()).getString();
             PropertyIdValue pid = snak.getPropertyId();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SelfReferentialScrutinizer.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that checks for self-referential statements. These statements
@@ -39,7 +39,7 @@ public class SelfReferentialScrutinizer extends SnakScrutinizer {
     public static final String type = "self-referential-statements";
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         if (entityId.equals(snak.getValue())) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
             issue.setProperty("example_entity", entityId);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizer.java
Patch:
@@ -26,8 +26,8 @@
 import org.openrefine.wikidata.updates.ItemUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that inspects the values of snaks and terms
@@ -55,7 +55,7 @@ public void scrutinize(ItemUpdate update) {
     public abstract void scrutinize(Value value);
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         scrutinize(snak.getValue());
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java
Patch:
@@ -26,7 +26,6 @@
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.entityvalues.FullyPropertySerializingValueSnak;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
-import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.Value;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.QuantityValue;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
 
 public class WbQuantityExprTest extends WbExpressionTest<QuantityValue> {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -52,8 +52,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.TimeValue;
 
-import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
-
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Project;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java
Patch:
@@ -25,8 +25,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.file.Files;
-import java.nio.file.Paths;
 import java.util.Collections;
 
 import org.apache.commons.io.IOUtils;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/PointerExtractorTest.java
Patch:
@@ -66,7 +66,6 @@ public void testExtractEntityId() {
 
     @Test
     public void testExtractDatavalues() {
-        assertEmpty(Datamodel.makeDatatypeIdValue("string"));
         assertEmpty(Datamodel.makeGlobeCoordinatesValue(1.34, 2.354, 0.1, GlobeCoordinatesValue.GLOBE_EARTH));
         assertEmpty(Datamodel.makeStringValue("est"));
         assertEmpty(Datamodel.makeMonolingualTextValue("srtu", "en"));

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringConstant.java
Patch:
@@ -39,7 +39,7 @@ public WbStringConstant(@JsonProperty("value") String value) {
         Validate.notNull(value);
         Validate.isTrue(!value.isEmpty()); // for now we don't accept empty strings
         // because in the variable counterpart of this expression, they are skipped
-        this.value = value;
+        this.value = value.trim();
     }
 
     @Override

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStringVariableTest.java
Patch:
@@ -54,7 +54,7 @@ public void testTrailingWhitespace() {
 
     @Test
     public void testLeadingWhitespace() {
-        evaluatesTo(Datamodel.makeStringValue("dirty"), " dirty");
+        evaluatesTo(Datamodel.makeStringValue("dirty"), " dirty");
     }
 
     @Test

File: extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java
Patch:
@@ -31,6 +31,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.wikidata.wdtk.wikibaseapi.ApiConnection;
+import org.wikidata.wdtk.wikibaseapi.BasicApiConnection;
 import org.wikidata.wdtk.wikibaseapi.LoginFailedException;
 
 import com.google.refine.ProjectManager;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EntityTypeScrutinizer.java
Patch:
@@ -3,15 +3,15 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 
 public class EntityTypeScrutinizer extends SnakScrutinizer {
     
     public final static String type = "invalid-entity-type";
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         PropertyIdValue pid = snak.getPropertyId();
         if(!_fetcher.usableOnItems(pid)) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/FormatScrutinizer.java
Patch:
@@ -30,8 +30,8 @@
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that detects incorrect formats in text values (mostly
@@ -73,7 +73,7 @@ protected Pattern getPattern(PropertyIdValue pid) {
     }
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         if (StringValue.class.isInstance(snak.getValue())) {
             String value = ((StringValue) snak.getValue()).getString();
             PropertyIdValue pid = snak.getPropertyId();

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SelfReferentialScrutinizer.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.openrefine.wikidata.qa.QAWarning;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that checks for self-referential statements. These statements
@@ -39,7 +39,7 @@ public class SelfReferentialScrutinizer extends SnakScrutinizer {
     public static final String type = "self-referential-statements";
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         if (entityId.equals(snak.getValue())) {
             QAWarning issue = new QAWarning(type, null, QAWarning.Severity.WARNING, 1);
             issue.setProperty("example_entity", entityId);

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ValueScrutinizer.java
Patch:
@@ -26,8 +26,8 @@
 import org.openrefine.wikidata.updates.ItemUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
-import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
+import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;
 
 /**
  * A scrutinizer that inspects the values of snaks and terms
@@ -55,7 +55,7 @@ public void scrutinize(ItemUpdate update) {
     public abstract void scrutinize(Value value);
 
     @Override
-    public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
+    public void scrutinize(ValueSnak snak, EntityIdValue entityId, boolean added) {
         scrutinize(snak.getValue());
     }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java
Patch:
@@ -26,7 +26,6 @@
 import org.jsoup.helper.Validate;
 import org.openrefine.wikidata.schema.entityvalues.FullyPropertySerializingValueSnak;
 import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;
-import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Snak;
 import org.wikidata.wdtk.datamodel.interfaces.Value;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.QuantityValue;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
 
 public class WbQuantityExprTest extends WbExpressionTest<QuantityValue> {
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java
Patch:
@@ -52,8 +52,6 @@
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.TimeValue;
 
-import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
-
 import com.google.refine.browsing.Engine;
 import com.google.refine.browsing.EngineConfig;
 import com.google.refine.model.Project;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java
Patch:
@@ -25,8 +25,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.file.Files;
-import java.nio.file.Paths;
 import java.util.Collections;
 
 import org.apache.commons.io.IOUtils;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/PointerExtractorTest.java
Patch:
@@ -66,7 +66,6 @@ public void testExtractEntityId() {
 
     @Test
     public void testExtractDatavalues() {
-        assertEmpty(Datamodel.makeDatatypeIdValue("string"));
         assertEmpty(Datamodel.makeGlobeCoordinatesValue(1.34, 2.354, 0.1, GlobeCoordinatesValue.GLOBE_EARTH));
         assertEmpty(Datamodel.makeStringValue("est"));
         assertEmpty(Datamodel.makeMonolingualTextValue("srtu", "en"));

File: extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java
Patch:
@@ -39,6 +39,7 @@
 import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.StatementGroup;
+import org.wikidata.wdtk.datamodel.interfaces.StatementRank;
 import org.wikidata.wdtk.datamodel.interfaces.StringValue;
 import org.wikidata.wdtk.datamodel.interfaces.Value;
 
@@ -290,7 +291,8 @@ protected List<SnakGroup> getSingleConstraint(PropertyIdValue pid, String qid) {
      */
     protected Stream<Statement> getConstraintsByType(PropertyIdValue pid, String qid) {
         Stream<Statement> allConstraints = getConstraintStatements(pid).stream()
-                .filter(s -> ((EntityIdValue) s.getValue()).getId().equals(qid));
+                .filter(s -> s.getValue() != null && ((EntityIdValue) s.getValue()).getId().equals(qid))
+                .filter(s -> !StatementRank.DEPRECATED.equals(s.getRank()));
         return allConstraints;
     }
 

File: main/src/com/google/refine/expr/functions/strings/SmartSplit.java
Patch:
@@ -76,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
             if (args.length > 1) {
                 String sep = args[1].toString();
                 parser = new CSVParser(
-                    sep.charAt(0),
+                    sep,
                     CSVParser.DEFAULT_QUOTE_CHARACTER,
                     CSVParser.DEFAULT_ESCAPE_CHARACTER,
                     CSVParser.DEFAULT_STRICT_QUOTES,

File: main/src/com/google/refine/expr/functions/strings/SmartSplit.java
Patch:
@@ -76,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {
             if (args.length > 1) {
                 String sep = args[1].toString();
                 parser = new CSVParser(
-                    sep.charAt(0),
+                    sep,
                     CSVParser.DEFAULT_QUOTE_CHARACTER,
                     CSVParser.DEFAULT_ESCAPE_CHARACTER,
                     CSVParser.DEFAULT_STRICT_QUOTES,

File: extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java
Patch:
@@ -192,7 +192,8 @@ protected void prepareNewBatch()
         logger.info("Requesting documents");
         currentDocs = null;
         int retries = 3;
-        while (currentDocs == null && retries > 0) {
+        // TODO: remove currentDocs.isEmpty() once https://github.com/Wikidata/Wikidata-Toolkit/issues/402 is solved
+        while ((currentDocs == null || currentDocs.isEmpty()) && retries > 0) {
             try {
                 currentDocs = fetcher.getEntityDocuments(qidsToFetch);
             } catch (MediaWikiApiErrorException e) {

File: extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java
Patch:
@@ -192,7 +192,8 @@ protected void prepareNewBatch()
         logger.info("Requesting documents");
         currentDocs = null;
         int retries = 3;
-        while (currentDocs == null && retries > 0) {
+        // TODO: remove currentDocs.isEmpty() once https://github.com/Wikidata/Wikidata-Toolkit/issues/402 is solved
+        while ((currentDocs == null || currentDocs.isEmpty()) && retries > 0) {
             try {
                 currentDocs = fetcher.getEntityDocuments(qidsToFetch);
             } catch (MediaWikiApiErrorException e) {

File: extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTestUtils.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.Map;
 import java.util.Random;
 
-import org.apache.commons.lang.text.StrSubstitutor;
+import org.apache.commons.lang3.text.StrSubstitutor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java
Patch:
@@ -52,7 +52,7 @@ public void SetUp()
     @Test
     public void testValidSchema()
             throws JSONException, IOException, ServletException {
-        String schemaJson = jsonFromFile("data/schema/inception.json").toString();
+        String schemaJson = jsonFromFile("schema/inception.json").toString();
         when(request.getParameter("schema")).thenReturn(schemaJson);
 
         command.doPost(request, response);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommandTest.java
Patch:
@@ -44,7 +44,7 @@ public void setUp() {
     @Test
     public void testValidSchema()
             throws ServletException, IOException {
-        String schemaJson = jsonFromFile("data/schema/inception.json").toString();
+        String schemaJson = jsonFromFile("schema/inception.json").toString();
         when(request.getParameter("schema")).thenReturn(schemaJson);
 
         command.doPost(request, response);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java
Patch:
@@ -70,7 +70,7 @@ public void testSimpleProject()
             throws JSONException, IOException {
         Project project = this.createCSVProject(TestingData.inceptionWithNewCsv);
         TestingData.reconcileInceptionCells(project);
-        JSONObject serialized = TestingData.jsonFromFile("data/schema/inception.json");
+        JSONObject serialized = TestingData.jsonFromFile("schema/inception.json");
         WikibaseSchema schema = WikibaseSchema.reconstruct(serialized);
         project.overlayModels.put("wikibaseSchema", schema);
         Engine engine = new Engine(project);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java
Patch:
@@ -53,7 +53,7 @@ public AbstractOperation reconstruct()
     @Override
     public JSONObject getJson()
             throws Exception {
-        return TestingData.jsonFromFile("data/operations/perform-edits.json");
+        return TestingData.jsonFromFile("operations/perform-edits.json");
     }
     
     @Test(expectedExceptions=IllegalArgumentException.class)

File: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java
Patch:
@@ -53,13 +53,13 @@ public AbstractOperation reconstruct()
     @Override
     public JSONObject getJson()
             throws Exception {
-        return TestingData.jsonFromFile("data/operations/save-schema.json");
+        return TestingData.jsonFromFile("operations/save-schema.json");
     }
 
     @Test
     public void testLoadChange()
             throws Exception {
-        JSONObject schemaJson = TestingData.jsonFromFile("data/schema/inception.json");
+        JSONObject schemaJson = TestingData.jsonFromFile("schema/inception.json");
         String changeString = "newSchema=" + schemaJson.toString() + "\n" + "oldSchema=\n" + "/ec/";
         WikibaseSchema schema = WikibaseSchema.reconstruct(schemaJson);
 

File: main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java
Patch:
@@ -63,7 +63,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {
 
-    static final String ENGINE_JSON_URLS = "{\"mode\":\"row-based\"}}";
+    static final String ENGINE_JSON_URLS = "{\"mode\":\"row-based\"}";
 
     @Override
     @BeforeTest

File: main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java
Patch:
@@ -12,7 +12,7 @@ public void serializePreferenceStore() {
         String json = "{"
                 + "\"entries\":{"
                 + "   \"reconciliation.standardServices\":["
-                + "           {\"propose_properties\":{\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/propose_properties\"}},\"preview\":{\"width\":320,\"url\":\"https://tools.wmflabs.org/openrefine-wikidata/en/preview?id={{id}}\",\"height\":90},\"view\":{\"url\":\"https://www.wikidata.org/wiki/{{id}}\"},\"ui\":{\"handler\":\"ReconStandardServicePanel\"},\"identifierSpace\":\"http://www.wikidata.org/entity/\",\"name\":\"Wikidata Reconciliation for OpenRefine (en)\",\"suggest\":{\"property\":{\"flyout_service_path\":\"/en/flyout/property?id=${id}\",\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/suggest/property\"},\"type\":{\"flyout_service_path\":\"/en/flyout/type?id=${id}\",\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/suggest/type\"},\"entity\":{\"flyout_service_path\":\"/en/flyout/entity?id=${id}\",\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/suggest/entity\"}},\"defaultTypes\":[{\"name\":\"entity\",\"id\":\"Q35120\"}],\"url\":\"https://tools.wmflabs.org/openrefine-wikidata/en/api\",\"schemaSpace\":\"http://www.wikidata.org/prop/direct/\"}"
+                + "           {\"propose_properties\":{\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/propose_properties\"},\"preview\":{\"width\":320,\"url\":\"https://tools.wmflabs.org/openrefine-wikidata/en/preview?id={{id}}\",\"height\":90},\"view\":{\"url\":\"https://www.wikidata.org/wiki/{{id}}\"},\"ui\":{\"handler\":\"ReconStandardServicePanel\"},\"identifierSpace\":\"http://www.wikidata.org/entity/\",\"name\":\"Wikidata Reconciliation for OpenRefine (en)\",\"suggest\":{\"property\":{\"flyout_service_path\":\"/en/flyout/property?id=${id}\",\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/suggest/property\"},\"type\":{\"flyout_service_path\":\"/en/flyout/type?id=${id}\",\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/suggest/type\"},\"entity\":{\"flyout_service_path\":\"/en/flyout/entity?id=${id}\",\"service_url\":\"https://tools.wmflabs.org/openrefine-wikidata\",\"service_path\":\"/en/suggest/entity\"}},\"defaultTypes\":[{\"name\":\"entity\",\"id\":\"Q35120\"}],\"url\":\"https://tools.wmflabs.org/openrefine-wikidata/en/api\",\"schemaSpace\":\"http://www.wikidata.org/prop/direct/\"}"
                 + "        ],"
                 + "   \"scripting.starred-expressions\":{\"class\":\"com.google.refine.preference.TopList\",\"top\":2147483647,\"list\":[]},"
                 + "   \"scripting.expressions\":{\"class\":\"com.google.refine.preference.TopList\",\"top\":100,\"list\":[]}"

File: main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java
Patch:
@@ -68,7 +68,7 @@ static public AbstractOperation reconstruct(Project project, JSONObject obj) thr
         
         JSONObject match = obj.getJSONObject("match");
         
-        JSONArray types = obj.getJSONArray("types");
+        JSONArray types = match.getJSONArray("types");
         String[] typeIDs = new String[types.length()];
         for (int i = 0; i < typeIDs.length; i++) {
             typeIDs[i] = types.getString(i);

File: main/src/com/google/refine/sorting/BooleanCriterion.java
Patch:
@@ -53,7 +53,7 @@ protected Object makeKey(Object value) {
                         return s_error;
                     }
                 }
-                return value;
+                return null;
             }
 
             @Override

File: main/src/com/google/refine/sorting/NumberCriterion.java
Patch:
@@ -66,7 +66,7 @@ protected Object makeKey(Object value) {
                     }
                     return s_error;
                 }
-                return value;
+                return null;
             }
 
             @Override

File: main/src/com/google/refine/expr/functions/strings/Unescape.java
Patch:
@@ -62,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
                 } else if ("csv".equals(mode)) {
                     return StringEscapeUtils.unescapeCsv(s);
                 } else if ("javascript".equals(mode)) {
-                    return StringEscapeUtils.escapeEcmaScript(s);
+                    return StringEscapeUtils.unescapeEcmaScript(s);
                 } else if ("url".equals(mode)) {
                     try {
                         return URLDecoder.decode(s,"UTF-8");

File: main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java
Patch:
@@ -133,7 +133,7 @@ public String getInsertSQL(){
                  
                     }else {//value not null
                         
-                        if(type.equals(SqlData.SQL_TYPE_NUMERIC)) {//test if number is numeric (decimal number is valid)
+                        if(type.equals(SqlData.SQL_TYPE_NUMERIC)) {//test if number is numeric (decimal(p,s) number is valid)
                            
                             if(!NumberUtils.isNumber(val.getText())){
                                 throw new SqlExporterException(

File: main/src/com/google/refine/sorting/BooleanCriterion.java
Patch:
@@ -53,7 +53,7 @@ protected Object makeKey(Object value) {
                         return s_error;
                     }
                 }
-                return value;
+                return null;
             }
 
             @Override

File: main/src/com/google/refine/sorting/NumberCriterion.java
Patch:
@@ -66,7 +66,7 @@ protected Object makeKey(Object value) {
                     }
                     return s_error;
                 }
-                return value;
+                return null;
             }
 
             @Override

File: main/src/com/google/refine/expr/functions/strings/Unescape.java
Patch:
@@ -62,7 +62,7 @@ public Object call(Properties bindings, Object[] args) {
                 } else if ("csv".equals(mode)) {
                     return StringEscapeUtils.unescapeCsv(s);
                 } else if ("javascript".equals(mode)) {
-                    return StringEscapeUtils.escapeEcmaScript(s);
+                    return StringEscapeUtils.unescapeEcmaScript(s);
                 } else if ("url".equals(mode)) {
                     try {
                         return URLDecoder.decode(s,"UTF-8");

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbReferenceExpr.java
Patch:
@@ -59,16 +59,15 @@ public WbReferenceExpr(@JsonProperty("snaks") List<WbSnakExpr> snakExprs) {
     @Override
     public Reference evaluate(ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
-        List<SnakGroup> snakGroups = new ArrayList<SnakGroup>();
+        List<Snak> snakList = new ArrayList<Snak>();
         for (WbSnakExpr expr : getSnaks()) {
-            List<Snak> snakList = new ArrayList<Snak>(1);
             try {
                 snakList.add(expr.evaluate(ctxt));
-                snakGroups.add(Datamodel.makeSnakGroup(snakList));
             } catch (SkipSchemaExpressionException e) {
                 continue;
             }
         }
+        List<SnakGroup> snakGroups = WbStatementExpr.groupSnaks(snakList);
         if (!snakGroups.isEmpty()) {
             return Datamodel.makeReference(snakGroups);
         } else {

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbReferenceExpr.java
Patch:
@@ -59,16 +59,15 @@ public WbReferenceExpr(@JsonProperty("snaks") List<WbSnakExpr> snakExprs) {
     @Override
     public Reference evaluate(ExpressionContext ctxt)
             throws SkipSchemaExpressionException {
-        List<SnakGroup> snakGroups = new ArrayList<SnakGroup>();
+        List<Snak> snakList = new ArrayList<Snak>();
         for (WbSnakExpr expr : getSnaks()) {
-            List<Snak> snakList = new ArrayList<Snak>(1);
             try {
                 snakList.add(expr.evaluate(ctxt));
-                snakGroups.add(Datamodel.makeSnakGroup(snakList));
             } catch (SkipSchemaExpressionException e) {
                 continue;
             }
         }
+        List<SnakGroup> snakGroups = WbStatementExpr.groupSnaks(snakList);
         if (!snakGroups.isEmpty()) {
             return Datamodel.makeReference(snakGroups);
         } else {

File: extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java
Patch:
@@ -55,7 +55,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/database/test/com/google/refine/extension/database/DatabaseImportControllerTest.java
Patch:
@@ -25,14 +25,14 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.mysql.MySQLDatabaseService;
 import com.google.refine.extension.database.stub.RefineDbServletStub;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 
 

File: extensions/database/test/com/google/refine/extension/database/cmd/SavedConnectionCommandTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.DBExtensionTestUtils;
 import com.google.refine.extension.database.DBExtensionTests;
@@ -36,6 +35,7 @@
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SavedConnectionCommandTest extends DBExtensionTests{
     

File: extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java
Patch:
@@ -43,7 +43,7 @@
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class GDataImporter {

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -37,7 +37,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importers.TabularImportingParserBase;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class PCAxisImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -56,8 +56,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.preference.PreferenceStore;
 import com.google.refine.preference.TopList;
 

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import edu.mit.simile.butterfly.ButterflyModule;
 
 public class RefineServlet extends Butterfly {
-    static private String ASSIGNED_VERSION = "2.8";
+    static private String ASSIGNED_VERSION = "3.0 beta";
     
     static public String VERSION = "";
     static public String REVISION = "";

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.browsing.Engine;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 

File: main/src/com/google/refine/commands/project/DeleteProjectCommand.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class DeleteProjectCommand extends Command {
 

File: main/src/com/google/refine/commands/project/GetMetadataCommand.java
Patch:
@@ -11,9 +11,9 @@
 
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFactory;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFactory;
+import com.google.refine.model.metadata.MetadataFormat;
 
 public class GetMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/ImportProjectCommand.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.ParsingUtilities;
 
 public class ImportProjectCommand extends Command {

File: main/src/com/google/refine/commands/project/PackageProjectCommand.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.refine.commands.Command;
 import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.DataPackageMetadata;
-import com.google.refine.model.medadata.PackageExtension;
+import com.google.refine.model.metadata.DataPackageMetadata;
+import com.google.refine.model.metadata.PackageExtension;
 
 public class PackageProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/RenameProjectCommand.java
Patch:
@@ -40,7 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletResponse;
 
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class RenameProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java
Patch:
@@ -11,7 +11,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SetProjectMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/SetProjectTagsCommand.java
Patch:
@@ -39,7 +39,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SetProjectTagsCommand extends Command {
   @Override

File: main/src/com/google/refine/commands/project/ValidateSchemaCommand.java
Patch:
@@ -12,7 +12,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.validator.ValidateOperation;
+import com.google.refine.model.metadata.validator.ValidateOperation;
 import com.google.refine.util.ParsingUtilities;
 
 public class ValidateSchemaCommand extends Command {

File: main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class GetAllProjectMetadataCommand extends Command {
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java
Patch:
@@ -119,7 +119,7 @@ public static TimeValue parse(String datestamp)
             calendar.setTime(date);
             return Datamodel.makeTimeValue(calendar.get(Calendar.YEAR), (byte) (calendar.get(Calendar.MONTH) + 1), 
                     (byte) calendar.get(Calendar.DAY_OF_MONTH), (byte) calendar.get(Calendar.HOUR_OF_DAY),
-                    (byte) calendar.get(Calendar.MINUTE), (byte) calendar.get(Calendar.SECOND), (byte) precision, 0, 1,
+                    (byte) calendar.get(Calendar.MINUTE), (byte) calendar.get(Calendar.SECOND), (byte) precision, 0, 0,
                     0, TimeValue.CM_GREGORIAN_PRO);
         }
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbReferenceExprTest.java
Patch:
@@ -42,7 +42,7 @@ public class WbReferenceExprTest extends WbExpressionTest<Reference> {
             new WbSnakExpr(new WbPropConstant("P347", "reference URL", "url"), new WbStringVariable("column B"))));
 
     private Snak snak1 = Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P87"),
-            Datamodel.makeTimeValue(2018, (byte) 3, (byte) 28, TimeValue.CM_GREGORIAN_PRO));
+            Datamodel.makeTimeValue(2018, (byte) 3, (byte) 28, (byte) 0, (byte) 0, (byte) 0, (byte) 11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO));
     private Snak snak2 = Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P347"),
             Datamodel.makeStringValue("http://gnu.org/"));
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStatementExprTest.java
Patch:
@@ -62,7 +62,7 @@ public class WbStatementExprTest extends WbExpressionTest<Statement> {
             Collections.singletonList(Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P43"),
                     Datamodel.makeWikidataItemIdValue("Q3434"))))));
     private Snak qualifier = Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P897"),
-            Datamodel.makeTimeValue(2010, (byte) 7, (byte) 23, TimeValue.CM_GREGORIAN_PRO));
+            Datamodel.makeTimeValue(2010, (byte) 7, (byte) 23, (byte) 0, (byte) 0, (byte) 0, (byte) 11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO));
     private Snak mainsnak = Datamodel.makeValueSnak(property, Datamodel.makeGlobeCoordinatesValue(3.898, 4.389,
             WbLocationConstant.defaultPrecision, GlobeCoordinatesValue.GLOBE_EARTH));
     private Claim fullClaim = Datamodel.makeClaim(subject, mainsnak,

File: main/src/com/google/refine/operations/cell/MassEditOperation.java
Patch:
@@ -121,13 +121,13 @@ static public List<Edit> reconstructEdits(JSONArray editsA) throws Exception {
                 
                 from = new ArrayList<String>(fromCount);
                 for (int j = 0; j < fromCount; j++) {
-                    from.add(fromA.getString(j));
+                    from.add(fromA.get(j).toString());
                 }
             } else {
                 from = new ArrayList<String>();
             }
             
-            boolean fromBlank = editO.has("fromBlank") && editO.getBoolean("fromBlank");
+            boolean fromBlank = (editO.has("fromBlank") && editO.getBoolean("fromBlank") || from.get(0).length() == 0 && from.size() == 1);
             boolean fromError = editO.has("fromError") && editO.getBoolean("fromError");
             
             Serializable to = (Serializable) editO.get("to");

File: extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java
Patch:
@@ -55,7 +55,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/database/test/com/google/refine/extension/database/DatabaseImportControllerTest.java
Patch:
@@ -25,14 +25,14 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.mysql.MySQLDatabaseService;
 import com.google.refine.extension.database.stub.RefineDbServletStub;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 
 

File: extensions/database/test/com/google/refine/extension/database/cmd/SavedConnectionCommandTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.DBExtensionTestUtils;
 import com.google.refine.extension.database.DBExtensionTests;
@@ -36,6 +35,7 @@
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SavedConnectionCommandTest extends DBExtensionTests{
     

File: extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java
Patch:
@@ -43,7 +43,7 @@
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class GDataImporter {

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -37,7 +37,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importers.TabularImportingParserBase;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class PCAxisImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -56,8 +56,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.preference.PreferenceStore;
 import com.google.refine.preference.TopList;
 

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.browsing.Engine;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 

File: main/src/com/google/refine/commands/project/DeleteProjectCommand.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class DeleteProjectCommand extends Command {
 

File: main/src/com/google/refine/commands/project/GetMetadataCommand.java
Patch:
@@ -11,9 +11,9 @@
 
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFactory;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFactory;
+import com.google.refine.model.metadata.MetadataFormat;
 
 public class GetMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/ImportProjectCommand.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.ParsingUtilities;
 
 public class ImportProjectCommand extends Command {

File: main/src/com/google/refine/commands/project/PackageProjectCommand.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.refine.commands.Command;
 import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.DataPackageMetadata;
-import com.google.refine.model.medadata.PackageExtension;
+import com.google.refine.model.metadata.DataPackageMetadata;
+import com.google.refine.model.metadata.PackageExtension;
 
 public class PackageProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/RenameProjectCommand.java
Patch:
@@ -40,7 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletResponse;
 
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class RenameProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java
Patch:
@@ -11,7 +11,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SetProjectMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/SetProjectTagsCommand.java
Patch:
@@ -39,7 +39,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SetProjectTagsCommand extends Command {
   @Override

File: main/src/com/google/refine/commands/project/ValidateSchemaCommand.java
Patch:
@@ -12,7 +12,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.validator.ValidateOperation;
+import com.google.refine.model.metadata.validator.ValidateOperation;
 import com.google.refine.util.ParsingUtilities;
 
 public class ValidateSchemaCommand extends Command {

File: main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class GetAllProjectMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/expr/functions/strings/Reinterpret.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class Reinterpret implements Function {
 

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -66,7 +66,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.JSONUtilities;
 

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -17,7 +17,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class FixedWidthImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -51,7 +51,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 abstract public class ImportingParserBase implements ImportingParser {

File: main/src/com/google/refine/importers/JsonImporter.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class JsonImporter extends TreeImportingParserBase {

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -12,7 +12,7 @@
 
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class LineBasedImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/OdsImporter.java
Patch:
@@ -61,7 +61,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.JSONUtilities;
 

File: main/src/com/google/refine/importers/RdfTripleImporter.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class RdfTripleImporter extends ImportingParserBase {
     private Mode mode;

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class SeparatorBasedImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -47,7 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 abstract public class TabularImportingParserBase extends ImportingParserBase {

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -63,7 +63,7 @@
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.ReconStats;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.model.recon.StandardReconConfig;

File: main/src/com/google/refine/importers/XmlImporter.java
Patch:
@@ -58,7 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class XmlImporter extends TreeImportingParserBase {

File: main/src/com/google/refine/importers/tree/TreeImportingParserBase.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: main/src/com/google/refine/importing/ImportingJob.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.Jsonizable;
 import com.google.refine.ProjectManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 

File: main/src/com/google/refine/importing/ImportingParser.java
Patch:
@@ -38,7 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONObject;
 
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public interface ImportingParser {
     /**

File: main/src/com/google/refine/io/ProjectMetadataUtilities.java
Patch:
@@ -51,8 +51,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.LoggerFactory;
 
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class ProjectMetadataUtilities {
     final static Logger logger = LoggerFactory.getLogger("project_metadata_utilities");

File: main/src/com/google/refine/io/ProjectUtilities.java
Patch:
@@ -47,9 +47,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.DataPackageMetadata;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.DataPackageMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFormat;
 import com.google.refine.util.Pool;
 
 

File: main/src/com/google/refine/model/Project.java
Patch:
@@ -57,7 +57,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.RefineServlet;
 import com.google.refine.history.History;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.ProcessManager;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.Pool;

File: main/src/com/google/refine/model/metadata/AbstractMetadata.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.time.LocalDateTime;

File: main/src/com/google/refine/model/metadata/DataPackageMetadata.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.io.IOException;

File: main/src/com/google/refine/model/metadata/DataPackageUrlRewriter.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.IOException;
 import java.net.MalformedURLException;

File: main/src/com/google/refine/model/metadata/IMetadata.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.io.InputStream;

File: main/src/com/google/refine/model/metadata/MetadataFactory.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.IOException;
 

File: main/src/com/google/refine/model/metadata/MetadataFormat.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 
 /**

File: main/src/com/google/refine/model/metadata/ProjectMetadata.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: main/src/com/google/refine/model/metadata/SchemaExtension.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import com.google.refine.model.Column;
 import com.google.refine.model.ColumnModel;

File: main/src/com/google/refine/model/metadata/validator/ValidateOperation.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator;
+package com.google.refine.model.metadata.validator;
 
 import java.util.Properties;
 

File: main/src/com/google/refine/model/metadata/validator/ValidatorInspector.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator;
+package com.google.refine.model.metadata.validator;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -16,8 +16,8 @@
 
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.validator.checks.TypeorFormatError;
-import com.google.refine.model.medadata.validator.checks.Validator;
+import com.google.refine.model.metadata.validator.checks.TypeorFormatError;
+import com.google.refine.model.metadata.validator.checks.Validator;
 import com.google.refine.util.JSONUtilities;
 
 public class ValidatorInspector {

File: main/src/com/google/refine/model/metadata/validator/ValidatorSpec.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator;
+package com.google.refine.model.metadata.validator;
 
 import java.util.Locale;
 import java.util.ResourceBundle;

File: main/src/com/google/refine/model/metadata/validator/checks/AbstractValidator.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -13,7 +13,7 @@
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.validator.ValidatorSpec;
+import com.google.refine.model.metadata.validator.ValidatorSpec;
 
 public abstract class AbstractValidator implements Validator {
     protected final Logger logger = LoggerFactory.getLogger(this.getClass());
@@ -92,7 +92,7 @@ private String format(String message, String value, int rowIndex, int cellIndex,
     
     /*
      * Empty body since default there is no customized Format
-     * @see com.google.refine.model.medadata.validator.checks.Validator#customizedFormat()
+     * @see com.google.refine.model.metadata.validator.checks.Validator#customizedFormat()
      */
     @Override
     public void customizedFormat() {

File: main/src/com/google/refine/model/metadata/validator/checks/BlankHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/BlankRow.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/DuplicateHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/DuplicateRow.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/EnumerableConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import java.util.List;
 

File: main/src/com/google/refine/model/metadata/validator/checks/ExtraHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/ExtraValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MaximumConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MaximumLengthConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MinimumConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MinimumLengthConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MissingHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MissingValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/NonMatchingHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/PatternConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: main/src/com/google/refine/model/metadata/validator/checks/RequiredConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.apache.commons.lang3.StringUtils;
 import org.json.JSONObject;

File: main/src/com/google/refine/model/metadata/validator/checks/TypeorFormatError.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/UniqueConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/Validator.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONArray;
 import org.json.JSONObject;

File: main/tests/server/src/com/google/refine/tests/ProjectManagerStub.java
Patch:
@@ -42,8 +42,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFormat;
 
 /**
  * Stub used to make protected methods public for testing

File: main/tests/server/src/com/google/refine/tests/ProjectManagerTests.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.ProcessManager;
 import com.google.refine.tests.model.ProjectStub;
 

File: main/tests/server/src/com/google/refine/tests/RefineTest.java
Patch:
@@ -65,7 +65,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.JSONUtilities;
 

File: main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java
Patch:
@@ -45,7 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.browsing.RowFilter;
 import com.google.refine.browsing.facets.TextSearchFacet;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.project.SetProjectMetadataCommand;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 public class SetProjectMetadataCommandTests extends RefineTest {

File: main/tests/server/src/com/google/refine/tests/exporters/HtmlExporterTests.java
Patch:
@@ -58,7 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/TemplatingExporterTests.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/XlsExporterTests.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java
Patch:
@@ -64,7 +64,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java
Patch:
@@ -52,7 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/expr/functions/booleans/BooleanTests.java
Patch:
@@ -50,7 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/history/HistoryTests.java
Patch:
@@ -50,7 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.history.History;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineServletStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java
Patch:
@@ -16,7 +16,7 @@
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Column;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.importers.ImporterTest;
 import com.google.refine.util.JSONUtilities;
 

File: main/tests/server/src/com/google/refine/tests/model/CacheTests.java
Patch:
@@ -52,7 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.operations.EngineDependentOperation;
 import com.google.refine.operations.row.RowRemovalOperation;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/model/TextSearchFacetTests.java
Patch:
@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineServletStub;
 import com.google.refine.tests.RefineTest;
 import com.google.refine.tests.util.TestUtils;

File: main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java
Patch:
@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.tests.RefineServletStub;

File: main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.tests.RefineTest;

File: extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java
Patch:
@@ -55,7 +55,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/database/test/com/google/refine/extension/database/DatabaseImportControllerTest.java
Patch:
@@ -25,14 +25,14 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.mysql.MySQLDatabaseService;
 import com.google.refine.extension.database.stub.RefineDbServletStub;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 
 

File: extensions/database/test/com/google/refine/extension/database/cmd/SavedConnectionCommandTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.DBExtensionTestUtils;
 import com.google.refine.extension.database.DBExtensionTests;
@@ -36,6 +35,7 @@
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SavedConnectionCommandTest extends DBExtensionTests{
     

File: extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java
Patch:
@@ -43,7 +43,7 @@
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class GDataImporter {

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -37,7 +37,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importers.TabularImportingParserBase;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class PCAxisImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -56,8 +56,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.preference.PreferenceStore;
 import com.google.refine.preference.TopList;
 

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.browsing.Engine;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.Process;
 import com.google.refine.util.ParsingUtilities;
 

File: main/src/com/google/refine/commands/project/DeleteProjectCommand.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class DeleteProjectCommand extends Command {
 

File: main/src/com/google/refine/commands/project/GetMetadataCommand.java
Patch:
@@ -11,9 +11,9 @@
 
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFactory;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFactory;
+import com.google.refine.model.metadata.MetadataFormat;
 
 public class GetMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/ImportProjectCommand.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.ParsingUtilities;
 
 public class ImportProjectCommand extends Command {

File: main/src/com/google/refine/commands/project/PackageProjectCommand.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.refine.commands.Command;
 import com.google.refine.exporters.CsvExporter;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.DataPackageMetadata;
-import com.google.refine.model.medadata.PackageExtension;
+import com.google.refine.model.metadata.DataPackageMetadata;
+import com.google.refine.model.metadata.PackageExtension;
 
 public class PackageProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/RenameProjectCommand.java
Patch:
@@ -40,7 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletResponse;
 
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class RenameProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java
Patch:
@@ -11,7 +11,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SetProjectMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/SetProjectTagsCommand.java
Patch:
@@ -39,7 +39,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class SetProjectTagsCommand extends Command {
   @Override

File: main/src/com/google/refine/commands/project/ValidateSchemaCommand.java
Patch:
@@ -12,7 +12,7 @@
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.validator.ValidateOperation;
+import com.google.refine.model.metadata.validator.ValidateOperation;
 import com.google.refine.util.ParsingUtilities;
 
 public class ValidateSchemaCommand extends Command {

File: main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.Command;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class GetAllProjectMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/expr/functions/strings/Reinterpret.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class Reinterpret implements Function {
 

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -66,7 +66,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.JSONUtilities;
 

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -17,7 +17,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class FixedWidthImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -51,7 +51,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 abstract public class ImportingParserBase implements ImportingParser {

File: main/src/com/google/refine/importers/JsonImporter.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class JsonImporter extends TreeImportingParserBase {

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -12,7 +12,7 @@
 
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class LineBasedImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/OdsImporter.java
Patch:
@@ -61,7 +61,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.JSONUtilities;
 

File: main/src/com/google/refine/importers/RdfTripleImporter.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class RdfTripleImporter extends ImportingParserBase {
     private Mode mode;

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class SeparatorBasedImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -47,7 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 abstract public class TabularImportingParserBase extends ImportingParserBase {

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -63,7 +63,7 @@
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.ReconStats;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.model.recon.StandardReconConfig;

File: main/src/com/google/refine/importers/XmlImporter.java
Patch:
@@ -58,7 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class XmlImporter extends TreeImportingParserBase {

File: main/src/com/google/refine/importers/tree/TreeImportingParserBase.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: main/src/com/google/refine/importing/ImportingJob.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.Jsonizable;
 import com.google.refine.ProjectManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 

File: main/src/com/google/refine/importing/ImportingParser.java
Patch:
@@ -38,7 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONObject;
 
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public interface ImportingParser {
     /**

File: main/src/com/google/refine/io/ProjectMetadataUtilities.java
Patch:
@@ -51,8 +51,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.LoggerFactory;
 
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 
 public class ProjectMetadataUtilities {
     final static Logger logger = LoggerFactory.getLogger("project_metadata_utilities");

File: main/src/com/google/refine/io/ProjectUtilities.java
Patch:
@@ -47,9 +47,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.DataPackageMetadata;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.DataPackageMetadata;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFormat;
 import com.google.refine.util.Pool;
 
 

File: main/src/com/google/refine/model/Project.java
Patch:
@@ -57,7 +57,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.RefineServlet;
 import com.google.refine.history.History;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.ProcessManager;
 import com.google.refine.util.ParsingUtilities;
 import com.google.refine.util.Pool;

File: main/src/com/google/refine/model/metadata/AbstractMetadata.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.time.LocalDateTime;

File: main/src/com/google/refine/model/metadata/DataPackageMetadata.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.io.IOException;

File: main/src/com/google/refine/model/metadata/DataPackageUrlRewriter.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.IOException;
 import java.net.MalformedURLException;

File: main/src/com/google/refine/model/metadata/IMetadata.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.io.InputStream;

File: main/src/com/google/refine/model/metadata/MetadataFactory.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.IOException;
 

File: main/src/com/google/refine/model/metadata/MetadataFormat.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 
 /**

File: main/src/com/google/refine/model/metadata/ProjectMetadata.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: main/src/com/google/refine/model/metadata/SchemaExtension.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata;
+package com.google.refine.model.metadata;
 
 import com.google.refine.model.Column;
 import com.google.refine.model.ColumnModel;

File: main/src/com/google/refine/model/metadata/validator/ValidateOperation.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator;
+package com.google.refine.model.metadata.validator;
 
 import java.util.Properties;
 

File: main/src/com/google/refine/model/metadata/validator/ValidatorInspector.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator;
+package com.google.refine.model.metadata.validator;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -16,8 +16,8 @@
 
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.validator.checks.TypeorFormatError;
-import com.google.refine.model.medadata.validator.checks.Validator;
+import com.google.refine.model.metadata.validator.checks.TypeorFormatError;
+import com.google.refine.model.metadata.validator.checks.Validator;
 import com.google.refine.util.JSONUtilities;
 
 public class ValidatorInspector {

File: main/src/com/google/refine/model/metadata/validator/ValidatorSpec.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator;
+package com.google.refine.model.metadata.validator;
 
 import java.util.Locale;
 import java.util.ResourceBundle;

File: main/src/com/google/refine/model/metadata/validator/checks/AbstractValidator.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -13,7 +13,7 @@
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.validator.ValidatorSpec;
+import com.google.refine.model.metadata.validator.ValidatorSpec;
 
 public abstract class AbstractValidator implements Validator {
     protected final Logger logger = LoggerFactory.getLogger(this.getClass());
@@ -92,7 +92,7 @@ private String format(String message, String value, int rowIndex, int cellIndex,
     
     /*
      * Empty body since default there is no customized Format
-     * @see com.google.refine.model.medadata.validator.checks.Validator#customizedFormat()
+     * @see com.google.refine.model.metadata.validator.checks.Validator#customizedFormat()
      */
     @Override
     public void customizedFormat() {

File: main/src/com/google/refine/model/metadata/validator/checks/BlankHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/BlankRow.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/DuplicateHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/DuplicateRow.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/EnumerableConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import java.util.List;
 

File: main/src/com/google/refine/model/metadata/validator/checks/ExtraHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/ExtraValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MaximumConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MaximumLengthConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MinimumConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MinimumLengthConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MissingHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/MissingValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/NonMatchingHeader.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/PatternConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: main/src/com/google/refine/model/metadata/validator/checks/RequiredConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.apache.commons.lang3.StringUtils;
 import org.json.JSONObject;

File: main/src/com/google/refine/model/metadata/validator/checks/TypeorFormatError.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/UniqueConstraint.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONObject;
 

File: main/src/com/google/refine/model/metadata/validator/checks/Validator.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.refine.model.medadata.validator.checks;
+package com.google.refine.model.metadata.validator.checks;
 
 import org.json.JSONArray;
 import org.json.JSONObject;

File: main/tests/server/src/com/google/refine/tests/ProjectManagerStub.java
Patch:
@@ -42,8 +42,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.history.HistoryEntryManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.IMetadata;
-import com.google.refine.model.medadata.MetadataFormat;
+import com.google.refine.model.metadata.IMetadata;
+import com.google.refine.model.metadata.MetadataFormat;
 
 /**
  * Stub used to make protected methods public for testing

File: main/tests/server/src/com/google/refine/tests/ProjectManagerTests.java
Patch:
@@ -53,7 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.ProjectManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.process.ProcessManager;
 import com.google.refine.tests.model.ProjectStub;
 

File: main/tests/server/src/com/google/refine/tests/RefineTest.java
Patch:
@@ -65,7 +65,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.JSONUtilities;
 

File: main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java
Patch:
@@ -45,7 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.browsing.RowFilter;
 import com.google.refine.browsing.facets.TextSearchFacet;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.ProjectManager;
 import com.google.refine.commands.project.SetProjectMetadataCommand;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 public class SetProjectMetadataCommandTests extends RefineTest {

File: main/tests/server/src/com/google/refine/tests/exporters/HtmlExporterTests.java
Patch:
@@ -58,7 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/TemplatingExporterTests.java
Patch:
@@ -56,7 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/XlsExporterTests.java
Patch:
@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java
Patch:
@@ -64,7 +64,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java
Patch:
@@ -52,7 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/expr/functions/booleans/BooleanTests.java
Patch:
@@ -50,7 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/history/HistoryTests.java
Patch:
@@ -50,7 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.history.History;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineServletStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java
Patch:
@@ -16,7 +16,7 @@
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Column;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.importers.ImporterTest;
 import com.google.refine.util.JSONUtilities;
 

File: main/tests/server/src/com/google/refine/tests/model/CacheTests.java
Patch:
@@ -52,7 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.operations.EngineDependentOperation;
 import com.google.refine.operations.row.RowRemovalOperation;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/model/TextSearchFacetTests.java
Patch:
@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.io.FileProjectManager;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.tests.RefineServletStub;
 import com.google.refine.tests.RefineTest;
 import com.google.refine.tests.util.TestUtils;

File: main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java
Patch:
@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.tests.RefineServletStub;

File: main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
-import com.google.refine.model.medadata.ProjectMetadata;
+import com.google.refine.model.metadata.ProjectMetadata;
 import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.tests.RefineTest;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java
Patch:
@@ -119,7 +119,7 @@ public static TimeValue parse(String datestamp)
             calendar.setTime(date);
             return Datamodel.makeTimeValue(calendar.get(Calendar.YEAR), (byte) (calendar.get(Calendar.MONTH) + 1), 
                     (byte) calendar.get(Calendar.DAY_OF_MONTH), (byte) calendar.get(Calendar.HOUR_OF_DAY),
-                    (byte) calendar.get(Calendar.MINUTE), (byte) calendar.get(Calendar.SECOND), (byte) precision, 0, 1,
+                    (byte) calendar.get(Calendar.MINUTE), (byte) calendar.get(Calendar.SECOND), (byte) precision, 0, 0,
                     0, TimeValue.CM_GREGORIAN_PRO);
         }
     }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbReferenceExprTest.java
Patch:
@@ -42,7 +42,7 @@ public class WbReferenceExprTest extends WbExpressionTest<Reference> {
             new WbSnakExpr(new WbPropConstant("P347", "reference URL", "url"), new WbStringVariable("column B"))));
 
     private Snak snak1 = Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P87"),
-            Datamodel.makeTimeValue(2018, (byte) 3, (byte) 28, TimeValue.CM_GREGORIAN_PRO));
+            Datamodel.makeTimeValue(2018, (byte) 3, (byte) 28, (byte) 0, (byte) 0, (byte) 0, (byte) 11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO));
     private Snak snak2 = Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P347"),
             Datamodel.makeStringValue("http://gnu.org/"));
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbStatementExprTest.java
Patch:
@@ -62,7 +62,7 @@ public class WbStatementExprTest extends WbExpressionTest<Statement> {
             Collections.singletonList(Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P43"),
                     Datamodel.makeWikidataItemIdValue("Q3434"))))));
     private Snak qualifier = Datamodel.makeValueSnak(Datamodel.makeWikidataPropertyIdValue("P897"),
-            Datamodel.makeTimeValue(2010, (byte) 7, (byte) 23, TimeValue.CM_GREGORIAN_PRO));
+            Datamodel.makeTimeValue(2010, (byte) 7, (byte) 23, (byte) 0, (byte) 0, (byte) 0, (byte) 11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO));
     private Snak mainsnak = Datamodel.makeValueSnak(property, Datamodel.makeGlobeCoordinatesValue(3.898, 4.389,
             WbLocationConstant.defaultPrecision, GlobeCoordinatesValue.GLOBE_EARTH));
     private Claim fullClaim = Datamodel.makeClaim(subject, mainsnak,

File: extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java
Patch:
@@ -30,6 +30,7 @@
 
 import org.openrefine.wikidata.qa.scrutinizers.DistinctValuesScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.EditScrutinizer;
+import org.openrefine.wikidata.qa.scrutinizers.EntityTypeScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.FormatScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.InverseConstraintScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.NewItemScrutinizer;
@@ -77,6 +78,7 @@ public EditInspector(QAWarningStore warningStore) {
         register(new WhitespaceScrutinizer());
         register(new QuantityScrutinizer());
         register(new RestrictedValuesScrutinizer());
+        register(new EntityTypeScrutinizer());
     }
 
     /**

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QuantityScrutinizer.java
Patch:
@@ -58,7 +58,9 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
                 issue.setProperty("example_value", value.getNumericValue().toString());
                 issue.setProperty("example_item_entity", entityId);
                 if (currentUnit != null) {
-                    issue.setProperty("unit_entity", currentUnit);
+                    issue.setProperty("unit_entity",
+                            // this is a hack but it will not be needed anymore in the upcoming version of Wikidata-Toolkit
+                            Datamodel.makeWikidataItemIdValue(currentUnit.substring(currentUnit.indexOf("Q"))));
                 }
                 addIssue(issue);
             }

File: main/src/com/google/refine/model/changes/DataExtensionChange.java
Patch:
@@ -1,6 +1,6 @@
 /*
 
-àCopyright 2010, Google Inc.
+Copyright 2010, Google Inc.
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without

File: main/src/com/google/refine/expr/functions/Type.java
Patch:
@@ -33,8 +33,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.expr.functions;
 
-import java.util.Calendar;
-import java.util.Date;
+import java.time.OffsetDateTime;
 import java.util.List;
 import java.util.Properties;
 
@@ -55,7 +54,7 @@ public Object call(Properties bindings, Object[] args) {
             if (v != null) {
                 if (v instanceof String) {
                     return "string";
-                } else if (v instanceof Calendar || v instanceof Date) {
+                } else if (v instanceof OffsetDateTime) {
                     return "date";
                 } else if (v instanceof Number) {
                     return "number";

File: main/src/com/google/refine/expr/functions/date/Now.java
Patch:
@@ -33,7 +33,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.expr.functions.date;
 
-import java.util.Calendar;
+import java.time.OffsetDateTime;
+import java.time.ZoneId;
 import java.util.Properties;
 
 import org.json.JSONException;
@@ -46,7 +47,7 @@ public class Now implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 0) {
-            return Calendar.getInstance();
+            return OffsetDateTime.now(ZoneId.of("Z"));
         }
         return null;
     }

File: main/src/com/google/refine/expr/util/CalendarParserException.java
Patch:
@@ -37,7 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 // Copyright Dave Glowacki. Released under the BSD license.
 
 /**
- * Thrown when an invalid date is encountered in <tt>CalendarParser</tt>.
+ * Thrown when an invalid date is encountered in <tt>OffsetDateTimeParser</tt>.
  */
 public class CalendarParserException extends Exception {
 

File: main/src/com/google/refine/util/JSONUtilities.java
Patch:
@@ -40,7 +40,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Collection;
-import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -197,8 +196,6 @@ static public void putField(JSONObject obj, String key, Object value) throws JSO
             obj.put(key, ((Double) value).doubleValue());
         } else if (value instanceof Boolean) {
             obj.put(key, value);
-        } else if (value instanceof Date) {
-            obj.put(key, ParsingUtilities.dateToString((OffsetDateTime) value));
         } else if (value instanceof Calendar) {
             obj.put(key, ParsingUtilities.dateToString(OffsetDateTime.ofInstant(((Calendar)value).toInstant(), ZoneId.of("Z"))));
         } else if (value instanceof String) {

File: main/tests/server/src/com/google/refine/tests/expr/functions/CoalesceTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
 
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.tests.expr.functions;
 
 import java.util.Properties;
 

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -49,7 +49,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.expr.util.CalendarParserException;
-import com.google.refine.expr.util.CalenderParser;
+import com.google.refine.expr.util.CalendarParser;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 import com.google.refine.util.ParsingUtilities;
@@ -82,7 +82,7 @@ public Object call(Properties bindings, Object[] args) {
                 month_first = (Boolean) args[1];
             }
             try {
-                return CalenderParser.parseAsOffsetDateTime( o1, (month_first) ? CalenderParser.MM_DD_YY : CalenderParser.DD_MM_YY);
+                return CalendarParser.parseAsOffsetDateTime( o1, (month_first) ? CalendarParser.MM_DD_YY : CalendarParser.DD_MM_YY);
             } catch (CalendarParserException e) {
                 OffsetDateTime d = ParsingUtilities.stringToDate(o1);
                 if (d != null) {

File: main/src/com/google/refine/expr/util/CalendarParser.java
Patch:
@@ -494,7 +494,7 @@ void setYear(int val) throws CalendarParserException {
 /**
  * A parser for arbitrary date/time strings.
  */
-public class CalenderParser {
+public class CalendarParser {
     /** bit indicating that the year comes before the month. */
     public static final int YEAR_BEFORE_MONTH = ParserState.YEAR_BEFORE_MONTH;
     /** bit indicating that the year comes before the day. */

File: main/src/com/google/refine/expr/functions/ToString.java
Patch:
@@ -55,7 +55,7 @@ public Object call(Properties bindings, Object[] args) {
                 Object o2 = args[1];
                 if (o1 instanceof OffsetDateTime) {
                     OffsetDateTime odt = (OffsetDateTime)o1;
-                    return odt.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
+                    return odt.format(DateTimeFormatter.ofPattern((String)o2));
                 } else if (o1 instanceof Number) {
                     return String.format((String) o2, (Number) o1);
                 }

File: main/src/com/google/refine/util/StringUtils.java
Patch:
@@ -4,7 +4,8 @@
 import java.time.format.DateTimeFormatter;
 
 public class StringUtils {
-
+    private static String DEFAULT_PATTERN = "dd-MMM-yyyy";
+    
     /**
      * String formatting method that knows how to format dates (using the default locale's date formatter)
      * @param o object to be converted to a string
@@ -14,7 +15,7 @@ public static String toString(Object o) {
         // to replace the DateFormat with java.time.format.DateTimeFormatter 
         if (o instanceof OffsetDateTime) {
             OffsetDateTime odt = (OffsetDateTime)o;
-            return odt.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
+            return odt.format(DateTimeFormatter.ofPattern(DEFAULT_PATTERN));
         } else if (o == null) {
             return "null";
         } else {

File: main/src/com/google/refine/expr/functions/Type.java
Patch:
@@ -33,8 +33,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.expr.functions;
 
-import java.util.Calendar;
-import java.util.Date;
+import java.time.OffsetDateTime;
 import java.util.List;
 import java.util.Properties;
 
@@ -55,7 +54,7 @@ public Object call(Properties bindings, Object[] args) {
             if (v != null) {
                 if (v instanceof String) {
                     return "string";
-                } else if (v instanceof Calendar || v instanceof Date) {
+                } else if (v instanceof OffsetDateTime) {
                     return "date";
                 } else if (v instanceof Number) {
                     return "number";

File: main/src/com/google/refine/expr/functions/date/Now.java
Patch:
@@ -33,7 +33,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.expr.functions.date;
 
-import java.util.Calendar;
+import java.time.OffsetDateTime;
+import java.time.ZoneId;
 import java.util.Properties;
 
 import org.json.JSONException;
@@ -46,7 +47,7 @@ public class Now implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 0) {
-            return Calendar.getInstance();
+            return OffsetDateTime.now(ZoneId.of("Z"));
         }
         return null;
     }

File: main/src/com/google/refine/expr/util/CalendarParserException.java
Patch:
@@ -37,7 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 // Copyright Dave Glowacki. Released under the BSD license.
 
 /**
- * Thrown when an invalid date is encountered in <tt>CalendarParser</tt>.
+ * Thrown when an invalid date is encountered in <tt>OffsetDateTimeParser</tt>.
  */
 public class CalendarParserException extends Exception {
 

File: main/src/com/google/refine/util/JSONUtilities.java
Patch:
@@ -40,7 +40,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Collection;
-import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -197,8 +196,6 @@ static public void putField(JSONObject obj, String key, Object value) throws JSO
             obj.put(key, ((Double) value).doubleValue());
         } else if (value instanceof Boolean) {
             obj.put(key, value);
-        } else if (value instanceof Date) {
-            obj.put(key, ParsingUtilities.dateToString((OffsetDateTime) value));
         } else if (value instanceof Calendar) {
             obj.put(key, ParsingUtilities.dateToString(OffsetDateTime.ofInstant(((Calendar)value).toInstant(), ZoneId.of("Z"))));
         } else if (value instanceof String) {

File: main/tests/server/src/com/google/refine/tests/expr/functions/CoalesceTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
  */
 
-package com.google.refine.tests.expr.functions.strings;
+package com.google.refine.tests.expr.functions;
 
 import java.util.Properties;
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java
Patch:
@@ -60,7 +60,7 @@ public class WbDateConstant implements WbExpression<TimeValue> {
             .put(new SimpleDateFormat("yyyy-MM-dd"), 11)
             .put(new SimpleDateFormat("yyyy-MM-dd'T'HH"), 12)
             .put(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm"), 13)
-            .put(new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ"), 13)
+            .put(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'"), 13)
             .put(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'"), 14).build();
 
     private TimeValue parsed;

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbDateVariableTest.java
Patch:
@@ -35,7 +35,7 @@ public class WbDateVariableTest extends WbVariableTest<TimeValue> {
     private TimeValue year = Datamodel.makeTimeValue(2018, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9,
             0, 1, 0, TimeValue.CM_GREGORIAN_PRO);
     private TimeValue day = Datamodel.makeTimeValue(2018, (byte) 2, (byte) 27, TimeValue.CM_GREGORIAN_PRO);
-    private TimeValue minute = Datamodel.makeTimeValue(2001, (byte) 2, (byte) 3, (byte)4, (byte)5, (byte)0, (byte)9, (byte)0, (byte)1, (byte)0, TimeValue.CM_GREGORIAN_PRO);
+    private TimeValue minute = Datamodel.makeTimeValue(2001, (byte) 2, (byte) 3, (byte)4, (byte)5, (byte)0, (byte)13, (byte)0, (byte)1, (byte)0, TimeValue.CM_GREGORIAN_PRO);
 
     
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbQuantityExpr.java
Patch:
@@ -66,6 +66,7 @@ public QuantityValue evaluate(ExpressionContext ctxt)
         BigDecimal parsedAmount = null;
         try {
             parsedAmount = new BigDecimal(amount.getString());
+            parsedAmount = new BigDecimal(parsedAmount.toPlainString());
         } catch (NumberFormatException e) {
             throw new SkipSchemaExpressionException();
         }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java
Patch:
@@ -59,7 +59,7 @@ public void testValidSchema()
 
         JSONObject response = ParsingUtilities.evaluateJsonStringToObject(writer.toString());
         JSONArray edits = response.getJSONArray("edits_preview");
-        assertEquals(4, edits.length());
+        assertEquals(3, edits.length());
     }
 
 }

File: extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java
Patch:
@@ -108,13 +108,13 @@ public void updateReconciledCells(Project project, boolean reset) {
                 }
                 Recon recon = cell.recon;
                 if (Recon.Judgment.New.equals(recon.judgment) && !reset
-                        && map.containsKey(recon.judgmentHistoryEntry)) {
+                        && map.containsKey(recon.id)) {
                     recon.judgment = Recon.Judgment.Matched;
-                    recon.match = new ReconCandidate(map.get(recon.judgmentHistoryEntry), cell.value.toString(),
+                    recon.match = new ReconCandidate(map.get(recon.id), cell.value.toString(),
                             new String[0], 100);
                     impactedColumns.add(i);
                 } else if (Recon.Judgment.Matched.equals(recon.judgment) && reset
-                        && map.containsKey(recon.judgmentHistoryEntry)) {
+                        && map.containsKey(recon.id)) {
                     recon.judgment = Recon.Judgment.New;
                     recon.match = null;
                     impactedColumns.add(i);

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java
Patch:
@@ -94,10 +94,10 @@ public List<String> getTypes() {
     /**
      * Returns the integer used internally in OpenRefine to identify the new item.
      * 
-     * @return the judgment history entry id of the reconciled cell
+     * @return the reconciliation id of the reconciled cell
      */
     public long getReconInternalId() {
-        return getRecon().judgmentHistoryEntry;
+        return getRecon().id;
     }
 
     /**

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/NewItemLibraryTest.java
Patch:
@@ -83,6 +83,6 @@ private void isMatchedTo(String qid, Cell cell) {
 
     private void isNewTo(long id, Cell cell) {
         assertEquals(Recon.Judgment.New, cell.recon.judgment);
-        assertEquals(id, cell.recon.judgmentHistoryEntry);
+        assertEquals(id, cell.recon.id);
     }
 }

File: extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java
Patch:
@@ -53,8 +53,8 @@
 public class QuickStatementsExporterTest extends RefineTest {
 
     private QuickStatementsExporter exporter = new QuickStatementsExporter();
-    private ItemIdValue newIdA = TestingData.makeNewItemIdValue(1234L, "new item A");
-    private ItemIdValue newIdB = TestingData.makeNewItemIdValue(5678L, "new item B");
+    private ItemIdValue newIdA = TestingData.newIdA;
+    private ItemIdValue newIdB = TestingData.newIdB;
     private ItemIdValue qid1 = Datamodel.makeWikidataItemIdValue("Q1377");
     private ItemIdValue qid2 = Datamodel.makeWikidataItemIdValue("Q865528");
 

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValueTest.java
Patch:
@@ -101,7 +101,7 @@ public void testEquality() {
         // just checking this is symmetrical
         assertEquals(existingItem, Datamodel.makeWikidataItemIdValue("Q42"));
 
-        // new cell equality relies on the judgmentHistoryEntry parameter
+        // new item equality relies on the cell's recon id
         assertEquals(newItem, sameNewItem);
         assertNotEquals(newItem, differentNewItem);
         // and on datatype
@@ -116,7 +116,7 @@ public void testHashCode() {
 
     @Test
     public void testGetRecon() {
-        assertEquals(newItem.getReconInternalId(), newItem.getRecon().judgmentHistoryEntry);
+        assertEquals(newItem.getReconInternalId(), newItem.getRecon().id);
     }
 
     @Test

File: extensions/wikidata/tests/src/org/openrefine/wikidata/updates/scheduler/UpdateSchedulerTest.java
Patch:
@@ -42,8 +42,8 @@ public abstract class UpdateSchedulerTest {
 
     protected ItemIdValue existingIdA = Datamodel.makeWikidataItemIdValue("Q43");
     protected ItemIdValue existingIdB = Datamodel.makeWikidataItemIdValue("Q538");
-    protected ItemIdValue newIdA = TestingData.makeNewItemIdValue(1234L, "new item A");
-    protected ItemIdValue newIdB = TestingData.makeNewItemIdValue(5678L, "new item B");
+    protected ItemIdValue newIdA = TestingData.newIdA;
+    protected ItemIdValue newIdB = TestingData.newIdB;
 
     protected Statement sAtoB = TestingData.generateStatement(existingIdA, existingIdB);
     protected Statement sBtoA = TestingData.generateStatement(existingIdB, existingIdA);

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java
Patch:
@@ -67,14 +67,14 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
                 try {
                     schema = WikibaseSchema.reconstruct(jsonString);
                 } catch (JSONException e) {
-                    respondError(response, e.toString());
+                    respondError(response, "Wikibase schema could not be parsed.");
                     return;
                 }
             } else {
                 schema = (WikibaseSchema) project.overlayModels.get("wikibaseSchema");
             }
             if (schema == null) {
-                respondError(response, "No schema provided.");
+                respondError(response, "No Wikibase schema provided.");
                 return;
             }
 

File: extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java
Patch:
@@ -69,7 +69,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             // We do not use respondException here because this is an expected
             // exception which happens every time a user tries to save an incomplete
             // schema - the exception should not be logged.
-            respondError(response, "Invalid Wikibase schema provided.");
+            respondError(response, "Wikibase schema could not be parsed.");
         } catch (Exception e) {
             // This is an unexpected exception, so we log it.
             respondException(response, e);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java
Patch:
@@ -39,7 +39,7 @@ public void testNoSchema()
             throws ServletException, IOException {
         command.doPost(request, response);
 
-        assertEquals("{\"status\":\"error\",\"message\":\"No Wikibase schema provided.\"}", writer.toString());
+        assertEquals("{\"code\":\"error\",\"message\":\"No Wikibase schema provided.\"}", writer.toString());
     }
 
     @Test
@@ -48,6 +48,6 @@ public void testInvalidSchema()
         when(request.getParameter("schema")).thenReturn("{bogus json");
         command.doPost(request, response);
 
-        assertEquals("{\"status\":\"error\",\"message\":\"Wikibase schema could not be parsed.\"}", writer.toString());
+        assertEquals("{\"code\":\"error\",\"message\":\"Wikibase schema could not be parsed.\"}", writer.toString());
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java
Patch:
@@ -42,6 +42,7 @@
 import org.openrefine.wikidata.schema.WikibaseSchema;
 import org.openrefine.wikidata.updates.ItemUpdate;
 import org.openrefine.wikidata.utils.FirstLinesExtractor;
+import static org.openrefine.wikidata.commands.CommandUtilities.respondError;
 
 import com.google.refine.browsing.Engine;
 import com.google.refine.commands.Command;
@@ -66,14 +67,14 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
                 try {
                     schema = WikibaseSchema.reconstruct(jsonString);
                 } catch (JSONException e) {
-                    respond(response, "error", "Wikibase schema could not be parsed.");
+                    respondError(response, e.toString());
                     return;
                 }
             } else {
                 schema = (WikibaseSchema) project.overlayModels.get("wikibaseSchema");
             }
             if (schema == null) {
-                respond(response, "error", "No Wikibase schema provided.");
+                respondError(response, "No schema provided.");
                 return;
             }
 

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java
Patch:
@@ -186,7 +186,7 @@ static public WikibaseSchema reconstruct(JSONObject o)
         return reconstruct(o.toString());
     }    
     
-    static public WikibaseSchema reconstruct(String json) {
+    static public WikibaseSchema reconstruct(String json) throws JSONException {
         ObjectMapper mapper = new ObjectMapper();
         try {
             return mapper.readValue(json, WikibaseSchema.class);

File: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbItemVariableTest.java
Patch:
@@ -78,4 +78,6 @@ public void testSerialize() {
         JacksonSerializationTest.canonicalSerialization(WbExpression.class, variable,
                 "{\"type\":\"wbitemvariable\",\"columnName\":\"column A\"}");
     }
+
+    // TODO: test with column reconciled against different identifier space
 }

File: extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java
Patch:
@@ -30,10 +30,10 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.openrefine.wikidata.operations.SaveWikibaseSchemaOperation;
-import org.openrefine.wikidata.schema.WikibaseSchema;
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.openrefine.wikidata.operations.SaveWikibaseSchemaOperation;
+import org.openrefine.wikidata.schema.WikibaseSchema;
 
 import com.google.refine.commands.Command;
 import com.google.refine.model.AbstractOperation;

File: extensions/wikidata/src/org/openrefine/wikidata/exporters/QSValuePrinter.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Locale;
 
 import org.openrefine.wikidata.schema.entityvalues.ReconEntityIdValue;
+import org.openrefine.wikidata.updates.scheduler.QuickStatementsUpdateScheduler;
 import org.wikidata.wdtk.datamodel.interfaces.DatatypeIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.GlobeCoordinatesValue;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java
Patch:
@@ -23,8 +23,6 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import java.util.List;
-
 import org.openrefine.wikidata.qa.ConstraintFetcher;
 import org.openrefine.wikidata.qa.QAWarning;
 import org.openrefine.wikidata.qa.QAWarning.Severity;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/NoEditsMadeScrutinizer.java
Patch:
@@ -23,8 +23,6 @@
  ******************************************************************************/
 package org.openrefine.wikidata.qa.scrutinizers;
 
-import java.util.List;
-
 import org.openrefine.wikidata.updates.ItemUpdate;
 
 public class NoEditsMadeScrutinizer extends EditScrutinizer {

File: extensions/wikidata/src/org/openrefine/wikidata/updates/ItemUpdate.java
Patch:
@@ -25,19 +25,19 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
-import java.util.HashMap;
-import java.util.HashSet;
 
 import org.jsoup.helper.Validate;
 import org.wikidata.wdtk.datamodel.implementation.StatementGroupImpl;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
-import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
+import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.Statement;
 import org.wikidata.wdtk.datamodel.interfaces.StatementGroup;
 

File: extensions/wikidata/src/org/openrefine/wikidata/updates/ItemUpdateBuilder.java
Patch:
@@ -23,10 +23,10 @@
  ******************************************************************************/
 package org.openrefine.wikidata.updates;
 
-import java.util.Set;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.jsoup.helper.Validate;
 import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;

File: extensions/wikidata/src/org/openrefine/wikidata/utils/JacksonJsonizable.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Properties;
 
 import org.json.JSONException;
-import org.json.JSONWriter;
 import org.json.JSONObject;
+import org.json.JSONWriter;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.core.JsonParseException;

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java
Patch:
@@ -78,7 +78,7 @@ public void batchIsFinished() {
     
     /**
      * Emits an issue that will be reported to the user,
-     * after mergin with other issues of the same kind.
+     * after merging with other issues of the same kind.
      * 
      * @param warning
      *    the issue to report

File: extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java
Patch:
@@ -15,7 +15,6 @@
 import org.wikidata.wdtk.datamodel.helpers.Datamodel;
 import org.wikidata.wdtk.datamodel.interfaces.EntityDocument;
 import org.wikidata.wdtk.datamodel.interfaces.ItemDocument;
-import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.MonolingualTextValue;
 import org.wikidata.wdtk.wikibaseapi.WikibaseDataEditor;
 import org.wikidata.wdtk.wikibaseapi.WikibaseDataFetcher;
@@ -112,9 +111,9 @@ public void performEdit() throws InterruptedException {
              // New item
              if (update.isNew()) {
                  ReconEntityIdValue newCell = (ReconEntityIdValue)update.getItemId();
-                 update.normalizeLabelsAndAliases();
+                 update = update.normalizeLabelsAndAliases();
                  
-                 ItemDocument itemDocument = Datamodel.makeItemDocument(ItemIdValue.NULL,
+                 ItemDocument itemDocument = Datamodel.makeItemDocument(update.getItemId(),
                          update.getLabels().stream().collect(Collectors.toList()),
                          update.getDescriptions().stream().collect(Collectors.toList()),
                          update.getAliases().stream().collect(Collectors.toList()),

File: extensions/wikidata/src/org/openrefine/wikidata/editing/ReconEntityRewriter.java
Patch:
@@ -65,7 +65,7 @@ public ItemIdValue copy(ItemIdValue value) {
                             "Trying to rewrite an update where a new item was not created yet.");
                 }
                 return Datamodel.makeItemIdValue(newId,
-                        recon.getSiteIri());
+                        recon.getRecon().identifierSpace);
             }
         }
         return super.copy(value);

File: extensions/wikidata/src/org/openrefine/wikidata/updates/ItemUpdate.java
Patch:
@@ -238,7 +238,7 @@ public static Map<EntityIdValue, ItemUpdate> groupBySubject(List<ItemUpdate> ite
      * Is this update about a new item?
      */
     public boolean isNew() {
-        return "Q0".equals(getItemId().getId());
+        return EntityIdValue.SITE_LOCAL.equals(getItemId().getSiteIri());
     }
     
     /**

File: extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java
Patch:
@@ -56,7 +56,7 @@ public void testNewItem() throws InterruptedException, MediaWikiApiErrorExceptio
                 .build());
         MonolingualTextValue label = Datamodel.makeMonolingualTextValue("better label", "en");
         batch.add(new ItemUpdateBuilder(TestingData.newIdA)
-                .addLabel(label)
+                .addAlias(label)
                 .build());
         
         // Plan expected edits
@@ -67,7 +67,7 @@ public void testNewItem() throws InterruptedException, MediaWikiApiErrorExceptio
         when(fetcher.getEntityDocuments(Collections.singletonList(TestingData.existingId.getId())))
            .thenReturn(Collections.singletonMap(TestingData.existingId.getId(), existingItem));
            
-        ItemDocument expectedNewItem = ItemDocumentBuilder.forItemId(ItemIdValue.NULL)
+        ItemDocument expectedNewItem = ItemDocumentBuilder.forItemId(TestingData.newIdA)
                 .withLabel(label).build();
         ItemDocument createdNewItem = ItemDocumentBuilder.forItemId(Datamodel.makeWikidataItemIdValue("Q1234"))
                 .withLabel(label).withRevisionId(37828L).build();

File: extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java
Patch:
@@ -81,6 +81,8 @@ public void restoreSavedConnection() {
                         savedCredentials.getString("password"));
             } catch (LoginFailedException e) {
                 connection = null;
+            } catch (JSONException e) {
+                connection = null;
             }
         }
     }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java
Patch:
@@ -33,6 +33,8 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {
     public ReconEntityIdValue(Recon match, String cellValue) {
         _recon = match;
         _cellValue = cellValue;
+        assert (Recon.Judgment.Matched.equals(_recon.judgment) ||
+                Recon.Judgment.New.equals(_recon.judgment));
     }
     
     protected boolean isMatched() {

File: extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java
Patch:
@@ -68,7 +68,7 @@ public void updateReconciledCells(Project project, boolean reset) {
         
         for(Row row : project.rows) {
             for(Cell cell : row.cells) {
-                if (cell.recon == null) {
+                if (cell == null || cell.recon == null) {
                     continue;
                 }
                 Recon recon = cell.recon;

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java
Patch:
@@ -79,7 +79,7 @@ public String getId() {
 
     @Override
     public String getSiteIri() {
-        return _recon.schemaSpace;
+        return _recon.identifierSpace;
     }
 
     @Override

File: extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java
Patch:
@@ -16,6 +16,7 @@
 import org.openrefine.wikidata.qa.scrutinizers.SelfReferentialScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.SingleValueScrutinizer;
 import org.openrefine.wikidata.qa.scrutinizers.UnsourcedScrutinizer;
+import org.openrefine.wikidata.qa.scrutinizers.WhitespaceScrutinizer;
 import org.openrefine.wikidata.schema.ItemUpdate;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 
@@ -43,6 +44,7 @@ public EditInspector(QAWarningStore warningStore) {
         register(new SingleValueScrutinizer());
         register(new DistinctValuesScrutinizer());
         register(new NoEditsMadeScrutinizer());
+        register(new WhitespaceScrutinizer());
     }
     
     /**

File: extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/TermedEntityIdValue.java
Patch:
@@ -1,5 +1,6 @@
 package org.openrefine.wikidata.schema.entityvalues;
 
+import org.wikidata.wdtk.datamodel.helpers.Hash;
 import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;
 import org.wikidata.wdtk.datamodel.interfaces.ValueVisitor;
 
@@ -71,6 +72,6 @@ public boolean equals(Object other) {
     
     @Override
     public int hashCode() {
-        return getIri().hashCode();
+        return Hash.hashCode(this);
     }
 }

File: extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/FormatConstraintScrutinizer.java
Patch:
@@ -53,6 +53,9 @@ public void scrutinize(Snak snak, EntityIdValue entityId, boolean added) {
             String value = ((StringValue) snak.getValue()).getString();
             PropertyIdValue pid = snak.getPropertyId();
             Pattern pattern = getPattern(pid);
+            if (pattern == null) {
+                return;
+            }
             if (!pattern.matcher(value).matches()) {
                 if (added) {
                     QAWarning issue = new QAWarning(

File: extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java
Patch:
@@ -23,7 +23,6 @@ private EntityCache() {
         ApiConnection connection = ApiConnection.getWikidataApiConnection();
         _fetcher = new WikibaseDataFetcher(connection, Datamodel.SITE_WIKIDATA);
 
-        System.out.println("Creating fresh cache");
         _cache = CacheBuilder.newBuilder()
                 .maximumSize(4096)
                 .expireAfterWrite(1, TimeUnit.HOURS)

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbNameDescExpr.java
Patch:
@@ -20,7 +20,7 @@ enum NameDescrType {
    
     @JsonCreator
     public WbNameDescExpr(
-            @JsonProperty("type") NameDescrType type,
+            @JsonProperty("name_type") NameDescrType type,
             @JsonProperty("value") WbMonolingualExpr value) {
         this.type = type;
         this.value = value;
@@ -45,6 +45,7 @@ public void contributeTo(ItemUpdate item, ExpressionContext ctxt) {
         }
     }
 
+    @JsonProperty("name_type")
     public NameDescrType getType() {
         return type;
     }

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbValueExpr.java
Patch:
@@ -23,7 +23,8 @@
     @Type(value = WbLanguageConstant.class, name = "wblanguageconstant"), 
     @Type(value = WbLanguageVariable.class, name = "wblanguagevariable"),
     @Type(value = WbDateConstant.class, name = "wbdateconstant"), 
-    @Type(value = WbDateVariable.class, name = "wbdatevariable") ,
+    @Type(value = WbDateVariable.class, name = "wbdatevariable"),
+    @Type(value = WbMonolingualExpr.class, name = "wbmonolingualexpr"),
   })
 public abstract class WbValueExpr extends JacksonJsonizable {
     /* An expression that represents a Wikibase value,

File: extensions/wikidata/src/org/openrefine/wikidata/schema/WbValueExpr.java
Patch:
@@ -26,6 +26,8 @@ public static WbValueExpr fromJSON(JSONObject obj) throws JSONException {
             valueExpr = WbItemConstant.fromJSON(obj);
         } else if (WbItemVariable.jsonType.equals(type)) {
             valueExpr = WbItemVariable.fromJSON(obj);
+        } else if (WbStringVariable.jsonType.equals(type)) {
+            valueExpr = WbStringVariable.fromJSON2(obj);
         } else if (WbStringConstant.jsonType.equals(type)) {
             valueExpr = WbStringConstant.fromJSON(obj);
         } else {

File: main/src/com/google/refine/exporters/sql/SqlData.java
Patch:
@@ -41,6 +41,8 @@ public class SqlData {
     public static final String SQL_TYPE_INTEGER = "INTEGER";
     public static final String SQL_TYPE_INT = "INT";
     public static final String SQL_TYPE_NUMERIC = "NUMERIC";
+    public static final String SQL_TYPE_DATE = "DATE";
+    public static final String SQL_TYPE_TIMESTAMP = "TIMESTAMP";
     
     
     

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -38,7 +38,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
-import java.text.ParseException;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.OffsetDateTime;

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -146,7 +146,7 @@ private void listFusionTables(Fusiontables service, JSONWriter writer)
         Fusiontables.Table.List listTables = service.table().list();
         TableList tablelist = listTables.execute();
         
-        if (tablelist == null)
+        if (tablelist == null || tablelist.getItems() == null)
             return;
         
         for (Table table : tablelist.getItems()) {

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -112,8 +112,7 @@ static public ReconConfig reconstruct(JSONObject obj) throws Exception {
         
         JSONObject t = obj.has("type") && !obj.isNull("type") ? obj.getJSONObject("type") : null;
         
-        String limitString = obj.has("limit") && !obj.isNull("limit") ? obj.getString("limit") : "";
-        int limit = "".equals(limitString) ? 0 : Integer.parseInt(limitString); 
+        int limit = obj.has("limit") && !obj.isNull("limit") ? obj.getInt("limit") : 0;
         
         return new StandardReconConfig(
             obj.getString("service"),

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -112,8 +112,7 @@ static public ReconConfig reconstruct(JSONObject obj) throws Exception {
         
         JSONObject t = obj.has("type") && !obj.isNull("type") ? obj.getJSONObject("type") : null;
         
-        String limitString = obj.has("limit") && !obj.isNull("limit") ? obj.getString("limit") : "";
-        int limit = "".equals(limitString) ? 0 : Integer.parseInt(limitString); 
+        int limit = obj.has("limit") && !obj.isNull("limit") ? obj.getInt("limit") : 0;
         
         return new StandardReconConfig(
             obj.getString("service"),

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -76,7 +76,7 @@ public JSONObject createParserUIInitializationData(ImportingJob job,
         
         JSONUtilities.safePut(options, "guessCellValueTypes", false);
         JSONUtilities.safePut(options, "processQuotes", true);
-        JSONUtilities.safePut(options, "quoteCharacter", CSVParser.DEFAULT_QUOTE_CHARACTER);
+        JSONUtilities.safePut(options, "quoteCharacter", String.valueOf(CSVParser.DEFAULT_QUOTE_CHARACTER));
 
         return options;
     }

File: extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java
Patch:
@@ -46,7 +46,6 @@
 import org.slf4j.LoggerFactory;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.commands.HttpUtilities;
 import com.google.refine.extension.database.model.DatabaseColumn;
@@ -56,6 +55,7 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/database/test/com/google/refine/extension/database/DatabaseImportControllerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.mysql.MySQLDatabaseService;
 import com.google.refine.extension.database.stub.RefineDbServletStub;

File: extensions/database/test/com/google/refine/extension/database/cmd/SavedConnectionCommandTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.extension.database.DBExtensionTestUtils;
 import com.google.refine.extension.database.DBExtensionTests;

File: extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java
Patch:
@@ -39,11 +39,11 @@
 import com.google.api.services.fusiontables.model.Sqlresponse;
 import com.google.api.services.fusiontables.model.Table;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.TabularImportingParserBase;
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -45,11 +45,11 @@
 import com.google.gdata.data.spreadsheet.WorksheetEntry;
 import com.google.gdata.util.ServiceException;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.TabularImportingParserBase;
 import com.google.refine.importers.TabularImportingParserBase.TableDataReader;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -65,14 +65,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.gdata.util.ServiceException;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.commands.HttpUtilities;
 import com.google.refine.importing.DefaultImportingController;
 import com.google.refine.importing.ImportingController;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.util.ParsingUtilities;
 

File: extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java
Patch:
@@ -41,10 +41,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.TabularImportingParserBase;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class PCAxisImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/clustering/binning/FingerprintKeyer.java
Patch:
@@ -37,7 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.TreeSet;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class FingerprintKeyer extends Keyer {
 

File: main/src/com/google/refine/commands/GetPreferenceCommand.java
Patch:
@@ -54,9 +54,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
         
         Project project = request.getParameter("project") != null ? getProject(request) : null;
-        PreferenceStore ps = project != null ? 
-                project.getMetadata().getPreferenceStore() : 
-                ProjectManager.singleton.getPreferenceStore();
+        PreferenceStore ps = ProjectManager.singleton.getPreferenceStore();
                 
         String prefName = request.getParameter("name");
         Object pref = ps.get(prefName);

File: main/src/com/google/refine/commands/SetPreferenceCommand.java
Patch:
@@ -52,9 +52,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
         
         Project project = request.getParameter("project") != null ? getProject(request) : null;
-        PreferenceStore ps = project != null ? 
-                project.getMetadata().getPreferenceStore() : 
-                ProjectManager.singleton.getPreferenceStore();
+        PreferenceStore ps = ProjectManager.singleton.getPreferenceStore();
                 
         String prefName = request.getParameter("name");
         String valueString = request.getParameter("value");

File: main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java
Patch:
@@ -63,7 +63,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
         try {
             Project project = getProject(request);
             
-            List<String> localExpressions = toExpressionList(project.getMetadata().getPreferenceStore().get("scripting.expressions"));
+            List<String> localExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get("scripting.expressions"));
             localExpressions = localExpressions.size() > 20 ? localExpressions.subList(0, 20) : localExpressions;
             
             List<String> globalExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get("scripting.expressions"));

File: main/src/com/google/refine/commands/expr/LogExpressionCommand.java
Patch:
@@ -54,7 +54,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             Project project = getProject(request);
             String expression = request.getParameter("expression");
             
-            ((TopList) project.getMetadata().getPreferenceStore().get("scripting.expressions"))
+            ((TopList) ProjectManager.singleton.getPreferenceStore().get("scripting.expressions"))
                 .add(expression);
 
             ((TopList) ProjectManager.singleton.getPreferenceStore().get("scripting.expressions"))

File: main/src/com/google/refine/commands/project/DeleteProjectCommand.java
Patch:
@@ -41,8 +41,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletResponse;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class DeleteProjectCommand extends Command {
 

File: main/src/com/google/refine/commands/project/ImportProjectCommand.java
Patch:
@@ -51,9 +51,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.LoggerFactory;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.ParsingUtilities;
 
 public class ImportProjectCommand extends Command {

File: main/src/com/google/refine/commands/project/RenameProjectCommand.java
Patch:
@@ -39,8 +39,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class RenameProjectCommand extends Command {
     @Override
@@ -49,7 +49,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         
         try {
             String name = request.getParameter("name");
-            ProjectMetadata pm = getProjectMetadata(request);
+            ProjectMetadata pm = getMetadata(request);
             
             pm.setName(name);
             

File: main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java
Patch:
@@ -9,15 +9,14 @@
 import org.json.JSONException;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class SetProjectMetadataCommand extends Command {
     @Override
     public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
-        
         Project project = request.getParameter("project") != null ? getProject(request) : null;
         String metaName = request.getParameter("name");
         String valueString = request.getParameter("value");
@@ -33,7 +32,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");
             
-            meta.setAnyField(metaName, valueString);
+            meta.setAnyStringField(metaName, valueString);
             ProjectManager.singleton.saveMetadata(meta, project.id);
             
             respond(response, "{ \"code\" : \"ok\" }");

File: main/src/com/google/refine/commands/project/SetProjectTagsCommand.java
Patch:
@@ -37,9 +37,9 @@
 import org.json.JSONException;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class SetProjectTagsCommand extends Command {
   @Override

File: main/src/com/google/refine/commands/row/GetRowsCommand.java
Patch:
@@ -180,9 +180,9 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
             }
             
             // metadata refresh for row mode and record mode
-	    if (project.getMetadata() != null) {
-            	project.getMetadata().setRowCount(project.rows.size());
-	    }
+            if (project.getMetadata() != null) {
+                project.getMetadata().setRowCount(project.rows.size());
+            }
         } catch (Exception e) {
             respondException(response, e);
         }

File: main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java
Patch:
@@ -47,8 +47,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONWriter;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.commands.Command;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class GetAllProjectMetadataCommand extends Command {
     @Override

File: main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.TimeZone;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;

File: main/src/com/google/refine/exporters/HtmlTableExporter.java
Patch:
@@ -38,7 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.json.JSONObject;
 
 import com.google.refine.ProjectManager;
@@ -103,7 +103,7 @@ public void addRow(List<CellData> cells, boolean isHeader) {
                                 if (cellData.link != null) {
                                     writer.write("<a href=\"");
                                     // TODO: The escape below looks wrong, but is probably harmless in most cases
-                                    writer.write(StringEscapeUtils.escapeHtml(cellData.link));
+                                    writer.write(StringEscapeUtils.escapeHtml4(cellData.link));
                                     writer.write("\">");
                                 }
                                 writer.write(StringEscapeUtils.escapeXml(cellData.text));

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Locale;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/Chomp.java
Patch:
@@ -35,7 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/Diff.java
Patch:
@@ -37,7 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Date;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/NGram.java
Patch:
@@ -35,7 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/Reinterpret.java
Patch:
@@ -40,11 +40,11 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONWriter;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class Reinterpret implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/ReplaceChars.java
Patch:
@@ -35,7 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/Split.java
Patch:
@@ -36,7 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/SplitByCharType.java
Patch:
@@ -35,7 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/ToTitlecase.java
Patch:
@@ -35,7 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.util.Properties;
 
-import org.apache.commons.lang.WordUtils;
+import org.apache.commons.lang3.text.WordUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/expr/functions/strings/Unescape.java
Patch:
@@ -37,7 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.net.URLDecoder;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 
@@ -56,13 +56,13 @@ public Object call(Properties bindings, Object[] args) {
                 String s = (String) o1;
                 String mode = ((String) o2).toLowerCase();
                 if ("html".equals(mode)) {
-                    return StringEscapeUtils.unescapeHtml(s);
+                    return StringEscapeUtils.unescapeHtml4(s);
                 } else if ("xml".equals(mode)) {
                     return StringEscapeUtils.unescapeXml(s);
                 } else if ("csv".equals(mode)) {
                     return StringEscapeUtils.unescapeCsv(s);
                 } else if ("javascript".equals(mode)) {
-                    return StringEscapeUtils.unescapeJavaScript(s);
+                    return StringEscapeUtils.escapeEcmaScript(s);
                 } else if ("url".equals(mode)) {
                     try {
                         return URLDecoder.decode(s,"UTF-8");

File: main/src/com/google/refine/grel/controls/IsNumeric.java
Patch:
@@ -33,7 +33,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.grel.controls;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class IsNumeric extends IsTest {
     @Override

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.poi.POIXMLDocument;
 import org.apache.poi.POIXMLException;
 import org.apache.poi.common.usermodel.Hyperlink;
@@ -60,13 +60,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.JSONUtilities;
 
@@ -191,7 +191,7 @@ public void parseOneFile(
                 // value is fileName#sheetIndex
                 fileNameAndSheetIndex = sheetObj.getString("fileNameAndSheetIndex").split("#");
             } catch (JSONException e) {
-                logger.error(ExceptionUtils.getFullStackTrace(e));
+                logger.error(ExceptionUtils.getStackTrace(e));
             }
             
             if (!fileNameAndSheetIndex[0].equals(fileSource))

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -14,10 +14,10 @@
 import org.json.JSONArray;
 import org.json.JSONObject;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class FixedWidthImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/ImportingParserBase.java
Patch:
@@ -44,14 +44,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.ImporterUtilities.MultiFileReadingProgress;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingParser;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 abstract public class ImportingParserBase implements ImportingParser {

File: main/src/com/google/refine/importers/JsonImporter.java
Patch:
@@ -49,14 +49,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.tree.ImportColumnGroup;
 import com.google.refine.importers.tree.TreeImportingParserBase;
 import com.google.refine.importers.tree.TreeReader;
 import com.google.refine.importers.tree.TreeReaderException;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class JsonImporter extends TreeImportingParserBase {

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -10,9 +10,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class LineBasedImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/OdsImporter.java
Patch:
@@ -44,7 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -55,13 +55,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.Recon.Judgment;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.model.ReconCandidate;
 import com.google.refine.util.JSONUtilities;
 
@@ -150,7 +150,7 @@ public void parseOneFile(
                 // value is fileName#sheetIndex
                 fileNameAndSheetIndex = sheetObj.getString("fileNameAndSheetIndex").split("#");
             } catch (JSONException e) {
-                logger.error(ExceptionUtils.getFullStackTrace(e));
+                logger.error(ExceptionUtils.getStackTrace(e));
             }
             
             if (!fileNameAndSheetIndex[0].equals(fileSource))

File: main/src/com/google/refine/importers/RdfTripleImporter.java
Patch:
@@ -50,14 +50,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.jrdf.util.ClosableIterable;
 import org.json.JSONObject;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public class RdfTripleImporter extends ImportingParserBase {
     private RdfReader rdfReader;

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -49,15 +49,15 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.json.JSONObject;
 
 import au.com.bytecode.opencsv.CSVParser;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class SeparatorBasedImporter extends TabularImportingParserBase {

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -41,13 +41,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import org.json.JSONObject;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.expr.ExpressionUtils;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 abstract public class TabularImportingParserBase extends ImportingParserBase {

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -56,13 +56,13 @@
 
 import xtc.parser.ParseException;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
 import com.google.refine.model.Recon;
 import com.google.refine.model.ReconStats;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;
 import com.google.refine.util.JSONUtilities;
 import com.google.refine.model.recon.StandardReconConfig;

File: main/src/com/google/refine/importers/XmlImporter.java
Patch:
@@ -51,14 +51,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.tree.ImportColumnGroup;
 import com.google.refine.importers.tree.TreeImportingParserBase;
 import com.google.refine.importers.tree.TreeReader;
 import com.google.refine.importers.tree.TreeReaderException;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 public class XmlImporter extends TreeImportingParserBase {

File: main/src/com/google/refine/importers/tree/ImportColumnGroup.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * A column group describes a branch in tree structured data

File: main/src/com/google/refine/importers/tree/TreeImportingParserBase.java
Patch:
@@ -39,16 +39,16 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.Reader;
 import java.util.List;
 
-import org.apache.commons.lang.NotImplementedException;
+import org.apache.commons.lang3.NotImplementedException;
 import org.json.JSONObject;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importers.ImporterUtilities;
 import com.google.refine.importers.ImporterUtilities.MultiFileReadingProgress;
 import com.google.refine.importers.ImportingParserBase;
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingUtilities;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.util.JSONUtilities;
 
 /**
@@ -154,7 +154,7 @@ public void parseOneFile(
         JSONObject options,
         List<Exception> exceptions
     ) {
-        throw new NotImplementedException();
+        throw new NotImplementedException("project ID:" + project.id);
     }
     
     /**

File: main/src/com/google/refine/importing/ImportingParser.java
Patch:
@@ -37,8 +37,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import org.json.JSONObject;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 
 public interface ImportingParser {
     /**

File: main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java
Patch:
@@ -184,7 +184,7 @@ protected ReconciledDataExtensionJob.DataExtension collectResult(
                     String str = val.getString("str");
                     storeCell(rows, rowindex, colindex, str); 
                 } else if (val.has("float")) {
-                    float v = Float.parseFloat(val.getString("float"));
+                    float v = val.getBigDecimal("float").floatValue();
                     storeCell(rows, rowindex, colindex, v);
                 } else if (val.has("int")) {
                     int v = Integer.parseInt(val.getString("int"));

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -48,7 +48,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;

File: main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java
Patch:
@@ -38,7 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONWriter;

File: main/src/com/google/refine/operations/column/ColumnSplitOperation.java
Patch:
@@ -39,7 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONWriter;

File: main/src/com/google/refine/operations/recon/ExtendDataOperation.java
Patch:
@@ -41,7 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONWriter;

File: main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java
Patch:
@@ -41,7 +41,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Properties;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONWriter;

File: main/src/com/google/refine/preference/PreferenceStore.java
Patch:
@@ -50,6 +50,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 public class PreferenceStore implements Jsonizable {
     public static final String USER_METADATA_KEY = "userMetadata";
     
+    // use to populate "creator" filed in metadata. https://github.com/OpenRefine/OpenRefine/issues/1393
+    public static final String USER_NAME = "username";
+    
     private boolean dirty = false;
     protected Map<String, Object> _prefs = new HashMap<String, Object>();
     

File: main/src/com/google/refine/util/JSObject.java
Patch:
@@ -39,7 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Iterator;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -157,7 +157,7 @@ static public void writeObject(IndentWriter writer, Object o) throws IOException
             writeJSONObject(writer, (JSONObject) o);
             
         } else {
-            writer.print("\"" + StringEscapeUtils.escapeJavaScript(o.toString()) + "\"");
+            writer.print("\"" + StringEscapeUtils.escapeEcmaScript(o.toString()) + "\"");
         }
     }
 }

File: main/tests/server/src/com/google/refine/tests/RefineTest.java
Patch:
@@ -55,7 +55,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeSuite;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.importers.SeparatorBasedImporter;
 import com.google.refine.importing.ImportingJob;
@@ -66,6 +65,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.util.TestUtils;
 import com.google.refine.util.JSONUtilities;
 

File: main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.browsing.RowFilter;
 import com.google.refine.browsing.facets.TextSearchFacet;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/exporters/HtmlExporterTests.java
Patch:
@@ -50,7 +50,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.HtmlTableExporter;
 import com.google.refine.exporters.WriterExporter;
@@ -59,6 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/TemplatingExporterTests.java
Patch:
@@ -48,7 +48,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.TemplatingExporter;
 import com.google.refine.exporters.WriterExporter;
@@ -57,6 +56,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/exporters/XlsExporterTests.java
Patch:
@@ -50,7 +50,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.browsing.Engine;
 import com.google.refine.exporters.StreamExporter;
 import com.google.refine.exporters.XlsExporter;
@@ -59,6 +58,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineTest;
 

File: main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java
Patch:
@@ -52,6 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/expr/functions/booleans/BooleanTests.java
Patch:
@@ -50,6 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/history/HistoryTests.java
Patch:
@@ -47,10 +47,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.Test;
 
 import com.google.refine.ProjectManager;
-import com.google.refine.ProjectMetadata;
 import com.google.refine.history.History;
 import com.google.refine.history.HistoryEntry;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.json.JSONObject;
 import org.mockito.Mockito;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.RefineServlet;
 import com.google.refine.importers.ImportingParserBase;
 import com.google.refine.importers.tree.ImportColumnGroup;
@@ -19,10 +18,11 @@
 import com.google.refine.importing.ImportingJob;
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.RefineServletStub;
 import com.google.refine.tests.RefineTest;
 
-abstract class ImporterTest extends RefineTest {
+abstract public class ImporterTest extends RefineTest {
     //mock dependencies
     protected Project project;
     protected ProjectMetadata metadata;

File: main/tests/server/src/com/google/refine/tests/importers/TsvCsvImporterTests.java
Patch:
@@ -58,10 +58,10 @@ public void init() {
     }
 
     //constants
-    String SAMPLE_ROW = "NDB_No,Shrt_Desc,Water";
+    private String SAMPLE_ROW = "NDB_No,Shrt_Desc,Water";
 
     //System Under Test
-    SeparatorBasedImporter SUT = null;
+    private SeparatorBasedImporter SUT = null;
 
     @Override
     @BeforeMethod
@@ -543,7 +543,7 @@ public Object[][] CSV_TSV_or_AutoDetermine(){
         };
     }
     
-    private void prepareOptions(
+    protected void prepareOptions(
         String sep, int limit, int skip, int ignoreLines,
         int headerLines, boolean guessValueType, boolean ignoreQuotes) {
         

File: main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java
Patch:
@@ -4,8 +4,8 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-import com.google.refine.ProjectMetadata;
 import com.google.refine.importing.ImportingUtilities;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.tests.RefineTest;
 
 public class ImportingUtilitiesTests extends RefineTest {

File: main/tests/server/src/com/google/refine/tests/model/CacheTests.java
Patch:
@@ -52,6 +52,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.operations.EngineDependentOperation;
 import com.google.refine.operations.row.RowRemovalOperation;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -51,6 +51,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
 import com.google.refine.model.Row;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.process.Process;
 import com.google.refine.process.ProcessManager;
 import com.google.refine.operations.OnError;

File: main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java
Patch:
@@ -42,8 +42,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
-import com.google.refine.process.Process;
 import com.google.refine.operations.cell.MultiValuedCellJoinOperation;
+import com.google.refine.process.Process;
 import com.google.refine.tests.RefineTest;
 
 

File: main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java
Patch:
@@ -42,6 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.model.medadata.ProjectMetadata;
 import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.tests.RefineTest;

File: main/tests/server/src/com/google/refine/tests/recon/DataExtensionTests.java
Patch:
@@ -36,9 +36,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import static org.mockito.Mockito.mock;
 
 import java.io.IOException;
-import java.util.Properties;
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -53,9 +53,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Cell;
 import com.google.refine.model.ModelException;
 import com.google.refine.model.Project;
-import com.google.refine.model.Row;
 import com.google.refine.model.Recon;
 import com.google.refine.model.ReconCandidate;
+import com.google.refine.model.Row;
 import com.google.refine.process.Process;
 import com.google.refine.process.ProcessManager;
 import com.google.refine.operations.EngineDependentOperation;

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -109,6 +109,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.strings.LastIndexOf;
 import com.google.refine.expr.functions.strings.MD5;
 import com.google.refine.expr.functions.strings.Match;
+import com.google.refine.expr.functions.strings.Find;
 import com.google.refine.expr.functions.strings.NGram;
 import com.google.refine.expr.functions.strings.NGramFingerprint;
 import com.google.refine.expr.functions.strings.ParseJson;
@@ -226,6 +227,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("parseJson", new ParseJson());
         registerFunction("ngram", new NGram());
         registerFunction("match", new Match());
+        registerFunction("find", new Find());
 
         // HTML functions from JSoup
         registerFunction("parseHtml", new ParseHtml());

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -109,6 +109,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.expr.functions.strings.LastIndexOf;
 import com.google.refine.expr.functions.strings.MD5;
 import com.google.refine.expr.functions.strings.Match;
+import com.google.refine.expr.functions.strings.Find;
 import com.google.refine.expr.functions.strings.NGram;
 import com.google.refine.expr.functions.strings.NGramFingerprint;
 import com.google.refine.expr.functions.strings.ParseJson;
@@ -226,6 +227,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("parseJson", new ParseJson());
         registerFunction("ngram", new NGram());
         registerFunction("match", new Match());
+        registerFunction("find", new Find());
 
         // HTML functions from JSoup
         registerFunction("parseHtml", new ParseHtml());

File: extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java
Patch:
@@ -465,7 +465,9 @@ private DatabaseQueryInfo getQueryInfo(HttpServletRequest request) {
         jdbcConfig.setDatabaseSchema(request.getParameter("initialSchema"));
         
         String query = request.getParameter("query");
-        logger.info("jdbcConfig::{}, query::{}", jdbcConfig, query);
+        if(logger.isDebugEnabled()) {
+            logger.debug("jdbcConfig::{}, query::{}", jdbcConfig, query);
+        }
         if (jdbcConfig.getDatabaseHost() == null || jdbcConfig.getDatabaseName() == null
                 || jdbcConfig.getDatabasePassword() == null || jdbcConfig.getDatabaseType() == null
                 || jdbcConfig.getDatabaseUser() == null || query == null) {

File: extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java
Patch:
@@ -91,7 +91,7 @@ public void doDelete(HttpServletRequest request, HttpServletResponse response)
         
         DatabaseConfiguration savedConn = DatabaseUtils.getSavedConnection(connectionName);
         if(savedConn == null) {
-            logger.error("Connection With name:: {} does not exist!", request.getParameter("connectionName"));
+            //logger.error("Connection With name:: {} does not exist!", request.getParameter("connectionName"));
             response.sendError(HttpStatus.SC_BAD_REQUEST, "Connection with name " + connectionName + " does not exists!");
             response.flushBuffer();
             return;
@@ -246,7 +246,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
        
         if(logger.isDebugEnabled()) {
-            logger.info("doPost Connection: {}", request.getParameter("connectionName"));
+            logger.debug("doPost Connection: {}", request.getParameter("connectionName"));
         }
         
         DatabaseConfiguration jdbcConfig = getJdbcConfiguration(request);
@@ -297,7 +297,7 @@ public void doPut(HttpServletRequest request, HttpServletResponse response)
         if(logger.isDebugEnabled()) {
             logger.debug("databaseType::{} " , request.getParameter("databaseHost"));
         }
-        logger.info("databaseHost::{} " , request.getParameter("databaseServer"));
+       // logger.info("databaseHost::{} " , request.getParameter("databaseServer"));
         
         DatabaseConfiguration jdbcConfig = getJdbcConfiguration(request);
         StringBuilder sb = new StringBuilder();

File: extensions/database/test/com/google/refine/extension/database/pgsql/PgSQLConnectionManagerTest.java
Patch:
@@ -28,7 +28,7 @@ public void beforeTest(@Optional(DEFAULT_PGSQL_DB_NAME) String pgSqlDbName,  @Op
            @Optional(DEFAULT_PGSQL_PASSWORD)  String pgSqlDbPassword, @Optional(DEFAULT_TEST_TABLE)  String pgSqlTestTable) {
        
         MockitoAnnotations.initMocks(this);
-       // System.out.println("beforeTest " + pgSqlDbName);
+       
         testDbConfig = new DatabaseConfiguration();
         testDbConfig.setDatabaseHost(pgSqlDbHost);
         testDbConfig.setDatabaseName(pgSqlDbName);

File: extensions/database/test/com/google/refine/extension/database/pgsql/PgSQLDatabaseServiceTest.java
Patch:
@@ -33,7 +33,6 @@ public void beforeTest(@Optional(DEFAULT_PGSQL_DB_NAME) String pgSqlDbName,  @Op
            @Optional(DEFAULT_PGSQL_PASSWORD)    String pgSqlDbPassword, @Optional(DEFAULT_TEST_TABLE)   String pgSqlTestTable) {
        
         MockitoAnnotations.initMocks(this);
-       // System.out.println("beforeTest " + pgSqlDbName);
         testDbConfig = new DatabaseConfiguration();
         testDbConfig.setDatabaseHost(pgSqlDbHost);
         testDbConfig.setDatabaseName(pgSqlDbName);
@@ -55,7 +54,7 @@ public void beforeTest(@Optional(DEFAULT_PGSQL_DB_NAME) String pgSqlDbName,  @Op
     public void testGetDatabaseUrl() {
         PgSQLDatabaseService pgSqlService = (PgSQLDatabaseService)DatabaseService.get(PgSQLDatabaseService.DB_NAME);
         String dbUrl = pgSqlService.getDatabaseUrl(testDbConfig);
-        System.out.println("dbUrl:" + dbUrl);
+       
         Assert.assertNotNull(dbUrl);
         Assert.assertEquals(dbUrl, DBExtensionTestUtils.getJDBCUrl(testDbConfig));
     }

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,13 +169,13 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
-	if (ref_val.startsWith("HTTP error 403"))
+	if (ref_val.startsWith("HTTP error"))
             return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {
             System.out.println("value:" + project.rows.get(i).getCellValue(1));
             // all random values should be equal due to caching
-            Assert.assertEquals(project.rows.get(i).getCellValue(1), ref_val);
+            Assert.assertEquals(project.rows.get(i).getCellValue(1).toString(), ref_val);
         }
                Assert.assertFalse(process.isRunning());
     }

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,7 +169,7 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
-	if (ref_val.contains("HTTP error 403"))
+	if (ref_val.startsWith("HTTP error"))
             return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,13 +169,13 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
-	if (ref_val.contains("HTTP error 403") || ref_val.contains("HTTP error 503"))
+	if (ref_val.contains("HTTP error 403"))
             return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {
             System.out.println("value:" + project.rows.get(i).getCellValue(1));
             // all random values should be equal due to caching
-            Assert.assertEquals(project.rows.get(i).getCellValue(1), ref_val);
+            Assert.assertEquals(project.rows.get(i).getCellValue(1).toString(), ref_val);
         }
                Assert.assertFalse(process.isRunning());
     }

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,7 +169,7 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
-	if (ref_val.startsWith("HTTP error 403") || ref_val.startsWith("HTTP error 503"))
+	if (ref_val.contains("HTTP error 403") || ref_val.contains("HTTP error 503"))
             return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,7 +169,7 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
-	if (ref_val.startsWith("HTTP error 403"))
+	if (ref_val.startsWith("HTTP error 403") || ref_val.startsWith("HTTP error 503"))
             return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,6 +169,8 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
+	if (ref_val.startsWith("HTTP error 403"))
+            return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {
             System.out.println("value:" + project.rows.get(i).getCellValue(1));
@@ -219,4 +221,4 @@ public void testInvalidUrl() throws Exception {
         Assert.assertTrue(ExpressionUtils.isError(project.rows.get(2).getCellValue(newCol)));
     }
 
-}
\ No newline at end of file
+}

File: main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java
Patch:
@@ -169,6 +169,8 @@ public void testUrlCaching() throws Exception {
 
         // Inspect rows
         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();
+	if (ref_val.startsWith("HTTP error 403"))
+            return;
         Assert.assertTrue(ref_val != "apple"); // just to make sure I picked the right column
         for (int i = 1; i < 4; i++) {
             System.out.println("value:" + project.rows.get(i).getCellValue(1));
@@ -219,4 +221,4 @@ public void testInvalidUrl() throws Exception {
         Assert.assertTrue(ExpressionUtils.isError(project.rows.get(2).getCellValue(newCol)));
     }
 
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -198,7 +198,8 @@ static public LocalDateTime stringToLocalDate(String s) {
         if (s.endsWith("Z")) {          // UTC time
             Instant instant = Instant.parse(s);
             return LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
-        } else 
+        } else {
             return LocalDateTime.parse(s, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
+        }
     }
 }

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
+import java.time.OffsetDateTime;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
@@ -83,7 +84,7 @@ public Object call(Properties bindings, Object[] args) {
             try {
                 return CalendarParser.parse( o1, (month_first) ? CalendarParser.MM_DD_YY : CalendarParser.DD_MM_YY);
             } catch (CalendarParserException e) {
-                Date d = ParsingUtilities.stringToDate(o1);
+                OffsetDateTime d = ParsingUtilities.stringToDate(o1);
                 if (d != null) {
                     return d;
                 } else {

File: main/src/com/google/refine/ProjectMetadata.java
Patch:
@@ -74,7 +74,7 @@ public class ProjectMetadata implements Jsonizable {
     private JSONArray _importOptionMetadata = new JSONArray();
     
     // user metadata
-    private JSONArray _userMetadata = new JSONArray();; 
+    private JSONArray _userMetadata = new JSONArray();
     
     private Map<String, Serializable>   _customMetadata = new HashMap<String, Serializable>();
     private PreferenceStore             _preferenceStore = new PreferenceStore();

File: main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java
Patch:
@@ -37,7 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.Serializable;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
-import java.time.ZonedDateTime;
+import java.time.OffsetDateTime;
 import java.util.Calendar;
 import java.util.List;
 import java.util.Properties;
@@ -214,10 +214,10 @@ static protected void writeValue(StringBuffer sb, Object v, boolean quote) throw
                     Calendar c = (Calendar) v;
                     
                     sb.append("[date " + 
-                        ParsingUtilities.dateToString(ZonedDateTime.ofInstant(c.toInstant(), ZoneId.systemDefault())) +"]");
+                        ParsingUtilities.dateToString(OffsetDateTime.ofInstant(c.toInstant(), ZoneId.systemDefault())) +"]");
                 } else if (v instanceof LocalDateTime) {
                     sb.append("[date " + 
-                            ParsingUtilities.dateToString((ZonedDateTime) v) +"]");
+                            ParsingUtilities.dateToString((OffsetDateTime) v) +"]");
                 } else if (v instanceof String) {
                     if (quote) {
                         sb.append(JSONObject.quote((String) v));

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -35,7 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
-import java.time.ZonedDateTime;
+import java.time.OffsetDateTime;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
@@ -84,7 +84,7 @@ public Object call(Properties bindings, Object[] args) {
             try {
                 return CalendarParser.parse( o1, (month_first) ? CalendarParser.MM_DD_YY : CalendarParser.DD_MM_YY);
             } catch (CalendarParserException e) {
-                ZonedDateTime d = ParsingUtilities.stringToDate(o1);
+                OffsetDateTime d = ParsingUtilities.stringToDate(o1);
                 if (d != null) {
                     return d;
                 } else {

File: main/src/com/google/refine/model/Cell.java
Patch:
@@ -36,7 +36,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.Serializable;
 import java.io.Writer;
 import java.time.LocalDateTime;
-import java.time.ZonedDateTime;
+import java.time.OffsetDateTime;
 import java.util.Properties;
 
 import org.json.JSONException;
@@ -90,8 +90,8 @@ public void write(JSONWriter writer, Properties options) throws JSONException {
                 if (value instanceof LocalDateTime) {
                     writer.value(ParsingUtilities.localDateToString((LocalDateTime)value));
                     writer.key("t"); writer.value("date");
-                } else if (value instanceof ZonedDateTime) {
-                    writer.value(ParsingUtilities.dateToString((ZonedDateTime) value));
+                } else if (value instanceof OffsetDateTime) {
+                    writer.value(ParsingUtilities.dateToString((OffsetDateTime) value));
                     writer.key("t"); writer.value("date");
                 } else if (value instanceof Double 
                         && (((Double)value).isNaN() || ((Double)value).isInfinite())) {

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -39,7 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.time.ZoneId;
-import java.time.ZonedDateTime;
+import java.time.OffsetDateTime;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
@@ -310,10 +310,10 @@ public ReconJob createJob(Project project, int rowIndex, Row row,
                                 jsonWriter.endObject();
                             } else if (cell2.value instanceof Calendar) {
                                 Calendar calendar = (Calendar) cell2.value;
-                                ZonedDateTime d = ZonedDateTime.ofInstant(calendar.toInstant(), ZoneId.of("Z"));
+                                OffsetDateTime d = OffsetDateTime.ofInstant(calendar.toInstant(), ZoneId.of("Z"));
                                 jsonWriter.value(ParsingUtilities.dateToString(d));
                             } else if (cell2.value instanceof Date) {
-                                jsonWriter.value(ParsingUtilities.dateToString((ZonedDateTime) cell2.value));
+                                jsonWriter.value(ParsingUtilities.dateToString((OffsetDateTime) cell2.value));
                             } else {
                                 jsonWriter.value(cell2.value.toString());
                             }

File: main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java
Patch:
@@ -42,7 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.StringWriter;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
-import java.time.ZonedDateTime;
+import java.time.OffsetDateTime;
 import java.util.Properties;
 
 import org.slf4j.LoggerFactory;
@@ -202,7 +202,7 @@ public void exportCsvWithEmptyCells(){
     public void exportDateColumns(){
         CreateGrid(1,2);
         LocalDateTime localDate = LocalDateTime.now();
-        ZonedDateTime date = ZonedDateTime.now(ZoneId.of("Z"));
+        OffsetDateTime date = OffsetDateTime.now(ZoneId.of("Z"));
 
         when(options.getProperty("printColumnHeader")).thenReturn("false");
         project.rows.get(0).cells.set(0, new Cell(localDate, null));

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
+import java.time.ZonedDateTime;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
@@ -83,7 +84,7 @@ public Object call(Properties bindings, Object[] args) {
             try {
                 return CalendarParser.parse( o1, (month_first) ? CalendarParser.MM_DD_YY : CalendarParser.DD_MM_YY);
             } catch (CalendarParserException e) {
-                Date d = ParsingUtilities.stringToDate(o1);
+                ZonedDateTime d = ParsingUtilities.stringToDate(o1);
                 if (d != null) {
                     return d;
                 } else {

File: main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.tests.browsing.facets;
 
 import static org.mockito.Mockito.mock;
 

File: main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.tests.operations.cell;
 
 import static org.mockito.Mockito.mock;
 

File: main/src/com/google/refine/browsing/facets/TextSearchFacet.java
Patch:
@@ -50,6 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.ast.VariableExpr;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
+import com.google.refine.util.PatternSyntaxExceptionParser;
 
 public class TextSearchFacet implements Facet {
     /*
@@ -106,7 +107,8 @@ public void initializeFromJSON(Project project, JSONObject o) throws JSONExcepti
                             _query, 
                             _caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
                 } catch (java.util.regex.PatternSyntaxException e) {
-                    throw new JSONException(e);
+                    PatternSyntaxExceptionParser err = new PatternSyntaxExceptionParser(e);
+                    throw new JSONException(err.getUserMessage());
                 }
             } else if (!_caseSensitive) {
                 _query = _query.toLowerCase();

File: main/src/com/google/refine/util/PatternSyntaxExceptionParser.java
Patch:
@@ -121,6 +121,7 @@ public String getUserMessage() {
                 // If no special handling in place fall back on error msg
                 // created by java.util.regex.PatternSyntaxException
                 sb.append(exception.getMessage());
+                break;
         }
         return sb.toString();
     }

File: main/src/com/google/refine/browsing/facets/TextSearchFacet.java
Patch:
@@ -50,6 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.ast.VariableExpr;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
+import com.google.refine.util.PatternSyntaxExceptionParser;
 
 public class TextSearchFacet implements Facet {
     /*
@@ -106,7 +107,8 @@ public void initializeFromJSON(Project project, JSONObject o) throws JSONExcepti
                             _query, 
                             _caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
                 } catch (java.util.regex.PatternSyntaxException e) {
-                    throw new JSONException(e);
+                    PatternSyntaxExceptionParser err = new PatternSyntaxExceptionParser(e);
+                    throw new JSONException(err.getUserMessage());
                 }
             } else if (!_caseSensitive) {
                 _query = _query.toLowerCase();

File: main/src/com/google/refine/commands/row/GetRowsCommand.java
Patch:
@@ -178,6 +178,9 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
             if (callback != null) {
                 writer.write(")");
             }
+            
+            // metadata refresh for row mode and record mode
+            project.getMetadata().setRowCount(project.rows.size());
         } catch (Exception e) {
             respondException(response, e);
         }

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -395,7 +395,7 @@ public void mergeEmptyUserMetadata(ProjectMetadata metadata) {
         // actual metadata for project
         JSONArray jsonObjArray = metadata.getUserMetadata();
         
-        initDispaly(jsonObjArray);
+        initDisplay(jsonObjArray);
         
         try {
             String userMeta = (String)_preferenceStore.get(PreferenceStore.USER_METADATA_KEY);
@@ -443,7 +443,7 @@ public void mergeEmptyUserMetadata(ProjectMetadata metadata) {
      * honor the meta data preference
      * @param jsonObjArray
      */
-    private void initDispaly(JSONArray jsonObjArray) {
+    private void initDisplay(JSONArray jsonObjArray) {
         for (int index = 0; index < jsonObjArray.length(); index++) {
             try {
                 JSONObject projectMetaJsonObj = jsonObjArray.getJSONObject(index);

File: main/src/com/google/refine/commands/row/GetRowsCommand.java
Patch:
@@ -178,6 +178,9 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
             if (callback != null) {
                 writer.write(")");
             }
+            
+            // metadata refresh for row mode and record mode
+            project.getMetadata().setRowCount(project.rows.size());
         } catch (Exception e) {
             respondException(response, e);
         }

File: main/src/com/google/refine/commands/lang/GetLanguagesCommand.java
Patch:
@@ -89,7 +89,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
                 String lang = file.getName().split("-")[1].split("\\.")[0];
                 if (!"en".equals(lang) && !"default".equals(lang)) {
                     JSONObject json = LoadLanguageCommand.loadLanguage(this.servlet, "core", lang);
-                    if (json != null) {
+                    if (json != null && json.has("name")) {
                         String label = json.getString("name");
                         writeLangData(writer, lang, label);
                     }

File: main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java
Patch:
@@ -44,7 +44,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import org.json.JSONArray;
 import org.json.JSONException;
-import org.json.JSONObject;
 import org.json.JSONWriter;
 
 import com.google.refine.ProjectManager;

File: main/src/com/google/refine/ProjectMetadata.java
Patch:
@@ -79,7 +79,7 @@ public class ProjectMetadata implements Jsonizable {
     private Map<String, Serializable>   _customMetadata = new HashMap<String, Serializable>();
     private PreferenceStore             _preferenceStore = new PreferenceStore();
 
-    final static Logger logger = LoggerFactory.getLogger("project_metadata");
+    private final static Logger logger = LoggerFactory.getLogger("project_metadata");
 
     protected ProjectMetadata(Date date) {
         _created = date;

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -45,7 +45,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.zip.GZIPInputStream;
 
 import org.apache.commons.lang.exception.ExceptionUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.tools.tar.TarEntry;
 import org.apache.tools.tar.TarInputStream;
 import org.apache.tools.tar.TarOutputStream;

File: main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.tests.operations.cell;
 
 import static org.mockito.Mockito.mock;
 

File: main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.tests.model;
+package com.google.refine.tests.operations.cell;
 
 import static org.mockito.Mockito.mock;
 

File: main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java
Patch:
@@ -31,7 +31,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 */
 
-package com.google.refine.operations.cell;
+package com.google.refine.tests.operations.cell;
 
 import static org.mockito.Mockito.mock;
 
@@ -57,6 +57,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.importing.ImportingManager;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
+import com.google.refine.operations.cell.KeyValueColumnizeOperation;
 import com.google.refine.process.Process;
 import com.google.refine.tests.ProjectManagerStub;
 import com.google.refine.tests.RefineServletStub;

File: main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java
Patch:
@@ -111,7 +111,7 @@ public void TearDown() {
     }
 
     /**
-     * Test to demonstrate the intended behaviour of the function, for issue #1214
+     * Test to demonstrate the intended behaviour of the function, for issue #1268
      * https://github.com/OpenRefine/OpenRefine/issues/1268
      */
 

File: main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java
Patch:
@@ -33,7 +33,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.operations.cell;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
@@ -170,8 +169,6 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
             if("lengths".equals(_mode)) {
                 //do split by lengths
                 if (_fieldLengths.length >= 0 && _fieldLengths[0] > 0) {
-                    Object o = _fieldLengths[0];
-                    
                     values = new String[_fieldLengths.length];
                     
                     int lastIndex = 0;

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -156,7 +156,7 @@ public class WikitextTableVisitor extends AstVisitor<WtNode> {
         private int spanningCellIdx;
         private List<String> internalLinksInCell;
         
-        private final Pattern urlPattern = Pattern.compile("\\b(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
+        private final Pattern urlPattern = Pattern.compile("\\b(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_!:,.;]*[-a-zA-Z0-9+&@#/%=~_]",
                 Pattern.CASE_INSENSITIVE);
         
         public WikitextTableVisitor(boolean blankSpanningCells, boolean includeRawTemplates) {

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -156,7 +156,7 @@ public class WikitextTableVisitor extends AstVisitor<WtNode> {
         private int spanningCellIdx;
         private List<String> internalLinksInCell;
         
-        private final Pattern urlPattern = Pattern.compile("\\b(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
+        private final Pattern urlPattern = Pattern.compile("\\b(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_!:,.;]*[-a-zA-Z0-9+&@#/%=~_]",
                 Pattern.CASE_INSENSITIVE);
         
         public WikitextTableVisitor(boolean blankSpanningCells, boolean includeRawTemplates) {

File: main/src/com/google/refine/model/Cell.java
Patch:
@@ -39,9 +39,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Date;
 import java.util.Properties;
 
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/model/Recon.java
Patch:
@@ -39,9 +39,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Map;
 import java.util.Properties;
 
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -39,9 +39,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.Map.Entry;
 import java.util.Properties;
 
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 import org.json.JSONException;
 import org.json.JSONWriter;
 

File: main/src/com/google/refine/browsing/util/NumericBinIndex.java
Patch:
@@ -87,7 +87,7 @@ public NumericBinIndex(Project project, RowEvaluable rowEvaluable) {
         if (_min >= _max) {
             _step = 1;
             _min = Math.min(_min, _max);
-            _max = _step;
+            _max = _min+_step;
             _bins = new int[1];
             
             return;

File: main/src/com/google/refine/clustering/binning/FingerprintKeyer.java
Patch:
@@ -52,6 +52,7 @@ public String key(String s, Object... o) {
         s = s.trim(); // first off, remove whitespace around the string
         s = s.toLowerCase(); // then lowercase it
         s = punctctrl.matcher(s).replaceAll(""); // then remove all punctuation and control chars
+        s = asciify(s); // find ASCII equivalent to characters
         String[] frags = StringUtils.split(s); // split by whitespace
         TreeSet<String> set = new TreeSet<String>();
         for (String ss : frags) {
@@ -65,7 +66,7 @@ public String key(String s, Object... o) {
                 b.append(' ');
             }
         }
-        return asciify(b.toString()); // find ASCII equivalent to characters 
+        return b.toString();
     }
 
     protected String asciify(String s) {

File: main/tests/server/src/com/google/refine/tests/clustering/binning/KeyerTests.java
Patch:
@@ -50,6 +50,7 @@ public class KeyerTests extends RefineTest {
     
     private static final String[][] testStrings = {
         {"the multi multi word test","multi test the word"},
+        {" école ÉCole ecoLe ", "ecole"},
         {"a b c d","a b c d"},
         {" d c b a ","a b c d"},
         {"\tABC \t DEF ","abc def"}, // test leading and trailing whitespace

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -332,7 +332,7 @@ public void visit(WtTagExtension tag) {
                 }
 
                 // store the reference for later use
-                if (currentReference != null && currentReferenceName != "") {
+                if (currentReference != null && ! "".equals(currentReferenceName)) {
                     namedReferences.put(currentReferenceName, currentReference);
                 }
             }

File: main/src/com/google/refine/importers/WikitextImporter.java
Patch:
@@ -504,7 +504,7 @@ private void reconcileToQids(String wikiBaseUrl, StandardReconConfig cfg) {
                 List<Recon> recons = new ArrayList<Recon>(rowSize);
                 for (int j = 0; j < rowSize; j++) {
                     recons.add(null);
-                    if (i == 0)
+                    if (j >= columnReconciled.size())
                         columnReconciled.add(false);
                 }
                 reconList.add(recons);

File: main/src/com/google/refine/model/RecordModel.java
Patch:
@@ -155,7 +155,8 @@ synchronized public void update(Project project) {
                 for (int g = 0; g < groupCount; g++) {
                     KeyedGroup group = keyedGroups.get(g);
 
-                    if (!ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {
+                    if (!ExpressionUtils.isNonBlankData(row.getCellValue(keyedGroups.get(0).keyCellIndex)) &&
+                        !ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {
                         int contextRowIndex = lastNonBlankRowsByGroup[g];
                         if (contextRowIndex >= 0) {
                             for (int dependentCellIndex : group.cellIndices) {

File: main/src/com/google/refine/model/RecordModel.java
Patch:
@@ -155,7 +155,8 @@ synchronized public void update(Project project) {
                 for (int g = 0; g < groupCount; g++) {
                     KeyedGroup group = keyedGroups.get(g);
 
-                    if (!ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {
+                    if (!ExpressionUtils.isNonBlankData(row.getCellValue(keyedGroups.get(0).keyCellIndex)) &&
+                        !ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {
                         int contextRowIndex = lastNonBlankRowsByGroup[g];
                         if (contextRowIndex >= 0) {
                             for (int dependentCellIndex : group.cellIndices) {

File: main/src/com/google/refine/commands/recon/ExtendDataCommand.java
Patch:
@@ -38,7 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONObject;
 
 import com.google.refine.commands.EngineDependentCommand;
-import com.google.refine.freebase.operations.ExtendDataOperation;
+import com.google.refine.operations.recon.ExtendDataOperation;
 import com.google.refine.model.AbstractOperation;
 import com.google.refine.model.Project;
 import com.google.refine.util.ParsingUtilities;
@@ -50,13 +50,15 @@ protected AbstractOperation createOperation(Project project,
         
         String baseColumnName = request.getParameter("baseColumnName");
         int columnInsertIndex = Integer.parseInt(request.getParameter("columnInsertIndex"));
+        String endpoint = request.getParameter("endpoint");
         
         String jsonString = request.getParameter("extension");
         JSONObject extension = ParsingUtilities.evaluateJsonStringToObject(jsonString);
         
         return new ExtendDataOperation(
             engineConfig, 
             baseColumnName, 
+	    endpoint,
             extension,
             columnInsertIndex
         );

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -85,8 +85,6 @@ public class RefineServlet extends Butterfly {
 
     static final Logger logger = LoggerFactory.getLogger("refine");
 
-    static protected long AUTOSAVE_PERIOD = 5; // default: 5 minutes
-    
     static protected class AutoSaveTimerTask implements Runnable {
         @Override
         public void run() {
@@ -131,7 +129,7 @@ public void init() throws ServletException {
         FileProjectManager.initialize(s_dataDir);
         ImportingManager.initialize(this);
 
-	AUTOSAVE_PERIOD = Long.parseLong(getInitParameter("refine.autosave"));
+	long AUTOSAVE_PERIOD = Long.parseLong(getInitParameter("refine.autosave"));
 
         service.scheduleWithFixedDelay(new AutoSaveTimerTask(), AUTOSAVE_PERIOD, 
                 AUTOSAVE_PERIOD, TimeUnit.MINUTES);

File: server/src/com/google/refine/Refine.java
Patch:
@@ -291,7 +291,7 @@ static private void configure(WebAppContext context) throws Exception {
         if (servlet != null) {
             servlet.setInitParameter("refine.data", getDataDir());
             servlet.setInitParameter("butterfly.modules.path", getDataDir() + "/extensions");
-            servlet.setInitParameter("refine.autosave", Configurations.get("refine.autosave"));
+            servlet.setInitParameter("refine.autosave", Configurations.get("refine.autosave", "5")); // default: 5 minutes
             servlet.setInitOrder(1);
             servlet.doStart();
         }

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -85,8 +85,6 @@ public class RefineServlet extends Butterfly {
 
     static final Logger logger = LoggerFactory.getLogger("refine");
 
-    static protected long AUTOSAVE_PERIOD = 5; // default: 5 minutes
-    
     static protected class AutoSaveTimerTask implements Runnable {
         @Override
         public void run() {
@@ -131,7 +129,7 @@ public void init() throws ServletException {
         FileProjectManager.initialize(s_dataDir);
         ImportingManager.initialize(this);
 
-	AUTOSAVE_PERIOD = Long.parseLong(getInitParameter("refine.autosave"));
+	long AUTOSAVE_PERIOD = Long.parseLong(getInitParameter("refine.autosave"));
 
         service.scheduleWithFixedDelay(new AutoSaveTimerTask(), AUTOSAVE_PERIOD, 
                 AUTOSAVE_PERIOD, TimeUnit.MINUTES);

File: server/src/com/google/refine/Refine.java
Patch:
@@ -291,7 +291,7 @@ static private void configure(WebAppContext context) throws Exception {
         if (servlet != null) {
             servlet.setInitParameter("refine.data", getDataDir());
             servlet.setInitParameter("butterfly.modules.path", getDataDir() + "/extensions");
-            servlet.setInitParameter("refine.autosave", Configurations.get("refine.autosave"));
+            servlet.setInitParameter("refine.autosave", Configurations.get("refine.autosave", "5")); // default: 5 minutes
             servlet.setInitOrder(1);
             servlet.doStart();
         }

File: main/src/com/google/refine/model/changes/RowFlagChange.java
Patch:
@@ -93,7 +93,7 @@ static public RowFlagChange load(LineNumberReader reader, Pool pool) throws Exce
             } else if ("oldFlagged".equals(field)) {
                 oldFlagged = Boolean.parseBoolean(value);
             } else if ("newFlagged".equals(field)) {
-                oldFlagged = Boolean.parseBoolean(value);
+                newFlagged = Boolean.parseBoolean(value);
             }
         }
         
@@ -102,4 +102,4 @@ static public RowFlagChange load(LineNumberReader reader, Pool pool) throws Exce
         
         return change;
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/model/changes/RowStarChange.java
Patch:
@@ -93,7 +93,7 @@ static public RowStarChange load(LineNumberReader reader, Pool pool) throws Exce
             } else if ("oldStarred".equals(field)) {
                 oldStarred = Boolean.parseBoolean(value);
             } else if ("newStarred".equals(field)) {
-                oldStarred = Boolean.parseBoolean(value);
+                newStarred = Boolean.parseBoolean(value);
             }
         }
         
@@ -102,4 +102,4 @@ static public RowStarChange load(LineNumberReader reader, Pool pool) throws Exce
         
         return change;
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/model/changes/RowStarChange.java
Patch:
@@ -93,7 +93,7 @@ static public RowStarChange load(LineNumberReader reader, Pool pool) throws Exce
             } else if ("oldStarred".equals(field)) {
                 oldStarred = Boolean.parseBoolean(value);
             } else if ("newStarred".equals(field)) {
-                oldStarred = Boolean.parseBoolean(value);
+                newStarred = Boolean.parseBoolean(value);
             }
         }
         
@@ -102,4 +102,4 @@ static public RowStarChange load(LineNumberReader reader, Pool pool) throws Exce
         
         return change;
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/model/changes/RowFlagChange.java
Patch:
@@ -93,7 +93,7 @@ static public RowFlagChange load(LineNumberReader reader, Pool pool) throws Exce
             } else if ("oldFlagged".equals(field)) {
                 oldFlagged = Boolean.parseBoolean(value);
             } else if ("newFlagged".equals(field)) {
-                oldFlagged = Boolean.parseBoolean(value);
+                newFlagged = Boolean.parseBoolean(value);
             }
         }
         
@@ -102,4 +102,4 @@ static public RowFlagChange load(LineNumberReader reader, Pool pool) throws Exce
         
         return change;
     }
-}
\ No newline at end of file
+}

File: main/src/com/google/refine/browsing/facets/TextSearchFacet.java
Patch:
@@ -104,7 +104,7 @@ public void initializeFromJSON(Project project, JSONObject o) throws JSONExcepti
                             _query, 
                             _caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
                 } catch (java.util.regex.PatternSyntaxException e) {
-                    e.printStackTrace();
+                    throw new JSONException(e);
                 }
             } else if (!_caseSensitive) {
                 _query = _query.toLowerCase();

File: main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java
Patch:
@@ -53,6 +53,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
 
         Writer w = response.getWriter();
+        response.setContentType("application/json");
         JSONWriter writer = new JSONWriter(w);
         try {
             writer.object();

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -313,7 +313,7 @@ public void update(long bytesRead, long contentLength, int itemCount) {
                             }
                             JSONUtilities.safePut(fileRecord, "declaredEncoding", encoding);
                             String contentType = null;
-                            if (entity.getContentType().getValue() != null) {
+                            if (entity.getContentType() != null) {
                                 contentType = entity.getContentType().getValue();
                             }
                             JSONUtilities.safePut(fileRecord, "declaredMimeType", contentType);

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -178,7 +178,7 @@ public void write(JSONWriter writer, Properties options)
     throws JSONException {
 
         writer.object();
-        writer.key("description"); writer.value("Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html");
+        writer.key("description"); writer.value("Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html");
         writer.key("params"); writer.value("o, boolean month_first / format1, format2, ... (all optional)");
         writer.key("returns"); writer.value("date");
         writer.endObject();

File: main/src/com/google/refine/exporters/HtmlTableExporter.java
Patch:
@@ -102,10 +102,11 @@ public void addRow(List<CellData> cells, boolean isHeader) {
                             if (cellData != null && cellData.text != null) {
                                 if (cellData.link != null) {
                                     writer.write("<a href=\"");
+                                    // TODO: The escape below looks wrong, but is probably harmless in most cases
                                     writer.write(StringEscapeUtils.escapeHtml(cellData.link));
                                     writer.write("\">");
                                 }
-                                writer.write(cellData.text);
+                                writer.write(StringEscapeUtils.escapeXml(cellData.text));
                                 if (cellData.link != null) {
                                     writer.write("</a>");
                                 }

File: server/src/com/google/refine/Refine.java
Patch:
@@ -360,7 +360,7 @@ static private String getDataDir() {
                 grefineDir = new File(new File(parentDir, "Google"), "Refine");
                 gridworksDir = new File(parentDir, "Gridworks");
             }
-        } else if (os.contains("mac os x")) {
+        } else if (os.contains("os x")) {
             // on macosx, use "~/Library/Application Support"
             String home = System.getProperty("user.home");
             

File: server/src/com/google/refine/Refine.java
Patch:
@@ -360,7 +360,7 @@ static private String getDataDir() {
                 grefineDir = new File(new File(parentDir, "Google"), "Refine");
                 gridworksDir = new File(parentDir, "Gridworks");
             }
-        } else if (os.contains("mac os x")) {
+        } else if (os.contains("os x")) {
             // on macosx, use "~/Library/Application Support"
             String home = System.getProperty("user.home");
             

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java
Patch:
@@ -95,6 +95,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
     public void doPost(HttpServletRequest request, HttpServletResponse response)
         throws ServletException, IOException {
 
+        response.setCharacterEncoding("UTF-8");
         Properties parameters = ParsingUtilities.parseUrlParameters(request);
         String subCommand = parameters.getProperty("subCommand");
         if ("list-documents".equals(subCommand)) {

File: extensions/freebase/src/com/google/refine/freebase/util/FreebaseUtils.java
Patch:
@@ -75,7 +75,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.api.client.http.HttpTransport;
 import com.google.api.client.http.javanet.NetHttpTransport;
 import com.google.api.client.json.JsonFactory;
-import com.google.api.client.json.jackson.JacksonFactory;
+import com.google.api.client.json.jackson2.JacksonFactory;
 import com.google.api.services.freebase.Freebase;
 import com.google.api.services.freebase.FreebaseRequestInitializer;
 

File: extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java
Patch:
@@ -107,7 +107,7 @@ private void formatCsv(List<CellData> cells, StringBuffer sb) {
             }
             sb.append("\"");
             if (cellData != null && cellData.text != null) {
-                sb.append(cellData.text.replaceAll("\"", "\\\\\""));
+                sb.append(cellData.text.replaceAll("\"", "\"\""));
             }
             sb.append("\"");
         }

File: extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java
Patch:
@@ -165,7 +165,7 @@ private List<List<Object>> getRowsOfCells(int startRow) throws IOException {
                         List<Object> row = rows.get(i);
                         List<Object> rowOfCells = new ArrayList<Object>(row.size());
                         for (int j = 0; j < row.size() && j < columns.size(); j++) {
-                            String text = (String)row.get(j);
+                            String text = String.valueOf(row.get(j));
                             if (text.isEmpty()) {
                                 rowOfCells.add(null);
                             } else {

File: main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java
Patch:
@@ -167,7 +167,7 @@ protected List<TypeGroup> guessTypes(Project project, Column column, String serv
             URL url = new URL(serviceUrl);
             HttpURLConnection connection = (HttpURLConnection) url.openConnection();
             {
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                 connection.setConnectTimeout(30000);
                 connection.setDoOutput(true);
                 

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -335,7 +335,7 @@ public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
             URL url = new URL(service);
             HttpURLConnection connection = (HttpURLConnection) url.openConnection();
             {
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                 connection.setConnectTimeout(30000);
                 connection.setDoOutput(true);
                 

File: main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java
Patch:
@@ -167,7 +167,7 @@ protected List<TypeGroup> guessTypes(Project project, Column column, String serv
             URL url = new URL(serviceUrl);
             HttpURLConnection connection = (HttpURLConnection) url.openConnection();
             {
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                 connection.setConnectTimeout(30000);
                 connection.setDoOutput(true);
                 

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -335,7 +335,7 @@ public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
             URL url = new URL(service);
             HttpURLConnection connection = (HttpURLConnection) url.openConnection();
             {
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                 connection.setConnectTimeout(30000);
                 connection.setDoOutput(true);
                 

File: main/src/com/google/refine/model/changes/MassChange.java
Patch:
@@ -70,8 +70,8 @@ public void apply(Project project) {
     @Override
     public void revert(Project project) {
         synchronized (project) {
-            for (Change change : _changes) {
-                change.revert(project);
+            for (int i = _changes.size() - 1; i >= 0; i--){
+                _changes.get(i).revert(project);
             }
             
             if (_updateRowContextDependencies) {

File: main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java
Patch:
@@ -291,7 +291,7 @@ CellAtRow fetch(CellAtRow urlData) {
                                 urlData.row,
                                 new Cell(
                                         ParsingUtilities.inputStreamToString(
-                                                is, encoding != null ? encoding : "UTF-8"),
+                                                is, (encoding == null) || ( encoding.equalsIgnoreCase("\"UTF-8\"")) ? "UTF-8" : encoding),
                                                 null));
 
                     } finally {

File: main/src/com/google/refine/grel/ast/FunctionCallExpr.java
Patch:
@@ -68,7 +68,7 @@ public Object evaluate(Properties bindings) {
         try {
             return _function.call(bindings, args);
         } catch (Exception e) {
-            return new EvalError(e.toString());
+            return new EvalError(e);
         }
     }
 

File: main/src/com/google/refine/importing/ImportingJob.java
Patch:
@@ -76,6 +76,8 @@ public ImportingJob(long id, File dir) {
         JSONUtilities.safePut(cfg, "hasData", false);
         this.config = cfg;
         
+        lastTouched = System.currentTimeMillis();
+        
         dir.mkdirs();
     }
     

File: main/src/com/google/refine/exporters/XlsExporter.java
Patch:
@@ -102,6 +102,7 @@ public void addRow(List<CellData> cells, boolean isHeader) {
                     Cell c = r.createCell(i);
                     if (i == 255 && cells.size() > 256) {
                         c.setCellValue("ERROR: TOO MANY COLUMNS");
+                        break;
                     } else {
                         CellData cellData = cells.get(i);
                         

File: main/src/com/google/refine/importing/ImportingManager.java
Patch:
@@ -110,7 +110,7 @@ private Format(
     static private ScheduledExecutorService service;
 
     final static private long TIMER_PERIOD = 10; // 10 minutes
-    final static private long STALE_PERIOD = 60; // 60 minutes
+    final static private long STALE_PERIOD = 60 * 60 * 1000; // 60 minutes in milliseconds
     
     static private class CleaningTimerTask implements Runnable {
         @Override

File: main/src/com/google/refine/exporters/XlsExporter.java
Patch:
@@ -102,6 +102,7 @@ public void addRow(List<CellData> cells, boolean isHeader) {
                     Cell c = r.createCell(i);
                     if (i == 255 && cells.size() > 256) {
                         c.setCellValue("ERROR: TOO MANY COLUMNS");
+                        break;
                     } else {
                         CellData cellData = cells.get(i);
                         

File: main/src/com/google/refine/importing/ImportingManager.java
Patch:
@@ -110,7 +110,7 @@ private Format(
     static private ScheduledExecutorService service;
 
     final static private long TIMER_PERIOD = 10; // 10 minutes
-    final static private long STALE_PERIOD = 60; // 60 minutes
+    final static private long STALE_PERIOD = 60 * 60 * 1000; // 60 minutes in milliseconds
     
     static private class CleaningTimerTask implements Runnable {
         @Override

File: main/src/com/google/refine/expr/functions/ToString.java
Patch:
@@ -63,12 +63,12 @@ public Object call(Properties bindings, Object[] args) {
             } else if (args.length == 1) {
                 if (o1 instanceof String) {
                     return (String) o1;
-                } else if (o1 != null) {
+                } else {
                     return StringUtils.toString(o1);
                 } 
             }
         }
-        return new EvalError("ToString accepts an object an optional second argument containing a date format string");
+        return new EvalError("ToString accepts an object and an optional second argument containing a date format string");
     }
 
     

File: main/src/com/google/refine/util/StringUtils.java
Patch:
@@ -16,6 +16,8 @@ public static String toString(Object o) {
         if (o instanceof Calendar || o instanceof Date) {
             DateFormat formatter = DateFormat.getDateInstance();
             return formatter.format(o instanceof Date ? ((Date) o) : ((Calendar) o).getTime());
+        } else if (o == null) {
+            return "null";
         } else {
             return o.toString();
         }

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -110,7 +110,8 @@ static public ReconConfig reconstruct(JSONObject obj) throws Exception {
         
         JSONObject t = obj.has("type") && !obj.isNull("type") ? obj.getJSONObject("type") : null;
         
-        int limit = obj.has("limit") ? obj.getInt("limit") : 0;
+        String limitString = obj.has("limit") && !obj.isNull("limit") ? obj.getString("limit") : "";
+        int limit = "".equals(limitString) ? 0 : Integer.parseInt(limitString); 
         
         return new StandardReconConfig(
             obj.getString("service"),

File: extensions/freebase/src/com/google/refine/freebase/util/FreebaseUtils.java
Patch:
@@ -430,6 +430,9 @@ static String queryToMimeBodyPart(String query_name,
 
     /**
      * This RPC call works for the Reconcile API, but MQLread is not supported over JSONRPC
+     * 
+     * NOTE: JSONRPC has been deprecated and replaced by HTTP Batch (which also
+     * doesn't support MQLread, so perhaps we should just remove this))
      */
     @SuppressWarnings("unused")
     static private JSONObject mqlreadRpc(String query) throws JSONException, UnsupportedEncodingException, IOException {

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -46,7 +46,7 @@ public JSONObject createParserUIInitializationData(
 
             JSONUtilities.safePut(options, "headerLines", 0);
             JSONUtilities.safePut(options, "columnWidths", columnWidths);
-            JSONUtilities.safePut(options, "guessCellValueTypes", true);
+            JSONUtilities.safePut(options, "guessCellValueTypes", false);
         }
         return options;
     }

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -29,7 +29,7 @@ public JSONObject createParserUIInitializationData(
         
         JSONUtilities.safePut(options, "linesPerRow", 1);
         JSONUtilities.safePut(options, "headerLines", 0);
-        JSONUtilities.safePut(options, "guessCellValueTypes", true);
+        JSONUtilities.safePut(options, "guessCellValueTypes", false);
         
         return options;
     }

File: main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java
Patch:
@@ -183,7 +183,7 @@ private static File createSpreadsheet(boolean xml) {
 
         File file = null;
         try {
-            file = File.createTempFile("oepnrefine-importer-test", xml ? ".xlsx" : ".xls");
+            file = File.createTempFile("openrefine-importer-test", xml ? ".xlsx" : ".xls");
             file.deleteOnExit();
             OutputStream outputStream = new FileOutputStream(file);
             wb.write(outputStream);

File: main/src/com/google/refine/expr/functions/ToDate.java
Patch:
@@ -40,7 +40,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.GregorianCalendar;
 import java.util.Locale;
 import java.util.Properties;
-import java.util.Locale.Category;
 
 import org.apache.commons.lang.StringUtils;
 import org.json.JSONException;
@@ -103,7 +102,7 @@ public Object call(Properties bindings, Object[] args) {
         }
 
         // "o, format1, format2 (optional), ..."
-        Locale locale = Locale.getDefault(Category.FORMAT);
+        Locale locale = Locale.getDefault();
         if (args.length>=2) {
             for (int i=1;i<args.length;i++) {
                 if (!(args[i] instanceof String)) {

File: main/src/com/google/refine/model/Project.java
Patch:
@@ -194,6 +194,7 @@ static private Project loadFromReader(
     ) throws Exception {
         long start = System.currentTimeMillis();
         
+        // version of Refine which wrote the file
         /* String version = */ reader.readLine();
         
         Project project = new Project(id);

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -101,7 +101,7 @@ public void parseOneFile(
         final CSVParser parser = new CSVParser(
             sep.toCharArray()[0],//HACK changing string to char - won't work for multi-char separators.
             CSVParser.DEFAULT_QUOTE_CHARACTER,
-            (char) 127, // we don't want escape processing try DEL as a rare character until we can turn it off
+            (char) 0, // we don't want escape processing
             strictQuotes,
             CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,
             !processQuotes);

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -217,7 +217,7 @@ protected void saveMetadata(ProjectMetadata metadata, long projectId) throws Exc
     }
 
     @Override
-    protected void saveProject(Project project){
+    protected void saveProject(Project project) throws IOException{
         ProjectUtilities.save(project);
     }
 

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -46,7 +46,7 @@ public JSONObject createParserUIInitializationData(
 
             JSONUtilities.safePut(options, "headerLines", 0);
             JSONUtilities.safePut(options, "columnWidths", columnWidths);
-            JSONUtilities.safePut(options, "guessCellValueTypes", true);
+            JSONUtilities.safePut(options, "guessCellValueTypes", false);
         }
         return options;
     }

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -29,7 +29,7 @@ public JSONObject createParserUIInitializationData(
         
         JSONUtilities.safePut(options, "linesPerRow", 1);
         JSONUtilities.safePut(options, "headerLines", 0);
-        JSONUtilities.safePut(options, "guessCellValueTypes", true);
+        JSONUtilities.safePut(options, "guessCellValueTypes", false);
         
         return options;
     }

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -73,7 +73,7 @@ public JSONObject createParserUIInitializationData(ImportingJob job,
         String separator = guessSeparator(job, fileRecords);
         JSONUtilities.safePut(options, "separator", separator != null ? separator : "\\t");
         
-        JSONUtilities.safePut(options, "guessCellValueTypes", true);
+        JSONUtilities.safePut(options, "guessCellValueTypes", false);
         JSONUtilities.safePut(options, "processQuotes", true);
 
         return options;

File: main/src/com/google/refine/importing/ImportingJob.java
Patch:
@@ -97,9 +97,9 @@ public void setError(List<Exception> exceptions) {
         }
     }
     
-    public void setProjectID(long id2) {
+    public void setProjectID(long projectID) {
         synchronized (config) {
-            JSONUtilities.safePut(config, "projectID", project.id);
+            JSONUtilities.safePut(config, "projectID", projectID);
         }
     }
 

File: main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java
Patch:
@@ -183,7 +183,7 @@ private static File createSpreadsheet(boolean xml) {
 
         File file = null;
         try {
-            file = File.createTempFile("oepnrefine-importer-test", xml ? ".xlsx" : ".xls");
+            file = File.createTempFile("openrefine-importer-test", xml ? ".xlsx" : ".xls");
             file.deleteOnExit();
             OutputStream outputStream = new FileOutputStream(file);
             wb.write(outputStream);

File: main/src/com/google/refine/expr/functions/booleans/Not.java
Patch:
@@ -46,7 +46,7 @@ public class Not implements Function {
 
     @Override
     public Object call(Properties bindings, Object[] args) {
-        if (args.length == 1) {
+        if (args.length == 1 && args[0] instanceof Boolean) {
             return !objectToBoolean(args[0]);
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a boolean");

File: main/src/com/google/refine/sorting/StringCriterion.java
Patch:
@@ -71,8 +71,8 @@ public KeyMaker createKeyMaker() {
         return new KeyMaker() {
             @Override
             protected Object makeKey(Object value) {
-                return (ExpressionUtils.isNonBlankData(value) && !(value instanceof String)) ?
-                        collator.getCollationKey(value.toString()) : value;
+                return collator.getCollationKey((ExpressionUtils.isNonBlankData(value) 
+                        && !(value instanceof String)) ? value.toString() : (String) value);
             }
 
             @Override

File: main/src/com/google/refine/browsing/util/ExpressionNominalValueGrouper.java
Patch:
@@ -50,6 +50,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Project;
 import com.google.refine.model.Record;
 import com.google.refine.model.Row;
+import com.google.refine.util.StringUtils;
 
 /**
  * Visit matched rows or records and group them into facet choices based on the values computed
@@ -174,7 +175,7 @@ protected void processValue(Object value, int index) {
         if (ExpressionUtils.isError(value)) {
             hasError = true;
         } else if (ExpressionUtils.isNonBlankData(value)) {
-            String valueString = value.toString();
+            String valueString = StringUtils.toString(value);
             IndexedNominalFacetChoice facetChoice = choices.get(valueString);
 
             if (facetChoice != null) {
@@ -236,7 +237,7 @@ public Integer getChoiceValueCount(Object choiceValue) {
         if (ExpressionUtils.isError(choiceValue)) {
             return errorCount;
         } else if (ExpressionUtils.isNonBlankData(choiceValue)) {
-            IndexedNominalFacetChoice choice = choices.get(choiceValue);
+            IndexedNominalFacetChoice choice = choices.get(StringUtils.toString(choiceValue));
             return choice != null ? choice.count : 0;
         } else {
             return blankCount;

File: main/src/com/google/refine/expr/functions/strings/Escape.java
Patch:
@@ -42,9 +42,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONWriter;
 
 import com.google.refine.expr.EvalError;
-import com.google.refine.expr.functions.ToString;
 import com.google.refine.grel.ControlFunctionRegistry;
 import com.google.refine.grel.Function;
+import com.google.refine.util.StringUtils;
 
 public class Escape implements Function {
 
@@ -60,8 +60,7 @@ public Object call(Properties bindings, Object[] args) {
                 s = "";
             } else {
                 // Use our own ToString so that formatting is consistent
-                ToString toString = new ToString();
-                s = toString.call(bindings,new Object[] {o1});
+                s = StringUtils.toString(o1);
             }
             if (o2 instanceof String) {
                 String mode = ((String) o2).toLowerCase();

File: main/src/com/google/refine/expr/functions/booleans/Xor.java
Patch:
@@ -41,7 +41,7 @@ public class Xor implements Function {
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 2 && 
                 args[0] != null && args[0] instanceof Boolean && 
-                args[1] != null && args[0] instanceof Boolean) {
+                args[1] != null && args[1] instanceof Boolean) {
             boolean o1 = ((Boolean) args[0]).booleanValue();
             boolean o2 = ((Boolean) args[1]).booleanValue();
             return o1 != o2;

File: main/src/com/google/refine/sorting/StringCriterion.java
Patch:
@@ -33,6 +33,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 package com.google.refine.sorting;
 
+import java.text.CollationKey;
 import java.text.Collator;
 
 import org.json.JSONException;
@@ -71,12 +72,12 @@ public KeyMaker createKeyMaker() {
             @Override
             protected Object makeKey(Object value) {
                 return (ExpressionUtils.isNonBlankData(value) && !(value instanceof String)) ?
-                        value.toString() : value;
+                        collator.getCollationKey(value.toString()) : value;
             }
 
             @Override
             public int compareKeys(Object key1, Object key2) {
-                return collator.compare(key1, key2);
+                return ((CollationKey)key1).compareTo((CollationKey)key2);
             }
         };
     }

File: main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesTests.java
Patch:
@@ -35,7 +35,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
@@ -197,7 +196,7 @@ public void detectRecordElementRegressionJsonTest(){
         loadSampleJson();
 
         String[] path = XmlImportUtilitiesStub.detectRecordElement(
-                new JSONTreeReader(new InputStreamReader(inputStream)));
+                new JSONTreeReader(inputStream));
         Assert.assertNotNull(path);
         Assert.assertEquals(path.length, 2);
         Assert.assertEquals(path[0], JsonImporter.ANONYMOUS);
@@ -455,7 +454,7 @@ public TreeReader createXmlParser(){
         }
     }
     public TreeReader createJsonParser(){
-        parser = new JSONTreeReader(new InputStreamReader(inputStream));
+        parser = new JSONTreeReader(inputStream);
         return parser;
     }
 }

File: broker/core/src/com/google/refine/broker/RefineBroker.java
Patch:
@@ -92,7 +92,8 @@ public abstract class RefineBroker extends ButterflyModuleImpl {
     
     static final protected Logger logger = LoggerFactory.getLogger("refine.broker");
     
-    static final protected String USER_INFO_URL = "http://www.freebase.com/api/service/user_info";
+    // TODO: This API is deprecated.
+    static final protected String USER_INFO_URL = "http://api.freebase.com/api/service/user_info";
     static final protected String DELEGATED_OAUTH_HEADER = "X-Freebase-Credentials";
     static final protected String OAUTH_HEADER = "Authorization";
 

File: main/src/com/google/refine/importers/LineBasedFormatGuesser.java
Patch:
@@ -13,7 +13,7 @@ public String guess(File file, String encoding, String seedFormat) {
             return "text/line-based/*sv";
         }
         int[] widths = FixedWidthImporter.guessColumnWidths(file, encoding);
-        if (widths != null) {
+        if (widths != null && widths.length > 0) {
             return "text/line-based/fixed-width";
         }
         return null;

File: main/src/com/google/refine/importing/ImportingManager.java
Patch:
@@ -270,7 +270,9 @@ static public String getFormatFromMimeType(String mimeType) {
     
     static public String getFormat(String fileName, String mimeType) {
         String fileNameFormat = getFormatFromFileName(fileName);
-        mimeType = mimeType.split(";")[0];
+        if (mimeType != null) {
+            mimeType = mimeType.split(";")[0];
+        }
         String mimeTypeFormat = mimeType == null ? null : getFormatFromMimeType(mimeType);
         if (mimeTypeFormat == null) {
             return fileNameFormat;

File: extensions/jython/src/com/google/refine/jython/JythonEvaluable.java
Patch:
@@ -128,7 +128,7 @@ public Object evaluate(Properties bindings) {
 
             return unwrap(result);
         } catch (PyException e) {
-            return new EvalError(e.getMessage());
+            return new EvalError(e.toString());
         }
     }
     

File: main/src/com/google/refine/importing/ImportingManager.java
Patch:
@@ -270,6 +270,7 @@ static public String getFormatFromMimeType(String mimeType) {
     
     static public String getFormat(String fileName, String mimeType) {
         String fileNameFormat = getFormatFromFileName(fileName);
+        mimeType = mimeType.split(";")[0];
         String mimeTypeFormat = mimeType == null ? null : getFormatFromMimeType(mimeType);
         if (mimeTypeFormat == null) {
             return fileNameFormat;

File: main/src/com/google/refine/browsing/facets/TimeRangeFacet.java
Patch:
@@ -157,7 +157,7 @@ public RowFilter getRowFilter(Project project) {
                 
                 @Override
                 protected boolean checkValue(long t) {
-                    return t >= _from && t < _to;
+                    return t >= _from && t <= _to;
                 };
             };
         } else {

File: extensions/freebase/src/com/google/refine/freebase/protograph/transpose/SchemaHelper.java
Patch:
@@ -13,7 +13,7 @@
 import com.google.refine.util.ParsingUtilities;
 
 public class SchemaHelper {
-    static private final String helperURL = "http://2.refine-helper.stefanomazzocchi.user.dev.freebaseapps.com/";
+    static private final String helperURL = "http://openrefine-helper.freebaseapps.com/";
     
     static private class PropertyInfo {
         String fromTypeID;

File: main/src/com/google/refine/model/Recon.java
Patch:
@@ -253,7 +253,7 @@ public class Features implements HasFields {
         @Override
         public Object getField(String name, Properties bindings) {
             int index = s_featureMap.containsKey(name) ? s_featureMap.get(name) : -1;
-            return (index > 0 && index < features.length) ? features[index] : null;
+            return (index >= 0 && index < features.length) ? features[index] : null;
         }
 
         @Override

File: extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java
Patch:
@@ -46,7 +46,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.gdata.client.GoogleService;
 import com.google.gdata.client.docs.DocsService;
 import com.google.gdata.client.spreadsheet.CellQuery;
 import com.google.gdata.client.spreadsheet.SpreadsheetService;
@@ -292,8 +291,9 @@ public void addRow(List<CellData> cells, boolean isHeader) {
     static private String uploadFusionTable(
             Project project, final Engine engine, final Properties params,
             String token, String name, List<Exception> exceptions) {
-        GoogleService service = FusionTableHandler.getFusionTablesGoogleService(token);
-        FusionTableSerializer serializer = new FusionTableSerializer(service, name, exceptions);
+        
+        FusionTableSerializer serializer = new FusionTableSerializer(
+                FusionTableHandler.getFusionTablesService(token), name, exceptions);
         
         CustomizableTabularExporterUtilities.exportRows(
                 project, engine, params, serializer);

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -303,6 +303,7 @@ static protected void respondJSON(
 
         response.setCharacterEncoding("UTF-8");
         response.setHeader("Content-Type", "application/json");
+        response.setHeader("Cache-Control", "no-cache");
 
         Writer w = response.getWriter();
         JSONWriter writer = new JSONWriter(w);

File: main/src/com/google/refine/commands/project/GetModelsCommand.java
Patch:
@@ -85,6 +85,7 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
         try {
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");
+            response.setHeader("Cache-Control", "no-cache");
             
             Properties options = new Properties();
             JSONWriter writer = new JSONWriter(response.getWriter());

File: main/src/com/google/refine/commands/Command.java
Patch:
@@ -303,6 +303,7 @@ static protected void respondJSON(
 
         response.setCharacterEncoding("UTF-8");
         response.setHeader("Content-Type", "application/json");
+        response.setHeader("Cache-Control", "no-cache");
 
         Writer w = response.getWriter();
         JSONWriter writer = new JSONWriter(w);

File: main/src/com/google/refine/commands/project/GetModelsCommand.java
Patch:
@@ -85,6 +85,7 @@ protected void internalRespond(HttpServletRequest request, HttpServletResponse r
         try {
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");
+            response.setHeader("Cache-Control", "no-cache");
             
             Properties options = new Properties();
             JSONWriter writer = new JSONWriter(response.getWriter());

File: broker/core/src/com/google/refine/broker/RefineBroker.java
Patch:
@@ -67,9 +67,9 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import edu.mit.simile.butterfly.ButterflyModuleImpl;
 
 /**
- * This class contains all the code shared by various implementations of a Google Refine Broker.
+ * This class contains all the code shared by various implementations of a OpenRefine Broker.
  * 
- * A broker is a server used by multiple Google Refine installations to enable collaborative
+ * A broker is a server used by multiple OpenRefine installations to enable collaborative
  * development over the same project.
  * 
  * Broker implementations differ in how they store their state but all of them are required
@@ -228,7 +228,7 @@ protected String getUserId(HttpServletRequest request) throws Exception {
 
         HttpPost httpRequest = new HttpPost(USER_INFO_URL);
         httpRequest.setHeader(OAUTH_HEADER, oauth);
-        httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Google Refine Broker");
+        httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "OpenRefine Broker");
         httpRequest.setEntity(entity);
                 
         ResponseHandler<String> responseHandler = new BasicResponseHandler();

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataExtension.java
Patch:
@@ -61,7 +61,7 @@
  * @license New BSD http://www.opensource.org/licenses/bsd-license.php
  */
 abstract public class GDataExtension {
-    static final String SERVICE_APP_NAME = "Google-Refine-GData-Extension";
+    static final String SERVICE_APP_NAME = "OpenRefine-GData-Extension";
 
     static public String getAuthorizationUrl(ButterflyModule module, HttpServletRequest request)
             throws MalformedURLException {

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -54,7 +54,7 @@
 import com.google.refine.util.JSONUtilities;
 
 /**
- * Google Refine parser for Google Spreadsheets.
+ * OpenRefine parser for Google Spreadsheets.
  * 
  * @author Tom Morris <tfmorris@gmail.com>
  * @copyright 2010 Thomas F. Morris

File: extensions/jython/src/com/google/refine/jython/JythonEvaluable.java
Patch:
@@ -73,7 +73,7 @@ public Evaluable parse(String s) throws ParsingException {
     private static PythonInterpreter _engine; 
     
     // FIXME(SM): this initialization logic depends on the fact that the JVM's 
-    // current working directory is the root of the Google Refine distributions
+    // current working directory is the root of the OpenRefine distributions
     // or the development checkouts. While this works in practice, it would
     // be preferable to have a more reliable address space, but since we
     // don't have access to the servlet context from this class this is

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -135,9 +135,9 @@ public void registerProject(Project project, ProjectMetadata projectMetadata) {
      */
     protected abstract Project loadProject(long id);
 
-    //------------Import and Export from Google Refine archive-----------------
+    //------------Import and Export from Refine archive-----------------
     /**
-     * Import project from a Google Refine archive
+     * Import project from a Refine archive
      * @param projectID
      * @param inputStream
      * @param gziped
@@ -146,7 +146,7 @@ public void registerProject(Project project, ProjectMetadata projectMetadata) {
     public abstract void importProject(long projectID, InputStream inputStream, boolean gziped) throws IOException;
 
     /**
-     * Export project to a Google Refine archive
+     * Export project to a Refine archive
      * @param projectId
      * @param tos
      * @throws IOException

File: main/src/com/google/refine/commands/OpenWorkspaceDirCommand.java
Patch:
@@ -52,7 +52,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         String serverName = request.getServerName();
         
         if (!"127.0.0.1".equals(serverName) && !"localhost".equals(serverName)) {
-            respond(response, "{ \"code\" : \"error\", \"message\" : \"Workspace directory can only be opened on the local machine where Google Refine is run.\" }");
+            respond(response, "{ \"code\" : \"error\", \"message\" : \"Workspace directory can only be opened on the local machine where OpenRefine is run.\" }");
         } else if (ProjectManager.singleton instanceof FileProjectManager) {
             File dir = ((FileProjectManager) ProjectManager.singleton).getWorkspaceDir();
 

File: main/src/com/google/refine/commands/auth/AuthorizeCommand.java
Patch:
@@ -160,7 +160,7 @@ private String getBaseURL(HttpServletRequest request, Provider provider) {
                     throw new RuntimeException("referrer '" + referrer + "' can't be parsed as a URL");
                 }
             } else {
-                throw new RuntimeException("neither the 'host' nor 'referer' headers were present in the HTTP response, I can't determine what URL Google Refine is listening to.");
+                throw new RuntimeException("neither the 'host' nor 'referer' headers were present in the HTTP response, I can't determine what URL OpenRefine is listening to.");
             }
         }
         return "http://" + host + "/command/core/authorize/" + provider.getHost();

File: server/src/com/google/refine/Refine.java
Patch:
@@ -91,7 +91,7 @@ public static void main(String[] args) throws Exception {
         // tell macosx to keep the menu associated with the screen and what the app title is
         System.setProperty("apple.laf.useScreenMenuBar", "true");  
         System.setProperty("com.apple.eawt.CocoaComponent.CompatibilityMode", "false"); 
-        System.setProperty("com.apple.mrj.application.apple.menu.about.name", "Google Refine");
+        System.setProperty("com.apple.mrj.application.apple.menu.about.name", "OpenRefine");
         
         // tell the signpost library to log
         //System.setProperty("debug","true");
@@ -351,6 +351,7 @@ static private String getDataDir() {
             // on macosx, use "~/Library/Application Support"
             String home = System.getProperty("user.home");
             
+            // TODO: Update needed (again)
             String data_home = (home != null) ? home + "/Library/Application Support/Google/Refine" : ".google-refine";
             dataDir = new File(data_home);
             

File: main/src/com/google/refine/RefineServlet.java
Patch:
@@ -71,6 +71,7 @@ public class RefineServlet extends Butterfly {
     static final long serialVersionUID = 2386057901503517403L;
 
     static private final String JAVAX_SERVLET_CONTEXT_TEMPDIR = "javax.servlet.context.tempdir";
+    private File tempDir = null;
 
     static private RefineServlet s_singleton;
     static private File s_dataDir;
@@ -221,11 +222,9 @@ protected String getCommandKey(HttpServletRequest request) {
         return path;
     }
 
-    private File tempDir = null;
-
     public File getTempDir() {
         if (tempDir == null) {
-            File tempDir = (File) _config.getServletContext().getAttribute(JAVAX_SERVLET_CONTEXT_TEMPDIR);
+            tempDir = (File) _config.getServletContext().getAttribute(JAVAX_SERVLET_CONTEXT_TEMPDIR);
             if (tempDir == null) {
                 throw new RuntimeException("This app server doesn't support temp directories");
             }

File: main/src/com/google/refine/commands/auth/AuthorizeCommand.java
Patch:
@@ -77,7 +77,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro
                 Credentials request_credentials = Credentials.getCredentials(request, provider, Credentials.Type.REQUEST);
 
                 OAuthConsumer consumer = OAuthUtilities.getConsumer(request_credentials, provider);
-                OAuthProvider pp = OAuthUtilities.getOAuthProvider(provider);
+                OAuthProvider pp = provider.getProvider();
                 
                 if (request_credentials == null) {
                     // no credentials were found, so let's start the dance

File: main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java
Patch:
@@ -151,7 +151,7 @@ protected void postProcessProject(
         Project project, ImportColumnGroup rootColumnGroup, List<Exception> exceptions) {
         
         XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);
-        project.columnModel.update();
+        project.update();
         
         for (Exception e : exceptions) {
             e.printStackTrace();

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -103,7 +103,7 @@ static public void readTable(
             }
         }
         
-        boolean guessCellValueTypes = JSONUtilities.getBoolean(options, "guessCellValueTypes", true);
+        boolean guessCellValueTypes = JSONUtilities.getBoolean(options, "guessCellValueTypes", false);
         
         boolean storeBlankRows = JSONUtilities.getBoolean(options, "storeBlankRows", true);
         boolean storeBlankCellsAsNulls = JSONUtilities.getBoolean(options, "storeBlankCellsAsNulls", true);
@@ -172,7 +172,7 @@ static public void readTable(
                                 project, columnNames, c, hasOurOwnColumnNames);
                             
                             Object value = cells.get(c);
-                            if (value != null && value instanceof Cell) {
+                            if (value instanceof Cell) {
                                 row.setCell(column.getCellIndex(), (Cell) value);
                                 rowHasData = true;
                             } else if (ExpressionUtils.isNonBlankData(value)) {

File: main/src/com/google/refine/model/Project.java
Patch:
@@ -106,6 +106,7 @@ public void dispose() {
                 logger.warn("Error signaling overlay model before disposing", e);
             }
         }
+        ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProject(this.id);
     }
 
     public Date getLastSave(){

File: main/src/com/google/refine/model/changes/ColumnRenameChange.java
Patch:
@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.io.Writer;
 import java.util.Properties;
 
+import com.google.refine.ProjectManager;
 import com.google.refine.history.Change;
 import com.google.refine.model.Project;
 import com.google.refine.util.Pool;
@@ -54,6 +55,7 @@ public ColumnRenameChange(String oldColumnName, String newColumnName) {
     @Override
     public void apply(Project project) {
         synchronized (project) {
+            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _oldColumnName);
             project.columnModel.getColumnByName(_oldColumnName).setName(_newColumnName);
             project.columnModel.update();
         }
@@ -62,6 +64,7 @@ public void apply(Project project) {
     @Override
     public void revert(Project project) {
         synchronized (project) {
+            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _newColumnName);
             project.columnModel.getColumnByName(_newColumnName).setName(_oldColumnName);
             project.columnModel.update();
         }

File: main/src/com/google/refine/model/changes/ColumnSplitChange.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
+import com.google.refine.ProjectManager;
 import com.google.refine.history.Change;
 import com.google.refine.model.Cell;
 import com.google.refine.model.Column;
@@ -126,6 +127,7 @@ public void apply(Project project) {
                     project.columnModel.allocateNewCellIndex();
                 }
                 
+                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _columnName);
                 _column = project.columnModel.getColumnByName(_columnName);
                 _columnIndex = project.columnModel.getColumnIndexByName(_columnName);
                 
@@ -240,6 +242,7 @@ public void revert(Project project) {
             
             for (int i = 0; i < _columnNames.size(); i++) {
                 project.columnModel.columns.remove(_columnIndex + 1);
+                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _columnNames.get(i));
             }
             
             project.columnModel.columnGroups.clear();

File: main/src/com/google/refine/model/changes/MassCellChange.java
Patch:
@@ -39,6 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Properties;
 
+import com.google.refine.ProjectManager;
 import com.google.refine.history.Change;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
@@ -93,6 +94,7 @@ public void apply(Project project) {
             if (_commonColumnName != null) {
                 Column column = project.columnModel.getColumnByName(_commonColumnName);
                 column.clearPrecomputes();
+                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
             }
             
             if (_updateRowContextDependencies) {
@@ -113,6 +115,7 @@ public void revert(Project project) {
             if (_commonColumnName != null) {
                 Column column = project.columnModel.getColumnByName(_commonColumnName);
                 column.clearPrecomputes();
+                ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
             }
             
             if (_updateRowContextDependencies) {

File: main/src/com/google/refine/model/changes/ReconChange.java
Patch:
@@ -42,6 +42,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import java.util.List;
 import java.util.Properties;
 
+import com.google.refine.ProjectManager;
 import com.google.refine.history.Change;
 import com.google.refine.model.Column;
 import com.google.refine.model.Project;
@@ -108,6 +109,7 @@ public void apply(Project project) {
             column.setReconStats(_newReconStats);
             
             column.clearPrecomputes();
+            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
         }
     }
     
@@ -121,6 +123,7 @@ public void revert(Project project) {
             column.setReconStats(_oldReconStats);
             
             column.clearPrecomputes();
+            ProjectManager.singleton.getInterProjectModel().flushJoinsInvolvingProjectColumn(project.id, _commonColumnName);
         }
     }
     

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -38,7 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gdata.util.common.base.CharMatcher;
+import com.google.common.base.CharMatcher;
 
 import com.google.refine.expr.EvalError;
 import com.google.refine.grel.Function;

File: main/tests/server/src/com/google/refine/tests/expr/functions/strings/TrimTests.java
Patch:
@@ -84,7 +84,7 @@ private static Object invoke(String name,Object... args) {
     }
     
     @Test
-    public void testDiffInvalidParams() {        
+    public void testInvalidParams() {        
         Assert.assertTrue(invoke("trim") instanceof EvalError);
         Assert.assertTrue(invoke("trim", "one","two","three") instanceof EvalError);
         Assert.assertTrue(invoke("trim", Long.getLong("1")) instanceof EvalError);

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -40,6 +40,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.gdata.util.common.base.CharMatcher;
 
+import com.google.refine.expr.EvalError;
 import com.google.refine.grel.Function;
 
 public class Trim implements Function {
@@ -52,7 +53,7 @@ public Object call(Properties bindings, Object[] args) {
                 return CharMatcher.WHITESPACE.trimFrom((String) s1);
             }
         }
-        return null;
+        return new EvalError("Invalid parameters");
     }
     @Override
     public void write(JSONWriter writer, Properties options)

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -38,6 +38,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.google.gdata.util.common.base.CharMatcher;
+
 import com.google.refine.grel.Function;
 
 public class Trim implements Function {
@@ -47,7 +49,7 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length == 1) {
             Object s1 = args[0];
             if (s1 != null && s1 instanceof String) {
-                return ((String) s1).trim();
+                return CharMatcher.WHITESPACE.trimFrom((String) s1);
             }
         }
         return null;

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataExtension.java
Patch:
@@ -179,6 +179,7 @@ static public List<List<String>> parseFusionTablesResults(GDataRequest request)
                 }
             }
         }
+        scanner.close();
         if (row != null) {
             rows.add(row);
         }

File: server/src/com/google/refine/Refine.java
Patch:
@@ -113,7 +113,9 @@ public void init(String[] args) throws Exception {
         server.init(host,port);
 
         boolean headless = Configurations.getBoolean("refine.headless",false);
-        if (!headless) {
+        if (headless) {
+            System.setProperty("java.awt.headless", "true"); 
+        } else {
             try {
                 RefineClient client = new RefineClient();
                 client.init(host,port);

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -139,8 +139,8 @@ public boolean isCanceled() {
         bestFormat = ImportingUtilities.guessBetterFormat(job, bestFormat);
         
         JSONArray rankedFormats = new JSONArray();
-        JSONUtilities.safePut(config, "rankedFormats", rankedFormats);
         ImportingUtilities.rankFormats(job, bestFormat, rankedFormats);
+        JSONUtilities.safePut(config, "rankedFormats", rankedFormats);
         
         JSONUtilities.safePut(config, "state", "ready");
         JSONUtilities.safePut(config, "hasData", true);

File: main/src/com/google/refine/expr/functions/ToString.java
Patch:
@@ -47,7 +47,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 public class ToString implements Function {
 
     @Override
-    public Object call(Properties bindings, Object[] args) {
+    public String call(Properties bindings, Object[] args) {
         if (args.length >= 1) {
             Object o1 = args[0];
             if (o1 != null) {
@@ -64,7 +64,7 @@ public Object call(Properties bindings, Object[] args) {
                     }
                     return formatter.format(o1 instanceof Date ? ((Date) o1) : ((Calendar) o1).getTime());
                 } else {
-                    return (o1 instanceof String) ? o1 : o1.toString();
+                    return (o1 instanceof String) ? (String) o1 : o1.toString();
                 }
             }
         }

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -520,6 +520,8 @@ static public InputStream tryOpenAsArchive(File file, String mimeType) {
                 return new TarInputStream(new FileInputStream(file));
             } else if (fileName.endsWith(".zip")) {
                 return new ZipInputStream(new FileInputStream(file));
+            } else if (fileName.endsWith(".kmz")) {
+                return new ZipInputStream(new FileInputStream(file));
             }
         } catch (IOException e) {
         }

File: main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesTests.java
Patch:
@@ -49,6 +49,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.refine.importers.JsonImporter;
 import com.google.refine.importers.JsonImporter.JSONTreeReader;
 import com.google.refine.importers.XmlImporter.XmlParser;
 import com.google.refine.importers.tree.ImportColumn;
@@ -199,8 +200,8 @@ public void detectRecordElementRegressionJsonTest(){
                 new JSONTreeReader(new InputStreamReader(inputStream)));
         Assert.assertNotNull(path);
         Assert.assertEquals(path.length, 2);
-        Assert.assertEquals(path[0], "__anonymous__");
-        Assert.assertEquals(path[1], "__anonymous__");
+        Assert.assertEquals(path[0], JsonImporter.ANONYMOUS);
+        Assert.assertEquals(path[1], JsonImporter.ANONYMOUS);
     }
 
     @Test

File: main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java
Patch:
@@ -70,7 +70,7 @@ public class ExcelImporterTests extends ImporterTest {
     private static final double EPSILON = 0.0000001;
     private static final int SHEETS = 3;
     private static final int ROWS = 5;
-    private static final int COLUMNS = 7;
+    private static final int COLUMNS = 6;
     
     //private static final File xlsxFile = createSpreadsheet(true);
     private static final File xlsFile = createSpreadsheet(false);

File: main/src/com/google/refine/expr/functions/date/DatePart.java
Patch:
@@ -61,7 +61,7 @@ public Object call(Properties bindings, Object[] args) {
                 return getPart(c, part);
             }
         }
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a date, a number and a string");
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a date and a string");
     }
     
     static private String[] s_daysOfWeek = new String[] {

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -44,7 +44,6 @@ public JSONObject createParserUIInitializationData(
                 }
             }
 
-            JSONUtilities.safePut(options, "lineSeparator", "\\n");
             JSONUtilities.safePut(options, "headerLines", 0);
             JSONUtilities.safePut(options, "columnWidths", columnWidths);
             JSONUtilities.safePut(options, "guessCellValueTypes", true);
@@ -63,8 +62,6 @@ public void parseOneFile(
         JSONObject options,
         List<Exception> exceptions
     ) {
-//        String lineSeparator = JSONUtilities.getString(options, "lineSeparator", "\\n");
-//        lineSeparator = StringEscapeUtils.unescapeJava(lineSeparator);
         final int[] columnWidths = JSONUtilities.getIntArray(options, "columnWidths");
         
         List<Object> retrievedColumnNames = null;

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -27,7 +27,6 @@ public JSONObject createParserUIInitializationData(
             ImportingJob job, List<JSONObject> fileRecords, String format) {
         JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);
         
-        JSONUtilities.safePut(options, "lineSeparator", "\\n");
         JSONUtilities.safePut(options, "linesPerRow", 1);
         JSONUtilities.safePut(options, "headerLines", 0);
         JSONUtilities.safePut(options, "guessCellValueTypes", true);

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -44,7 +44,7 @@ public JSONObject createParserUIInitializationData(
                 }
             }
 
-            JSONUtilities.safePut(options, "lineSeparator", "\n");
+            JSONUtilities.safePut(options, "lineSeparator", "\\n");
             JSONUtilities.safePut(options, "headerLines", 0);
             JSONUtilities.safePut(options, "columnWidths", columnWidths);
             JSONUtilities.safePut(options, "guessCellValueTypes", true);
@@ -63,7 +63,8 @@ public void parseOneFile(
         JSONObject options,
         List<Exception> exceptions
     ) {
-        // String lineSeparator = JSONUtilities.getString(options, "lineSeparator", "\n");
+//        String lineSeparator = JSONUtilities.getString(options, "lineSeparator", "\\n");
+//        lineSeparator = StringEscapeUtils.unescapeJava(lineSeparator);
         final int[] columnWidths = JSONUtilities.getIntArray(options, "columnWidths");
         
         List<Object> retrievedColumnNames = null;

File: main/src/com/google/refine/importers/LineBasedImporter.java
Patch:
@@ -27,7 +27,7 @@ public JSONObject createParserUIInitializationData(
             ImportingJob job, List<JSONObject> fileRecords, String format) {
         JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);
         
-        JSONUtilities.safePut(options, "lineSeparator", "\n");
+        JSONUtilities.safePut(options, "lineSeparator", "\\n");
         JSONUtilities.safePut(options, "linesPerRow", 1);
         JSONUtilities.safePut(options, "headerLines", 0);
         JSONUtilities.safePut(options, "guessCellValueTypes", true);

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -92,7 +92,7 @@ public void parseOneFile(
     ) {
         // String lineSeparator = JSONUtilities.getString(options, "lineSeparator", "\n");
         String sep = JSONUtilities.getString(options, "separator", "\t");
-        if (sep == null) {
+        if (sep == null || "".equals(sep)) {
             sep = "\t";
         }
         boolean processQuotes = JSONUtilities.getBoolean(options, "processQuotes", true);

File: main/src/com/google/refine/importers/tree/ImportColumnGroup.java
Patch:
@@ -27,8 +27,8 @@ void tabulate() {
     
     @Override
     public String toString() {
-        return String.format("name=%s, columns={%s}, subgroups={{%s}}",
-                name,StringUtils.join(columns.keySet(), ','),
+        return String.format("name=%s, nextRowIndex=%d, columns={%s}, subgroups={{%s}}",
+                name,nextRowIndex,StringUtils.join(columns.keySet(), ','),
                 StringUtils.join(subgroups.keySet(),','));
     }
 }
\ No newline at end of file

File: main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesStub.java
Patch:
@@ -47,8 +47,8 @@ public List<String> detectRecordElementWrapper(TreeReader parser, String tag) th
         return super.detectRecordElement(parser, tag);
     }
 
-    public void ProcessSubRecordWrapper(Project project, TreeReader parser, ImportColumnGroup columnGroup, ImportRecord record) throws Exception{
-        super.processSubRecord(project, parser, columnGroup, record);
+    public void ProcessSubRecordWrapper(Project project, TreeReader parser, ImportColumnGroup columnGroup, ImportRecord record, int level) throws Exception{
+        super.processSubRecord(project, parser, columnGroup, record, level); 
     }
 
     public void findRecordWrapper(Project project, TreeReader parser, String[] recordPath, int pathIndex, ImportColumnGroup rootColumnGroup) throws Exception{

File: main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesTests.java
Patch:
@@ -370,7 +370,7 @@ public void processSubRecordTestXml(){
         ParserSkip();
 
         try {
-            SUT.ProcessSubRecordWrapper(project, parser, columnGroup, record);
+            SUT.ProcessSubRecordWrapper(project, parser, columnGroup, record,0);
         } catch (Exception e) {
             Assert.fail();
         }

File: main/src/com/google/refine/importing/ImportingUtilities.java
Patch:
@@ -635,7 +635,7 @@ static private String formatBytes(long bytes) {
     
     static public String getEncoding(JSONObject fileRecord) {
         String encoding = JSONUtilities.getString(fileRecord, "encoding", null);
-        if (encoding == null) {
+        if (encoding == null || encoding.isEmpty()) {
             encoding = JSONUtilities.getString(fileRecord, "declaredEncoding", null);
         }
         return encoding;
@@ -942,5 +942,7 @@ static public void setCreatingProjectProgress(ImportingJob job, String message,
         }
         JSONUtilities.safePut(progress, "message", message);
         JSONUtilities.safePut(progress, "percent", percent);
+        JSONUtilities.safePut(progress, "memory", Runtime.getRuntime().totalMemory() / 1000000);
+        JSONUtilities.safePut(progress, "maxmemory", Runtime.getRuntime().maxMemory() / 1000000);
     }
 }

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -223,8 +223,7 @@ static protected Serializable extractCell(org.apache.poi.ss.usermodel.Cell cell)
                 value = d;
             }
         } else {
-            // TODO: Why are we changing input value during import?
-            String text = cell.getStringCellValue().trim();
+            String text = cell.getStringCellValue();
             if (text.length() > 0) {
                 value = text;
             }

File: main/src/com/google/refine/browsing/facets/ScatterplotDrawingRowVisitor.java
Patch:
@@ -56,7 +56,6 @@ public class ScatterplotDrawingRowVisitor implements RowVisitor, RecordVisitor {
     int col_y;
     int dim_x;
     int dim_y;
-    int rotation;
 
     double l;
     double dot;
@@ -84,7 +83,6 @@ public ScatterplotDrawingRowVisitor(
         this.dot = dot;
         this.dim_x = dim_x;
         this.dim_y = dim_y;
-        this.rotation = rotation;
         
         l = size;
         r = ScatterplotFacet.createRotationMatrix(rotation, l);

File: main/src/com/google/refine/browsing/util/ExpressionTimeValueBinner.java
Patch:
@@ -170,7 +170,7 @@ protected void processValue(Object value) {
                 long t = ((Date) value).getTime();
                 hasTime = true;
                     
-                int bin = (int) Math.floor((t - _index.getMin()) / _index.getStep());
+                int bin = (int) Math.floor((double) (t - _index.getMin()) / (double) _index.getStep());
                 if (bin >= 0 && bin < bins.length) { // as a precaution
                     bins[bin]++;
                 }

File: main/src/com/google/refine/exporters/CsvExporter.java
Patch:
@@ -67,7 +67,7 @@ public CsvExporter(char separator) {
     public void export(Project project, Properties params, Engine engine, final Writer writer)
             throws IOException {
         
-        String optionsString = params == null ? null : params.getProperty("options");
+        String optionsString = (params == null) ? null : params.getProperty("options");
         JSONObject options = null;
         if (optionsString != null) {
             try {
@@ -115,8 +115,7 @@ public void addRow(List<CellData> cells, boolean isHeader) {
             }
         };
         
-        CustomizableTabularExporterUtilities.exportRows(
-                project, engine, params, serializer);
+        CustomizableTabularExporterUtilities.exportRows(project, engine, params, serializer);
         
         csvWriter.close();
     }

File: main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java
Patch:
@@ -70,7 +70,7 @@ static public void exportRows(
         Properties params,
         final TabularSerializer serializer) {
         
-        String optionsString = params.getProperty("options");
+        String optionsString = (params != null) ? params.getProperty("options") : null;
         JSONObject optionsTemp = null;
         if (optionsString != null) {
             try {

File: main/src/com/google/refine/expr/ExpressionUtils.java
Patch:
@@ -50,7 +50,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.model.Row;
 
 public class ExpressionUtils {
-    static protected Set<Binder> s_binders = new HashSet<Binder>();
+    
+    static final protected Set<Binder> s_binders = new HashSet<Binder>();
 
     static public void registerBinder(Binder binder) {
         s_binders.add(binder);

File: main/src/com/google/refine/expr/MetaParser.java
Patch:
@@ -44,6 +44,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.Parser;
 
 abstract public class MetaParser {
+
     static public class LanguageInfo {
         final public String                 name;
         final public LanguageSpecificParser parser;
@@ -56,10 +57,9 @@ static public class LanguageInfo {
         }
     }
     
-    static protected Map<String, LanguageInfo> s_languages;
+    static final protected Map<String, LanguageInfo> s_languages = new HashMap<String, LanguageInfo>();
+    
     static {
-        s_languages = new HashMap<String, LanguageInfo>();
-        
         registerLanguageParser("grel", "Google Refine Expression Language (GREL)", new LanguageSpecificParser() {
             
             @Override

File: main/src/com/google/refine/expr/functions/Get.java
Patch:
@@ -103,7 +103,7 @@ public Object call(Properties bindings, Object[] args) {
                                     return ExpressionUtils.toObjectList(v).get(start);
                                 }
                             } else {
-                                int end = (to != null) ? ((Number) to).intValue() : length;
+                                int end = ((Number) to).intValue();
                                             
                                 if (end < 0) {
                                     end = length + end;

File: main/src/com/google/refine/expr/functions/math/Combin.java
Patch:
@@ -56,10 +56,10 @@ public Object call(Properties bindings, Object[] args) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the second argument to be a number");
         }
 
-        return Combin.Combination(((Number) args[0]).intValue(), ((Number) args[1]).intValue());
+        return Combin.combination(((Number) args[0]).intValue(), ((Number) args[1]).intValue());
     }
 
-    public static int Combination(int n, int k){
+    public static int combination(int n, int k){
         if (k > n) {
             throw new IllegalArgumentException ("the number of elements, n, should be larger than the number of combinations, k");
         }

File: main/src/com/google/refine/expr/functions/math/Even.java
Patch:
@@ -47,12 +47,12 @@ public class Even implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
-            return Even.RoundUpToEven(((Number) args[0]).doubleValue());
+            return Even.roundUpToEven(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
     }
 
-    public static double RoundUpToEven(double d){
+    public static double roundUpToEven(double d){
         double temp = Math.ceil(d);
         return ((temp % 2) == 0) ? temp : temp+1;
     }

File: main/src/com/google/refine/expr/functions/math/FactN.java
Patch:
@@ -49,10 +49,10 @@ public Object call(Properties bindings, Object[] args) {
         if (args.length != 2) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects two numbers");
         }
-        if(args[0] == null || !(args[0] instanceof Number)) {
+        if (args[0] == null || !(args[0] instanceof Number)) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the first parameter to be a number");
         }
-        if(args[1] == null && !(args[1] instanceof Number)) {
+        if (args[1] == null || !(args[1] instanceof Number)) {
             return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects the second parameter to be a number");
         }
 

File: main/src/com/google/refine/expr/functions/math/Multinomial.java
Patch:
@@ -51,8 +51,8 @@ public Object call(Properties bindings, Object[] args) {
         }
         int sum = 0;
         int product = 1;
-        for(int i = 0; i < args.length; i++){
-            if(args[i] == null && !(args[i] instanceof Number)) {
+        for (int i = 0; i < args.length; i++){
+            if (args[i] == null || !(args[i] instanceof Number)) {
                 return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects parameter " + (i + 1) + " to be a number");
             }
             int num = ((Number) args[i]).intValue();

File: main/src/com/google/refine/expr/functions/math/Odd.java
Patch:
@@ -47,12 +47,12 @@ public class Odd implements Function {
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
-            return Odd.RoundUpToOdd(((Number) args[0]).doubleValue());
+            return Odd.roundUpToOdd(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
     }
 
-    public static double RoundUpToOdd(double d){
+    public static double roundUpToOdd(double d){
         double temp = Math.ceil(d);
         return ((temp % 2) == 0) ? temp + 1 : temp;
     }

File: main/src/com/google/refine/importers/TextFormatGuesser.java
Patch:
@@ -16,9 +16,9 @@ public class TextFormatGuesser implements FormatGuesser {
     public String guess(File file, String encoding, String seedFormat) {
         try {
             InputStream is = new FileInputStream(file);
+            Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);
+
             try {
-                Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);
-                
                 int totalBytes = 0;
                 int openBraces = 0;
                 int closeBraces = 0;
@@ -63,6 +63,7 @@ public String guess(File file, String encoding, String seedFormat) {
                 }
                 return "text/line-based";
             } finally {
+                reader.close();
                 is.close();
             }
         } catch (UnsupportedEncodingException e) {

File: main/src/com/google/refine/importing/ImportingManager.java
Patch:
@@ -169,7 +169,7 @@ static public void registerController(ButterflyModule module, String name, Impor
         controller.init(servlet);
     }
 
-    static public File getImportDir() {
+    static synchronized public File getImportDir() {
         if (importDir == null) {
             File tempDir = servlet.getTempDir();
             importDir = tempDir == null ? new File(".import-temp") : new File(tempDir, "import");

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -371,7 +371,7 @@ protected boolean loadFromFile(File file) {
                 logger.warn("Error reading file", e);
             } finally {
                 try {
-                    reader.close();
+                    if (reader != null) reader.close();
                 } catch (IOException e) {
                     logger.warn("Exception closing file",e);
                 }

File: main/src/com/google/refine/model/ColumnModel.java
Patch:
@@ -70,20 +70,20 @@ synchronized public void setMaxCellIndex(int maxCellIndex) {
         this._maxCellIndex = Math.max(this._maxCellIndex, maxCellIndex);
     }
 
-    public int getMaxCellIndex() {
+    synchronized public int getMaxCellIndex() {
         return _maxCellIndex;
     }
 
     synchronized public int allocateNewCellIndex() {
         return _maxCellIndex++;
     }
     
-    public void setKeyColumnIndex(int keyColumnIndex) {
+    synchronized public void setKeyColumnIndex(int keyColumnIndex) {
         // TODO: check validity of new cell index, e.g., it's not in any group
         this._keyColumnIndex = keyColumnIndex;
     }
 
-    public int getKeyColumnIndex() {
+    synchronized public int getKeyColumnIndex() {
         return _keyColumnIndex;
     }
     

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -240,7 +240,7 @@ public String toString() {
         StringBuffer result = new StringBuffer();
         for (Cell cell : cells) {
             result.append(cell == null ? "null" : cell.toString());
-            result.append(",");
+            result.append(',');
         }
         return result.toString();
     }

File: main/src/com/google/refine/preference/TopList.java
Patch:
@@ -46,9 +46,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 import com.google.refine.Jsonizable;
 
-
 public class TopList implements Jsonizable, Iterable<String> {
-    private static final long serialVersionUID = 2666669643063493350L;
     
     final protected int          _top;
     final protected List<String> _list = new ArrayList<String>();

File: main/tests/server/src/com/google/refine/tests/RefineServletTests.java
Patch:
@@ -119,7 +119,7 @@ public void doGetRegressionTest(){
             Assert.fail();
         }
 
-        verifyGetCommandNameCalled(3);
+        verifyGetCommandNameCalled(2);
         try {
             verify(command,times(1)).doGet(request, response);
         } catch (ServletException e) {

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -58,7 +58,7 @@ static public interface TableDataReader {
     @Override
     public JSONObject createParserUIInitializationData(ImportingJob job,
             List<JSONObject> fileRecords, String format) {
-        JSONObject options = new JSONObject();
+        JSONObject options = super.createParserUIInitializationData(job, fileRecords, format);
         
         JSONUtilities.safePut(options, "ignoreLines", -1); // number of blank lines at the beginning to ignore
         JSONUtilities.safePut(options, "headerLines", 1); // number of header lines
@@ -67,8 +67,6 @@ public JSONObject createParserUIInitializationData(ImportingJob job,
         JSONUtilities.safePut(options, "storeBlankRows", true);
         JSONUtilities.safePut(options, "storeBlankCellsAsNulls", true);
         
-        JSONUtilities.safePut(options, "includeFileSources", fileRecords.size() > 1);
-        
         return options;
     }
     

File: main/src/com/google/refine/importers/SeparatorBasedImporter.java
Patch:
@@ -92,6 +92,9 @@ public void parseOneFile(
     ) {
         // String lineSeparator = JSONUtilities.getString(options, "lineSeparator", "\n");
         String sep = JSONUtilities.getString(options, "separator", "\t");
+        if (sep == null) {
+            sep = "\t";
+        }
         boolean processQuotes = JSONUtilities.getBoolean(options, "processQuotes", true);
         
         final CSVParser parser = new CSVParser(

File: main/src/com/google/refine/model/ColumnModel.java
Patch:
@@ -75,7 +75,7 @@ public int getMaxCellIndex() {
     }
 
     synchronized public int allocateNewCellIndex() {
-        return ++_maxCellIndex;
+        return _maxCellIndex++;
     }
     
     public void setKeyColumnIndex(int keyColumnIndex) {

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -239,7 +239,7 @@ static public Row loadStreaming(String s, Pool pool) throws Exception {
     public String toString() {
         StringBuffer result = new StringBuffer();
         for (Cell cell : cells) {
-            result.append(cell.toString());
+            result.append(cell == null ? "null" : cell.toString());
             result.append(",");
         }
         return result.toString();

File: main/src/com/google/refine/exporters/HtmlTableExporter.java
Patch:
@@ -110,7 +110,7 @@ public void addRow(List<CellData> cells, boolean isHeader) {
                             writer.write("</td>");
                         }
                     }
-                    writer.write("</tr>");
+                    writer.write("</tr>\n");
                 } catch (IOException e) {
                     // Ignore
                 }

File: extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010, Thomas F. Morris
+ * Copyright (c) 2010,2011 Thomas F. Morris
  *        All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
@@ -416,7 +416,7 @@ void formulateInsert(List<CellData> cells, StringBuffer sb) {
                 
                 sbValues.append("'");
                 if (cellData != null && cellData.text != null) {
-                    sbValues.append(cellData.text.replaceAll("'", "\\'"));
+                    sbValues.append(cellData.text.replaceAll("'", "\\\\'"));
                 }
                 sbValues.append("'");
             }

File: main/tests/server/src/com/google/refine/tests/expr/functions/strings/StringCaseTests.java
Patch:
@@ -93,7 +93,6 @@ private static Object invoke(String name,Object... args) {
     @Test
     public void testToTitlecaseInvalidParams() {        
         Assert.assertTrue(invoke("toTitlecase") instanceof EvalError);
-        Assert.assertTrue(invoke("toTitlecase", "one","two") instanceof EvalError);
         Assert.assertTrue(invoke("toTitlecase", "one","two","three") instanceof EvalError);
     }
     
@@ -103,8 +102,8 @@ public void testToTitlecase() {
         Assert.assertEquals((String)(invoke("toTitlecase", "ONE")),"One");
         Assert.assertEquals((String)(invoke("toTitlecase", "one two three")),"One Two Three");
         Assert.assertEquals((String)(invoke("toTitlecase", "C.R. SANDIDGE WINES, INC.")),"C.R. Sandidge Wines, Inc.");
-//        Assert.assertEquals((String)(invoke("toTitlecase", "C.R. SANDIDGE WINES, INC.",",. ")),"C.R. Sandidge Wines, Inc.");
-//        Assert.assertEquals((String)(invoke("toTitlecase", "one-two-three","-")),"One-Two-Three");
+        Assert.assertEquals((String)(invoke("toTitlecase", "C.R. SANDIDGE WINES, INC.",",. ")),"C.R. Sandidge Wines, Inc.");
+        Assert.assertEquals((String)(invoke("toTitlecase", "one-two-three","-")),"One-Two-Three");
     }
     
 }

File: main/src/com/google/refine/browsing/util/ExpressionNominalValueGrouper.java
Patch:
@@ -183,7 +183,7 @@ protected void processValue(Object value, int index) {
                     facetChoice.count++;
                 }
             } else {
-                String label = value.toString();
+                String label = valueString;
                 DecoratedValue dValue = new DecoratedValue(value, label);
                 IndexedNominalFacetChoice choice = 
                     new IndexedNominalFacetChoice(dValue, index);

File: main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesTests.java
Patch:
@@ -446,6 +446,8 @@ public TreeReader createXmlParser(){
             return parser;
         } catch (XMLStreamException e) {
             return null;
+        } catch (IOException e) {
+            return null;
         }
     }
     public TreeReader createJsonParser(){

File: main/src/com/google/refine/model/Row.java
Patch:
@@ -232,7 +232,7 @@ static public Row loadStreaming(String s, Pool pool) throws Exception {
             }
         }
         
-        return (cells.size() > 0) ? new Row(cells, flagged, starred) : null;
+        return (cells.size() > 0) ? new Row(cells, flagged, starred) : new Row(0);
     }
     
     @Override

File: main/src/com/google/refine/expr/functions/strings/ToTitlecase.java
Patch:
@@ -44,14 +44,15 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 import com.google.refine.grel.Function;
 
 public class ToTitlecase implements Function {
-
+    final static private char[] delimiters = { ' ', '\t', '\r', '\n', '.' };
+    
     @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] != null) {
             Object o = args[0];
             String s = o instanceof String ? (String) o : o.toString();
             
-            return WordUtils.capitalizeFully(s);
+            return WordUtils.capitalizeFully(s, delimiters);
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
     }

File: main/tests/server/src/com/google/refine/tests/exporters/XlsExporterTests.java
Patch:
@@ -84,7 +84,7 @@ public void init() {
 
     @BeforeMethod
     public void SetUp(){
-        SUT = new XlsExporter();
+        SUT = new XlsExporter(false);
         stream = new ByteArrayOutputStream();
         ProjectManager.singleton = new ProjectManagerStub();
         projectMetadata = new ProjectMetadata();

File: main/src/com/google/refine/importers/TabularImportingParserBase.java
Patch:
@@ -117,6 +117,7 @@ static public void readTable(
         }
         
         List<String> columnNames = new ArrayList<String>();
+        boolean hasOurOwnColumnNames = headerLines > 0;
         
         List<Object> cells = null;
         int rowsWithData = 0;
@@ -161,7 +162,8 @@ static public void readTable(
                     if (skipDataLines <= 0 || rowsWithData > skipDataLines) {
                         boolean rowHasData = false;
                         for (int c = 0; c < cells.size(); c++) {
-                            Column column = ImporterUtilities.getOrAllocateColumn(project, columnNames, c);
+                            Column column = ImporterUtilities.getOrAllocateColumn(
+                                project, columnNames, c, hasOurOwnColumnNames);
                             
                             Object value = cells.get(c);
                             if (value != null && value instanceof Cell) {

File: main/src/com/google/refine/importers/FixedWidthImporter.java
Patch:
@@ -184,16 +184,16 @@ static public int[] guessColumnWidths(File file, String encoding) {
                     int startIndex = 0;
                     for (int c = 0; c < counts.length; c++) {
                         int count = counts[c];
-                        if (count == lineCount && c > startIndex) {
+                        if (count == lineCount) {
                             widths.add(c - startIndex + 1);
                             startIndex = c + 1;
                         }
                     }
                     
-                    for (int i = widths.size() - 1; i > 0; i--) {
+                    for (int i = widths.size() - 2; i >= 0; i--) {
                         if (widths.get(i) == 1) {
+                            widths.set(i + 1, widths.get(i + 1) + 1);
                             widths.remove(i);
-                            widths.set(i - 1, widths.get(i - 1) + 1);
                         }
                     }
                     

File: main/src/com/google/refine/browsing/facets/ListFacet.java
Patch:
@@ -107,6 +107,7 @@ public void write(JSONWriter writer, Properties options)
             writer.key("error"); writer.value(_errorMessage);
         } else if (_choices.size() > getLimit()) {
             writer.key("error"); writer.value("Too many choices");
+            writer.key("choiceCount"); writer.value(_choices.size());
         } else {
             writer.key("choices"); writer.array();
             for (NominalFacetChoice choice : _choices) {

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -160,7 +160,7 @@ public void parseOneFile(
                 
                 @Override
                 public List<Object> getNextRowOfCells() throws IOException {
-                    if (nextRow >= lastRow) {
+                    if (nextRow > lastRow) {
                         return null;
                     }
                     

File: extensions/freebase/src/com/google/refine/freebase/model/changes/DataExtensionChange.java
Patch:
@@ -402,7 +402,9 @@ static public Change load(LineNumberReader reader, Pool pool) throws Exception {
                 for (int i = 0; i < count; i++) {
                     line = reader.readLine();
                     
-                    if (line == null) continue;
+                    if (line == null) {
+                        continue;
+                    }
                     
                     if (line.length() == 0) {
                         dataExtensions.add(null);

File: main/src/com/google/refine/browsing/util/TimeBinIndex.java
Patch:
@@ -112,7 +112,9 @@ public TimeBinIndex(Project project, RowEvaluable rowEvaluable) {
 
         for (long step : steps) {
             _step = step;
-            if (diff / _step <= 100) break; 
+            if (diff / _step <= 100) {
+                break;
+            } 
         }
 
         _bins = new int[(int) (diff / _step) + 1];

File: main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java
Patch:
@@ -62,8 +62,9 @@ public static double LCM(double a, double b){
             smallerValue = a;
         }
         for(int i = 1; i <= largerValue; i++){
-            if((largerValue*i) % smallerValue == 0)
+            if((largerValue*i) % smallerValue == 0) {
                 return largerValue * i;
+            }
         }
         return largerValue * smallerValue;
     }

File: main/src/com/google/refine/expr/functions/strings/Phonetic.java
Patch:
@@ -64,7 +64,9 @@ public Object call(Properties bindings, Object[] args) {
             if (o1 != null && o2 != null && o2 instanceof String) {
                 String str = (o1 instanceof String) ? (String) o1 : o1.toString();
                 String encoding = ((String) o2).toLowerCase();
-                if (encoding == null) encoding = "metaphone3";
+                if (encoding == null) {
+                    encoding = "metaphone3";
+                }
                 if ("doublemetaphone".equalsIgnoreCase(encoding)) {
                     return metaphone2.key(str);
                 } else if ("metaphone3".equalsIgnoreCase(encoding)) {

File: main/src/com/google/refine/grel/controls/IsNumeric.java
Patch:
@@ -43,7 +43,9 @@ protected String getDescription() {
 
     @Override
     protected boolean test(Object o) {
-        if (o instanceof Number) return true;
+        if (o instanceof Number) {
+            return true;
+        }
         
         String s = (o instanceof String) ? (String) o : o.toString();
         

File: main/src/com/google/refine/history/ChangeSequence.java
Patch:
@@ -79,7 +79,9 @@ public void save(Writer writer, Properties options) throws IOException {
     
     static public Change load(LineNumberReader reader, Pool pool) throws Exception {
         String line = reader.readLine();
-        if (line == null) line = "";
+        if (line == null) {
+            line = "";
+        }
         int equal = line.indexOf('=');
         
         assert "count".equals(line.substring(0, equal));

File: main/src/com/google/refine/model/changes/ColumnSplitChange.java
Patch:
@@ -348,7 +348,9 @@ static public Change load(LineNumberReader reader, Pool pool) throws Exception {
                 for (int i = 0; i < count; i++) {
                     line = reader.readLine();
                     
-                    if (line == null) continue;
+                    if (line == null) {
+                        continue;
+                    }
                     
                     int valueCount = Integer.parseInt(line);
                     

File: main/src/com/google/refine/util/ParsingUtilities.java
Patch:
@@ -109,7 +109,9 @@ static public String readerToString(Reader reader) throws IOException {
     }
 
     static public JSONObject evaluateJsonStringToObject(String s) throws JSONException {
-        if( s == null ) throw new IllegalArgumentException("parameter 's' should not be null");
+        if( s == null ) {
+            throw new IllegalArgumentException("parameter 's' should not be null");
+        }
         JSONTokener t = new JSONTokener(s);
         Object o = t.nextValue();
         if (o instanceof JSONObject) {

File: main/tests/server/src/com/google/refine/tests/importers/ImporterUtilitiesTests.java
Patch:
@@ -131,8 +131,9 @@ public void ensureColumnsInRowExist(){
     @Test
     public void ensureColumnsInRowExistDoesExpand(){
         Row row = new Row(4);
-        for(int i = 1; i < 5; i++)
+        for(int i = 1; i < 5; i++) {
             row.cells.add(new Cell("value" + i, null));
+        }
 
         ArrayList<String> columnNames = new ArrayList<String>(2);
 

File: main/tests/server/src/com/google/refine/tests/importers/XmlImportUtilitiesTests.java
Patch:
@@ -93,8 +93,9 @@ public void TearDown() throws IOException{
         parser = null;
         columnGroup = null;
         record = null;
-        if(inputStream != null)
-           inputStream.close();
+        if(inputStream != null) {
+            inputStream.close();
+        }
         inputStream = null;
     }
 

File: main/src/com/google/refine/grel/Parser.java
Patch:
@@ -1,6 +1,6 @@
 /*
 
-Copyright 2010, Google Inc.
+Copyright 2010,2011. Google Inc.
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
@@ -119,7 +119,7 @@ protected Evaluable parseSubExpression() throws ParsingException {
 
             next(true);
 
-            Evaluable sub2 = parseSubExpression();
+            Evaluable sub2 = parseTerm();
 
             sub = new OperatorCallExpr(new Evaluable[] { sub, sub2 }, op);
         }

File: main/src/com/google/refine/clustering/binning/BinningClusterer.java
Patch:
@@ -75,6 +75,7 @@ public class BinningClusterer extends Clusterer {
         _keyers.put("double-metaphone", new DoubleMetaphoneKeyer());
         _keyers.put("metaphone3", new Metaphone3Keyer());
         _keyers.put("soundex", new SoundexKeyer());
+        _keyers.put("cologne-phonetic", new ColognePhoneticKeyer());
     }
 
     class BinningRowVisitor implements RowVisitor {

File: main/src/com/google/refine/commands/project/ExportRowsCommand.java
Patch:
@@ -97,10 +97,12 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 //            } else if (exporter instanceof UrlExporter) {
 //                ((UrlExporter) exporter).export(project, options, engine);
             } else {
+                // TODO: Should this use ServletException instead of respondException?
                 respondException(response, new RuntimeException("Unknown exporter type"));
             }
         } catch (Exception e) {
-            respondException(response, e);
+            // Use generic error handling rather than our JSON handling
+            throw new ServletException(e);
         } finally {
             ProjectManager.singleton.setBusy(false);
         }

File: main/src/com/google/refine/expr/functions/html/OwnText.java
Patch:
@@ -45,6 +45,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 
 public class OwnText implements Function {
 
+    @Override
     public Object call(Properties bindings, Object[] args) {
         if (args.length >= 1) {
             Object o1 = args[0];
@@ -60,11 +61,12 @@ public Object call(Properties bindings, Object[] args) {
     }
 
 
+    @Override
     public void write(JSONWriter writer, Properties options)
         throws JSONException {
 
         writer.object();
-        writer.key("description"); writer.value("Gets the text owned by this element only; does not get the combined text of all children.");
+        writer.key("description"); writer.value("Gets the text owned by this HTML element only; does not get the combined text of all children.");
         writer.key("params"); writer.value("Element e");
         writer.key("returns"); writer.value("String ownText");
         writer.endObject();

File: main/src/com/google/refine/browsing/facets/NominalFacetChoice.java
Patch:
@@ -54,6 +54,7 @@ public NominalFacetChoice(DecoratedValue decoratedValue) {
         this.decoratedValue = decoratedValue;
     }
     
+    @Override
     public void write(JSONWriter writer, Properties options)
             throws JSONException {
         writer.object();

File: main/src/com/google/refine/browsing/facets/TextSearchFacet.java
Patch:
@@ -124,12 +124,14 @@ public RowFilter getRowFilter(Project project) {
         
         if ("regex".equals(_mode)) {
             return new ExpressionStringComparisonRowFilter(eval, _columnName, _cellIndex) {
+                @Override
                 protected boolean checkValue(String s) {
                     return _pattern.matcher(s).find();
                 };
             };
         } else {
             return new ExpressionStringComparisonRowFilter(eval, _columnName, _cellIndex) {
+                @Override
                 protected boolean checkValue(String s) {
                     return (_caseSensitive ? s : s.toLowerCase()).contains(_query);
                 };

File: main/src/com/google/refine/browsing/filters/DualExpressionsNumberComparisonRowFilter.java
Patch:
@@ -72,6 +72,7 @@ public DualExpressionsNumberComparisonRowFilter (
         _y_cellIndex = y_cellIndex;
     }
 
+    @Override
     public boolean filterRow(Project project, int rowIndex, Row row) {
         Cell x_cell = _x_cellIndex < 0 ? null : row.getCell(_x_cellIndex);
         Properties x_bindings = ExpressionUtils.createBindings(project);

File: main/src/com/google/refine/browsing/filters/ExpressionEqualRowFilter.java
Patch:
@@ -82,6 +82,7 @@ public ExpressionEqualRowFilter(
         _invert = invert;
     }
 
+    @Override
     public boolean filterRow(Project project, int rowIndex, Row row) {
         return _invert ?
                 internalInvertedFilterRow(project, rowIndex, row) :

File: main/src/com/google/refine/browsing/filters/ExpressionNumberComparisonRowFilter.java
Patch:
@@ -72,6 +72,7 @@ public ExpressionNumberComparisonRowFilter(
         _selectError = selectError;
     }
 
+    @Override
     public boolean filterRow(Project project, int rowIndex, Row row) {
         Properties bindings = ExpressionUtils.createBindings(project);
         

File: main/src/com/google/refine/browsing/filters/ExpressionStringComparisonRowFilter.java
Patch:
@@ -61,6 +61,7 @@ public ExpressionStringComparisonRowFilter(Evaluable evaluable, String columnNam
         _cellIndex = cellIndex;
     }
 
+    @Override
     public boolean filterRow(Project project, int rowIndex, Row row) {
         Cell cell = _cellIndex < 0 ? null : row.getCell(_cellIndex);
         

File: main/src/com/google/refine/browsing/filters/ExpressionTimeComparisonRowFilter.java
Patch:
@@ -61,6 +61,7 @@ public ExpressionTimeComparisonRowFilter(
     	_selectNonTime = selectNonTime;
     }
         
+    @Override
     protected boolean checkValue(Object v) {
         if (ExpressionUtils.isError(v)) {
             return _selectError;
@@ -77,6 +78,7 @@ protected boolean checkValue(Object v) {
     }
     
     // not really needed for operation, just to make extending the abstract class possible
+    @Override
     protected boolean checkValue(double d) {
     	return false;
     }

File: main/src/com/google/refine/browsing/util/ConjunctiveFilteredRows.java
Patch:
@@ -53,6 +53,7 @@ public void add(RowFilter rowFilter) {
         _rowFilters.add(rowFilter);
     }
     
+    @Override
     public void accept(Project project, RowVisitor visitor) {
     	try {
     		visitor.start(project);

File: main/src/com/google/refine/browsing/util/ExpressionNominalValueGrouper.java
Patch:
@@ -101,6 +101,7 @@ public void end(Project project) {
     	// nothing to do
     }
     
+    @Override
     public boolean visit(Project project, int rowIndex, Row row) {
     	hasError = false;
     	hasBlank = false;

File: main/src/com/google/refine/clustering/binning/DoubleMetaphoneKeyer.java
Patch:
@@ -44,6 +44,7 @@ public DoubleMetaphoneKeyer() {
         _metaphone2.setMaxCodeLen(2000);
     }
     
+    @Override
     public String key(String s, Object... o) {
         return _metaphone2.doubleMetaphone(s);
     }

File: main/src/com/google/refine/clustering/binning/FingerprintKeyer.java
Patch:
@@ -43,6 +43,7 @@ public class FingerprintKeyer extends Keyer {
 
     static final Pattern alphanum = Pattern.compile("\\p{Punct}|\\p{Cntrl}");
     
+    @Override
     public String key(String s, Object... o) {
         s = s.trim(); // first off, remove whitespace around the string
         s = s.toLowerCase(); // then lowercase it

File: main/src/com/google/refine/clustering/binning/Metaphone3Keyer.java
Patch:
@@ -38,6 +38,7 @@ public class Metaphone3Keyer extends Keyer {
     public Metaphone3Keyer() {
     }
     
+    @Override
     public String key(String s, Object... o) {
         Metaphone3 _metaphone3 = new Metaphone3();
         //_metaphone3.SetEncodeVowels(true);

File: main/src/com/google/refine/clustering/binning/MetaphoneKeyer.java
Patch:
@@ -44,6 +44,7 @@ public MetaphoneKeyer() {
         _metaphone.setMaxCodeLen(2000);
     }
     
+    @Override
     public String key(String s, Object... o) {
         return _metaphone.metaphone(s);
     }

File: main/src/com/google/refine/clustering/binning/NGramFingerprintKeyer.java
Patch:
@@ -41,6 +41,7 @@ public class NGramFingerprintKeyer extends FingerprintKeyer {
 
     static final Pattern alphanum = Pattern.compile("\\p{Punct}|\\p{Cntrl}|\\p{Space}");
     
+    @Override
     public String key(String s, Object... o) {
         int ngram_size = 2;
         if (o != null && o.length > 0 && o[0] instanceof Number) {

File: main/src/com/google/refine/clustering/binning/SoundexKeyer.java
Patch:
@@ -43,6 +43,7 @@ public SoundexKeyer() {
         _soundex = new Soundex();
     }
     
+    @Override
     public String key(String s, Object... o) {
         return _soundex.soundex(s);
     }

File: main/src/com/google/refine/ProjectManager.java
Patch:
@@ -466,5 +466,6 @@ public void addLatestExpression(String s) {
     */
    static protected void preparePreferenceStore(PreferenceStore ps) {
        ps.put("scripting.expressions", new TopList(s_expressionHistoryMax));
+       ps.put("scripting.starred-expressions", new TopList(Integer.MAX_VALUE));
    }
 }

File: main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java
Patch:
@@ -67,6 +67,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
             localExpressions = localExpressions.size() > 20 ? localExpressions.subList(0, 20) : localExpressions;
             
             List<String> globalExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get("scripting.expressions"));
+            Set<String> starredExpressions = new HashSet<String>(((TopList)ProjectManager.singleton.getPreferenceStore().get("scripting.starred-expressions")).getList());
             
             Set<String> done = new HashSet<String>();
             
@@ -81,6 +82,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
                     writer.object();
                     writer.key("code"); writer.value(s);
                     writer.key("global"); writer.value(false);
+                    writer.key("starred"); writer.value(starredExpressions.contains(s));
                     writer.endObject();
                     done.add(s);
                 }
@@ -89,6 +91,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
                         writer.object();
                         writer.key("code"); writer.value(s);
                         writer.key("global"); writer.value(true);
+                        writer.key("starred"); writer.value(starredExpressions.contains(s));
                         writer.endObject();
                     }
                 }

File: main/src/com/google/refine/expr/functions/html/HtmlText.java
Patch:
@@ -1,6 +1,6 @@
 /*
 
-Copyright 2010, Google Inc.
+Copyright 2010,2011 Google Inc.
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
@@ -64,7 +64,7 @@ public void write(JSONWriter writer, Properties options)
         throws JSONException {
 
         writer.object();
-        writer.key("description"); writer.value("Selects the text from within an element");
+        writer.key("description"); writer.value("Selects the text from within an element (including all child elements)");
         writer.key("params"); writer.value("Element e");
         writer.key("returns"); writer.value("String text");
         writer.endObject();

File: main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java
Patch:
@@ -198,7 +198,7 @@ public void exportCsvWithEmptyCells(){
     
     @Test
     public void exportDateColumns(){
-        CreateGrid(1,1);
+        CreateGrid(1,2);
         Calendar calendar = Calendar.getInstance();
         Date date = new Date();
 

File: extensions/freebase/src/com/google/refine/freebase/protograph/transpose/TripleLoaderTransposedNodeFactory.java
Patch:
@@ -120,13 +120,13 @@ protected void ensureAllIncludedTypesAsserted(Recon recon, String typeID) {
     }
     protected void ensureFromTypesAsserted(Recon recon, String propertyID) {
         String fromTypeID = schemaHelper.getPropertyFromType(propertyID);
-        if (fromTypeID != null) {
+        if (fromTypeID != null && !"/type/object".equals(fromTypeID)) {
             ensureAllIncludedTypesAsserted(recon, fromTypeID);
         }
     }
     protected void ensureToTypesAsserted(Recon recon, String propertyID) {
         String toTypeID = schemaHelper.getPropertyToType(propertyID);
-        if (toTypeID != null) {
+        if (toTypeID != null && !"/type/object".equals(toTypeID)) {
             ensureAllIncludedTypesAsserted(recon, toTypeID);
         }
     }

File: extensions/freebase/src/com/google/refine/freebase/protograph/transpose/TripleLoaderTransposedNodeFactory.java
Patch:
@@ -326,7 +326,7 @@ protected void writeChildren(
             String subject, Project project,
             int subjectRowIndex, int subjectCellIndex, Cell subjectCell) {
             
-            Recon recon = subjectCell.recon != null && 
+            Recon recon = subjectCell != null && subjectCell.recon != null && 
                     (subjectCell.recon.judgment == Judgment.Matched || subjectCell.recon.judgment == Judgment.New)
                 ? subjectCell.recon : null;
             

File: main/src/com/google/refine/importers/ExcelImporter.java
Patch:
@@ -230,13 +230,13 @@ protected void setUnduplicatedColumnName(
     
     protected Serializable extractCell(org.apache.poi.ss.usermodel.Cell cell) {
         int cellType = cell.getCellType();
+        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {
+            cellType = cell.getCachedFormulaResultType();
+        }
         if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_ERROR ||
             cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {
             return null;
         }
-        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {
-            cellType = cell.getCachedFormulaResultType();
-        }
         
         Serializable value = null;
         if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN) {

File: main/src/com/google/refine/importers/XmlImportUtilities.java
Patch:
@@ -275,7 +275,7 @@ static public void importTreeData(
                 }
             }
         } catch (Exception e) {
-            // silent
+            logger.error("Exception from XML parse",e);
         }
     }
 
@@ -433,7 +433,7 @@ static protected void processSubRecord(
                                 thisColumnGroup,
                                 record,
                                 colName,
-                                parser.getText()
+                                text
                         );
                     }
                 }

File: main/src/com/google/refine/commands/recon/ReconJudgeOneCellCommand.java
Patch:
@@ -64,6 +64,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
 
         try {
+            request.setCharacterEncoding("UTF-8");
+            response.setCharacterEncoding("UTF-8");
+
             Project project = getProject(request);
 
             int rowIndex = Integer.parseInt(request.getParameter("row"));

File: main/src/com/google/refine/sorting/DateCriterion.java
Patch:
@@ -56,7 +56,7 @@ protected Object makeKey(Object value) {
 						return s_error;
 					}
 				}
-				return value;
+				return null;
 			}
 			
 			@Override

File: main/src/com/google/refine/grel/ControlFunctionRegistry.java
Patch:
@@ -253,7 +253,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("exp", new Exp());
         registerFunction("sum", new Sum());
         registerFunction("fact", new Fact());
-        registerFunction("comb", new Combin());
+        registerFunction("combin", new Combin());
         registerFunction("degrees", new Degrees());
         registerFunction("radians", new Radians());
 

File: extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java
Patch:
@@ -271,9 +271,9 @@ private void importFusionTable(URL url, Project project, int ignoreLines,
                 } else {
                     row.cells.add(null);
                 }
-                project.rows.add(row);
-                values = getTableRow(scanner);
             }
+            project.rows.add(row);
+            values = getTableRow(scanner);
         }
     }
 

File: main/src/com/google/refine/importers/ImporterRegistry.java
Patch:
@@ -52,7 +52,8 @@ abstract public class ImporterRegistry {
         {"RdfTripleImporter", "com.google.refine.importers.RdfTripleImporter"},
         {"MarcImporter", "com.google.refine.importers.MarcImporter"},
         {"TsvCsvImporter", "com.google.refine.importers.TsvCsvImporter"},
-        {"JsonImporter", "com.google.refine.importers.JsonImporter"}
+        {"JsonImporter", "com.google.refine.importers.JsonImporter"},
+        {"FixedWidthImporter", "com.google.refine.importers.FixedWidthImporter"}
     };
 
     static {

File: main/src/com/google/refine/expr/functions/math/Round.java
Patch:
@@ -46,7 +46,7 @@ public class Round implements Function {
 
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
-            return ((Number) args[0]).longValue();
+            return Math.round(((Number) args[0]).doubleValue());
         }
         return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
     }

File: main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java
Patch:
@@ -92,8 +92,6 @@ protected HistoryEntry createHistoryEntry(Project project, long historyEntryID)
         int columnIndex = project.columnModel.getColumnIndexByName(_columnName);
         int columnCount = oldColumns.size();
         
-        newColumns.addAll(oldColumns.subList(0, columnIndex));
-        
         for (int i = 0; i < columnCount; i++) {
             Column column = oldColumns.get(i);
             

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -388,7 +388,7 @@ protected Recon createReconServiceResults(String text, JSONArray results, long h
                     score
                 );
                 
-                if (i == 0 && result.has("match") && result.getBoolean("match")) {
+                if (autoMatch && i == 0 && result.has("match") && result.getBoolean("match")) {
                     recon.match = candidate;
                     recon.matchRank = 0;
                     recon.judgment = Judgment.Matched;

File: main/src/com/google/refine/model/recon/ReconConfig.java
Patch:
@@ -45,7 +45,7 @@ static public ReconConfig reconstruct(JSONObject obj) throws Exception {
             String mode = obj.getString("mode");
             
             // Backward compatibility
-            if ("extend".equals(mode) || "strict".equals("mode")) {
+            if ("extend".equals(mode) || "strict".equals(mode)) {
                 mode = "freebase/" + mode;
             } else if ("heuristic".equals(mode)) {
                 mode = "core/standard-service"; // legacy

File: extensions/freebase/src/com/google/refine/freebase/commands/auth/AuthorizeCommand.java
Patch:
@@ -130,6 +130,6 @@ private String getBaseURL(HttpServletRequest request, Provider provider) {
                 throw new RuntimeException("neither the 'host' nor 'referer' headers were present in the HTTP response, I can't determine what URL Google Refine is listening to.");
             }
         }
-        return "http://" + host + "/command/freebase-extension/authorize/" + provider.getHost();
+        return "http://" + host + "/command/freebase/authorize/" + provider.getHost();
     }
 }

File: main/tests/server/src/com/google/refine/tests/RefineServletTests.java
Patch:
@@ -114,7 +114,7 @@ public void doGetReturnsError404WhenCommandNotFound(){
     }
 
     //----------------doPost tests-------------------------
-    @Test
+    @Test(enabled=false) // TODO: Fails when run with doGetRegressionTest()
     public void doPostRegressionTest(){
         whenGetCommandNameThenReturn(TEST_COMMAND_PATH);
         whenGetMethodThenReturn(POST);

File: main/tests/server/src/com/google/refine/tests/RefineServletTests.java
Patch:
@@ -114,7 +114,7 @@ public void doGetReturnsError404WhenCommandNotFound(){
     }
 
     //----------------doPost tests-------------------------
-    @Test
+    @Test(enabled=false) // TODO: Fails due to interaction with doGetRegressionTest
     public void doPostRegressionTest(){
         whenGetCommandNameThenReturn(TEST_COMMAND_PATH);
         whenGetMethodThenReturn(POST);

File: main/src/com/google/refine/history/History.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class History implements Jsonizable {
     static public Change readOneChange(InputStream in, Pool pool) throws Exception {
-        LineNumberReader reader = new LineNumberReader(new InputStreamReader(in));
+        LineNumberReader reader = new LineNumberReader(new InputStreamReader(in, "UTF-8"));
         try {
             return readOneChange(reader, pool);
         } finally {
@@ -51,7 +51,7 @@ static public Change readOneChange(LineNumberReader reader, Pool pool) throws Ex
     }
 
     static public void writeOneChange(OutputStream out, Change change, Pool pool) throws IOException {
-        Writer writer = new OutputStreamWriter(out);
+        Writer writer = new OutputStreamWriter(out, "UTF-8");
         try {
             History.writeOneChange(writer, change, pool);
         } finally {

File: main/src/com/google/refine/model/Recon.java
Patch:
@@ -80,7 +80,7 @@ static public Recon makeFreebaseRecon(long judgmentHistoryEntry) {
         return new Recon(
             judgmentHistoryEntry,
             "http://rdf.freebase.com/ns/type.object.mid",
-            "http://rdf.freebase.com/ns/type.object.mid");
+            "http://rdf.freebase.com/ns/type.object.id");
     }
     
     public Recon(long judgmentHistoryEntry, String identifierSpace, String schemaSpace) {

File: main/src/com/google/refine/model/recon/ReconConfig.java
Patch:
@@ -82,6 +82,8 @@ abstract public ReconJob createJob(
     
     abstract public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID);
     
+    abstract public Recon createNewRecon(long historyEntryID);
+    
     public void save(Writer writer) {
         JSONWriter jsonWriter = new JSONWriter(writer);
         try {

File: main/src/com/google/refine/commands/project/CreateProjectCommand.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Properties;
 import java.util.Map.Entry;
+import java.util.Properties;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
@@ -36,7 +36,6 @@
 import org.apache.tools.bzip2.CBZip2InputStream;
 import org.apache.tools.tar.TarEntry;
 import org.apache.tools.tar.TarInputStream;
-import org.apache.velocity.VelocityContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/tests/server/src/com/google/refine/tests/exporters/HtmlExporterTests.java
Patch:
@@ -97,7 +97,7 @@ public void exportSimpleHtmlTable(){
 
     // TODO: This test fails because the HTML table exporter 
     // apparently doesn't honor the column header option.  Should it?
-    @Test
+    @Test(enabled=false)
     public void exportSimpleHtmlTableNoHeader(){
         CreateGrid(2, 2);
         when(options.getProperty("printColumnHeader")).thenReturn("false");

File: extensions/freebase/src/com/google/refine/freebase/operations/SaveProtographOperation.java
Patch:
@@ -36,20 +36,20 @@ public void write(JSONWriter writer, Properties options)
     
         writer.object();
         writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
-        writer.key("description"); writer.value(getBriefDescription());
+        writer.key("description"); writer.value(getBriefDescription(null));
         writer.key("protograph"); _protograph.write(writer, options);
         writer.endObject();
     }
 
-    protected String getBriefDescription() {
+    protected String getBriefDescription(Project project) {
         return "Save schema alignment skeleton";
     }
 
     @Override
     protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
         Change change = new ProtographChange(_protograph);
         
-        return new HistoryEntry(historyEntryID, project, getBriefDescription(), SaveProtographOperation.this, change);
+        return new HistoryEntry(historyEntryID, project, getBriefDescription(project), SaveProtographOperation.this, change);
     }
     
     static public class ProtographChange implements Change {

File: main/src/com/google/refine/importers/TsvCsvImporter.java
Patch:
@@ -136,7 +136,7 @@ public void read(LineNumberReader lnReader, Project project, String sep, int lim
                     //add parsed data to row
                     for(String s : cells){
                         if (ExpressionUtils.isNonBlankData(s)) {
-                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s.trim()) : s;
+                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;
                             row.cells.add(new Cell(value, null));
                         }else{
                             row.cells.add(null);

File: main/src/com/google/refine/browsing/facets/RangeFacet.java
Patch:
@@ -107,6 +107,8 @@ public void write(JSONWriter writer, Properties options)
                 
                 writer.key(FROM); writer.value(_from);
                 writer.key(TO); writer.value(_to);
+            } else {
+                writer.key("error"); writer.value("No numeric value present.");
             }
             
             writer.key("baseNumericCount"); writer.value(_baseNumericCount);

File: main/src/com/google/refine/io/FileProjectManager.java
Patch:
@@ -358,6 +358,8 @@ protected void recover() {
                                         " in directory " + name);
                         } else {
                             logger.warn("Failed to recover project in directory " + name);
+                            
+                            file.renameTo(new File(file.getParentFile(), name + ".corrupted"));
                         }
                     }
                 }

File: main/src/com/google/refine/model/recon/StandardReconConfig.java
Patch:
@@ -157,7 +157,7 @@ public void write(JSONWriter writer, Properties options)
 
     @Override
     public int getBatchSize() {
-        return 7;
+        return 3;
     }
 
     @Override

File: main/src/com/google/refine/importers/TsvCsvImporter.java
Patch:
@@ -135,9 +135,8 @@ public void read(LineNumberReader lnReader, Project project, String sep, int lim
                 if (skip <=0  || rowsWithData > skip){
                     //add parsed data to row
                     for(String s : cells){
-                        s = s.trim();
                         if (ExpressionUtils.isNonBlankData(s)) {
-                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;
+                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s.trim()) : s;
                             row.cells.add(new Cell(value, null));
                         }else{
                             row.cells.add(null);

File: main/tests/server/src/com/google/refine/tests/ProjectManagerTests.java
Patch:
@@ -122,6 +122,7 @@ public void canFlushFromCache(){
 
         verify(metadata, times(1)).getModified();
         verify(project, times(2)).getLastSave();
+        verify(project, times(1)).dispose();
         verify(SUT, never()).saveProject(project);
         Assert.assertEquals(SUT.getProject(0), null);
         verifyNoMoreInteractions(project);

File: main/src/com/google/refine/commands/auth/AuthorizeCommand.java
Patch:
@@ -21,6 +21,7 @@ public class AuthorizeCommand extends Command {
     
     private static final String OAUTH_VERIFIER_PARAM = "oauth_verifier";
     
+    @Override
     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 
         // get the provider from the request

File: main/src/com/google/refine/commands/auth/DeAuthorizeCommand.java
Patch:
@@ -13,6 +13,7 @@
 
 public class DeAuthorizeCommand extends Command {
     
+    @Override
     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         
         try {

File: main/src/com/google/refine/commands/auth/GetUserBadgesCommand.java
Patch:
@@ -16,8 +16,9 @@
 
 public class GetUserBadgesCommand extends Command {
     
-    final static Logger logger = LoggerFactory.getLogger("check-authorization_command");
+    final static Logger logger = LoggerFactory.getLogger("get-version_command");
     
+    @Override
     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         
         try {

File: main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java
Patch:
@@ -32,6 +32,7 @@ public class GetScatterplotCommand extends Command {
 
     final static Logger logger = LoggerFactory.getLogger("get-scatterplot_command");
     
+    @Override
     public void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
         

File: main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java
Patch:
@@ -21,6 +21,7 @@
 
 public class GetColumnsInfoCommand extends Command {
 
+    @Override
     public void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
         

File: main/src/com/google/refine/commands/project/ExportRowsCommand.java
Patch:
@@ -31,6 +31,7 @@ static public Properties getRequestParameters(HttpServletRequest request) {
     	return options;
     }
 
+    @Override
     public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
 

File: main/src/com/google/refine/commands/row/GetRowsCommand.java
Patch:
@@ -29,6 +29,7 @@
 
 public class GetRowsCommand extends Command {
 	
+    @Override
     public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
         internalRespond(request, response);

File: main/src/com/google/refine/history/History.java
Patch:
@@ -68,7 +68,7 @@ static public void writeOneChange(Writer writer, Change change, Pool pool) throw
     }
 
     static public void writeOneChange(Writer writer, Change change, Properties options) throws IOException {
-        writer.write(RefineServlet.getVersion()); writer.write('\n');
+        writer.write(RefineServlet.VERSION); writer.write('\n');
         writer.write(change.getClass().getName()); writer.write('\n');
 
         change.save(writer, options);

File: main/src/com/google/refine/model/Project.java
Patch:
@@ -122,7 +122,7 @@ public void saveToOutputStream(OutputStream out, Pool pool) throws IOException {
     }
 
     protected void saveToWriter(Writer writer, Properties options) throws IOException {
-        writer.write(RefineServlet.getVersion()); writer.write('\n');
+        writer.write(RefineServlet.VERSION); writer.write('\n');
         
         writer.write("columnModel=\n"); columnModel.save(writer, options);
         writer.write("history=\n"); history.save(writer, options);

File: main/src/com/google/refine/oauth/OAuthUtilities.java
Patch:
@@ -17,7 +17,7 @@ public class OAuthUtilities {
     static final private Map<String,Provider> providers = new HashMap<String,Provider>();
     static final private Map<String,String[]> infos = new HashMap<String,String[]>();
    
-    static private final String[] FREEBASE_OAUTH_INFO = { "#9202a8c04000641f80000000150979b7" , "8ded7babfad2f94f4c77e39bbd6c90f31939999b"};
+    static private final String[] FREEBASE_OAUTH_INFO = { "#9202a8c04000641f80000000185352db" , "4561ee02279e6f04ebd88a1557e4292489380adf"};
 
     static {
         Provider freebase = new FreebaseProvider(FreebaseUtils.FREEBASE_HOST);

File: main/src/com/google/refine/oauth/Provider.java
Patch:
@@ -5,6 +5,9 @@ public abstract class Provider {
 
     protected String host;
     
+    public Provider() {
+    }
+
     public Provider(String host) {
         this.host = host;
     }

File: main/src/com/google/refine/util/FreebaseUtils.java
Patch:
@@ -35,7 +35,6 @@
 public class FreebaseUtils {
 
     static final public String FREEBASE_HOST = "www.freebase.com";
-    static final public String FREEBASE_SANDBOX_HOST = "www.sandbox-freebase.com";
     
     static final private String FREEQ_URL = "http://data.labs.freebase.com/freeq/gridworks";
     //static final private String FREEQ_URL = "http://data.labs.freebase.com/freeq/refine";
@@ -55,7 +54,7 @@ private static String getMQLReadURL(String host) {
     }
     
     private static String getUserAgent() {
-        return "Google Refine " + RefineServlet.getVersion();        
+        return RefineServlet.FULLNAME;        
     }
     
     public static String getUserInfo(Credentials credentials, Provider provider) 
@@ -190,7 +189,7 @@ public static String uploadTriples(
             UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");
 
             HttpPost httpRequest = new HttpPost(getFreeQUrl());
-            httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Google Refine " + RefineServlet.getVersion());
+            httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, getUserAgent());
             httpRequest.setEntity(entity);
             
             HttpPost surrogateRequest = new HttpPost(getUserInfoURL(FREEBASE_HOST));

File: main/src/com/google/refine/util/Pool.java
Patch:
@@ -62,7 +62,7 @@ public void save(OutputStream out) throws IOException {
     }
     
     public void save(Writer writer) throws IOException {
-        writer.write(RefineServlet.getVersion()); writer.write('\n');
+        writer.write(RefineServlet.VERSION); writer.write('\n');
 
         Properties options = new Properties();
         options.setProperty("mode", "save");

File: main/src/com/google/refine/importers/parsers/TreeParserToken.java
Patch:
@@ -2,6 +2,7 @@
 
 
 public enum TreeParserToken {
+    Ignorable,
     StartDocument,
     EndDocument,
     StartEntity,

File: main/src/com/google/refine/importers/parsers/TreeParser.java
Patch:
@@ -4,7 +4,7 @@
 
 public interface TreeParser {
     public TreeParserToken next() throws ServletException;
-    public int getEventType(); //aka getCurrentToken
+    public TreeParserToken getEventType() throws ServletException; //aka getCurrentToken
     public boolean hasNext() throws ServletException;
     public String getLocalName();
     public String getPrefix();

File: main/src/com/google/refine/importers/parsers/TreeParserToken.java
Patch:
@@ -2,6 +2,8 @@
 
 
 public enum TreeParserToken {
+    StartDocument,
+    EndDocument,
     StartEntity,
     EndEntity,
     Value

File: main/src/com/google/refine/importers/TsvCsvImporter.java
Patch:
@@ -75,7 +75,7 @@ public void read(LineNumberReader lnReader, Project project, String sep, int lim
         CSVParser parser = (sep != null && sep.length() > 0 && splitIntoColumns) ?
                         new CSVParser(sep.toCharArray()[0],//HACK changing string to char - won't work for multi-char separators.
                                 CSVParser.DEFAULT_QUOTE_CHARACTER,
-                                CSVParser.DEFAULT_ESCAPE_CHARACTER,
+                                (char) 0, // escape character
                                 CSVParser.DEFAULT_STRICT_QUOTES,
                                 CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,
                                 ignoreQuotes) : null;
@@ -97,14 +97,14 @@ public void read(LineNumberReader lnReader, Project project, String sep, int lim
                 if (tab >= 0) {
                     parser = new CSVParser('\t',
                             CSVParser.DEFAULT_QUOTE_CHARACTER,
-                            CSVParser.DEFAULT_ESCAPE_CHARACTER,
+                            (char) 0, // escape character
                             CSVParser.DEFAULT_STRICT_QUOTES,
                             CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,
                             ignoreQuotes);
                 } else {
                     parser = new CSVParser(',',
                             CSVParser.DEFAULT_QUOTE_CHARACTER,
-                            CSVParser.DEFAULT_ESCAPE_CHARACTER,
+                            (char) 0, // escape character
                             CSVParser.DEFAULT_STRICT_QUOTES,
                             CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,
                             ignoreQuotes);

File: broker/appengine/src/com/google/refine/appengine/AppEngineClientConnection.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.appengine;
+package com.google.refine.appengine;
 
 import static com.google.appengine.api.urlfetch.FetchOptions.Builder.allowTruncate;
 

File: broker/appengine/src/com/google/refine/appengine/AppEngineClientConnectionManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.appengine;
+package com.google.refine.appengine;
 
 import java.net.InetAddress;
 import java.net.Socket;

File: broker/appengine/src/com/google/refine/broker/AppEngineGridworksBrokerImpl.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.broker;
+package com.google.refine.broker;
 
 import java.io.Writer;
 import java.util.ArrayList;
@@ -26,8 +26,8 @@
 import org.slf4j.LoggerFactory;
 
 import com.google.appengine.api.datastore.Text;
-import com.google.gridworks.appengine.AppEngineClientConnectionManager;
-import com.google.gridworks.broker.GridworksBroker;
+import com.google.refine.appengine.AppEngineClientConnectionManager;
+import com.google.refine.broker.GridworksBroker;
 
 public class AppEngineGridworksBrokerImpl extends GridworksBroker {
                 

File: broker/core/src/com/google/refine/broker/GridworksBroker.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.google.gridworks.broker;
+package com.google.refine.broker;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: broker/core/src/com/google/refine/broker/GridworksBrokerImpl.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.broker;
+package com.google.refine.broker;
 
 import static com.sleepycat.persist.model.Relationship.MANY_TO_ONE;
 

File: extensions/jython/src/com/google/refine/jython/JythonHasFieldsWrapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.jython;
+package com.google.refine.jython;
 
 import java.util.Properties;
 
 import org.python.core.Py;
 import org.python.core.PyObject;
 
-import com.google.gridworks.expr.HasFields;
+import com.google.refine.expr.HasFields;
 
 public class JythonHasFieldsWrapper extends PyObject {
     private static final long serialVersionUID = -1275353513262385099L;

File: extensions/jython/src/com/google/refine/jython/JythonObjectWrapper.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.jython;
+package com.google.refine.jython;
 
 import org.python.core.PyObject;
 

File: extensions/sample-extension/src/com/google/refine/sampleExtension/SampleUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.sampleExtension;
+package com.google.refine.sampleExtension;
 
 
 public class SampleUtil {

File: main/src/com/google/refine/ClientSideResourceManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks;
+package com.google.refine;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: main/src/com/google/refine/GridworksServlet.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks;
+package com.google.refine;
 
 import java.io.File;
 import java.io.IOException;
@@ -15,8 +15,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.gridworks.commands.Command;
-import com.google.gridworks.io.FileProjectManager;
+import com.google.refine.commands.Command;
+import com.google.refine.io.FileProjectManager;
 
 import edu.mit.simile.butterfly.Butterfly;
 import edu.mit.simile.butterfly.ButterflyModule;

File: main/src/com/google/refine/Jsonizable.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks;
+package com.google.refine;
 
 import java.util.Properties;
 

File: main/src/com/google/refine/browsing/DecoratedValue.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
+import com.google.refine.Jsonizable;
 
 /**
  * Store a value and its text label, in case the value is not a string itself.

File: main/src/com/google/refine/browsing/FilteredRecords.java
Patch:
@@ -1,6 +1,6 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
-import com.google.gridworks.model.Project;
+import com.google.refine.model.Project;
 
 /**
  * Interface for anything that can decide which records match and which don't

File: main/src/com/google/refine/browsing/FilteredRows.java
Patch:
@@ -1,6 +1,6 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
-import com.google.gridworks.model.Project;
+import com.google.refine.model.Project;
 
 /**
  * Interface for anything that can decide which rows match and which rows don't match

File: main/src/com/google/refine/browsing/RecordFilter.java
Patch:
@@ -1,7 +1,7 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
-import com.google.gridworks.model.Project;
-import com.google.gridworks.model.Record;
+import com.google.refine.model.Project;
+import com.google.refine.model.Record;
 
 /**
  * Interface for judging if a particular record matches or doesn't match some

File: main/src/com/google/refine/browsing/RecordVisitor.java
Patch:
@@ -1,7 +1,7 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
-import com.google.gridworks.model.Project;
-import com.google.gridworks.model.Record;
+import com.google.refine.model.Project;
+import com.google.refine.model.Record;
 
 /**
  * Interface for visiting records one by one. The records visited are only those that match some

File: main/src/com/google/refine/browsing/RowFilter.java
Patch:
@@ -1,7 +1,7 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
-import com.google.gridworks.model.Project;
-import com.google.gridworks.model.Row;
+import com.google.refine.model.Project;
+import com.google.refine.model.Row;
 
 /**
  * Interface for judging if a particular row matches or doesn't match some

File: main/src/com/google/refine/browsing/RowVisitor.java
Patch:
@@ -1,7 +1,7 @@
-package com.google.gridworks.browsing;
+package com.google.refine.browsing;
 
-import com.google.gridworks.model.Project;
-import com.google.gridworks.model.Row;
+import com.google.refine.model.Project;
+import com.google.refine.model.Row;
 
 /**
  * Interface for visiting rows one by one. The rows visited are only those that match some

File: main/src/com/google/refine/browsing/facets/NominalFacetChoice.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.browsing.facets;
+package com.google.refine.browsing.facets;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
-import com.google.gridworks.browsing.DecoratedValue;
+import com.google.refine.Jsonizable;
+import com.google.refine.browsing.DecoratedValue;
 
 /**
  * Store a facet choice that has a decorated value, a count of matched rows,

File: main/src/com/google/refine/browsing/filters/ExpressionTimeComparisonRowFilter.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.browsing.filters;
+package com.google.refine.browsing.filters;
 
 import java.util.Date;
 
-import com.google.gridworks.browsing.util.RowEvaluable;
-import com.google.gridworks.expr.ExpressionUtils;
+import com.google.refine.browsing.util.RowEvaluable;
+import com.google.refine.expr.ExpressionUtils;
 
 /**
  * Judge if a row matches by evaluating a given expression on the row, based on a particular

File: main/src/com/google/refine/browsing/util/RowEvaluable.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.browsing.util;
+package com.google.refine.browsing.util;
 
 import java.util.Properties;
 
-import com.google.gridworks.model.Project;
-import com.google.gridworks.model.Row;
+import com.google.refine.model.Project;
+import com.google.refine.model.Row;
 
 public interface RowEvaluable {
     public Object eval(Project project, int rowIndex, Row row, Properties bindings);

File: main/src/com/google/refine/clustering/binning/DoubleMetaphoneKeyer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.clustering.binning;
+package com.google.refine.clustering.binning;
 
 import org.apache.commons.codec.language.DoubleMetaphone;
 

File: main/src/com/google/refine/clustering/binning/FingerprintKeyer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.clustering.binning;
+package com.google.refine.clustering.binning;
 
 import java.util.Iterator;
 import java.util.TreeSet;

File: main/src/com/google/refine/clustering/binning/Keyer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.clustering.binning;
+package com.google.refine.clustering.binning;
 
 
 public abstract class Keyer {

File: main/src/com/google/refine/clustering/binning/MetaphoneKeyer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.clustering.binning;
+package com.google.refine.clustering.binning;
 
 import org.apache.commons.codec.language.Metaphone;
 

File: main/src/com/google/refine/clustering/binning/NGramFingerprintKeyer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.clustering.binning;
+package com.google.refine.clustering.binning;
 
 import java.util.Iterator;
 import java.util.TreeSet;

File: main/src/com/google/refine/clustering/binning/SoundexKeyer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.clustering.binning;
+package com.google.refine.clustering.binning;
 
 import org.apache.commons.codec.language.Soundex;
 

File: main/src/com/google/refine/commands/OpenWorkspaceDirCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.commands;
+package com.google.refine.commands;
 
 import java.io.File;
 import java.io.IOException;
@@ -7,8 +7,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import com.google.gridworks.ProjectManager;
-import com.google.gridworks.io.FileProjectManager;
+import com.google.refine.ProjectManager;
+import com.google.refine.io.FileProjectManager;
 
 public class OpenWorkspaceDirCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/history/CancelProcessesCommand.java
Patch:
@@ -1,13 +1,13 @@
-package com.google.gridworks.commands.history;
+package com.google.refine.commands.history;
 
 import java.io.IOException;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import com.google.gridworks.commands.Command;
-import com.google.gridworks.model.Project;
+import com.google.refine.commands.Command;
+import com.google.refine.model.Project;
 
 public class CancelProcessesCommand extends Command {
 

File: main/src/com/google/refine/commands/history/GetHistoryCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.commands.history;
+package com.google.refine.commands.history;
 
 import java.io.IOException;
 
@@ -8,8 +8,8 @@
 
 import org.json.JSONException;
 
-import com.google.gridworks.commands.Command;
-import com.google.gridworks.model.Project;
+import com.google.refine.commands.Command;
+import com.google.refine.model.Project;
 
 public class GetHistoryCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/history/GetProcessesCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.commands.history;
+package com.google.refine.commands.history;
 
 import java.io.IOException;
 
@@ -8,8 +8,8 @@
 
 import org.json.JSONException;
 
-import com.google.gridworks.commands.Command;
-import com.google.gridworks.model.Project;
+import com.google.refine.commands.Command;
+import com.google.refine.model.Project;
 
 public class GetProcessesCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/DeleteProjectCommand.java
Patch:
@@ -1,13 +1,13 @@
-package com.google.gridworks.commands.project;
+package com.google.refine.commands.project;
 
 import java.io.IOException;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import com.google.gridworks.ProjectManager;
-import com.google.gridworks.commands.Command;
+import com.google.refine.ProjectManager;
+import com.google.refine.commands.Command;
 
 public class DeleteProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/commands/project/RenameProjectCommand.java
Patch:
@@ -1,13 +1,13 @@
-package com.google.gridworks.commands.project;
+package com.google.refine.commands.project;
 
 import java.io.IOException;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import com.google.gridworks.ProjectMetadata;
-import com.google.gridworks.commands.Command;
+import com.google.refine.ProjectMetadata;
+import com.google.refine.commands.Command;
 
 public class RenameProjectCommand extends Command {
     @Override

File: main/src/com/google/refine/exporters/Exporter.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.exporters;
+package com.google.refine.exporters;
 
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Writer;
 import java.util.Properties;
 
-import com.google.gridworks.browsing.Engine;
-import com.google.gridworks.model.Project;
+import com.google.refine.browsing.Engine;
+import com.google.refine.model.Project;
 
 public interface Exporter {
     public String getContentType();

File: main/src/com/google/refine/exporters/ExporterRegistry.java
Patch:
@@ -1,10 +1,10 @@
-package com.google.gridworks.exporters;
+package com.google.refine.exporters;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import com.google.gridworks.exporters.ProtographTransposeExporter.MqlwriteLikeExporter;
-import com.google.gridworks.exporters.ProtographTransposeExporter.TripleLoaderExporter;
+import com.google.refine.exporters.ProtographTransposeExporter.MqlwriteLikeExporter;
+import com.google.refine.exporters.ProtographTransposeExporter.TripleLoaderExporter;
 
 
 abstract public class ExporterRegistry {

File: main/src/com/google/refine/expr/EvalError.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 import java.io.Serializable;
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
+import com.google.refine.Jsonizable;
 
 /**
  * An error that occurs during the evaluation of an Evaluable. Errors are values, too

File: main/src/com/google/refine/expr/Evaluable.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 import java.util.Properties;
 

File: main/src/com/google/refine/expr/HasFields.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 import java.util.Properties;
 

File: main/src/com/google/refine/expr/HasFieldsList.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 /**
  * Interface for objects each of which is a list of HasFields objects of the

File: main/src/com/google/refine/expr/HasFieldsListImpl.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 import java.util.ArrayList;
 import java.util.Properties;

File: main/src/com/google/refine/expr/LanguageSpecificParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 public interface LanguageSpecificParser {
     public Evaluable parse(String s) throws ParsingException;

File: main/src/com/google/refine/expr/MetaParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 import java.io.StringReader;
 import java.util.HashMap;
@@ -8,7 +8,7 @@
 
 import clojure.lang.IFn;
 
-import com.google.gridworks.gel.Parser;
+import com.google.refine.gel.Parser;
 
 abstract public class MetaParser {
     static public class LanguageInfo {

File: main/src/com/google/refine/expr/ParsingException.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 public class ParsingException extends Exception {
     private static final long serialVersionUID = 155004505172098755L;

File: main/src/com/google/refine/expr/WrappedCell.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.expr;
+package com.google.refine.expr;
 
 import java.util.Properties;
 
-import com.google.gridworks.model.Cell;
-import com.google.gridworks.model.Project;
+import com.google.refine.model.Cell;
+import com.google.refine.model.Project;
 
 public class WrappedCell implements HasFields {
     final public Project project;

File: main/src/com/google/refine/expr/functions/HasField.java
Patch:
@@ -1,13 +1,13 @@
-package com.google.gridworks.expr.functions;
+package com.google.refine.expr.functions;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONWriter;
 
-import com.google.gridworks.expr.HasFields;
-import com.google.gridworks.gel.Function;
+import com.google.refine.expr.HasFields;
+import com.google.refine.gel.Function;
 
 public class HasField implements Function {
 

File: main/src/com/google/refine/expr/functions/Jsonize.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr.functions;
+package com.google.refine.expr.functions;
 
 import java.util.Collection;
 import java.util.Map;
@@ -9,7 +9,7 @@
 import org.json.JSONObject;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Jsonize implements Function {
 

File: main/src/com/google/refine/expr/functions/ToNumber.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.expr.functions;
+package com.google.refine.expr.functions;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.expr.EvalError;
-import com.google.gridworks.gel.Function;
+import com.google.refine.expr.EvalError;
+import com.google.refine.gel.Function;
 
 public class ToNumber implements Function {
 

File: main/src/com/google/refine/expr/functions/ToString.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr.functions;
+package com.google.refine.expr.functions;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -7,7 +7,7 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class ToString implements Function {
 

File: main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.arrays;
+package com.google.refine.expr.functions.arrays;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class ArgsToArray implements Function {
 

File: main/src/com/google/refine/expr/functions/booleans/And.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class And implements Function {
 

File: main/src/com/google/refine/expr/functions/booleans/Or.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.booleans;
+package com.google.refine.expr.functions.booleans;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Or implements Function {
 

File: main/src/com/google/refine/expr/functions/date/Now.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.expr.functions.date;
+package com.google.refine.expr.functions.date;
 
 import java.util.Calendar;
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Now implements Function {
 

File: main/src/com/google/refine/expr/functions/math/Exp.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Exp implements Function {
 

File: main/src/com/google/refine/expr/functions/math/Pow.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.math;
+package com.google.refine.expr.functions.math;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Pow implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/Chomp.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
 import org.apache.commons.lang.StringUtils;
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Chomp implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/Contains.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Contains implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/Partition.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 import java.util.regex.Matcher;
@@ -7,7 +7,7 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Partition implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/RPartition.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 import java.util.regex.Matcher;
@@ -7,7 +7,7 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class RPartition implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/Trim.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Trim implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/Unicode.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class Unicode implements Function {
 

File: main/src/com/google/refine/expr/functions/strings/UnicodeType.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.expr.functions.strings;
+package com.google.refine.expr.functions.strings;
 
 import java.util.Properties;
 
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.gel.Function;
+import com.google.refine.gel.Function;
 
 public class UnicodeType implements Function {
 

File: main/src/com/google/refine/expr/util/CalendarParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr.util;
+package com.google.refine.expr.util;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;

File: main/src/com/google/refine/expr/util/CalendarParserException.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.expr.util;
+package com.google.refine.expr.util;
 
 // Taken from http://icecube.wisc.edu/~dglo/software/calparse/index.html
 // Copyright Dave Glowacki. Released under the BSD license.

File: main/src/com/google/refine/gel/Control.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.gel;
+package com.google.refine.gel;
 
 import java.util.Properties;
 
-import com.google.gridworks.Jsonizable;
-import com.google.gridworks.expr.Evaluable;
+import com.google.refine.Jsonizable;
+import com.google.refine.expr.Evaluable;
 
 /**
  * Interface of GEL controls such as if, forEach, forNonBlank, with. A control can

File: main/src/com/google/refine/gel/Function.java
Patch:
@@ -1,8 +1,8 @@
-package com.google.gridworks.gel;
+package com.google.refine.gel;
 
 import java.util.Properties;
 
-import com.google.gridworks.Jsonizable;
+import com.google.refine.Jsonizable;
 
 /**
  * Interface for functions. When a function is called, its arguments have already

File: main/src/com/google/refine/gel/Scanner.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.gel;
+package com.google.refine.gel;
 
 public class Scanner {
     static public enum TokenType {

File: main/src/com/google/refine/gel/ast/ControlCallExpr.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.gel.ast;
+package com.google.refine.gel.ast;
 
 import java.util.Properties;
 
-import com.google.gridworks.expr.Evaluable;
-import com.google.gridworks.gel.Control;
+import com.google.refine.expr.Evaluable;
+import com.google.refine.gel.Control;
 
 /**
  * An abstract syntax tree node encapsulating a control call, such as "if".

File: main/src/com/google/refine/gel/ast/LiteralExpr.java
Patch:
@@ -1,10 +1,10 @@
-package com.google.gridworks.gel.ast;
+package com.google.refine.gel.ast;
 
 import java.util.Properties;
 
 import org.json.JSONObject;
 
-import com.google.gridworks.expr.Evaluable;
+import com.google.refine.expr.Evaluable;
 
 /**
  * An abstract syntax tree node encapsulating a literal value.

File: main/src/com/google/refine/gel/ast/OperatorCallExpr.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.gel.ast;
+package com.google.refine.gel.ast;
 
 import java.util.Properties;
 
-import com.google.gridworks.expr.Evaluable;
-import com.google.gridworks.expr.ExpressionUtils;
+import com.google.refine.expr.Evaluable;
+import com.google.refine.expr.ExpressionUtils;
 
 /**
  * An abstract syntax tree node encapsulating an operator call, such as "+".

File: main/src/com/google/refine/gel/ast/VariableExpr.java
Patch:
@@ -1,8 +1,8 @@
-package com.google.gridworks.gel.ast;
+package com.google.refine.gel.ast;
 
 import java.util.Properties;
 
-import com.google.gridworks.expr.Evaluable;
+import com.google.refine.expr.Evaluable;
 
 /**
  * An abstract syntax tree node encapsulating the retrieval of a variable's content.

File: main/src/com/google/refine/gel/controls/IsBlank.java
Patch:
@@ -1,6 +1,6 @@
-package com.google.gridworks.gel.controls;
+package com.google.refine.gel.controls;
 
-import com.google.gridworks.expr.ExpressionUtils;
+import com.google.refine.expr.ExpressionUtils;
 
 public class IsBlank extends IsTest {
     @Override

File: main/src/com/google/refine/gel/controls/IsError.java
Patch:
@@ -1,6 +1,6 @@
-package com.google.gridworks.gel.controls;
+package com.google.refine.gel.controls;
 
-import com.google.gridworks.expr.ExpressionUtils;
+import com.google.refine.expr.ExpressionUtils;
 
 public class IsError extends IsTest {
     @Override

File: main/src/com/google/refine/gel/controls/IsNonBlank.java
Patch:
@@ -1,6 +1,6 @@
-package com.google.gridworks.gel.controls;
+package com.google.refine.gel.controls;
 
-import com.google.gridworks.expr.ExpressionUtils;
+import com.google.refine.expr.ExpressionUtils;
 
 public class IsNonBlank extends IsTest {
     @Override

File: main/src/com/google/refine/gel/controls/IsNotNull.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.gel.controls;
+package com.google.refine.gel.controls;
 
 public class IsNotNull extends IsTest {
     @Override

File: main/src/com/google/refine/gel/controls/IsNull.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.gel.controls;
+package com.google.refine.gel.controls;
 
 public class IsNull extends IsTest {
     @Override

File: main/src/com/google/refine/gel/controls/IsNumeric.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.gel.controls;
+package com.google.refine.gel.controls;
 
 import org.apache.commons.lang.StringUtils;
 

File: main/src/com/google/refine/history/Change.java
Patch:
@@ -1,10 +1,10 @@
-package com.google.gridworks.history;
+package com.google.refine.history;
 
 import java.io.IOException;
 import java.io.Writer;
 import java.util.Properties;
 
-import com.google.gridworks.model.Project;
+import com.google.refine.model.Project;
 
 /**
  * Interface for a concrete change to a project's data. A change should consist

File: main/src/com/google/refine/history/ChangeSequence.java
Patch:
@@ -1,12 +1,12 @@
-package com.google.gridworks.history;
+package com.google.refine.history;
 
 import java.io.IOException;
 import java.io.LineNumberReader;
 import java.io.Writer;
 import java.util.Properties;
 
-import com.google.gridworks.model.Project;
-import com.google.gridworks.util.Pool;
+import com.google.refine.model.Project;
+import com.google.refine.util.Pool;
 
 public class ChangeSequence implements Change {
     final protected Change[] _changes;

File: main/src/com/google/refine/history/HistoryEntryManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.history;
+package com.google.refine.history;
 
 import java.io.Writer;
 import java.util.Properties;

File: main/src/com/google/refine/importers/ImportException.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.importers;
+package com.google.refine.importers;
 
 /**
  * Exception thrown by importers.  Typically contains a nested exception

File: main/src/com/google/refine/importers/Importer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.importers;
+package com.google.refine.importers;
 
 
 public interface Importer {

File: main/src/com/google/refine/importers/MarcImporter.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.importers;
+package com.google.refine.importers;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -14,8 +14,8 @@
 import org.marc4j.MarcXmlWriter;
 import org.marc4j.marc.Record;
 
-import com.google.gridworks.ProjectMetadata;
-import com.google.gridworks.model.Project;
+import com.google.refine.ProjectMetadata;
+import com.google.refine.model.Project;
 
 public class MarcImporter implements StreamImporter {
 

File: main/src/com/google/refine/importers/ReaderImporter.java
Patch:
@@ -1,10 +1,10 @@
-package com.google.gridworks.importers;
+package com.google.refine.importers;
 
 import java.io.Reader;
 import java.util.Properties;
 
-import com.google.gridworks.ProjectMetadata;
-import com.google.gridworks.model.Project;
+import com.google.refine.ProjectMetadata;
+import com.google.refine.model.Project;
 
 /**
  * Interface for importers which take a Reader as input.

File: main/src/com/google/refine/importers/StreamImporter.java
Patch:
@@ -1,10 +1,10 @@
-package com.google.gridworks.importers;
+package com.google.refine.importers;
 
 import java.io.InputStream;
 import java.util.Properties;
 
-import com.google.gridworks.ProjectMetadata;
-import com.google.gridworks.model.Project;
+import com.google.refine.ProjectMetadata;
+import com.google.refine.model.Project;
 
 public interface StreamImporter extends Importer {
 

File: main/src/com/google/refine/importers/UrlImporter.java
Patch:
@@ -1,10 +1,10 @@
-package com.google.gridworks.importers;
+package com.google.refine.importers;
 
 import java.net.URL;
 import java.util.Properties;
 
-import com.google.gridworks.ProjectMetadata;
-import com.google.gridworks.model.Project;
+import com.google.refine.ProjectMetadata;
+import com.google.refine.model.Project;
 
 public interface UrlImporter extends Importer {
 

File: main/src/com/google/refine/importers/parsers/RowParser.java
Patch:
@@ -1,9 +1,9 @@
-package com.google.gridworks.importers.parsers;
+package com.google.refine.importers.parsers;
 
 import java.io.LineNumberReader;
 import java.util.List;
 
-import com.google.gridworks.model.Row;
+import com.google.refine.model.Row;
 
 public abstract class RowParser {
     public abstract List<String> split(String line, LineNumberReader lineReader);

File: main/src/com/google/refine/io/ProjectMetadataUtilities.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.io;
+package com.google.refine.io;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -12,7 +12,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.gridworks.ProjectMetadata;
+import com.google.refine.ProjectMetadata;
 
 
 public class ProjectMetadataUtilities {

File: main/src/com/google/refine/logging/IndentingLayout.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.logging;
+package com.google.refine.logging;
 
 /*
  * Copyright (c) Massachusetts Institute of Technology, 2007 

File: main/src/com/google/refine/model/ColumnGroup.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
 import java.io.Writer;
 import java.util.LinkedList;
@@ -9,8 +9,8 @@
 import org.json.JSONObject;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
-import com.google.gridworks.util.ParsingUtilities;
+import com.google.refine.Jsonizable;
+import com.google.refine.util.ParsingUtilities;
 
 public class ColumnGroup implements Jsonizable {
     final public int    startColumnIndex;

File: main/src/com/google/refine/model/ColumnModel.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
 import java.io.IOException;
 import java.io.LineNumberReader;
@@ -15,7 +15,7 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
+import com.google.refine.Jsonizable;
 
 public class ColumnModel implements Jsonizable {
     final public List<Column>      columns = new LinkedList<Column>();

File: main/src/com/google/refine/model/ModelException.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
 public class ModelException extends Exception {
 	private static final long serialVersionUID = -168448967638065467L;

File: main/src/com/google/refine/model/OverlayModel.java
Patch:
@@ -1,6 +1,6 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
-import com.google.gridworks.Jsonizable;
+import com.google.refine.Jsonizable;
 
 public interface OverlayModel extends Jsonizable {
     public void onBeforeSave();

File: main/src/com/google/refine/model/ReconCandidate.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -10,8 +10,8 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
-import com.google.gridworks.expr.HasFields;
+import com.google.refine.Jsonizable;
+import com.google.refine.expr.HasFields;
 
 public class ReconCandidate implements HasFields, Jsonizable {
     final public String     id;

File: main/src/com/google/refine/model/Record.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
 public class Record {
 	final public int fromRowIndex;

File: main/src/com/google/refine/model/RecordModel.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.gridworks.model;
+package com.google.refine.model;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -9,8 +9,8 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.google.gridworks.Jsonizable;
-import com.google.gridworks.expr.ExpressionUtils;
+import com.google.refine.Jsonizable;
+import com.google.refine.expr.ExpressionUtils;
 
 public class RecordModel implements Jsonizable {
 	final static public class CellDependency {

File: main/src/com/google/refine/model/changes/CellAtRow.java
Patch:
@@ -1,11 +1,11 @@
-package com.google.gridworks.model.changes;
+package com.google.refine.model.changes;
 
 import java.io.IOException;
 import java.io.Writer;
 import java.util.Properties;
 
-import com.google.gridworks.model.Cell;
-import com.google.gridworks.util.Pool;
+import com.google.refine.model.Cell;
+import com.google.refine.util.Pool;
 
 public class CellAtRow {
 

File: main/src/com/google/gridworks/importers/ExcelImporter.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.poi.ss.usermodel.Workbook;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.model.Cell;
 import com.google.gridworks.model.Column;
 import com.google.gridworks.model.Project;
@@ -31,7 +32,7 @@ public class ExcelImporter implements StreamImporter {
     protected boolean _xmlBased;
 
     @Override
-    public void read(InputStream inputStream, Project project, Properties options) throws ImportException {
+    public void read(InputStream inputStream, Project project, ProjectMetadata metadata, Properties options) throws ImportException {
         int ignoreLines = ImporterUtilities.getIntegerOption("ignore", options, -1);
         int headerLines = ImporterUtilities.getIntegerOption("header-lines", options, 1);
         int limit = ImporterUtilities.getIntegerOption("limit", options, -1);

File: main/src/com/google/gridworks/importers/MarcImporter.java
Patch:
@@ -14,6 +14,7 @@
 import org.marc4j.MarcXmlWriter;
 import org.marc4j.marc.Record;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.model.Project;
 
 public class MarcImporter implements StreamImporter {
@@ -22,7 +23,7 @@ public class MarcImporter implements StreamImporter {
     public void read(
         InputStream inputStream,
         Project project,
-        Properties options
+        ProjectMetadata metadata, Properties options
     ) throws ImportException {
         int limit = ImporterUtilities.getIntegerOption("limit",options,-1);
         int skip = ImporterUtilities.getIntegerOption("skip",options,0);
@@ -68,7 +69,7 @@ public void read(
 
             InputStream is = new FileInputStream(tempFile);
             try {
-                new XmlImporter().read(is, project, options);
+                new XmlImporter().read(is, project, metadata, options);
             } finally {
                 try {
                     is.close();

File: main/src/com/google/gridworks/importers/RdfTripleImporter.java
Patch:
@@ -24,6 +24,7 @@
 import static org.jrdf.graph.AnyPredicateNode.ANY_PREDICATE_NODE;
 import static org.jrdf.graph.AnySubjectNode.ANY_SUBJECT_NODE;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.expr.ExpressionUtils;
 import com.google.gridworks.model.Cell;
 import com.google.gridworks.model.Column;
@@ -43,7 +44,7 @@ public RdfTripleImporter(){
     }
 
     @Override
-    public void read(Reader reader, Project project, Properties options) throws ImportException {
+    public void read(Reader reader, Project project, ProjectMetadata metadata, Properties options) throws ImportException {
         String baseUrl = options.getProperty("base-url");
 
         Graph graph = _jrdfFactory.getNewGraph();

File: main/src/com/google/gridworks/importers/StreamImporter.java
Patch:
@@ -3,17 +3,19 @@
 import java.io.InputStream;
 import java.util.Properties;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.model.Project;
 
 public interface StreamImporter extends Importer {
 
     /**
      * @param inputStream stream to be imported
      * @param project project to import stream into
+     * @param metadata metadata of new project
      * @param options
      * @throws ImportException
      */
     public void read(InputStream inputStream, Project project,
-            Properties options) throws ImportException;
+            ProjectMetadata metadata, Properties options) throws ImportException;
 
 }

File: main/src/com/google/gridworks/importers/UrlImporter.java
Patch:
@@ -3,11 +3,12 @@
 import java.net.URL;
 import java.util.Properties;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.model.Project;
 
 public interface UrlImporter extends Importer {
 
-    public void read(URL url, Project project, Properties options) throws Exception;
+    public void read(URL url, Project project, ProjectMetadata metadata, Properties options) throws Exception;
 
     public boolean canImportData(URL url);
 

File: main/src/com/google/gridworks/importers/XmlImporter.java
Patch:
@@ -9,6 +9,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.importers.XmlImportUtilities.ImportColumnGroup;
 import com.google.gridworks.model.Project;
 
@@ -22,7 +23,7 @@ public class XmlImporter implements StreamImporter {
     public void read(
         InputStream inputStream,
         Project project,
-        Properties options
+        ProjectMetadata metadata, Properties options
     ) throws ImportException {
         logger.trace("XmlImporter.read");
         PushbackInputStream pis = new PushbackInputStream(inputStream,BUFFER_SIZE);

File: main/tests/server/src/com/google/gridworks/tests/importers/TsvCsvImporterTests.java
Patch:
@@ -18,6 +18,7 @@
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.importers.TsvCsvImporter;
 import com.google.gridworks.model.Project;
 import com.google.gridworks.tests.GridworksTest;
@@ -464,7 +465,7 @@ public void readCsvWithProperties(){
         whenGetIntegerOption("ignore-quotes",properties,0);
 
         try {
-            SUT.read(reader, project, properties);
+            SUT.read(reader, project, new ProjectMetadata(), properties);
         } catch (Exception e) {
             Assert.fail();
         }
@@ -497,7 +498,7 @@ public void readCsvWithPropertiesIgnoreQuotes(){
         whenGetBooleanOption("ignore-quotes",properties,true);
 
         try {
-            SUT.read(reader, project, properties);
+            SUT.read(reader, project, new ProjectMetadata(), properties);
         } catch (Exception e) {
             Assert.fail();
         }

File: main/tests/server/src/com/google/gridworks/tests/importers/XmlImporterTests.java
Patch:
@@ -14,6 +14,7 @@
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import com.google.gridworks.ProjectMetadata;
 import com.google.gridworks.importers.XmlImporter;
 import com.google.gridworks.model.Project;
 import com.google.gridworks.model.Row;
@@ -223,7 +224,7 @@ private void RunTest(String testString){
         }
 
         try {
-            SUT.read(inputStream, project, options);
+            SUT.read(inputStream, project, new ProjectMetadata(), options);
         } catch (Exception e) {
             Assert.fail();
         }

File: main/src/com/google/gridworks/commands/project/ImportProjectCommand.java
Patch:
@@ -53,7 +53,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 
                 redirect(response, "/project?project=" + projectID);
             } else {
-                redirect(response, "/error.html?redirect=index.html&msg=" +
+                redirect(response, "/error.html?redirect=index&msg=" +
                     ParsingUtilities.encode("Failed to import project")
                 );
             }

File: main/src/com/google/gridworks/oauth/FreebaseTimeCommonsHttpOAuthConsumer.java
Patch:
@@ -53,7 +53,7 @@ protected String generateTimestamp() {
             HttpEntity entity = response.getEntity();
             if (entity != null) {
                 time = Long.parseLong(EntityUtils.toString(entity),10);
-                logger.info("Got remote timestamp {}", time);
+                logger.debug("Got remote timestamp {}", time);
             }
         } catch (IOException e) {
             logger.warn("Error obtaining the synchronized remote timestamp, defaulting to the local one",e);

File: main/src/com/google/gridworks/expr/functions/strings/Diff.java
Patch:
@@ -22,7 +22,7 @@ public Object call(Properties bindings, Object[] args) {
                 if (o1 instanceof String && o2 instanceof String) {
                     return StringUtils.difference((String) o1,(String) o2);
                 } else if ((o1 instanceof Date || o1 instanceof Calendar) && args.length == 3) {
-                    Object o3 = args[3];
+                    Object o3 = args[2];
                     if (o3 != null && o3 instanceof String) {
                         try {
                             String unit = ((String) o3).toLowerCase();

File: main/src/com/google/gridworks/importers/XmlImporter.java
Patch:
@@ -52,14 +52,14 @@ public void read(
             }
         }
 
-        if(recordPath == null)
+        if (recordPath == null)
             return;
-
+        
         ImportColumnGroup rootColumnGroup = new ImportColumnGroup();
 
         XmlImportUtilities.importXml(pis, project, recordPath, rootColumnGroup);
         XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);
-
+        
         project.columnModel.update();
     }
 

File: main/src/com/google/gridworks/model/RecordModel.java
Patch:
@@ -164,7 +164,7 @@ protected List<KeyedGroup> computeKeyedGroups(ColumnModel columnModel) {
                 int c = 0;
                 for (int i = 0; i < group.columnSpan; i++) {
                     int columnIndex = group.startColumnIndex + i;
-                    if (columnIndex != group.keyColumnIndex) {
+                    if (columnIndex != group.keyColumnIndex && columnIndex < columnModel.columns.size()) {
                         int cellIndex = columnModel.columns.get(columnIndex).getCellIndex();
                         keyedGroup.cellIndices[c++] = cellIndex;
                     }

File: main/tests/server/src/com/google/gridworks/tests/importers/XmlImportUtilitiesStub.java
Patch:
@@ -26,7 +26,7 @@ public void processRecordWrapper(Project project, XMLStreamReader parser, Import
         super.processRecord(project, parser, rootColumnGroup);
     }
 
-    public void addCellWrapper(Project project, ImportColumnGroup columnGroup, ImportRecord record, String columnLocalName, String text, int commonStartingRowIndex){
-        super.addCell(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);
+    public void addCellWrapper(Project project, ImportColumnGroup columnGroup, ImportRecord record, String columnLocalName, String text, int commonStartingRowIndex) {
+        super.addCell(project, columnGroup, record, columnLocalName, text);
     }
 }

File: main/src/com/google/gridworks/model/Row.java
Patch:
@@ -88,7 +88,7 @@ public boolean isCellBlank(int cellIndex) {
     }
     
     protected boolean isValueBlank(Object value) {
-        return value == null || !(value instanceof String) || ((String) value).trim().length() == 0;
+        return value == null || (value instanceof String && ((String) value).trim().length() == 0);
     }
     
     public void setCell(int cellIndex, Cell cell) {

File: main/src/com/google/gridworks/operations/cell/BlankDownOperation.java
Patch:
@@ -48,13 +48,13 @@ public void write(JSONWriter writer, Properties options)
     }
 
     protected String getBriefDescription(Project project) {
-        return "Fill down cells in column " + _columnName;
+        return "Blank down cells in column " + _columnName;
     }
 
     protected String createDescription(Column column,
             List<CellChange> cellChanges) {
         
-        return "Fill down " + cellChanges.size() + 
+        return "Blank down " + cellChanges.size() + 
             " cells in column " + column.getName();
     }
 

File: main/src/com/google/gridworks/GridworksServlet.java
Patch:
@@ -74,6 +74,7 @@ public class GridworksServlet extends Butterfly {
         {"fill-down", "com.google.gridworks.commands.cell.FillDownCommand"},
         {"blank-down", "com.google.gridworks.commands.cell.BlankDownCommand"},
         {"transpose-columns-into-rows", "com.google.gridworks.commands.cell.TransposeColumnsIntoRowsCommand"},
+        {"transpose-rows-into-columns", "com.google.gridworks.commands.cell.TransposeRowsIntoColumnsCommand"},
 
         {"add-column", "com.google.gridworks.commands.column.AddColumnCommand"},
         {"remove-column", "com.google.gridworks.commands.column.RemoveColumnCommand"},

File: main/src/com/google/gridworks/operations/OperationRegistry.java
Patch:
@@ -14,6 +14,7 @@
 import com.google.gridworks.operations.cell.MultiValuedCellSplitOperation;
 import com.google.gridworks.operations.cell.TextTransformOperation;
 import com.google.gridworks.operations.cell.TransposeColumnsIntoRowsOperation;
+import com.google.gridworks.operations.cell.TransposeRowsIntoColumnsOperation;
 import com.google.gridworks.operations.column.ColumnAdditionOperation;
 import com.google.gridworks.operations.column.ColumnMoveOperation;
 import com.google.gridworks.operations.column.ColumnRemovalOperation;
@@ -54,6 +55,7 @@ static public void register(String name, Class<? extends AbstractOperation> klas
         register("multivalued-cell-split", MultiValuedCellSplitOperation.class);
         register("fill-down", FillDownOperation.class);
         register("transpose-columns-into-rows", TransposeColumnsIntoRowsOperation.class);
+        register("transpose-rows-into-columns", TransposeRowsIntoColumnsOperation.class);
         
         register("column-addition", ColumnAdditionOperation.class);
         register("column-removal", ColumnRemovalOperation.class);

File: main/src/com/google/gridworks/ProjectManager.java
Patch:
@@ -344,7 +344,7 @@ public PreferenceStore getPreferenceStore() {
      * @return
      */
     public List<String> getExpressions() {
-        return ((TopList) _preferenceStore.get("expressions")).getList();
+        return ((TopList) _preferenceStore.get("scripting.expressions")).getList();
     }
 
     /**
@@ -406,7 +406,7 @@ public void setBusy(boolean busy) {
      */
     public void addLatestExpression(String s) {
         synchronized (this) {
-            ((TopList) _preferenceStore.get("expressions")).add(s);
+            ((TopList) _preferenceStore.get("scripting.expressions")).add(s);
         }
     }
 

File: main/src/com/google/gridworks/ProjectMetadata.java
Patch:
@@ -95,9 +95,9 @@ static public ProjectMetadata loadFromJSON(JSONObject obj) {
             }
         }
         
-        if (obj.has("expressions") && !obj.isNull("expressions")) {
+        if (obj.has("expressions") && !obj.isNull("expressions")) { // backward compatibility
             try {
-                ((TopList) pm._preferenceStore.get("expressions"))
+                ((TopList) pm._preferenceStore.get("scripting.expressions"))
                     .load(obj.getJSONArray("expressions"));
             } catch (JSONException e) {
                 // ignore

File: main/src/com/metaweb/gridworks/expr/functions/arrays/Sort.java
Patch:
@@ -28,7 +28,7 @@ public Object call(Properties bindings, Object[] args) {
                     
                     return r;
                 } else if (v instanceof List<?>) {
-                    List<? extends Comparable> a = (List<? extends Comparable>) v;
+                    List<? extends Comparable<Object>> a = (List<? extends Comparable<Object>>) v;
                     Collections.sort(a);
                     
                     return a;

File: main/src/com/metaweb/gridworks/gel/ControlFunctionRegistry.java
Patch:
@@ -53,6 +53,7 @@
 import com.metaweb.gridworks.expr.functions.strings.Replace;
 import com.metaweb.gridworks.expr.functions.strings.ReplaceChars;
 import com.metaweb.gridworks.expr.functions.strings.SHA1;
+import com.metaweb.gridworks.expr.functions.strings.SmartSplit;
 import com.metaweb.gridworks.expr.functions.strings.Split;
 import com.metaweb.gridworks.expr.functions.strings.SplitByCharType;
 import com.metaweb.gridworks.expr.functions.strings.SplitByLengths;
@@ -133,6 +134,7 @@ static public void registerControl(String name, Control c) {
         registerFunction("replace", new Replace());
         registerFunction("replaceChars", new ReplaceChars());
         registerFunction("split", new Split());
+        registerFunction("smartSplit", new SmartSplit());
         registerFunction("splitByCharType", new SplitByCharType());
         registerFunction("splitByLengths", new SplitByLengths());
         registerFunction("partition", new Partition());

File: main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Patch:
@@ -66,9 +66,9 @@ public boolean visit(Project project, int rowIndex, Row row) {
                     int cellIndex = col.getCellIndex();
                     cols[i] = col.getName();
 
-                    Cell cell = row.cells.get(cellIndex);
-                    if(cell != null){
-                        vals[i] = cell.value.toString();
+                    Object value = row.getCellValue(cellIndex);
+                    if(value != null){
+                        vals[i] = value instanceof String ? (String) value : value.toString();
                     }
                     i++;
                 }

File: main/src/com/metaweb/gridworks/expr/functions/math/Mod.java
Patch:
@@ -16,7 +16,7 @@ public Object call(Properties bindings, Object[] args) {
                 args[0] != null && args[0] instanceof Number && 
                 args[1] != null && args[1] instanceof Number) {
             int a = ((Number) args[0]).intValue();
-            int b = ((Number) args[0]).intValue();
+            int b = ((Number) args[1]).intValue();
             
             return a % b;
         }

File: main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Patch:
@@ -42,7 +42,7 @@ public void export(Project project, Properties options, Engine engine, OutputStr
     public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {
         boolean printColumnHeader = true;
 
-        if (options != null) {
+        if (options != null && options.getProperty("printColumnHeader") != null) {
             printColumnHeader = Boolean.parseBoolean(options.getProperty("printColumnHeader"));
         }
 

File: main/src/com/metaweb/gridworks/io/FileProjectManager.java
Patch:
@@ -49,7 +49,7 @@ static public synchronized void initialize(File dir) {
 
     }
 
-    private FileProjectManager(File dir) {
+    protected FileProjectManager(File dir) {
         _workspaceDir = dir;
         _workspaceDir.mkdirs();
 

File: main/src/com/metaweb/gridworks/commands/project/ImportProjectCommand.java
Patch:
@@ -57,7 +57,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
                     }
                 }
 
-                redirect(response, "/project.html?project=" + projectID);
+                redirect(response, "/project?project=" + projectID);
             } else {
                 redirect(response, "/error.html?redirect=index.html&msg=" +
                     ParsingUtilities.encode("Failed to import project")

File: main/src/com/metaweb/gridworks/importers/XmlImporter.java
Patch:
@@ -57,6 +57,9 @@ public void read(
             }
         }
 
+        if(recordPath == null)
+            return;
+
         ImportColumnGroup rootColumnGroup = new ImportColumnGroup();
 
         XmlImportUtilities.importXml(pis, project, recordPath, rootColumnGroup);

File: src/main/java/com/metaweb/gridworks/importers/TsvCsvImporter.java
Patch:
@@ -5,6 +5,7 @@
 import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.io.Reader;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
@@ -112,7 +113,8 @@ public void read(LineNumberReader lnReader, Project project, String sep, int lim
                     for(String s : cells){
                         s = s.trim();
                         if (ExpressionUtils.isNonBlankData(s)) {
-                            row.cells.add(new Cell(s, null));
+                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;
+                            row.cells.add(new Cell(value, null));
                         }else{
                             row.cells.add(null);
                         }

File: src/main/java/com/metaweb/gridworks/gel/Parser.java
Patch:
@@ -165,7 +165,7 @@ protected Evaluable parseFactor() throws ParsingException {
             next(false);
             
             if (_token == null || _token.type != TokenType.Delimiter || !_token.text.equals("(")) {
-                eval = new VariableExpr(text);
+                eval = "null".equals(text) ? new LiteralExpr(null) : new VariableExpr(text);
             } else {
                 Function f = ControlFunctionRegistry.getFunction(text);
                 Control c = ControlFunctionRegistry.getControl(text);

File: src/main/java/com/metaweb/gridworks/exporters/TripleloaderExporter.java
Patch:
@@ -33,7 +33,7 @@ public void export(Project project, Properties options, Engine engine,
             
             TripleLoaderTransposedNodeFactory nodeFactory = new TripleLoaderTransposedNodeFactory(writer);
             
-            Transposer.transpose(project, protograph, protograph.getRootNode(0), nodeFactory, -1);
+            Transposer.transpose(project, engine.getAllFilteredRows(), protograph, protograph.getRootNode(0), nodeFactory, -1);
             nodeFactory.flush();
         }
     }

File: src/main/java/com/metaweb/gridworks/exporters/CsvExporter.java
Patch:
@@ -48,7 +48,7 @@ public boolean visit(Project project, int rowIndex, Row row) {
                         for(int i = 0; i < cols.length; i++){
                             cols[i] = project.columnModel.columns.get(i).getName();
                         }
-                        csvWriter.writeNext(cols);
+                        csvWriter.writeNext(cols,false);
                         columnHeader = false; //switch off flag
                     }
 
@@ -60,7 +60,7 @@ public boolean visit(Project project, int rowIndex, Row row) {
                         }
                     }
 
-                    csvWriter.writeNext(vals);
+                    csvWriter.writeNext(vals,false);
                     return false;
                 }
 

File: src/main/java/com/metaweb/gridworks/gel/ControlFunctionRegistry.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map.Entry;
 
 import com.metaweb.gridworks.expr.functions.Cross;
+import com.metaweb.gridworks.expr.functions.FacetCount;
 import com.metaweb.gridworks.expr.functions.Get;
 import com.metaweb.gridworks.expr.functions.Length;
 import com.metaweb.gridworks.expr.functions.Slice;
@@ -175,6 +176,8 @@ static protected void registerControl(String name, Control c) {
         
         registerFunction("cross", new Cross());
 
+        registerFunction("facetCount", new FacetCount());
+        
         registerControl("if", new If());
         registerControl("with", new With());
         registerControl("forEach", new ForEach());

File: src/main/java/com/metaweb/gridworks/sorting/Criterion.java
Patch:
@@ -33,7 +33,7 @@ public void initializeFromJSON(Project project, JSONObject obj) throws JSONExcep
 			blankPosition = obj.getInt("blankPosition");
 		}
 		if (obj.has("errorPosition") && !obj.isNull("errorPosition")) {
-			blankPosition = obj.getInt("errorPosition");
+			errorPosition = obj.getInt("errorPosition");
 		}
 		
 		if (obj.has("reverse") && !obj.isNull("reverse")) {

File: tests/java/src/com/metaweb/gridworks/tests/GridworksServletStub.java
Patch:
@@ -37,14 +37,14 @@ public String wrapGetCommandName(HttpServletRequest request){
      * @param command
      */
     static public void InsertCommand( String commandName, Command command ){
-        _commands.put(commandName, command);
+        registerCommand(commandName, command);
     }
 
     /**
      * Helper method for clearing up after testing
      * @param commandName
      */
     static public void RemoveCommand( String commandName ){
-        _commands.remove(commandName);
+        unregisterCommand(commandName);
     }
 }

File: src/main/java/com/metaweb/gridworks/model/Project.java
Patch:
@@ -62,7 +62,7 @@ public ProjectMetadata getMetadata() {
         return ProjectManager.singleton.getProjectMetadata(id);
     }
     
-    public void save() {
+    synchronized public void save() {
         synchronized (this) {
             File dir = ProjectManager.singleton.getProjectDir(id);
             
@@ -257,7 +257,7 @@ static protected class Group {
         int     keyCellIndex;
     }
     
-    public void recomputeRowContextDependencies() {
+    synchronized public void recomputeRowContextDependencies() {
         List<Group> keyedGroups = new ArrayList<Group>();
         
         addRootKeyedGroup(keyedGroups);

File: src/main/java/com/metaweb/gridworks/protograph/transpose/MqlreadLikeTransposedNodeFactory.java
Patch:
@@ -17,6 +17,7 @@
 import com.metaweb.gridworks.protograph.FreebaseProperty;
 import com.metaweb.gridworks.protograph.FreebaseTopicNode;
 import com.metaweb.gridworks.protograph.ValueNode;
+import com.metaweb.gridworks.util.JSONUtilities;
 
 public class MqlreadLikeTransposedNodeFactory implements TransposedNodeFactory {
     protected List<JSONObject> rootObjects = new LinkedList<JSONObject>();
@@ -126,7 +127,8 @@ public Object getJSON() {
             if (obj == null) {
                 obj = new JSONObject();
                 try {
-                    obj.put(VALUE, cell.value.toString());
+                	JSONUtilities.putField(obj, VALUE, cell.value);
+                	
                     obj.put(TYPE, node.valueType);
                     if ("/type/text".equals(node.valueType)) {
                         obj.put(LANG, node.lang);

File: src/main/java/com/metaweb/gridworks/GridworksServlet.java
Patch:
@@ -57,6 +57,7 @@
 import com.metaweb.gridworks.commands.project.GetModelsCommand;
 import com.metaweb.gridworks.commands.project.GetProjectMetadataCommand;
 import com.metaweb.gridworks.commands.project.ImportProjectCommand;
+import com.metaweb.gridworks.commands.project.RenameProjectCommand;
 import com.metaweb.gridworks.commands.recon.ReconDiscardJudgmentsCommand;
 import com.metaweb.gridworks.commands.recon.ReconJudgeOneCellCommand;
 import com.metaweb.gridworks.commands.recon.ReconJudgeSimilarCellsCommand;
@@ -92,6 +93,7 @@ public class GridworksServlet extends HttpServlet {
         _commands.put("get-all-project-metadata", new GetAllProjectMetadataCommand());
 
         _commands.put("delete-project", new DeleteProjectCommand());
+        _commands.put("rename-project", new RenameProjectCommand());
         
         _commands.put("get-models", new GetModelsCommand());
         _commands.put("get-rows", new GetRowsCommand());

File: src/main/java/com/metaweb/gridworks/importers/TsvCsvImporter.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.apache.commons.lang.StringUtils;
 
-import com.metaweb.gridworks.importers.parsers.CSVRowParser;
+import com.metaweb.gridworks.importers.parsers.TsvCsvRowParser;
 import com.metaweb.gridworks.importers.parsers.NonSplitRowParser;
 import com.metaweb.gridworks.importers.parsers.RowParser;
 import com.metaweb.gridworks.importers.parsers.SeparatorRowParser;
@@ -57,10 +57,10 @@ public void read(RowParser parser, LineNumberReader lnReader, Project project, S
                     int tab = line.indexOf('\t');
                     if (tab >= 0) {
                         sep = "\t";
-                        parser = new SeparatorRowParser(sep);
+                        parser = new TsvCsvRowParser('\t');
                     } else {
                         sep = ",";
-                        parser = new CSVRowParser();
+                        parser = new TsvCsvRowParser(',');
                     }
                 } else {
                     parser = new NonSplitRowParser();

File: tests/java/src/com/metaweb/gridworks/tests/importers/parsers/CSVRowParserTests.java
Patch:
@@ -16,7 +16,7 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import com.metaweb.gridworks.importers.parsers.CSVRowParser;
+import com.metaweb.gridworks.importers.parsers.TsvCsvRowParser;
 
 public class CSVRowParserTests {
     // logging
@@ -32,15 +32,15 @@ public class CSVRowParserTests {
     String SAMPLE_CSV = SAMPLE_ROW + "\n" + ROW_WITH_QUOTED_COMMA;  //Unix line endings?
 
     //System Under Test
-    CSVRowParser SUT = null;
+    TsvCsvRowParser SUT = null;
 
     //mocked dependencies
     LineNumberReader lineReader = null;
 
     @BeforeMethod
     public void SetUp(){
         lineReader = mock(LineNumberReader.class);
-        SUT = new CSVRowParser();
+        SUT = new TsvCsvRowParser(',');
     }
 
     @AfterMethod

File: src/main/java/com/metaweb/gridworks/importers/parsers/CSVRowParser.java
Patch:
@@ -27,6 +27,7 @@ public List<String> split(String line, LineNumberReader lineReader) {
                     int quote = line.indexOf('"', start);
                     if (quote < 0) {
                         sb.append(line.substring(start));
+                        sb.append('\n');
                         
                         start = 0;
                         try {

File: src/main/java/com/metaweb/gridworks/importers/ImporterUtilities.java
Patch:
@@ -32,6 +32,7 @@ static public Serializable parseCellValue(String text) {
                 }
             } catch (NumberFormatException e) {
             }
+            text = text.trim();
         }
         return text;
     }
@@ -91,7 +92,7 @@ static public void setupColumns(Project project, List<String> columnNames) {
             if (cell.isEmpty()) {
                 cell = "Column";
             } else if (cell.startsWith("\"") && cell.endsWith("\"")) {
-                cell = cell.substring(1, cell.length() - 1).trim();
+                cell = cell.substring(1, cell.length() - 1).trim(); //FIXME is trimming quotation marks appropriate?
             }
 
             if (nameToIndex.containsKey(cell)) {

File: tests/java/src/com/metaweb/gridworks/tests/commands/CommandStub.java
Patch:
@@ -5,7 +5,6 @@
 
 import org.json.JSONException;
 import org.json.JSONObject;
-import org.junit.Ignore;
 
 import com.metaweb.gridworks.browsing.Engine;
 import com.metaweb.gridworks.commands.Command;
@@ -14,7 +13,6 @@
 /**
  * Implementation of abstract class for testing Exposes protected members as public
  */
-@Ignore
 public class CommandStub extends Command {
 
     public Project wrapGetProject(HttpServletRequest request)

File: tests/java/src/com/metaweb/gridworks/tests/util/ParsingUtilitiesTests.java
Patch:
@@ -2,10 +2,10 @@
 
 import org.json.JSONException;
 import org.json.JSONObject;
-import org.junit.Assert;
-import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.testng.Assert;
+import org.testng.annotations.Test;
 
 import com.metaweb.gridworks.util.ParsingUtilities;
 

File: src/main/java/com/metaweb/gridworks/commands/Command.java
Patch:
@@ -10,7 +10,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.lang.NotImplementedException;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONWriter;
@@ -36,13 +35,13 @@ public abstract class Command {
     public void doPost(HttpServletRequest request, HttpServletResponse response)
         throws ServletException, IOException {
 
-        throw new NotImplementedException();
+        throw new UnsupportedOperationException();
     };
 
     public void doGet(HttpServletRequest request, HttpServletResponse response)
         throws ServletException, IOException {
 
-        throw new NotImplementedException();
+        throw new UnsupportedOperationException();
     };
 
     /**

File: src/main/java/com/metaweb/gridworks/importers/ExcelImporter.java
Patch:
@@ -10,7 +10,6 @@
 import java.util.Map;
 import java.util.Properties;
 
-import org.apache.commons.lang.NotImplementedException;
 import org.apache.poi.common.usermodel.Hyperlink;
 import org.apache.poi.hssf.usermodel.HSSFDateUtil;
 import org.apache.poi.hssf.usermodel.HSSFWorkbook;
@@ -39,7 +38,7 @@ public boolean takesReader() {
     }
     
     public void read(Reader reader, Project project, Properties options) throws Exception {
-        throw new NotImplementedException();
+        throw new UnsupportedOperationException();
     }
 
     public void read(InputStream inputStream, Project project, Properties options) throws Exception {
@@ -53,7 +52,7 @@ public void read(InputStream inputStream, Project project, Properties options) t
                 new XSSFWorkbook(inputStream) : 
                 new HSSFWorkbook(new POIFSFileSystem(inputStream));
         } catch (IOException e) {
-            throw new IOException(
+            throw new Exception(
                 "Attempted to parse file as Excel file but failed. " +
                 "Try to use Excel to re-save the file as a different Excel version or as TSV and upload again.",
                 e

File: src/main/java/com/metaweb/gridworks/importers/MarcImporter.java
Patch:
@@ -8,7 +8,6 @@
 import java.io.Reader;
 import java.util.Properties;
 
-import org.apache.commons.lang.NotImplementedException;
 import org.marc4j.MarcPermissiveStreamReader;
 import org.marc4j.MarcWriter;
 import org.marc4j.MarcXmlWriter;
@@ -25,7 +24,7 @@ public boolean takesReader() {
     public void read(Reader reader, Project project, Properties options)
         throws Exception {
     
-        throw new NotImplementedException();
+        throw new UnsupportedOperationException();
     }
 
     public void read(

File: src/main/java/com/metaweb/gridworks/importers/TsvCsvImporter.java
Patch:
@@ -7,7 +7,6 @@
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.commons.lang.NotImplementedException;
 import org.apache.commons.lang.StringUtils;
 
 import com.metaweb.gridworks.importers.parsers.CSVRowParser;
@@ -94,7 +93,7 @@ public void read(Reader reader, Project project, Properties options) throws Exce
     }
 
     public void read(InputStream inputStream, Project project, Properties options) throws Exception {
-        throw new NotImplementedException();
+        throw new UnsupportedOperationException();
     }
 
     public boolean takesReader() {

File: src/main/java/com/metaweb/gridworks/importers/XmlImporter.java
Patch:
@@ -6,8 +6,6 @@
 import java.io.Reader;
 import java.util.Properties;
 
-import org.apache.commons.lang.NotImplementedException;
-
 import com.metaweb.gridworks.importers.XmlImportUtilities.ImportColumnGroup;
 import com.metaweb.gridworks.model.Project;
 
@@ -22,7 +20,7 @@ public boolean takesReader() {
     public void read(Reader reader, Project project, Properties options)
             throws Exception {
         
-        throw new NotImplementedException();
+        throw new UnsupportedOperationException();
     }
 
     public void read(

File: src/main/java/com/metaweb/gridworks/operations/ColumnSplitOperation.java
Patch:
@@ -11,8 +11,6 @@
 import org.json.JSONObject;
 import org.json.JSONWriter;
 
-import sun.reflect.generics.reflectiveObjects.NotImplementedException;
-
 import com.metaweb.gridworks.browsing.Engine;
 import com.metaweb.gridworks.browsing.FilteredRows;
 import com.metaweb.gridworks.browsing.RowVisitor;
@@ -260,7 +258,7 @@ public boolean visit(Project project, int rowIndex, Row row, boolean includeCont
         }
         
         protected List<Serializable> split(String s) {
-            throw new NotImplementedException();
+            throw new UnsupportedOperationException();
         }
         
         protected Serializable stringToValue(String s) {

File: src/main/java/com/metaweb/gridworks/commands/util/CancelProcessesCommand.java
Patch:
@@ -17,7 +17,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         
         try {
             Project project = getProject(request);
-            project.processManager.cancelAll();
+            project.getProcessManager().cancelAll();
             
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");

File: src/main/java/com/metaweb/gridworks/commands/edit/EditOneCellCommand.java
Patch:
@@ -27,6 +27,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
         
         try {
+            request.setCharacterEncoding("UTF-8");
+            response.setCharacterEncoding("UTF-8");
+            
             Project project = getProject(request);
             
             int rowIndex = Integer.parseInt(request.getParameter("row"));

File: src/main/java/com/metaweb/gridworks/model/Recon.java
Patch:
@@ -141,7 +141,9 @@ public void setFeature(int feature, Object v) {
     }
     
     public Object getField(String name, Properties bindings) {
-        if ("best".equals(name)) {
+    	if ("id".equals(name)) {
+    		return id;
+    	} else if ("best".equals(name)) {
             return candidates != null && candidates.size() > 0 ? candidates.get(0) : null;
         } else if ("candidates".equals(name)) {
             return candidates;

File: src/main/java/com/metaweb/gridworks/model/changes/MassChange.java
Patch:
@@ -49,7 +49,7 @@ public void save(Writer writer, Properties options) throws IOException {
         writer.write("updateRowContextDependencies="); writer.write(Boolean.toString(_updateRowContextDependencies)); writer.write('\n');
         writer.write("changeCount="); writer.write(Integer.toString(_changes.size())); writer.write('\n');
         for (Change c : _changes) {
-            c.save(writer, options);
+        	History.writeOneChange(writer, c, options);
         }
         writer.write("/ec/\n"); // end of change marker
     }

File: src/main/java/com/metaweb/gridworks/importers/TsvCsvImporter.java
Patch:
@@ -64,7 +64,7 @@ public void read(Reader reader, Project project, Properties options) throws Exce
             if (headerLines > 0) {
                 headerLines--;
                 
-                List<String> cells = parser.split(line);
+                List<String> cells = parser.split(line, lnReader);
                 for (int c = 0; c < cells.size(); c++) {
                     String cell = cells.get(c).trim();
                     
@@ -73,7 +73,7 @@ public void read(Reader reader, Project project, Properties options) throws Exce
             } else {
                 Row row = new Row(columnNames.size());
                 
-                if (parser.parseRow(row, line, guessValueType)) {
+                if (parser.parseRow(row, line, guessValueType, lnReader)) {
                     rowsWithData++;
                     
                     if (skip <= 0 || rowsWithData > skip) {

File: src/main/java/com/metaweb/gridworks/importers/parsers/NonSplitRowParser.java
Patch:
@@ -1,5 +1,6 @@
 package com.metaweb.gridworks.importers.parsers;
 
+import java.io.LineNumberReader;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
@@ -11,15 +12,15 @@
 
 public class NonSplitRowParser extends RowParser {
 
-    public List<String> split(String line) {
+    public List<String> split(String line, LineNumberReader lineReader) {
         List<String> results = new ArrayList<String>(1);
         
         results.add(line.trim());
         
         return results;
     }
     
-    public boolean parseRow(Row row, String line, boolean guessValueType) {
+    public boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader) {
         line = line.trim();
         if (line.isEmpty()) {
             return false;

File: src/main/java/com/metaweb/gridworks/importers/parsers/RowParser.java
Patch:
@@ -1,11 +1,12 @@
 package com.metaweb.gridworks.importers.parsers;
 
+import java.io.LineNumberReader;
 import java.util.List;
 
 import com.metaweb.gridworks.model.Row;
 
 public abstract class RowParser {
-    public abstract List<String> split(String line);
+    public abstract List<String> split(String line, LineNumberReader lineReader);
     
-    public abstract boolean parseRow(Row row, String line, boolean guessValueType);
+    public abstract boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader);
 }

File: src/main/java/com/metaweb/gridworks/importers/parsers/SeparatorRowParser.java
Patch:
@@ -1,5 +1,6 @@
 package com.metaweb.gridworks.importers.parsers;
 
+import java.io.LineNumberReader;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
@@ -19,7 +20,7 @@ public SeparatorRowParser(String sep) {
         this.sep = sep;
     }
     
-    public List<String> split(String line) {
+    public List<String> split(String line, LineNumberReader lineReader) {
         String[] cells = StringUtils.splitPreserveAllTokens(line, sep);
         
         List<String> results = new ArrayList<String>();
@@ -30,7 +31,7 @@ public List<String> split(String line) {
         return results;
     }
     
-    public boolean parseRow(Row row, String line, boolean guessValueType) {
+    public boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader) {
         boolean hasData = false;
         
         String[] cells = StringUtils.splitPreserveAllTokens(line, sep);

File: src/main/java/com/metaweb/gridworks/protograph/transpose/MqlreadLikeTransposedNodeFactory.java
Patch:
@@ -1,7 +1,5 @@
 package com.metaweb.gridworks.protograph.transpose;
 
-import java.io.OutputStreamWriter;
-import java.io.Writer;
 import java.util.LinkedList;
 import java.util.List;
 

File: src/main/java/com/metaweb/gridworks/oauth/OAuthUtilities.java
Patch:
@@ -7,7 +7,6 @@
 
 import oauth.signpost.OAuthConsumer;
 import oauth.signpost.OAuthProvider;
-import oauth.signpost.commonshttp.CommonsHttpOAuthConsumer;
 import oauth.signpost.commonshttp.CommonsHttpOAuthProvider;
 import oauth.signpost.http.HttpParameters;
 
@@ -44,7 +43,7 @@ public static OAuthConsumer getConsumer(Provider provider) {
         if (provider == null) throw new RuntimeException("Provider can't be null");
         String[] consumer_info = infos.get(provider.getHost());
         if (consumer_info == null) throw new RuntimeException("Can't find secrets for provider '" + provider.getHost() + "'");
-        OAuthConsumer oauthConsumer = new CommonsHttpOAuthConsumer(consumer_info[0],consumer_info[1]);
+        OAuthConsumer oauthConsumer = new FreebaseTimeCommonsHttpOAuthConsumer(consumer_info[0],consumer_info[1]);
         HttpParameters params = new HttpParameters();
         params.put("realm", provider.getHost());
         oauthConsumer.setAdditionalParameters(params);

File: src/main/java/com/metaweb/gridworks/model/Cell.java
Patch:
@@ -137,8 +137,8 @@ static public Cell loadStreaming(JsonParser jp, Pool pool) throws Exception {
             }
         }
         
-        if (value != null && type != null) {
-            if ("date".equals(type)) {
+        if (value != null) {
+            if (type != null && "date".equals(type)) {
                 value = ParsingUtilities.stringToDate((String) value); 
             }
             return new Cell(value, recon);

File: src/main/java/com/metaweb/gridworks/GridworksServlet.java
Patch:
@@ -78,9 +78,9 @@ public class GridworksServlet extends HttpServlet {
     static final protected Map<String, Command> _commands = new HashMap<String, Command>();
     
     // timer for periodically saving projects
-    static protected Timer _timer;
+    static private Timer _timer;
 
-    final Logger logger = LoggerFactory.getLogger("servlet");
+    final static Logger logger = LoggerFactory.getLogger("servlet");
     
     static {
         _commands.put("create-project-from-upload", new CreateProjectCommand());

File: src/main/java/com/metaweb/gridworks/commands/edit/CreateProjectCommand.java
Patch:
@@ -181,7 +181,8 @@ protected void internalImportFile(
             // better than nothing
             HashMap<String,Integer> ext_map = new HashMap<String,Integer>();
 
-            InputStream is = getStream(fileName, new FileInputStream(file));
+            FileInputStream fis = new FileInputStream(file);
+            InputStream is = getStream(fileName, fis);
             
             // NOTE(SM): unfortunately, java.io does not provide any generalized class for 
             // archive-like input streams so while both TarInputStream and ZipInputStream 
@@ -209,6 +210,7 @@ protected void internalImportFile(
             } finally {
                 try {
                     is.close();
+                    fis.close();
                 } catch (IOException e) {}
             }
 

File: src/main/java/com/metaweb/gridworks/expr/functions/Get.java
Patch:
@@ -42,7 +42,7 @@ public Object call(Properties bindings, Object[] args) {
                                         ((Object[]) v)[start] :
                                         ExpressionUtils.toObjectList(v).get(start));
                             } else {
-                                int end = (to != null && to instanceof Number) ? ((Number) to).intValue() : length;
+                                int end = (to != null) ? ((Number) to).intValue() : length;
                                             
                                 if (end < 0) {
                                     end = length + end;
@@ -70,7 +70,7 @@ public Object call(Properties bindings, Object[] args) {
                             }
                             start = Math.min(s.length(), Math.max(0, start));
                             
-                            if (to != null && to instanceof Number) {
+                            if (to != null) {
                                 int end = ((Number) to).intValue();
                                 if (end < 0) {
                                     end = s.length() + end;

File: src/main/java/com/metaweb/gridworks/expr/functions/Slice.java
Patch:
@@ -24,7 +24,7 @@ public Object call(Properties bindings, Object[] args) {
                             ExpressionUtils.toObjectList(v).size();
                     
                     int start = ((Number) from).intValue();
-                    int end = (to != null && to instanceof Number) ? ((Number) to).intValue() : length;
+                    int end = (to != null) ? ((Number) to).intValue() : length;
                                 
                     if (start < 0) {
                         start = length + start;
@@ -54,7 +54,7 @@ public Object call(Properties bindings, Object[] args) {
                     }
                     start = Math.min(s.length(), Math.max(0, start));
                     
-                    if (to != null && to instanceof Number) {
+                    if (to != null) {
                         int end = ((Number) to).intValue();
                         if (end < 0) {
                             end = s.length() + end;

File: src/main/java/com/metaweb/gridworks/operations/ColumnSplitOperation.java
Patch:
@@ -216,7 +216,7 @@ protected java.util.List<Serializable> split(String s) {
     }
 
     protected class ColumnSplitRowVisitor implements RowVisitor {
-        Project project;
+
         int cellIndex;
         List<String> columnNames;
         List<Integer> rowIndices;
@@ -231,7 +231,6 @@ protected class ColumnSplitRowVisitor implements RowVisitor {
             List<Integer> rowIndices,
             List<List<Serializable>> tuples
         ) {
-            this.project = project;
             this.cellIndex = cellIndex;
             this.columnNames = columnNames;
             this.rowIndices = rowIndices;

File: src/main/java/com/metaweb/gridworks/commands/edit/SplitColumnCommand.java
Patch:
@@ -21,14 +21,16 @@ protected AbstractOperation createOperation(Project project,
         boolean removeOriginalColumn = Boolean.parseBoolean(request.getParameter("removeOriginalColumn"));
         String mode = request.getParameter("mode");
         if ("separator".equals(mode)) {
+            String maxColumns = request.getParameter("maxColumns");
+            
             return new ColumnSplitOperation(
                 engineConfig, 
                 columnName, 
                 guessCellType,
                 removeOriginalColumn,
                 request.getParameter("separator"),
                 Boolean.parseBoolean(request.getParameter("regex")),
-                Integer.parseInt(request.getParameter("maxColumns"))
+                maxColumns != null && maxColumns.length() > 0 ? Integer.parseInt(maxColumns) : 0
             );
         } else {
             String s = request.getParameter("fieldLengths");

File: src/main/java/com/metaweb/gridworks/oauth/Credentials.java
Patch:
@@ -35,10 +35,10 @@ public static Credentials getCredentials(HttpServletRequest request, Provider pr
         return (cookie == null) ? null : makeCredentials(cookie.getValue(), provider);
     }
 
-    public static void setCredentials(HttpServletResponse response, Credentials credentials, Type type, int max_age) {
+    public static void setCredentials(HttpServletRequest request, HttpServletResponse response, Credentials credentials, Type type, int max_age) {
         String name = type.getCookieName(credentials.getProvider());
         String value = credentials.toString();
-        CookiesUtilities.setCookie(response, name, value, max_age);
+        CookiesUtilities.setCookie(request, response, name, value, max_age);
     }
     
     public static void deleteCredentials(HttpServletRequest request, HttpServletResponse response, Provider provider, Type type) {

File: src/server/java/com/metaweb/gridworks/Gridworks.java
Patch:
@@ -61,8 +61,8 @@ public static int getMaxUploadSize() {
         return Configurations.getInteger("gridworks.max_upload_size",MAX_UPLOAD_SIZE);
     }
     
-    public static String getURL() {
-        return "http://" + Configurations.get("gridworks.host",DEFAULT_HOST) + ":" + Configurations.getInteger("gridworks.port",DEFAULT_PORT);
+    public static String getFullHost() {
+        return host + ":" + port;
     }
     
     public static void main(String[] args) throws Exception  {

File: src/main/java/com/metaweb/gridworks/model/recon/HeuristicReconConfig.java
Patch:
@@ -156,7 +156,7 @@ public ReconJob createJob(Project project, int rowIndex, Row row,
                         Cell cell2 = row.getCell(detailCellIndex);
                         if (cell2 == null || !ExpressionUtils.isNonBlankData(cell2.value)) {
                             int cellIndex = project.columnModel.getColumnByName(columnName).getCellIndex();
-                            if (cellIndex < row.contextRowSlots.length) {
+                            if (row.contextRowSlots != null && cellIndex < row.contextRowSlots.length) {
                                 int contextRowIndex = row.contextRowSlots[cellIndex];
                                 if (contextRowIndex >= 0 && contextRowIndex < project.rows.size()) {
                                     Row row2 = project.rows.get(contextRowIndex);

File: src/main/java/com/metaweb/gridworks/GridworksServlet.java
Patch:
@@ -18,6 +18,7 @@
 import com.metaweb.gridworks.commands.auth.AuthorizeCommand;
 import com.metaweb.gridworks.commands.auth.CheckAuthorizationCommand;
 import com.metaweb.gridworks.commands.auth.DeAuthorizeCommand;
+import com.metaweb.gridworks.commands.auth.GetUserBadgesCommand;
 import com.metaweb.gridworks.commands.edit.AddColumnCommand;
 import com.metaweb.gridworks.commands.edit.AnnotateOneRowCommand;
 import com.metaweb.gridworks.commands.edit.AnnotateRowsCommand;
@@ -145,6 +146,7 @@ public class GridworksServlet extends HttpServlet {
         _commands.put("check-authorization", new CheckAuthorizationCommand());
         _commands.put("authorize", new AuthorizeCommand());
         _commands.put("deauthorize", new DeAuthorizeCommand());
+        _commands.put("user-badges", new GetUserBadgesCommand());
 
         _commands.put("upload-data", new UploadDataCommand());
         _commands.put("mqlread", new MQLReadCommand());

File: src/main/java/com/metaweb/gridworks/commands/edit/UploadDataCommand.java
Patch:
@@ -30,9 +30,10 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             StringWriter triples = new StringWriter(1024 * 10);
             exporter.export(project, new Properties(), engine, triples);
 
-            String info = request.getParameter("info");
+            String source_name = request.getParameter("source_name");
+            String source_id = request.getParameter("source_id");
                         
-            String result = FreebaseUtils.uploadTriples(request, info, triples.toString());
+            String result = FreebaseUtils.uploadTriples(request, source_name, source_id, triples.toString());
 
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");

File: src/main/java/com/metaweb/gridworks/operations/RowFlagOperation.java
Patch:
@@ -78,7 +78,7 @@ public RowVisitor init(List<Change> changes) {
             }
             
             public boolean visit(Project project, int rowIndex, Row row, boolean includeContextual, boolean includeDependent) {
-                if (row.starred != _flagged) {
+                if (row.flagged != _flagged) {
                     RowFlagChange change = new RowFlagChange(rowIndex, _flagged);
                     
                     changes.add(change);

File: src/main/java/com/metaweb/gridworks/commands/edit/AnnotateOneRowCommand.java
Patch:
@@ -9,6 +9,7 @@
 import com.metaweb.gridworks.commands.Command;
 import com.metaweb.gridworks.history.HistoryEntry;
 import com.metaweb.gridworks.model.Project;
+import com.metaweb.gridworks.model.changes.RowFlagChange;
 import com.metaweb.gridworks.model.changes.RowStarChange;
 import com.metaweb.gridworks.process.QuickHistoryEntryProcess;
 
@@ -110,7 +111,7 @@ protected HistoryEntry createHistoryEntry() throws Exception {
                 _project, 
                 (flagged ? "Flag row " : "Unflag row ") + (rowIndex + 1), 
                 null, 
-                new RowStarChange(rowIndex, flagged)
+                new RowFlagChange(rowIndex, flagged)
             );
         }
     }

File: src/main/java/com/metaweb/gridworks/operations/OperationRegistry.java
Patch:
@@ -38,6 +38,7 @@ static protected void register(String name, Class<? extends AbstractOperation> k
         
         register("row-removal", RowRemovalOperation.class);
         register("row-star", RowStarOperation.class);
+        register("row-flag", RowFlagOperation.class);
         
         register("save-protograph", SaveProtographOperation.class);
         register("text-transform", TextTransformOperation.class);

File: src/main/java/com/metaweb/gridworks/model/Cell.java
Patch:
@@ -130,9 +130,9 @@ static public Cell loadStreaming(JsonParser jp, Map<Long, Recon> reconCache) thr
                 if (token == JsonToken.VALUE_STRING) {
                     value = jp.getText();
                 } else if (token == JsonToken.VALUE_NUMBER_INT) {
-                    value = jp.getIntValue();
+                    value = jp.getLongValue();
                 } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {
-                    value = jp.getFloatValue();
+                    value = jp.getDoubleValue();
                 } else if (token == JsonToken.VALUE_TRUE) {
                     value = true;
                 } else if (token == JsonToken.VALUE_FALSE) {

File: src/main/java/com/metaweb/gridworks/model/Recon.java
Patch:
@@ -279,9 +279,9 @@ static public Recon loadStreaming(JsonParser jp, Map<Long, Recon> reconCache) th
                         if (token == JsonToken.VALUE_STRING) {
                             recon.features[feature++] = jp.getText();
                         } else if (token == JsonToken.VALUE_NUMBER_INT) {
-                            recon.features[feature++] = jp.getIntValue();
+                            recon.features[feature++] = jp.getLongValue();
                         } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {
-                            recon.features[feature++] = jp.getFloatValue();
+                            recon.features[feature++] = jp.getDoubleValue();
                         } else if (token == JsonToken.VALUE_FALSE) {
                             recon.features[feature++] = false;
                         } else if (token == JsonToken.VALUE_TRUE) {

File: src/main/java/com/metaweb/gridworks/operations/MassEditOperation.java
Patch:
@@ -54,7 +54,8 @@ public void write(JSONWriter writer, Properties options)
     }
     
     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
-        JSONObject engineConfig = obj.getJSONObject("engineConfig");
+        JSONObject engineConfig = obj.has("engineConfig") && !obj.isNull("engineConfig") ?
+                obj.getJSONObject("engineConfig") : null;
         
         return new MassEditOperation(
             engineConfig,

File: src/main/java/com/metaweb/gridworks/model/Row.java
Patch:
@@ -18,7 +18,6 @@
 import com.metaweb.gridworks.Jsonizable;
 import com.metaweb.gridworks.expr.CellTuple;
 import com.metaweb.gridworks.expr.HasFields;
-import com.metaweb.gridworks.util.ParsingUtilities;
 
 public class Row implements HasFields, Jsonizable {
     public boolean             flagged;

File: src/main/java/com/metaweb/gridworks/browsing/facets/NumericBinIndex.java
Patch:
@@ -125,7 +125,7 @@ public NumericBinIndex(Project project, String columnName, int cellIndex, Evalua
         
         if (_min >= _max) {
             _step = 1;
-            _min = 0;
+            _min = Math.min(_min, _max);
             _max = _step;
             _bins = new int[1];
             

File: src/main/java/com/metaweb/gridworks/importers/Importer.java
Patch:
@@ -9,6 +9,6 @@
 public interface Importer {
     public boolean takesReader();
     
-    public void read(Reader reader, Project project, Properties options, int skip, int limit) throws Exception;
-    public void read(InputStream inputStream, Project project, Properties options, int skip, int limit) throws Exception;
+    public void read(Reader reader, Project project, Properties options) throws Exception;
+    public void read(InputStream inputStream, Project project, Properties options) throws Exception;
 }

File: src/main/java/com/metaweb/gridworks/importers/parsers/CSVRowParser.java
Patch:
@@ -60,12 +60,12 @@ public List<String> split(String line) {
         return results;
     }
     
-    public boolean parseRow(Row row, String line) {
+    public boolean parseRow(Row row, String line, boolean guessValueType) {
         boolean hasData = false;
         
         List<String> strings = split(line);
         for (String s : strings) {
-            Serializable value = ImporterUtilities.parseCellValue(s);
+            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;
             
             if (ExpressionUtils.isNonBlankData(value)) {
                 row.cells.add(new Cell(value, null));

File: src/main/java/com/metaweb/gridworks/importers/parsers/RowParser.java
Patch:
@@ -7,5 +7,5 @@
 public abstract class RowParser {
     public abstract List<String> split(String line);
     
-    public abstract boolean parseRow(Row row, String line);
+    public abstract boolean parseRow(Row row, String line, boolean guessValueType);
 }

File: src/main/java/com/metaweb/gridworks/importers/parsers/SeparatorRowParser.java
Patch:
@@ -30,14 +30,14 @@ public List<String> split(String line) {
         return results;
     }
     
-    public boolean parseRow(Row row, String line) {
+    public boolean parseRow(Row row, String line, boolean guessValueType) {
         boolean hasData = false;
         
         String[] cells = StringUtils.splitPreserveAllTokens(line, sep);
         for (int c = 0; c < cells.length; c++) {
             String text = cells[c];
             
-            Serializable value = ImporterUtilities.parseCellValue(text);
+            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(text) : text;
             if (ExpressionUtils.isNonBlankData(value)) {
                 row.cells.add(new Cell(value, null));
                 hasData = true;

File: src/main/java/com/metaweb/gridworks/commands/edit/CreateProjectCommand.java
Patch:
@@ -332,7 +332,7 @@ private InputStream getStream(String fileName, InputStream is) throws IOExceptio
     
     private String[] getExtension(String filename) {
         String[] result = new String[2];
-        int ext_index = filename.lastIndexOf(".");
+        int ext_index = filename.lastIndexOf('.');
         result[0] = (ext_index == -1) ? filename : filename.substring(0,ext_index);
         result[1] = (ext_index == -1) ? "" : filename.substring(ext_index + 1);
         return result;

File: src/main/java/com/metaweb/gridworks/commands/util/GuessTypesOfColumnCommand.java
Patch:
@@ -125,7 +125,7 @@ protected List<TypeGroup> guessTypes(Project project, Column column) {
             }
             jsonWriter.endObject();
             
-            StringBuffer sb = new StringBuffer();
+            StringBuffer sb = new StringBuffer(1024);
             sb.append("http://api.freebase.com/api/service/search?queries=");
             sb.append(ParsingUtilities.encode(stringWriter.toString()));
             

File: src/main/java/com/metaweb/gridworks/commands/util/PreviewProtographCommand.java
Patch:
@@ -33,7 +33,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
             Protograph protograph = Protograph.reconstruct(json);
             
-            StringBuffer sb = new StringBuffer();
+            StringBuffer sb = new StringBuffer(2048);
             sb.append("{ ");
             
             {

File: src/main/java/com/metaweb/gridworks/expr/functions/ToDate.java
Patch:
@@ -18,6 +18,7 @@ public class ToDate implements Function {
     public Object call(Properties bindings, Object[] args) {
         if (args.length == 0) {
             // missing value, can this happen?
+            return null;
         }
         if (!(args[0] instanceof String)) {
             // ignore cell values that aren't strings

File: src/main/java/com/metaweb/gridworks/importers/TsvCsvImporter.java
Patch:
@@ -31,7 +31,7 @@ public void read(Reader reader, Project project, Properties options, int skip, i
         
         int rowsWithData = 0;
         while ((line = lnReader.readLine()) != null) {
-            if (line.trim().length() == 0) {
+            if (StringUtils.isBlank(line)) {
                 continue;
             }
             

File: src/main/java/com/metaweb/gridworks/model/recon/GuidBasedReconConfig.java
Patch:
@@ -111,8 +111,9 @@ public List<Recon> batchRecon(List<ReconJob> jobs) {
                 query = stringWriter.toString();
             }
             
-            StringBuffer sb = new StringBuffer();
-            sb.append(s_mqlreadService + "?query=");
+            StringBuffer sb = new StringBuffer(1024);
+            sb.append(s_mqlreadService);
+            sb.append("?query=");
             sb.append(ParsingUtilities.encode(query));
             
             URL url = new URL(sb.toString());

File: src/main/java/com/metaweb/gridworks/model/recon/HeuristicReconConfig.java
Patch:
@@ -222,7 +222,7 @@ protected List<Recon> batchReconUsingRelevance(List<ReconJob> jobs) {
             }
             jsonWriter.endObject();
             
-            StringBuffer sb = new StringBuffer();
+            StringBuffer sb = new StringBuffer(1024);
             sb.append("http://api.freebase.com/api/service/search?indent=1&queries=");
             sb.append(ParsingUtilities.encode(stringWriter.toString()));
             

File: src/main/java/com/metaweb/gridworks/model/recon/IdBasedReconConfig.java
Patch:
@@ -115,8 +115,9 @@ public List<Recon> batchRecon(List<ReconJob> jobs) {
                 query = stringWriter.toString();
             }
             
-            StringBuffer sb = new StringBuffer();
-            sb.append(s_mqlreadService + "?query=");
+            StringBuffer sb = new StringBuffer(1024);
+            sb.append(s_mqlreadService);
+            sb.append("?query=");
             sb.append(ParsingUtilities.encode(query));
             
             URL url = new URL(sb.toString());

File: src/main/java/com/metaweb/gridworks/model/recon/KeyBasedReconConfig.java
Patch:
@@ -129,8 +129,9 @@ public List<Recon> batchRecon(List<ReconJob> jobs) {
                 query = stringWriter.toString();
             }
             
-            StringBuffer sb = new StringBuffer();
-            sb.append(s_mqlreadService + "?query=");
+            StringBuffer sb = new StringBuffer(1024);
+            sb.append(s_mqlreadService);
+            sb.append("?query=");
             sb.append(ParsingUtilities.encode(query));
             
             URL url = new URL(sb.toString());

File: src/main/java/com/metaweb/gridworks/protograph/transpose/TripleLoaderTransposedNodeFactory.java
Patch:
@@ -91,7 +91,7 @@ protected void writeChildren(String subject) {
     
     protected class AnonymousTransposedNode extends TransposedNodeWithChildren {
         
-        protected AnonymousTransposedNode(AnonymousNode node) { }
+        //protected AnonymousTransposedNode(AnonymousNode node) { }
         
         public String write(String subject, String predicate) {
             if (children.size() == 0 || subject == null) {
@@ -249,7 +249,7 @@ public TransposedNode transposeAnonymousNode(
             FreebaseProperty property, 
             AnonymousNode node) {
         
-        WritingTransposedNode tnode = new AnonymousTransposedNode(node);
+        WritingTransposedNode tnode = new AnonymousTransposedNode();
         
         processTransposedNode(tnode, parentNode, property);
         

File: src/server/java/com/metaweb/gridworks/Gridworks.java
Patch:
@@ -32,7 +32,7 @@
 import org.mortbay.util.Scanner;
 
 import com.metaweb.util.logging.IndentingLayout;
-import com.metaweb.util.signal.SignalHandler;
+import com.metaweb.util.signal.AbstractSignalHandler;
 import com.metaweb.util.threads.ThreadPoolExecutorAdapter;
 
 public class Gridworks {
@@ -298,7 +298,7 @@ private void openBrowser() {
     }
 }
 
-class ShutdownSignalHandler extends SignalHandler {
+class ShutdownSignalHandler extends AbstractSignalHandler {
     
     private Server _server;
 

File: src/server/java/com/metaweb/util/logging/IndentingLayout.java
Patch:
@@ -48,7 +48,6 @@ public class IndentingLayout extends Layout {
     protected static final int CONTEXT_SIZE = 25;
     protected static final long MAX_DELTA = 10000;
 
-    protected final StringBuffer buf = new StringBuffer(256);
     protected Calendar calendar = Calendar.getInstance();
     protected long previousTime = 0;
     protected int indentation = 0;
@@ -67,7 +66,7 @@ public String format(LoggingEvent event) {
         if ((leader == '<') && (secondLeader == ' ') && (this.indentation > 0)) this.indentation--;
 
         // Reset buf
-        buf.setLength(0);
+        StringBuffer buf = new StringBuffer(256);
 
         Date date = new Date();
         long now = date.getTime();
@@ -134,7 +133,7 @@ public String format(LoggingEvent event) {
 
     private void pad(StringBuffer buffer, int pads, char padchar) {
         for (int i = 0; i < pads; i++) {
-            buf.append(padchar);
+            buffer.append(padchar);
         }
     }
 

File: src/main/java/com/metaweb/gridworks/operations/EngineDependentOperation.java
Patch:
@@ -15,7 +15,8 @@ abstract public class EngineDependentOperation extends AbstractOperation {
     
     protected EngineDependentOperation(JSONObject engineConfig) {
         _engineConfig = engineConfig;
-        _engineConfigString = engineConfig.toString();
+        _engineConfigString = engineConfig == null || engineConfig.length() == 0
+        	? null : engineConfig.toString();
     }
     
     protected Engine createEngine(Project project) throws Exception {
@@ -25,7 +26,7 @@ protected Engine createEngine(Project project) throws Exception {
     }
     
     protected JSONObject getEngineConfig() {
-        if (_engineConfig == null) {
+        if (_engineConfig == null && _engineConfigString != null) {
             try {
                 _engineConfig = ParsingUtilities.evaluateJsonStringToObject(_engineConfigString);
             } catch (JSONException e) {

File: src/main/java/com/metaweb/gridworks/GridworksServlet.java
Patch:
@@ -59,7 +59,7 @@ public class GridworksServlet extends HttpServlet {
     
     private static final long serialVersionUID = 2386057901503517403L;
     
-    static protected Map<String, Command> _commands = new HashMap<String, Command>();
+    static final protected Map<String, Command> _commands = new HashMap<String, Command>();
     
     // timer for periodically saving projects
     static protected Timer _timer;

File: src/main/java/com/metaweb/gridworks/browsing/facets/NumericBinIndex.java
Patch:
@@ -87,18 +87,18 @@ public NumericBinIndex(Project project, int cellIndex, Evaluable eval) {
         _min = (Math.floor(_min / _step) * _step);
         _max = (Math.ceil(_max / _step) * _step);
         
-        int binCount = (int) ((_max - _min) / _step);
+        double binCount = (_max - _min) / _step;
         if (binCount > 100) {
             _step *= 2;
-            binCount = Math.round((1 + binCount) / 2);
+            binCount = (binCount + 1) / 2;
         }
         
         if (_max <= originalMax) {
         	_max += _step;
         	binCount++;
         }
         
-        _bins = new int[binCount];
+        _bins = new int[(int) Math.round(binCount)];
         for (double d : allValues) {
             int bin = (int) Math.floor((d - _min) / _step);
             _bins[bin]++;

File: src/main/java/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Patch:
@@ -41,7 +41,7 @@ public class kNNClusterer extends Clusterer {
 
     private Distance _distance;
     
-    static protected Map<String, Distance> _distances = new HashMap<String, Distance>();
+    static final protected Map<String, Distance> _distances = new HashMap<String, Distance>();
 
     List<Set<Serializable>> _clusters;
 
@@ -148,7 +148,8 @@ public void computeClusters(Engine engine) {
         _clusters = visitor.getClusters();
     }
 
-    public class ValuesComparator implements Comparator<Entry<Serializable,Integer>> {
+    public static class ValuesComparator implements Comparator<Entry<Serializable,Integer>>, Serializable {
+        private static final long serialVersionUID = 204469656070583155L;
         public int compare(Entry<Serializable,Integer> o1, Entry<Serializable,Integer> o2) {
             return o2.getValue() - o1.getValue();
         }

File: src/main/java/com/metaweb/gridworks/commands/edit/AnnotateOneRowCommand.java
Patch:
@@ -46,7 +46,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         }
     }
     
-    protected class StarOneRowProcess extends QuickHistoryEntryProcess {
+    protected static class StarOneRowProcess extends QuickHistoryEntryProcess {
         final int rowIndex;
         final boolean starred;
         

File: src/main/java/com/metaweb/gridworks/commands/edit/EditOneCellCommand.java
Patch:
@@ -75,7 +75,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         }
     }
     
-    protected class EditOneCellProcess extends QuickHistoryEntryProcess {
+    protected static class EditOneCellProcess extends QuickHistoryEntryProcess {
         final int rowIndex;
         final int cellIndex;
         final Serializable value;

File: src/main/java/com/metaweb/gridworks/commands/info/ExportRowsCommand.java
Patch:
@@ -20,7 +20,9 @@
 import com.metaweb.gridworks.model.Project;
 
 public class ExportRowsCommand extends Command {
-    static protected Map<String, Exporter> s_formatToExporter = new HashMap<String, Exporter>();
+    
+    static final protected Map<String, Exporter> s_formatToExporter = new HashMap<String, Exporter>();
+    
     static {
         s_formatToExporter.put("tripleloader", new TripleloaderExporter());
         s_formatToExporter.put("html", new HtmlTableExporter());

File: src/main/java/com/metaweb/gridworks/commands/recon/ReconJudgeOneCellCommand.java
Patch:
@@ -81,14 +81,14 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         }
     }
     
-    protected class JudgeOneCellProcess extends QuickHistoryEntryProcess {
+    protected static class JudgeOneCellProcess extends QuickHistoryEntryProcess {
+
         final int rowIndex;
         final int cellIndex;
         final Judgment judgment;
         final ReconCandidate match;
         Cell newCell;
         
-        
         JudgeOneCellProcess(
             Project project, 
             String briefDescription, 

File: src/main/java/com/metaweb/gridworks/history/ChangeSequence.java
Patch:
@@ -44,6 +44,7 @@ public void save(Writer writer, Properties options) throws IOException {
     
     static public Change load(LineNumberReader reader) throws Exception {
         String line = reader.readLine();
+        if (line == null) line = "";
         int equal = line.indexOf('=');
         
         assert "count".equals(line.substring(0, equal));

File: src/main/java/com/metaweb/gridworks/operations/MultiValuedCellJoinOperation.java
Patch:
@@ -64,7 +64,7 @@ protected HistoryEntry createHistoryEntry(Project project) throws Exception {
         int cellIndex = column.getCellIndex();
         
         Column keyColumn = project.columnModel.getColumnByName(_keyColumnName);
-        if (column == null) {
+        if (keyColumn == null) {
             throw new Exception("No key column named " + _keyColumnName);
         }
         int keyCellIndex = keyColumn.getCellIndex();

File: src/main/java/com/metaweb/gridworks/operations/MultiValuedCellSplitOperation.java
Patch:
@@ -70,7 +70,7 @@ protected HistoryEntry createHistoryEntry(Project project) throws Exception {
         int cellIndex = column.getCellIndex();
         
         Column keyColumn = project.columnModel.getColumnByName(_keyColumnName);
-        if (column == null) {
+        if (keyColumn == null) {
             throw new Exception("No key column named " + _keyColumnName);
         }
         int keyCellIndex = keyColumn.getCellIndex();

File: src/main/java/com/metaweb/gridworks/util/ParsingUtilities.java
Patch:
@@ -20,7 +20,8 @@
 import org.json.JSONTokener;
 
 public class ParsingUtilities {
-    static public SimpleDateFormat s_sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
+
+    static final public SimpleDateFormat s_sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
     
     static public Properties parseUrlParameters(HttpServletRequest request) {
         Properties options = new Properties();

File: src/server/java/com/metaweb/util/signal/SignalHandler.java
Patch:
@@ -8,7 +8,7 @@ public SignalHandler(String signalName) {
         try {
             _wrapper = new SignalHandlerWrapper(signalName, this);
         } catch (Throwable e) {
-            new java.lang.RuntimeException("Signal handling facilities are not available in this JVM.");
+            throw new java.lang.RuntimeException("Signal handling facilities are not available in this JVM.");
         }
     }
         

File: src/main/java/com/metaweb/gridworks/model/ReconCandidate.java
Patch:
@@ -49,7 +49,7 @@ public void write(JSONWriter writer, Properties options)
         writer.key("name"); writer.value(topicName);
         writer.key("score"); writer.value(score);
         
-        if (!options.containsKey("reconCandidateOmitTypes")) {
+        /* if (!options.containsKey("reconCandidateOmitTypes")) */ {
 	        writer.key("types"); writer.array();
 	        for (String typeID : typeIDs) {
 	            writer.value(typeID);

File: src/main/java/com/metaweb/gridworks/commands/info/GetRowsCommand.java
Patch:
@@ -29,6 +29,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             int start = Math.min(project.rows.size(), Math.max(0, getIntegerParameter(request, "start", 0)));
             int limit = Math.min(project.rows.size() - start, Math.max(0, getIntegerParameter(request, "limit", 20)));
             Properties options = new Properties();
+            options.put("reconCandidateOmitTypes", true);
             
             response.setCharacterEncoding("UTF-8");
             response.setHeader("Content-Type", "application/json");

File: src/main/java/com/metaweb/gridworks/browsing/facets/ExpressionNumericRowBinner.java
Patch:
@@ -73,7 +73,7 @@ protected void processValue(Object value) {
                 
                 double d = ((Number) value).doubleValue();
                 
-                int bin = (int) Math.round((d - _index.getMin()) / _index.getStep());
+                int bin = (int) Math.floor((d - _index.getMin()) / _index.getStep());
                 
                 bins[bin]++;
             } else {

File: src/main/java/com/metaweb/gridworks/browsing/facets/RangeFacet.java
Patch:
@@ -172,15 +172,15 @@ protected boolean checkValue(double d) {
                         _eval, _cellIndex, _selectNumeric, _selectNonNumeric, _selectBlank, _selectError) {
                     
                     protected boolean checkValue(double d) {
-                        return d <= _to;
+                        return d < _to;
                     };
                 };
             } else {
                 return new ExpressionNumberComparisonRowFilter(
                         _eval, _cellIndex, _selectNumeric, _selectNonNumeric, _selectBlank, _selectError) {
                     
                     protected boolean checkValue(double d) {
-                        return d >= _from && d <= _to;
+                        return d >= _from && d < _to;
                     };
                 };
             }        

File: src/main/java/com/metaweb/gridworks/commands/edit/AnnotateOneRowCommand.java
Patch:
@@ -30,7 +30,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             String starredString = request.getParameter("starred");
             if (starredString != null) {
                 boolean starred = "true".endsWith(starredString);
-                String description = starred ? "Star row " + rowIndex : "Unstar row " + rowIndex; 
+                String description = (starred ? "Star row " : "Unstar row ") + (rowIndex + 1); 
 
                 StarOneRowProcess process = new StarOneRowProcess(
                     project, 
@@ -76,7 +76,7 @@ protected class StarOneRowProcess extends QuickHistoryEntryProcess {
         protected HistoryEntry createHistoryEntry() throws Exception {
             return new HistoryEntry(
                 _project, 
-                starred ? "Star row " + rowIndex : "Unstar row " + rowIndex, 
+                (starred ? "Star row " : "Unstar row ") + (rowIndex + 1), 
                 null, 
                 new RowStarChange(rowIndex, starred)
             );

File: src/main/java/com/metaweb/gridworks/commands/edit/ApplyOperationsCommand.java
Patch:
@@ -16,6 +16,7 @@
 import com.metaweb.gridworks.model.Project;
 import com.metaweb.gridworks.operations.OperationRegistry;
 import com.metaweb.gridworks.process.Process;
+import com.metaweb.gridworks.util.ParsingUtilities;
 
 public class ApplyOperationsCommand extends Command {
     
@@ -26,7 +27,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
         Project project = getProject(request);
         String jsonString = request.getParameter("operations");
         try {
-            JSONArray a = jsonStringToArray(jsonString);
+            JSONArray a = ParsingUtilities.evaluateJsonStringToArray(jsonString);
             int count = a.length();
             for (int i = 0; i < count; i++) {
                 JSONObject obj = a.getJSONObject(i);

File: src/main/java/com/metaweb/gridworks/commands/edit/ExtendDataCommand.java
Patch:
@@ -8,6 +8,7 @@
 import com.metaweb.gridworks.model.AbstractOperation;
 import com.metaweb.gridworks.model.Project;
 import com.metaweb.gridworks.operations.ExtendDataOperation;
+import com.metaweb.gridworks.util.ParsingUtilities;
 
 public class ExtendDataCommand extends EngineDependentCommand {
     @Override
@@ -18,7 +19,7 @@ protected AbstractOperation createOperation(Project project,
         int columnInsertIndex = Integer.parseInt(request.getParameter("columnInsertIndex"));
         
         String jsonString = request.getParameter("extension");
-        JSONObject extension = jsonStringToObject(jsonString);
+        JSONObject extension = ParsingUtilities.evaluateJsonStringToObject(jsonString);
         
         return new ExtendDataOperation(
             engineConfig, 

File: src/main/java/com/metaweb/gridworks/commands/edit/ImportProjectCommand.java
Patch:
@@ -57,7 +57,7 @@ protected void internalImport(
     ) throws Exception {
         MultipartParser parser = null;
         try {
-            parser = new MultipartParser(request, 20 * 1024 * 1024);
+            parser = new MultipartParser(request, 1024 * 1024 * 1024);
         } catch (Exception e) {
             // silent
         }

File: src/main/java/com/metaweb/gridworks/commands/edit/SaveProtographCommand.java
Patch:
@@ -15,6 +15,7 @@
 import com.metaweb.gridworks.operations.SaveProtographOperation;
 import com.metaweb.gridworks.process.Process;
 import com.metaweb.gridworks.protograph.Protograph;
+import com.metaweb.gridworks.util.ParsingUtilities;
 
 public class SaveProtographCommand extends Command {
     @Override
@@ -25,7 +26,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             Project project = getProject(request);
             
             String jsonString = request.getParameter("protograph");
-            JSONObject json = jsonStringToObject(jsonString);
+            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
             Protograph protograph = Protograph.reconstruct(json);
             
             AbstractOperation op = new SaveProtographOperation(protograph);

File: src/main/java/com/metaweb/gridworks/commands/util/PreviewExtendDataCommand.java
Patch:
@@ -21,6 +21,7 @@
 import com.metaweb.gridworks.model.ReconCandidate;
 import com.metaweb.gridworks.model.Row;
 import com.metaweb.gridworks.util.FreebaseDataExtensionJob;
+import com.metaweb.gridworks.util.ParsingUtilities;
 import com.metaweb.gridworks.util.FreebaseDataExtensionJob.ColumnInfo;
 import com.metaweb.gridworks.util.FreebaseDataExtensionJob.DataExtension;
 
@@ -41,9 +42,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             }
             
             String jsonString = request.getParameter("extension");
-            JSONObject json = jsonStringToObject(jsonString);
+            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
             
-            JSONArray rowIndices = jsonStringToArray(rowIndicesString);
+            JSONArray rowIndices = ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);
             int length = rowIndices.length();
             int cellIndex = project.columnModel.getColumnByName(columnName).getCellIndex();
             

File: src/main/java/com/metaweb/gridworks/commands/util/PreviewProtographCommand.java
Patch:
@@ -16,6 +16,7 @@
 import com.metaweb.gridworks.protograph.transpose.MqlreadLikeTransposedNodeFactory;
 import com.metaweb.gridworks.protograph.transpose.Transposer;
 import com.metaweb.gridworks.protograph.transpose.TripleLoaderTransposedNodeFactory;
+import com.metaweb.gridworks.util.ParsingUtilities;
 
 public class PreviewProtographCommand extends Command {
     @Override
@@ -29,7 +30,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             response.setHeader("Content-Type", "application/json");
             
             String jsonString = request.getParameter("protograph");
-            JSONObject json = jsonStringToObject(jsonString);
+            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
             Protograph protograph = Protograph.reconstruct(json);
             
             StringBuffer sb = new StringBuffer();

File: src/main/java/com/metaweb/gridworks/expr/functions/arrays/Join.java
Patch:
@@ -7,6 +7,7 @@
 import org.json.JSONWriter;
 
 import com.metaweb.gridworks.expr.EvalError;
+import com.metaweb.gridworks.expr.ExpressionUtils;
 import com.metaweb.gridworks.gel.ControlFunctionRegistry;
 import com.metaweb.gridworks.gel.Function;
 
@@ -33,7 +34,7 @@ public Object call(Properties bindings, Object[] args) {
 	                    }
 	                }
                 } else {
-	                for (Object o : (List<Object>) v) {
+	                for (Object o : ExpressionUtils.toObjectList(v)) {
 	                    if (o != null) {
 	                        if (sb.length() > 0) {
 	                            sb.append(separator);

File: src/main/java/com/metaweb/gridworks/util/JSONUtilities.java
Patch:
@@ -93,5 +93,4 @@ static public void writeStringList(JSONWriter writer, List<String> list) throws
         }
         writer.endArray();
     }
-    
 }

File: src/main/java/com/metaweb/gridworks/model/ReconCandidate.java
Patch:
@@ -27,7 +27,7 @@ public ReconCandidate(String topicID, String topicGUID, String topicName, String
     
     public Object getField(String name, Properties bindings) {
         if ("id".equals(name)) {
-            return topicName;
+            return topicID;
         } else if ("guid".equals(name)) {
             return topicGUID;
         } else if ("name".equals(name)) {

File: src/main/java/com/metaweb/gridworks/commands/edit/CreateProjectCommand.java
Patch:
@@ -55,7 +55,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
             
             redirect(response, "/project.html?project=" + project.id);
         } catch (Exception e) {
-            // TODO Auto-generated catch block
+            redirect(response, "/error.html?redirect=index.html&msg=" +
+                ParsingUtilities.encode("Failed to import file: " + e.getLocalizedMessage())
+            );
             e.printStackTrace();
         }
     }

File: src/main/java/com/metaweb/gridworks/model/recon/ReconConfig.java
Patch:
@@ -21,6 +21,8 @@ static public ReconConfig reconstruct(JSONObject obj) throws Exception {
             return HeuristicReconConfig.reconstruct(obj);
         } else if ("strict".equals(mode)) {
             return StrictReconConfig.reconstruct(obj);
+        } else if ("extend".equals(mode)) {
+            return DataExtensionReconConfig.reconstruct(obj);
         }
         return null;
     }

File: src/main/java/com/metaweb/gridworks/operations/ReconMatchBestCandidatesOperation.java
Patch:
@@ -72,7 +72,7 @@ public RowVisitor init(int cellIndex, List<CellChange> cellChanges) {
             public boolean visit(Project project, int rowIndex, Row row, boolean includeContextual, boolean includeDependent) {
                 if (cellIndex < row.cells.size()) {
                     Cell cell = row.cells.get(cellIndex);
-                    if (cell.recon != null) {
+                    if (cell != null && cell.recon != null) {
                         ReconCandidate candidate = cell.recon.getBestCandidate();
                         if (candidate != null) {
                             Cell newCell = new Cell(

File: src/main/java/com/metaweb/gridworks/gel/ControlFunctionRegistry.java
Patch:
@@ -11,6 +11,7 @@
 import com.metaweb.gridworks.expr.functions.ToDate;
 import com.metaweb.gridworks.expr.functions.ToNumber;
 import com.metaweb.gridworks.expr.functions.ToString;
+import com.metaweb.gridworks.expr.functions.Type;
 import com.metaweb.gridworks.expr.functions.arrays.Join;
 import com.metaweb.gridworks.expr.functions.arrays.Reverse;
 import com.metaweb.gridworks.expr.functions.arrays.Sort;
@@ -104,6 +105,8 @@ static protected void registerControl(String name, Control c) {
     }
 
     static {
+        registerFunction("type", new Type());
+        
         registerFunction("toString", new ToString());
         registerFunction("toNumber", new ToNumber());
         registerFunction("toDate", new ToDate());

File: src/main/java/edu/mit/simile/vicino/NGramTokenizer.java
Patch:
@@ -1,4 +1,4 @@
-package com.metaweb.gridworks.clustering.knn;
+package edu.mit.simile.vicino;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: src/main/java/com/metaweb/gridworks/gel/Parser.java
Patch:
@@ -106,7 +106,7 @@ protected Evaluable parseTerm() throws ParsingException {
     
     protected Evaluable parseFactor() throws ParsingException {
         if (_token == null) {
-            throw makeException("Expression ends too early");
+            throw makeException("Expecting something more at end of expression");
         }
         
         Evaluable eval = null;
@@ -170,7 +170,7 @@ protected Evaluable parseFactor() throws ParsingException {
                 throw makeException("Missing )");
             }
         } else {
-            throw makeException("Missing number, string, identifier, or parenthesized expression");
+            throw makeException("Missing number, string, identifier, regex, or parenthesized expression");
         }
         
         while (_token != null) {

File: src/main/java/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Patch:
@@ -77,7 +77,7 @@ public VPTreeClusteringRowVisitor(Distance d, JSONObject o) {
         }
         
         public boolean visit(Project project, int rowIndex, Row row, boolean includeContextual, boolean includeDependent) {
-            Cell cell = row.cells.get(_colindex);
+            Cell cell = row.getCell(_colindex);
             if (cell != null && cell.value != null) {
                 Object v = cell.value;
                 String s = (v instanceof String) ? ((String) v) : v.toString();
@@ -86,7 +86,7 @@ public boolean visit(Project project, int rowIndex, Row row, boolean includeCont
             return false;
         }
         
-        public Map<Serializable,List<Serializable>> getClusters() {
+        public Map<Serializable,Set<Serializable>> getClusters() {
             return _treeBuilder.getClusters(_radius);
         }
     }

File: src/main/java/edu/mit/simile/vicino/Seeker.java
Patch:
@@ -5,6 +5,7 @@
 import java.io.Serializable;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 import edu.mit.simile.vicino.distances.Distance;
 import edu.mit.simile.vicino.vptree.VPTree;
@@ -35,9 +36,9 @@ public static void main(String[] args) throws Exception {
             String query = line.substring(0, index);
             float range = Float.parseFloat(line.substring(index + 1));
             long start = System.currentTimeMillis();
-            List<? extends Serializable> results = seeker.range(query, range);
+            Set<Serializable> results = seeker.range(query, range);
             long stop = System.currentTimeMillis();
-            Iterator<? extends Serializable> j = results.iterator();
+            Iterator<Serializable> j = results.iterator();
             if (j.hasNext()) {
                 while (j.hasNext()) {
                     String r = (String) j.next();

File: src/main/java/com/metaweb/gridworks/importers/ExcelImporter.java
Patch:
@@ -155,6 +155,8 @@ public void read(InputStream inputStream, Project project,
                     
                     if (skip <= 0 || rowsWithData > skip) {
                         project.rows.add(newRow);
+                        project.columnModel.setMaxCellIndex(newRow.cells.size());
+                        
                         if (limit > 0 && project.rows.size() >= limit) {
                             break;
                         }

File: src/main/java/com/metaweb/gridworks/importers/TsvCsvImporter.java
Patch:
@@ -62,7 +62,7 @@ public void read(Reader reader, Project project, Properties options, int skip, i
                         
                         if (skip <= 0 || rowsWithData > skip) {
                             project.rows.add(row);
-                            project.columnModel.setMaxCellIndex(Math.max(project.columnModel.getMaxCellIndex(), row.cells.size()));
+                            project.columnModel.setMaxCellIndex(row.cells.size());
                             
                             if (limit > 0 && project.rows.size() >= limit) {
                                 break;

File: src/main/java/com/metaweb/gridworks/model/recon/HeuristicReconConfig.java
Patch:
@@ -97,7 +97,7 @@ public HeuristicReconConfig(
         this.typeID = typeID;
         this.typeName = typeName;
         this.autoMatch = autoMatch;
-        this.columnDetails = new ArrayList<ColumnDetail>();
+        this.columnDetails = columnDetails;
     }
 
     public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/model/recon/ReconConfig.java
Patch:
@@ -33,7 +33,7 @@ abstract public ReconJob createJob(
         Project     project, 
         int         rowIndex, 
         Row         row,
-        String        columnName,
+        String      columnName,
         Cell        cell
     );
     

File: src/main/java/com/metaweb/gridworks/clustering/binning/BinningClusterer.java
Patch:
@@ -77,7 +77,7 @@ public boolean visit(Project project, int rowIndex, Row row, boolean contextual)
                     }
                 } else {
                     Map<String,Integer> m = new TreeMap<String,Integer>();
-                    m.put(v,0);
+                    m.put(v,1);
                     _map.put(key, m);
                 }
             }

File: src/main/java/com/metaweb/gridworks/clustering/binning/NGramFingerprintKeyer.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.TreeSet;
 import java.util.regex.Pattern;
 
-public class NGramFingerprintKeyer extends Keyer {
+public class NGramFingerprintKeyer extends FingerprintKeyer {
 
     static final Pattern alphanum = Pattern.compile("\\p{Punct}|\\p{Cntrl}|\\p{Space}");
     
@@ -18,10 +18,10 @@ public String key(String s, Object... o) {
         TreeSet<String> set = ngram_split(s,ngram_size);
         StringBuffer b = new StringBuffer();
         Iterator<String> i = set.iterator();
-        while (i.hasNext()) {
+        while (i.hasNext()) { // join ordered fragments back together
             b.append(i.next());
         }
-        return b.toString(); // join ordered fragments back together
+        return asciify(b.toString()); // find ASCII equivalent to characters 
     }
 
     protected TreeSet<String> ngram_split(String s, int size) {

File: src/main/java/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Patch:
@@ -25,7 +25,6 @@
 import com.metaweb.gridworks.model.Project;
 import com.metaweb.gridworks.model.Row;
 import com.wcohen.ss.api.Token;
-import com.wcohen.ss.tokens.NGramTokenizer;
 import com.wcohen.ss.tokens.SimpleTokenizer;
 
 import edu.mit.simile.vicino.distances.BZip2Distance;
@@ -146,7 +145,7 @@ public Map<Serializable,Set<Serializable>> getClusters() {
             }
 
             int block_count = 0;
-            
+                        
             Map<Serializable,Set<Serializable>> clusters = new HashMap<Serializable,Set<Serializable>>();
             
             for (List<String> list : blocks.values()) {

File: src/main/java/edu/mit/simile/vicino/distances/PseudoMetricDistance.java
Patch:
@@ -9,7 +9,7 @@ public double d(String x, String y) {
         double cxy = d2(x, y);
         double cyx = d2(y, x);
         counter += 4;
-        return (cxy + cyx) / (cxx + cyy) - 1.0d;
+        return 10.0d * ((cxy + cyx) / (cxx + cyy) - 1.0d);
     }
     
     protected abstract double d2(String x, String y);

File: src/main/java/com/metaweb/gridworks/model/Project.java
Patch:
@@ -121,7 +121,7 @@ protected void saveToWriter(Writer writer, Properties options) throws IOExceptio
         
         writer.write("rowCount="); writer.write(Integer.toString(rows.size())); writer.write('\n');
         for (Row row : rows) {
-            row.save(writer); writer.write('\n');
+            row.save(writer, options); writer.write('\n');
         }
     }
     

File: src/main/java/com/metaweb/gridworks/model/Row.java
Patch:
@@ -149,10 +149,10 @@ public void write(JSONWriter writer, Properties options)
         writer.endObject();
     }
     
-    public void save(Writer writer) {
+    public void save(Writer writer, Properties options) {
         JSONWriter jsonWriter = new JSONWriter(writer);
         try {
-            write(jsonWriter, new Properties());
+            write(jsonWriter, options);
         } catch (JSONException e) {
             e.printStackTrace();
         }

File: src/main/java/com/metaweb/gridworks/model/changes/MassRowChange.java
Patch:
@@ -41,12 +41,12 @@ public void revert(Project project) {
     public void save(Writer writer, Properties options) throws IOException {
         writer.write("newRowCount="); writer.write(Integer.toString(_newRows.size())); writer.write('\n');
         for (Row row : _newRows) {
-            row.save(writer);
+            row.save(writer, options);
             writer.write('\n');
         }
         writer.write("oldRowCount="); writer.write(Integer.toString(_oldRows.size())); writer.write('\n');
         for (Row row : _oldRows) {
-            row.save(writer);
+            row.save(writer, options);
             writer.write('\n');
         }
         writer.write("/ec/\n"); // end of change marker

File: src/main/java/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Patch:
@@ -114,7 +114,7 @@ public BlockingClusteringRowVisitor(Distance d, JSONObject o) {
         }
         
         public boolean visit(Project project, int rowIndex, Row row, boolean contextual) {
-            Cell cell = row.cells.get(_colindex);
+            Cell cell = row.getCell(_colindex);
             if (cell != null && cell.value != null) {
                 Object v = cell.value;
                 String s = (v instanceof String) ? ((String) v) : v.toString().intern();

File: src/main/java/com/metaweb/gridworks/clustering/binning/BinningClusterer.java
Patch:
@@ -61,7 +61,7 @@ public BinningRowVisitor(Keyer k, JSONObject o) {
         }
         
         public boolean visit(Project project, int rowIndex, Row row, boolean contextual) {
-            Cell cell = row.cells.get(_colindex);
+            Cell cell = row.getCell(_colindex);
             if (cell != null && cell.value != null) {
                 String v = cell.value.toString();
                 String s = (v instanceof String) ? ((String) v) : v.toString();

File: src/main/java/edu/mit/simile/vicino/distances/LevenshteinDistance.java
Patch:
@@ -14,7 +14,7 @@ public LevenshteinDistance() {
     }
 
     public double d(String x, String y) {
-        return this.distance.score(x, y);
+        return Math.abs(this.distance.score(x, y));
     }
 
 }

File: src/main/java/edu/mit/simile/vicino/Distance.java
Patch:
@@ -2,6 +2,6 @@
 
 public interface Distance {
 
-    public float d(String x, String y);
+    public double d(String x, String y);
 
 }

File: src/main/java/edu/mit/simile/vicino/Seeker.java
Patch:
@@ -27,8 +27,7 @@ public static void main(String[] args) throws Exception {
         VPTreeSeeker seeker = new VPTreeSeeker(d, tree);
 
         log("type a string|range then hit return:");
-        BufferedReader input = new BufferedReader(new InputStreamReader(
-                System.in));
+        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
         String line = null;
         while ((line = input.readLine()) != null) {
             int index = line.indexOf('|');

File: src/main/java/edu/mit/simile/vicino/distances/BZip2Distance.java
Patch:
@@ -7,7 +7,7 @@
 
 public class BZip2Distance extends PseudoMetricDistance {
 
-    public float d2(String x, String y) {
+    public double d2(String x, String y) {
         String str = x + y;
         float result = 0.0f;
         try {

File: src/main/java/edu/mit/simile/vicino/distances/GZipDistance.java
Patch:
@@ -6,7 +6,7 @@
 
 public class GZipDistance extends PseudoMetricDistance {
 
-    public float d2(String x, String y) {
+    public double d2(String x, String y) {
         String str = x + y;
         float result = 0.0f;
         try {

File: src/main/java/edu/mit/simile/vicino/distances/JaccardDistance.java
Patch:
@@ -11,8 +11,8 @@ public JaccardDistance() {
         this.distance = new Jaccard();
     }
 
-    protected float d2(String x, String y) {
-        return Math.abs((float) this.distance.score(x, y) - 1.0f);
+    protected double d2(String x, String y) {
+        return this.distance.score(x, y);
     }
 
 }

File: src/main/java/edu/mit/simile/vicino/distances/JaroDistance.java
Patch:
@@ -11,8 +11,8 @@ public JaroDistance() {
         this.distance = new Jaro();
     }
 
-    protected float d2(String x, String y) {
-        return Math.abs((float) this.distance.score(x, y) - 1.0f);
+    protected double d2(String x, String y) {
+        return this.distance.score(x, y);
     }
 
 }

File: src/main/java/edu/mit/simile/vicino/distances/PPMDistance.java
Patch:
@@ -8,7 +8,7 @@
 
 public class PPMDistance extends PseudoMetricDistance {
 
-    public float d2(String x, String y) {
+    public double d2(String x, String y) {
         String str = x + y;
         float result = 0.0f;
         try {

File: src/main/java/edu/mit/simile/vicino/vptree/Node.java
Patch:
@@ -13,7 +13,7 @@ public class Node implements Serializable {
     private static final long serialVersionUID = -2077473220894258550L;
 
     private final Serializable obj;
-    private float distance;
+    private double distance;
 
     public Node(Serializable obj, int i) {
         this.obj = obj;
@@ -28,11 +28,11 @@ public Serializable get() {
         return this.obj;
     }
 
-    public void setDistance(float distance) {
+    public void setDistance(double distance) {
         this.distance = distance;
     }
 
-    public float getDistance() {
+    public double getDistance() {
         return distance;
     }
 

File: src/main/java/edu/mit/simile/vicino/vptree/VPTreeBuilder.java
Patch:
@@ -117,7 +117,7 @@ private void calculateDistances(TNode pivot, Node nodes[], int begin, int end) {
         for (int i = begin; i <= end; i++) {
             Object x = pivot.get();
             Object y = nodes[i].get();
-            float d = (x == y) ? 0.0f : distance.d(x.toString(), y.toString());
+            double d = (x == y) ? 0.0d : distance.d(x.toString(), y.toString());
             nodes[i].setDistance(d);
         }
     }

File: src/main/java/edu/mit/simile/vicino/vptree/VPTreeSeeker.java
Patch:
@@ -19,14 +19,14 @@ public VPTreeSeeker(Distance distance, VPTree tree) {
         this.tree = tree;
     }
 
-    public List<? extends Serializable> range(Object query, float range) {
+    public List<? extends Serializable> range(Serializable query, float range) {
         return rangeTraversal(query, range, tree.getRoot(), new ArrayList<Serializable>());
     }
 
-    private List<Serializable> rangeTraversal(Object query, float range, TNode tNode, List<Serializable> results) {
+    private List<Serializable> rangeTraversal(Serializable query, float range, TNode tNode, List<Serializable> results) {
 
         if (tNode != null) {
-            float distance = this.distance.d(query.toString(), tNode.toString());
+            double distance = this.distance.d(query.toString(), tNode.get().toString());
 
             if (distance < range) {
                 results.add(tNode.get());

File: src/main/java/com/metaweb/gridworks/operations/ReconOperation.java
Patch:
@@ -30,7 +30,7 @@
 import com.metaweb.gridworks.process.Process;
 
 public class ReconOperation extends EngineDependentOperation {
-    final protected String        _columnName;
+    final protected String      _columnName;
     final protected ReconConfig _reconConfig;
     
     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
@@ -130,6 +130,7 @@ public void write(JSONWriter writer, Properties options)
                                 writer.key("name"); writer.value(_columnName + ": judgment");
                                 writer.key("columnName"); writer.value(_columnName);
                                 writer.key("expression"); writer.value("cell.recon.judgment");
+                                writer.key("omitError"); writer.value(true);
                             writer.endObject();
                         writer.key("facetOptions");
                             writer.object();

File: src/main/java/com/metaweb/gridworks/model/Cell.java
Patch:
@@ -75,7 +75,7 @@ public void save(Writer writer, Properties options) {
     }
     
     static public Cell load(String s) throws Exception {
-        return load(ParsingUtilities.evaluateJsonStringToObject(s));
+        return s.length() == 0 ? null : load(ParsingUtilities.evaluateJsonStringToObject(s));
     }
     
     static public Cell load(JSONObject obj) throws Exception {

File: src/main/java/com/metaweb/gridworks/model/Column.java
Patch:
@@ -118,7 +118,7 @@ static public Column load(String s) throws Exception {
             column._reconConfig = ReconConfig.reconstruct(obj.getJSONObject("reconConfig"));
         }
         if (obj.has("reconStats")) {
-            column._reconStats = ReconStats.reconstruct(obj.getJSONObject("reconStats"));
+            column._reconStats = ReconStats.load(obj.getJSONObject("reconStats"));
         }
         
         return column;

File: src/main/java/com/metaweb/gridworks/model/Recon.java
Patch:
@@ -82,8 +82,10 @@ public Recon dup() {
         if (candidates != null) {
             r.candidates = new ArrayList<ReconCandidate>(candidates);
         }
+        
         r.judgment = judgment;
         r.match = match;
+        
         return r;
     }
     

File: src/main/java/com/metaweb/gridworks/model/ReconStats.java
Patch:
@@ -15,7 +15,7 @@
 public class ReconStats implements Serializable, Jsonizable {
     private static final long serialVersionUID = -4831409797104437854L;
 
-    static public ReconStats reconstruct(JSONObject obj) throws Exception {
+    static public ReconStats load(JSONObject obj) throws Exception {
         return new ReconStats(
                 obj.getInt("nonBlanks"),
                 obj.getInt("newTopics"),

File: src/main/java/com/metaweb/gridworks/util/ParsingUtilities.java
Patch:
@@ -17,7 +17,7 @@
 import org.json.JSONTokener;
 
 public class ParsingUtilities {
-    static public SimpleDateFormat s_sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+    static public SimpleDateFormat s_sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
     
     static public String inputStreamToString(InputStream is) throws IOException {
         Reader reader = new InputStreamReader(is, "UTF-8");

File: src/main/java/com/metaweb/gridworks/gel/ControlFunctionRegistry.java
Patch:
@@ -57,6 +57,7 @@
 import com.metaweb.gridworks.gel.controls.ForNonBlank;
 import com.metaweb.gridworks.gel.controls.If;
 import com.metaweb.gridworks.gel.controls.IsBlank;
+import com.metaweb.gridworks.gel.controls.IsError;
 import com.metaweb.gridworks.gel.controls.IsNonBlank;
 import com.metaweb.gridworks.gel.controls.IsNotNull;
 import com.metaweb.gridworks.gel.controls.IsNull;
@@ -169,5 +170,6 @@ static protected void registerControl(String name, Control c) {
         registerControl("isBlank", new IsBlank());
         registerControl("isNonBlank", new IsNonBlank());
         registerControl("isNumeric", new IsNumeric());
+        registerControl("isError", new IsError());
     }
 }

File: src/main/java/com/metaweb/gridworks/expr/util/CalendarParser.java
Patch:
@@ -741,7 +741,7 @@ private static final String[] loadTimeZoneNames() {
 
         Object result;
         try {
-            result = method.invoke((Object) null, (Object) null);
+            result = method.invoke((Object) null);
         } catch (IllegalAccessException iae) {
             return null;
         } catch (InvocationTargetException ite) {
@@ -766,8 +766,7 @@ private static final String[] loadTimeZoneNames() {
             for (int j = 0; j < tmpList.length; j++) {
                 final int len = tmpList[j].length();
                 if ((len > 2 && Character.isUpperCase(tmpList[j].charAt(1)))
-                        && (len != 7 || !Character
-                                .isDigit(tmpList[j].charAt(3)))) {
+                        && (len != 7 || !Character.isDigit(tmpList[j].charAt(3)))) {
                     if (finalList == null) {
                         numSaved++;
                     } else {

File: src/main/java/com/metaweb/gridworks/commands/edit/AddColumnCommand.java
Patch:
@@ -8,6 +8,7 @@
 import com.metaweb.gridworks.model.AbstractOperation;
 import com.metaweb.gridworks.model.Project;
 import com.metaweb.gridworks.operations.ColumnAdditionOperation;
+import com.metaweb.gridworks.operations.TextTransformOperation;
 
 public class AddColumnCommand extends EngineDependentCommand {
     @Override
@@ -18,11 +19,13 @@ protected AbstractOperation createOperation(Project project,
         String expression = request.getParameter("expression");
         String headerLabel = request.getParameter("headerLabel");
         int columnInsertIndex = Integer.parseInt(request.getParameter("columnInsertIndex"));
+        String onError = request.getParameter("onError");
         
         return new ColumnAdditionOperation(
             engineConfig, 
             baseColumnName, 
             expression,
+            TextTransformOperation.stringToOnError(onError),
             headerLabel,
             columnInsertIndex
         );

File: src/main/java/com/metaweb/gridworks/browsing/facets/ListFacet.java
Patch:
@@ -116,8 +116,9 @@ public void computeChoices(Project project, FilteredRows filteredRows) {
 		_choices.addAll(grouper.choices.values());
 		
 		for (NominalFacetChoice choice : _selection) {
-			if (grouper.choices.containsKey(choice.decoratedValue.value)) {
-				grouper.choices.get(choice.decoratedValue.value).selected = true;
+			String valueString = choice.decoratedValue.value.toString();
+			if (grouper.choices.containsKey(valueString)) {
+				grouper.choices.get(valueString).selected = true;
 			} else {
 				choice.count = 0;
 				_choices.add(choice);

File: src/main/java/com/metaweb/gridworks/expr/functions/strings/Fingerprint.java
Patch:
@@ -8,8 +8,6 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.metaweb.gridworks.expr.EvalError;
-import com.metaweb.gridworks.gel.ControlFunctionRegistry;
 import com.metaweb.gridworks.gel.Function;
 
 public class Fingerprint implements Function {
@@ -28,7 +26,7 @@ public Object call(Properties bindings, Object[] args) {
 			return StringUtils.join(frags," "); // rejoin them with a single space between them 
 			
 		}
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
+        return null;
 	}
 	
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/browsing/facets/ListFacet.java
Patch:
@@ -14,7 +14,7 @@
 import com.metaweb.gridworks.browsing.filters.ExpressionEqualRowFilter;
 import com.metaweb.gridworks.browsing.filters.RowFilter;
 import com.metaweb.gridworks.expr.Evaluable;
-import com.metaweb.gridworks.gel.Parser;
+import com.metaweb.gridworks.expr.MetaParser;
 import com.metaweb.gridworks.model.Project;
 
 public class ListFacet implements Facet {
@@ -74,7 +74,7 @@ public void initializeFromJSON(Project project, JSONObject o) throws Exception {
 		_columnName = o.getString("columnName");
 		_cellIndex = project.columnModel.getColumnByName(_columnName).getCellIndex();
 		
-		_eval = new Parser(_expression).getExpression();
+		_eval = MetaParser.parse(_expression);
 		_selection.clear();
 		
 		JSONArray a = o.getJSONArray("selection");

File: src/main/java/com/metaweb/gridworks/browsing/facets/RangeFacet.java
Patch:
@@ -10,7 +10,7 @@
 import com.metaweb.gridworks.browsing.filters.ExpressionNumberComparisonRowFilter;
 import com.metaweb.gridworks.browsing.filters.RowFilter;
 import com.metaweb.gridworks.expr.Evaluable;
-import com.metaweb.gridworks.gel.Parser;
+import com.metaweb.gridworks.expr.MetaParser;
 import com.metaweb.gridworks.model.Column;
 import com.metaweb.gridworks.model.Project;
 
@@ -80,7 +80,7 @@ public void initializeFromJSON(Project project, JSONObject o) throws Exception {
 		_columnName = o.getString("columnName");
 		_cellIndex = project.columnModel.getColumnByName(_columnName).getCellIndex();
 		
-		_eval = new Parser(_expression).getExpression();
+		_eval = MetaParser.parse(_expression);
 		
 		_mode = o.getString("mode");
 		if ("min".equals(_mode)) {

File: src/main/java/com/metaweb/gridworks/commands/util/PreviewExpressionCommand.java
Patch:
@@ -16,8 +16,8 @@
 import com.metaweb.gridworks.expr.Evaluable;
 import com.metaweb.gridworks.expr.ExpressionUtils;
 import com.metaweb.gridworks.expr.HasFields;
+import com.metaweb.gridworks.expr.MetaParser;
 import com.metaweb.gridworks.expr.ParsingException;
-import com.metaweb.gridworks.gel.Parser;
 import com.metaweb.gridworks.model.Cell;
 import com.metaweb.gridworks.model.Project;
 import com.metaweb.gridworks.model.Row;
@@ -50,7 +50,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 			writer.object();
 			
 			try {
-				Evaluable eval = new Parser(expression).getExpression();
+				Evaluable eval = MetaParser.parse(expression);
 				
 				writer.key("code"); writer.value("ok");
 				writer.key("results"); writer.array();

File: src/main/java/com/metaweb/gridworks/operations/ColumnAdditionOperation.java
Patch:
@@ -13,7 +13,7 @@
 import com.metaweb.gridworks.browsing.RowVisitor;
 import com.metaweb.gridworks.expr.Evaluable;
 import com.metaweb.gridworks.expr.ExpressionUtils;
-import com.metaweb.gridworks.gel.Parser;
+import com.metaweb.gridworks.expr.MetaParser;
 import com.metaweb.gridworks.history.Change;
 import com.metaweb.gridworks.history.HistoryEntry;
 import com.metaweb.gridworks.model.AbstractOperation;
@@ -113,7 +113,7 @@ protected HistoryEntry createHistoryEntry(Project project) throws Exception {
 	protected RowVisitor createRowVisitor(Project project, List<CellAtRow> cellsAtRows) throws Exception {
 		Column column = project.columnModel.getColumnByName(_baseColumnName);
 		
-		Evaluable eval = new Parser(_expression).getExpression();
+		Evaluable eval = MetaParser.parse(_expression);
         Properties bindings = ExpressionUtils.createBindings(project);
         
 		return new RowVisitor() {

File: src/main/java/com/metaweb/gridworks/operations/TextTransformOperation.java
Patch:
@@ -10,7 +10,7 @@
 import com.metaweb.gridworks.browsing.RowVisitor;
 import com.metaweb.gridworks.expr.Evaluable;
 import com.metaweb.gridworks.expr.ExpressionUtils;
-import com.metaweb.gridworks.gel.Parser;
+import com.metaweb.gridworks.expr.MetaParser;
 import com.metaweb.gridworks.model.AbstractOperation;
 import com.metaweb.gridworks.model.Cell;
 import com.metaweb.gridworks.model.Column;
@@ -64,7 +64,7 @@ protected String createDescription(Column column,
 	protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges) throws Exception {
 		Column column = project.columnModel.getColumnByName(_columnName);
 		
-		Evaluable eval = new Parser(_expression).getExpression();
+		Evaluable eval = MetaParser.parse(_expression);
         Properties bindings = ExpressionUtils.createBindings(project);
         
 		return new RowVisitor() {

File: src/main/java/com/metaweb/gridworks/expr/controls/ForEach.java
Patch:
@@ -8,6 +8,7 @@
 import org.json.JSONWriter;
 
 import com.metaweb.gridworks.expr.Control;
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.EvalError;
 import com.metaweb.gridworks.expr.Evaluable;
 import com.metaweb.gridworks.expr.ExpressionUtils;
@@ -16,9 +17,9 @@
 public class ForEach implements Control {
     public String checkArguments(Evaluable[] args) {
         if (args.length != 3) {
-            return "forEach expects 3 arguments";
+            return ControlFunctionRegistry.getControlName(this) + " expects 3 arguments";
         } else if (!(args[1] instanceof VariableExpr)) {
-            return "forEach expects second argument to be a variable name";
+            return ControlFunctionRegistry.getControlName(this) + " expects second argument to be a variable name";
         }
         return null;
     }

File: src/main/java/com/metaweb/gridworks/expr/controls/ForNonBlank.java
Patch:
@@ -6,16 +6,17 @@
 import org.json.JSONWriter;
 
 import com.metaweb.gridworks.expr.Control;
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Evaluable;
 import com.metaweb.gridworks.expr.ExpressionUtils;
 import com.metaweb.gridworks.expr.VariableExpr;
 
 public class ForNonBlank implements Control {
     public String checkArguments(Evaluable[] args) {
         if (args.length != 4) {
-            return "forNonBlank expects 4 arguments";
+            return ControlFunctionRegistry.getControlName(this) + " expects 4 arguments";
         } else if (!(args[1] instanceof VariableExpr)) {
-            return "forNonBlank expects second argument to be a variable name";
+            return ControlFunctionRegistry.getControlName(this) + " expects second argument to be a variable name";
         }
         return null;
     }

File: src/main/java/com/metaweb/gridworks/expr/controls/If.java
Patch:
@@ -6,13 +6,14 @@
 import org.json.JSONWriter;
 
 import com.metaweb.gridworks.expr.Control;
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Evaluable;
 import com.metaweb.gridworks.expr.ExpressionUtils;
 
 public class If implements Control {
     public String checkArguments(Evaluable[] args) {
         if (args.length != 3) {
-            return "if expects 3 arguments";
+            return ControlFunctionRegistry.getControlName(this) + " expects 3 arguments";
         }
         return null;
     }

File: src/main/java/com/metaweb/gridworks/commands/util/GetExpressionLanguageInfoCommand.java
Patch:
@@ -22,6 +22,9 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
 			throws ServletException, IOException {
 		
 		try {
+            response.setCharacterEncoding("UTF-8");
+            response.setHeader("Content-Type", "application/json");
+		    
 			JSONWriter writer = new JSONWriter(response.getWriter());
 			Properties options = new Properties();
 			

File: src/main/java/com/metaweb/gridworks/commands/util/GuessTypesOfColumnCommand.java
Patch:
@@ -40,6 +40,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 			Project project = getProject(request);
 			String columnName = request.getParameter("columnName");
 			
+            response.setCharacterEncoding("UTF-8");
+            response.setHeader("Content-Type", "application/json");
+			
 			JSONWriter writer = new JSONWriter(response.getWriter());
 			writer.object();
 			

File: src/main/java/com/metaweb/gridworks/commands/util/PreviewExpressionCommand.java
Patch:
@@ -40,6 +40,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 				return;
 			}
 			
+            response.setCharacterEncoding("UTF-8");
+            response.setHeader("Content-Type", "application/json");
+			
 			JSONArray rowIndices = jsonStringToArray(rowIndicesString);
 			int length = rowIndices.length();
 			

File: src/main/java/com/metaweb/gridworks/commands/util/PreviewProtographCommand.java
Patch:
@@ -24,6 +24,9 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)
 		try {
 			Project project = getProject(request);
 			
+            response.setCharacterEncoding("UTF-8");
+            response.setHeader("Content-Type", "application/json");
+			
 			String jsonString = request.getParameter("protograph");
 			JSONObject json = jsonStringToObject(jsonString);
 			Protograph protograph = Protograph.reconstruct(json);

File: src/main/java/com/metaweb/gridworks/expr/functions/strings/Unicode.java
Patch:
@@ -5,9 +5,7 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
-import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
-import com.metaweb.gridworks.expr.EvalError;
 
 public class Unicode implements Function {
 
@@ -21,7 +19,7 @@ public Object call(Properties bindings, Object[] args) {
 			}
 			return output;
 		}
-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an argument");
+        return null;
 	}
 	
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/ControlFunctionRegistry.java
Patch:
@@ -34,6 +34,7 @@
 import com.metaweb.gridworks.expr.functions.strings.Contains;
 import com.metaweb.gridworks.expr.functions.strings.Diff;
 import com.metaweb.gridworks.expr.functions.strings.EndsWith;
+import com.metaweb.gridworks.expr.functions.strings.Fingerprint;
 import com.metaweb.gridworks.expr.functions.strings.IndexOf;
 import com.metaweb.gridworks.expr.functions.strings.LastIndexOf;
 import com.metaweb.gridworks.expr.functions.strings.MD5;
@@ -125,6 +126,7 @@ static protected void registerControl(String name, Control c) {
         registerFunction("unicode", new Unicode());
         registerFunction("diff", new Diff());
         registerFunction("chomp", new Diff());
+        registerFunction("fingerprint", new Fingerprint());
         
         registerFunction("indexOf", new IndexOf());
         registerFunction("lastIndexOf", new LastIndexOf());

File: src/main/java/com/metaweb/gridworks/expr/functions/strings/Unicode.java
Patch:
@@ -15,9 +15,9 @@ public Object call(Properties bindings, Object[] args) {
 		if (args.length == 1 && args[0] != null) {
 			Object o = args[0];
 			String s = (o instanceof String) ? (String) o : o.toString();
-			int[] output = new int[s.length()];
+			Integer[] output = new Integer[s.length()];
 			for (int i = 0; i < s.length(); i++) {
-			    output[i] = Character.getNumericValue(s.codePointAt(i));
+			    output[i] = s.codePointAt(i);
 			}
 			return output;
 		}

File: src/main/java/com/metaweb/gridworks/operations/TextTransformOperation.java
Patch:
@@ -88,7 +88,7 @@ public boolean visit(Project project, int rowIndex, Row row, boolean contextual)
 				
                 Object v = eval.evaluate(bindings);
                 if ((cell != null && cell.value != null) || v != null) {
-                    Cell newCell = new Cell(v, cell.recon);
+                    Cell newCell = new Cell(v, (cell != null) ? cell.recon : null);
 				
     				CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
     				cellChanges.add(cellChange);

File: src/main/java/com/metaweb/gridworks/commands/recon/ReconJudgeOneCellCommand.java
Patch:
@@ -100,8 +100,8 @@ protected class JudgeOneCellProcess extends QuickHistoryEntryProcess {
 
 		protected HistoryEntry createHistoryEntry() throws Exception {
 			Cell cell = _project.rows.get(rowIndex).getCell(cellIndex);
-            if (cell == null || ExpressionUtils.isBlank(cell.value)) {
-				throw new Exception("Cell is blank");
+            if (cell == null || !ExpressionUtils.isNonBlankData(cell.value)) {
+				throw new Exception("Cell is blank or error");
 			}
 			
 			Column column = _project.columnModel.getColumnByCellIndex(cellIndex);

File: src/main/java/com/metaweb/gridworks/commands/util/GetExpressionLanguageInfoCommand.java
Patch:
@@ -12,8 +12,8 @@
 
 import com.metaweb.gridworks.commands.Command;
 import com.metaweb.gridworks.expr.Control;
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
-import com.metaweb.gridworks.expr.Parser;
 
 public class GetExpressionLanguageInfoCommand extends Command {
 	
@@ -30,7 +30,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
 			writer.key("functions");
 			writer.object();
 			{
-			    for (Entry<String, Function> entry : Parser.functionTable.entrySet()) {
+			    for (Entry<String, Function> entry : ControlFunctionRegistry.getFunctionMapping()) {
 			        writer.key(entry.getKey());
 			        entry.getValue().write(writer, options);
 			    }
@@ -40,7 +40,7 @@ public void doGet(HttpServletRequest request, HttpServletResponse response)
             writer.key("controls");
             writer.object();
             {
-                for (Entry<String, Control> entry : Parser.controlTable.entrySet()) {
+                for (Entry<String, Control> entry : ControlFunctionRegistry.getControlMapping()) {
                     writer.key(entry.getKey());
 			        entry.getValue().write(writer, options);
                 }

File: src/main/java/com/metaweb/gridworks/commands/util/GuessTypesOfColumnCommand.java
Patch:
@@ -86,7 +86,7 @@ protected List<TypeGroup> guessTypes(Project project, Column column) {
 		
 		for (Row row : project.rows) {
 			Object value = row.getCellValue(cellIndex);
-			if (!ExpressionUtils.isBlank(value)) {
+			if (ExpressionUtils.isNonBlankData(value)) {
 				String s = value.toString().trim();
 				if (!sampleSet.contains(s)) {
 					samples.add(s);

File: src/main/java/com/metaweb/gridworks/expr/Control.java
Patch:
@@ -6,4 +6,6 @@
 
 public interface Control extends Jsonizable {
 	public Object call(Properties bindings, Evaluable[] args);
+	
+	public String checkArguments(Evaluable[] args);
 }

File: src/main/java/com/metaweb/gridworks/expr/functions/EndsWith.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class EndsWith implements Function {
 
@@ -17,7 +19,7 @@ public Object call(Properties bindings, Object[] args) {
 				return ((String) s1).endsWith((String) s2);
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/IndexOf.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class IndexOf implements Function {
 
@@ -17,7 +19,7 @@ public Object call(Properties bindings, Object[] args) {
 				return ((String) s1).indexOf((String) s2);
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/IsBlank.java
Patch:
@@ -11,7 +11,7 @@
 public class IsBlank implements Function {
 
 	public Object call(Properties bindings, Object[] args) {
-		return args.length == 0 || ExpressionUtils.isBlank(args[0]);
+		return args.length == 0 || !ExpressionUtils.isNonBlankData(args[0]);
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/IsNotBlank.java
Patch:
@@ -11,14 +11,14 @@
 public class IsNotBlank implements Function {
 
 	public Object call(Properties bindings, Object[] args) {
-		return args.length > 0 && !ExpressionUtils.isBlank(args[0]);
+		return args.length > 0 && ExpressionUtils.isNonBlankData(args[0]);
 	}
 
 	public void write(JSONWriter writer, Properties options)
 		throws JSONException {
 	
 		writer.object();
-		writer.key("description"); writer.value("Returns whether o is not null and not an empty string");
+		writer.key("description"); writer.value("Returns whether o is not null, not an error, and not an empty string");
 		writer.key("params"); writer.value("o");
 		writer.key("returns"); writer.value("boolean");
 		writer.endObject();

File: src/main/java/com/metaweb/gridworks/expr/functions/Join.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class Join implements Function {
 
@@ -33,7 +35,7 @@ public Object call(Properties bindings, Object[] args) {
 				return sb.toString();
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array and a string");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/LastIndexOf.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class LastIndexOf implements Function {
 
@@ -17,7 +19,7 @@ public Object call(Properties bindings, Object[] args) {
 				return ((String) s1).lastIndexOf((String) s2);
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
 	}
 	
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/Length.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class Length implements Function {
 
@@ -23,7 +25,7 @@ public Object call(Properties bindings, Object[] args) {
 				}
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array or a string");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/Replace.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class Replace implements Function {
 
@@ -19,7 +21,7 @@ public Object call(Properties bindings, Object[] args) {
 				return (v instanceof String ? (String) v : v.toString()).replace((String) find, (String) replace);
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 3 strings");
 	}
 
 	

File: src/main/java/com/metaweb/gridworks/expr/functions/Reverse.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class Reverse implements Function {
 
@@ -24,7 +26,7 @@ public Object call(Properties bindings, Object[] args) {
 				return r;
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/Sort.java
Patch:
@@ -6,7 +6,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class Sort implements Function {
 
@@ -24,7 +26,7 @@ public Object call(Properties bindings, Object[] args) {
 				return r;
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/Split.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class Split implements Function {
 
@@ -17,7 +19,7 @@ public Object call(Properties bindings, Object[] args) {
 				return (v instanceof String ? (String) v : v.toString()).split((String) split);
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
 	}
 	
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/StartsWith.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class StartsWith implements Function {
 
@@ -17,7 +19,7 @@ public Object call(Properties bindings, Object[] args) {
 				return ((String) s1).startsWith((String) s2);
 			}
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
 	}
 	public void write(JSONWriter writer, Properties options)
 		throws JSONException {

File: src/main/java/com/metaweb/gridworks/expr/functions/ToLowercase.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class ToLowercase implements Function {
 
@@ -14,7 +16,7 @@ public Object call(Properties bindings, Object[] args) {
 			Object o = args[0];
 			return (o instanceof String ? (String) o : o.toString()).toLowerCase();
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
 	}
 	
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/ToTitlecase.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class ToTitlecase implements Function {
 
@@ -28,7 +30,7 @@ public Object call(Properties bindings, Object[] args) {
 			
 			return sb.toString();
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
 	}
 	
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/expr/functions/ToUppercase.java
Patch:
@@ -5,7 +5,9 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ControlFunctionRegistry;
 import com.metaweb.gridworks.expr.Function;
+import com.metaweb.gridworks.expr.EvalError;
 
 public class ToUppercase implements Function {
 
@@ -14,7 +16,7 @@ public Object call(Properties bindings, Object[] args) {
 			Object o = args[0];
 			return (o instanceof String ? (String) o : o.toString()).toUpperCase();
 		}
-		return null;
+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
 	}
 
 	public void write(JSONWriter writer, Properties options)

File: src/main/java/com/metaweb/gridworks/model/Project.java
Patch:
@@ -92,11 +92,11 @@ public int compare(Group o1, Group o2) {
 			for (int g = 0; g < keyedGroups.size(); g++) {
 				Group group = keyedGroups.get(g);
 				
-				if (ExpressionUtils.isBlank(row.getCellValue(group.keyCellIndex))) {
+				if (!ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {
 					int contextRowIndex = lastNonBlankRowsByGroup[g];
 					if (contextRowIndex >= 0) {
 						for (int dependentCellIndex : group.cellIndices) {
-							if (!ExpressionUtils.isBlank(row.getCellValue(dependentCellIndex))) {
+							if (ExpressionUtils.isNonBlankData(row.getCellValue(dependentCellIndex))) {
 								setRowDependency(
 									row, 
 									dependentCellIndex, 

File: src/main/java/com/metaweb/gridworks/model/ReconStats.java
Patch:
@@ -40,7 +40,7 @@ static public ReconStats create(Project project, int cellIndex) {
     	
     	for (Row row : project.rows) {
     		Cell cell = row.getCell(cellIndex);
-    		if (cell != null && !ExpressionUtils.isBlank(cell.value)) {
+    		if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
     			nonBlanks++;
     			
     			if (cell.recon != null) {

File: src/main/java/com/metaweb/gridworks/operations/MultiValuedCellJoinOperation.java
Patch:
@@ -95,7 +95,7 @@ protected HistoryEntry createHistoryEntry(Project project) throws Exception {
 		    StringBuffer sb = new StringBuffer();
 		    for (int r3 = r; r3 < r2; r3++) {
 		        Object value = project.rows.get(r3).getCellValue(cellIndex);
-		        if (!ExpressionUtils.isBlank(value)) {
+		        if (ExpressionUtils.isNonBlankData(value)) {
 		            if (sb.length() > 0) {
 		                sb.append(_separator);
 		            }

File: src/main/java/com/metaweb/gridworks/operations/ReconJudgeSimilarCellsOperation.java
Patch:
@@ -164,7 +164,7 @@ public RowVisitor init(int cellIndex, List<CellChange> cellChanges) {
 			public boolean visit(Project project, int rowIndex, Row row, boolean contextual) {
                 Cell cell = row.getCell(_cellIndex);
                 if (cell != null && 
-                	!ExpressionUtils.isBlank(cell.value) && 
+                	ExpressionUtils.isNonBlankData(cell.value) && 
                 	_similarValue.equals(cell.value)) {
                 	
                 	Recon recon = null;

File: src/main/java/com/metaweb/gridworks/operations/ReconOperation.java
Patch:
@@ -152,7 +152,7 @@ protected void populateEntries() throws Exception {
 				public boolean visit(Project project, int rowIndex, Row row, boolean contextual) {
 					if (_cellIndex < row.cells.size()) {
 						Cell cell = row.cells.get(_cellIndex);
-						if (cell != null && !ExpressionUtils.isBlank(cell.value)) {
+						if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
 							_entries.add(new ReconEntry(rowIndex, cell));
 						}
 					}

File: src/main/java/com/metaweb/gridworks/protograph/transpose/Transposer.java
Patch:
@@ -54,7 +54,7 @@ static protected void descend(
 			CellNode node2 = (CellNode) node;
 			Column column = project.columnModel.getColumnByName(node2.columnName);
 			Cell cell = row.getCell(column.getCellIndex());
-			if (cell != null && !ExpressionUtils.isBlank(cell.value)) {
+			if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
 				if (node2 instanceof CellTopicNode) {
 					if (!((CellTopicNode) node2).createForNoReconMatch && 
 						(cell.recon == null || cell.recon.judgment == Judgment.None)) {

File: src/main/java/com/metaweb/gridworks/importers/Importer.java
Patch:
@@ -9,6 +9,6 @@
 public interface Importer {
 	public boolean takesReader();
 	
-	public void read(Reader reader, Project project, Properties options, int limit) throws Exception;
-	public void read(InputStream inputStream, Project project, Properties options, int limit) throws Exception;
+	public void read(Reader reader, Project project, Properties options, int skip, int limit) throws Exception;
+	public void read(InputStream inputStream, Project project, Properties options, int skip, int limit) throws Exception;
 }

File: src/main/java/com/metaweb/gridworks/model/Recon.java
Patch:
@@ -73,7 +73,9 @@ public Recon dup() {
 		
 		System.arraycopy(features, 0, r.features, 0, features.length);
 		
-		r.candidates.addAll(candidates);
+		if (candidates != null) {
+			r.candidates = new ArrayList<ReconCandidate>(candidates);
+		}
 		r.judgment = judgment;
 		r.match = match;
 		return r;

File: src/main/java/com/metaweb/gridworks/expr/Control.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.util.Properties;
 
-public interface Control {
+import com.metaweb.gridworks.Jsonizable;
+
+public interface Control extends Jsonizable {
 	public Object call(Properties bindings, Evaluable[] args);
 }

File: src/main/java/com/metaweb/gridworks/expr/Function.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.util.Properties;
 
-public interface Function {
+import com.metaweb.gridworks.Jsonizable;
+
+public interface Function extends Jsonizable {
 	public Object call(Properties bindings, Object[] args);
 }

File: src/main/java/com/metaweb/gridworks/expr/functions/ToNumber.java
Patch:
@@ -7,7 +7,7 @@
 public class ToNumber implements Function {
 
 	public Object call(Properties bindings, Object[] args) {
-		if (args.length == 1) {
+		if (args.length == 1 && args[0] != null) {
 			return args[0] instanceof Number ? args[0] : Double.parseDouble(args[0].toString());
 		}
 		return null;

File: src/main/java/com/metaweb/gridworks/GridworksServlet.java
Patch:
@@ -37,6 +37,7 @@
 import com.metaweb.gridworks.commands.recon.ApproveReconcileCommand;
 import com.metaweb.gridworks.commands.recon.DiscardReconcileCommand;
 import com.metaweb.gridworks.commands.recon.JudgeOneCellCommand;
+import com.metaweb.gridworks.commands.recon.JudgeSimilarCellsCommand;
 import com.metaweb.gridworks.commands.recon.MatchSpecificTopicCommand;
 import com.metaweb.gridworks.commands.recon.ReconcileCommand;
 import com.metaweb.gridworks.commands.util.GetExpressionLanguageInfoCommand;
@@ -74,11 +75,12 @@ public class GridworksServlet extends HttpServlet {
         _commands.put("split-multi-value-cells", new SplitMultiValueCellsCommand());
 		
 		_commands.put("reconcile", new ReconcileCommand());
-		_commands.put("recon-approve-best-matches", new ApproveReconcileCommand());
+		_commands.put("recon-match-best-candidates", new ApproveReconcileCommand());
 		_commands.put("recon-mark-new-topics", new ApproveNewReconcileCommand());
 		_commands.put("recon-discard-judgments", new DiscardReconcileCommand());
 		_commands.put("recon-match-specific-topic-to-cells", new MatchSpecificTopicCommand());
 		_commands.put("recon-judge-one-cell", new JudgeOneCellCommand());
+        _commands.put("recon-judge-similar-cells", new JudgeSimilarCellsCommand());
 		
 		_commands.put("save-protograph", new SaveProtographCommand());
 		

File: src/main/java/com/metaweb/gridworks/commands/recon/JudgeOneCellCommand.java
Patch:
@@ -10,6 +10,7 @@
 import org.json.JSONWriter;
 
 import com.metaweb.gridworks.commands.Command;
+import com.metaweb.gridworks.expr.ExpressionUtils;
 import com.metaweb.gridworks.history.Change;
 import com.metaweb.gridworks.history.HistoryEntry;
 import com.metaweb.gridworks.model.Cell;
@@ -105,7 +106,7 @@ protected class JudgeOneCellProcess extends QuickHistoryEntryProcess {
 
 		protected HistoryEntry createHistoryEntry() throws Exception {
 			Cell cell = _project.rows.get(rowIndex).getCell(cellIndex);
-			if (cell == null || cell.value == null) {
+            if (cell == null || ExpressionUtils.isBlank(cell.value)) {
 				throw new Exception("Cell is blank");
 			}
 			

File: src/main/java/com/metaweb/gridworks/model/AbstractOperation.java
Patch:
@@ -15,7 +15,9 @@
  *  projects.
  */
 abstract public class AbstractOperation implements Serializable, Jsonizable {
-	public Process createProcess(Project project, Properties options) throws Exception {
+    private static final long serialVersionUID = 3916055862440019600L;
+
+    public Process createProcess(Project project, Properties options) throws Exception {
 		return new QuickHistoryEntryProcess(project, getBriefDescription()) {
 			@Override
 			protected HistoryEntry createHistoryEntry() throws Exception {

File: src/main/java/com/metaweb/gridworks/commands/edit/ApplyOperationsCommand.java
Patch:
@@ -92,7 +92,9 @@ protected void reconstructOperation(Project project, JSONObject obj) {
 					engineConfig, 
 					columnName,
 					obj.getString("typeID"),
-					obj.getString("typeName")
+					obj.getString("typeName"),
+					obj.getBoolean("autoMatch"),
+					obj.getDouble("minScore")
 				);
 			} else if ("save-protograph".equals(op)) {
 				operation = new SaveProtographOperation(

File: src/main/java/com/metaweb/gridworks/commands/recon/ReconcileCommand.java
Patch:
@@ -17,7 +17,9 @@ protected AbstractOperation createOperation(HttpServletRequest request,
 		String columnName = request.getParameter("columnName");
 		String typeID = request.getParameter("typeID");
 		String typeName = request.getParameter("typeName");
+        boolean autoMatch = "true".equals(request.getParameter("autoMatch"));
+        double minScore = autoMatch ? Double.parseDouble(request.getParameter("minScore")) : 0;
 		
-		return new ReconOperation(engineConfig, columnName, typeID, typeName);
+		return new ReconOperation(engineConfig, columnName, typeID, typeName, autoMatch, minScore);
 	}
 }

File: src/main/java/com/metaweb/gridworks/commands/edit/ApplyOperationsCommand.java
Patch:
@@ -91,7 +91,8 @@ protected void reconstructOperation(Project project, JSONObject obj) {
 				operation = new ReconOperation(
 					engineConfig, 
 					columnName,
-					obj.getString("typeID")
+					obj.getString("typeID"),
+					obj.getString("typeName")
 				);
 			} else if ("save-protograph".equals(op)) {
 				operation = new SaveProtographOperation(

File: src/main/java/com/metaweb/gridworks/commands/recon/ReconcileCommand.java
Patch:
@@ -15,8 +15,9 @@ protected AbstractOperation createOperation(HttpServletRequest request,
 			JSONObject engineConfig) throws Exception {
 		
 		String columnName = request.getParameter("columnName");
-		String typeID = request.getParameter("type");
+		String typeID = request.getParameter("typeID");
+		String typeName = request.getParameter("typeName");
 		
-		return new ReconOperation(engineConfig, columnName, typeID);
+		return new ReconOperation(engineConfig, columnName, typeID, typeName);
 	}
 }

File: src/main/java/com/metaweb/gridworks/browsing/facets/NumericBinIndex.java
Patch:
@@ -44,9 +44,9 @@ public NumericBinIndex(Project project, int cellIndex, Evaluable eval) {
 			}
 		}
 		
-		if (getMin() >= getMax()) {
+		if (_min >= _max) {
 			_step = 0;
-			_bins = new int[0];
+			_bins = new int[1];
 			return;
 		}
 		

File: src/main/java/com/metaweb/gridworks/GridworksServlet.java
Patch:
@@ -39,6 +39,7 @@
 import com.metaweb.gridworks.commands.recon.JudgeOneCellCommand;
 import com.metaweb.gridworks.commands.recon.ReconcileCommand;
 import com.metaweb.gridworks.commands.util.GetExpressionLanguageInfoCommand;
+import com.metaweb.gridworks.commands.util.GuessTypesOfColumnCommand;
 import com.metaweb.gridworks.commands.util.PreviewExpressionCommand;
 import com.metaweb.gridworks.commands.util.PreviewProtographCommand;
 
@@ -82,6 +83,7 @@ public class GridworksServlet extends HttpServlet {
 		_commands.put("preview-expression", new PreviewExpressionCommand());
         _commands.put("get-expression-language-info", new GetExpressionLanguageInfoCommand());
         _commands.put("preview-protograph", new PreviewProtographCommand());
+        _commands.put("guess-types-of-column", new GuessTypesOfColumnCommand());
 	}
 
 	@Override

File: src/main/java/com/metaweb/gridworks/commands/Command.java
Patch:
@@ -87,6 +87,7 @@ protected void respondJSON(HttpServletResponse response, Jsonizable o, Propertie
     }
     
     protected void respondException(HttpServletResponse response, Exception e) throws IOException {
+        e.printStackTrace();
     	try {
         	JSONObject o = new JSONObject();
         	o.put("code", "error");

File: src/main/java/com/metaweb/gridworks/model/operations/MultiValueCellJoinOperation.java
Patch:
@@ -7,6 +7,7 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 
+import com.metaweb.gridworks.expr.ExpressionUtils;
 import com.metaweb.gridworks.history.Change;
 import com.metaweb.gridworks.history.HistoryEntry;
 import com.metaweb.gridworks.model.AbstractOperation;
@@ -68,7 +69,7 @@ public Process createProcess(Project project, Properties options)
 		    StringBuffer sb = new StringBuffer();
 		    for (int r3 = r; r3 < r2; r3++) {
 		        Object value = project.rows.get(r3).getCellValue(_cellIndex);
-		        if (value != null) {
+		        if (!ExpressionUtils.isBlank(value)) {
 		            if (sb.length() > 0) {
 		                sb.append(_separator);
 		            }

File: src/main/java/com/metaweb/gridworks/expr/functions/Slice.java
Patch:
@@ -26,7 +26,7 @@ public Object call(Properties bindings, Object[] args) {
 					start = Math.min(a.length, Math.max(0, start));
 					
 					if (end < 0) {
-						end = a.length - end;
+						end = a.length + end;
 					}
 					end = Math.min(a.length, Math.max(start, end));
 					
@@ -46,7 +46,7 @@ public Object call(Properties bindings, Object[] args) {
 					if (to != null && to instanceof Number) {
 						int end = ((Number) to).intValue();
 						if (end < 0) {
-							end = s.length() - end;
+							end = s.length() + end;
 						}
 						end = Math.min(s.length(), Math.max(start, end));
 						

File: src/main/java/com/metaweb/gridworks/model/Row.java
Patch:
@@ -99,7 +99,8 @@ public Object getField(String name, Properties bindings) {
 			Project project = (Project) bindings.get("project");
 			Column column = project.columnModel.getColumnByName(name);
 			if (column != null) {
-				return cells.get(column.getCellIndex());
+			    int cellIndex = column.getCellIndex();
+				return getCell(cellIndex);
 			}
 			return null;
 		}

File: src/main/java/com/metaweb/gridworks/model/operations/MultiValueCellJoinOperation.java
Patch:
@@ -39,7 +39,7 @@ public MultiValueCellJoinOperation(
 	public Process createProcess(Project project, Properties options)
 			throws Exception {
 		
-		Column column = project.columnModel.columns.get(_cellIndex);
+		Column column = project.columnModel.getColumnByCellIndex(_cellIndex);
 		if (column == null) {
 			throw new Exception("No column corresponding to cell index " + _cellIndex);
 		}

File: src/main/java/com/metaweb/gridworks/model/operations/MultiValueCellSplitOperation.java
Patch:
@@ -43,7 +43,7 @@ public MultiValueCellSplitOperation(
 	public Process createProcess(Project project, Properties options)
 			throws Exception {
 		
-		Column column = project.columnModel.columns.get(_cellIndex);
+		Column column = project.columnModel.getColumnByCellIndex(_cellIndex);
 		if (column == null) {
 			throw new Exception("No column corresponding to cell index " + _cellIndex);
 		}

