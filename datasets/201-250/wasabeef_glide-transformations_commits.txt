File: transformations/src/main/java/jp/wasabeef/glide/transformations/ColorFilterTransformation.java
Patch:
@@ -35,7 +35,7 @@ public class ColorFilterTransformation extends BitmapTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.ColorFilterTransformation." + VERSION;
 
-  private int color;
+  private final int color;
 
   public ColorFilterTransformation(int color) {
     this.color = color;

File: transformations/src/main/java/jp/wasabeef/glide/transformations/CropCircleWithBorderTransformation.java
Patch:
@@ -38,8 +38,8 @@ public class CropCircleWithBorderTransformation extends BitmapTransformation {
   private static final int VERSION = 1;
   private static final String ID = "jp.wasabeef.glide.transformations.CropCircleWithBorderTransformation." + VERSION;
 
-  private int borderSize;
-  private int borderColor;
+  private final int borderSize;
+  private final int borderColor;
 
 
   public CropCircleWithBorderTransformation() {

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/BrightnessFilterTransformation.java
Patch:
@@ -31,7 +31,7 @@ public class BrightnessFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.BrightnessFilterTransformation." + VERSION;
 
-  private float brightness;
+  private final float brightness;
 
   public BrightnessFilterTransformation() {
     this(0.0f);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/ContrastFilterTransformation.java
Patch:
@@ -31,7 +31,7 @@ public class ContrastFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.ContrastFilterTransformation." + VERSION;
 
-  private float contrast;
+  private final float contrast;
 
   public ContrastFilterTransformation() {
     this(1.0f);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/GPUFilterTransformation.java
Patch:
@@ -36,7 +36,7 @@ public class GPUFilterTransformation extends BitmapTransformation {
     "jp.wasabeef.glide.transformations.gpu.GPUFilterTransformation." + VERSION;
   private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
 
-  private GPUImageFilter gpuImageFilter;
+  private final GPUImageFilter gpuImageFilter;
 
   public GPUFilterTransformation(GPUImageFilter filter) {
     this.gpuImageFilter = filter;

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/KuwaharaFilterTransformation.java
Patch:
@@ -34,7 +34,7 @@ public class KuwaharaFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.KuwaharaFilterTransformation." + VERSION;
 
-  private int radius;
+  private final int radius;
 
   public KuwaharaFilterTransformation() {
     this(25);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/PixelationFilterTransformation.java
Patch:
@@ -33,7 +33,7 @@ public class PixelationFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.PixelationFilterTransformation." + VERSION;
 
-  private float pixel;
+  private final float pixel;
 
   public PixelationFilterTransformation() {
     this(10f);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/SepiaFilterTransformation.java
Patch:
@@ -33,7 +33,7 @@ public class SepiaFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.SepiaFilterTransformation." + VERSION;
 
-  private float intensity;
+  private final float intensity;
 
   public SepiaFilterTransformation() {
     this(1.0f);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/SwirlFilterTransformation.java
Patch:
@@ -33,9 +33,9 @@ public class SwirlFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.SwirlFilterTransformation." + VERSION;
 
-  private float radius;
-  private float angle;
-  private PointF center;
+  private final float radius;
+  private final float angle;
+  private final PointF center;
 
   public SwirlFilterTransformation() {
     this(.5f, 1.0f, new PointF(0.5f, 0.5f));

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/ToonFilterTransformation.java
Patch:
@@ -33,8 +33,8 @@ public class ToonFilterTransformation extends GPUFilterTransformation {
   private static final String ID =
     "jp.wasabeef.glide.transformations.gpu.ToonFilterTransformation." + VERSION;
 
-  private float threshold;
-  private float quantizationLevels;
+  private final float threshold;
+  private final float quantizationLevels;
 
   public ToonFilterTransformation() {
     this(.2f, 10.0f);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/internal/RSBlur.java
Patch:
@@ -28,7 +28,6 @@
 
 public class RSBlur {
 
-  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
   public static Bitmap blur(Context context, Bitmap bitmap, int radius) throws RSRuntimeException {
     RenderScript rs = null;
     Allocation input = null;

File: transformations/src/main/java/jp/wasabeef/glide/transformations/RoundedCornersTransformation.java
Patch:
@@ -222,8 +222,8 @@ private void drawDiagonalFromTopLeftRoundRect(Canvas canvas, Paint paint, float
         radius, paint);
     canvas.drawRoundRect(new RectF(right - diameter, bottom - diameter, right, bottom), radius,
         radius, paint);
-    canvas.drawRect(new RectF(margin, margin + radius, right - diameter, bottom), paint);
-    canvas.drawRect(new RectF(margin + diameter, margin, right, bottom - radius), paint);
+    canvas.drawRect(new RectF(margin, margin + radius, right - radius, bottom), paint);
+    canvas.drawRect(new RectF(margin + radius, margin, right, bottom - radius), paint);
   }
 
   private void drawDiagonalFromTopRightRoundRect(Canvas canvas, Paint paint, float right,

File: example/src/main/java/jp/wasabeef/example/glide/MainActivity.java
Patch:
@@ -29,6 +29,7 @@ public class MainActivity extends AppCompatActivity {
     dataSet.add(Type.Grayscale);
     dataSet.add(Type.RoundedCorners);
     dataSet.add(Type.Blur);
+    dataSet.add(Type.SupportRSBlur);
     dataSet.add(Type.Toon);
     dataSet.add(Type.Sepia);
     dataSet.add(Type.Contrast);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/CropCircleTransformation.java
Patch:
@@ -33,7 +33,6 @@ public class CropCircleTransformation extends BitmapTransformation {
   private static final int VERSION = 1;
   private static final String ID =
       "jp.wasabeef.glide.transformations.CropCircleTransformation." + VERSION;
-  private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
 
   @Override protected Bitmap transform(@NonNull Context context, @NonNull BitmapPool pool,
       @NonNull Bitmap toTransform, int outWidth, int outHeight) {
@@ -52,7 +51,7 @@ public class CropCircleTransformation extends BitmapTransformation {
     return ID.hashCode();
   }
 
-  @Override public void updateDiskCacheKey(MessageDigest messageDigest) {
-    messageDigest.update(ID_BYTES);
+  @Override public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {
+    messageDigest.update((ID).getBytes(CHARSET));
   }
 }

File: transformations/src/main/java/jp/wasabeef/glide/transformations/GrayscaleTransformation.java
Patch:
@@ -31,7 +31,6 @@ public class GrayscaleTransformation extends BitmapTransformation {
   private static final int VERSION = 1;
   private static final String ID =
       "jp.wasabeef.glide.transformations.GrayscaleTransformation." + VERSION;
-  private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
 
   @Override protected Bitmap transform(@NonNull Context context, @NonNull BitmapPool pool,
       @NonNull Bitmap toTransform, int outWidth, int outHeight) {
@@ -64,7 +63,7 @@ public class GrayscaleTransformation extends BitmapTransformation {
     return ID.hashCode();
   }
 
-  @Override public void updateDiskCacheKey(MessageDigest messageDigest) {
-    messageDigest.update(ID_BYTES);
+  @Override public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {
+    messageDigest.update((ID).getBytes(CHARSET));
   }
 }

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/GPUFilterTransformation.java
Patch:
@@ -63,7 +63,7 @@ public GPUFilterTransformation(GPUImageFilter filter) {
     return ID.hashCode();
   }
 
-  @Override public void updateDiskCacheKey(MessageDigest messageDigest) {
+  @Override public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {
     messageDigest.update(ID_BYTES);
   }
 }

File: transformations/src/main/java/jp/wasabeef/glide/transformations/BlurTransformation.java
Patch:
@@ -88,7 +88,7 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
     paint.setFlags(Paint.FILTER_BITMAP_FLAG);
     canvas.drawBitmap(source, 0, 0, paint);
 
-    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
       try {
         bitmap = RSBlur.blur(mContext, bitmap, mRadius);
       } catch (RSRuntimeException e) {

File: transformations/src/main/java/jp/wasabeef/glide/transformations/internal/RSBlur.java
Patch:
@@ -28,11 +28,12 @@
 
 public class RSBlur {
 
-  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
   public static Bitmap blur(Context context, Bitmap bitmap, int radius) throws RSRuntimeException {
     RenderScript rs = null;
     try {
       rs = RenderScript.create(context);
+      rs.setMessageHandler(new RenderScript.RSMessageHandler());
       Allocation input =
           Allocation.createFromBitmap(rs, bitmap, Allocation.MipmapControl.MIPMAP_NONE,
               Allocation.USAGE_SCRIPT);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/MaskTransformation.java
Patch:
@@ -32,13 +32,13 @@
 
 public class MaskTransformation implements Transformation<Bitmap> {
 
-  private static Paint mMaskingPaint = new Paint();
+  private static Paint sMaskingPaint = new Paint();
   private Context mContext;
   private BitmapPool mBitmapPool;
   private int mMaskId;
 
   static {
-    mMaskingPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+    sMaskingPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
   }
 
   /**
@@ -73,7 +73,7 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
     Canvas canvas = new Canvas(result);
     mask.setBounds(0, 0, width, height);
     mask.draw(canvas);
-    canvas.drawBitmap(source, 0, 0, mMaskingPaint);
+    canvas.drawBitmap(source, 0, 0, sMaskingPaint);
 
     return BitmapResource.obtain(result, mBitmapPool);
   }

File: transformations/src/main/java/jp/wasabeef/glide/transformations/MaskTransformation.java
Patch:
@@ -32,13 +32,13 @@
 
 public class MaskTransformation implements Transformation<Bitmap> {
 
-  private static Paint mMaskingPaint = new Paint();
+  private static Paint sMaskingPaint = new Paint();
   private Context mContext;
   private BitmapPool mBitmapPool;
   private int mMaskId;
 
   static {
-    mMaskingPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+    sMaskingPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
   }
 
   /**
@@ -73,7 +73,7 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
     Canvas canvas = new Canvas(result);
     mask.setBounds(0, 0, width, height);
     mask.draw(canvas);
-    canvas.drawBitmap(source, 0, 0, mMaskingPaint);
+    canvas.drawBitmap(source, 0, 0, sMaskingPaint);
 
     return BitmapResource.obtain(result, mBitmapPool);
   }

File: transformations/src/main/java/jp/wasabeef/glide/transformations/BlurTransformation.java
Patch:
@@ -58,14 +58,14 @@ public BlurTransformation(Context context, int radius) {
   }
 
   public BlurTransformation(Context context, BitmapPool pool, int radius, int sampling) {
-    mContext = context;
+    mContext = context.getApplicationContext();
     mBitmapPool = pool;
     mRadius = radius;
     mSampling = sampling;
   }
 
   public BlurTransformation(Context context, int radius, int sampling) {
-    mContext = context;
+    mContext = context.getApplicationContext();
     mBitmapPool = Glide.get(context).getBitmapPool();
     mRadius = radius;
     mSampling = sampling;

File: example/src/main/java/jp/wasabeef/example/glide/MainActivity.java
Patch:
@@ -22,7 +22,9 @@ protected void onCreate(Bundle savedInstanceState) {
         recyclerView.setLayoutManager(new GridLayoutManager(this, 2));
 
         List<Type> dataSet = new ArrayList<>();
-        dataSet.add(Type.Crop);
+        dataSet.add(Type.CropTop);
+        dataSet.add(Type.CropCenter);
+        dataSet.add(Type.CropBottom);
         dataSet.add(Type.CropSquare);
         dataSet.add(Type.CropCircle);
         dataSet.add(Type.ColorFilter);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/BlurTransformation.java
Patch:
@@ -24,8 +24,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Rect;
 import android.support.v8.renderscript.Allocation;
 import android.support.v8.renderscript.RenderScript;
 import android.support.v8.renderscript.ScriptIntrinsicBlur;
@@ -74,7 +72,6 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         blur.forEach(overlayAlloc);
         overlayAlloc.copyTo(bitmap);
 
-        source.recycle();
         rs.destroy();
 
         return BitmapResource.obtain(bitmap, mBitmapPool);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/ColorFilterTransformation.java
Patch:
@@ -58,8 +58,6 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         paint.setColorFilter(new PorterDuffColorFilter(mColor, PorterDuff.Mode.SRC_ATOP));
         canvas.drawBitmap(source, 0, 0, paint);
 
-        source.recycle();
-
         return BitmapResource.obtain(bitmap, mBitmapPool);
     }
 

File: transformations/src/main/java/jp/wasabeef/glide/transformations/CropCircleTransformation.java
Patch:
@@ -63,8 +63,6 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         float r = size / 2f;
         canvas.drawCircle(r, r, r, paint);
 
-        source.recycle();
-
         return BitmapResource.obtain(bitmap, mBitmapPool);
     }
 

File: transformations/src/main/java/jp/wasabeef/glide/transformations/CropTransformation.java
Patch:
@@ -71,8 +71,6 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         Canvas canvas = new Canvas(bitmap);
         canvas.drawBitmap(source, null, targetRect, null);
 
-        source.recycle();
-
         return BitmapResource.obtain(bitmap, mBitmapPool);
     }
 

File: transformations/src/main/java/jp/wasabeef/glide/transformations/GrayscaleTransformation.java
Patch:
@@ -56,8 +56,6 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         paint.setColorFilter(new ColorMatrixColorFilter(saturation));
         canvas.drawBitmap(source, 0, 0, paint);
 
-        source.recycle();
-
         return BitmapResource.obtain(bitmap, mBitmapPool);
     }
 

File: transformations/src/main/java/jp/wasabeef/glide/transformations/RoundedCornersTransformation.java
Patch:
@@ -62,8 +62,6 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         canvas.drawRoundRect(new RectF(margin, margin, width - margin, height - margin),
                 radius, radius, paint);
 
-        source.recycle();
-
         return BitmapResource.obtain(bitmap, mBitmapPool);
     }
 

File: transformations/src/main/java/jp/wasabeef/glide/transformations/CropCircleTransformation.java
Patch:
@@ -43,9 +43,9 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         int width = (source.getWidth() - size) / 2;
         int height = (source.getHeight() - size) / 2;
 
-        Bitmap bitmap = mBitmapPool.get(width, height, source.getConfig());
+        Bitmap bitmap = mBitmapPool.get(size, size, source.getConfig());
         if (bitmap == null) {
-            bitmap = Bitmap.createBitmap(width, height, source.getConfig());
+            bitmap = Bitmap.createBitmap(size, size, source.getConfig());
         }
 
         Canvas canvas = new Canvas(bitmap);

File: transformations/src/main/java/jp/wasabeef/glide/transformations/BlurTransformation.java
Patch:
@@ -65,6 +65,8 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
             script.setInput(input);
             script.forEach(output);
             output.copyTo(bitmap);
+
+            source.recycle();
             return BitmapResource.obtain(bitmap, mBitmapPool);
         }
 

File: transformations/src/main/java/jp/wasabeef/glide/transformations/gpu/SwirlFilterTransformation.java
Patch:
@@ -64,10 +64,10 @@ public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int o
         gpuImage.setImage(source);
         GPUImageSwirlFilter filter = new GPUImageSwirlFilter();
         if (mRadius != 0) {
-            filter.setAngle(mAngle);
+            filter.setRadius(mRadius);
         }
         if (mAngle != 0) {
-            filter.setRadius(mAngle);
+            filter.setAngle(mAngle);
         }
         if (mCenter != null) {
             filter.setCenter(mCenter);

