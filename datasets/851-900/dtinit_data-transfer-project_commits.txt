File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/MicrosoftApiResponse.java
Patch:
@@ -218,7 +218,7 @@ public MicrosoftApiResponse returnConvertDtpException(String message)
 
   private FatalState toFatalState() {
     checkState(isFatal(), "cannot explain fatal state when is apparently recoverable");
-    if (httpStatus() == 403 && httpMessage().contains("Access Denied")) {
+    if (httpStatus() == 403 && (bodyContains("accessDenied") || bodyContains("notAllowed"))) {
       return FatalState.FATAL_STATE_FATAL_PERMISSION_DENIED;
     }
     // Nit: we _could_ just parse the body into json properly and make sure the JSON body "message"

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/blob/DtpDigitalDocument.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 /**
  * This is intended to by a sub set of schema.org's DigitalDocumentWrapper
@@ -10,6 +11,7 @@
  */
 // N.B. if this class gets more complex we can just use: https://github.com/google/schemaorg-java
 // but right now that probably add more complexity in terms of extra cognitive load.
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class DtpDigitalDocument {
 
   private final String name;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/calendar/CalendarAttendeeModel.java
Patch:
@@ -17,9 +17,11 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 import java.util.Objects;
 
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class CalendarAttendeeModel {
   private final String displayName;
   private final String email;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/calendar/CalendarModel.java
Patch:
@@ -18,11 +18,14 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+
 import org.datatransferproject.types.common.ImportableItem;
 
 import javax.annotation.Nonnull;
 import java.util.Objects;
 
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class CalendarModel implements ImportableItem {
   private final String id;
   private final String name;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityActor.java
Patch:
@@ -19,11 +19,14 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+
 import org.datatransferproject.types.common.ImportableItem;
 
 import javax.annotation.Nonnull;
 import java.util.Objects;
 
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class SocialActivityActor implements ImportableItem {
   private final String url;
   private final String name;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityAttachment.java
Patch:
@@ -19,11 +19,14 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+
 import org.datatransferproject.types.common.ImportableItem;
 
 import javax.annotation.Nonnull;
 import java.util.Objects;
 
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class SocialActivityAttachment implements ImportableItem {
   private final SocialActivityAttachmentType type;
   private final String url;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityLocation.java
Patch:
@@ -18,9 +18,11 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 import java.util.Objects;
 
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class SocialActivityLocation {
 
   private final String name;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityModel.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.google.common.collect.ImmutableList;
 import org.datatransferproject.types.common.ImportableItem;
 
@@ -26,6 +27,7 @@
 import java.util.Collection;
 import java.util.Objects;
 
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
 public class SocialActivityModel implements ImportableItem {
   private final String id;
   private final Instant published;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosInterface.java
Patch:
@@ -102,10 +102,10 @@ public GooglePhotosInterface(
       JsonFactory jsonFactory,
       Monitor monitor,
       double writesPerSecond) {
+    this.credentialFactory = credentialFactory;
     this.credential = credential;
     this.jsonFactory = jsonFactory;
     this.monitor = monitor;
-    this.credentialFactory = credentialFactory;
     writeRateLimiter = RateLimiter.create(writesPerSecond);
   }
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/MicrosoftTransferExtension.java
Patch:
@@ -97,6 +97,7 @@ public void initialize(ExtensionContext context) {
     // times.
     if (initialized) return;
 
+    final double maxWritesPerSecond =  context.getSetting("msoftMaxWritesPerSecond", 1.0);
     TemporaryPerJobDataStore jobStore = context.getService(TemporaryPerJobDataStore.class);
     HttpTransport httpTransport = context.getService(HttpTransport.class);
     JsonFactory jsonFactory = context.getService(JsonFactory.class);
@@ -136,7 +137,7 @@ public void initialize(ExtensionContext context) {
         PHOTOS, new MicrosoftPhotosImporter(BASE_GRAPH_URL, client, mapper, jobStore, monitor,
           credentialFactory, jobFileStream));
     importBuilder.put(MEDIA, new MicrosoftMediaImporter(BASE_GRAPH_URL, client, mapper, jobStore, monitor,
-          credentialFactory, jobFileStream));
+          credentialFactory, jobFileStream, maxWritesPerSecond));
     importerMap = importBuilder.build();
 
     ImmutableMap.Builder<DataVertical, Exporter> exporterBuilder = ImmutableMap.builder();

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/media/MicrosoftMediaImporterTest.java
Patch:
@@ -116,7 +116,8 @@ public void setUp() throws IOException {
             jobStore,
             monitor,
             credentialFactory,
-            new JobFileStream(remoteFileStreamer));
+            new JobFileStream(remoteFileStreamer),
+            1.0 /*maxWritesPerSecond*/);
   }
 
   @Test

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/SignalRequest.java
Patch:
@@ -16,10 +16,12 @@
 
 package org.datatransferproject.spi.transfer.provider;
 
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.google.auto.value.AutoValue;
 import org.datatransferproject.spi.transfer.types.signals.JobLifeCycle;
 
 @AutoValue
+@JsonDeserialize(builder = SignalRequest.Builder.class)
 public abstract class SignalRequest {
   public abstract String jobId();
   public abstract String dataType();

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/media/MicrosoftMediaImporter.java
Patch:
@@ -405,11 +405,10 @@ private MicrosoftApiResponse tryWithCredsOrFail(Request.Builder req, String caus
           throw new AssertionError("exhaustive switch");
       }
     }
-    response.throwDtpException(
+    return response.returnConvertDtpException(
         String.format(
-            "%s with " + "request url: %s\n" + "bearer token: %s\n",
+            "%s: for request url \"%s\" and bearer token \"%s\"\n",
             causeMessage, reqResp.getLeft().url(), credential.getAccessToken()));
-    throw new AssertionError("unreachable: throwDtpException throws");
   }
 
   /**

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/media/FlickrMediaImporter.java
Patch:
@@ -318,6 +318,8 @@ private static String cleanString(String string) {
         return Strings.isNullOrEmpty(string) ? "" : string;
     }
 
+    // TODO migrate this testability-surface to newly shared JobFileStreamer and RemoteFileStreamer
+    // of org.datatransferproject.spi.api.transport package.
     @VisibleForTesting
     class ImageStreamProvider {
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/media/MicrosoftMediaExporterTest.java
Patch:
@@ -36,8 +36,8 @@
 import org.datatransferproject.types.common.StringPaginationToken;
 import org.datatransferproject.types.common.models.ContainerResource;
 import org.datatransferproject.types.common.models.IdOnlyContainerResource;
-import org.datatransferproject.types.common.models.media.MediaContainerResource;
 import org.datatransferproject.types.common.models.media.MediaAlbum;
+import org.datatransferproject.types.common.models.media.MediaContainerResource;
 import org.datatransferproject.types.common.models.photos.PhotoModel;
 import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -21,8 +21,8 @@
 import com.google.common.base.Strings;
 import com.google.inject.Inject;
 import com.google.inject.Provider;
-
 import com.google.inject.name.Named;
+
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Optional;

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerModule.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.util.concurrent.AbstractScheduledService.Scheduler;
 import com.google.inject.Provides;
 import com.google.inject.Singleton;
+import com.google.inject.name.Named;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.List;
@@ -313,7 +314,8 @@ public IdempotentImportExecutor getRetryingIdempotentImportExecutor() {
     return idempotentImportExecutorExtension.getRetryingIdempotentImportExecutor(context);
   }
 
-  @Flag
+  @Provides
+  @Named("transferSignalEnabled")
   public Boolean transferSignalEnabled() {
     return context.getSetting("transferSignalEnabled", Boolean.TRUE);
   }

File: extensions/data-transfer/portability-data-transfer-apple/src/main/java/org/datatransferproject/datatransfer/apple/constants/ApplePhotosConstants.java
Patch:
@@ -31,4 +31,5 @@ public class ApplePhotosConstants {
   public static final String BYTES_KEY = "bytes";
   public static final String COUNT_KEY = "count";
   public static final String APPLE_PHOTOS_IMPORT_ERROR_PREFIX = "APPLE PHOTOS IMPORT:";
+  public static final String APPLE_PHOTOS_UNTITLED_FILE_NAME = "untitled";
 }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/music/GoogleMusicHttpApi.java
Patch:
@@ -192,7 +192,7 @@ private <T> T makePostRequest(
     HttpRequest postRequest =
         requestFactory.buildPostRequest(
             new GenericUrl(baseUrl + "?" + generateParamsString(parameters)), httpContent);
-    postRequest.setReadTimeout(6000); // 6 seconds read timeout
+    postRequest.setReadTimeout(30000); // 30 seconds read timeout
     HttpResponse response;
 
     try {

File: extensions/data-transfer/portability-data-transfer-apple/src/main/java/org/datatransferproject/datatransfer/apple/photos/AppleMediaInterface.java
Patch:
@@ -668,6 +668,9 @@ private static String getDataId(DownloadableFile downloadableFile) {
     if (downloadableFile instanceof PhotoModel) {
       return ((PhotoModel) downloadableFile).getDataId();
     }
+    else if (downloadableFile instanceof VideoModel) {
+      return ((VideoModel) downloadableFile).getDataId();
+    }
     return downloadableFile.getIdempotentId();
   }
 

File: extensions/data-transfer/portability-data-transfer-apple/src/test/java/org/datatransferproject/datatransfer/apple/photos/AppleMediaImporterTest.java
Patch:
@@ -160,7 +160,7 @@ public void importPhotosVideosAndAlbums() throws Exception {
         videos.stream()
             .collect(
                 Collectors.toMap(
-                    videoModel -> videoModel.getDataId(),
+                    videoModel -> videoModel.getAlbumId() + "-" +videoModel.getDataId(),
                     videoModel -> MEDIA_RECORDID_BASE + videoModel.getDataId())));
     checkKnownValues(expectedKnownValue);
   }

File: extensions/data-transfer/portability-data-transfer-apple/src/test/java/org/datatransferproject/datatransfer/apple/photos/AppleVideosImporterTest.java
Patch:
@@ -72,7 +72,7 @@ public void importSingleVideo() throws Exception {
         videos.stream()
             .collect(
                 Collectors.toMap(
-                    VideoModel -> VideoModel.getDataId(),
+                      VideoModel -> VideoModel.getAlbumId() + "-" +VideoModel.getDataId(),
                     VideoModel -> MEDIA_RECORDID_BASE + VideoModel.getDataId()));
     checkKnownValues(expectedKnownValue);
   }
@@ -189,7 +189,7 @@ public void importVideosWithFailure() throws Exception {
                     datatIdToCreateMediaStatus.get(VideoModel.getDataId()) == SC_OK)
             .collect(
                 Collectors.toMap(
-                    video -> video.getDataId(),
+                    video -> video.getAlbumId() + "-" +video.getDataId(),
                     video -> VIDEOS_DATAID_BASE + video.getDataId()));
     checkKnownValues(expectedKnownValue);
 

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/media/FlickrMediaImporter.java
Patch:
@@ -143,7 +143,7 @@ public ImportResult importItem(
                 } catch (FlickrException e) {
                     if (e.getMessage().contains("Upload limit reached")) {
                         throw new DestinationMemoryFullException("Flickr destination memory reached", e);
-                    } else if (e.getMessage().contains("Video already in set")) {
+                    } else if (e.getMessage().contains("Photo already in set")) {
                         // This can happen if we got a server error on our end, but the request went through.
                         // When our retry strategy kicked in the request was complete and the photo already
                         // uploaded

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/retry/RetryStrategy.java
Patch:
@@ -34,7 +34,9 @@
     @JsonSubTypes.Type(value = UniformRetryStrategy.class, name = "Uniform"),
     @JsonSubTypes.Type(value = ExponentialBackoffStrategy.class, name = "Exponential"),
     @JsonSubTypes.Type(value = NoRetryStrategy.class, name = "Fatal"),
-    @JsonSubTypes.Type(value = SkipRetryStrategy.class, name = "Skip")
+    @JsonSubTypes.Type(value = SkipRetryStrategy.class, name = "Skip"),
+    @JsonSubTypes.Type(value = ExponentialBackoffSkipStrategy.class, name = "ExponentialSkip"),
+    @JsonSubTypes.Type(value = UniformRetrySkipStrategy.class, name = "UniformSkip")
 })
 public interface RetryStrategy {
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -149,7 +149,7 @@ public void initialize(ExtensionContext context) {
     exporterBuilder.put(TASKS, new GoogleTasksExporter(credentialFactory, monitor));
     exporterBuilder.put(
         PHOTOS, new GooglePhotosExporter(credentialFactory, jobStore, jsonFactory, monitor));
-    exporterBuilder.put(VIDEOS, new GoogleVideosExporter(credentialFactory, jsonFactory));
+    exporterBuilder.put(VIDEOS, new GoogleVideosExporter(credentialFactory, jobStore, jsonFactory, monitor));
     exporterBuilder.put(
         MEDIA, new GoogleMediaExporter(credentialFactory, jobStore, jsonFactory, monitor, /* photosInterface= */ null, idempotentImportExecutor, enableRetrying));
     exporterBuilder.put(MUSIC, new GoogleMusicExporter(credentialFactory, jsonFactory, monitor));

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosExporterTest.java
Patch:
@@ -375,6 +375,7 @@ private GoogleMediaItem setUpSinglePhoto(String imageUri, String photoId) {
     photoEntry.setFilename(FILENAME);
     MediaMetadata mediaMetadata = new MediaMetadata();
     mediaMetadata.setPhoto(new Photo());
+    mediaMetadata.setCreationTime("2022-09-01T20:25:38Z");
     photoEntry.setMediaMetadata(mediaMetadata);
 
     return photoEntry;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/photos/PhotoModel.java
Patch:
@@ -37,6 +37,9 @@ public class PhotoModel implements DownloadableFile {
   private final boolean inTempStore;
   private String dataId;
   @Nullable private String sha1;  // SHA-1 hash in Hex (base16).
+
+  // TODO akshaysinghh - rename the field to creationTime since creation time is what all the
+  //  services use to display the photos timeline, instead of uploadTime.
   private Date uploadedTime;
 
   @JsonCreator

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/videos/VideoModel.java
Patch:
@@ -31,6 +31,9 @@ public class VideoModel extends MediaObject implements DownloadableFile {
   private String dataId;
   private String albumId;
   private boolean inTempStore;
+
+  // TODO akshaysinghh - rename the field to creationTime since creation time is what all the
+  //  services use to display the photos timeline, instead of uploadTime.
   private Date uploadedTime;
 
   @JsonCreator

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/idempotentexecutor/RetryingInMemoryIdempotentImportExecutor.java
Patch:
@@ -105,7 +105,9 @@ public <T extends Serializable> T executeOrThrowException(
         errors.put(idempotentId, errorDetail);
         recentErrors.put(idempotentId, errorDetail);
         monitor.severe(() -> jobIdPrefix + "Problem with importing item, cannot be skipped: " + errorDetail);
-        throw e;
+        // In RetryingCallable.call(), we wrap the exception in a RetryException.
+        // We throw e.getCause() to get the original exception.
+        throw e.getCause();
       }
     }
   }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -151,7 +151,7 @@ public void initialize(ExtensionContext context) {
         PHOTOS, new GooglePhotosExporter(credentialFactory, jobStore, jsonFactory, monitor));
     exporterBuilder.put(VIDEOS, new GoogleVideosExporter(credentialFactory, jsonFactory));
     exporterBuilder.put(
-        MEDIA, new GoogleMediaExporter(credentialFactory, jobStore, jsonFactory, monitor, idempotentImportExecutor, enableRetrying));
+        MEDIA, new GoogleMediaExporter(credentialFactory, jobStore, jsonFactory, monitor, /* photosInterface= */ null, idempotentImportExecutor, enableRetrying));
     exporterBuilder.put(MUSIC, new GoogleMusicExporter(credentialFactory, jsonFactory, monitor));
 
     exporterMap = exporterBuilder.build();

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosInterface.java
Patch:
@@ -65,6 +65,7 @@
 import org.datatransferproject.spi.transfer.types.PermissionDeniedException;
 import org.datatransferproject.spi.transfer.types.UploadErrorException;
 
+// TODO (#1307): Find a way to consolidate all 3P API interfaces
 public class GooglePhotosInterface {
 
   public static final String ERROR_HASH_MISMATCH = "Hash mismatch";

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/music/GoogleMusicExporter.java
Patch:
@@ -270,7 +270,7 @@ private int getTokenPrefixLength(String token) {
   private MusicPlaylistItem convertPlaylistItem(
       String playlistId, GooglePlaylistItem googlePlaylistItem) throws ParseException {
     GoogleTrack track = googlePlaylistItem.getTrack();
-    GoogleRelease release = track.getRelease();
+    GoogleRelease release = track.getReleaseReference();
     return new MusicPlaylistItem(
         new MusicRecording(
             track.getIsrc(),
@@ -280,7 +280,7 @@ private MusicPlaylistItem convertPlaylistItem(
                 release.getIcpn(),
                 release.getTitle(),
                 createMusicGroups(release.getArtists())),
-            createMusicGroups(track.getArtists()),
+            createMusicGroups(track.getArtistReferences()),
             "EXPLICIT_TYPE_EXPLICIT".equals(track.getExplicitType())),
         playlistId,
         googlePlaylistItem.getOrder());

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/music/GoogleMusicImporter.java
Patch:
@@ -268,15 +268,15 @@ private ImportPlaylistItemRequest buildImportPlaylistItemRequest(
 
     googleTrack.setIsrc(playlistItem.getTrack().getIsrcCode());
     googleTrack.setTitle(playlistItem.getTrack().getTitle());
-    googleTrack.setArtists(getArtists(playlistItem.getTrack().getByArtists()));
+    googleTrack.setArtistReferences(getArtists(playlistItem.getTrack().getByArtists()));
     googleTrack.setDuration(
         Durations.toString(Durations.fromMillis(playlistItem.getTrack().getDurationMillis())));
     if (playlistItem.getTrack().getIsExplicit()) {
       googleTrack.setExplicitType("EXPLICIT_TYPE_EXPLICIT");
     } else {
       googleTrack.setExplicitType("EXPLICIT_TYPE_NOT_EXPLICIT");
     }
-    googleTrack.setRelease(googleRelease);
+    googleTrack.setReleaseReference(googleRelease);
 
     googlePlaylistItem.setTrack(googleTrack);
     googlePlaylistItem.setOrder(playlistItem.getOrder());

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/music/GoogleMusicExporterTest.java
Patch:
@@ -250,7 +250,7 @@ private GooglePlaylistItem setUpSinglePlaylistItem(String isrc, String icpn) {
     GoogleRelease release = new GoogleRelease();
     release.setIcpn(icpn);
     track.setIsrc(isrc);
-    track.setRelease(release);
+    track.setReleaseReference(release);
     track.setExplicitType("EXPLICIT_TYPE_EXPLICIT");
     playlistItemEntry.setTrack(track);
     return playlistItemEntry;

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/music/GoogleMusicImporterTest.java
Patch:
@@ -307,7 +307,7 @@ private GooglePlaylistItem buildGooglePlaylistItem(String trackIsrc, String rele
     GoogleTrack track = new GoogleTrack();
     track.setIsrc(trackIsrc);
     track.setDuration(Durations.toString(Durations.fromMillis(180000L)));
-    track.setRelease(release);
+    track.setReleaseReference(release);
     track.setExplicitType("EXPLICIT_TYPE_NOT_EXPLICIT"
         + "");
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/musicModels/PlaylistExportResponse.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-/** The response provided by the Google Music API when listing playlists */
-public class PlaylistListResponse {
+/** The response provided by the Google Music API when exporting playlists */
+public class PlaylistExportResponse {
   @JsonProperty("playlists")
   private GooglePlaylist[] playlists;
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/musicModels/PlaylistItemExportResponse.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-/** The response provided by the Google Music API when listing playlist items */
-public class PlaylistItemListResponse {
+/** The response provided by the Google Music API when exporting playlist items */
+public class PlaylistItemExportResponse {
   @JsonProperty("playlistItems")
   private GooglePlaylistItem[] playlistItems;
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/music/GoogleMusicExporter.java
Patch:
@@ -280,8 +280,8 @@ private MusicPlaylistItem convertPlaylistItem(
                 release.getIcpn(),
                 release.getTitle(),
                 createMusicGroups(release.getArtists())),
-            createMusicGroups(track.getArtists()), false),
-        // TODO(critical WIP-feature step): Add explicit flag to GooglePlaylistItem
+            createMusicGroups(track.getArtists()),
+            "EXPLICIT_TYPE_EXPLICIT".equals(track.getExplicitType())),
         playlistId,
         googlePlaylistItem.getOrder());
   }

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/music/GoogleMusicExporterTest.java
Patch:
@@ -199,7 +199,7 @@ public void exportPlaylistItemFirstSet()
             .collect(Collectors.toList()))
         .containsExactly(
             new MusicRecording("t1_isrc", null, 0L, new MusicRelease("r1_icpn", null, null), null,
-                false));
+                true));
   }
 
   @Test
@@ -251,6 +251,7 @@ private GooglePlaylistItem setUpSinglePlaylistItem(String isrc, String icpn) {
     release.setIcpn(icpn);
     track.setIsrc(isrc);
     track.setRelease(release);
+    track.setExplicitType("EXPLICIT_TYPE_EXPLICIT");
     playlistItemEntry.setTrack(track);
     return playlistItemEntry;
   }

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/music/GoogleMusicImporterTest.java
Patch:
@@ -312,6 +312,8 @@ private GooglePlaylistItem buildGooglePlaylistItem(String trackIsrc, String rele
     track.setIsrc(trackIsrc);
     track.setDuration(Durations.toString(Durations.fromMillis(180000L)));
     track.setRelease(release);
+    track.setExplicitType("EXPLICIT_TYPE_NOT_EXPLICIT"
+        + "");
 
     playlistItem.setTrack(track);
     playlistItem.setOrder(1);

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/FlickrTestUtils.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package org.datatransferproject.datatransfer.flickr.photos;
+package org.datatransferproject.datatransfer.flickr;
 
 import com.flickr4java.flickr.photos.Photo;
 import com.flickr4java.flickr.photos.Size;
 import com.flickr4java.flickr.photosets.Photoset;
 import java.util.Collections;
 import java.util.UUID;
 
-class FlickrTestUtils {
+public class FlickrTestUtils {
 
   public static Photoset initializePhotoset(String id, String title, String description) {
     Photoset photoset = new Photoset();

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosExporterTest.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.Collections;
 import java.util.Optional;
 import java.util.UUID;
+import org.datatransferproject.datatransfer.flickr.FlickrTestUtils;
 import org.datatransferproject.spi.transfer.provider.ExportResult;
 import org.datatransferproject.spi.transfer.types.ContinuationData;
 import org.datatransferproject.types.common.ExportInformation;

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporterTest.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.UUID;
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.cloud.local.LocalJobStore;
+import org.datatransferproject.datatransfer.flickr.FlickrTestUtils;
 import org.datatransferproject.spi.cloud.connection.ConnectionProvider;
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore.InputStreamWrapper;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/music/GoogleMusicImporter.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Map.Entry;
 import java.util.UUID;
 import java.util.stream.Collectors;
+import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.datatransfer.google.common.GoogleCredentialFactory;
@@ -245,7 +246,7 @@ private String summarizeNewPlaylistItemResultErrors(
     return ""; // No errors, so nothing to summarize.
   }
 
-  private GoogleArtist[] getArtists(List<MusicGroup> artists) {
+  private @Nullable GoogleArtist[] getArtists(List<MusicGroup> artists) {
     if (artists == null || artists.isEmpty()) {
       return null;
     }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/musicModels/CreatePlaylistItemRequest.java
Patch:
@@ -1,7 +1,6 @@
 package org.datatransferproject.datatransfer.google.musicModels;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import java.util.List;
 import java.util.Objects;
 
 public class CreatePlaylistItemRequest {

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/musicModels/GoogleTrack.java
Patch:
@@ -79,7 +79,7 @@ public void setRelease(GoogleRelease release) {
     this.release = release;
   }
 
-  public void setTitle(String trackTitle) {
+  public void setTitle(String title) {
     this.title = title;
   }
 

File: portability-transfer/src/main/java/org/datatransferproject/transfer/CallableImporter.java
Patch:
@@ -70,7 +70,7 @@ public ImportResult call() throws Exception {
       Collection<ErrorDetail> errors = idempotentImportExecutor.getRecentErrors();
       success = result.getType() == ImportResult.ResultType.OK && errors.isEmpty();
 
-      if (!success) {
+      if (!success && errors.iterator().hasNext() && !errors.iterator().next().canSkip()) {
         throw new IOException(
             "Problem with importer, forcing a retry, "
                 + "first error: "

File: extensions/copier/portability-stack-copier/src/main/java/org/datatransferproject/copier/stack/PortabilityStackInMemoryDataCopier.java
Patch:
@@ -32,6 +32,7 @@
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.spi.transfer.types.ContinuationData;
 import org.datatransferproject.spi.transfer.types.CopyException;
+import org.datatransferproject.transfer.Annotations;
 import org.datatransferproject.transfer.copier.InMemoryDataCopier;
 import org.datatransferproject.transfer.copier.PortabilityAbstractInMemoryDataCopier;
 import org.datatransferproject.types.common.ExportInformation;
@@ -53,6 +54,7 @@ public PortabilityStackInMemoryDataCopier(
       Provider<RetryStrategyLibrary> retryStrategyLibraryProvider,
       Monitor monitor,
       IdempotentImportExecutor idempotentImportExecutor,
+      @Annotations.RetryingExecutor IdempotentImportExecutor retryingIdempotentImportExecutor,
       DtpInternalMetricRecorder dtpInternalMetricRecorder,
       JobStore jobStore) {
     super(
@@ -61,6 +63,7 @@ public PortabilityStackInMemoryDataCopier(
         retryStrategyLibraryProvider,
         monitor,
         idempotentImportExecutor,
+        retryingIdempotentImportExecutor,
         dtpInternalMetricRecorder,
         jobStore);
   }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerMain.java
Patch:
@@ -43,7 +43,6 @@
 import org.datatransferproject.spi.service.extension.ServiceExtension;
 import org.datatransferproject.spi.transfer.extension.TransferExtension;
 import org.datatransferproject.spi.transfer.hooks.JobHooks;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorExtension;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorLoader;
 import org.datatransferproject.spi.transfer.provider.TransferCompatibilityProvider;
@@ -127,7 +126,7 @@ public void initialize() {
                   cloudExtension,
                   transferExtensions,
                   securityExtension,
-                  idempotentImportExecutorExtension.getIdempotentImportExecutor(extensionContext),
+                  idempotentImportExecutorExtension,
                   symmetricKeyGenerator,
                   jobHooks,
                   new TransferCompatibilityProvider()));

File: portability-transfer/src/test/java/org/datatransferproject/transfer/copier/PortabilityInMemoryDataCopierTest.java
Patch:
@@ -60,6 +60,7 @@ public TestPortabilityInMemoryDataCopier() {
           null,
           Mockito.mock(Monitor.class),
           new FakeIdempotentImportExecutor(),
+          new FakeIdempotentImportExecutor(),
           null,
           null);
     }
@@ -86,6 +87,7 @@ public TestPortabilityStackInMemoryDataCopier() {
           null,
           Mockito.mock(Monitor.class),
           new FakeIdempotentImportExecutor(),
+          new FakeIdempotentImportExecutor(),
           null,
           (Mockito.mock(JobStore.class)));
     }

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityActor.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.Objects;
 
 public class SocialActivityActor implements ImportableItem {
-  private String url;
-  private String name;
-  private String id;
+  private final String url;
+  private final String name;
+  private final String id;
 
   @JsonCreator
   public SocialActivityActor(

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityContainerResource.java
Patch:
@@ -26,8 +26,8 @@
 import org.datatransferproject.types.common.models.ContainerResource;
 
 /**
- * Wrapper class for encoding social activity streams based on Activity Stream 2.0
- * (https://www.w3.org/TR/activitystreams-core/)
+ * Wrapper class for encoding social activity streams based on
+ * <a href="https://www.w3.org/TR/activitystreams-core/">Activity Stream 2.0</a>
  *
  * <p>The wrapper is needed to allow DTP to page through large collections of items. DTP doesn't
  * know how to parse SocialActivityModel, only extensions that process social data will understand
@@ -39,7 +39,7 @@ public class SocialActivityContainerResource extends ContainerResource {
 
   private final String id;
   private final Collection<SocialActivityModel> activities;
-  private SocialActivityActor actor;
+  private final SocialActivityActor actor;
 
   @JsonCreator
   public SocialActivityContainerResource(

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityLocation.java
Patch:
@@ -23,9 +23,9 @@
 
 public class SocialActivityLocation {
 
-  private String name;
-  private double longitude;
-  private double latitude;
+  private final String name;
+  private final double longitude;
+  private final double latitude;
 
   @JsonCreator
   public SocialActivityLocation(

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/PhotoResult.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.io.Serializable;
 
-class PhotoResult implements Serializable {
+public class PhotoResult implements Serializable {
   private String id;
   private Long bytes;
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/MicrosoftTransferExtension.java
Patch:
@@ -45,7 +45,7 @@ public class MicrosoftTransferExtension implements TransferExtension {
   // isn't supported on one or the other side of this equation; this is just a WIP prototype to show
   // the concept of converters at play.
   private static final ImmutableList<DataVertical> SUPPORTED_IMPORT_SERVICES =
-      ImmutableList.of(CALENDAR, CONTACTS, PHOTOS);
+      ImmutableList.of(CALENDAR, CONTACTS, PHOTOS, MEDIA);
   private static final ImmutableList<DataVertical> SUPPORTED_EXPORT_SERVICES =
       ImmutableList.of(CALENDAR, CONTACTS, PHOTOS, MEDIA, OFFLINE_DATA);
   private ImmutableMap<DataVertical, Importer> importerMap;

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/media/MicrosoftMediaImporterTest.java
Patch:
@@ -119,7 +119,7 @@ public void testCleanAlbumNames() throws Exception {
       }
 
       return r.url().toString().equals(
-          "https://www.baseurl.com/v1.0/me/drive/special/photo-video/children")
+          "https://www.baseurl.com/v1.0/me/drive/special/photos/children")
           && body.contains("album1_");
     }));
     Response response = mock(Response.class);
@@ -151,7 +151,7 @@ public void testImportItemPermissionDenied() throws Exception {
     doReturn(call).when(client).newCall(
         argThat((Request r)
             -> r.url().toString().equals(
-            "https://www.baseurl.com/v1.0/me/drive/special/photo-video/children")));
+            "https://www.baseurl.com/v1.0/me/drive/special/photos/children")));
     Response response = mock(Response.class);
     ResponseBody body = mock(ResponseBody.class);
     when(body.bytes())
@@ -189,7 +189,7 @@ public void testImportItemAllSuccess() throws Exception {
     doReturn(call).when(client).newCall(
         argThat((Request r)
             -> r.url().toString().equals(
-            "https://www.baseurl.com/v1.0/me/drive/special/photo-video/children")));
+            "https://www.baseurl.com/v1.0/me/drive/special/photos/children")));
     Response response = mock(Response.class);
     ResponseBody body = mock(ResponseBody.class);
     when(body.bytes())

File: extensions/data-transfer/portability-data-transfer-imgur/src/main/java/org/datatransferproject/datatransfer/imgur/photos/ImgurPhotosImporter.java
Patch:
@@ -48,7 +48,7 @@ public class ImgurPhotosImporter
 
   private final String CREATE_ALBUM_URL;
   private final String UPLOAD_PHOTO_URL;
-  private static final String TEMP_PHOTOS_KEY = "tempPhotosData";
+  private static final String TEMP_PHOTOS_KEY = "tempMediaData";
 
   public ImgurPhotosImporter(
       Monitor monitor,

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/media/MediaContainerResource.java
Patch:
@@ -78,7 +78,7 @@ public static MediaContainerResource videoToMedia(VideosContainerResource videos
             .stream()
             .map(MediaAlbum::videoToMediaAlbum)
             .collect(Collectors.toList()),
-        null,
+        null  /*photos*/,
         videosContainer.getVideos());
   }
 

File: portability-transfer/src/main/java/org/datatransferproject/transfer/copier/InMemoryDataCopier.java
Patch:
@@ -28,9 +28,11 @@
 /** In-memory Copier interface */
 public interface InMemoryDataCopier {
   /* Copies the provided dataType from exportService to importService */
-  Collection<ErrorDetail> copy(
+  void copy(
           AuthData exportAuthData,
           AuthData importAuthData,
           UUID jobId, Optional<ExportInformation> exportInfo)
       throws IOException, CopyException;
+
+  Collection<ErrorDetail> getErrors(UUID jobId);
 }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -117,7 +117,7 @@ void processJob() {
       String exportInfoStr = job.exportInformation();
       Optional<ExportInformation> exportInfo = Optional.empty();
       if (!Strings.isNullOrEmpty(exportInfoStr)) {
-        exportInfo = Optional.of(objectMapper.readValue(exportInfoStr, ExportInformation.class));
+        exportInfo = Optional.ofNullable(objectMapper.readValue(exportInfoStr, ExportInformation.class));
       }
 
       // Copy the data

File: extensions/data-transfer/portability-data-transfer-backblaze/src/test/java/org/datatransferproject/datatransfer/backblaze/videos/BackblazeVideosImporterTest.java
Patch:
@@ -111,7 +111,7 @@ public void testImportVideo() throws Exception {
         UUID jobId = UUID.randomUUID();
 
         VideoModel videoObject =
-                new VideoModel(title, videoUrl, description, encodingFormat, dataId, albumId, false);
+                new VideoModel(title, videoUrl, description, encodingFormat, dataId, albumId, false, null);
         ArrayList<VideoModel> videos = new ArrayList<>();
         videos.add(videoObject);
         VideosContainerResource data = mock(VideosContainerResource.class);

File: extensions/data-transfer/portability-data-transfer-facebook/src/main/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosExporter.java
Patch:
@@ -100,7 +100,8 @@ private ExportResult<VideosContainerResource> exportVideos(
                 "video/mp4",
                 fbid,
                 null,
-                false));
+                false,
+                video.getCreatedTime()));
       }
 
       String token = videoConnection.getAfterCursor();

File: extensions/data-transfer/portability-data-transfer-facebook/src/test/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosImporterTest.java
Patch:
@@ -42,7 +42,7 @@ public void testImportSingleVideo() {
     importer.importSingleVideo(
         client,
         new VideoModel(
-            "title", VIDEO_URL, VIDEO_DESCRIPTION, "video/mp4", "videoId", null, false));
+            "title", VIDEO_URL, VIDEO_DESCRIPTION, "video/mp4", "videoId", null, false, null));
 
     Parameter[] params = {
         Parameter.with("file_url", VIDEO_URL), Parameter.with("description", VIDEO_DESCRIPTION)

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/videos/GoogleVideosExporter.java
Patch:
@@ -124,7 +124,8 @@ private VideoModel convertToVideoObject(GoogleMediaItem mediaItem) {
             mediaItem.getMimeType(),
             mediaItem.getId(),
             null,
-            false);
+            false,
+            null);
   }
 
   private synchronized GoogleVideosInterface getOrCreateVideosInterface(

File: extensions/data-transfer/portability-data-transfer-koofr/src/main/java/org/datatransferproject/transfer/koofr/videos/KoofrVideosImporter.java
Patch:
@@ -35,7 +35,9 @@
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
 
-/** Imports albums and videos to Koofr. */
+/**
+ * Imports videos and their albums to Koofr.
+ */
 public class KoofrVideosImporter
     implements Importer<TokensAndUrlAuthData, VideosContainerResource> {
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/media/MicrosoftMediaExporter.java
Patch:
@@ -179,7 +179,7 @@ private VideoModel tryConvertDriveItemToVideoModel(
 
     VideoModel video =
         new VideoModel(driveItem.name, driveItem.downloadUrl, driveItem.description,
-            driveItem.file.mimeType, driveItem.id, albumId.orElse(null), false /*inTempStore*/);
+            driveItem.file.mimeType, driveItem.id, albumId.orElse(null), false /*inTempStore*/, null);
     monitor.debug(
         () -> String.format("%s: Microsoft OneDrive exporting video: %s", jobId, video));
     return video;

File: portability-spi-transfer/src/test/java/org/datatransferproject/spi/transfer/provider/converter/MediaExporterDecoratorTest.java
Patch:
@@ -48,9 +48,9 @@ public void setUp() {
         new PhotoModel("p3", "", null, null, "d3", "a2", false, null, null));
 
     videos = List.of(
-        new VideoModel("v1", "", null, null, "d4", null, false),
-        new VideoModel("v2", "", null, null, "d5", "a3", false),
-        new VideoModel("v3", "", null, null, "d6", null, false));
+        new VideoModel("v1", "", null, null, "d4", null, false, null),
+        new VideoModel("v2", "", null, null, "d5", "a3", false, null),
+        new VideoModel("v3", "", null, null, "d6", null, false, null));
   }
 
   @Test

File: portability-spi-transfer/src/test/java/org/datatransferproject/spi/transfer/provider/converter/MediaImporterDecoratorTest.java
Patch:
@@ -41,9 +41,9 @@ public void setUp() {
         new PhotoModel("p3", "", null, null, "d3", "a2", false, null, null));
 
     videos = List.of(
-        new VideoModel("v1", "", null, null, "d4", null, false),
-        new VideoModel("v2", "", null, null, "d5", "a3", false),
-        new VideoModel("v3", "", null, null, "d6", null, false));
+        new VideoModel("v1", "", null, null, "d4", null, false, null),
+        new VideoModel("v2", "", null, null, "d5", "a3", false, null),
+        new VideoModel("v3", "", null, null, "d6", null, false, null));
   }
 
   @Test

File: portability-types-common/src/test/java/org/datatransferproject/types/common/models/videos/VideosContainerResourceTest.java
Patch:
@@ -35,9 +35,9 @@ public void verifySerializeDeserialize() throws Exception {
     List<VideoModel> videos =
             ImmutableList.of(
                     new VideoModel("Vid1", "http://example.com/1.mp4", "A video", "video/mp4", "v1", "id1",
-                            false),
+                            false, null),
                     new VideoModel(
-                            "Vid2", "https://example.com/2.mpeg", "A 2. video", "video/mpeg", "v2", "id1", false));
+                            "Vid2", "https://example.com/2.mpeg", "A 2. video", "video/mpeg", "v2", "id1", false, null));
     
     ContainerResource data = new VideosContainerResource(albums, videos);
 

File: extensions/auth/portability-auth-harness-microsoft/src/main/java/org/datatransferproject/auth/microsoft/harness/AuthTestDriver.java
Patch:
@@ -14,6 +14,7 @@
 import org.datatransferproject.spi.api.auth.AuthDataGenerator;
 import org.datatransferproject.spi.api.auth.AuthServiceProviderRegistry.AuthMode;
 import org.datatransferproject.spi.api.types.AuthFlowConfiguration;
+import org.datatransferproject.types.common.models.DataVertical;
 import org.datatransferproject.types.transfer.auth.TokenAuthData;
 
 /** */
@@ -51,7 +52,7 @@ public TokenAuthData getOAuthTokenCode() throws Exception {
     OkHttpClient client = TestHelper.createTestBuilder(callbackHost).build();
 
     AuthDataGenerator authDataGenerator = new MicrosoftAuthServiceExtension()
-        .getAuthDataGenerator("CONTACTS", AuthMode.EXPORT);
+        .getAuthDataGenerator(DataVertical.CONTACTS, AuthMode.EXPORT);
 
     AuthFlowConfiguration configuration = authDataGenerator
         .generateConfiguration(callbackBase, "1");

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/integration/LocalExportTestRunner.java
Patch:
@@ -1,5 +1,7 @@
 package org.datatransferproject.transfer.microsoft.integration;
 
+import static org.datatransferproject.types.common.models.DataVertical.CONTACTS;
+
 import java.util.Optional;
 import org.datatransferproject.auth.microsoft.harness.AuthTestDriver;
 import org.datatransferproject.spi.transfer.provider.ExportResult;
@@ -22,7 +24,7 @@ public static void main(String... args) throws Exception {
     TokenAuthData token = authTestDriver.getOAuthTokenCode();
 
     Exporter<TokenAuthData, ContactsModelWrapper> contacts =
-        (Exporter<TokenAuthData, ContactsModelWrapper>) serviceProvider.getExporter("CONTACTS");
+        (Exporter<TokenAuthData, ContactsModelWrapper>) serviceProvider.getExporter(CONTACTS);
     ExportResult<ContactsModelWrapper> wrapper = contacts.export(UUID.randomUUID(), token,
         Optional.empty());
   }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/integration/LocalImportTestRunner.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.datatransferproject.transfer.microsoft.integration;
 
+import static org.datatransferproject.types.common.models.DataVertical.CONTACTS;
+
 import ezvcard.VCard;
 import ezvcard.io.json.JCardWriter;
 import ezvcard.property.StructuredName;
@@ -40,7 +42,7 @@ public static void main(String... args) throws Exception {
     TokenAuthData token = authTestDriver.getOAuthTokenCode();
 
     Importer<TokenAuthData, ContactsModelWrapper> contacts =
-        (Importer<TokenAuthData, ContactsModelWrapper>) serviceProvider.getImporter("CONTACTS");
+        (Importer<TokenAuthData, ContactsModelWrapper>) serviceProvider.getImporter(CONTACTS);
 
     ContactsModelWrapper wrapper = new ContactsModelWrapper(createCards());
     FakeIdempotentImportExecutor executor = new FakeIdempotentImportExecutor();

File: extensions/data-transfer/portability-data-transfer-offline-demo/src/main/java/org/datatransferproject/transfer/offline/OfflineDemoTransferExtension.java
Patch:
@@ -1,6 +1,7 @@
 package org.datatransferproject.transfer.offline;
 
 import org.datatransferproject.api.launcher.ExtensionContext;
+import org.datatransferproject.types.common.models.DataVertical;
 import org.datatransferproject.spi.transfer.extension.TransferExtension;
 import org.datatransferproject.spi.transfer.provider.Exporter;
 import org.datatransferproject.spi.transfer.provider.Importer;
@@ -19,12 +20,12 @@ public String getServiceId() {
   }
 
   @Override
-  public Exporter<?, ?> getExporter(String transferDataType) {
+  public Exporter<?, ?> getExporter(DataVertical transferDataType) {
     return null;
   }
 
   @Override
-  public Importer<?, ?> getImporter(String transferDataType) {
+  public Importer<?, ?> getImporter(DataVertical transferDataType) {
     return new OfflineDemoImporter();
   }
 

File: extensions/transport/portability-transport-jettyrest/src/main/java/org/datatransferproject/transport/jettyrest/rest/TransferServicesController.java
Patch:
@@ -25,6 +25,7 @@
 import javax.ws.rs.PathParam;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
+import org.datatransferproject.types.common.models.DataVertical;
 
 /** Lists services available for export and import for the given type. */
 @Consumes({MediaType.APPLICATION_JSON})
@@ -39,7 +40,7 @@ public TransferServicesController(Action<GetTransferServices, TransferServices>
 
   @GET()
   @Path("{dataType}")
-  public TransferServices transferServices(@PathParam("dataType") String dataType) {
+  public TransferServices transferServices(@PathParam("dataType") DataVertical dataType) {
     return action.handle(new GetTransferServices(dataType));
   }
 }

File: libraries/auth/src/main/java/org/datatransferproject/auth/OAuth1DataGenerator.java
Patch:
@@ -30,6 +30,7 @@
 import org.datatransferproject.spi.api.auth.AuthServiceProviderRegistry.AuthMode;
 import org.datatransferproject.spi.api.types.AuthFlowConfiguration;
 import org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import org.datatransferproject.types.common.models.DataVertical;
 import org.datatransferproject.types.transfer.auth.AppCredentials;
 import org.datatransferproject.types.transfer.auth.AuthData;
 import org.datatransferproject.types.transfer.auth.TokenSecretAuthData;
@@ -41,7 +42,7 @@ public class OAuth1DataGenerator implements AuthDataGenerator {
 
   private final OAuth1Config config;
   private final Monitor monitor;
-  private final String dataType;
+  private final DataVertical dataType;
   private final AuthMode mode;
   // TODO: handle dynamic updates of client ids and secrets #597
   private final String clientId;
@@ -52,7 +53,7 @@ public class OAuth1DataGenerator implements AuthDataGenerator {
       OAuth1Config config,
       AppCredentials appCredentials,
       HttpTransport httpTransport,
-      String datatype,
+      DataVertical datatype,
       AuthMode mode,
       Monitor monitor) {
     this.config = config;

File: libraries/auth/src/main/java/org/datatransferproject/auth/OAuth2DataGenerator.java
Patch:
@@ -35,6 +35,7 @@
 import org.datatransferproject.spi.api.auth.AuthDataGenerator;
 import org.datatransferproject.spi.api.auth.AuthServiceProviderRegistry.AuthMode;
 import org.datatransferproject.spi.api.types.AuthFlowConfiguration;
+import org.datatransferproject.types.common.models.DataVertical;
 import org.datatransferproject.types.transfer.auth.AppCredentials;
 import org.datatransferproject.types.transfer.auth.AuthData;
 
@@ -52,7 +53,7 @@ public class OAuth2DataGenerator implements AuthDataGenerator {
 
   OAuth2DataGenerator(OAuth2Config config, AppCredentials appCredentials,
       HttpTransport httpTransport,
-      String dataType, AuthMode authMode) {
+      DataVertical dataType, AuthMode authMode) {
     this.config = config;
     validateConfig();
     this.clientId = appCredentials.getKey();
@@ -129,4 +130,4 @@ private void validateConfig() {
     Preconditions
         .checkArgument(config.getImportScopes() != null, "Config is missing import scopes");
   }
-}
\ No newline at end of file
+}

File: portability-api/src/main/java/org/datatransferproject/api/action/datatype/DataTypesAction.java
Patch:
@@ -23,6 +23,7 @@
 import org.datatransferproject.types.client.datatype.GetDataTypes;
 
 import java.util.Set;
+import org.datatransferproject.types.common.models.DataVertical;
 
 /**
  * An {@link Action} that handles listing data types available for export and import for a given
@@ -46,7 +47,7 @@ public Class<GetDataTypes> getRequestType() {
   /** Lists the set of data types that support both import and export. */
   @Override
   public DataTypes handle(GetDataTypes request) {
-    Set<String> transferDataTypes = registry.getTransferDataTypes();
+    Set<DataVertical> transferDataTypes = registry.getTransferDataTypes();
     if (transferDataTypes.isEmpty()) {
       monitor.severe(
           () ->

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/CreateTransferJobAction.java
Patch:
@@ -27,6 +27,7 @@
 import org.datatransferproject.spi.cloud.storage.JobStore;
 import org.datatransferproject.spi.cloud.types.JobAuthorization;
 import org.datatransferproject.spi.cloud.types.PortabilityJob;
+import org.datatransferproject.types.common.models.DataVertical;
 import org.datatransferproject.types.client.transfer.CreateTransferJob;
 import org.datatransferproject.types.client.transfer.TransferJob;
 import org.datatransferproject.types.common.ExportInformation;
@@ -66,7 +67,7 @@ public Class<CreateTransferJob> getRequestType() {
 
   @Override
   public TransferJob handle(CreateTransferJob request) {
-    String dataType = request.getDataType();
+    DataVertical dataType = request.getDataType();
     String exportService = request.getExportService();
     String importService = request.getImportService();
     Optional<ExportInformation> exportInformation = Optional
@@ -191,7 +192,7 @@ private PortabilityJob setInitialAuthDataOnJob(SecretKey sessionKey, Portability
    */
   private PortabilityJob createJob(
       String encodedSessionKey,
-      String dataType,
+      DataVertical dataType,
       String exportService,
       String importService,
       Optional<ExportInformation> exportInformation,

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/GetTransferServicesAction.java
Patch:
@@ -23,6 +23,7 @@
 import org.datatransferproject.types.client.transfer.GetTransferServices;
 
 import java.util.Set;
+import org.datatransferproject.types.common.models.DataVertical;
 
 /** Returns the import and export services available for a given data type. */
 public final class GetTransferServicesAction
@@ -43,7 +44,7 @@ public Class<GetTransferServices> getRequestType() {
   /** Lists the services available for export and import for a given data type. */
   @Override
   public TransferServices handle(GetTransferServices request) {
-    String transferDataType = request.getTransferDataType();
+    DataVertical transferDataType = request.getTransferDataType();
     // Validate incoming data type parameter
     if (!ActionUtils.isValidTransferDataType(transferDataType)) {
       throw new IllegalArgumentException("Invalid transferDataType: " + transferDataType);

File: portability-spi-cloud/src/main/java/org/datatransferproject/spi/cloud/storage/JobStoreWithValidator.java
Patch:
@@ -11,6 +11,7 @@
 import org.datatransferproject.spi.cloud.types.JobAuthorization;
 import org.datatransferproject.spi.cloud.types.PortabilityJob;
 import org.datatransferproject.spi.cloud.types.PortabilityJob.State;
+import org.datatransferproject.types.common.models.DataVertical;
 
 public abstract class JobStoreWithValidator implements JobStore {
 
@@ -35,9 +36,9 @@ public void updateJobAuthStateToCredsAvailable(UUID jobId) throws IOException {
   }
 
   private static void validateForUpdateStateToCredsAvailable(PortabilityJob job) {
-    String dataType = job.transferDataType();
+    DataVertical dataType = job.transferDataType();
     Preconditions.checkArgument(
-        !Strings.isNullOrEmpty(dataType), "Missing valid dataTypeParam: %s", dataType);
+        dataType != null, "Missing valid dataTypeParam: %s", dataType);
 
     String exportService = job.exportService();
     Preconditions.checkArgument(

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/converter/MediaToPhotoConversionImporter.java
Patch:
@@ -21,8 +21,6 @@
  *
  * This is intended for providers who do not support "MEDIA" as a special case.
  */
-// TODO(#1065) fix primitives-obession causing us to key Providers on "PHOTOS" string rather
-// than underlying file types.
 @Deprecated // prefer AnyToAnyImporter
 public class MediaToPhotoConversionImporter<
     A extends AuthData,

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/converter/PhotoToMediaConversionExporter.java
Patch:
@@ -20,9 +20,7 @@
  *
  * This is intended for providers who do not support "PHOTOS" as a special case.
  */
-// TODO(#1065) fix primitives-obession causing us to key Providers on "PHOTOS" string rather
-// than underlying file types.
-@Deprecated // prefer AnyToAnyImporter
+@Deprecated // prefer AnyToAnyExporter
 public class PhotoToMediaConversionExporter<
     A extends AuthData,
     PCR extends PhotosContainerResource,

File: portability-transfer/src/test/java/org/datatransferproject/transfer/JobPollingServiceTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.datatransferproject.spi.transfer.security.TransferKeyGenerator;
 import org.datatransferproject.spi.transfer.security.TransferKeyGenerator.WorkerKeyPair;
 
+import org.datatransferproject.types.common.models.DataVertical;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -115,7 +116,7 @@ public void pollingLifeCycle() throws Exception {
     // API inserts an job in initial authorization state
     job =
         PortabilityJob.builder()
-            .setTransferDataType("photo")
+            .setTransferDataType(DataVertical.PHOTOS)
             .setExportService("DummyExportService")
             .setImportService("DummyImportService")
             .setAndValidateJobAuthorization(

File: portability-transfer/src/test/java/org/datatransferproject/transfer/WorkerModuleTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.google.common.collect.ImmutableList;
 import org.datatransferproject.api.launcher.ExtensionContext;
+import org.datatransferproject.types.common.models.DataVertical;
 import org.datatransferproject.spi.transfer.extension.TransferExtension;
 import org.datatransferproject.spi.transfer.provider.Exporter;
 import org.datatransferproject.spi.transfer.provider.Importer;
@@ -54,12 +55,12 @@ public String getServiceId() {
       }
 
       @Override
-      public Exporter<?, ?> getExporter(String transferDataType) {
+      public Exporter<?, ?> getExporter(DataVertical transferDataType) {
         return null;
       }
 
       @Override
-      public Importer<?, ?> getImporter(String transferDataType) {
+      public Importer<?, ?> getImporter(DataVertical transferDataType) {
         return null;
       }
 

File: portability-types-client/src/test/java/org/datatransferproject/types/client/transfer/TransferJobTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.Test;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.datatransferproject.types.common.models.DataVertical.PHOTOS;
 
 /* Test for TransferJob */
 public class TransferJobTest {
@@ -34,7 +35,7 @@ public void verifySerializeDeserialize() throws Exception {
             "1-2-3",
             "testExportService",
             "testImportService",
-            "PHOTOS",
+            PHOTOS,
             "exportUrl",
             "importUrl",
             "exportTokenUrl",
@@ -49,7 +50,7 @@ public void verifySerializeDeserialize() throws Exception {
     assertThat("1-2-3").isEqualTo(deserialized.getId());
     assertThat("testExportService").isEqualTo(deserialized.getExportService());
     assertThat("testImportService").isEqualTo(deserialized.getImportService());
-    assertThat("PHOTOS").isEqualTo(deserialized.getDataType());
+    assertThat(PHOTOS).isEqualTo(deserialized.getDataType());
     assertThat("exportUrl").isEqualTo(deserialized.getExportUrl());
     assertThat("importUrl").isEqualTo(deserialized.getImportUrl());
     assertThat("exportTokenUrl").isEqualTo(deserialized.getExportTokenUrl());

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/retry/RetryingCallable.java
Patch:
@@ -23,6 +23,7 @@
 import java.time.Instant;
 import java.util.concurrent.Callable;
 import org.datatransferproject.api.launcher.Monitor;
+import org.datatransferproject.types.common.models.DataVertical;
 
 /**
  * Class for retrying a {@link Callable} given a {@link RetryStrategyLibrary}.
@@ -35,7 +36,7 @@ public class RetryingCallable<T> implements Callable<T> {
   private final RetryStrategyLibrary retryStrategyLibrary;
   private final Clock clock;
   private final Monitor monitor;
-  private final String dataType;
+  private final DataVertical dataType;
   private final String service;
 
   private volatile int attempts;
@@ -46,7 +47,7 @@ public RetryingCallable(
       RetryStrategyLibrary retryStrategyLibrary,
       Clock clock,
       Monitor monitor,
-      String dataType,
+      DataVertical dataType,
       String service) {
     this.callable = callable;
     this.retryStrategyLibrary = retryStrategyLibrary;

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/converter/MediaToPhotoConversionImporter.java
Patch:
@@ -23,6 +23,7 @@
  */
 // TODO(#1065) fix primitives-obession causing us to key Providers on "PHOTOS" string rather
 // than underlying file types.
+@Deprecated // prefer AnyToAnyImporter
 public class MediaToPhotoConversionImporter<
     A extends AuthData,
     PCR extends PhotosContainerResource,

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/converter/PhotoToMediaConversionExporter.java
Patch:
@@ -22,6 +22,7 @@
  */
 // TODO(#1065) fix primitives-obession causing us to key Providers on "PHOTOS" string rather
 // than underlying file types.
+@Deprecated // prefer AnyToAnyImporter
 public class PhotoToMediaConversionExporter<
     A extends AuthData,
     PCR extends PhotosContainerResource,

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerMain.java
Patch:
@@ -45,6 +45,7 @@
 import org.datatransferproject.spi.transfer.hooks.JobHooks;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorLoader;
+import org.datatransferproject.spi.transfer.provider.TransferCompatibilityProvider;
 import org.datatransferproject.spi.transfer.security.SecurityExtension;
 import org.datatransferproject.spi.transfer.security.SecurityExtensionLoader;
 
@@ -123,7 +124,8 @@ public void initialize() {
                   securityExtension,
                   idempotentImportExecutor,
                   symmetricKeyGenerator,
-                  jobHooks));
+                  jobHooks,
+                  new TransferCompatibilityProvider()));
     } catch (Exception e) {
       monitor.severe(() -> "Unable to initialize Guice in Worker", e);
       throw e;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/ContainerResource.java
Patch:
@@ -4,6 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.datatransferproject.types.common.models.calendar.CalendarContainerResource;
 import org.datatransferproject.types.common.models.mail.MailContainerResource;
+import org.datatransferproject.types.common.models.media.MediaContainerResource;
 import org.datatransferproject.types.common.models.photos.PhotosContainerResource;
 import org.datatransferproject.types.common.models.playlists.PlaylistContainerResource;
 import org.datatransferproject.types.common.models.social.SocialActivityContainerResource;
@@ -20,6 +21,7 @@
 @JsonSubTypes({
         @JsonSubTypes.Type(PhotosContainerResource.class),
         @JsonSubTypes.Type(VideosContainerResource.class),
+        @JsonSubTypes.Type(MediaContainerResource.class),
         @JsonSubTypes.Type(MailContainerResource.class),
         @JsonSubTypes.Type(CalendarContainerResource.class),
         @JsonSubTypes.Type(TaskContainerResource.class),

File: extensions/data-transfer/portability-data-transfer-koofr/src/main/java/org/datatransferproject/transfer/koofr/videos/KoofrVideosImporter.java
Patch:
@@ -39,6 +39,8 @@
 public class KoofrVideosImporter
     implements Importer<TokensAndUrlAuthData, VideosContainerResource> {
 
+  private static final String SKIPPED_FILE_RESULT_FORMAT = "skipped-%s";
+
   private final KoofrClientFactory koofrClientFactory;
   private final ImageStreamProvider imageStreamProvider;
   private final Monitor monitor;
@@ -141,7 +143,7 @@ private String importSingleVideo(
     } catch (FileNotFoundException e) {
       monitor.info(
               () -> String.format("Video resource was missing for id: %s", video.getDataId()), e);
-      return null;
+      return String.format(SKIPPED_FILE_RESULT_FORMAT, video.getDataId());
     }
   }
 }

File: extensions/data-transfer/portability-data-transfer-backblaze/src/test/java/org/datatransferproject/datatransfer/backblaze/videos/BackblazeVideosImporterTest.java
Patch:
@@ -39,9 +39,9 @@
 import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.TokenSecretAuthData;
+import org.junit.Before;
 import org.junit.Rule;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 import org.mockito.ArgumentCaptor;
 
@@ -57,7 +57,7 @@ public class BackblazeVideosImporterTest {
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();
 
-    @BeforeEach
+    @Before
     public void setUp() {
         monitor = mock(Monitor.class);
         dataStore = mock(TemporaryPerJobDataStore.class);

File: portability-api/src/test/java/org/datatransferproject/api/auth/PortabilityAuthServiceExtensionRegistryTest.java
Patch:
@@ -30,7 +30,8 @@
 import org.datatransferproject.spi.api.auth.extension.AuthServiceExtension;
 import org.junit.Assert;
 import org.junit.Rule;
-import org.junit.jupiter.api.Test;
+
+import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
 public class PortabilityAuthServiceExtensionRegistryTest {

File: extensions/data-transfer/portability-data-transfer-backblaze/src/test/java/org/datatransferproject/datatransfer/backblaze/videos/BackblazeVideosImporterTest.java
Patch:
@@ -104,7 +104,7 @@ public void testImportVideo() throws Exception {
         String title = "title";
         String videoUrl = "videoUrl";
         String description = "description";
-        String encodingFormat = "UTF-8";
+        String encodingFormat = "video/mp4";
         String albumName = "albumName";
         String albumId = "albumId";
         String response = "response";

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/driveModels/MicrosoftPhotoMetadata.java
Patch:
@@ -18,8 +18,6 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-import java.time.OffsetDateTime;
-
 /**
  * Microsoft photo metadata resource type Ref:
  * https://docs.microsoft.com/en-us/graph/api/resources/photo?view=graph-rest-1.0

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosExporter.java
Patch:
@@ -120,7 +120,7 @@ ExportResult<PhotosContainerResource> exportOneDrivePhotos(
               .getDriveItemsFromSpecialFolder(MicrosoftSpecialFolder.FolderType.photos);
     }
 
-    PaginationData nextPageData = SetNextPageToken(driveItemsResponse);
+    PaginationData nextPageData = setNextPageToken(driveItemsResponse);
     ContinuationData continuationData = new ContinuationData(nextPageData);
     PhotosContainerResource containerResource;
     MicrosoftDriveItem[] driveItems = driveItemsResponse.getDriveItems();
@@ -183,7 +183,7 @@ private PhotoModel tryConvertDriveItemToPhotoModel(
     return null;
   }
 
-  private PaginationData SetNextPageToken(MicrosoftDriveItemsResponse driveItemsResponse) {
+  private PaginationData setNextPageToken(MicrosoftDriveItemsResponse driveItemsResponse) {
     String url = driveItemsResponse.getNextPageLink();
 
     if (!Strings.isNullOrEmpty(url)) {

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/media/MicrosoftMediaImporterTest.java
Patch:
@@ -112,7 +112,7 @@ public void testCleanAlbumNames() throws Exception {
       }
 
       return r.url().toString().equals(
-                 "https://www.baseurl.com/v1.0/me/drive/special/photos/children")
+                 "https://www.baseurl.com/v1.0/me/drive/special/photo-video/children")
           && body.contains("album1_");
     }));
     Response response = mock(Response.class);
@@ -143,7 +143,7 @@ public void testImportItemPermissionDenied() throws Exception {
     doReturn(call).when(client).newCall(
         argThat((Request r)
                     -> r.url().toString().equals(
-                        "https://www.baseurl.com/v1.0/me/drive/special/photos/children")));
+                        "https://www.baseurl.com/v1.0/me/drive/special/photo-video/children")));
     Response response = mock(Response.class);
     ResponseBody body = mock(ResponseBody.class);
     when(body.bytes())
@@ -179,7 +179,7 @@ public void testImportItemAllSuccess() throws Exception {
     doReturn(call).when(client).newCall(
         argThat((Request r)
                     -> r.url().toString().equals(
-                        "https://www.baseurl.com/v1.0/me/drive/special/photos/children")));
+                        "https://www.baseurl.com/v1.0/me/drive/special/photo-video/children")));
     Response response = mock(Response.class);
     ResponseBody body = mock(ResponseBody.class);
     when(body.bytes())

File: portability-types-common/src/main/java/org/datatransferproject/types/common/DownloadableFile.java
Patch:
@@ -0,0 +1,3 @@
+package org.datatransferproject.types.common;
+
+public interface DownloadableFile extends DownloadableItem, FolderItem { }

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/MediaObject.java
Patch:
@@ -44,10 +44,12 @@ public void setContentUrl(String uri) {
     }
   }
 
+  /** schema.org/encodingFormat value - a mimetype string like "video/ogg". */
   public String getEncodingFormat() {
     return encodingFormat;
   }
 
+  /** Set the schema.org/encodingFormat value - a mimetype string like "video/ogg". */
   public void setEncodingFormat(String encodingFormat) {
     this.encodingFormat = encodingFormat;
   }

File: extensions/data-transfer/portability-data-transfer-daybook/src/main/java/org/datatransferproject/transfer/daybook/photos/DaybookPhotosImporter.java
Patch:
@@ -31,7 +31,6 @@
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorHelper;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.types.common.models.photos.PhotoAlbum;
@@ -85,7 +84,7 @@ public ImportResult importItem(
     // Import photos
     for (PhotoModel photo : resource.getPhotos()) {
       executor.executeAndSwallowIOExceptions(
-          IdempotentImportExecutorHelper.getPhotoIdempotentId(photo),
+          photo.getIdempotentId(),
           photo.getTitle(),
           () -> {
             String albumId;

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporter.java
Patch:
@@ -40,7 +40,6 @@
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore.InputStreamWrapper;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorHelper;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.spi.transfer.types.DestinationMemoryFullException;
@@ -150,7 +149,8 @@ private void storeAlbums(UUID jobId, Collection<PhotoAlbum> albums) throws IOExc
   private void importSinglePhoto(
       IdempotentImportExecutor idempotentExecutor, UUID id, PhotoModel photo) throws Exception {
     String photoId =
-        idempotentExecutor.executeAndSwallowIOExceptions(IdempotentImportExecutorHelper.getPhotoIdempotentId(photo),
+        idempotentExecutor.executeAndSwallowIOExceptions(
+            photo.getIdempotentId(),
             photo.getTitle(),
             () -> uploadPhoto(photo, id));
     if (photoId == null) {

File: extensions/data-transfer/portability-data-transfer-koofr/src/main/java/org/datatransferproject/transfer/koofr/photos/KoofrPhotosImporter.java
Patch:
@@ -33,7 +33,6 @@
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.cloud.storage.JobStore;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorHelper;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.spi.transfer.types.DestinationMemoryFullException;
@@ -103,7 +102,7 @@ public ImportResult importItem(
 
     for (PhotoModel photoModel : resource.getPhotos()) {
       idempotentImportExecutor.executeAndSwallowIOExceptions(
-          IdempotentImportExecutorHelper.getPhotoIdempotentId(photoModel),
+          photoModel.getIdempotentId(),
           photoModel.getTitle(),
           () -> importSinglePhoto(photoModel, jobId, idempotentImportExecutor, koofrClient));
     }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -36,7 +36,6 @@
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorHelper;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.spi.transfer.types.CopyExceptionWithFailureReason;
@@ -124,7 +123,7 @@ public ImportResult importItem(
 
     for (PhotoModel photoModel : resource.getPhotos()) {
       idempotentImportExecutor.executeAndSwallowIOExceptions(
-          IdempotentImportExecutorHelper.getPhotoIdempotentId(photoModel),
+          photoModel.getIdempotentId(),
         photoModel.getTitle(),
         () -> importSinglePhoto(photoModel, jobId, idempotentImportExecutor));
     }

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -27,7 +27,6 @@
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorHelper;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.transfer.smugmug.SmugMugTransmogrificationConfig;
@@ -95,7 +94,7 @@ public ImportResult importItem(
       }
       for (PhotoModel photo : data.getPhotos()) {
         idempotentExecutor.executeAndSwallowIOExceptions(
-            IdempotentImportExecutorHelper.getPhotoIdempotentId(photo),
+            photo.getIdempotentId(),
             photo.getTitle(),
             () -> importSinglePhoto(jobId, idempotentExecutor, photo, smugMugInterface));
       }

File: extensions/data-transfer/portability-data-transfer-twitter/src/main/java/org/datatransferproject/transfer/twitter/TwitterPhotosImporter.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.api.client.http.InputStreamContent;
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
-import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutorHelper;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.ImportResult.ResultType;
 import org.datatransferproject.spi.transfer.provider.Importer;
@@ -63,7 +62,7 @@ public ImportResult importItem(
         update.media(image.getTitle(), content.getInputStream());
 
         idempotentExecutor.executeAndSwallowIOExceptions(
-            IdempotentImportExecutorHelper.getPhotoIdempotentId(image),
+            image.getIdempotentId(),
             image.getTitle(),
             () -> twitterApi.tweets().updateStatus(update));
       } catch (IOException e) {

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/mediaModels/GoogleAlbum.java
Patch:
@@ -38,7 +38,7 @@ public class GoogleAlbum {
 
   public String getTitle() { return title; }
 
-  public boolean getIsWritable() { return isWriteable; }
+  public boolean getIsWriteable() { return isWriteable; }
 
   public long getMediaItemsCount() { return mediaItemsCount; }
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporter.java
Patch:
@@ -308,7 +308,7 @@ private void logMissingAlbumDetails(
           () ->
               format(
                   "Can't find album during createPhotos call, album info: isWriteable %b, mediaItemsCount %d",
-                  album.getIsWritable(), album.getMediaItemsCount()),
+                  album.getIsWriteable(), album.getMediaItemsCount()),
           e);
     } catch (Exception ex) {
       monitor.info(() -> format("Can't find album during getAlbum call"), ex);

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/idempotentexecutor/ItemImportResult.java
Patch:
@@ -31,6 +31,7 @@ public static <T extends Serializable> ItemImportResult<T> success(T data, Long
 
   public static <T extends Serializable> ItemImportResult<T> error(
       Exception exception, Long sizeInBytes) {
+    Preconditions.checkNotNull(exception);
     return new ItemImportResult<>(null, sizeInBytes, Status.ERROR, exception);
   }
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/drive/DriveExporter.java
Patch:
@@ -17,10 +17,10 @@
 import org.datatransferproject.spi.transfer.types.ContinuationData;
 import org.datatransferproject.types.common.ExportInformation;
 import org.datatransferproject.types.common.StringPaginationToken;
+import org.datatransferproject.types.common.models.blob.BlobbyStorageContainerResource;
+import org.datatransferproject.types.common.models.blob.DigitalDocumentWrapper;
+import org.datatransferproject.types.common.models.blob.DtpDigitalDocument;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
-import org.datatransferproject.types.transfer.models.blob.BlobbyStorageContainerResource;
-import org.datatransferproject.types.transfer.models.blob.DigitalDocumentWrapper;
-import org.datatransferproject.types.transfer.models.blob.DtpDigitalDocument;
 
 import java.io.InputStream;
 import java.util.ArrayList;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/drive/DriveImporter.java
Patch:
@@ -16,10 +16,10 @@
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
+import org.datatransferproject.types.common.models.blob.BlobbyStorageContainerResource;
+import org.datatransferproject.types.common.models.blob.DigitalDocumentWrapper;
+import org.datatransferproject.types.common.models.blob.DtpDigitalDocument;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
-import org.datatransferproject.types.transfer.models.blob.BlobbyStorageContainerResource;
-import org.datatransferproject.types.transfer.models.blob.DigitalDocumentWrapper;
-import org.datatransferproject.types.transfer.models.blob.DtpDigitalDocument;
 
 /** An {@link Importer} to import data to Google Drive. */
 public final class DriveImporter

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/blob/BlobbyStorageContainerResource.java
Patch:
@@ -1,4 +1,4 @@
-package org.datatransferproject.types.transfer.models.blob;
+package org.datatransferproject.types.common.models.blob;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/blob/DigitalDocumentWrapper.java
Patch:
@@ -1,4 +1,4 @@
-package org.datatransferproject.types.transfer.models.blob;
+package org.datatransferproject.types.common.models.blob;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/blob/DtpDigitalDocument.java
Patch:
@@ -1,4 +1,4 @@
-package org.datatransferproject.types.transfer.models.blob;
+package org.datatransferproject.types.common.models.blob;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/media/MediaContainerResource.java
Patch:
@@ -31,7 +31,7 @@ public MediaContainerResource(
       @JsonProperty("videos") Collection<VideoModel> videos) {
     this.albums = albums == null ? ImmutableList.of() : albums;
     this.photos = photos == null ? ImmutableList.of() : photos;
-    this.videos = photos == null ? ImmutableList.of() : videos;
+    this.videos = videos == null ? ImmutableList.of() : videos;
   }
 
   public Collection<MediaAlbum> getAlbums() {

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporterTest.java
Patch:
@@ -223,7 +223,7 @@ public void importTwoPhotosWithFailure() throws Exception {
     assertFalse(executor.isKeyCached(failedDataId));
     ErrorDetail errorDetail = executor.getErrors().iterator().next();
     assertEquals(failedDataId, errorDetail.id());
-    assertThat(errorDetail.exception(), CoreMatchers.containsString("Photo could not be created."));
+    assertThat(errorDetail.exception(), CoreMatchers.containsString("Media item could not be created."));
   }
 
   @Test

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/photos/PhotosContainerResource.java
Patch:
@@ -176,7 +176,7 @@ void ensureCleanAlbumNames(String forbiddenTitleCharacters, char replacementChar
   private void transmogrifyPhotos(TransmogrificationConfig config) {
     ensureCleanPhotoTitles(
             config.getPhotoTitleForbiddenCharacters(),
-            config.getPhotoTitleReplacementCharater(),
+            config.getPhotoTitleReplacementCharacter(),
             config.getPhotoTitleMaxLength());
   }
 

File: portability-types-common/src/test/java/org/datatransferproject/types/common/models/photos/PhotosContainerResourceTest.java
Patch:
@@ -335,7 +335,7 @@ public String getPhotoTitleForbiddenCharacters() {
             return ":!";
         }
 
-        public char getPhotoTitleReplacementCharater() {
+        public char getPhotoTitleReplacementCharacter() {
             return '?';
         }
     };

File: extensions/data-transfer/portability-data-transfer-backblaze/src/main/java/org/datatransferproject/datatransfer/backblaze/videos/BackblazeVideosImporter.java
Patch:
@@ -27,7 +27,7 @@
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.transfer.ImageStreamProvider;
-import org.datatransferproject.types.common.models.videos.VideoObject;
+import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.TokenSecretAuthData;
 
@@ -62,7 +62,7 @@ public ImportResult importItem(
     BackblazeDataTransferClient b2Client = b2ClientFactory.getOrCreateB2Client(monitor, authData);
 
     if (data.getVideos() != null && data.getVideos().size() > 0) {
-      for (VideoObject video : data.getVideos()) {
+      for (VideoModel video : data.getVideos()) {
         idempotentExecutor.executeAndSwallowIOExceptions(
             video.getDataId(), video.getName(), () -> importSingleVideo(b2Client, video));
       }
@@ -71,7 +71,7 @@ public ImportResult importItem(
     return ImportResult.OK;
   }
 
-  private String importSingleVideo(BackblazeDataTransferClient b2Client, VideoObject video)
+  private String importSingleVideo(BackblazeDataTransferClient b2Client, VideoModel video)
       throws IOException {
     InputStream videoFileStream =
         imageStreamProvider.getConnection(video.getContentUrl().toString()).getInputStream();

File: extensions/data-transfer/portability-data-transfer-facebook/src/main/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosExporter.java
Patch:
@@ -34,7 +34,7 @@
 import org.datatransferproject.types.common.ExportInformation;
 import org.datatransferproject.types.common.PaginationData;
 import org.datatransferproject.types.common.StringPaginationToken;
-import org.datatransferproject.types.common.models.videos.VideoObject;
+import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.AppCredentials;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
@@ -84,7 +84,7 @@ private ExportResult<VideosContainerResource> exportVideos(
         return new ExportResult<>(ExportResult.ResultType.END, null);
       }
 
-      ArrayList<VideoObject> exportVideos = new ArrayList<>();
+      ArrayList<VideoModel> exportVideos = new ArrayList<>();
       for (Video video : videos) {
         final String url = video.getSource();
         final String fbid = video.getId();
@@ -93,7 +93,7 @@ private ExportResult<VideosContainerResource> exportVideos(
           continue;
         }
         exportVideos.add(
-            new VideoObject(
+            new VideoModel(
                 String.format("%s.mp4", fbid),
                 url,
                 video.getDescription(),

File: extensions/data-transfer/portability-data-transfer-facebook/src/main/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosImporter.java
Patch:
@@ -26,7 +26,7 @@
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
-import org.datatransferproject.types.common.models.videos.VideoObject;
+import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.AppCredentials;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
@@ -51,14 +51,14 @@ public ImportResult importItem(
         new DefaultFacebookClient(
             authData.getAccessToken(), appCredentials.getSecret(), Version.VERSION_3_0);
 
-    for (VideoObject video : data.getVideos()) {
+    for (VideoModel video : data.getVideos()) {
       importSingleVideo(client, video);
     }
 
     return ImportResult.OK;
   }
 
-  void importSingleVideo(FacebookClient client, VideoObject video) {
+  void importSingleVideo(FacebookClient client, VideoModel video) {
     ArrayList<Parameter> params = new ArrayList<>();
     params.add(Parameter.with("file_url", video.getContentUrl().toString()));
     if (video.getDescription() != null)

File: extensions/data-transfer/portability-data-transfer-facebook/src/test/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosExporterTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.datatransferproject.spi.transfer.provider.ExportResult;
 import org.datatransferproject.spi.transfer.types.CopyExceptionWithFailureReason;
 import org.datatransferproject.types.common.ExportInformation;
-import org.datatransferproject.types.common.models.videos.VideoObject;
+import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.AppCredentials;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
@@ -79,7 +79,7 @@ public void testExportVideo() throws CopyExceptionWithFailureReason {
     VideosContainerResource exportedData = result.getExportedData();
     assertEquals(1, exportedData.getVideos().size());
     assertEquals(
-        new VideoObject(
+        new VideoModel(
             VIDEO_ID + ".mp4", VIDEO_SOURCE, VIDEO_NAME, "video/mp4", VIDEO_ID, null, false),
         exportedData.getVideos().toArray()[0]);
   }

File: extensions/data-transfer/portability-data-transfer-facebook/src/test/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosImporterTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.restfb.FacebookClient;
 import com.restfb.Parameter;
 import com.restfb.types.GraphResponse;
-import org.datatransferproject.types.common.models.videos.VideoObject;
+import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -40,7 +40,7 @@ public class FacebookVideosImporterTest {
   public void testImportSingleVideo() {
     importer.importSingleVideo(
         client,
-        new VideoObject(
+        new VideoModel(
             "title", VIDEO_URL, VIDEO_DESCRIPTION, "video/mp4", "videoId", null, false));
 
     Parameter[] params = {

File: extensions/data-transfer/portability-data-transfer-koofr/src/main/java/org/datatransferproject/transfer/koofr/videos/KoofrVideosExporter.java
Patch:
@@ -29,7 +29,7 @@
 import org.datatransferproject.transfer.koofr.common.KoofrMediaExport;
 import org.datatransferproject.types.common.ExportInformation;
 import org.datatransferproject.types.common.models.videos.VideoAlbum;
-import org.datatransferproject.types.common.models.videos.VideoObject;
+import org.datatransferproject.types.common.models.videos.VideoModel;
 import org.datatransferproject.types.common.models.videos.VideosContainerResource;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
 
@@ -58,7 +58,7 @@ public ExportResult<VideosContainerResource> export(
       export.export();
 
       List<VideoAlbum> exportAlbums = export.getVideoAlbums();
-      List<VideoObject> exportVideos = export.getVideos();
+      List<VideoModel> exportVideos = export.getVideos();
 
       VideosContainerResource containerResource =
           new VideosContainerResource(exportAlbums, exportVideos);

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/videos/VideoModel.java
Patch:
@@ -22,14 +22,14 @@
 import com.google.common.base.Objects;
 import org.datatransferproject.types.common.models.MediaObject;
 
-public class VideoObject extends MediaObject {
+public class VideoModel extends MediaObject {
 
   private String dataId;
   private String albumId;
   private boolean inTempStore;
 
   @JsonCreator
-  public VideoObject(
+  public VideoModel(
           @JsonProperty("name") String name,
           @JsonProperty("contentUrl") String contentUrl,
           @JsonProperty("description") String description,
@@ -76,7 +76,7 @@ public String toString() {
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
-    VideoObject that = (VideoObject) o;
+    VideoModel that = (VideoModel) o;
     return Objects.equal(getName(), that.getName()) &&
             Objects.equal(getContentUrl(), that.getContentUrl()) &&
             Objects.equal(getDescription(), that.getDescription()) &&

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/videos/VideosContainerResource.java
Patch:
@@ -30,12 +30,12 @@ public class VideosContainerResource extends ContainerResource {
   private static final String ALBUMS_COUNT_DATA_NAME = "albumsCount";
 
   private final Collection<VideoAlbum> albums;
-  private final Collection<VideoObject> videos;
+  private final Collection<VideoModel> videos;
 
   @JsonCreator
   public VideosContainerResource(
       @JsonProperty("albums") Collection<VideoAlbum> albums,
-      @JsonProperty("videos") Collection<VideoObject> videos) {
+      @JsonProperty("videos") Collection<VideoModel> videos) {
     this.albums = albums == null ? ImmutableList.of() : albums;
     this.videos = videos == null ? ImmutableList.of() : videos;
   }
@@ -44,7 +44,7 @@ public Collection<VideoAlbum> getAlbums() {
     return albums;
   }
 
-  public Collection<VideoObject> getVideos() {
+  public Collection<VideoModel> getVideos() {
     return videos;
   }
 

File: portability-types-common/src/test/java/org/datatransferproject/types/common/models/videos/VideosContainerResourceTest.java
Patch:
@@ -33,11 +33,11 @@ public void verifySerializeDeserialize() throws Exception {
     List<VideoAlbum> albums =
             ImmutableList.of(new VideoAlbum("id1", "album1", "This is a fake album"));
 
-    List<VideoObject> videos =
+    List<VideoModel> videos =
             ImmutableList.of(
-                    new VideoObject("Vid1", "http://example.com/1.mp4", "A video", "video/mp4", "v1", "id1",
+                    new VideoModel("Vid1", "http://example.com/1.mp4", "A video", "video/mp4", "v1", "id1",
                             false),
-                    new VideoObject(
+                    new VideoModel(
                             "Vid2", "https://example.com/2.mpeg", "A 2. video", "video/mpeg", "v2", "id1", false));
     
     ContainerResource data = new VideosContainerResource(albums, videos);

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporterTest.java
Patch:
@@ -102,7 +102,7 @@ public void importStoresAlbumInJobStore() throws FlickrException, Exception {
     when(uploader.upload(any(BufferedInputStream.class), any(UploadMetaData.class)))
         .thenReturn(FLICKR_PHOTO_ID);
 
-    String flickrAlbumTitle = FlickrPhotosImporter.COPY_PREFIX + ALBUM_NAME;
+    String flickrAlbumTitle = ALBUM_NAME;
     Photoset photoset =
         FlickrTestUtils.initializePhotoset(FLICKR_ALBUM_ID, ALBUM_DESCRIPTION, FLICKR_PHOTO_ID);
     when(photosetsInterface.create(flickrAlbumTitle, ALBUM_DESCRIPTION, FLICKR_PHOTO_ID))
@@ -127,8 +127,7 @@ public void importStoresAlbumInJobStore() throws FlickrException, Exception {
         ArgumentCaptor.forClass(UploadMetaData.class);
     verify(uploader).upload(eq(bufferedInputStream), uploadMetaDataArgumentCaptor.capture());
     UploadMetaData actualUploadMetaData = uploadMetaDataArgumentCaptor.getValue();
-    assertThat(actualUploadMetaData.getTitle())
-        .isEqualTo(FlickrPhotosImporter.COPY_PREFIX + PHOTO_TITLE);
+    assertThat(actualUploadMetaData.getTitle()).isEqualTo(PHOTO_TITLE);
     assertThat(actualUploadMetaData.getDescription()).isEqualTo(PHOTO_DESCRIPTION);
 
     // Verify the photosets interface got the command to create the correct album

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporterTest.java
Patch:
@@ -116,7 +116,7 @@ public void importAlbum() throws Exception {
     // Check results
     ArgumentCaptor<GoogleAlbum> albumArgumentCaptor = ArgumentCaptor.forClass(GoogleAlbum.class);
     Mockito.verify(googlePhotosInterface).createAlbum(albumArgumentCaptor.capture());
-    assertEquals(albumArgumentCaptor.getValue().getTitle(), "Copy of " + albumName);
+    assertEquals(albumArgumentCaptor.getValue().getTitle(), albumName);
     assertNull(albumArgumentCaptor.getValue().getId());
   }
 
@@ -251,7 +251,7 @@ public void importAlbumWithITString()
     sut.importSingleAlbum(uuid, null, albumModel);
     ArgumentCaptor<GoogleAlbum> albumArgumentCaptor = ArgumentCaptor.forClass(GoogleAlbum.class);
     Mockito.verify(googlePhotosInterface).createAlbum(albumArgumentCaptor.capture());
-    assertEquals(albumArgumentCaptor.getValue().getTitle(), "Copia di " + albumName);
+    assertEquals(albumArgumentCaptor.getValue().getTitle(), albumName);
   }
 
   @Test

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/videos/GoogleVideosExporterTest.java
Patch:
@@ -49,7 +49,7 @@
 
 public class GoogleVideosExporterTest {
 
-  private String VIDEO_URI = "video uri";
+  private String VIDEO_URI = "videouri";
   private String VIDEO_ID = "video id";
   private String VIDEO_TOKEN = "video_token";
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugInterface.java
Patch:
@@ -95,7 +95,7 @@ SmugMugAlbumResponse createAlbum(String albumName) throws IOException {
     json.put("NiceName", cleanName(albumName));
     // Allow conflicting names to be changed
     json.put("AutoRename", "true");
-    json.put("Title", "Copy of " + albumName);
+    json.put("Title", albumName);
     // All imported content is private by default.
     json.put("Privacy", "Private");
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -42,7 +42,6 @@ public class SmugMugPhotosImporter
     implements Importer<TokenSecretAuthData, PhotosContainerResource> {
 
   private static final String DEFAULT_ALBUM_NAME = "Untitled Album";
-  private static final String COPY_PREFIX = "Copy of ";
   private final TemporaryPerJobDataStore jobStore;
   private final AppCredentials appCredentials;
   private final ObjectMapper mapper;
@@ -112,7 +111,7 @@ String importSingleAlbum(UUID jobId, PhotoAlbum inputAlbum, SmugMugInterface smu
     String albumName =
         Strings.isNullOrEmpty(inputAlbum.getName())
             ? DEFAULT_ALBUM_NAME
-            : COPY_PREFIX + inputAlbum.getName();
+            : inputAlbum.getName();
 
     SmugMugAlbumResponse albumResponse = smugMugInterface.createAlbum(albumName);
     SmugMugPhotoTempData tempData =

File: extensions/data-transfer/portability-data-transfer-smugmug/src/test/java/org/datatransfer/smugmug/photos/SmugMugPhotosImporterTest.java
Patch:
@@ -111,12 +111,12 @@ public void importStoresAlbumInJobStore() throws Exception {
         new SmugMugAlbum(
             "date",
             photoAlbum1.getDescription(),
-            "Copy of " + photoAlbum1.getName(),
+            photoAlbum1.getName(),
             "privacy",
             "albumUri1",
             "urlname",
             "weburi");
-    String overflowAlbumName = "Copy of " + smugMugAlbum1.getName() + " (1)";
+    String overflowAlbumName = smugMugAlbum1.getName() + " (1)";
     SmugMugAlbum smugMugAlbum2 =
         new SmugMugAlbum(
             "date",

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporter.java
Patch:
@@ -112,7 +112,7 @@ public ImportResult importItem(
         data.getAlbums() != null || data.getPhotos() != null, "Error: There is no data to import");
 
     if (data.getAlbums() != null) {
-      storeAlbumbs(jobId, data.getAlbums());
+      storeAlbums(jobId, data.getAlbums());
     }
 
     if (data.getPhotos() != null) {
@@ -138,7 +138,7 @@ public ImportResult importItem(
 
   // Store any album data in the cache because Flickr only allows you to create an album with a
   // photo in it, so we have to wait for the first photo to create the album
-  private void storeAlbumbs(UUID jobId, Collection<PhotoAlbum> albums) throws IOException {
+  private void storeAlbums(UUID jobId, Collection<PhotoAlbum> albums) throws IOException {
     for (PhotoAlbum album : albums) {
       jobStore.create(
           jobId,

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/hooks/JobHooksLoader.java
Patch:
@@ -33,7 +33,7 @@ public static JobHooks loadJobHooks() {
             });
     return jobHooks.isEmpty()
         ? new DefaultJobHooks()
-        : new MultiplexJobHooks((JobHooks[]) jobHooks.toArray());
+        : new MultiplexJobHooks(jobHooks.toArray(new JobHooks[0]));
   }
 
   private JobHooksLoader() {}

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/calendar/GoogleCalendarImporter.java
Patch:
@@ -79,8 +79,8 @@ static com.google.api.services.calendar.model.Calendar convertToGoogleCalendar(
   static Event convertToGoogleCalendarEvent(CalendarEventModel eventModel) {
     Event event = new Event()
         .setLocation(eventModel.getLocation())
-        .setDescription(eventModel.getTitle())
-        .setSummary(eventModel.getNotes())
+        .setDescription(eventModel.getNotes())
+        .setSummary(eventModel.getTitle())
         .setStart(getEventDateTime(eventModel.getStartTime()))
         .setEnd(getEventDateTime(eventModel.getEndTime()));
     if (eventModel.getAttendees() != null) {

File: portability-api-launcher/src/main/java/org/datatransferproject/launcher/monitor/ConsoleMonitor.java
Patch:
@@ -19,6 +19,7 @@
 import org.datatransferproject.api.launcher.Monitor;
 
 import java.time.ZonedDateTime;
+import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
 import java.util.function.Supplier;
 import org.datatransferproject.launcher.monitor.events.EventCode;
@@ -73,7 +74,7 @@ private void output(String level, Supplier<String> supplier, String color, Objec
     color = ansi ? color : "";
     String reset = ansi ? ANSI_RESET : "";
 
-    String time = ZonedDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
+    String time = ZonedDateTime.now(ZoneId.systemDefault()).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
     System.out.println(color + level + " " + time + " " + supplier.get() + reset);
     if (data != null) {
       for (Object datum : data) {

File: portability-spi-cloud/src/main/java/org/datatransferproject/spi/cloud/storage/TemporaryPerJobDataStore.java
Patch:
@@ -45,7 +45,7 @@ default InputStreamWrapper getStream(UUID jobId, String key) throws IOException
 
   default File getTempFileFromInputStream(InputStream inputStream, String prefix, String suffix)
       throws IOException {
-    File tmp = File.createTempFile(prefix, suffix);
+    File tmp = Files.createTempFile(prefix, suffix).toFile();
     tmp.deleteOnExit();
     Files.copy(inputStream, tmp.toPath(), StandardCopyOption.REPLACE_EXISTING);
     return tmp;

File: portability-transfer/src/main/java/org/datatransferproject/transfer/copier/PortabilityAbstractInMemoryDataCopier.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.datatransferproject.transfer.copier;
 
-import static java.lang.String.format;
-
 import com.google.common.base.Stopwatch;
 import com.google.inject.Provider;
 import java.io.IOException;
@@ -161,7 +159,6 @@ protected ExportResult<?> copyIteration(
           }
         }
       } catch (RetryException | RuntimeException e) {
-        monitor.severe(() -> "Got error importing data", e);
         if (e.getClass() == RetryException.class
                 && CopyExceptionWithFailureReason.class.isAssignableFrom(e.getCause().getClass())) {
           throw (CopyExceptionWithFailureReason) e.getCause();

File: portability-api-launcher/src/main/java/org/datatransferproject/launcher/monitor/events/EventCode.java
Patch:
@@ -15,6 +15,9 @@ public class EventCode {
   public static final EventCode WORKER_JOB_FINISHED = new EventCode("WORKER_JOB_FINISHED");
   public static final EventCode WORKER_JOB_STARTED = new EventCode("WORKER_JOB_STARTED");
 
+  public static final EventCode WATCHING_SERVICE_JOB_ERRORED = new EventCode("WATCHING_SERVICE_JOB_ERRORED");
+  public static final EventCode WATCHING_SERVICE_JOB_PREEMPTED = new EventCode("WATCHING_SERVICE_JOB_PREEMPTED");
+
   public static final EventCode COPIER_FINISHED_EXPORT = new EventCode("COPIER_FINISHED_EXPORT");
   public static final EventCode COPIER_FINISHED_IMPORT = new EventCode("COPIER_FINISHED_IMPORT");
   public static final EventCode COPIER_STARTED_EXPORT = new EventCode("COPIER_STARTED_EXPORT");

File: portability-transfer/src/main/java/org/datatransferproject/transfer/CallableImporter.java
Patch:
@@ -74,7 +74,7 @@ public ImportResult call() throws Exception {
         throw new IOException(
             "Problem with importer, forcing a retry, "
                 + "first error: "
-                + (errors.iterator().hasNext() ? errors.iterator().next() : "none"));
+                + (errors.iterator().hasNext() ? errors.iterator().next().exception() : "none"));
       }
 
       result = result.copyWithCounts(data.getCounts());

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/social/SocialActivityAttachmentType.java
Patch:
@@ -18,5 +18,6 @@
 
 public enum SocialActivityAttachmentType {
   LINK,
-  IMAGE
+  IMAGE,
+  VIDEO
 }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/CallableImporter.java
Patch:
@@ -71,10 +71,10 @@ public ImportResult call() throws Exception {
       success = result.getType() == ImportResult.ResultType.OK && errors.isEmpty();
 
       if (!success) {
-        // No need to log out individual errors
-        // since IdempotentImportExecutor already logs them out
         throw new IOException(
-            "Encountered errors in idempotentImportExecutor, forcing a retry");
+            "Problem with importer, forcing a retry, "
+                + "first error: "
+                + (errors.iterator().hasNext() ? errors.iterator().next() : "none"));
       }
 
       result = result.copyWithCounts(data.getCounts());

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/drive/DriveImporter.java
Patch:
@@ -21,7 +21,7 @@
 import org.datatransferproject.types.transfer.models.blob.DigitalDocumentWrapper;
 import org.datatransferproject.types.transfer.models.blob.DtpDigitalDocument;
 
-/** An {@link Importer} to export data from Google Drive. */
+/** An {@link Importer} to import data to Google Drive. */
 public final class DriveImporter
     implements Importer<TokensAndUrlAuthData, BlobbyStorageContainerResource> {
   private static final String ROOT_FOLDER_ID = "root-id";

File: libraries/config/src/main/java/org/datatransferproject/config/FlagBindingModule.java
Patch:
@@ -49,7 +49,7 @@ protected void bindFlags(ExtensionContext context) {
       } catch (IllegalAccessException | InvocationTargetException e) {
         throw new RuntimeException("Could not get flag value by invoking: " + method.getName(), e);
       }
-      Preconditions.checkNotNull(flagValue, "Required flag " + method.getName() + " was mull");
+      Preconditions.checkNotNull(flagValue, "Required flag " + method.getName() + " was null");
       bind(returnType).annotatedWith(Names.named(method.getName())).toInstance(flagValue);
     }
   }

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/GenerateServiceAuthDataAction.java
Patch:
@@ -112,7 +112,7 @@ public ServiceAuthData handle(GenerateServiceAuthData request) {
           () -> format("Generated auth data in mode '%s' for job: %s", authMode, jobId), jobId,
           EventCode.API_GENERATED_AUTH_DATA);
 
-      // Serialize and encrypt the auth data
+      // Serialize the auth data
       String serialized = objectMapper.writeValueAsString(authData);
       return new ServiceAuthData(serialized);
     } catch (IOException e) {

File: portability-spi-service/src/main/java/org/datatransferproject/spi/service/extension/ServiceExtension.java
Patch:
@@ -24,6 +24,6 @@
 /**
  * An extension that provides core runtime services used by other extensions.
  *
- * <p>Service extensions are guaranteeed to be loaded prior to other extension types.
+ * <p>Service extensions are guaranteed to be loaded prior to other extension types.
  */
 public interface ServiceExtension extends AbstractExtension {}

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/auth/CookiesAndUrlAuthData.java
Patch:
@@ -6,7 +6,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import java.util.List;
 
-/** Auth data based on a set of cookies and a URL, currently only used for Solid. */
+/** Auth data based on a set of cookies and a URL, currently only used for Solid and Mastodon. */
 @JsonTypeName("org.dataportability:CookiesAndUrlAuthData")
 public class CookiesAndUrlAuthData extends AuthData {
   private final List<String> cookies;

File: extensions/data-transfer/portability-data-transfer-facebook/src/main/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosExporter.java
Patch:
@@ -96,7 +96,7 @@ private ExportResult<VideosContainerResource> exportVideos(
             new VideoObject(
                 String.format("%s.mp4", fbid),
                 url,
-                video.getName(),
+                video.getDescription(),
                 "video/mp4",
                 fbid,
                 null,

File: extensions/data-transfer/portability-data-transfer-facebook/src/main/java/org/datatransferproject/transfer/facebook/videos/RestFbFacebookVideos.java
Patch:
@@ -41,7 +41,7 @@ public class RestFbFacebookVideos implements FacebookVideosInterface {
   public Connection<Video> getVideos(Optional<String> paginationToken)
       throws CopyExceptionWithFailureReason {
     ArrayList<Parameter> parameters = new ArrayList<>();
-    parameters.add(Parameter.with("fields", "title,source"));
+    parameters.add(Parameter.with("fields", "description,source"));
     paginationToken.ifPresent(token -> parameters.add(Parameter.with("after", token)));
     try {
       return client.fetchConnection(

File: extensions/data-transfer/portability-data-transfer-facebook/src/test/java/org/datatransferproject/transfer/facebook/videos/FacebookVideosExporterTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() throws CopyExceptionWithFailureReason {
     Video video = new Video();
     video.setId(VIDEO_ID);
     video.setSource(VIDEO_SOURCE);
-    video.setName(VIDEO_NAME);
+    video.setDescription(VIDEO_NAME);
 
     ArrayList<Video> videos = new ArrayList<>();
     videos.add(video);

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -163,7 +163,7 @@ private String createOneDriveFolder(PhotoAlbum album) throws IOException, CopyEx
         body = newResponse.body();
       }
 
-      if (code == 403 && response.message() == "Access Denied") {
+      if (code == 403 && response.message().contains("Access Denied")) {
         throw new PermissionDeniedException(
             "User access to microsoft onedrive was denied",
             new IOException(
@@ -280,7 +280,7 @@ private String createUploadSession(PhotoModel photo, IdempotentImportExecutor id
       responseBody = newResponse.body();
     }
 
-    if (code == 403 && response.message() == "Access Denied") {
+    if (code == 403 && response.message().contains("Access Denied")) {
       throw new PermissionDeniedException(
           "User access to Microsoft One Drive was denied",
           new IOException(

File: extensions/copier/portability-stack-copier/src/main/java/org/datatransferproject/copier/stack/PortabilityStackInMemoryDataCopier.java
Patch:
@@ -96,7 +96,7 @@ public Collection<ErrorDetail> copy(
 
     Optional<Stack<ExportInformation>> maybeLoadedStack = jobStore.loadJobStack(jobId);
 
-    if (maybeLoadedStack.isPresent() && !maybeLoadedStack.get().isEmpty()) {
+    if (maybeLoadedStack.isPresent()) {
       // load stack from partially completed transfer
       exportInfoStack = maybeLoadedStack.get();
     } else {

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -36,6 +36,7 @@
 import org.datatransferproject.spi.transfer.security.AuthDataDecryptService;
 import org.datatransferproject.spi.transfer.types.CopyException;
 import org.datatransferproject.spi.transfer.types.CopyExceptionWithFailureReason;
+import org.datatransferproject.transfer.copier.InMemoryDataCopier;
 import org.datatransferproject.types.common.ExportInformation;
 import org.datatransferproject.types.transfer.auth.AuthData;
 import org.datatransferproject.types.transfer.auth.AuthDataPair;

File: portability-transfer/src/main/java/org/datatransferproject/transfer/copier/InMemoryDataCopier.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.datatransferproject.transfer;
+package org.datatransferproject.transfer.copier;
 
 import org.datatransferproject.spi.transfer.types.CopyException;
 import org.datatransferproject.types.common.ExportInformation;

File: portability-spi-cloud/src/test/java/org/datatransferproject/spi/cloud/types/PortabilityJobTest.java
Patch:
@@ -83,13 +83,13 @@ public void verifySerializeDeserializeWithAlbum() throws IOException {
             .setExportService("fooService")
             .setImportService("barService")
             .setTransferDataType("PHOTOS")
-            .setExportInformation(
+            .setExportInformation(objectMapper.writeValueAsString(
                 new ExportInformation(
                     null,
                     new PhotosContainerResource(
                         Lists.newArrayList(
                             new PhotoAlbum("album_id", "album name", "album description")),
-                        null)))
+                        null))))
             .setCreatedTimestamp(date)
             .setLastUpdateTimestamp(date.plusSeconds(120))
             .setJobAuthorization(jobAuthorization)

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosInterface.java
Patch:
@@ -153,7 +153,7 @@ String uploadPhotoContent(InputStream inputStream)
         BASE_URL + "uploads/", Optional.of(PHOTO_UPLOAD_PARAMS), httpContent, String.class);
   }
 
-  BatchMediaItemResponse createPhoto(NewMediaItemUpload newMediaItemUpload)
+  BatchMediaItemResponse createPhotos(NewMediaItemUpload newMediaItemUpload)
       throws IOException, InvalidTokenException, PermissionDeniedException {
     HashMap<String, Object> map = createJsonMap(newMediaItemUpload);
     HttpContent httpContent = new JsonHttpContent(new JacksonFactory(), map);

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/videos/GoogleVideosImporter.java
Patch:
@@ -94,7 +94,7 @@ public GoogleVideosImporter(
     this.monitor = monitor;
     this.appCredentials = appCredentials;
     this.dataStore = dataStore;
-    videoStreamProvider = new ImageStreamProvider();
+    this.videoStreamProvider = new ImageStreamProvider();
   }
 
   GoogleVideosImporter(

File: portability-transfer/src/main/java/org/datatransferproject/transfer/CallableImporter.java
Patch:
@@ -63,9 +63,11 @@ public ImportResult call() throws Exception {
     boolean success = false;
     Stopwatch stopwatch = Stopwatch.createStarted();
     try {
+      idempotentImportExecutor.resetRecentErrors();
       ImportResult result = importerProvider.get()
           .importItem(jobId, idempotentImportExecutor, authData, data);
-      Collection<ErrorDetail> errors = idempotentImportExecutor.getErrors();
+
+      Collection<ErrorDetail> errors = idempotentImportExecutor.getRecentErrors();
       success = result.getType() == ImportResult.ResultType.OK && errors.isEmpty();
 
       if (!success) {

File: portability-transfer/src/main/java/org/datatransferproject/transfer/PortabilityInMemoryDataCopier.java
Patch:
@@ -127,7 +127,7 @@ private Collection<ErrorDetail> copyHelper(
         new CallableExporter(
             exporterProvider, jobId, exportAuthData, exportInformation, metricRecorder);
     RetryingCallable<ExportResult> retryingExporter =
-        new RetryingCallable<>(callableExporter, retryStrategyLibrary, Clock.systemUTC(), monitor);
+        new RetryingCallable<>(callableExporter, retryStrategyLibrary, Clock.systemUTC(), monitor, JobMetadata.getDataType(), JobMetadata.getExportService());
     ExportResult<?> exportResult;
     boolean exportSuccess = false;
     Stopwatch exportStopwatch = Stopwatch.createStarted();
@@ -165,7 +165,7 @@ private Collection<ErrorDetail> copyHelper(
               metricRecorder);
       RetryingCallable<ImportResult> retryingImporter =
           new RetryingCallable<>(
-              callableImporter, retryStrategyLibrary, Clock.systemUTC(), monitor);
+              callableImporter, retryStrategyLibrary, Clock.systemUTC(), monitor, JobMetadata.getDataType(), JobMetadata.getImportService());
       boolean importSuccess = false;
       Stopwatch importStopwatch = Stopwatch.createStarted();
       try {

File: extensions/auth/portability-auth-google/src/main/java/org/datatransferproject/auth/google/GoogleOAuthConfig.java
Patch:
@@ -78,6 +78,6 @@ public Map<String, Set<String>> getImportScopes() {
 
   @Override
   public Map<String, String> getAdditionalAuthUrlParameters() {
-    return ImmutableMap.of("prompt", "consent");
+    return ImmutableMap.of("prompt", "consent", "access_type", "offline");
   }
 }

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporter.java
Patch:
@@ -214,7 +214,6 @@ private void createAlbum(
 
   private String uploadPhoto(PhotoModel photo, UUID jobId) throws IOException, FlickrException {
     BufferedInputStream inStream = imageStreamProvider.get(photo.getFetchableUrl());
-
     // TODO: do we want to keep COPY_PREFIX?  I think not
     String photoTitle =
         Strings.isNullOrEmpty(photo.getTitle()) ? "" : COPY_PREFIX + photo.getTitle();
@@ -230,6 +229,7 @@ private String uploadPhoto(PhotoModel photo, UUID jobId) throws IOException, Fli
             .setDescription(photoDescription);
     perUserRateLimiter.acquire();
     String uploadResult = uploader.upload(inStream, uploadMetaData);
+    inStream.close();
     monitor.debug(() -> String.format("%s: Flickr importer uploading photo: %s", jobId, photo));
     return uploadResult;
   }

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporterTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.transfer.idempotentexecutor.IdempotentImportExecutor;
 import org.datatransferproject.spi.transfer.types.InvalidTokenException;
+import org.datatransferproject.spi.transfer.types.PermissionDeniedException;
 import org.datatransferproject.test.types.FakeIdempotentImportExecutor;
 import org.datatransferproject.transfer.ImageStreamProvider;
 import org.datatransferproject.types.common.models.photos.PhotoAlbum;
@@ -68,7 +69,7 @@ public class GooglePhotosImporterTest {
   private static final String NEW_ALBUM_ID = "NEW_ALBUM_ID";
 
   @Before
-  public void setUp() throws IOException, InvalidTokenException {
+  public void setUp() throws IOException, InvalidTokenException, PermissionDeniedException {
     executor = new FakeIdempotentImportExecutor();
     googlePhotosInterface = Mockito.mock(GooglePhotosInterface.class);
     monitor = Mockito.mock(Monitor.class);

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/types/FailureReasons.java
Patch:
@@ -2,7 +2,9 @@
 
 public enum FailureReasons {
   DESTINATION_FULL("DESTINATION_FULL"),
-  INVALID_TOKEN("INVALID_TOKEN");
+  INVALID_TOKEN("INVALID_TOKEN"),
+  PERMISSION_DENIED("PERMISSION_DENIED"),
+  UPLOAD_ERROR("UPLOAD_ERROR");
 
   private final String string;
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -121,12 +121,12 @@ String importSingleAlbum(UUID jobId, PhotoAlbum inputAlbum, SmugMugInterface smu
     SmugMugPhotoTempData tempData =
         new SmugMugPhotoTempData(
             inputAlbum.getId(), inputAlbum.getName(), inputAlbum.getDescription(), albumResponse.getUri());
-    System.out.printf("uploading temp data to jobstore %s %s\n", tempData, inputAlbum.getId());
+    monitor.info(() -> "uploading temp data to jobstore", tempData, inputAlbum.getId());
     jobStore.create(jobId, getTempDataId(inputAlbum.getId()), tempData);
-    System.out.printf("success uploading temp data to jobstore %s %s\n", tempData, inputAlbum.getId());
+    monitor.info(() -> "success uploading temfp data to jobstore", tempData, inputAlbum.getId());
     SmugMugPhotoTempData baseAlbumTempData =
         jobStore.findData(jobId, getTempDataId(inputAlbum.getId()), SmugMugPhotoTempData.class);
-    System.out.printf("here it is %s\n", baseAlbumTempData);
+    monitor.info(() -> "here it is", baseAlbumTempData);
     return albumResponse.getUri();
   }
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -121,9 +121,9 @@ String importSingleAlbum(UUID jobId, PhotoAlbum inputAlbum, SmugMugInterface smu
     SmugMugPhotoTempData tempData =
         new SmugMugPhotoTempData(
             inputAlbum.getId(), inputAlbum.getName(), inputAlbum.getDescription(), albumResponse.getUri());
-    monitor.info("uploading temp data to jobstore", tempData, inputAlbum.getId());
+    monitor.info(() -> "uploading temp data to jobstore", tempData, inputAlbum.getId());
     jobStore.create(jobId, getTempDataId(inputAlbum.getId()), tempData);
-    monitor.info("success uploading temp data to jobstore", tempData, inputAlbum.getId());
+    monitor.info(() -> "success uploading temp data to jobstore", tempData, inputAlbum.getId());
     return albumResponse.getUri();
   }
 

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosExporterTest.java
Patch:
@@ -84,7 +84,7 @@ public void toCommonPhoto() {
   @Test
   public void getMimeType() {
     assertThat(FlickrPhotosExporter.toMimeType("jpeg")).isEqualTo("image/jpeg");
-    assertThrows(IllegalArgumentException.class, () -> FlickrPhotosExporter.toMimeType("gif"));
+    assertThat(FlickrPhotosExporter.toMimeType("gif")).isEqualTo("image/gif");
   }
 
   @Test

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosExporter.java
Patch:
@@ -339,7 +339,8 @@ private synchronized GooglePhotosInterface getOrCreatePhotosInterface(
 
   private synchronized GooglePhotosInterface makePhotosInterface(TokensAndUrlAuthData authData) {
     Credential credential = credentialFactory.createCredential(authData);
-    return new GooglePhotosInterface(credentialFactory, credential, jsonFactory, monitor);
+    return new GooglePhotosInterface(
+        credentialFactory, credential, jsonFactory, monitor, /* arbitrary writesPerSecond */ 1.0);
   }
 
   private static String createCacheKey() {

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporterTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() throws IOException, InvalidTokenException {
 
     googlePhotosImporter =
         new GooglePhotosImporter(
-            null, jobStore, null, googlePhotosInterface, imageStreamProvider, monitor);
+            null, jobStore, null, googlePhotosInterface, imageStreamProvider, monitor, 1.0);
   }
 
   @Test

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosExporter.java
Patch:
@@ -104,6 +104,8 @@ static String toMimeType(String flickrFormat) {
         return "image/jpeg";
       case "png":
         return "image/png";
+      case "gif":
+        return "image/gif";
       default:
         throw new IllegalArgumentException("Don't know how to map: " + flickrFormat);
     }

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -137,10 +137,11 @@ String importSinglePhoto(
       SmugMugInterface smugMugInterface)
       throws Exception {
     SmugMugPhotoTempData albumCount = getAlbumCount(jobId, idempotentExecutor, inputPhoto.getAlbumId());
-    monitor.info(() -> "Importing a photo, got an albumCount", albumCount);
     inputPhoto.reassignToAlbum(albumCount.getAlbumId());    
     String albumUri =
         idempotentExecutor.getCachedValue(inputPhoto.getAlbumId());
+    monitor.info(() -> "Importing a photo, got an albumCount", albumCount, albumUri);
+
     InputStream inputStream;
     if (inputPhoto.isInTempStore()) {
       inputStream = jobStore.getStream(jobId, inputPhoto.getFetchableUrl()).getStream();

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -136,11 +136,11 @@ String importSinglePhoto(
       PhotoModel inputPhoto,
       SmugMugInterface smugMugInterface)
       throws Exception {
-    String albumUri =
-        idempotentExecutor.getCachedValue(inputPhoto.getAlbumId());
     SmugMugPhotoTempData albumCount = getAlbumCount(jobId, idempotentExecutor, inputPhoto.getAlbumId());
     monitor.info(() -> "Importing a photo, got an albumCount", albumCount);
     inputPhoto.reassignToAlbum(albumCount.getAlbumId());    
+    String albumUri =
+        idempotentExecutor.getCachedValue(inputPhoto.getAlbumId());
     InputStream inputStream;
     if (inputPhoto.isInTempStore()) {
       inputStream = jobStore.getStream(jobId, inputPhoto.getFetchableUrl()).getStream();

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -125,8 +125,7 @@ String importSingleAlbum(UUID jobId, PhotoAlbum inputAlbum, SmugMugInterface smu
     SmugMugAlbumResponse albumResponse = smugMugInterface.createAlbum(inputAlbum.getName());
     SmugMugPhotoTempData tempData = new SmugMugPhotoTempData(inputAlbum.getId(), albumResponse.getAlbum());
     jobStore.create(jobId, tempData.getAlbumUri(), tempData);
-    SmugMugPhotoTempData tempDataCheck = jobStore.findData(jobId, tempData.getAlbumUri(), SmugMugPhotoTempData.class);
-    monitor.info(() -> "Created a jobStore entity for album with uri", tempData.getAlbumUri(), tempDataCheck);
+    monitor.info(() -> "Created a jobStore entity for album with uri", tempData.getAlbumUri(), tempData);
     return albumResponse.getUri();
   }
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -71,7 +71,7 @@ public SmugMugPhotosImporter(
       AppCredentials appCredentials,
       ObjectMapper mapper,
       Monitor monitor) {
-    monitor.info("Our job store", jobStore);
+    monitor.info(() -> "Our job store", jobStore);
     this.smugMugInterface = smugMugInterface;
     this.jobStore = jobStore;
     this.transport = transport;

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -146,7 +146,7 @@ String importSinglePhoto(
       inputStream = smugMugInterface.getImageAsStream(inputPhoto.getFetchableUrl());
     }
     SmugMugImageUploadResponse response =
-        smugMugInterface.uploadImage(inputPh oto, albumUri, inputStream);
+        smugMugInterface.uploadImage(inputPhoto, albumUri, inputStream);
     monitor.info(() -> "what it do jloo", response);
     albumCount.incrementPhotoCount();    
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -122,8 +122,6 @@ String importSingleAlbum(UUID jobId, PhotoAlbum inputAlbum, SmugMugInterface smu
     checkNotNull(inputAlbum);
     checkNotNull(inputAlbum.getName());
     SmugMugAlbumResponse albumResponse = smugMugInterface.createAlbum(inputAlbum.getName());
-    SmugMugPhotoTempData test = jobStore.findData(jobId, inputAlbum.getId(), SmugMugPhotoTempData.class);
-    monitor.info(() -> "this is at the jobstore", test);
     SmugMugPhotoTempData tempData = new SmugMugPhotoTempData(inputAlbum.getId(), albumResponse.getAlbum());
     jobStore.create(jobId, inputAlbum.getId(), tempData);
     return albumResponse.getUri();
@@ -148,7 +146,7 @@ String importSinglePhoto(
       inputStream = smugMugInterface.getImageAsStream(inputPhoto.getFetchableUrl());
     }
     SmugMugImageUploadResponse response =
-        smugMugInterface.uploadImage(inputPhoto, albumUri, inputStream);
+        smugMugInterface.uploadImage(inputPh oto, albumUri, inputStream);
     monitor.info(() -> "what it do jloo", response);
     albumCount.incrementPhotoCount();    
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -95,7 +95,7 @@ public ImportResult importItem(
       for (PhotoAlbum album : data.getAlbums()) {
         SmugMugAlbumResponse albumUploadResponse =
             idempotentExecutor.executeAndSwallowIOExceptions(
-                album.getId(), album.getName(), () -> importSingleAlbum(album, smugMugInterface));
+                album.getId(), album.getName(), () -> importSingleAlbum(jobId, album, smugMugInterface));
         if (albumUploadResponse == null) {
           monitor.severe(() -> "Problem uploading album", album.getId(), album.getName());
         } else {
@@ -116,7 +116,7 @@ public ImportResult importItem(
   }
 
   @VisibleForTesting
-  SmugMugAlbumResponse importSingleAlbum(PhotoAlbum inputAlbum, SmugMugInterface smugMugInterface)
+  SmugMugAlbumResponse importSingleAlbum(UUID jobId, PhotoAlbum inputAlbum, SmugMugInterface smugMugInterface)
       throws IOException {
     checkNotNull(smugMugInterface);
     checkNotNull(inputAlbum);
@@ -210,7 +210,7 @@ private SmugMugPhotoTempData getAlbumCount(
             idempotentExecutor.executeAndSwallowIOExceptions(
                 newAlbum.getId(),
                 newAlbum.getName(),
-                () -> importSingleAlbum(newAlbum, smugMugInterface));
+                () -> importSingleAlbum(jobId, newAlbum, smugMugInterface));
         checkState(
             !Strings.isNullOrEmpty(overflowUploadResponse.getUri()),
             "Failed to create overflow album for %s",

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporter.java
Patch:
@@ -205,9 +205,9 @@ private void createAlbum(
         oldAlbumId,
         album.getName(),
         () -> {
-          // TODO: do we want to keep the COPY_PREFIX?  I feel like not
+          // TODO: make COPY_PREFIX configurable.
           String albumName =
-              Strings.isNullOrEmpty(album.getName()) ? "" : COPY_PREFIX + album.getName();
+              Strings.isNullOrEmpty(album.getName()) ? "untitled" : COPY_PREFIX + album.getName();
           String albumDescription = cleanString(album.getDescription());
 
           perUserRateLimiter.acquire();

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosInterface.java
Patch:
@@ -190,7 +190,7 @@ <T> T makePostRequest(
     HttpRequest postRequest =
         requestFactory.buildPostRequest(
             new GenericUrl(url + "?" + generateParamsString(parameters)), httpContent);
-
+    postRequest.setReadTimeout(2 * 60000);  // 2 minutes read timeout
     HttpResponse response;
 
     try {

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -140,8 +140,8 @@ String importSinglePhoto(
     SmugMugPhotoTempData albumCount = getAlbumCount(jobId, idempotentExecutor, inputPhoto);
     monitor.info(() -> "Importing a photo, got an albumCount", albumCount);
     SmugMugAlbumResponse albumUploadResponse = idempotentExecutor.getCachedValue(inputPhoto.getAlbumId());
-    checkState(
-        !Strings.isNullOrEmpty(albumUploadResponse),
+    checkNotNull(
+        albumUploadResponse,
         "Cached album upload response for %s is null",
         inputPhoto.getAlbumId());
     String albumUri = albumUploadResponse.getUri();

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugInterface.java
Patch:
@@ -250,8 +250,7 @@ private <T> T postRequest(
     Response response = request.send();
     String result = response.getBody();
 
-    System.out.printf("Sent a post request... %s %s", request.getBodyParams(), request.getBodyContents());
-    System.out.printf("Received a post response... %s", result);
+    System.out.printf("Received a post response... %s\n", result);
     if (response.getCode() < 200 || response.getCode() >= 300) {
       if (response.getCode() == 400) {
         throw new IOException(

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/model/SmugMugAlbum.java
Patch:
@@ -16,9 +16,10 @@
 package org.datatransferproject.transfer.smugmug.photos.model;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import java.io.Serializable;
 import java.util.Map;
 
-public class SmugMugAlbum {
+public class SmugMugAlbum implements Serializable {
 
   @JsonProperty("Date")
   private String date;

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -210,6 +210,7 @@ private String importSinglePhoto(
     for (DataChunk chunk : chunksToSend) {
       chunkResponse = uploadChunk(chunk, photoUploadUrl, totalFileSize, photo.getMediaType());
     }
+    Preconditions.checkState(chunkResponse.code() == 200 || chunkResponse.code() == 201 , "Received a bad code on completion of uploading chunks %d", chunkResponse.code());
     // get complete file response
     ResponseBody chunkResponseBody = chunkResponse.body();
     Map<String, Object> chunkResponseData = objectMapper.readValue(chunkResponseBody.bytes(), Map.class);
@@ -322,8 +323,8 @@ private Response uploadChunk(DataChunk chunk, String photoUploadUrl, int totalFi
         "Got error code: " + chunkCode + " message: " + chunkResponse.message() + " body: " + chunkResponse
         .body().string());
     }
-    if (chunkCode == 200) {
-      monitor.info(() -> String.format("Uploaded chunk %s-%s successfuly", chunk.getStart(), chunk.getEnd()));
+    if (chunkCode == 200 || chunkCode == 201 || chunkCode == 202) {
+      monitor.info(() -> String.format("Uploaded chunk %s-%s successfuly, code %d", chunk.getStart(), chunk.getEnd()));
     }
     return chunkResponse;
   }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -204,14 +204,13 @@ private String importSinglePhoto(
     // Arrange the data to be uploaded in chunks
     List<DataChunk> chunksToSend = DataChunk.splitData(inputStream);
     final int totalFileSize = chunksToSend.stream().map(DataChunk::getSize).reduce(0, Integer::sum);
+    Preconditions.checkState(chunksToSend.size() != 0, "Data was split into zero chunks %s.", photo.getTitle());
 
-    Integer chunkCode = null;
     Response chunkResponse = null;
     for (DataChunk chunk : chunksToSend) {
       chunkResponse = uploadChunk(chunk, photoUploadUrl, totalFileSize, photo.getMediaType());
     }
     // get complete file response
-    Preconditions.checkState(chunkCode == 201 || chunkCode == 200, "Got bad response code when finishing uploadSession: %d", chunkCode);
     ResponseBody chunkResponseBody = chunkResponse.body();
     Map<String, Object> chunkResponseData = objectMapper.readValue(chunkResponseBody.bytes(), Map.class);
     return (String) chunkResponseData.get("id");
@@ -307,6 +306,7 @@ private Response uploadChunk(DataChunk chunk, String photoUploadUrl, int totalFi
 
     // upload the chunk
     Response chunkResponse = client.newCall(uploadRequestBuilder.build()).execute();
+    Preconditions.checkNotNull(chunkResponse, "chunkResponse is null");
     if (chunkResponse.code() == 401) {
       // If there was an unauthorized error, then try refreshing the creds
       credentialFactory.refreshCredential(credential);

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -209,8 +209,11 @@ private String importSinglePhoto(
     Response chunkResponse = null;
     for (DataChunk chunk : chunksToSend) {
       chunkResponse = uploadChunk(chunk, photoUploadUrl, totalFileSize, photo.getMediaType());
+      chunkCode = chunkResponse.code();
     }
     // get complete file response
+    Preconditions.checkNotNull(chunkResponse, "chunkResponse is null");
+    Preconditions.checkNotNull(chunkCode, "chunkCode is null");
     Preconditions.checkState(chunkCode == 201 || chunkCode == 200, "Got bad response code when finishing uploadSession: %d", chunkCode);
     ResponseBody chunkResponseBody = chunkResponse.body();
     Map<String, Object> chunkResponseData = objectMapper.readValue(chunkResponseBody.bytes(), Map.class);

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -160,7 +160,7 @@ private String createOneDriveFolder(PhotoAlbum album) throws IOException {
       if (code < 200 || code > 299) {
         throw new IOException(
             "Got error code: " + code + " message: " + response.message() + " body: " + response
-                .body());
+                .body().string());
       }
       if (body == null) {
         throw new IOException("Got null body");
@@ -225,7 +225,7 @@ private String importSinglePhoto(
         if (code < 200 || code > 299) {
           throw new IOException(
               "Got error code: " + code + " message: " + response.message() + " body: " + response
-                  .body());
+                  .body().string());
         }
 
         // Extract photo ID from response body

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/photos/PhotoAlbum.java
Patch:
@@ -90,10 +90,10 @@ public void cleanName(String forbiddenCharacters, char replacementCharacter, int
         .mapToObj(c -> (char) c)
         .map(c -> forbiddenCharacters.contains(Character.toString(c)) ? replacementCharacter : c)
         .map(Object::toString)
-        .collect(Collectors.joining(""));
+        .collect(Collectors.joining("")).trim();
     if (maxLength <= 0) {
       return;
     }
-    name = name.substring(0, maxLength);
+    name = name.substring(0, Math.min(maxLength, name.length())).trim();
   }
 }

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/photos/PhotoModel.java
Patch:
@@ -83,11 +83,11 @@ public void cleanTitle(String forbiddenCharacters, char replacementCharacter, in
         .mapToObj(c -> (char) c)
         .map(c -> forbiddenCharacters.contains(Character.toString(c)) ? replacementCharacter : c)
         .map(Object::toString)
-        .collect(Collectors.joining(""));
+        .collect(Collectors.joining("")).trim();
     if (maxLength <= 0) {
       return;
     }
-    title = title.substring(0, Math.min(maxLength, title.length()));
+    title = title.substring(0, Math.min(maxLength, title.length())).trim();
   }
   
   public boolean isInTempStore() { return inTempStore; }

File: extensions/data-transfer/portability-data-transfer-twitter/src/main/java/org/datatransferproject/transfer/twitter/TwitterTransferExtension.java
Patch:
@@ -65,10 +65,10 @@ public String getServiceId() {
   @Override
   public Importer<?, ?> getImporter(String transferDataType) {
     Preconditions.checkArgument(
-        initialized, "Trying to call getExporter before initalizing TwitterTransferExtension");
+        initialized, "Trying to call getImporter before initalizing TwitterTransferExtension");
     Preconditions.checkArgument(
         SUPPORTED_TYPES.contains(transferDataType),
-        "Export of " + transferDataType + " not supported by Twitter");
+        "Import of " + transferDataType + " not supported by Twitter");
     return importer;
   }
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -218,7 +218,9 @@ private String importSinglePhoto(
             responseBody = newResponse.body();
         }
         if (code < 200 || code > 299) {
-          throw new IOException("Got error code: " + code + " message " + response.message());
+          throw new IOException(
+              "Got error code: " + code + " message: " + response.message() + " body: " + response
+                  .body());
         }
 
         // Extract photo ID from response body

File: portability-api-launcher/src/main/java/org/datatransferproject/launcher/monitor/events/EventCode.java
Patch:
@@ -10,6 +10,7 @@ public class EventCode {
 
   public static final EventCode WORKER_CREDS_STORED = new EventCode("WORKER_CREDS_STORED");
   public static final EventCode WORKER_CREDS_TIMEOUT = new EventCode("WORKER_CREDS_TIMEOUT");
+  public static final EventCode WORKER_JOB_CANCELED = new EventCode("WORKER_JOB_CANCELED");
   public static final EventCode WORKER_JOB_ERRORED = new EventCode("WORKER_JOB_ERRORED");
   public static final EventCode WORKER_JOB_FINISHED = new EventCode("WORKER_JOB_FINISHED");
   public static final EventCode WORKER_JOB_STARTED = new EventCode("WORKER_JOB_STARTED");

File: portability-spi-cloud/src/main/java/org/datatransferproject/spi/cloud/types/PortabilityJob.java
Patch:
@@ -229,7 +229,8 @@ public enum State {
     IN_PROGRESS,
     COMPLETE,
     ERROR,
-    CANCELED
+    CANCELED,
+    PREEMPTED
   }
 
   @AutoValue.Builder

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -240,7 +240,7 @@ private String importSinglePhoto(
   static String cleanName(String name) {
     return name.chars()
         .mapToObj(c -> (char) c)
-        .map(c -> (!Character.isLetterOrDigit(c) || !Character.isWhitespace(c)) ? '-' : c)
+        .map(c -> (!Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) ? '-' : c)
         .limit(40)
         .map(Object::toString)
         .collect(Collectors.joining(""));

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/auth/CookiesAndUrlAuthData.java
Patch:
@@ -1,6 +1,7 @@
 package org.datatransferproject.types.transfer.auth;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import java.util.List;
@@ -26,6 +27,7 @@ public List<String> getCookies() {
     return cookies;
   }
 
+  @JsonIgnore
   @Override
   public String getToken() {
     // CookiesAndUrlAuthData is the only class not to have a token.

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/auth/TokensAndUrlAuthData.java
Patch:
@@ -1,6 +1,7 @@
 package org.datatransferproject.types.transfer.auth;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 
@@ -33,6 +34,7 @@ public String getTokenServerEncodedUrl() {
     return tokenServerEncodedUrl;
   }
 
+  @JsonIgnore
   @Override
   public String getToken() {
     return getAccessToken();

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/auth/CookiesAndUrlAuthData.java
Patch:
@@ -1,6 +1,7 @@
 package org.datatransferproject.types.transfer.auth;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import java.util.List;
@@ -26,6 +27,7 @@ public List<String> getCookies() {
     return cookies;
   }
 
+  @JsonIgnore
   @Override
   public String getToken() {
     // CookiesAndUrlAuthData is the only class not to have a token.

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/auth/TokensAndUrlAuthData.java
Patch:
@@ -1,6 +1,7 @@
 package org.datatransferproject.types.transfer.auth;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 
@@ -33,6 +34,7 @@ public String getTokenServerEncodedUrl() {
     return tokenServerEncodedUrl;
   }
 
+  @JsonIgnore
   @Override
   public String getToken() {
     return getAccessToken();

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/ImportResult.java
Patch:
@@ -44,7 +44,7 @@ public ImportResult(ResultType type) {
   public ImportResult(ResultType type, Optional<Throwable> throwable, Map<String, Integer> counts) {
     this.type = type;
     this.throwable = throwable;
-    this.counts = Optional.of(counts);
+    this.counts = Optional.ofNullable(counts);
   }
 
   /**

File: portability-transfer/src/main/java/org/datatransferproject/transfer/PortabilityInMemoryDataCopier.java
Patch:
@@ -111,8 +111,8 @@ private Collection<ErrorDetail> copyHelper(
       throws CopyException {
 
     String jobIdPrefix = "Job " + jobId + ": ";
-    monitor.debug(
-        () -> jobIdPrefix + "Copy iteration: " + COPY_ITERATION_COUNTER.incrementAndGet());
+    final int i = COPY_ITERATION_COUNTER.incrementAndGet();
+    monitor.debug(() -> jobIdPrefix + "Copy iteration: " + i);
 
     RetryStrategyLibrary retryStrategyLibrary = retryStrategyLibraryProvider.get();
 
@@ -164,7 +164,7 @@ private Collection<ErrorDetail> copyHelper(
           try {
             jobStore.addCounts(jobId, importResult.getCounts().orElse(null));
           } catch (IOException e) {
-            monitor.debug(()-> jobIdPrefix + "Unable to add counts to job: ", e);
+            monitor.debug(() -> jobIdPrefix + "Unable to add counts to job: ", e);
           }
         }
       } catch (RetryException | RuntimeException e) {

File: portability-transfer/src/main/java/org/datatransferproject/transfer/CallableImporter.java
Patch:
@@ -72,7 +72,8 @@ public ImportResult call() throws Exception {
       Collection<ErrorDetail> errors = idempotentImportExecutor.getErrors();
       if (!success || !errors.isEmpty()) {
         throw new IOException("Problem with importer, forcing a retry, "
-            + errors.size() + " errors, first one: " + errors.iterator().next());
+            + errors.size() + " errors, first one: " +
+            (errors.iterator().hasNext() ? errors.iterator().next() : "none"));
       }
       return result;
     } finally{

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -103,7 +103,7 @@ public void initialize(ExtensionContext context) {
     importerBuilder.put("MAIL", new GoogleMailImporter(credentialFactory, monitor));
     importerBuilder.put("TASKS", new GoogleTasksImporter(credentialFactory));
     importerBuilder.put(
-            "PHOTOS", new GooglePhotosImporter(credentialFactory, jobStore, jsonFactory));
+            "PHOTOS", new GooglePhotosImporter(credentialFactory, jobStore, jsonFactory, monitor));
     importerBuilder.put("VIDEOS", new GoogleVideosImporter(credentialFactory, jsonFactory, monitor));
     importerMap = importerBuilder.build();
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosExporter.java
Patch:
@@ -332,7 +332,7 @@ private synchronized GooglePhotosInterface getOrCreatePhotosInterface(
 
   private synchronized GooglePhotosInterface makePhotosInterface(TokensAndUrlAuthData authData) {
     Credential credential = credentialFactory.createCredential(authData);
-    return new GooglePhotosInterface(credential, jsonFactory);
+    return new GooglePhotosInterface(credential, jsonFactory, monitor);
   }
 
   private static String createCacheKey() {

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/contacts/GoogleContactsExporter.java
Patch:
@@ -110,13 +110,14 @@ static VCard convert(Person person) {
   }
 
   private static void convertToVCardNamesAndPopulate(VCard vCard, List<Name> personNames) {
-    // TODO(olsona): what if there's more than one primary name in a Google Contact?
+    // If there are multiple primary names, we consider the first one as primary
+    // and add remaining primary names in alternateStructuredNames
     StructuredName primaryStructuredName = null;
     LinkedList<StructuredName> alternateStructuredNames = new LinkedList<>();
     for (Name personName : personNames) {
       StructuredName structuredName = convertToVCardNameSingle(personName);
       Boolean isNamePrimary = personName.getMetadata().getPrimary();
-      if (isNamePrimary != null && isNamePrimary) {
+      if (primaryStructuredName == null && isNamePrimary != null && isNamePrimary) {
         // This is the (a?) primary name for the Person, so it should be the primary name in the
         // VCard.
         primaryStructuredName = structuredName;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -89,11 +89,12 @@ public void initialize(ExtensionContext context) {
       return;
     }
 
+    Monitor monitor = context.getMonitor();
+
     // Create the GoogleCredentialFactory with the given {@link AppCredentials}.
     GoogleCredentialFactory credentialFactory =
-            new GoogleCredentialFactory(httpTransport, jsonFactory, appCredentials);
+            new GoogleCredentialFactory(httpTransport, jsonFactory, appCredentials, monitor);
 
-    Monitor monitor = context.getMonitor();
 
     ImmutableMap.Builder<String, Importer> importerBuilder = ImmutableMap.builder();
     importerBuilder.put("BLOBS", new DriveImporter(credentialFactory, jobStore, monitor));

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/retry/RetryingCallable.java
Patch:
@@ -71,7 +71,7 @@ public T call() throws RetryException {
         // TODO: do we want to reset anything (eg, number of retries) if we see a different
         // RetryStrategy?
         RetryStrategy strategy = retryStrategyLibrary.checkoutRetryStrategy(e);
-        monitor.info(
+        monitor.debug(
             () ->
                 String.format(
                     "Attempt %d failed, using retry strategy: %s",

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporterTest.java
Patch:
@@ -86,7 +86,7 @@ public class FlickrPhotosImporterTest {
   private Monitor monitor = mock(Monitor.class);
 
   @Test
-  public void importStoresAlbumInJobStore() throws FlickrException, IOException {
+  public void importStoresAlbumInJobStore() throws FlickrException, Exception {
     UUID jobId = UUID.randomUUID();
 
     PhotosContainerResource photosContainerResource =

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/blogger/GoogleBloggerImporter.java
Patch:
@@ -104,7 +104,7 @@ private void insertActivity(
       ASObject asObject,
       String blogId,
       TokensAndUrlAuthData authData)
-      throws IOException {
+      throws Exception {
     String content = asObject.content() == null ? "" : asObject.contentString();
 
     if (content == null) {
@@ -130,7 +130,7 @@ private void insertActivity(
       for (LinkValue image : asObject.image()) {
         try {
           String newImgSrc =
-              idempotentExecutor.executeAndSwallowExceptions(
+              idempotentExecutor.executeAndSwallowIOExceptions(
                   image.toString(),
                   "Image",
                   () -> uploadImage((ASObject) image, driveInterface, folderId));
@@ -174,7 +174,7 @@ private void insertActivity(
       post.setPublished(new DateTime(asObject.published().getMillis()));
     }
 
-    idempotentExecutor.executeAndSwallowExceptions(
+    idempotentExecutor.executeAndSwallowIOExceptions(
         title,
         title,
         () -> getOrCreateBloggerService(authData).posts()

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/calendar/GoogleCalendarImporter.java
Patch:
@@ -95,15 +95,15 @@ static Event convertToGoogleCalendarEvent(CalendarEventModel eventModel) {
   public ImportResult importItem(UUID jobId,
       IdempotentImportExecutor idempotentExecutor,
       TokensAndUrlAuthData authData,
-      CalendarContainerResource data) throws IOException {
+      CalendarContainerResource data) throws Exception {
     for (CalendarModel calendarModel : data.getCalendars()) {
-      idempotentExecutor.executeAndSwallowExceptions(
+      idempotentExecutor.executeAndSwallowIOExceptions(
           calendarModel.getId(),
           calendarModel.getName(),
           () -> importSingleCalendar(authData, calendarModel));
     }
     for (CalendarEventModel eventModel : data.getEvents()) {
-      idempotentExecutor.executeAndSwallowExceptions(
+      idempotentExecutor.executeAndSwallowIOExceptions(
           Integer.toString(eventModel.hashCode()),
           eventModel.getNotes(),
           () -> importSingleEvent(idempotentExecutor, authData, eventModel));

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/contacts/GoogleContactsImporter.java
Patch:
@@ -204,15 +204,15 @@ private static boolean atLeastOneNamePresent(VCard vCard) {
   @Override
   public ImportResult importItem(UUID jobId,
       IdempotentImportExecutor idempotentExecutor,
-      TokensAndUrlAuthData authData, ContactsModelWrapper data) {
+      TokensAndUrlAuthData authData, ContactsModelWrapper data) throws Exception{
     JCardReader reader = new JCardReader(data.getVCards());
     try {
       // TODO(olsona): address any other problems that might arise in conversion
       List<VCard> vCardList = reader.readAll();
       PeopleService.People peopleService = getOrCreatePeopleService(authData).people();
       for (VCard vCard : vCardList) {
         Person person = convert(vCard);
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             vCard.toString(),
             vCard.getFormattedName().toString(),
             () -> peopleService.createContact(person).execute().toPrettyString());

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/drive/DriveImporter.java
Patch:
@@ -71,7 +71,7 @@ public ImportResult importItem(UUID jobId,
     // Uploads album metadata
     if (data.getFolders() != null && data.getFolders().size() > 0) {
       for (BlobbyStorageContainerResource folder : data.getFolders()) {
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             folder.getId(),
             folder.getName(),
             () -> importSingleFolder(
@@ -84,7 +84,7 @@ public ImportResult importItem(UUID jobId,
     // Uploads photos
     if (data.getFiles() != null && data.getFiles().size() > 0) {
       for (DigitalDocumentWrapper file : data.getFiles()) {
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             Integer.toString(file.hashCode()),
             file.getDtpDigitalDocument().getName(),
             () -> importSingleFile(jobId, driveInterface, file, parentId));

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporter.java
Patch:
@@ -76,7 +76,7 @@ public ImportResult importItem(
       UUID jobId,
       IdempotentImportExecutor idempotentImportExecutor,
       TokensAndUrlAuthData authData,
-      PhotosContainerResource data) throws IOException {
+      PhotosContainerResource data) throws Exception {
     if (data == null) {
       // Nothing to do
       return ImportResult.OK;
@@ -85,7 +85,7 @@ public ImportResult importItem(
     // Uploads album metadata
     if (data.getAlbums() != null && data.getAlbums().size() > 0) {
       for (PhotoAlbum album : data.getAlbums()) {
-        idempotentImportExecutor.executeAndSwallowExceptions(
+        idempotentImportExecutor.executeAndSwallowIOExceptions(
             album.getId(),
             album.getName(),
             () -> importSingleAlbum(authData, album)
@@ -96,7 +96,7 @@ public ImportResult importItem(
     // Uploads photos
     if (data.getPhotos() != null && data.getPhotos().size() > 0) {
       for (PhotoModel photo : data.getPhotos()) {
-        idempotentImportExecutor.executeAndSwallowExceptions(
+        idempotentImportExecutor.executeAndSwallowIOExceptions(
             photo.getDataId(),
             photo.getTitle(),
             () -> importSinglePhoto(jobId, authData, photo, idempotentImportExecutor));

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/calendar/GoogleCalendarImporterTest.java
Patch:
@@ -67,7 +67,7 @@ public void setup() {
   }
 
   @Test
-  public void importCalendarAndEvent() throws IOException {
+  public void importCalendarAndEvent() throws Exception {
     String modelCalendarId = "modelCalendarId";
     String googleCalendarId = "googleCalendarId";
     UUID jobId = UUID.randomUUID();

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/contacts/GoogleContactsImporterTest.java
Patch:
@@ -66,7 +66,7 @@ public void setup() throws IOException {
   }
 
   @Test
-  public void importFirstResources() throws IOException {
+  public void importFirstResources() throws Exception {
     // Set up: small number of VCards to be imported
     int numberOfVCards = 5;
     List<VCard> vCardList = new LinkedList<>();

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/mail/GoogleMailImporterTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() throws IOException {
   }
 
   @Test
-  public void importMessage() throws IOException {
+  public void importMessage() throws Exception {
     MailContainerResource resource =
         new MailContainerResource(null, Collections.singletonList(MESSAGE_MODEL));
 

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporterTest.java
Patch:
@@ -83,7 +83,7 @@ public void setUp() throws IOException {
   }
 
   @Test
-  public void exportAlbum() throws IOException {
+  public void exportAlbum() throws Exception {
     // Set up
     String albumName = "Album Name";
     String albumDescription = "Album description";
@@ -105,7 +105,7 @@ public void exportAlbum() throws IOException {
   }
 
   @Test
-  public void exportPhoto() throws IOException {
+  public void exportPhoto() throws Exception {
     // Set up
     PhotoModel photoModel = new PhotoModel(PHOTO_TITLE, IMG_URI, PHOTO_DESCRIPTION, JPEG_MEDIA_TYPE,
         "oldPhotoID", OLD_ALBUM_ID, false);

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/videos/GoogleVideosImporterTest.java
Patch:
@@ -53,7 +53,7 @@ public class GoogleVideosImporterTest {
   private InputStream inputStream;
 
   @Before
-  public void setUp() throws IOException {
+  public void setUp() throws Exception {
     googleVideosInterface = mock(GoogleVideosInterface.class);
 
     when(googleVideosInterface.uploadVideoContent(
@@ -76,7 +76,7 @@ public void setUp() throws IOException {
   }
 
   @Test
-  public void exportVideo() throws IOException {
+  public void exportVideo() throws Exception {
     // Set up
     VideoObject videoModel =
         new VideoObject(

File: extensions/data-transfer/portability-data-transfer-imgur/src/main/java/org/datatransferproject/datatransfer/imgur/photos/ImgurPhotosImporter.java
Patch:
@@ -80,14 +80,14 @@ public ImportResult importItem(
 
     // Import albums
     for (PhotoAlbum album : resource.getAlbums()) {
-      executor.executeAndSwallowExceptions(
+      executor.executeAndSwallowIOExceptions(
           album.getId(),
           album.getName(),
           () -> importAlbum(album, authData));
     }
     // Import photos
     for (PhotoModel photo : resource.getPhotos()) {
-      executor.executeAndSwallowExceptions(
+      executor.executeAndSwallowIOExceptions(
           photo.getDataId(),
           photo.getTitle(),
           () -> {

File: extensions/data-transfer/portability-data-transfer-mastodon/src/main/java/org/datatransferproject/transfer/mastodon/social/MastodonActivityImport.java
Patch:
@@ -60,7 +60,7 @@ public ImportResult importItem(UUID jobId,
         checkState(object instanceof ASObject, "%s isn't of expected type", object);
         ASObject asObject = (ASObject) object;
         if (asObject.objectTypeString().equals("note")) {
-          idempotentImportExecutor.executeAndSwallowExceptions(
+          idempotentImportExecutor.executeAndSwallowIOExceptions(
               asObject.id(),
               asObject.contentString(),
               () -> {

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -92,17 +92,17 @@ public ImportResult importItem(
       IdempotentImportExecutor idempotentImportExecutor,
       TokensAndUrlAuthData authData,
       PhotosContainerResource resource)
-      throws IOException {
+      throws Exception {
 
     for (PhotoAlbum album : resource.getAlbums()) {
       // Create a OneDrive folder and then save the id with the mapping data
-      idempotentImportExecutor.executeAndSwallowExceptions(
+      idempotentImportExecutor.executeAndSwallowIOExceptions(
           album.getId(), album.getName(), () -> createOneDriveFolder(album, authData));
     }
 
     for (PhotoModel photoModel : resource.getPhotos()) {
 
-      idempotentImportExecutor.executeAndSwallowExceptions(
+      idempotentImportExecutor.executeAndSwallowIOExceptions(
           Integer.toString(photoModel.hashCode()),
           photoModel.getTitle(),
           () -> {

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/datatransferproject/transfer/rememberthemilk/tasks/RememberTheMilkTasksImporter.java
Patch:
@@ -63,7 +63,7 @@ public ImportResult importItem(
       timeline = service.createTimeline();
 
       for (TaskListModel taskList : data.getLists()) {
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             taskList.getId(),
             taskList.getName(),
             () -> service.createTaskList(taskList.getName(), timeline).id
@@ -73,7 +73,7 @@ public ImportResult importItem(
       for (TaskModel task : data.getTasks()) {
         // Empty or blank tasks aren't valid in RTM
         if (!Strings.isNullOrEmpty(task.getText())) {
-          idempotentExecutor.executeAndSwallowExceptions(
+          idempotentExecutor.executeAndSwallowIOExceptions(
               Integer.toString(task.hashCode()),
               task.getText(),
               () -> {

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -80,17 +80,17 @@ public ImportResult importItem(
       UUID jobId,
       IdempotentImportExecutor idempotentExecutor,
       TokenSecretAuthData authData,
-      PhotosContainerResource data) {
+      PhotosContainerResource data) throws Exception {
     try {
       SmugMugInterface smugMugInterface = getOrCreateSmugMugInterface(authData);
       for (PhotoAlbum album : data.getAlbums()) {
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             album.getId(),
             album.getName(),
             () -> importSingleAlbum(album, smugMugInterface));
       }
       for (PhotoModel photo : data.getPhotos()) {
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             photo.getDataId(),
             photo.getTitle(),
             () -> importSinglePhoto(jobId, idempotentExecutor, photo, smugMugInterface));

File: extensions/data-transfer/portability-data-transfer-twitter/src/main/java/org/datatransferproject/transfer/twitter/TwitterPhotosImporter.java
Patch:
@@ -50,7 +50,7 @@ public ImportResult importItem(
       UUID jobId,
       IdempotentImportExecutor idempotentExecutor,
       TokenSecretAuthData authData,
-      PhotosContainerResource data) {
+      PhotosContainerResource data) throws Exception {
     Twitter twitterApi = TwitterApiWrapper.getInstance(appCredentials, authData);
     // Twitter doesn't support an 'Albums' concept, so that information is just lost.
 
@@ -61,7 +61,7 @@ public ImportResult importItem(
             new InputStreamContent(null, getImageAsStream(image.getFetchableUrl()));
         update.media(image.getTitle(), content.getInputStream());
 
-        idempotentExecutor.executeAndSwallowExceptions(
+        idempotentExecutor.executeAndSwallowIOExceptions(
             image.getDataId(),
             image.getTitle(),
             () -> twitterApi.tweets().updateStatus(update));

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/types/DestinationMemoryFullException.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 package org.datatransferproject.transfer;
-import java.io.IOException;	
+import org.datatransferproject.transfer.CopyException;
 
-public class DestinationMemoryFullException extends IOException {
+public class DestinationMemoryFullException extends CopyException {
   public DestinationMemoryFullException(String message, Throwable cause) {
     super(message, cause);
   }

File: portability-test-utilities/src/main/java/org/datatransferproject/test/types/FakeIdempotentImportExecutor.java
Patch:
@@ -16,8 +16,8 @@ public class FakeIdempotentImportExecutor implements IdempotentImportExecutor {
   private HashMap<String, Serializable> knownValues = new HashMap<>();
 
   @Override
-  public <T extends Serializable> T executeAndSwallowExceptions(
-      String idempotentId, String itemName, Callable<T> callable) {
+  public <T extends Serializable> T executeAndSwallowIOExceptions(
+      String idempotentId, String itemName, Callable<T> callable) throws Exception {
     try {
       return executeOrThrowException(idempotentId, itemName, callable);
     } catch (IOException e) {
@@ -27,7 +27,7 @@ public <T extends Serializable> T executeAndSwallowExceptions(
 
   @Override
   public <T extends Serializable> T executeOrThrowException(
-      String idempotentId, String itemName, Callable<T> callable) throws IOException {
+      String idempotentId, String itemName, Callable<T> callable) throws Exception {
     if (knownValues.containsKey(idempotentId)) {
       System.out.println("Using cached key " + idempotentId + " from cache");
       return (T) knownValues.get(idempotentId);

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/MicrosoftTransferExtension.java
Patch:
@@ -62,7 +62,7 @@ public String getServiceId() {
 
   @Override
   public Exporter<?, ?> getExporter(String transferDataType) {
-    Preconditions.checkArgument(initialized);
+    Preconditions.checkState(initialized);
 
     if (!offlineData && transferDataType.equals(OFFLINE_DATA)) {
       // only enable if derived data explicitly set as a configuration value
@@ -77,7 +77,7 @@ public String getServiceId() {
 
   @Override
   public Importer<?, ?> getImporter(String transferDataType) {
-    Preconditions.checkArgument(initialized);
+    Preconditions.checkState(initialized);
     Preconditions.checkArgument(SUPPORTED_IMPORT_SERVICES.contains(transferDataType));
     return importerMap.get(transferDataType);
   }

File: extensions/auth/portability-auth-microsoft/src/main/java/org/datatransferproject/auth/microsoft/MicrosoftOAuthConfig.java
Patch:
@@ -45,6 +45,7 @@ public Map<String, Set<String>> getExportScopes() {
         .put("MAIL", ImmutableSet.of("user.read", "Mail.Read"))
         .put("CONTACTS", ImmutableSet.of("user.read", "Contacts.Read"))
         .put("CALENDAR", ImmutableSet.of("user.read", "Calendars.Read"))
+        .put("PHOTOS", ImmutableSet.of("user.read", "Files.Read"))
         .build();
   }
 
@@ -54,6 +55,7 @@ public Map<String, Set<String>> getImportScopes() {
         .put("MAIL", ImmutableSet.of("user.read", "Mail.ReadWrite"))
         .put("CONTACTS", ImmutableSet.of("user.read", "Contacts.ReadWrite"))
         .put("CALENDAR", ImmutableSet.of("user.read", "Calendars.ReadWrite"))
+        .put("PHOTOS", ImmutableSet.of("user.read", "Files.ReadWrite"))
         .build();
   }
 }

File: extensions/auth/portability-auth-microsoft/src/main/java/org/datatransferproject/auth/microsoft/MicrosoftOAuthConfig.java
Patch:
@@ -45,6 +45,7 @@ public Map<String, Set<String>> getExportScopes() {
         .put("MAIL", ImmutableSet.of("user.read", "Mail.Read"))
         .put("CONTACTS", ImmutableSet.of("user.read", "Contacts.Read"))
         .put("CALENDAR", ImmutableSet.of("user.read", "Calendars.Read"))
+        .put("PHOTOS", ImmutableSet.of("user.read", "Files.Read"))
         .build();
   }
 
@@ -54,6 +55,7 @@ public Map<String, Set<String>> getImportScopes() {
         .put("MAIL", ImmutableSet.of("user.read", "Mail.ReadWrite"))
         .put("CONTACTS", ImmutableSet.of("user.read", "Contacts.ReadWrite"))
         .put("CALENDAR", ImmutableSet.of("user.read", "Calendars.ReadWrite"))
+        .put("PHOTOS", ImmutableSet.of("user.read", "Files.ReadWrite"))
         .build();
   }
 }

File: extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java
Patch:
@@ -117,7 +117,8 @@ public void addErrorsToJob(UUID jobId, Collection<ErrorDetail> errors) throws IO
     // This is a no-op currently as nothing in DTP reads the errors currently.
     if (errors != null && !errors.isEmpty()) {
       for (ErrorDetail error : errors) {
-        monitor.info(() -> "Added error: %s", OBJECT_MAPPER.writeValueAsString(error));
+        String errorString = OBJECT_MAPPER.writeValueAsString(error);
+        monitor.info(() -> "Added error: " + errorString);
       }
     }
   }

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistExporter.java
Patch:
@@ -17,6 +17,8 @@
 package org.datatransferproject.transfer.deezer.playlists;
 
 
+import static java.lang.String.format;
+
 import com.google.api.client.http.HttpTransport;
 import com.google.common.collect.ImmutableList;
 import org.datatransferproject.api.launcher.Monitor;
@@ -88,7 +90,7 @@ private ImmutableList<MusicRecording> fetchPlaylist(DeezerApi api, long playlist
 
     ImmutableList.Builder<MusicRecording> results = new ImmutableList.Builder<>();
 
-      monitor.debug(() -> "Fetching playlist's %s tracks", playlistId);
+      monitor.debug(() -> format("Fetching playlist's %s tracks", playlistId));
       PlaylistDetails playlistDetails = api.getPlaylistDetails(playlistId);
       for (Track track : playlistDetails.getTrackCollection().getTracks()) {
         results.add(convertTrack(api, track.getId()));

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistImporter.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.UUID;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static java.lang.String.format;
 
 /**
  * Imports playlists into Deezer.
@@ -84,7 +85,7 @@ private void createPlaylist(
         playlist.getHeadline(),
         () -> createPlaylist(api, playlist));
     if (null == newPlaylistId) {
-      monitor.severe(() ->"Couldn't create playlist: %s", playlist);
+      monitor.severe(() -> format("Couldn't create playlist: %s", playlist));
       // Playlist couldn't be created error will be reported to user.
       return;
     }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobPollingService.java
Patch:
@@ -127,7 +127,7 @@ private void pollForUnassignedJob() {
     UUID jobId = store.findFirst(JobAuthorization.State.CREDS_AVAILABLE);
     monitor.debug(() -> "Polling for a job in state CREDS_AVAILABLE");
     if (jobId == null) {
-      monitor.debug(() -> format("Did not find job after polling"));
+      monitor.debug(() -> "Did not find job after polling");
       return;
     }
     monitor.debug(() -> format("Found job %s", jobId));

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -157,7 +157,7 @@ private void markJobFinished(UUID jobId, boolean success, Collection<ErrorDetail
       store.addErrorsToJob(jobId, errors);
     } catch (IOException | RuntimeException e) {
       success = false;
-      monitor.severe(() -> "Problem adding errors to JobStore: %s", e);
+      monitor.severe(() -> format("Problem adding errors to JobStore: %s", e), e);
     }
     State state = success ? State.COMPLETE : State.ERROR;
     updateJobState(jobId, state, State.IN_PROGRESS, JobAuthorization.State.CREDS_STORED);

File: portability-transfer/src/main/java/org/datatransferproject/transfer/PortabilityInMemoryDataCopier.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.datatransferproject.transfer;
 
+import static java.lang.String.format;
+
 import com.google.common.base.Stopwatch;
 import com.google.inject.Provider;
 import org.datatransferproject.api.launcher.DtpInternalMetricRecorder;
@@ -156,7 +158,7 @@ private Collection<ErrorDetail> copyHelper(
         ImportResult importResult = retryingImporter.call();
         importSuccess = importResult.getType() == ImportResult.ResultType.OK;
       } catch (RetryException | RuntimeException e) {
-        monitor.severe(() -> "Got error importing data: %s", e);
+        monitor.severe(() -> format("Got error importing data: %s", e), e);
       } finally{
         metricRecorder.importPageFinished(
             JobMetadata.getDataType(),

File: extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java
Patch:
@@ -117,7 +117,8 @@ public void addErrorsToJob(UUID jobId, Collection<ErrorDetail> errors) throws IO
     // This is a no-op currently as nothing in DTP reads the errors currently.
     if (errors != null && !errors.isEmpty()) {
       for (ErrorDetail error : errors) {
-        monitor.info(() -> "Added error: %s", OBJECT_MAPPER.writeValueAsString(error));
+        String errorString = OBJECT_MAPPER.writeValueAsString(error);
+        monitor.info(() -> "Added error: " + errorString);
       }
     }
   }

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistExporter.java
Patch:
@@ -17,6 +17,8 @@
 package org.datatransferproject.transfer.deezer.playlists;
 
 
+import static java.lang.String.format;
+
 import com.google.api.client.http.HttpTransport;
 import com.google.common.collect.ImmutableList;
 import org.datatransferproject.api.launcher.Monitor;
@@ -88,7 +90,7 @@ private ImmutableList<MusicRecording> fetchPlaylist(DeezerApi api, long playlist
 
     ImmutableList.Builder<MusicRecording> results = new ImmutableList.Builder<>();
 
-      monitor.debug(() -> "Fetching playlist's %s tracks", playlistId);
+      monitor.debug(() -> format("Fetching playlist's %s tracks", playlistId));
       PlaylistDetails playlistDetails = api.getPlaylistDetails(playlistId);
       for (Track track : playlistDetails.getTrackCollection().getTracks()) {
         results.add(convertTrack(api, track.getId()));

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistImporter.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.UUID;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static java.lang.String.format;
 
 /**
  * Imports playlists into Deezer.
@@ -84,7 +85,7 @@ private void createPlaylist(
         playlist.getHeadline(),
         () -> createPlaylist(api, playlist));
     if (null == newPlaylistId) {
-      monitor.severe(() ->"Couldn't create playlist: %s", playlist);
+      monitor.severe(() -> format("Couldn't create playlist: %s", playlist));
       // Playlist couldn't be created error will be reported to user.
       return;
     }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobPollingService.java
Patch:
@@ -127,7 +127,7 @@ private void pollForUnassignedJob() {
     UUID jobId = store.findFirst(JobAuthorization.State.CREDS_AVAILABLE);
     monitor.debug(() -> "Polling for a job in state CREDS_AVAILABLE");
     if (jobId == null) {
-      monitor.debug(() -> format("Did not find job after polling"));
+      monitor.debug(() -> "Did not find job after polling");
       return;
     }
     monitor.debug(() -> format("Found job %s", jobId));

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -155,7 +155,7 @@ private void markJobFinished(UUID jobId, boolean success, Collection<ErrorDetail
       store.addErrorsToJob(jobId, errors);
     } catch (IOException | RuntimeException e) {
       success = false;
-      monitor.severe(() -> "Problem adding errors to JobStore: %s", e);
+      monitor.severe(() -> format("Problem adding errors to JobStore: %s", e), e);
     }
     State state = success ? State.COMPLETE : State.ERROR;
     updateJobState(jobId, state, State.IN_PROGRESS, JobAuthorization.State.CREDS_STORED);

File: portability-transfer/src/main/java/org/datatransferproject/transfer/PortabilityInMemoryDataCopier.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.datatransferproject.transfer;
 
+import static java.lang.String.format;
+
 import com.google.common.base.Stopwatch;
 import com.google.inject.Provider;
 import org.datatransferproject.api.launcher.DtpInternalMetricRecorder;
@@ -156,7 +158,7 @@ private Collection<ErrorDetail> copyHelper(
         ImportResult importResult = retryingImporter.call();
         importSuccess = importResult.getType() == ImportResult.ResultType.OK;
       } catch (RetryException | RuntimeException e) {
-        monitor.severe(() -> "Got error importing data: %s", e);
+        monitor.severe(() -> format("Got error importing data: %s", e), e);
       } finally{
         metricRecorder.importPageFinished(
             JobMetadata.getDataType(),

File: extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java
Patch:
@@ -117,7 +117,8 @@ public void addErrorsToJob(UUID jobId, Collection<ErrorDetail> errors) throws IO
     // This is a no-op currently as nothing in DTP reads the errors currently.
     if (errors != null && !errors.isEmpty()) {
       for (ErrorDetail error : errors) {
-        monitor.info(() -> "Added error: %s", OBJECT_MAPPER.writeValueAsString(error));
+        String errorString = OBJECT_MAPPER.writeValueAsString(error);
+        monitor.info(() -> "Added error: " + errorString);
       }
     }
   }

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistExporter.java
Patch:
@@ -17,6 +17,8 @@
 package org.datatransferproject.transfer.deezer.playlists;
 
 
+import static java.lang.String.format;
+
 import com.google.api.client.http.HttpTransport;
 import com.google.common.collect.ImmutableList;
 import org.datatransferproject.api.launcher.Monitor;
@@ -88,7 +90,7 @@ private ImmutableList<MusicRecording> fetchPlaylist(DeezerApi api, long playlist
 
     ImmutableList.Builder<MusicRecording> results = new ImmutableList.Builder<>();
 
-      monitor.debug(() -> "Fetching playlist's %s tracks", playlistId);
+      monitor.debug(() -> format("Fetching playlist's %s tracks", playlistId));
       PlaylistDetails playlistDetails = api.getPlaylistDetails(playlistId);
       for (Track track : playlistDetails.getTrackCollection().getTracks()) {
         results.add(convertTrack(api, track.getId()));

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistImporter.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.UUID;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static java.lang.String.format;
 
 /**
  * Imports playlists into Deezer.
@@ -84,7 +85,7 @@ private void createPlaylist(
         playlist.getHeadline(),
         () -> createPlaylist(api, playlist));
     if (null == newPlaylistId) {
-      monitor.severe(() ->"Couldn't create playlist: %s", playlist);
+      monitor.severe(() -> format("Couldn't create playlist: %s", playlist));
       // Playlist couldn't be created error will be reported to user.
       return;
     }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobPollingService.java
Patch:
@@ -127,7 +127,7 @@ private void pollForUnassignedJob() {
     UUID jobId = store.findFirst(JobAuthorization.State.CREDS_AVAILABLE);
     monitor.debug(() -> "Polling for a job in state CREDS_AVAILABLE");
     if (jobId == null) {
-      monitor.debug(() -> format("Did not find job after polling"));
+      monitor.debug(() -> "Did not find job after polling");
       return;
     }
     monitor.debug(() -> format("Found job %s", jobId));

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -155,7 +155,7 @@ private void markJobFinished(UUID jobId, boolean success, Collection<ErrorDetail
       store.addErrorsToJob(jobId, errors);
     } catch (IOException | RuntimeException e) {
       success = false;
-      monitor.severe(() -> "Problem adding errors to JobStore: %s", e);
+      monitor.severe(() -> format("Problem adding errors to JobStore: %s", e), e);
     }
     State state = success ? State.COMPLETE : State.ERROR;
     updateJobState(jobId, state, State.IN_PROGRESS, JobAuthorization.State.CREDS_STORED);

File: portability-transfer/src/main/java/org/datatransferproject/transfer/PortabilityInMemoryDataCopier.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.datatransferproject.transfer;
 
+import static java.lang.String.format;
+
 import com.google.common.base.Stopwatch;
 import com.google.inject.Provider;
 import org.datatransferproject.api.launcher.DtpInternalMetricRecorder;
@@ -156,7 +158,7 @@ private Collection<ErrorDetail> copyHelper(
         ImportResult importResult = retryingImporter.call();
         importSuccess = importResult.getType() == ImportResult.ResultType.OK;
       } catch (RetryException | RuntimeException e) {
-        monitor.severe(() -> "Got error importing data: %s", e);
+        monitor.severe(() -> format("Got error importing data: %s", e), e);
       } finally{
         metricRecorder.importPageFinished(
             JobMetadata.getDataType(),

File: extensions/security/portability-security-cleartext/src/main/java/org/datatransferproject/security/cleartext/ClearTextAuthDataDecryptService.java
Patch:
@@ -36,7 +36,7 @@ public boolean canHandle(String scheme) {
   }
 
   @Override
-  public AuthDataPair decrypt(String encrypted, PrivateKey privateKey) {
+  public AuthDataPair decrypt(String encrypted, /* unused */ byte[] encodedPrivateKey) {
     try {
       return objectMapper.readValue(encrypted, AuthDataPair.class);
     } catch (IOException e) {

File: extensions/security/portability-security-cleartext/src/main/java/org/datatransferproject/security/cleartext/ClearTextPublicKeySerializer.java
Patch:
@@ -30,7 +30,7 @@ public boolean canHandle(String scheme) {
   }
 
   @Override
-  public String serialize(PublicKey publicKey) throws SecurityException {
-    return BaseEncoding.base64().encode(publicKey.getEncoded());
+  public String serialize(byte[] encodedPublicKey) throws SecurityException {
+    return BaseEncoding.base64().encode(encodedPublicKey);
   }
 }

File: extensions/security/portability-security-cleartext/src/main/java/org/datatransferproject/security/cleartext/ClearTextSecurityExtension.java
Patch:
@@ -37,7 +37,7 @@ public void initialize(ExtensionContext context) {
 
   @Override
   public TransferKeyGenerator getTransferKeyGenerator() {
-    return new ClearTextSymmetricKeyGenerator(monitor);
+    return new ClearTextKeyGenerator(monitor);
   }
 
   @Override

File: extensions/security/portability-security-jwe/src/main/java/org/datatransferproject/security/jwe/JWESecurityExtension.java
Patch:
@@ -48,6 +48,6 @@ public AuthDataDecryptService getDecryptService() {
 
   @Override
   public TransferKeyGenerator getTransferKeyGenerator() {
-    return new JWESymmetricKeyGenerator(monitor);
+    return new JWEKeyGenerator(monitor);
   }
 }

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/security/AuthDataDecryptService.java
Patch:
@@ -26,5 +26,5 @@ public interface AuthDataDecryptService {
   boolean canHandle(String scheme);
 
   /** Decrypts the data using the provided private key. */
-  AuthDataPair decrypt(String encrypted, PrivateKey privateKey) throws SecurityException;
+  AuthDataPair decrypt(String encrypted, byte[] encodedPrivateKey) throws SecurityException;
 }

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/security/PublicKeySerializer.java
Patch:
@@ -22,5 +22,5 @@ public interface PublicKeySerializer {
 
   boolean canHandle(String scheme);
 
-  String serialize(PublicKey publicKey) throws SecurityException;
+  String serialize(byte[] encodedPublicKey) throws SecurityException;
 }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -106,8 +106,8 @@ void processJob() {
       }
 
       String encrypted = jobAuthorization.encryptedAuthData();
-      PrivateKey privateKey = JobMetadata.getPrivateKey();
-      AuthDataPair pair = decryptService.decrypt(encrypted, privateKey);
+      byte[] encodedPrivateKey = JobMetadata.getPrivateKey();
+      AuthDataPair pair = decryptService.decrypt(encrypted, encodedPrivateKey);
       AuthData exportAuthData = objectMapper.readValue(pair.getExportAuthData(), AuthData.class);
       AuthData importAuthData = objectMapper.readValue(pair.getImportAuthData(), AuthData.class);
 

File: portability-transfer/src/test/java/org/datatransferproject/transfer/JobPollingServiceTest.java
Patch:
@@ -131,12 +131,11 @@ public String serialize(PublicKey publicKey) throws SecurityException {
           }
         };
     Scheduler scheduler = Scheduler.newFixedDelaySchedule(0, 20, TimeUnit.SECONDS);
-    Set<PublicKeySerializer> serializers = Collections.singleton(serializer);
     Monitor monitor = new Monitor() {};
     ExtensionContext extensionContext = mock(ExtensionContext.class);
     when(extensionContext.getSetting("credTimeoutSeconds", 300)).thenReturn(300);
     jobPollingService =
-        new JobPollingService(store, asymmetricKeyGenerator, serializers, scheduler, monitor, extensionContext);
+        new JobPollingService(store, asymmetricKeyGenerator, serializer, scheduler, monitor, extensionContext);
   }
 
   // TODO(data-transfer-project/issues/43): Make this an integration test which uses both the API

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobCancelWatchingService.java
Patch:
@@ -48,7 +48,7 @@ protected void runOneIteration() {
     monitor.debug(() -> "polling for job to check cancellation");
     PortabilityJob currentJob = store.findJob(JobMetadata.getJobId());
     boolean isCanceled = currentJob.state() == PortabilityJob.State.CANCELED;
-    monitor.debug(() -> "Job %s is canceled: %s", JobMetadata.getJobId(), isCanceled);
+    monitor.debug(() -> String.format("Job %s is canceled: %s", JobMetadata.getJobId(), isCanceled));
     if (isCanceled) {
       System.exit(-1);
     }

File: extensions/cloud/portability-cloud-google/src/main/java/org/datatransferproject/cloud/google/GoogleJobStore.java
Patch:
@@ -203,6 +203,7 @@ public void addErrorsToJob(UUID jobId, Collection<ErrorDetail> errors) throws IO
           key,
           ImmutableMap.of(
               JSON_DATA_FIELD,
+              // TODO: encrypt this data
               objectMapper.writeValueAsString(errorDetail)))
           .build());
     }

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/errors/ErrorDetail.java
Patch:
@@ -46,7 +46,7 @@ public static ErrorDetail.Builder builder() {
   public abstract String title();
 
   @JsonProperty("exception")
-  public abstract Exception exception();
+  public abstract String exception();
 
   @AutoValue.Builder
   public abstract static class Builder {
@@ -64,6 +64,6 @@ private static ErrorDetail.Builder create() {
     public abstract Builder setTitle(String title);
 
     @JsonProperty("exception")
-    public abstract Builder setException(Exception e);
+    public abstract Builder setException(String exception);
   }
 }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/blogger/GoogleBloggerImporter.java
Patch:
@@ -123,14 +123,14 @@ private void insertActivity(
     if (asObject.firstImage() != null) {
       // Store any attached images in Drive in a new folder.
       Drive driveInterface = getOrCreateDriveService(authData);
-      String folderId = idempotentExecutor.execute(
+      String folderId = idempotentExecutor.executeOrThrowException(
           "MainAlbum",
           "Photo Album",
           () -> createAlbumFolder(driveInterface));
       for (LinkValue image : asObject.image()) {
         try {
           String newImgSrc =
-              idempotentExecutor.execute(
+              idempotentExecutor.executeAndSwallowExceptions(
                   image.toString(),
                   "Image",
                   () -> uploadImage((ASObject) image, driveInterface, folderId));
@@ -174,7 +174,7 @@ private void insertActivity(
       post.setPublished(new DateTime(asObject.published().getMillis()));
     }
 
-    idempotentExecutor.execute(
+    idempotentExecutor.executeAndSwallowExceptions(
         title,
         title,
         () -> getOrCreateBloggerService(authData).posts()

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/contacts/GoogleContactsImporter.java
Patch:
@@ -212,7 +212,7 @@ public ImportResult importItem(UUID jobId,
       PeopleService.People peopleService = getOrCreatePeopleService(authData).people();
       for (VCard vCard : vCardList) {
         Person person = convert(vCard);
-        idempotentExecutor.execute(
+        idempotentExecutor.executeAndSwallowExceptions(
             vCard.toString(),
             vCard.getFormattedName().toString(),
             () -> peopleService.createContact(person).execute().toPrettyString());

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/drive/DriveImporter.java
Patch:
@@ -56,7 +56,7 @@ public ImportResult importItem(UUID jobId,
     // Let the parent ID be empty for the root level
     if (Strings.isNullOrEmpty(data.getId()) || "root".equals(data.getId())) {
       parentId =
-          idempotentExecutor.execute(
+          idempotentExecutor.executeOrThrowException(
               ROOT_FOLDER_ID,
               data.getName(),
               () ->importSingleFolder(
@@ -71,7 +71,7 @@ public ImportResult importItem(UUID jobId,
     // Uploads album metadata
     if (data.getFolders() != null && data.getFolders().size() > 0) {
       for (BlobbyStorageContainerResource folder : data.getFolders()) {
-        idempotentExecutor.execute(
+        idempotentExecutor.executeAndSwallowExceptions(
             folder.getId(),
             folder.getName(),
             () -> importSingleFolder(
@@ -84,7 +84,7 @@ public ImportResult importItem(UUID jobId,
     // Uploads photos
     if (data.getFiles() != null && data.getFiles().size() > 0) {
       for (DigitalDocumentWrapper file : data.getFiles()) {
-        idempotentExecutor.execute(
+        idempotentExecutor.executeAndSwallowExceptions(
             Integer.toString(file.hashCode()),
             file.getDtpDigitalDocument().getName(),
             () -> importSingleFile(jobId, driveInterface, file, parentId));

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/videos/GoogleVideosImporter.java
Patch:
@@ -134,7 +134,7 @@ void importSingleVideo(
     NewMediaItemUpload uploadItem =
             new NewMediaItemUpload(null, Collections.singletonList(newMediaItem));
 
-    executor.execute(
+    executor.executeAndSwallowExceptions(
             inputVideo.getDataId(),
             inputVideo.getName(),
             () -> getOrCreateVideosInterface(authData).createVideo(uploadItem));

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosImporterTest.java
Patch:
@@ -110,7 +110,7 @@ public void exportPhoto() throws IOException {
     PhotoModel photoModel = new PhotoModel(PHOTO_TITLE, IMG_URI, PHOTO_DESCRIPTION, JPEG_MEDIA_TYPE,
         "oldPhotoID", OLD_ALBUM_ID, false);
 
-    executor.execute(OLD_ALBUM_ID, OLD_ALBUM_ID, () -> NEW_ALBUM_ID);
+    executor.executeOrThrowException(OLD_ALBUM_ID, OLD_ALBUM_ID, () -> NEW_ALBUM_ID);
 
     NewMediaItemResult newMediaItemResult = Mockito.mock(NewMediaItemResult.class);
     GoogleMediaItem googleMediaItem = new GoogleMediaItem();

File: extensions/data-transfer/portability-data-transfer-mastodon/src/main/java/org/datatransferproject/transfer/mastodon/social/MastodonActivityImport.java
Patch:
@@ -60,7 +60,7 @@ public ImportResult importItem(UUID jobId,
         checkState(object instanceof ASObject, "%s isn't of expected type", object);
         ASObject asObject = (ASObject) object;
         if (asObject.objectTypeString().equals("note")) {
-          idempotentImportExecutor.execute(
+          idempotentImportExecutor.executeAndSwallowExceptions(
               asObject.id(),
               asObject.contentString(),
               () -> {

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/calendar/MicrosoftCalendarImporter.java
Patch:
@@ -74,7 +74,7 @@ public ImportResult importItem(
       CalendarContainerResource data) throws IOException {
 
     for (CalendarModel calendar : data.getCalendars()) {
-      idempotentImportExecutor.execute(calendar.getId(),
+      idempotentImportExecutor.executeAndSwallowExceptions(calendar.getId(),
           calendar.getName(),
           () -> importCalendar(authData, calendar));
     }

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -84,13 +84,13 @@ public ImportResult importItem(
     try {
       SmugMugInterface smugMugInterface = getOrCreateSmugMugInterface(authData);
       for (PhotoAlbum album : data.getAlbums()) {
-        idempotentExecutor.execute(
+        idempotentExecutor.executeAndSwallowExceptions(
             album.getId(),
             album.getName(),
             () -> importSingleAlbum(album, smugMugInterface));
       }
       for (PhotoModel photo : data.getPhotos()) {
-        idempotentExecutor.execute(
+        idempotentExecutor.executeAndSwallowExceptions(
             photo.getDataId(),
             photo.getTitle(),
             () -> importSinglePhoto(jobId, idempotentExecutor, photo, smugMugInterface));

File: extensions/data-transfer/portability-data-transfer-twitter/src/main/java/org/datatransferproject/transfer/twitter/TwitterPhotosImporter.java
Patch:
@@ -61,7 +61,7 @@ public ImportResult importItem(
             new InputStreamContent(null, getImageAsStream(image.getFetchableUrl()));
         update.media(image.getTitle(), content.getInputStream());
 
-        idempotentExecutor.execute(
+        idempotentExecutor.executeAndSwallowExceptions(
             image.getDataId(),
             image.getTitle(),
             () -> twitterApi.tweets().updateStatus(update));

File: portability-spi-cloud/src/main/java/org/datatransferproject/spi/cloud/types/PortabilityJob.java
Patch:
@@ -38,6 +38,7 @@ public abstract class PortabilityJob {
   private static final String EXPORT_ENCRYPTED_INITIAL_AUTH_DATA =
       "EXPORT_ENCRYPTED_INITIAL_AUTH_DATA";
   private static final String JOB_STATE = "JOB_STATE";
+  private static final String NUMBER_OF_FAILED_FILES_KEY = "NUM_FAILED_FILES";
 
   public static PortabilityJob.Builder builder() {
     LocalDateTime now = LocalDateTime.now();

File: portability-transfer/src/main/java/org/datatransferproject/transfer/InMemoryDataCopier.java
Patch:
@@ -17,15 +17,17 @@
 
 import org.datatransferproject.types.common.ExportInformation;
 import org.datatransferproject.types.transfer.auth.AuthData;
+import org.datatransferproject.types.transfer.errors.ErrorDetail;
 
 import java.io.IOException;
+import java.util.Collection;
 import java.util.Optional;
 import java.util.UUID;
 
 /** In-memory Copier interface */
 public interface InMemoryDataCopier {
   /* Copies the provided dataType from exportService to importService */
-  void copy(
+  Collection<ErrorDetail> copy(
           AuthData exportAuthData,
           AuthData importAuthData,
           UUID jobId, Optional<ExportInformation> exportInfo)

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobProcessor.java
Patch:
@@ -28,7 +28,6 @@
 import org.datatransferproject.spi.cloud.types.PortabilityJob.State;
 import org.datatransferproject.spi.transfer.hooks.JobHooks;
 import org.datatransferproject.spi.transfer.security.AuthDataDecryptService;
-import org.datatransferproject.spi.transfer.security.SecurityException;
 import org.datatransferproject.types.common.ExportInformation;
 import org.datatransferproject.types.transfer.auth.AuthData;
 import org.datatransferproject.types.transfer.auth.AuthDataPair;
@@ -122,7 +121,7 @@ void processJob() {
       copier.copy(exportAuthData, importAuthData, jobId, exportInfo);
       monitor.debug(() -> "Finished copy for jobId: " + jobId);
       success = true;
-    } catch (IOException | SecurityException | CopyException e) {
+    } catch (IOException | CopyException | RuntimeException e) {
       monitor.severe(() -> "Error processing jobId: " + jobId, e, EventCode.WORKER_JOB_ERRORED);
     } finally {
       monitor.debug(() -> "Finished processing jobId: " + jobId, EventCode.WORKER_JOB_FINISHED);

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerModule.java
Patch:
@@ -230,7 +230,7 @@ private TransferServiceConfig getTransferServiceConfig(TransferExtension ext) {
       try {
         return TransferServiceConfig.create(inputStream);
       } catch (IOException e) {
-        throw new RuntimeException("Couldn't create config for" + ext.getServiceId(), e);
+        throw new RuntimeException("Couldn't create config for " + ext.getServiceId(), e);
       }
     }
   }

File: extensions/data-transfer/portability-data-transfer-imgur/src/main/java/org/datatransferproject/datatransfer/imgur/ImgurTransferExtension.java
Patch:
@@ -33,7 +33,7 @@
 /** Extension for transferring Imgur data */
 public class ImgurTransferExtension implements TransferExtension {
   private static final String SERVICE_ID = "Imgur";
-  public static final String BASE_URL = "https://api.imgur.com/3";
+  private static final String BASE_URL = "https://api.imgur.com/3";
 
   private boolean initialized = false;
 
@@ -55,8 +55,8 @@ public void initialize(ExtensionContext context) {
     OkHttpClient client = context.getService(OkHttpClient.class);
     TemporaryPerJobDataStore jobStore = context.getService(TemporaryPerJobDataStore.class);
 
-    exporter = new ImgurPhotosExporter(monitor, client, mapper, jobStore);
-    importer = new ImgurPhotosImporter(monitor, client, mapper, jobStore);
+    exporter = new ImgurPhotosExporter(monitor, client, mapper, jobStore, BASE_URL);
+    importer = new ImgurPhotosImporter(monitor, client, mapper, jobStore, BASE_URL);
 
     initialized = true;
   }

File: portability-api/src/main/java/org/datatransferproject/api/ApiMain.java
Patch:
@@ -38,6 +38,7 @@
 import org.datatransferproject.spi.cloud.extension.CloudExtension;
 import org.datatransferproject.spi.cloud.storage.AppCredentialStore;
 import org.datatransferproject.spi.cloud.storage.JobStore;
+import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.service.extension.ServiceExtension;
 import org.datatransferproject.types.transfer.auth.TokenAuthData;
 import org.datatransferproject.types.transfer.auth.TokenSecretAuthData;
@@ -130,6 +131,7 @@ public void initializeHttps(
     // Needed for GoogleAuthServiceExtension
     extensionContext.registerService(HttpTransport.class, new NetHttpTransport());
     extensionContext.registerService(JobStore.class, cloudExtension.getJobStore());
+    extensionContext.registerService(TemporaryPerJobDataStore.class, cloudExtension.getJobStore());
     extensionContext.registerService(
         AppCredentialStore.class, cloudExtension.getAppCredentialStore());
 

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerMain.java
Patch:
@@ -34,6 +34,7 @@
 import org.datatransferproject.spi.cloud.extension.CloudExtension;
 import org.datatransferproject.spi.cloud.storage.AppCredentialStore;
 import org.datatransferproject.spi.cloud.storage.JobStore;
+import org.datatransferproject.spi.cloud.storage.TemporaryPerJobDataStore;
 import org.datatransferproject.spi.service.extension.ServiceExtension;
 import org.datatransferproject.spi.transfer.extension.TransferExtension;
 import org.datatransferproject.spi.transfer.hooks.JobHooks;
@@ -94,6 +95,7 @@ public void initialize() {
 
     JobStore jobStore = cloudExtension.getJobStore();
     extensionContext.registerService(JobStore.class, jobStore);
+    extensionContext.registerService(TemporaryPerJobDataStore.class, jobStore);
 
     AppCredentialStore appCredentialStore = cloudExtension.getAppCredentialStore();
     extensionContext.registerService(AppCredentialStore.class, appCredentialStore);

File: extensions/transport/portability-transport-jettyrest/src/main/java/org/datatransferproject/transport/jettyrest/http/JettyMonitor.java
Patch:
@@ -24,7 +24,7 @@ public void warn(Throwable thrown) {
   }
 
   public void warn(String msg, Throwable thrown) {
-    DELEGATE.info(() -> msg, thrown);
+    DELEGATE.severe(() -> msg, thrown);
   }
 
   public void info(String msg, Object... args) {
@@ -60,7 +60,7 @@ public void debug(Throwable thrown) {
   }
 
   public void debug(String msg, Throwable thrown) {
-    DELEGATE.info(() -> msg, thrown);
+    DELEGATE.debug(() -> msg, thrown);
   }
 
   public Logger getLogger(String name) {

File: extensions/cloud/portability-cloud-google/src/test/java/org/datatransferproject/cloud/google/GoogleJobStoreTest.java
Patch:
@@ -19,8 +19,7 @@
 import static org.junit.Assert.assertEquals;
 
 import java.util.UUID;
-import org.datatransferproject.spi.transfer.types.TempCalendarData;
-import org.datatransferproject.spi.transfer.types.TempTasksData;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.runners.MockitoJUnitRunner;

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/model/InsertResponse.java
Patch:
@@ -1,6 +1,8 @@
 package org.datatransferproject.transfer.deezer.model;
 
-public class InsertResponse {
+import java.io.Serializable;
+
+public class InsertResponse implements Serializable {
   private long id;
   private Error error;
 

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosExporter.java
Patch:
@@ -87,7 +87,7 @@ static PhotoModel toCommonPhoto(Photo p, String albumId) {
         p.getOriginalSize().getSource(),
         p.getDescription(),
         toMimeType(p.getOriginalFormat()),
-        null, // TODO this needs to be provided
+        p.getId(),
         albumId, false);
   }
 

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosExporterTest.java
Patch:
@@ -162,7 +162,9 @@ public void exportPhotosFromPhotoset() throws FlickrException {
     FlickrPhotosExporter exporter = new FlickrPhotosExporter(flickr);
     ExportResult<PhotosContainerResource> result =
         exporter.export(
-            UUID.randomUUID(), new TokenSecretAuthData("token", "secret"), Optional.of(exportInformation));
+            UUID.randomUUID(),
+            new TokenSecretAuthData("token", "secret"),
+            Optional.of(exportInformation));
     assertThat(result.getExportedData().getPhotos().size()).isEqualTo(numPhotos);
     assertThat(result.getExportedData().getAlbums()).isEmpty();
 

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/datatransferproject/datatransfer/flickr/photos/FlickrTestUtils.java
Patch:
@@ -21,6 +21,7 @@
 import com.flickr4java.flickr.photosets.Photoset;
 
 import java.util.Collections;
+import java.util.UUID;
 
 class FlickrTestUtils {
 
@@ -35,6 +36,7 @@ public static Photoset initializePhotoset(String id, String title, String descri
   public static Photo initializePhoto(String title, String url, String description, String mediaType) {
     Photo photo = new Photo();
     photo.setTitle(title);
+    photo.setId(UUID.randomUUID().toString());
     photo.setDescription(description);
     photo.setOriginalFormat(mediaType);
     Size size = new Size();

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -98,9 +98,9 @@ public void initialize(ExtensionContext context) {
     ImmutableMap.Builder<String, Importer> importerBuilder = ImmutableMap.builder();
     importerBuilder.put("BLOBS", new DriveImporter(credentialFactory, jobStore, monitor));
     importerBuilder.put("CONTACTS", new GoogleContactsImporter(credentialFactory));
-    importerBuilder.put("CALENDAR", new GoogleCalendarImporter(credentialFactory, jobStore));
-    importerBuilder.put("MAIL", new GoogleMailImporter(credentialFactory, jobStore, monitor));
-    importerBuilder.put("TASKS", new GoogleTasksImporter(credentialFactory, jobStore));
+    importerBuilder.put("CALENDAR", new GoogleCalendarImporter(credentialFactory));
+    importerBuilder.put("MAIL", new GoogleMailImporter(credentialFactory, monitor));
+    importerBuilder.put("TASKS", new GoogleTasksImporter(credentialFactory));
     importerBuilder.put(
             "PHOTOS", new GooglePhotosImporter(credentialFactory, jobStore, jsonFactory));
     importerBuilder.put("VIDEOS", new GoogleVideosImporter(credentialFactory, jobStore, jsonFactory, monitor));

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/mediaModels/NewMediaItemResult.java
Patch:
@@ -18,10 +18,12 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+import java.io.Serializable;
+
 /**
  * Class containing the response from uploading {@code NewMediaItemUpload} to the Google Photos API.
  */
-public class NewMediaItemResult {
+public class NewMediaItemResult implements Serializable {
 
   @JsonProperty("uploadToken")
   private String uploadToken;

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/datatransferproject/transfer/microsoft/integration/LocalImportTestRunner.java
Patch:
@@ -21,6 +21,7 @@
 import org.datatransferproject.auth.microsoft.harness.AuthTestDriver;
 import org.datatransferproject.spi.transfer.provider.ImportResult;
 import org.datatransferproject.spi.transfer.provider.Importer;
+import org.datatransferproject.test.types.FakeIdempotentImportExecutor;
 import org.datatransferproject.transfer.microsoft.MicrosoftTransferExtension;
 import org.datatransferproject.types.transfer.auth.TokenAuthData;
 import org.datatransferproject.types.common.models.contacts.ContactsModelWrapper;
@@ -42,7 +43,8 @@ public static void main(String... args) throws Exception {
         (Importer<TokenAuthData, ContactsModelWrapper>) serviceProvider.getImporter("CONTACTS");
 
     ContactsModelWrapper wrapper = new ContactsModelWrapper(createCards());
-    ImportResult result = contacts.importItem(UUID.randomUUID(), token, wrapper);
+    FakeIdempotentImportExecutor executor = new FakeIdempotentImportExecutor();
+    ImportResult result = contacts.importItem(UUID.randomUUID(), executor, token, wrapper);
   }
 
   private static String createCards() throws IOException {

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/datatransferproject/transfer/rememberthemilk/RememberTheMilkTransferExtension.java
Patch:
@@ -21,7 +21,6 @@
 import org.datatransferproject.api.launcher.ExtensionContext;
 import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.cloud.storage.AppCredentialStore;
-import org.datatransferproject.spi.cloud.storage.JobStore;
 import org.datatransferproject.spi.transfer.extension.TransferExtension;
 import org.datatransferproject.spi.transfer.provider.Exporter;
 import org.datatransferproject.spi.transfer.provider.Importer;
@@ -66,7 +65,6 @@ public String getServiceId() {
   public void initialize(ExtensionContext context) {
     if (initialized) return;
 
-    JobStore jobStore = context.getService(JobStore.class);
     AppCredentials credentials;
     try {
       credentials =
@@ -85,7 +83,7 @@ public void initialize(ExtensionContext context) {
     Monitor monitor = context.getMonitor();
 
     exporter = new RememberTheMilkTasksExporter(credentials);
-    importer = new RememberTheMilkTasksImporter(credentials, jobStore, monitor);
+    importer = new RememberTheMilkTasksImporter(credentials, monitor);
 
     initialized = true;
   }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/datatransferproject/transfer/rememberthemilk/model/tasks/TaskSeries.java
Patch:
@@ -18,12 +18,13 @@
 import com.fasterxml.jackson.xml.annotate.JacksonXmlProperty;
 import com.google.common.base.MoreObjects;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
 /** A tasks series, see: https://www.rememberthemilk.com/services/api/tasks.rtm */
-public class TaskSeries {
+public class TaskSeries implements Serializable {
 
   @JacksonXmlProperty(isAttribute = true, localName = "id")
   public int id;

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/datatransferproject/transfer/smugmug/photos/SmugMugPhotosExporter.java
Patch:
@@ -221,7 +221,7 @@ private ExportResult<PhotosContainerResource> exportPhotos(
               albumImage.getArchivedUri(),
               albumImage.getCaption(),
               getMimeType(albumImage.getFormat()),
-              null,
+              albumImage.getArchivedUri(),
               containerResource.getId(),
               true);
 

File: portability-types-common/src/main/java/org/datatransferproject/types/common/PortableType.java
Patch:
@@ -17,11 +17,13 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
+import java.io.Serializable;
+
 /**
  * Base model type that supports language interoperability and extensibility.
  *
  * <p>Subtypes use {@link com.fasterxml.jackson.annotation.JsonTypeName} to define the concrete type
  * key for de/serialization.
  */
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "ptype")
-public abstract class PortableType {}
+public abstract class PortableType implements Serializable {}

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/photos/PhotoModel.java
Patch:
@@ -43,6 +43,9 @@ public PhotoModel(
     this.fetchableUrl = fetchableUrl;
     this.description = description;
     this.mediaType = mediaType;
+    if (dataId == null || dataId.isEmpty()) {
+      throw new IllegalArgumentException("dataID must be set");
+    }
     this.dataId = dataId;
     this.albumId = albumId;
     this.inTempStore = inTempStore;

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/playlists/MusicAlbum.java
Patch:
@@ -8,7 +8,8 @@ public class MusicAlbum extends CreativeWork {
   // NOTE: only a subset of fields are used so far, feel free to add more fields from the spec as
   // needed.
 
-  public MusicAlbum(String headline) {
+  public MusicAlbum(String identifier, String headline) {
+    super(identifier);
     setHeadline(headline);
   }
 }

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/videos/VideoObject.java
Patch:
@@ -37,6 +37,7 @@ public VideoObject(
           @JsonProperty("dataId") String dataId,
           @JsonProperty("albumId") String albumId,
           @JsonProperty("inTempStore") boolean inTempStore) {
+    super(dataId);
     setName(name);
     setContentUrl(contentUrl);
     setDescription(description);

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosExporter.java
Patch:
@@ -312,7 +312,7 @@ private PhotoModel convertToPhotoModel(Optional<String> albumId, GoogleMediaItem
     Preconditions.checkArgument(mediaItem.getMediaMetadata().getPhoto() != null);
 
     return new PhotoModel(
-        "", // TODO: no title?
+        "", // TODO: no title?  Should we use the description instead?
         mediaItem.getBaseUrl() + "=d",
         mediaItem.getDescription(),
         mediaItem.getMimeType(),

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/FlickrTransferExtension.java
Patch:
@@ -69,12 +69,12 @@ public String getServiceId() {
   public void initialize(ExtensionContext context) {
     if (initialized) return;
     jobStore = context.getService(JobStore.class);
+    Monitor monitor = context.getMonitor();
 
     try {
       appCredentials =
           context.getService(AppCredentialStore.class).getAppCredentials(FLICKR_KEY, FLICKR_SECRET);
     } catch (Exception e) {
-      Monitor monitor = context.getMonitor();
       monitor.info(
           () ->
               format(
@@ -85,7 +85,7 @@ public void initialize(ExtensionContext context) {
       return;
     }
 
-    importer = new FlickrPhotosImporter(appCredentials, jobStore);
+    importer = new FlickrPhotosImporter(appCredentials, jobStore, monitor);
     exporter = new FlickrPhotosExporter(appCredentials);
     initialized = true;
   }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -111,7 +111,7 @@ public void initialize(ExtensionContext context) {
     exporterBuilder.put("SOCIAL-POSTS", new GooglePlusExporter(credentialFactory));
     exporterBuilder.put("TASKS", new GoogleTasksExporter(credentialFactory, monitor));
     exporterBuilder.put(
-        "PHOTOS", new GooglePhotosExporter(credentialFactory, jobStore, jsonFactory));
+        "PHOTOS", new GooglePhotosExporter(credentialFactory, jobStore, jsonFactory, monitor));
 
     exporterMap = exporterBuilder.build();
 

File: extensions/data-transfer/portability-data-transfer-deezer/src/main/java/org/datatransferproject/transfer/deezer/playlists/DeezerPlaylistImporter.java
Patch:
@@ -63,7 +63,7 @@ public ImportResult importItem(UUID jobId, TokensAndUrlAuthData authData,
 
   private void createPlaylist(DeezerApi api, MusicPlaylist playlist)
       throws IOException {
-    InsertResponse createResponse = api.createPlaylist("Imported - " + playlist.headline());
+    InsertResponse createResponse = api.createPlaylist("Imported - " + playlist.getHeadline());
     if (createResponse.getError() != null) {
       throw new IOException("problem creating playlist: " + playlist + " error: "
           + createResponse.getError());

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/playlists/MusicAlbum.java
Patch:
@@ -1,14 +1,14 @@
 package org.datatransferproject.types.common.models.playlists;
 
+import org.datatransferproject.types.common.models.CreativeWork;
 /**
  * POJO https://schema.org/MusicAlbum
  */
 public class MusicAlbum extends CreativeWork {
   // NOTE: only a subset of fields are used so far, feel free to add more fields from the spec as
   // needed.
-  private String headline;
 
   public MusicAlbum(String headline) {
-    super(headline);
+    setHeadline(headline);
   }
 }

File: portability-types-common/src/main/java/org/datatransferproject/types/common/models/playlists/MusicPlaylist.java
Patch:
@@ -1,14 +1,15 @@
 package org.datatransferproject.types.common.models.playlists;
 
 import com.google.common.collect.ImmutableList;
+import org.datatransferproject.types.common.models.CreativeWork;
 
 public class MusicPlaylist extends CreativeWork {
   // NOTE: only a subset of fields are used so far, feel free to add more fields from the spec as
   // needed.
   private ImmutableList<MusicRecording> track;
 
   public MusicPlaylist(String headline, Iterable<MusicRecording> tracks) {
-    super(headline);
+    setHeadline(headline);
     this.track = ImmutableList.copyOf(tracks);
   }
 

File: portability-spi-cloud/src/main/java/org/datatransferproject/spi/cloud/types/JobAuthorization.java
Patch:
@@ -43,6 +43,7 @@ public static Builder builder() {
    * for storage.
    */
   @Deprecated
+  @Nullable
   @JsonProperty("sessionSecretKey")
   public abstract String sessionSecretKey();
 

File: extensions/auth/portability-auth-google/src/main/java/org/datatransferproject/auth/google/GoogleOAuthConfig.java
Patch:
@@ -69,7 +69,7 @@ public Map<String, Set<String>> getImportScopes() {
         .put("CALENDAR", ImmutableSet.of("https://www.googleapis.com/auth/calendar"))
         .put("CONTACTS", ImmutableSet.of("https://www.googleapis.com/auth/contacts"))
         .put("MAIL", ImmutableSet.of("https://www.googleapis.com/auth/gmail.modify"))
-        .put("PHOTOS", ImmutableSet.of("https://www.googleapis.com/auth/photoslibrary"))
+        .put("PHOTOS", ImmutableSet.of("https://www.googleapis.com/auth/photoslibrary.appendonly"))
         .put("TASKS", ImmutableSet.of("https://www.googleapis.com/auth/tasks"))
         .build();
   }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosInterface.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 import org.datatransferproject.datatransfer.google.photos.model.AlbumListResponse;
+import org.datatransferproject.datatransfer.google.photos.model.BatchMediaItemResponse;
 import org.datatransferproject.datatransfer.google.photos.model.GoogleAlbum;
 import org.datatransferproject.datatransfer.google.photos.model.MediaItemSearchResponse;
 import org.datatransferproject.datatransfer.google.photos.model.NewMediaItemResult;
@@ -128,12 +129,12 @@ String uploadPhotoContent(InputStream inputStream) throws IOException {
         String.class);
   }
 
-  NewMediaItemResult createPhoto(NewMediaItemUpload newMediaItemUpload) throws IOException {
+  BatchMediaItemResponse createPhoto(NewMediaItemUpload newMediaItemUpload) throws IOException {
     HashMap<String, Object> map = createJsonMap(newMediaItemUpload);
     HttpContent httpContent = new JsonHttpContent(new JacksonFactory(), map);
 
     return makePostRequest(BASE_URL + "mediaItems:batchCreate", Optional.empty(), httpContent,
-        NewMediaItemResult.class);
+        BatchMediaItemResponse.class);
   }
 
   private <T> T makeGetRequest(String url, Optional<Map<String, String>> parameters, Class<T> clazz)

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/contacts/GoogleContactsImporter.java
Patch:
@@ -46,16 +46,14 @@
 import org.datatransferproject.spi.transfer.provider.Importer;
 import org.datatransferproject.types.transfer.auth.TokensAndUrlAuthData;
 import org.datatransferproject.types.common.models.contacts.ContactsModelWrapper;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+
 
 public class GoogleContactsImporter implements Importer<TokensAndUrlAuthData, ContactsModelWrapper> {
 
   private static final FieldMetadata PRIMARY_FIELD_METADATA = new FieldMetadata().setPrimary(true);
   private static final FieldMetadata SECONDARY_FIELD_METADATA =
       new FieldMetadata().setPrimary(false);
 
-  private static final Logger logger = LoggerFactory.getLogger(GoogleContactsExporter.class);
   private final GoogleCredentialFactory credentialFactory;
   private volatile PeopleService peopleService;
 

File: portability-api-launcher/src/main/java/org/datatransferproject/api/launcher/TypeManager.java
Patch:
@@ -38,7 +38,7 @@ public interface TypeManager {
    * Registers a model type. Extensions that introduce new model subtypes must registered them here
    * so they can be databound properly.
    *
-   * @param type the type to register.
+   * @param types the type to register.
    */
   void registerTypes(Class<?>... types);
 }

File: portability-api-launcher/src/main/java/org/datatransferproject/launcher/types/TypeManagerImpl.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.datatransferproject.launcher.impl;
+package org.datatransferproject.launcher.types;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

File: portability-api/src/test/java/org/datatransferproject/api/action/datatype/DataTypesActionTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.datatransferproject.api.action.datatype;
 
+import org.datatransferproject.api.launcher.Monitor;
 import org.datatransferproject.spi.api.auth.AuthServiceProviderRegistry;
 import org.datatransferproject.types.client.datatype.DataTypes;
 import org.datatransferproject.types.client.datatype.GetDataTypes;
@@ -18,7 +19,7 @@ public class DataTypesActionTest {
   @Test
   public void testGetRequestType() {
     AuthServiceProviderRegistry registry = mock(AuthServiceProviderRegistry.class);
-    DataTypesAction dataTypesAction = new DataTypesAction(registry);
+    DataTypesAction dataTypesAction = new DataTypesAction(registry, new Monitor() {});
 
     Class<GetDataTypes> actual = dataTypesAction.getRequestType();
     Assert.assertNotEquals(actual, null);
@@ -30,7 +31,7 @@ public void testHandle() {
     AuthServiceProviderRegistry registry = mock(AuthServiceProviderRegistry.class);
     Set<String> dataTypes = new HashSet<>(Arrays.asList("CONTACTS", "PHOTOS"));
     when(registry.getTransferDataTypes()).thenReturn(dataTypes);
-    DataTypesAction dataTypesAction = new DataTypesAction(registry);
+    DataTypesAction dataTypesAction = new DataTypesAction(registry, new Monitor() {});
 
     GetDataTypes request = mock(GetDataTypes.class);
     DataTypes actual = dataTypesAction.handle(request);

File: portability-transfer/src/main/java/org/datatransferproject/transfer/JobMetadata.java
Patch:
@@ -16,9 +16,9 @@
 package org.datatransferproject.transfer;
 
 import com.google.common.base.Preconditions;
+
 import java.security.KeyPair;
 import java.util.UUID;
-import org.datatransferproject.logging.EncryptingLayout;
 
 /**
  * A class that contains metadata for a transfer worker's job.
@@ -55,7 +55,6 @@ static void init(
     dataType = initDataType;
     exportService = initExportService;
     importService = initImportService;
-    EncryptingLayout.setJobId(jobId);
   }
 
   // TODO: remove this

File: portability-spi-cloud/src/main/java/org/datatransferproject/spi/cloud/extension/CloudExtensionModule.java
Patch:
@@ -17,6 +17,8 @@
 package org.datatransferproject.spi.cloud.extension;
 
 import com.google.inject.AbstractModule;
+import org.datatransferproject.spi.cloud.hooks.JobHooks;
+import org.datatransferproject.spi.cloud.hooks.DefaultJobHooks;
 import org.datatransferproject.spi.cloud.storage.AppCredentialStore;
 import org.datatransferproject.spi.cloud.storage.CryptoKeyStore;
 import org.datatransferproject.spi.cloud.storage.JobStore;
@@ -30,6 +32,7 @@ public class CloudExtensionModule extends AbstractModule {
 
   @Override
   protected void configure() {
+    bind(JobHooks.class).to(DefaultJobHooks.class);
     requireBinding(JobStore.class);
     requireBinding(AppCredentialStore.class);
   }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/InMemoryDataCopier.java
Patch:
@@ -27,5 +27,5 @@ void copy(
       AuthData exportAuthData,
       AuthData importAuthData,
       UUID jobId)
-      throws IOException;
+      throws IOException, CopyException;
 }

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/types/ContinuationData.java
Patch:
@@ -5,12 +5,13 @@
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import java.util.ArrayList;
 import java.util.List;
-import org.datatransferproject.types.transfer.EntityType;
+
+import org.datatransferproject.types.transfer.PortableType;
 import org.datatransferproject.types.transfer.models.ContainerResource;
 
 /** Specifies the starting point and context information for an export operation. */
 @JsonTypeName("org.dataportability:Continuation")
-public class ContinuationData extends EntityType {
+public class ContinuationData extends PortableType {
   private final PaginationData paginationData;
   private List<ContainerResource> containerResources = new ArrayList<>();
 

File: portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/types/ExportInformation.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import org.datatransferproject.types.transfer.EntityType;
+import org.datatransferproject.types.transfer.PortableType;
 import org.datatransferproject.types.transfer.models.ContainerResource;
 
 /** Contains information about how to export data. */
 @JsonTypeName("org.dataportability:ExportInformation")
-public class ExportInformation extends EntityType {
+public class ExportInformation extends PortableType {
   private final PaginationData paginationData;
   private final ContainerResource containerResource;
 

File: portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/models/DataModel.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.datatransferproject.types.transfer.models;
 
-import org.datatransferproject.types.transfer.EntityType;
+import org.datatransferproject.types.transfer.PortableType;
 
 /** The base data model type. */
-public abstract class DataModel extends EntityType {}
+public abstract class DataModel extends PortableType {}

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerModule.java
Patch:
@@ -156,7 +156,7 @@ RetryStrategyLibrary getRetryStrategyLibrary() {
   @Singleton
   Scheduler getScheduler() {
     // TODO: parse a Duration from the settings
-    long interval = context.getSetting("pollInterval", 20 * 1000); // Default: poll every 20s
+    long interval = context.getSetting("pollInterval", 2000); // Default: poll every 2s
     return AbstractScheduledService.Scheduler
         .newFixedDelaySchedule(0, interval, TimeUnit.MILLISECONDS);
   }

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerModule.java
Patch:
@@ -156,7 +156,7 @@ RetryStrategyLibrary getRetryStrategyLibrary() {
   @Singleton
   Scheduler getScheduler() {
     // TODO: parse a Duration from the settings
-    long interval = context.getSetting("pollInterval", 20 * 1000); // Default: poll every 20s
+    long interval = context.getSetting("pollInterval", 2000); // Default: poll every 2s
     return AbstractScheduledService.Scheduler
         .newFixedDelaySchedule(0, interval, TimeUnit.MILLISECONDS);
   }

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/GenerateServiceAuthDataAction.java
Patch:
@@ -7,7 +7,6 @@
 import org.datatransferproject.api.action.Action;
 import org.datatransferproject.api.launcher.TypeManager;
 import org.datatransferproject.security.DecrypterFactory;
-import org.datatransferproject.security.EncrypterFactory;
 import org.datatransferproject.security.SymmetricKeyGenerator;
 import org.datatransferproject.spi.api.auth.AuthDataGenerator;
 import org.datatransferproject.spi.api.auth.AuthServiceProviderRegistry;
@@ -97,8 +96,7 @@ public ServiceAuthData handle(GenerateServiceAuthData request) {
 
       // Serialize and encrypt the auth data
       String serialized = objectMapper.writeValueAsString(authData);
-      String encryptedAuthData = EncrypterFactory.create(key).encrypt(serialized);
-      return new ServiceAuthData(encryptedAuthData);
+      return new ServiceAuthData(serialized);
     } catch (IOException e) {
       throw new RuntimeException(e);
     }

File: extensions/auth/portability-auth-google/src/test/java/org/datatransferproject/auth/google/GoogleAuthDataGeneratorTest.java
Patch:
@@ -24,7 +24,7 @@ public void generateConfigurationImport() {
                 appCredentials, httpTransport, null, "CALENDAR", AuthMode.IMPORT);
 
     AuthFlowConfiguration config =
-        generator.generateConfiguration("http://localhost/test", "54321");
+        generator.generateConfiguration("http://localhost/testredirect", "54321");
 
     Assert.assertEquals(
         "https://accounts.google.com/o/oauth2/auth?"
@@ -43,7 +43,7 @@ public void generateConfigurationExport() {
                 appCredentials, httpTransport, null, "CALENDAR", AuthMode.EXPORT);
 
     AuthFlowConfiguration config =
-        generator.generateConfiguration("http://localhost/test", "54321");
+        generator.generateConfiguration("http://localhost/testredirect", "54321");
 
     Assert.assertEquals(
         "https://accounts.google.com/o/oauth2/auth?"

File: extensions/auth/portability-auth-instagram/src/test/java/org/datatransferproject/auth/instagram/InstagramAuthDataGeneratorTest.java
Patch:
@@ -43,7 +43,7 @@ public void generateConfiguration() {
         .isEqualTo(
             "https://api.instagram.com/oauth/authorize"
                 + "?client_id=dummy-id"
-                + "&redirect_uri=http://localhost/test/callback/instagram"
+                + "&redirect_uri=http://localhost/test"
                 + "&response_type=code"
                 + "&scope=basic"
                 + "&state=NTQzMjE%3D");

File: extensions/auth/portability-auth-flickr/src/main/java/org/datatransferproject/auth/flickr/FlickrAuthDataGenerator.java
Patch:
@@ -33,8 +33,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_1;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_1;
 
 public class FlickrAuthDataGenerator implements AuthDataGenerator {
   private static final Logger logger = LoggerFactory.getLogger(FlickrAuthDataGenerator.class);

File: extensions/auth/portability-auth-google/src/main/java/org/datatransferproject/auth/google/GoogleAuthDataGenerator.java
Patch:
@@ -42,8 +42,8 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_2;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_2;
 
 /**
  * Provides configuration for conducting an OAuth flow against the Google AD API. Returned tokens

File: extensions/auth/portability-auth-instagram/src/main/java/org/datatransferproject/auth/instagram/InstagramAuthDataGenerator.java
Patch:
@@ -33,8 +33,8 @@
 import java.io.IOException;
 import java.util.List;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_2;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_2;
 
 public class InstagramAuthDataGenerator implements AuthDataGenerator {
   private static final AuthProtocol AUTHORIZATION_PROTOCOL = OAUTH_2;

File: extensions/auth/portability-auth-microsoft/src/main/java/org/datatransferproject/auth/microsoft/MicrosoftAuthDataGenerator.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.Map;
 import java.util.function.Supplier;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_2;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_2;
 
 /**
  * Provides configuration for conducting an OAuth flow against the Microsoft AD API. Returned tokens

File: extensions/auth/portability-auth-offline-demo/src/main/java/org/datatransferproject/auth/offline/OfflineDemoAuthDataGenerator.java
Patch:
@@ -20,8 +20,8 @@
 import org.datatransferproject.types.transfer.auth.AuthData;
 import org.datatransferproject.types.transfer.auth.TokenAuthData;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_2;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_2;
 
 /**
  * Generates authentication data for the offline data demo importer.

File: extensions/auth/portability-auth-rememberthemilk/src/main/java/org/datatransferproject/auth/rememberthemilk/RememberTheMilkAuthDataGenerator.java
Patch:
@@ -38,8 +38,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.CUSTOM;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.CUSTOM;
 
 public class RememberTheMilkAuthDataGenerator implements AuthDataGenerator {
   private static final Logger logger = LoggerFactory.getLogger(RememberTheMilkAuthDataGenerator.class);

File: extensions/auth/portability-auth-smugmug/src/main/java/org/datatransferproject/auth/smugmug/SmugMugAuthDataGenerator.java
Patch:
@@ -31,8 +31,8 @@
 
 import java.io.IOException;
 
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_1;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_1;
 
 /* SmugmugAuthDataGenerator used for obtaining auth credentials for the Smugmug API*/
 public class SmugMugAuthDataGenerator implements AuthDataGenerator {

File: extensions/auth/portability-auth-twitter/src/main/java/org/datatransferproject/auth/twitter/TwitterAuthDataGenerator.java
Patch:
@@ -33,9 +33,8 @@
 import twitter4j.auth.RequestToken;
 import twitter4j.conf.ConfigurationBuilder;
 
-
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol;
-import static org.datatransferproject.spi.api.types.AuthFlowConfiguration.AuthProtocol.OAUTH_2;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol;
+import static org.datatransferproject.types.common.PortabilityCommon.AuthProtocol.OAUTH_2;
 
 /* TwitterAuthDataGenerator used for obtaining auth credentials for the Twitter API*/
 final class TwitterAuthDataGenerator implements AuthDataGenerator {

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/CreateTransferJobAction.java
Patch:
@@ -137,7 +137,8 @@ public TransferJob handle(CreateTransferJob request) {
             }
 
             return new TransferJob(encodedJobId, job.exportService(), job.importService(), job.transferDataType(),
-                    exportConfiguration.getUrl(), importConfiguration.getUrl());
+                    exportConfiguration.getUrl(), importConfiguration.getUrl(),
+                    exportConfiguration.getAuthProtocol(), importConfiguration.getAuthProtocol());
         } catch (IOException e) {
             throw new RuntimeException(e);
         }

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/GetTransferJobAction.java
Patch:
@@ -34,6 +34,7 @@ public TransferJob handle(GetTransferJob transferRequest) {
 
     PortabilityJob job = jobStore.findJob(jobId);
 
-    return new TransferJob(id, job.exportService(), job.importService(), job.transferDataType(), null, null);
+    return new TransferJob(id, job.exportService(), job.importService(), job.transferDataType(),
+            null, null, null, null);
   }
 }

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/StartTransferJobAction.java
Patch:
@@ -66,7 +66,8 @@ public TransferJob handle(StartTransferJob startTransferJob) {
               startTransferJob.getImportAuthData());
     }
 
-    return new TransferJob(id, job.exportService(), job.importService(), job.transferDataType(), null, null);
+    return new TransferJob(id, job.exportService(), job.importService(), job.transferDataType(),
+            null, null, null, null);
   }
 
   /**

File: portability-transfer/src/main/java/org/datatransferproject/transfer/WorkerModule.java
Patch:
@@ -18,6 +18,7 @@
 import static com.google.common.collect.MoreCollectors.onlyElement;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.inject.Provides;
 import com.google.inject.Singleton;
@@ -57,12 +58,12 @@ final class WorkerModule extends FlagBindingModule {
     this.asymmetricKeyGenerator = asymmetricKeyGenerator;
   }
 
-  private static TransferExtension findTransferExtension(
+  @VisibleForTesting static TransferExtension findTransferExtension(
       ImmutableList<TransferExtension> transferExtensions, String service) {
     try {
       return transferExtensions
           .stream()
-          .filter(ext -> ext.getServiceId().equals(service.toLowerCase()))
+          .filter(ext -> ext.getServiceId().toLowerCase().equals(service.toLowerCase()))
           .collect(onlyElement());
     } catch (IllegalArgumentException e) {
       throw new IllegalStateException(

File: extensions/auth/portability-auth-microsoft/src/main/java/org/datatransferproject/auth/microsoft/MicrosoftAuthDataGenerator.java
Patch:
@@ -53,7 +53,7 @@ public class MicrosoftAuthDataGenerator implements AuthDataGenerator {
           .put("CONTACTS", ImmutableList.of("user.read", "Contacts.Read"))
           .put("CALENDAR", ImmutableList.of("user.read", "Calendars.Read"))
           // needed because offline exported as one drive files
-          .put(""OFFLINE-DATA"", ImmutableList.of("user.read", "Files.Read.All"))
+          .put("OFFLINE-DATA", ImmutableList.of("user.read", "Files.Read.All"))
           .build();
 
   private final String redirectPath;

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/MicrosoftTransferExtension.java
Patch:
@@ -24,7 +24,7 @@ public class MicrosoftTransferExtension implements TransferExtension {
   private static final String CONTACTS = "CONTACTS";
   private static final String CALENDAR = "CALENDAR";
   private static final String PHOTOS = "PHOTOS";
-  private static final String OFFLINE_DATA = ""OFFLINE-DATA"";
+  private static final String OFFLINE_DATA = "OFFLINE-DATA";
   private static final String BASE_GRAPH_URL = "https://graph.microsoft.com";
 
   private final boolean offlineData;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosExporter.java
Patch:
@@ -116,10 +116,13 @@ private ExportResult<PhotosContainerResource> exportAlbums(
     List<PhotoAlbum> albums = new ArrayList<>();
     GoogleAlbum[] googleAlbums = albumListResponse.getAlbums();
 
+    // TODO: fix this when we have a plan for orphan data
+    /*
     if (!paginationData.isPresent()) {
       // Represents a theoretical container for all photos
       continuationData.addContainerResource(new IdOnlyContainerResource(DEFAULT_ALBUM_ID));
     }
+    */
 
     if (googleAlbums == null) {
       return new ExportResult<>(ResultType.END, new PhotosContainerResource(albums, null),

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/datatransferproject/datatransfer/google/photos/GooglePhotosExporterTest.java
Patch:
@@ -123,7 +123,7 @@ public void exportAlbumFirstSet() throws IOException, ServiceException {
             .stream()
             .map(a -> ((IdOnlyContainerResource) a).getId())
             .collect(Collectors.toList()))
-        .containsExactly(ALBUM_ID, GooglePhotosExporter.DEFAULT_ALBUM_ID);
+        .containsExactly(ALBUM_ID);
   }
 
   @Test

File: extensions/transport/portability-transport-jdk/src/main/java/org/datatransferproject/transport/jdk/http/ReferenceApiServer.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.Map.Entry;
 import java.util.concurrent.Executor;
 
-// TODO: Migrate a Service extension
 /** Server that handles requests to API/web server using the Sun HttpServer framework. */
 @Singleton
 public final class ReferenceApiServer {

File: extensions/auth/portability-auth-flickr/src/main/java/org/datatransferproject/auth/flickr/FlickrAuthDataGenerator.java
Patch:
@@ -44,7 +44,7 @@ public class FlickrAuthDataGenerator implements AuthDataGenerator {
   @Override
   public AuthFlowConfiguration generateConfiguration(String callbackBaseUrl, String id) {
     AuthInterface authInterface = flickr.getAuthInterface();
-    Token token = authInterface.getRequestToken(callbackBaseUrl + "/callback1/flickr");
+    Token token = authInterface.getRequestToken(callbackBaseUrl + "/callback/flickr");
     String url =
             authInterface.getAuthorizationUrl(
                     token, Permission.WRITE);

File: extensions/auth/portability-auth-smugmug/src/main/java/org/datatransferproject/auth/smugmug/SmugMugAuthDataGenerator.java
Patch:
@@ -48,7 +48,7 @@ public AuthFlowConfiguration generateConfiguration(String callbackBaseUrl, Strin
     // Generate a request token and include that as initial auth data
     TokenSecretAuthData authData = null;
     try {
-      authData = smugMugOauthInterface.getRequestToken(callbackBaseUrl + "/callback1/smugmug");
+      authData = smugMugOauthInterface.getRequestToken(callbackBaseUrl + "/callback/smugmug");
     } catch (IOException e) {
       logger.warn("Couldnt get authData {}", e.getMessage());
       return null;

File: extensions/auth/portability-auth-twitter/src/main/java/org/datatransferproject/auth/twitter/TwitterAuthDataGenerator.java
Patch:
@@ -55,7 +55,7 @@ public AuthFlowConfiguration generateConfiguration(String callbackBaseUrl, Strin
     RequestToken requestToken;
     try {
        requestToken =
-          twitterApi.getOAuthRequestToken(callbackBaseUrl + "/callback1/twitter", perms);
+          twitterApi.getOAuthRequestToken(callbackBaseUrl + "/callback/twitter", perms);
     } catch (TwitterException e) {
       logger.warn("Couldn't get authData", e);
       return null;

File: portability-api/src/main/java/org/datatransferproject/api/action/transfer/GetTransferServicesAction.java
Patch:
@@ -56,6 +56,6 @@ public TransferServices handle(GetTransferServices request) {
       throw new IllegalArgumentException(
           "[" + transferDataType + "] does not have an import and export service");
     }
-    return new TransferServices(transferDataType, importServices, exportServices);
+    return new TransferServices(transferDataType, exportServices,importServices);
   }
 }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/calendar/GoogleCalendarExporter.java
Patch:
@@ -183,7 +183,7 @@ private ExportResult<CalendarContainerResource> exportCalendars(
 
       listResult = listRequest.execute();
     } catch (IOException e) {
-      return new ExportResult<>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<>(e);
     }
 
     // Set up continuation data
@@ -236,7 +236,7 @@ private ExportResult<CalendarContainerResource> getCalendarEvents(
       }
       listResult = listRequest.execute();
     } catch (IOException e) {
-      return new ExportResult<>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<>(e);
     }
 
     // Set up continuation data

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/calendar/GoogleCalendarImporter.java
Patch:
@@ -106,7 +106,7 @@ public ImportResult importItem(UUID jobId, TokensAndUrlAuthData authData,
       }
     } catch (IOException e) {
       // TODO(olsona): should consider retrying individual failures
-      return new ImportResult(ResultType.ERROR, e.getMessage());
+      return new ImportResult(e);
     }
     return ImportResult.OK;
   }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/contacts/GoogleContactsExporter.java
Patch:
@@ -259,7 +259,7 @@ private ExportResult<ContactsModelWrapper> exportContacts(
 
       return new ExportResult<ContactsModelWrapper>(resultType, wrapper, continuationData);
     } catch (IOException e) {
-      return new ExportResult<ContactsModelWrapper>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<ContactsModelWrapper>(e);
     }
   }
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/contacts/GoogleContactsImporter.java
Patch:
@@ -213,7 +213,7 @@ public ImportResult importItem(UUID jobId, TokensAndUrlAuthData authData, Contac
       }
       return ImportResult.OK;
     } catch (IOException e) {
-      return new ImportResult(ImportResult.ResultType.ERROR, e.getMessage());
+      return new ImportResult(e);
     }
   }
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/photos/GooglePhotosExporter.java
Patch:
@@ -98,7 +98,7 @@ private ExportResult<PhotosContainerResource> exportAlbums(
     try {
       albumListResponse = getOrCreatePhotosInterface(authData).listAlbums(paginationToken);
     } catch (IOException e) {
-      return new ExportResult<>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<>(e);
     }
 
     PaginationData nextPageData = null;
@@ -146,7 +146,7 @@ private ExportResult<PhotosContainerResource> exportPhotos(
       mediaItemSearchResponse = getOrCreatePhotosInterface(authData)
           .listAlbumContents(albumId, paginationToken);
     } catch (IOException e) {
-      return new ExportResult<>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<>(e);
     }
 
     PaginationData nextPageData = null;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/photos/GooglePhotosImporter.java
Patch:
@@ -88,8 +88,7 @@ public ImportResult importItem(
         importSinglePhoto(authData, photo);
       }
     } catch (IOException | ServiceException e) {
-      // TODO(olsona): we shouldn't just error out if there's a single problem - should retry
-      return new ImportResult(ResultType.ERROR, e.getMessage());
+      return new ImportResult(e);
     }
 
     return ImportResult.OK;

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/tasks/GoogleTasksExporter.java
Patch:
@@ -88,7 +88,7 @@ public ExportResult<TaskContainerResource> export(
           "Error occurred trying to retrieve task: {}, {}",
           e.getMessage(),
           Throwables.getStackTraceAsString(e));
-      return new ExportResult<>(ResultType.ERROR, "Error retrieving tasks: " + e.getMessage());
+      return new ExportResult<>(e);
     }
   }
 

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/tasks/GoogleTasksImporter.java
Patch:
@@ -67,7 +67,7 @@ public ImportResult importItem(
       try {
         jobStore.create(jobId, createCacheKey(), tempTasksData);
       } catch (IOException e) {
-        return new ImportResult(ResultType.ERROR, e.getMessage());
+        return new ImportResult(e);
       }
     }
 
@@ -80,7 +80,7 @@ public ImportResult importItem(
       try {
         insertedTaskList = tasksService.tasklists().insert(newTaskList).execute();
       } catch (IOException e) {
-        return new ImportResult(ResultType.ERROR, "Error inserting taskList: " + e.getMessage());
+        return new ImportResult(e);
       }
 
       tempTasksData.addTaskListId(oldTasksList.getId(), insertedTaskList.getId());
@@ -102,7 +102,7 @@ public ImportResult importItem(
       try {
         tasksService.tasks().insert(newTaskListId, newTask).execute();
       } catch (IOException e) {
-        return new ImportResult(ResultType.ERROR, "Error inserting task: " + e.getMessage());
+        return new ImportResult(e);
       }
     }
 

File: extensions/data-transfer/portability-data-transfer-instagram/src/main/java/org/dataportabilityproject/transfer/instagram/photos/InstagramPhotoExporter.java
Patch:
@@ -74,7 +74,7 @@ private ExportResult<PhotosContainerResource> exportPhotos(TokensAndUrlAuthData
     try {
       response = makeRequest(MEDIA_URL, MediaResponse.class, authData);
     } catch (IOException e) {
-      return new ExportResult<>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<>(e);
     }
 
     List<PhotoModel> photos = new ArrayList<>();

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/calendar/MicrosoftCalendarImporter.java
Patch:
@@ -78,7 +78,7 @@ public ImportResult importItem(
       try {
         jobStore.create(jobId, createCacheKey(), calendarMappings);
       } catch (IOException e) {
-        return new ImportResult(ResultType.ERROR, e.getMessage());
+        return new ImportResult(e);
       }
     }
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/common/RequestHelper.java
Patch:
@@ -100,9 +100,7 @@ public static BatchResponse batchRequest(
     } catch (IOException e) {
       // TODO log
       e.printStackTrace();
-      return new BatchResponse(
-          new ImportResult(
-              ImportResult.ResultType.ERROR, "Error batching request: " + e.getMessage()));
+      return new BatchResponse(new ImportResult(e));
     }
   }
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/contacts/MicrosoftContactsImporter.java
Patch:
@@ -93,8 +93,7 @@ public ImportResult importItem(
     } catch (IOException e) {
       // TODO log
       e.printStackTrace();
-      return new ImportResult(
-          ImportResult.ResultType.ERROR, "Error deserializing contacts: " + e.getMessage());
+      return new ImportResult(e);
     }
   }
 }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/offline/MicrosoftOfflineDataExporter.java
Patch:
@@ -66,8 +66,7 @@ public ExportResult<MicrosoftOfflineData> export(
       return new ExportResult<>(ExportResult.ResultType.END, offlineData);
     } catch (IOException e) {
       e.printStackTrace(); // FIXME log error
-      return new ExportResult<>(
-          ExportResult.ResultType.ERROR, "Error retrieving contacts: " + e.getMessage());
+      return new ExportResult<>(e);
     }
   }
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/photos/MicrosoftPhotosExporter.java
Patch:
@@ -80,8 +80,7 @@ public ExportResult<PhotosContainerResource> export( UUID jobId, TokenAuthData a
 
     } catch (IOException e) {
       e.printStackTrace(); // FIXME log error
-      return new ExportResult<>(
-          ExportResult.ResultType.ERROR, "Error retrieving contacts: " + e.getMessage());
+      return new ExportResult<>(e);
     }
   }
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java
Patch:
@@ -80,7 +80,7 @@ public ImportResult importItem(
       try {
         jobStore.create(jobId, createCacheKey(), photoData);
       } catch (IOException e) {
-        return new ImportResult(ImportResult.ResultType.ERROR, "Error create temp photo data " + e.getMessage());
+        return new ImportResult(e);
       }
 
     }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkTasksExporter.java
Patch:
@@ -90,7 +90,7 @@ private ExportResult exportTask(
     try {
       oldList = service.getList(oldListId);
     } catch (IOException e) {
-      return new ExportResult(ResultType.ERROR, "Error getting old list: " + e.getMessage());
+      return new ExportResult(e);
     }
 
     List<TaskList> taskLists = oldList.tasks.list;
@@ -130,7 +130,7 @@ private ExportResult exportTaskList(RememberTheMilkService service) {
     try {
       listInfoList = service.getLists().lists;
     } catch (IOException e) {
-      return new ExportResult(ResultType.ERROR, "Error retrieving lists: " + e.getMessage());
+      return new ExportResult(e);
     }
 
     for (ListInfo oldListInfo : listInfoList) {

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkTasksImporter.java
Patch:
@@ -71,7 +71,7 @@ public ImportResult importItem(UUID jobId, AuthData authData, TaskContainerResou
       try {
         jobstore.create(jobId, createCacheKey(), tempTasksData);
       } catch (IOException e) {
-        return new ImportResult(ResultType.ERROR, e.getMessage());
+        return new ImportResult(e);
       }
     }
 
@@ -106,7 +106,7 @@ public ImportResult importItem(UUID jobId, AuthData authData, TaskContainerResou
       }
     } catch (Exception e) {
       logger.warn("Error importing item: " + Throwables.getStackTraceAsString(e));
-      return new ImportResult(ImportResult.ResultType.ERROR, e.getMessage());
+      return new ImportResult(e);
     }
     return new ImportResult(ImportResult.ResultType.OK);
   }

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/dataportabilityproject/transfer/smugmug/photos/SmugMugPhotosExporter.java
Patch:
@@ -95,7 +95,7 @@ public ExportResult<PhotosContainerResource> export(
       smugMugInterface = getOrCreateSmugMugInterface(authData);
     } catch (IOException e) {
       logger.warn("Unable to create smugmug service for user: {}", e.getMessage());
-      return new ExportResult(ResultType.ERROR, e.getMessage());
+      return new ExportResult(e);
     }
 
     if (resource != null) {
@@ -121,7 +121,7 @@ private ExportResult<PhotosContainerResource> exportAlbums(
       albumsResponse = smugMugInterface.getAlbums(albumInfoUri);
     } catch (IOException e) {
       logger.warn("Unable to get AlbumsResponse: " + e.getMessage());
-      return new ExportResult(ResultType.ERROR, e.getMessage());
+      return new ExportResult(e);
     }
 
     // Set up continuation data
@@ -174,7 +174,7 @@ private ExportResult<PhotosContainerResource> exportPhotos(
       albumInfoResponse = smugMugInterface.getAlbumInfo(photoInfoUri);
     } catch (IOException e) {
       logger.warn("Unable to get SmugMugAlbumInfo");
-      return new ExportResult(ResultType.ERROR, e.getMessage());
+      return new ExportResult(e);
     }
 
     // Set up continuation data

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/dataportabilityproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -87,7 +87,7 @@ public ImportResult importItem(
       }
     } catch (IOException e) {
       LOGGER.warn("Error happened while importing: {}", Throwables.getStackTraceAsString(e));
-      return new ImportResult(ResultType.ERROR, e.getMessage());
+      return new ImportResult(e);
     }
     return ImportResult.OK;
   }

File: extensions/data-transfer/portability-data-transfer-twitter/src/main/java/org/dataportabilityproject.transfer.twitter/TwitterPhotosExporter.java
Patch:
@@ -91,7 +91,7 @@ public ExportResult<PhotosContainerResource> export(UUID jobId, TokenSecretAuthD
           moreData ? new ContinuationData(new IntPaginationToken(pageNumber + 1)) : null);
     }
     catch (TwitterException e) {
-      return new ExportResult<>(ResultType.ERROR, e.getMessage());
+      return new ExportResult<>(e);
     }
   }
 }

File: extensions/data-transfer/portability-data-transfer-twitter/src/main/java/org/dataportabilityproject.transfer.twitter/TwitterPhotosImporter.java
Patch:
@@ -60,7 +60,7 @@ public ImportResult importItem(UUID jobId, TokenSecretAuthData authData,
         twitterApi.tweets().updateStatus(update);
       } catch (IOException | TwitterException e) {
         logger.warn("problem importing twitter photo", e);
-        return new ImportResult(ResultType.ERROR, e.getMessage());
+        return new ImportResult(e);
       }
     }
     return new ImportResult(ResultType.OK);

File: extensions/transport/portability-transport-jdk/src/main/java/org/dataportabilityproject/transport/jdk/http/CopySetupHandler.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.reference;
+package org.dataportabilityproject.transport.jdk.http;
 
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import com.sun.net.httpserver.HttpHandler;
 import org.dataportabilityproject.api.launcher.TypeManager;
+import org.dataportabilityproject.spi.api.token.TokenManager;
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.api.auth.AuthServiceProviderRegistry;

File: extensions/transport/portability-transport-jdk/src/main/java/org/dataportabilityproject/transport/jdk/http/ImportSetupHandler.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.reference;
+package org.dataportabilityproject.transport.jdk.http;
 
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import com.sun.net.httpserver.HttpHandler;
 import org.dataportabilityproject.api.launcher.TypeManager;
+import org.dataportabilityproject.spi.api.token.TokenManager;
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.api.auth.AuthServiceProviderRegistry;

File: extensions/transport/portability-transport-jdk/src/main/java/org/dataportabilityproject/transport/jdk/http/JsonKeys.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.reference;
+package org.dataportabilityproject.transport.jdk.http;
 
 /** Keys for returned Json data. */
 public class JsonKeys {

File: extensions/transport/portability-transport-jdk/src/main/java/org/dataportabilityproject/transport/jdk/http/ReferenceApiServer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.reference;
+package org.dataportabilityproject.transport.jdk.http;
 
 import com.google.inject.Inject;
 import com.sun.net.httpserver.HttpHandler;

File: portability-api/src/main/java/org/dataportabilityproject/api/action/datatype/DataTypesActionModule.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.action.listservices;
+package org.dataportabilityproject.api.action.datatype;
 
 import com.google.inject.AbstractModule;
 import org.dataportabilityproject.spi.api.auth.AuthServiceProviderRegistry;
 
-/** Dependencies for the {@link ListServicesAction} and related classes. */
-public final class ListServicesActionModule extends AbstractModule {
+/** Dependencies for the {@link DataTypesAction} and related classes. */
+public final class DataTypesActionModule extends AbstractModule {
 
   @Override
   protected void configure() {

File: portability-api/src/main/java/org/dataportabilityproject/api/action/transfer/TransferServicesActionModule.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.action.listdatatypes;
+package org.dataportabilityproject.api.action.transfer;
 
 import com.google.inject.AbstractModule;
 import org.dataportabilityproject.spi.api.auth.AuthServiceProviderRegistry;
 
-/** Dependencies for the {@link ListDataTypesAction} and related classes. */
-public final class ListDataTypesActionModule extends AbstractModule {
+/** Dependencies for the {@link GetTransferServicesAction} and related classes. */
+public final class TransferServicesActionModule extends AbstractModule {
 
   @Override
   protected void configure() {

File: portability-spi-api/src/main/java/org/dataportabilityproject/spi/api/token/TokenManager.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.reference;
+package org.dataportabilityproject.spi.api.token;
 
 import java.util.UUID;
 

File: portability-types-client/src/main/java/org/dataportabilityproject/types/client/datatype/GetDataTypes.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.api.action.listdatatypes;
+package org.dataportabilityproject.types.client.datatype;
 
 /** A request to list data types available for export and import. */
-public class ListDataTypesActionRequest {}
+public class GetDataTypes {}

File: portability-types-client/src/test/java/org/dataportabilityproject/types/client/transfer/DataGetTransferTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Test;
 
 /* Test for DataTransferRequest */
-public class DataTransferRequestTest {
+public class DataGetTransferTest {
 
   @Test
   public void verifySerializeDeserialize() throws Exception {

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/dataportabilityproject/datatransfer/flickr/photos/FlickrPhotosImporterTest.java
Patch:
@@ -121,7 +121,7 @@ public void importStoresAlbumInJobStore() throws FlickrException, IOException {
     verify(photosetsInterface).create(flickrAlbumTitle, ALBUM_DESCRIPTION, FLICKR_PHOTO_ID);
 
     // Check contents of JobStore
-    TempPhotosData tempPhotosData = jobStore.findData(TempPhotosData.class, jobId);
+    TempPhotosData tempPhotosData = jobStore.findData(jobId,"tempPhotosData", TempPhotosData.class);
     assertThat(tempPhotosData).isNotNull();
 
     String expectedAlbumKey = ALBUM_ID;

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/dataportabilityproject/datatransfer/google/calendar/GoogleCalendarImporterTest.java
Patch:
@@ -111,7 +111,7 @@ public void importCalendarAndEvent() throws IOException {
     verify(eventInsertRequest).execute();
 
     // Check jobStore contents
-    assertThat(jobStore.findData(TempCalendarData.class, jobId).getImportedId(modelCalendarId))
+    assertThat(jobStore.findData(jobId, "tempCalendarData", TempCalendarData.class).getImportedId(modelCalendarId))
         .isEqualTo(googleCalendarId);
   }
 }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/dataportabilityproject/transfer/microsoft/integration/MicrosoftCalendarImportTest.java
Patch:
@@ -246,7 +246,7 @@ public void testImport() throws Exception {
 
     // verify the calendar id mapping from old id to new id was saved
     Assert.assertEquals(
-        "NewId1", jobStore.findData(TempCalendarData.class, JOB_ID).getImportedId("OldId1"));
+        "NewId1", jobStore.findData(JOB_ID, "tempCalendarData", TempCalendarData.class).getImportedId("OldId1"));
 
     // verify the batch event request
     RecordedRequest eventBatch = server.takeRequest();

File: extensions/cloud/portability-cloud-google/src/main/java/org/dataportabilityproject/cloud/google/GoogleCloudExtension.java
Patch:
@@ -45,7 +45,7 @@ public void initialize(ExtensionContext context) {
         !initialized, "Attempting to initialize GoogleCloudExtension more than once");
     HttpTransport httpTransport = context.getService(HttpTransport.class);
     JsonFactory jsonFactory = context.getService(JsonFactory.class);
-    ObjectMapper objectMapper = context.getService(ObjectMapper.class);
+    ObjectMapper objectMapper = context.getTypeManager().getMapper();
     injector = Guice.createInjector(new GoogleCloudExtensionModule(httpTransport, jsonFactory,
         objectMapper, context.cloud(), context.environment()));
     initialized = true;

File: extensions/cloud/portability-cloud-google/src/main/java/org/dataportabilityproject/cloud/google/GoogleJobStore.java
Patch:
@@ -329,7 +329,7 @@ public <T extends DataModel> T findData(Class<T> type, UUID jobId) {
       return null;
     }
     try {
-      return objectMapper.readValue(entity.getBlob(type.getName()).toByteArray(), type);
+      return objectMapper.readValue(entity.getString(type.getName()), type);
     } catch (IOException t) {
       throw new RuntimeException("Failed to deserialized key: " + key, t);
     }

File: extensions/cloud/portability-cloud-google/src/main/java/org/dataportabilityproject/cloud/google/GoogleCloudExtension.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.dataportabilityproject.cloud.google;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.api.client.http.HttpTransport;
 import com.google.api.client.json.JsonFactory;
 import com.google.common.base.Preconditions;
@@ -44,8 +45,9 @@ public void initialize(ExtensionContext context) {
         !initialized, "Attempting to initialize GoogleCloudExtension more than once");
     HttpTransport httpTransport = context.getService(HttpTransport.class);
     JsonFactory jsonFactory = context.getService(JsonFactory.class);
+    ObjectMapper objectMapper = context.getService(ObjectMapper.class);
     injector = Guice.createInjector(new GoogleCloudExtensionModule(httpTransport, jsonFactory,
-        context.cloud(), context.environment()));
+        objectMapper, context.cloud(), context.environment()));
     initialized = true;
   }
 

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/storage/JobStore.java
Patch:
@@ -72,7 +72,7 @@ interface JobUpdateValidator {
    */
   UUID findFirst(JobAuthorization.State jobState);
 
-  default <T extends DataModel> void create(UUID jobId, T model) {
+  default <T extends DataModel> void create(UUID jobId, T model) throws IOException {
     throw new UnsupportedOperationException();
   }
 

File: extensions/cloud/portability-cloud-google/src/main/java/org/dataportabilityproject/cloud/google/GoogleAppCredentialStore.java
Patch:
@@ -133,7 +133,7 @@ private String lookupKey(String keyName) {
     logger.debug("Getting app key for {} (blob {}) from bucket", keyName, keyLocation);
     byte[] rawKeyBytes = getRawBytes(keyLocation);
     checkState(rawKeyBytes != null, "Couldn't look up: " + keyName);
-    String key = new String(rawKeyBytes);
+    String key = new String(rawKeyBytes).trim();
     return key;
   }
 
@@ -142,7 +142,7 @@ private String lookupSecret(String secretName) throws IOException {
     logger.debug("Getting app secret for {} (blob {})", secretName, secretLocation);
     byte[] encryptedSecret = getRawBytes(secretLocation);
     checkState(encryptedSecret != null, "Couldn't look up: " + secretName);
-    String secret = new String(appSecretDecrypter.decryptAppSecret(encryptedSecret));
+    String secret = new String(appSecretDecrypter.decryptAppSecret(encryptedSecret)).trim();
     checkState(!Strings.isNullOrEmpty(secret), "Couldn't decrypt: " + secretName);
     return secret;
   }

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/dataportabilityproject/datatransfer/flickr/photos/FlickrPhotosExporterTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.flickr4java.flickr.photosets.Photoset;
 import com.flickr4java.flickr.photosets.Photosets;
 import com.flickr4java.flickr.photosets.PhotosetsInterface;
+import java.util.Optional;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
 import org.dataportabilityproject.spi.transfer.types.ContinuationData;
 import org.dataportabilityproject.spi.transfer.types.ExportInformation;
@@ -113,7 +114,7 @@ public void exportAlbumInitial() throws FlickrException {
     // run test
     FlickrPhotosExporter exporter = new FlickrPhotosExporter(flickr);
     AuthData authData = new TokenSecretAuthData("token", "secret");
-    ExportResult<PhotosContainerResource> result = exporter.export(UUID.randomUUID(), authData);
+    ExportResult<PhotosContainerResource> result = exporter.export(UUID.randomUUID(), authData, Optional.empty());
 
     // make sure album and photo information is correct
     assertThat(result.getExportedData().getPhotos()).isEmpty();
@@ -164,7 +165,7 @@ public void exportPhotosFromPhotoset() throws FlickrException {
     FlickrPhotosExporter exporter = new FlickrPhotosExporter(flickr);
     ExportResult<PhotosContainerResource> result =
         exporter.export(
-            UUID.randomUUID(), new TokenSecretAuthData("token", "secret"), exportInformation);
+            UUID.randomUUID(), new TokenSecretAuthData("token", "secret"), Optional.of(exportInformation));
     assertThat(result.getExportedData().getPhotos().size()).isEqualTo(numPhotos);
     assertThat(result.getExportedData().getAlbums()).isEmpty();
 

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/dataportabilityproject/datatransfer/google/contacts/GoogleContactsExporterTest.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.api.services.people.v1.model.Source;
 import ezvcard.VCard;
 import ezvcard.io.json.JCardReader;
+import java.util.Optional;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
 import org.dataportabilityproject.spi.transfer.types.ContinuationData;
 import org.dataportabilityproject.spi.transfer.types.ExportInformation;
@@ -97,7 +98,7 @@ public void exportFirstPage() throws IOException {
     // Looking at first page, with at least one page after it
     listConnectionsResponse.setNextPageToken(NEXT_PAGE_TOKEN);
 
-    ExportResult<ContactsModelWrapper> result = contactsService.export(UUID.randomUUID(), null);
+    ExportResult<ContactsModelWrapper> result = contactsService.export(UUID.randomUUID(), null, Optional.empty());
 
     // Check that correct methods were called
     verify(connections).list(SELF_RESOURCE);
@@ -133,7 +134,7 @@ public void exportSubsequentPage() throws IOException {
 
     // Run test
     ExportResult<ContactsModelWrapper> result =
-        contactsService.export(UUID.randomUUID(), null, exportInformation);
+        contactsService.export(UUID.randomUUID(), null, Optional.of(exportInformation));
 
     // Verify correct calls were made - i.e., token was added before execution
     InOrder inOrder = Mockito.inOrder(listConnectionsRequest);

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/dataportabilityproject/transfer/microsoft/integration/LocalExportTestRunner.java
Patch:
@@ -1,5 +1,6 @@
 package org.dataportabilityproject.transfer.microsoft.integration;
 
+import java.util.Optional;
 import org.dataportabilityproject.auth.microsoft.harness.AuthTestDriver;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
 import org.dataportabilityproject.spi.transfer.provider.Exporter;
@@ -22,6 +23,7 @@ public static void main(String... args) throws Exception {
 
     Exporter<TokenAuthData, ContactsModelWrapper> contacts =
         (Exporter<TokenAuthData, ContactsModelWrapper>) serviceProvider.getExporter("contacts");
-    ExportResult<ContactsModelWrapper> wrapper = contacts.export(UUID.randomUUID(), token);
+    ExportResult<ContactsModelWrapper> wrapper = contacts.export(UUID.randomUUID(), token,
+        Optional.empty());
   }
 }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/dataportabilityproject/transfer/microsoft/integration/MicrosoftCalendarExportTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.squareup.okhttp.HttpUrl;
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
+import java.util.Optional;
 import okhttp3.OkHttpClient;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
 import org.dataportabilityproject.transfer.microsoft.calendar.MicrosoftCalendarExporter;
@@ -233,7 +234,7 @@ public void testExport() throws Exception {
     MicrosoftCalendarExporter exporter =
         new MicrosoftCalendarExporter(baseUrl.toString(), client, mapper, transformerService);
 
-    ExportResult<CalendarContainerResource> resource = exporter.export(UUID.randomUUID(), token);
+    ExportResult<CalendarContainerResource> resource = exporter.export(UUID.randomUUID(), token, Optional.empty());
 
     CalendarContainerResource calendarResource = resource.getExportedData();
 

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/dataportabilityproject/transfer/smugmug/photos/SmugMugInterface.java
Patch:
@@ -27,7 +27,6 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableMap;
-import com.google.common.graph.ImmutableGraph;
 import com.google.common.net.HttpHeaders;
 import org.dataportabilityproject.transfer.smugmug.photos.model.*;
 import org.dataportabilityproject.types.transfer.auth.AppCredentials;
@@ -134,7 +133,7 @@ ImageUploadResponse uploadImage(String photoUrl, String albumId) throws IOExcept
 
     // Upload photo
     return postRequest(
-        "http://upload.smugmug.com/",
+        "https://upload.smugmug.com/",
         ImmutableMap.of(), // No content params for photo upload
         content,
         // Headers from: https://api.smugmug.com/api/v2/doc/reference/upload.html
@@ -195,7 +194,7 @@ private <T> T postRequest(
       ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
       content.writeTo(outputStream);
 
-      request.addPayload(outputStream.toString("UTF-8"));
+      request.addPayload(outputStream.toByteArray());
     }
 
     for (Entry<String, String> param : contentParams.entrySet()) {

File: extensions/auth/portability-auth-smugmug/src/main/java/org/dataportabilityproject/auth/smugmug/SmugMugAuth/SmugMugOauthInterface.java
Patch:
@@ -55,7 +55,8 @@ public String getAuthorizationUrl(TokenSecretAuthData token, String permission)
     OAuthService service =
         new ServiceBuilder().provider(SmugMugOauthApi.class).apiKey(apiKey).apiSecret(apiSecret).build();
     String authUrl = service.getAuthorizationUrl(new Token(token.getToken(), token.getSecret()));
-    return String.format("%s&perms=%s", authUrl, permission);
+    // Request for permissions and for Full access (private and public content)
+    return String.format("%s&Permissions=%s&Access=%s", authUrl, permission, "Full");
   }
 
   public TokenSecretAuthData getAccessToken(TokenSecretAuthData requestToken, Verifier verifier) {

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/dataportabilityproject/transfer/smugmug/photos/model/SmugMugResponse.java
Patch:
@@ -23,9 +23,6 @@ public class SmugMugResponse<T> {
   @JsonProperty("Response")
   private T response;
 
-  // @JsonProperty("Response")
-  // private HashMap<String, Object> fakeObject;
-
   @JsonProperty("Code")
   private int code;
 

File: extensions/cloud/portability-cloud-microsoft/src/main/java/org/dataportabilityproject/cloud/microsoft/cosmos/MicrosoftCloudExtension.java
Patch:
@@ -57,7 +57,7 @@
  */
 public class MicrosoftCloudExtension implements CloudExtension {
   // Config for accessing the Azure Vault (sensitive)
-  static final String AZURE_VAULT_NAME = "AZURE_VAULT_NAME_KEY";
+  static final String AZURE_VAULT_NAME = "AZURE_VAULT_NAME";
 
   // Derived from the Active Directory tenant id
   static final String AZURE_VAULT_TENANT_ID = "AZURE_VAULT_TENANT_ID";

File: extensions/data-transfer/portability-data-transfer-smugmug/src/main/java/org/dataportabilityproject/transfer/smugmug/photos/SmugMugPhotosImporter.java
Patch:
@@ -44,11 +44,12 @@
 import org.dataportabilityproject.transfer.smugmug.photos.model.SmugMugResponse;
 import org.dataportabilityproject.transfer.smugmug.photos.model.SmugMugUserResponse;
 import org.dataportabilityproject.types.transfer.auth.AuthData;
+import org.dataportabilityproject.types.transfer.auth.TokenSecretAuthData;
 import org.dataportabilityproject.types.transfer.models.photos.PhotoAlbum;
 import org.dataportabilityproject.types.transfer.models.photos.PhotoModel;
 import org.dataportabilityproject.types.transfer.models.photos.PhotosContainerResource;
 
-public class SmugMugPhotosImporter implements Importer<AuthData, PhotosContainerResource> {
+public class SmugMugPhotosImporter implements Importer<TokenSecretAuthData, PhotosContainerResource> {
 
   private final JobStore jobStore;
   private SmugMugInterface smugMugInterface;
@@ -73,7 +74,7 @@ private static InputStream getImageAsStream(String urlStr) throws IOException {
   }
 
   @Override
-  public ImportResult importItem(UUID jobId, AuthData authData, PhotosContainerResource data) {
+  public ImportResult importItem(UUID jobId, TokenSecretAuthData authData, PhotosContainerResource data) {
     try {
       String folder = null;
       if (!data.getAlbums().isEmpty()) {
@@ -87,7 +88,6 @@ public ImportResult importItem(UUID jobId, AuthData authData, PhotosContainerRes
         importSinglePhoto(jobId, photo);
       }
     } catch (IOException e) {
-      // TODO(olsona): we should retry on individual errors
       return new ImportResult(ResultType.ERROR, e.getMessage());
     }
     return ImportResult.OK;

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/test/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkSignatureGeneratorTest.java
Patch:
@@ -36,7 +36,7 @@ public void signatureTest() throws Exception {
     URL url = new URL("http://example.com?yxz=foo&feg=bar&abc=baz");
     URL expected =
         new URL(
-            "http://example.com?yxz=foo&feg=bar&abc=baz&api_key=BANANAS1&auth_token=BANANAS3&api_sig=b48f0dd1a18179b3068b16728e214561");
+            "http://example.com?yxz=foo&feg=bar&abc=baz&api_key=BANANAS1&auth_token=BANANAS3&api_sig=8c8a6a1b743ef1571a79daf4dd7c01b3");
     assertThat(SIGNATURE_GENERATOR.getSignature(url)).isEqualTo(expected);
   }
 }

File: extensions/data-transfer/portability-data-transfer-instagram/src/main/java/org/dataportabilityproject/transfer/instagram/InstagramTransferExtension.java
Patch:
@@ -70,7 +70,7 @@ public String getServiceId() {
   @Override
   public void initialize(ExtensionContext context) {
     if (initialized) {
-      logger.warn("InstagramTransferExtension already initalized");
+      logger.warn("InstagramTransferExtension already initialized");
       return;
     }
 

File: extensions/data-transfer/portability-data-transfer-instagram/src/main/java/org/dataportabilityproject/transfer/instagram/photos/InstagramPhotoImporter.java
Patch:
@@ -31,6 +31,7 @@ public class InstagramPhotoImporter implements
   @Override
   public ImportResult importItem(UUID jobId, TokensAndUrlAuthData authData,
       PhotosContainerResource data) {
-    return null; // TODO: implement
+    // TODO(#337): Import is not supported for Instagram since their API does not support upload
+    return null;
   }
 }

File: extensions/data-transfer/portability-data-transfer-instagram/src/main/java/org/dataportabilityproject/transfer/instagram/InstagramTransferExtension.java
Patch:
@@ -70,7 +70,7 @@ public String getServiceId() {
   @Override
   public void initialize(ExtensionContext context) {
     if (initialized) {
-      logger.warn("InstagramTransferExtension already initalized");
+      logger.warn("InstagramTransferExtension already initialized");
       return;
     }
 

File: extensions/data-transfer/portability-data-transfer-instagram/src/main/java/org/dataportabilityproject/transfer/instagram/photos/InstagramPhotoImporter.java
Patch:
@@ -31,6 +31,7 @@ public class InstagramPhotoImporter implements
   @Override
   public ImportResult importItem(UUID jobId, TokensAndUrlAuthData authData,
       PhotosContainerResource data) {
-    return null; // TODO: implement
+    // TODO(#337): Import is not supported for Instagram since their API does not support upload
+    return null;
   }
 }

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/GoogleTransferExtension.java
Patch:
@@ -87,7 +87,7 @@ public void initialize(ExtensionContext context) {
     GoogleCredentialFactory credentialFactory =
         new GoogleCredentialFactory(httpTransport, jsonFactory, appCredentials);
 
-     ImmutableMap.Builder<String, Importer> importerBuilder = ImmutableMap.builder();
+    ImmutableMap.Builder<String, Importer> importerBuilder = ImmutableMap.builder();
     importerBuilder.put("contacts", new GoogleContactsImporter(credentialFactory));
     importerBuilder.put("calendar", new GoogleCalendarImporter(credentialFactory, jobStore));
     importerBuilder.put("mail", new GoogleMailImporter(credentialFactory, jobStore)) ;

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkTasksExporter.java
Patch:
@@ -95,7 +95,9 @@ private ExportResult exportTask(
     for (TaskList taskList : taskLists) {
       if (taskList.taskseries != null) {
         for (TaskSeries taskSeries : taskList.taskseries) {
-          tasks.add(new TaskModel(oldListId, taskSeries.name, taskSeries.notes.toString()));
+          // figure out what to do with notes
+          String notesStr = taskSeries.notes == null ? "" : taskSeries.notes.toString();
+          tasks.add(new TaskModel(oldListId, taskSeries.name, notesStr));
           for (Task task : taskSeries.tasks) {
             // Do something here with completion date, but its odd there can be more than one.
           }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/Notes.java
Patch:
@@ -16,18 +16,18 @@
 package org.dataportabilityproject.transfer.rememberthemilk.model.tasks;
 
 import com.google.api.client.util.Key;
-import com.google.common.base.Joiner;
+import com.google.common.base.MoreObjects;
 
 import java.util.List;
 
-/** A collection of notes that exist on a task/taskseries */
+/** A collection of notes that exist on a tasks/taskseries */
 public class Notes {
 
   @Key("note")
   public List<String> notes;
 
   @Override
   public String toString() {
-    return (notes == null || notes.isEmpty()) ? "" : Joiner.on("; ").join(notes);
+    return MoreObjects.toStringHelper(this).add("notes", notes).toString();
   }
 }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkSignatureGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.transfer.rememberthemilk;
+package org.dataportabilityproject.transfer.rememberthemilk.tasks;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
@@ -36,12 +36,12 @@
  * Generates signatures hash based on the algorithm described:
  * https://www.rememberthemilk.com/services/api/authentication.rtm
  */
-public final class RememberTheMilkSignatureGenerator {
+final class RememberTheMilkSignatureGenerator {
 
   private final AppCredentials appCredentials;
   private final String authToken;
 
-  public RememberTheMilkSignatureGenerator(AppCredentials appCredentials, @Nullable String authToken) {
+  public RememberTheMilkSignatureGenerator(AppCredentials appCredentials, String authToken) {
     this.appCredentials = Preconditions.checkNotNull(appCredentials);
     this.authToken = authToken;
   }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/GetListResponse.java
Patch:
@@ -15,11 +15,11 @@
  */
 package org.dataportabilityproject.transfer.rememberthemilk.model.tasks;
 
-import com.google.api.client.util.Key;
+import com.fasterxml.jackson.xml.annotate.JacksonXmlProperty;
 
 public class GetListResponse extends RememberTheMilkResponse {
 
-  @Key("tasks")
+  @JacksonXmlProperty(localName = "tasks")
   public Tasks tasks;
 
   @Override

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/Tasks.java
Patch:
@@ -15,18 +15,18 @@
  */
 package org.dataportabilityproject.transfer.rememberthemilk.model.tasks;
 
-import com.google.api.client.util.Key;
+import com.fasterxml.jackson.xml.annotate.JacksonXmlProperty;
 import com.google.common.base.Joiner;
 
 import java.util.List;
 
 /** A set of tasks lists. */
 public class Tasks {
 
-  @Key("@rev")
+  @JacksonXmlProperty(isAttribute = true, localName = "rev")
   public String rev;
 
-  @Key("list")
+  @JacksonXmlProperty(localName =  "list")
   public List<TaskList> list;
 
   @Override

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkService.java
Patch:
@@ -82,7 +82,7 @@ public TaskSeries createTask(String name, String timeline, String listId) throws
 
   public GetListResponse getList(String listId) throws IOException {
     Map<String, String> params = ImmutableMap.of("list_id", listId);
-    return makeRequest(RememberTheMilkMethods.LISTS_GET_LIST, params, GetListResponse.class);
+    return makeRequest(RememberTheMilkMethods.TASK_GET_LIST, params, GetListResponse.class);
   }
 
   public GetListsResponse getLists() throws IOException {
@@ -128,6 +128,7 @@ private <T extends RememberTheMilkResponse> T makeRequest(
   public enum RememberTheMilkMethods {
     LISTS_GET_LIST("rtm.lists.getList"),
     LISTS_ADD("rtm.lists.add"),
+    TASK_GET_LIST("rtm.tasks.getList"),
     TASK_ADD("rtm.tasks.add"),
     TIMELINES_CREATE("rtm.timelines.create");
 

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkTasksExporter.java
Patch:
@@ -114,7 +114,7 @@ private ExportResult exportTaskList(RememberTheMilkService service) {
 
     List<ListInfo> listInfoList;
     try {
-      listInfoList = service.getLists().listInfoList.lists;
+      listInfoList = service.getLists().lists;
     } catch (IOException e) {
       return new ExportResult(ResultType.ERROR, "Error retrieving lists: " + e.getMessage());
     }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/Notes.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.List;
 
-/** A collection of notes that exist on a task/taskseries */
+/** A collection of notes that exist on a tasks/taskseries */
 public class Notes {
 
   @Key("note")

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/Task.java
Patch:
@@ -27,7 +27,7 @@ public class Task {
   public String due;
 
   @Key("@has_due_time")
-  public boolean has_due_time;
+  public int has_due_time;
 
   @Key("@added")
   public String added;
@@ -42,7 +42,7 @@ public class Task {
   public String priority;
 
   @Key("@postponed")
-  public boolean postponed;
+  public int postponed;
 
   @Key("@estimate")
   public String estimate;

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/TaskList.java
Patch:
@@ -27,15 +27,15 @@ public class TaskList {
   public int id;
 
   @Key("taskseries")
-  public List<TaskSeries> taskSeriesList;
+  public List<TaskSeries> taskseries;
 
   @Override
   public String toString() {
     return String.format(
         "(list id=%d children:[%s])",
         id,
-        (taskSeriesList == null || taskSeriesList.isEmpty())
+        (taskseries == null || taskseries.isEmpty())
             ? ""
-            : Joiner.on("\n").join(taskSeriesList));
+            : Joiner.on("\n").join(taskseries));
   }
 }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/model/tasks/Tasks.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.List;
 
-/** A set of task lists. */
+/** A set of tasks lists. */
 public class Tasks {
 
   @Key("@rev")

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkSignatureGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.transfer.rememberthemilk;
+package org.dataportabilityproject.transfer.rememberthemilk.tasks;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
@@ -36,12 +36,12 @@
  * Generates signatures hash based on the algorithm described:
  * https://www.rememberthemilk.com/services/api/authentication.rtm
  */
-public final class RememberTheMilkSignatureGenerator {
+final class RememberTheMilkSignatureGenerator {
 
   private final AppCredentials appCredentials;
   private final String authToken;
 
-  public RememberTheMilkSignatureGenerator(AppCredentials appCredentials, @Nullable String authToken) {
+  public RememberTheMilkSignatureGenerator(AppCredentials appCredentials, String authToken) {
     this.appCredentials = Preconditions.checkNotNull(appCredentials);
     this.authToken = authToken;
   }

File: extensions/data-transfer/portability-data-transfer-rememberthemilk/src/main/java/org/dataportabilityproject/transfer/rememberthemilk/tasks/RememberTheMilkTasksExporter.java
Patch:
@@ -28,7 +28,6 @@
 import org.dataportabilityproject.spi.transfer.types.ContinuationData;
 import org.dataportabilityproject.spi.transfer.types.ExportInformation;
 import org.dataportabilityproject.spi.transfer.types.IdOnlyContainerResource;
-import org.dataportabilityproject.transfer.rememberthemilk.RememberTheMilkSignatureGenerator;
 import org.dataportabilityproject.transfer.rememberthemilk.model.tasks.GetListResponse;
 import org.dataportabilityproject.transfer.rememberthemilk.model.tasks.ListInfo;
 import org.dataportabilityproject.transfer.rememberthemilk.model.tasks.Task;
@@ -94,8 +93,8 @@ private ExportResult exportTask(
     List<TaskModel> tasks = new ArrayList<>();
 
     for (TaskList taskList : taskLists) {
-      if (taskList.taskSeriesList != null) {
-        for (TaskSeries taskSeries : taskList.taskSeriesList) {
+      if (taskList.taskseries != null) {
+        for (TaskSeries taskSeries : taskList.taskseries) {
           tasks.add(new TaskModel(oldListId, taskSeries.name, taskSeries.notes.toString()));
           for (Task task : taskSeries.tasks) {
             // Do something here with completion date, but its odd there can be more than one.

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/tasks/GoogleTasksExporter.java
Patch:
@@ -80,7 +80,7 @@ public ExportResult<TaskContainerResource> export(
     }
   }
 
-  private ExportResult getTasks(
+  private ExportResult<TaskContainerResource> getTasks(
       Tasks tasksService, IdOnlyContainerResource resource, PaginationData paginationData)
       throws IOException {
     Tasks.TasksOperations.List query =
@@ -110,7 +110,7 @@ private ExportResult getTasks(
     return new ExportResult<>(resultType, taskContainerResource, new ContinuationData(newPage));
   }
 
-  private ExportResult getTasksList(Tasks tasksSerivce, PaginationData paginationData)
+  private ExportResult<TaskContainerResource> getTasksList(Tasks tasksSerivce, PaginationData paginationData)
       throws IOException {
     Tasks.Tasklists.List query = tasksSerivce.tasklists().list().setMaxResults(PAGE_SIZE);
     if (paginationData != null) {
@@ -142,7 +142,7 @@ private ExportResult getTasksList(Tasks tasksSerivce, PaginationData paginationD
     ContinuationData continuationData = new ContinuationData(newPage);
     newResourcesBuilder
         .build()
-        .forEach(resource -> continuationData.addContainerResource(resource));
+        .forEach(continuationData::addContainerResource);
     return new ExportResult<>(resultType, taskContainerResource, continuationData);
   }
 

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/dataportabilityproject/datatransfer/flickr/photos/FlickrPhotosImporterTest.java
Patch:
@@ -124,9 +124,8 @@ public void importStoresAlbumInJobStore() throws FlickrException, IOException {
     TempPhotosData tempPhotosData = jobStore.findData(TempPhotosData.class, jobId);
     assertThat(tempPhotosData).isNotNull();
 
-    String expectedAlbumKey = FlickrPhotosImporter.CACHE_ALBUM_METADATA_PREFIX + ALBUM_ID;
-    assertThat(tempPhotosData.lookupAlbum(expectedAlbumKey)).isNotNull();
-    assertThat(tempPhotosData.lookupAlbum(expectedAlbumKey)).isEqualTo(PHOTO_ALBUM);
+    String expectedAlbumKey = ALBUM_ID;
+    assertThat(tempPhotosData.lookupTempAlbum(expectedAlbumKey)).isNull();
     assertThat(tempPhotosData.lookupNewAlbumId(ALBUM_ID)).isEqualTo(FLICKR_ALBUM_ID);
   }
 }

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerModule.java
Patch:
@@ -48,7 +48,6 @@ final class WorkerModule extends FlagBindingModule {
       List<TransferExtension> transferExtensions,
       SymmetricKeyGenerator symmetricKeyGenerator,
       AsymmetricKeyGenerator asymmetricKeyGenerator) {
-    super(context);
     this.cloudExtension = cloudExtension;
     this.context = context;
     this.transferExtensions = transferExtensions;
@@ -59,7 +58,7 @@ final class WorkerModule extends FlagBindingModule {
   @Override
   protected void configure() {
     // binds flags from ExtensionContext to @Named annotations
-    bindFlags();
+    bindFlags(context);
 
     bind(SymmetricKeyGenerator.class).toInstance(symmetricKeyGenerator);
     bind(AsymmetricKeyGenerator.class).toInstance(asymmetricKeyGenerator);

File: extensions/config/portability-config-yaml/src/main/java/org/dataportabilityproject/config/yaml/YamlSettingsExtension.java
Patch:
@@ -47,7 +47,7 @@ public class YamlSettingsExtension implements SettingsExtension {
 
   @Override
   public <T> T getSetting(String setting, T defaultValue) {
-    if (setting.contains(setting)) {
+    if (settings.containsKey(setting)) {
       return (T) settings.get(setting);
     }
     return defaultValue;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ReferenceApiModule.java
Patch:
@@ -46,6 +46,7 @@ public ReferenceApiModule(ExtensionContext context) {
   protected void configure() {
     // binds flags from ExtensionContext to @Named annotations
     super.configure();
+    // TODO: requireBinding for Strings annotated with @Named("baseUrl") and @Named("baseApiUrl")
 
     // TODO: Bind actions in single or multiple modules
     MapBinder<String, HttpHandler> mapbinder =

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/dataportabilityproject/datatransfer/flickr/photos/FlickrPhotosImporterTest.java
Patch:
@@ -106,7 +106,7 @@ public void importStoresAlbumInJobStore() throws FlickrException, IOException {
     // Run test
     FlickrPhotosImporter importer = new FlickrPhotosImporter(flickr, jobStore, imageStreamProvider);
     ImportResult result = importer.importItem(
-        jobId.toString(), new TokenSecretAuthData("token", "secret"), photosContainerResource);
+        jobId, new TokenSecretAuthData("token", "secret"), photosContainerResource);
 
     // Verify that the image stream provider got the correct URL and that the correct info was uploaded
     verify(imageStreamProvider).get(FETCHABLE_URL);

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/contacts/GoogleContactsExporter.java
Patch:
@@ -53,6 +53,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Optional;
+import java.util.UUID;
 import java.util.stream.Collectors;
 
 import static org.dataportabilityproject.datatransfer.google.common.GoogleStaticObjects.PERSON_FIELDS;
@@ -76,13 +77,13 @@ public GoogleContactsExporter() {
   }
 
   @Override
-  public ExportResult<ContactsModelWrapper> export(TokensAndUrlAuthData authData) {
+  public ExportResult<ContactsModelWrapper> export(UUID jobId, TokensAndUrlAuthData authData) {
     return exportContacts(authData, Optional.empty());
   }
 
   @Override
   public ExportResult<ContactsModelWrapper> export(
-      TokensAndUrlAuthData authData, ExportInformation exportInformation) {
+      UUID jobId, TokensAndUrlAuthData authData, ExportInformation exportInformation) {
     StringPaginationToken stringPaginationToken =
         (StringPaginationToken) exportInformation.getPaginationData();
     Optional<PaginationData> paginationData = Optional.ofNullable(stringPaginationToken);

File: extensions/data-transfer/portability-data-transfer-google/src/main/java/org/dataportabilityproject/datatransfer/google/contacts/GoogleContactsImporter.java
Patch:
@@ -43,6 +43,7 @@
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
 import java.util.stream.Collectors;
 
 import static org.dataportabilityproject.datatransfer.google.common.GoogleStaticObjects.CONTACT_SOURCE_TYPE;
@@ -199,7 +200,7 @@ private static boolean atLeastOneNamePresent(VCard vCard) {
   }
 
   @Override
-  public ImportResult importItem(String jobId, TokensAndUrlAuthData authData, ContactsModelWrapper data) {
+  public ImportResult importItem(UUID jobId, TokensAndUrlAuthData authData, ContactsModelWrapper data) {
     JCardReader reader = new JCardReader(data.getVCards());
     try {
       // TODO(olsona): address any other problems that might arise in conversion

File: extensions/data-transfer/portability-data-transfer-google/src/test/java/org/dataportabilityproject/datatransfer/google/calendar/GoogleCalendarImporterTest.java
Patch:
@@ -96,7 +96,7 @@ public void importCalendarAndEvent() throws IOException {
             Collections.singleton(calendarModel), Collections.singleton(eventModel));
 
     // Run test
-    calendarService.importItem(jobId.toString(), null, calendarContainerResource);
+    calendarService.importItem(jobId, null, calendarContainerResource);
 
     // Check the right methods were called
     verify(calendarCalendars).insert(calendarToInsert);

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/calendar/MicrosoftCalendarExporter.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 
 import static org.dataportabilityproject.transfer.microsoft.transformer.TransformConstants.CALENDAR_ID;
 
@@ -65,7 +66,7 @@ public MicrosoftCalendarExporter(
   }
 
   @Override
-  public ExportResult<CalendarContainerResource> export(TokenAuthData authData) {
+  public ExportResult<CalendarContainerResource> export(UUID jobId, TokenAuthData authData) {
     Request.Builder calendarsBuilder = getBuilder(baseUrl + CALENDARS_SUBPATH, authData);
 
     List<CalendarModel> calendarModels = new ArrayList<>();
@@ -161,7 +162,7 @@ private String calculateEventsUrl(String eventId) {
 
   @Override
   public ExportResult<CalendarContainerResource> export(
-      TokenAuthData authData, ExportInformation exportInformation) {
+      UUID jobId, TokenAuthData authData, ExportInformation exportInformation) {
     // TODO support pagination
     throw new UnsupportedOperationException();
   }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/dataportabilityproject/transfer/microsoft/contacts/MicrosoftContactsImporter.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 
 import static java.util.stream.Collectors.toList;
 import static org.dataportabilityproject.transfer.microsoft.common.RequestHelper.batchRequest;
@@ -61,7 +62,7 @@ public MicrosoftContactsImporter(
 
   @Override
   public ImportResult importItem(
-      String jobId, TokenAuthData authData, ContactsModelWrapper wrapper) {
+          UUID jobId, TokenAuthData authData, ContactsModelWrapper wrapper) {
     JCardReader reader = new JCardReader(wrapper.getVCards());
     try {
       List<VCard> cards = reader.readAll();

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/dataportabilityproject/transfer/microsoft/integration/LocalExportTestRunner.java
Patch:
@@ -7,6 +7,8 @@
 import org.dataportabilityproject.types.transfer.auth.TokenAuthData;
 import org.dataportabilityproject.types.transfer.models.contacts.ContactsModelWrapper;
 
+import java.util.UUID;
+
 /** Runs a contacts export using a local setup. */
 @Deprecated
 public class LocalExportTestRunner {
@@ -20,6 +22,6 @@ public static void main(String... args) throws Exception {
 
     Exporter<TokenAuthData, ContactsModelWrapper> contacts =
         (Exporter<TokenAuthData, ContactsModelWrapper>) serviceProvider.getExporter("contacts");
-    ExportResult<ContactsModelWrapper> wrapper = contacts.export(token);
+    ExportResult<ContactsModelWrapper> wrapper = contacts.export(UUID.randomUUID(), token);
   }
 }

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/dataportabilityproject/transfer/microsoft/integration/MicrosoftCalendarExportTest.java
Patch:
@@ -30,6 +30,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.util.UUID;
+
 /**
  * Verifies Calendar export using mock HTTP endpoints that replay responses from the Microsoft Graph
  * API.
@@ -231,7 +233,7 @@ public void testExport() throws Exception {
     MicrosoftCalendarExporter exporter =
         new MicrosoftCalendarExporter(baseUrl.toString(), client, mapper, transformerService);
 
-    ExportResult<CalendarContainerResource> resource = exporter.export(token);
+    ExportResult<CalendarContainerResource> resource = exporter.export(UUID.randomUUID(), token);
 
     CalendarContainerResource calendarResource = resource.getExportedData();
 

File: extensions/data-transfer/portability-data-transfer-microsoft/src/test/java/org/dataportabilityproject/transfer/microsoft/integration/MicrosoftCalendarImportTest.java
Patch:
@@ -218,7 +218,7 @@ public void testImport() throws Exception {
     CalendarContainerResource resource =
         new CalendarContainerResource(singleton(calendarModel), singleton(eventModel));
 
-    ImportResult result = importer.importItem(JOB_ID.toString(), token, resource);
+    ImportResult result = importer.importItem(JOB_ID, token, resource);
 
     Assert.assertEquals(ImportResult.ResultType.OK, result.getType());
 

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/provider/Importer.java
Patch:
@@ -18,6 +18,8 @@
 import org.dataportabilityproject.types.transfer.auth.AuthData;
 import org.dataportabilityproject.types.transfer.models.DataModel;
 
+import java.util.UUID;
+
 /** Imports data into a destination service. */
 public interface Importer<A extends AuthData, T extends DataModel> {
   /**
@@ -29,5 +31,5 @@ public interface Importer<A extends AuthData, T extends DataModel> {
    * @return the operation result
    */
   // REVIEW: The original throws IOException. Continue to use or return as part of the result?
-  ImportResult importItem(String jobId, A authData, T data);
+  ImportResult importItem(UUID jobId, A authData, T data);
 }

File: extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/dataportabilityproject/datatransfer/flickr/photos/FlickrPhotosExporter.java
Patch:
@@ -95,6 +95,8 @@ static String toMimeType(String flickrFormat) {
       case "jpg":
       case "jpeg":
         return "image/jpeg";
+      case "png":
+        return "image/png";
       default:
         throw new IllegalArgumentException("Don't know how to map: " + flickrFormat);
     }

File: extensions/data-transfer/portability-data-transfer-flickr/src/test/java/org/dataportabilityproject/datatransfer/flickr/photos/FlickrPhotosExporterTest.java
Patch:
@@ -86,7 +86,7 @@ public void toCommonPhoto() {
   @Test
   public void getMimeType() {
     assertThat(FlickrPhotosExporter.toMimeType("jpeg")).isEqualTo("image/jpeg");
-    assertThrows(IllegalArgumentException.class, () -> FlickrPhotosExporter.toMimeType("png"));
+    assertThrows(IllegalArgumentException.class, () -> FlickrPhotosExporter.toMimeType("gif"));
   }
 
   @Test

File: extensions/auth/portability-auth-google/src/main/java/org/dataportabilityproject/auth/google/GoogleAuthDataGenerator.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.api.client.json.jackson2.JacksonFactory;
 import com.google.api.services.calendar.CalendarScopes;
 import com.google.api.services.people.v1.PeopleServiceScopes;
+import com.google.api.services.tasks.TasksScopes;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableCollection;
@@ -45,7 +46,7 @@
 public class GoogleAuthDataGenerator implements AuthDataGenerator {
   // TODO: Reduce requested scopes by service and authorization mode (readwrite/read)
   private static final ImmutableCollection<String> SCOPES =
-      ImmutableSet.of(CalendarScopes.CALENDAR, PeopleServiceScopes.CONTACTS);
+      ImmutableSet.of(CalendarScopes.CALENDAR, PeopleServiceScopes.CONTACTS, TasksScopes.TASKS);
 
   private final String redirectPath;
   private final String clientId;

File: extensions/auth/portability-auth-google/src/main/java/org/dataportabilityproject/auth/google/GoogleAuthServiceExtension.java
Patch:
@@ -33,8 +33,9 @@
 public class GoogleAuthServiceExtension implements AuthServiceExtension {
   private static final Logger logger = LoggerFactory.getLogger(GoogleAuthServiceExtension.class);
   private static final String REDIRECT_PATH = "/callback/google";
+  // TODO: share this between AuthServiceExtension and TransferExtension
   private static final ImmutableList<String> DEFAULT_AUTH_GENERATOR_SERVICES =
-      ImmutableList.of("contacts", "calendar");
+      ImmutableList.of("contacts", "calendar", "tasks");
   private volatile GoogleAuthDataGenerator authDataGenerator;
 
   public GoogleAuthServiceExtension() {}

File: extensions/auth/portability-auth-google/src/test/java/org/dataportabilityproject/auth/google/GoogleAuthDataGeneratorTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.api.client.http.HttpTransport;
 import com.google.api.services.calendar.CalendarScopes;
 import com.google.api.services.people.v1.PeopleServiceScopes;
+import com.google.api.services.tasks.TasksScopes;
 import org.dataportabilityproject.spi.gateway.types.AuthFlowConfiguration;
 import org.junit.Assert;
 import org.junit.Test;
@@ -29,6 +30,8 @@ public void generateConfiguration() {
             + CalendarScopes.CALENDAR
             + "%20"
             + PeopleServiceScopes.CONTACTS
+            + "%20"
+            + TasksScopes.TASKS
             + "&state=NTQzMjE%3D",
         config.getUrl());
   }

File: libraries/config/src/main/java/org/dataportabilityproject/config/ConfigUtils.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.dataportabilityproject.security;
+package org.dataportabilityproject.config;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
@@ -24,8 +24,6 @@
 import java.io.SequenceInputStream;
 import java.util.Map;
 
-// TODO(rtannenbaum): Move this out of security/ into a new module config/. Couldn't figure it
-// out in Intellij.
 /**
  * Common utilities for yaml configuration parsing.
  */

File: libraries/config/src/test/java/ConfigUtilsTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
-import org.dataportabilityproject.security.ConfigUtils;
+import org.dataportabilityproject.config.ConfigUtils;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.runners.MockitoJUnitRunner;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ReferenceApiModule.java
Patch:
@@ -31,9 +31,9 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import javax.inject.Named;
+import org.dataportabilityproject.config.ConfigUtils;
 import org.dataportabilityproject.gateway.ApiSettings;
 import org.dataportabilityproject.security.AsymmetricKeyGenerator;
-import org.dataportabilityproject.security.ConfigUtils;
 import org.dataportabilityproject.security.RsaSymmetricKeyGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerExtensionContext.java
Patch:
@@ -26,8 +26,8 @@
 import org.dataportabilityproject.api.launcher.ExtensionContext;
 import org.dataportabilityproject.api.launcher.Logger;
 import org.dataportabilityproject.api.launcher.TypeManager;
+import org.dataportabilityproject.config.ConfigUtils;
 import org.dataportabilityproject.launcher.impl.TypeManagerImpl;
-import org.dataportabilityproject.security.ConfigUtils;
 import org.dataportabilityproject.types.transfer.auth.TokenAuthData;
 import org.dataportabilityproject.types.transfer.auth.TokensAndUrlAuthData;
 

File: extensions/cloud/portability-cloud-local/src/main/java/org/dataportabilityproject/cloud/local/LocalJobStore.java
Patch:
@@ -19,13 +19,13 @@
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.cloud.types.JobAuthorization;
 import org.dataportabilityproject.spi.cloud.types.PortabilityJob;
+import org.dataportabilityproject.types.transfer.models.DataModel;
 
 import java.io.IOException;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
-import org.dataportabilityproject.types.transfer.models.DataModel;
 
 /** An in-memory {@link JobStore} implementation that uses a concurrent map as its store. */
 public final class LocalJobStore implements JobStore {

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/createjob/CreateJobAction.java
Patch:
@@ -57,7 +57,7 @@ private static PortabilityJob createJob(
     // Job auth data
     JobAuthorization jobAuthorization =
         JobAuthorization.builder()
-            .setEncryptedSessionKey(encodedSessionKey)
+            .setEncodedSessionKey(encodedSessionKey)
             .setState(JobAuthorization.State.INITIAL)
             .build();
 

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/DataTransferHandler.java
Patch:
@@ -135,7 +135,7 @@ public void handle(HttpExchange exchange) throws IOException {
     if (authFlowConfiguration.getInitialAuthData() != null) {
 
       // Retrieve and parse the session key from the job
-      String sessionKey = job.jobAuthorization().encryptedSessionKey();
+      String sessionKey = job.jobAuthorization().encodedSessionKey();
       SecretKey key = symmetricKeyGenerator.parse(BaseEncoding.base64Url().decode(sessionKey));
 
       // Ensure intial auth data for export has not already been set

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/Oauth2CallbackHandler.java
Patch:
@@ -152,7 +152,7 @@ private String handleExchange(HttpExchange exchange) throws IOException {
           service);
 
       // Obtain the session key for this job
-      String encodedSessionKey = job.jobAuthorization().encryptedSessionKey();
+      String encodedSessionKey = job.jobAuthorization().encodedSessionKey();
       SecretKey key =
           symmetricKeyGenerator.parse(BaseEncoding.base64Url().decode(encodedSessionKey));
 

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/OauthCallbackHandler.java
Patch:
@@ -140,7 +140,7 @@ private String handleExchange(HttpExchange exchange) throws IOException {
           service);
 
       // Obtain the session key for this job
-      String encodedSessionKey = job.jobAuthorization().encryptedSessionKey();
+      String encodedSessionKey = job.jobAuthorization().encodedSessionKey();
       SecretKey key =
           symmetricKeyGenerator.parse(BaseEncoding.base64Url().decode(encodedSessionKey));
 

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/SetupHandler.java
Patch:
@@ -162,7 +162,7 @@ private DataTransferResponse handleImportSetup(
     if (authFlowConfiguration.getInitialAuthData() != null) {
 
       // Retrieve and parse the session key from the job
-      String sessionKey = job.jobAuthorization().encryptedSessionKey();
+      String sessionKey = job.jobAuthorization().encodedSessionKey();
       SecretKey key = symmetricKeyGenerator.parse(BaseEncoding.base64Url().decode(sessionKey));
 
       // Ensure intial auth data for import has not already been set

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/SimpleLoginSubmitHandler.java
Patch:
@@ -150,7 +150,7 @@ DataTransferResponse handleExchange(HttpExchange exchange) throws IOException {
       Preconditions.checkNotNull(authData, "Auth data should not be null");
 
       // Obtain the session key for this job
-      String encodedSessionKey = job.jobAuthorization().encryptedSessionKey();
+      String encodedSessionKey = job.jobAuthorization().encodedSessionKey();
       SecretKey key =
           symmetricKeyGenerator.parse(BaseEncoding.base64Url().decode(encodedSessionKey));
       // Serialize and encrypt the auth data

File: portability-spi-cloud/src/test/java/org/dataportabilityproject/spi/cloud/types/PortabilityJobTest.java
Patch:
@@ -35,7 +35,7 @@ public void verifySerializeDeserialize() throws Exception {
     JobAuthorization jobAuthorization =
         JobAuthorization.builder()
             .setState(JobAuthorization.State.INITIAL)
-            .setEncryptedSessionKey("foo")
+            .setEncodedSessionKey("foo")
             .build();
 
     PortabilityJob job =

File: portability-worker/src/test/java/org/dataportabilityproject/worker/JobPollingServiceTest.java
Patch:
@@ -113,7 +113,7 @@ public void pollingLifeCycle() throws Exception {
             .setAndValidateJobAuthorization(
                 JobAuthorization.builder()
                     .setState(State.INITIAL)
-                    .setEncryptedSessionKey("fooBar")
+                    .setEncodedSessionKey("fooBar")
                     .build())
             .build();
     store.createJob(TEST_ID, job);

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/SetupHandler.java
Patch:
@@ -109,7 +109,6 @@ public void handle(HttpExchange exchange) throws IOException {
       Preconditions.checkState(!Strings.isNullOrEmpty(importService), "Import service is invalid");
 
       DataTransferResponse response;
-
       if (mode == Mode.IMPORT) {
         response = handleImportSetup(exchange.getRequestHeaders(), job, jobId);
       } else {
@@ -152,7 +151,7 @@ private DataTransferResponse handleImportSetup(
 
     String encodedJobId = ReferenceApiUtils.encodeJobId(jobId);
     AuthFlowConfiguration authFlowConfiguration =
-        generator.generateConfiguration(apiSettings.getBaseUrl(), encodedJobId);
+        generator.generateConfiguration(apiSettings.getBaseApiUrl(), encodedJobId);
     Preconditions.checkNotNull(
         authFlowConfiguration,
         "AuthFlowConfiguration not found for type: %s, service: %s",

File: libraries/security/src/main/java/org/dataportabilityproject/security/DecrypterImpl.java
Patch:
@@ -45,7 +45,7 @@ final class DecrypterImpl implements Decrypter {
   @Override
   public String decrypt(String encrypted) {
     byte[] data = BaseEncoding.base64Url().decode(encrypted);
-    return new String(data, Charsets.UTF_8);;
+    return new String(data, Charsets.UTF_8);
     //   System.arraycopy(decrypted, 8, data, 0, data.length);
     //   return new String(data, Charsets.UTF_8);
     // TODO(#258): Encryption temporarily disabled to get local demo working. Issue is:

File: portability-bootstrap-vm/src/main/java/org/dataportabilityproject/bootstrap/vm/SingleVMMain.java
Patch:
@@ -42,7 +42,7 @@ public void initializeGateway() {
     ApiMain apiMain = new ApiMain();
 
     try (InputStream stream =
-        ReferenceApiServer.class.getClassLoader().getResourceAsStream("portability.keystore.jks")) {
+        ReferenceApiServer.class.getClassLoader().getResourceAsStream("demo-selfsigned-keystore.jks")) {
       if (stream == null) {
         throw new IllegalArgumentException("Demo keystore was not found");
       }

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/DataTransferHandler.java
Patch:
@@ -122,7 +122,7 @@ public void handle(HttpExchange exchange) throws IOException {
         request.getSource());
 
     AuthFlowConfiguration authFlowConfiguration =
-        generator.generateConfiguration(apiSettings.getBaseUrl(), encodedJobId);
+        generator.generateConfiguration(apiSettings.getBaseApiUrl(), encodedJobId);
     Preconditions.checkNotNull(
         authFlowConfiguration,
         "AuthFlowConfiguration not found for type: %s, service: %s",

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/storage/AppCredentialStore.java
Patch:
@@ -16,16 +16,18 @@
 
 package org.dataportabilityproject.spi.cloud.storage;
 
-import java.io.IOException;
 import org.dataportabilityproject.types.transfer.auth.AppCredentials;
 
+import java.io.IOException;
+
 /**
  * Storage of app credentials, e.g. OAuth client IDs/keys and secrets.
  *
  * <p>This class is intended to be implemented by extensions that support storage in various
  * back-end services.
  */
 public interface AppCredentialStore {
+
   // Get an app credential (i.e. app key or secret).
   AppCredentials getAppCredentials(String keyName, String secretName) throws IOException;
 }

File: portability-api-launcher/src/main/java/org/dataportabilityproject/api/launcher/TypeManager.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.spi.cloud.types;
+package org.dataportabilityproject.api.launcher;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 

File: portability-api-launcher/src/main/java/org/dataportabilityproject/launcher/impl/TypeManagerImpl.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.dataportabilityproject.cloud.types;
+package org.dataportabilityproject.launcher.impl;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 
 /** Jackson-based type manager that supports polymorphic type handling. */
 public class TypeManagerImpl implements TypeManager {

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/CopySetupHandler.java
Patch:
@@ -20,7 +20,7 @@
 import org.dataportabilityproject.gateway.ApiSettings;
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 
 /** {@link HttpHandler} that handles starting a copy job. */

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/DataTransferHandler.java
Patch:
@@ -39,7 +39,7 @@
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.cloud.types.JobAuthorization;
 import org.dataportabilityproject.spi.cloud.types.PortabilityJob;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthDataGenerator;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry.AuthMode;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ImportSetupHandler.java
Patch:
@@ -20,7 +20,7 @@
 import org.dataportabilityproject.gateway.ApiSettings;
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 
 /** {@link HttpHandler} that handles starting a import job. */

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ListDataTypesHandler.java
Patch:
@@ -30,7 +30,7 @@
 import org.dataportabilityproject.gateway.action.listdatatypes.ListDataTypesActionRequest;
 import org.dataportabilityproject.gateway.action.listdatatypes.ListDataTypesActionResponse;
 import org.dataportabilityproject.gateway.reference.ReferenceApiUtils.HttpMethods;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.types.client.transfer.ListDataTypesResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ListServicesHandler.java
Patch:
@@ -30,7 +30,7 @@
 import org.dataportabilityproject.gateway.action.listservices.ListServicesActionRequest;
 import org.dataportabilityproject.gateway.action.listservices.ListServicesActionResponse;
 import org.dataportabilityproject.gateway.reference.ReferenceApiUtils.HttpMethods;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.types.client.transfer.ListServicesResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/Oauth2CallbackHandler.java
Patch:
@@ -38,7 +38,7 @@
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.cloud.types.PortabilityJob;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthDataGenerator;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry.AuthMode;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/OauthCallbackHandler.java
Patch:
@@ -36,7 +36,7 @@
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.cloud.types.PortabilityJob;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthDataGenerator;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry.AuthMode;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/SetupHandler.java
Patch:
@@ -37,7 +37,7 @@
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.cloud.types.JobAuthorization;
 import org.dataportabilityproject.spi.cloud.types.PortabilityJob;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthDataGenerator;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry.AuthMode;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/SimpleLoginSubmitHandler.java
Patch:
@@ -35,7 +35,7 @@
 import org.dataportabilityproject.security.SymmetricKeyGenerator;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 import org.dataportabilityproject.spi.cloud.types.PortabilityJob;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.spi.gateway.auth.AuthDataGenerator;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry.AuthMode;

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/StartCopyHandler.java
Patch:
@@ -29,7 +29,7 @@
 import org.dataportabilityproject.gateway.action.startjob.StartJobActionRequest;
 import org.dataportabilityproject.gateway.action.startjob.StartJobActionResponse;
 import org.dataportabilityproject.gateway.reference.ReferenceApiUtils.HttpMethods;
-import org.dataportabilityproject.spi.cloud.types.TypeManager;
+import org.dataportabilityproject.api.launcher.TypeManager;
 import org.dataportabilityproject.types.client.transfer.DataTransferResponse;
 import org.dataportabilityproject.types.client.transfer.DataTransferResponse.Status;
 

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/extension/CloudExtensionModule.java
Patch:
@@ -26,7 +26,9 @@
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 
 /**
- * Guice module that must be implemented by Cloud extensions.
+ * Guice module that must be implemented by Cloud extensions who want to use Guice. See example in
+ * extensions/cloud/portability-cloud-google. Extensions may also opt to manually construct storage
+ * interfaces (i.e. 'new' them), see extensions/cloud/portability-cloud-microsoft for an example.
  */
 public class CloudExtensionModule extends AbstractModule {
 

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerMain.java
Patch:
@@ -38,7 +38,7 @@ public static void main(String[] args) {
     cloudExtension.initialize(context);
 
     Injector injector =
-        Guice.createInjector(new WorkerModule(context), cloudExtension.getCloudModule());
+        Guice.createInjector(new WorkerModule(cloudExtension, context));
     Worker worker = injector.getInstance(Worker.class);
     worker.doWork();
 

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerMain.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data Transfer Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: portability-api/src/main/java/org/dataportabilityproject/webapp/StartCopyHandler.java
Patch:
@@ -124,13 +124,13 @@ private void handleWorkerAssignmentFlow(HttpExchange exchange, UUID jobId) throw
     Preconditions.checkArgument(
         !Strings.isNullOrEmpty(importAuthCookieValue), "Import auth cookie required");
 
-    // We have the data, now update to 'pending worker assignment' so a worker may be assigned
+    // We have the data, now update to 'CREDS_AVAILABLE' so a worker may poll the job.
     job = job.toBuilder().setJobState(JobAuthorization.State.CREDS_AVAILABLE).build();
     store.update(jobId, job, JobAuthorization.State.INITIAL);
     logger.debug("Updated job {} to CREDS_AVAILABLE", jobId);
 
-    // Loop until the worker updates it to assigned without auth data state, e.g. at that point
-    // the worker instance key will be populated
+    // Loop until the worker updates it to 'CREDS_ENCRYPTION_KEY_GENERATED' state, e.g. at that
+    // point the worker instance key will be populated.
     // TODO: start new thread
     // TODO: implement timeout condition
     // TODO: Handle case where API dies while waiting

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/InMemoryTransferCopier.java
Patch:
@@ -29,8 +29,7 @@
  */
 public interface InMemoryTransferCopier {
     /* Copies the provided dataType from exportService to importService */
-    void copyDataType(TransferServiceProviderRegistry registry,
-                      String dataType,
+    void copyDataType(String dataType,
                       String exportService,
                       AuthData exportAuthData,
                       String importService,

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerJobMetadata.java
Patch:
@@ -22,8 +22,6 @@
 import java.security.KeyPair;
 import java.util.UUID;
 
-import org.dataportabilityproject.job.PublicPrivateKeyPairGenerator;
-
 /**
  * A class that contains the value of the job and key for a worker instance. This classes uses
  * the initialization-on-demand holder idiom to ensure it is a singleton.

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerModule.java
Patch:
@@ -1,12 +1,10 @@
 package org.dataportabilityproject.worker;
 
 import com.google.inject.AbstractModule;
-import org.dataportabilityproject.PortabilityCoreModule;
 
 public class WorkerModule extends AbstractModule {
 
     @Override
     protected void configure() {
-        install(new PortabilityCoreModule());
     }
 }

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/ApiMain.java
Patch:
@@ -41,7 +41,7 @@ public void uncaughtException(Thread thread, Throwable t) {
       }
     });
 
-    // TODO: Support other server implementations
+    // TODO: Support other server implementations, e.g. Jetty, Tomcat
     Injector injector = Guice.createInjector(new ReferenceApiModule());
 
     // Launch the application

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/ApiSettings.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,7 +20,6 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.base.MoreObjects;
 
-
 /**
  * Settings for {@code ApiServer}.
  */

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/ActionUtils.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,7 +18,7 @@
 import com.google.common.base.Strings;
 
 /**
- * Handles an action in the API server.
+ * Helper functions for validating action related data.
  */
 public final class ActionUtils {
 

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/createjob/CreateJobActionModule.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/listdatatypes/ListDataTypesActionModule.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/listdatatypes/ListDataTypesActionRequest.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.dataportabilityproject.gateway.action.listdatatypes;
 
-import org.dataportabilityproject.types.client.transfer.AbstractDataTransfer;
-
 /**
  * A request to list data types available for export and import.
  */

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/listservices/ListServicesAction.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/action/listservices/ListServicesActionModule.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,7 +16,6 @@
 package org.dataportabilityproject.gateway.action.listservices;
 
 import com.google.inject.AbstractModule;
-import org.dataportabilityproject.gateway.action.Action;
 import org.dataportabilityproject.spi.gateway.auth.AuthServiceProviderRegistry;
 
 /**

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/crypto/Encrypter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,7 +16,7 @@
 package org.dataportabilityproject.gateway.crypto;
 
 /**
- * Encrypts data for the given key type.
+ * Provides functionality to encrypt raw data.
  */
 public interface Encrypter {
 

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/crypto/RsaSymmetricKeyGenerator.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -45,3 +45,4 @@ public KeyPair generate() {
     return kpg.genKeyPair();
   }
 }
+

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/JsonKeys.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ListDataTypesHandler.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -37,7 +37,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * HttpHandler for the {@link CreateJobAction}.
+ * HttpHandler for the {@link ListDataTypesAction}.
  */
 final class ListDataTypesHandler implements HttpHandler {
 

File: portability-gateway/src/main/java/org/dataportabilityproject/gateway/reference/ListServicesHandler.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Google Inc.
+ * Copyright 2018 The Data-Portability Project Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -37,7 +37,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * HttpHandler for the {@link CreateJobAction}.
+ * HttpHandler for the {@link ListServicesAction}.
  */
 final class ListServicesHandler implements HttpHandler {
 

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/types/PortabilityJob.java
Patch:
@@ -59,6 +59,9 @@ public enum State {
 
   public static PortabilityJob.Builder builder() {
     LocalDateTime now = LocalDateTime.now();
+    // TODO: Fix so we don't need fully qualified name here. This is to get IntelliJ to recognize
+    // the class name due to a conflict in package names for our generated code, but the conflict
+    // doesn't cause any actual problems with building.
     return new org.dataportabilityproject.spi.cloud.types.AutoValue_PortabilityJob.Builder()
         .setState(State.NEW)
         .setCreatedTimestamp(now)

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/types/PortabilityJob.java
Patch:
@@ -59,7 +59,7 @@ public enum State {
 
   public static PortabilityJob.Builder builder() {
     LocalDateTime now = LocalDateTime.now();
-    return new AutoValue_PortabilityJob.Builder()
+    return new org.dataportabilityproject.spi.cloud.types.AutoValue_PortabilityJob.Builder()
         .setState(State.NEW)
         .setCreatedTimestamp(now)
         .setLastUpdateTimestamp(now);

File: extensions/cloud/portability-cloud-google/src/main/java/org/dataportabilityproject/cloud/google/GoogleCloudDatastore.java
Patch:
@@ -152,7 +152,7 @@ public void remove(UUID jobId) throws IOException {
   }
 
   /**
-   * Atomically updates the {@link LegacyPortabilityJob} keyed by {@code jobId} to {@code OldPortabilityJob},
+   * Atomically updates the {@link LegacyPortabilityJob} keyed by {@code jobId} to {@code job},
    * in Datastore using a {@link Transaction}, and verifies that it was previously in the expected
    * {@code previousState}.
    *
@@ -172,7 +172,7 @@ public void update(UUID jobId, LegacyPortabilityJob job, JobState previousState)
         transaction.rollback();
         throw new IOException("Could not find record for jobId " + jobId);
       }
-      if (getJobState(previousEntity) != previousState) {
+      if (previousState != null && getJobState(previousEntity) != previousState) {
         throw new IOException("Job " + jobId + " existed in an unexpected state. "
             + "Expected: " + previousState + " but was: " + getJobState(previousEntity));
       }

File: portability-api/src/main/java/org/dataportabilityproject/webapp/CryptoHelper.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.inject.Inject;
 import com.sun.net.httpserver.Headers;
 import java.net.HttpCookie;
+import java.util.UUID;
 import javax.crypto.SecretKey;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
 import org.dataportabilityproject.job.Crypter;
@@ -67,7 +68,7 @@ private static String serialize(AuthData authData) {
    * Encrypts the given {@code authData} with the session-based {@link SecretKey} and stores it as a
    * cookie in the provided headers.
    */
-  void encryptAndSetCookie(Headers headers, String jobId, ServiceMode serviceMode,
+  void encryptAndSetCookie(Headers headers, UUID jobId, ServiceMode serviceMode,
       AuthData authData) {
     SecretKey sessionKey = getSessionKey(jobId);
     String encrypted = encrypt(sessionKey, authData);
@@ -80,7 +81,7 @@ void encryptAndSetCookie(Headers headers, String jobId, ServiceMode serviceMode,
     headers.add(HEADER_SET_COOKIE, cookie.toString() + PortabilityApiUtils.COOKIE_ATTRIBUTES);
   }
 
-  private SecretKey getSessionKey(String jobId) {
+  private SecretKey getSessionKey(UUID jobId) {
     LegacyPortabilityJob job = store.find(jobId);
     Preconditions.checkState(job != null && job.jobState() == JobState.PENDING_AUTH_DATA);
     String encodedSessionKey = job.sessionKey();

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiModule.java
Patch:
@@ -20,15 +20,15 @@
 import com.google.inject.multibindings.MapBinder;
 import com.sun.net.httpserver.HttpHandler;
 import org.dataportabilityproject.PortabilityCoreModule;
-import org.dataportabilityproject.job.PortabilityJobFactory;
+import org.dataportabilityproject.job.IdProvider;
 import org.dataportabilityproject.job.UUIDProvider;
 
 public class PortabilityApiModule extends AbstractModule {
 
   @Override
   protected void configure() {
     install(new PortabilityCoreModule());
-    bind(PortabilityJobFactory.class).toInstance(new PortabilityJobFactory(new UUIDProvider()));
+    bind(IdProvider.class).toInstance(new UUIDProvider());
 
     MapBinder<String, HttpHandler> mapbinder
         = MapBinder.newMapBinder(binder(), String.class, HttpHandler.class);

File: portability-core/src/main/java/org/dataportabilityproject/LocalCopier.java
Patch:
@@ -75,7 +75,7 @@ private <T extends DataModel> void copyDataType(
           .generateAuthData(ioInterface);
     }
 
-    String jobId = UUID.randomUUID().toString();
+    UUID jobId = UUID.randomUUID();
 
     try {
       logger.info("Starting job {}", jobId);

File: portability-core/src/main/java/org/dataportabilityproject/PortabilityCopier.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.util.Optional;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.dataportabilityproject.dataModels.ContinuationInformation;
 import org.dataportabilityproject.dataModels.DataModel;
@@ -41,7 +42,7 @@ public static <T extends DataModel> void copyDataType(ServiceProviderRegistry re
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException {
+      UUID jobId) throws IOException {
 
     Exporter<T> exporter = registry.getExporter(exportService, dataType, jobId, exportAuthData);
     Importer<T> importer = registry.getImporter(importService, dataType, jobId, importAuthData);

File: portability-core/src/main/java/org/dataportabilityproject/ServiceProviderRegistry.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 import java.util.stream.Collectors;
 import javax.inject.Inject;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
@@ -93,7 +94,7 @@ public List<String> getServiceProvidersThatCanImport(PortableDataType portableDa
     public <T extends DataModel> Exporter<T> getExporter(
             String serviceProvider,
             PortableDataType portableDataType,
-            String jobId,
+            UUID jobId,
             AuthData authData) throws IOException {
         JobDataCache jobDataCache = cloudFactory.getJobDataCache(jobId, serviceProvider);
         Exporter<? extends DataModel> exporter = serviceProviders.get(serviceProvider)
@@ -105,7 +106,7 @@ public <T extends DataModel> Exporter<T> getExporter(
     public <T extends DataModel> Importer<T> getImporter(
             String serviceProvider,
             PortableDataType portableDataType,
-            String jobId,
+            UUID jobId,
             AuthData authData) throws IOException {
         JobDataCache jobDataCache = cloudFactory.getJobDataCache(jobId, serviceProvider);
         Importer<? extends DataModel> importer = serviceProviders.get(serviceProvider)

File: portability-core/src/main/java/org/dataportabilityproject/cloud/google/GoogleJobDataCache.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.UUID;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import org.dataportabilityproject.cloud.interfaces.JobDataCache;
@@ -61,10 +62,10 @@ public Blob load(String key) throws Exception {
         }
       });
 
-  public GoogleJobDataCache(Datastore datastore, String jobId, String service) {
+  public GoogleJobDataCache(Datastore datastore, UUID jobId, String service) {
     this.datastore = datastore;
     this.ancestors = ImmutableList.of(
-        PathElement.of(JOB_KIND, jobId),
+        PathElement.of(JOB_KIND, jobId.toString()),
         PathElement.of(SERVICE_KIND, service));
   }
 

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CloudFactory.java
Patch:
@@ -15,15 +15,16 @@
  */
 package org.dataportabilityproject.cloud.interfaces;
 
+import java.util.UUID;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 
 /**
  * Factory for creating object to interact with cloud implementations.
  */
 public interface CloudFactory {
-  JobDataCache getJobDataCache(String jobId, String service);
+  JobDataCache getJobDataCache(UUID jobId, String service);
   JobStore getJobStore();
   CryptoKeyManagementSystem getCryptoKeyManagementSystem();
   BucketStore getBucketStore();
-  void clearJobData(String jobId);
+  void clearJobData(UUID jobId);
 }

File: portability-core/src/main/java/org/dataportabilityproject/job/IdProvider.java
Patch:
@@ -15,8 +15,10 @@
  */
 package org.dataportabilityproject.job;
 
+import java.util.UUID;
+
 /** Provides ids for users of data portability project. */
 public interface IdProvider {
   /** Creates a new unique id. */
-  String createId();
+  UUID createId();
 }

File: portability-core/src/main/java/org/dataportabilityproject/job/UUIDProvider.java
Patch:
@@ -21,7 +21,7 @@
 public class UUIDProvider implements IdProvider {
 
   @Override
-  public String createId() {
-    return UUID.randomUUID().toString();
+  public UUID createId() {
+    return UUID.randomUUID();
   }
 }

File: portability-core/src/main/java/org/dataportabilityproject/shared/auth/PasswordAuthDataGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.google.common.base.Preconditions;
 import java.io.IOException;
+import java.util.UUID;
 import org.dataportabilityproject.shared.IOInterface;
 import org.dataportabilityproject.types.transfer.auth.AuthData;
 
@@ -30,12 +31,12 @@ public AuthData generateAuthData(IOInterface ioInterface) throws IOException {
   }
 
   @Override
-  public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, String id) throws IOException {
+  public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, UUID jobId) throws IOException {
     return AuthFlowInitiator.create(callbackBaseUrl + "/simplelogin");
   }
 
   @Override // online
-  public AuthData generateAuthData(String callbackBaseUrl, String authCode, String id,
+  public AuthData generateAuthData(String callbackBaseUrl, String authCode, UUID jobId,
       AuthData initialAuthData, String extra) throws IOException {
     Preconditions.checkArgument(initialAuthData == null, "initial auth data not expected");
     return PasswordAuthData.create(authCode, extra);

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/InMemoryTransferCopier.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.spi.transfer;
 
 import java.io.IOException;
+import java.util.UUID;
 import org.dataportabilityproject.spi.transfer.provider.TransferServiceProvider;
 import org.dataportabilityproject.spi.transfer.provider.TransferServiceProviderRegistry;
 import org.dataportabilityproject.types.transfer.PortableType;
@@ -33,5 +34,5 @@ void copyDataType(TransferServiceProviderRegistry registry,
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException;
+      UUID jobId) throws IOException;
 }

File: portability-worker/src/main/java/org/dataportabilityproject/worker/PortabilityInMemoryTransferCopier.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.worker;
 
 import java.io.IOException;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.dataportabilityproject.spi.transfer.InMemoryTransferCopier;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
@@ -57,7 +58,7 @@ public void copyDataType(TransferServiceProviderRegistry registry,
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException {
+      UUID jobId) throws IOException {
 
     Exporter<? extends AuthData, ? extends DataModel> exporter = registry.getExporter(exportService, dataType);
     Importer<? extends AuthData, ? extends DataModel> importer = registry.getImporter(importService, dataType);

File: portability-api/src/main/java/org/dataportabilityproject/webapp/CryptoHelper.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.inject.Inject;
 import com.sun.net.httpserver.Headers;
 import java.net.HttpCookie;
+import java.util.UUID;
 import javax.crypto.SecretKey;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
 import org.dataportabilityproject.job.Crypter;
@@ -67,7 +68,7 @@ private static String serialize(AuthData authData) {
    * Encrypts the given {@code authData} with the session-based {@link SecretKey} and stores it as a
    * cookie in the provided headers.
    */
-  void encryptAndSetCookie(Headers headers, String jobId, ServiceMode serviceMode,
+  void encryptAndSetCookie(Headers headers, UUID jobId, ServiceMode serviceMode,
       AuthData authData) {
     SecretKey sessionKey = getSessionKey(jobId);
     String encrypted = encrypt(sessionKey, authData);
@@ -80,7 +81,7 @@ void encryptAndSetCookie(Headers headers, String jobId, ServiceMode serviceMode,
     headers.add(HEADER_SET_COOKIE, cookie.toString() + PortabilityApiUtils.COOKIE_ATTRIBUTES);
   }
 
-  private SecretKey getSessionKey(String jobId) {
+  private SecretKey getSessionKey(UUID jobId) {
     LegacyPortabilityJob job = store.find(jobId);
     Preconditions.checkState(job != null && job.jobState() == JobState.PENDING_AUTH_DATA);
     String encodedSessionKey = job.sessionKey();

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiModule.java
Patch:
@@ -20,15 +20,15 @@
 import com.google.inject.multibindings.MapBinder;
 import com.sun.net.httpserver.HttpHandler;
 import org.dataportabilityproject.PortabilityCoreModule;
-import org.dataportabilityproject.job.PortabilityJobFactory;
+import org.dataportabilityproject.job.IdProvider;
 import org.dataportabilityproject.job.UUIDProvider;
 
 public class PortabilityApiModule extends AbstractModule {
 
   @Override
   protected void configure() {
     install(new PortabilityCoreModule());
-    bind(PortabilityJobFactory.class).toInstance(new PortabilityJobFactory(new UUIDProvider()));
+    bind(IdProvider.class).toInstance(new UUIDProvider());
 
     MapBinder<String, HttpHandler> mapbinder
         = MapBinder.newMapBinder(binder(), String.class, HttpHandler.class);

File: portability-core/src/main/java/org/dataportabilityproject/LocalCopier.java
Patch:
@@ -75,7 +75,7 @@ private <T extends DataModel> void copyDataType(
           .generateAuthData(ioInterface);
     }
 
-    String jobId = UUID.randomUUID().toString();
+    UUID jobId = UUID.randomUUID();
 
     try {
       logger.info("Starting job {}", jobId);

File: portability-core/src/main/java/org/dataportabilityproject/PortabilityCopier.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.util.Optional;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.dataportabilityproject.dataModels.ContinuationInformation;
 import org.dataportabilityproject.dataModels.DataModel;
@@ -41,7 +42,7 @@ public static <T extends DataModel> void copyDataType(ServiceProviderRegistry re
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException {
+      UUID jobId) throws IOException {
 
     Exporter<T> exporter = registry.getExporter(exportService, dataType, jobId, exportAuthData);
     Importer<T> importer = registry.getImporter(importService, dataType, jobId, importAuthData);

File: portability-core/src/main/java/org/dataportabilityproject/ServiceProviderRegistry.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 import java.util.stream.Collectors;
 import javax.inject.Inject;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
@@ -93,7 +94,7 @@ public List<String> getServiceProvidersThatCanImport(PortableDataType portableDa
     public <T extends DataModel> Exporter<T> getExporter(
             String serviceProvider,
             PortableDataType portableDataType,
-            String jobId,
+            UUID jobId,
             AuthData authData) throws IOException {
         JobDataCache jobDataCache = cloudFactory.getJobDataCache(jobId, serviceProvider);
         Exporter<? extends DataModel> exporter = serviceProviders.get(serviceProvider)
@@ -105,7 +106,7 @@ public <T extends DataModel> Exporter<T> getExporter(
     public <T extends DataModel> Importer<T> getImporter(
             String serviceProvider,
             PortableDataType portableDataType,
-            String jobId,
+            UUID jobId,
             AuthData authData) throws IOException {
         JobDataCache jobDataCache = cloudFactory.getJobDataCache(jobId, serviceProvider);
         Importer<? extends DataModel> importer = serviceProviders.get(serviceProvider)

File: portability-core/src/main/java/org/dataportabilityproject/cloud/google/GoogleJobDataCache.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.UUID;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import org.dataportabilityproject.cloud.interfaces.JobDataCache;
@@ -61,10 +62,10 @@ public Blob load(String key) throws Exception {
         }
       });
 
-  public GoogleJobDataCache(Datastore datastore, String jobId, String service) {
+  public GoogleJobDataCache(Datastore datastore, UUID jobId, String service) {
     this.datastore = datastore;
     this.ancestors = ImmutableList.of(
-        PathElement.of(JOB_KIND, jobId),
+        PathElement.of(JOB_KIND, jobId.toString()),
         PathElement.of(SERVICE_KIND, service));
   }
 

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CloudFactory.java
Patch:
@@ -15,15 +15,16 @@
  */
 package org.dataportabilityproject.cloud.interfaces;
 
+import java.util.UUID;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 
 /**
  * Factory for creating object to interact with cloud implementations.
  */
 public interface CloudFactory {
-  JobDataCache getJobDataCache(String jobId, String service);
+  JobDataCache getJobDataCache(UUID jobId, String service);
   JobStore getJobStore();
   CryptoKeyManagementSystem getCryptoKeyManagementSystem();
   BucketStore getBucketStore();
-  void clearJobData(String jobId);
+  void clearJobData(UUID jobId);
 }

File: portability-core/src/main/java/org/dataportabilityproject/job/IdProvider.java
Patch:
@@ -15,8 +15,10 @@
  */
 package org.dataportabilityproject.job;
 
+import java.util.UUID;
+
 /** Provides ids for users of data portability project. */
 public interface IdProvider {
   /** Creates a new unique id. */
-  String createId();
+  UUID createId();
 }

File: portability-core/src/main/java/org/dataportabilityproject/job/UUIDProvider.java
Patch:
@@ -21,7 +21,7 @@
 public class UUIDProvider implements IdProvider {
 
   @Override
-  public String createId() {
-    return UUID.randomUUID().toString();
+  public UUID createId() {
+    return UUID.randomUUID();
   }
 }

File: portability-core/src/main/java/org/dataportabilityproject/shared/auth/PasswordAuthDataGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.google.common.base.Preconditions;
 import java.io.IOException;
+import java.util.UUID;
 import org.dataportabilityproject.shared.IOInterface;
 import org.dataportabilityproject.types.transfer.auth.AuthData;
 
@@ -30,12 +31,12 @@ public AuthData generateAuthData(IOInterface ioInterface) throws IOException {
   }
 
   @Override
-  public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, String id) throws IOException {
+  public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, UUID jobId) throws IOException {
     return AuthFlowInitiator.create(callbackBaseUrl + "/simplelogin");
   }
 
   @Override // online
-  public AuthData generateAuthData(String callbackBaseUrl, String authCode, String id,
+  public AuthData generateAuthData(String callbackBaseUrl, String authCode, UUID jobId,
       AuthData initialAuthData, String extra) throws IOException {
     Preconditions.checkArgument(initialAuthData == null, "initial auth data not expected");
     return PasswordAuthData.create(authCode, extra);

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/InMemoryTransferCopier.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.spi.transfer;
 
 import java.io.IOException;
+import java.util.UUID;
 import org.dataportabilityproject.spi.transfer.provider.TransferServiceProvider;
 import org.dataportabilityproject.spi.transfer.provider.TransferServiceProviderRegistry;
 import org.dataportabilityproject.types.transfer.PortableType;
@@ -33,5 +34,5 @@ void copyDataType(TransferServiceProviderRegistry registry,
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException;
+      UUID jobId) throws IOException;
 }

File: portability-worker/src/main/java/org/dataportabilityproject/worker/PortabilityInMemoryTransferCopier.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.worker;
 
 import java.io.IOException;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.dataportabilityproject.spi.transfer.InMemoryTransferCopier;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
@@ -57,7 +58,7 @@ public void copyDataType(TransferServiceProviderRegistry registry,
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException {
+      UUID jobId) throws IOException {
 
     Exporter<? extends AuthData, ? extends DataModel> exporter = registry.getExporter(exportService, dataType);
     Importer<? extends AuthData, ? extends DataModel> importer = registry.getImporter(importService, dataType);

File: extensions/cloud/portability-cloud-google/src/main/java/org/dataportabilityproject/cloud/google/GoogleCloudDatastore.java
Patch:
@@ -152,7 +152,7 @@ public void remove(String jobId) throws IOException {
   }
 
   /**
-   * Atomically updates the {@link LegacyPortabilityJob} keyed by {@code jobId} to {@code OldPortabilityJob},
+   * Atomically updates the {@link LegacyPortabilityJob} keyed by {@code jobId} to {@code job},
    * in Datastore using a {@link Transaction}, and verifies that it was previously in the expected
    * {@code previousState}.
    *
@@ -173,7 +173,7 @@ public void update(LegacyPortabilityJob job, JobState previousState)
         transaction.rollback();
         throw new IOException("Could not find record for jobId " + jobId);
       }
-      if (getJobState(previousEntity) != previousState) {
+      if (previousState != null && getJobState(previousEntity) != previousState) {
         throw new IOException("Job " + jobId + " existed in an unexpected state. "
             + "Expected: " + previousState + " but was: " + getJobState(previousEntity));
       }

File: portability-api/src/main/java/org/dataportabilityproject/webapp/DataTransferHandler.java
Patch:
@@ -127,7 +127,7 @@ DataTransferResponse handleExchange(HttpExchange exchange) throws IOException {
       createJob(jobId, dataType, exportService, importService);
 
       // Set new cookie
-      HttpCookie cookie = new HttpCookie(JsonKeys.ID_COOKIE_KEY, JobUtils.encodeId(jobId));
+      HttpCookie cookie = new HttpCookie(JsonKeys.ID_COOKIE_KEY, JobUtils.encodeJobId(jobId));
       exchange.getResponseHeaders()
           .add(HEADER_SET_COOKIE, cookie.toString() + PortabilityApiUtils.COOKIE_ATTRIBUTES);
 

File: portability-api/src/main/java/org/dataportabilityproject/webapp/OauthCallbackHandler.java
Patch:
@@ -112,7 +112,7 @@ private String handleExchange(HttpExchange exchange) throws IOException {
       // Valid job must be present
       Preconditions
           .checkArgument(!Strings.isNullOrEmpty(encodedIdCookie), "Encoded Id cookie required");
-      UUID jobId = JobUtils.decodeId(encodedIdCookie);
+      UUID jobId = JobUtils.decodeJobId(encodedIdCookie);
 
       LegacyPortabilityJob job = commonSettings.getEncryptedFlow()
           ? store.find(jobId, JobState.PENDING_AUTH_DATA) : store.find(jobId);

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiUtils.java
Patch:
@@ -190,7 +190,7 @@ public static UUID validateJobId(Headers requestHeaders, TokenManager tokenManag
         .checkArgument(!Strings.isNullOrEmpty(encodedIdCookie), "Encoded Id cookie required");
 
     // Valid job must be present
-    UUID jobId = JobUtils.decodeId(encodedIdCookie);
+    UUID jobId = JobUtils.decodeJobId(encodedIdCookie);
 
     // Validate XSRF token is present in request header and in the token.
     String tokenHeader = parseXsrfTokenHeader(requestHeaders);

File: portability-api/src/main/java/org/dataportabilityproject/webapp/SetupHandler.java
Patch:
@@ -90,7 +90,7 @@ public void handle(HttpExchange exchange) throws IOException {
           .checkArgument(!Strings.isNullOrEmpty(encodedIdCookie), "Encoded Id cookie required");
 
       // Valid job must be present
-      UUID jobId = JobUtils.decodeId(encodedIdCookie);
+      UUID jobId = JobUtils.decodeJobId(encodedIdCookie);
       LegacyPortabilityJob job = commonSettings.getEncryptedFlow()
           ? store.find(jobId, JobState.PENDING_AUTH_DATA) : store.find(jobId);
       Preconditions.checkNotNull(job, "existing job not found for jobId: %s", jobId);

File: portability-api/src/main/java/org/dataportabilityproject/webapp/SimpleLoginSubmitHandler.java
Patch:
@@ -96,7 +96,7 @@ DataTransferResponse handleExchange(HttpExchange exchange) throws IOException {
           .getCookie(exchange.getRequestHeaders(), JsonKeys.ID_COOKIE_KEY);
       Preconditions
           .checkArgument(!Strings.isNullOrEmpty(encodedIdCookie), "Encoded Id Cookie required");
-      UUID jobId = JobUtils.decodeId(encodedIdCookie);
+      UUID jobId = JobUtils.decodeJobId(encodedIdCookie);
 
       LegacyPortabilityJob job = commonSettings.getEncryptedFlow()
           ? store.find(jobId, JobState.PENDING_AUTH_DATA) : store.find(jobId);

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/google/GoogleAuth.java
Patch:
@@ -71,7 +71,7 @@ public AuthData generateAuthData(IOInterface ioInterface) throws IOException {
 
   @Override
   public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, UUID jobId) throws IOException {
-    String encodedJobId = JobUtils.encodeId(jobId);
+    String encodedJobId = JobUtils.encodeJobId(jobId);
     String url = createFlow()
         .newAuthorizationUrl()
         .setRedirectUri(callbackBaseUrl + CALLBACK_PATH)

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/instagram/InstagramAuth.java
Patch:
@@ -106,7 +106,7 @@ private synchronized NetHttpTransport getTransport() {
 
   @Override
   public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, UUID jobId) throws IOException {
-    String encodedJobId = JobUtils.encodeId(jobId);
+    String encodedJobId = JobUtils.encodeJobId(jobId);
     String url = createFlow()
         .newAuthorizationUrl()
         .setRedirectUri(callbackBaseUrl + CALLBACK_PATH)

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/microsoft/MicrosoftAuth.java
Patch:
@@ -78,7 +78,7 @@ private static MicrosoftOauthData toAuthData(Credential credential) {
 
   @Override
   public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, UUID jobId) throws IOException {
-    String encodedJobId = JobUtils.encodeId(jobId);
+    String encodedJobId = JobUtils.encodeJobId(jobId);
     String url = createFlow()
         .newAuthorizationUrl()
         .setRedirectUri(callbackBaseUrl + CALLBACK_PATH)

File: portability-core/src/test/java/org/dataportabilityproject/job/JobUtilsTest.java
Patch:
@@ -15,7 +15,7 @@ public class JobUtilsTest {
   @Test
   public void encodeDecodeRoundTrip() throws Exception {
     UUID jobId = UUID.randomUUID();
-    assertThat(JobUtils.decodeId(JobUtils.encodeId(jobId))).isEqualTo(jobId);
+    assertThat(JobUtils.decodeJobId(JobUtils.encodeJobId(jobId))).isEqualTo(jobId);
   }
 
   @Test

File: portability-api/src/main/java/org/dataportabilityproject/webapp/CryptoHelper.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.inject.Inject;
 import com.sun.net.httpserver.Headers;
 import java.net.HttpCookie;
+import java.util.UUID;
 import javax.crypto.SecretKey;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
 import org.dataportabilityproject.job.Crypter;
@@ -67,7 +68,7 @@ private static String serialize(AuthData authData) {
    * Encrypts the given {@code authData} with the session-based {@link SecretKey} and stores it as a
    * cookie in the provided headers.
    */
-  void encryptAndSetCookie(Headers headers, String jobId, ServiceMode serviceMode,
+  void encryptAndSetCookie(Headers headers, UUID jobId, ServiceMode serviceMode,
       AuthData authData) {
     SecretKey sessionKey = getSessionKey(jobId);
     String encrypted = encrypt(sessionKey, authData);
@@ -80,7 +81,7 @@ void encryptAndSetCookie(Headers headers, String jobId, ServiceMode serviceMode,
     headers.add(HEADER_SET_COOKIE, cookie.toString() + PortabilityApiUtils.COOKIE_ATTRIBUTES);
   }
 
-  private SecretKey getSessionKey(String jobId) {
+  private SecretKey getSessionKey(UUID jobId) {
     LegacyPortabilityJob job = store.find(jobId);
     Preconditions.checkState(job != null && job.jobState() == JobState.PENDING_AUTH_DATA);
     String encodedSessionKey = job.sessionKey();

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiModule.java
Patch:
@@ -20,15 +20,15 @@
 import com.google.inject.multibindings.MapBinder;
 import com.sun.net.httpserver.HttpHandler;
 import org.dataportabilityproject.PortabilityCoreModule;
-import org.dataportabilityproject.job.PortabilityJobFactory;
+import org.dataportabilityproject.job.IdProvider;
 import org.dataportabilityproject.job.UUIDProvider;
 
 public class PortabilityApiModule extends AbstractModule {
 
   @Override
   protected void configure() {
     install(new PortabilityCoreModule());
-    bind(PortabilityJobFactory.class).toInstance(new PortabilityJobFactory(new UUIDProvider()));
+    bind(IdProvider.class).toInstance(new UUIDProvider());
 
     MapBinder<String, HttpHandler> mapbinder
         = MapBinder.newMapBinder(binder(), String.class, HttpHandler.class);

File: portability-core/src/main/java/org/dataportabilityproject/LocalCopier.java
Patch:
@@ -75,7 +75,7 @@ private <T extends DataModel> void copyDataType(
           .generateAuthData(ioInterface);
     }
 
-    String jobId = UUID.randomUUID().toString();
+    UUID jobId = UUID.randomUUID();
 
     try {
       logger.info("Starting job {}", jobId);

File: portability-core/src/main/java/org/dataportabilityproject/PortabilityCopier.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.util.Optional;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.dataportabilityproject.dataModels.ContinuationInformation;
 import org.dataportabilityproject.dataModels.DataModel;
@@ -41,7 +42,7 @@ public static <T extends DataModel> void copyDataType(ServiceProviderRegistry re
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException {
+      UUID jobId) throws IOException {
 
     Exporter<T> exporter = registry.getExporter(exportService, dataType, jobId, exportAuthData);
     Importer<T> importer = registry.getImporter(importService, dataType, jobId, importAuthData);

File: portability-core/src/main/java/org/dataportabilityproject/ServiceProviderRegistry.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 import java.util.stream.Collectors;
 import javax.inject.Inject;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
@@ -93,7 +94,7 @@ public List<String> getServiceProvidersThatCanImport(PortableDataType portableDa
     public <T extends DataModel> Exporter<T> getExporter(
             String serviceProvider,
             PortableDataType portableDataType,
-            String jobId,
+            UUID jobId,
             AuthData authData) throws IOException {
         JobDataCache jobDataCache = cloudFactory.getJobDataCache(jobId, serviceProvider);
         Exporter<? extends DataModel> exporter = serviceProviders.get(serviceProvider)
@@ -105,7 +106,7 @@ public <T extends DataModel> Exporter<T> getExporter(
     public <T extends DataModel> Importer<T> getImporter(
             String serviceProvider,
             PortableDataType portableDataType,
-            String jobId,
+            UUID jobId,
             AuthData authData) throws IOException {
         JobDataCache jobDataCache = cloudFactory.getJobDataCache(jobId, serviceProvider);
         Importer<? extends DataModel> importer = serviceProviders.get(serviceProvider)

File: portability-core/src/main/java/org/dataportabilityproject/cloud/google/GoogleJobDataCache.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.UUID;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import org.dataportabilityproject.cloud.interfaces.JobDataCache;
@@ -61,10 +62,10 @@ public Blob load(String key) throws Exception {
         }
       });
 
-  public GoogleJobDataCache(Datastore datastore, String jobId, String service) {
+  public GoogleJobDataCache(Datastore datastore, UUID jobId, String service) {
     this.datastore = datastore;
     this.ancestors = ImmutableList.of(
-        PathElement.of(JOB_KIND, jobId),
+        PathElement.of(JOB_KIND, jobId.toString()),
         PathElement.of(SERVICE_KIND, service));
   }
 

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CloudFactory.java
Patch:
@@ -15,15 +15,16 @@
  */
 package org.dataportabilityproject.cloud.interfaces;
 
+import java.util.UUID;
 import org.dataportabilityproject.spi.cloud.storage.JobStore;
 
 /**
  * Factory for creating object to interact with cloud implementations.
  */
 public interface CloudFactory {
-  JobDataCache getJobDataCache(String jobId, String service);
+  JobDataCache getJobDataCache(UUID jobId, String service);
   JobStore getJobStore();
   CryptoKeyManagementSystem getCryptoKeyManagementSystem();
   BucketStore getBucketStore();
-  void clearJobData(String jobId);
+  void clearJobData(UUID jobId);
 }

File: portability-core/src/main/java/org/dataportabilityproject/cloud/local/InMemoryJobDataCache.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.HashMap;
+import java.util.UUID;
 import org.dataportabilityproject.cloud.interfaces.JobDataCache;
 
 public final class InMemoryJobDataCache implements JobDataCache {

File: portability-core/src/main/java/org/dataportabilityproject/job/IdProvider.java
Patch:
@@ -15,8 +15,10 @@
  */
 package org.dataportabilityproject.job;
 
+import java.util.UUID;
+
 /** Provides ids for users of data portability project. */
 public interface IdProvider {
   /** Creates a new unique id. */
-  String createId();
+  UUID createId();
 }

File: portability-core/src/main/java/org/dataportabilityproject/job/UUIDProvider.java
Patch:
@@ -21,7 +21,7 @@
 public class UUIDProvider implements IdProvider {
 
   @Override
-  public String createId() {
-    return UUID.randomUUID().toString();
+  public UUID createId() {
+    return UUID.randomUUID();
   }
 }

File: portability-core/src/main/java/org/dataportabilityproject/shared/auth/PasswordAuthDataGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.google.common.base.Preconditions;
 import java.io.IOException;
+import java.util.UUID;
 import org.dataportabilityproject.shared.IOInterface;
 import org.dataportabilityproject.types.transfer.auth.AuthData;
 
@@ -30,12 +31,12 @@ public AuthData generateAuthData(IOInterface ioInterface) throws IOException {
   }
 
   @Override
-  public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, String id) throws IOException {
+  public AuthFlowInitiator generateAuthUrl(String callbackBaseUrl, UUID jobId) throws IOException {
     return AuthFlowInitiator.create(callbackBaseUrl + "/simplelogin");
   }
 
   @Override // online
-  public AuthData generateAuthData(String callbackBaseUrl, String authCode, String id,
+  public AuthData generateAuthData(String callbackBaseUrl, String authCode, UUID jobId,
       AuthData initialAuthData, String extra) throws IOException {
     Preconditions.checkArgument(initialAuthData == null, "initial auth data not expected");
     return PasswordAuthData.create(authCode, extra);

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/InMemoryTransferCopier.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.spi.transfer;
 
 import java.io.IOException;
+import java.util.UUID;
 import org.dataportabilityproject.spi.transfer.provider.TransferServiceProvider;
 import org.dataportabilityproject.spi.transfer.provider.TransferServiceProviderRegistry;
 import org.dataportabilityproject.types.transfer.PortableType;
@@ -33,5 +34,5 @@ void copyDataType(TransferServiceProviderRegistry registry,
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException;
+      UUID jobId) throws IOException;
 }

File: portability-worker/src/main/java/org/dataportabilityproject/worker/PortabilityInMemoryTransferCopier.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.worker;
 
 import java.io.IOException;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.dataportabilityproject.spi.transfer.InMemoryTransferCopier;
 import org.dataportabilityproject.spi.transfer.provider.ExportResult;
@@ -57,7 +58,7 @@ public void copyDataType(TransferServiceProviderRegistry registry,
       AuthData exportAuthData,
       String importService,
       AuthData importAuthData,
-      String jobId) throws IOException {
+      UUID jobId) throws IOException {
 
     Exporter<? extends AuthData, ? extends DataModel> exporter = registry.getExporter(exportService, dataType);
     Importer<? extends AuthData, ? extends DataModel> importer = registry.getImporter(importService, dataType);

File: portability-spi-gateway/src/main/java/org/dataportabilityproject/spi/gateway/auth/AuthServiceProviderRegistry.java
Patch:
@@ -11,5 +11,4 @@ public interface AuthServiceProviderRegistry {
      * @param serviceId the service id
      */
     AuthServiceProvider getServiceProvider(String serviceId);
-
-}
+  }

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/InMemoryTransferCopier.java
Patch:
@@ -28,7 +28,7 @@
 public interface InMemoryTransferCopier {
   /* Copies the provided dataType from exportService to importService */
   void copyDataType(TransferServiceProviderRegistry registry,
-      PortableType dataType,
+      String dataType,
       String exportService,
       AuthData exportAuthData,
       String importService,

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/provider/TransferServiceProviderRegistry.java
Patch:
@@ -16,7 +16,7 @@ public interface TransferServiceProviderRegistry {
    * @param serviceId the service id
    * @param transferDataType the transfer data type
    */
-  Exporter<AuthData, DataModel> getExporter(String serviceId, PortableType transferDataType);
+  Exporter<?, ?> getExporter(String serviceId, String transferDataType);
 
 
   /**
@@ -25,5 +25,5 @@ public interface TransferServiceProviderRegistry {
    * @param serviceId the service id
    * @param transferDataType the transfer data type
    */
-  Importer<AuthData, DataModel> getImporter(String serviceId, PortableType transferDataType);
+  Importer<?, ?> getImporter(String serviceId, String transferDataType);
 }

File: portability-spi-gateway/src/main/java/org/dataportabilityproject/spi/gateway/auth/AuthServiceProviderRegistry.java
Patch:
@@ -11,5 +11,4 @@ public interface AuthServiceProviderRegistry {
      * @param serviceId the service id
      */
     AuthServiceProvider getServiceProvider(String serviceId);
-
-}
+  }

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/InMemoryTransferCopier.java
Patch:
@@ -28,7 +28,7 @@
 public interface InMemoryTransferCopier {
   /* Copies the provided dataType from exportService to importService */
   void copyDataType(TransferServiceProviderRegistry registry,
-      PortableType dataType,
+      String dataType,
       String exportService,
       AuthData exportAuthData,
       String importService,

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/provider/TransferServiceProviderRegistry.java
Patch:
@@ -16,7 +16,7 @@ public interface TransferServiceProviderRegistry {
    * @param serviceId the service id
    * @param transferDataType the transfer data type
    */
-  Exporter<AuthData, DataModel> getExporter(String serviceId, PortableType transferDataType);
+  Exporter<?, ?> getExporter(String serviceId, String transferDataType);
 
 
   /**
@@ -25,5 +25,5 @@ public interface TransferServiceProviderRegistry {
    * @param serviceId the service id
    * @param transferDataType the transfer data type
    */
-  Importer<AuthData, DataModel> getImporter(String serviceId, PortableType transferDataType);
+  Importer<?, ?> getImporter(String serviceId, String transferDataType);
 }

File: extensions/auth/portability-auth-microsoft/src/main/java/org/dataportabilityproject/auth/microsoft/package-info.java
Patch:
@@ -16,4 +16,5 @@
 /**
  * Implements importers and exporters for Google services.
  */
-package org.dataportabilityproject.datatransfer.microsoft;
+package org.dataportabilityproject.auth.microsoft;
+

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/types/LegacyPortabilityJob.java
Patch:
@@ -55,7 +55,7 @@ public enum JobState {
   @Nullable public abstract LegacyPortabilityJob.JobState jobState();
 
   public static LegacyPortabilityJob.Builder builder() {
-    return new AutoValue_OldPortabilityJob.Builder();
+    return new AutoValue_LegacyPortabilityJob.Builder();
   }
 
   public abstract LegacyPortabilityJob.Builder toBuilder();

File: portability-spi-cloud/src/main/java/org/dataportabilityproject/spi/cloud/types/OldPortabilityJob.java
Patch:
@@ -9,7 +9,7 @@
 
 /** Data about a particular portability job. */
 /**
- * TODO(rtannenbaum): Migrate usage of this to the new {@link org.dataportabilityproject.spi.cloud.types.OldPortabilityJob}
+ * TODO(rtannenbaum): Migrate usage of this to the new {@link PortabilityJob}
  */
 @AutoValue
 public abstract class OldPortabilityJob {

File: portability-core/src/main/java/org/dataportabilityproject/PortabilityCopier.java
Patch:
@@ -58,7 +58,7 @@ private static <T extends DataModel> void copy(
       ExportInformation exportInformation) throws IOException {
     logger.debug("copy iteration: {}", COPY_ITERATION_COUNTER.incrementAndGet());
 
-    // NOTE: order is important bellow, do the import of all the items, then do continuation
+    // NOTE: order is important below, do the import of all the items, then do continuation
     // then do sub resources, this ensures all parents are populated before children get
     // processed.
 
@@ -76,7 +76,7 @@ private static <T extends DataModel> void copy(
 
       // Process the next page of items for the resource
       if (null != continuationInfo.getPaginationInformation()) {
-        logger.debug("start off a new copy iteration with pagination info");
+        logger.debug("Start off a new copy iteration with pagination info");
         copy(exporter, importer,
             new ExportInformation(
                 exportInformation.getResource(), // Resource with additional pages to fetch
@@ -85,7 +85,7 @@ private static <T extends DataModel> void copy(
 
       // Start processing sub-resources
       if (continuationInfo.getSubResources() != null && !continuationInfo.getSubResources().isEmpty()) {
-        logger.debug("start off a new copy iterations with a sub resource, size: {}",
+        logger.debug("Start off a new copy iteration with a sub resource, size: {}",
             continuationInfo.getSubResources().size());
         for (Resource resource : continuationInfo.getSubResources()) {
           copy(

File: portability-api/src/main/java/org/dataportabilityproject/webapp/ImportSetupHandler.java
Patch:
@@ -18,7 +18,7 @@
 import com.google.inject.Inject;
 import com.sun.net.httpserver.HttpHandler;
 import org.dataportabilityproject.ServiceProviderRegistry;
-import org.dataportabilityproject.job.JobDao;
+import org.dataportabilityproject.cloud.interfaces.CloudFactory;
 import org.dataportabilityproject.job.TokenManager;
 import org.dataportabilityproject.shared.settings.CommonSettings;
 
@@ -32,9 +32,9 @@ final class ImportSetupHandler extends SetupHandler {
   @Inject
   ImportSetupHandler(
       ServiceProviderRegistry serviceProviderRegistry,
-      JobDao jobDao,
+      CloudFactory cloudFactory,
       CommonSettings commonSettings,
       TokenManager tokenManager) {
-    super(serviceProviderRegistry, jobDao, commonSettings, Mode.IMPORT, PATH, tokenManager);
+    super(serviceProviderRegistry, cloudFactory, commonSettings, Mode.IMPORT, PATH, tokenManager);
   }
 }

File: portability-api/src/test/java/org/dataportabilityproject/webapp/PortabilityApiUtilsTest.java
Patch:
@@ -1,8 +1,7 @@
 package org.dataportabilityproject.webapp;
 
-import static org.apache.axis.transport.http.HTTPConstants.HEADER_COOKIE;
 import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.apache.axis.transport.http.HTTPConstants.HEADER_COOKIE;
 
 import com.sun.net.httpserver.Headers;
 import java.net.HttpCookie;

File: portability-core/src/main/java/org/dataportabilityproject/cloud/google/GoogleCloudFactory.java
Patch:
@@ -30,16 +30,17 @@
 import org.dataportabilityproject.cloud.interfaces.CryptoKeyManagementSystem;
 import org.dataportabilityproject.cloud.interfaces.JobDataCache;
 import org.dataportabilityproject.cloud.interfaces.PersistentKeyValueStore;
+import org.dataportabilityproject.shared.settings.CommonSettings;
 
 public final class GoogleCloudFactory implements CloudFactory {
   private final Datastore datastore;
   private final PersistentKeyValueStore persistentKeyValueStore;
   private final CryptoKeyManagementSystem cryptoKeyManagementSystem;
   private final BucketStore bucketStore;
-  private final String projectId;
 
   @Inject
   public GoogleCloudFactory(
+      CommonSettings commonSettings,
       GoogleBucketStore googleBucketStore,
       GoogleCredentials googleCredentials,
       GoogleCryptoKeyManagementSystem googleCryptoKeyManagementSystem,
@@ -50,10 +51,9 @@ public GoogleCloudFactory(
         .setCredentials(googleCredentials)
         .build()
         .getService();
-    this.persistentKeyValueStore = new GooglePersistentKeyValueStore(datastore);
+    this.persistentKeyValueStore = new GooglePersistentKeyValueStore(datastore, commonSettings);
     this.cryptoKeyManagementSystem = googleCryptoKeyManagementSystem;
     this.bucketStore = googleBucketStore;
-    this.projectId = projectId;
   }
 
   @Override

File: portability-core/src/main/java/org/dataportabilityproject/shared/auth/AuthData.java
Patch:
@@ -21,6 +21,6 @@
  * Holder of auth information tha can be passed into a service specific {@code AuthGenerator}
  * to generate service specific
  */
-public abstract class AuthData implements Serializable{
+public abstract class AuthData implements Serializable {
 
 }

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerJobMetadata.java
Patch:
@@ -37,10 +37,10 @@ boolean isInitialized() {
     return (jobId != null && keyPair != null);
   }
 
-  void init(String jobId) {
+  void init(String jobId, KeyPair keyPair) {
     Preconditions.checkState(!isInitialized(), "WorkerJobMetadata cannot be initialized twice");
     this.jobId = jobId;
-    this.keyPair = PublicPrivateKeyPairGenerator.generateKeyPair();
+    this.keyPair = keyPair;
   }
 
   public KeyPair getKeyPair() {

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/types/ContinuationData.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import org.dataportabilityproject.types.transfer.models.ContainerResource;
 
 /**
  * Specifies the starting point and context information for an export operation.

File: portability-spi-transfer/src/main/java/org/dataportabilityproject/spi/transfer/types/IdOnlyContainerResource.java
Patch:
@@ -3,12 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+import org.dataportabilityproject.types.transfer.models.ContainerResource;
 
 /**
  * A resource container referenced by id.
  */
 @JsonTypeName("org.dataportability:IdOnlyContainerResource")
-public class IdOnlyContainerResource extends ContainerResource{
+public class IdOnlyContainerResource extends ContainerResource {
     private final String id;
 
     /**

File: portability-types-transfer/src/main/java/org/dataportabilityproject/types/transfer/models/ContainerResource.java
Patch:
@@ -1,4 +1,4 @@
-package org.dataportabilityproject.spi.transfer.types;
+package org.dataportabilityproject.types.transfer.models;
 
 import org.dataportabilityproject.types.transfer.PortableType;
 

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiModule.java
Patch:
@@ -40,12 +40,12 @@ protected void configure() {
     mapbinder.addBinding(CopySetupHandler.PATH).to(CopySetupHandler.class);
     mapbinder.addBinding(ImportSetupHandler.PATH).to(ImportSetupHandler.class);
 
+    mapbinder.addBinding("/_/DataTransfer").to(DataTransferHandler.class);
     mapbinder.addBinding("/_/listDataTypes").to(ListDataTypesHandler.class);
     mapbinder.addBinding("/_/listServices").to(ListServicesHandler.class);
     mapbinder.addBinding("/_/startCopy").to(StartCopyHandler.class);
     mapbinder.addBinding("/callback/").to(Oauth2CallbackHandler.class);
     mapbinder.addBinding("/callback1/").to(OauthCallbackHandler.class);
-    mapbinder.addBinding("/configure").to(ConfigureHandler.class);
     mapbinder.addBinding("/simpleLoginSubmit").to(SimpleLoginSubmitHandler.class);
   }
 }

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiUtils.java
Patch:
@@ -179,7 +179,6 @@ public static ServiceMode getServiceMode(PortabilityJob job, Headers headers,
   public static boolean validateRequest(HttpExchange exchange, HttpMethods supportedMethod,
       String resourceRegex) throws IOException {
     String path = exchange.getRequestURI().getPath();
-
     if (!exchange.getRequestMethod().equalsIgnoreCase(supportedMethod.name())) {
       exchange.sendResponseHeaders(404, 0);
       OutputStream writer = exchange.getResponseBody();

File: portability-api/src/main/java/org/dataportabilityproject/webapp/SetupHandler.java
Patch:
@@ -145,7 +145,7 @@ private JsonObject handleImportSetup(Headers headers, PortabilityJob job, JobDao
     AuthFlowInitiator authFlowInitiator = generator
         .generateAuthUrl(PortabilityApiFlags.baseApiUrl(), JobUtils.encodeId(job));
 
-    // This is done in ConfigureHandler as well for export services
+    // This is done in DataTransferHandler as well for export services
     if (authFlowInitiator.initialAuthData() != null) {
       // Auth data is different for import and export. This is only valid for the /_/importSetup page,
       // so serviceMode is IMPORT

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/PersistentKeyValueStore.java
Patch:
@@ -32,7 +32,7 @@ public interface PersistentKeyValueStore {
   /** Retrieve data with the given {@code key} or null if not found. */
   Map<String, Object> get(String key);
 
-  /** Retrieve the first key that begins with the given {@code prefix} */
+  /** Retrieve the first key that begins with the given {@code prefix} or null if none found. */
   String getFirst(String prefix);
 
   /** Deletes entry with the given {@code key}*/

File: portability-core/src/main/java/org/dataportabilityproject/job/JobDao.java
Patch:
@@ -161,8 +161,8 @@ public void updateJobStateToAssignedWithoutAuthData(String id, PublicKey publicK
     Preconditions.checkState(existingJob.workerInstancePublicKey() == null);
     Preconditions.checkState(existingJob.workerInstancePrivateKey() == null);
     // Populate job with keys to persist
-    String encodedPublicKey = PublicPrivateKeyUtils.encodeKey(publicKey);
-    String encodedPrivateKey = PublicPrivateKeyUtils.encodeKey(privateKey);
+    String encodedPublicKey = PublicPrivateKeyPairGenerator.encodeKey(publicKey);
+    String encodedPrivateKey = PublicPrivateKeyPairGenerator.encodeKey(privateKey);
     PortabilityJob updatedJob = existingJob.toBuilder()
         .setWorkerInstancePublicKey(encodedPublicKey)
         .setWorkerInstancePrivateKey(encodedPrivateKey)

File: portability-core/src/main/java/org/dataportabilityproject/job/PortabilityJobFactory.java
Patch:
@@ -52,7 +52,7 @@ public PortabilityJobFactory(IdProvider idProvider) {
   public PortabilityJob create(PortableDataType dataType, String exportService,
       String importService) throws IOException {
     String newId = idProvider.createId();
-    String encodedSessionKey = SessionKeyGenerator.generateKeyAndEncode();
+    String encodedSessionKey = SecretKeyGenerator.generateKeyAndEncode();
     PortabilityJob job = createInitialJob(newId, encodedSessionKey, dataType, exportService, importService);
     logger.info("Creating new PortabilityJob, id: {}", newId);
     return job;

File: portability-core/src/test/java/org/dataportabilityproject/job/JobDaoTest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.junit.Assert.fail;
 
 import org.dataportabilityproject.cloud.interfaces.PersistentKeyValueStore;
+import org.dataportabilityproject.cloud.local.InMemoryPersistentKeyValueStore;
 import org.dataportabilityproject.cloud.local.LocalCloudFactory;
 import org.dataportabilityproject.job.JobDao.JobState;
 import org.dataportabilityproject.shared.PortableDataType;
@@ -34,7 +35,7 @@ public class JobDaoTest {
 
   @Before
   public void setUp() {
-    jobDao = new JobDao(new LocalCloudFactory().getPersistentKeyValueStore());
+    jobDao = new JobDao(new InMemoryPersistentKeyValueStore());
   }
 
   @Test

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerJobMetadata.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.inject.Inject;
 import com.google.inject.Singleton;
 import java.security.KeyPair;
-import org.dataportabilityproject.job.PublicPrivateKeyUtils;
+import org.dataportabilityproject.job.PublicPrivateKeyPairGenerator;
 
 /**
  * A class that contains the value of the job and key for a worker instance. This classes uses
@@ -40,7 +40,7 @@ boolean isInitialized() {
   void init(String jobId) {
     Preconditions.checkState(!isInitialized(), "WorkerJobMetadata cannot be initialized twice");
     this.jobId = jobId;
-    this.keyPair = PublicPrivateKeyUtils.generateKeyPair();
+    this.keyPair = PublicPrivateKeyPairGenerator.generateKeyPair();
   }
 
   public KeyPair getKeyPair() {

File: portability-worker/src/main/java/org/dataportabilityproject/worker/WorkerMain.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.dataportabilityproject.worker;
 
+import com.google.common.util.concurrent.UncaughtExceptionHandlers;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 
@@ -24,6 +25,7 @@
  */
 public class WorkerMain {
   public static void main(String[] args) throws Exception {
+    Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandlers.systemExit());
     Injector injector = Guice.createInjector(new WorkerModule());
     WorkerImpl worker = injector.getInstance(WorkerImpl.class);
     worker.processJob();

File: portability-core/src/main/java/org/dataportabilityproject/PortabilityCoreModule.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.InputStream;
 import org.dataportabilityproject.cloud.SupportedCloud;
 import org.dataportabilityproject.cloud.google.GoogleCloudFactory;
+import org.dataportabilityproject.cloud.google.GoogleCloudModule;
 import org.dataportabilityproject.cloud.interfaces.CloudFactory;
 import org.dataportabilityproject.cloud.local.LocalCloudFactory;
 import org.dataportabilityproject.job.JWTTokenManager;
@@ -44,7 +45,6 @@
 import org.dataportabilityproject.shared.settings.CommonSettings;
 
 public final class PortabilityCoreModule extends AbstractModule {
-
   @Override
   protected void configure() {
     // TODO: selectively load these
@@ -54,6 +54,8 @@ protected void configure() {
     install(new MicrosoftModule());
     install(new RememberTheMilkModule());
     install(new SmugmugModule());
+
+    install(new GoogleCloudModule());
   }
 
   @Singleton
@@ -86,7 +88,6 @@ CloudFactory provideCloudFactory(
     }
   }
 
-
   @Provides
   AppCredentialFactory provideAppCredentialFactory(
       CommonSettings commonSettings,

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/BucketStore.java
Patch:
@@ -19,5 +19,7 @@
  * Object storage in buckets.
  */
 public interface BucketStore {
-  byte[] getBlob(String bucketName, String blobName);
+  // Get an app credential (i.e. app key or secret). Each implementation may have its own convention
+  // for where/how app credential data is stored.
+  byte[] getAppCredentialBlob(String blobName);
 }

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CloudFactory.java
Patch:
@@ -24,5 +24,4 @@ public interface CloudFactory {
   CryptoKeyManagementSystem getCryptoKeyManagementSystem();
   BucketStore getBucketStore();
   void clearJobData(String jobId);
-  String getProjectId();
 }

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CryptoKeyManagementSystem.java
Patch:
@@ -21,5 +21,6 @@
  * Stores encryption/decryption keys and manages their usage.
  */
 public interface CryptoKeyManagementSystem {
-  byte[] decrypt(String cryptoKeyName, byte[] ciphertext) throws IOException;
+  // Decrypt an app secret. Each implementation may have its own convention for key names.
+  byte[] decryptAppSecret(byte[] ciphertext) throws IOException;
 }

File: portability-core/src/main/java/org/dataportabilityproject/shared/settings/CommonSettings.java
Patch:
@@ -60,9 +60,10 @@ public CommonSettings(
       // locally and connecting to GCP
       String googleProjectId = System.getenv("GOOGLE_PROJECT_ID");
       Preconditions.checkArgument(
-          googleProjectId.endsWith("-local") || googleProjectId.endsWith("-test"),
+          googleProjectId.endsWith("-local") || googleProjectId.endsWith("-test")
+              || googleProjectId.endsWith("-qa"),
           "Invalid project to connect to with env=LOCAL. " + googleProjectId + " doesn't appear to"
-              + " be a local/test project since it doesn't end in -local or -test. Aborting");
+              + " be a local/test project since it doesn't end in -local, -test, or -qa. Aborting");
     }
   }
 

File: portability-core/src/main/java/org/dataportabilityproject/shared/ServiceProvider.java
Patch:
@@ -48,8 +48,9 @@ default OnlineAuthDataGenerator getOnlineAuthDataGenerator(PortableDataType data
     }
 
     /* Same as above, but retrieves AuthGenerator for read/write access (ignoring serviceMode)
-     * TODO: deprecate once all serviceProviders implement the above version of this method.
+     * TODO: remove once all serviceProviders implement the above version of this method.
      */
+    @Deprecated
     default OnlineAuthDataGenerator getOnlineAuthDataGenerator(PortableDataType dataType) {
         System.out.println("WARNING: getOnlineAuthDataGenerator not implemented for type: "
                 + dataType + ", service: " + getName());

File: portability-core/src/main/java/org/dataportabilityproject/shared/ServiceMode.java
Patch:
@@ -1,7 +1,7 @@
 package org.dataportabilityproject.shared;
 
 /**
- * The possible service modes for each authorization
+ * The possible service modes for transferring data.
  */
 public enum ServiceMode {
   IMPORT,

File: portability-api/src/main/java/org/dataportabilityproject/webapp/CryptoHelper.java
Patch:
@@ -23,7 +23,7 @@
 import com.sun.net.httpserver.Headers;
 import java.security.PublicKey;
 import javax.crypto.SecretKey;
-import javax.servlet.http.Cookie;
+import java.net.HttpCookie;
 import org.dataportabilityproject.job.Crypter;
 import org.dataportabilityproject.job.CrypterImpl;
 import org.dataportabilityproject.job.JobDao;
@@ -51,7 +51,7 @@ void encryptAndSetCookie(Headers headers, String jobId, boolean isExport, AuthDa
     SecretKey sessionKey = getSessionKey(jobId);
     String encrypted = encryptAuthData(sessionKey, authData);
     String cookieKey = isExport ? JsonKeys.EXPORT_AUTH_DATA_COOKIE_KEY : JsonKeys.IMPORT_AUTH_DATA_COOKIE_KEY;
-    Cookie cookie = new Cookie(cookieKey, encrypted);
+    HttpCookie cookie = new HttpCookie(cookieKey, encrypted);
     logger.debug("Set new cookie with key: {}, length: {} for job: {}",
         cookieKey, encrypted.length(), jobId);
     headers.add(HEADER_SET_COOKIE, cookie.toString() + PortabilityApiUtils.COOKIE_ATTRIBUTES);
@@ -60,7 +60,7 @@ void encryptAndSetCookie(Headers headers, String jobId, boolean isExport, AuthDa
   private SecretKey getSessionKey(String jobId) {
     PortabilityJob job = jobDao.lookupJobPendingAuthData(jobId);
     String encodedSessionKey = job.sessionKey();
-    Preconditions.checkState(!Strings.isNullOrEmpty(encodedSessionKey));
+    Preconditions.checkState(!Strings.isNullOrEmpty(encodedSessionKey), "Session key should not be null");
     return SessionKeyGenerator.parse(encodedSessionKey);
   }
 

File: portability-api/src/main/java/org/dataportabilityproject/webapp/Oauth2CallbackHandler.java
Patch:
@@ -108,9 +108,7 @@ private String handleExchange(HttpExchange exchange) throws IOException {
       }
       PortableDataType dataType = JobUtils.getDataType(job.dataType());
 
-      // TODO: Determine import vs export mode
-      // Hack! For now, if we don't have export auth data, assume it's for export.
-      boolean isExport = (null == job.exportAuthData());
+      boolean isExport = PortabilityApiUtils.isExport(job, exchange.getRequestHeaders());
 
       // TODO: Determine service from job or from authUrl path?
       String service = isExport ? job.exportService() : job.importService();

File: portability-api/src/main/java/org/dataportabilityproject/webapp/OauthCallbackHandler.java
Patch:
@@ -100,9 +100,7 @@ private String handleExchange(HttpExchange exchange) throws IOException {
       }
       PortableDataType dataType = JobUtils.getDataType(job.dataType());
 
-      // TODO: Support import and export service
-      // Hack! For now, if we don't have export auth data, assume it's for export.
-      boolean isExport = (null == job.exportAuthData());
+      boolean isExport = PortabilityApiUtils.isExport(job, exchange.getRequestHeaders());
 
       // TODO: Determine service from job or from authUrl path?
       String service = isExport ? job.exportService() : job.importService();

File: portability-api/src/main/java/org/dataportabilityproject/webapp/SetupHandler.java
Patch:
@@ -146,7 +146,6 @@ JsonObject handleImportSetup(Headers headers, PortabilityJob job, JobDao jobDao)
   }
 
   JsonObject handleCopySetup(Headers headers, PortabilityJob job) {
-    Preconditions.checkNotNull(job.importAuthData(), "Import AuthData is required");
     // Make sure the data exists in the cookies before rendering copy page
     if (PortabilityFlags.encryptedFlow()) {
       String exportAuthCookie = PortabilityApiUtils
@@ -158,6 +157,9 @@ JsonObject handleCopySetup(Headers headers, PortabilityJob job) {
           .getCookie(headers, JsonKeys.IMPORT_AUTH_DATA_COOKIE_KEY);
       Preconditions
           .checkArgument(!Strings.isNullOrEmpty(importAuthCookie), "Import auth cookie required");
+    } else {
+      Preconditions.checkNotNull(job.importAuthData(), "Import AuthData is required");
+
     }
 
     return Json.createObjectBuilder().add(JsonKeys.DATA_TYPE, job.dataType())

File: portability-api/src/main/java/org/dataportabilityproject/webapp/SimpleLoginSubmitHandler.java
Patch:
@@ -69,9 +69,7 @@ public void handle(HttpExchange exchange) throws IOException {
     }
     Preconditions.checkState(null != job, "existingJob not found for job id: %s", jobId);
 
-    // TODO: Determine import vs export mode
-    // Hack! For now, if we don't have export auth data, assume it's for export.
-    boolean isExport = (null == job.exportAuthData());
+    boolean isExport = PortabilityApiUtils.isExport(job, exchange.getRequestHeaders());
     String service = isExport ? job.exportService() : job.importService();
     Preconditions.checkState(!Strings.isNullOrEmpty(service),
         "service not found, service: %s isExport: %b, job id: %s", service, isExport, jobId);

File: portability-core/src/main/java/org/dataportabilityproject/job/PortabilityJobFactory.java
Patch:
@@ -71,6 +71,7 @@ private static PortabilityJob createInitialJob(String id, String sessionKey,
         .setDataType(dataType.name())
         .setExportService(exportService)
         .setImportService(importService)
+        .setSessionKey(sessionKey)
         .build();
   }
 

File: portability-worker/src/test/java/org/dataportabilityproject/worker/JobPollingServiceTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.dataportabilityproject.cloud.SupportedCloud;
 import org.dataportabilityproject.cloud.interfaces.PersistentKeyValueStore;
 import org.dataportabilityproject.job.JobDao;
+import org.dataportabilityproject.job.JobDao.JobState;
 import org.dataportabilityproject.job.PortabilityJob;
 import org.dataportabilityproject.shared.PortableDataType;
 import org.junit.Before;
@@ -90,5 +91,6 @@ public void pollingLifeCycle() throws Exception {
     job = jobDao.lookupAssignedWithAuthDataJob(job.id());
     assertThat(job.encryptedExportAuthData()).isNotEmpty();
     assertThat(job.encryptedImportAuthData()).isNotEmpty();
+    jobDao.deleteJob(job.id(), JobState.ASSIGNED_WITH_AUTH_DATA);
   }
 }

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiUtils.java
Patch:
@@ -55,7 +55,7 @@ public class PortabilityApiUtils {
    * SameSite=lax specification allows cookies to be sent by the browser on top level GET requests
    * and on requests from within the app.
    */
-  public final static String COOKIE_ATTRIBUTES = "; SameSite=lax";
+  public final static String COOKIE_ATTRIBUTES = "; Path=/; SameSite=lax";
 
   /**
    * Returns a URL representing the resource provided. TODO: remove hardcoded scheme - find a better

File: portability-api/src/main/java/org/dataportabilityproject/webapp/PortabilityApiUtils.java
Patch:
@@ -55,7 +55,7 @@ public class PortabilityApiUtils {
    * SameSite=lax specification allows cookies to be sent by the browser on top level GET requests
    * and on requests from within the app.
    */
-  public final static String COOKIE_ATTRIBUTES = "; SameSite=lax";
+  public final static String COOKIE_ATTRIBUTES = "; Path=/; SameSite=lax";
 
   /**
    * Returns a URL representing the resource provided. TODO: remove hardcoded scheme - find a better

File: portability-core/src/main/java/org/dataportabilityproject/cloud/google/GoogleCloudFactory.java
Patch:
@@ -110,7 +110,7 @@ static GoogleCredentials getCredentials() throws CredentialsException {
         String cause = String.format("You are attempting to obtain credentials from somewhere "
             + "other than Kubernetes secrets in prod. You may have accidentally copied creds into"
             + "your image, which we provide as a local debugging mechanism only. See GCP build "
-            + "script (config/gcp/build_and_deploy.sh) for more info. Creds location was: %s",
+            + "script (config/gcp/build_and_upload_docker_image.sh) for more info. Creds location was: %s",
             credsLocation);
         throw new CredentialsException(cause);
       }

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CloudFactory.java
Patch:
@@ -24,4 +24,5 @@ public interface CloudFactory {
   CryptoKeyManagementSystem getCryptoKeyManagementSystem();
   BucketStore getBucketStore();
   void clearJobData(String jobId);
+  String getProjectId();
 }

File: portability-core/src/main/java/org/dataportabilityproject/cloud/interfaces/CloudFactory.java
Patch:
@@ -24,4 +24,5 @@ public interface CloudFactory {
   CryptoKeyManagementSystem getCryptoKeyManagementSystem();
   BucketStore getBucketStore();
   void clearJobData(String jobId);
+  String getProjectId();
 }

File: portability-web/src/main/java/org/dataportabilityproject/webapp/CryptoHelper.java
Patch:
@@ -54,7 +54,8 @@ void encryptAndSetCookie(Headers headers, boolean isExport, AuthData authData){
     String cookieKey = isExport ? JsonKeys.EXPORT_AUTH_DATA_COOKIE_KEY : JsonKeys.IMPORT_AUTH_DATA_COOKIE_KEY;
     Cookie authCookie = new Cookie(cookieKey, encrypted);
     LogUtils.log("Set new cookie with key: %s, length: %s", cookieKey, encrypted.length());
-    headers.add(HEADER_SET_COOKIE, authCookie.toString());
+    // TODO: reenable. Currently doesn't like the cookie, has a bad value.
+    // headers.add(HEADER_SET_COOKIE, authCookie.toString());
   }
 
   /** Serialize and encrypt the given {@code authData} with the session key. */

File: portability-core/src/main/java/org/dataportabilityproject/ServiceProviderRegistry.java
Patch:
@@ -28,7 +28,7 @@
 import org.dataportabilityproject.serviceProviders.google.GoogleServiceProvider;
 import org.dataportabilityproject.serviceProviders.instagram.InstagramServiceProvider;
 import org.dataportabilityproject.serviceProviders.microsoft.MicrosoftServiceProvider;
-import org.dataportabilityproject.serviceProviders.rememberTheMilk.RememberTheMilkProvider;
+import org.dataportabilityproject.serviceProviders.rememberTheMilk.RememberTheMilkServiceProvider;
 import org.dataportabilityproject.serviceProviders.smugmug.SmugMugServiceProvider;
 import org.dataportabilityproject.shared.PortableDataType;
 import org.dataportabilityproject.shared.Secrets;
@@ -51,7 +51,7 @@ public ServiceProviderRegistry(Secrets secrets, CloudFactory cloudFactory) throw
         addServiceProvider(new FlickrServiceProvider(secrets), providerBuilder);
         addServiceProvider(new GoogleServiceProvider(secrets), providerBuilder);
         addServiceProvider(new MicrosoftServiceProvider(secrets), providerBuilder);
-        addServiceProvider(new RememberTheMilkProvider(secrets), providerBuilder);
+        addServiceProvider(new RememberTheMilkServiceProvider(secrets), providerBuilder);
         addServiceProvider(new InstagramServiceProvider(secrets), providerBuilder);
         addServiceProvider(new SmugMugServiceProvider(secrets), providerBuilder);
 

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/flickr/FlickrPhotoService.java
Patch:
@@ -53,6 +53,7 @@
 import org.dataportabilityproject.dataModels.photos.PhotoModel;
 import org.dataportabilityproject.dataModels.photos.PhotosModelWrapper;
 import org.dataportabilityproject.cloud.interfaces.JobDataCache;
+import org.dataportabilityproject.shared.AppCredentials;
 import org.dataportabilityproject.shared.IdOnlyResource;
 
 public class FlickrPhotoService implements
@@ -72,9 +73,9 @@ public class FlickrPhotoService implements
     private Auth auth;
     private final JobDataCache jobDataCache;
 
-    FlickrPhotoService(String apiKey, String apiSecret, Auth auth,
+    FlickrPhotoService(AppCredentials appCredentials, Auth auth,
         JobDataCache jobDataCache) throws IOException {
-        this.flickr = new Flickr(apiKey, apiSecret, new REST());
+        this.flickr = new Flickr(appCredentials.key(), appCredentials.secret(), new REST());
         this.photosetsInterface = flickr.getPhotosetsInterface();
         this.photosInterface = flickr.getPhotosInterface();
         this.uploader = flickr.getUploader();

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/rememberTheMilk/RememberTheMilkAuth.java
Patch:
@@ -39,14 +39,14 @@
 /**
  * Generates a token using the flow described: https://www.rememberthemilk.com/services/api/authentication.rtm
  */
-public class TokenGenerator implements OfflineAuthDataGenerator {
+public class RememberTheMilkAuth implements OfflineAuthDataGenerator {
     private static final String AUTH_URL = "http://api.rememberthemilk.com/services/auth/";
     private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
     private final RememberTheMilkSignatureGenerator signatureGenerator;
 
     private AuthElement authElement;
 
-    TokenGenerator(RememberTheMilkSignatureGenerator signatureGenerator) {
+    RememberTheMilkAuth(RememberTheMilkSignatureGenerator signatureGenerator) {
         this.signatureGenerator = signatureGenerator;
     }
 

File: portability-server/src/main/java/org/dataportabilityproject/webapp/ConfigureHandler.java
Patch:
@@ -44,7 +44,8 @@ public ConfigureHandler(ServiceProviderRegistry serviceProviderRegistry,
    * invalid params or incorrect method, no error is present and the response is empty.
    */
   public void  handle(HttpExchange exchange) throws IOException {
-   Preconditions.checkArgument(PortabilityServerUtils.ValidatePostRequest(exchange),
+   Preconditions.checkArgument(
+       PortabilityServerUtils.ValidateRequest(exchange, HttpMethods.POST, "/configure"),
        "/configure only supports POST.");
 
     Map<String, String> requestParameters = PortabilityServerUtils.GetRequestParams(exchange);

File: portability-server/src/main/java/org/dataportabilityproject/webapp/ListDataTypesHandler.java
Patch:
@@ -25,7 +25,8 @@ public ListDataTypesHandler(ServiceProviderRegistry serviceProviderRegistry) {
   }
 
   public void handle(HttpExchange exchange) throws IOException {
-    Preconditions.checkArgument(PortabilityServerUtils.ValidateGetRequest(exchange),
+    Preconditions.checkArgument(
+        PortabilityServerUtils.ValidateRequest(exchange, HttpMethods.GET, "/_/listDataTypes"),
         "This resource only supports GET.");
 
     // Mark the response as type Json

File: portability-server/src/main/java/org/dataportabilityproject/webapp/ListServicesHandler.java
Patch:
@@ -32,8 +32,8 @@ public ListServicesHandler(ServiceProviderRegistry serviceProviderRegistry) {
   }
 
   public void handle(HttpExchange exchange) throws IOException {
-    Preconditions.checkArgument(PortabilityServerUtils.ValidateGetRequest(exchange),
-        "This resource only supports GET.");
+    Preconditions.checkArgument(
+        PortabilityServerUtils.ValidateRequest(exchange, HttpMethods.GET, "/_/listServices"));
 
     // Set response as type json
     Headers headers = exchange.getResponseHeaders();

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/instagram/InstagramOauthData.java
Patch:
@@ -16,6 +16,7 @@
 package org.dataportabilityproject.serviceProviders.instagram;
 
 import com.google.auto.value.AutoValue;
+import javax.annotation.Nullable;
 import org.dataportabilityproject.shared.auth.AuthData;
 
 @AutoValue
@@ -28,6 +29,6 @@ static InstagramOauthData create(String accessToken,
   }
 
   abstract String accessToken();
-  abstract String refreshToken();
+  @Nullable abstract String refreshToken(); // TODO: Determine if we can get refresh token in non-Sandbox mode
   abstract String tokenServerEncodedUrl();
 }

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/instagram/InstagramServiceProvider.java
Patch:
@@ -73,7 +73,7 @@ public Exporter<? extends DataModel> getExporter(
       AuthData authData,
       JobDataCache jobDataCache) throws IOException {
     if (type == PortableDataType.PHOTOS) {
-      return new InstagramPhotoService(((SecretAuthData) authData).secret());
+      return new InstagramPhotoService(((InstagramOauthData) authData));
     }
     throw new IllegalStateException("Instagram doesn't support exporting: " + type);
   }

File: portability-core/src/main/java/org/dataportabilityproject/cloud/google/GooglePersistentKeyValueStore.java
Patch:
@@ -78,6 +78,7 @@ public void put(String key, Map<String, Object> data) throws IOException {
   public Map<String, Object> get(String key) {
     ImmutableMap.Builder<String, Object> builder = new ImmutableMap.Builder<>();
     Entity entity = datastore.get(getKey(key));
+    if (entity == null) return null;
     for (String property : entity.getNames()) {
       // builder.put(property, entity.getValue(property));
       if (entity.getValue(property) instanceof StringValue) {

File: portability-core/src/main/java/org/dataportabilityproject/worker/WorkerMain.java
Patch:
@@ -45,7 +45,7 @@ public class WorkerMain {
   public static void main(String[] args) throws Exception {
 
     // TODO: Make this configurable
-    SupportedCloud cloud = SupportedCloud.LOCAL;
+    SupportedCloud cloud = SupportedCloud.GOOGLE;
 
     // TODO: Worker should only request secrets for the services it needs
     Secrets secrets = new Secrets("secrets.csv");

File: portability-web/src/main/java/org/dataportabilityproject/webapp/CryptoHelper.java
Patch:
@@ -39,7 +39,8 @@ void encryptAndSetCookie(HttpServletResponse response, boolean isExport, AuthDat
     String cookieKey = isExport ? JsonKeys.EXPORT_AUTH_DATA_COOKIE_KEY : JsonKeys.IMPORT_AUTH_DATA_COOKIE_KEY;
     Cookie authCookie = new Cookie(cookieKey, encrypted);
     LogUtils.log("Set new cookie with key: %s, length: %s", cookieKey, encrypted.length());
-    response.addCookie(authCookie);
+    // TODO: reenable. Currently doesn't like the cookie, has a bad value.
+    // response.addCookie(authCookie);
   }
 
   /** Serialize and encrypt the given {@code authData} with the session key. */

File: portability-web/src/main/java/org/dataportabilityproject/webapp/PortabilityConfiguration.java
Patch:
@@ -40,7 +40,7 @@ public class PortabilityConfiguration {
   @Bean
   public CloudFactory getCloudFactory(Secrets secrets) {
     // TODO: add a flag to be able to switch this.
-    SupportedCloud cloud = SupportedCloud.LOCAL;
+    SupportedCloud cloud = SupportedCloud.GOOGLE;
     return CloudFactoryFactory.getCloudFactory(cloud, secrets);
   }
 

File: portability-core/src/main/java/org/dataportabilityproject/job/JobManager.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import org.dataportabilityproject.cloud.interfaces.PersistentKeyValueStore;
 
+// TODO: Rename to JobDao
 /** Provides functionality to manage the lifecycle of a data portability job. */
 public class JobManager {
   // Keys for specific values in data store

File: portability-core/src/main/java/org/dataportabilityproject/job/JobManager.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import org.dataportabilityproject.cloud.interfaces.PersistentKeyValueStore;
 
+// TODO: Rename to JobDao
 /** Provides functionality to manage the lifecycle of a data portability job. */
 public class JobManager {
   // Keys for specific values in data store

File: portability-core/src/main/java/org/dataportabilityproject/shared/Config.java
Patch:
@@ -35,7 +35,7 @@ public enum Environment {
    * Base url for all calls within the application.
    */
   public static final String BASE_URL =
-      (ENV =! Environment.TEST) ? "https://gardenswithoutwalls-test.net" : "http://localhost:3000";
+      (ENV == Environment.TEST) ? "https://gardenswithoutwalls-test.net" : "http://localhost:3000";
 
   /**
    * Base url for direct to api calls within the application.

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/microsoft/calendar/MicrosoftCalendarService.java
Patch:
@@ -45,7 +45,7 @@ public MicrosoftCalendarService(String token, String account) {
                   String headerValue = HEADER_PREFIX + token;
                   request.getHeaders().setAuthorization(headerValue);
                   request.getHeaders().setAccept("text/*, application/xml, application/json;odata.metadata=none;odata.streaming=false");
-                  request.getHeaders().set("X-AnchorMailbox", account);
+                  // TODO: add if needed: request.getHeaders().set("X-AnchorMailbox", account);
                   request.getHeaders().setUserAgent("PlayGroundAgent/1.0");
                 });
     }

File: portability-core/src/main/java/org/dataportabilityproject/shared/ServiceProvider.java
Patch:
@@ -24,7 +24,8 @@ public interface ServiceProvider {
   OfflineAuthDataGenerator getOfflineAuthDataGenerator(PortableDataType dataType);
 
   default OnlineAuthDataGenerator getOnlineAuthDataGenerator(PortableDataType dataType) {
-    System.out.println("WARNING: getOnlineAuthDataGenerator not implemented");
+    System.out.println("WARNING: getOnlineAuthDataGenerator not implemented for type: "
+        + dataType + ", service: " + getName());
     return null;
   }
 

File: portability-web/src/main/java/org/dataportabilityproject/webapp/ConfigureController.java
Patch:
@@ -86,12 +86,14 @@ public void configure(HttpServletRequest request, HttpServletResponse response,
     // Obtain the OnlineAuthDataGenerator
     OnlineAuthDataGenerator generator = serviceProviderRegistry
         .getOnlineAuth(job.exportService(), dataType);
-
     Preconditions.checkNotNull(generator,"Generator not found for type: %s, service: %s",
         dataType, job.exportService());
 
     // Auth url
     AuthRequest authRequest = generator.generateAuthUrl(job.token());
+    Preconditions.checkNotNull(authRequest,"AuthRequest not found for type: %s, service: %s",
+        dataType, job.exportService());
+
 
     // Store authUrl
     if (authRequest.initialAuthData() != null) {

File: portability-web/src/main/java/org/dataportabilityproject/webapp/CustomErrorController.java
Patch:
@@ -32,6 +32,6 @@ public String getErrorPath() {
   public String error(HttpServletRequest servletRequest, Model model) {
     Map<String, Object> attrs = errorAttributes.getErrorAttributes(new ServletRequestAttributes(servletRequest), false);
     model.addAttribute("attrs", attrs);
-    return "error";
+    return "error handling";
   }
 }

File: portability-web/src/main/java/org/dataportabilityproject/webapp/Oauth2CallbackController.java
Patch:
@@ -73,6 +73,7 @@ public void handleOauth2Response(
 
     // Generate and store auth data
     AuthData authData = generator.generateAuthData(authResponse.getCode(), token, initialAuthData);
+    Preconditions.checkNotNull(authData, "Auth data should not be null");
 
     // Update the job
     PortabilityJob updatedJob = JobUtils.setAuthData(job, authData, isExport);

File: portability-web/src/main/java/org/dataportabilityproject/webapp/ConfigureController.java
Patch:
@@ -87,6 +87,9 @@ public void configure(HttpServletRequest request, HttpServletResponse response,
     OnlineAuthDataGenerator generator = serviceProviderRegistry
         .getOnlineAuth(job.exportService(), dataType);
 
+    Preconditions.checkNotNull(generator,"Generator not found for type: %s, service: %s",
+        dataType, job.exportService());
+
     // Auth url
     AuthRequest authRequest = generator.generateAuthUrl(job.token());
 

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/google/piccasa/GooglePhotosService.java
Patch:
@@ -57,7 +57,7 @@ public PhotosModelWrapper export(ExportInformation exportInformation) throws IOE
 
     private PhotosModelWrapper exportAlbums(Optional<PaginationInformation> pageInfo)
         throws IOException {
-        URL albumUrl = new URL("https://picasaweb.serviceProviders.google.com/data/feed/api/user/default?kind=album");
+        URL albumUrl = new URL("https://picasaweb.google.com/data/feed/api/user/default?kind=album");
 
         UserFeed albumFeed;
 
@@ -90,7 +90,7 @@ private PhotosModelWrapper exportPhotos(
             String albumId, Optional<PaginationInformation> pageInfo) throws IOException {
         // imgmax=d gets the original immage as per:
         // https://developers.google.com/picasa-web/docs/2.0/reference
-        URL photosUrl = new URL("https://picasaweb.serviceProviders.google.com/data/feed/api/user/default/albumid/"
+        URL photosUrl = new URL("https://picasaweb.google.com/data/feed/api/user/default/albumid/"
             + albumId + "?imgmax=d");
         AlbumFeed photoFeed;
         try {

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/google/CredentialGenerator.java
Patch:
@@ -62,9 +62,11 @@ public String generateAuthUrl(String id) throws IOException {
   @Override
   public AuthData generateAuthData(String authCode, String id) throws IOException {
     AuthorizationCodeFlow flow = createFlow(clientId, apiSecret, scopes);
+    String redirectAfterToken = "http://localhost:8080/callback/google";
+    System.out.println("redirectAfterToken: " + redirectAfterToken);
     TokenResponse response = flow
         .newTokenRequest(authCode)
-        .setRedirectUri("http://localhost:3000/import") //TODO(chuy): Parameterize
+        .setRedirectUri(redirectAfterToken) //TODO(chuy): Parameterize
         .execute();
     // Figure out storage
     Credential credential = flow.createAndStoreCredential(response, id);

File: portability-web/src/main/java/org/dataportabilityproject/webapp/OauthCallbackController.java
Patch:
@@ -28,7 +28,7 @@ public class OauthCallbackController {
 
   /** Returns of the list of data types allowed for inmport and export. */
   @CrossOrigin(origins = "http://localhost:3000")
-  @RequestMapping("/callback/.*")
+  @RequestMapping("/callback/**")
   public void handleOauthResponse(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
 

File: portability-core/src/main/java/org/dataportabilityproject/ServiceProviderRegistry.java
Patch:
@@ -42,10 +42,10 @@ public ServiceProviderRegistry(Secrets secrets, IOInterface ioInterface) throws
 
         ImmutableMap.Builder<String, ServiceProvider> providerBuilder = ImmutableMap.builder();
 
-        addServiceProvider(new FlickrServiceProvider(secrets), providerBuilder);
+        addServiceProvider(new FlickrServiceProvider(secrets, ioInterface), providerBuilder);
         addServiceProvider(new GoogleServiceProvider(secrets), providerBuilder);
         addServiceProvider(new MicrosoftServiceProvider(secrets, ioInterface), providerBuilder);
-        addServiceProvider(new RememberTheMilkProvider(secrets), providerBuilder);
+        addServiceProvider(new RememberTheMilkProvider(secrets, ioInterface), providerBuilder);
         addServiceProvider(new InstagramServiceProvider(secrets), providerBuilder);
         addServiceProvider(new SmugMugServiceProvider(secrets, ioInterface), providerBuilder);
 

File: portability-core/src/main/java/org/dataportabilityproject/serviceProviders/google/tasks/GoogleTaskService.java
Patch:
@@ -67,7 +67,7 @@ private TaskModelWrapper getTaskLists(Optional<PaginationInformation> pageInfo)
 
     private TaskModelWrapper getTasks(String taskListId, Optional<PaginationInformation> pageInfo)
             throws IOException {
-        com.google.api.services.tasks.model.Tasks result = null;
+        com.google.api.services.tasks.model.Tasks result;
 
         Tasks.TasksOperations.List query = taskClient.tasks()
                 .list(taskListId).setMaxResults(PAGE_SIZE);
@@ -76,7 +76,7 @@ private TaskModelWrapper getTasks(String taskListId, Optional<PaginationInformat
         }
         result = query.execute();
         List<TaskModel> newTasks = result.getItems().stream()
-            .map(t -> new TaskModel(t.getId(), t.getTitle(), t.getNotes()))
+            .map(t -> new TaskModel(taskListId, t.getTitle(), t.getNotes()))
             .collect(Collectors.toList());
 
 
@@ -97,6 +97,7 @@ public void importItem(TaskModelWrapper wrapper) throws IOException {
             TaskList newTaskList = new TaskList()
                 .setTitle("Imported copy - " + taskList.getName());
             TaskList insertedTaskList = taskClient.tasklists().insert(newTaskList).execute();
+            System.out.println("Storing " + taskList.getId() + " as " + insertedTaskList.getId());
             jobDataCache.store(taskList.getId(), insertedTaskList.getId());
         }
         for (TaskModel oldTask : wrapper.getTasks()) {

File: src/main/java/org/dataportabilityproject/PortabilityMain.java
Patch:
@@ -32,7 +32,7 @@ private static <T extends DataModel> void copyDataType(
                 "What service do you want to export from",
                 registry.getServiceProvidersThatCanExport(type));
         String importerName = IO_INTERFACE.ask(
-                "What service do you want to export from",
+                "What service do you want to import to",
                 registry.getServiceProvidersThatCanImport(type));
 
         Importer<T> importer = registry.getImporter(importerName, type);
@@ -48,4 +48,4 @@ private static <T extends DataModel> void copy(
             importer.importItem(item);
         }
     }
-}
\ No newline at end of file
+}

