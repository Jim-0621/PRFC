File: rejoiner/src/test/java/com/google/api/graphql/rejoiner/GqlInputConverterTest.java
Patch:
@@ -69,7 +69,7 @@ public void inputConverterShouldCreateInputTypeWithCamelCaseName() {
         GqlInputConverter.newBuilder().add(TestProto.getDescriptor().getFile()).build();
     GraphQLInputObjectType input =
         (GraphQLInputObjectType)
-            inputConverter.getInputType(Proto1.getDescriptor(), ImmutableMap.of());
+            inputConverter.getInputType(Proto1.getDescriptor(), SchemaOptions.defaultOptions());
     Truth.assertThat(input.getField("intField")).isNotNull();
     Truth.assertThat(input.getField("camelCaseName")).isNotNull();
   }

File: rejoiner/src/test/java/com/google/api/graphql/rejoiner/ProtoRegistryTest.java
Patch:
@@ -35,6 +35,8 @@ public void protoRegistryShouldIncludeAllProtoTypesFromFile() {
         ProtoRegistry.newBuilder().add(TestProto.getDescriptor()).build().listTypes();
     assertThat(FluentIterable.from(graphQLTypes).transform(GET_NAME))
         .containsExactly(
+            "javatests_com_google_api_graphql_rejoiner_proto_Proto1_MapFieldEntry",
+            "Input_javatests_com_google_api_graphql_rejoiner_proto_Proto1_MapFieldEntry",
             "javatests_com_google_api_graphql_rejoiner_proto_Proto1",
             "javatests_com_google_api_graphql_rejoiner_proto_Proto2",
             "javatests_com_google_api_graphql_rejoiner_proto_Proto1_InnerProto",

File: rejoiner/src/test/java/com/google/api/graphql/rejoiner/ProtoToGqlTest.java
Patch:
@@ -58,7 +58,7 @@ public void convertShouldWorkForMessage() {
     GraphQLObjectType result = ProtoToGql.convert(Proto1.getDescriptor(), null, ImmutableMap.of());
     assertThat(result.getName())
         .isEqualTo("javatests_com_google_api_graphql_rejoiner_proto_Proto1");
-    assertThat(result.getFieldDefinitions()).hasSize(6);
+    assertThat(result.getFieldDefinitions()).hasSize(7);
   }
 
   @Test
@@ -75,7 +75,7 @@ public void convertShouldWorkForEnums() {
   @Test
   public void checkFieldNameCamelCase() {
     GraphQLObjectType result = ProtoToGql.convert(Proto1.getDescriptor(), null, ImmutableMap.of());
-    assertThat(result.getFieldDefinitions()).hasSize(6);
+    assertThat(result.getFieldDefinitions()).hasSize(7);
     assertThat(result.getFieldDefinition("intField")).isNotNull();
     assertThat(result.getFieldDefinition("camelCaseName")).isNotNull();
     assertThat(result.getFieldDefinition("RenamedField")).isNotNull();

File: rejoiner/src/main/java/com/google/api/graphql/rejoiner/ProtoRegistry.java
Patch:
@@ -30,11 +30,9 @@
 import java.util.AbstractMap.SimpleImmutableEntry;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
 

File: rejoiner/src/main/java/com/google/api/graphql/rejoiner/SchemaDefinitionReader.java
Patch:
@@ -34,6 +34,7 @@
 import graphql.schema.GraphQLArgument;
 import graphql.schema.GraphQLFieldDefinition;
 import graphql.schema.GraphQLList;
+import graphql.schema.GraphQLNamedType;
 import graphql.schema.GraphQLNonNull;
 import graphql.schema.GraphQLObjectType;
 import graphql.schema.GraphQLOutputType;
@@ -129,7 +130,7 @@ public void readMembers() {
       GraphQLFieldDefinition graphQLFieldDefinition =
           methodToFieldDefinition(schemaDefinition, method, "_NOT_USED_", "_NOT_USED_", null);
       nodeDataFetchers.add(
-          new NodeDataFetcher(graphQLFieldDefinition.getType().getName()) {
+          new NodeDataFetcher(((GraphQLNamedType) graphQLFieldDefinition.getType()).getName()) {
             @Override
             public Object apply(String s) {
               // TODO: Don't hardcode the arguments structure.

File: rejoiner/src/test/java/com/google/api/graphql/rejoiner/GqlInputConverterTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.protobuf.Message;
 import graphql.schema.GraphQLArgument;
 import graphql.schema.GraphQLInputObjectType;
+import graphql.schema.GraphQLNamedType;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -58,7 +59,7 @@ public void inputConverterShouldFillProtoBuf() {
   public void inputConverterShouldCreateArgument() {
     GraphQLArgument argument = GqlInputConverter.createArgument(Proto1.getDescriptor(), "input");
     Truth.assertThat(argument.getName()).isEqualTo("input");
-    Truth.assertThat(argument.getType().getName())
+    Truth.assertThat(((GraphQLNamedType) argument.getType()).getName())
         .isEqualTo("Input_javatests_com_google_api_graphql_rejoiner_proto_Proto1");
   }
 
@@ -76,7 +77,7 @@ public void inputConverterShouldCreateInputTypeWithCamelCaseName() {
   public void inputConverterShouldCreateArgumentForMessagesInSameFile() {
     GraphQLArgument argument = GqlInputConverter.createArgument(Proto2.getDescriptor(), "input");
     Truth.assertThat(argument.getName()).isEqualTo("input");
-    Truth.assertThat(argument.getType().getName())
+    Truth.assertThat(((GraphQLNamedType) argument.getType()).getName())
         .isEqualTo("Input_javatests_com_google_api_graphql_rejoiner_proto_Proto2");
   }
 }

File: rejoiner/src/test/java/com/google/api/graphql/rejoiner/ProtoRegistryTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
+import graphql.schema.GraphQLNamedType;
 import graphql.schema.GraphQLType;
 import java.util.Set;
 import org.junit.Test;
@@ -46,5 +47,6 @@ public void protoRegistryShouldIncludeAllProtoTypesFromFile() {
             "Input_javatests_com_google_api_graphql_rejoiner_proto_Proto2_NestedProto");
   }
 
-  private static final Function<GraphQLType, String> GET_NAME = type -> type.getName();
+  private static final Function<GraphQLType, String> GET_NAME =
+      type -> ((GraphQLNamedType) type).getName();
 }

File: rejoiner/src/main/java/com/google/api/graphql/rejoiner/SchemaBundle.java
Patch:
@@ -20,7 +20,8 @@ public abstract class SchemaBundle {
 
   public GraphQLSchema toSchema() {
     Map<String, ? extends Function<String, Object>> nodeDataFetchers =
-        nodeDataFetchers().stream()
+        nodeDataFetchers()
+            .stream()
             .collect(Collectors.toMap(e -> e.getClassName(), Function.identity()));
 
     GraphQLObjectType.Builder queryType = newObject().name("QueryType").fields(queryFields());

File: rejoiner/src/test/java/com/google/api/graphql/rejoiner/RejoinerIntegrationTest.java
Patch:
@@ -187,7 +187,7 @@ public void executionQueryWithEnumArgs() {
             .query("query { getAccountWithLanguages(language: EO) { anEnum } }")
             .build();
     ExecutionResult executionResult = graphQL.execute(executionInput);
-    assertThat(executionResult.getErrors()).hasSize(0);
+    assertThat(executionResult.getErrors()).isEmpty();
   }
 
   @Test

File: rejoiner/src/main/java/com/google/api/graphql/rejoiner/SchemaModule.java
Patch:
@@ -167,7 +167,7 @@ protected final void configure() {
                       .description(namespace)
                       .type(
                           GraphQLObjectType.newObject()
-                              .name("__QUERY_FIELD_GROUP__" + namespace)
+                              .name("_QUERY_FIELD_GROUP_" + namespace)
                               .fields(allQueriesInModule)
                               .build())
                       .build());
@@ -182,7 +182,7 @@ protected final void configure() {
                       .description(namespace)
                       .type(
                           GraphQLObjectType.newObject()
-                              .name("__MUTATION_FIELD_GROUP__" + namespace)
+                              .name("_MUTATION_FIELD_GROUP_" + namespace)
                               .fields(allMutationsInModule)
                               .build())
                       .build());

File: schema/src/main/java/com/google/api/graphql/schema/protobuf/TimestampSchemaModule.java
Patch:
@@ -34,8 +34,9 @@ Boolean isAfterNow(Timestamp timestamp) {
     return Instant.ofEpochSecond(timestamp.getSeconds()).isAfter(Instant.now());
   }
 
-  @SchemaModification(addField = "afterNow", onType = Timestamp.class)
+  @SchemaModification(addField = "localTime", onType = Timestamp.class)
   String localTime(Timestamp timestamp, @Arg("timezone") String timezone) {
+    // TODO: Arg should be required, optional should be optional
     return Instant.ofEpochSecond(timestamp.getSeconds()).atZone(ZoneId.of(timezone)).toString();
   }
 }

File: rejoiner/src/main/java/com/google/api/graphql/rejoiner/SchemaModule.java
Patch:
@@ -403,7 +403,7 @@ private ImmutableList<MethodMetadata> getMethodMetadata(
                         requestDescriptor, message.toBuilder(), environment.getArgument(argName));
                 return req;
               };
-          GraphQLArgument argument = inputConverter.createArgument(requestDescriptor, argName);
+          GraphQLArgument argument = GqlInputConverter.createArgument(requestDescriptor, argName);
           listBuilder.add(MethodMetadata.create(function, argument));
         }
       } else if (DataFetchingEnvironment.class.isAssignableFrom(parameterType)) {

File: rejoiner/src/main/javatests/com/google/api/graphql/rejoiner/GqlInputConverterTest.java
Patch:
@@ -29,10 +29,10 @@
 @RunWith(JUnit4.class)
 public final class GqlInputConverterTest {
 
-  @Test(expected = NullPointerException.class)
-  public void unknownProtoShouldFail() {
+  @Test
+  public void unknownProtoShouldPass() {
     GqlInputConverter inputConverter = GqlInputConverter.newBuilder().build();
-    inputConverter.createArgument(TestProto.Proto1.getDescriptor(), "input");
+    Truth.assertThat(inputConverter.createArgument(Proto1.getDescriptor(), "input")).isNotNull();
   }
 
   @Test

File: rejoiner/src/main/javatests/com/google/api/graphql/rejoiner/RejoinerIntegrationTest.java
Patch:
@@ -51,8 +51,8 @@ ListenableFuture<ImmutableList<ExtraProto>> listOfStuff() {
     }
 
     @Query("greeting")
-    ListenableFuture<GreetingsResponse> greetings(/*TODO: Fix this GreetingsRequest request*/ ) {
-      return Futures.immediateFuture(GreetingsResponse.newBuilder().setId("10").build());
+    ListenableFuture<GreetingsResponse> greetings(GreetingsRequest request) {
+      return Futures.immediateFuture(GreetingsResponse.newBuilder().setId(request.getId()).build());
     }
 
     @SchemaModification(addField = "extraField", onType = GreetingsResponse.class)

File: rejoiner/src/main/javatests/com/google/api/graphql/rejoiner/ProtoToGqlTest.java
Patch:
@@ -52,7 +52,7 @@ public void getReferenceNameShouldReturnCorrectValueForEnums() {
 
   @Test
   public void convertShouldWorkForMessage() {
-    GraphQLObjectType result = ProtoToGql.convert(Proto1.getDescriptor());
+    GraphQLObjectType result = ProtoToGql.convert(Proto1.getDescriptor(), null);
     assertThat(result.getName())
         .isEqualTo("javatests_com_google_api_graphql_rejoiner_proto_Proto1");
     assertThat(result.getFieldDefinitions()).hasSize(4);

File: execution/src/main/java/com/google/api/graphql/execution/GuavaListenableFutureSupport.java
Patch:
@@ -21,8 +21,8 @@
 import graphql.schema.DataFetcher;
 import net.javacrumbs.futureconverter.java8guava.FutureConverter;
 
-public final class GauvaListenableFutureSupport {
-  private GauvaListenableFutureSupport() {}
+public final class GuavaListenableFutureSupport {
+  private GuavaListenableFutureSupport() {}
 
   /**
    * Converts a {@link ListenableFuture} to a Java8 {@link java.util.concurrent.CompletableFuture}.

